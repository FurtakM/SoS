// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5318
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5318
// Say ( Heike , DH-dogtag-found ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_STRING DH-dogtag-found
5313: PPUSH
5314: CALL_OW 88
// end ;
5318: PPOPN 1
5320: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5321: LD_EXP 8
5325: NOT
5326: PUSH
5327: LD_EXP 7
5331: NOT
5332: AND
5333: PUSH
5334: LD_INT 5
5336: PPUSH
5337: LD_EXP 16
5341: PPUSH
5342: CALL_OW 292
5346: AND
5347: PUSH
5348: LD_EXP 16
5352: PPUSH
5353: LD_EXP 17
5357: PPUSH
5358: CALL_OW 296
5362: PUSH
5363: LD_INT 8
5365: LESS
5366: AND
5367: IFFALSE 5752
5369: GO 5371
5371: DISABLE
// begin olafSpotted := true ;
5372: LD_ADDR_EXP 8
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if HasTask ( Olaf ) then
5380: LD_EXP 17
5384: PPUSH
5385: CALL_OW 314
5389: IFFALSE 5400
// ComStop ( Olaf ) ;
5391: LD_EXP 17
5395: PPUSH
5396: CALL_OW 141
// InGameOn ;
5400: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5404: LD_EXP 17
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: CALL_OW 296
5418: PUSH
5419: LD_INT 8
5421: GREATER
5422: IFFALSE 5438
// ComMoveUnit ( Olaf , Heike ) ;
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5438: LD_INT 35
5440: PPUSH
5441: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5445: LD_EXP 17
5449: PPUSH
5450: LD_EXP 16
5454: PPUSH
5455: CALL_OW 296
5459: PUSH
5460: LD_INT 8
5462: LESSEQUAL
5463: IFFALSE 5438
// ComTurnUnit ( Heike , Olaf ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5479: LD_EXP 17
5483: PPUSH
5484: LD_EXP 16
5488: PPUSH
5489: CALL_OW 119
// DialogueOn ;
5493: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5497: LD_EXP 17
5501: PPUSH
5502: LD_STRING DO-olaf-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5509: LD_EXP 16
5513: PPUSH
5514: LD_STRING DH-olaf-1
5516: PPUSH
5517: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5521: LD_EXP 17
5525: PPUSH
5526: LD_STRING DO-olaf-2
5528: PPUSH
5529: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5533: LD_EXP 16
5537: PPUSH
5538: LD_STRING DH-olaf-2
5540: PPUSH
5541: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_STRING DO-olaf-3
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5557: LD_EXP 17
5561: PPUSH
5562: LD_STRING DO-olaf-4
5564: PPUSH
5565: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DH-olaf-4
5576: PPUSH
5577: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5581: LD_EXP 17
5585: PPUSH
5586: LD_STRING DO-olaf-5
5588: PPUSH
5589: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5593: LD_EXP 16
5597: PPUSH
5598: LD_STRING DH-olaf-5
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING DO-olaf-6
5612: PPUSH
5613: CALL_OW 88
// if russianSpotted or johnnySaved then
5617: LD_EXP 9
5621: PUSH
5622: LD_EXP 4
5626: OR
5627: IFFALSE 5655
// begin Say ( Heike , DH-olaf-6a ) ;
5629: LD_EXP 16
5633: PPUSH
5634: LD_STRING DH-olaf-6a
5636: PPUSH
5637: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5641: LD_EXP 17
5645: PPUSH
5646: LD_STRING DO-olaf-7a
5648: PPUSH
5649: CALL_OW 88
// end else
5653: GO 5679
// begin Say ( Heike , DH-olaf-6b ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DH-olaf-6b
5662: PPUSH
5663: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5667: LD_EXP 17
5671: PPUSH
5672: LD_STRING DO-olaf-7b
5674: PPUSH
5675: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5679: LD_EXP 17
5683: PPUSH
5684: LD_STRING DO-olaf-8
5686: PPUSH
5687: CALL_OW 88
// DialogueOff ;
5691: CALL_OW 7
// InGameOff ;
5695: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5699: LD_STRING O3_camp_cont
5701: PPUSH
5702: CALL_OW 337
// if not johnnySaved then
5706: LD_EXP 4
5710: NOT
5711: IFFALSE 5722
// KillUnit ( Johnny ) ;
5713: LD_EXP 25
5717: PPUSH
5718: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_INT 52
5729: PPUSH
5730: LD_INT 90
5732: PPUSH
5733: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_INT 53
5744: PPUSH
5745: LD_INT 89
5747: PPUSH
5748: CALL_OW 178
// end ;
5752: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5753: LD_EXP 8
5757: NOT
5758: PUSH
5759: LD_EXP 16
5763: PPUSH
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 296
5773: PUSH
5774: LD_INT 36
5776: LESS
5777: AND
5778: IFFALSE 5798
5780: GO 5782
5782: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5783: LD_EXP 17
5787: PPUSH
5788: LD_INT 39
5790: PPUSH
5791: LD_INT 71
5793: PPUSH
5794: CALL_OW 111
5798: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5799: LD_EXP 7
5803: NOT
5804: PUSH
5805: LD_INT 2
5807: PPUSH
5808: LD_EXP 19
5812: PPUSH
5813: CALL_OW 292
5817: PUSH
5818: LD_INT 2
5820: PPUSH
5821: LD_EXP 18
5825: PPUSH
5826: CALL_OW 292
5830: OR
5831: AND
5832: IFFALSE 7153
5834: GO 5836
5836: DISABLE
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin if not johnnySaved then
5842: LD_EXP 4
5846: NOT
5847: IFFALSE 5858
// KillUnit ( Johnny ) ;
5849: LD_EXP 25
5853: PPUSH
5854: CALL_OW 66
// mercenariesSpotted := true ;
5858: LD_ADDR_EXP 7
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5866: LD_STRING O4_camp_cont
5868: PPUSH
5869: CALL_OW 337
// InGameOn ;
5873: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5877: LD_INT 53
5879: PPUSH
5880: LD_INT 89
5882: PPUSH
5883: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5887: LD_INT 53
5889: PPUSH
5890: LD_INT 89
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 8
5898: NEG
5899: PPUSH
5900: CALL_OW 330
// if olafSpotted then
5904: LD_EXP 8
5908: IFFALSE 6026
// begin AddComTurnUnit ( Olaf , Heike ) ;
5910: LD_EXP 17
5914: PPUSH
5915: LD_EXP 16
5919: PPUSH
5920: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 51
5931: PPUSH
5932: LD_INT 86
5934: PPUSH
5935: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5939: LD_EXP 16
5943: PPUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5953: LD_EXP 17
5957: PPUSH
5958: LD_STRING DO-camp-1
5960: PPUSH
5961: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5965: LD_EXP 18
5969: PUSH
5970: LD_EXP 19
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: LD_EXP 16
5983: PPUSH
5984: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5988: LD_EXP 18
5992: PPUSH
5993: LD_STRING DG-camp-1
5995: PPUSH
5996: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6000: LD_EXP 16
6004: PPUSH
6005: LD_STRING DH-camp-1
6007: PPUSH
6008: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6012: LD_EXP 17
6016: PPUSH
6017: LD_STRING DO-camp-2
6019: PPUSH
6020: CALL_OW 88
// end else
6024: GO 6421
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: LD_INT 51
6033: PPUSH
6034: LD_INT 86
6036: PPUSH
6037: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6041: LD_EXP 16
6045: PPUSH
6046: LD_EXP 18
6050: PPUSH
6051: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6055: LD_EXP 18
6059: PUSH
6060: LD_EXP 19
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: LD_EXP 16
6073: PPUSH
6074: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6078: LD_EXP 18
6082: PPUSH
6083: LD_STRING DG-camp-1a
6085: PPUSH
6086: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6090: LD_EXP 16
6094: PPUSH
6095: LD_STRING DH-camp-1a
6097: PPUSH
6098: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6109: LD_EXP 19
6113: PPUSH
6114: LD_EXP 17
6118: PPUSH
6119: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6123: LD_EXP 19
6127: PPUSH
6128: LD_STRING DM-camp-1a
6130: PPUSH
6131: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6135: LD_EXP 17
6139: PPUSH
6140: LD_INT 52
6142: PPUSH
6143: LD_INT 90
6145: PPUSH
6146: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_EXP 16
6159: PPUSH
6160: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6164: LD_EXP 18
6168: PPUSH
6169: LD_STRING DG-camp-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6176: LD_EXP 16
6180: PPUSH
6181: LD_STRING DH-camp-2a
6183: PPUSH
6184: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6188: LD_EXP 19
6192: PPUSH
6193: LD_STRING DM-camp-2a
6195: PPUSH
6196: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6207: LD_EXP 17
6211: PPUSH
6212: LD_EXP 16
6216: PPUSH
6217: CALL_OW 296
6221: PUSH
6222: LD_INT 10
6224: LESS
6225: IFFALSE 6200
// AddComTurnUnit ( Olaf , Heike ) ;
6227: LD_EXP 17
6231: PPUSH
6232: LD_EXP 16
6236: PPUSH
6237: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6241: LD_EXP 19
6245: PPUSH
6246: LD_EXP 16
6250: PPUSH
6251: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6255: LD_EXP 17
6259: PPUSH
6260: LD_STRING DO-camp-2a
6262: PPUSH
6263: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6267: LD_EXP 16
6271: PPUSH
6272: LD_EXP 17
6276: PPUSH
6277: CALL_OW 119
// if russianSpotted then
6281: LD_EXP 9
6285: IFFALSE 6325
// begin Say ( Heike , DH-camp-2aa ) ;
6287: LD_EXP 16
6291: PPUSH
6292: LD_STRING DH-camp-2aa
6294: PPUSH
6295: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6299: LD_EXP 18
6303: PPUSH
6304: LD_STRING DG-camp-2aa
6306: PPUSH
6307: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6311: LD_EXP 19
6315: PPUSH
6316: LD_STRING DM-camp-2aa
6318: PPUSH
6319: CALL_OW 88
// end else
6323: GO 6349
// begin Say ( Heike , DH-camp-2ab ) ;
6325: LD_EXP 16
6329: PPUSH
6330: LD_STRING DH-camp-2ab
6332: PPUSH
6333: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6337: LD_EXP 19
6341: PPUSH
6342: LD_STRING DM-camp-2ab
6344: PPUSH
6345: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6349: LD_EXP 16
6353: PPUSH
6354: LD_STRING DH-camp-3a
6356: PPUSH
6357: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6361: LD_EXP 17
6365: PPUSH
6366: LD_STRING DO-camp-3a
6368: PPUSH
6369: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6373: LD_EXP 18
6377: PPUSH
6378: LD_STRING DG-camp-3a
6380: PPUSH
6381: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6385: LD_EXP 16
6389: PPUSH
6390: LD_STRING DH-camp-4aa
6392: PPUSH
6393: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6397: LD_EXP 19
6401: PPUSH
6402: LD_STRING DM-camp-4aa
6404: PPUSH
6405: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6409: LD_EXP 17
6413: PPUSH
6414: LD_STRING DO-camp-4a
6416: PPUSH
6417: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DO-camp-3
6428: PPUSH
6429: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6433: LD_EXP 17
6437: PPUSH
6438: LD_STRING DO-camp-4
6440: PPUSH
6441: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6445: LD_EXP 18
6449: PPUSH
6450: LD_EXP 17
6454: PPUSH
6455: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6459: LD_EXP 18
6463: PPUSH
6464: LD_STRING DG-camp-4
6466: PPUSH
6467: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6471: LD_EXP 16
6475: PPUSH
6476: LD_EXP 18
6480: PPUSH
6481: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6485: LD_EXP 16
6489: PPUSH
6490: LD_STRING DH-camp-4
6492: PPUSH
6493: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6497: LD_EXP 19
6501: PUSH
6502: LD_EXP 17
6506: PUSH
6507: LD_EXP 18
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: PPUSH
6517: LD_EXP 16
6521: PPUSH
6522: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6526: LD_EXP 18
6530: PPUSH
6531: LD_STRING DG-camp-5
6533: PPUSH
6534: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6538: LD_EXP 18
6542: PPUSH
6543: LD_STRING DG-camp-6
6545: PPUSH
6546: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6550: LD_EXP 16
6554: PPUSH
6555: LD_STRING DH-camp-6
6557: PPUSH
6558: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6562: LD_EXP 18
6566: PPUSH
6567: LD_STRING DG-camp-7
6569: PPUSH
6570: CALL_OW 88
// if DogTagFound then
6574: LD_EXP 6
6578: IFFALSE 6618
// begin Say ( Heike , DH-quest-1a ) ;
6580: LD_EXP 16
6584: PPUSH
6585: LD_STRING DH-quest-1a
6587: PPUSH
6588: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6592: LD_EXP 18
6596: PPUSH
6597: LD_STRING DG-quest-1a
6599: PPUSH
6600: CALL_OW 88
// mercenariesQuestDone := true ;
6604: LD_ADDR_EXP 11
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// InGameOff ;
6612: CALL_OW 9
// end else
6616: GO 6784
// begin Say ( Heike , DH-camp-7 ) ;
6618: LD_EXP 16
6622: PPUSH
6623: LD_STRING DH-camp-7
6625: PPUSH
6626: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6630: LD_EXP 16
6634: PPUSH
6635: CALL_OW 256
6639: PUSH
6640: LD_INT 1000
6642: LESS
6643: IFFALSE 6735
// begin Say ( Olaf , DO-heal-1 ) ;
6645: LD_EXP 17
6649: PPUSH
6650: LD_STRING DO-heal-1
6652: PPUSH
6653: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6657: LD_EXP 16
6661: PPUSH
6662: LD_INT 51
6664: PPUSH
6665: LD_INT 88
6667: PPUSH
6668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6672: LD_INT 35
6674: PPUSH
6675: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6679: LD_EXP 16
6683: PPUSH
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 296
6693: PUSH
6694: LD_INT 4
6696: LESS
6697: PUSH
6698: LD_EXP 16
6702: PPUSH
6703: LD_INT 51
6705: PPUSH
6706: LD_INT 88
6708: PPUSH
6709: CALL_OW 307
6713: OR
6714: IFFALSE 6672
// SetLives ( Heike , 1000 ) ;
6716: LD_EXP 16
6720: PPUSH
6721: LD_INT 1000
6723: PPUSH
6724: CALL_OW 234
// wait ( 0 0$2 ) ;
6728: LD_INT 70
6730: PPUSH
6731: CALL_OW 67
// end ; InGameOff ;
6735: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 18
6748: PUSH
6749: LD_EXP 19
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PPUSH
6759: LD_INT 53
6761: PPUSH
6762: LD_INT 89
6764: PPUSH
6765: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6769: LD_STRING O5_proof_cont
6771: PPUSH
6772: CALL_OW 337
// mercenariesQuestReady := true ;
6776: LD_ADDR_EXP 10
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6784: LD_EXP 10
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7153
// wait ( 0 0$35 ) ;
6793: LD_INT 1225
6795: PPUSH
6796: CALL_OW 67
// driver := PreparePatrolTank ;
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: CALL 2821 0 0
6809: ST_TO_ADDR
// if not driver then
6810: LD_VAR 0 2
6814: NOT
6815: IFFALSE 6819
// exit ;
6817: GO 7153
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6819: LD_INT 2
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 2
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_VAR 0 2
6844: PPUSH
6845: CALL_OW 310
6849: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6850: LD_VAR 0 3
6854: PPUSH
6855: LD_INT 500
6857: PPUSH
6858: CALL_OW 234
// SetLives ( driver , 450 ) ;
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_INT 450
6869: PPUSH
6870: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6874: LD_VAR 0 2
6878: PPUSH
6879: LD_INT 59
6881: PPUSH
6882: LD_INT 60
6884: PPUSH
6885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6889: LD_INT 35
6891: PPUSH
6892: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6896: LD_VAR 0 3
6900: PPUSH
6901: LD_INT 59
6903: PPUSH
6904: LD_INT 60
6906: PPUSH
6907: CALL_OW 307
6911: IFFALSE 6889
// if not See ( 1 , Heike ) then
6913: LD_INT 1
6915: PPUSH
6916: LD_EXP 16
6920: PPUSH
6921: CALL_OW 292
6925: NOT
6926: IFFALSE 7050
// begin if Difficulty < 3 then
6928: LD_OWVAR 67
6932: PUSH
6933: LD_INT 3
6935: LESS
6936: IFFALSE 6954
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6938: LD_INT 59
6940: PPUSH
6941: LD_INT 60
6943: PPUSH
6944: LD_INT 2
6946: PPUSH
6947: LD_INT 6
6949: PPUSH
6950: CALL_OW 330
// ComExitVehicle ( driver ) ;
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 121
// wait ( 0 0$1 ) ;
6963: LD_INT 35
6965: PPUSH
6966: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 58
6977: PPUSH
6978: LD_INT 54
6980: PPUSH
6981: CALL_OW 171
// wait ( 0 0$1 ) ;
6985: LD_INT 35
6987: PPUSH
6988: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6992: LD_VAR 0 2
6996: PPUSH
6997: LD_INT 57
6999: PPUSH
7000: LD_INT 53
7002: PPUSH
7003: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 350
7014: PPUSH
7015: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 107
7040: PPUSH
7041: LD_INT 118
7043: PPUSH
7044: CALL_OW 171
// end else
7048: GO 7065
// begin ComMoveXY ( driver , 107 , 118 ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: LD_INT 107
7057: PPUSH
7058: LD_INT 118
7060: PPUSH
7061: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_INT 107
7079: PPUSH
7080: LD_INT 118
7082: PPUSH
7083: CALL_OW 307
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 301
7097: OR
7098: IFFALSE 7065
// if IsDead ( driver [ 1 ] ) then
7100: LD_VAR 0 2
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: CALL_OW 301
7113: IFFALSE 7117
// exit ;
7115: GO 7153
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 1
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7151
// RemoveUnit ( i ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 64
7149: GO 7137
7151: POP
7152: POP
// end ;
7153: PPOPN 3
7155: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7156: LD_INT 10
7158: PPUSH
7159: LD_INT 22
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 2
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 70
7187: IFFALSE 7261
7189: GO 7191
7191: DISABLE
// begin InGameOn ;
7192: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7196: LD_EXP 17
7200: PUSH
7201: LD_EXP 19
7205: PUSH
7206: LD_EXP 18
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: PPUSH
7216: LD_EXP 16
7220: PPUSH
7221: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7225: LD_EXP 19
7229: PPUSH
7230: LD_STRING DM-quest-1
7232: PPUSH
7233: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7237: LD_EXP 18
7241: PPUSH
7242: LD_STRING DG-quest-1
7244: PPUSH
7245: CALL_OW 88
// InGameOff ;
7249: CALL_OW 9
// mercenariesQuestDone := true ;
7253: LD_ADDR_EXP 11
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// end ;
7261: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7262: LD_EXP 16
7266: PPUSH
7267: LD_INT 10
7269: PPUSH
7270: CALL_OW 308
7274: PUSH
7275: LD_EXP 6
7279: AND
7280: PUSH
7281: LD_EXP 10
7285: AND
7286: PUSH
7287: LD_INT 10
7289: PPUSH
7290: LD_INT 22
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 21
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 70
7318: NOT
7319: AND
7320: IFFALSE 7492
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
// begin InGameOn ;
7328: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7332: LD_EXP 17
7336: PUSH
7337: LD_EXP 19
7341: PUSH
7342: LD_EXP 18
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PPUSH
7352: LD_EXP 16
7356: PPUSH
7357: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7361: LD_EXP 16
7365: PPUSH
7366: LD_INT 54
7368: PPUSH
7369: LD_INT 86
7371: PPUSH
7372: CALL_OW 111
// p := p + 1 ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PLUS
7389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7390: LD_INT 35
7392: PPUSH
7393: CALL_OW 67
// p := p + 1 ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7411: LD_EXP 16
7415: PPUSH
7416: LD_EXP 18
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 4
7428: LESS
7429: PUSH
7430: LD_VAR 0 1
7434: PUSH
7435: LD_INT 5
7437: GREATER
7438: OR
7439: IFFALSE 7390
// Say ( Mike , DM-quest-1 ) ;
7441: LD_EXP 19
7445: PPUSH
7446: LD_STRING DM-quest-1
7448: PPUSH
7449: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7453: LD_EXP 18
7457: PPUSH
7458: LD_STRING DG-quest-1
7460: PPUSH
7461: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7465: LD_EXP 16
7469: PPUSH
7470: LD_INT 55
7472: PPUSH
7473: LD_INT 87
7475: PPUSH
7476: CALL_OW 111
// InGameOff ;
7480: CALL_OW 9
// mercenariesQuestDone := true ;
7484: LD_ADDR_EXP 11
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// end ;
7492: PPOPN 1
7494: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7495: LD_EXP 16
7499: PUSH
7500: LD_INT 55
7502: PUSH
7503: EMPTY
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: IN
7511: IFFALSE 7551
7513: GO 7515
7515: DISABLE
// begin if Difficulty < 3 then
7516: LD_OWVAR 67
7520: PUSH
7521: LD_INT 3
7523: LESS
7524: IFFALSE 7539
// RemoveSeeing ( 59 , 60 , 2 ) ;
7526: LD_INT 59
7528: PPUSH
7529: LD_INT 60
7531: PPUSH
7532: LD_INT 2
7534: PPUSH
7535: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7539: LD_EXP 16
7543: PPUSH
7544: LD_STRING DH-driver
7546: PPUSH
7547: CALL_OW 88
// end ;
7551: END
// every 0 0$1 trigger mercenariesQuestDone do
7552: LD_EXP 11
7556: IFFALSE 8044
7558: GO 7560
7560: DISABLE
// begin if mercenariesQuestReady then
7561: LD_EXP 10
7565: IFFALSE 7574
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7567: LD_STRING O5_proof_cont_out
7569: PPUSH
7570: CALL_OW 337
// InGameOn ;
7574: CALL_OW 8
// if IsInUnit ( Heike ) then
7578: LD_EXP 16
7582: PPUSH
7583: CALL_OW 310
7587: IFFALSE 7598
// ComExitVehicle ( Heike ) ;
7589: LD_EXP 16
7593: PPUSH
7594: CALL_OW 121
// wait ( 3 ) ;
7598: LD_INT 3
7600: PPUSH
7601: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7605: LD_EXP 16
7609: PPUSH
7610: LD_EXP 18
7614: PPUSH
7615: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7619: LD_EXP 17
7623: PUSH
7624: LD_EXP 19
7628: PUSH
7629: LD_EXP 18
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: LD_EXP 16
7643: PPUSH
7644: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7648: LD_EXP 16
7652: PPUSH
7653: LD_STRING DH-quest-done-1
7655: PPUSH
7656: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7660: LD_EXP 19
7664: PPUSH
7665: LD_STRING DM-quest-done-1
7667: PPUSH
7668: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7672: LD_EXP 18
7676: PPUSH
7677: LD_STRING DG-quest-done-1
7679: PPUSH
7680: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7684: LD_EXP 16
7688: PPUSH
7689: LD_EXP 17
7693: PPUSH
7694: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7698: LD_EXP 16
7702: PPUSH
7703: LD_STRING DH-quest-done-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7710: LD_EXP 17
7714: PPUSH
7715: LD_STRING DO-quest-done-2
7717: PPUSH
7718: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7722: LD_EXP 17
7726: PPUSH
7727: LD_STRING DO-quest-done-3
7729: PPUSH
7730: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7734: LD_EXP 18
7738: PPUSH
7739: LD_INT 51
7741: PPUSH
7742: LD_INT 90
7744: PPUSH
7745: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7749: LD_EXP 18
7753: PPUSH
7754: LD_INT 50
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7764: LD_EXP 16
7768: PPUSH
7769: LD_EXP 18
7773: PPUSH
7774: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7778: LD_EXP 18
7782: PPUSH
7783: LD_STRING DG-quest-done-4
7785: PPUSH
7786: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7790: LD_EXP 18
7794: PPUSH
7795: LD_EXP 16
7799: PPUSH
7800: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7804: LD_EXP 16
7808: PPUSH
7809: CALL_OW 256
7813: PUSH
7814: LD_INT 1000
7816: LESS
7817: IFFALSE 7909
// begin Say ( Olaf , DO-heal-1 ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING DO-heal-1
7826: PPUSH
7827: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7831: LD_EXP 16
7835: PPUSH
7836: LD_INT 51
7838: PPUSH
7839: LD_INT 88
7841: PPUSH
7842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7846: LD_INT 35
7848: PPUSH
7849: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7853: LD_EXP 16
7857: PPUSH
7858: LD_EXP 17
7862: PPUSH
7863: CALL_OW 296
7867: PUSH
7868: LD_INT 4
7870: LESS
7871: PUSH
7872: LD_EXP 16
7876: PPUSH
7877: LD_INT 51
7879: PPUSH
7880: LD_INT 88
7882: PPUSH
7883: CALL_OW 307
7887: OR
7888: IFFALSE 7846
// SetLives ( Heike , 1000 ) ;
7890: LD_EXP 16
7894: PPUSH
7895: LD_INT 1000
7897: PPUSH
7898: CALL_OW 234
// wait ( 0 0$2 ) ;
7902: LD_INT 70
7904: PPUSH
7905: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7909: LD_EXP 16
7913: PPUSH
7914: LD_STRING DH-quest-done-4
7916: PPUSH
7917: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7921: LD_EXP 17
7925: PPUSH
7926: LD_STRING DO-quest-done-4
7928: PPUSH
7929: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7933: LD_EXP 16
7937: PPUSH
7938: LD_EXP 17
7942: PPUSH
7943: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7947: LD_EXP 16
7951: PPUSH
7952: LD_STRING DH-quest-done-5
7954: PPUSH
7955: CALL_OW 88
// InGameOff ;
7959: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7963: LD_STRING O6_end_cont
7965: PPUSH
7966: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7970: LD_EXP 18
7974: PPUSH
7975: LD_INT 2
7977: PPUSH
7978: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7982: LD_EXP 19
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7994: LD_INT 42
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8007: LD_EXP 17
8011: PPUSH
8012: LD_INT 53
8014: PPUSH
8015: LD_INT 89
8017: PPUSH
8018: CALL_OW 118
// lastObjectiveActive := true ;
8022: LD_ADDR_EXP 12
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 424
// PreparePrison ;
8040: CALL 1164 0 0
// end ;
8044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8045: LD_INT 22
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 91
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 4
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: IFFALSE 8235
8079: GO 8081
8081: DISABLE
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8086: LD_INT 245
8088: PUSH
8089: LD_INT 210
8091: PUSH
8092: LD_INT 210
8094: PUSH
8095: LD_INT 175
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_OWVAR 67
8108: ARRAY
8109: PPUSH
8110: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: EMPTY
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: ST_TO_ADDR
// if not tmp then
8155: LD_VAR 0 2
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8235
// for i in tmp do
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 121
8193: PPUSH
8194: LD_INT 22
8196: PPUSH
8197: CALL_OW 174
// end ;
8201: GO 8174
8203: POP
8204: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8205: LD_EXP 23
8209: PPUSH
8210: LD_INT 121
8212: PPUSH
8213: LD_INT 22
8215: PPUSH
8216: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_INT 121
8227: PPUSH
8228: LD_INT 22
8230: PPUSH
8231: CALL_OW 114
// end ;
8235: PPOPN 2
8237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8238: LD_INT 22
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 91
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: IFFALSE 8428
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8279: LD_INT 315
8281: PUSH
8282: LD_INT 280
8284: PUSH
8285: LD_INT 245
8287: PUSH
8288: LD_INT 210
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: PUSH
8297: LD_OWVAR 67
8301: ARRAY
8302: PPUSH
8303: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_INT 22
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 54
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// if not tmp then
8348: LD_VAR 0 2
8352: NOT
8353: IFFALSE 8357
// exit ;
8355: GO 8428
// for i in tmp do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8396
// begin ComExitBuilding ( i ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_INT 142
8386: PPUSH
8387: LD_INT 71
8389: PPUSH
8390: CALL_OW 174
// end ;
8394: GO 8367
8396: POP
8397: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8398: LD_EXP 23
8402: PPUSH
8403: LD_INT 142
8405: PPUSH
8406: LD_INT 71
8408: PPUSH
8409: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8413: LD_EXP 24
8417: PPUSH
8418: LD_INT 142
8420: PPUSH
8421: LD_INT 71
8423: PPUSH
8424: CALL_OW 114
// end ;
8428: PPOPN 2
8430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8431: LD_INT 22
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 58
8453: PUSH
8454: EMPTY
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 24
8462: PUSH
8463: LD_INT 1000
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 91
8476: PUSH
8477: LD_EXP 17
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 69
8501: PUSH
8502: LD_EXP 17
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: IFFALSE 8626
8514: GO 8516
8516: DISABLE
// begin enable ;
8517: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8518: LD_EXP 17
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 58
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 1000
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_INT 8
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: PPUSH
8598: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8602: LD_EXP 17
8606: PPUSH
8607: LD_INT 52
8609: PPUSH
8610: LD_INT 90
8612: PPUSH
8613: CALL_OW 171
// AddComHold ( Olaf ) ;
8617: LD_EXP 17
8621: PPUSH
8622: CALL_OW 200
// end ;
8626: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8627: LD_EXP 12
8631: PUSH
8632: LD_INT 2
8634: PPUSH
8635: CALL_OW 302
8639: NOT
8640: AND
8641: PUSH
8642: LD_OWVAR 67
8646: PUSH
8647: LD_INT 1
8649: EQUAL
8650: AND
8651: PUSH
8652: LD_EXP 13
8656: NOT
8657: AND
8658: IFFALSE 8675
8660: GO 8662
8662: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8663: LD_EXP 16
8667: PPUSH
8668: LD_STRING DH-prison-missing
8670: PPUSH
8671: CALL_OW 88
// end ;
8675: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8676: LD_EXP 12
8680: PUSH
8681: LD_INT 8
8683: PPUSH
8684: CALL_OW 302
8688: NOT
8689: AND
8690: PUSH
8691: LD_OWVAR 67
8695: PUSH
8696: LD_INT 1
8698: GREATER
8699: AND
8700: PUSH
8701: LD_EXP 13
8705: NOT
8706: AND
8707: IFFALSE 8724
8709: GO 8711
8711: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8712: LD_EXP 16
8716: PPUSH
8717: LD_STRING DH-prison-missing
8719: PPUSH
8720: CALL_OW 88
// end ;
8724: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8725: LD_EXP 12
8729: PUSH
8730: LD_INT 3
8732: PPUSH
8733: CALL_OW 302
8737: NOT
8738: AND
8739: PUSH
8740: LD_EXP 13
8744: NOT
8745: AND
8746: IFFALSE 8763
8748: GO 8750
8750: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8751: LD_EXP 16
8755: PPUSH
8756: LD_STRING DH-prison-missing-a
8758: PPUSH
8759: CALL_OW 88
// end ;
8763: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8764: LD_EXP 12
8768: PUSH
8769: LD_INT 10
8771: PPUSH
8772: CALL_OW 302
8776: NOT
8777: AND
8778: PUSH
8779: LD_EXP 13
8783: NOT
8784: AND
8785: IFFALSE 8802
8787: GO 8789
8789: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8790: LD_EXP 16
8794: PPUSH
8795: LD_STRING DH-prison-missing-a
8797: PPUSH
8798: CALL_OW 88
// end ;
8802: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8803: LD_EXP 13
8807: NOT
8808: PUSH
8809: LD_EXP 12
8813: AND
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: LD_EXP 20
8822: PPUSH
8823: CALL_OW 292
8827: AND
8828: IFFALSE 8915
8830: GO 8832
8832: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8833: LD_EXP 20
8837: PPUSH
8838: LD_EXP 16
8842: PPUSH
8843: CALL_OW 119
// DialogueOn ;
8847: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8851: LD_EXP 20
8855: PPUSH
8856: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_STRING DK-prison-found
8867: PPUSH
8868: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8872: LD_EXP 16
8876: PPUSH
8877: LD_STRING DH-prison-found
8879: PPUSH
8880: CALL_OW 88
// DialogueOff ;
8884: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8888: LD_EXP 20
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: CALL_OW 235
// prisonFound := true ;
8900: LD_ADDR_EXP 13
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8908: LD_STRING O6_prison_out
8910: PPUSH
8911: CALL_OW 337
// end ;
8915: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8916: LD_EXP 16
8920: PPUSH
8921: CALL_OW 256
8925: PUSH
8926: LD_INT 500
8928: LESS
8929: IFFALSE 8942
8931: GO 8933
8933: DISABLE
// heikeHurt := true ;
8934: LD_ADDR_EXP 14
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
8942: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8943: LD_INT 22
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: IFFALSE 9287
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
8980: PPUSH
// begin uc_side := 3 ;
8981: LD_ADDR_OWVAR 20
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// uc_nation := 3 ;
8989: LD_ADDR_OWVAR 21
8993: PUSH
8994: LD_INT 3
8996: ST_TO_ADDR
// tmp := [ ] ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// for i := 1 to 5 do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_INT 5
9016: PUSH
9017: FOR_TO
9018: IFFALSE 9126
// begin PrepareHuman ( false , 1 , 4 ) ;
9020: LD_INT 0
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: LD_INT 4
9028: PPUSH
9029: CALL_OW 380
// un := CreateHuman ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: CALL_OW 44
9042: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 4
9050: PPUSH
9051: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_INT 158
9062: PPUSH
9063: LD_INT 80
9065: PPUSH
9066: LD_INT 0
9068: PPUSH
9069: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9073: LD_VAR 0 3
9077: PPUSH
9078: LD_INT 147
9080: PPUSH
9081: LD_INT 75
9083: PPUSH
9084: CALL_OW 111
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 2
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: CALL_OW 1
9123: ST_TO_ADDR
// end ;
9124: GO 9017
9126: POP
9127: POP
// repeat wait ( 0 0$1 ) ;
9128: LD_INT 35
9130: PPUSH
9131: CALL_OW 67
// for i in tmp do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: LD_VAR 0 2
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9267
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9178: LD_VAR 0 3
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 250
9191: PPUSH
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: ARRAY
9200: PPUSH
9201: CALL_OW 251
9205: PPUSH
9206: CALL_OW 428
9210: IFFALSE 9251
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 250
9230: PPUSH
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: CALL_OW 251
9244: PPUSH
9245: CALL_OW 114
9249: GO 9265
// ComAttackUnit ( i , Heike ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_EXP 16
9260: PPUSH
9261: CALL_OW 115
// end ;
9265: GO 9145
9267: POP
9268: POP
// until IsDead ( Heike ) or not tmp ;
9269: LD_EXP 16
9273: PPUSH
9274: CALL_OW 301
9278: PUSH
9279: LD_VAR 0 2
9283: NOT
9284: OR
9285: IFFALSE 9128
// end ;
9287: PPOPN 3
9289: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9290: LD_EXP 12
9294: PUSH
9295: LD_EXP 16
9299: PPUSH
9300: CALL_OW 302
9304: AND
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 22
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 50
9331: PUSH
9332: EMPTY
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 71
9344: PUSH
9345: LD_INT 0
9347: EQUAL
9348: AND
9349: IFFALSE 9712
9351: GO 9353
9353: DISABLE
9354: LD_INT 0
9356: PPUSH
// begin if not heikeHurt then
9357: LD_EXP 14
9361: NOT
9362: IFFALSE 9371
// SetAchievement ( ACH_INVINCIBLE ) ;
9364: LD_STRING ACH_INVINCIBLE
9366: PPUSH
9367: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9371: LD_STRING enableBioCharacter(BIO_GIVI)
9373: PPUSH
9374: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9378: LD_STRING enableBioCharacter(BIO_MIKE)
9380: PPUSH
9381: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9385: LD_STRING enableBioCharacter(BIO_OLAF)
9387: PPUSH
9388: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_INT 22
9399: PUSH
9400: LD_INT 2
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 50
9419: PUSH
9420: EMPTY
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 69
9432: ST_TO_ADDR
// if prisonFound then
9433: LD_EXP 13
9437: IFFALSE 9451
// AddMedal ( med1 , 1 ) else
9439: LD_STRING med1
9441: PPUSH
9442: LD_INT 1
9444: PPUSH
9445: CALL_OW 101
9449: GO 9462
// AddMedal ( med1 , - 1 ) ;
9451: LD_STRING med1
9453: PPUSH
9454: LD_INT 1
9456: NEG
9457: PPUSH
9458: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9462: LD_VAR 0 1
9466: PUSH
9467: LD_INT 3
9469: LESS
9470: PUSH
9471: LD_EXP 13
9475: NOT
9476: AND
9477: PUSH
9478: LD_VAR 0 1
9482: PUSH
9483: LD_INT 4
9485: LESS
9486: PUSH
9487: LD_EXP 13
9491: AND
9492: OR
9493: IFFALSE 9508
// AddMedal ( med2 , - 1 ) else
9495: LD_STRING med2
9497: PPUSH
9498: LD_INT 1
9500: NEG
9501: PPUSH
9502: CALL_OW 101
9506: GO 9518
// AddMedal ( med2 , 1 ) ;
9508: LD_STRING med2
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9518: LD_EXP 13
9522: PUSH
9523: LD_EXP 4
9527: AND
9528: PUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 4
9536: GREATEREQUAL
9537: AND
9538: IFFALSE 9552
// AddMedal ( med3 , 1 ) else
9540: LD_STRING med3
9542: PPUSH
9543: LD_INT 1
9545: PPUSH
9546: CALL_OW 101
9550: GO 9563
// AddMedal ( med3 , - 1 ) ;
9552: LD_STRING med3
9554: PPUSH
9555: LD_INT 1
9557: NEG
9558: PPUSH
9559: CALL_OW 101
// GiveMedals ( MAIN ) ;
9563: LD_STRING MAIN
9565: PPUSH
9566: CALL_OW 102
// RewardPeople ( tmp ) ;
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9579: LD_EXP 4
9583: PPUSH
9584: LD_STRING 01_JohnnySaved
9586: PPUSH
9587: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9591: LD_EXP 16
9595: PPUSH
9596: LD_STRING 01_Heike
9598: PPUSH
9599: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9603: LD_EXP 18
9607: PPUSH
9608: CALL_OW 302
9612: PUSH
9613: LD_EXP 18
9617: PUSH
9618: LD_VAR 0 1
9622: IN
9623: AND
9624: IFFALSE 9638
// SaveCharacters ( Givi , 01_Givi ) ;
9626: LD_EXP 18
9630: PPUSH
9631: LD_STRING 01_Givi
9633: PPUSH
9634: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9638: LD_EXP 19
9642: PPUSH
9643: CALL_OW 302
9647: PUSH
9648: LD_EXP 19
9652: PUSH
9653: LD_VAR 0 1
9657: IN
9658: AND
9659: IFFALSE 9673
// SaveCharacters ( Mike , 01_Mike ) ;
9661: LD_EXP 19
9665: PPUSH
9666: LD_STRING 01_Mike
9668: PPUSH
9669: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 302
9682: PUSH
9683: LD_EXP 20
9687: PUSH
9688: LD_VAR 0 1
9692: IN
9693: AND
9694: IFFALSE 9708
// SaveCharacters ( Kamil , 01_Kamil ) ;
9696: LD_EXP 20
9700: PPUSH
9701: LD_STRING 01_Kamil
9703: PPUSH
9704: CALL_OW 38
// YouWin ;
9708: CALL_OW 103
// end ; end_of_file
9712: PPOPN 1
9714: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9715: LD_VAR 0 1
9719: PUSH
9720: LD_EXP 16
9724: EQUAL
9725: IFFALSE 9734
// YouLost ( Heike ) ;
9727: LD_STRING Heike
9729: PPUSH
9730: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_INT 22
9741: PUSH
9742: LD_INT 3
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 25
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: IN
9768: IFFALSE 9874
// begin if un in russianPatrol then
9770: LD_VAR 0 1
9774: PUSH
9775: LD_EXP 21
9779: IN
9780: IFFALSE 9798
// russianPatrol := russianPatrol diff un ;
9782: LD_ADDR_EXP 21
9786: PUSH
9787: LD_EXP 21
9791: PUSH
9792: LD_VAR 0 1
9796: DIFF
9797: ST_TO_ADDR
// if un in russianForestPatrol then
9798: LD_VAR 0 1
9802: PUSH
9803: LD_EXP 22
9807: IN
9808: IFFALSE 9826
// russianForestPatrol := russianForestPatrol diff un ;
9810: LD_ADDR_EXP 22
9814: PUSH
9815: LD_EXP 22
9819: PUSH
9820: LD_VAR 0 1
9824: DIFF
9825: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9826: LD_ADDR_EXP 5
9830: PUSH
9831: LD_EXP 5
9835: PPUSH
9836: LD_EXP 5
9840: PUSH
9841: LD_INT 1
9843: PLUS
9844: PPUSH
9845: LD_VAR 0 1
9849: PPUSH
9850: CALL_OW 250
9854: PUSH
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL_OW 251
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 1
9873: ST_TO_ADDR
// end ; end ;
9874: PPOPN 1
9876: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_EXP 16
9886: EQUAL
9887: IFFALSE 9896
// YouLost ( Heike ) ;
9889: LD_STRING Heike
9891: PPUSH
9892: CALL_OW 104
// if un = Olaf then
9896: LD_VAR 0 1
9900: PUSH
9901: LD_EXP 17
9905: EQUAL
9906: IFFALSE 9915
// YouLost ( Olaf ) ;
9908: LD_STRING Olaf
9910: PPUSH
9911: CALL_OW 104
// end ;
9915: PPOPN 1
9917: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9918: LD_VAR 0 1
9922: PUSH
9923: LD_INT 2
9925: EQUAL
9926: PUSH
9927: LD_VAR 0 2
9931: PUSH
9932: LD_INT 5
9934: EQUAL
9935: AND
9936: IFFALSE 9945
// YouLost ( FriendlyFire ) ;
9938: LD_STRING FriendlyFire
9940: PPUSH
9941: CALL_OW 104
// end ; end_of_file
9945: PPOPN 2
9947: END
// export globalGameSaveCounter ; every 0 0$1 do
9948: GO 9950
9950: DISABLE
// begin enable ;
9951: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9952: LD_STRING updateTimer(
9954: PUSH
9955: LD_OWVAR 1
9959: STR
9960: PUSH
9961: LD_STRING );
9963: STR
9964: PPUSH
9965: CALL_OW 559
// end ;
9969: END
// every 0 0$1 do
9970: GO 9972
9972: DISABLE
// begin globalGameSaveCounter := 0 ;
9973: LD_ADDR_EXP 26
9977: PUSH
9978: LD_INT 0
9980: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9981: LD_STRING setGameSaveCounter(0)
9983: PPUSH
9984: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9988: LD_STRING initStreamRollete();
9990: PPUSH
9991: CALL_OW 559
// InitStreamMode ;
9995: CALL 11321 0 0
// DefineStreamItems ( false ) ;
9999: LD_INT 0
10001: PPUSH
10002: CALL 11785 0 1
// end ;
10006: END
// export function SOS_MapStart ( ) ; begin
10007: LD_INT 0
10009: PPUSH
// if streamModeActive then
10010: LD_EXP 27
10014: IFFALSE 10023
// DefineStreamItems ( true ) ;
10016: LD_INT 1
10018: PPUSH
10019: CALL 11785 0 1
// UpdateLuaVariables ( ) ;
10023: CALL 10040 0 0
// UpdateFactoryWaypoints ( ) ;
10027: CALL 24646 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10031: CALL 24903 0 0
// end ;
10035: LD_VAR 0 1
10039: RET
// function UpdateLuaVariables ( ) ; begin
10040: LD_INT 0
10042: PPUSH
// if globalGameSaveCounter then
10043: LD_EXP 26
10047: IFFALSE 10081
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10049: LD_ADDR_EXP 26
10053: PUSH
10054: LD_EXP 26
10058: PPUSH
10059: CALL 68860 0 1
10063: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10064: LD_STRING setGameSaveCounter(
10066: PUSH
10067: LD_EXP 26
10071: STR
10072: PUSH
10073: LD_STRING )
10075: STR
10076: PPUSH
10077: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10081: LD_STRING setGameDifficulty(
10083: PUSH
10084: LD_OWVAR 67
10088: STR
10089: PUSH
10090: LD_STRING )
10092: STR
10093: PPUSH
10094: CALL_OW 559
// end ;
10098: LD_VAR 0 1
10102: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10103: LD_INT 0
10105: PPUSH
// if p2 = stream_mode then
10106: LD_VAR 0 2
10110: PUSH
10111: LD_INT 100
10113: EQUAL
10114: IFFALSE 11117
// begin if not StreamModeActive then
10116: LD_EXP 27
10120: NOT
10121: IFFALSE 10131
// StreamModeActive := true ;
10123: LD_ADDR_EXP 27
10127: PUSH
10128: LD_INT 1
10130: ST_TO_ADDR
// if p3 = 0 then
10131: LD_VAR 0 3
10135: PUSH
10136: LD_INT 0
10138: EQUAL
10139: IFFALSE 10145
// InitStreamMode ;
10141: CALL 11321 0 0
// if p3 = 1 then
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 1
10152: EQUAL
10153: IFFALSE 10163
// sRocket := true ;
10155: LD_ADDR_EXP 32
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// if p3 = 2 then
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 2
10170: EQUAL
10171: IFFALSE 10181
// sSpeed := true ;
10173: LD_ADDR_EXP 31
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if p3 = 3 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 3
10188: EQUAL
10189: IFFALSE 10199
// sEngine := true ;
10191: LD_ADDR_EXP 33
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 4 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 4
10206: EQUAL
10207: IFFALSE 10217
// sSpec := true ;
10209: LD_ADDR_EXP 30
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 5 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 5
10224: EQUAL
10225: IFFALSE 10235
// sLevel := true ;
10227: LD_ADDR_EXP 34
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 6 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 6
10242: EQUAL
10243: IFFALSE 10253
// sArmoury := true ;
10245: LD_ADDR_EXP 35
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 7 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 7
10260: EQUAL
10261: IFFALSE 10271
// sRadar := true ;
10263: LD_ADDR_EXP 36
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 8 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 8
10278: EQUAL
10279: IFFALSE 10289
// sBunker := true ;
10281: LD_ADDR_EXP 37
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 9 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 9
10296: EQUAL
10297: IFFALSE 10307
// sHack := true ;
10299: LD_ADDR_EXP 38
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 10 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 10
10314: EQUAL
10315: IFFALSE 10325
// sFire := true ;
10317: LD_ADDR_EXP 39
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 11 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 11
10332: EQUAL
10333: IFFALSE 10343
// sRefresh := true ;
10335: LD_ADDR_EXP 40
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 12 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 12
10350: EQUAL
10351: IFFALSE 10361
// sExp := true ;
10353: LD_ADDR_EXP 41
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 13 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 13
10368: EQUAL
10369: IFFALSE 10379
// sDepot := true ;
10371: LD_ADDR_EXP 42
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 14 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 14
10386: EQUAL
10387: IFFALSE 10397
// sFlag := true ;
10389: LD_ADDR_EXP 43
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 15 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 15
10404: EQUAL
10405: IFFALSE 10415
// sKamikadze := true ;
10407: LD_ADDR_EXP 51
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 16 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 16
10422: EQUAL
10423: IFFALSE 10433
// sTroll := true ;
10425: LD_ADDR_EXP 52
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 17 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 17
10440: EQUAL
10441: IFFALSE 10451
// sSlow := true ;
10443: LD_ADDR_EXP 53
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 18 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 18
10458: EQUAL
10459: IFFALSE 10469
// sLack := true ;
10461: LD_ADDR_EXP 54
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 19 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 19
10476: EQUAL
10477: IFFALSE 10487
// sTank := true ;
10479: LD_ADDR_EXP 56
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 20 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 20
10494: EQUAL
10495: IFFALSE 10505
// sRemote := true ;
10497: LD_ADDR_EXP 57
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 21 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 21
10512: EQUAL
10513: IFFALSE 10523
// sPowell := true ;
10515: LD_ADDR_EXP 58
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 22 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 22
10530: EQUAL
10531: IFFALSE 10541
// sTeleport := true ;
10533: LD_ADDR_EXP 61
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 23 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 23
10548: EQUAL
10549: IFFALSE 10559
// sOilTower := true ;
10551: LD_ADDR_EXP 63
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 24 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 24
10566: EQUAL
10567: IFFALSE 10577
// sShovel := true ;
10569: LD_ADDR_EXP 64
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 25 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 25
10584: EQUAL
10585: IFFALSE 10595
// sSheik := true ;
10587: LD_ADDR_EXP 65
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 26 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 26
10602: EQUAL
10603: IFFALSE 10613
// sEarthquake := true ;
10605: LD_ADDR_EXP 67
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 27 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 27
10620: EQUAL
10621: IFFALSE 10631
// sAI := true ;
10623: LD_ADDR_EXP 68
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 28 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 28
10638: EQUAL
10639: IFFALSE 10649
// sCargo := true ;
10641: LD_ADDR_EXP 71
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 29 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 29
10656: EQUAL
10657: IFFALSE 10667
// sDLaser := true ;
10659: LD_ADDR_EXP 72
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 30 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 30
10674: EQUAL
10675: IFFALSE 10685
// sExchange := true ;
10677: LD_ADDR_EXP 73
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 31 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 31
10692: EQUAL
10693: IFFALSE 10703
// sFac := true ;
10695: LD_ADDR_EXP 74
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 32 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 32
10710: EQUAL
10711: IFFALSE 10721
// sPower := true ;
10713: LD_ADDR_EXP 75
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 33 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 33
10728: EQUAL
10729: IFFALSE 10739
// sRandom := true ;
10731: LD_ADDR_EXP 76
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 34 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 34
10746: EQUAL
10747: IFFALSE 10757
// sShield := true ;
10749: LD_ADDR_EXP 77
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 35 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 35
10764: EQUAL
10765: IFFALSE 10775
// sTime := true ;
10767: LD_ADDR_EXP 78
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 36 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 36
10782: EQUAL
10783: IFFALSE 10793
// sTools := true ;
10785: LD_ADDR_EXP 79
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 101 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 101
10800: EQUAL
10801: IFFALSE 10811
// sSold := true ;
10803: LD_ADDR_EXP 44
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 102 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 102
10818: EQUAL
10819: IFFALSE 10829
// sDiff := true ;
10821: LD_ADDR_EXP 45
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 103 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 103
10836: EQUAL
10837: IFFALSE 10847
// sFog := true ;
10839: LD_ADDR_EXP 48
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 104 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 104
10854: EQUAL
10855: IFFALSE 10865
// sReset := true ;
10857: LD_ADDR_EXP 49
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 105 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 105
10872: EQUAL
10873: IFFALSE 10883
// sSun := true ;
10875: LD_ADDR_EXP 50
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// if p3 = 106 then
10883: LD_VAR 0 3
10887: PUSH
10888: LD_INT 106
10890: EQUAL
10891: IFFALSE 10901
// sTiger := true ;
10893: LD_ADDR_EXP 46
10897: PUSH
10898: LD_INT 1
10900: ST_TO_ADDR
// if p3 = 107 then
10901: LD_VAR 0 3
10905: PUSH
10906: LD_INT 107
10908: EQUAL
10909: IFFALSE 10919
// sBomb := true ;
10911: LD_ADDR_EXP 47
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if p3 = 108 then
10919: LD_VAR 0 3
10923: PUSH
10924: LD_INT 108
10926: EQUAL
10927: IFFALSE 10937
// sWound := true ;
10929: LD_ADDR_EXP 55
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// if p3 = 109 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 109
10944: EQUAL
10945: IFFALSE 10955
// sBetray := true ;
10947: LD_ADDR_EXP 59
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if p3 = 110 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 110
10962: EQUAL
10963: IFFALSE 10973
// sContamin := true ;
10965: LD_ADDR_EXP 60
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if p3 = 111 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 111
10980: EQUAL
10981: IFFALSE 10991
// sOil := true ;
10983: LD_ADDR_EXP 62
10987: PUSH
10988: LD_INT 1
10990: ST_TO_ADDR
// if p3 = 112 then
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 112
10998: EQUAL
10999: IFFALSE 11009
// sStu := true ;
11001: LD_ADDR_EXP 66
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// if p3 = 113 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 113
11016: EQUAL
11017: IFFALSE 11027
// sBazooka := true ;
11019: LD_ADDR_EXP 69
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// if p3 = 114 then
11027: LD_VAR 0 3
11031: PUSH
11032: LD_INT 114
11034: EQUAL
11035: IFFALSE 11045
// sMortar := true ;
11037: LD_ADDR_EXP 70
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// if p3 = 115 then
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 115
11052: EQUAL
11053: IFFALSE 11063
// sRanger := true ;
11055: LD_ADDR_EXP 80
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 116 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 116
11070: EQUAL
11071: IFFALSE 11081
// sComputer := true ;
11073: LD_ADDR_EXP 81
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if p3 = 117 then
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 117
11088: EQUAL
11089: IFFALSE 11099
// s30 := true ;
11091: LD_ADDR_EXP 82
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// if p3 = 118 then
11099: LD_VAR 0 3
11103: PUSH
11104: LD_INT 118
11106: EQUAL
11107: IFFALSE 11117
// s60 := true ;
11109: LD_ADDR_EXP 83
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// end ; if p2 = hack_mode then
11117: LD_VAR 0 2
11121: PUSH
11122: LD_INT 101
11124: EQUAL
11125: IFFALSE 11253
// begin case p3 of 1 :
11127: LD_VAR 0 3
11131: PUSH
11132: LD_INT 1
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11147
11140: POP
// hHackUnlimitedResources ; 2 :
11141: CALL 23392 0 0
11145: GO 11253
11147: LD_INT 2
11149: DOUBLE
11150: EQUAL
11151: IFTRUE 11155
11153: GO 11162
11155: POP
// hHackSetLevel10 ; 3 :
11156: CALL 23525 0 0
11160: GO 11253
11162: LD_INT 3
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11177
11170: POP
// hHackSetLevel10YourUnits ; 4 :
11171: CALL 23610 0 0
11175: GO 11253
11177: LD_INT 4
11179: DOUBLE
11180: EQUAL
11181: IFTRUE 11185
11183: GO 11192
11185: POP
// hHackInvincible ; 5 :
11186: CALL 24058 0 0
11190: GO 11253
11192: LD_INT 5
11194: DOUBLE
11195: EQUAL
11196: IFTRUE 11200
11198: GO 11207
11200: POP
// hHackInvisible ; 6 :
11201: CALL 24169 0 0
11205: GO 11253
11207: LD_INT 6
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11222
11215: POP
// hHackChangeYourSide ; 7 :
11216: CALL 24226 0 0
11220: GO 11253
11222: LD_INT 7
11224: DOUBLE
11225: EQUAL
11226: IFTRUE 11230
11228: GO 11237
11230: POP
// hHackChangeUnitSide ; 8 :
11231: CALL 24268 0 0
11235: GO 11253
11237: LD_INT 8
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11252
11245: POP
// hHackFog ; end ;
11246: CALL 24369 0 0
11250: GO 11253
11252: POP
// end ; if p2 = game_save_mode then
11253: LD_VAR 0 2
11257: PUSH
11258: LD_INT 102
11260: EQUAL
11261: IFFALSE 11316
// begin if p3 = 1 then
11263: LD_VAR 0 3
11267: PUSH
11268: LD_INT 1
11270: EQUAL
11271: IFFALSE 11283
// globalGameSaveCounter := p4 ;
11273: LD_ADDR_EXP 26
11277: PUSH
11278: LD_VAR 0 4
11282: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11283: LD_VAR 0 3
11287: PUSH
11288: LD_INT 2
11290: EQUAL
11291: PUSH
11292: LD_EXP 26
11296: AND
11297: IFFALSE 11316
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11299: LD_STRING setGameSaveCounter(
11301: PUSH
11302: LD_EXP 26
11306: STR
11307: PUSH
11308: LD_STRING )
11310: STR
11311: PPUSH
11312: CALL_OW 559
// end ; end ;
11316: LD_VAR 0 7
11320: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11321: LD_INT 0
11323: PPUSH
// streamModeActive := false ;
11324: LD_ADDR_EXP 27
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// normalCounter := 36 ;
11332: LD_ADDR_EXP 28
11336: PUSH
11337: LD_INT 36
11339: ST_TO_ADDR
// hardcoreCounter := 18 ;
11340: LD_ADDR_EXP 29
11344: PUSH
11345: LD_INT 18
11347: ST_TO_ADDR
// sRocket := false ;
11348: LD_ADDR_EXP 32
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// sSpeed := false ;
11356: LD_ADDR_EXP 31
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// sEngine := false ;
11364: LD_ADDR_EXP 33
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// sSpec := false ;
11372: LD_ADDR_EXP 30
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// sLevel := false ;
11380: LD_ADDR_EXP 34
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// sArmoury := false ;
11388: LD_ADDR_EXP 35
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// sRadar := false ;
11396: LD_ADDR_EXP 36
11400: PUSH
11401: LD_INT 0
11403: ST_TO_ADDR
// sBunker := false ;
11404: LD_ADDR_EXP 37
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// sHack := false ;
11412: LD_ADDR_EXP 38
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// sFire := false ;
11420: LD_ADDR_EXP 39
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// sRefresh := false ;
11428: LD_ADDR_EXP 40
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// sExp := false ;
11436: LD_ADDR_EXP 41
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// sDepot := false ;
11444: LD_ADDR_EXP 42
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// sFlag := false ;
11452: LD_ADDR_EXP 43
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// sKamikadze := false ;
11460: LD_ADDR_EXP 51
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// sTroll := false ;
11468: LD_ADDR_EXP 52
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// sSlow := false ;
11476: LD_ADDR_EXP 53
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// sLack := false ;
11484: LD_ADDR_EXP 54
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// sTank := false ;
11492: LD_ADDR_EXP 56
11496: PUSH
11497: LD_INT 0
11499: ST_TO_ADDR
// sRemote := false ;
11500: LD_ADDR_EXP 57
11504: PUSH
11505: LD_INT 0
11507: ST_TO_ADDR
// sPowell := false ;
11508: LD_ADDR_EXP 58
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// sTeleport := false ;
11516: LD_ADDR_EXP 61
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// sOilTower := false ;
11524: LD_ADDR_EXP 63
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// sShovel := false ;
11532: LD_ADDR_EXP 64
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// sSheik := false ;
11540: LD_ADDR_EXP 65
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// sEarthquake := false ;
11548: LD_ADDR_EXP 67
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// sAI := false ;
11556: LD_ADDR_EXP 68
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// sCargo := false ;
11564: LD_ADDR_EXP 71
11568: PUSH
11569: LD_INT 0
11571: ST_TO_ADDR
// sDLaser := false ;
11572: LD_ADDR_EXP 72
11576: PUSH
11577: LD_INT 0
11579: ST_TO_ADDR
// sExchange := false ;
11580: LD_ADDR_EXP 73
11584: PUSH
11585: LD_INT 0
11587: ST_TO_ADDR
// sFac := false ;
11588: LD_ADDR_EXP 74
11592: PUSH
11593: LD_INT 0
11595: ST_TO_ADDR
// sPower := false ;
11596: LD_ADDR_EXP 75
11600: PUSH
11601: LD_INT 0
11603: ST_TO_ADDR
// sRandom := false ;
11604: LD_ADDR_EXP 76
11608: PUSH
11609: LD_INT 0
11611: ST_TO_ADDR
// sShield := false ;
11612: LD_ADDR_EXP 77
11616: PUSH
11617: LD_INT 0
11619: ST_TO_ADDR
// sTime := false ;
11620: LD_ADDR_EXP 78
11624: PUSH
11625: LD_INT 0
11627: ST_TO_ADDR
// sTools := false ;
11628: LD_ADDR_EXP 79
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// sSold := false ;
11636: LD_ADDR_EXP 44
11640: PUSH
11641: LD_INT 0
11643: ST_TO_ADDR
// sDiff := false ;
11644: LD_ADDR_EXP 45
11648: PUSH
11649: LD_INT 0
11651: ST_TO_ADDR
// sFog := false ;
11652: LD_ADDR_EXP 48
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// sReset := false ;
11660: LD_ADDR_EXP 49
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// sSun := false ;
11668: LD_ADDR_EXP 50
11672: PUSH
11673: LD_INT 0
11675: ST_TO_ADDR
// sTiger := false ;
11676: LD_ADDR_EXP 46
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// sBomb := false ;
11684: LD_ADDR_EXP 47
11688: PUSH
11689: LD_INT 0
11691: ST_TO_ADDR
// sWound := false ;
11692: LD_ADDR_EXP 55
11696: PUSH
11697: LD_INT 0
11699: ST_TO_ADDR
// sBetray := false ;
11700: LD_ADDR_EXP 59
11704: PUSH
11705: LD_INT 0
11707: ST_TO_ADDR
// sContamin := false ;
11708: LD_ADDR_EXP 60
11712: PUSH
11713: LD_INT 0
11715: ST_TO_ADDR
// sOil := false ;
11716: LD_ADDR_EXP 62
11720: PUSH
11721: LD_INT 0
11723: ST_TO_ADDR
// sStu := false ;
11724: LD_ADDR_EXP 66
11728: PUSH
11729: LD_INT 0
11731: ST_TO_ADDR
// sBazooka := false ;
11732: LD_ADDR_EXP 69
11736: PUSH
11737: LD_INT 0
11739: ST_TO_ADDR
// sMortar := false ;
11740: LD_ADDR_EXP 70
11744: PUSH
11745: LD_INT 0
11747: ST_TO_ADDR
// sRanger := false ;
11748: LD_ADDR_EXP 80
11752: PUSH
11753: LD_INT 0
11755: ST_TO_ADDR
// sComputer := false ;
11756: LD_ADDR_EXP 81
11760: PUSH
11761: LD_INT 0
11763: ST_TO_ADDR
// s30 := false ;
11764: LD_ADDR_EXP 82
11768: PUSH
11769: LD_INT 0
11771: ST_TO_ADDR
// s60 := false ;
11772: LD_ADDR_EXP 83
11776: PUSH
11777: LD_INT 0
11779: ST_TO_ADDR
// end ;
11780: LD_VAR 0 1
11784: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
11792: PPUSH
11793: PPUSH
// result := [ ] ;
11794: LD_ADDR_VAR 0 2
11798: PUSH
11799: EMPTY
11800: ST_TO_ADDR
// if campaign_id = 1 then
11801: LD_OWVAR 69
11805: PUSH
11806: LD_INT 1
11808: EQUAL
11809: IFFALSE 14975
// begin case mission_number of 1 :
11811: LD_OWVAR 70
11815: PUSH
11816: LD_INT 1
11818: DOUBLE
11819: EQUAL
11820: IFTRUE 11824
11822: GO 11900
11824: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: LD_INT 4
11835: PUSH
11836: LD_INT 11
11838: PUSH
11839: LD_INT 12
11841: PUSH
11842: LD_INT 15
11844: PUSH
11845: LD_INT 16
11847: PUSH
11848: LD_INT 22
11850: PUSH
11851: LD_INT 23
11853: PUSH
11854: LD_INT 26
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 101
11870: PUSH
11871: LD_INT 102
11873: PUSH
11874: LD_INT 106
11876: PUSH
11877: LD_INT 116
11879: PUSH
11880: LD_INT 117
11882: PUSH
11883: LD_INT 118
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: ST_TO_ADDR
11898: GO 14973
11900: LD_INT 2
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 11992
11908: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 4
11919: PUSH
11920: LD_INT 11
11922: PUSH
11923: LD_INT 12
11925: PUSH
11926: LD_INT 15
11928: PUSH
11929: LD_INT 16
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 101
11954: PUSH
11955: LD_INT 102
11957: PUSH
11958: LD_INT 105
11960: PUSH
11961: LD_INT 106
11963: PUSH
11964: LD_INT 108
11966: PUSH
11967: LD_INT 116
11969: PUSH
11970: LD_INT 117
11972: PUSH
11973: LD_INT 118
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: ST_TO_ADDR
11990: GO 14973
11992: LD_INT 3
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12088
12000: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 2
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: LD_INT 5
12014: PUSH
12015: LD_INT 11
12017: PUSH
12018: LD_INT 12
12020: PUSH
12021: LD_INT 15
12023: PUSH
12024: LD_INT 16
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: LD_INT 36
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 101
12050: PUSH
12051: LD_INT 102
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 116
12065: PUSH
12066: LD_INT 117
12068: PUSH
12069: LD_INT 118
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: ST_TO_ADDR
12086: GO 14973
12088: LD_INT 4
12090: DOUBLE
12091: EQUAL
12092: IFTRUE 12096
12094: GO 12192
12096: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12097: LD_ADDR_VAR 0 2
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: LD_INT 5
12110: PUSH
12111: LD_INT 8
12113: PUSH
12114: LD_INT 11
12116: PUSH
12117: LD_INT 12
12119: PUSH
12120: LD_INT 15
12122: PUSH
12123: LD_INT 16
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 23
12131: PUSH
12132: LD_INT 26
12134: PUSH
12135: LD_INT 36
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 101
12154: PUSH
12155: LD_INT 102
12157: PUSH
12158: LD_INT 105
12160: PUSH
12161: LD_INT 106
12163: PUSH
12164: LD_INT 108
12166: PUSH
12167: LD_INT 116
12169: PUSH
12170: LD_INT 117
12172: PUSH
12173: LD_INT 118
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: ST_TO_ADDR
12190: GO 14973
12192: LD_INT 5
12194: DOUBLE
12195: EQUAL
12196: IFTRUE 12200
12198: GO 12312
12200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12201: LD_ADDR_VAR 0 2
12205: PUSH
12206: LD_INT 2
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: LD_INT 5
12214: PUSH
12215: LD_INT 6
12217: PUSH
12218: LD_INT 8
12220: PUSH
12221: LD_INT 11
12223: PUSH
12224: LD_INT 12
12226: PUSH
12227: LD_INT 15
12229: PUSH
12230: LD_INT 16
12232: PUSH
12233: LD_INT 22
12235: PUSH
12236: LD_INT 23
12238: PUSH
12239: LD_INT 25
12241: PUSH
12242: LD_INT 26
12244: PUSH
12245: LD_INT 36
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 101
12266: PUSH
12267: LD_INT 102
12269: PUSH
12270: LD_INT 105
12272: PUSH
12273: LD_INT 106
12275: PUSH
12276: LD_INT 108
12278: PUSH
12279: LD_INT 109
12281: PUSH
12282: LD_INT 112
12284: PUSH
12285: LD_INT 116
12287: PUSH
12288: LD_INT 117
12290: PUSH
12291: LD_INT 118
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: ST_TO_ADDR
12310: GO 14973
12312: LD_INT 6
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12452
12320: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12321: LD_ADDR_VAR 0 2
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 4
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: LD_INT 6
12337: PUSH
12338: LD_INT 8
12340: PUSH
12341: LD_INT 11
12343: PUSH
12344: LD_INT 12
12346: PUSH
12347: LD_INT 15
12349: PUSH
12350: LD_INT 16
12352: PUSH
12353: LD_INT 20
12355: PUSH
12356: LD_INT 21
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: LD_INT 23
12364: PUSH
12365: LD_INT 25
12367: PUSH
12368: LD_INT 26
12370: PUSH
12371: LD_INT 30
12373: PUSH
12374: LD_INT 31
12376: PUSH
12377: LD_INT 32
12379: PUSH
12380: LD_INT 36
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 101
12406: PUSH
12407: LD_INT 102
12409: PUSH
12410: LD_INT 105
12412: PUSH
12413: LD_INT 106
12415: PUSH
12416: LD_INT 108
12418: PUSH
12419: LD_INT 109
12421: PUSH
12422: LD_INT 112
12424: PUSH
12425: LD_INT 116
12427: PUSH
12428: LD_INT 117
12430: PUSH
12431: LD_INT 118
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: ST_TO_ADDR
12450: GO 14973
12452: LD_INT 7
12454: DOUBLE
12455: EQUAL
12456: IFTRUE 12460
12458: GO 12572
12460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: LD_INT 2
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: LD_INT 5
12474: PUSH
12475: LD_INT 7
12477: PUSH
12478: LD_INT 11
12480: PUSH
12481: LD_INT 12
12483: PUSH
12484: LD_INT 15
12486: PUSH
12487: LD_INT 16
12489: PUSH
12490: LD_INT 20
12492: PUSH
12493: LD_INT 21
12495: PUSH
12496: LD_INT 22
12498: PUSH
12499: LD_INT 23
12501: PUSH
12502: LD_INT 25
12504: PUSH
12505: LD_INT 26
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 101
12526: PUSH
12527: LD_INT 102
12529: PUSH
12530: LD_INT 103
12532: PUSH
12533: LD_INT 105
12535: PUSH
12536: LD_INT 106
12538: PUSH
12539: LD_INT 108
12541: PUSH
12542: LD_INT 112
12544: PUSH
12545: LD_INT 116
12547: PUSH
12548: LD_INT 117
12550: PUSH
12551: LD_INT 118
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
12570: GO 14973
12572: LD_INT 8
12574: DOUBLE
12575: EQUAL
12576: IFTRUE 12580
12578: GO 12720
12580: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12581: LD_ADDR_VAR 0 2
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: LD_INT 4
12591: PUSH
12592: LD_INT 5
12594: PUSH
12595: LD_INT 6
12597: PUSH
12598: LD_INT 7
12600: PUSH
12601: LD_INT 8
12603: PUSH
12604: LD_INT 11
12606: PUSH
12607: LD_INT 12
12609: PUSH
12610: LD_INT 15
12612: PUSH
12613: LD_INT 16
12615: PUSH
12616: LD_INT 20
12618: PUSH
12619: LD_INT 21
12621: PUSH
12622: LD_INT 22
12624: PUSH
12625: LD_INT 23
12627: PUSH
12628: LD_INT 25
12630: PUSH
12631: LD_INT 26
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: LD_INT 31
12639: PUSH
12640: LD_INT 32
12642: PUSH
12643: LD_INT 36
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 101
12670: PUSH
12671: LD_INT 102
12673: PUSH
12674: LD_INT 103
12676: PUSH
12677: LD_INT 105
12679: PUSH
12680: LD_INT 106
12682: PUSH
12683: LD_INT 108
12685: PUSH
12686: LD_INT 109
12688: PUSH
12689: LD_INT 112
12691: PUSH
12692: LD_INT 116
12694: PUSH
12695: LD_INT 117
12697: PUSH
12698: LD_INT 118
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: ST_TO_ADDR
12718: GO 14973
12720: LD_INT 9
12722: DOUBLE
12723: EQUAL
12724: IFTRUE 12728
12726: GO 12876
12728: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12729: LD_ADDR_VAR 0 2
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: LD_INT 4
12739: PUSH
12740: LD_INT 5
12742: PUSH
12743: LD_INT 6
12745: PUSH
12746: LD_INT 7
12748: PUSH
12749: LD_INT 8
12751: PUSH
12752: LD_INT 11
12754: PUSH
12755: LD_INT 12
12757: PUSH
12758: LD_INT 15
12760: PUSH
12761: LD_INT 16
12763: PUSH
12764: LD_INT 20
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_INT 23
12775: PUSH
12776: LD_INT 25
12778: PUSH
12779: LD_INT 26
12781: PUSH
12782: LD_INT 28
12784: PUSH
12785: LD_INT 30
12787: PUSH
12788: LD_INT 31
12790: PUSH
12791: LD_INT 32
12793: PUSH
12794: LD_INT 36
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 101
12822: PUSH
12823: LD_INT 102
12825: PUSH
12826: LD_INT 103
12828: PUSH
12829: LD_INT 105
12831: PUSH
12832: LD_INT 106
12834: PUSH
12835: LD_INT 108
12837: PUSH
12838: LD_INT 109
12840: PUSH
12841: LD_INT 112
12843: PUSH
12844: LD_INT 114
12846: PUSH
12847: LD_INT 116
12849: PUSH
12850: LD_INT 117
12852: PUSH
12853: LD_INT 118
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: ST_TO_ADDR
12874: GO 14973
12876: LD_INT 10
12878: DOUBLE
12879: EQUAL
12880: IFTRUE 12884
12882: GO 13080
12884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12885: LD_ADDR_VAR 0 2
12889: PUSH
12890: LD_INT 2
12892: PUSH
12893: LD_INT 4
12895: PUSH
12896: LD_INT 5
12898: PUSH
12899: LD_INT 6
12901: PUSH
12902: LD_INT 7
12904: PUSH
12905: LD_INT 8
12907: PUSH
12908: LD_INT 9
12910: PUSH
12911: LD_INT 10
12913: PUSH
12914: LD_INT 11
12916: PUSH
12917: LD_INT 12
12919: PUSH
12920: LD_INT 13
12922: PUSH
12923: LD_INT 14
12925: PUSH
12926: LD_INT 15
12928: PUSH
12929: LD_INT 16
12931: PUSH
12932: LD_INT 17
12934: PUSH
12935: LD_INT 18
12937: PUSH
12938: LD_INT 19
12940: PUSH
12941: LD_INT 20
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_INT 23
12952: PUSH
12953: LD_INT 24
12955: PUSH
12956: LD_INT 25
12958: PUSH
12959: LD_INT 26
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 30
12967: PUSH
12968: LD_INT 31
12970: PUSH
12971: LD_INT 32
12973: PUSH
12974: LD_INT 36
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 101
13010: PUSH
13011: LD_INT 102
13013: PUSH
13014: LD_INT 103
13016: PUSH
13017: LD_INT 104
13019: PUSH
13020: LD_INT 105
13022: PUSH
13023: LD_INT 106
13025: PUSH
13026: LD_INT 107
13028: PUSH
13029: LD_INT 108
13031: PUSH
13032: LD_INT 109
13034: PUSH
13035: LD_INT 110
13037: PUSH
13038: LD_INT 111
13040: PUSH
13041: LD_INT 112
13043: PUSH
13044: LD_INT 114
13046: PUSH
13047: LD_INT 116
13049: PUSH
13050: LD_INT 117
13052: PUSH
13053: LD_INT 118
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: ST_TO_ADDR
13078: GO 14973
13080: LD_INT 11
13082: DOUBLE
13083: EQUAL
13084: IFTRUE 13088
13086: GO 13292
13088: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13089: LD_ADDR_VAR 0 2
13093: PUSH
13094: LD_INT 2
13096: PUSH
13097: LD_INT 3
13099: PUSH
13100: LD_INT 4
13102: PUSH
13103: LD_INT 5
13105: PUSH
13106: LD_INT 6
13108: PUSH
13109: LD_INT 7
13111: PUSH
13112: LD_INT 8
13114: PUSH
13115: LD_INT 9
13117: PUSH
13118: LD_INT 10
13120: PUSH
13121: LD_INT 11
13123: PUSH
13124: LD_INT 12
13126: PUSH
13127: LD_INT 13
13129: PUSH
13130: LD_INT 14
13132: PUSH
13133: LD_INT 15
13135: PUSH
13136: LD_INT 16
13138: PUSH
13139: LD_INT 17
13141: PUSH
13142: LD_INT 18
13144: PUSH
13145: LD_INT 19
13147: PUSH
13148: LD_INT 20
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 23
13159: PUSH
13160: LD_INT 24
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 26
13168: PUSH
13169: LD_INT 28
13171: PUSH
13172: LD_INT 30
13174: PUSH
13175: LD_INT 31
13177: PUSH
13178: LD_INT 32
13180: PUSH
13181: LD_INT 34
13183: PUSH
13184: LD_INT 36
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 101
13222: PUSH
13223: LD_INT 102
13225: PUSH
13226: LD_INT 103
13228: PUSH
13229: LD_INT 104
13231: PUSH
13232: LD_INT 105
13234: PUSH
13235: LD_INT 106
13237: PUSH
13238: LD_INT 107
13240: PUSH
13241: LD_INT 108
13243: PUSH
13244: LD_INT 109
13246: PUSH
13247: LD_INT 110
13249: PUSH
13250: LD_INT 111
13252: PUSH
13253: LD_INT 112
13255: PUSH
13256: LD_INT 114
13258: PUSH
13259: LD_INT 116
13261: PUSH
13262: LD_INT 117
13264: PUSH
13265: LD_INT 118
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: ST_TO_ADDR
13290: GO 14973
13292: LD_INT 12
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13520
13300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13301: LD_ADDR_VAR 0 2
13305: PUSH
13306: LD_INT 1
13308: PUSH
13309: LD_INT 2
13311: PUSH
13312: LD_INT 3
13314: PUSH
13315: LD_INT 4
13317: PUSH
13318: LD_INT 5
13320: PUSH
13321: LD_INT 6
13323: PUSH
13324: LD_INT 7
13326: PUSH
13327: LD_INT 8
13329: PUSH
13330: LD_INT 9
13332: PUSH
13333: LD_INT 10
13335: PUSH
13336: LD_INT 11
13338: PUSH
13339: LD_INT 12
13341: PUSH
13342: LD_INT 13
13344: PUSH
13345: LD_INT 14
13347: PUSH
13348: LD_INT 15
13350: PUSH
13351: LD_INT 16
13353: PUSH
13354: LD_INT 17
13356: PUSH
13357: LD_INT 18
13359: PUSH
13360: LD_INT 19
13362: PUSH
13363: LD_INT 20
13365: PUSH
13366: LD_INT 21
13368: PUSH
13369: LD_INT 22
13371: PUSH
13372: LD_INT 23
13374: PUSH
13375: LD_INT 24
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 26
13383: PUSH
13384: LD_INT 27
13386: PUSH
13387: LD_INT 28
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 31
13395: PUSH
13396: LD_INT 32
13398: PUSH
13399: LD_INT 33
13401: PUSH
13402: LD_INT 34
13404: PUSH
13405: LD_INT 36
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 101
13446: PUSH
13447: LD_INT 102
13449: PUSH
13450: LD_INT 103
13452: PUSH
13453: LD_INT 104
13455: PUSH
13456: LD_INT 105
13458: PUSH
13459: LD_INT 106
13461: PUSH
13462: LD_INT 107
13464: PUSH
13465: LD_INT 108
13467: PUSH
13468: LD_INT 109
13470: PUSH
13471: LD_INT 110
13473: PUSH
13474: LD_INT 111
13476: PUSH
13477: LD_INT 112
13479: PUSH
13480: LD_INT 113
13482: PUSH
13483: LD_INT 114
13485: PUSH
13486: LD_INT 116
13488: PUSH
13489: LD_INT 117
13491: PUSH
13492: LD_INT 118
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: ST_TO_ADDR
13518: GO 14973
13520: LD_INT 13
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13528
13526: GO 13736
13528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 1
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: LD_INT 4
13545: PUSH
13546: LD_INT 5
13548: PUSH
13549: LD_INT 8
13551: PUSH
13552: LD_INT 9
13554: PUSH
13555: LD_INT 10
13557: PUSH
13558: LD_INT 11
13560: PUSH
13561: LD_INT 12
13563: PUSH
13564: LD_INT 14
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: LD_INT 16
13572: PUSH
13573: LD_INT 17
13575: PUSH
13576: LD_INT 18
13578: PUSH
13579: LD_INT 19
13581: PUSH
13582: LD_INT 20
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 23
13593: PUSH
13594: LD_INT 24
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 26
13602: PUSH
13603: LD_INT 27
13605: PUSH
13606: LD_INT 28
13608: PUSH
13609: LD_INT 30
13611: PUSH
13612: LD_INT 31
13614: PUSH
13615: LD_INT 32
13617: PUSH
13618: LD_INT 33
13620: PUSH
13621: LD_INT 34
13623: PUSH
13624: LD_INT 36
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 101
13662: PUSH
13663: LD_INT 102
13665: PUSH
13666: LD_INT 103
13668: PUSH
13669: LD_INT 104
13671: PUSH
13672: LD_INT 105
13674: PUSH
13675: LD_INT 106
13677: PUSH
13678: LD_INT 107
13680: PUSH
13681: LD_INT 108
13683: PUSH
13684: LD_INT 109
13686: PUSH
13687: LD_INT 110
13689: PUSH
13690: LD_INT 111
13692: PUSH
13693: LD_INT 112
13695: PUSH
13696: LD_INT 113
13698: PUSH
13699: LD_INT 114
13701: PUSH
13702: LD_INT 116
13704: PUSH
13705: LD_INT 117
13707: PUSH
13708: LD_INT 118
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 14973
13736: LD_INT 14
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13968
13744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: LD_INT 3
13758: PUSH
13759: LD_INT 4
13761: PUSH
13762: LD_INT 5
13764: PUSH
13765: LD_INT 6
13767: PUSH
13768: LD_INT 7
13770: PUSH
13771: LD_INT 8
13773: PUSH
13774: LD_INT 9
13776: PUSH
13777: LD_INT 10
13779: PUSH
13780: LD_INT 11
13782: PUSH
13783: LD_INT 12
13785: PUSH
13786: LD_INT 13
13788: PUSH
13789: LD_INT 14
13791: PUSH
13792: LD_INT 15
13794: PUSH
13795: LD_INT 16
13797: PUSH
13798: LD_INT 17
13800: PUSH
13801: LD_INT 18
13803: PUSH
13804: LD_INT 19
13806: PUSH
13807: LD_INT 20
13809: PUSH
13810: LD_INT 21
13812: PUSH
13813: LD_INT 22
13815: PUSH
13816: LD_INT 23
13818: PUSH
13819: LD_INT 24
13821: PUSH
13822: LD_INT 25
13824: PUSH
13825: LD_INT 26
13827: PUSH
13828: LD_INT 27
13830: PUSH
13831: LD_INT 28
13833: PUSH
13834: LD_INT 29
13836: PUSH
13837: LD_INT 30
13839: PUSH
13840: LD_INT 31
13842: PUSH
13843: LD_INT 32
13845: PUSH
13846: LD_INT 33
13848: PUSH
13849: LD_INT 34
13851: PUSH
13852: LD_INT 36
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 101
13894: PUSH
13895: LD_INT 102
13897: PUSH
13898: LD_INT 103
13900: PUSH
13901: LD_INT 104
13903: PUSH
13904: LD_INT 105
13906: PUSH
13907: LD_INT 106
13909: PUSH
13910: LD_INT 107
13912: PUSH
13913: LD_INT 108
13915: PUSH
13916: LD_INT 109
13918: PUSH
13919: LD_INT 110
13921: PUSH
13922: LD_INT 111
13924: PUSH
13925: LD_INT 112
13927: PUSH
13928: LD_INT 113
13930: PUSH
13931: LD_INT 114
13933: PUSH
13934: LD_INT 116
13936: PUSH
13937: LD_INT 117
13939: PUSH
13940: LD_INT 118
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: ST_TO_ADDR
13966: GO 14973
13968: LD_INT 15
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 14200
13976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13977: LD_ADDR_VAR 0 2
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: LD_INT 2
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: LD_INT 6
13999: PUSH
14000: LD_INT 7
14002: PUSH
14003: LD_INT 8
14005: PUSH
14006: LD_INT 9
14008: PUSH
14009: LD_INT 10
14011: PUSH
14012: LD_INT 11
14014: PUSH
14015: LD_INT 12
14017: PUSH
14018: LD_INT 13
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: LD_INT 16
14029: PUSH
14030: LD_INT 17
14032: PUSH
14033: LD_INT 18
14035: PUSH
14036: LD_INT 19
14038: PUSH
14039: LD_INT 20
14041: PUSH
14042: LD_INT 21
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: LD_INT 24
14053: PUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 26
14059: PUSH
14060: LD_INT 27
14062: PUSH
14063: LD_INT 28
14065: PUSH
14066: LD_INT 29
14068: PUSH
14069: LD_INT 30
14071: PUSH
14072: LD_INT 31
14074: PUSH
14075: LD_INT 32
14077: PUSH
14078: LD_INT 33
14080: PUSH
14081: LD_INT 34
14083: PUSH
14084: LD_INT 36
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 101
14126: PUSH
14127: LD_INT 102
14129: PUSH
14130: LD_INT 103
14132: PUSH
14133: LD_INT 104
14135: PUSH
14136: LD_INT 105
14138: PUSH
14139: LD_INT 106
14141: PUSH
14142: LD_INT 107
14144: PUSH
14145: LD_INT 108
14147: PUSH
14148: LD_INT 109
14150: PUSH
14151: LD_INT 110
14153: PUSH
14154: LD_INT 111
14156: PUSH
14157: LD_INT 112
14159: PUSH
14160: LD_INT 113
14162: PUSH
14163: LD_INT 114
14165: PUSH
14166: LD_INT 116
14168: PUSH
14169: LD_INT 117
14171: PUSH
14172: LD_INT 118
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: ST_TO_ADDR
14198: GO 14973
14200: LD_INT 16
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14344
14208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14209: LD_ADDR_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: LD_INT 5
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: LD_INT 16
14237: PUSH
14238: LD_INT 20
14240: PUSH
14241: LD_INT 21
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 23
14249: PUSH
14250: LD_INT 25
14252: PUSH
14253: LD_INT 26
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 101
14294: PUSH
14295: LD_INT 102
14297: PUSH
14298: LD_INT 103
14300: PUSH
14301: LD_INT 106
14303: PUSH
14304: LD_INT 108
14306: PUSH
14307: LD_INT 112
14309: PUSH
14310: LD_INT 113
14312: PUSH
14313: LD_INT 114
14315: PUSH
14316: LD_INT 116
14318: PUSH
14319: LD_INT 117
14321: PUSH
14322: LD_INT 118
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: ST_TO_ADDR
14342: GO 14973
14344: LD_INT 17
14346: DOUBLE
14347: EQUAL
14348: IFTRUE 14352
14350: GO 14576
14352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: LD_INT 1
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 3
14366: PUSH
14367: LD_INT 4
14369: PUSH
14370: LD_INT 5
14372: PUSH
14373: LD_INT 6
14375: PUSH
14376: LD_INT 7
14378: PUSH
14379: LD_INT 8
14381: PUSH
14382: LD_INT 9
14384: PUSH
14385: LD_INT 10
14387: PUSH
14388: LD_INT 11
14390: PUSH
14391: LD_INT 12
14393: PUSH
14394: LD_INT 13
14396: PUSH
14397: LD_INT 14
14399: PUSH
14400: LD_INT 15
14402: PUSH
14403: LD_INT 16
14405: PUSH
14406: LD_INT 17
14408: PUSH
14409: LD_INT 18
14411: PUSH
14412: LD_INT 19
14414: PUSH
14415: LD_INT 20
14417: PUSH
14418: LD_INT 21
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_INT 23
14426: PUSH
14427: LD_INT 24
14429: PUSH
14430: LD_INT 25
14432: PUSH
14433: LD_INT 26
14435: PUSH
14436: LD_INT 27
14438: PUSH
14439: LD_INT 28
14441: PUSH
14442: LD_INT 29
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 31
14450: PUSH
14451: LD_INT 32
14453: PUSH
14454: LD_INT 33
14456: PUSH
14457: LD_INT 34
14459: PUSH
14460: LD_INT 36
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 101
14502: PUSH
14503: LD_INT 102
14505: PUSH
14506: LD_INT 103
14508: PUSH
14509: LD_INT 104
14511: PUSH
14512: LD_INT 105
14514: PUSH
14515: LD_INT 106
14517: PUSH
14518: LD_INT 107
14520: PUSH
14521: LD_INT 108
14523: PUSH
14524: LD_INT 109
14526: PUSH
14527: LD_INT 110
14529: PUSH
14530: LD_INT 111
14532: PUSH
14533: LD_INT 112
14535: PUSH
14536: LD_INT 113
14538: PUSH
14539: LD_INT 114
14541: PUSH
14542: LD_INT 116
14544: PUSH
14545: LD_INT 117
14547: PUSH
14548: LD_INT 118
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: ST_TO_ADDR
14574: GO 14973
14576: LD_INT 18
14578: DOUBLE
14579: EQUAL
14580: IFTRUE 14584
14582: GO 14732
14584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14585: LD_ADDR_VAR 0 2
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 4
14595: PUSH
14596: LD_INT 5
14598: PUSH
14599: LD_INT 7
14601: PUSH
14602: LD_INT 11
14604: PUSH
14605: LD_INT 12
14607: PUSH
14608: LD_INT 15
14610: PUSH
14611: LD_INT 16
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 25
14628: PUSH
14629: LD_INT 26
14631: PUSH
14632: LD_INT 30
14634: PUSH
14635: LD_INT 31
14637: PUSH
14638: LD_INT 32
14640: PUSH
14641: LD_INT 33
14643: PUSH
14644: LD_INT 34
14646: PUSH
14647: LD_INT 35
14649: PUSH
14650: LD_INT 36
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 101
14678: PUSH
14679: LD_INT 102
14681: PUSH
14682: LD_INT 103
14684: PUSH
14685: LD_INT 106
14687: PUSH
14688: LD_INT 108
14690: PUSH
14691: LD_INT 112
14693: PUSH
14694: LD_INT 113
14696: PUSH
14697: LD_INT 114
14699: PUSH
14700: LD_INT 115
14702: PUSH
14703: LD_INT 116
14705: PUSH
14706: LD_INT 117
14708: PUSH
14709: LD_INT 118
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: ST_TO_ADDR
14730: GO 14973
14732: LD_INT 19
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14972
14740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: LD_INT 6
14763: PUSH
14764: LD_INT 7
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 9
14772: PUSH
14773: LD_INT 10
14775: PUSH
14776: LD_INT 11
14778: PUSH
14779: LD_INT 12
14781: PUSH
14782: LD_INT 13
14784: PUSH
14785: LD_INT 14
14787: PUSH
14788: LD_INT 15
14790: PUSH
14791: LD_INT 16
14793: PUSH
14794: LD_INT 17
14796: PUSH
14797: LD_INT 18
14799: PUSH
14800: LD_INT 19
14802: PUSH
14803: LD_INT 20
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 22
14811: PUSH
14812: LD_INT 23
14814: PUSH
14815: LD_INT 24
14817: PUSH
14818: LD_INT 25
14820: PUSH
14821: LD_INT 26
14823: PUSH
14824: LD_INT 27
14826: PUSH
14827: LD_INT 28
14829: PUSH
14830: LD_INT 29
14832: PUSH
14833: LD_INT 30
14835: PUSH
14836: LD_INT 31
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: LD_INT 33
14844: PUSH
14845: LD_INT 34
14847: PUSH
14848: LD_INT 35
14850: PUSH
14851: LD_INT 36
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 101
14894: PUSH
14895: LD_INT 102
14897: PUSH
14898: LD_INT 103
14900: PUSH
14901: LD_INT 104
14903: PUSH
14904: LD_INT 105
14906: PUSH
14907: LD_INT 106
14909: PUSH
14910: LD_INT 107
14912: PUSH
14913: LD_INT 108
14915: PUSH
14916: LD_INT 109
14918: PUSH
14919: LD_INT 110
14921: PUSH
14922: LD_INT 111
14924: PUSH
14925: LD_INT 112
14927: PUSH
14928: LD_INT 113
14930: PUSH
14931: LD_INT 114
14933: PUSH
14934: LD_INT 115
14936: PUSH
14937: LD_INT 116
14939: PUSH
14940: LD_INT 117
14942: PUSH
14943: LD_INT 118
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
14970: GO 14973
14972: POP
// end else
14973: GO 15204
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: LD_INT 4
14991: PUSH
14992: LD_INT 5
14994: PUSH
14995: LD_INT 6
14997: PUSH
14998: LD_INT 7
15000: PUSH
15001: LD_INT 8
15003: PUSH
15004: LD_INT 9
15006: PUSH
15007: LD_INT 10
15009: PUSH
15010: LD_INT 11
15012: PUSH
15013: LD_INT 12
15015: PUSH
15016: LD_INT 13
15018: PUSH
15019: LD_INT 14
15021: PUSH
15022: LD_INT 15
15024: PUSH
15025: LD_INT 16
15027: PUSH
15028: LD_INT 17
15030: PUSH
15031: LD_INT 18
15033: PUSH
15034: LD_INT 19
15036: PUSH
15037: LD_INT 20
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 23
15048: PUSH
15049: LD_INT 24
15051: PUSH
15052: LD_INT 25
15054: PUSH
15055: LD_INT 26
15057: PUSH
15058: LD_INT 27
15060: PUSH
15061: LD_INT 28
15063: PUSH
15064: LD_INT 29
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: LD_INT 31
15072: PUSH
15073: LD_INT 32
15075: PUSH
15076: LD_INT 33
15078: PUSH
15079: LD_INT 34
15081: PUSH
15082: LD_INT 35
15084: PUSH
15085: LD_INT 36
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 101
15128: PUSH
15129: LD_INT 102
15131: PUSH
15132: LD_INT 103
15134: PUSH
15135: LD_INT 104
15137: PUSH
15138: LD_INT 105
15140: PUSH
15141: LD_INT 106
15143: PUSH
15144: LD_INT 107
15146: PUSH
15147: LD_INT 108
15149: PUSH
15150: LD_INT 109
15152: PUSH
15153: LD_INT 110
15155: PUSH
15156: LD_INT 111
15158: PUSH
15159: LD_INT 112
15161: PUSH
15162: LD_INT 113
15164: PUSH
15165: LD_INT 114
15167: PUSH
15168: LD_INT 115
15170: PUSH
15171: LD_INT 116
15173: PUSH
15174: LD_INT 117
15176: PUSH
15177: LD_INT 118
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: ST_TO_ADDR
// if result then
15204: LD_VAR 0 2
15208: IFFALSE 15994
// begin normal :=  ;
15210: LD_ADDR_VAR 0 5
15214: PUSH
15215: LD_STRING 
15217: ST_TO_ADDR
// hardcore :=  ;
15218: LD_ADDR_VAR 0 6
15222: PUSH
15223: LD_STRING 
15225: ST_TO_ADDR
// active :=  ;
15226: LD_ADDR_VAR 0 7
15230: PUSH
15231: LD_STRING 
15233: ST_TO_ADDR
// for i = 1 to normalCounter do
15234: LD_ADDR_VAR 0 8
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_EXP 28
15248: PUSH
15249: FOR_TO
15250: IFFALSE 15351
// begin tmp := 0 ;
15252: LD_ADDR_VAR 0 3
15256: PUSH
15257: LD_STRING 0
15259: ST_TO_ADDR
// if result [ 1 ] then
15260: LD_VAR 0 2
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: IFFALSE 15333
// if result [ 1 ] [ 1 ] = i then
15270: LD_VAR 0 2
15274: PUSH
15275: LD_INT 1
15277: ARRAY
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PUSH
15283: LD_VAR 0 8
15287: EQUAL
15288: IFFALSE 15333
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15290: LD_ADDR_VAR 0 2
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: LD_VAR 0 2
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 3
15319: PPUSH
15320: CALL_OW 1
15324: ST_TO_ADDR
// tmp := 1 ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: LD_STRING 1
15332: ST_TO_ADDR
// end ; normal := normal & tmp ;
15333: LD_ADDR_VAR 0 5
15337: PUSH
15338: LD_VAR 0 5
15342: PUSH
15343: LD_VAR 0 3
15347: STR
15348: ST_TO_ADDR
// end ;
15349: GO 15249
15351: POP
15352: POP
// for i = 1 to hardcoreCounter do
15353: LD_ADDR_VAR 0 8
15357: PUSH
15358: DOUBLE
15359: LD_INT 1
15361: DEC
15362: ST_TO_ADDR
15363: LD_EXP 29
15367: PUSH
15368: FOR_TO
15369: IFFALSE 15474
// begin tmp := 0 ;
15371: LD_ADDR_VAR 0 3
15375: PUSH
15376: LD_STRING 0
15378: ST_TO_ADDR
// if result [ 2 ] then
15379: LD_VAR 0 2
15383: PUSH
15384: LD_INT 2
15386: ARRAY
15387: IFFALSE 15456
// if result [ 2 ] [ 1 ] = 100 + i then
15389: LD_VAR 0 2
15393: PUSH
15394: LD_INT 2
15396: ARRAY
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: PUSH
15402: LD_INT 100
15404: PUSH
15405: LD_VAR 0 8
15409: PLUS
15410: EQUAL
15411: IFFALSE 15456
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15413: LD_ADDR_VAR 0 2
15417: PUSH
15418: LD_VAR 0 2
15422: PPUSH
15423: LD_INT 2
15425: PPUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 2
15433: ARRAY
15434: PPUSH
15435: LD_INT 1
15437: PPUSH
15438: CALL_OW 3
15442: PPUSH
15443: CALL_OW 1
15447: ST_TO_ADDR
// tmp := 1 ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_STRING 1
15455: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15456: LD_ADDR_VAR 0 6
15460: PUSH
15461: LD_VAR 0 6
15465: PUSH
15466: LD_VAR 0 3
15470: STR
15471: ST_TO_ADDR
// end ;
15472: GO 15368
15474: POP
15475: POP
// if isGameLoad then
15476: LD_VAR 0 1
15480: IFFALSE 15955
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15482: LD_ADDR_VAR 0 4
15486: PUSH
15487: LD_EXP 32
15491: PUSH
15492: LD_EXP 31
15496: PUSH
15497: LD_EXP 33
15501: PUSH
15502: LD_EXP 30
15506: PUSH
15507: LD_EXP 34
15511: PUSH
15512: LD_EXP 35
15516: PUSH
15517: LD_EXP 36
15521: PUSH
15522: LD_EXP 37
15526: PUSH
15527: LD_EXP 38
15531: PUSH
15532: LD_EXP 39
15536: PUSH
15537: LD_EXP 40
15541: PUSH
15542: LD_EXP 41
15546: PUSH
15547: LD_EXP 42
15551: PUSH
15552: LD_EXP 43
15556: PUSH
15557: LD_EXP 51
15561: PUSH
15562: LD_EXP 52
15566: PUSH
15567: LD_EXP 53
15571: PUSH
15572: LD_EXP 54
15576: PUSH
15577: LD_EXP 56
15581: PUSH
15582: LD_EXP 57
15586: PUSH
15587: LD_EXP 58
15591: PUSH
15592: LD_EXP 61
15596: PUSH
15597: LD_EXP 63
15601: PUSH
15602: LD_EXP 64
15606: PUSH
15607: LD_EXP 65
15611: PUSH
15612: LD_EXP 67
15616: PUSH
15617: LD_EXP 68
15621: PUSH
15622: LD_EXP 71
15626: PUSH
15627: LD_EXP 72
15631: PUSH
15632: LD_EXP 73
15636: PUSH
15637: LD_EXP 74
15641: PUSH
15642: LD_EXP 75
15646: PUSH
15647: LD_EXP 76
15651: PUSH
15652: LD_EXP 77
15656: PUSH
15657: LD_EXP 78
15661: PUSH
15662: LD_EXP 79
15666: PUSH
15667: LD_EXP 44
15671: PUSH
15672: LD_EXP 45
15676: PUSH
15677: LD_EXP 48
15681: PUSH
15682: LD_EXP 49
15686: PUSH
15687: LD_EXP 50
15691: PUSH
15692: LD_EXP 46
15696: PUSH
15697: LD_EXP 47
15701: PUSH
15702: LD_EXP 55
15706: PUSH
15707: LD_EXP 59
15711: PUSH
15712: LD_EXP 60
15716: PUSH
15717: LD_EXP 62
15721: PUSH
15722: LD_EXP 66
15726: PUSH
15727: LD_EXP 69
15731: PUSH
15732: LD_EXP 70
15736: PUSH
15737: LD_EXP 80
15741: PUSH
15742: LD_EXP 81
15746: PUSH
15747: LD_EXP 82
15751: PUSH
15752: LD_EXP 83
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: ST_TO_ADDR
// tmp :=  ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_STRING 
15820: ST_TO_ADDR
// for i = 1 to normalCounter do
15821: LD_ADDR_VAR 0 8
15825: PUSH
15826: DOUBLE
15827: LD_INT 1
15829: DEC
15830: ST_TO_ADDR
15831: LD_EXP 28
15835: PUSH
15836: FOR_TO
15837: IFFALSE 15873
// begin if flags [ i ] then
15839: LD_VAR 0 4
15843: PUSH
15844: LD_VAR 0 8
15848: ARRAY
15849: IFFALSE 15871
// tmp := tmp & i & ; ;
15851: LD_ADDR_VAR 0 3
15855: PUSH
15856: LD_VAR 0 3
15860: PUSH
15861: LD_VAR 0 8
15865: STR
15866: PUSH
15867: LD_STRING ;
15869: STR
15870: ST_TO_ADDR
// end ;
15871: GO 15836
15873: POP
15874: POP
// for i = 1 to hardcoreCounter do
15875: LD_ADDR_VAR 0 8
15879: PUSH
15880: DOUBLE
15881: LD_INT 1
15883: DEC
15884: ST_TO_ADDR
15885: LD_EXP 29
15889: PUSH
15890: FOR_TO
15891: IFFALSE 15937
// begin if flags [ normalCounter + i ] then
15893: LD_VAR 0 4
15897: PUSH
15898: LD_EXP 28
15902: PUSH
15903: LD_VAR 0 8
15907: PLUS
15908: ARRAY
15909: IFFALSE 15935
// tmp := tmp & ( 100 + i ) & ; ;
15911: LD_ADDR_VAR 0 3
15915: PUSH
15916: LD_VAR 0 3
15920: PUSH
15921: LD_INT 100
15923: PUSH
15924: LD_VAR 0 8
15928: PLUS
15929: STR
15930: PUSH
15931: LD_STRING ;
15933: STR
15934: ST_TO_ADDR
// end ;
15935: GO 15890
15937: POP
15938: POP
// if tmp then
15939: LD_VAR 0 3
15943: IFFALSE 15955
// active := tmp ;
15945: LD_ADDR_VAR 0 7
15949: PUSH
15950: LD_VAR 0 3
15954: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15955: LD_STRING getStreamItemsFromMission("
15957: PUSH
15958: LD_VAR 0 5
15962: STR
15963: PUSH
15964: LD_STRING ","
15966: STR
15967: PUSH
15968: LD_VAR 0 6
15972: STR
15973: PUSH
15974: LD_STRING ","
15976: STR
15977: PUSH
15978: LD_VAR 0 7
15982: STR
15983: PUSH
15984: LD_STRING ")
15986: STR
15987: PPUSH
15988: CALL_OW 559
// end else
15992: GO 16001
// ToLua ( getStreamItemsFromMission("","","") ) ;
15994: LD_STRING getStreamItemsFromMission("","","")
15996: PPUSH
15997: CALL_OW 559
// end ;
16001: LD_VAR 0 2
16005: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16006: LD_EXP 27
16010: PUSH
16011: LD_EXP 32
16015: AND
16016: IFFALSE 16140
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
// begin enable ;
16025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_INT 22
16033: PUSH
16034: LD_OWVAR 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 2
16045: PUSH
16046: LD_INT 34
16048: PUSH
16049: LD_INT 7
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 34
16058: PUSH
16059: LD_INT 45
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 34
16068: PUSH
16069: LD_INT 28
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 34
16078: PUSH
16079: LD_INT 47
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not tmp then
16102: LD_VAR 0 2
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16140
// for i in tmp do
16111: LD_ADDR_VAR 0 1
16115: PUSH
16116: LD_VAR 0 2
16120: PUSH
16121: FOR_IN
16122: IFFALSE 16138
// begin SetLives ( i , 0 ) ;
16124: LD_VAR 0 1
16128: PPUSH
16129: LD_INT 0
16131: PPUSH
16132: CALL_OW 234
// end ;
16136: GO 16121
16138: POP
16139: POP
// end ;
16140: PPOPN 2
16142: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16143: LD_EXP 27
16147: PUSH
16148: LD_EXP 33
16152: AND
16153: IFFALSE 16237
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
// begin enable ;
16162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_OWVAR 2
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 32
16182: PUSH
16183: LD_INT 3
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PPUSH
16194: CALL_OW 69
16198: ST_TO_ADDR
// if not tmp then
16199: LD_VAR 0 2
16203: NOT
16204: IFFALSE 16208
// exit ;
16206: GO 16237
// for i in tmp do
16208: LD_ADDR_VAR 0 1
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: FOR_IN
16219: IFFALSE 16235
// begin SetLives ( i , 0 ) ;
16221: LD_VAR 0 1
16225: PPUSH
16226: LD_INT 0
16228: PPUSH
16229: CALL_OW 234
// end ;
16233: GO 16218
16235: POP
16236: POP
// end ;
16237: PPOPN 2
16239: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16240: LD_EXP 27
16244: PUSH
16245: LD_EXP 30
16249: AND
16250: IFFALSE 16343
16252: GO 16254
16254: DISABLE
16255: LD_INT 0
16257: PPUSH
// begin enable ;
16258: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16259: LD_ADDR_VAR 0 1
16263: PUSH
16264: LD_INT 22
16266: PUSH
16267: LD_OWVAR 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 25
16281: PUSH
16282: LD_INT 5
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 25
16291: PUSH
16292: LD_INT 9
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 25
16301: PUSH
16302: LD_INT 8
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PPUSH
16319: CALL_OW 69
16323: PUSH
16324: FOR_IN
16325: IFFALSE 16341
// begin SetClass ( i , 1 ) ;
16327: LD_VAR 0 1
16331: PPUSH
16332: LD_INT 1
16334: PPUSH
16335: CALL_OW 336
// end ;
16339: GO 16324
16341: POP
16342: POP
// end ;
16343: PPOPN 1
16345: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16346: LD_EXP 27
16350: PUSH
16351: LD_EXP 31
16355: AND
16356: PUSH
16357: LD_OWVAR 65
16361: PUSH
16362: LD_INT 7
16364: LESS
16365: AND
16366: IFFALSE 16380
16368: GO 16370
16370: DISABLE
// begin enable ;
16371: ENABLE
// game_speed := 7 ;
16372: LD_ADDR_OWVAR 65
16376: PUSH
16377: LD_INT 7
16379: ST_TO_ADDR
// end ;
16380: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16381: LD_EXP 27
16385: PUSH
16386: LD_EXP 34
16390: AND
16391: IFFALSE 16593
16393: GO 16395
16395: DISABLE
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16401: LD_ADDR_VAR 0 3
16405: PUSH
16406: LD_INT 81
16408: PUSH
16409: LD_OWVAR 2
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 21
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: ST_TO_ADDR
// if not tmp then
16437: LD_VAR 0 3
16441: NOT
16442: IFFALSE 16446
// exit ;
16444: GO 16593
// if tmp > 5 then
16446: LD_VAR 0 3
16450: PUSH
16451: LD_INT 5
16453: GREATER
16454: IFFALSE 16466
// k := 5 else
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 5
16463: ST_TO_ADDR
16464: GO 16476
// k := tmp ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 3
16475: ST_TO_ADDR
// for i := 1 to k do
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: DOUBLE
16482: LD_INT 1
16484: DEC
16485: ST_TO_ADDR
16486: LD_VAR 0 2
16490: PUSH
16491: FOR_TO
16492: IFFALSE 16591
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16494: LD_VAR 0 3
16498: PUSH
16499: LD_VAR 0 1
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 1
16509: PUSH
16510: LD_INT 4
16512: MOD
16513: PUSH
16514: LD_INT 1
16516: PLUS
16517: PPUSH
16518: CALL_OW 259
16522: PUSH
16523: LD_INT 10
16525: LESS
16526: IFFALSE 16589
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16528: LD_VAR 0 3
16532: PUSH
16533: LD_VAR 0 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 1
16543: PUSH
16544: LD_INT 4
16546: MOD
16547: PUSH
16548: LD_INT 1
16550: PLUS
16551: PPUSH
16552: LD_VAR 0 3
16556: PUSH
16557: LD_VAR 0 1
16561: ARRAY
16562: PPUSH
16563: LD_VAR 0 1
16567: PUSH
16568: LD_INT 4
16570: MOD
16571: PUSH
16572: LD_INT 1
16574: PLUS
16575: PPUSH
16576: CALL_OW 259
16580: PUSH
16581: LD_INT 1
16583: PLUS
16584: PPUSH
16585: CALL_OW 237
16589: GO 16491
16591: POP
16592: POP
// end ;
16593: PPOPN 3
16595: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16596: LD_EXP 27
16600: PUSH
16601: LD_EXP 35
16605: AND
16606: IFFALSE 16626
16608: GO 16610
16610: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16611: LD_INT 4
16613: PPUSH
16614: LD_OWVAR 2
16618: PPUSH
16619: LD_INT 0
16621: PPUSH
16622: CALL_OW 324
16626: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16627: LD_EXP 27
16631: PUSH
16632: LD_EXP 64
16636: AND
16637: IFFALSE 16657
16639: GO 16641
16641: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16642: LD_INT 19
16644: PPUSH
16645: LD_OWVAR 2
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL_OW 324
16657: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16658: LD_EXP 27
16662: PUSH
16663: LD_EXP 36
16667: AND
16668: IFFALSE 16770
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
// begin enable ;
16677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16678: LD_ADDR_VAR 0 2
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_OWVAR 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 2
16697: PUSH
16698: LD_INT 34
16700: PUSH
16701: LD_INT 11
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 34
16710: PUSH
16711: LD_INT 30
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PPUSH
16727: CALL_OW 69
16731: ST_TO_ADDR
// if not tmp then
16732: LD_VAR 0 2
16736: NOT
16737: IFFALSE 16741
// exit ;
16739: GO 16770
// for i in tmp do
16741: LD_ADDR_VAR 0 1
16745: PUSH
16746: LD_VAR 0 2
16750: PUSH
16751: FOR_IN
16752: IFFALSE 16768
// begin SetLives ( i , 0 ) ;
16754: LD_VAR 0 1
16758: PPUSH
16759: LD_INT 0
16761: PPUSH
16762: CALL_OW 234
// end ;
16766: GO 16751
16768: POP
16769: POP
// end ;
16770: PPOPN 2
16772: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16773: LD_EXP 27
16777: PUSH
16778: LD_EXP 37
16782: AND
16783: IFFALSE 16803
16785: GO 16787
16787: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16788: LD_INT 32
16790: PPUSH
16791: LD_OWVAR 2
16795: PPUSH
16796: LD_INT 0
16798: PPUSH
16799: CALL_OW 324
16803: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16804: LD_EXP 27
16808: PUSH
16809: LD_EXP 38
16813: AND
16814: IFFALSE 16995
16816: GO 16818
16818: DISABLE
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 33
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: ST_TO_ADDR
// if not tmp then
16860: LD_VAR 0 2
16864: NOT
16865: IFFALSE 16869
// exit ;
16867: GO 16995
// side := 0 ;
16869: LD_ADDR_VAR 0 3
16873: PUSH
16874: LD_INT 0
16876: ST_TO_ADDR
// for i := 1 to 8 do
16877: LD_ADDR_VAR 0 1
16881: PUSH
16882: DOUBLE
16883: LD_INT 1
16885: DEC
16886: ST_TO_ADDR
16887: LD_INT 8
16889: PUSH
16890: FOR_TO
16891: IFFALSE 16939
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16893: LD_OWVAR 2
16897: PUSH
16898: LD_VAR 0 1
16902: NONEQUAL
16903: PUSH
16904: LD_OWVAR 2
16908: PPUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 81
16918: PUSH
16919: LD_INT 2
16921: EQUAL
16922: AND
16923: IFFALSE 16937
// begin side := i ;
16925: LD_ADDR_VAR 0 3
16929: PUSH
16930: LD_VAR 0 1
16934: ST_TO_ADDR
// break ;
16935: GO 16939
// end ;
16937: GO 16890
16939: POP
16940: POP
// if not side then
16941: LD_VAR 0 3
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 16995
// for i := 1 to tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: DOUBLE
16956: LD_INT 1
16958: DEC
16959: ST_TO_ADDR
16960: LD_VAR 0 2
16964: PUSH
16965: FOR_TO
16966: IFFALSE 16993
// if Prob ( 60 ) then
16968: LD_INT 60
16970: PPUSH
16971: CALL_OW 13
16975: IFFALSE 16991
// SetSide ( i , side ) ;
16977: LD_VAR 0 1
16981: PPUSH
16982: LD_VAR 0 3
16986: PPUSH
16987: CALL_OW 235
16991: GO 16965
16993: POP
16994: POP
// end ;
16995: PPOPN 3
16997: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16998: LD_EXP 27
17002: PUSH
17003: LD_EXP 40
17007: AND
17008: IFFALSE 17127
17010: GO 17012
17012: DISABLE
17013: LD_INT 0
17015: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17016: LD_ADDR_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 21
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 0
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: PPUSH
17065: CALL_OW 69
17069: PUSH
17070: FOR_IN
17071: IFFALSE 17125
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 257
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: LD_INT 2
17088: PUSH
17089: LD_INT 3
17091: PUSH
17092: LD_INT 4
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: IN
17101: IFFALSE 17123
// SetClass ( un , rand ( 1 , 4 ) ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_INT 1
17110: PPUSH
17111: LD_INT 4
17113: PPUSH
17114: CALL_OW 12
17118: PPUSH
17119: CALL_OW 336
17123: GO 17070
17125: POP
17126: POP
// end ;
17127: PPOPN 1
17129: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17130: LD_EXP 27
17134: PUSH
17135: LD_EXP 39
17139: AND
17140: IFFALSE 17219
17142: GO 17144
17144: DISABLE
17145: LD_INT 0
17147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_OWVAR 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 69
17183: ST_TO_ADDR
// if not tmp then
17184: LD_VAR 0 1
17188: NOT
17189: IFFALSE 17193
// exit ;
17191: GO 17219
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 1
17200: PPUSH
17201: LD_VAR 0 1
17205: PPUSH
17206: CALL_OW 12
17210: ARRAY
17211: PPUSH
17212: LD_INT 100
17214: PPUSH
17215: CALL_OW 234
// end ;
17219: PPOPN 1
17221: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17222: LD_EXP 27
17226: PUSH
17227: LD_EXP 41
17231: AND
17232: IFFALSE 17330
17234: GO 17236
17236: DISABLE
17237: LD_INT 0
17239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17240: LD_ADDR_VAR 0 1
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_OWVAR 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 21
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: ST_TO_ADDR
// if not tmp then
17276: LD_VAR 0 1
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17330
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17285: LD_VAR 0 1
17289: PUSH
17290: LD_INT 1
17292: PPUSH
17293: LD_VAR 0 1
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: LD_INT 4
17309: PPUSH
17310: CALL_OW 12
17314: PPUSH
17315: LD_INT 3000
17317: PPUSH
17318: LD_INT 9000
17320: PPUSH
17321: CALL_OW 12
17325: PPUSH
17326: CALL_OW 492
// end ;
17330: PPOPN 1
17332: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17333: LD_EXP 27
17337: PUSH
17338: LD_EXP 42
17342: AND
17343: IFFALSE 17363
17345: GO 17347
17347: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17348: LD_INT 1
17350: PPUSH
17351: LD_OWVAR 2
17355: PPUSH
17356: LD_INT 0
17358: PPUSH
17359: CALL_OW 324
17363: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17364: LD_EXP 27
17368: PUSH
17369: LD_EXP 43
17373: AND
17374: IFFALSE 17457
17376: GO 17378
17378: DISABLE
17379: LD_INT 0
17381: PPUSH
17382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PPUSH
17414: CALL_OW 69
17418: ST_TO_ADDR
// if not tmp then
17419: LD_VAR 0 2
17423: NOT
17424: IFFALSE 17428
// exit ;
17426: GO 17457
// for i in tmp do
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: FOR_IN
17439: IFFALSE 17455
// SetBLevel ( i , 10 ) ;
17441: LD_VAR 0 1
17445: PPUSH
17446: LD_INT 10
17448: PPUSH
17449: CALL_OW 241
17453: GO 17438
17455: POP
17456: POP
// end ;
17457: PPOPN 2
17459: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17460: LD_EXP 27
17464: PUSH
17465: LD_EXP 44
17469: AND
17470: IFFALSE 17581
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
17478: PPUSH
17479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_OWVAR 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 25
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 3
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17581
// un := tmp [ rand ( 1 , tmp ) ] ;
17525: LD_ADDR_VAR 0 2
17529: PUSH
17530: LD_VAR 0 3
17534: PUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: CALL_OW 12
17547: ARRAY
17548: ST_TO_ADDR
// if Crawls ( un ) then
17549: LD_VAR 0 2
17553: PPUSH
17554: CALL_OW 318
17558: IFFALSE 17569
// ComWalk ( un ) ;
17560: LD_VAR 0 2
17564: PPUSH
17565: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17569: LD_VAR 0 2
17573: PPUSH
17574: LD_INT 5
17576: PPUSH
17577: CALL_OW 336
// end ;
17581: PPOPN 3
17583: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17584: LD_EXP 27
17588: PUSH
17589: LD_EXP 45
17593: AND
17594: PUSH
17595: LD_OWVAR 67
17599: PUSH
17600: LD_INT 4
17602: LESS
17603: AND
17604: IFFALSE 17623
17606: GO 17608
17608: DISABLE
// begin Difficulty := Difficulty + 1 ;
17609: LD_ADDR_OWVAR 67
17613: PUSH
17614: LD_OWVAR 67
17618: PUSH
17619: LD_INT 1
17621: PLUS
17622: ST_TO_ADDR
// end ;
17623: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17624: LD_EXP 27
17628: PUSH
17629: LD_EXP 46
17633: AND
17634: IFFALSE 17737
17636: GO 17638
17638: DISABLE
17639: LD_INT 0
17641: PPUSH
// begin for i := 1 to 5 do
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: DOUBLE
17648: LD_INT 1
17650: DEC
17651: ST_TO_ADDR
17652: LD_INT 5
17654: PUSH
17655: FOR_TO
17656: IFFALSE 17735
// begin uc_nation := nation_nature ;
17658: LD_ADDR_OWVAR 21
17662: PUSH
17663: LD_INT 0
17665: ST_TO_ADDR
// uc_side := 0 ;
17666: LD_ADDR_OWVAR 20
17670: PUSH
17671: LD_INT 0
17673: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17674: LD_ADDR_OWVAR 29
17678: PUSH
17679: LD_INT 12
17681: PUSH
17682: LD_INT 12
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: ST_TO_ADDR
// hc_agressivity := 20 ;
17689: LD_ADDR_OWVAR 35
17693: PUSH
17694: LD_INT 20
17696: ST_TO_ADDR
// hc_class := class_tiger ;
17697: LD_ADDR_OWVAR 28
17701: PUSH
17702: LD_INT 14
17704: ST_TO_ADDR
// hc_gallery :=  ;
17705: LD_ADDR_OWVAR 33
17709: PUSH
17710: LD_STRING 
17712: ST_TO_ADDR
// hc_name :=  ;
17713: LD_ADDR_OWVAR 26
17717: PUSH
17718: LD_STRING 
17720: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17721: CALL_OW 44
17725: PPUSH
17726: LD_INT 0
17728: PPUSH
17729: CALL_OW 51
// end ;
17733: GO 17655
17735: POP
17736: POP
// end ;
17737: PPOPN 1
17739: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17740: LD_EXP 27
17744: PUSH
17745: LD_EXP 47
17749: AND
17750: IFFALSE 17759
17752: GO 17754
17754: DISABLE
// StreamSibBomb ;
17755: CALL 17760 0 0
17759: END
// export function StreamSibBomb ; var i , x , y ; begin
17760: LD_INT 0
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
// result := false ;
17766: LD_ADDR_VAR 0 1
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// for i := 1 to 16 do
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: DOUBLE
17780: LD_INT 1
17782: DEC
17783: ST_TO_ADDR
17784: LD_INT 16
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17987
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 10
17797: PUSH
17798: LD_INT 20
17800: PUSH
17801: LD_INT 30
17803: PUSH
17804: LD_INT 40
17806: PUSH
17807: LD_INT 50
17809: PUSH
17810: LD_INT 60
17812: PUSH
17813: LD_INT 70
17815: PUSH
17816: LD_INT 80
17818: PUSH
17819: LD_INT 90
17821: PUSH
17822: LD_INT 100
17824: PUSH
17825: LD_INT 110
17827: PUSH
17828: LD_INT 120
17830: PUSH
17831: LD_INT 130
17833: PUSH
17834: LD_INT 140
17836: PUSH
17837: LD_INT 150
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 15
17862: PPUSH
17863: CALL_OW 12
17867: ARRAY
17868: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17869: LD_ADDR_VAR 0 4
17873: PUSH
17874: LD_INT 10
17876: PUSH
17877: LD_INT 20
17879: PUSH
17880: LD_INT 30
17882: PUSH
17883: LD_INT 40
17885: PUSH
17886: LD_INT 50
17888: PUSH
17889: LD_INT 60
17891: PUSH
17892: LD_INT 70
17894: PUSH
17895: LD_INT 80
17897: PUSH
17898: LD_INT 90
17900: PUSH
17901: LD_INT 100
17903: PUSH
17904: LD_INT 110
17906: PUSH
17907: LD_INT 120
17909: PUSH
17910: LD_INT 130
17912: PUSH
17913: LD_INT 140
17915: PUSH
17916: LD_INT 150
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 1
17938: PPUSH
17939: LD_INT 15
17941: PPUSH
17942: CALL_OW 12
17946: ARRAY
17947: ST_TO_ADDR
// if ValidHex ( x , y ) then
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_VAR 0 4
17957: PPUSH
17958: CALL_OW 488
17962: IFFALSE 17985
// begin result := [ x , y ] ;
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: LD_VAR 0 3
17973: PUSH
17974: LD_VAR 0 4
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// break ;
17983: GO 17987
// end ; end ;
17985: GO 17787
17987: POP
17988: POP
// if result then
17989: LD_VAR 0 1
17993: IFFALSE 18053
// begin ToLua ( playSibBomb() ) ;
17995: LD_STRING playSibBomb()
17997: PPUSH
17998: CALL_OW 559
// wait ( 0 0$14 ) ;
18002: LD_INT 490
18004: PPUSH
18005: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18009: LD_VAR 0 1
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: LD_VAR 0 1
18022: PUSH
18023: LD_INT 2
18025: ARRAY
18026: PPUSH
18027: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18031: LD_VAR 0 1
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PPUSH
18040: LD_VAR 0 1
18044: PUSH
18045: LD_INT 2
18047: ARRAY
18048: PPUSH
18049: CALL_OW 429
// end ; end ;
18053: LD_VAR 0 1
18057: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18058: LD_EXP 27
18062: PUSH
18063: LD_EXP 49
18067: AND
18068: IFFALSE 18080
18070: GO 18072
18072: DISABLE
// YouLost (  ) ;
18073: LD_STRING 
18075: PPUSH
18076: CALL_OW 104
18080: END
// every 0 0$1 trigger StreamModeActive and sFog do
18081: LD_EXP 27
18085: PUSH
18086: LD_EXP 48
18090: AND
18091: IFFALSE 18105
18093: GO 18095
18095: DISABLE
// FogOff ( your_side ) ;
18096: LD_OWVAR 2
18100: PPUSH
18101: CALL_OW 344
18105: END
// every 0 0$1 trigger StreamModeActive and sSun do
18106: LD_EXP 27
18110: PUSH
18111: LD_EXP 50
18115: AND
18116: IFFALSE 18144
18118: GO 18120
18120: DISABLE
// begin solar_recharge_percent := 0 ;
18121: LD_ADDR_OWVAR 79
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18129: LD_INT 10500
18131: PPUSH
18132: CALL_OW 67
// solar_recharge_percent := 100 ;
18136: LD_ADDR_OWVAR 79
18140: PUSH
18141: LD_INT 100
18143: ST_TO_ADDR
// end ;
18144: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18145: LD_EXP 27
18149: PUSH
18150: LD_EXP 51
18154: AND
18155: IFFALSE 18394
18157: GO 18159
18159: DISABLE
18160: LD_INT 0
18162: PPUSH
18163: PPUSH
18164: PPUSH
// begin tmp := [ ] ;
18165: LD_ADDR_VAR 0 3
18169: PUSH
18170: EMPTY
18171: ST_TO_ADDR
// for i := 1 to 6 do
18172: LD_ADDR_VAR 0 1
18176: PUSH
18177: DOUBLE
18178: LD_INT 1
18180: DEC
18181: ST_TO_ADDR
18182: LD_INT 6
18184: PUSH
18185: FOR_TO
18186: IFFALSE 18291
// begin uc_nation := nation_nature ;
18188: LD_ADDR_OWVAR 21
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// uc_side := 0 ;
18196: LD_ADDR_OWVAR 20
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18204: LD_ADDR_OWVAR 29
18208: PUSH
18209: LD_INT 12
18211: PUSH
18212: LD_INT 12
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: ST_TO_ADDR
// hc_agressivity := 20 ;
18219: LD_ADDR_OWVAR 35
18223: PUSH
18224: LD_INT 20
18226: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18227: LD_ADDR_OWVAR 28
18231: PUSH
18232: LD_INT 17
18234: ST_TO_ADDR
// hc_gallery :=  ;
18235: LD_ADDR_OWVAR 33
18239: PUSH
18240: LD_STRING 
18242: ST_TO_ADDR
// hc_name :=  ;
18243: LD_ADDR_OWVAR 26
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// un := CreateHuman ;
18251: LD_ADDR_VAR 0 2
18255: PUSH
18256: CALL_OW 44
18260: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18261: LD_VAR 0 2
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 51
// tmp := tmp ^ un ;
18273: LD_ADDR_VAR 0 3
18277: PUSH
18278: LD_VAR 0 3
18282: PUSH
18283: LD_VAR 0 2
18287: ADD
18288: ST_TO_ADDR
// end ;
18289: GO 18185
18291: POP
18292: POP
// repeat wait ( 0 0$1 ) ;
18293: LD_INT 35
18295: PPUSH
18296: CALL_OW 67
// for un in tmp do
18300: LD_ADDR_VAR 0 2
18304: PUSH
18305: LD_VAR 0 3
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18385
// begin if IsDead ( un ) then
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 301
18322: IFFALSE 18342
// begin tmp := tmp diff un ;
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 2
18338: DIFF
18339: ST_TO_ADDR
// continue ;
18340: GO 18310
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_INT 3
18349: PUSH
18350: LD_INT 22
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 69
18368: PPUSH
18369: LD_VAR 0 2
18373: PPUSH
18374: CALL_OW 74
18378: PPUSH
18379: CALL_OW 115
// end ;
18383: GO 18310
18385: POP
18386: POP
// until not tmp ;
18387: LD_VAR 0 3
18391: NOT
18392: IFFALSE 18293
// end ;
18394: PPOPN 3
18396: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18397: LD_EXP 27
18401: PUSH
18402: LD_EXP 52
18406: AND
18407: IFFALSE 18461
18409: GO 18411
18411: DISABLE
// begin ToLua ( displayTroll(); ) ;
18412: LD_STRING displayTroll();
18414: PPUSH
18415: CALL_OW 559
// wait ( 3 3$00 ) ;
18419: LD_INT 6300
18421: PPUSH
18422: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18426: LD_STRING hideTroll();
18428: PPUSH
18429: CALL_OW 559
// wait ( 1 1$00 ) ;
18433: LD_INT 2100
18435: PPUSH
18436: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18440: LD_STRING displayTroll();
18442: PPUSH
18443: CALL_OW 559
// wait ( 1 1$00 ) ;
18447: LD_INT 2100
18449: PPUSH
18450: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18454: LD_STRING hideTroll();
18456: PPUSH
18457: CALL_OW 559
// end ;
18461: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18462: LD_EXP 27
18466: PUSH
18467: LD_EXP 53
18471: AND
18472: IFFALSE 18535
18474: GO 18476
18476: DISABLE
18477: LD_INT 0
18479: PPUSH
// begin p := 0 ;
18480: LD_ADDR_VAR 0 1
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// repeat game_speed := 1 ;
18488: LD_ADDR_OWVAR 65
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18496: LD_INT 35
18498: PPUSH
18499: CALL_OW 67
// p := p + 1 ;
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 1
18512: PUSH
18513: LD_INT 1
18515: PLUS
18516: ST_TO_ADDR
// until p >= 60 ;
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 60
18524: GREATEREQUAL
18525: IFFALSE 18488
// game_speed := 4 ;
18527: LD_ADDR_OWVAR 65
18531: PUSH
18532: LD_INT 4
18534: ST_TO_ADDR
// end ;
18535: PPOPN 1
18537: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18538: LD_EXP 27
18542: PUSH
18543: LD_EXP 54
18547: AND
18548: IFFALSE 18694
18550: GO 18552
18552: DISABLE
18553: LD_INT 0
18555: PPUSH
18556: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18557: LD_ADDR_VAR 0 1
18561: PUSH
18562: LD_INT 22
18564: PUSH
18565: LD_OWVAR 2
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 30
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 30
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PPUSH
18606: CALL_OW 69
18610: ST_TO_ADDR
// if not depot then
18611: LD_VAR 0 1
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 18694
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18620: LD_ADDR_VAR 0 2
18624: PUSH
18625: LD_VAR 0 1
18629: PUSH
18630: LD_INT 1
18632: PPUSH
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 12
18642: ARRAY
18643: PPUSH
18644: CALL_OW 274
18648: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18649: LD_VAR 0 2
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: LD_INT 0
18659: PPUSH
18660: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18664: LD_VAR 0 2
18668: PPUSH
18669: LD_INT 2
18671: PPUSH
18672: LD_INT 0
18674: PPUSH
18675: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18679: LD_VAR 0 2
18683: PPUSH
18684: LD_INT 3
18686: PPUSH
18687: LD_INT 0
18689: PPUSH
18690: CALL_OW 277
// end ;
18694: PPOPN 2
18696: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18697: LD_EXP 27
18701: PUSH
18702: LD_EXP 55
18706: AND
18707: IFFALSE 18804
18709: GO 18711
18711: DISABLE
18712: LD_INT 0
18714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18715: LD_ADDR_VAR 0 1
18719: PUSH
18720: LD_INT 22
18722: PUSH
18723: LD_OWVAR 2
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 21
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: LD_INT 23
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 69
18768: ST_TO_ADDR
// if not tmp then
18769: LD_VAR 0 1
18773: NOT
18774: IFFALSE 18778
// exit ;
18776: GO 18804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 1
18785: PPUSH
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 12
18795: ARRAY
18796: PPUSH
18797: LD_INT 200
18799: PPUSH
18800: CALL_OW 234
// end ;
18804: PPOPN 1
18806: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18807: LD_EXP 27
18811: PUSH
18812: LD_EXP 56
18816: AND
18817: IFFALSE 18896
18819: GO 18821
18821: DISABLE
18822: LD_INT 0
18824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18825: LD_ADDR_VAR 0 1
18829: PUSH
18830: LD_INT 22
18832: PUSH
18833: LD_OWVAR 2
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: ST_TO_ADDR
// if not tmp then
18861: LD_VAR 0 1
18865: NOT
18866: IFFALSE 18870
// exit ;
18868: GO 18896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18870: LD_VAR 0 1
18874: PUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_VAR 0 1
18882: PPUSH
18883: CALL_OW 12
18887: ARRAY
18888: PPUSH
18889: LD_INT 60
18891: PPUSH
18892: CALL_OW 234
// end ;
18896: PPOPN 1
18898: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18899: LD_EXP 27
18903: PUSH
18904: LD_EXP 57
18908: AND
18909: IFFALSE 19008
18911: GO 18913
18913: DISABLE
18914: LD_INT 0
18916: PPUSH
18917: PPUSH
// begin enable ;
18918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18919: LD_ADDR_VAR 0 1
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 61
18938: PUSH
18939: EMPTY
18940: LIST
18941: PUSH
18942: LD_INT 33
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PPUSH
18957: CALL_OW 69
18961: ST_TO_ADDR
// if not tmp then
18962: LD_VAR 0 1
18966: NOT
18967: IFFALSE 18971
// exit ;
18969: GO 19008
// for i in tmp do
18971: LD_ADDR_VAR 0 2
18975: PUSH
18976: LD_VAR 0 1
18980: PUSH
18981: FOR_IN
18982: IFFALSE 19006
// if IsControledBy ( i ) then
18984: LD_VAR 0 2
18988: PPUSH
18989: CALL_OW 312
18993: IFFALSE 19004
// ComUnlink ( i ) ;
18995: LD_VAR 0 2
18999: PPUSH
19000: CALL_OW 136
19004: GO 18981
19006: POP
19007: POP
// end ;
19008: PPOPN 2
19010: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19011: LD_EXP 27
19015: PUSH
19016: LD_EXP 58
19020: AND
19021: IFFALSE 19161
19023: GO 19025
19025: DISABLE
19026: LD_INT 0
19028: PPUSH
19029: PPUSH
// begin ToLua ( displayPowell(); ) ;
19030: LD_STRING displayPowell();
19032: PPUSH
19033: CALL_OW 559
// uc_side := 0 ;
19037: LD_ADDR_OWVAR 20
19041: PUSH
19042: LD_INT 0
19044: ST_TO_ADDR
// uc_nation := 2 ;
19045: LD_ADDR_OWVAR 21
19049: PUSH
19050: LD_INT 2
19052: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19053: LD_ADDR_OWVAR 37
19057: PUSH
19058: LD_INT 14
19060: ST_TO_ADDR
// vc_engine := engine_siberite ;
19061: LD_ADDR_OWVAR 39
19065: PUSH
19066: LD_INT 3
19068: ST_TO_ADDR
// vc_control := control_apeman ;
19069: LD_ADDR_OWVAR 38
19073: PUSH
19074: LD_INT 5
19076: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19077: LD_ADDR_OWVAR 40
19081: PUSH
19082: LD_INT 29
19084: ST_TO_ADDR
// un := CreateVehicle ;
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: CALL_OW 45
19094: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19107: LD_INT 35
19109: PPUSH
19110: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19114: LD_VAR 0 2
19118: PPUSH
19119: LD_INT 22
19121: PUSH
19122: LD_OWVAR 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: PPUSH
19136: LD_VAR 0 2
19140: PPUSH
19141: CALL_OW 74
19145: PPUSH
19146: CALL_OW 115
// until IsDead ( un ) ;
19150: LD_VAR 0 2
19154: PPUSH
19155: CALL_OW 301
19159: IFFALSE 19107
// end ;
19161: PPOPN 2
19163: END
// every 0 0$1 trigger StreamModeActive and sStu do
19164: LD_EXP 27
19168: PUSH
19169: LD_EXP 66
19173: AND
19174: IFFALSE 19190
19176: GO 19178
19178: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19179: LD_STRING displayStucuk();
19181: PPUSH
19182: CALL_OW 559
// ResetFog ;
19186: CALL_OW 335
// end ;
19190: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19191: LD_EXP 27
19195: PUSH
19196: LD_EXP 59
19200: AND
19201: IFFALSE 19342
19203: GO 19205
19205: DISABLE
19206: LD_INT 0
19208: PPUSH
19209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19210: LD_ADDR_VAR 0 2
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_OWVAR 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 21
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PPUSH
19241: CALL_OW 69
19245: ST_TO_ADDR
// if not tmp then
19246: LD_VAR 0 2
19250: NOT
19251: IFFALSE 19255
// exit ;
19253: GO 19342
// un := tmp [ rand ( 1 , tmp ) ] ;
19255: LD_ADDR_VAR 0 1
19259: PUSH
19260: LD_VAR 0 2
19264: PUSH
19265: LD_INT 1
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: CALL_OW 12
19277: ARRAY
19278: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_INT 0
19286: PPUSH
19287: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19291: LD_VAR 0 1
19295: PPUSH
19296: LD_OWVAR 3
19300: PUSH
19301: LD_VAR 0 1
19305: DIFF
19306: PPUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 74
19316: PPUSH
19317: CALL_OW 115
// wait ( 0 0$20 ) ;
19321: LD_INT 700
19323: PPUSH
19324: CALL_OW 67
// SetSide ( un , your_side ) ;
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_OWVAR 2
19337: PPUSH
19338: CALL_OW 235
// end ;
19342: PPOPN 2
19344: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19345: LD_EXP 27
19349: PUSH
19350: LD_EXP 60
19354: AND
19355: IFFALSE 19461
19357: GO 19359
19359: DISABLE
19360: LD_INT 0
19362: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_OWVAR 2
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 30
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// if not depot then
19417: LD_VAR 0 1
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 19461
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 1
19433: ARRAY
19434: PPUSH
19435: CALL_OW 250
19439: PPUSH
19440: LD_VAR 0 1
19444: PUSH
19445: LD_INT 1
19447: ARRAY
19448: PPUSH
19449: CALL_OW 251
19453: PPUSH
19454: LD_INT 70
19456: PPUSH
19457: CALL_OW 495
// end ;
19461: PPOPN 1
19463: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19464: LD_EXP 27
19468: PUSH
19469: LD_EXP 61
19473: AND
19474: IFFALSE 19685
19476: GO 19478
19478: DISABLE
19479: LD_INT 0
19481: PPUSH
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19486: LD_ADDR_VAR 0 5
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_OWVAR 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 69
19521: ST_TO_ADDR
// if not tmp then
19522: LD_VAR 0 5
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19685
// for i in tmp do
19531: LD_ADDR_VAR 0 1
19535: PUSH
19536: LD_VAR 0 5
19540: PUSH
19541: FOR_IN
19542: IFFALSE 19683
// begin d := rand ( 0 , 5 ) ;
19544: LD_ADDR_VAR 0 4
19548: PUSH
19549: LD_INT 0
19551: PPUSH
19552: LD_INT 5
19554: PPUSH
19555: CALL_OW 12
19559: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19560: LD_ADDR_VAR 0 2
19564: PUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 250
19574: PPUSH
19575: LD_VAR 0 4
19579: PPUSH
19580: LD_INT 3
19582: PPUSH
19583: LD_INT 12
19585: PPUSH
19586: CALL_OW 12
19590: PPUSH
19591: CALL_OW 272
19595: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 251
19610: PPUSH
19611: LD_VAR 0 4
19615: PPUSH
19616: LD_INT 3
19618: PPUSH
19619: LD_INT 12
19621: PPUSH
19622: CALL_OW 12
19626: PPUSH
19627: CALL_OW 273
19631: ST_TO_ADDR
// if ValidHex ( x , y ) then
19632: LD_VAR 0 2
19636: PPUSH
19637: LD_VAR 0 3
19641: PPUSH
19642: CALL_OW 488
19646: IFFALSE 19681
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19648: LD_VAR 0 1
19652: PPUSH
19653: LD_VAR 0 2
19657: PPUSH
19658: LD_VAR 0 3
19662: PPUSH
19663: LD_INT 3
19665: PPUSH
19666: LD_INT 6
19668: PPUSH
19669: CALL_OW 12
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 483
// end ;
19681: GO 19541
19683: POP
19684: POP
// end ;
19685: PPOPN 5
19687: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19688: LD_EXP 27
19692: PUSH
19693: LD_EXP 62
19697: AND
19698: IFFALSE 19792
19700: GO 19702
19702: DISABLE
19703: LD_INT 0
19705: PPUSH
19706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19707: LD_ADDR_VAR 0 2
19711: PUSH
19712: LD_INT 22
19714: PUSH
19715: LD_OWVAR 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 32
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 21
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: PPUSH
19749: CALL_OW 69
19753: ST_TO_ADDR
// if not tmp then
19754: LD_VAR 0 2
19758: NOT
19759: IFFALSE 19763
// exit ;
19761: GO 19792
// for i in tmp do
19763: LD_ADDR_VAR 0 1
19767: PUSH
19768: LD_VAR 0 2
19772: PUSH
19773: FOR_IN
19774: IFFALSE 19790
// SetFuel ( i , 0 ) ;
19776: LD_VAR 0 1
19780: PPUSH
19781: LD_INT 0
19783: PPUSH
19784: CALL_OW 240
19788: GO 19773
19790: POP
19791: POP
// end ;
19792: PPOPN 2
19794: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19795: LD_EXP 27
19799: PUSH
19800: LD_EXP 63
19804: AND
19805: IFFALSE 19871
19807: GO 19809
19809: DISABLE
19810: LD_INT 0
19812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19813: LD_ADDR_VAR 0 1
19817: PUSH
19818: LD_INT 22
19820: PUSH
19821: LD_OWVAR 2
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 30
19832: PUSH
19833: LD_INT 29
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PPUSH
19844: CALL_OW 69
19848: ST_TO_ADDR
// if not tmp then
19849: LD_VAR 0 1
19853: NOT
19854: IFFALSE 19858
// exit ;
19856: GO 19871
// DestroyUnit ( tmp [ 1 ] ) ;
19858: LD_VAR 0 1
19862: PUSH
19863: LD_INT 1
19865: ARRAY
19866: PPUSH
19867: CALL_OW 65
// end ;
19871: PPOPN 1
19873: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19874: LD_EXP 27
19878: PUSH
19879: LD_EXP 65
19883: AND
19884: IFFALSE 20013
19886: GO 19888
19888: DISABLE
19889: LD_INT 0
19891: PPUSH
// begin uc_side := 0 ;
19892: LD_ADDR_OWVAR 20
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// uc_nation := nation_arabian ;
19900: LD_ADDR_OWVAR 21
19904: PUSH
19905: LD_INT 2
19907: ST_TO_ADDR
// hc_gallery :=  ;
19908: LD_ADDR_OWVAR 33
19912: PUSH
19913: LD_STRING 
19915: ST_TO_ADDR
// hc_name :=  ;
19916: LD_ADDR_OWVAR 26
19920: PUSH
19921: LD_STRING 
19923: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19924: LD_INT 1
19926: PPUSH
19927: LD_INT 11
19929: PPUSH
19930: LD_INT 10
19932: PPUSH
19933: CALL_OW 380
// un := CreateHuman ;
19937: LD_ADDR_VAR 0 1
19941: PUSH
19942: CALL_OW 44
19946: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19947: LD_VAR 0 1
19951: PPUSH
19952: LD_INT 1
19954: PPUSH
19955: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19959: LD_INT 35
19961: PPUSH
19962: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19966: LD_VAR 0 1
19970: PPUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PPUSH
19983: CALL_OW 69
19987: PPUSH
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 74
19997: PPUSH
19998: CALL_OW 115
// until IsDead ( un ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 301
20011: IFFALSE 19959
// end ;
20013: PPOPN 1
20015: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20016: LD_EXP 27
20020: PUSH
20021: LD_EXP 67
20025: AND
20026: IFFALSE 20038
20028: GO 20030
20030: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20031: LD_STRING earthquake(getX(game), 0, 32)
20033: PPUSH
20034: CALL_OW 559
20038: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20039: LD_EXP 27
20043: PUSH
20044: LD_EXP 68
20048: AND
20049: IFFALSE 20140
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
// begin enable ;
20057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20058: LD_ADDR_VAR 0 1
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 21
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 33
20087: PUSH
20088: LD_INT 3
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: PPUSH
20100: CALL_OW 69
20104: ST_TO_ADDR
// if not tmp then
20105: LD_VAR 0 1
20109: NOT
20110: IFFALSE 20114
// exit ;
20112: GO 20140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: PPUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 12
20131: ARRAY
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL_OW 234
// end ;
20140: PPOPN 1
20142: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20143: LD_EXP 27
20147: PUSH
20148: LD_EXP 69
20152: AND
20153: IFFALSE 20294
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20163: LD_ADDR_VAR 0 3
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 25
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: ST_TO_ADDR
// if not tmp then
20199: LD_VAR 0 3
20203: NOT
20204: IFFALSE 20208
// exit ;
20206: GO 20294
// un := tmp [ rand ( 1 , tmp ) ] ;
20208: LD_ADDR_VAR 0 2
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 1
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: CALL_OW 12
20230: ARRAY
20231: ST_TO_ADDR
// if Crawls ( un ) then
20232: LD_VAR 0 2
20236: PPUSH
20237: CALL_OW 318
20241: IFFALSE 20252
// ComWalk ( un ) ;
20243: LD_VAR 0 2
20247: PPUSH
20248: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20252: LD_VAR 0 2
20256: PPUSH
20257: LD_INT 9
20259: PPUSH
20260: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20264: LD_INT 28
20266: PPUSH
20267: LD_OWVAR 2
20271: PPUSH
20272: LD_INT 2
20274: PPUSH
20275: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20279: LD_INT 29
20281: PPUSH
20282: LD_OWVAR 2
20286: PPUSH
20287: LD_INT 2
20289: PPUSH
20290: CALL_OW 322
// end ;
20294: PPOPN 3
20296: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20297: LD_EXP 27
20301: PUSH
20302: LD_EXP 70
20306: AND
20307: IFFALSE 20418
20309: GO 20311
20311: DISABLE
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
20316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20317: LD_ADDR_VAR 0 3
20321: PUSH
20322: LD_INT 22
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 25
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: ST_TO_ADDR
// if not tmp then
20353: LD_VAR 0 3
20357: NOT
20358: IFFALSE 20362
// exit ;
20360: GO 20418
// un := tmp [ rand ( 1 , tmp ) ] ;
20362: LD_ADDR_VAR 0 2
20366: PUSH
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: CALL_OW 12
20384: ARRAY
20385: ST_TO_ADDR
// if Crawls ( un ) then
20386: LD_VAR 0 2
20390: PPUSH
20391: CALL_OW 318
20395: IFFALSE 20406
// ComWalk ( un ) ;
20397: LD_VAR 0 2
20401: PPUSH
20402: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: LD_INT 8
20413: PPUSH
20414: CALL_OW 336
// end ;
20418: PPOPN 3
20420: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20421: LD_EXP 27
20425: PUSH
20426: LD_EXP 71
20430: AND
20431: IFFALSE 20575
20433: GO 20435
20435: DISABLE
20436: LD_INT 0
20438: PPUSH
20439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_OWVAR 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 21
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 34
20472: PUSH
20473: LD_INT 12
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 34
20482: PUSH
20483: LD_INT 51
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 34
20492: PUSH
20493: LD_INT 32
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 69
20515: ST_TO_ADDR
// if not tmp then
20516: LD_VAR 0 2
20520: NOT
20521: IFFALSE 20525
// exit ;
20523: GO 20575
// for i in tmp do
20525: LD_ADDR_VAR 0 1
20529: PUSH
20530: LD_VAR 0 2
20534: PUSH
20535: FOR_IN
20536: IFFALSE 20573
// if GetCargo ( i , mat_artifact ) = 0 then
20538: LD_VAR 0 1
20542: PPUSH
20543: LD_INT 4
20545: PPUSH
20546: CALL_OW 289
20550: PUSH
20551: LD_INT 0
20553: EQUAL
20554: IFFALSE 20571
// SetCargo ( i , mat_siberit , 100 ) ;
20556: LD_VAR 0 1
20560: PPUSH
20561: LD_INT 3
20563: PPUSH
20564: LD_INT 100
20566: PPUSH
20567: CALL_OW 290
20571: GO 20535
20573: POP
20574: POP
// end ;
20575: PPOPN 2
20577: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20578: LD_EXP 27
20582: PUSH
20583: LD_EXP 72
20587: AND
20588: IFFALSE 20771
20590: GO 20592
20592: DISABLE
20593: LD_INT 0
20595: PPUSH
20596: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: LD_INT 22
20604: PUSH
20605: LD_OWVAR 2
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PPUSH
20614: CALL_OW 69
20618: ST_TO_ADDR
// if not tmp then
20619: LD_VAR 0 2
20623: NOT
20624: IFFALSE 20628
// exit ;
20626: GO 20771
// for i := 1 to 2 do
20628: LD_ADDR_VAR 0 1
20632: PUSH
20633: DOUBLE
20634: LD_INT 1
20636: DEC
20637: ST_TO_ADDR
20638: LD_INT 2
20640: PUSH
20641: FOR_TO
20642: IFFALSE 20769
// begin uc_side := your_side ;
20644: LD_ADDR_OWVAR 20
20648: PUSH
20649: LD_OWVAR 2
20653: ST_TO_ADDR
// uc_nation := nation_american ;
20654: LD_ADDR_OWVAR 21
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// vc_chassis := us_morphling ;
20662: LD_ADDR_OWVAR 37
20666: PUSH
20667: LD_INT 5
20669: ST_TO_ADDR
// vc_engine := engine_siberite ;
20670: LD_ADDR_OWVAR 39
20674: PUSH
20675: LD_INT 3
20677: ST_TO_ADDR
// vc_control := control_computer ;
20678: LD_ADDR_OWVAR 38
20682: PUSH
20683: LD_INT 3
20685: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20686: LD_ADDR_OWVAR 40
20690: PUSH
20691: LD_INT 10
20693: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20694: LD_VAR 0 2
20698: PUSH
20699: LD_INT 1
20701: ARRAY
20702: PPUSH
20703: CALL_OW 310
20707: NOT
20708: IFFALSE 20755
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20710: CALL_OW 45
20714: PPUSH
20715: LD_VAR 0 2
20719: PUSH
20720: LD_INT 1
20722: ARRAY
20723: PPUSH
20724: CALL_OW 250
20728: PPUSH
20729: LD_VAR 0 2
20733: PUSH
20734: LD_INT 1
20736: ARRAY
20737: PPUSH
20738: CALL_OW 251
20742: PPUSH
20743: LD_INT 12
20745: PPUSH
20746: LD_INT 1
20748: PPUSH
20749: CALL_OW 50
20753: GO 20767
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20755: CALL_OW 45
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 51
// end ;
20767: GO 20641
20769: POP
20770: POP
// end ;
20771: PPOPN 2
20773: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20774: LD_EXP 27
20778: PUSH
20779: LD_EXP 73
20783: AND
20784: IFFALSE 21006
20786: GO 20788
20788: DISABLE
20789: LD_INT 0
20791: PPUSH
20792: PPUSH
20793: PPUSH
20794: PPUSH
20795: PPUSH
20796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20797: LD_ADDR_VAR 0 6
20801: PUSH
20802: LD_INT 22
20804: PUSH
20805: LD_OWVAR 2
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 21
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: LD_INT 23
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: PPUSH
20846: CALL_OW 69
20850: ST_TO_ADDR
// if not tmp then
20851: LD_VAR 0 6
20855: NOT
20856: IFFALSE 20860
// exit ;
20858: GO 21006
// s1 := rand ( 1 , 4 ) ;
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: LD_INT 1
20867: PPUSH
20868: LD_INT 4
20870: PPUSH
20871: CALL_OW 12
20875: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20876: LD_ADDR_VAR 0 4
20880: PUSH
20881: LD_VAR 0 6
20885: PUSH
20886: LD_INT 1
20888: ARRAY
20889: PPUSH
20890: LD_VAR 0 2
20894: PPUSH
20895: CALL_OW 259
20899: ST_TO_ADDR
// if s1 = 1 then
20900: LD_VAR 0 2
20904: PUSH
20905: LD_INT 1
20907: EQUAL
20908: IFFALSE 20928
// s2 := rand ( 2 , 4 ) else
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: LD_INT 2
20917: PPUSH
20918: LD_INT 4
20920: PPUSH
20921: CALL_OW 12
20925: ST_TO_ADDR
20926: GO 20936
// s2 := 1 ;
20928: LD_ADDR_VAR 0 3
20932: PUSH
20933: LD_INT 1
20935: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20936: LD_ADDR_VAR 0 5
20940: PUSH
20941: LD_VAR 0 6
20945: PUSH
20946: LD_INT 1
20948: ARRAY
20949: PPUSH
20950: LD_VAR 0 3
20954: PPUSH
20955: CALL_OW 259
20959: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20960: LD_VAR 0 6
20964: PUSH
20965: LD_INT 1
20967: ARRAY
20968: PPUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: LD_VAR 0 5
20978: PPUSH
20979: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20983: LD_VAR 0 6
20987: PUSH
20988: LD_INT 1
20990: ARRAY
20991: PPUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: LD_VAR 0 4
21001: PPUSH
21002: CALL_OW 237
// end ;
21006: PPOPN 6
21008: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21009: LD_EXP 27
21013: PUSH
21014: LD_EXP 74
21018: AND
21019: IFFALSE 21098
21021: GO 21023
21023: DISABLE
21024: LD_INT 0
21026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_OWVAR 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 30
21046: PUSH
21047: LD_INT 3
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: ST_TO_ADDR
// if not tmp then
21063: LD_VAR 0 1
21067: NOT
21068: IFFALSE 21072
// exit ;
21070: GO 21098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 1
21079: PPUSH
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL_OW 12
21089: ARRAY
21090: PPUSH
21091: LD_INT 1
21093: PPUSH
21094: CALL_OW 234
// end ;
21098: PPOPN 1
21100: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21101: LD_EXP 27
21105: PUSH
21106: LD_EXP 75
21110: AND
21111: IFFALSE 21223
21113: GO 21115
21115: DISABLE
21116: LD_INT 0
21118: PPUSH
21119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21120: LD_ADDR_VAR 0 2
21124: PUSH
21125: LD_INT 22
21127: PUSH
21128: LD_OWVAR 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 27
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 30
21152: PUSH
21153: LD_INT 26
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 30
21162: PUSH
21163: LD_INT 28
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PPUSH
21180: CALL_OW 69
21184: ST_TO_ADDR
// if not tmp then
21185: LD_VAR 0 2
21189: NOT
21190: IFFALSE 21194
// exit ;
21192: GO 21223
// for i in tmp do
21194: LD_ADDR_VAR 0 1
21198: PUSH
21199: LD_VAR 0 2
21203: PUSH
21204: FOR_IN
21205: IFFALSE 21221
// SetLives ( i , 1 ) ;
21207: LD_VAR 0 1
21211: PPUSH
21212: LD_INT 1
21214: PPUSH
21215: CALL_OW 234
21219: GO 21204
21221: POP
21222: POP
// end ;
21223: PPOPN 2
21225: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21226: LD_EXP 27
21230: PUSH
21231: LD_EXP 76
21235: AND
21236: IFFALSE 21523
21238: GO 21240
21240: DISABLE
21241: LD_INT 0
21243: PPUSH
21244: PPUSH
21245: PPUSH
// begin i := rand ( 1 , 7 ) ;
21246: LD_ADDR_VAR 0 1
21250: PUSH
21251: LD_INT 1
21253: PPUSH
21254: LD_INT 7
21256: PPUSH
21257: CALL_OW 12
21261: ST_TO_ADDR
// case i of 1 :
21262: LD_VAR 0 1
21266: PUSH
21267: LD_INT 1
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21285
21275: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21276: LD_STRING earthquake(getX(game), 0, 32)
21278: PPUSH
21279: CALL_OW 559
21283: GO 21523
21285: LD_INT 2
21287: DOUBLE
21288: EQUAL
21289: IFTRUE 21293
21291: GO 21307
21293: POP
// begin ToLua ( displayStucuk(); ) ;
21294: LD_STRING displayStucuk();
21296: PPUSH
21297: CALL_OW 559
// ResetFog ;
21301: CALL_OW 335
// end ; 3 :
21305: GO 21523
21307: LD_INT 3
21309: DOUBLE
21310: EQUAL
21311: IFTRUE 21315
21313: GO 21419
21315: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21316: LD_ADDR_VAR 0 2
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_OWVAR 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 25
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: ST_TO_ADDR
// if not tmp then
21352: LD_VAR 0 2
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21523
// un := tmp [ rand ( 1 , tmp ) ] ;
21361: LD_ADDR_VAR 0 3
21365: PUSH
21366: LD_VAR 0 2
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 2
21378: PPUSH
21379: CALL_OW 12
21383: ARRAY
21384: ST_TO_ADDR
// if Crawls ( un ) then
21385: LD_VAR 0 3
21389: PPUSH
21390: CALL_OW 318
21394: IFFALSE 21405
// ComWalk ( un ) ;
21396: LD_VAR 0 3
21400: PPUSH
21401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21405: LD_VAR 0 3
21409: PPUSH
21410: LD_INT 8
21412: PPUSH
21413: CALL_OW 336
// end ; 4 :
21417: GO 21523
21419: LD_INT 4
21421: DOUBLE
21422: EQUAL
21423: IFTRUE 21427
21425: GO 21501
21427: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21428: LD_ADDR_VAR 0 2
21432: PUSH
21433: LD_INT 22
21435: PUSH
21436: LD_OWVAR 2
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 30
21447: PUSH
21448: LD_INT 29
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL_OW 69
21463: ST_TO_ADDR
// if not tmp then
21464: LD_VAR 0 2
21468: NOT
21469: IFFALSE 21473
// exit ;
21471: GO 21523
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21473: LD_VAR 0 2
21477: PUSH
21478: LD_INT 1
21480: ARRAY
21481: PPUSH
21482: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21486: LD_VAR 0 2
21490: PUSH
21491: LD_INT 1
21493: ARRAY
21494: PPUSH
21495: CALL_OW 65
// end ; 5 .. 7 :
21499: GO 21523
21501: LD_INT 5
21503: DOUBLE
21504: GREATEREQUAL
21505: IFFALSE 21513
21507: LD_INT 7
21509: DOUBLE
21510: LESSEQUAL
21511: IFTRUE 21515
21513: GO 21522
21515: POP
// StreamSibBomb ; end ;
21516: CALL 17760 0 0
21520: GO 21523
21522: POP
// end ;
21523: PPOPN 3
21525: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21526: LD_EXP 27
21530: PUSH
21531: LD_EXP 77
21535: AND
21536: IFFALSE 21692
21538: GO 21540
21540: DISABLE
21541: LD_INT 0
21543: PPUSH
21544: PPUSH
21545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 81
21553: PUSH
21554: LD_OWVAR 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PPUSH
21595: CALL_OW 69
21599: ST_TO_ADDR
// if not tmp then
21600: LD_VAR 0 2
21604: NOT
21605: IFFALSE 21609
// exit ;
21607: GO 21692
// p := 0 ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: LD_INT 0
21616: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21617: LD_INT 35
21619: PPUSH
21620: CALL_OW 67
// p := p + 1 ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 1
21636: PLUS
21637: ST_TO_ADDR
// for i in tmp do
21638: LD_ADDR_VAR 0 1
21642: PUSH
21643: LD_VAR 0 2
21647: PUSH
21648: FOR_IN
21649: IFFALSE 21680
// if GetLives ( i ) < 1000 then
21651: LD_VAR 0 1
21655: PPUSH
21656: CALL_OW 256
21660: PUSH
21661: LD_INT 1000
21663: LESS
21664: IFFALSE 21678
// SetLives ( i , 1000 ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 1000
21673: PPUSH
21674: CALL_OW 234
21678: GO 21648
21680: POP
21681: POP
// until p > 20 ;
21682: LD_VAR 0 3
21686: PUSH
21687: LD_INT 20
21689: GREATER
21690: IFFALSE 21617
// end ;
21692: PPOPN 3
21694: END
// every 0 0$1 trigger StreamModeActive and sTime do
21695: LD_EXP 27
21699: PUSH
21700: LD_EXP 78
21704: AND
21705: IFFALSE 21740
21707: GO 21709
21709: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21710: LD_INT 28
21712: PPUSH
21713: LD_OWVAR 2
21717: PPUSH
21718: LD_INT 2
21720: PPUSH
21721: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21725: LD_INT 30
21727: PPUSH
21728: LD_OWVAR 2
21732: PPUSH
21733: LD_INT 2
21735: PPUSH
21736: CALL_OW 322
// end ;
21740: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21741: LD_EXP 27
21745: PUSH
21746: LD_EXP 79
21750: AND
21751: IFFALSE 21872
21753: GO 21755
21755: DISABLE
21756: LD_INT 0
21758: PPUSH
21759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21760: LD_ADDR_VAR 0 2
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_OWVAR 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 21
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 23
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: PPUSH
21809: CALL_OW 69
21813: ST_TO_ADDR
// if not tmp then
21814: LD_VAR 0 2
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 21872
// for i in tmp do
21823: LD_ADDR_VAR 0 1
21827: PUSH
21828: LD_VAR 0 2
21832: PUSH
21833: FOR_IN
21834: IFFALSE 21870
// begin if Crawls ( i ) then
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 318
21845: IFFALSE 21856
// ComWalk ( i ) ;
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 138
// SetClass ( i , 2 ) ;
21856: LD_VAR 0 1
21860: PPUSH
21861: LD_INT 2
21863: PPUSH
21864: CALL_OW 336
// end ;
21868: GO 21833
21870: POP
21871: POP
// end ;
21872: PPOPN 2
21874: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21875: LD_EXP 27
21879: PUSH
21880: LD_EXP 80
21884: AND
21885: IFFALSE 22173
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
21894: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21895: LD_OWVAR 2
21899: PPUSH
21900: LD_INT 9
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21913: LD_INT 9
21915: PPUSH
21916: LD_OWVAR 2
21920: PPUSH
21921: CALL_OW 343
// uc_side := 9 ;
21925: LD_ADDR_OWVAR 20
21929: PUSH
21930: LD_INT 9
21932: ST_TO_ADDR
// uc_nation := 2 ;
21933: LD_ADDR_OWVAR 21
21937: PUSH
21938: LD_INT 2
21940: ST_TO_ADDR
// hc_name := Dark Warrior ;
21941: LD_ADDR_OWVAR 26
21945: PUSH
21946: LD_STRING Dark Warrior
21948: ST_TO_ADDR
// hc_gallery :=  ;
21949: LD_ADDR_OWVAR 33
21953: PUSH
21954: LD_STRING 
21956: ST_TO_ADDR
// hc_noskilllimit := true ;
21957: LD_ADDR_OWVAR 76
21961: PUSH
21962: LD_INT 1
21964: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21965: LD_ADDR_OWVAR 31
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 30
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// un := CreateHuman ;
21988: LD_ADDR_VAR 0 3
21992: PUSH
21993: CALL_OW 44
21997: ST_TO_ADDR
// hc_noskilllimit := false ;
21998: LD_ADDR_OWVAR 76
22002: PUSH
22003: LD_INT 0
22005: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22006: LD_VAR 0 3
22010: PPUSH
22011: LD_INT 1
22013: PPUSH
22014: CALL_OW 51
// ToLua ( playRanger() ) ;
22018: LD_STRING playRanger()
22020: PPUSH
22021: CALL_OW 559
// p := 0 ;
22025: LD_ADDR_VAR 0 2
22029: PUSH
22030: LD_INT 0
22032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22033: LD_INT 35
22035: PPUSH
22036: CALL_OW 67
// p := p + 1 ;
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_VAR 0 2
22049: PUSH
22050: LD_INT 1
22052: PLUS
22053: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22054: LD_VAR 0 3
22058: PPUSH
22059: CALL_OW 256
22063: PUSH
22064: LD_INT 1000
22066: LESS
22067: IFFALSE 22081
// SetLives ( un , 1000 ) ;
22069: LD_VAR 0 3
22073: PPUSH
22074: LD_INT 1000
22076: PPUSH
22077: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22081: LD_VAR 0 3
22085: PPUSH
22086: LD_INT 81
22088: PUSH
22089: LD_OWVAR 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 91
22100: PUSH
22101: LD_VAR 0 3
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 69
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: CALL_OW 74
22132: PPUSH
22133: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22137: LD_VAR 0 2
22141: PUSH
22142: LD_INT 80
22144: GREATER
22145: PUSH
22146: LD_VAR 0 3
22150: PPUSH
22151: CALL_OW 301
22155: OR
22156: IFFALSE 22033
// if un then
22158: LD_VAR 0 3
22162: IFFALSE 22173
// RemoveUnit ( un ) ;
22164: LD_VAR 0 3
22168: PPUSH
22169: CALL_OW 64
// end ;
22173: PPOPN 3
22175: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22176: LD_EXP 81
22180: IFFALSE 22296
22182: GO 22184
22184: DISABLE
22185: LD_INT 0
22187: PPUSH
22188: PPUSH
22189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22190: LD_ADDR_VAR 0 2
22194: PUSH
22195: LD_INT 81
22197: PUSH
22198: LD_OWVAR 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 21
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22226: LD_STRING playComputer()
22228: PPUSH
22229: CALL_OW 559
// if not tmp then
22233: LD_VAR 0 2
22237: NOT
22238: IFFALSE 22242
// exit ;
22240: GO 22296
// for i in tmp do
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22294
// for j := 1 to 4 do
22255: LD_ADDR_VAR 0 3
22259: PUSH
22260: DOUBLE
22261: LD_INT 1
22263: DEC
22264: ST_TO_ADDR
22265: LD_INT 4
22267: PUSH
22268: FOR_TO
22269: IFFALSE 22290
// SetSkill ( i , j , 10 ) ;
22271: LD_VAR 0 1
22275: PPUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: LD_INT 10
22283: PPUSH
22284: CALL_OW 237
22288: GO 22268
22290: POP
22291: POP
22292: GO 22252
22294: POP
22295: POP
// end ;
22296: PPOPN 3
22298: END
// every 0 0$1 trigger s30 do var i , tmp ;
22299: LD_EXP 82
22303: IFFALSE 22372
22305: GO 22307
22307: DISABLE
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_OWVAR 2
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 69
22333: ST_TO_ADDR
// if not tmp then
22334: LD_VAR 0 2
22338: NOT
22339: IFFALSE 22343
// exit ;
22341: GO 22372
// for i in tmp do
22343: LD_ADDR_VAR 0 1
22347: PUSH
22348: LD_VAR 0 2
22352: PUSH
22353: FOR_IN
22354: IFFALSE 22370
// SetLives ( i , 300 ) ;
22356: LD_VAR 0 1
22360: PPUSH
22361: LD_INT 300
22363: PPUSH
22364: CALL_OW 234
22368: GO 22353
22370: POP
22371: POP
// end ;
22372: PPOPN 2
22374: END
// every 0 0$1 trigger s60 do var i , tmp ;
22375: LD_EXP 83
22379: IFFALSE 22448
22381: GO 22383
22383: DISABLE
22384: LD_INT 0
22386: PPUSH
22387: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: LD_INT 22
22395: PUSH
22396: LD_OWVAR 2
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PPUSH
22405: CALL_OW 69
22409: ST_TO_ADDR
// if not tmp then
22410: LD_VAR 0 2
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 22448
// for i in tmp do
22419: LD_ADDR_VAR 0 1
22423: PUSH
22424: LD_VAR 0 2
22428: PUSH
22429: FOR_IN
22430: IFFALSE 22446
// SetLives ( i , 600 ) ;
22432: LD_VAR 0 1
22436: PPUSH
22437: LD_INT 600
22439: PPUSH
22440: CALL_OW 234
22444: GO 22429
22446: POP
22447: POP
// end ;
22448: PPOPN 2
22450: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22451: LD_INT 0
22453: PPUSH
// case cmd of 301 :
22454: LD_VAR 0 1
22458: PUSH
22459: LD_INT 301
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 22499
22467: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22468: LD_VAR 0 6
22472: PPUSH
22473: LD_VAR 0 7
22477: PPUSH
22478: LD_VAR 0 8
22482: PPUSH
22483: LD_VAR 0 4
22487: PPUSH
22488: LD_VAR 0 5
22492: PPUSH
22493: CALL 23700 0 5
22497: GO 22620
22499: LD_INT 302
22501: DOUBLE
22502: EQUAL
22503: IFTRUE 22507
22505: GO 22544
22507: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22508: LD_VAR 0 6
22512: PPUSH
22513: LD_VAR 0 7
22517: PPUSH
22518: LD_VAR 0 8
22522: PPUSH
22523: LD_VAR 0 9
22527: PPUSH
22528: LD_VAR 0 4
22532: PPUSH
22533: LD_VAR 0 5
22537: PPUSH
22538: CALL 23791 0 6
22542: GO 22620
22544: LD_INT 303
22546: DOUBLE
22547: EQUAL
22548: IFTRUE 22552
22550: GO 22589
22552: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22553: LD_VAR 0 6
22557: PPUSH
22558: LD_VAR 0 7
22562: PPUSH
22563: LD_VAR 0 8
22567: PPUSH
22568: LD_VAR 0 9
22572: PPUSH
22573: LD_VAR 0 4
22577: PPUSH
22578: LD_VAR 0 5
22582: PPUSH
22583: CALL 22625 0 6
22587: GO 22620
22589: LD_INT 304
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22619
22597: POP
// hHackTeleport ( unit , x , y ) ; end ;
22598: LD_VAR 0 2
22602: PPUSH
22603: LD_VAR 0 4
22607: PPUSH
22608: LD_VAR 0 5
22612: PPUSH
22613: CALL 24384 0 3
22617: GO 22620
22619: POP
// end ;
22620: LD_VAR 0 12
22624: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22625: LD_INT 0
22627: PPUSH
22628: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22629: LD_VAR 0 1
22633: PUSH
22634: LD_INT 1
22636: LESS
22637: PUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_INT 3
22645: GREATER
22646: OR
22647: PUSH
22648: LD_VAR 0 5
22652: PPUSH
22653: LD_VAR 0 6
22657: PPUSH
22658: CALL_OW 428
22662: OR
22663: IFFALSE 22667
// exit ;
22665: GO 23387
// uc_side := your_side ;
22667: LD_ADDR_OWVAR 20
22671: PUSH
22672: LD_OWVAR 2
22676: ST_TO_ADDR
// uc_nation := nation ;
22677: LD_ADDR_OWVAR 21
22681: PUSH
22682: LD_VAR 0 1
22686: ST_TO_ADDR
// bc_level = 1 ;
22687: LD_ADDR_OWVAR 43
22691: PUSH
22692: LD_INT 1
22694: ST_TO_ADDR
// case btype of 1 :
22695: LD_VAR 0 2
22699: PUSH
22700: LD_INT 1
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22719
22708: POP
// bc_type := b_depot ; 2 :
22709: LD_ADDR_OWVAR 42
22713: PUSH
22714: LD_INT 0
22716: ST_TO_ADDR
22717: GO 23331
22719: LD_INT 2
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22738
22727: POP
// bc_type := b_warehouse ; 3 :
22728: LD_ADDR_OWVAR 42
22732: PUSH
22733: LD_INT 1
22735: ST_TO_ADDR
22736: GO 23331
22738: LD_INT 3
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22757
22746: POP
// bc_type := b_lab ; 4 .. 9 :
22747: LD_ADDR_OWVAR 42
22751: PUSH
22752: LD_INT 6
22754: ST_TO_ADDR
22755: GO 23331
22757: LD_INT 4
22759: DOUBLE
22760: GREATEREQUAL
22761: IFFALSE 22769
22763: LD_INT 9
22765: DOUBLE
22766: LESSEQUAL
22767: IFTRUE 22771
22769: GO 22823
22771: POP
// begin bc_type := b_lab_half ;
22772: LD_ADDR_OWVAR 42
22776: PUSH
22777: LD_INT 7
22779: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22780: LD_ADDR_OWVAR 44
22784: PUSH
22785: LD_INT 10
22787: PUSH
22788: LD_INT 11
22790: PUSH
22791: LD_INT 12
22793: PUSH
22794: LD_INT 15
22796: PUSH
22797: LD_INT 14
22799: PUSH
22800: LD_INT 13
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: LD_VAR 0 2
22815: PUSH
22816: LD_INT 3
22818: MINUS
22819: ARRAY
22820: ST_TO_ADDR
// end ; 10 .. 13 :
22821: GO 23331
22823: LD_INT 10
22825: DOUBLE
22826: GREATEREQUAL
22827: IFFALSE 22835
22829: LD_INT 13
22831: DOUBLE
22832: LESSEQUAL
22833: IFTRUE 22837
22835: GO 22914
22837: POP
// begin bc_type := b_lab_full ;
22838: LD_ADDR_OWVAR 42
22842: PUSH
22843: LD_INT 8
22845: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22846: LD_ADDR_OWVAR 44
22850: PUSH
22851: LD_INT 10
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 14
22859: PUSH
22860: LD_INT 13
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: PUSH
22869: LD_VAR 0 2
22873: PUSH
22874: LD_INT 9
22876: MINUS
22877: ARRAY
22878: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22879: LD_ADDR_OWVAR 45
22883: PUSH
22884: LD_INT 11
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 12
22892: PUSH
22893: LD_INT 15
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: LD_VAR 0 2
22906: PUSH
22907: LD_INT 9
22909: MINUS
22910: ARRAY
22911: ST_TO_ADDR
// end ; 14 :
22912: GO 23331
22914: LD_INT 14
22916: DOUBLE
22917: EQUAL
22918: IFTRUE 22922
22920: GO 22933
22922: POP
// bc_type := b_workshop ; 15 :
22923: LD_ADDR_OWVAR 42
22927: PUSH
22928: LD_INT 2
22930: ST_TO_ADDR
22931: GO 23331
22933: LD_INT 15
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22952
22941: POP
// bc_type := b_factory ; 16 :
22942: LD_ADDR_OWVAR 42
22946: PUSH
22947: LD_INT 3
22949: ST_TO_ADDR
22950: GO 23331
22952: LD_INT 16
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 22971
22960: POP
// bc_type := b_ext_gun ; 17 :
22961: LD_ADDR_OWVAR 42
22965: PUSH
22966: LD_INT 17
22968: ST_TO_ADDR
22969: GO 23331
22971: LD_INT 17
22973: DOUBLE
22974: EQUAL
22975: IFTRUE 22979
22977: GO 23007
22979: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22980: LD_ADDR_OWVAR 42
22984: PUSH
22985: LD_INT 19
22987: PUSH
22988: LD_INT 23
22990: PUSH
22991: LD_INT 19
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: PUSH
22999: LD_VAR 0 1
23003: ARRAY
23004: ST_TO_ADDR
23005: GO 23331
23007: LD_INT 18
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23026
23015: POP
// bc_type := b_ext_radar ; 19 :
23016: LD_ADDR_OWVAR 42
23020: PUSH
23021: LD_INT 20
23023: ST_TO_ADDR
23024: GO 23331
23026: LD_INT 19
23028: DOUBLE
23029: EQUAL
23030: IFTRUE 23034
23032: GO 23045
23034: POP
// bc_type := b_ext_radio ; 20 :
23035: LD_ADDR_OWVAR 42
23039: PUSH
23040: LD_INT 22
23042: ST_TO_ADDR
23043: GO 23331
23045: LD_INT 20
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23064
23053: POP
// bc_type := b_ext_siberium ; 21 :
23054: LD_ADDR_OWVAR 42
23058: PUSH
23059: LD_INT 21
23061: ST_TO_ADDR
23062: GO 23331
23064: LD_INT 21
23066: DOUBLE
23067: EQUAL
23068: IFTRUE 23072
23070: GO 23083
23072: POP
// bc_type := b_ext_computer ; 22 :
23073: LD_ADDR_OWVAR 42
23077: PUSH
23078: LD_INT 24
23080: ST_TO_ADDR
23081: GO 23331
23083: LD_INT 22
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23102
23091: POP
// bc_type := b_ext_track ; 23 :
23092: LD_ADDR_OWVAR 42
23096: PUSH
23097: LD_INT 16
23099: ST_TO_ADDR
23100: GO 23331
23102: LD_INT 23
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23121
23110: POP
// bc_type := b_ext_laser ; 24 :
23111: LD_ADDR_OWVAR 42
23115: PUSH
23116: LD_INT 25
23118: ST_TO_ADDR
23119: GO 23331
23121: LD_INT 24
23123: DOUBLE
23124: EQUAL
23125: IFTRUE 23129
23127: GO 23140
23129: POP
// bc_type := b_control_tower ; 25 :
23130: LD_ADDR_OWVAR 42
23134: PUSH
23135: LD_INT 36
23137: ST_TO_ADDR
23138: GO 23331
23140: LD_INT 25
23142: DOUBLE
23143: EQUAL
23144: IFTRUE 23148
23146: GO 23159
23148: POP
// bc_type := b_breastwork ; 26 :
23149: LD_ADDR_OWVAR 42
23153: PUSH
23154: LD_INT 31
23156: ST_TO_ADDR
23157: GO 23331
23159: LD_INT 26
23161: DOUBLE
23162: EQUAL
23163: IFTRUE 23167
23165: GO 23178
23167: POP
// bc_type := b_bunker ; 27 :
23168: LD_ADDR_OWVAR 42
23172: PUSH
23173: LD_INT 32
23175: ST_TO_ADDR
23176: GO 23331
23178: LD_INT 27
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23197
23186: POP
// bc_type := b_turret ; 28 :
23187: LD_ADDR_OWVAR 42
23191: PUSH
23192: LD_INT 33
23194: ST_TO_ADDR
23195: GO 23331
23197: LD_INT 28
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23216
23205: POP
// bc_type := b_armoury ; 29 :
23206: LD_ADDR_OWVAR 42
23210: PUSH
23211: LD_INT 4
23213: ST_TO_ADDR
23214: GO 23331
23216: LD_INT 29
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23235
23224: POP
// bc_type := b_barracks ; 30 :
23225: LD_ADDR_OWVAR 42
23229: PUSH
23230: LD_INT 5
23232: ST_TO_ADDR
23233: GO 23331
23235: LD_INT 30
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23254
23243: POP
// bc_type := b_solar_power ; 31 :
23244: LD_ADDR_OWVAR 42
23248: PUSH
23249: LD_INT 27
23251: ST_TO_ADDR
23252: GO 23331
23254: LD_INT 31
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23273
23262: POP
// bc_type := b_oil_power ; 32 :
23263: LD_ADDR_OWVAR 42
23267: PUSH
23268: LD_INT 26
23270: ST_TO_ADDR
23271: GO 23331
23273: LD_INT 32
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23292
23281: POP
// bc_type := b_siberite_power ; 33 :
23282: LD_ADDR_OWVAR 42
23286: PUSH
23287: LD_INT 28
23289: ST_TO_ADDR
23290: GO 23331
23292: LD_INT 33
23294: DOUBLE
23295: EQUAL
23296: IFTRUE 23300
23298: GO 23311
23300: POP
// bc_type := b_oil_mine ; 34 :
23301: LD_ADDR_OWVAR 42
23305: PUSH
23306: LD_INT 29
23308: ST_TO_ADDR
23309: GO 23331
23311: LD_INT 34
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23330
23319: POP
// bc_type := b_siberite_mine ; end ;
23320: LD_ADDR_OWVAR 42
23324: PUSH
23325: LD_INT 30
23327: ST_TO_ADDR
23328: GO 23331
23330: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23331: LD_ADDR_VAR 0 8
23335: PUSH
23336: LD_VAR 0 5
23340: PPUSH
23341: LD_VAR 0 6
23345: PPUSH
23346: LD_VAR 0 3
23350: PPUSH
23351: CALL_OW 47
23355: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23356: LD_OWVAR 42
23360: PUSH
23361: LD_INT 32
23363: PUSH
23364: LD_INT 33
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: IN
23371: IFFALSE 23387
// PlaceWeaponTurret ( b , weapon ) ;
23373: LD_VAR 0 8
23377: PPUSH
23378: LD_VAR 0 4
23382: PPUSH
23383: CALL_OW 431
// end ;
23387: LD_VAR 0 7
23391: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23392: LD_INT 0
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23398: LD_ADDR_VAR 0 4
23402: PUSH
23403: LD_INT 22
23405: PUSH
23406: LD_OWVAR 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: LD_INT 30
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 30
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PPUSH
23447: CALL_OW 69
23451: ST_TO_ADDR
// if not tmp then
23452: LD_VAR 0 4
23456: NOT
23457: IFFALSE 23461
// exit ;
23459: GO 23520
// for i in tmp do
23461: LD_ADDR_VAR 0 2
23465: PUSH
23466: LD_VAR 0 4
23470: PUSH
23471: FOR_IN
23472: IFFALSE 23518
// for j = 1 to 3 do
23474: LD_ADDR_VAR 0 3
23478: PUSH
23479: DOUBLE
23480: LD_INT 1
23482: DEC
23483: ST_TO_ADDR
23484: LD_INT 3
23486: PUSH
23487: FOR_TO
23488: IFFALSE 23514
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23490: LD_VAR 0 2
23494: PPUSH
23495: CALL_OW 274
23499: PPUSH
23500: LD_VAR 0 3
23504: PPUSH
23505: LD_INT 99999
23507: PPUSH
23508: CALL_OW 277
23512: GO 23487
23514: POP
23515: POP
23516: GO 23471
23518: POP
23519: POP
// end ;
23520: LD_VAR 0 1
23524: RET
// export function hHackSetLevel10 ; var i , j ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_INT 21
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PPUSH
23545: CALL_OW 69
23549: PUSH
23550: FOR_IN
23551: IFFALSE 23603
// if IsSelected ( i ) then
23553: LD_VAR 0 2
23557: PPUSH
23558: CALL_OW 306
23562: IFFALSE 23601
// begin for j := 1 to 4 do
23564: LD_ADDR_VAR 0 3
23568: PUSH
23569: DOUBLE
23570: LD_INT 1
23572: DEC
23573: ST_TO_ADDR
23574: LD_INT 4
23576: PUSH
23577: FOR_TO
23578: IFFALSE 23599
// SetSkill ( i , j , 10 ) ;
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: LD_INT 10
23592: PPUSH
23593: CALL_OW 237
23597: GO 23577
23599: POP
23600: POP
// end ;
23601: GO 23550
23603: POP
23604: POP
// end ;
23605: LD_VAR 0 1
23609: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23610: LD_INT 0
23612: PPUSH
23613: PPUSH
23614: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_OWVAR 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 21
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PPUSH
23646: CALL_OW 69
23650: PUSH
23651: FOR_IN
23652: IFFALSE 23693
// begin for j := 1 to 4 do
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: DOUBLE
23660: LD_INT 1
23662: DEC
23663: ST_TO_ADDR
23664: LD_INT 4
23666: PUSH
23667: FOR_TO
23668: IFFALSE 23689
// SetSkill ( i , j , 10 ) ;
23670: LD_VAR 0 2
23674: PPUSH
23675: LD_VAR 0 3
23679: PPUSH
23680: LD_INT 10
23682: PPUSH
23683: CALL_OW 237
23687: GO 23667
23689: POP
23690: POP
// end ;
23691: GO 23651
23693: POP
23694: POP
// end ;
23695: LD_VAR 0 1
23699: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23700: LD_INT 0
23702: PPUSH
// uc_side := your_side ;
23703: LD_ADDR_OWVAR 20
23707: PUSH
23708: LD_OWVAR 2
23712: ST_TO_ADDR
// uc_nation := nation ;
23713: LD_ADDR_OWVAR 21
23717: PUSH
23718: LD_VAR 0 1
23722: ST_TO_ADDR
// InitHc ;
23723: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23727: LD_INT 0
23729: PPUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_VAR 0 3
23739: PPUSH
23740: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23744: LD_VAR 0 4
23748: PPUSH
23749: LD_VAR 0 5
23753: PPUSH
23754: CALL_OW 428
23758: PUSH
23759: LD_INT 0
23761: EQUAL
23762: IFFALSE 23786
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23764: CALL_OW 44
23768: PPUSH
23769: LD_VAR 0 4
23773: PPUSH
23774: LD_VAR 0 5
23778: PPUSH
23779: LD_INT 1
23781: PPUSH
23782: CALL_OW 48
// end ;
23786: LD_VAR 0 6
23790: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23791: LD_INT 0
23793: PPUSH
23794: PPUSH
// uc_side := your_side ;
23795: LD_ADDR_OWVAR 20
23799: PUSH
23800: LD_OWVAR 2
23804: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23805: LD_VAR 0 1
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: LD_INT 4
23821: PUSH
23822: LD_INT 5
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: IN
23832: IFFALSE 23844
// uc_nation := nation_american else
23834: LD_ADDR_OWVAR 21
23838: PUSH
23839: LD_INT 1
23841: ST_TO_ADDR
23842: GO 23887
// if chassis in [ 11 , 12 , 13 , 14 ] then
23844: LD_VAR 0 1
23848: PUSH
23849: LD_INT 11
23851: PUSH
23852: LD_INT 12
23854: PUSH
23855: LD_INT 13
23857: PUSH
23858: LD_INT 14
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: IN
23867: IFFALSE 23879
// uc_nation := nation_arabian else
23869: LD_ADDR_OWVAR 21
23873: PUSH
23874: LD_INT 2
23876: ST_TO_ADDR
23877: GO 23887
// uc_nation := nation_russian ;
23879: LD_ADDR_OWVAR 21
23883: PUSH
23884: LD_INT 3
23886: ST_TO_ADDR
// vc_chassis := chassis ;
23887: LD_ADDR_OWVAR 37
23891: PUSH
23892: LD_VAR 0 1
23896: ST_TO_ADDR
// vc_engine := engine ;
23897: LD_ADDR_OWVAR 39
23901: PUSH
23902: LD_VAR 0 2
23906: ST_TO_ADDR
// vc_control := control ;
23907: LD_ADDR_OWVAR 38
23911: PUSH
23912: LD_VAR 0 3
23916: ST_TO_ADDR
// vc_weapon := weapon ;
23917: LD_ADDR_OWVAR 40
23921: PUSH
23922: LD_VAR 0 4
23926: ST_TO_ADDR
// un := CreateVehicle ;
23927: LD_ADDR_VAR 0 8
23931: PUSH
23932: CALL_OW 45
23936: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23937: LD_VAR 0 8
23941: PPUSH
23942: LD_INT 0
23944: PPUSH
23945: LD_INT 5
23947: PPUSH
23948: CALL_OW 12
23952: PPUSH
23953: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23957: LD_VAR 0 8
23961: PPUSH
23962: LD_VAR 0 5
23966: PPUSH
23967: LD_VAR 0 6
23971: PPUSH
23972: LD_INT 1
23974: PPUSH
23975: CALL_OW 48
// end ;
23979: LD_VAR 0 7
23983: RET
// export hInvincible ; every 1 do
23984: GO 23986
23986: DISABLE
// hInvincible := [ ] ;
23987: LD_ADDR_EXP 84
23991: PUSH
23992: EMPTY
23993: ST_TO_ADDR
23994: END
// every 10 do var i ;
23995: GO 23997
23997: DISABLE
23998: LD_INT 0
24000: PPUSH
// begin enable ;
24001: ENABLE
// if not hInvincible then
24002: LD_EXP 84
24006: NOT
24007: IFFALSE 24011
// exit ;
24009: GO 24055
// for i in hInvincible do
24011: LD_ADDR_VAR 0 1
24015: PUSH
24016: LD_EXP 84
24020: PUSH
24021: FOR_IN
24022: IFFALSE 24053
// if GetLives ( i ) < 1000 then
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 256
24033: PUSH
24034: LD_INT 1000
24036: LESS
24037: IFFALSE 24051
// SetLives ( i , 1000 ) ;
24039: LD_VAR 0 1
24043: PPUSH
24044: LD_INT 1000
24046: PPUSH
24047: CALL_OW 234
24051: GO 24021
24053: POP
24054: POP
// end ;
24055: PPOPN 1
24057: END
// export function hHackInvincible ; var i ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 21
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 21
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: PPUSH
24095: CALL_OW 69
24099: PUSH
24100: FOR_IN
24101: IFFALSE 24162
// if IsSelected ( i ) then
24103: LD_VAR 0 2
24107: PPUSH
24108: CALL_OW 306
24112: IFFALSE 24160
// begin if i in hInvincible then
24114: LD_VAR 0 2
24118: PUSH
24119: LD_EXP 84
24123: IN
24124: IFFALSE 24144
// hInvincible := hInvincible diff i else
24126: LD_ADDR_EXP 84
24130: PUSH
24131: LD_EXP 84
24135: PUSH
24136: LD_VAR 0 2
24140: DIFF
24141: ST_TO_ADDR
24142: GO 24160
// hInvincible := hInvincible union i ;
24144: LD_ADDR_EXP 84
24148: PUSH
24149: LD_EXP 84
24153: PUSH
24154: LD_VAR 0 2
24158: UNION
24159: ST_TO_ADDR
// end ;
24160: GO 24100
24162: POP
24163: POP
// end ;
24164: LD_VAR 0 1
24168: RET
// export function hHackInvisible ; var i , j ; begin
24169: LD_INT 0
24171: PPUSH
24172: PPUSH
24173: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24174: LD_ADDR_VAR 0 2
24178: PUSH
24179: LD_INT 21
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PPUSH
24189: CALL_OW 69
24193: PUSH
24194: FOR_IN
24195: IFFALSE 24219
// if IsSelected ( i ) then
24197: LD_VAR 0 2
24201: PPUSH
24202: CALL_OW 306
24206: IFFALSE 24217
// ComForceInvisible ( i ) ;
24208: LD_VAR 0 2
24212: PPUSH
24213: CALL_OW 496
24217: GO 24194
24219: POP
24220: POP
// end ;
24221: LD_VAR 0 1
24225: RET
// export function hHackChangeYourSide ; begin
24226: LD_INT 0
24228: PPUSH
// if your_side = 8 then
24229: LD_OWVAR 2
24233: PUSH
24234: LD_INT 8
24236: EQUAL
24237: IFFALSE 24249
// your_side := 0 else
24239: LD_ADDR_OWVAR 2
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
24247: GO 24263
// your_side := your_side + 1 ;
24249: LD_ADDR_OWVAR 2
24253: PUSH
24254: LD_OWVAR 2
24258: PUSH
24259: LD_INT 1
24261: PLUS
24262: ST_TO_ADDR
// end ;
24263: LD_VAR 0 1
24267: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24268: LD_INT 0
24270: PPUSH
24271: PPUSH
24272: PPUSH
// for i in all_units do
24273: LD_ADDR_VAR 0 2
24277: PUSH
24278: LD_OWVAR 3
24282: PUSH
24283: FOR_IN
24284: IFFALSE 24362
// if IsSelected ( i ) then
24286: LD_VAR 0 2
24290: PPUSH
24291: CALL_OW 306
24295: IFFALSE 24360
// begin j := GetSide ( i ) ;
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_VAR 0 2
24306: PPUSH
24307: CALL_OW 255
24311: ST_TO_ADDR
// if j = 8 then
24312: LD_VAR 0 3
24316: PUSH
24317: LD_INT 8
24319: EQUAL
24320: IFFALSE 24332
// j := 0 else
24322: LD_ADDR_VAR 0 3
24326: PUSH
24327: LD_INT 0
24329: ST_TO_ADDR
24330: GO 24346
// j := j + 1 ;
24332: LD_ADDR_VAR 0 3
24336: PUSH
24337: LD_VAR 0 3
24341: PUSH
24342: LD_INT 1
24344: PLUS
24345: ST_TO_ADDR
// SetSide ( i , j ) ;
24346: LD_VAR 0 2
24350: PPUSH
24351: LD_VAR 0 3
24355: PPUSH
24356: CALL_OW 235
// end ;
24360: GO 24283
24362: POP
24363: POP
// end ;
24364: LD_VAR 0 1
24368: RET
// export function hHackFog ; begin
24369: LD_INT 0
24371: PPUSH
// FogOff ( true ) ;
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 344
// end ;
24379: LD_VAR 0 1
24383: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24384: LD_INT 0
24386: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24387: LD_VAR 0 1
24391: PPUSH
24392: LD_VAR 0 2
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: CALL_OW 483
// CenterOnXY ( x , y ) ;
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_VAR 0 3
24421: PPUSH
24422: CALL_OW 84
// end ;
24426: LD_VAR 0 4
24430: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24431: LD_INT 0
24433: PPUSH
24434: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24435: LD_VAR 0 1
24439: NOT
24440: PUSH
24441: LD_VAR 0 2
24445: PPUSH
24446: LD_VAR 0 3
24450: PPUSH
24451: CALL_OW 488
24455: NOT
24456: OR
24457: PUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 266
24467: PUSH
24468: LD_INT 3
24470: NONEQUAL
24471: PUSH
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 247
24481: PUSH
24482: LD_INT 1
24484: EQUAL
24485: NOT
24486: AND
24487: OR
24488: IFFALSE 24492
// exit ;
24490: GO 24641
// if GetType ( factory ) = unit_human then
24492: LD_VAR 0 1
24496: PPUSH
24497: CALL_OW 247
24501: PUSH
24502: LD_INT 1
24504: EQUAL
24505: IFFALSE 24522
// factory := IsInUnit ( factory ) ;
24507: LD_ADDR_VAR 0 1
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 310
24521: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 266
24531: PUSH
24532: LD_INT 3
24534: NONEQUAL
24535: IFFALSE 24539
// exit ;
24537: GO 24641
// if HexInfo ( x , y ) = factory then
24539: LD_VAR 0 2
24543: PPUSH
24544: LD_VAR 0 3
24548: PPUSH
24549: CALL_OW 428
24553: PUSH
24554: LD_VAR 0 1
24558: EQUAL
24559: IFFALSE 24586
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24561: LD_ADDR_EXP 85
24565: PUSH
24566: LD_EXP 85
24570: PPUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: LD_INT 0
24578: PPUSH
24579: CALL_OW 1
24583: ST_TO_ADDR
24584: GO 24637
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24586: LD_ADDR_EXP 85
24590: PUSH
24591: LD_EXP 85
24595: PPUSH
24596: LD_VAR 0 1
24600: PPUSH
24601: LD_VAR 0 1
24605: PPUSH
24606: CALL_OW 255
24610: PUSH
24611: LD_VAR 0 1
24615: PUSH
24616: LD_VAR 0 2
24620: PUSH
24621: LD_VAR 0 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: PPUSH
24632: CALL_OW 1
24636: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24637: CALL 24646 0 0
// end ;
24641: LD_VAR 0 4
24645: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24646: LD_INT 0
24648: PPUSH
24649: PPUSH
24650: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24651: LD_STRING resetFactoryWaypoint();
24653: PPUSH
24654: CALL_OW 559
// if factoryWaypoints then
24658: LD_EXP 85
24662: IFFALSE 24788
// begin list := PrepareArray ( factoryWaypoints ) ;
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_EXP 85
24673: PPUSH
24674: CALL 71257 0 1
24678: ST_TO_ADDR
// for i := 1 to list do
24679: LD_ADDR_VAR 0 2
24683: PUSH
24684: DOUBLE
24685: LD_INT 1
24687: DEC
24688: ST_TO_ADDR
24689: LD_VAR 0 3
24693: PUSH
24694: FOR_TO
24695: IFFALSE 24786
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24697: LD_STRING setFactoryWaypointXY(
24699: PUSH
24700: LD_VAR 0 3
24704: PUSH
24705: LD_VAR 0 2
24709: ARRAY
24710: PUSH
24711: LD_INT 1
24713: ARRAY
24714: STR
24715: PUSH
24716: LD_STRING ,
24718: STR
24719: PUSH
24720: LD_VAR 0 3
24724: PUSH
24725: LD_VAR 0 2
24729: ARRAY
24730: PUSH
24731: LD_INT 2
24733: ARRAY
24734: STR
24735: PUSH
24736: LD_STRING ,
24738: STR
24739: PUSH
24740: LD_VAR 0 3
24744: PUSH
24745: LD_VAR 0 2
24749: ARRAY
24750: PUSH
24751: LD_INT 3
24753: ARRAY
24754: STR
24755: PUSH
24756: LD_STRING ,
24758: STR
24759: PUSH
24760: LD_VAR 0 3
24764: PUSH
24765: LD_VAR 0 2
24769: ARRAY
24770: PUSH
24771: LD_INT 4
24773: ARRAY
24774: STR
24775: PUSH
24776: LD_STRING )
24778: STR
24779: PPUSH
24780: CALL_OW 559
24784: GO 24694
24786: POP
24787: POP
// end ; end ;
24788: LD_VAR 0 1
24792: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24793: LD_INT 0
24795: PPUSH
// if HexInfo ( x , y ) = warehouse then
24796: LD_VAR 0 2
24800: PPUSH
24801: LD_VAR 0 3
24805: PPUSH
24806: CALL_OW 428
24810: PUSH
24811: LD_VAR 0 1
24815: EQUAL
24816: IFFALSE 24843
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24818: LD_ADDR_EXP 86
24822: PUSH
24823: LD_EXP 86
24827: PPUSH
24828: LD_VAR 0 1
24832: PPUSH
24833: LD_INT 0
24835: PPUSH
24836: CALL_OW 1
24840: ST_TO_ADDR
24841: GO 24894
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24843: LD_ADDR_EXP 86
24847: PUSH
24848: LD_EXP 86
24852: PPUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_VAR 0 1
24862: PPUSH
24863: CALL_OW 255
24867: PUSH
24868: LD_VAR 0 1
24872: PUSH
24873: LD_VAR 0 2
24877: PUSH
24878: LD_VAR 0 3
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: PPUSH
24889: CALL_OW 1
24893: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24894: CALL 24903 0 0
// end ;
24898: LD_VAR 0 4
24902: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24903: LD_INT 0
24905: PPUSH
24906: PPUSH
24907: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24908: LD_STRING resetWarehouseGatheringPoints();
24910: PPUSH
24911: CALL_OW 559
// if warehouseGatheringPoints then
24915: LD_EXP 86
24919: IFFALSE 25045
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_EXP 86
24930: PPUSH
24931: CALL 71257 0 1
24935: ST_TO_ADDR
// for i := 1 to list do
24936: LD_ADDR_VAR 0 2
24940: PUSH
24941: DOUBLE
24942: LD_INT 1
24944: DEC
24945: ST_TO_ADDR
24946: LD_VAR 0 3
24950: PUSH
24951: FOR_TO
24952: IFFALSE 25043
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24954: LD_STRING setWarehouseGatheringPointXY(
24956: PUSH
24957: LD_VAR 0 3
24961: PUSH
24962: LD_VAR 0 2
24966: ARRAY
24967: PUSH
24968: LD_INT 1
24970: ARRAY
24971: STR
24972: PUSH
24973: LD_STRING ,
24975: STR
24976: PUSH
24977: LD_VAR 0 3
24981: PUSH
24982: LD_VAR 0 2
24986: ARRAY
24987: PUSH
24988: LD_INT 2
24990: ARRAY
24991: STR
24992: PUSH
24993: LD_STRING ,
24995: STR
24996: PUSH
24997: LD_VAR 0 3
25001: PUSH
25002: LD_VAR 0 2
25006: ARRAY
25007: PUSH
25008: LD_INT 3
25010: ARRAY
25011: STR
25012: PUSH
25013: LD_STRING ,
25015: STR
25016: PUSH
25017: LD_VAR 0 3
25021: PUSH
25022: LD_VAR 0 2
25026: ARRAY
25027: PUSH
25028: LD_INT 4
25030: ARRAY
25031: STR
25032: PUSH
25033: LD_STRING )
25035: STR
25036: PPUSH
25037: CALL_OW 559
25041: GO 24951
25043: POP
25044: POP
// end ; end ;
25045: LD_VAR 0 1
25049: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25050: LD_EXP 86
25054: IFFALSE 25739
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
25066: PPUSH
25067: PPUSH
25068: PPUSH
25069: PPUSH
// begin enable ;
25070: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_EXP 86
25080: PPUSH
25081: CALL 71257 0 1
25085: ST_TO_ADDR
// if not list then
25086: LD_VAR 0 3
25090: NOT
25091: IFFALSE 25095
// exit ;
25093: GO 25739
// for i := 1 to list do
25095: LD_ADDR_VAR 0 1
25099: PUSH
25100: DOUBLE
25101: LD_INT 1
25103: DEC
25104: ST_TO_ADDR
25105: LD_VAR 0 3
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25737
// begin depot := list [ i ] [ 2 ] ;
25113: LD_ADDR_VAR 0 8
25117: PUSH
25118: LD_VAR 0 3
25122: PUSH
25123: LD_VAR 0 1
25127: ARRAY
25128: PUSH
25129: LD_INT 2
25131: ARRAY
25132: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25133: LD_ADDR_VAR 0 5
25137: PUSH
25138: LD_VAR 0 3
25142: PUSH
25143: LD_VAR 0 1
25147: ARRAY
25148: PUSH
25149: LD_INT 1
25151: ARRAY
25152: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25153: LD_VAR 0 8
25157: PPUSH
25158: CALL_OW 301
25162: PUSH
25163: LD_VAR 0 5
25167: PUSH
25168: LD_VAR 0 8
25172: PPUSH
25173: CALL_OW 255
25177: NONEQUAL
25178: OR
25179: IFFALSE 25208
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25181: LD_ADDR_EXP 86
25185: PUSH
25186: LD_EXP 86
25190: PPUSH
25191: LD_VAR 0 8
25195: PPUSH
25196: LD_INT 0
25198: PPUSH
25199: CALL_OW 1
25203: ST_TO_ADDR
// exit ;
25204: POP
25205: POP
25206: GO 25739
// end ; x := list [ i ] [ 3 ] ;
25208: LD_ADDR_VAR 0 6
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_VAR 0 1
25222: ARRAY
25223: PUSH
25224: LD_INT 3
25226: ARRAY
25227: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25228: LD_ADDR_VAR 0 7
25232: PUSH
25233: LD_VAR 0 3
25237: PUSH
25238: LD_VAR 0 1
25242: ARRAY
25243: PUSH
25244: LD_INT 4
25246: ARRAY
25247: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25248: LD_ADDR_VAR 0 9
25252: PUSH
25253: LD_VAR 0 6
25257: PPUSH
25258: LD_VAR 0 7
25262: PPUSH
25263: LD_INT 16
25265: PPUSH
25266: CALL 69845 0 3
25270: ST_TO_ADDR
// if not cratesNearbyPoint then
25271: LD_VAR 0 9
25275: NOT
25276: IFFALSE 25282
// exit ;
25278: POP
25279: POP
25280: GO 25739
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25282: LD_ADDR_VAR 0 4
25286: PUSH
25287: LD_INT 22
25289: PUSH
25290: LD_VAR 0 5
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: LD_INT 60
25304: PUSH
25305: EMPTY
25306: LIST
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 91
25314: PUSH
25315: LD_VAR 0 8
25319: PUSH
25320: LD_INT 6
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: LD_INT 25
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 25
25343: PUSH
25344: LD_INT 16
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: PPUSH
25362: CALL_OW 69
25366: PUSH
25367: LD_VAR 0 8
25371: PPUSH
25372: CALL_OW 313
25376: PPUSH
25377: LD_INT 3
25379: PUSH
25380: LD_INT 60
25382: PUSH
25383: EMPTY
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 25
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 25
25405: PUSH
25406: LD_INT 16
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PPUSH
25422: CALL_OW 72
25426: UNION
25427: ST_TO_ADDR
// if tmp then
25428: LD_VAR 0 4
25432: IFFALSE 25512
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25434: LD_ADDR_VAR 0 4
25438: PUSH
25439: LD_VAR 0 4
25443: PPUSH
25444: LD_INT 3
25446: PPUSH
25447: CALL 67814 0 2
25451: ST_TO_ADDR
// for j in tmp do
25452: LD_ADDR_VAR 0 2
25456: PUSH
25457: LD_VAR 0 4
25461: PUSH
25462: FOR_IN
25463: IFFALSE 25506
// begin if IsInUnit ( j ) then
25465: LD_VAR 0 2
25469: PPUSH
25470: CALL_OW 310
25474: IFFALSE 25485
// ComExit ( j ) ;
25476: LD_VAR 0 2
25480: PPUSH
25481: CALL 67897 0 1
// AddComCollect ( j , x , y ) ;
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_VAR 0 6
25494: PPUSH
25495: LD_VAR 0 7
25499: PPUSH
25500: CALL_OW 177
// end ;
25504: GO 25462
25506: POP
25507: POP
// exit ;
25508: POP
25509: POP
25510: GO 25739
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25512: LD_ADDR_VAR 0 4
25516: PUSH
25517: LD_INT 22
25519: PUSH
25520: LD_VAR 0 5
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 91
25531: PUSH
25532: LD_VAR 0 8
25536: PUSH
25537: LD_INT 8
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 34
25550: PUSH
25551: LD_INT 12
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 34
25560: PUSH
25561: LD_INT 51
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 34
25570: PUSH
25571: LD_INT 32
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 34
25580: PUSH
25581: LD_INT 89
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 69
25604: ST_TO_ADDR
// if tmp then
25605: LD_VAR 0 4
25609: IFFALSE 25735
// begin for j in tmp do
25611: LD_ADDR_VAR 0 2
25615: PUSH
25616: LD_VAR 0 4
25620: PUSH
25621: FOR_IN
25622: IFFALSE 25733
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25624: LD_VAR 0 2
25628: PPUSH
25629: CALL_OW 262
25633: PUSH
25634: LD_INT 3
25636: EQUAL
25637: PUSH
25638: LD_VAR 0 2
25642: PPUSH
25643: CALL_OW 261
25647: PUSH
25648: LD_INT 20
25650: GREATER
25651: OR
25652: PUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: CALL_OW 314
25662: NOT
25663: AND
25664: PUSH
25665: LD_VAR 0 2
25669: PPUSH
25670: CALL_OW 263
25674: PUSH
25675: LD_INT 1
25677: NONEQUAL
25678: PUSH
25679: LD_VAR 0 2
25683: PPUSH
25684: CALL_OW 311
25688: OR
25689: AND
25690: IFFALSE 25731
// begin ComCollect ( j , x , y ) ;
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_VAR 0 6
25701: PPUSH
25702: LD_VAR 0 7
25706: PPUSH
25707: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_VAR 0 8
25720: PPUSH
25721: CALL_OW 172
// exit ;
25725: POP
25726: POP
25727: POP
25728: POP
25729: GO 25739
// end ;
25731: GO 25621
25733: POP
25734: POP
// end ; end ;
25735: GO 25110
25737: POP
25738: POP
// end ; end_of_file end_of_file
25739: PPOPN 9
25741: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25748: LD_VAR 0 1
25752: PPUSH
25753: CALL_OW 264
25757: PUSH
25758: LD_INT 91
25760: EQUAL
25761: IFFALSE 25833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25763: LD_INT 68
25765: PPUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 255
25775: PPUSH
25776: CALL_OW 321
25780: PUSH
25781: LD_INT 2
25783: EQUAL
25784: IFFALSE 25796
// eff := 70 else
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: LD_INT 70
25793: ST_TO_ADDR
25794: GO 25804
// eff := 30 ;
25796: LD_ADDR_VAR 0 4
25800: PUSH
25801: LD_INT 30
25803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 250
25813: PPUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 251
25823: PPUSH
25824: LD_VAR 0 4
25828: PPUSH
25829: CALL_OW 495
// end ; end ;
25833: LD_VAR 0 2
25837: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25838: LD_INT 0
25840: PPUSH
// end ;
25841: LD_VAR 0 4
25845: RET
// export function SOS_Command ( cmd ) ; begin
25846: LD_INT 0
25848: PPUSH
// end ;
25849: LD_VAR 0 2
25853: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25854: LD_INT 0
25856: PPUSH
// end ;
25857: LD_VAR 0 6
25861: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25862: LD_INT 0
25864: PPUSH
25865: PPUSH
// if not vehicle or not factory then
25866: LD_VAR 0 1
25870: NOT
25871: PUSH
25872: LD_VAR 0 2
25876: NOT
25877: OR
25878: IFFALSE 25882
// exit ;
25880: GO 26113
// if factoryWaypoints >= factory then
25882: LD_EXP 85
25886: PUSH
25887: LD_VAR 0 2
25891: GREATEREQUAL
25892: IFFALSE 26113
// if factoryWaypoints [ factory ] then
25894: LD_EXP 85
25898: PUSH
25899: LD_VAR 0 2
25903: ARRAY
25904: IFFALSE 26113
// begin if GetControl ( vehicle ) = control_manual then
25906: LD_VAR 0 1
25910: PPUSH
25911: CALL_OW 263
25915: PUSH
25916: LD_INT 1
25918: EQUAL
25919: IFFALSE 26000
// begin driver := IsDrivenBy ( vehicle ) ;
25921: LD_ADDR_VAR 0 4
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 311
25935: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25936: LD_VAR 0 4
25940: PPUSH
25941: LD_EXP 85
25945: PUSH
25946: LD_VAR 0 2
25950: ARRAY
25951: PUSH
25952: LD_INT 3
25954: ARRAY
25955: PPUSH
25956: LD_EXP 85
25960: PUSH
25961: LD_VAR 0 2
25965: ARRAY
25966: PUSH
25967: LD_INT 4
25969: ARRAY
25970: PPUSH
25971: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25975: LD_VAR 0 4
25979: PPUSH
25980: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25984: LD_VAR 0 4
25988: PPUSH
25989: LD_VAR 0 2
25993: PPUSH
25994: CALL_OW 180
// end else
25998: GO 26113
// if GetControl ( vehicle ) = control_remote then
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 263
26009: PUSH
26010: LD_INT 2
26012: EQUAL
26013: IFFALSE 26074
// begin wait ( 0 0$2 ) ;
26015: LD_INT 70
26017: PPUSH
26018: CALL_OW 67
// if Connect ( vehicle ) then
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL 38137 0 1
26031: IFFALSE 26072
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26033: LD_VAR 0 1
26037: PPUSH
26038: LD_EXP 85
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 3
26051: ARRAY
26052: PPUSH
26053: LD_EXP 85
26057: PUSH
26058: LD_VAR 0 2
26062: ARRAY
26063: PUSH
26064: LD_INT 4
26066: ARRAY
26067: PPUSH
26068: CALL_OW 171
// end else
26072: GO 26113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26074: LD_VAR 0 1
26078: PPUSH
26079: LD_EXP 85
26083: PUSH
26084: LD_VAR 0 2
26088: ARRAY
26089: PUSH
26090: LD_INT 3
26092: ARRAY
26093: PPUSH
26094: LD_EXP 85
26098: PUSH
26099: LD_VAR 0 2
26103: ARRAY
26104: PUSH
26105: LD_INT 4
26107: ARRAY
26108: PPUSH
26109: CALL_OW 171
// end ; end ;
26113: LD_VAR 0 3
26117: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26118: LD_INT 0
26120: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 250
26128: EQUAL
26129: PUSH
26130: LD_VAR 0 2
26134: PPUSH
26135: CALL_OW 264
26139: PUSH
26140: LD_INT 81
26142: EQUAL
26143: AND
26144: IFFALSE 26165
// MinerPlaceMine ( unit , x , y ) ;
26146: LD_VAR 0 2
26150: PPUSH
26151: LD_VAR 0 4
26155: PPUSH
26156: LD_VAR 0 5
26160: PPUSH
26161: CALL 28550 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_INT 251
26172: EQUAL
26173: PUSH
26174: LD_VAR 0 2
26178: PPUSH
26179: CALL_OW 264
26183: PUSH
26184: LD_INT 81
26186: EQUAL
26187: AND
26188: IFFALSE 26209
// MinerDetonateMine ( unit , x , y ) ;
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 4
26199: PPUSH
26200: LD_VAR 0 5
26204: PPUSH
26205: CALL 28825 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26209: LD_VAR 0 1
26213: PUSH
26214: LD_INT 252
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 2
26222: PPUSH
26223: CALL_OW 264
26227: PUSH
26228: LD_INT 81
26230: EQUAL
26231: AND
26232: IFFALSE 26253
// MinerCreateMinefield ( unit , x , y ) ;
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_VAR 0 4
26243: PPUSH
26244: LD_VAR 0 5
26248: PPUSH
26249: CALL 29242 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26253: LD_VAR 0 1
26257: PUSH
26258: LD_INT 253
26260: EQUAL
26261: PUSH
26262: LD_VAR 0 2
26266: PPUSH
26267: CALL_OW 257
26271: PUSH
26272: LD_INT 5
26274: EQUAL
26275: AND
26276: IFFALSE 26297
// ComBinocular ( unit , x , y ) ;
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: LD_VAR 0 5
26292: PPUSH
26293: CALL 29611 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26297: LD_VAR 0 1
26301: PUSH
26302: LD_INT 254
26304: EQUAL
26305: PUSH
26306: LD_VAR 0 2
26310: PPUSH
26311: CALL_OW 264
26315: PUSH
26316: LD_INT 99
26318: EQUAL
26319: AND
26320: PUSH
26321: LD_VAR 0 3
26325: PPUSH
26326: CALL_OW 263
26330: PUSH
26331: LD_INT 3
26333: EQUAL
26334: AND
26335: IFFALSE 26351
// HackDestroyVehicle ( unit , selectedUnit ) ;
26337: LD_VAR 0 2
26341: PPUSH
26342: LD_VAR 0 3
26346: PPUSH
26347: CALL 27914 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26351: LD_VAR 0 1
26355: PUSH
26356: LD_INT 255
26358: EQUAL
26359: PUSH
26360: LD_VAR 0 2
26364: PPUSH
26365: CALL_OW 264
26369: PUSH
26370: LD_INT 14
26372: PUSH
26373: LD_INT 53
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: IN
26380: AND
26381: PUSH
26382: LD_VAR 0 4
26386: PPUSH
26387: LD_VAR 0 5
26391: PPUSH
26392: CALL_OW 488
26396: AND
26397: IFFALSE 26421
// CutTreeXYR ( unit , x , y , 12 ) ;
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_VAR 0 4
26408: PPUSH
26409: LD_VAR 0 5
26413: PPUSH
26414: LD_INT 12
26416: PPUSH
26417: CALL 26484 0 4
// if cmd = 256 then
26421: LD_VAR 0 1
26425: PUSH
26426: LD_INT 256
26428: EQUAL
26429: IFFALSE 26450
// SetFactoryWaypoint ( unit , x , y ) ;
26431: LD_VAR 0 2
26435: PPUSH
26436: LD_VAR 0 4
26440: PPUSH
26441: LD_VAR 0 5
26445: PPUSH
26446: CALL 24431 0 3
// if cmd = 257 then
26450: LD_VAR 0 1
26454: PUSH
26455: LD_INT 257
26457: EQUAL
26458: IFFALSE 26479
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26460: LD_VAR 0 2
26464: PPUSH
26465: LD_VAR 0 4
26469: PPUSH
26470: LD_VAR 0 5
26474: PPUSH
26475: CALL 24793 0 3
// end ;
26479: LD_VAR 0 6
26483: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26495: LD_VAR 0 1
26499: NOT
26500: PUSH
26501: LD_VAR 0 2
26505: PPUSH
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 488
26515: NOT
26516: OR
26517: PUSH
26518: LD_VAR 0 4
26522: NOT
26523: OR
26524: IFFALSE 26528
// exit ;
26526: GO 26868
// list := [ ] ;
26528: LD_ADDR_VAR 0 13
26532: PUSH
26533: EMPTY
26534: ST_TO_ADDR
// if x - r < 0 then
26535: LD_VAR 0 2
26539: PUSH
26540: LD_VAR 0 4
26544: MINUS
26545: PUSH
26546: LD_INT 0
26548: LESS
26549: IFFALSE 26561
// min_x := 0 else
26551: LD_ADDR_VAR 0 7
26555: PUSH
26556: LD_INT 0
26558: ST_TO_ADDR
26559: GO 26577
// min_x := x - r ;
26561: LD_ADDR_VAR 0 7
26565: PUSH
26566: LD_VAR 0 2
26570: PUSH
26571: LD_VAR 0 4
26575: MINUS
26576: ST_TO_ADDR
// if y - r < 0 then
26577: LD_VAR 0 3
26581: PUSH
26582: LD_VAR 0 4
26586: MINUS
26587: PUSH
26588: LD_INT 0
26590: LESS
26591: IFFALSE 26603
// min_y := 0 else
26593: LD_ADDR_VAR 0 8
26597: PUSH
26598: LD_INT 0
26600: ST_TO_ADDR
26601: GO 26619
// min_y := y - r ;
26603: LD_ADDR_VAR 0 8
26607: PUSH
26608: LD_VAR 0 3
26612: PUSH
26613: LD_VAR 0 4
26617: MINUS
26618: ST_TO_ADDR
// max_x := x + r ;
26619: LD_ADDR_VAR 0 9
26623: PUSH
26624: LD_VAR 0 2
26628: PUSH
26629: LD_VAR 0 4
26633: PLUS
26634: ST_TO_ADDR
// max_y := y + r ;
26635: LD_ADDR_VAR 0 10
26639: PUSH
26640: LD_VAR 0 3
26644: PUSH
26645: LD_VAR 0 4
26649: PLUS
26650: ST_TO_ADDR
// for _x = min_x to max_x do
26651: LD_ADDR_VAR 0 11
26655: PUSH
26656: DOUBLE
26657: LD_VAR 0 7
26661: DEC
26662: ST_TO_ADDR
26663: LD_VAR 0 9
26667: PUSH
26668: FOR_TO
26669: IFFALSE 26786
// for _y = min_y to max_y do
26671: LD_ADDR_VAR 0 12
26675: PUSH
26676: DOUBLE
26677: LD_VAR 0 8
26681: DEC
26682: ST_TO_ADDR
26683: LD_VAR 0 10
26687: PUSH
26688: FOR_TO
26689: IFFALSE 26782
// begin if not ValidHex ( _x , _y ) then
26691: LD_VAR 0 11
26695: PPUSH
26696: LD_VAR 0 12
26700: PPUSH
26701: CALL_OW 488
26705: NOT
26706: IFFALSE 26710
// continue ;
26708: GO 26688
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26710: LD_VAR 0 11
26714: PPUSH
26715: LD_VAR 0 12
26719: PPUSH
26720: CALL_OW 351
26724: PUSH
26725: LD_VAR 0 11
26729: PPUSH
26730: LD_VAR 0 12
26734: PPUSH
26735: CALL_OW 554
26739: AND
26740: IFFALSE 26780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26742: LD_ADDR_VAR 0 13
26746: PUSH
26747: LD_VAR 0 13
26751: PPUSH
26752: LD_VAR 0 13
26756: PUSH
26757: LD_INT 1
26759: PLUS
26760: PPUSH
26761: LD_VAR 0 11
26765: PUSH
26766: LD_VAR 0 12
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 2
26779: ST_TO_ADDR
// end ;
26780: GO 26688
26782: POP
26783: POP
26784: GO 26668
26786: POP
26787: POP
// if not list then
26788: LD_VAR 0 13
26792: NOT
26793: IFFALSE 26797
// exit ;
26795: GO 26868
// for i in list do
26797: LD_ADDR_VAR 0 6
26801: PUSH
26802: LD_VAR 0 13
26806: PUSH
26807: FOR_IN
26808: IFFALSE 26866
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26810: LD_VAR 0 1
26814: PPUSH
26815: LD_STRING M
26817: PUSH
26818: LD_VAR 0 6
26822: PUSH
26823: LD_INT 1
26825: ARRAY
26826: PUSH
26827: LD_VAR 0 6
26831: PUSH
26832: LD_INT 2
26834: ARRAY
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: PPUSH
26860: CALL_OW 447
26864: GO 26807
26866: POP
26867: POP
// end ;
26868: LD_VAR 0 5
26872: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26873: LD_EXP 88
26877: NOT
26878: IFFALSE 26928
26880: GO 26882
26882: DISABLE
// begin initHack := true ;
26883: LD_ADDR_EXP 88
26887: PUSH
26888: LD_INT 1
26890: ST_TO_ADDR
// hackTanks := [ ] ;
26891: LD_ADDR_EXP 89
26895: PUSH
26896: EMPTY
26897: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26898: LD_ADDR_EXP 90
26902: PUSH
26903: EMPTY
26904: ST_TO_ADDR
// hackLimit := 3 ;
26905: LD_ADDR_EXP 91
26909: PUSH
26910: LD_INT 3
26912: ST_TO_ADDR
// hackDist := 12 ;
26913: LD_ADDR_EXP 92
26917: PUSH
26918: LD_INT 12
26920: ST_TO_ADDR
// hackCounter := [ ] ;
26921: LD_ADDR_EXP 93
26925: PUSH
26926: EMPTY
26927: ST_TO_ADDR
// end ;
26928: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26929: LD_EXP 88
26933: PUSH
26934: LD_INT 34
26936: PUSH
26937: LD_INT 99
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 69
26948: AND
26949: IFFALSE 27202
26951: GO 26953
26953: DISABLE
26954: LD_INT 0
26956: PPUSH
26957: PPUSH
// begin enable ;
26958: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26959: LD_ADDR_VAR 0 1
26963: PUSH
26964: LD_INT 34
26966: PUSH
26967: LD_INT 99
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 69
26978: PUSH
26979: FOR_IN
26980: IFFALSE 27200
// begin if not i in hackTanks then
26982: LD_VAR 0 1
26986: PUSH
26987: LD_EXP 89
26991: IN
26992: NOT
26993: IFFALSE 27076
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26995: LD_ADDR_EXP 89
26999: PUSH
27000: LD_EXP 89
27004: PPUSH
27005: LD_EXP 89
27009: PUSH
27010: LD_INT 1
27012: PLUS
27013: PPUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 1
27023: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27024: LD_ADDR_EXP 90
27028: PUSH
27029: LD_EXP 90
27033: PPUSH
27034: LD_EXP 90
27038: PUSH
27039: LD_INT 1
27041: PLUS
27042: PPUSH
27043: EMPTY
27044: PPUSH
27045: CALL_OW 1
27049: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27050: LD_ADDR_EXP 93
27054: PUSH
27055: LD_EXP 93
27059: PPUSH
27060: LD_EXP 93
27064: PUSH
27065: LD_INT 1
27067: PLUS
27068: PPUSH
27069: EMPTY
27070: PPUSH
27071: CALL_OW 1
27075: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 302
27085: NOT
27086: IFFALSE 27099
// begin HackUnlinkAll ( i ) ;
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL 27205 0 1
// continue ;
27097: GO 26979
// end ; HackCheckCapturedStatus ( i ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: CALL 27648 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_INT 81
27115: PUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: CALL_OW 255
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 33
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 91
27142: PUSH
27143: LD_VAR 0 1
27147: PUSH
27148: LD_EXP 92
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 50
27160: PUSH
27161: EMPTY
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: ST_TO_ADDR
// if not tmp then
27175: LD_VAR 0 2
27179: NOT
27180: IFFALSE 27184
// continue ;
27182: GO 26979
// HackLink ( i , tmp ) ;
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL 27341 0 2
// end ;
27198: GO 26979
27200: POP
27201: POP
// end ;
27202: PPOPN 2
27204: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
27209: PPUSH
// if not hack in hackTanks then
27210: LD_VAR 0 1
27214: PUSH
27215: LD_EXP 89
27219: IN
27220: NOT
27221: IFFALSE 27225
// exit ;
27223: GO 27336
// index := GetElementIndex ( hackTanks , hack ) ;
27225: LD_ADDR_VAR 0 4
27229: PUSH
27230: LD_EXP 89
27234: PPUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL 34953 0 2
27244: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27245: LD_EXP 90
27249: PUSH
27250: LD_VAR 0 4
27254: ARRAY
27255: IFFALSE 27336
// begin for i in hackTanksCaptured [ index ] do
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_EXP 90
27266: PUSH
27267: LD_VAR 0 4
27271: ARRAY
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27300
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27276: LD_VAR 0 3
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_INT 2
27292: ARRAY
27293: PPUSH
27294: CALL_OW 235
27298: GO 27273
27300: POP
27301: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27302: LD_ADDR_EXP 90
27306: PUSH
27307: LD_EXP 90
27311: PPUSH
27312: LD_VAR 0 4
27316: PPUSH
27317: EMPTY
27318: PPUSH
27319: CALL_OW 1
27323: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27324: LD_VAR 0 1
27328: PPUSH
27329: LD_INT 0
27331: PPUSH
27332: CALL_OW 505
// end ; end ;
27336: LD_VAR 0 2
27340: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
27345: PPUSH
// if not hack in hackTanks or not vehicles then
27346: LD_VAR 0 1
27350: PUSH
27351: LD_EXP 89
27355: IN
27356: NOT
27357: PUSH
27358: LD_VAR 0 2
27362: NOT
27363: OR
27364: IFFALSE 27368
// exit ;
27366: GO 27643
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27368: LD_ADDR_VAR 0 2
27372: PUSH
27373: LD_VAR 0 1
27377: PPUSH
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_INT 1
27385: PPUSH
27386: LD_INT 1
27388: PPUSH
27389: CALL 35603 0 4
27393: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27394: LD_ADDR_VAR 0 5
27398: PUSH
27399: LD_EXP 89
27403: PPUSH
27404: LD_VAR 0 1
27408: PPUSH
27409: CALL 34953 0 2
27413: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27414: LD_EXP 90
27418: PUSH
27419: LD_VAR 0 5
27423: ARRAY
27424: PUSH
27425: LD_EXP 91
27429: LESS
27430: IFFALSE 27619
// begin for i := 1 to vehicles do
27432: LD_ADDR_VAR 0 4
27436: PUSH
27437: DOUBLE
27438: LD_INT 1
27440: DEC
27441: ST_TO_ADDR
27442: LD_VAR 0 2
27446: PUSH
27447: FOR_TO
27448: IFFALSE 27617
// begin if hackTanksCaptured [ index ] = hackLimit then
27450: LD_EXP 90
27454: PUSH
27455: LD_VAR 0 5
27459: ARRAY
27460: PUSH
27461: LD_EXP 91
27465: EQUAL
27466: IFFALSE 27470
// break ;
27468: GO 27617
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27470: LD_ADDR_EXP 93
27474: PUSH
27475: LD_EXP 93
27479: PPUSH
27480: LD_VAR 0 5
27484: PPUSH
27485: LD_EXP 93
27489: PUSH
27490: LD_VAR 0 5
27494: ARRAY
27495: PUSH
27496: LD_INT 1
27498: PLUS
27499: PPUSH
27500: CALL_OW 1
27504: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27505: LD_ADDR_EXP 90
27509: PUSH
27510: LD_EXP 90
27514: PPUSH
27515: LD_VAR 0 5
27519: PUSH
27520: LD_EXP 90
27524: PUSH
27525: LD_VAR 0 5
27529: ARRAY
27530: PUSH
27531: LD_INT 1
27533: PLUS
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PPUSH
27539: LD_VAR 0 2
27543: PUSH
27544: LD_VAR 0 4
27548: ARRAY
27549: PUSH
27550: LD_VAR 0 2
27554: PUSH
27555: LD_VAR 0 4
27559: ARRAY
27560: PPUSH
27561: CALL_OW 255
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PPUSH
27570: CALL 35168 0 3
27574: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27575: LD_VAR 0 2
27579: PUSH
27580: LD_VAR 0 4
27584: ARRAY
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 255
27595: PPUSH
27596: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27600: LD_VAR 0 2
27604: PUSH
27605: LD_VAR 0 4
27609: ARRAY
27610: PPUSH
27611: CALL_OW 141
// end ;
27615: GO 27447
27617: POP
27618: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27619: LD_VAR 0 1
27623: PPUSH
27624: LD_EXP 90
27628: PUSH
27629: LD_VAR 0 5
27633: ARRAY
27634: PUSH
27635: LD_INT 0
27637: PLUS
27638: PPUSH
27639: CALL_OW 505
// end ;
27643: LD_VAR 0 3
27647: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27648: LD_INT 0
27650: PPUSH
27651: PPUSH
27652: PPUSH
27653: PPUSH
// if not hack in hackTanks then
27654: LD_VAR 0 1
27658: PUSH
27659: LD_EXP 89
27663: IN
27664: NOT
27665: IFFALSE 27669
// exit ;
27667: GO 27909
// index := GetElementIndex ( hackTanks , hack ) ;
27669: LD_ADDR_VAR 0 4
27673: PUSH
27674: LD_EXP 89
27678: PPUSH
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL 34953 0 2
27688: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27689: LD_ADDR_VAR 0 3
27693: PUSH
27694: DOUBLE
27695: LD_EXP 90
27699: PUSH
27700: LD_VAR 0 4
27704: ARRAY
27705: INC
27706: ST_TO_ADDR
27707: LD_INT 1
27709: PUSH
27710: FOR_DOWNTO
27711: IFFALSE 27883
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27713: LD_ADDR_VAR 0 5
27717: PUSH
27718: LD_EXP 90
27722: PUSH
27723: LD_VAR 0 4
27727: ARRAY
27728: PUSH
27729: LD_VAR 0 3
27733: ARRAY
27734: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27735: LD_VAR 0 5
27739: PUSH
27740: LD_INT 1
27742: ARRAY
27743: PPUSH
27744: CALL_OW 302
27748: NOT
27749: PUSH
27750: LD_VAR 0 5
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: CALL_OW 255
27763: PUSH
27764: LD_VAR 0 1
27768: PPUSH
27769: CALL_OW 255
27773: NONEQUAL
27774: OR
27775: IFFALSE 27881
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27777: LD_VAR 0 5
27781: PUSH
27782: LD_INT 1
27784: ARRAY
27785: PPUSH
27786: CALL_OW 305
27790: PUSH
27791: LD_VAR 0 5
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: PPUSH
27800: CALL_OW 255
27804: PUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 255
27814: EQUAL
27815: AND
27816: IFFALSE 27840
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27818: LD_VAR 0 5
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 5
27831: PUSH
27832: LD_INT 2
27834: ARRAY
27835: PPUSH
27836: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27840: LD_ADDR_EXP 90
27844: PUSH
27845: LD_EXP 90
27849: PPUSH
27850: LD_VAR 0 4
27854: PPUSH
27855: LD_EXP 90
27859: PUSH
27860: LD_VAR 0 4
27864: ARRAY
27865: PPUSH
27866: LD_VAR 0 3
27870: PPUSH
27871: CALL_OW 3
27875: PPUSH
27876: CALL_OW 1
27880: ST_TO_ADDR
// end ; end ;
27881: GO 27710
27883: POP
27884: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27885: LD_VAR 0 1
27889: PPUSH
27890: LD_EXP 90
27894: PUSH
27895: LD_VAR 0 4
27899: ARRAY
27900: PUSH
27901: LD_INT 0
27903: PLUS
27904: PPUSH
27905: CALL_OW 505
// end ;
27909: LD_VAR 0 2
27913: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27914: LD_INT 0
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
// if not hack in hackTanks then
27920: LD_VAR 0 1
27924: PUSH
27925: LD_EXP 89
27929: IN
27930: NOT
27931: IFFALSE 27935
// exit ;
27933: GO 28020
// index := GetElementIndex ( hackTanks , hack ) ;
27935: LD_ADDR_VAR 0 5
27939: PUSH
27940: LD_EXP 89
27944: PPUSH
27945: LD_VAR 0 1
27949: PPUSH
27950: CALL 34953 0 2
27954: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: DOUBLE
27961: LD_INT 1
27963: DEC
27964: ST_TO_ADDR
27965: LD_EXP 90
27969: PUSH
27970: LD_VAR 0 5
27974: ARRAY
27975: PUSH
27976: FOR_TO
27977: IFFALSE 28018
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27979: LD_EXP 90
27983: PUSH
27984: LD_VAR 0 5
27988: ARRAY
27989: PUSH
27990: LD_VAR 0 4
27994: ARRAY
27995: PUSH
27996: LD_INT 1
27998: ARRAY
27999: PUSH
28000: LD_VAR 0 2
28004: EQUAL
28005: IFFALSE 28016
// KillUnit ( vehicle ) ;
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL_OW 66
28016: GO 27976
28018: POP
28019: POP
// end ;
28020: LD_VAR 0 3
28024: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28025: LD_EXP 94
28029: NOT
28030: IFFALSE 28065
28032: GO 28034
28034: DISABLE
// begin initMiner := true ;
28035: LD_ADDR_EXP 94
28039: PUSH
28040: LD_INT 1
28042: ST_TO_ADDR
// minersList := [ ] ;
28043: LD_ADDR_EXP 95
28047: PUSH
28048: EMPTY
28049: ST_TO_ADDR
// minerMinesList := [ ] ;
28050: LD_ADDR_EXP 96
28054: PUSH
28055: EMPTY
28056: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28057: LD_ADDR_EXP 97
28061: PUSH
28062: LD_INT 5
28064: ST_TO_ADDR
// end ;
28065: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28066: LD_EXP 94
28070: PUSH
28071: LD_INT 34
28073: PUSH
28074: LD_INT 81
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 69
28085: AND
28086: IFFALSE 28547
28088: GO 28090
28090: DISABLE
28091: LD_INT 0
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
// begin enable ;
28097: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28098: LD_ADDR_VAR 0 1
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 81
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PPUSH
28113: CALL_OW 69
28117: PUSH
28118: FOR_IN
28119: IFFALSE 28191
// begin if not i in minersList then
28121: LD_VAR 0 1
28125: PUSH
28126: LD_EXP 95
28130: IN
28131: NOT
28132: IFFALSE 28189
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28134: LD_ADDR_EXP 95
28138: PUSH
28139: LD_EXP 95
28143: PPUSH
28144: LD_EXP 95
28148: PUSH
28149: LD_INT 1
28151: PLUS
28152: PPUSH
28153: LD_VAR 0 1
28157: PPUSH
28158: CALL_OW 1
28162: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28163: LD_ADDR_EXP 96
28167: PUSH
28168: LD_EXP 96
28172: PPUSH
28173: LD_EXP 96
28177: PUSH
28178: LD_INT 1
28180: PLUS
28181: PPUSH
28182: EMPTY
28183: PPUSH
28184: CALL_OW 1
28188: ST_TO_ADDR
// end end ;
28189: GO 28118
28191: POP
28192: POP
// for i := minerMinesList downto 1 do
28193: LD_ADDR_VAR 0 1
28197: PUSH
28198: DOUBLE
28199: LD_EXP 96
28203: INC
28204: ST_TO_ADDR
28205: LD_INT 1
28207: PUSH
28208: FOR_DOWNTO
28209: IFFALSE 28545
// begin if IsLive ( minersList [ i ] ) then
28211: LD_EXP 95
28215: PUSH
28216: LD_VAR 0 1
28220: ARRAY
28221: PPUSH
28222: CALL_OW 300
28226: IFFALSE 28254
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28228: LD_EXP 95
28232: PUSH
28233: LD_VAR 0 1
28237: ARRAY
28238: PPUSH
28239: LD_EXP 96
28243: PUSH
28244: LD_VAR 0 1
28248: ARRAY
28249: PPUSH
28250: CALL_OW 505
// if not minerMinesList [ i ] then
28254: LD_EXP 96
28258: PUSH
28259: LD_VAR 0 1
28263: ARRAY
28264: NOT
28265: IFFALSE 28269
// continue ;
28267: GO 28208
// for j := minerMinesList [ i ] downto 1 do
28269: LD_ADDR_VAR 0 2
28273: PUSH
28274: DOUBLE
28275: LD_EXP 96
28279: PUSH
28280: LD_VAR 0 1
28284: ARRAY
28285: INC
28286: ST_TO_ADDR
28287: LD_INT 1
28289: PUSH
28290: FOR_DOWNTO
28291: IFFALSE 28541
// begin side := GetSide ( minersList [ i ] ) ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_EXP 95
28302: PUSH
28303: LD_VAR 0 1
28307: ARRAY
28308: PPUSH
28309: CALL_OW 255
28313: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28314: LD_ADDR_VAR 0 4
28318: PUSH
28319: LD_EXP 96
28323: PUSH
28324: LD_VAR 0 1
28328: ARRAY
28329: PUSH
28330: LD_VAR 0 2
28334: ARRAY
28335: PUSH
28336: LD_INT 1
28338: ARRAY
28339: PPUSH
28340: LD_EXP 96
28344: PUSH
28345: LD_VAR 0 1
28349: ARRAY
28350: PUSH
28351: LD_VAR 0 2
28355: ARRAY
28356: PUSH
28357: LD_INT 2
28359: ARRAY
28360: PPUSH
28361: CALL_OW 428
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 4
28370: NOT
28371: IFFALSE 28375
// continue ;
28373: GO 28290
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28375: LD_VAR 0 4
28379: PUSH
28380: LD_INT 81
28382: PUSH
28383: LD_VAR 0 3
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 69
28396: IN
28397: PUSH
28398: LD_EXP 96
28402: PUSH
28403: LD_VAR 0 1
28407: ARRAY
28408: PUSH
28409: LD_VAR 0 2
28413: ARRAY
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: LD_EXP 96
28423: PUSH
28424: LD_VAR 0 1
28428: ARRAY
28429: PUSH
28430: LD_VAR 0 2
28434: ARRAY
28435: PUSH
28436: LD_INT 2
28438: ARRAY
28439: PPUSH
28440: CALL_OW 458
28444: AND
28445: IFFALSE 28539
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28447: LD_EXP 96
28451: PUSH
28452: LD_VAR 0 1
28456: ARRAY
28457: PUSH
28458: LD_VAR 0 2
28462: ARRAY
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PPUSH
28468: LD_EXP 96
28472: PUSH
28473: LD_VAR 0 1
28477: ARRAY
28478: PUSH
28479: LD_VAR 0 2
28483: ARRAY
28484: PUSH
28485: LD_INT 2
28487: ARRAY
28488: PPUSH
28489: LD_VAR 0 3
28493: PPUSH
28494: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28498: LD_ADDR_EXP 96
28502: PUSH
28503: LD_EXP 96
28507: PPUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_EXP 96
28517: PUSH
28518: LD_VAR 0 1
28522: ARRAY
28523: PPUSH
28524: LD_VAR 0 2
28528: PPUSH
28529: CALL_OW 3
28533: PPUSH
28534: CALL_OW 1
28538: ST_TO_ADDR
// end ; end ;
28539: GO 28290
28541: POP
28542: POP
// end ;
28543: GO 28208
28545: POP
28546: POP
// end ;
28547: PPOPN 4
28549: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28550: LD_INT 0
28552: PPUSH
28553: PPUSH
// result := false ;
28554: LD_ADDR_VAR 0 4
28558: PUSH
28559: LD_INT 0
28561: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 264
28571: PUSH
28572: LD_INT 81
28574: EQUAL
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28820
// index := GetElementIndex ( minersList , unit ) ;
28580: LD_ADDR_VAR 0 5
28584: PUSH
28585: LD_EXP 95
28589: PPUSH
28590: LD_VAR 0 1
28594: PPUSH
28595: CALL 34953 0 2
28599: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28600: LD_EXP 96
28604: PUSH
28605: LD_VAR 0 5
28609: ARRAY
28610: PUSH
28611: LD_EXP 97
28615: GREATEREQUAL
28616: IFFALSE 28620
// exit ;
28618: GO 28820
// ComMoveXY ( unit , x , y ) ;
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_VAR 0 2
28629: PPUSH
28630: LD_VAR 0 3
28634: PPUSH
28635: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28639: LD_INT 35
28641: PPUSH
28642: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL 66308 0 3
28665: NOT
28666: PUSH
28667: LD_VAR 0 1
28671: PPUSH
28672: CALL_OW 314
28676: AND
28677: IFFALSE 28681
// exit ;
28679: GO 28820
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28681: LD_VAR 0 2
28685: PPUSH
28686: LD_VAR 0 3
28690: PPUSH
28691: CALL_OW 428
28695: PUSH
28696: LD_VAR 0 1
28700: EQUAL
28701: PUSH
28702: LD_VAR 0 1
28706: PPUSH
28707: CALL_OW 314
28711: NOT
28712: AND
28713: IFFALSE 28639
// PlaySoundXY ( x , y , PlantMine ) ;
28715: LD_VAR 0 2
28719: PPUSH
28720: LD_VAR 0 3
28724: PPUSH
28725: LD_STRING PlantMine
28727: PPUSH
28728: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 3
28741: PPUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 255
28751: PPUSH
28752: LD_INT 0
28754: PPUSH
28755: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28759: LD_ADDR_EXP 96
28763: PUSH
28764: LD_EXP 96
28768: PPUSH
28769: LD_VAR 0 5
28773: PUSH
28774: LD_EXP 96
28778: PUSH
28779: LD_VAR 0 5
28783: ARRAY
28784: PUSH
28785: LD_INT 1
28787: PLUS
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: LD_VAR 0 2
28797: PUSH
28798: LD_VAR 0 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PPUSH
28807: CALL 35168 0 3
28811: ST_TO_ADDR
// result := true ;
28812: LD_ADDR_VAR 0 4
28816: PUSH
28817: LD_INT 1
28819: ST_TO_ADDR
// end ;
28820: LD_VAR 0 4
28824: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28825: LD_INT 0
28827: PPUSH
28828: PPUSH
28829: PPUSH
// if not unit in minersList then
28830: LD_VAR 0 1
28834: PUSH
28835: LD_EXP 95
28839: IN
28840: NOT
28841: IFFALSE 28845
// exit ;
28843: GO 29237
// index := GetElementIndex ( minersList , unit ) ;
28845: LD_ADDR_VAR 0 6
28849: PUSH
28850: LD_EXP 95
28854: PPUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL 34953 0 2
28864: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: DOUBLE
28871: LD_EXP 96
28875: PUSH
28876: LD_VAR 0 6
28880: ARRAY
28881: INC
28882: ST_TO_ADDR
28883: LD_INT 1
28885: PUSH
28886: FOR_DOWNTO
28887: IFFALSE 29048
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28889: LD_EXP 96
28893: PUSH
28894: LD_VAR 0 6
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 5
28904: ARRAY
28905: PUSH
28906: LD_INT 1
28908: ARRAY
28909: PUSH
28910: LD_VAR 0 2
28914: EQUAL
28915: PUSH
28916: LD_EXP 96
28920: PUSH
28921: LD_VAR 0 6
28925: ARRAY
28926: PUSH
28927: LD_VAR 0 5
28931: ARRAY
28932: PUSH
28933: LD_INT 2
28935: ARRAY
28936: PUSH
28937: LD_VAR 0 3
28941: EQUAL
28942: AND
28943: IFFALSE 29046
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28945: LD_EXP 96
28949: PUSH
28950: LD_VAR 0 6
28954: ARRAY
28955: PUSH
28956: LD_VAR 0 5
28960: ARRAY
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: PPUSH
28966: LD_EXP 96
28970: PUSH
28971: LD_VAR 0 6
28975: ARRAY
28976: PUSH
28977: LD_VAR 0 5
28981: ARRAY
28982: PUSH
28983: LD_INT 2
28985: ARRAY
28986: PPUSH
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 255
28996: PPUSH
28997: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29001: LD_ADDR_EXP 96
29005: PUSH
29006: LD_EXP 96
29010: PPUSH
29011: LD_VAR 0 6
29015: PPUSH
29016: LD_EXP 96
29020: PUSH
29021: LD_VAR 0 6
29025: ARRAY
29026: PPUSH
29027: LD_VAR 0 5
29031: PPUSH
29032: CALL_OW 3
29036: PPUSH
29037: CALL_OW 1
29041: ST_TO_ADDR
// exit ;
29042: POP
29043: POP
29044: GO 29237
// end ; end ;
29046: GO 28886
29048: POP
29049: POP
// for i := minerMinesList [ index ] downto 1 do
29050: LD_ADDR_VAR 0 5
29054: PUSH
29055: DOUBLE
29056: LD_EXP 96
29060: PUSH
29061: LD_VAR 0 6
29065: ARRAY
29066: INC
29067: ST_TO_ADDR
29068: LD_INT 1
29070: PUSH
29071: FOR_DOWNTO
29072: IFFALSE 29235
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29074: LD_EXP 96
29078: PUSH
29079: LD_VAR 0 6
29083: ARRAY
29084: PUSH
29085: LD_VAR 0 5
29089: ARRAY
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: LD_EXP 96
29099: PUSH
29100: LD_VAR 0 6
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 5
29110: ARRAY
29111: PUSH
29112: LD_INT 2
29114: ARRAY
29115: PPUSH
29116: LD_VAR 0 2
29120: PPUSH
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 298
29130: PUSH
29131: LD_INT 6
29133: LESS
29134: IFFALSE 29233
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29136: LD_EXP 96
29140: PUSH
29141: LD_VAR 0 6
29145: ARRAY
29146: PUSH
29147: LD_VAR 0 5
29151: ARRAY
29152: PUSH
29153: LD_INT 1
29155: ARRAY
29156: PPUSH
29157: LD_EXP 96
29161: PUSH
29162: LD_VAR 0 6
29166: ARRAY
29167: PUSH
29168: LD_VAR 0 5
29172: ARRAY
29173: PUSH
29174: LD_INT 2
29176: ARRAY
29177: PPUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 255
29187: PPUSH
29188: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29192: LD_ADDR_EXP 96
29196: PUSH
29197: LD_EXP 96
29201: PPUSH
29202: LD_VAR 0 6
29206: PPUSH
29207: LD_EXP 96
29211: PUSH
29212: LD_VAR 0 6
29216: ARRAY
29217: PPUSH
29218: LD_VAR 0 5
29222: PPUSH
29223: CALL_OW 3
29227: PPUSH
29228: CALL_OW 1
29232: ST_TO_ADDR
// end ; end ;
29233: GO 29071
29235: POP
29236: POP
// end ;
29237: LD_VAR 0 4
29241: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29242: LD_INT 0
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 264
29262: PUSH
29263: LD_INT 81
29265: EQUAL
29266: NOT
29267: PUSH
29268: LD_VAR 0 1
29272: PUSH
29273: LD_EXP 95
29277: IN
29278: NOT
29279: OR
29280: IFFALSE 29284
// exit ;
29282: GO 29606
// index := GetElementIndex ( minersList , unit ) ;
29284: LD_ADDR_VAR 0 6
29288: PUSH
29289: LD_EXP 95
29293: PPUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL 34953 0 2
29303: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29304: LD_ADDR_VAR 0 8
29308: PUSH
29309: LD_EXP 97
29313: PUSH
29314: LD_EXP 96
29318: PUSH
29319: LD_VAR 0 6
29323: ARRAY
29324: MINUS
29325: ST_TO_ADDR
// if not minesFreeAmount then
29326: LD_VAR 0 8
29330: NOT
29331: IFFALSE 29335
// exit ;
29333: GO 29606
// tmp := [ ] ;
29335: LD_ADDR_VAR 0 7
29339: PUSH
29340: EMPTY
29341: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29342: LD_ADDR_VAR 0 5
29346: PUSH
29347: DOUBLE
29348: LD_INT 1
29350: DEC
29351: ST_TO_ADDR
29352: LD_VAR 0 8
29356: PUSH
29357: FOR_TO
29358: IFFALSE 29553
// begin _d := rand ( 0 , 5 ) ;
29360: LD_ADDR_VAR 0 11
29364: PUSH
29365: LD_INT 0
29367: PPUSH
29368: LD_INT 5
29370: PPUSH
29371: CALL_OW 12
29375: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29376: LD_ADDR_VAR 0 12
29380: PUSH
29381: LD_INT 2
29383: PPUSH
29384: LD_INT 6
29386: PPUSH
29387: CALL_OW 12
29391: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_VAR 0 2
29401: PPUSH
29402: LD_VAR 0 11
29406: PPUSH
29407: LD_VAR 0 12
29411: PPUSH
29412: CALL_OW 272
29416: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29417: LD_ADDR_VAR 0 10
29421: PUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: LD_VAR 0 11
29431: PPUSH
29432: LD_VAR 0 12
29436: PPUSH
29437: CALL_OW 273
29441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29442: LD_VAR 0 9
29446: PPUSH
29447: LD_VAR 0 10
29451: PPUSH
29452: CALL_OW 488
29456: PUSH
29457: LD_VAR 0 9
29461: PUSH
29462: LD_VAR 0 10
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_VAR 0 7
29475: IN
29476: NOT
29477: AND
29478: PUSH
29479: LD_VAR 0 9
29483: PPUSH
29484: LD_VAR 0 10
29488: PPUSH
29489: CALL_OW 458
29493: NOT
29494: AND
29495: IFFALSE 29537
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29497: LD_ADDR_VAR 0 7
29501: PUSH
29502: LD_VAR 0 7
29506: PPUSH
29507: LD_VAR 0 7
29511: PUSH
29512: LD_INT 1
29514: PLUS
29515: PPUSH
29516: LD_VAR 0 9
29520: PUSH
29521: LD_VAR 0 10
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 1
29534: ST_TO_ADDR
29535: GO 29551
// i := i - 1 ;
29537: LD_ADDR_VAR 0 5
29541: PUSH
29542: LD_VAR 0 5
29546: PUSH
29547: LD_INT 1
29549: MINUS
29550: ST_TO_ADDR
// end ;
29551: GO 29357
29553: POP
29554: POP
// for i in tmp do
29555: LD_ADDR_VAR 0 5
29559: PUSH
29560: LD_VAR 0 7
29564: PUSH
29565: FOR_IN
29566: IFFALSE 29604
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29568: LD_VAR 0 1
29572: PPUSH
29573: LD_VAR 0 5
29577: PUSH
29578: LD_INT 1
29580: ARRAY
29581: PPUSH
29582: LD_VAR 0 5
29586: PUSH
29587: LD_INT 2
29589: ARRAY
29590: PPUSH
29591: CALL 28550 0 3
29595: NOT
29596: IFFALSE 29602
// exit ;
29598: POP
29599: POP
29600: GO 29606
29602: GO 29565
29604: POP
29605: POP
// end ;
29606: LD_VAR 0 4
29610: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29611: LD_INT 0
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
// if not GetClass ( unit ) = class_sniper then
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL_OW 257
29629: PUSH
29630: LD_INT 5
29632: EQUAL
29633: NOT
29634: IFFALSE 29638
// exit ;
29636: GO 30026
// dist := 8 ;
29638: LD_ADDR_VAR 0 5
29642: PUSH
29643: LD_INT 8
29645: ST_TO_ADDR
// viewRange := 12 ;
29646: LD_ADDR_VAR 0 7
29650: PUSH
29651: LD_INT 12
29653: ST_TO_ADDR
// side := GetSide ( unit ) ;
29654: LD_ADDR_VAR 0 6
29658: PUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL_OW 255
29668: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29669: LD_INT 61
29671: PPUSH
29672: LD_VAR 0 6
29676: PPUSH
29677: CALL_OW 321
29681: PUSH
29682: LD_INT 2
29684: EQUAL
29685: IFFALSE 29695
// viewRange := 16 ;
29687: LD_ADDR_VAR 0 7
29691: PUSH
29692: LD_INT 16
29694: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL_OW 297
29714: PUSH
29715: LD_VAR 0 5
29719: GREATER
29720: IFFALSE 29799
// begin ComMoveXY ( unit , x , y ) ;
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29741: LD_INT 35
29743: PPUSH
29744: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29748: LD_VAR 0 1
29752: PPUSH
29753: LD_VAR 0 2
29757: PPUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL 66308 0 3
29767: NOT
29768: IFFALSE 29772
// exit ;
29770: GO 30026
// until GetDistUnitXY ( unit , x , y ) < dist ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_VAR 0 2
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL_OW 297
29791: PUSH
29792: LD_VAR 0 5
29796: LESS
29797: IFFALSE 29741
// end ; ComTurnXY ( unit , x , y ) ;
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_VAR 0 2
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: CALL_OW 118
// wait ( 5 ) ;
29818: LD_INT 5
29820: PPUSH
29821: CALL_OW 67
// _d := GetDir ( unit ) ;
29825: LD_ADDR_VAR 0 10
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 254
29839: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29840: LD_ADDR_VAR 0 8
29844: PUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 250
29854: PPUSH
29855: LD_VAR 0 10
29859: PPUSH
29860: LD_VAR 0 5
29864: PPUSH
29865: CALL_OW 272
29869: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29870: LD_ADDR_VAR 0 9
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 251
29884: PPUSH
29885: LD_VAR 0 10
29889: PPUSH
29890: LD_VAR 0 5
29894: PPUSH
29895: CALL_OW 273
29899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29900: LD_VAR 0 8
29904: PPUSH
29905: LD_VAR 0 9
29909: PPUSH
29910: CALL_OW 488
29914: NOT
29915: IFFALSE 29919
// exit ;
29917: GO 30026
// ComAnimCustom ( unit , 1 ) ;
29919: LD_VAR 0 1
29923: PPUSH
29924: LD_INT 1
29926: PPUSH
29927: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29931: LD_VAR 0 8
29935: PPUSH
29936: LD_VAR 0 9
29940: PPUSH
29941: LD_VAR 0 6
29945: PPUSH
29946: LD_VAR 0 7
29950: PPUSH
29951: CALL_OW 330
// repeat wait ( 1 ) ;
29955: LD_INT 1
29957: PPUSH
29958: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 316
29971: PUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 314
29981: OR
29982: PUSH
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL_OW 302
29992: NOT
29993: OR
29994: PUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 301
30004: OR
30005: IFFALSE 29955
// RemoveSeeing ( _x , _y , side ) ;
30007: LD_VAR 0 8
30011: PPUSH
30012: LD_VAR 0 9
30016: PPUSH
30017: LD_VAR 0 6
30021: PPUSH
30022: CALL_OW 331
// end ; end_of_file
30026: LD_VAR 0 4
30030: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
// if exist_mode then
30035: LD_VAR 0 2
30039: IFFALSE 30064
// unit := CreateCharacter ( prefix & ident ) else
30041: LD_ADDR_VAR 0 5
30045: PUSH
30046: LD_VAR 0 3
30050: PUSH
30051: LD_VAR 0 1
30055: STR
30056: PPUSH
30057: CALL_OW 34
30061: ST_TO_ADDR
30062: GO 30079
// unit := NewCharacter ( ident ) ;
30064: LD_ADDR_VAR 0 5
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 25
30078: ST_TO_ADDR
// result := unit ;
30079: LD_ADDR_VAR 0 4
30083: PUSH
30084: LD_VAR 0 5
30088: ST_TO_ADDR
// end ;
30089: LD_VAR 0 4
30093: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
// if not side or not nation then
30098: LD_VAR 0 1
30102: NOT
30103: PUSH
30104: LD_VAR 0 2
30108: NOT
30109: OR
30110: IFFALSE 30114
// exit ;
30112: GO 30882
// case nation of nation_american :
30114: LD_VAR 0 2
30118: PUSH
30119: LD_INT 1
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30341
30127: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30128: LD_ADDR_VAR 0 4
30132: PUSH
30133: LD_INT 35
30135: PUSH
30136: LD_INT 45
30138: PUSH
30139: LD_INT 46
30141: PUSH
30142: LD_INT 47
30144: PUSH
30145: LD_INT 82
30147: PUSH
30148: LD_INT 83
30150: PUSH
30151: LD_INT 84
30153: PUSH
30154: LD_INT 85
30156: PUSH
30157: LD_INT 86
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 6
30168: PUSH
30169: LD_INT 15
30171: PUSH
30172: LD_INT 16
30174: PUSH
30175: LD_INT 7
30177: PUSH
30178: LD_INT 12
30180: PUSH
30181: LD_INT 13
30183: PUSH
30184: LD_INT 10
30186: PUSH
30187: LD_INT 14
30189: PUSH
30190: LD_INT 20
30192: PUSH
30193: LD_INT 21
30195: PUSH
30196: LD_INT 22
30198: PUSH
30199: LD_INT 25
30201: PUSH
30202: LD_INT 32
30204: PUSH
30205: LD_INT 27
30207: PUSH
30208: LD_INT 36
30210: PUSH
30211: LD_INT 69
30213: PUSH
30214: LD_INT 39
30216: PUSH
30217: LD_INT 34
30219: PUSH
30220: LD_INT 40
30222: PUSH
30223: LD_INT 48
30225: PUSH
30226: LD_INT 49
30228: PUSH
30229: LD_INT 50
30231: PUSH
30232: LD_INT 51
30234: PUSH
30235: LD_INT 52
30237: PUSH
30238: LD_INT 53
30240: PUSH
30241: LD_INT 54
30243: PUSH
30244: LD_INT 55
30246: PUSH
30247: LD_INT 56
30249: PUSH
30250: LD_INT 57
30252: PUSH
30253: LD_INT 58
30255: PUSH
30256: LD_INT 59
30258: PUSH
30259: LD_INT 60
30261: PUSH
30262: LD_INT 61
30264: PUSH
30265: LD_INT 62
30267: PUSH
30268: LD_INT 80
30270: PUSH
30271: LD_INT 82
30273: PUSH
30274: LD_INT 83
30276: PUSH
30277: LD_INT 84
30279: PUSH
30280: LD_INT 85
30282: PUSH
30283: LD_INT 86
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
30339: GO 30806
30341: LD_INT 2
30343: DOUBLE
30344: EQUAL
30345: IFTRUE 30349
30347: GO 30575
30349: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_INT 35
30357: PUSH
30358: LD_INT 45
30360: PUSH
30361: LD_INT 46
30363: PUSH
30364: LD_INT 47
30366: PUSH
30367: LD_INT 82
30369: PUSH
30370: LD_INT 83
30372: PUSH
30373: LD_INT 84
30375: PUSH
30376: LD_INT 85
30378: PUSH
30379: LD_INT 87
30381: PUSH
30382: LD_INT 70
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 11
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 4
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: LD_INT 6
30402: PUSH
30403: LD_INT 15
30405: PUSH
30406: LD_INT 18
30408: PUSH
30409: LD_INT 7
30411: PUSH
30412: LD_INT 17
30414: PUSH
30415: LD_INT 8
30417: PUSH
30418: LD_INT 20
30420: PUSH
30421: LD_INT 21
30423: PUSH
30424: LD_INT 22
30426: PUSH
30427: LD_INT 72
30429: PUSH
30430: LD_INT 26
30432: PUSH
30433: LD_INT 69
30435: PUSH
30436: LD_INT 39
30438: PUSH
30439: LD_INT 40
30441: PUSH
30442: LD_INT 41
30444: PUSH
30445: LD_INT 42
30447: PUSH
30448: LD_INT 43
30450: PUSH
30451: LD_INT 48
30453: PUSH
30454: LD_INT 49
30456: PUSH
30457: LD_INT 50
30459: PUSH
30460: LD_INT 51
30462: PUSH
30463: LD_INT 52
30465: PUSH
30466: LD_INT 53
30468: PUSH
30469: LD_INT 54
30471: PUSH
30472: LD_INT 55
30474: PUSH
30475: LD_INT 56
30477: PUSH
30478: LD_INT 60
30480: PUSH
30481: LD_INT 61
30483: PUSH
30484: LD_INT 62
30486: PUSH
30487: LD_INT 66
30489: PUSH
30490: LD_INT 67
30492: PUSH
30493: LD_INT 68
30495: PUSH
30496: LD_INT 81
30498: PUSH
30499: LD_INT 82
30501: PUSH
30502: LD_INT 83
30504: PUSH
30505: LD_INT 84
30507: PUSH
30508: LD_INT 85
30510: PUSH
30511: LD_INT 87
30513: PUSH
30514: LD_INT 88
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: ST_TO_ADDR
30573: GO 30806
30575: LD_INT 3
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30805
30583: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30584: LD_ADDR_VAR 0 4
30588: PUSH
30589: LD_INT 46
30591: PUSH
30592: LD_INT 47
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 82
30603: PUSH
30604: LD_INT 83
30606: PUSH
30607: LD_INT 84
30609: PUSH
30610: LD_INT 85
30612: PUSH
30613: LD_INT 86
30615: PUSH
30616: LD_INT 11
30618: PUSH
30619: LD_INT 9
30621: PUSH
30622: LD_INT 20
30624: PUSH
30625: LD_INT 19
30627: PUSH
30628: LD_INT 21
30630: PUSH
30631: LD_INT 24
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 28
30642: PUSH
30643: LD_INT 29
30645: PUSH
30646: LD_INT 30
30648: PUSH
30649: LD_INT 31
30651: PUSH
30652: LD_INT 37
30654: PUSH
30655: LD_INT 38
30657: PUSH
30658: LD_INT 32
30660: PUSH
30661: LD_INT 27
30663: PUSH
30664: LD_INT 33
30666: PUSH
30667: LD_INT 69
30669: PUSH
30670: LD_INT 39
30672: PUSH
30673: LD_INT 34
30675: PUSH
30676: LD_INT 40
30678: PUSH
30679: LD_INT 71
30681: PUSH
30682: LD_INT 23
30684: PUSH
30685: LD_INT 44
30687: PUSH
30688: LD_INT 48
30690: PUSH
30691: LD_INT 49
30693: PUSH
30694: LD_INT 50
30696: PUSH
30697: LD_INT 51
30699: PUSH
30700: LD_INT 52
30702: PUSH
30703: LD_INT 53
30705: PUSH
30706: LD_INT 54
30708: PUSH
30709: LD_INT 55
30711: PUSH
30712: LD_INT 56
30714: PUSH
30715: LD_INT 57
30717: PUSH
30718: LD_INT 58
30720: PUSH
30721: LD_INT 59
30723: PUSH
30724: LD_INT 63
30726: PUSH
30727: LD_INT 64
30729: PUSH
30730: LD_INT 65
30732: PUSH
30733: LD_INT 82
30735: PUSH
30736: LD_INT 83
30738: PUSH
30739: LD_INT 84
30741: PUSH
30742: LD_INT 85
30744: PUSH
30745: LD_INT 86
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 30806
30805: POP
// if state > - 1 and state < 3 then
30806: LD_VAR 0 3
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: GREATER
30815: PUSH
30816: LD_VAR 0 3
30820: PUSH
30821: LD_INT 3
30823: LESS
30824: AND
30825: IFFALSE 30882
// for i in result do
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 4
30836: PUSH
30837: FOR_IN
30838: IFFALSE 30880
// if GetTech ( i , side ) <> state then
30840: LD_VAR 0 5
30844: PPUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 321
30854: PUSH
30855: LD_VAR 0 3
30859: NONEQUAL
30860: IFFALSE 30878
// result := result diff i ;
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_VAR 0 4
30871: PUSH
30872: LD_VAR 0 5
30876: DIFF
30877: ST_TO_ADDR
30878: GO 30837
30880: POP
30881: POP
// end ;
30882: LD_VAR 0 4
30886: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30887: LD_INT 0
30889: PPUSH
30890: PPUSH
30891: PPUSH
// result := true ;
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 1
30899: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30900: LD_ADDR_VAR 0 5
30904: PUSH
30905: LD_VAR 0 2
30909: PPUSH
30910: CALL_OW 480
30914: ST_TO_ADDR
// if not tmp then
30915: LD_VAR 0 5
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 30973
// for i in tmp do
30924: LD_ADDR_VAR 0 4
30928: PUSH
30929: LD_VAR 0 5
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30971
// if GetTech ( i , side ) <> state_researched then
30937: LD_VAR 0 4
30941: PPUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL_OW 321
30951: PUSH
30952: LD_INT 2
30954: NONEQUAL
30955: IFFALSE 30969
// begin result := false ;
30957: LD_ADDR_VAR 0 3
30961: PUSH
30962: LD_INT 0
30964: ST_TO_ADDR
// exit ;
30965: POP
30966: POP
30967: GO 30973
// end ;
30969: GO 30934
30971: POP
30972: POP
// end ;
30973: LD_VAR 0 3
30977: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30978: LD_INT 0
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30993: LD_VAR 0 1
30997: NOT
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: CALL_OW 257
31008: PUSH
31009: LD_INT 9
31011: NONEQUAL
31012: OR
31013: IFFALSE 31017
// exit ;
31015: GO 31590
// side := GetSide ( unit ) ;
31017: LD_ADDR_VAR 0 9
31021: PUSH
31022: LD_VAR 0 1
31026: PPUSH
31027: CALL_OW 255
31031: ST_TO_ADDR
// tech_space := tech_spacanom ;
31032: LD_ADDR_VAR 0 12
31036: PUSH
31037: LD_INT 29
31039: ST_TO_ADDR
// tech_time := tech_taurad ;
31040: LD_ADDR_VAR 0 13
31044: PUSH
31045: LD_INT 28
31047: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31048: LD_ADDR_VAR 0 11
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 310
31062: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31063: LD_VAR 0 11
31067: PPUSH
31068: CALL_OW 247
31072: PUSH
31073: LD_INT 2
31075: EQUAL
31076: IFFALSE 31080
// exit ;
31078: GO 31590
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31080: LD_ADDR_VAR 0 8
31084: PUSH
31085: LD_INT 81
31087: PUSH
31088: LD_VAR 0 9
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 3
31099: PUSH
31100: LD_INT 21
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PPUSH
31118: CALL_OW 69
31122: ST_TO_ADDR
// if not tmp then
31123: LD_VAR 0 8
31127: NOT
31128: IFFALSE 31132
// exit ;
31130: GO 31590
// if in_unit then
31132: LD_VAR 0 11
31136: IFFALSE 31160
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31138: LD_ADDR_VAR 0 10
31142: PUSH
31143: LD_VAR 0 8
31147: PPUSH
31148: LD_VAR 0 11
31152: PPUSH
31153: CALL_OW 74
31157: ST_TO_ADDR
31158: GO 31180
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31160: LD_ADDR_VAR 0 10
31164: PUSH
31165: LD_VAR 0 8
31169: PPUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 74
31179: ST_TO_ADDR
// if not enemy then
31180: LD_VAR 0 10
31184: NOT
31185: IFFALSE 31189
// exit ;
31187: GO 31590
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31189: LD_VAR 0 11
31193: PUSH
31194: LD_VAR 0 11
31198: PPUSH
31199: LD_VAR 0 10
31203: PPUSH
31204: CALL_OW 296
31208: PUSH
31209: LD_INT 13
31211: GREATER
31212: AND
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: LD_VAR 0 10
31223: PPUSH
31224: CALL_OW 296
31228: PUSH
31229: LD_INT 12
31231: GREATER
31232: OR
31233: IFFALSE 31237
// exit ;
31235: GO 31590
// missile := [ 1 ] ;
31237: LD_ADDR_VAR 0 14
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31248: LD_VAR 0 9
31252: PPUSH
31253: LD_VAR 0 12
31257: PPUSH
31258: CALL_OW 325
31262: IFFALSE 31291
// missile := Replace ( missile , missile + 1 , 2 ) ;
31264: LD_ADDR_VAR 0 14
31268: PUSH
31269: LD_VAR 0 14
31273: PPUSH
31274: LD_VAR 0 14
31278: PUSH
31279: LD_INT 1
31281: PLUS
31282: PPUSH
31283: LD_INT 2
31285: PPUSH
31286: CALL_OW 1
31290: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31291: LD_VAR 0 9
31295: PPUSH
31296: LD_VAR 0 13
31300: PPUSH
31301: CALL_OW 325
31305: PUSH
31306: LD_VAR 0 10
31310: PPUSH
31311: CALL_OW 255
31315: PPUSH
31316: LD_VAR 0 13
31320: PPUSH
31321: CALL_OW 325
31325: NOT
31326: AND
31327: IFFALSE 31356
// missile := Replace ( missile , missile + 1 , 3 ) ;
31329: LD_ADDR_VAR 0 14
31333: PUSH
31334: LD_VAR 0 14
31338: PPUSH
31339: LD_VAR 0 14
31343: PUSH
31344: LD_INT 1
31346: PLUS
31347: PPUSH
31348: LD_INT 3
31350: PPUSH
31351: CALL_OW 1
31355: ST_TO_ADDR
// if missile < 2 then
31356: LD_VAR 0 14
31360: PUSH
31361: LD_INT 2
31363: LESS
31364: IFFALSE 31368
// exit ;
31366: GO 31590
// x := GetX ( enemy ) ;
31368: LD_ADDR_VAR 0 4
31372: PUSH
31373: LD_VAR 0 10
31377: PPUSH
31378: CALL_OW 250
31382: ST_TO_ADDR
// y := GetY ( enemy ) ;
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_VAR 0 10
31392: PPUSH
31393: CALL_OW 251
31397: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31398: LD_ADDR_VAR 0 6
31402: PUSH
31403: LD_VAR 0 4
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PPUSH
31412: LD_INT 1
31414: PPUSH
31415: CALL_OW 12
31419: PLUS
31420: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31421: LD_ADDR_VAR 0 7
31425: PUSH
31426: LD_VAR 0 5
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PPUSH
31435: LD_INT 1
31437: PPUSH
31438: CALL_OW 12
31442: PLUS
31443: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31444: LD_VAR 0 6
31448: PPUSH
31449: LD_VAR 0 7
31453: PPUSH
31454: CALL_OW 488
31458: NOT
31459: IFFALSE 31481
// begin _x := x ;
31461: LD_ADDR_VAR 0 6
31465: PUSH
31466: LD_VAR 0 4
31470: ST_TO_ADDR
// _y := y ;
31471: LD_ADDR_VAR 0 7
31475: PUSH
31476: LD_VAR 0 5
31480: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_INT 1
31488: PPUSH
31489: LD_VAR 0 14
31493: PPUSH
31494: CALL_OW 12
31498: ST_TO_ADDR
// case i of 1 :
31499: LD_VAR 0 3
31503: PUSH
31504: LD_INT 1
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31529
31512: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31513: LD_VAR 0 1
31517: PPUSH
31518: LD_VAR 0 10
31522: PPUSH
31523: CALL_OW 115
31527: GO 31590
31529: LD_INT 2
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31559
31537: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31538: LD_VAR 0 1
31542: PPUSH
31543: LD_VAR 0 6
31547: PPUSH
31548: LD_VAR 0 7
31552: PPUSH
31553: CALL_OW 153
31557: GO 31590
31559: LD_INT 3
31561: DOUBLE
31562: EQUAL
31563: IFTRUE 31567
31565: GO 31589
31567: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31568: LD_VAR 0 1
31572: PPUSH
31573: LD_VAR 0 6
31577: PPUSH
31578: LD_VAR 0 7
31582: PPUSH
31583: CALL_OW 154
31587: GO 31590
31589: POP
// end ;
31590: LD_VAR 0 2
31594: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31595: LD_INT 0
31597: PPUSH
31598: PPUSH
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
// if not unit or not building then
31603: LD_VAR 0 1
31607: NOT
31608: PUSH
31609: LD_VAR 0 2
31613: NOT
31614: OR
31615: IFFALSE 31619
// exit ;
31617: GO 31777
// x := GetX ( building ) ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 2
31628: PPUSH
31629: CALL_OW 250
31633: ST_TO_ADDR
// y := GetY ( building ) ;
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: LD_VAR 0 2
31643: PPUSH
31644: CALL_OW 251
31648: ST_TO_ADDR
// for i = 0 to 5 do
31649: LD_ADDR_VAR 0 4
31653: PUSH
31654: DOUBLE
31655: LD_INT 0
31657: DEC
31658: ST_TO_ADDR
31659: LD_INT 5
31661: PUSH
31662: FOR_TO
31663: IFFALSE 31775
// begin _x := ShiftX ( x , i , 3 ) ;
31665: LD_ADDR_VAR 0 7
31669: PUSH
31670: LD_VAR 0 5
31674: PPUSH
31675: LD_VAR 0 4
31679: PPUSH
31680: LD_INT 3
31682: PPUSH
31683: CALL_OW 272
31687: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31688: LD_ADDR_VAR 0 8
31692: PUSH
31693: LD_VAR 0 6
31697: PPUSH
31698: LD_VAR 0 4
31702: PPUSH
31703: LD_INT 3
31705: PPUSH
31706: CALL_OW 273
31710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31711: LD_VAR 0 7
31715: PPUSH
31716: LD_VAR 0 8
31720: PPUSH
31721: CALL_OW 488
31725: NOT
31726: IFFALSE 31730
// continue ;
31728: GO 31662
// if HexInfo ( _x , _y ) = 0 then
31730: LD_VAR 0 7
31734: PPUSH
31735: LD_VAR 0 8
31739: PPUSH
31740: CALL_OW 428
31744: PUSH
31745: LD_INT 0
31747: EQUAL
31748: IFFALSE 31773
// begin ComMoveXY ( unit , _x , _y ) ;
31750: LD_VAR 0 1
31754: PPUSH
31755: LD_VAR 0 7
31759: PPUSH
31760: LD_VAR 0 8
31764: PPUSH
31765: CALL_OW 111
// exit ;
31769: POP
31770: POP
31771: GO 31777
// end ; end ;
31773: GO 31662
31775: POP
31776: POP
// end ;
31777: LD_VAR 0 3
31781: RET
// export function ScanBase ( side , base_area ) ; begin
31782: LD_INT 0
31784: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_VAR 0 2
31794: PPUSH
31795: LD_INT 81
31797: PUSH
31798: LD_VAR 0 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PPUSH
31807: CALL_OW 70
31811: ST_TO_ADDR
// end ;
31812: LD_VAR 0 3
31816: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
31821: PPUSH
31822: PPUSH
// result := false ;
31823: LD_ADDR_VAR 0 2
31827: PUSH
31828: LD_INT 0
31830: ST_TO_ADDR
// side := GetSide ( unit ) ;
31831: LD_ADDR_VAR 0 3
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 255
31845: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31846: LD_ADDR_VAR 0 4
31850: PUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 248
31860: ST_TO_ADDR
// case nat of 1 :
31861: LD_VAR 0 4
31865: PUSH
31866: LD_INT 1
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31885
31874: POP
// tech := tech_lassight ; 2 :
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_INT 12
31882: ST_TO_ADDR
31883: GO 31924
31885: LD_INT 2
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31904
31893: POP
// tech := tech_mortar ; 3 :
31894: LD_ADDR_VAR 0 5
31898: PUSH
31899: LD_INT 41
31901: ST_TO_ADDR
31902: GO 31924
31904: LD_INT 3
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31923
31912: POP
// tech := tech_bazooka ; end ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_INT 44
31920: ST_TO_ADDR
31921: GO 31924
31923: POP
// if Researched ( side , tech ) then
31924: LD_VAR 0 3
31928: PPUSH
31929: LD_VAR 0 5
31933: PPUSH
31934: CALL_OW 325
31938: IFFALSE 31965
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: LD_INT 5
31947: PUSH
31948: LD_INT 8
31950: PUSH
31951: LD_INT 9
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: PUSH
31959: LD_VAR 0 4
31963: ARRAY
31964: ST_TO_ADDR
// end ;
31965: LD_VAR 0 2
31969: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31970: LD_INT 0
31972: PPUSH
31973: PPUSH
31974: PPUSH
// if not mines then
31975: LD_VAR 0 2
31979: NOT
31980: IFFALSE 31984
// exit ;
31982: GO 32128
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31984: LD_ADDR_VAR 0 5
31988: PUSH
31989: LD_INT 81
31991: PUSH
31992: LD_VAR 0 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 21
32006: PUSH
32007: LD_INT 3
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PPUSH
32022: CALL_OW 69
32026: ST_TO_ADDR
// for i in mines do
32027: LD_ADDR_VAR 0 4
32031: PUSH
32032: LD_VAR 0 2
32036: PUSH
32037: FOR_IN
32038: IFFALSE 32126
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32040: LD_VAR 0 4
32044: PUSH
32045: LD_INT 1
32047: ARRAY
32048: PPUSH
32049: LD_VAR 0 4
32053: PUSH
32054: LD_INT 2
32056: ARRAY
32057: PPUSH
32058: CALL_OW 458
32062: NOT
32063: IFFALSE 32067
// continue ;
32065: GO 32037
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32067: LD_VAR 0 4
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: PPUSH
32076: LD_VAR 0 4
32080: PUSH
32081: LD_INT 2
32083: ARRAY
32084: PPUSH
32085: CALL_OW 428
32089: PUSH
32090: LD_VAR 0 5
32094: IN
32095: IFFALSE 32124
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32097: LD_VAR 0 4
32101: PUSH
32102: LD_INT 1
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 4
32110: PUSH
32111: LD_INT 2
32113: ARRAY
32114: PPUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 456
// end ;
32124: GO 32037
32126: POP
32127: POP
// end ;
32128: LD_VAR 0 3
32132: RET
// export function Count ( array ) ; var i ; begin
32133: LD_INT 0
32135: PPUSH
32136: PPUSH
// result := 0 ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_INT 0
32144: ST_TO_ADDR
// for i in array do
32145: LD_ADDR_VAR 0 3
32149: PUSH
32150: LD_VAR 0 1
32154: PUSH
32155: FOR_IN
32156: IFFALSE 32180
// if i then
32158: LD_VAR 0 3
32162: IFFALSE 32178
// result := result + 1 ;
32164: LD_ADDR_VAR 0 2
32168: PUSH
32169: LD_VAR 0 2
32173: PUSH
32174: LD_INT 1
32176: PLUS
32177: ST_TO_ADDR
32178: GO 32155
32180: POP
32181: POP
// end ;
32182: LD_VAR 0 2
32186: RET
// export function IsEmpty ( building ) ; begin
32187: LD_INT 0
32189: PPUSH
// if not building then
32190: LD_VAR 0 1
32194: NOT
32195: IFFALSE 32199
// exit ;
32197: GO 32242
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32199: LD_ADDR_VAR 0 2
32203: PUSH
32204: LD_VAR 0 1
32208: PUSH
32209: LD_INT 22
32211: PUSH
32212: LD_VAR 0 1
32216: PPUSH
32217: CALL_OW 255
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 58
32228: PUSH
32229: EMPTY
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL_OW 69
32240: IN
32241: ST_TO_ADDR
// end ;
32242: LD_VAR 0 2
32246: RET
// export function IsNotFull ( building ) ; var places ; begin
32247: LD_INT 0
32249: PPUSH
32250: PPUSH
// if not building then
32251: LD_VAR 0 1
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32431
// result := false ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: LD_INT 0
32267: ST_TO_ADDR
// places := 0 ;
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_INT 0
32275: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32276: LD_VAR 0 1
32280: PPUSH
32281: CALL_OW 266
32285: PUSH
32286: LD_INT 0
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32348
32292: LD_INT 1
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32348
32298: LD_INT 6
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32348
32304: LD_INT 7
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32348
32310: LD_INT 8
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32348
32316: LD_INT 4
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32348
32322: LD_INT 5
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32348
32328: LD_INT 2
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32348
32334: LD_INT 3
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32348
32340: LD_INT 35
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32348
32346: GO 32359
32348: POP
// places := 6 ; b_bunker , b_breastwork :
32349: LD_ADDR_VAR 0 3
32353: PUSH
32354: LD_INT 6
32356: ST_TO_ADDR
32357: GO 32404
32359: LD_INT 32
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32373
32365: LD_INT 31
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32384
32373: POP
// places := 1 ; b_control_tower :
32374: LD_ADDR_VAR 0 3
32378: PUSH
32379: LD_INT 1
32381: ST_TO_ADDR
32382: GO 32404
32384: LD_INT 36
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32403
32392: POP
// places := 3 ; end ;
32393: LD_ADDR_VAR 0 3
32397: PUSH
32398: LD_INT 3
32400: ST_TO_ADDR
32401: GO 32404
32403: POP
// if places then
32404: LD_VAR 0 3
32408: IFFALSE 32431
// result := UnitsInside ( building ) < places ;
32410: LD_ADDR_VAR 0 2
32414: PUSH
32415: LD_VAR 0 1
32419: PPUSH
32420: CALL_OW 313
32424: PUSH
32425: LD_VAR 0 3
32429: LESS
32430: ST_TO_ADDR
// end ;
32431: LD_VAR 0 2
32435: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32436: LD_INT 0
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
// tmp := [ ] ;
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: EMPTY
32448: ST_TO_ADDR
// list := [ ] ;
32449: LD_ADDR_VAR 0 5
32453: PUSH
32454: EMPTY
32455: ST_TO_ADDR
// for i = 16 to 25 do
32456: LD_ADDR_VAR 0 4
32460: PUSH
32461: DOUBLE
32462: LD_INT 16
32464: DEC
32465: ST_TO_ADDR
32466: LD_INT 25
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32543
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32472: LD_ADDR_VAR 0 3
32476: PUSH
32477: LD_VAR 0 3
32481: PUSH
32482: LD_INT 22
32484: PUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: CALL_OW 255
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 91
32501: PUSH
32502: LD_VAR 0 1
32506: PUSH
32507: LD_INT 6
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 30
32517: PUSH
32518: LD_VAR 0 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: PPUSH
32535: CALL_OW 69
32539: ADD
32540: ST_TO_ADDR
32541: GO 32469
32543: POP
32544: POP
// for i = 1 to tmp do
32545: LD_ADDR_VAR 0 4
32549: PUSH
32550: DOUBLE
32551: LD_INT 1
32553: DEC
32554: ST_TO_ADDR
32555: LD_VAR 0 3
32559: PUSH
32560: FOR_TO
32561: IFFALSE 32649
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32563: LD_ADDR_VAR 0 5
32567: PUSH
32568: LD_VAR 0 5
32572: PUSH
32573: LD_VAR 0 3
32577: PUSH
32578: LD_VAR 0 4
32582: ARRAY
32583: PPUSH
32584: CALL_OW 266
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_VAR 0 4
32598: ARRAY
32599: PPUSH
32600: CALL_OW 250
32604: PUSH
32605: LD_VAR 0 3
32609: PUSH
32610: LD_VAR 0 4
32614: ARRAY
32615: PPUSH
32616: CALL_OW 251
32620: PUSH
32621: LD_VAR 0 3
32625: PUSH
32626: LD_VAR 0 4
32630: ARRAY
32631: PPUSH
32632: CALL_OW 254
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: ADD
32646: ST_TO_ADDR
32647: GO 32560
32649: POP
32650: POP
// result := list ;
32651: LD_ADDR_VAR 0 2
32655: PUSH
32656: LD_VAR 0 5
32660: ST_TO_ADDR
// end ;
32661: LD_VAR 0 2
32665: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
32673: PPUSH
32674: PPUSH
// if not factory then
32675: LD_VAR 0 1
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 33277
// if control = control_apeman then
32684: LD_VAR 0 4
32688: PUSH
32689: LD_INT 5
32691: EQUAL
32692: IFFALSE 32801
// begin tmp := UnitsInside ( factory ) ;
32694: LD_ADDR_VAR 0 8
32698: PUSH
32699: LD_VAR 0 1
32703: PPUSH
32704: CALL_OW 313
32708: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32709: LD_VAR 0 8
32713: PPUSH
32714: LD_INT 25
32716: PUSH
32717: LD_INT 12
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 72
32728: NOT
32729: IFFALSE 32739
// control := control_manual ;
32731: LD_ADDR_VAR 0 4
32735: PUSH
32736: LD_INT 1
32738: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32739: LD_ADDR_VAR 0 8
32743: PUSH
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL 32436 0 1
32753: ST_TO_ADDR
// if tmp then
32754: LD_VAR 0 8
32758: IFFALSE 32801
// begin for i in tmp do
32760: LD_ADDR_VAR 0 7
32764: PUSH
32765: LD_VAR 0 8
32769: PUSH
32770: FOR_IN
32771: IFFALSE 32799
// if i [ 1 ] = b_ext_radio then
32773: LD_VAR 0 7
32777: PUSH
32778: LD_INT 1
32780: ARRAY
32781: PUSH
32782: LD_INT 22
32784: EQUAL
32785: IFFALSE 32797
// begin control := control_remote ;
32787: LD_ADDR_VAR 0 4
32791: PUSH
32792: LD_INT 2
32794: ST_TO_ADDR
// break ;
32795: GO 32799
// end ;
32797: GO 32770
32799: POP
32800: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32801: LD_VAR 0 1
32805: PPUSH
32806: LD_VAR 0 2
32810: PPUSH
32811: LD_VAR 0 3
32815: PPUSH
32816: LD_VAR 0 4
32820: PPUSH
32821: LD_VAR 0 5
32825: PPUSH
32826: CALL_OW 448
32830: IFFALSE 32865
// begin result := [ chassis , engine , control , weapon ] ;
32832: LD_ADDR_VAR 0 6
32836: PUSH
32837: LD_VAR 0 2
32841: PUSH
32842: LD_VAR 0 3
32846: PUSH
32847: LD_VAR 0 4
32851: PUSH
32852: LD_VAR 0 5
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
// exit ;
32863: GO 33277
// end ; _chassis := AvailableChassisList ( factory ) ;
32865: LD_ADDR_VAR 0 9
32869: PUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 475
32879: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32880: LD_ADDR_VAR 0 11
32884: PUSH
32885: LD_VAR 0 1
32889: PPUSH
32890: CALL_OW 476
32894: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32895: LD_ADDR_VAR 0 12
32899: PUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 477
32909: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32910: LD_ADDR_VAR 0 10
32914: PUSH
32915: LD_VAR 0 1
32919: PPUSH
32920: CALL_OW 478
32924: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32925: LD_VAR 0 9
32929: NOT
32930: PUSH
32931: LD_VAR 0 11
32935: NOT
32936: OR
32937: PUSH
32938: LD_VAR 0 12
32942: NOT
32943: OR
32944: PUSH
32945: LD_VAR 0 10
32949: NOT
32950: OR
32951: IFFALSE 32986
// begin result := [ chassis , engine , control , weapon ] ;
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: LD_VAR 0 2
32962: PUSH
32963: LD_VAR 0 3
32967: PUSH
32968: LD_VAR 0 4
32972: PUSH
32973: LD_VAR 0 5
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
// exit ;
32984: GO 33277
// end ; if not chassis in _chassis then
32986: LD_VAR 0 2
32990: PUSH
32991: LD_VAR 0 9
32995: IN
32996: NOT
32997: IFFALSE 33023
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32999: LD_ADDR_VAR 0 2
33003: PUSH
33004: LD_VAR 0 9
33008: PUSH
33009: LD_INT 1
33011: PPUSH
33012: LD_VAR 0 9
33016: PPUSH
33017: CALL_OW 12
33021: ARRAY
33022: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33023: LD_VAR 0 2
33027: PPUSH
33028: LD_VAR 0 3
33032: PPUSH
33033: CALL 33282 0 2
33037: NOT
33038: IFFALSE 33097
// repeat engine := _engine [ 1 ] ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_VAR 0 11
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33054: LD_ADDR_VAR 0 11
33058: PUSH
33059: LD_VAR 0 11
33063: PPUSH
33064: LD_INT 1
33066: PPUSH
33067: CALL_OW 3
33071: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33072: LD_VAR 0 2
33076: PPUSH
33077: LD_VAR 0 3
33081: PPUSH
33082: CALL 33282 0 2
33086: PUSH
33087: LD_VAR 0 11
33091: PUSH
33092: EMPTY
33093: EQUAL
33094: OR
33095: IFFALSE 33040
// if not control in _control then
33097: LD_VAR 0 4
33101: PUSH
33102: LD_VAR 0 12
33106: IN
33107: NOT
33108: IFFALSE 33134
// control := _control [ rand ( 1 , _control ) ] ;
33110: LD_ADDR_VAR 0 4
33114: PUSH
33115: LD_VAR 0 12
33119: PUSH
33120: LD_INT 1
33122: PPUSH
33123: LD_VAR 0 12
33127: PPUSH
33128: CALL_OW 12
33132: ARRAY
33133: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33134: LD_VAR 0 2
33138: PPUSH
33139: LD_VAR 0 5
33143: PPUSH
33144: CALL 33502 0 2
33148: NOT
33149: IFFALSE 33208
// repeat weapon := _weapon [ 1 ] ;
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_VAR 0 10
33160: PUSH
33161: LD_INT 1
33163: ARRAY
33164: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33165: LD_ADDR_VAR 0 10
33169: PUSH
33170: LD_VAR 0 10
33174: PPUSH
33175: LD_INT 1
33177: PPUSH
33178: CALL_OW 3
33182: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_VAR 0 5
33192: PPUSH
33193: CALL 33502 0 2
33197: PUSH
33198: LD_VAR 0 10
33202: PUSH
33203: EMPTY
33204: EQUAL
33205: OR
33206: IFFALSE 33151
// result := [ ] ;
33208: LD_ADDR_VAR 0 6
33212: PUSH
33213: EMPTY
33214: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33215: LD_VAR 0 1
33219: PPUSH
33220: LD_VAR 0 2
33224: PPUSH
33225: LD_VAR 0 3
33229: PPUSH
33230: LD_VAR 0 4
33234: PPUSH
33235: LD_VAR 0 5
33239: PPUSH
33240: CALL_OW 448
33244: IFFALSE 33277
// result := [ chassis , engine , control , weapon ] ;
33246: LD_ADDR_VAR 0 6
33250: PUSH
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 3
33260: PUSH
33261: LD_VAR 0 4
33265: PUSH
33266: LD_VAR 0 5
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
// end ;
33277: LD_VAR 0 6
33281: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33282: LD_INT 0
33284: PPUSH
// if not chassis or not engine then
33285: LD_VAR 0 1
33289: NOT
33290: PUSH
33291: LD_VAR 0 2
33295: NOT
33296: OR
33297: IFFALSE 33301
// exit ;
33299: GO 33497
// case engine of engine_solar :
33301: LD_VAR 0 2
33305: PUSH
33306: LD_INT 2
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33352
33314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_INT 11
33322: PUSH
33323: LD_INT 12
33325: PUSH
33326: LD_INT 13
33328: PUSH
33329: LD_INT 14
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 33481
33352: LD_INT 1
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33422
33360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 11
33368: PUSH
33369: LD_INT 12
33371: PUSH
33372: LD_INT 13
33374: PUSH
33375: LD_INT 14
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: LD_INT 5
33392: PUSH
33393: LD_INT 21
33395: PUSH
33396: LD_INT 23
33398: PUSH
33399: LD_INT 22
33401: PUSH
33402: LD_INT 24
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 33481
33422: LD_INT 3
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33480
33430: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 13
33438: PUSH
33439: LD_INT 14
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: LD_INT 21
33456: PUSH
33457: LD_INT 22
33459: PUSH
33460: LD_INT 23
33462: PUSH
33463: LD_INT 24
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
33478: GO 33481
33480: POP
// result := ( chassis in result ) ;
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_VAR 0 1
33490: PUSH
33491: LD_VAR 0 3
33495: IN
33496: ST_TO_ADDR
// end ;
33497: LD_VAR 0 3
33501: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33502: LD_INT 0
33504: PPUSH
// if not chassis or not weapon then
33505: LD_VAR 0 1
33509: NOT
33510: PUSH
33511: LD_VAR 0 2
33515: NOT
33516: OR
33517: IFFALSE 33521
// exit ;
33519: GO 34581
// case weapon of us_machine_gun :
33521: LD_VAR 0 2
33525: PUSH
33526: LD_INT 2
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33534
33532: GO 33564
33534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33535: LD_ADDR_VAR 0 3
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: LD_INT 4
33551: PUSH
33552: LD_INT 5
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
33562: GO 34565
33564: LD_INT 3
33566: DOUBLE
33567: EQUAL
33568: IFTRUE 33572
33570: GO 33602
33572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33573: LD_ADDR_VAR 0 3
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: LD_INT 5
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 34565
33602: LD_INT 11
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33640
33610: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 4
33627: PUSH
33628: LD_INT 5
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
33638: GO 34565
33640: LD_INT 4
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33674
33648: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
33672: GO 34565
33674: LD_INT 5
33676: DOUBLE
33677: EQUAL
33678: IFTRUE 33682
33680: GO 33708
33682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 4
33696: PUSH
33697: LD_INT 5
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: ST_TO_ADDR
33706: GO 34565
33708: LD_INT 9
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33716
33714: GO 33742
33716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
33740: GO 34565
33742: LD_INT 7
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33776
33750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
33774: GO 34565
33776: LD_INT 12
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33784
33782: GO 33810
33784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33785: LD_ADDR_VAR 0 3
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 5
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34565
33810: LD_INT 13
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: LD_INT 5
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 34565
33844: LD_INT 14
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33870
33852: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 4
33860: PUSH
33861: LD_INT 5
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 34565
33870: LD_INT 6
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33896
33878: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33879: LD_ADDR_VAR 0 3
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: LD_INT 5
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: ST_TO_ADDR
33894: GO 34565
33896: LD_INT 10
33898: DOUBLE
33899: EQUAL
33900: IFTRUE 33904
33902: GO 33922
33904: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33905: LD_ADDR_VAR 0 3
33909: PUSH
33910: LD_INT 4
33912: PUSH
33913: LD_INT 5
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: ST_TO_ADDR
33920: GO 34565
33922: LD_INT 22
33924: DOUBLE
33925: EQUAL
33926: IFTRUE 33930
33928: GO 33956
33930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_INT 11
33938: PUSH
33939: LD_INT 12
33941: PUSH
33942: LD_INT 13
33944: PUSH
33945: LD_INT 14
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
33954: GO 34565
33956: LD_INT 23
33958: DOUBLE
33959: EQUAL
33960: IFTRUE 33964
33962: GO 33990
33964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33965: LD_ADDR_VAR 0 3
33969: PUSH
33970: LD_INT 11
33972: PUSH
33973: LD_INT 12
33975: PUSH
33976: LD_INT 13
33978: PUSH
33979: LD_INT 14
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
33988: GO 34565
33990: LD_INT 24
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34024
33998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_INT 11
34006: PUSH
34007: LD_INT 12
34009: PUSH
34010: LD_INT 13
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
34022: GO 34565
34024: LD_INT 30
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34058
34032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 11
34040: PUSH
34041: LD_INT 12
34043: PUSH
34044: LD_INT 13
34046: PUSH
34047: LD_INT 14
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34565
34058: LD_INT 25
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34084
34066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 13
34074: PUSH
34075: LD_INT 14
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34565
34084: LD_INT 27
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34110
34092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: ST_TO_ADDR
34108: GO 34565
34110: LD_INT 92
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34144
34118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 11
34126: PUSH
34127: LD_INT 12
34129: PUSH
34130: LD_INT 13
34132: PUSH
34133: LD_INT 14
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: ST_TO_ADDR
34142: GO 34565
34144: LD_INT 28
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34152
34150: GO 34170
34152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34153: LD_ADDR_VAR 0 3
34157: PUSH
34158: LD_INT 13
34160: PUSH
34161: LD_INT 14
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: ST_TO_ADDR
34168: GO 34565
34170: LD_INT 29
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34196
34178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34179: LD_ADDR_VAR 0 3
34183: PUSH
34184: LD_INT 13
34186: PUSH
34187: LD_INT 14
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: ST_TO_ADDR
34194: GO 34565
34196: LD_INT 31
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34204
34202: GO 34222
34204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_INT 13
34212: PUSH
34213: LD_INT 14
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: ST_TO_ADDR
34220: GO 34565
34222: LD_INT 26
34224: DOUBLE
34225: EQUAL
34226: IFTRUE 34230
34228: GO 34248
34230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34231: LD_ADDR_VAR 0 3
34235: PUSH
34236: LD_INT 13
34238: PUSH
34239: LD_INT 14
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: ST_TO_ADDR
34246: GO 34565
34248: LD_INT 42
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34282
34256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34257: LD_ADDR_VAR 0 3
34261: PUSH
34262: LD_INT 21
34264: PUSH
34265: LD_INT 22
34267: PUSH
34268: LD_INT 23
34270: PUSH
34271: LD_INT 24
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 34565
34282: LD_INT 43
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34316
34290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_INT 21
34298: PUSH
34299: LD_INT 22
34301: PUSH
34302: LD_INT 23
34304: PUSH
34305: LD_INT 24
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: ST_TO_ADDR
34314: GO 34565
34316: LD_INT 44
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34350
34324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 21
34332: PUSH
34333: LD_INT 22
34335: PUSH
34336: LD_INT 23
34338: PUSH
34339: LD_INT 24
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
34348: GO 34565
34350: LD_INT 45
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34384
34358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_INT 21
34366: PUSH
34367: LD_INT 22
34369: PUSH
34370: LD_INT 23
34372: PUSH
34373: LD_INT 24
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
34382: GO 34565
34384: LD_INT 49
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34418
34392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 21
34400: PUSH
34401: LD_INT 22
34403: PUSH
34404: LD_INT 23
34406: PUSH
34407: LD_INT 24
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 34565
34418: LD_INT 51
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 21
34434: PUSH
34435: LD_INT 22
34437: PUSH
34438: LD_INT 23
34440: PUSH
34441: LD_INT 24
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34565
34452: LD_INT 52
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34486
34460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 22
34471: PUSH
34472: LD_INT 23
34474: PUSH
34475: LD_INT 24
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
34484: GO 34565
34486: LD_INT 53
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34512
34494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 23
34502: PUSH
34503: LD_INT 24
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: ST_TO_ADDR
34510: GO 34565
34512: LD_INT 46
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34538
34520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_INT 23
34528: PUSH
34529: LD_INT 24
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: ST_TO_ADDR
34536: GO 34565
34538: LD_INT 47
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34564
34546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 23
34554: PUSH
34555: LD_INT 24
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: ST_TO_ADDR
34562: GO 34565
34564: POP
// result := ( chassis in result ) ;
34565: LD_ADDR_VAR 0 3
34569: PUSH
34570: LD_VAR 0 1
34574: PUSH
34575: LD_VAR 0 3
34579: IN
34580: ST_TO_ADDR
// end ;
34581: LD_VAR 0 3
34585: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34586: LD_INT 0
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
// result := array ;
34595: LD_ADDR_VAR 0 5
34599: PUSH
34600: LD_VAR 0 1
34604: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34605: LD_VAR 0 1
34609: NOT
34610: PUSH
34611: LD_VAR 0 2
34615: NOT
34616: OR
34617: PUSH
34618: LD_VAR 0 3
34622: NOT
34623: OR
34624: PUSH
34625: LD_VAR 0 2
34629: PUSH
34630: LD_VAR 0 1
34634: GREATER
34635: OR
34636: PUSH
34637: LD_VAR 0 3
34641: PUSH
34642: LD_VAR 0 1
34646: GREATER
34647: OR
34648: IFFALSE 34652
// exit ;
34650: GO 34948
// if direction then
34652: LD_VAR 0 4
34656: IFFALSE 34720
// begin d := 1 ;
34658: LD_ADDR_VAR 0 9
34662: PUSH
34663: LD_INT 1
34665: ST_TO_ADDR
// if i_from > i_to then
34666: LD_VAR 0 2
34670: PUSH
34671: LD_VAR 0 3
34675: GREATER
34676: IFFALSE 34702
// length := ( array - i_from ) + i_to else
34678: LD_ADDR_VAR 0 11
34682: PUSH
34683: LD_VAR 0 1
34687: PUSH
34688: LD_VAR 0 2
34692: MINUS
34693: PUSH
34694: LD_VAR 0 3
34698: PLUS
34699: ST_TO_ADDR
34700: GO 34718
// length := i_to - i_from ;
34702: LD_ADDR_VAR 0 11
34706: PUSH
34707: LD_VAR 0 3
34711: PUSH
34712: LD_VAR 0 2
34716: MINUS
34717: ST_TO_ADDR
// end else
34718: GO 34781
// begin d := - 1 ;
34720: LD_ADDR_VAR 0 9
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: ST_TO_ADDR
// if i_from > i_to then
34729: LD_VAR 0 2
34733: PUSH
34734: LD_VAR 0 3
34738: GREATER
34739: IFFALSE 34759
// length := i_from - i_to else
34741: LD_ADDR_VAR 0 11
34745: PUSH
34746: LD_VAR 0 2
34750: PUSH
34751: LD_VAR 0 3
34755: MINUS
34756: ST_TO_ADDR
34757: GO 34781
// length := ( array - i_to ) + i_from ;
34759: LD_ADDR_VAR 0 11
34763: PUSH
34764: LD_VAR 0 1
34768: PUSH
34769: LD_VAR 0 3
34773: MINUS
34774: PUSH
34775: LD_VAR 0 2
34779: PLUS
34780: ST_TO_ADDR
// end ; if not length then
34781: LD_VAR 0 11
34785: NOT
34786: IFFALSE 34790
// exit ;
34788: GO 34948
// tmp := array ;
34790: LD_ADDR_VAR 0 10
34794: PUSH
34795: LD_VAR 0 1
34799: ST_TO_ADDR
// for i = 1 to length do
34800: LD_ADDR_VAR 0 6
34804: PUSH
34805: DOUBLE
34806: LD_INT 1
34808: DEC
34809: ST_TO_ADDR
34810: LD_VAR 0 11
34814: PUSH
34815: FOR_TO
34816: IFFALSE 34936
// begin for j = 1 to array do
34818: LD_ADDR_VAR 0 7
34822: PUSH
34823: DOUBLE
34824: LD_INT 1
34826: DEC
34827: ST_TO_ADDR
34828: LD_VAR 0 1
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34922
// begin k := j + d ;
34836: LD_ADDR_VAR 0 8
34840: PUSH
34841: LD_VAR 0 7
34845: PUSH
34846: LD_VAR 0 9
34850: PLUS
34851: ST_TO_ADDR
// if k > array then
34852: LD_VAR 0 8
34856: PUSH
34857: LD_VAR 0 1
34861: GREATER
34862: IFFALSE 34872
// k := 1 ;
34864: LD_ADDR_VAR 0 8
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// if not k then
34872: LD_VAR 0 8
34876: NOT
34877: IFFALSE 34889
// k := array ;
34879: LD_ADDR_VAR 0 8
34883: PUSH
34884: LD_VAR 0 1
34888: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34889: LD_ADDR_VAR 0 10
34893: PUSH
34894: LD_VAR 0 10
34898: PPUSH
34899: LD_VAR 0 8
34903: PPUSH
34904: LD_VAR 0 1
34908: PUSH
34909: LD_VAR 0 7
34913: ARRAY
34914: PPUSH
34915: CALL_OW 1
34919: ST_TO_ADDR
// end ;
34920: GO 34833
34922: POP
34923: POP
// array := tmp ;
34924: LD_ADDR_VAR 0 1
34928: PUSH
34929: LD_VAR 0 10
34933: ST_TO_ADDR
// end ;
34934: GO 34815
34936: POP
34937: POP
// result := array ;
34938: LD_ADDR_VAR 0 5
34942: PUSH
34943: LD_VAR 0 1
34947: ST_TO_ADDR
// end ;
34948: LD_VAR 0 5
34952: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34953: LD_INT 0
34955: PPUSH
34956: PPUSH
// result := 0 ;
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_INT 0
34964: ST_TO_ADDR
// if not array or not value in array then
34965: LD_VAR 0 1
34969: NOT
34970: PUSH
34971: LD_VAR 0 2
34975: PUSH
34976: LD_VAR 0 1
34980: IN
34981: NOT
34982: OR
34983: IFFALSE 34987
// exit ;
34985: GO 35041
// for i = 1 to array do
34987: LD_ADDR_VAR 0 4
34991: PUSH
34992: DOUBLE
34993: LD_INT 1
34995: DEC
34996: ST_TO_ADDR
34997: LD_VAR 0 1
35001: PUSH
35002: FOR_TO
35003: IFFALSE 35039
// if value = array [ i ] then
35005: LD_VAR 0 2
35009: PUSH
35010: LD_VAR 0 1
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: EQUAL
35021: IFFALSE 35037
// begin result := i ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 4
35032: ST_TO_ADDR
// exit ;
35033: POP
35034: POP
35035: GO 35041
// end ;
35037: GO 35002
35039: POP
35040: POP
// end ;
35041: LD_VAR 0 3
35045: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35046: LD_INT 0
35048: PPUSH
// vc_chassis := chassis ;
35049: LD_ADDR_OWVAR 37
35053: PUSH
35054: LD_VAR 0 1
35058: ST_TO_ADDR
// vc_engine := engine ;
35059: LD_ADDR_OWVAR 39
35063: PUSH
35064: LD_VAR 0 2
35068: ST_TO_ADDR
// vc_control := control ;
35069: LD_ADDR_OWVAR 38
35073: PUSH
35074: LD_VAR 0 3
35078: ST_TO_ADDR
// vc_weapon := weapon ;
35079: LD_ADDR_OWVAR 40
35083: PUSH
35084: LD_VAR 0 4
35088: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35089: LD_ADDR_OWVAR 41
35093: PUSH
35094: LD_VAR 0 5
35098: ST_TO_ADDR
// end ;
35099: LD_VAR 0 6
35103: RET
// export function WantPlant ( unit ) ; var task ; begin
35104: LD_INT 0
35106: PPUSH
35107: PPUSH
// result := false ;
35108: LD_ADDR_VAR 0 2
35112: PUSH
35113: LD_INT 0
35115: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 437
35130: ST_TO_ADDR
// if task then
35131: LD_VAR 0 3
35135: IFFALSE 35163
// if task [ 1 ] [ 1 ] = p then
35137: LD_VAR 0 3
35141: PUSH
35142: LD_INT 1
35144: ARRAY
35145: PUSH
35146: LD_INT 1
35148: ARRAY
35149: PUSH
35150: LD_STRING p
35152: EQUAL
35153: IFFALSE 35163
// result := true ;
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: LD_INT 1
35162: ST_TO_ADDR
// end ;
35163: LD_VAR 0 2
35167: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35168: LD_INT 0
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
// if pos < 1 then
35174: LD_VAR 0 2
35178: PUSH
35179: LD_INT 1
35181: LESS
35182: IFFALSE 35186
// exit ;
35184: GO 35489
// if pos = 1 then
35186: LD_VAR 0 2
35190: PUSH
35191: LD_INT 1
35193: EQUAL
35194: IFFALSE 35227
// result := Replace ( arr , pos [ 1 ] , value ) else
35196: LD_ADDR_VAR 0 4
35200: PUSH
35201: LD_VAR 0 1
35205: PPUSH
35206: LD_VAR 0 2
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: PPUSH
35215: LD_VAR 0 3
35219: PPUSH
35220: CALL_OW 1
35224: ST_TO_ADDR
35225: GO 35489
// begin tmp := arr ;
35227: LD_ADDR_VAR 0 6
35231: PUSH
35232: LD_VAR 0 1
35236: ST_TO_ADDR
// s_arr := [ tmp ] ;
35237: LD_ADDR_VAR 0 7
35241: PUSH
35242: LD_VAR 0 6
35246: PUSH
35247: EMPTY
35248: LIST
35249: ST_TO_ADDR
// for i = 1 to pos - 1 do
35250: LD_ADDR_VAR 0 5
35254: PUSH
35255: DOUBLE
35256: LD_INT 1
35258: DEC
35259: ST_TO_ADDR
35260: LD_VAR 0 2
35264: PUSH
35265: LD_INT 1
35267: MINUS
35268: PUSH
35269: FOR_TO
35270: IFFALSE 35315
// begin tmp := tmp [ pos [ i ] ] ;
35272: LD_ADDR_VAR 0 6
35276: PUSH
35277: LD_VAR 0 6
35281: PUSH
35282: LD_VAR 0 2
35286: PUSH
35287: LD_VAR 0 5
35291: ARRAY
35292: ARRAY
35293: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35294: LD_ADDR_VAR 0 7
35298: PUSH
35299: LD_VAR 0 7
35303: PUSH
35304: LD_VAR 0 6
35308: PUSH
35309: EMPTY
35310: LIST
35311: ADD
35312: ST_TO_ADDR
// end ;
35313: GO 35269
35315: POP
35316: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35317: LD_ADDR_VAR 0 6
35321: PUSH
35322: LD_VAR 0 6
35326: PPUSH
35327: LD_VAR 0 2
35331: PUSH
35332: LD_VAR 0 2
35336: ARRAY
35337: PPUSH
35338: LD_VAR 0 3
35342: PPUSH
35343: CALL_OW 1
35347: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35348: LD_ADDR_VAR 0 7
35352: PUSH
35353: LD_VAR 0 7
35357: PPUSH
35358: LD_VAR 0 7
35362: PPUSH
35363: LD_VAR 0 6
35367: PPUSH
35368: CALL_OW 1
35372: ST_TO_ADDR
// for i = s_arr downto 2 do
35373: LD_ADDR_VAR 0 5
35377: PUSH
35378: DOUBLE
35379: LD_VAR 0 7
35383: INC
35384: ST_TO_ADDR
35385: LD_INT 2
35387: PUSH
35388: FOR_DOWNTO
35389: IFFALSE 35473
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35391: LD_ADDR_VAR 0 6
35395: PUSH
35396: LD_VAR 0 7
35400: PUSH
35401: LD_VAR 0 5
35405: PUSH
35406: LD_INT 1
35408: MINUS
35409: ARRAY
35410: PPUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_VAR 0 5
35420: PUSH
35421: LD_INT 1
35423: MINUS
35424: ARRAY
35425: PPUSH
35426: LD_VAR 0 7
35430: PUSH
35431: LD_VAR 0 5
35435: ARRAY
35436: PPUSH
35437: CALL_OW 1
35441: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35442: LD_ADDR_VAR 0 7
35446: PUSH
35447: LD_VAR 0 7
35451: PPUSH
35452: LD_VAR 0 5
35456: PUSH
35457: LD_INT 1
35459: MINUS
35460: PPUSH
35461: LD_VAR 0 6
35465: PPUSH
35466: CALL_OW 1
35470: ST_TO_ADDR
// end ;
35471: GO 35388
35473: POP
35474: POP
// result := s_arr [ 1 ] ;
35475: LD_ADDR_VAR 0 4
35479: PUSH
35480: LD_VAR 0 7
35484: PUSH
35485: LD_INT 1
35487: ARRAY
35488: ST_TO_ADDR
// end ; end ;
35489: LD_VAR 0 4
35493: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35494: LD_INT 0
35496: PPUSH
35497: PPUSH
// if not list then
35498: LD_VAR 0 1
35502: NOT
35503: IFFALSE 35507
// exit ;
35505: GO 35598
// i := list [ pos1 ] ;
35507: LD_ADDR_VAR 0 5
35511: PUSH
35512: LD_VAR 0 1
35516: PUSH
35517: LD_VAR 0 2
35521: ARRAY
35522: ST_TO_ADDR
// if not i then
35523: LD_VAR 0 5
35527: NOT
35528: IFFALSE 35532
// exit ;
35530: GO 35598
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35532: LD_ADDR_VAR 0 1
35536: PUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: LD_VAR 0 2
35546: PPUSH
35547: LD_VAR 0 1
35551: PUSH
35552: LD_VAR 0 3
35556: ARRAY
35557: PPUSH
35558: CALL_OW 1
35562: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35563: LD_ADDR_VAR 0 1
35567: PUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: LD_VAR 0 3
35577: PPUSH
35578: LD_VAR 0 5
35582: PPUSH
35583: CALL_OW 1
35587: ST_TO_ADDR
// result := list ;
35588: LD_ADDR_VAR 0 4
35592: PUSH
35593: LD_VAR 0 1
35597: ST_TO_ADDR
// end ;
35598: LD_VAR 0 4
35602: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35603: LD_INT 0
35605: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35606: LD_ADDR_VAR 0 5
35610: PUSH
35611: LD_VAR 0 1
35615: PPUSH
35616: CALL_OW 250
35620: PPUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 251
35630: PPUSH
35631: LD_VAR 0 2
35635: PPUSH
35636: LD_VAR 0 3
35640: PPUSH
35641: LD_VAR 0 4
35645: PPUSH
35646: CALL 35656 0 5
35650: ST_TO_ADDR
// end ;
35651: LD_VAR 0 5
35655: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35656: LD_INT 0
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
// if not list then
35662: LD_VAR 0 3
35666: NOT
35667: IFFALSE 35671
// exit ;
35669: GO 36059
// result := [ ] ;
35671: LD_ADDR_VAR 0 6
35675: PUSH
35676: EMPTY
35677: ST_TO_ADDR
// for i in list do
35678: LD_ADDR_VAR 0 7
35682: PUSH
35683: LD_VAR 0 3
35687: PUSH
35688: FOR_IN
35689: IFFALSE 35891
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_VAR 0 7
35700: PPUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: LD_VAR 0 2
35710: PPUSH
35711: CALL_OW 297
35715: ST_TO_ADDR
// if not result then
35716: LD_VAR 0 6
35720: NOT
35721: IFFALSE 35747
// result := [ [ i , tmp ] ] else
35723: LD_ADDR_VAR 0 6
35727: PUSH
35728: LD_VAR 0 7
35732: PUSH
35733: LD_VAR 0 9
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: ST_TO_ADDR
35745: GO 35889
// begin if result [ result ] [ 2 ] < tmp then
35747: LD_VAR 0 6
35751: PUSH
35752: LD_VAR 0 6
35756: ARRAY
35757: PUSH
35758: LD_INT 2
35760: ARRAY
35761: PUSH
35762: LD_VAR 0 9
35766: LESS
35767: IFFALSE 35809
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35769: LD_ADDR_VAR 0 6
35773: PUSH
35774: LD_VAR 0 6
35778: PPUSH
35779: LD_VAR 0 6
35783: PUSH
35784: LD_INT 1
35786: PLUS
35787: PPUSH
35788: LD_VAR 0 7
35792: PUSH
35793: LD_VAR 0 9
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PPUSH
35802: CALL_OW 2
35806: ST_TO_ADDR
35807: GO 35889
// for j = 1 to result do
35809: LD_ADDR_VAR 0 8
35813: PUSH
35814: DOUBLE
35815: LD_INT 1
35817: DEC
35818: ST_TO_ADDR
35819: LD_VAR 0 6
35823: PUSH
35824: FOR_TO
35825: IFFALSE 35887
// begin if tmp < result [ j ] [ 2 ] then
35827: LD_VAR 0 9
35831: PUSH
35832: LD_VAR 0 6
35836: PUSH
35837: LD_VAR 0 8
35841: ARRAY
35842: PUSH
35843: LD_INT 2
35845: ARRAY
35846: LESS
35847: IFFALSE 35885
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35849: LD_ADDR_VAR 0 6
35853: PUSH
35854: LD_VAR 0 6
35858: PPUSH
35859: LD_VAR 0 8
35863: PPUSH
35864: LD_VAR 0 7
35868: PUSH
35869: LD_VAR 0 9
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 2
35882: ST_TO_ADDR
// break ;
35883: GO 35887
// end ; end ;
35885: GO 35824
35887: POP
35888: POP
// end ; end ;
35889: GO 35688
35891: POP
35892: POP
// if result and not asc then
35893: LD_VAR 0 6
35897: PUSH
35898: LD_VAR 0 4
35902: NOT
35903: AND
35904: IFFALSE 35979
// begin tmp := result ;
35906: LD_ADDR_VAR 0 9
35910: PUSH
35911: LD_VAR 0 6
35915: ST_TO_ADDR
// for i = tmp downto 1 do
35916: LD_ADDR_VAR 0 7
35920: PUSH
35921: DOUBLE
35922: LD_VAR 0 9
35926: INC
35927: ST_TO_ADDR
35928: LD_INT 1
35930: PUSH
35931: FOR_DOWNTO
35932: IFFALSE 35977
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35934: LD_ADDR_VAR 0 6
35938: PUSH
35939: LD_VAR 0 6
35943: PPUSH
35944: LD_VAR 0 9
35948: PUSH
35949: LD_VAR 0 7
35953: MINUS
35954: PUSH
35955: LD_INT 1
35957: PLUS
35958: PPUSH
35959: LD_VAR 0 9
35963: PUSH
35964: LD_VAR 0 7
35968: ARRAY
35969: PPUSH
35970: CALL_OW 1
35974: ST_TO_ADDR
35975: GO 35931
35977: POP
35978: POP
// end ; tmp := [ ] ;
35979: LD_ADDR_VAR 0 9
35983: PUSH
35984: EMPTY
35985: ST_TO_ADDR
// if mode then
35986: LD_VAR 0 5
35990: IFFALSE 36059
// begin for i = 1 to result do
35992: LD_ADDR_VAR 0 7
35996: PUSH
35997: DOUBLE
35998: LD_INT 1
36000: DEC
36001: ST_TO_ADDR
36002: LD_VAR 0 6
36006: PUSH
36007: FOR_TO
36008: IFFALSE 36047
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36010: LD_ADDR_VAR 0 9
36014: PUSH
36015: LD_VAR 0 9
36019: PPUSH
36020: LD_VAR 0 7
36024: PPUSH
36025: LD_VAR 0 6
36029: PUSH
36030: LD_VAR 0 7
36034: ARRAY
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PPUSH
36040: CALL_OW 1
36044: ST_TO_ADDR
36045: GO 36007
36047: POP
36048: POP
// result := tmp ;
36049: LD_ADDR_VAR 0 6
36053: PUSH
36054: LD_VAR 0 9
36058: ST_TO_ADDR
// end ; end ;
36059: LD_VAR 0 6
36063: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36064: LD_INT 0
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36072: LD_ADDR_VAR 0 5
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if not x or not y then
36094: LD_VAR 0 2
36098: NOT
36099: PUSH
36100: LD_VAR 0 3
36104: NOT
36105: OR
36106: IFFALSE 36110
// exit ;
36108: GO 37760
// if not range then
36110: LD_VAR 0 4
36114: NOT
36115: IFFALSE 36125
// range := 10 ;
36117: LD_ADDR_VAR 0 4
36121: PUSH
36122: LD_INT 10
36124: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36125: LD_ADDR_VAR 0 8
36129: PUSH
36130: LD_INT 81
36132: PUSH
36133: LD_VAR 0 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 92
36144: PUSH
36145: LD_VAR 0 2
36149: PUSH
36150: LD_VAR 0 3
36154: PUSH
36155: LD_VAR 0 4
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 21
36171: PUSH
36172: LD_INT 3
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: PPUSH
36188: CALL_OW 69
36192: ST_TO_ADDR
// if not tmp then
36193: LD_VAR 0 8
36197: NOT
36198: IFFALSE 36202
// exit ;
36200: GO 37760
// for i in tmp do
36202: LD_ADDR_VAR 0 6
36206: PUSH
36207: LD_VAR 0 8
36211: PUSH
36212: FOR_IN
36213: IFFALSE 37735
// begin points := [ 0 , 0 , 0 ] ;
36215: LD_ADDR_VAR 0 9
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// bpoints := 1 ;
36234: LD_ADDR_VAR 0 10
36238: PUSH
36239: LD_INT 1
36241: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36242: LD_VAR 0 6
36246: PPUSH
36247: CALL_OW 247
36251: PUSH
36252: LD_INT 1
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36838
36260: POP
// begin if GetClass ( i ) = 1 then
36261: LD_VAR 0 6
36265: PPUSH
36266: CALL_OW 257
36270: PUSH
36271: LD_INT 1
36273: EQUAL
36274: IFFALSE 36295
// points := [ 10 , 5 , 3 ] ;
36276: LD_ADDR_VAR 0 9
36280: PUSH
36281: LD_INT 10
36283: PUSH
36284: LD_INT 5
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 257
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: LD_INT 4
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: IN
36319: IFFALSE 36340
// points := [ 3 , 2 , 1 ] ;
36321: LD_ADDR_VAR 0 9
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36340: LD_VAR 0 6
36344: PPUSH
36345: CALL_OW 257
36349: PUSH
36350: LD_INT 5
36352: EQUAL
36353: IFFALSE 36374
// points := [ 130 , 5 , 2 ] ;
36355: LD_ADDR_VAR 0 9
36359: PUSH
36360: LD_INT 130
36362: PUSH
36363: LD_INT 5
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36374: LD_VAR 0 6
36378: PPUSH
36379: CALL_OW 257
36383: PUSH
36384: LD_INT 8
36386: EQUAL
36387: IFFALSE 36408
// points := [ 35 , 35 , 30 ] ;
36389: LD_ADDR_VAR 0 9
36393: PUSH
36394: LD_INT 35
36396: PUSH
36397: LD_INT 35
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36408: LD_VAR 0 6
36412: PPUSH
36413: CALL_OW 257
36417: PUSH
36418: LD_INT 9
36420: EQUAL
36421: IFFALSE 36442
// points := [ 20 , 55 , 40 ] ;
36423: LD_ADDR_VAR 0 9
36427: PUSH
36428: LD_INT 20
36430: PUSH
36431: LD_INT 55
36433: PUSH
36434: LD_INT 40
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36442: LD_VAR 0 6
36446: PPUSH
36447: CALL_OW 257
36451: PUSH
36452: LD_INT 12
36454: PUSH
36455: LD_INT 16
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: IN
36462: IFFALSE 36483
// points := [ 5 , 3 , 2 ] ;
36464: LD_ADDR_VAR 0 9
36468: PUSH
36469: LD_INT 5
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36483: LD_VAR 0 6
36487: PPUSH
36488: CALL_OW 257
36492: PUSH
36493: LD_INT 17
36495: EQUAL
36496: IFFALSE 36517
// points := [ 100 , 50 , 75 ] ;
36498: LD_ADDR_VAR 0 9
36502: PUSH
36503: LD_INT 100
36505: PUSH
36506: LD_INT 50
36508: PUSH
36509: LD_INT 75
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36517: LD_VAR 0 6
36521: PPUSH
36522: CALL_OW 257
36526: PUSH
36527: LD_INT 15
36529: EQUAL
36530: IFFALSE 36551
// points := [ 10 , 5 , 3 ] ;
36532: LD_ADDR_VAR 0 9
36536: PUSH
36537: LD_INT 10
36539: PUSH
36540: LD_INT 5
36542: PUSH
36543: LD_INT 3
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36551: LD_VAR 0 6
36555: PPUSH
36556: CALL_OW 257
36560: PUSH
36561: LD_INT 14
36563: EQUAL
36564: IFFALSE 36585
// points := [ 10 , 0 , 0 ] ;
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_INT 10
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36585: LD_VAR 0 6
36589: PPUSH
36590: CALL_OW 257
36594: PUSH
36595: LD_INT 11
36597: EQUAL
36598: IFFALSE 36619
// points := [ 30 , 10 , 5 ] ;
36600: LD_ADDR_VAR 0 9
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 10
36610: PUSH
36611: LD_INT 5
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36619: LD_VAR 0 1
36623: PPUSH
36624: LD_INT 5
36626: PPUSH
36627: CALL_OW 321
36631: PUSH
36632: LD_INT 2
36634: EQUAL
36635: IFFALSE 36652
// bpoints := bpoints * 1.8 ;
36637: LD_ADDR_VAR 0 10
36641: PUSH
36642: LD_VAR 0 10
36646: PUSH
36647: LD_REAL  1.80000000000000E+0000
36650: MUL
36651: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36652: LD_VAR 0 6
36656: PPUSH
36657: CALL_OW 257
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 3
36670: PUSH
36671: LD_INT 4
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: IN
36680: PUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: LD_INT 51
36688: PPUSH
36689: CALL_OW 321
36693: PUSH
36694: LD_INT 2
36696: EQUAL
36697: AND
36698: IFFALSE 36715
// bpoints := bpoints * 1.2 ;
36700: LD_ADDR_VAR 0 10
36704: PUSH
36705: LD_VAR 0 10
36709: PUSH
36710: LD_REAL  1.20000000000000E+0000
36713: MUL
36714: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 257
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: LD_INT 7
36730: PUSH
36731: LD_INT 9
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: IN
36739: PUSH
36740: LD_VAR 0 1
36744: PPUSH
36745: LD_INT 52
36747: PPUSH
36748: CALL_OW 321
36752: PUSH
36753: LD_INT 2
36755: EQUAL
36756: AND
36757: IFFALSE 36774
// bpoints := bpoints * 1.5 ;
36759: LD_ADDR_VAR 0 10
36763: PUSH
36764: LD_VAR 0 10
36768: PUSH
36769: LD_REAL  1.50000000000000E+0000
36772: MUL
36773: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36774: LD_VAR 0 1
36778: PPUSH
36779: LD_INT 66
36781: PPUSH
36782: CALL_OW 321
36786: PUSH
36787: LD_INT 2
36789: EQUAL
36790: IFFALSE 36807
// bpoints := bpoints * 1.1 ;
36792: LD_ADDR_VAR 0 10
36796: PUSH
36797: LD_VAR 0 10
36801: PUSH
36802: LD_REAL  1.10000000000000E+0000
36805: MUL
36806: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36807: LD_ADDR_VAR 0 10
36811: PUSH
36812: LD_VAR 0 10
36816: PUSH
36817: LD_VAR 0 6
36821: PPUSH
36822: LD_INT 1
36824: PPUSH
36825: CALL_OW 259
36829: PUSH
36830: LD_REAL  1.15000000000000E+0000
36833: MUL
36834: MUL
36835: ST_TO_ADDR
// end ; unit_vehicle :
36836: GO 37664
36838: LD_INT 2
36840: DOUBLE
36841: EQUAL
36842: IFTRUE 36846
36844: GO 37652
36846: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36847: LD_VAR 0 6
36851: PPUSH
36852: CALL_OW 264
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 42
36862: PUSH
36863: LD_INT 24
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: IN
36871: IFFALSE 36892
// points := [ 25 , 5 , 3 ] ;
36873: LD_ADDR_VAR 0 9
36877: PUSH
36878: LD_INT 25
36880: PUSH
36881: LD_INT 5
36883: PUSH
36884: LD_INT 3
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36892: LD_VAR 0 6
36896: PPUSH
36897: CALL_OW 264
36901: PUSH
36902: LD_INT 4
36904: PUSH
36905: LD_INT 43
36907: PUSH
36908: LD_INT 25
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: IN
36916: IFFALSE 36937
// points := [ 40 , 15 , 5 ] ;
36918: LD_ADDR_VAR 0 9
36922: PUSH
36923: LD_INT 40
36925: PUSH
36926: LD_INT 15
36928: PUSH
36929: LD_INT 5
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36937: LD_VAR 0 6
36941: PPUSH
36942: CALL_OW 264
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: LD_INT 23
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: IN
36957: IFFALSE 36978
// points := [ 7 , 25 , 8 ] ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_INT 7
36966: PUSH
36967: LD_INT 25
36969: PUSH
36970: LD_INT 8
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36978: LD_VAR 0 6
36982: PPUSH
36983: CALL_OW 264
36987: PUSH
36988: LD_INT 5
36990: PUSH
36991: LD_INT 27
36993: PUSH
36994: LD_INT 44
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: IN
37002: IFFALSE 37023
// points := [ 14 , 50 , 16 ] ;
37004: LD_ADDR_VAR 0 9
37008: PUSH
37009: LD_INT 14
37011: PUSH
37012: LD_INT 50
37014: PUSH
37015: LD_INT 16
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37023: LD_VAR 0 6
37027: PPUSH
37028: CALL_OW 264
37032: PUSH
37033: LD_INT 6
37035: PUSH
37036: LD_INT 46
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: IN
37043: IFFALSE 37064
// points := [ 32 , 120 , 70 ] ;
37045: LD_ADDR_VAR 0 9
37049: PUSH
37050: LD_INT 32
37052: PUSH
37053: LD_INT 120
37055: PUSH
37056: LD_INT 70
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37064: LD_VAR 0 6
37068: PPUSH
37069: CALL_OW 264
37073: PUSH
37074: LD_INT 7
37076: PUSH
37077: LD_INT 28
37079: PUSH
37080: LD_INT 45
37082: PUSH
37083: LD_INT 92
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: IN
37092: IFFALSE 37113
// points := [ 35 , 20 , 45 ] ;
37094: LD_ADDR_VAR 0 9
37098: PUSH
37099: LD_INT 35
37101: PUSH
37102: LD_INT 20
37104: PUSH
37105: LD_INT 45
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37113: LD_VAR 0 6
37117: PPUSH
37118: CALL_OW 264
37122: PUSH
37123: LD_INT 47
37125: PUSH
37126: EMPTY
37127: LIST
37128: IN
37129: IFFALSE 37150
// points := [ 67 , 45 , 75 ] ;
37131: LD_ADDR_VAR 0 9
37135: PUSH
37136: LD_INT 67
37138: PUSH
37139: LD_INT 45
37141: PUSH
37142: LD_INT 75
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37150: LD_VAR 0 6
37154: PPUSH
37155: CALL_OW 264
37159: PUSH
37160: LD_INT 26
37162: PUSH
37163: EMPTY
37164: LIST
37165: IN
37166: IFFALSE 37187
// points := [ 120 , 30 , 80 ] ;
37168: LD_ADDR_VAR 0 9
37172: PUSH
37173: LD_INT 120
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 80
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37187: LD_VAR 0 6
37191: PPUSH
37192: CALL_OW 264
37196: PUSH
37197: LD_INT 22
37199: PUSH
37200: EMPTY
37201: LIST
37202: IN
37203: IFFALSE 37224
// points := [ 40 , 1 , 1 ] ;
37205: LD_ADDR_VAR 0 9
37209: PUSH
37210: LD_INT 40
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37224: LD_VAR 0 6
37228: PPUSH
37229: CALL_OW 264
37233: PUSH
37234: LD_INT 29
37236: PUSH
37237: EMPTY
37238: LIST
37239: IN
37240: IFFALSE 37261
// points := [ 70 , 200 , 400 ] ;
37242: LD_ADDR_VAR 0 9
37246: PUSH
37247: LD_INT 70
37249: PUSH
37250: LD_INT 200
37252: PUSH
37253: LD_INT 400
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37261: LD_VAR 0 6
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 14
37273: PUSH
37274: LD_INT 53
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: IN
37281: IFFALSE 37302
// points := [ 40 , 10 , 20 ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_INT 40
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: LD_INT 20
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37302: LD_VAR 0 6
37306: PPUSH
37307: CALL_OW 264
37311: PUSH
37312: LD_INT 9
37314: PUSH
37315: EMPTY
37316: LIST
37317: IN
37318: IFFALSE 37339
// points := [ 5 , 70 , 20 ] ;
37320: LD_ADDR_VAR 0 9
37324: PUSH
37325: LD_INT 5
37327: PUSH
37328: LD_INT 70
37330: PUSH
37331: LD_INT 20
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37339: LD_VAR 0 6
37343: PPUSH
37344: CALL_OW 264
37348: PUSH
37349: LD_INT 10
37351: PUSH
37352: EMPTY
37353: LIST
37354: IN
37355: IFFALSE 37376
// points := [ 35 , 110 , 70 ] ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_INT 35
37364: PUSH
37365: LD_INT 110
37367: PUSH
37368: LD_INT 70
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 265
37385: PUSH
37386: LD_INT 25
37388: EQUAL
37389: IFFALSE 37410
// points := [ 80 , 65 , 100 ] ;
37391: LD_ADDR_VAR 0 9
37395: PUSH
37396: LD_INT 80
37398: PUSH
37399: LD_INT 65
37401: PUSH
37402: LD_INT 100
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37410: LD_VAR 0 6
37414: PPUSH
37415: CALL_OW 263
37419: PUSH
37420: LD_INT 1
37422: EQUAL
37423: IFFALSE 37458
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37425: LD_ADDR_VAR 0 10
37429: PUSH
37430: LD_VAR 0 10
37434: PUSH
37435: LD_VAR 0 6
37439: PPUSH
37440: CALL_OW 311
37444: PPUSH
37445: LD_INT 3
37447: PPUSH
37448: CALL_OW 259
37452: PUSH
37453: LD_INT 4
37455: MUL
37456: MUL
37457: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37458: LD_VAR 0 6
37462: PPUSH
37463: CALL_OW 263
37467: PUSH
37468: LD_INT 2
37470: EQUAL
37471: IFFALSE 37522
// begin j := IsControledBy ( i ) ;
37473: LD_ADDR_VAR 0 7
37477: PUSH
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 312
37487: ST_TO_ADDR
// if j then
37488: LD_VAR 0 7
37492: IFFALSE 37522
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37494: LD_ADDR_VAR 0 10
37498: PUSH
37499: LD_VAR 0 10
37503: PUSH
37504: LD_VAR 0 7
37508: PPUSH
37509: LD_INT 3
37511: PPUSH
37512: CALL_OW 259
37516: PUSH
37517: LD_INT 3
37519: MUL
37520: MUL
37521: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 264
37531: PUSH
37532: LD_INT 5
37534: PUSH
37535: LD_INT 6
37537: PUSH
37538: LD_INT 46
37540: PUSH
37541: LD_INT 44
37543: PUSH
37544: LD_INT 47
37546: PUSH
37547: LD_INT 45
37549: PUSH
37550: LD_INT 28
37552: PUSH
37553: LD_INT 7
37555: PUSH
37556: LD_INT 27
37558: PUSH
37559: LD_INT 29
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: IN
37574: PUSH
37575: LD_VAR 0 1
37579: PPUSH
37580: LD_INT 52
37582: PPUSH
37583: CALL_OW 321
37587: PUSH
37588: LD_INT 2
37590: EQUAL
37591: AND
37592: IFFALSE 37609
// bpoints := bpoints * 1.2 ;
37594: LD_ADDR_VAR 0 10
37598: PUSH
37599: LD_VAR 0 10
37603: PUSH
37604: LD_REAL  1.20000000000000E+0000
37607: MUL
37608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 264
37618: PUSH
37619: LD_INT 6
37621: PUSH
37622: LD_INT 46
37624: PUSH
37625: LD_INT 47
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: IN
37633: IFFALSE 37650
// bpoints := bpoints * 1.2 ;
37635: LD_ADDR_VAR 0 10
37639: PUSH
37640: LD_VAR 0 10
37644: PUSH
37645: LD_REAL  1.20000000000000E+0000
37648: MUL
37649: ST_TO_ADDR
// end ; unit_building :
37650: GO 37664
37652: LD_INT 3
37654: DOUBLE
37655: EQUAL
37656: IFTRUE 37660
37658: GO 37663
37660: POP
// ; end ;
37661: GO 37664
37663: POP
// for j = 1 to 3 do
37664: LD_ADDR_VAR 0 7
37668: PUSH
37669: DOUBLE
37670: LD_INT 1
37672: DEC
37673: ST_TO_ADDR
37674: LD_INT 3
37676: PUSH
37677: FOR_TO
37678: IFFALSE 37731
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37680: LD_ADDR_VAR 0 5
37684: PUSH
37685: LD_VAR 0 5
37689: PPUSH
37690: LD_VAR 0 7
37694: PPUSH
37695: LD_VAR 0 5
37699: PUSH
37700: LD_VAR 0 7
37704: ARRAY
37705: PUSH
37706: LD_VAR 0 9
37710: PUSH
37711: LD_VAR 0 7
37715: ARRAY
37716: PUSH
37717: LD_VAR 0 10
37721: MUL
37722: PLUS
37723: PPUSH
37724: CALL_OW 1
37728: ST_TO_ADDR
37729: GO 37677
37731: POP
37732: POP
// end ;
37733: GO 36212
37735: POP
37736: POP
// result := Replace ( result , 4 , tmp ) ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 5
37746: PPUSH
37747: LD_INT 4
37749: PPUSH
37750: LD_VAR 0 8
37754: PPUSH
37755: CALL_OW 1
37759: ST_TO_ADDR
// end ;
37760: LD_VAR 0 5
37764: RET
// export function DangerAtRange ( unit , range ) ; begin
37765: LD_INT 0
37767: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37768: LD_ADDR_VAR 0 3
37772: PUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 255
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 250
37792: PPUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 251
37802: PPUSH
37803: LD_VAR 0 2
37807: PPUSH
37808: CALL 36064 0 4
37812: ST_TO_ADDR
// end ;
37813: LD_VAR 0 3
37817: RET
// export function DangerInArea ( side , area ) ; begin
37818: LD_INT 0
37820: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_VAR 0 2
37830: PPUSH
37831: LD_INT 81
37833: PUSH
37834: LD_VAR 0 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PPUSH
37843: CALL_OW 70
37847: ST_TO_ADDR
// end ;
37848: LD_VAR 0 3
37852: RET
// export function IsExtension ( b ) ; begin
37853: LD_INT 0
37855: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37856: LD_ADDR_VAR 0 2
37860: PUSH
37861: LD_VAR 0 1
37865: PUSH
37866: LD_INT 23
37868: PUSH
37869: LD_INT 20
37871: PUSH
37872: LD_INT 22
37874: PUSH
37875: LD_INT 17
37877: PUSH
37878: LD_INT 24
37880: PUSH
37881: LD_INT 21
37883: PUSH
37884: LD_INT 19
37886: PUSH
37887: LD_INT 16
37889: PUSH
37890: LD_INT 25
37892: PUSH
37893: LD_INT 18
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: IN
37908: ST_TO_ADDR
// end ;
37909: LD_VAR 0 2
37913: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
37918: PPUSH
// result := [ ] ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37926: LD_ADDR_VAR 0 5
37930: PUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_INT 21
37938: PUSH
37939: LD_INT 3
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PPUSH
37946: CALL_OW 70
37950: ST_TO_ADDR
// if not tmp then
37951: LD_VAR 0 5
37955: NOT
37956: IFFALSE 37960
// exit ;
37958: GO 38024
// if checkLink then
37960: LD_VAR 0 3
37964: IFFALSE 38014
// begin for i in tmp do
37966: LD_ADDR_VAR 0 6
37970: PUSH
37971: LD_VAR 0 5
37975: PUSH
37976: FOR_IN
37977: IFFALSE 38012
// if GetBase ( i ) <> base then
37979: LD_VAR 0 6
37983: PPUSH
37984: CALL_OW 274
37988: PUSH
37989: LD_VAR 0 1
37993: NONEQUAL
37994: IFFALSE 38010
// ComLinkToBase ( base , i ) ;
37996: LD_VAR 0 1
38000: PPUSH
38001: LD_VAR 0 6
38005: PPUSH
38006: CALL_OW 169
38010: GO 37976
38012: POP
38013: POP
// end ; result := tmp ;
38014: LD_ADDR_VAR 0 4
38018: PUSH
38019: LD_VAR 0 5
38023: ST_TO_ADDR
// end ;
38024: LD_VAR 0 4
38028: RET
// export function ComComplete ( units , b ) ; var i ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
// if not units then
38033: LD_VAR 0 1
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38132
// for i in units do
38042: LD_ADDR_VAR 0 4
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: FOR_IN
38053: IFFALSE 38130
// if BuildingStatus ( b ) = bs_build then
38055: LD_VAR 0 2
38059: PPUSH
38060: CALL_OW 461
38064: PUSH
38065: LD_INT 1
38067: EQUAL
38068: IFFALSE 38128
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38070: LD_VAR 0 4
38074: PPUSH
38075: LD_STRING h
38077: PUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: CALL_OW 250
38087: PUSH
38088: LD_VAR 0 2
38092: PPUSH
38093: CALL_OW 251
38097: PUSH
38098: LD_VAR 0 2
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: PPUSH
38124: CALL_OW 446
38128: GO 38052
38130: POP
38131: POP
// end ;
38132: LD_VAR 0 3
38136: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38137: LD_INT 0
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38145: LD_VAR 0 1
38149: NOT
38150: PUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 263
38160: PUSH
38161: LD_INT 2
38163: NONEQUAL
38164: OR
38165: IFFALSE 38169
// exit ;
38167: GO 38485
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38169: LD_ADDR_VAR 0 6
38173: PUSH
38174: LD_INT 22
38176: PUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 255
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 30
38196: PUSH
38197: LD_INT 36
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 34
38206: PUSH
38207: LD_INT 31
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PPUSH
38223: CALL_OW 69
38227: ST_TO_ADDR
// if not tmp then
38228: LD_VAR 0 6
38232: NOT
38233: IFFALSE 38237
// exit ;
38235: GO 38485
// result := [ ] ;
38237: LD_ADDR_VAR 0 2
38241: PUSH
38242: EMPTY
38243: ST_TO_ADDR
// for i in tmp do
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_VAR 0 6
38253: PUSH
38254: FOR_IN
38255: IFFALSE 38326
// begin t := UnitsInside ( i ) ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_VAR 0 3
38266: PPUSH
38267: CALL_OW 313
38271: ST_TO_ADDR
// if t then
38272: LD_VAR 0 4
38276: IFFALSE 38324
// for j in t do
38278: LD_ADDR_VAR 0 7
38282: PUSH
38283: LD_VAR 0 4
38287: PUSH
38288: FOR_IN
38289: IFFALSE 38322
// result := Replace ( result , result + 1 , j ) ;
38291: LD_ADDR_VAR 0 2
38295: PUSH
38296: LD_VAR 0 2
38300: PPUSH
38301: LD_VAR 0 2
38305: PUSH
38306: LD_INT 1
38308: PLUS
38309: PPUSH
38310: LD_VAR 0 7
38314: PPUSH
38315: CALL_OW 1
38319: ST_TO_ADDR
38320: GO 38288
38322: POP
38323: POP
// end ;
38324: GO 38254
38326: POP
38327: POP
// if not result then
38328: LD_VAR 0 2
38332: NOT
38333: IFFALSE 38337
// exit ;
38335: GO 38485
// mech := result [ 1 ] ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_VAR 0 2
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: ST_TO_ADDR
// if result > 1 then
38351: LD_VAR 0 2
38355: PUSH
38356: LD_INT 1
38358: GREATER
38359: IFFALSE 38471
// begin for i = 2 to result do
38361: LD_ADDR_VAR 0 3
38365: PUSH
38366: DOUBLE
38367: LD_INT 2
38369: DEC
38370: ST_TO_ADDR
38371: LD_VAR 0 2
38375: PUSH
38376: FOR_TO
38377: IFFALSE 38469
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38379: LD_ADDR_VAR 0 4
38383: PUSH
38384: LD_VAR 0 2
38388: PUSH
38389: LD_VAR 0 3
38393: ARRAY
38394: PPUSH
38395: LD_INT 3
38397: PPUSH
38398: CALL_OW 259
38402: PUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_VAR 0 3
38412: ARRAY
38413: PPUSH
38414: CALL_OW 432
38418: MINUS
38419: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38420: LD_VAR 0 4
38424: PUSH
38425: LD_VAR 0 5
38429: PPUSH
38430: LD_INT 3
38432: PPUSH
38433: CALL_OW 259
38437: PUSH
38438: LD_VAR 0 5
38442: PPUSH
38443: CALL_OW 432
38447: MINUS
38448: GREATEREQUAL
38449: IFFALSE 38467
// mech := result [ i ] ;
38451: LD_ADDR_VAR 0 5
38455: PUSH
38456: LD_VAR 0 2
38460: PUSH
38461: LD_VAR 0 3
38465: ARRAY
38466: ST_TO_ADDR
// end ;
38467: GO 38376
38469: POP
38470: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38471: LD_VAR 0 1
38475: PPUSH
38476: LD_VAR 0 5
38480: PPUSH
38481: CALL_OW 135
// end ;
38485: LD_VAR 0 2
38489: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38490: LD_INT 0
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
// result := [ ] ;
38505: LD_ADDR_VAR 0 7
38509: PUSH
38510: EMPTY
38511: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38512: LD_VAR 0 1
38516: PPUSH
38517: CALL_OW 266
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: IN
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 40171
// if name then
38537: LD_VAR 0 3
38541: IFFALSE 38557
// SetBName ( base_dep , name ) ;
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_VAR 0 3
38552: PPUSH
38553: CALL_OW 500
// base := GetBase ( base_dep ) ;
38557: LD_ADDR_VAR 0 15
38561: PUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 274
38571: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38572: LD_ADDR_VAR 0 16
38576: PUSH
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 255
38586: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38587: LD_ADDR_VAR 0 17
38591: PUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 248
38601: ST_TO_ADDR
// if sources then
38602: LD_VAR 0 5
38606: IFFALSE 38653
// for i = 1 to 3 do
38608: LD_ADDR_VAR 0 8
38612: PUSH
38613: DOUBLE
38614: LD_INT 1
38616: DEC
38617: ST_TO_ADDR
38618: LD_INT 3
38620: PUSH
38621: FOR_TO
38622: IFFALSE 38651
// AddResourceType ( base , i , sources [ i ] ) ;
38624: LD_VAR 0 15
38628: PPUSH
38629: LD_VAR 0 8
38633: PPUSH
38634: LD_VAR 0 5
38638: PUSH
38639: LD_VAR 0 8
38643: ARRAY
38644: PPUSH
38645: CALL_OW 276
38649: GO 38621
38651: POP
38652: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38653: LD_ADDR_VAR 0 18
38657: PUSH
38658: LD_VAR 0 15
38662: PPUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: LD_INT 1
38670: PPUSH
38671: CALL 37914 0 3
38675: ST_TO_ADDR
// InitHc ;
38676: CALL_OW 19
// InitUc ;
38680: CALL_OW 18
// uc_side := side ;
38684: LD_ADDR_OWVAR 20
38688: PUSH
38689: LD_VAR 0 16
38693: ST_TO_ADDR
// uc_nation := nation ;
38694: LD_ADDR_OWVAR 21
38698: PUSH
38699: LD_VAR 0 17
38703: ST_TO_ADDR
// if buildings then
38704: LD_VAR 0 18
38708: IFFALSE 40030
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38710: LD_ADDR_VAR 0 19
38714: PUSH
38715: LD_VAR 0 18
38719: PPUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 30
38725: PUSH
38726: LD_INT 29
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 30
38735: PUSH
38736: LD_INT 30
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PPUSH
38748: CALL_OW 72
38752: ST_TO_ADDR
// if tmp then
38753: LD_VAR 0 19
38757: IFFALSE 38805
// for i in tmp do
38759: LD_ADDR_VAR 0 8
38763: PUSH
38764: LD_VAR 0 19
38768: PUSH
38769: FOR_IN
38770: IFFALSE 38803
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38772: LD_VAR 0 8
38776: PPUSH
38777: CALL_OW 250
38781: PPUSH
38782: LD_VAR 0 8
38786: PPUSH
38787: CALL_OW 251
38791: PPUSH
38792: LD_VAR 0 16
38796: PPUSH
38797: CALL_OW 441
38801: GO 38769
38803: POP
38804: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38805: LD_VAR 0 18
38809: PPUSH
38810: LD_INT 2
38812: PUSH
38813: LD_INT 30
38815: PUSH
38816: LD_INT 32
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 30
38825: PUSH
38826: LD_INT 33
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 72
38842: IFFALSE 38930
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38844: LD_ADDR_VAR 0 8
38848: PUSH
38849: LD_VAR 0 18
38853: PPUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 30
38859: PUSH
38860: LD_INT 32
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 30
38869: PUSH
38870: LD_INT 33
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: PPUSH
38882: CALL_OW 72
38886: PUSH
38887: FOR_IN
38888: IFFALSE 38928
// begin if not GetBWeapon ( i ) then
38890: LD_VAR 0 8
38894: PPUSH
38895: CALL_OW 269
38899: NOT
38900: IFFALSE 38926
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38902: LD_VAR 0 8
38906: PPUSH
38907: LD_VAR 0 8
38911: PPUSH
38912: LD_VAR 0 2
38916: PPUSH
38917: CALL 40176 0 2
38921: PPUSH
38922: CALL_OW 431
// end ;
38926: GO 38887
38928: POP
38929: POP
// end ; for i = 1 to personel do
38930: LD_ADDR_VAR 0 8
38934: PUSH
38935: DOUBLE
38936: LD_INT 1
38938: DEC
38939: ST_TO_ADDR
38940: LD_VAR 0 6
38944: PUSH
38945: FOR_TO
38946: IFFALSE 40010
// begin if i > 4 then
38948: LD_VAR 0 8
38952: PUSH
38953: LD_INT 4
38955: GREATER
38956: IFFALSE 38960
// break ;
38958: GO 40010
// case i of 1 :
38960: LD_VAR 0 8
38964: PUSH
38965: LD_INT 1
38967: DOUBLE
38968: EQUAL
38969: IFTRUE 38973
38971: GO 39053
38973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38974: LD_ADDR_VAR 0 12
38978: PUSH
38979: LD_VAR 0 18
38983: PPUSH
38984: LD_INT 22
38986: PUSH
38987: LD_VAR 0 16
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 58
38998: PUSH
38999: EMPTY
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: LD_INT 30
39007: PUSH
39008: LD_INT 32
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 30
39017: PUSH
39018: LD_INT 4
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 30
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PPUSH
39046: CALL_OW 72
39050: ST_TO_ADDR
39051: GO 39275
39053: LD_INT 2
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39123
39061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39062: LD_ADDR_VAR 0 12
39066: PUSH
39067: LD_VAR 0 18
39071: PPUSH
39072: LD_INT 22
39074: PUSH
39075: LD_VAR 0 16
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 30
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 30
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PPUSH
39116: CALL_OW 72
39120: ST_TO_ADDR
39121: GO 39275
39123: LD_INT 3
39125: DOUBLE
39126: EQUAL
39127: IFTRUE 39131
39129: GO 39193
39131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39132: LD_ADDR_VAR 0 12
39136: PUSH
39137: LD_VAR 0 18
39141: PPUSH
39142: LD_INT 22
39144: PUSH
39145: LD_VAR 0 16
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 30
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 30
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PPUSH
39186: CALL_OW 72
39190: ST_TO_ADDR
39191: GO 39275
39193: LD_INT 4
39195: DOUBLE
39196: EQUAL
39197: IFTRUE 39201
39199: GO 39274
39201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39202: LD_ADDR_VAR 0 12
39206: PUSH
39207: LD_VAR 0 18
39211: PPUSH
39212: LD_INT 22
39214: PUSH
39215: LD_VAR 0 16
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 30
39229: PUSH
39230: LD_INT 6
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 30
39239: PUSH
39240: LD_INT 7
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: LD_INT 8
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PPUSH
39267: CALL_OW 72
39271: ST_TO_ADDR
39272: GO 39275
39274: POP
// if i = 1 then
39275: LD_VAR 0 8
39279: PUSH
39280: LD_INT 1
39282: EQUAL
39283: IFFALSE 39394
// begin tmp := [ ] ;
39285: LD_ADDR_VAR 0 19
39289: PUSH
39290: EMPTY
39291: ST_TO_ADDR
// for j in f do
39292: LD_ADDR_VAR 0 9
39296: PUSH
39297: LD_VAR 0 12
39301: PUSH
39302: FOR_IN
39303: IFFALSE 39376
// if GetBType ( j ) = b_bunker then
39305: LD_VAR 0 9
39309: PPUSH
39310: CALL_OW 266
39314: PUSH
39315: LD_INT 32
39317: EQUAL
39318: IFFALSE 39345
// tmp := Insert ( tmp , 1 , j ) else
39320: LD_ADDR_VAR 0 19
39324: PUSH
39325: LD_VAR 0 19
39329: PPUSH
39330: LD_INT 1
39332: PPUSH
39333: LD_VAR 0 9
39337: PPUSH
39338: CALL_OW 2
39342: ST_TO_ADDR
39343: GO 39374
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39345: LD_ADDR_VAR 0 19
39349: PUSH
39350: LD_VAR 0 19
39354: PPUSH
39355: LD_VAR 0 19
39359: PUSH
39360: LD_INT 1
39362: PLUS
39363: PPUSH
39364: LD_VAR 0 9
39368: PPUSH
39369: CALL_OW 2
39373: ST_TO_ADDR
39374: GO 39302
39376: POP
39377: POP
// if tmp then
39378: LD_VAR 0 19
39382: IFFALSE 39394
// f := tmp ;
39384: LD_ADDR_VAR 0 12
39388: PUSH
39389: LD_VAR 0 19
39393: ST_TO_ADDR
// end ; x := personel [ i ] ;
39394: LD_ADDR_VAR 0 13
39398: PUSH
39399: LD_VAR 0 6
39403: PUSH
39404: LD_VAR 0 8
39408: ARRAY
39409: ST_TO_ADDR
// if x = - 1 then
39410: LD_VAR 0 13
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: EQUAL
39419: IFFALSE 39628
// begin for j in f do
39421: LD_ADDR_VAR 0 9
39425: PUSH
39426: LD_VAR 0 12
39430: PUSH
39431: FOR_IN
39432: IFFALSE 39624
// repeat InitHc ;
39434: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39438: LD_VAR 0 9
39442: PPUSH
39443: CALL_OW 266
39447: PUSH
39448: LD_INT 5
39450: EQUAL
39451: IFFALSE 39521
// begin if UnitsInside ( j ) < 3 then
39453: LD_VAR 0 9
39457: PPUSH
39458: CALL_OW 313
39462: PUSH
39463: LD_INT 3
39465: LESS
39466: IFFALSE 39502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39468: LD_INT 0
39470: PPUSH
39471: LD_INT 5
39473: PUSH
39474: LD_INT 8
39476: PUSH
39477: LD_INT 9
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: PUSH
39485: LD_VAR 0 17
39489: ARRAY
39490: PPUSH
39491: LD_VAR 0 4
39495: PPUSH
39496: CALL_OW 380
39500: GO 39519
// PrepareHuman ( false , i , skill ) ;
39502: LD_INT 0
39504: PPUSH
39505: LD_VAR 0 8
39509: PPUSH
39510: LD_VAR 0 4
39514: PPUSH
39515: CALL_OW 380
// end else
39519: GO 39538
// PrepareHuman ( false , i , skill ) ;
39521: LD_INT 0
39523: PPUSH
39524: LD_VAR 0 8
39528: PPUSH
39529: LD_VAR 0 4
39533: PPUSH
39534: CALL_OW 380
// un := CreateHuman ;
39538: LD_ADDR_VAR 0 14
39542: PUSH
39543: CALL_OW 44
39547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39548: LD_ADDR_VAR 0 7
39552: PUSH
39553: LD_VAR 0 7
39557: PPUSH
39558: LD_INT 1
39560: PPUSH
39561: LD_VAR 0 14
39565: PPUSH
39566: CALL_OW 2
39570: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39571: LD_VAR 0 14
39575: PPUSH
39576: LD_VAR 0 9
39580: PPUSH
39581: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39585: LD_VAR 0 9
39589: PPUSH
39590: CALL_OW 313
39594: PUSH
39595: LD_INT 6
39597: EQUAL
39598: PUSH
39599: LD_VAR 0 9
39603: PPUSH
39604: CALL_OW 266
39608: PUSH
39609: LD_INT 32
39611: PUSH
39612: LD_INT 31
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: IN
39619: OR
39620: IFFALSE 39434
39622: GO 39431
39624: POP
39625: POP
// end else
39626: GO 40008
// for j = 1 to x do
39628: LD_ADDR_VAR 0 9
39632: PUSH
39633: DOUBLE
39634: LD_INT 1
39636: DEC
39637: ST_TO_ADDR
39638: LD_VAR 0 13
39642: PUSH
39643: FOR_TO
39644: IFFALSE 40006
// begin InitHc ;
39646: CALL_OW 19
// if not f then
39650: LD_VAR 0 12
39654: NOT
39655: IFFALSE 39744
// begin PrepareHuman ( false , i , skill ) ;
39657: LD_INT 0
39659: PPUSH
39660: LD_VAR 0 8
39664: PPUSH
39665: LD_VAR 0 4
39669: PPUSH
39670: CALL_OW 380
// un := CreateHuman ;
39674: LD_ADDR_VAR 0 14
39678: PUSH
39679: CALL_OW 44
39683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39684: LD_ADDR_VAR 0 7
39688: PUSH
39689: LD_VAR 0 7
39693: PPUSH
39694: LD_INT 1
39696: PPUSH
39697: LD_VAR 0 14
39701: PPUSH
39702: CALL_OW 2
39706: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39707: LD_VAR 0 14
39711: PPUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 250
39721: PPUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 251
39731: PPUSH
39732: LD_INT 10
39734: PPUSH
39735: LD_INT 0
39737: PPUSH
39738: CALL_OW 50
// continue ;
39742: GO 39643
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39744: LD_VAR 0 12
39748: PUSH
39749: LD_INT 1
39751: ARRAY
39752: PPUSH
39753: CALL_OW 313
39757: PUSH
39758: LD_VAR 0 12
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: CALL_OW 266
39771: PUSH
39772: LD_INT 32
39774: PUSH
39775: LD_INT 31
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: IN
39782: AND
39783: PUSH
39784: LD_VAR 0 12
39788: PUSH
39789: LD_INT 1
39791: ARRAY
39792: PPUSH
39793: CALL_OW 313
39797: PUSH
39798: LD_INT 6
39800: EQUAL
39801: OR
39802: IFFALSE 39822
// f := Delete ( f , 1 ) ;
39804: LD_ADDR_VAR 0 12
39808: PUSH
39809: LD_VAR 0 12
39813: PPUSH
39814: LD_INT 1
39816: PPUSH
39817: CALL_OW 3
39821: ST_TO_ADDR
// if not f then
39822: LD_VAR 0 12
39826: NOT
39827: IFFALSE 39845
// begin x := x + 2 ;
39829: LD_ADDR_VAR 0 13
39833: PUSH
39834: LD_VAR 0 13
39838: PUSH
39839: LD_INT 2
39841: PLUS
39842: ST_TO_ADDR
// continue ;
39843: GO 39643
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39845: LD_VAR 0 12
39849: PUSH
39850: LD_INT 1
39852: ARRAY
39853: PPUSH
39854: CALL_OW 266
39858: PUSH
39859: LD_INT 5
39861: EQUAL
39862: IFFALSE 39936
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39864: LD_VAR 0 12
39868: PUSH
39869: LD_INT 1
39871: ARRAY
39872: PPUSH
39873: CALL_OW 313
39877: PUSH
39878: LD_INT 3
39880: LESS
39881: IFFALSE 39917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39883: LD_INT 0
39885: PPUSH
39886: LD_INT 5
39888: PUSH
39889: LD_INT 8
39891: PUSH
39892: LD_INT 9
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: PUSH
39900: LD_VAR 0 17
39904: ARRAY
39905: PPUSH
39906: LD_VAR 0 4
39910: PPUSH
39911: CALL_OW 380
39915: GO 39934
// PrepareHuman ( false , i , skill ) ;
39917: LD_INT 0
39919: PPUSH
39920: LD_VAR 0 8
39924: PPUSH
39925: LD_VAR 0 4
39929: PPUSH
39930: CALL_OW 380
// end else
39934: GO 39953
// PrepareHuman ( false , i , skill ) ;
39936: LD_INT 0
39938: PPUSH
39939: LD_VAR 0 8
39943: PPUSH
39944: LD_VAR 0 4
39948: PPUSH
39949: CALL_OW 380
// un := CreateHuman ;
39953: LD_ADDR_VAR 0 14
39957: PUSH
39958: CALL_OW 44
39962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39963: LD_ADDR_VAR 0 7
39967: PUSH
39968: LD_VAR 0 7
39972: PPUSH
39973: LD_INT 1
39975: PPUSH
39976: LD_VAR 0 14
39980: PPUSH
39981: CALL_OW 2
39985: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39986: LD_VAR 0 14
39990: PPUSH
39991: LD_VAR 0 12
39995: PUSH
39996: LD_INT 1
39998: ARRAY
39999: PPUSH
40000: CALL_OW 52
// end ;
40004: GO 39643
40006: POP
40007: POP
// end ;
40008: GO 38945
40010: POP
40011: POP
// result := result ^ buildings ;
40012: LD_ADDR_VAR 0 7
40016: PUSH
40017: LD_VAR 0 7
40021: PUSH
40022: LD_VAR 0 18
40026: ADD
40027: ST_TO_ADDR
// end else
40028: GO 40171
// begin for i = 1 to personel do
40030: LD_ADDR_VAR 0 8
40034: PUSH
40035: DOUBLE
40036: LD_INT 1
40038: DEC
40039: ST_TO_ADDR
40040: LD_VAR 0 6
40044: PUSH
40045: FOR_TO
40046: IFFALSE 40169
// begin if i > 4 then
40048: LD_VAR 0 8
40052: PUSH
40053: LD_INT 4
40055: GREATER
40056: IFFALSE 40060
// break ;
40058: GO 40169
// x := personel [ i ] ;
40060: LD_ADDR_VAR 0 13
40064: PUSH
40065: LD_VAR 0 6
40069: PUSH
40070: LD_VAR 0 8
40074: ARRAY
40075: ST_TO_ADDR
// if x = - 1 then
40076: LD_VAR 0 13
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: EQUAL
40085: IFFALSE 40089
// continue ;
40087: GO 40045
// PrepareHuman ( false , i , skill ) ;
40089: LD_INT 0
40091: PPUSH
40092: LD_VAR 0 8
40096: PPUSH
40097: LD_VAR 0 4
40101: PPUSH
40102: CALL_OW 380
// un := CreateHuman ;
40106: LD_ADDR_VAR 0 14
40110: PUSH
40111: CALL_OW 44
40115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40116: LD_VAR 0 14
40120: PPUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: CALL_OW 250
40130: PPUSH
40131: LD_VAR 0 1
40135: PPUSH
40136: CALL_OW 251
40140: PPUSH
40141: LD_INT 10
40143: PPUSH
40144: LD_INT 0
40146: PPUSH
40147: CALL_OW 50
// result := result ^ un ;
40151: LD_ADDR_VAR 0 7
40155: PUSH
40156: LD_VAR 0 7
40160: PUSH
40161: LD_VAR 0 14
40165: ADD
40166: ST_TO_ADDR
// end ;
40167: GO 40045
40169: POP
40170: POP
// end ; end ;
40171: LD_VAR 0 7
40175: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40176: LD_INT 0
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
// result := false ;
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_INT 0
40201: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40202: LD_VAR 0 1
40206: NOT
40207: PUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 266
40217: PUSH
40218: LD_INT 32
40220: PUSH
40221: LD_INT 33
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: IN
40228: NOT
40229: OR
40230: IFFALSE 40234
// exit ;
40232: GO 41343
// nat := GetNation ( tower ) ;
40234: LD_ADDR_VAR 0 12
40238: PUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 248
40248: ST_TO_ADDR
// side := GetSide ( tower ) ;
40249: LD_ADDR_VAR 0 16
40253: PUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 255
40263: ST_TO_ADDR
// x := GetX ( tower ) ;
40264: LD_ADDR_VAR 0 10
40268: PUSH
40269: LD_VAR 0 1
40273: PPUSH
40274: CALL_OW 250
40278: ST_TO_ADDR
// y := GetY ( tower ) ;
40279: LD_ADDR_VAR 0 11
40283: PUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 251
40293: ST_TO_ADDR
// if not x or not y then
40294: LD_VAR 0 10
40298: NOT
40299: PUSH
40300: LD_VAR 0 11
40304: NOT
40305: OR
40306: IFFALSE 40310
// exit ;
40308: GO 41343
// weapon := 0 ;
40310: LD_ADDR_VAR 0 18
40314: PUSH
40315: LD_INT 0
40317: ST_TO_ADDR
// fac_list := [ ] ;
40318: LD_ADDR_VAR 0 17
40322: PUSH
40323: EMPTY
40324: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40325: LD_ADDR_VAR 0 6
40329: PUSH
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 274
40339: PPUSH
40340: LD_VAR 0 2
40344: PPUSH
40345: LD_INT 0
40347: PPUSH
40348: CALL 37914 0 3
40352: PPUSH
40353: LD_INT 30
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PPUSH
40363: CALL_OW 72
40367: ST_TO_ADDR
// if not factories then
40368: LD_VAR 0 6
40372: NOT
40373: IFFALSE 40377
// exit ;
40375: GO 41343
// for i in factories do
40377: LD_ADDR_VAR 0 8
40381: PUSH
40382: LD_VAR 0 6
40386: PUSH
40387: FOR_IN
40388: IFFALSE 40413
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40390: LD_ADDR_VAR 0 17
40394: PUSH
40395: LD_VAR 0 17
40399: PUSH
40400: LD_VAR 0 8
40404: PPUSH
40405: CALL_OW 478
40409: UNION
40410: ST_TO_ADDR
40411: GO 40387
40413: POP
40414: POP
// if not fac_list then
40415: LD_VAR 0 17
40419: NOT
40420: IFFALSE 40424
// exit ;
40422: GO 41343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40424: LD_ADDR_VAR 0 5
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: LD_INT 5
40434: PUSH
40435: LD_INT 9
40437: PUSH
40438: LD_INT 10
40440: PUSH
40441: LD_INT 6
40443: PUSH
40444: LD_INT 7
40446: PUSH
40447: LD_INT 11
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 27
40461: PUSH
40462: LD_INT 28
40464: PUSH
40465: LD_INT 26
40467: PUSH
40468: LD_INT 30
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 43
40479: PUSH
40480: LD_INT 44
40482: PUSH
40483: LD_INT 46
40485: PUSH
40486: LD_INT 45
40488: PUSH
40489: LD_INT 47
40491: PUSH
40492: LD_INT 49
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PUSH
40508: LD_VAR 0 12
40512: ARRAY
40513: ST_TO_ADDR
// list := list isect fac_list ;
40514: LD_ADDR_VAR 0 5
40518: PUSH
40519: LD_VAR 0 5
40523: PUSH
40524: LD_VAR 0 17
40528: ISECT
40529: ST_TO_ADDR
// if not list then
40530: LD_VAR 0 5
40534: NOT
40535: IFFALSE 40539
// exit ;
40537: GO 41343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40539: LD_VAR 0 12
40543: PUSH
40544: LD_INT 3
40546: EQUAL
40547: PUSH
40548: LD_INT 49
40550: PUSH
40551: LD_VAR 0 5
40555: IN
40556: AND
40557: PUSH
40558: LD_INT 31
40560: PPUSH
40561: LD_VAR 0 16
40565: PPUSH
40566: CALL_OW 321
40570: PUSH
40571: LD_INT 2
40573: EQUAL
40574: AND
40575: IFFALSE 40635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40577: LD_INT 22
40579: PUSH
40580: LD_VAR 0 16
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 35
40591: PUSH
40592: LD_INT 49
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 91
40601: PUSH
40602: LD_VAR 0 1
40606: PUSH
40607: LD_INT 10
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: PPUSH
40620: CALL_OW 69
40624: NOT
40625: IFFALSE 40635
// weapon := ru_time_lapser ;
40627: LD_ADDR_VAR 0 18
40631: PUSH
40632: LD_INT 49
40634: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40635: LD_VAR 0 12
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: IN
40650: PUSH
40651: LD_INT 11
40653: PUSH
40654: LD_VAR 0 5
40658: IN
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_VAR 0 5
40667: IN
40668: OR
40669: AND
40670: PUSH
40671: LD_INT 6
40673: PPUSH
40674: LD_VAR 0 16
40678: PPUSH
40679: CALL_OW 321
40683: PUSH
40684: LD_INT 2
40686: EQUAL
40687: AND
40688: IFFALSE 40853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40690: LD_INT 22
40692: PUSH
40693: LD_VAR 0 16
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: LD_INT 35
40707: PUSH
40708: LD_INT 11
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 35
40717: PUSH
40718: LD_INT 30
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 91
40732: PUSH
40733: LD_VAR 0 1
40737: PUSH
40738: LD_INT 18
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: PPUSH
40751: CALL_OW 69
40755: NOT
40756: PUSH
40757: LD_INT 22
40759: PUSH
40760: LD_VAR 0 16
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: LD_INT 30
40774: PUSH
40775: LD_INT 32
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 30
40784: PUSH
40785: LD_INT 33
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 91
40799: PUSH
40800: LD_VAR 0 1
40804: PUSH
40805: LD_INT 12
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: PPUSH
40821: CALL_OW 69
40825: PUSH
40826: LD_INT 2
40828: GREATER
40829: AND
40830: IFFALSE 40853
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40832: LD_ADDR_VAR 0 18
40836: PUSH
40837: LD_INT 11
40839: PUSH
40840: LD_INT 30
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_VAR 0 12
40851: ARRAY
40852: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40853: LD_VAR 0 18
40857: NOT
40858: PUSH
40859: LD_INT 40
40861: PPUSH
40862: LD_VAR 0 16
40866: PPUSH
40867: CALL_OW 321
40871: PUSH
40872: LD_INT 2
40874: EQUAL
40875: AND
40876: PUSH
40877: LD_INT 7
40879: PUSH
40880: LD_VAR 0 5
40884: IN
40885: PUSH
40886: LD_INT 28
40888: PUSH
40889: LD_VAR 0 5
40893: IN
40894: OR
40895: PUSH
40896: LD_INT 45
40898: PUSH
40899: LD_VAR 0 5
40903: IN
40904: OR
40905: AND
40906: IFFALSE 41160
// begin hex := GetHexInfo ( x , y ) ;
40908: LD_ADDR_VAR 0 4
40912: PUSH
40913: LD_VAR 0 10
40917: PPUSH
40918: LD_VAR 0 11
40922: PPUSH
40923: CALL_OW 546
40927: ST_TO_ADDR
// if hex [ 1 ] then
40928: LD_VAR 0 4
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: IFFALSE 40940
// exit ;
40938: GO 41343
// height := hex [ 2 ] ;
40940: LD_ADDR_VAR 0 15
40944: PUSH
40945: LD_VAR 0 4
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40954: LD_ADDR_VAR 0 14
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 3
40967: PUSH
40968: LD_INT 5
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: ST_TO_ADDR
// for i in tmp do
40977: LD_ADDR_VAR 0 8
40981: PUSH
40982: LD_VAR 0 14
40986: PUSH
40987: FOR_IN
40988: IFFALSE 41158
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40990: LD_ADDR_VAR 0 9
40994: PUSH
40995: LD_VAR 0 10
40999: PPUSH
41000: LD_VAR 0 8
41004: PPUSH
41005: LD_INT 5
41007: PPUSH
41008: CALL_OW 272
41012: PUSH
41013: LD_VAR 0 11
41017: PPUSH
41018: LD_VAR 0 8
41022: PPUSH
41023: LD_INT 5
41025: PPUSH
41026: CALL_OW 273
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41035: LD_VAR 0 9
41039: PUSH
41040: LD_INT 1
41042: ARRAY
41043: PPUSH
41044: LD_VAR 0 9
41048: PUSH
41049: LD_INT 2
41051: ARRAY
41052: PPUSH
41053: CALL_OW 488
41057: IFFALSE 41156
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41059: LD_ADDR_VAR 0 4
41063: PUSH
41064: LD_VAR 0 9
41068: PUSH
41069: LD_INT 1
41071: ARRAY
41072: PPUSH
41073: LD_VAR 0 9
41077: PUSH
41078: LD_INT 2
41080: ARRAY
41081: PPUSH
41082: CALL_OW 546
41086: ST_TO_ADDR
// if hex [ 1 ] then
41087: LD_VAR 0 4
41091: PUSH
41092: LD_INT 1
41094: ARRAY
41095: IFFALSE 41099
// continue ;
41097: GO 40987
// h := hex [ 2 ] ;
41099: LD_ADDR_VAR 0 13
41103: PUSH
41104: LD_VAR 0 4
41108: PUSH
41109: LD_INT 2
41111: ARRAY
41112: ST_TO_ADDR
// if h + 7 < height then
41113: LD_VAR 0 13
41117: PUSH
41118: LD_INT 7
41120: PLUS
41121: PUSH
41122: LD_VAR 0 15
41126: LESS
41127: IFFALSE 41156
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41129: LD_ADDR_VAR 0 18
41133: PUSH
41134: LD_INT 7
41136: PUSH
41137: LD_INT 28
41139: PUSH
41140: LD_INT 45
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: PUSH
41148: LD_VAR 0 12
41152: ARRAY
41153: ST_TO_ADDR
// break ;
41154: GO 41158
// end ; end ; end ;
41156: GO 40987
41158: POP
41159: POP
// end ; if not weapon then
41160: LD_VAR 0 18
41164: NOT
41165: IFFALSE 41225
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41167: LD_ADDR_VAR 0 5
41171: PUSH
41172: LD_VAR 0 5
41176: PUSH
41177: LD_INT 11
41179: PUSH
41180: LD_INT 30
41182: PUSH
41183: LD_INT 49
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: DIFF
41191: ST_TO_ADDR
// if not list then
41192: LD_VAR 0 5
41196: NOT
41197: IFFALSE 41201
// exit ;
41199: GO 41343
// weapon := list [ rand ( 1 , list ) ] ;
41201: LD_ADDR_VAR 0 18
41205: PUSH
41206: LD_VAR 0 5
41210: PUSH
41211: LD_INT 1
41213: PPUSH
41214: LD_VAR 0 5
41218: PPUSH
41219: CALL_OW 12
41223: ARRAY
41224: ST_TO_ADDR
// end ; if weapon then
41225: LD_VAR 0 18
41229: IFFALSE 41343
// begin tmp := CostOfWeapon ( weapon ) ;
41231: LD_ADDR_VAR 0 14
41235: PUSH
41236: LD_VAR 0 18
41240: PPUSH
41241: CALL_OW 451
41245: ST_TO_ADDR
// j := GetBase ( tower ) ;
41246: LD_ADDR_VAR 0 9
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 274
41260: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41261: LD_VAR 0 9
41265: PPUSH
41266: LD_INT 1
41268: PPUSH
41269: CALL_OW 275
41273: PUSH
41274: LD_VAR 0 14
41278: PUSH
41279: LD_INT 1
41281: ARRAY
41282: GREATEREQUAL
41283: PUSH
41284: LD_VAR 0 9
41288: PPUSH
41289: LD_INT 2
41291: PPUSH
41292: CALL_OW 275
41296: PUSH
41297: LD_VAR 0 14
41301: PUSH
41302: LD_INT 2
41304: ARRAY
41305: GREATEREQUAL
41306: AND
41307: PUSH
41308: LD_VAR 0 9
41312: PPUSH
41313: LD_INT 3
41315: PPUSH
41316: CALL_OW 275
41320: PUSH
41321: LD_VAR 0 14
41325: PUSH
41326: LD_INT 3
41328: ARRAY
41329: GREATEREQUAL
41330: AND
41331: IFFALSE 41343
// result := weapon ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_VAR 0 18
41342: ST_TO_ADDR
// end ; end ;
41343: LD_VAR 0 3
41347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
// result := true ;
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_INT 1
41359: ST_TO_ADDR
// if array1 = array2 then
41360: LD_VAR 0 1
41364: PUSH
41365: LD_VAR 0 2
41369: EQUAL
41370: IFFALSE 41430
// begin for i = 1 to array1 do
41372: LD_ADDR_VAR 0 4
41376: PUSH
41377: DOUBLE
41378: LD_INT 1
41380: DEC
41381: ST_TO_ADDR
41382: LD_VAR 0 1
41386: PUSH
41387: FOR_TO
41388: IFFALSE 41426
// if array1 [ i ] <> array2 [ i ] then
41390: LD_VAR 0 1
41394: PUSH
41395: LD_VAR 0 4
41399: ARRAY
41400: PUSH
41401: LD_VAR 0 2
41405: PUSH
41406: LD_VAR 0 4
41410: ARRAY
41411: NONEQUAL
41412: IFFALSE 41424
// begin result := false ;
41414: LD_ADDR_VAR 0 3
41418: PUSH
41419: LD_INT 0
41421: ST_TO_ADDR
// break ;
41422: GO 41426
// end ;
41424: GO 41387
41426: POP
41427: POP
// end else
41428: GO 41438
// result := false ;
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_INT 0
41437: ST_TO_ADDR
// end ;
41438: LD_VAR 0 3
41442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41443: LD_INT 0
41445: PPUSH
41446: PPUSH
// if not array1 or not array2 then
41447: LD_VAR 0 1
41451: NOT
41452: PUSH
41453: LD_VAR 0 2
41457: NOT
41458: OR
41459: IFFALSE 41463
// exit ;
41461: GO 41527
// result := true ;
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 1
41470: ST_TO_ADDR
// for i = 1 to array1 do
41471: LD_ADDR_VAR 0 4
41475: PUSH
41476: DOUBLE
41477: LD_INT 1
41479: DEC
41480: ST_TO_ADDR
41481: LD_VAR 0 1
41485: PUSH
41486: FOR_TO
41487: IFFALSE 41525
// if array1 [ i ] <> array2 [ i ] then
41489: LD_VAR 0 1
41493: PUSH
41494: LD_VAR 0 4
41498: ARRAY
41499: PUSH
41500: LD_VAR 0 2
41504: PUSH
41505: LD_VAR 0 4
41509: ARRAY
41510: NONEQUAL
41511: IFFALSE 41523
// begin result := false ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_INT 0
41520: ST_TO_ADDR
// break ;
41521: GO 41525
// end ;
41523: GO 41486
41525: POP
41526: POP
// end ;
41527: LD_VAR 0 3
41531: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
41536: PPUSH
// pom := GetBase ( fac ) ;
41537: LD_ADDR_VAR 0 5
41541: PUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 274
41551: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: LD_VAR 0 2
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 2
41570: PUSH
41571: LD_INT 2
41573: ARRAY
41574: PPUSH
41575: LD_VAR 0 2
41579: PUSH
41580: LD_INT 3
41582: ARRAY
41583: PPUSH
41584: LD_VAR 0 2
41588: PUSH
41589: LD_INT 4
41591: ARRAY
41592: PPUSH
41593: CALL_OW 449
41597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_VAR 0 5
41607: PPUSH
41608: LD_INT 1
41610: PPUSH
41611: CALL_OW 275
41615: PUSH
41616: LD_VAR 0 4
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: GREATEREQUAL
41625: PUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: LD_INT 2
41633: PPUSH
41634: CALL_OW 275
41638: PUSH
41639: LD_VAR 0 4
41643: PUSH
41644: LD_INT 2
41646: ARRAY
41647: GREATEREQUAL
41648: AND
41649: PUSH
41650: LD_VAR 0 5
41654: PPUSH
41655: LD_INT 3
41657: PPUSH
41658: CALL_OW 275
41662: PUSH
41663: LD_VAR 0 4
41667: PUSH
41668: LD_INT 3
41670: ARRAY
41671: GREATEREQUAL
41672: AND
41673: ST_TO_ADDR
// end ;
41674: LD_VAR 0 3
41678: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41679: LD_INT 0
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
// pom := GetBase ( building ) ;
41685: LD_ADDR_VAR 0 3
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 274
41699: ST_TO_ADDR
// if not pom then
41700: LD_VAR 0 3
41704: NOT
41705: IFFALSE 41709
// exit ;
41707: GO 41879
// btype := GetBType ( building ) ;
41709: LD_ADDR_VAR 0 5
41713: PUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 266
41723: ST_TO_ADDR
// if btype = b_armoury then
41724: LD_VAR 0 5
41728: PUSH
41729: LD_INT 4
41731: EQUAL
41732: IFFALSE 41742
// btype := b_barracks ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_INT 5
41741: ST_TO_ADDR
// if btype = b_depot then
41742: LD_VAR 0 5
41746: PUSH
41747: LD_INT 0
41749: EQUAL
41750: IFFALSE 41760
// btype := b_warehouse ;
41752: LD_ADDR_VAR 0 5
41756: PUSH
41757: LD_INT 1
41759: ST_TO_ADDR
// if btype = b_workshop then
41760: LD_VAR 0 5
41764: PUSH
41765: LD_INT 2
41767: EQUAL
41768: IFFALSE 41778
// btype := b_factory ;
41770: LD_ADDR_VAR 0 5
41774: PUSH
41775: LD_INT 3
41777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41778: LD_ADDR_VAR 0 4
41782: PUSH
41783: LD_VAR 0 5
41787: PPUSH
41788: LD_VAR 0 1
41792: PPUSH
41793: CALL_OW 248
41797: PPUSH
41798: CALL_OW 450
41802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: LD_VAR 0 3
41812: PPUSH
41813: LD_INT 1
41815: PPUSH
41816: CALL_OW 275
41820: PUSH
41821: LD_VAR 0 4
41825: PUSH
41826: LD_INT 1
41828: ARRAY
41829: GREATEREQUAL
41830: PUSH
41831: LD_VAR 0 3
41835: PPUSH
41836: LD_INT 2
41838: PPUSH
41839: CALL_OW 275
41843: PUSH
41844: LD_VAR 0 4
41848: PUSH
41849: LD_INT 2
41851: ARRAY
41852: GREATEREQUAL
41853: AND
41854: PUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: LD_INT 3
41862: PPUSH
41863: CALL_OW 275
41867: PUSH
41868: LD_VAR 0 4
41872: PUSH
41873: LD_INT 3
41875: ARRAY
41876: GREATEREQUAL
41877: AND
41878: ST_TO_ADDR
// end ;
41879: LD_VAR 0 2
41883: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41884: LD_INT 0
41886: PPUSH
41887: PPUSH
41888: PPUSH
// pom := GetBase ( building ) ;
41889: LD_ADDR_VAR 0 4
41893: PUSH
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 274
41903: ST_TO_ADDR
// if not pom then
41904: LD_VAR 0 4
41908: NOT
41909: IFFALSE 41913
// exit ;
41911: GO 42014
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41913: LD_ADDR_VAR 0 5
41917: PUSH
41918: LD_VAR 0 2
41922: PPUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 248
41932: PPUSH
41933: CALL_OW 450
41937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41938: LD_ADDR_VAR 0 3
41942: PUSH
41943: LD_VAR 0 4
41947: PPUSH
41948: LD_INT 1
41950: PPUSH
41951: CALL_OW 275
41955: PUSH
41956: LD_VAR 0 5
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: GREATEREQUAL
41965: PUSH
41966: LD_VAR 0 4
41970: PPUSH
41971: LD_INT 2
41973: PPUSH
41974: CALL_OW 275
41978: PUSH
41979: LD_VAR 0 5
41983: PUSH
41984: LD_INT 2
41986: ARRAY
41987: GREATEREQUAL
41988: AND
41989: PUSH
41990: LD_VAR 0 4
41994: PPUSH
41995: LD_INT 3
41997: PPUSH
41998: CALL_OW 275
42002: PUSH
42003: LD_VAR 0 5
42007: PUSH
42008: LD_INT 3
42010: ARRAY
42011: GREATEREQUAL
42012: AND
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 3
42018: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
// result := false ;
42032: LD_ADDR_VAR 0 8
42036: PUSH
42037: LD_INT 0
42039: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42040: LD_VAR 0 5
42044: NOT
42045: PUSH
42046: LD_VAR 0 1
42050: NOT
42051: OR
42052: PUSH
42053: LD_VAR 0 2
42057: NOT
42058: OR
42059: PUSH
42060: LD_VAR 0 3
42064: NOT
42065: OR
42066: IFFALSE 42070
// exit ;
42068: GO 42884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42070: LD_ADDR_VAR 0 14
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: LD_VAR 0 2
42084: PPUSH
42085: LD_VAR 0 3
42089: PPUSH
42090: LD_VAR 0 4
42094: PPUSH
42095: LD_VAR 0 5
42099: PUSH
42100: LD_INT 1
42102: ARRAY
42103: PPUSH
42104: CALL_OW 248
42108: PPUSH
42109: LD_INT 0
42111: PPUSH
42112: CALL 44117 0 6
42116: ST_TO_ADDR
// if not hexes then
42117: LD_VAR 0 14
42121: NOT
42122: IFFALSE 42126
// exit ;
42124: GO 42884
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42126: LD_ADDR_VAR 0 17
42130: PUSH
42131: LD_VAR 0 5
42135: PPUSH
42136: LD_INT 22
42138: PUSH
42139: LD_VAR 0 13
42143: PPUSH
42144: CALL_OW 255
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 30
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 30
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PPUSH
42185: CALL_OW 72
42189: ST_TO_ADDR
// for i = 1 to hexes do
42190: LD_ADDR_VAR 0 9
42194: PUSH
42195: DOUBLE
42196: LD_INT 1
42198: DEC
42199: ST_TO_ADDR
42200: LD_VAR 0 14
42204: PUSH
42205: FOR_TO
42206: IFFALSE 42882
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42208: LD_ADDR_VAR 0 13
42212: PUSH
42213: LD_VAR 0 14
42217: PUSH
42218: LD_VAR 0 9
42222: ARRAY
42223: PUSH
42224: LD_INT 1
42226: ARRAY
42227: PPUSH
42228: LD_VAR 0 14
42232: PUSH
42233: LD_VAR 0 9
42237: ARRAY
42238: PUSH
42239: LD_INT 2
42241: ARRAY
42242: PPUSH
42243: CALL_OW 428
42247: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42248: LD_VAR 0 14
42252: PUSH
42253: LD_VAR 0 9
42257: ARRAY
42258: PUSH
42259: LD_INT 1
42261: ARRAY
42262: PPUSH
42263: LD_VAR 0 14
42267: PUSH
42268: LD_VAR 0 9
42272: ARRAY
42273: PUSH
42274: LD_INT 2
42276: ARRAY
42277: PPUSH
42278: CALL_OW 351
42282: PUSH
42283: LD_VAR 0 14
42287: PUSH
42288: LD_VAR 0 9
42292: ARRAY
42293: PUSH
42294: LD_INT 1
42296: ARRAY
42297: PPUSH
42298: LD_VAR 0 14
42302: PUSH
42303: LD_VAR 0 9
42307: ARRAY
42308: PUSH
42309: LD_INT 2
42311: ARRAY
42312: PPUSH
42313: CALL_OW 488
42317: NOT
42318: OR
42319: PUSH
42320: LD_VAR 0 13
42324: PPUSH
42325: CALL_OW 247
42329: PUSH
42330: LD_INT 3
42332: EQUAL
42333: OR
42334: IFFALSE 42340
// exit ;
42336: POP
42337: POP
42338: GO 42884
// if not tmp then
42340: LD_VAR 0 13
42344: NOT
42345: IFFALSE 42349
// continue ;
42347: GO 42205
// result := true ;
42349: LD_ADDR_VAR 0 8
42353: PUSH
42354: LD_INT 1
42356: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42357: LD_VAR 0 6
42361: PUSH
42362: LD_VAR 0 13
42366: PPUSH
42367: CALL_OW 247
42371: PUSH
42372: LD_INT 2
42374: EQUAL
42375: AND
42376: PUSH
42377: LD_VAR 0 13
42381: PPUSH
42382: CALL_OW 263
42386: PUSH
42387: LD_INT 1
42389: EQUAL
42390: AND
42391: IFFALSE 42555
// begin if IsDrivenBy ( tmp ) then
42393: LD_VAR 0 13
42397: PPUSH
42398: CALL_OW 311
42402: IFFALSE 42406
// continue ;
42404: GO 42205
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42406: LD_VAR 0 6
42410: PPUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 60
42416: PUSH
42417: EMPTY
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: LD_INT 55
42429: PUSH
42430: EMPTY
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PPUSH
42441: CALL_OW 72
42445: IFFALSE 42553
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42447: LD_ADDR_VAR 0 18
42451: PUSH
42452: LD_VAR 0 6
42456: PPUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 60
42462: PUSH
42463: EMPTY
42464: LIST
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: LD_INT 55
42475: PUSH
42476: EMPTY
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PPUSH
42487: CALL_OW 72
42491: PUSH
42492: LD_INT 1
42494: ARRAY
42495: ST_TO_ADDR
// if IsInUnit ( driver ) then
42496: LD_VAR 0 18
42500: PPUSH
42501: CALL_OW 310
42505: IFFALSE 42516
// ComExit ( driver ) ;
42507: LD_VAR 0 18
42511: PPUSH
42512: CALL 67897 0 1
// AddComEnterUnit ( driver , tmp ) ;
42516: LD_VAR 0 18
42520: PPUSH
42521: LD_VAR 0 13
42525: PPUSH
42526: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42530: LD_VAR 0 18
42534: PPUSH
42535: LD_VAR 0 7
42539: PPUSH
42540: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42544: LD_VAR 0 18
42548: PPUSH
42549: CALL_OW 181
// end ; continue ;
42553: GO 42205
// end ; if not cleaners or not tmp in cleaners then
42555: LD_VAR 0 6
42559: NOT
42560: PUSH
42561: LD_VAR 0 13
42565: PUSH
42566: LD_VAR 0 6
42570: IN
42571: NOT
42572: OR
42573: IFFALSE 42880
// begin if dep then
42575: LD_VAR 0 17
42579: IFFALSE 42715
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42581: LD_ADDR_VAR 0 16
42585: PUSH
42586: LD_VAR 0 17
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PPUSH
42595: CALL_OW 250
42599: PPUSH
42600: LD_VAR 0 17
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PPUSH
42609: CALL_OW 254
42613: PPUSH
42614: LD_INT 5
42616: PPUSH
42617: CALL_OW 272
42621: PUSH
42622: LD_VAR 0 17
42626: PUSH
42627: LD_INT 1
42629: ARRAY
42630: PPUSH
42631: CALL_OW 251
42635: PPUSH
42636: LD_VAR 0 17
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: PPUSH
42645: CALL_OW 254
42649: PPUSH
42650: LD_INT 5
42652: PPUSH
42653: CALL_OW 273
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42662: LD_VAR 0 16
42666: PUSH
42667: LD_INT 1
42669: ARRAY
42670: PPUSH
42671: LD_VAR 0 16
42675: PUSH
42676: LD_INT 2
42678: ARRAY
42679: PPUSH
42680: CALL_OW 488
42684: IFFALSE 42715
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42686: LD_VAR 0 13
42690: PPUSH
42691: LD_VAR 0 16
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PPUSH
42700: LD_VAR 0 16
42704: PUSH
42705: LD_INT 2
42707: ARRAY
42708: PPUSH
42709: CALL_OW 111
// continue ;
42713: GO 42205
// end ; end ; r := GetDir ( tmp ) ;
42715: LD_ADDR_VAR 0 15
42719: PUSH
42720: LD_VAR 0 13
42724: PPUSH
42725: CALL_OW 254
42729: ST_TO_ADDR
// if r = 5 then
42730: LD_VAR 0 15
42734: PUSH
42735: LD_INT 5
42737: EQUAL
42738: IFFALSE 42748
// r := 0 ;
42740: LD_ADDR_VAR 0 15
42744: PUSH
42745: LD_INT 0
42747: ST_TO_ADDR
// for j = r to 5 do
42748: LD_ADDR_VAR 0 10
42752: PUSH
42753: DOUBLE
42754: LD_VAR 0 15
42758: DEC
42759: ST_TO_ADDR
42760: LD_INT 5
42762: PUSH
42763: FOR_TO
42764: IFFALSE 42878
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42766: LD_ADDR_VAR 0 11
42770: PUSH
42771: LD_VAR 0 13
42775: PPUSH
42776: CALL_OW 250
42780: PPUSH
42781: LD_VAR 0 10
42785: PPUSH
42786: LD_INT 2
42788: PPUSH
42789: CALL_OW 272
42793: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42794: LD_ADDR_VAR 0 12
42798: PUSH
42799: LD_VAR 0 13
42803: PPUSH
42804: CALL_OW 251
42808: PPUSH
42809: LD_VAR 0 10
42813: PPUSH
42814: LD_INT 2
42816: PPUSH
42817: CALL_OW 273
42821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42822: LD_VAR 0 11
42826: PPUSH
42827: LD_VAR 0 12
42831: PPUSH
42832: CALL_OW 488
42836: PUSH
42837: LD_VAR 0 11
42841: PPUSH
42842: LD_VAR 0 12
42846: PPUSH
42847: CALL_OW 428
42851: NOT
42852: AND
42853: IFFALSE 42876
// begin ComMoveXY ( tmp , _x , _y ) ;
42855: LD_VAR 0 13
42859: PPUSH
42860: LD_VAR 0 11
42864: PPUSH
42865: LD_VAR 0 12
42869: PPUSH
42870: CALL_OW 111
// break ;
42874: GO 42878
// end ; end ;
42876: GO 42763
42878: POP
42879: POP
// end ; end ;
42880: GO 42205
42882: POP
42883: POP
// end ;
42884: LD_VAR 0 8
42888: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42889: LD_INT 0
42891: PPUSH
// result := true ;
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_INT 1
42899: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42900: LD_VAR 0 2
42904: PUSH
42905: LD_INT 24
42907: DOUBLE
42908: EQUAL
42909: IFTRUE 42919
42911: LD_INT 33
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42944
42919: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_INT 32
42927: PPUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 321
42937: PUSH
42938: LD_INT 2
42940: EQUAL
42941: ST_TO_ADDR
42942: GO 43260
42944: LD_INT 20
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42952
42950: GO 42977
42952: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: LD_INT 6
42960: PPUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 321
42970: PUSH
42971: LD_INT 2
42973: EQUAL
42974: ST_TO_ADDR
42975: GO 43260
42977: LD_INT 22
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 42991
42983: LD_INT 36
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43016
42991: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 15
42999: PPUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: CALL_OW 321
43009: PUSH
43010: LD_INT 2
43012: EQUAL
43013: ST_TO_ADDR
43014: GO 43260
43016: LD_INT 30
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43049
43024: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 20
43032: PPUSH
43033: LD_VAR 0 1
43037: PPUSH
43038: CALL_OW 321
43042: PUSH
43043: LD_INT 2
43045: EQUAL
43046: ST_TO_ADDR
43047: GO 43260
43049: LD_INT 28
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43063
43055: LD_INT 21
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43088
43063: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_INT 21
43071: PPUSH
43072: LD_VAR 0 1
43076: PPUSH
43077: CALL_OW 321
43081: PUSH
43082: LD_INT 2
43084: EQUAL
43085: ST_TO_ADDR
43086: GO 43260
43088: LD_INT 16
43090: DOUBLE
43091: EQUAL
43092: IFTRUE 43096
43094: GO 43121
43096: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43097: LD_ADDR_VAR 0 3
43101: PUSH
43102: LD_INT 84
43104: PPUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: CALL_OW 321
43114: PUSH
43115: LD_INT 2
43117: EQUAL
43118: ST_TO_ADDR
43119: GO 43260
43121: LD_INT 19
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43135
43127: LD_INT 23
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43160
43135: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: LD_INT 83
43143: PPUSH
43144: LD_VAR 0 1
43148: PPUSH
43149: CALL_OW 321
43153: PUSH
43154: LD_INT 2
43156: EQUAL
43157: ST_TO_ADDR
43158: GO 43260
43160: LD_INT 17
43162: DOUBLE
43163: EQUAL
43164: IFTRUE 43168
43166: GO 43193
43168: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_INT 39
43176: PPUSH
43177: LD_VAR 0 1
43181: PPUSH
43182: CALL_OW 321
43186: PUSH
43187: LD_INT 2
43189: EQUAL
43190: ST_TO_ADDR
43191: GO 43260
43193: LD_INT 18
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43201
43199: GO 43226
43201: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_INT 40
43209: PPUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 321
43219: PUSH
43220: LD_INT 2
43222: EQUAL
43223: ST_TO_ADDR
43224: GO 43260
43226: LD_INT 27
43228: DOUBLE
43229: EQUAL
43230: IFTRUE 43234
43232: GO 43259
43234: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_INT 35
43242: PPUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 321
43252: PUSH
43253: LD_INT 2
43255: EQUAL
43256: ST_TO_ADDR
43257: GO 43260
43259: POP
// end ;
43260: LD_VAR 0 3
43264: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43265: LD_INT 0
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
// result := false ;
43278: LD_ADDR_VAR 0 6
43282: PUSH
43283: LD_INT 0
43285: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43286: LD_VAR 0 1
43290: NOT
43291: PUSH
43292: LD_VAR 0 1
43296: PPUSH
43297: CALL_OW 266
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: IN
43312: NOT
43313: OR
43314: PUSH
43315: LD_VAR 0 2
43319: NOT
43320: OR
43321: PUSH
43322: LD_VAR 0 5
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: LD_INT 4
43341: PUSH
43342: LD_INT 5
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: IN
43353: NOT
43354: OR
43355: PUSH
43356: LD_VAR 0 3
43360: PPUSH
43361: LD_VAR 0 4
43365: PPUSH
43366: CALL_OW 488
43370: NOT
43371: OR
43372: IFFALSE 43376
// exit ;
43374: GO 44112
// side := GetSide ( depot ) ;
43376: LD_ADDR_VAR 0 9
43380: PUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 255
43390: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43391: LD_VAR 0 9
43395: PPUSH
43396: LD_VAR 0 2
43400: PPUSH
43401: CALL 42889 0 2
43405: NOT
43406: IFFALSE 43410
// exit ;
43408: GO 44112
// pom := GetBase ( depot ) ;
43410: LD_ADDR_VAR 0 10
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 274
43424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43425: LD_ADDR_VAR 0 11
43429: PUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: LD_VAR 0 1
43439: PPUSH
43440: CALL_OW 248
43444: PPUSH
43445: CALL_OW 450
43449: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43450: LD_VAR 0 10
43454: PPUSH
43455: LD_INT 1
43457: PPUSH
43458: CALL_OW 275
43462: PUSH
43463: LD_VAR 0 11
43467: PUSH
43468: LD_INT 1
43470: ARRAY
43471: GREATEREQUAL
43472: PUSH
43473: LD_VAR 0 10
43477: PPUSH
43478: LD_INT 2
43480: PPUSH
43481: CALL_OW 275
43485: PUSH
43486: LD_VAR 0 11
43490: PUSH
43491: LD_INT 2
43493: ARRAY
43494: GREATEREQUAL
43495: AND
43496: PUSH
43497: LD_VAR 0 10
43501: PPUSH
43502: LD_INT 3
43504: PPUSH
43505: CALL_OW 275
43509: PUSH
43510: LD_VAR 0 11
43514: PUSH
43515: LD_INT 3
43517: ARRAY
43518: GREATEREQUAL
43519: AND
43520: NOT
43521: IFFALSE 43525
// exit ;
43523: GO 44112
// if GetBType ( depot ) = b_depot then
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 266
43534: PUSH
43535: LD_INT 0
43537: EQUAL
43538: IFFALSE 43550
// dist := 28 else
43540: LD_ADDR_VAR 0 14
43544: PUSH
43545: LD_INT 28
43547: ST_TO_ADDR
43548: GO 43558
// dist := 36 ;
43550: LD_ADDR_VAR 0 14
43554: PUSH
43555: LD_INT 36
43557: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43558: LD_VAR 0 1
43562: PPUSH
43563: LD_VAR 0 3
43567: PPUSH
43568: LD_VAR 0 4
43572: PPUSH
43573: CALL_OW 297
43577: PUSH
43578: LD_VAR 0 14
43582: GREATER
43583: IFFALSE 43587
// exit ;
43585: GO 44112
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43587: LD_ADDR_VAR 0 12
43591: PUSH
43592: LD_VAR 0 2
43596: PPUSH
43597: LD_VAR 0 3
43601: PPUSH
43602: LD_VAR 0 4
43606: PPUSH
43607: LD_VAR 0 5
43611: PPUSH
43612: LD_VAR 0 1
43616: PPUSH
43617: CALL_OW 248
43621: PPUSH
43622: LD_INT 0
43624: PPUSH
43625: CALL 44117 0 6
43629: ST_TO_ADDR
// if not hexes then
43630: LD_VAR 0 12
43634: NOT
43635: IFFALSE 43639
// exit ;
43637: GO 44112
// hex := GetHexInfo ( x , y ) ;
43639: LD_ADDR_VAR 0 15
43643: PUSH
43644: LD_VAR 0 3
43648: PPUSH
43649: LD_VAR 0 4
43653: PPUSH
43654: CALL_OW 546
43658: ST_TO_ADDR
// if hex [ 1 ] then
43659: LD_VAR 0 15
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: IFFALSE 43671
// exit ;
43669: GO 44112
// height := hex [ 2 ] ;
43671: LD_ADDR_VAR 0 13
43675: PUSH
43676: LD_VAR 0 15
43680: PUSH
43681: LD_INT 2
43683: ARRAY
43684: ST_TO_ADDR
// for i = 1 to hexes do
43685: LD_ADDR_VAR 0 7
43689: PUSH
43690: DOUBLE
43691: LD_INT 1
43693: DEC
43694: ST_TO_ADDR
43695: LD_VAR 0 12
43699: PUSH
43700: FOR_TO
43701: IFFALSE 44031
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43703: LD_VAR 0 12
43707: PUSH
43708: LD_VAR 0 7
43712: ARRAY
43713: PUSH
43714: LD_INT 1
43716: ARRAY
43717: PPUSH
43718: LD_VAR 0 12
43722: PUSH
43723: LD_VAR 0 7
43727: ARRAY
43728: PUSH
43729: LD_INT 2
43731: ARRAY
43732: PPUSH
43733: CALL_OW 488
43737: NOT
43738: PUSH
43739: LD_VAR 0 12
43743: PUSH
43744: LD_VAR 0 7
43748: ARRAY
43749: PUSH
43750: LD_INT 1
43752: ARRAY
43753: PPUSH
43754: LD_VAR 0 12
43758: PUSH
43759: LD_VAR 0 7
43763: ARRAY
43764: PUSH
43765: LD_INT 2
43767: ARRAY
43768: PPUSH
43769: CALL_OW 428
43773: PUSH
43774: LD_INT 0
43776: GREATER
43777: OR
43778: PUSH
43779: LD_VAR 0 12
43783: PUSH
43784: LD_VAR 0 7
43788: ARRAY
43789: PUSH
43790: LD_INT 1
43792: ARRAY
43793: PPUSH
43794: LD_VAR 0 12
43798: PUSH
43799: LD_VAR 0 7
43803: ARRAY
43804: PUSH
43805: LD_INT 2
43807: ARRAY
43808: PPUSH
43809: CALL_OW 351
43813: OR
43814: IFFALSE 43820
// exit ;
43816: POP
43817: POP
43818: GO 44112
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43820: LD_ADDR_VAR 0 8
43824: PUSH
43825: LD_VAR 0 12
43829: PUSH
43830: LD_VAR 0 7
43834: ARRAY
43835: PUSH
43836: LD_INT 1
43838: ARRAY
43839: PPUSH
43840: LD_VAR 0 12
43844: PUSH
43845: LD_VAR 0 7
43849: ARRAY
43850: PUSH
43851: LD_INT 2
43853: ARRAY
43854: PPUSH
43855: CALL_OW 546
43859: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43860: LD_VAR 0 8
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PUSH
43869: LD_VAR 0 8
43873: PUSH
43874: LD_INT 2
43876: ARRAY
43877: PUSH
43878: LD_VAR 0 13
43882: PUSH
43883: LD_INT 2
43885: PLUS
43886: GREATER
43887: OR
43888: PUSH
43889: LD_VAR 0 8
43893: PUSH
43894: LD_INT 2
43896: ARRAY
43897: PUSH
43898: LD_VAR 0 13
43902: PUSH
43903: LD_INT 2
43905: MINUS
43906: LESS
43907: OR
43908: PUSH
43909: LD_VAR 0 8
43913: PUSH
43914: LD_INT 3
43916: ARRAY
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 8
43923: PUSH
43924: LD_INT 9
43926: PUSH
43927: LD_INT 10
43929: PUSH
43930: LD_INT 11
43932: PUSH
43933: LD_INT 12
43935: PUSH
43936: LD_INT 13
43938: PUSH
43939: LD_INT 16
43941: PUSH
43942: LD_INT 17
43944: PUSH
43945: LD_INT 18
43947: PUSH
43948: LD_INT 19
43950: PUSH
43951: LD_INT 20
43953: PUSH
43954: LD_INT 21
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: IN
43972: NOT
43973: OR
43974: PUSH
43975: LD_VAR 0 8
43979: PUSH
43980: LD_INT 5
43982: ARRAY
43983: NOT
43984: OR
43985: PUSH
43986: LD_VAR 0 8
43990: PUSH
43991: LD_INT 6
43993: ARRAY
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 7
44003: PUSH
44004: LD_INT 9
44006: PUSH
44007: LD_INT 10
44009: PUSH
44010: LD_INT 11
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: IN
44021: NOT
44022: OR
44023: IFFALSE 44029
// exit ;
44025: POP
44026: POP
44027: GO 44112
// end ;
44029: GO 43700
44031: POP
44032: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44033: LD_VAR 0 9
44037: PPUSH
44038: LD_VAR 0 3
44042: PPUSH
44043: LD_VAR 0 4
44047: PPUSH
44048: LD_INT 20
44050: PPUSH
44051: CALL 36064 0 4
44055: PUSH
44056: LD_INT 4
44058: ARRAY
44059: IFFALSE 44063
// exit ;
44061: GO 44112
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44063: LD_VAR 0 2
44067: PUSH
44068: LD_INT 29
44070: PUSH
44071: LD_INT 30
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: IN
44078: PUSH
44079: LD_VAR 0 3
44083: PPUSH
44084: LD_VAR 0 4
44088: PPUSH
44089: LD_VAR 0 9
44093: PPUSH
44094: CALL_OW 440
44098: NOT
44099: AND
44100: IFFALSE 44104
// exit ;
44102: GO 44112
// result := true ;
44104: LD_ADDR_VAR 0 6
44108: PUSH
44109: LD_INT 1
44111: ST_TO_ADDR
// end ;
44112: LD_VAR 0 6
44116: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44117: LD_INT 0
44119: PPUSH
44120: PPUSH
44121: PPUSH
44122: PPUSH
44123: PPUSH
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
// result = [ ] ;
44177: LD_ADDR_VAR 0 7
44181: PUSH
44182: EMPTY
44183: ST_TO_ADDR
// temp_list = [ ] ;
44184: LD_ADDR_VAR 0 9
44188: PUSH
44189: EMPTY
44190: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44191: LD_VAR 0 4
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 4
44210: PUSH
44211: LD_INT 5
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: IN
44222: NOT
44223: PUSH
44224: LD_VAR 0 1
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: IN
44239: PUSH
44240: LD_VAR 0 5
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: IN
44259: NOT
44260: AND
44261: OR
44262: IFFALSE 44266
// exit ;
44264: GO 62657
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44266: LD_VAR 0 1
44270: PUSH
44271: LD_INT 6
44273: PUSH
44274: LD_INT 7
44276: PUSH
44277: LD_INT 8
44279: PUSH
44280: LD_INT 13
44282: PUSH
44283: LD_INT 12
44285: PUSH
44286: LD_INT 15
44288: PUSH
44289: LD_INT 11
44291: PUSH
44292: LD_INT 14
44294: PUSH
44295: LD_INT 10
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: IN
44309: IFFALSE 44319
// btype = b_lab ;
44311: LD_ADDR_VAR 0 1
44315: PUSH
44316: LD_INT 6
44318: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44319: LD_VAR 0 6
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: IN
44338: NOT
44339: PUSH
44340: LD_VAR 0 1
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 3
44356: PUSH
44357: LD_INT 6
44359: PUSH
44360: LD_INT 36
44362: PUSH
44363: LD_INT 4
44365: PUSH
44366: LD_INT 5
44368: PUSH
44369: LD_INT 31
44371: PUSH
44372: LD_INT 32
44374: PUSH
44375: LD_INT 33
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: IN
44391: NOT
44392: PUSH
44393: LD_VAR 0 6
44397: PUSH
44398: LD_INT 1
44400: EQUAL
44401: AND
44402: OR
44403: PUSH
44404: LD_VAR 0 1
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: LD_INT 3
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: IN
44419: NOT
44420: PUSH
44421: LD_VAR 0 6
44425: PUSH
44426: LD_INT 2
44428: EQUAL
44429: AND
44430: OR
44431: IFFALSE 44441
// mode = 0 ;
44433: LD_ADDR_VAR 0 6
44437: PUSH
44438: LD_INT 0
44440: ST_TO_ADDR
// case mode of 0 :
44441: LD_VAR 0 6
44445: PUSH
44446: LD_INT 0
44448: DOUBLE
44449: EQUAL
44450: IFTRUE 44454
44452: GO 55907
44454: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44455: LD_ADDR_VAR 0 11
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44648: LD_ADDR_VAR 0 12
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44844: LD_ADDR_VAR 0 13
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 3
45015: NEG
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45043: LD_ADDR_VAR 0 14
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45239: LD_ADDR_VAR 0 15
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45432: LD_ADDR_VAR 0 16
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45625: LD_ADDR_VAR 0 17
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45855: LD_ADDR_VAR 0 18
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46085: LD_ADDR_VAR 0 19
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46315: LD_ADDR_VAR 0 20
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46545: LD_ADDR_VAR 0 21
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46775: LD_ADDR_VAR 0 22
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47005: LD_ADDR_VAR 0 23
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47285: LD_ADDR_VAR 0 24
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 3
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47561: LD_ADDR_VAR 0 25
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47835: LD_ADDR_VAR 0 26
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48111: LD_ADDR_VAR 0 27
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48391: LD_ADDR_VAR 0 28
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48673: LD_ADDR_VAR 0 29
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 3
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48952: LD_ADDR_VAR 0 30
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49230: LD_ADDR_VAR 0 31
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49508: LD_ADDR_VAR 0 32
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49786: LD_ADDR_VAR 0 33
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50065: LD_ADDR_VAR 0 34
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50345: LD_ADDR_VAR 0 35
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50457: LD_ADDR_VAR 0 36
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50569: LD_ADDR_VAR 0 37
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50681: LD_ADDR_VAR 0 38
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50793: LD_ADDR_VAR 0 39
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50905: LD_ADDR_VAR 0 40
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51017: LD_ADDR_VAR 0 41
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51367: LD_ADDR_VAR 0 42
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51717: LD_ADDR_VAR 0 43
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52065: LD_ADDR_VAR 0 44
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52415: LD_ADDR_VAR 0 45
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52765: LD_ADDR_VAR 0 46
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 3
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53113: LD_ADDR_VAR 0 47
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53264: LD_ADDR_VAR 0 48
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53411: LD_ADDR_VAR 0 49
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53555: LD_ADDR_VAR 0 50
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53699: LD_ADDR_VAR 0 51
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53846: LD_ADDR_VAR 0 52
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53997: LD_ADDR_VAR 0 53
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54227: LD_ADDR_VAR 0 54
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54457: LD_ADDR_VAR 0 55
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54687: LD_ADDR_VAR 0 56
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54917: LD_ADDR_VAR 0 57
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55147: LD_ADDR_VAR 0 58
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55377: LD_ADDR_VAR 0 59
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55465: LD_ADDR_VAR 0 60
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55553: LD_ADDR_VAR 0 61
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55641: LD_ADDR_VAR 0 62
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55729: LD_ADDR_VAR 0 63
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55817: LD_ADDR_VAR 0 64
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// end ; 1 :
55905: GO 61802
55907: LD_INT 1
55909: DOUBLE
55910: EQUAL
55911: IFTRUE 55915
55913: GO 58538
55915: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55916: LD_ADDR_VAR 0 11
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55960: LD_ADDR_VAR 0 12
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56001: LD_ADDR_VAR 0 13
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56041: LD_ADDR_VAR 0 14
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56082: LD_ADDR_VAR 0 15
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56126: LD_ADDR_VAR 0 16
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56172: LD_ADDR_VAR 0 17
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56216: LD_ADDR_VAR 0 18
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56257: LD_ADDR_VAR 0 19
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56297: LD_ADDR_VAR 0 20
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56338: LD_ADDR_VAR 0 21
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56382: LD_ADDR_VAR 0 22
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: NEG
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56428: LD_ADDR_VAR 0 23
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 4
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56472: LD_ADDR_VAR 0 24
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56513: LD_ADDR_VAR 0 25
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56553: LD_ADDR_VAR 0 26
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56594: LD_ADDR_VAR 0 27
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56638: LD_ADDR_VAR 0 28
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56684: LD_ADDR_VAR 0 29
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 4
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 4
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 5
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 5
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 6
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 6
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 5
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56839: LD_ADDR_VAR 0 30
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 4
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 4
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 5
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 5
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 5
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 6
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 6
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56982: LD_ADDR_VAR 0 31
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: LD_INT 4
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 4
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 6
57079: PUSH
57080: LD_INT 5
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 6
57089: PUSH
57090: LD_INT 6
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 5
57099: PUSH
57100: LD_INT 6
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57121: LD_ADDR_VAR 0 32
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 5
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 6
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 6
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 5
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57264: LD_ADDR_VAR 0 33
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 4
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 5
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 5
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 5
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 6
57384: NEG
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 6
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57419: LD_ADDR_VAR 0 34
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: LD_INT 4
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 4
57486: NEG
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 4
57498: NEG
57499: PUSH
57500: LD_INT 5
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 5
57510: NEG
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 5
57522: NEG
57523: PUSH
57524: LD_INT 5
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 5
57534: NEG
57535: PUSH
57536: LD_INT 6
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 6
57546: NEG
57547: PUSH
57548: LD_INT 5
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 6
57558: NEG
57559: PUSH
57560: LD_INT 6
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57582: LD_ADDR_VAR 0 41
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57626: LD_ADDR_VAR 0 42
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57667: LD_ADDR_VAR 0 43
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57707: LD_ADDR_VAR 0 44
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57748: LD_ADDR_VAR 0 45
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57792: LD_ADDR_VAR 0 46
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57838: LD_ADDR_VAR 0 47
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57871: LD_ADDR_VAR 0 48
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57902: LD_ADDR_VAR 0 49
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57931: LD_ADDR_VAR 0 50
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57960: LD_ADDR_VAR 0 51
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57991: LD_ADDR_VAR 0 52
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58024: LD_ADDR_VAR 0 53
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58068: LD_ADDR_VAR 0 54
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58109: LD_ADDR_VAR 0 55
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58149: LD_ADDR_VAR 0 56
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58190: LD_ADDR_VAR 0 57
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58234: LD_ADDR_VAR 0 58
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58280: LD_ADDR_VAR 0 59
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58324: LD_ADDR_VAR 0 60
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58365: LD_ADDR_VAR 0 61
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58405: LD_ADDR_VAR 0 62
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58446: LD_ADDR_VAR 0 63
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58490: LD_ADDR_VAR 0 64
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// end ; 2 :
58536: GO 61802
58538: LD_INT 2
58540: DOUBLE
58541: EQUAL
58542: IFTRUE 58546
58544: GO 61801
58546: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58547: LD_ADDR_VAR 0 29
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 5
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 5
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 4
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 5
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 4
58932: NEG
58933: PUSH
58934: LD_INT 4
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: NEG
58945: PUSH
58946: LD_INT 5
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 4
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 5
58992: NEG
58993: PUSH
58994: LD_INT 4
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 5
59004: NEG
59005: PUSH
59006: LD_INT 5
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: LD_INT 5
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: NEG
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59085: LD_ADDR_VAR 0 30
59089: PUSH
59090: LD_INT 4
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: PUSH
59133: LD_INT 5
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 5
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 4
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 4
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 4
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 5
59354: NEG
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: LD_INT 4
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 4
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 5
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: LD_INT 4
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 5
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59632: LD_ADDR_VAR 0 31
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 5
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 5
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 4
59846: NEG
59847: PUSH
59848: LD_INT 5
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: NEG
59895: PUSH
59896: LD_INT 4
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: LD_INT 5
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: NEG
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 5
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 5
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 5
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60182: LD_ADDR_VAR 0 32
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 4
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 5
60256: NEG
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 5
60268: NEG
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: NEG
60364: PUSH
60365: LD_INT 4
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 5
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 5
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: LD_INT 4
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 4
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: LD_INT 5
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 5
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: LD_INT 5
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60729: LD_ADDR_VAR 0 33
60733: PUSH
60734: LD_INT 4
60736: NEG
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: LD_INT 5
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: NEG
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 5
60796: NEG
60797: PUSH
60798: LD_INT 4
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 5
60808: NEG
60809: PUSH
60810: LD_INT 5
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: LD_INT 5
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 5
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 5
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 5
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 4
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 4
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 4
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 4
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 5
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 5
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61267: LD_ADDR_VAR 0 34
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 4
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 4
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 5
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: LD_INT 5
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 4
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 4
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: LD_INT 4
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 5
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 4
61509: PUSH
61510: LD_INT 5
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 5
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 5
61708: NEG
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 5
61719: NEG
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 5
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// end ; end ;
61799: GO 61802
61801: POP
// case btype of b_depot , b_warehouse :
61802: LD_VAR 0 1
61806: PUSH
61807: LD_INT 0
61809: DOUBLE
61810: EQUAL
61811: IFTRUE 61821
61813: LD_INT 1
61815: DOUBLE
61816: EQUAL
61817: IFTRUE 61821
61819: GO 62022
61821: POP
// case nation of nation_american :
61822: LD_VAR 0 5
61826: PUSH
61827: LD_INT 1
61829: DOUBLE
61830: EQUAL
61831: IFTRUE 61835
61833: GO 61891
61835: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61836: LD_ADDR_VAR 0 9
61840: PUSH
61841: LD_VAR 0 11
61845: PUSH
61846: LD_VAR 0 12
61850: PUSH
61851: LD_VAR 0 13
61855: PUSH
61856: LD_VAR 0 14
61860: PUSH
61861: LD_VAR 0 15
61865: PUSH
61866: LD_VAR 0 16
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: PUSH
61879: LD_VAR 0 4
61883: PUSH
61884: LD_INT 1
61886: PLUS
61887: ARRAY
61888: ST_TO_ADDR
61889: GO 62020
61891: LD_INT 2
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61899
61897: GO 61955
61899: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61900: LD_ADDR_VAR 0 9
61904: PUSH
61905: LD_VAR 0 17
61909: PUSH
61910: LD_VAR 0 18
61914: PUSH
61915: LD_VAR 0 19
61919: PUSH
61920: LD_VAR 0 20
61924: PUSH
61925: LD_VAR 0 21
61929: PUSH
61930: LD_VAR 0 22
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: PUSH
61943: LD_VAR 0 4
61947: PUSH
61948: LD_INT 1
61950: PLUS
61951: ARRAY
61952: ST_TO_ADDR
61953: GO 62020
61955: LD_INT 3
61957: DOUBLE
61958: EQUAL
61959: IFTRUE 61963
61961: GO 62019
61963: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61964: LD_ADDR_VAR 0 9
61968: PUSH
61969: LD_VAR 0 23
61973: PUSH
61974: LD_VAR 0 24
61978: PUSH
61979: LD_VAR 0 25
61983: PUSH
61984: LD_VAR 0 26
61988: PUSH
61989: LD_VAR 0 27
61993: PUSH
61994: LD_VAR 0 28
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: PUSH
62007: LD_VAR 0 4
62011: PUSH
62012: LD_INT 1
62014: PLUS
62015: ARRAY
62016: ST_TO_ADDR
62017: GO 62020
62019: POP
62020: GO 62575
62022: LD_INT 2
62024: DOUBLE
62025: EQUAL
62026: IFTRUE 62036
62028: LD_INT 3
62030: DOUBLE
62031: EQUAL
62032: IFTRUE 62036
62034: GO 62092
62036: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62037: LD_ADDR_VAR 0 9
62041: PUSH
62042: LD_VAR 0 29
62046: PUSH
62047: LD_VAR 0 30
62051: PUSH
62052: LD_VAR 0 31
62056: PUSH
62057: LD_VAR 0 32
62061: PUSH
62062: LD_VAR 0 33
62066: PUSH
62067: LD_VAR 0 34
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: PUSH
62080: LD_VAR 0 4
62084: PUSH
62085: LD_INT 1
62087: PLUS
62088: ARRAY
62089: ST_TO_ADDR
62090: GO 62575
62092: LD_INT 16
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62154
62098: LD_INT 17
62100: DOUBLE
62101: EQUAL
62102: IFTRUE 62154
62104: LD_INT 18
62106: DOUBLE
62107: EQUAL
62108: IFTRUE 62154
62110: LD_INT 19
62112: DOUBLE
62113: EQUAL
62114: IFTRUE 62154
62116: LD_INT 22
62118: DOUBLE
62119: EQUAL
62120: IFTRUE 62154
62122: LD_INT 20
62124: DOUBLE
62125: EQUAL
62126: IFTRUE 62154
62128: LD_INT 21
62130: DOUBLE
62131: EQUAL
62132: IFTRUE 62154
62134: LD_INT 23
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62154
62140: LD_INT 24
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62154
62146: LD_INT 25
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62154
62152: GO 62210
62154: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62155: LD_ADDR_VAR 0 9
62159: PUSH
62160: LD_VAR 0 35
62164: PUSH
62165: LD_VAR 0 36
62169: PUSH
62170: LD_VAR 0 37
62174: PUSH
62175: LD_VAR 0 38
62179: PUSH
62180: LD_VAR 0 39
62184: PUSH
62185: LD_VAR 0 40
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 4
62202: PUSH
62203: LD_INT 1
62205: PLUS
62206: ARRAY
62207: ST_TO_ADDR
62208: GO 62575
62210: LD_INT 6
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62266
62216: LD_INT 7
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62266
62222: LD_INT 8
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62266
62228: LD_INT 13
62230: DOUBLE
62231: EQUAL
62232: IFTRUE 62266
62234: LD_INT 12
62236: DOUBLE
62237: EQUAL
62238: IFTRUE 62266
62240: LD_INT 15
62242: DOUBLE
62243: EQUAL
62244: IFTRUE 62266
62246: LD_INT 11
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62266
62252: LD_INT 14
62254: DOUBLE
62255: EQUAL
62256: IFTRUE 62266
62258: LD_INT 10
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62266
62264: GO 62322
62266: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62267: LD_ADDR_VAR 0 9
62271: PUSH
62272: LD_VAR 0 41
62276: PUSH
62277: LD_VAR 0 42
62281: PUSH
62282: LD_VAR 0 43
62286: PUSH
62287: LD_VAR 0 44
62291: PUSH
62292: LD_VAR 0 45
62296: PUSH
62297: LD_VAR 0 46
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: PUSH
62310: LD_VAR 0 4
62314: PUSH
62315: LD_INT 1
62317: PLUS
62318: ARRAY
62319: ST_TO_ADDR
62320: GO 62575
62322: LD_INT 36
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62330
62328: GO 62386
62330: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62331: LD_ADDR_VAR 0 9
62335: PUSH
62336: LD_VAR 0 47
62340: PUSH
62341: LD_VAR 0 48
62345: PUSH
62346: LD_VAR 0 49
62350: PUSH
62351: LD_VAR 0 50
62355: PUSH
62356: LD_VAR 0 51
62360: PUSH
62361: LD_VAR 0 52
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: PUSH
62374: LD_VAR 0 4
62378: PUSH
62379: LD_INT 1
62381: PLUS
62382: ARRAY
62383: ST_TO_ADDR
62384: GO 62575
62386: LD_INT 4
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62412
62392: LD_INT 5
62394: DOUBLE
62395: EQUAL
62396: IFTRUE 62412
62398: LD_INT 34
62400: DOUBLE
62401: EQUAL
62402: IFTRUE 62412
62404: LD_INT 37
62406: DOUBLE
62407: EQUAL
62408: IFTRUE 62412
62410: GO 62468
62412: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62413: LD_ADDR_VAR 0 9
62417: PUSH
62418: LD_VAR 0 53
62422: PUSH
62423: LD_VAR 0 54
62427: PUSH
62428: LD_VAR 0 55
62432: PUSH
62433: LD_VAR 0 56
62437: PUSH
62438: LD_VAR 0 57
62442: PUSH
62443: LD_VAR 0 58
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: PUSH
62456: LD_VAR 0 4
62460: PUSH
62461: LD_INT 1
62463: PLUS
62464: ARRAY
62465: ST_TO_ADDR
62466: GO 62575
62468: LD_INT 31
62470: DOUBLE
62471: EQUAL
62472: IFTRUE 62518
62474: LD_INT 32
62476: DOUBLE
62477: EQUAL
62478: IFTRUE 62518
62480: LD_INT 33
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62518
62486: LD_INT 27
62488: DOUBLE
62489: EQUAL
62490: IFTRUE 62518
62492: LD_INT 26
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62518
62498: LD_INT 28
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62518
62504: LD_INT 29
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62518
62510: LD_INT 30
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62574
62518: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62519: LD_ADDR_VAR 0 9
62523: PUSH
62524: LD_VAR 0 59
62528: PUSH
62529: LD_VAR 0 60
62533: PUSH
62534: LD_VAR 0 61
62538: PUSH
62539: LD_VAR 0 62
62543: PUSH
62544: LD_VAR 0 63
62548: PUSH
62549: LD_VAR 0 64
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: PUSH
62562: LD_VAR 0 4
62566: PUSH
62567: LD_INT 1
62569: PLUS
62570: ARRAY
62571: ST_TO_ADDR
62572: GO 62575
62574: POP
// temp_list2 = [ ] ;
62575: LD_ADDR_VAR 0 10
62579: PUSH
62580: EMPTY
62581: ST_TO_ADDR
// for i in temp_list do
62582: LD_ADDR_VAR 0 8
62586: PUSH
62587: LD_VAR 0 9
62591: PUSH
62592: FOR_IN
62593: IFFALSE 62645
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62595: LD_ADDR_VAR 0 10
62599: PUSH
62600: LD_VAR 0 10
62604: PUSH
62605: LD_VAR 0 8
62609: PUSH
62610: LD_INT 1
62612: ARRAY
62613: PUSH
62614: LD_VAR 0 2
62618: PLUS
62619: PUSH
62620: LD_VAR 0 8
62624: PUSH
62625: LD_INT 2
62627: ARRAY
62628: PUSH
62629: LD_VAR 0 3
62633: PLUS
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: ADD
62642: ST_TO_ADDR
62643: GO 62592
62645: POP
62646: POP
// result = temp_list2 ;
62647: LD_ADDR_VAR 0 7
62651: PUSH
62652: LD_VAR 0 10
62656: ST_TO_ADDR
// end ;
62657: LD_VAR 0 7
62661: RET
// export function EnemyInRange ( unit , dist ) ; begin
62662: LD_INT 0
62664: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62665: LD_ADDR_VAR 0 3
62669: PUSH
62670: LD_VAR 0 1
62674: PPUSH
62675: CALL_OW 255
62679: PPUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 250
62689: PPUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: CALL_OW 251
62699: PPUSH
62700: LD_VAR 0 2
62704: PPUSH
62705: CALL 36064 0 4
62709: PUSH
62710: LD_INT 4
62712: ARRAY
62713: ST_TO_ADDR
// end ;
62714: LD_VAR 0 3
62718: RET
// export function PlayerSeeMe ( unit ) ; begin
62719: LD_INT 0
62721: PPUSH
// result := See ( your_side , unit ) ;
62722: LD_ADDR_VAR 0 2
62726: PUSH
62727: LD_OWVAR 2
62731: PPUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: CALL_OW 292
62741: ST_TO_ADDR
// end ;
62742: LD_VAR 0 2
62746: RET
// export function ReverseDir ( unit ) ; begin
62747: LD_INT 0
62749: PPUSH
// if not unit then
62750: LD_VAR 0 1
62754: NOT
62755: IFFALSE 62759
// exit ;
62757: GO 62782
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62759: LD_ADDR_VAR 0 2
62763: PUSH
62764: LD_VAR 0 1
62768: PPUSH
62769: CALL_OW 254
62773: PUSH
62774: LD_INT 3
62776: PLUS
62777: PUSH
62778: LD_INT 6
62780: MOD
62781: ST_TO_ADDR
// end ;
62782: LD_VAR 0 2
62786: RET
// export function ReverseArray ( array ) ; var i ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
// if not array then
62791: LD_VAR 0 1
62795: NOT
62796: IFFALSE 62800
// exit ;
62798: GO 62855
// result := [ ] ;
62800: LD_ADDR_VAR 0 2
62804: PUSH
62805: EMPTY
62806: ST_TO_ADDR
// for i := array downto 1 do
62807: LD_ADDR_VAR 0 3
62811: PUSH
62812: DOUBLE
62813: LD_VAR 0 1
62817: INC
62818: ST_TO_ADDR
62819: LD_INT 1
62821: PUSH
62822: FOR_DOWNTO
62823: IFFALSE 62853
// result := Join ( result , array [ i ] ) ;
62825: LD_ADDR_VAR 0 2
62829: PUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: LD_VAR 0 1
62839: PUSH
62840: LD_VAR 0 3
62844: ARRAY
62845: PPUSH
62846: CALL 67499 0 2
62850: ST_TO_ADDR
62851: GO 62822
62853: POP
62854: POP
// end ;
62855: LD_VAR 0 2
62859: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62860: LD_INT 0
62862: PPUSH
62863: PPUSH
62864: PPUSH
62865: PPUSH
62866: PPUSH
62867: PPUSH
// if not unit or not hexes then
62868: LD_VAR 0 1
62872: NOT
62873: PUSH
62874: LD_VAR 0 2
62878: NOT
62879: OR
62880: IFFALSE 62884
// exit ;
62882: GO 63007
// dist := 9999 ;
62884: LD_ADDR_VAR 0 5
62888: PUSH
62889: LD_INT 9999
62891: ST_TO_ADDR
// for i = 1 to hexes do
62892: LD_ADDR_VAR 0 4
62896: PUSH
62897: DOUBLE
62898: LD_INT 1
62900: DEC
62901: ST_TO_ADDR
62902: LD_VAR 0 2
62906: PUSH
62907: FOR_TO
62908: IFFALSE 62995
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62910: LD_ADDR_VAR 0 6
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_VAR 0 4
62929: ARRAY
62930: PUSH
62931: LD_INT 1
62933: ARRAY
62934: PPUSH
62935: LD_VAR 0 2
62939: PUSH
62940: LD_VAR 0 4
62944: ARRAY
62945: PUSH
62946: LD_INT 2
62948: ARRAY
62949: PPUSH
62950: CALL_OW 297
62954: ST_TO_ADDR
// if tdist < dist then
62955: LD_VAR 0 6
62959: PUSH
62960: LD_VAR 0 5
62964: LESS
62965: IFFALSE 62993
// begin hex := hexes [ i ] ;
62967: LD_ADDR_VAR 0 8
62971: PUSH
62972: LD_VAR 0 2
62976: PUSH
62977: LD_VAR 0 4
62981: ARRAY
62982: ST_TO_ADDR
// dist := tdist ;
62983: LD_ADDR_VAR 0 5
62987: PUSH
62988: LD_VAR 0 6
62992: ST_TO_ADDR
// end ; end ;
62993: GO 62907
62995: POP
62996: POP
// result := hex ;
62997: LD_ADDR_VAR 0 3
63001: PUSH
63002: LD_VAR 0 8
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 3
63011: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63016: LD_VAR 0 1
63020: NOT
63021: PUSH
63022: LD_VAR 0 1
63026: PUSH
63027: LD_INT 21
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 23
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PPUSH
63051: CALL_OW 69
63055: IN
63056: NOT
63057: OR
63058: IFFALSE 63062
// exit ;
63060: GO 63109
// for i = 1 to 3 do
63062: LD_ADDR_VAR 0 3
63066: PUSH
63067: DOUBLE
63068: LD_INT 1
63070: DEC
63071: ST_TO_ADDR
63072: LD_INT 3
63074: PUSH
63075: FOR_TO
63076: IFFALSE 63107
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63078: LD_VAR 0 1
63082: PPUSH
63083: CALL_OW 250
63087: PPUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 251
63097: PPUSH
63098: LD_INT 1
63100: PPUSH
63101: CALL_OW 453
63105: GO 63075
63107: POP
63108: POP
// end ;
63109: LD_VAR 0 2
63113: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
63119: PPUSH
63120: PPUSH
63121: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63122: LD_VAR 0 1
63126: NOT
63127: PUSH
63128: LD_VAR 0 2
63132: NOT
63133: OR
63134: PUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 314
63144: OR
63145: IFFALSE 63149
// exit ;
63147: GO 63616
// if GetLives ( i ) < 250 then
63149: LD_VAR 0 4
63153: PPUSH
63154: CALL_OW 256
63158: PUSH
63159: LD_INT 250
63161: LESS
63162: IFFALSE 63175
// begin ComAutodestruct ( i ) ;
63164: LD_VAR 0 4
63168: PPUSH
63169: CALL 63012 0 1
// exit ;
63173: GO 63616
// end ; x := GetX ( enemy_unit ) ;
63175: LD_ADDR_VAR 0 7
63179: PUSH
63180: LD_VAR 0 2
63184: PPUSH
63185: CALL_OW 250
63189: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63190: LD_ADDR_VAR 0 8
63194: PUSH
63195: LD_VAR 0 2
63199: PPUSH
63200: CALL_OW 251
63204: ST_TO_ADDR
// if not x or not y then
63205: LD_VAR 0 7
63209: NOT
63210: PUSH
63211: LD_VAR 0 8
63215: NOT
63216: OR
63217: IFFALSE 63221
// exit ;
63219: GO 63616
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63221: LD_ADDR_VAR 0 6
63225: PUSH
63226: LD_VAR 0 7
63230: PPUSH
63231: LD_INT 0
63233: PPUSH
63234: LD_INT 4
63236: PPUSH
63237: CALL_OW 272
63241: PUSH
63242: LD_VAR 0 8
63246: PPUSH
63247: LD_INT 0
63249: PPUSH
63250: LD_INT 4
63252: PPUSH
63253: CALL_OW 273
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_VAR 0 7
63266: PPUSH
63267: LD_INT 1
63269: PPUSH
63270: LD_INT 4
63272: PPUSH
63273: CALL_OW 272
63277: PUSH
63278: LD_VAR 0 8
63282: PPUSH
63283: LD_INT 1
63285: PPUSH
63286: LD_INT 4
63288: PPUSH
63289: CALL_OW 273
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_VAR 0 7
63302: PPUSH
63303: LD_INT 2
63305: PPUSH
63306: LD_INT 4
63308: PPUSH
63309: CALL_OW 272
63313: PUSH
63314: LD_VAR 0 8
63318: PPUSH
63319: LD_INT 2
63321: PPUSH
63322: LD_INT 4
63324: PPUSH
63325: CALL_OW 273
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_VAR 0 7
63338: PPUSH
63339: LD_INT 3
63341: PPUSH
63342: LD_INT 4
63344: PPUSH
63345: CALL_OW 272
63349: PUSH
63350: LD_VAR 0 8
63354: PPUSH
63355: LD_INT 3
63357: PPUSH
63358: LD_INT 4
63360: PPUSH
63361: CALL_OW 273
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_VAR 0 7
63374: PPUSH
63375: LD_INT 4
63377: PPUSH
63378: LD_INT 4
63380: PPUSH
63381: CALL_OW 272
63385: PUSH
63386: LD_VAR 0 8
63390: PPUSH
63391: LD_INT 4
63393: PPUSH
63394: LD_INT 4
63396: PPUSH
63397: CALL_OW 273
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_VAR 0 7
63410: PPUSH
63411: LD_INT 5
63413: PPUSH
63414: LD_INT 4
63416: PPUSH
63417: CALL_OW 272
63421: PUSH
63422: LD_VAR 0 8
63426: PPUSH
63427: LD_INT 5
63429: PPUSH
63430: LD_INT 4
63432: PPUSH
63433: CALL_OW 273
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: ST_TO_ADDR
// for i = tmp downto 1 do
63450: LD_ADDR_VAR 0 4
63454: PUSH
63455: DOUBLE
63456: LD_VAR 0 6
63460: INC
63461: ST_TO_ADDR
63462: LD_INT 1
63464: PUSH
63465: FOR_DOWNTO
63466: IFFALSE 63567
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63468: LD_VAR 0 6
63472: PUSH
63473: LD_VAR 0 4
63477: ARRAY
63478: PUSH
63479: LD_INT 1
63481: ARRAY
63482: PPUSH
63483: LD_VAR 0 6
63487: PUSH
63488: LD_VAR 0 4
63492: ARRAY
63493: PUSH
63494: LD_INT 2
63496: ARRAY
63497: PPUSH
63498: CALL_OW 488
63502: NOT
63503: PUSH
63504: LD_VAR 0 6
63508: PUSH
63509: LD_VAR 0 4
63513: ARRAY
63514: PUSH
63515: LD_INT 1
63517: ARRAY
63518: PPUSH
63519: LD_VAR 0 6
63523: PUSH
63524: LD_VAR 0 4
63528: ARRAY
63529: PUSH
63530: LD_INT 2
63532: ARRAY
63533: PPUSH
63534: CALL_OW 428
63538: PUSH
63539: LD_INT 0
63541: NONEQUAL
63542: OR
63543: IFFALSE 63565
// tmp := Delete ( tmp , i ) ;
63545: LD_ADDR_VAR 0 6
63549: PUSH
63550: LD_VAR 0 6
63554: PPUSH
63555: LD_VAR 0 4
63559: PPUSH
63560: CALL_OW 3
63564: ST_TO_ADDR
63565: GO 63465
63567: POP
63568: POP
// j := GetClosestHex ( unit , tmp ) ;
63569: LD_ADDR_VAR 0 5
63573: PUSH
63574: LD_VAR 0 1
63578: PPUSH
63579: LD_VAR 0 6
63583: PPUSH
63584: CALL 62860 0 2
63588: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63589: LD_VAR 0 1
63593: PPUSH
63594: LD_VAR 0 5
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: PPUSH
63603: LD_VAR 0 5
63607: PUSH
63608: LD_INT 2
63610: ARRAY
63611: PPUSH
63612: CALL_OW 111
// end ;
63616: LD_VAR 0 3
63620: RET
// export function PrepareApemanSoldier ( ) ; begin
63621: LD_INT 0
63623: PPUSH
// uc_nation := 0 ;
63624: LD_ADDR_OWVAR 21
63628: PUSH
63629: LD_INT 0
63631: ST_TO_ADDR
// hc_sex := sex_male ;
63632: LD_ADDR_OWVAR 27
63636: PUSH
63637: LD_INT 1
63639: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63640: LD_ADDR_OWVAR 28
63644: PUSH
63645: LD_INT 15
63647: ST_TO_ADDR
// hc_gallery :=  ;
63648: LD_ADDR_OWVAR 33
63652: PUSH
63653: LD_STRING 
63655: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63656: LD_ADDR_OWVAR 31
63660: PUSH
63661: LD_INT 0
63663: PPUSH
63664: LD_INT 3
63666: PPUSH
63667: CALL_OW 12
63671: PUSH
63672: LD_INT 0
63674: PPUSH
63675: LD_INT 3
63677: PPUSH
63678: CALL_OW 12
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// end ;
63695: LD_VAR 0 1
63699: RET
// export function PrepareApemanEngineer ( ) ; begin
63700: LD_INT 0
63702: PPUSH
// uc_nation := 0 ;
63703: LD_ADDR_OWVAR 21
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// hc_sex := sex_male ;
63711: LD_ADDR_OWVAR 27
63715: PUSH
63716: LD_INT 1
63718: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63719: LD_ADDR_OWVAR 28
63723: PUSH
63724: LD_INT 16
63726: ST_TO_ADDR
// hc_gallery :=  ;
63727: LD_ADDR_OWVAR 33
63731: PUSH
63732: LD_STRING 
63734: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63735: LD_ADDR_OWVAR 31
63739: PUSH
63740: LD_INT 0
63742: PPUSH
63743: LD_INT 3
63745: PPUSH
63746: CALL_OW 12
63750: PUSH
63751: LD_INT 0
63753: PPUSH
63754: LD_INT 3
63756: PPUSH
63757: CALL_OW 12
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// end ;
63774: LD_VAR 0 1
63778: RET
// export function PrepareApeman ( agressivity ) ; begin
63779: LD_INT 0
63781: PPUSH
// uc_side := 0 ;
63782: LD_ADDR_OWVAR 20
63786: PUSH
63787: LD_INT 0
63789: ST_TO_ADDR
// uc_nation := 0 ;
63790: LD_ADDR_OWVAR 21
63794: PUSH
63795: LD_INT 0
63797: ST_TO_ADDR
// hc_sex := sex_male ;
63798: LD_ADDR_OWVAR 27
63802: PUSH
63803: LD_INT 1
63805: ST_TO_ADDR
// hc_class := class_apeman ;
63806: LD_ADDR_OWVAR 28
63810: PUSH
63811: LD_INT 12
63813: ST_TO_ADDR
// hc_gallery :=  ;
63814: LD_ADDR_OWVAR 33
63818: PUSH
63819: LD_STRING 
63821: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63822: LD_ADDR_OWVAR 35
63826: PUSH
63827: LD_VAR 0 1
63831: NEG
63832: PPUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: CALL_OW 12
63842: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63843: LD_ADDR_OWVAR 31
63847: PUSH
63848: LD_INT 0
63850: PPUSH
63851: LD_INT 3
63853: PPUSH
63854: CALL_OW 12
63858: PUSH
63859: LD_INT 0
63861: PPUSH
63862: LD_INT 3
63864: PPUSH
63865: CALL_OW 12
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: ST_TO_ADDR
// end ;
63882: LD_VAR 0 2
63886: RET
// export function PrepareTiger ( agressivity ) ; begin
63887: LD_INT 0
63889: PPUSH
// uc_side := 0 ;
63890: LD_ADDR_OWVAR 20
63894: PUSH
63895: LD_INT 0
63897: ST_TO_ADDR
// uc_nation := 0 ;
63898: LD_ADDR_OWVAR 21
63902: PUSH
63903: LD_INT 0
63905: ST_TO_ADDR
// hc_class := class_tiger ;
63906: LD_ADDR_OWVAR 28
63910: PUSH
63911: LD_INT 14
63913: ST_TO_ADDR
// hc_gallery :=  ;
63914: LD_ADDR_OWVAR 33
63918: PUSH
63919: LD_STRING 
63921: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63922: LD_ADDR_OWVAR 35
63926: PUSH
63927: LD_VAR 0 1
63931: NEG
63932: PPUSH
63933: LD_VAR 0 1
63937: PPUSH
63938: CALL_OW 12
63942: ST_TO_ADDR
// end ;
63943: LD_VAR 0 2
63947: RET
// export function PrepareEnchidna ( ) ; begin
63948: LD_INT 0
63950: PPUSH
// uc_side := 0 ;
63951: LD_ADDR_OWVAR 20
63955: PUSH
63956: LD_INT 0
63958: ST_TO_ADDR
// uc_nation := 0 ;
63959: LD_ADDR_OWVAR 21
63963: PUSH
63964: LD_INT 0
63966: ST_TO_ADDR
// hc_class := class_baggie ;
63967: LD_ADDR_OWVAR 28
63971: PUSH
63972: LD_INT 13
63974: ST_TO_ADDR
// hc_gallery :=  ;
63975: LD_ADDR_OWVAR 33
63979: PUSH
63980: LD_STRING 
63982: ST_TO_ADDR
// end ;
63983: LD_VAR 0 1
63987: RET
// export function PrepareFrog ( ) ; begin
63988: LD_INT 0
63990: PPUSH
// uc_side := 0 ;
63991: LD_ADDR_OWVAR 20
63995: PUSH
63996: LD_INT 0
63998: ST_TO_ADDR
// uc_nation := 0 ;
63999: LD_ADDR_OWVAR 21
64003: PUSH
64004: LD_INT 0
64006: ST_TO_ADDR
// hc_class := class_frog ;
64007: LD_ADDR_OWVAR 28
64011: PUSH
64012: LD_INT 19
64014: ST_TO_ADDR
// hc_gallery :=  ;
64015: LD_ADDR_OWVAR 33
64019: PUSH
64020: LD_STRING 
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 1
64027: RET
// export function PrepareFish ( ) ; begin
64028: LD_INT 0
64030: PPUSH
// uc_side := 0 ;
64031: LD_ADDR_OWVAR 20
64035: PUSH
64036: LD_INT 0
64038: ST_TO_ADDR
// uc_nation := 0 ;
64039: LD_ADDR_OWVAR 21
64043: PUSH
64044: LD_INT 0
64046: ST_TO_ADDR
// hc_class := class_fish ;
64047: LD_ADDR_OWVAR 28
64051: PUSH
64052: LD_INT 20
64054: ST_TO_ADDR
// hc_gallery :=  ;
64055: LD_ADDR_OWVAR 33
64059: PUSH
64060: LD_STRING 
64062: ST_TO_ADDR
// end ;
64063: LD_VAR 0 1
64067: RET
// export function PrepareBird ( ) ; begin
64068: LD_INT 0
64070: PPUSH
// uc_side := 0 ;
64071: LD_ADDR_OWVAR 20
64075: PUSH
64076: LD_INT 0
64078: ST_TO_ADDR
// uc_nation := 0 ;
64079: LD_ADDR_OWVAR 21
64083: PUSH
64084: LD_INT 0
64086: ST_TO_ADDR
// hc_class := class_phororhacos ;
64087: LD_ADDR_OWVAR 28
64091: PUSH
64092: LD_INT 18
64094: ST_TO_ADDR
// hc_gallery :=  ;
64095: LD_ADDR_OWVAR 33
64099: PUSH
64100: LD_STRING 
64102: ST_TO_ADDR
// end ;
64103: LD_VAR 0 1
64107: RET
// export function PrepareHorse ( ) ; begin
64108: LD_INT 0
64110: PPUSH
// uc_side := 0 ;
64111: LD_ADDR_OWVAR 20
64115: PUSH
64116: LD_INT 0
64118: ST_TO_ADDR
// uc_nation := 0 ;
64119: LD_ADDR_OWVAR 21
64123: PUSH
64124: LD_INT 0
64126: ST_TO_ADDR
// hc_class := class_horse ;
64127: LD_ADDR_OWVAR 28
64131: PUSH
64132: LD_INT 21
64134: ST_TO_ADDR
// hc_gallery :=  ;
64135: LD_ADDR_OWVAR 33
64139: PUSH
64140: LD_STRING 
64142: ST_TO_ADDR
// end ;
64143: LD_VAR 0 1
64147: RET
// export function PrepareMastodont ( ) ; begin
64148: LD_INT 0
64150: PPUSH
// uc_side := 0 ;
64151: LD_ADDR_OWVAR 20
64155: PUSH
64156: LD_INT 0
64158: ST_TO_ADDR
// uc_nation := 0 ;
64159: LD_ADDR_OWVAR 21
64163: PUSH
64164: LD_INT 0
64166: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64167: LD_ADDR_OWVAR 37
64171: PUSH
64172: LD_INT 31
64174: ST_TO_ADDR
// vc_control := control_rider ;
64175: LD_ADDR_OWVAR 38
64179: PUSH
64180: LD_INT 4
64182: ST_TO_ADDR
// end ;
64183: LD_VAR 0 1
64187: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64188: LD_INT 0
64190: PPUSH
64191: PPUSH
64192: PPUSH
// uc_side = 0 ;
64193: LD_ADDR_OWVAR 20
64197: PUSH
64198: LD_INT 0
64200: ST_TO_ADDR
// uc_nation = 0 ;
64201: LD_ADDR_OWVAR 21
64205: PUSH
64206: LD_INT 0
64208: ST_TO_ADDR
// InitHc_All ( ) ;
64209: CALL_OW 584
// InitVc ;
64213: CALL_OW 20
// if mastodonts then
64217: LD_VAR 0 6
64221: IFFALSE 64288
// for i = 1 to mastodonts do
64223: LD_ADDR_VAR 0 11
64227: PUSH
64228: DOUBLE
64229: LD_INT 1
64231: DEC
64232: ST_TO_ADDR
64233: LD_VAR 0 6
64237: PUSH
64238: FOR_TO
64239: IFFALSE 64286
// begin vc_chassis := 31 ;
64241: LD_ADDR_OWVAR 37
64245: PUSH
64246: LD_INT 31
64248: ST_TO_ADDR
// vc_control := control_rider ;
64249: LD_ADDR_OWVAR 38
64253: PUSH
64254: LD_INT 4
64256: ST_TO_ADDR
// animal := CreateVehicle ;
64257: LD_ADDR_VAR 0 12
64261: PUSH
64262: CALL_OW 45
64266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64267: LD_VAR 0 12
64271: PPUSH
64272: LD_VAR 0 8
64276: PPUSH
64277: LD_INT 0
64279: PPUSH
64280: CALL 66416 0 3
// end ;
64284: GO 64238
64286: POP
64287: POP
// if horses then
64288: LD_VAR 0 5
64292: IFFALSE 64359
// for i = 1 to horses do
64294: LD_ADDR_VAR 0 11
64298: PUSH
64299: DOUBLE
64300: LD_INT 1
64302: DEC
64303: ST_TO_ADDR
64304: LD_VAR 0 5
64308: PUSH
64309: FOR_TO
64310: IFFALSE 64357
// begin hc_class := 21 ;
64312: LD_ADDR_OWVAR 28
64316: PUSH
64317: LD_INT 21
64319: ST_TO_ADDR
// hc_gallery :=  ;
64320: LD_ADDR_OWVAR 33
64324: PUSH
64325: LD_STRING 
64327: ST_TO_ADDR
// animal := CreateHuman ;
64328: LD_ADDR_VAR 0 12
64332: PUSH
64333: CALL_OW 44
64337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64338: LD_VAR 0 12
64342: PPUSH
64343: LD_VAR 0 8
64347: PPUSH
64348: LD_INT 0
64350: PPUSH
64351: CALL 66416 0 3
// end ;
64355: GO 64309
64357: POP
64358: POP
// if birds then
64359: LD_VAR 0 1
64363: IFFALSE 64430
// for i = 1 to birds do
64365: LD_ADDR_VAR 0 11
64369: PUSH
64370: DOUBLE
64371: LD_INT 1
64373: DEC
64374: ST_TO_ADDR
64375: LD_VAR 0 1
64379: PUSH
64380: FOR_TO
64381: IFFALSE 64428
// begin hc_class = 18 ;
64383: LD_ADDR_OWVAR 28
64387: PUSH
64388: LD_INT 18
64390: ST_TO_ADDR
// hc_gallery =  ;
64391: LD_ADDR_OWVAR 33
64395: PUSH
64396: LD_STRING 
64398: ST_TO_ADDR
// animal := CreateHuman ;
64399: LD_ADDR_VAR 0 12
64403: PUSH
64404: CALL_OW 44
64408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64409: LD_VAR 0 12
64413: PPUSH
64414: LD_VAR 0 8
64418: PPUSH
64419: LD_INT 0
64421: PPUSH
64422: CALL 66416 0 3
// end ;
64426: GO 64380
64428: POP
64429: POP
// if tigers then
64430: LD_VAR 0 2
64434: IFFALSE 64518
// for i = 1 to tigers do
64436: LD_ADDR_VAR 0 11
64440: PUSH
64441: DOUBLE
64442: LD_INT 1
64444: DEC
64445: ST_TO_ADDR
64446: LD_VAR 0 2
64450: PUSH
64451: FOR_TO
64452: IFFALSE 64516
// begin hc_class = class_tiger ;
64454: LD_ADDR_OWVAR 28
64458: PUSH
64459: LD_INT 14
64461: ST_TO_ADDR
// hc_gallery =  ;
64462: LD_ADDR_OWVAR 33
64466: PUSH
64467: LD_STRING 
64469: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64470: LD_ADDR_OWVAR 35
64474: PUSH
64475: LD_INT 7
64477: NEG
64478: PPUSH
64479: LD_INT 7
64481: PPUSH
64482: CALL_OW 12
64486: ST_TO_ADDR
// animal := CreateHuman ;
64487: LD_ADDR_VAR 0 12
64491: PUSH
64492: CALL_OW 44
64496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64497: LD_VAR 0 12
64501: PPUSH
64502: LD_VAR 0 8
64506: PPUSH
64507: LD_INT 0
64509: PPUSH
64510: CALL 66416 0 3
// end ;
64514: GO 64451
64516: POP
64517: POP
// if apemans then
64518: LD_VAR 0 3
64522: IFFALSE 64645
// for i = 1 to apemans do
64524: LD_ADDR_VAR 0 11
64528: PUSH
64529: DOUBLE
64530: LD_INT 1
64532: DEC
64533: ST_TO_ADDR
64534: LD_VAR 0 3
64538: PUSH
64539: FOR_TO
64540: IFFALSE 64643
// begin hc_class = class_apeman ;
64542: LD_ADDR_OWVAR 28
64546: PUSH
64547: LD_INT 12
64549: ST_TO_ADDR
// hc_gallery =  ;
64550: LD_ADDR_OWVAR 33
64554: PUSH
64555: LD_STRING 
64557: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64558: LD_ADDR_OWVAR 35
64562: PUSH
64563: LD_INT 2
64565: NEG
64566: PPUSH
64567: LD_INT 2
64569: PPUSH
64570: CALL_OW 12
64574: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64575: LD_ADDR_OWVAR 31
64579: PUSH
64580: LD_INT 1
64582: PPUSH
64583: LD_INT 3
64585: PPUSH
64586: CALL_OW 12
64590: PUSH
64591: LD_INT 1
64593: PPUSH
64594: LD_INT 3
64596: PPUSH
64597: CALL_OW 12
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: ST_TO_ADDR
// animal := CreateHuman ;
64614: LD_ADDR_VAR 0 12
64618: PUSH
64619: CALL_OW 44
64623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64624: LD_VAR 0 12
64628: PPUSH
64629: LD_VAR 0 8
64633: PPUSH
64634: LD_INT 0
64636: PPUSH
64637: CALL 66416 0 3
// end ;
64641: GO 64539
64643: POP
64644: POP
// if enchidnas then
64645: LD_VAR 0 4
64649: IFFALSE 64716
// for i = 1 to enchidnas do
64651: LD_ADDR_VAR 0 11
64655: PUSH
64656: DOUBLE
64657: LD_INT 1
64659: DEC
64660: ST_TO_ADDR
64661: LD_VAR 0 4
64665: PUSH
64666: FOR_TO
64667: IFFALSE 64714
// begin hc_class = 13 ;
64669: LD_ADDR_OWVAR 28
64673: PUSH
64674: LD_INT 13
64676: ST_TO_ADDR
// hc_gallery =  ;
64677: LD_ADDR_OWVAR 33
64681: PUSH
64682: LD_STRING 
64684: ST_TO_ADDR
// animal := CreateHuman ;
64685: LD_ADDR_VAR 0 12
64689: PUSH
64690: CALL_OW 44
64694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64695: LD_VAR 0 12
64699: PPUSH
64700: LD_VAR 0 8
64704: PPUSH
64705: LD_INT 0
64707: PPUSH
64708: CALL 66416 0 3
// end ;
64712: GO 64666
64714: POP
64715: POP
// if fishes then
64716: LD_VAR 0 7
64720: IFFALSE 64787
// for i = 1 to fishes do
64722: LD_ADDR_VAR 0 11
64726: PUSH
64727: DOUBLE
64728: LD_INT 1
64730: DEC
64731: ST_TO_ADDR
64732: LD_VAR 0 7
64736: PUSH
64737: FOR_TO
64738: IFFALSE 64785
// begin hc_class = 20 ;
64740: LD_ADDR_OWVAR 28
64744: PUSH
64745: LD_INT 20
64747: ST_TO_ADDR
// hc_gallery =  ;
64748: LD_ADDR_OWVAR 33
64752: PUSH
64753: LD_STRING 
64755: ST_TO_ADDR
// animal := CreateHuman ;
64756: LD_ADDR_VAR 0 12
64760: PUSH
64761: CALL_OW 44
64765: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64766: LD_VAR 0 12
64770: PPUSH
64771: LD_VAR 0 9
64775: PPUSH
64776: LD_INT 0
64778: PPUSH
64779: CALL 66416 0 3
// end ;
64783: GO 64737
64785: POP
64786: POP
// end ;
64787: LD_VAR 0 10
64791: RET
// export function WantHeal ( sci , unit ) ; begin
64792: LD_INT 0
64794: PPUSH
// if GetTaskList ( sci ) > 0 then
64795: LD_VAR 0 1
64799: PPUSH
64800: CALL_OW 437
64804: PUSH
64805: LD_INT 0
64807: GREATER
64808: IFFALSE 64878
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 437
64819: PUSH
64820: LD_INT 1
64822: ARRAY
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: PUSH
64828: LD_STRING l
64830: EQUAL
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 437
64841: PUSH
64842: LD_INT 1
64844: ARRAY
64845: PUSH
64846: LD_INT 4
64848: ARRAY
64849: PUSH
64850: LD_VAR 0 2
64854: EQUAL
64855: AND
64856: IFFALSE 64868
// result := true else
64858: LD_ADDR_VAR 0 3
64862: PUSH
64863: LD_INT 1
64865: ST_TO_ADDR
64866: GO 64876
// result := false ;
64868: LD_ADDR_VAR 0 3
64872: PUSH
64873: LD_INT 0
64875: ST_TO_ADDR
// end else
64876: GO 64886
// result := false ;
64878: LD_ADDR_VAR 0 3
64882: PUSH
64883: LD_INT 0
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 3
64890: RET
// export function HealTarget ( sci ) ; begin
64891: LD_INT 0
64893: PPUSH
// if not sci then
64894: LD_VAR 0 1
64898: NOT
64899: IFFALSE 64903
// exit ;
64901: GO 64968
// result := 0 ;
64903: LD_ADDR_VAR 0 2
64907: PUSH
64908: LD_INT 0
64910: ST_TO_ADDR
// if GetTaskList ( sci ) then
64911: LD_VAR 0 1
64915: PPUSH
64916: CALL_OW 437
64920: IFFALSE 64968
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64922: LD_VAR 0 1
64926: PPUSH
64927: CALL_OW 437
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PUSH
64940: LD_STRING l
64942: EQUAL
64943: IFFALSE 64968
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64945: LD_ADDR_VAR 0 2
64949: PUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 437
64959: PUSH
64960: LD_INT 1
64962: ARRAY
64963: PUSH
64964: LD_INT 4
64966: ARRAY
64967: ST_TO_ADDR
// end ;
64968: LD_VAR 0 2
64972: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64973: LD_INT 0
64975: PPUSH
64976: PPUSH
64977: PPUSH
64978: PPUSH
// if not base_units then
64979: LD_VAR 0 1
64983: NOT
64984: IFFALSE 64988
// exit ;
64986: GO 65075
// result := false ;
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_INT 0
64995: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64996: LD_ADDR_VAR 0 5
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: LD_INT 21
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 72
65020: ST_TO_ADDR
// if not tmp then
65021: LD_VAR 0 5
65025: NOT
65026: IFFALSE 65030
// exit ;
65028: GO 65075
// for i in tmp do
65030: LD_ADDR_VAR 0 3
65034: PUSH
65035: LD_VAR 0 5
65039: PUSH
65040: FOR_IN
65041: IFFALSE 65073
// begin result := EnemyInRange ( i , 22 ) ;
65043: LD_ADDR_VAR 0 2
65047: PUSH
65048: LD_VAR 0 3
65052: PPUSH
65053: LD_INT 22
65055: PPUSH
65056: CALL 62662 0 2
65060: ST_TO_ADDR
// if result then
65061: LD_VAR 0 2
65065: IFFALSE 65071
// exit ;
65067: POP
65068: POP
65069: GO 65075
// end ;
65071: GO 65040
65073: POP
65074: POP
// end ;
65075: LD_VAR 0 2
65079: RET
// export function FilterByTag ( units , tag ) ; begin
65080: LD_INT 0
65082: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65083: LD_ADDR_VAR 0 3
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: LD_INT 120
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PPUSH
65105: CALL_OW 72
65109: ST_TO_ADDR
// end ;
65110: LD_VAR 0 3
65114: RET
// export function IsDriver ( un ) ; begin
65115: LD_INT 0
65117: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65118: LD_ADDR_VAR 0 2
65122: PUSH
65123: LD_VAR 0 1
65127: PUSH
65128: LD_INT 55
65130: PUSH
65131: EMPTY
65132: LIST
65133: PPUSH
65134: CALL_OW 69
65138: IN
65139: ST_TO_ADDR
// end ;
65140: LD_VAR 0 2
65144: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65145: LD_INT 0
65147: PPUSH
65148: PPUSH
// list := [ ] ;
65149: LD_ADDR_VAR 0 5
65153: PUSH
65154: EMPTY
65155: ST_TO_ADDR
// case d of 0 :
65156: LD_VAR 0 3
65160: PUSH
65161: LD_INT 0
65163: DOUBLE
65164: EQUAL
65165: IFTRUE 65169
65167: GO 65302
65169: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65170: LD_ADDR_VAR 0 5
65174: PUSH
65175: LD_VAR 0 1
65179: PUSH
65180: LD_INT 4
65182: MINUS
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_INT 4
65191: MINUS
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: PUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_INT 3
65208: MINUS
65209: PUSH
65210: LD_VAR 0 2
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: PUSH
65223: LD_VAR 0 1
65227: PUSH
65228: LD_INT 4
65230: PLUS
65231: PUSH
65232: LD_VAR 0 2
65236: PUSH
65237: LD_INT 4
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 3
65252: PLUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 3
65261: PLUS
65262: PUSH
65263: LD_INT 5
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 4
65283: PLUS
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// end ; 1 :
65300: GO 66000
65302: LD_INT 1
65304: DOUBLE
65305: EQUAL
65306: IFTRUE 65310
65308: GO 65443
65310: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65311: LD_ADDR_VAR 0 5
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_VAR 0 2
65325: PUSH
65326: LD_INT 4
65328: MINUS
65329: PUSH
65330: LD_INT 3
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_INT 3
65345: MINUS
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 3
65354: MINUS
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: LD_INT 4
65371: MINUS
65372: PUSH
65373: LD_VAR 0 2
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 3
65398: PLUS
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 4
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: PLUS
65425: PUSH
65426: LD_INT 5
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// end ; 2 :
65441: GO 66000
65443: LD_INT 2
65445: DOUBLE
65446: EQUAL
65447: IFTRUE 65451
65449: GO 65580
65451: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65452: LD_ADDR_VAR 0 5
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: LD_VAR 0 2
65466: PUSH
65467: LD_INT 3
65469: MINUS
65470: PUSH
65471: LD_INT 3
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 1
65483: PUSH
65484: LD_INT 4
65486: PLUS
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: LD_VAR 0 1
65505: PUSH
65506: LD_VAR 0 2
65510: PUSH
65511: LD_INT 4
65513: PLUS
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 3
65530: MINUS
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 4
65552: MINUS
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: MINUS
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: ST_TO_ADDR
// end ; 3 :
65578: GO 66000
65580: LD_INT 3
65582: DOUBLE
65583: EQUAL
65584: IFTRUE 65588
65586: GO 65721
65588: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65589: LD_ADDR_VAR 0 5
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: LD_INT 3
65601: PLUS
65602: PUSH
65603: LD_VAR 0 2
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: LD_INT 4
65623: PLUS
65624: PUSH
65625: LD_VAR 0 2
65629: PUSH
65630: LD_INT 4
65632: PLUS
65633: PUSH
65634: LD_INT 5
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: LD_INT 4
65649: MINUS
65650: PUSH
65651: LD_VAR 0 2
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: PUSH
65664: LD_VAR 0 1
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 4
65676: MINUS
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 3
65693: MINUS
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 3
65702: MINUS
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// end ; 4 :
65719: GO 66000
65721: LD_INT 4
65723: DOUBLE
65724: EQUAL
65725: IFTRUE 65729
65727: GO 65862
65729: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65730: LD_ADDR_VAR 0 5
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_VAR 0 2
65744: PUSH
65745: LD_INT 4
65747: PLUS
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 3
65764: PLUS
65765: PUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 3
65773: PLUS
65774: PUSH
65775: LD_INT 5
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: PUSH
65783: LD_VAR 0 1
65787: PUSH
65788: LD_INT 4
65790: PLUS
65791: PUSH
65792: LD_VAR 0 2
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: PUSH
65805: LD_VAR 0 1
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_INT 3
65817: MINUS
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: LD_VAR 0 1
65831: PUSH
65832: LD_INT 4
65834: MINUS
65835: PUSH
65836: LD_VAR 0 2
65840: PUSH
65841: LD_INT 4
65843: MINUS
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// end ; 5 :
65860: GO 66000
65862: LD_INT 5
65864: DOUBLE
65865: EQUAL
65866: IFTRUE 65870
65868: GO 65999
65870: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65871: LD_ADDR_VAR 0 5
65875: PUSH
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 4
65883: MINUS
65884: PUSH
65885: LD_VAR 0 2
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: LD_VAR 0 2
65907: PUSH
65908: LD_INT 4
65910: MINUS
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: PUSH
65920: LD_VAR 0 1
65924: PUSH
65925: LD_INT 4
65927: PLUS
65928: PUSH
65929: LD_VAR 0 2
65933: PUSH
65934: LD_INT 4
65936: PLUS
65937: PUSH
65938: LD_INT 5
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: PUSH
65946: LD_VAR 0 1
65950: PUSH
65951: LD_INT 3
65953: PLUS
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 4
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: PUSH
65968: LD_VAR 0 1
65972: PUSH
65973: LD_VAR 0 2
65977: PUSH
65978: LD_INT 3
65980: PLUS
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: ST_TO_ADDR
// end ; end ;
65997: GO 66000
65999: POP
// result := list ;
66000: LD_ADDR_VAR 0 4
66004: PUSH
66005: LD_VAR 0 5
66009: ST_TO_ADDR
// end ;
66010: LD_VAR 0 4
66014: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66015: LD_INT 0
66017: PPUSH
66018: PPUSH
66019: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66020: LD_VAR 0 1
66024: NOT
66025: PUSH
66026: LD_VAR 0 2
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: LD_INT 2
66036: PUSH
66037: LD_INT 3
66039: PUSH
66040: LD_INT 4
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: IN
66049: NOT
66050: OR
66051: IFFALSE 66055
// exit ;
66053: GO 66138
// tmp := [ ] ;
66055: LD_ADDR_VAR 0 5
66059: PUSH
66060: EMPTY
66061: ST_TO_ADDR
// for i in units do
66062: LD_ADDR_VAR 0 4
66066: PUSH
66067: LD_VAR 0 1
66071: PUSH
66072: FOR_IN
66073: IFFALSE 66107
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 5
66084: PPUSH
66085: LD_VAR 0 4
66089: PPUSH
66090: LD_VAR 0 2
66094: PPUSH
66095: CALL_OW 259
66099: PPUSH
66100: CALL 67499 0 2
66104: ST_TO_ADDR
66105: GO 66072
66107: POP
66108: POP
// if not tmp then
66109: LD_VAR 0 5
66113: NOT
66114: IFFALSE 66118
// exit ;
66116: GO 66138
// result := SortListByListDesc ( units , tmp ) ;
66118: LD_ADDR_VAR 0 3
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: LD_VAR 0 5
66132: PPUSH
66133: CALL_OW 77
66137: ST_TO_ADDR
// end ;
66138: LD_VAR 0 3
66142: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66143: LD_INT 0
66145: PPUSH
66146: PPUSH
66147: PPUSH
// result := false ;
66148: LD_ADDR_VAR 0 3
66152: PUSH
66153: LD_INT 0
66155: ST_TO_ADDR
// if not building then
66156: LD_VAR 0 2
66160: NOT
66161: IFFALSE 66165
// exit ;
66163: GO 66303
// x := GetX ( building ) ;
66165: LD_ADDR_VAR 0 4
66169: PUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: CALL_OW 250
66179: ST_TO_ADDR
// y := GetY ( building ) ;
66180: LD_ADDR_VAR 0 5
66184: PUSH
66185: LD_VAR 0 2
66189: PPUSH
66190: CALL_OW 251
66194: ST_TO_ADDR
// if not x or not y then
66195: LD_VAR 0 4
66199: NOT
66200: PUSH
66201: LD_VAR 0 5
66205: NOT
66206: OR
66207: IFFALSE 66211
// exit ;
66209: GO 66303
// if GetTaskList ( unit ) then
66211: LD_VAR 0 1
66215: PPUSH
66216: CALL_OW 437
66220: IFFALSE 66303
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66222: LD_STRING e
66224: PUSH
66225: LD_VAR 0 1
66229: PPUSH
66230: CALL_OW 437
66234: PUSH
66235: LD_INT 1
66237: ARRAY
66238: PUSH
66239: LD_INT 1
66241: ARRAY
66242: EQUAL
66243: PUSH
66244: LD_VAR 0 4
66248: PUSH
66249: LD_VAR 0 1
66253: PPUSH
66254: CALL_OW 437
66258: PUSH
66259: LD_INT 1
66261: ARRAY
66262: PUSH
66263: LD_INT 2
66265: ARRAY
66266: EQUAL
66267: AND
66268: PUSH
66269: LD_VAR 0 5
66273: PUSH
66274: LD_VAR 0 1
66278: PPUSH
66279: CALL_OW 437
66283: PUSH
66284: LD_INT 1
66286: ARRAY
66287: PUSH
66288: LD_INT 3
66290: ARRAY
66291: EQUAL
66292: AND
66293: IFFALSE 66303
// result := true end ;
66295: LD_ADDR_VAR 0 3
66299: PUSH
66300: LD_INT 1
66302: ST_TO_ADDR
// end ;
66303: LD_VAR 0 3
66307: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66308: LD_INT 0
66310: PPUSH
// result := false ;
66311: LD_ADDR_VAR 0 4
66315: PUSH
66316: LD_INT 0
66318: ST_TO_ADDR
// if GetTaskList ( unit ) then
66319: LD_VAR 0 1
66323: PPUSH
66324: CALL_OW 437
66328: IFFALSE 66411
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66330: LD_STRING M
66332: PUSH
66333: LD_VAR 0 1
66337: PPUSH
66338: CALL_OW 437
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: PUSH
66347: LD_INT 1
66349: ARRAY
66350: EQUAL
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_VAR 0 1
66361: PPUSH
66362: CALL_OW 437
66366: PUSH
66367: LD_INT 1
66369: ARRAY
66370: PUSH
66371: LD_INT 2
66373: ARRAY
66374: EQUAL
66375: AND
66376: PUSH
66377: LD_VAR 0 3
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 437
66391: PUSH
66392: LD_INT 1
66394: ARRAY
66395: PUSH
66396: LD_INT 3
66398: ARRAY
66399: EQUAL
66400: AND
66401: IFFALSE 66411
// result := true ;
66403: LD_ADDR_VAR 0 4
66407: PUSH
66408: LD_INT 1
66410: ST_TO_ADDR
// end ; end ;
66411: LD_VAR 0 4
66415: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66416: LD_INT 0
66418: PPUSH
66419: PPUSH
66420: PPUSH
66421: PPUSH
// if not unit or not area then
66422: LD_VAR 0 1
66426: NOT
66427: PUSH
66428: LD_VAR 0 2
66432: NOT
66433: OR
66434: IFFALSE 66438
// exit ;
66436: GO 66602
// tmp := AreaToList ( area , i ) ;
66438: LD_ADDR_VAR 0 6
66442: PUSH
66443: LD_VAR 0 2
66447: PPUSH
66448: LD_VAR 0 5
66452: PPUSH
66453: CALL_OW 517
66457: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66458: LD_ADDR_VAR 0 5
66462: PUSH
66463: DOUBLE
66464: LD_INT 1
66466: DEC
66467: ST_TO_ADDR
66468: LD_VAR 0 6
66472: PUSH
66473: LD_INT 1
66475: ARRAY
66476: PUSH
66477: FOR_TO
66478: IFFALSE 66600
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66480: LD_ADDR_VAR 0 7
66484: PUSH
66485: LD_VAR 0 6
66489: PUSH
66490: LD_INT 1
66492: ARRAY
66493: PUSH
66494: LD_VAR 0 5
66498: ARRAY
66499: PUSH
66500: LD_VAR 0 6
66504: PUSH
66505: LD_INT 2
66507: ARRAY
66508: PUSH
66509: LD_VAR 0 5
66513: ARRAY
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66519: LD_VAR 0 7
66523: PUSH
66524: LD_INT 1
66526: ARRAY
66527: PPUSH
66528: LD_VAR 0 7
66532: PUSH
66533: LD_INT 2
66535: ARRAY
66536: PPUSH
66537: CALL_OW 428
66541: PUSH
66542: LD_INT 0
66544: EQUAL
66545: IFFALSE 66598
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66547: LD_VAR 0 1
66551: PPUSH
66552: LD_VAR 0 7
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PPUSH
66561: LD_VAR 0 7
66565: PUSH
66566: LD_INT 2
66568: ARRAY
66569: PPUSH
66570: LD_VAR 0 3
66574: PPUSH
66575: CALL_OW 48
// result := IsPlaced ( unit ) ;
66579: LD_ADDR_VAR 0 4
66583: PUSH
66584: LD_VAR 0 1
66588: PPUSH
66589: CALL_OW 305
66593: ST_TO_ADDR
// exit ;
66594: POP
66595: POP
66596: GO 66602
// end ; end ;
66598: GO 66477
66600: POP
66601: POP
// end ;
66602: LD_VAR 0 4
66606: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66607: LD_INT 0
66609: PPUSH
66610: PPUSH
66611: PPUSH
// if not side or side > 8 then
66612: LD_VAR 0 1
66616: NOT
66617: PUSH
66618: LD_VAR 0 1
66622: PUSH
66623: LD_INT 8
66625: GREATER
66626: OR
66627: IFFALSE 66631
// exit ;
66629: GO 66818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66631: LD_ADDR_VAR 0 4
66635: PUSH
66636: LD_INT 22
66638: PUSH
66639: LD_VAR 0 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 21
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PPUSH
66662: CALL_OW 69
66666: ST_TO_ADDR
// if not tmp then
66667: LD_VAR 0 4
66671: NOT
66672: IFFALSE 66676
// exit ;
66674: GO 66818
// enable_addtolog := true ;
66676: LD_ADDR_OWVAR 81
66680: PUSH
66681: LD_INT 1
66683: ST_TO_ADDR
// AddToLog ( [ ) ;
66684: LD_STRING [
66686: PPUSH
66687: CALL_OW 561
// for i in tmp do
66691: LD_ADDR_VAR 0 3
66695: PUSH
66696: LD_VAR 0 4
66700: PUSH
66701: FOR_IN
66702: IFFALSE 66809
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66704: LD_STRING [
66706: PUSH
66707: LD_VAR 0 3
66711: PPUSH
66712: CALL_OW 266
66716: STR
66717: PUSH
66718: LD_STRING , 
66720: STR
66721: PUSH
66722: LD_VAR 0 3
66726: PPUSH
66727: CALL_OW 250
66731: STR
66732: PUSH
66733: LD_STRING , 
66735: STR
66736: PUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: CALL_OW 251
66746: STR
66747: PUSH
66748: LD_STRING , 
66750: STR
66751: PUSH
66752: LD_VAR 0 3
66756: PPUSH
66757: CALL_OW 254
66761: STR
66762: PUSH
66763: LD_STRING , 
66765: STR
66766: PUSH
66767: LD_VAR 0 3
66771: PPUSH
66772: LD_INT 1
66774: PPUSH
66775: CALL_OW 268
66779: STR
66780: PUSH
66781: LD_STRING , 
66783: STR
66784: PUSH
66785: LD_VAR 0 3
66789: PPUSH
66790: LD_INT 2
66792: PPUSH
66793: CALL_OW 268
66797: STR
66798: PUSH
66799: LD_STRING ],
66801: STR
66802: PPUSH
66803: CALL_OW 561
// end ;
66807: GO 66701
66809: POP
66810: POP
// AddToLog ( ]; ) ;
66811: LD_STRING ];
66813: PPUSH
66814: CALL_OW 561
// end ;
66818: LD_VAR 0 2
66822: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66823: LD_INT 0
66825: PPUSH
66826: PPUSH
66827: PPUSH
66828: PPUSH
66829: PPUSH
// if not area or not rate or not max then
66830: LD_VAR 0 1
66834: NOT
66835: PUSH
66836: LD_VAR 0 2
66840: NOT
66841: OR
66842: PUSH
66843: LD_VAR 0 4
66847: NOT
66848: OR
66849: IFFALSE 66853
// exit ;
66851: GO 67042
// while 1 do
66853: LD_INT 1
66855: IFFALSE 67042
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66857: LD_ADDR_VAR 0 9
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: LD_INT 1
66869: PPUSH
66870: CALL_OW 287
66874: PUSH
66875: LD_INT 10
66877: MUL
66878: ST_TO_ADDR
// r := rate / 10 ;
66879: LD_ADDR_VAR 0 7
66883: PUSH
66884: LD_VAR 0 2
66888: PUSH
66889: LD_INT 10
66891: DIVREAL
66892: ST_TO_ADDR
// time := 1 1$00 ;
66893: LD_ADDR_VAR 0 8
66897: PUSH
66898: LD_INT 2100
66900: ST_TO_ADDR
// if amount < min then
66901: LD_VAR 0 9
66905: PUSH
66906: LD_VAR 0 3
66910: LESS
66911: IFFALSE 66929
// r := r * 2 else
66913: LD_ADDR_VAR 0 7
66917: PUSH
66918: LD_VAR 0 7
66922: PUSH
66923: LD_INT 2
66925: MUL
66926: ST_TO_ADDR
66927: GO 66955
// if amount > max then
66929: LD_VAR 0 9
66933: PUSH
66934: LD_VAR 0 4
66938: GREATER
66939: IFFALSE 66955
// r := r / 2 ;
66941: LD_ADDR_VAR 0 7
66945: PUSH
66946: LD_VAR 0 7
66950: PUSH
66951: LD_INT 2
66953: DIVREAL
66954: ST_TO_ADDR
// time := time / r ;
66955: LD_ADDR_VAR 0 8
66959: PUSH
66960: LD_VAR 0 8
66964: PUSH
66965: LD_VAR 0 7
66969: DIVREAL
66970: ST_TO_ADDR
// if time < 0 then
66971: LD_VAR 0 8
66975: PUSH
66976: LD_INT 0
66978: LESS
66979: IFFALSE 66996
// time := time * - 1 ;
66981: LD_ADDR_VAR 0 8
66985: PUSH
66986: LD_VAR 0 8
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: MUL
66995: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66996: LD_VAR 0 8
67000: PUSH
67001: LD_INT 35
67003: PPUSH
67004: LD_INT 875
67006: PPUSH
67007: CALL_OW 12
67011: PLUS
67012: PPUSH
67013: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67017: LD_INT 1
67019: PPUSH
67020: LD_INT 5
67022: PPUSH
67023: CALL_OW 12
67027: PPUSH
67028: LD_VAR 0 1
67032: PPUSH
67033: LD_INT 1
67035: PPUSH
67036: CALL_OW 55
// end ;
67040: GO 66853
// end ;
67042: LD_VAR 0 5
67046: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67047: LD_INT 0
67049: PPUSH
67050: PPUSH
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
// if not turrets or not factories then
67057: LD_VAR 0 1
67061: NOT
67062: PUSH
67063: LD_VAR 0 2
67067: NOT
67068: OR
67069: IFFALSE 67073
// exit ;
67071: GO 67380
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67073: LD_ADDR_VAR 0 10
67077: PUSH
67078: LD_INT 5
67080: PUSH
67081: LD_INT 6
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: LD_INT 5
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 24
67115: PUSH
67116: LD_INT 25
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 23
67125: PUSH
67126: LD_INT 27
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 42
67139: PUSH
67140: LD_INT 43
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 44
67149: PUSH
67150: LD_INT 46
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 45
67159: PUSH
67160: LD_INT 47
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: ST_TO_ADDR
// result := [ ] ;
67177: LD_ADDR_VAR 0 3
67181: PUSH
67182: EMPTY
67183: ST_TO_ADDR
// for i in turrets do
67184: LD_ADDR_VAR 0 4
67188: PUSH
67189: LD_VAR 0 1
67193: PUSH
67194: FOR_IN
67195: IFFALSE 67378
// begin nat := GetNation ( i ) ;
67197: LD_ADDR_VAR 0 7
67201: PUSH
67202: LD_VAR 0 4
67206: PPUSH
67207: CALL_OW 248
67211: ST_TO_ADDR
// weapon := 0 ;
67212: LD_ADDR_VAR 0 8
67216: PUSH
67217: LD_INT 0
67219: ST_TO_ADDR
// if not nat then
67220: LD_VAR 0 7
67224: NOT
67225: IFFALSE 67229
// continue ;
67227: GO 67194
// for j in list [ nat ] do
67229: LD_ADDR_VAR 0 5
67233: PUSH
67234: LD_VAR 0 10
67238: PUSH
67239: LD_VAR 0 7
67243: ARRAY
67244: PUSH
67245: FOR_IN
67246: IFFALSE 67287
// if GetBWeapon ( i ) = j [ 1 ] then
67248: LD_VAR 0 4
67252: PPUSH
67253: CALL_OW 269
67257: PUSH
67258: LD_VAR 0 5
67262: PUSH
67263: LD_INT 1
67265: ARRAY
67266: EQUAL
67267: IFFALSE 67285
// begin weapon := j [ 2 ] ;
67269: LD_ADDR_VAR 0 8
67273: PUSH
67274: LD_VAR 0 5
67278: PUSH
67279: LD_INT 2
67281: ARRAY
67282: ST_TO_ADDR
// break ;
67283: GO 67287
// end ;
67285: GO 67245
67287: POP
67288: POP
// if not weapon then
67289: LD_VAR 0 8
67293: NOT
67294: IFFALSE 67298
// continue ;
67296: GO 67194
// for k in factories do
67298: LD_ADDR_VAR 0 6
67302: PUSH
67303: LD_VAR 0 2
67307: PUSH
67308: FOR_IN
67309: IFFALSE 67374
// begin weapons := AvailableWeaponList ( k ) ;
67311: LD_ADDR_VAR 0 9
67315: PUSH
67316: LD_VAR 0 6
67320: PPUSH
67321: CALL_OW 478
67325: ST_TO_ADDR
// if not weapons then
67326: LD_VAR 0 9
67330: NOT
67331: IFFALSE 67335
// continue ;
67333: GO 67308
// if weapon in weapons then
67335: LD_VAR 0 8
67339: PUSH
67340: LD_VAR 0 9
67344: IN
67345: IFFALSE 67372
// begin result := [ i , weapon ] ;
67347: LD_ADDR_VAR 0 3
67351: PUSH
67352: LD_VAR 0 4
67356: PUSH
67357: LD_VAR 0 8
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// exit ;
67366: POP
67367: POP
67368: POP
67369: POP
67370: GO 67380
// end ; end ;
67372: GO 67308
67374: POP
67375: POP
// end ;
67376: GO 67194
67378: POP
67379: POP
// end ;
67380: LD_VAR 0 3
67384: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67385: LD_INT 0
67387: PPUSH
// if not side or side > 8 then
67388: LD_VAR 0 3
67392: NOT
67393: PUSH
67394: LD_VAR 0 3
67398: PUSH
67399: LD_INT 8
67401: GREATER
67402: OR
67403: IFFALSE 67407
// exit ;
67405: GO 67466
// if not range then
67407: LD_VAR 0 4
67411: NOT
67412: IFFALSE 67423
// range := - 12 ;
67414: LD_ADDR_VAR 0 4
67418: PUSH
67419: LD_INT 12
67421: NEG
67422: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67423: LD_VAR 0 1
67427: PPUSH
67428: LD_VAR 0 2
67432: PPUSH
67433: LD_VAR 0 3
67437: PPUSH
67438: LD_VAR 0 4
67442: PPUSH
67443: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67447: LD_VAR 0 1
67451: PPUSH
67452: LD_VAR 0 2
67456: PPUSH
67457: LD_VAR 0 3
67461: PPUSH
67462: CALL_OW 331
// end ;
67466: LD_VAR 0 5
67470: RET
// export function Video ( mode ) ; begin
67471: LD_INT 0
67473: PPUSH
// ingame_video = mode ;
67474: LD_ADDR_OWVAR 52
67478: PUSH
67479: LD_VAR 0 1
67483: ST_TO_ADDR
// interface_hidden = mode ;
67484: LD_ADDR_OWVAR 54
67488: PUSH
67489: LD_VAR 0 1
67493: ST_TO_ADDR
// end ;
67494: LD_VAR 0 2
67498: RET
// export function Join ( array , element ) ; begin
67499: LD_INT 0
67501: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67502: LD_ADDR_VAR 0 3
67506: PUSH
67507: LD_VAR 0 1
67511: PPUSH
67512: LD_VAR 0 1
67516: PUSH
67517: LD_INT 1
67519: PLUS
67520: PPUSH
67521: LD_VAR 0 2
67525: PPUSH
67526: CALL_OW 1
67530: ST_TO_ADDR
// end ;
67531: LD_VAR 0 3
67535: RET
// export function JoinUnion ( array , element ) ; begin
67536: LD_INT 0
67538: PPUSH
// result := array union element ;
67539: LD_ADDR_VAR 0 3
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: LD_VAR 0 2
67553: UNION
67554: ST_TO_ADDR
// end ;
67555: LD_VAR 0 3
67559: RET
// export function GetBehemoths ( side ) ; begin
67560: LD_INT 0
67562: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67563: LD_ADDR_VAR 0 2
67567: PUSH
67568: LD_INT 22
67570: PUSH
67571: LD_VAR 0 1
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 31
67582: PUSH
67583: LD_INT 25
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PPUSH
67594: CALL_OW 69
67598: ST_TO_ADDR
// end ;
67599: LD_VAR 0 2
67603: RET
// export function Shuffle ( array ) ; var i , index ; begin
67604: LD_INT 0
67606: PPUSH
67607: PPUSH
67608: PPUSH
// result := [ ] ;
67609: LD_ADDR_VAR 0 2
67613: PUSH
67614: EMPTY
67615: ST_TO_ADDR
// if not array then
67616: LD_VAR 0 1
67620: NOT
67621: IFFALSE 67625
// exit ;
67623: GO 67724
// Randomize ;
67625: CALL_OW 10
// for i = array downto 1 do
67629: LD_ADDR_VAR 0 3
67633: PUSH
67634: DOUBLE
67635: LD_VAR 0 1
67639: INC
67640: ST_TO_ADDR
67641: LD_INT 1
67643: PUSH
67644: FOR_DOWNTO
67645: IFFALSE 67722
// begin index := rand ( 1 , array ) ;
67647: LD_ADDR_VAR 0 4
67651: PUSH
67652: LD_INT 1
67654: PPUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 12
67664: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67665: LD_ADDR_VAR 0 2
67669: PUSH
67670: LD_VAR 0 2
67674: PPUSH
67675: LD_VAR 0 2
67679: PUSH
67680: LD_INT 1
67682: PLUS
67683: PPUSH
67684: LD_VAR 0 1
67688: PUSH
67689: LD_VAR 0 4
67693: ARRAY
67694: PPUSH
67695: CALL_OW 2
67699: ST_TO_ADDR
// array := Delete ( array , index ) ;
67700: LD_ADDR_VAR 0 1
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_VAR 0 4
67714: PPUSH
67715: CALL_OW 3
67719: ST_TO_ADDR
// end ;
67720: GO 67644
67722: POP
67723: POP
// end ;
67724: LD_VAR 0 2
67728: RET
// export function GetBaseMaterials ( base ) ; begin
67729: LD_INT 0
67731: PPUSH
// result := [ 0 , 0 , 0 ] ;
67732: LD_ADDR_VAR 0 2
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: ST_TO_ADDR
// if not base then
67751: LD_VAR 0 1
67755: NOT
67756: IFFALSE 67760
// exit ;
67758: GO 67809
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67760: LD_ADDR_VAR 0 2
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: LD_INT 1
67772: PPUSH
67773: CALL_OW 275
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_INT 2
67785: PPUSH
67786: CALL_OW 275
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: LD_INT 3
67798: PPUSH
67799: CALL_OW 275
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// end ;
67809: LD_VAR 0 2
67813: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
// result := array ;
67818: LD_ADDR_VAR 0 3
67822: PUSH
67823: LD_VAR 0 1
67827: ST_TO_ADDR
// if size >= result then
67828: LD_VAR 0 2
67832: PUSH
67833: LD_VAR 0 3
67837: GREATEREQUAL
67838: IFFALSE 67842
// exit ;
67840: GO 67892
// if size then
67842: LD_VAR 0 2
67846: IFFALSE 67892
// for i := array downto size do
67848: LD_ADDR_VAR 0 4
67852: PUSH
67853: DOUBLE
67854: LD_VAR 0 1
67858: INC
67859: ST_TO_ADDR
67860: LD_VAR 0 2
67864: PUSH
67865: FOR_DOWNTO
67866: IFFALSE 67890
// result := Delete ( result , result ) ;
67868: LD_ADDR_VAR 0 3
67872: PUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: LD_VAR 0 3
67882: PPUSH
67883: CALL_OW 3
67887: ST_TO_ADDR
67888: GO 67865
67890: POP
67891: POP
// end ;
67892: LD_VAR 0 3
67896: RET
// export function ComExit ( unit ) ; var tmp ; begin
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
// if not IsInUnit ( unit ) then
67901: LD_VAR 0 1
67905: PPUSH
67906: CALL_OW 310
67910: NOT
67911: IFFALSE 67915
// exit ;
67913: GO 67975
// tmp := IsInUnit ( unit ) ;
67915: LD_ADDR_VAR 0 3
67919: PUSH
67920: LD_VAR 0 1
67924: PPUSH
67925: CALL_OW 310
67929: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67930: LD_VAR 0 3
67934: PPUSH
67935: CALL_OW 247
67939: PUSH
67940: LD_INT 2
67942: EQUAL
67943: IFFALSE 67956
// ComExitVehicle ( unit ) else
67945: LD_VAR 0 1
67949: PPUSH
67950: CALL_OW 121
67954: GO 67965
// ComExitBuilding ( unit ) ;
67956: LD_VAR 0 1
67960: PPUSH
67961: CALL_OW 122
// result := tmp ;
67965: LD_ADDR_VAR 0 2
67969: PUSH
67970: LD_VAR 0 3
67974: ST_TO_ADDR
// end ;
67975: LD_VAR 0 2
67979: RET
// export function ComExitAll ( units ) ; var i ; begin
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
// if not units then
67984: LD_VAR 0 1
67988: NOT
67989: IFFALSE 67993
// exit ;
67991: GO 68019
// for i in units do
67993: LD_ADDR_VAR 0 3
67997: PUSH
67998: LD_VAR 0 1
68002: PUSH
68003: FOR_IN
68004: IFFALSE 68017
// ComExit ( i ) ;
68006: LD_VAR 0 3
68010: PPUSH
68011: CALL 67897 0 1
68015: GO 68003
68017: POP
68018: POP
// end ;
68019: LD_VAR 0 2
68023: RET
// export function ResetHc ; begin
68024: LD_INT 0
68026: PPUSH
// InitHc ;
68027: CALL_OW 19
// hc_importance := 0 ;
68031: LD_ADDR_OWVAR 32
68035: PUSH
68036: LD_INT 0
68038: ST_TO_ADDR
// end ;
68039: LD_VAR 0 1
68043: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68044: LD_INT 0
68046: PPUSH
68047: PPUSH
68048: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68049: LD_ADDR_VAR 0 6
68053: PUSH
68054: LD_VAR 0 1
68058: PUSH
68059: LD_VAR 0 3
68063: PLUS
68064: PUSH
68065: LD_INT 2
68067: DIV
68068: ST_TO_ADDR
// if _x < 0 then
68069: LD_VAR 0 6
68073: PUSH
68074: LD_INT 0
68076: LESS
68077: IFFALSE 68094
// _x := _x * - 1 ;
68079: LD_ADDR_VAR 0 6
68083: PUSH
68084: LD_VAR 0 6
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: MUL
68093: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68094: LD_ADDR_VAR 0 7
68098: PUSH
68099: LD_VAR 0 2
68103: PUSH
68104: LD_VAR 0 4
68108: PLUS
68109: PUSH
68110: LD_INT 2
68112: DIV
68113: ST_TO_ADDR
// if _y < 0 then
68114: LD_VAR 0 7
68118: PUSH
68119: LD_INT 0
68121: LESS
68122: IFFALSE 68139
// _y := _y * - 1 ;
68124: LD_ADDR_VAR 0 7
68128: PUSH
68129: LD_VAR 0 7
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: MUL
68138: ST_TO_ADDR
// result := [ _x , _y ] ;
68139: LD_ADDR_VAR 0 5
68143: PUSH
68144: LD_VAR 0 6
68148: PUSH
68149: LD_VAR 0 7
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 5
68162: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68163: LD_INT 0
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
// task := GetTaskList ( unit ) ;
68169: LD_ADDR_VAR 0 7
68173: PUSH
68174: LD_VAR 0 1
68178: PPUSH
68179: CALL_OW 437
68183: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68184: LD_VAR 0 7
68188: NOT
68189: PUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: LD_VAR 0 2
68199: PPUSH
68200: CALL_OW 308
68204: NOT
68205: AND
68206: IFFALSE 68210
// exit ;
68208: GO 68328
// if IsInArea ( unit , area ) then
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_VAR 0 2
68219: PPUSH
68220: CALL_OW 308
68224: IFFALSE 68242
// begin ComMoveToArea ( unit , goAway ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: CALL_OW 113
// exit ;
68240: GO 68328
// end ; if task [ 1 ] [ 1 ] <> M then
68242: LD_VAR 0 7
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: PUSH
68251: LD_INT 1
68253: ARRAY
68254: PUSH
68255: LD_STRING M
68257: NONEQUAL
68258: IFFALSE 68262
// exit ;
68260: GO 68328
// x := task [ 1 ] [ 2 ] ;
68262: LD_ADDR_VAR 0 5
68266: PUSH
68267: LD_VAR 0 7
68271: PUSH
68272: LD_INT 1
68274: ARRAY
68275: PUSH
68276: LD_INT 2
68278: ARRAY
68279: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68280: LD_ADDR_VAR 0 6
68284: PUSH
68285: LD_VAR 0 7
68289: PUSH
68290: LD_INT 1
68292: ARRAY
68293: PUSH
68294: LD_INT 3
68296: ARRAY
68297: ST_TO_ADDR
// if InArea ( x , y , area ) then
68298: LD_VAR 0 5
68302: PPUSH
68303: LD_VAR 0 6
68307: PPUSH
68308: LD_VAR 0 2
68312: PPUSH
68313: CALL_OW 309
68317: IFFALSE 68328
// ComStop ( unit ) ;
68319: LD_VAR 0 1
68323: PPUSH
68324: CALL_OW 141
// end ;
68328: LD_VAR 0 4
68332: RET
// export function Abs ( value ) ; begin
68333: LD_INT 0
68335: PPUSH
// result := value ;
68336: LD_ADDR_VAR 0 2
68340: PUSH
68341: LD_VAR 0 1
68345: ST_TO_ADDR
// if value < 0 then
68346: LD_VAR 0 1
68350: PUSH
68351: LD_INT 0
68353: LESS
68354: IFFALSE 68371
// result := value * - 1 ;
68356: LD_ADDR_VAR 0 2
68360: PUSH
68361: LD_VAR 0 1
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: MUL
68370: ST_TO_ADDR
// end ;
68371: LD_VAR 0 2
68375: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68376: LD_INT 0
68378: PPUSH
68379: PPUSH
68380: PPUSH
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
// if not unit or not building then
68386: LD_VAR 0 1
68390: NOT
68391: PUSH
68392: LD_VAR 0 2
68396: NOT
68397: OR
68398: IFFALSE 68402
// exit ;
68400: GO 68628
// x := GetX ( building ) ;
68402: LD_ADDR_VAR 0 4
68406: PUSH
68407: LD_VAR 0 2
68411: PPUSH
68412: CALL_OW 250
68416: ST_TO_ADDR
// y := GetY ( building ) ;
68417: LD_ADDR_VAR 0 6
68421: PUSH
68422: LD_VAR 0 2
68426: PPUSH
68427: CALL_OW 251
68431: ST_TO_ADDR
// d := GetDir ( building ) ;
68432: LD_ADDR_VAR 0 8
68436: PUSH
68437: LD_VAR 0 2
68441: PPUSH
68442: CALL_OW 254
68446: ST_TO_ADDR
// r := 4 ;
68447: LD_ADDR_VAR 0 9
68451: PUSH
68452: LD_INT 4
68454: ST_TO_ADDR
// for i := 1 to 5 do
68455: LD_ADDR_VAR 0 10
68459: PUSH
68460: DOUBLE
68461: LD_INT 1
68463: DEC
68464: ST_TO_ADDR
68465: LD_INT 5
68467: PUSH
68468: FOR_TO
68469: IFFALSE 68626
// begin _x := ShiftX ( x , d , r + i ) ;
68471: LD_ADDR_VAR 0 5
68475: PUSH
68476: LD_VAR 0 4
68480: PPUSH
68481: LD_VAR 0 8
68485: PPUSH
68486: LD_VAR 0 9
68490: PUSH
68491: LD_VAR 0 10
68495: PLUS
68496: PPUSH
68497: CALL_OW 272
68501: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68502: LD_ADDR_VAR 0 7
68506: PUSH
68507: LD_VAR 0 6
68511: PPUSH
68512: LD_VAR 0 8
68516: PPUSH
68517: LD_VAR 0 9
68521: PUSH
68522: LD_VAR 0 10
68526: PLUS
68527: PPUSH
68528: CALL_OW 273
68532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_VAR 0 7
68542: PPUSH
68543: CALL_OW 488
68547: PUSH
68548: LD_VAR 0 5
68552: PPUSH
68553: LD_VAR 0 7
68557: PPUSH
68558: CALL_OW 428
68562: PPUSH
68563: CALL_OW 247
68567: PUSH
68568: LD_INT 3
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: IN
68578: NOT
68579: AND
68580: IFFALSE 68624
// begin ComMoveXY ( unit , _x , _y ) ;
68582: LD_VAR 0 1
68586: PPUSH
68587: LD_VAR 0 5
68591: PPUSH
68592: LD_VAR 0 7
68596: PPUSH
68597: CALL_OW 111
// result := [ _x , _y ] ;
68601: LD_ADDR_VAR 0 3
68605: PUSH
68606: LD_VAR 0 5
68610: PUSH
68611: LD_VAR 0 7
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: ST_TO_ADDR
// exit ;
68620: POP
68621: POP
68622: GO 68628
// end ; end ;
68624: GO 68468
68626: POP
68627: POP
// end ;
68628: LD_VAR 0 3
68632: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68633: LD_INT 0
68635: PPUSH
68636: PPUSH
68637: PPUSH
// result := 0 ;
68638: LD_ADDR_VAR 0 3
68642: PUSH
68643: LD_INT 0
68645: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68646: LD_VAR 0 1
68650: PUSH
68651: LD_INT 0
68653: LESS
68654: PUSH
68655: LD_VAR 0 1
68659: PUSH
68660: LD_INT 8
68662: GREATER
68663: OR
68664: PUSH
68665: LD_VAR 0 2
68669: PUSH
68670: LD_INT 0
68672: LESS
68673: OR
68674: PUSH
68675: LD_VAR 0 2
68679: PUSH
68680: LD_INT 8
68682: GREATER
68683: OR
68684: IFFALSE 68688
// exit ;
68686: GO 68763
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68688: LD_ADDR_VAR 0 4
68692: PUSH
68693: LD_INT 22
68695: PUSH
68696: LD_VAR 0 2
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PPUSH
68705: CALL_OW 69
68709: PUSH
68710: FOR_IN
68711: IFFALSE 68761
// begin un := UnitShoot ( i ) ;
68713: LD_ADDR_VAR 0 5
68717: PUSH
68718: LD_VAR 0 4
68722: PPUSH
68723: CALL_OW 504
68727: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68728: LD_VAR 0 5
68732: PPUSH
68733: CALL_OW 255
68737: PUSH
68738: LD_VAR 0 1
68742: EQUAL
68743: IFFALSE 68759
// begin result := un ;
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_VAR 0 5
68754: ST_TO_ADDR
// exit ;
68755: POP
68756: POP
68757: GO 68763
// end ; end ;
68759: GO 68710
68761: POP
68762: POP
// end ;
68763: LD_VAR 0 3
68767: RET
// export function GetCargoBay ( units ) ; begin
68768: LD_INT 0
68770: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68771: LD_ADDR_VAR 0 2
68775: PUSH
68776: LD_VAR 0 1
68780: PPUSH
68781: LD_INT 2
68783: PUSH
68784: LD_INT 34
68786: PUSH
68787: LD_INT 12
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 34
68796: PUSH
68797: LD_INT 51
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 34
68806: PUSH
68807: LD_INT 32
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 34
68816: PUSH
68817: LD_INT 89
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: PPUSH
68831: CALL_OW 72
68835: ST_TO_ADDR
// end ;
68836: LD_VAR 0 2
68840: RET
// export function Negate ( value ) ; begin
68841: LD_INT 0
68843: PPUSH
// result := not value ;
68844: LD_ADDR_VAR 0 2
68848: PUSH
68849: LD_VAR 0 1
68853: NOT
68854: ST_TO_ADDR
// end ;
68855: LD_VAR 0 2
68859: RET
// export function Inc ( value ) ; begin
68860: LD_INT 0
68862: PPUSH
// result := value + 1 ;
68863: LD_ADDR_VAR 0 2
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: LD_INT 1
68875: PLUS
68876: ST_TO_ADDR
// end ;
68877: LD_VAR 0 2
68881: RET
// export function Dec ( value ) ; begin
68882: LD_INT 0
68884: PPUSH
// result := value - 1 ;
68885: LD_ADDR_VAR 0 2
68889: PUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 1
68897: MINUS
68898: ST_TO_ADDR
// end ;
68899: LD_VAR 0 2
68903: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68914: LD_VAR 0 1
68918: PPUSH
68919: LD_VAR 0 2
68923: PPUSH
68924: CALL_OW 488
68928: NOT
68929: PUSH
68930: LD_VAR 0 3
68934: PPUSH
68935: LD_VAR 0 4
68939: PPUSH
68940: CALL_OW 488
68944: NOT
68945: OR
68946: IFFALSE 68959
// begin result := - 1 ;
68948: LD_ADDR_VAR 0 5
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: ST_TO_ADDR
// exit ;
68957: GO 69194
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68959: LD_ADDR_VAR 0 12
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: LD_VAR 0 2
68973: PPUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: LD_VAR 0 4
68983: PPUSH
68984: CALL 68044 0 4
68988: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68989: LD_ADDR_VAR 0 11
68993: PUSH
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 2
69003: PPUSH
69004: LD_VAR 0 12
69008: PUSH
69009: LD_INT 1
69011: ARRAY
69012: PPUSH
69013: LD_VAR 0 12
69017: PUSH
69018: LD_INT 2
69020: ARRAY
69021: PPUSH
69022: CALL_OW 298
69026: ST_TO_ADDR
// distance := 9999 ;
69027: LD_ADDR_VAR 0 10
69031: PUSH
69032: LD_INT 9999
69034: ST_TO_ADDR
// for i := 0 to 5 do
69035: LD_ADDR_VAR 0 6
69039: PUSH
69040: DOUBLE
69041: LD_INT 0
69043: DEC
69044: ST_TO_ADDR
69045: LD_INT 5
69047: PUSH
69048: FOR_TO
69049: IFFALSE 69192
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69051: LD_ADDR_VAR 0 7
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: LD_VAR 0 6
69065: PPUSH
69066: LD_VAR 0 11
69070: PPUSH
69071: CALL_OW 272
69075: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69076: LD_ADDR_VAR 0 8
69080: PUSH
69081: LD_VAR 0 2
69085: PPUSH
69086: LD_VAR 0 6
69090: PPUSH
69091: LD_VAR 0 11
69095: PPUSH
69096: CALL_OW 273
69100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69101: LD_VAR 0 7
69105: PPUSH
69106: LD_VAR 0 8
69110: PPUSH
69111: CALL_OW 488
69115: NOT
69116: IFFALSE 69120
// continue ;
69118: GO 69048
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69120: LD_ADDR_VAR 0 9
69124: PUSH
69125: LD_VAR 0 12
69129: PUSH
69130: LD_INT 1
69132: ARRAY
69133: PPUSH
69134: LD_VAR 0 12
69138: PUSH
69139: LD_INT 2
69141: ARRAY
69142: PPUSH
69143: LD_VAR 0 7
69147: PPUSH
69148: LD_VAR 0 8
69152: PPUSH
69153: CALL_OW 298
69157: ST_TO_ADDR
// if tmp < distance then
69158: LD_VAR 0 9
69162: PUSH
69163: LD_VAR 0 10
69167: LESS
69168: IFFALSE 69190
// begin result := i ;
69170: LD_ADDR_VAR 0 5
69174: PUSH
69175: LD_VAR 0 6
69179: ST_TO_ADDR
// distance := tmp ;
69180: LD_ADDR_VAR 0 10
69184: PUSH
69185: LD_VAR 0 9
69189: ST_TO_ADDR
// end ; end ;
69190: GO 69048
69192: POP
69193: POP
// end ;
69194: LD_VAR 0 5
69198: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69199: LD_INT 0
69201: PPUSH
69202: PPUSH
// if not driver or not IsInUnit ( driver ) then
69203: LD_VAR 0 1
69207: NOT
69208: PUSH
69209: LD_VAR 0 1
69213: PPUSH
69214: CALL_OW 310
69218: NOT
69219: OR
69220: IFFALSE 69224
// exit ;
69222: GO 69314
// vehicle := IsInUnit ( driver ) ;
69224: LD_ADDR_VAR 0 3
69228: PUSH
69229: LD_VAR 0 1
69233: PPUSH
69234: CALL_OW 310
69238: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69239: LD_VAR 0 1
69243: PPUSH
69244: LD_STRING \
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: PUSH
69274: LD_STRING E
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_VAR 0 3
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PPUSH
69310: CALL_OW 446
// end ;
69314: LD_VAR 0 2
69318: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69319: LD_INT 0
69321: PPUSH
69322: PPUSH
// if not driver or not IsInUnit ( driver ) then
69323: LD_VAR 0 1
69327: NOT
69328: PUSH
69329: LD_VAR 0 1
69333: PPUSH
69334: CALL_OW 310
69338: NOT
69339: OR
69340: IFFALSE 69344
// exit ;
69342: GO 69434
// vehicle := IsInUnit ( driver ) ;
69344: LD_ADDR_VAR 0 3
69348: PUSH
69349: LD_VAR 0 1
69353: PPUSH
69354: CALL_OW 310
69358: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69359: LD_VAR 0 1
69363: PPUSH
69364: LD_STRING \
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: PUSH
69394: LD_STRING E
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_VAR 0 3
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PPUSH
69430: CALL_OW 447
// end ;
69434: LD_VAR 0 2
69438: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69439: LD_INT 0
69441: PPUSH
69442: PPUSH
69443: PPUSH
// tmp := [ ] ;
69444: LD_ADDR_VAR 0 5
69448: PUSH
69449: EMPTY
69450: ST_TO_ADDR
// for i in units do
69451: LD_ADDR_VAR 0 4
69455: PUSH
69456: LD_VAR 0 1
69460: PUSH
69461: FOR_IN
69462: IFFALSE 69500
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69464: LD_ADDR_VAR 0 5
69468: PUSH
69469: LD_VAR 0 5
69473: PPUSH
69474: LD_VAR 0 5
69478: PUSH
69479: LD_INT 1
69481: PLUS
69482: PPUSH
69483: LD_VAR 0 4
69487: PPUSH
69488: CALL_OW 256
69492: PPUSH
69493: CALL_OW 2
69497: ST_TO_ADDR
69498: GO 69461
69500: POP
69501: POP
// if not tmp then
69502: LD_VAR 0 5
69506: NOT
69507: IFFALSE 69511
// exit ;
69509: GO 69559
// if asc then
69511: LD_VAR 0 2
69515: IFFALSE 69539
// result := SortListByListAsc ( units , tmp ) else
69517: LD_ADDR_VAR 0 3
69521: PUSH
69522: LD_VAR 0 1
69526: PPUSH
69527: LD_VAR 0 5
69531: PPUSH
69532: CALL_OW 76
69536: ST_TO_ADDR
69537: GO 69559
// result := SortListByListDesc ( units , tmp ) ;
69539: LD_ADDR_VAR 0 3
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: LD_VAR 0 5
69553: PPUSH
69554: CALL_OW 77
69558: ST_TO_ADDR
// end ;
69559: LD_VAR 0 3
69563: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69564: LD_INT 0
69566: PPUSH
69567: PPUSH
// task := GetTaskList ( mech ) ;
69568: LD_ADDR_VAR 0 4
69572: PUSH
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL_OW 437
69582: ST_TO_ADDR
// if not task then
69583: LD_VAR 0 4
69587: NOT
69588: IFFALSE 69592
// exit ;
69590: GO 69634
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69592: LD_ADDR_VAR 0 3
69596: PUSH
69597: LD_VAR 0 4
69601: PUSH
69602: LD_INT 1
69604: ARRAY
69605: PUSH
69606: LD_INT 1
69608: ARRAY
69609: PUSH
69610: LD_STRING r
69612: EQUAL
69613: PUSH
69614: LD_VAR 0 4
69618: PUSH
69619: LD_INT 1
69621: ARRAY
69622: PUSH
69623: LD_INT 4
69625: ARRAY
69626: PUSH
69627: LD_VAR 0 2
69631: EQUAL
69632: AND
69633: ST_TO_ADDR
// end ;
69634: LD_VAR 0 3
69638: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69639: LD_INT 0
69641: PPUSH
// SetDir ( unit , d ) ;
69642: LD_VAR 0 1
69646: PPUSH
69647: LD_VAR 0 4
69651: PPUSH
69652: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69656: LD_VAR 0 1
69660: PPUSH
69661: LD_VAR 0 2
69665: PPUSH
69666: LD_VAR 0 3
69670: PPUSH
69671: LD_VAR 0 5
69675: PPUSH
69676: CALL_OW 48
// end ;
69680: LD_VAR 0 6
69684: RET
// export function ToNaturalNumber ( number ) ; begin
69685: LD_INT 0
69687: PPUSH
// result := number div 1 ;
69688: LD_ADDR_VAR 0 2
69692: PUSH
69693: LD_VAR 0 1
69697: PUSH
69698: LD_INT 1
69700: DIV
69701: ST_TO_ADDR
// if number < 0 then
69702: LD_VAR 0 1
69706: PUSH
69707: LD_INT 0
69709: LESS
69710: IFFALSE 69720
// result := 0 ;
69712: LD_ADDR_VAR 0 2
69716: PUSH
69717: LD_INT 0
69719: ST_TO_ADDR
// end ;
69720: LD_VAR 0 2
69724: RET
// export function SortByClass ( units , class ) ; var un ; begin
69725: LD_INT 0
69727: PPUSH
69728: PPUSH
// if not units or not class then
69729: LD_VAR 0 1
69733: NOT
69734: PUSH
69735: LD_VAR 0 2
69739: NOT
69740: OR
69741: IFFALSE 69745
// exit ;
69743: GO 69840
// result := [ ] ;
69745: LD_ADDR_VAR 0 3
69749: PUSH
69750: EMPTY
69751: ST_TO_ADDR
// for un in units do
69752: LD_ADDR_VAR 0 4
69756: PUSH
69757: LD_VAR 0 1
69761: PUSH
69762: FOR_IN
69763: IFFALSE 69838
// if GetClass ( un ) = class then
69765: LD_VAR 0 4
69769: PPUSH
69770: CALL_OW 257
69774: PUSH
69775: LD_VAR 0 2
69779: EQUAL
69780: IFFALSE 69807
// result := Insert ( result , 1 , un ) else
69782: LD_ADDR_VAR 0 3
69786: PUSH
69787: LD_VAR 0 3
69791: PPUSH
69792: LD_INT 1
69794: PPUSH
69795: LD_VAR 0 4
69799: PPUSH
69800: CALL_OW 2
69804: ST_TO_ADDR
69805: GO 69836
// result := Replace ( result , result + 1 , un ) ;
69807: LD_ADDR_VAR 0 3
69811: PUSH
69812: LD_VAR 0 3
69816: PPUSH
69817: LD_VAR 0 3
69821: PUSH
69822: LD_INT 1
69824: PLUS
69825: PPUSH
69826: LD_VAR 0 4
69830: PPUSH
69831: CALL_OW 1
69835: ST_TO_ADDR
69836: GO 69762
69838: POP
69839: POP
// end ;
69840: LD_VAR 0 3
69844: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69845: LD_INT 0
69847: PPUSH
69848: PPUSH
69849: PPUSH
69850: PPUSH
69851: PPUSH
69852: PPUSH
69853: PPUSH
// result := [ ] ;
69854: LD_ADDR_VAR 0 4
69858: PUSH
69859: EMPTY
69860: ST_TO_ADDR
// if x - r < 0 then
69861: LD_VAR 0 1
69865: PUSH
69866: LD_VAR 0 3
69870: MINUS
69871: PUSH
69872: LD_INT 0
69874: LESS
69875: IFFALSE 69887
// min_x := 0 else
69877: LD_ADDR_VAR 0 8
69881: PUSH
69882: LD_INT 0
69884: ST_TO_ADDR
69885: GO 69903
// min_x := x - r ;
69887: LD_ADDR_VAR 0 8
69891: PUSH
69892: LD_VAR 0 1
69896: PUSH
69897: LD_VAR 0 3
69901: MINUS
69902: ST_TO_ADDR
// if y - r < 0 then
69903: LD_VAR 0 2
69907: PUSH
69908: LD_VAR 0 3
69912: MINUS
69913: PUSH
69914: LD_INT 0
69916: LESS
69917: IFFALSE 69929
// min_y := 0 else
69919: LD_ADDR_VAR 0 7
69923: PUSH
69924: LD_INT 0
69926: ST_TO_ADDR
69927: GO 69945
// min_y := y - r ;
69929: LD_ADDR_VAR 0 7
69933: PUSH
69934: LD_VAR 0 2
69938: PUSH
69939: LD_VAR 0 3
69943: MINUS
69944: ST_TO_ADDR
// max_x := x + r ;
69945: LD_ADDR_VAR 0 9
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_VAR 0 3
69959: PLUS
69960: ST_TO_ADDR
// max_y := y + r ;
69961: LD_ADDR_VAR 0 10
69965: PUSH
69966: LD_VAR 0 2
69970: PUSH
69971: LD_VAR 0 3
69975: PLUS
69976: ST_TO_ADDR
// for _x = min_x to max_x do
69977: LD_ADDR_VAR 0 5
69981: PUSH
69982: DOUBLE
69983: LD_VAR 0 8
69987: DEC
69988: ST_TO_ADDR
69989: LD_VAR 0 9
69993: PUSH
69994: FOR_TO
69995: IFFALSE 70096
// for _y = min_y to max_y do
69997: LD_ADDR_VAR 0 6
70001: PUSH
70002: DOUBLE
70003: LD_VAR 0 7
70007: DEC
70008: ST_TO_ADDR
70009: LD_VAR 0 10
70013: PUSH
70014: FOR_TO
70015: IFFALSE 70092
// begin if not ValidHex ( _x , _y ) then
70017: LD_VAR 0 5
70021: PPUSH
70022: LD_VAR 0 6
70026: PPUSH
70027: CALL_OW 488
70031: NOT
70032: IFFALSE 70036
// continue ;
70034: GO 70014
// if GetResourceTypeXY ( _x , _y ) then
70036: LD_VAR 0 5
70040: PPUSH
70041: LD_VAR 0 6
70045: PPUSH
70046: CALL_OW 283
70050: IFFALSE 70090
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70052: LD_ADDR_VAR 0 4
70056: PUSH
70057: LD_VAR 0 4
70061: PPUSH
70062: LD_VAR 0 4
70066: PUSH
70067: LD_INT 1
70069: PLUS
70070: PPUSH
70071: LD_VAR 0 5
70075: PUSH
70076: LD_VAR 0 6
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PPUSH
70085: CALL_OW 1
70089: ST_TO_ADDR
// end ;
70090: GO 70014
70092: POP
70093: POP
70094: GO 69994
70096: POP
70097: POP
// end ;
70098: LD_VAR 0 4
70102: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70103: LD_INT 0
70105: PPUSH
70106: PPUSH
70107: PPUSH
70108: PPUSH
70109: PPUSH
70110: PPUSH
70111: PPUSH
70112: PPUSH
// if not units then
70113: LD_VAR 0 1
70117: NOT
70118: IFFALSE 70122
// exit ;
70120: GO 70646
// result := UnitFilter ( units , [ f_ok ] ) ;
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: LD_INT 50
70134: PUSH
70135: EMPTY
70136: LIST
70137: PPUSH
70138: CALL_OW 72
70142: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70143: LD_ADDR_VAR 0 8
70147: PUSH
70148: LD_VAR 0 1
70152: PUSH
70153: LD_INT 1
70155: ARRAY
70156: PPUSH
70157: CALL_OW 255
70161: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70162: LD_ADDR_VAR 0 10
70166: PUSH
70167: LD_INT 29
70169: PUSH
70170: LD_INT 91
70172: PUSH
70173: LD_INT 49
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: LIST
70180: ST_TO_ADDR
// if not result then
70181: LD_VAR 0 3
70185: NOT
70186: IFFALSE 70190
// exit ;
70188: GO 70646
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70190: LD_ADDR_VAR 0 5
70194: PUSH
70195: LD_INT 81
70197: PUSH
70198: LD_VAR 0 8
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PPUSH
70207: CALL_OW 69
70211: ST_TO_ADDR
// for i in result do
70212: LD_ADDR_VAR 0 4
70216: PUSH
70217: LD_VAR 0 3
70221: PUSH
70222: FOR_IN
70223: IFFALSE 70644
// begin tag := GetTag ( i ) + 1 ;
70225: LD_ADDR_VAR 0 9
70229: PUSH
70230: LD_VAR 0 4
70234: PPUSH
70235: CALL_OW 110
70239: PUSH
70240: LD_INT 1
70242: PLUS
70243: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70244: LD_ADDR_VAR 0 7
70248: PUSH
70249: LD_VAR 0 4
70253: PPUSH
70254: CALL_OW 250
70258: PPUSH
70259: LD_VAR 0 4
70263: PPUSH
70264: CALL_OW 251
70268: PPUSH
70269: LD_INT 6
70271: PPUSH
70272: CALL 69845 0 3
70276: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70277: LD_VAR 0 4
70281: PPUSH
70282: CALL_OW 247
70286: PUSH
70287: LD_INT 2
70289: EQUAL
70290: PUSH
70291: LD_VAR 0 7
70295: AND
70296: PUSH
70297: LD_VAR 0 4
70301: PPUSH
70302: CALL_OW 264
70306: PUSH
70307: LD_VAR 0 10
70311: IN
70312: NOT
70313: AND
70314: IFFALSE 70353
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70316: LD_VAR 0 4
70320: PPUSH
70321: LD_VAR 0 7
70325: PUSH
70326: LD_INT 1
70328: ARRAY
70329: PUSH
70330: LD_INT 1
70332: ARRAY
70333: PPUSH
70334: LD_VAR 0 7
70338: PUSH
70339: LD_INT 1
70341: ARRAY
70342: PUSH
70343: LD_INT 2
70345: ARRAY
70346: PPUSH
70347: CALL_OW 116
70351: GO 70642
// if path > tag then
70353: LD_VAR 0 2
70357: PUSH
70358: LD_VAR 0 9
70362: GREATER
70363: IFFALSE 70571
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70365: LD_ADDR_VAR 0 6
70369: PUSH
70370: LD_VAR 0 5
70374: PPUSH
70375: LD_INT 91
70377: PUSH
70378: LD_VAR 0 4
70382: PUSH
70383: LD_INT 8
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: PPUSH
70391: CALL_OW 72
70395: ST_TO_ADDR
// if nearEnemy then
70396: LD_VAR 0 6
70400: IFFALSE 70469
// begin if GetWeapon ( i ) = ru_time_lapser then
70402: LD_VAR 0 4
70406: PPUSH
70407: CALL_OW 264
70411: PUSH
70412: LD_INT 49
70414: EQUAL
70415: IFFALSE 70443
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70417: LD_VAR 0 4
70421: PPUSH
70422: LD_VAR 0 6
70426: PPUSH
70427: LD_VAR 0 4
70431: PPUSH
70432: CALL_OW 74
70436: PPUSH
70437: CALL_OW 112
70441: GO 70467
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70443: LD_VAR 0 4
70447: PPUSH
70448: LD_VAR 0 6
70452: PPUSH
70453: LD_VAR 0 4
70457: PPUSH
70458: CALL_OW 74
70462: PPUSH
70463: CALL_OW 115
// end else
70467: GO 70569
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70469: LD_VAR 0 4
70473: PPUSH
70474: LD_VAR 0 2
70478: PUSH
70479: LD_VAR 0 9
70483: ARRAY
70484: PUSH
70485: LD_INT 1
70487: ARRAY
70488: PPUSH
70489: LD_VAR 0 2
70493: PUSH
70494: LD_VAR 0 9
70498: ARRAY
70499: PUSH
70500: LD_INT 2
70502: ARRAY
70503: PPUSH
70504: CALL_OW 297
70508: PUSH
70509: LD_INT 6
70511: GREATER
70512: IFFALSE 70555
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70514: LD_VAR 0 4
70518: PPUSH
70519: LD_VAR 0 2
70523: PUSH
70524: LD_VAR 0 9
70528: ARRAY
70529: PUSH
70530: LD_INT 1
70532: ARRAY
70533: PPUSH
70534: LD_VAR 0 2
70538: PUSH
70539: LD_VAR 0 9
70543: ARRAY
70544: PUSH
70545: LD_INT 2
70547: ARRAY
70548: PPUSH
70549: CALL_OW 114
70553: GO 70569
// SetTag ( i , tag ) ;
70555: LD_VAR 0 4
70559: PPUSH
70560: LD_VAR 0 9
70564: PPUSH
70565: CALL_OW 109
// end else
70569: GO 70642
// if enemy then
70571: LD_VAR 0 5
70575: IFFALSE 70642
// begin if GetWeapon ( i ) = ru_time_lapser then
70577: LD_VAR 0 4
70581: PPUSH
70582: CALL_OW 264
70586: PUSH
70587: LD_INT 49
70589: EQUAL
70590: IFFALSE 70618
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70592: LD_VAR 0 4
70596: PPUSH
70597: LD_VAR 0 5
70601: PPUSH
70602: LD_VAR 0 4
70606: PPUSH
70607: CALL_OW 74
70611: PPUSH
70612: CALL_OW 112
70616: GO 70642
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70618: LD_VAR 0 4
70622: PPUSH
70623: LD_VAR 0 5
70627: PPUSH
70628: LD_VAR 0 4
70632: PPUSH
70633: CALL_OW 74
70637: PPUSH
70638: CALL_OW 115
// end ; end ;
70642: GO 70222
70644: POP
70645: POP
// end ;
70646: LD_VAR 0 3
70650: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70651: LD_INT 0
70653: PPUSH
70654: PPUSH
70655: PPUSH
// if not unit or IsInUnit ( unit ) then
70656: LD_VAR 0 1
70660: NOT
70661: PUSH
70662: LD_VAR 0 1
70666: PPUSH
70667: CALL_OW 310
70671: OR
70672: IFFALSE 70676
// exit ;
70674: GO 70767
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70676: LD_ADDR_VAR 0 4
70680: PUSH
70681: LD_VAR 0 1
70685: PPUSH
70686: CALL_OW 250
70690: PPUSH
70691: LD_VAR 0 2
70695: PPUSH
70696: LD_INT 1
70698: PPUSH
70699: CALL_OW 272
70703: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70704: LD_ADDR_VAR 0 5
70708: PUSH
70709: LD_VAR 0 1
70713: PPUSH
70714: CALL_OW 251
70718: PPUSH
70719: LD_VAR 0 2
70723: PPUSH
70724: LD_INT 1
70726: PPUSH
70727: CALL_OW 273
70731: ST_TO_ADDR
// if ValidHex ( x , y ) then
70732: LD_VAR 0 4
70736: PPUSH
70737: LD_VAR 0 5
70741: PPUSH
70742: CALL_OW 488
70746: IFFALSE 70767
// ComTurnXY ( unit , x , y ) ;
70748: LD_VAR 0 1
70752: PPUSH
70753: LD_VAR 0 4
70757: PPUSH
70758: LD_VAR 0 5
70762: PPUSH
70763: CALL_OW 118
// end ;
70767: LD_VAR 0 3
70771: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70772: LD_INT 0
70774: PPUSH
70775: PPUSH
// result := false ;
70776: LD_ADDR_VAR 0 3
70780: PUSH
70781: LD_INT 0
70783: ST_TO_ADDR
// if not units then
70784: LD_VAR 0 2
70788: NOT
70789: IFFALSE 70793
// exit ;
70791: GO 70838
// for i in units do
70793: LD_ADDR_VAR 0 4
70797: PUSH
70798: LD_VAR 0 2
70802: PUSH
70803: FOR_IN
70804: IFFALSE 70836
// if See ( side , i ) then
70806: LD_VAR 0 1
70810: PPUSH
70811: LD_VAR 0 4
70815: PPUSH
70816: CALL_OW 292
70820: IFFALSE 70834
// begin result := true ;
70822: LD_ADDR_VAR 0 3
70826: PUSH
70827: LD_INT 1
70829: ST_TO_ADDR
// exit ;
70830: POP
70831: POP
70832: GO 70838
// end ;
70834: GO 70803
70836: POP
70837: POP
// end ;
70838: LD_VAR 0 3
70842: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70843: LD_INT 0
70845: PPUSH
70846: PPUSH
70847: PPUSH
70848: PPUSH
// if not unit or not points then
70849: LD_VAR 0 1
70853: NOT
70854: PUSH
70855: LD_VAR 0 2
70859: NOT
70860: OR
70861: IFFALSE 70865
// exit ;
70863: GO 70955
// dist := 99999 ;
70865: LD_ADDR_VAR 0 5
70869: PUSH
70870: LD_INT 99999
70872: ST_TO_ADDR
// for i in points do
70873: LD_ADDR_VAR 0 4
70877: PUSH
70878: LD_VAR 0 2
70882: PUSH
70883: FOR_IN
70884: IFFALSE 70953
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70886: LD_ADDR_VAR 0 6
70890: PUSH
70891: LD_VAR 0 1
70895: PPUSH
70896: LD_VAR 0 4
70900: PUSH
70901: LD_INT 1
70903: ARRAY
70904: PPUSH
70905: LD_VAR 0 4
70909: PUSH
70910: LD_INT 2
70912: ARRAY
70913: PPUSH
70914: CALL_OW 297
70918: ST_TO_ADDR
// if tmpDist < dist then
70919: LD_VAR 0 6
70923: PUSH
70924: LD_VAR 0 5
70928: LESS
70929: IFFALSE 70951
// begin result := i ;
70931: LD_ADDR_VAR 0 3
70935: PUSH
70936: LD_VAR 0 4
70940: ST_TO_ADDR
// dist := tmpDist ;
70941: LD_ADDR_VAR 0 5
70945: PUSH
70946: LD_VAR 0 6
70950: ST_TO_ADDR
// end ; end ;
70951: GO 70883
70953: POP
70954: POP
// end ;
70955: LD_VAR 0 3
70959: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70960: LD_INT 0
70962: PPUSH
// uc_side := side ;
70963: LD_ADDR_OWVAR 20
70967: PUSH
70968: LD_VAR 0 1
70972: ST_TO_ADDR
// uc_nation := 3 ;
70973: LD_ADDR_OWVAR 21
70977: PUSH
70978: LD_INT 3
70980: ST_TO_ADDR
// vc_chassis := 25 ;
70981: LD_ADDR_OWVAR 37
70985: PUSH
70986: LD_INT 25
70988: ST_TO_ADDR
// vc_engine := engine_siberite ;
70989: LD_ADDR_OWVAR 39
70993: PUSH
70994: LD_INT 3
70996: ST_TO_ADDR
// vc_control := control_computer ;
70997: LD_ADDR_OWVAR 38
71001: PUSH
71002: LD_INT 3
71004: ST_TO_ADDR
// vc_weapon := 59 ;
71005: LD_ADDR_OWVAR 40
71009: PUSH
71010: LD_INT 59
71012: ST_TO_ADDR
// result := CreateVehicle ;
71013: LD_ADDR_VAR 0 5
71017: PUSH
71018: CALL_OW 45
71022: ST_TO_ADDR
// SetDir ( result , d ) ;
71023: LD_VAR 0 5
71027: PPUSH
71028: LD_VAR 0 4
71032: PPUSH
71033: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71037: LD_VAR 0 5
71041: PPUSH
71042: LD_VAR 0 2
71046: PPUSH
71047: LD_VAR 0 3
71051: PPUSH
71052: LD_INT 0
71054: PPUSH
71055: CALL_OW 48
// end ;
71059: LD_VAR 0 5
71063: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71064: LD_INT 0
71066: PPUSH
71067: PPUSH
71068: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71069: LD_ADDR_VAR 0 2
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: LD_INT 0
71079: PUSH
71080: LD_INT 0
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71092: LD_VAR 0 1
71096: NOT
71097: PUSH
71098: LD_VAR 0 1
71102: PPUSH
71103: CALL_OW 264
71107: PUSH
71108: LD_INT 12
71110: PUSH
71111: LD_INT 51
71113: PUSH
71114: LD_INT 32
71116: PUSH
71117: LD_INT 89
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: IN
71126: NOT
71127: OR
71128: IFFALSE 71132
// exit ;
71130: GO 71230
// for i := 1 to 3 do
71132: LD_ADDR_VAR 0 3
71136: PUSH
71137: DOUBLE
71138: LD_INT 1
71140: DEC
71141: ST_TO_ADDR
71142: LD_INT 3
71144: PUSH
71145: FOR_TO
71146: IFFALSE 71228
// begin tmp := GetCargo ( cargo , i ) ;
71148: LD_ADDR_VAR 0 4
71152: PUSH
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 3
71162: PPUSH
71163: CALL_OW 289
71167: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71168: LD_ADDR_VAR 0 2
71172: PUSH
71173: LD_VAR 0 2
71177: PPUSH
71178: LD_VAR 0 3
71182: PPUSH
71183: LD_VAR 0 4
71187: PPUSH
71188: CALL_OW 1
71192: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71193: LD_ADDR_VAR 0 2
71197: PUSH
71198: LD_VAR 0 2
71202: PPUSH
71203: LD_INT 4
71205: PPUSH
71206: LD_VAR 0 2
71210: PUSH
71211: LD_INT 4
71213: ARRAY
71214: PUSH
71215: LD_VAR 0 4
71219: PLUS
71220: PPUSH
71221: CALL_OW 1
71225: ST_TO_ADDR
// end ;
71226: GO 71145
71228: POP
71229: POP
// end ;
71230: LD_VAR 0 2
71234: RET
// export function Length ( array ) ; begin
71235: LD_INT 0
71237: PPUSH
// result := array + 0 ;
71238: LD_ADDR_VAR 0 2
71242: PUSH
71243: LD_VAR 0 1
71247: PUSH
71248: LD_INT 0
71250: PLUS
71251: ST_TO_ADDR
// end ;
71252: LD_VAR 0 2
71256: RET
// export function PrepareArray ( array ) ; begin
71257: LD_INT 0
71259: PPUSH
// result := array diff 0 ;
71260: LD_ADDR_VAR 0 2
71264: PUSH
71265: LD_VAR 0 1
71269: PUSH
71270: LD_INT 0
71272: DIFF
71273: ST_TO_ADDR
// if not result [ 1 ] then
71274: LD_VAR 0 2
71278: PUSH
71279: LD_INT 1
71281: ARRAY
71282: NOT
71283: IFFALSE 71303
// result := Delete ( result , 1 ) ;
71285: LD_ADDR_VAR 0 2
71289: PUSH
71290: LD_VAR 0 2
71294: PPUSH
71295: LD_INT 1
71297: PPUSH
71298: CALL_OW 3
71302: ST_TO_ADDR
// end ;
71303: LD_VAR 0 2
71307: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71308: LD_INT 0
71310: PPUSH
71311: PPUSH
71312: PPUSH
71313: PPUSH
// sibRocketRange := 25 ;
71314: LD_ADDR_VAR 0 6
71318: PUSH
71319: LD_INT 25
71321: ST_TO_ADDR
// result := false ;
71322: LD_ADDR_VAR 0 4
71326: PUSH
71327: LD_INT 0
71329: ST_TO_ADDR
// for i := 0 to 5 do
71330: LD_ADDR_VAR 0 5
71334: PUSH
71335: DOUBLE
71336: LD_INT 0
71338: DEC
71339: ST_TO_ADDR
71340: LD_INT 5
71342: PUSH
71343: FOR_TO
71344: IFFALSE 71411
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71346: LD_VAR 0 1
71350: PPUSH
71351: LD_VAR 0 5
71355: PPUSH
71356: LD_VAR 0 6
71360: PPUSH
71361: CALL_OW 272
71365: PPUSH
71366: LD_VAR 0 2
71370: PPUSH
71371: LD_VAR 0 5
71375: PPUSH
71376: LD_VAR 0 6
71380: PPUSH
71381: CALL_OW 273
71385: PPUSH
71386: LD_VAR 0 3
71390: PPUSH
71391: CALL_OW 309
71395: IFFALSE 71409
// begin result := true ;
71397: LD_ADDR_VAR 0 4
71401: PUSH
71402: LD_INT 1
71404: ST_TO_ADDR
// exit ;
71405: POP
71406: POP
71407: GO 71413
// end ;
71409: GO 71343
71411: POP
71412: POP
// end ;
71413: LD_VAR 0 4
71417: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71418: LD_INT 0
71420: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71421: LD_VAR 0 1
71425: PPUSH
71426: LD_VAR 0 2
71430: PPUSH
71431: LD_INT 0
71433: PPUSH
71434: LD_INT 0
71436: PPUSH
71437: LD_INT 1
71439: PPUSH
71440: LD_INT 0
71442: PPUSH
71443: CALL_OW 587
// end ; end_of_file
71447: LD_VAR 0 3
71451: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71452: LD_VAR 0 1
71456: PUSH
71457: LD_INT 200
71459: DOUBLE
71460: GREATEREQUAL
71461: IFFALSE 71469
71463: LD_INT 299
71465: DOUBLE
71466: LESSEQUAL
71467: IFTRUE 71471
71469: GO 71503
71471: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71472: LD_VAR 0 1
71476: PPUSH
71477: LD_VAR 0 2
71481: PPUSH
71482: LD_VAR 0 3
71486: PPUSH
71487: LD_VAR 0 4
71491: PPUSH
71492: LD_VAR 0 5
71496: PPUSH
71497: CALL 26118 0 5
71501: GO 71580
71503: LD_INT 300
71505: DOUBLE
71506: GREATEREQUAL
71507: IFFALSE 71515
71509: LD_INT 399
71511: DOUBLE
71512: LESSEQUAL
71513: IFTRUE 71517
71515: GO 71579
71517: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71518: LD_VAR 0 1
71522: PPUSH
71523: LD_VAR 0 2
71527: PPUSH
71528: LD_VAR 0 3
71532: PPUSH
71533: LD_VAR 0 4
71537: PPUSH
71538: LD_VAR 0 5
71542: PPUSH
71543: LD_VAR 0 6
71547: PPUSH
71548: LD_VAR 0 7
71552: PPUSH
71553: LD_VAR 0 8
71557: PPUSH
71558: LD_VAR 0 9
71562: PPUSH
71563: LD_VAR 0 10
71567: PPUSH
71568: LD_VAR 0 11
71572: PPUSH
71573: CALL 22451 0 11
71577: GO 71580
71579: POP
// end ;
71580: PPOPN 11
71582: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71583: LD_VAR 0 1
71587: PPUSH
71588: LD_VAR 0 2
71592: PPUSH
71593: LD_VAR 0 3
71597: PPUSH
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 5
71607: PPUSH
71608: CALL 25854 0 5
// end ; end_of_file
71612: PPOPN 5
71614: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71615: LD_VAR 0 1
71619: PPUSH
71620: LD_VAR 0 2
71624: PPUSH
71625: LD_VAR 0 3
71629: PPUSH
71630: LD_VAR 0 4
71634: PPUSH
71635: LD_VAR 0 5
71639: PPUSH
71640: LD_VAR 0 6
71644: PPUSH
71645: CALL 10103 0 6
// end ;
71649: PPOPN 6
71651: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71652: LD_INT 0
71654: PPUSH
// begin if not units then
71655: LD_VAR 0 1
71659: NOT
71660: IFFALSE 71664
// exit ;
71662: GO 71664
// end ;
71664: PPOPN 7
71666: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71667: CALL 10007 0 0
// end ;
71671: PPOPN 1
71673: END
