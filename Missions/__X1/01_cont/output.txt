// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5689
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5659: LD_EXP 17
5663: PPUSH
5664: LD_INT 52
5666: PPUSH
5667: LD_INT 90
5669: PPUSH
5670: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5674: LD_EXP 17
5678: PPUSH
5679: LD_INT 53
5681: PPUSH
5682: LD_INT 89
5684: PPUSH
5685: CALL_OW 178
// end ;
5689: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5690: LD_EXP 8
5694: NOT
5695: PUSH
5696: LD_EXP 16
5700: PPUSH
5701: LD_EXP 18
5705: PPUSH
5706: CALL_OW 296
5710: PUSH
5711: LD_INT 36
5713: LESS
5714: AND
5715: IFFALSE 5735
5717: GO 5719
5719: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5720: LD_EXP 17
5724: PPUSH
5725: LD_INT 39
5727: PPUSH
5728: LD_INT 71
5730: PPUSH
5731: CALL_OW 111
5735: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5736: LD_EXP 7
5740: NOT
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_EXP 19
5749: PPUSH
5750: CALL_OW 292
5754: PUSH
5755: LD_INT 2
5757: PPUSH
5758: LD_EXP 18
5762: PPUSH
5763: CALL_OW 292
5767: OR
5768: AND
5769: IFFALSE 7090
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
// begin if not johnnySaved then
5779: LD_EXP 4
5783: NOT
5784: IFFALSE 5795
// KillUnit ( Johnny ) ;
5786: LD_EXP 25
5790: PPUSH
5791: CALL_OW 66
// mercenariesSpotted := true ;
5795: LD_ADDR_EXP 7
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5803: LD_STRING O4_camp_cont
5805: PPUSH
5806: CALL_OW 337
// InGameOn ;
5810: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5814: LD_INT 53
5816: PPUSH
5817: LD_INT 89
5819: PPUSH
5820: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5824: LD_INT 53
5826: PPUSH
5827: LD_INT 89
5829: PPUSH
5830: LD_INT 2
5832: PPUSH
5833: LD_INT 8
5835: NEG
5836: PPUSH
5837: CALL_OW 330
// if olafSpotted then
5841: LD_EXP 8
5845: IFFALSE 5963
// begin AddComTurnUnit ( Olaf , Heike ) ;
5847: LD_EXP 17
5851: PPUSH
5852: LD_EXP 16
5856: PPUSH
5857: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5861: LD_EXP 16
5865: PPUSH
5866: LD_INT 51
5868: PPUSH
5869: LD_INT 86
5871: PPUSH
5872: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5876: LD_EXP 16
5880: PPUSH
5881: LD_EXP 17
5885: PPUSH
5886: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING DO-camp-1
5897: PPUSH
5898: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5902: LD_EXP 18
5906: PUSH
5907: LD_EXP 19
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: LD_EXP 16
5920: PPUSH
5921: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5925: LD_EXP 18
5929: PPUSH
5930: LD_STRING DG-camp-1
5932: PPUSH
5933: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5937: LD_EXP 16
5941: PPUSH
5942: LD_STRING DH-camp-1
5944: PPUSH
5945: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5949: LD_EXP 17
5953: PPUSH
5954: LD_STRING DO-camp-2
5956: PPUSH
5957: CALL_OW 88
// end else
5961: GO 6358
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5963: LD_EXP 16
5967: PPUSH
5968: LD_INT 51
5970: PPUSH
5971: LD_INT 86
5973: PPUSH
5974: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5978: LD_EXP 16
5982: PPUSH
5983: LD_EXP 18
5987: PPUSH
5988: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1a
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1a
6034: PPUSH
6035: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6039: LD_INT 1
6041: PPUSH
6042: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6046: LD_EXP 19
6050: PPUSH
6051: LD_EXP 17
6055: PPUSH
6056: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6060: LD_EXP 19
6064: PPUSH
6065: LD_STRING DM-camp-1a
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6072: LD_EXP 17
6076: PPUSH
6077: LD_INT 52
6079: PPUSH
6080: LD_INT 90
6082: PPUSH
6083: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6087: LD_EXP 19
6091: PPUSH
6092: LD_EXP 16
6096: PPUSH
6097: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING DG-camp-2a
6108: PPUSH
6109: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6113: LD_EXP 16
6117: PPUSH
6118: LD_STRING DH-camp-2a
6120: PPUSH
6121: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6125: LD_EXP 19
6129: PPUSH
6130: LD_STRING DM-camp-2a
6132: PPUSH
6133: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6137: LD_INT 35
6139: PPUSH
6140: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6144: LD_EXP 17
6148: PPUSH
6149: LD_EXP 16
6153: PPUSH
6154: CALL_OW 296
6158: PUSH
6159: LD_INT 10
6161: LESS
6162: IFFALSE 6137
// AddComTurnUnit ( Olaf , Heike ) ;
6164: LD_EXP 17
6168: PPUSH
6169: LD_EXP 16
6173: PPUSH
6174: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6178: LD_EXP 19
6182: PPUSH
6183: LD_EXP 16
6187: PPUSH
6188: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6192: LD_EXP 17
6196: PPUSH
6197: LD_STRING DO-camp-2a
6199: PPUSH
6200: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6204: LD_EXP 16
6208: PPUSH
6209: LD_EXP 17
6213: PPUSH
6214: CALL_OW 119
// if russianSpotted then
6218: LD_EXP 9
6222: IFFALSE 6262
// begin Say ( Heike , DH-camp-2aa ) ;
6224: LD_EXP 16
6228: PPUSH
6229: LD_STRING DH-camp-2aa
6231: PPUSH
6232: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6236: LD_EXP 18
6240: PPUSH
6241: LD_STRING DG-camp-2aa
6243: PPUSH
6244: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6248: LD_EXP 19
6252: PPUSH
6253: LD_STRING DM-camp-2aa
6255: PPUSH
6256: CALL_OW 88
// end else
6260: GO 6286
// begin Say ( Heike , DH-camp-2ab ) ;
6262: LD_EXP 16
6266: PPUSH
6267: LD_STRING DH-camp-2ab
6269: PPUSH
6270: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6274: LD_EXP 19
6278: PPUSH
6279: LD_STRING DM-camp-2ab
6281: PPUSH
6282: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6286: LD_EXP 16
6290: PPUSH
6291: LD_STRING DH-camp-3a
6293: PPUSH
6294: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6298: LD_EXP 17
6302: PPUSH
6303: LD_STRING DO-camp-3a
6305: PPUSH
6306: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6310: LD_EXP 18
6314: PPUSH
6315: LD_STRING DG-camp-3a
6317: PPUSH
6318: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6322: LD_EXP 16
6326: PPUSH
6327: LD_STRING DH-camp-4aa
6329: PPUSH
6330: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6334: LD_EXP 19
6338: PPUSH
6339: LD_STRING DM-camp-4aa
6341: PPUSH
6342: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6346: LD_EXP 17
6350: PPUSH
6351: LD_STRING DO-camp-4a
6353: PPUSH
6354: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6358: LD_EXP 17
6362: PPUSH
6363: LD_STRING DO-camp-3
6365: PPUSH
6366: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6370: LD_EXP 17
6374: PPUSH
6375: LD_STRING DO-camp-4
6377: PPUSH
6378: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6382: LD_EXP 18
6386: PPUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6396: LD_EXP 18
6400: PPUSH
6401: LD_STRING DG-camp-4
6403: PPUSH
6404: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6408: LD_EXP 16
6412: PPUSH
6413: LD_EXP 18
6417: PPUSH
6418: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6422: LD_EXP 16
6426: PPUSH
6427: LD_STRING DH-camp-4
6429: PPUSH
6430: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6434: LD_EXP 19
6438: PUSH
6439: LD_EXP 17
6443: PUSH
6444: LD_EXP 18
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: PPUSH
6454: LD_EXP 16
6458: PPUSH
6459: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6463: LD_EXP 18
6467: PPUSH
6468: LD_STRING DG-camp-5
6470: PPUSH
6471: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6475: LD_EXP 18
6479: PPUSH
6480: LD_STRING DG-camp-6
6482: PPUSH
6483: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6487: LD_EXP 16
6491: PPUSH
6492: LD_STRING DH-camp-6
6494: PPUSH
6495: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DG-camp-7
6506: PPUSH
6507: CALL_OW 88
// if DogTagFound then
6511: LD_EXP 6
6515: IFFALSE 6555
// begin Say ( Heike , DH-quest-1a ) ;
6517: LD_EXP 16
6521: PPUSH
6522: LD_STRING DH-quest-1a
6524: PPUSH
6525: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6529: LD_EXP 18
6533: PPUSH
6534: LD_STRING DG-quest-1a
6536: PPUSH
6537: CALL_OW 88
// mercenariesQuestDone := true ;
6541: LD_ADDR_EXP 11
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// InGameOff ;
6549: CALL_OW 9
// end else
6553: GO 6721
// begin Say ( Heike , DH-camp-7 ) ;
6555: LD_EXP 16
6559: PPUSH
6560: LD_STRING DH-camp-7
6562: PPUSH
6563: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6567: LD_EXP 16
6571: PPUSH
6572: CALL_OW 256
6576: PUSH
6577: LD_INT 1000
6579: LESS
6580: IFFALSE 6672
// begin Say ( Olaf , DO-heal-1 ) ;
6582: LD_EXP 17
6586: PPUSH
6587: LD_STRING DO-heal-1
6589: PPUSH
6590: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6594: LD_EXP 16
6598: PPUSH
6599: LD_INT 51
6601: PPUSH
6602: LD_INT 88
6604: PPUSH
6605: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6616: LD_EXP 16
6620: PPUSH
6621: LD_EXP 17
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: PUSH
6635: LD_EXP 16
6639: PPUSH
6640: LD_INT 51
6642: PPUSH
6643: LD_INT 88
6645: PPUSH
6646: CALL_OW 307
6650: OR
6651: IFFALSE 6609
// SetLives ( Heike , 1000 ) ;
6653: LD_EXP 16
6657: PPUSH
6658: LD_INT 1000
6660: PPUSH
6661: CALL_OW 234
// wait ( 0 0$2 ) ;
6665: LD_INT 70
6667: PPUSH
6668: CALL_OW 67
// end ; InGameOff ;
6672: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6676: LD_EXP 17
6680: PUSH
6681: LD_EXP 18
6685: PUSH
6686: LD_EXP 19
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PPUSH
6696: LD_INT 53
6698: PPUSH
6699: LD_INT 89
6701: PPUSH
6702: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6706: LD_STRING O5_proof_cont
6708: PPUSH
6709: CALL_OW 337
// mercenariesQuestReady := true ;
6713: LD_ADDR_EXP 10
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6721: LD_EXP 10
6725: NOT
6726: IFFALSE 6730
// exit ;
6728: GO 7090
// wait ( 0 0$35 ) ;
6730: LD_INT 1225
6732: PPUSH
6733: CALL_OW 67
// driver := PreparePatrolTank ;
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: CALL 2814 0 0
6746: ST_TO_ADDR
// if not driver then
6747: LD_VAR 0 2
6751: NOT
6752: IFFALSE 6756
// exit ;
6754: GO 7090
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6756: LD_INT 2
6758: PPUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 2
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 310
6786: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_INT 500
6794: PPUSH
6795: CALL_OW 234
// SetLives ( driver , 450 ) ;
6799: LD_VAR 0 2
6803: PPUSH
6804: LD_INT 450
6806: PPUSH
6807: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6811: LD_VAR 0 2
6815: PPUSH
6816: LD_INT 59
6818: PPUSH
6819: LD_INT 60
6821: PPUSH
6822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6826: LD_INT 35
6828: PPUSH
6829: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 59
6840: PPUSH
6841: LD_INT 60
6843: PPUSH
6844: CALL_OW 307
6848: IFFALSE 6826
// if not See ( 1 , Heike ) then
6850: LD_INT 1
6852: PPUSH
6853: LD_EXP 16
6857: PPUSH
6858: CALL_OW 292
6862: NOT
6863: IFFALSE 6987
// begin if Difficulty < 3 then
6865: LD_OWVAR 67
6869: PUSH
6870: LD_INT 3
6872: LESS
6873: IFFALSE 6891
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6875: LD_INT 59
6877: PPUSH
6878: LD_INT 60
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 6
6886: PPUSH
6887: CALL_OW 330
// ComExitVehicle ( driver ) ;
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 121
// wait ( 0 0$1 ) ;
6900: LD_INT 35
6902: PPUSH
6903: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: LD_INT 58
6914: PPUSH
6915: LD_INT 54
6917: PPUSH
6918: CALL_OW 171
// wait ( 0 0$1 ) ;
6922: LD_INT 35
6924: PPUSH
6925: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_INT 57
6936: PPUSH
6937: LD_INT 53
6939: PPUSH
6940: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_INT 350
6951: PPUSH
6952: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6956: LD_VAR 0 2
6960: PPUSH
6961: LD_VAR 0 3
6965: PPUSH
6966: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 107
6977: PPUSH
6978: LD_INT 118
6980: PPUSH
6981: CALL_OW 171
// end else
6985: GO 7002
// begin ComMoveXY ( driver , 107 , 118 ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_INT 107
6994: PPUSH
6995: LD_INT 118
6997: PPUSH
6998: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7002: LD_INT 35
7004: PPUSH
7005: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_INT 107
7016: PPUSH
7017: LD_INT 118
7019: PPUSH
7020: CALL_OW 307
7024: PUSH
7025: LD_VAR 0 2
7029: PPUSH
7030: CALL_OW 301
7034: OR
7035: IFFALSE 7002
// if IsDead ( driver [ 1 ] ) then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 1
7044: ARRAY
7045: PPUSH
7046: CALL_OW 301
7050: IFFALSE 7054
// exit ;
7052: GO 7090
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7054: LD_ADDR_VAR 0 1
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 69
7073: PUSH
7074: FOR_IN
7075: IFFALSE 7088
// RemoveUnit ( i ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 64
7086: GO 7074
7088: POP
7089: POP
// end ;
7090: PPOPN 3
7092: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7093: LD_INT 10
7095: PPUSH
7096: LD_INT 22
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 21
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 70
7124: IFFALSE 7198
7126: GO 7128
7128: DISABLE
// begin InGameOn ;
7129: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7133: LD_EXP 17
7137: PUSH
7138: LD_EXP 19
7142: PUSH
7143: LD_EXP 18
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PPUSH
7153: LD_EXP 16
7157: PPUSH
7158: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7162: LD_EXP 19
7166: PPUSH
7167: LD_STRING DM-quest-1
7169: PPUSH
7170: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7174: LD_EXP 18
7178: PPUSH
7179: LD_STRING DG-quest-1
7181: PPUSH
7182: CALL_OW 88
// InGameOff ;
7186: CALL_OW 9
// mercenariesQuestDone := true ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// end ;
7198: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7199: LD_EXP 16
7203: PPUSH
7204: LD_INT 10
7206: PPUSH
7207: CALL_OW 308
7211: PUSH
7212: LD_EXP 6
7216: AND
7217: PUSH
7218: LD_EXP 10
7222: AND
7223: PUSH
7224: LD_INT 10
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: NOT
7256: AND
7257: IFFALSE 7429
7259: GO 7261
7261: DISABLE
7262: LD_INT 0
7264: PPUSH
// begin InGameOn ;
7265: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7269: LD_EXP 17
7273: PUSH
7274: LD_EXP 19
7278: PUSH
7279: LD_EXP 18
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: LD_EXP 16
7293: PPUSH
7294: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7298: LD_EXP 16
7302: PPUSH
7303: LD_INT 54
7305: PPUSH
7306: LD_INT 86
7308: PPUSH
7309: CALL_OW 111
// p := p + 1 ;
7313: LD_ADDR_VAR 0 1
7317: PUSH
7318: LD_VAR 0 1
7322: PUSH
7323: LD_INT 1
7325: PLUS
7326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7327: LD_INT 35
7329: PPUSH
7330: CALL_OW 67
// p := p + 1 ;
7334: LD_ADDR_VAR 0 1
7338: PUSH
7339: LD_VAR 0 1
7343: PUSH
7344: LD_INT 1
7346: PLUS
7347: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7348: LD_EXP 16
7352: PPUSH
7353: LD_EXP 18
7357: PPUSH
7358: CALL_OW 296
7362: PUSH
7363: LD_INT 4
7365: LESS
7366: PUSH
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 5
7374: GREATER
7375: OR
7376: IFFALSE 7327
// Say ( Mike , DM-quest-1 ) ;
7378: LD_EXP 19
7382: PPUSH
7383: LD_STRING DM-quest-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7390: LD_EXP 18
7394: PPUSH
7395: LD_STRING DG-quest-1
7397: PPUSH
7398: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7402: LD_EXP 16
7406: PPUSH
7407: LD_INT 55
7409: PPUSH
7410: LD_INT 87
7412: PPUSH
7413: CALL_OW 111
// InGameOff ;
7417: CALL_OW 9
// mercenariesQuestDone := true ;
7421: LD_ADDR_EXP 11
7425: PUSH
7426: LD_INT 1
7428: ST_TO_ADDR
// end ;
7429: PPOPN 1
7431: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7432: LD_EXP 16
7436: PUSH
7437: LD_INT 55
7439: PUSH
7440: EMPTY
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: IN
7448: IFFALSE 7488
7450: GO 7452
7452: DISABLE
// begin if Difficulty < 3 then
7453: LD_OWVAR 67
7457: PUSH
7458: LD_INT 3
7460: LESS
7461: IFFALSE 7476
// RemoveSeeing ( 59 , 60 , 2 ) ;
7463: LD_INT 59
7465: PPUSH
7466: LD_INT 60
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7476: LD_EXP 16
7480: PPUSH
7481: LD_STRING DH-driver
7483: PPUSH
7484: CALL_OW 88
// end ;
7488: END
// every 0 0$1 trigger mercenariesQuestDone do
7489: LD_EXP 11
7493: IFFALSE 7981
7495: GO 7497
7497: DISABLE
// begin if mercenariesQuestReady then
7498: LD_EXP 10
7502: IFFALSE 7511
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7504: LD_STRING O5_proof_cont_out
7506: PPUSH
7507: CALL_OW 337
// InGameOn ;
7511: CALL_OW 8
// if IsInUnit ( Heike ) then
7515: LD_EXP 16
7519: PPUSH
7520: CALL_OW 310
7524: IFFALSE 7535
// ComExitVehicle ( Heike ) ;
7526: LD_EXP 16
7530: PPUSH
7531: CALL_OW 121
// wait ( 3 ) ;
7535: LD_INT 3
7537: PPUSH
7538: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7542: LD_EXP 16
7546: PPUSH
7547: LD_EXP 18
7551: PPUSH
7552: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7556: LD_EXP 17
7560: PUSH
7561: LD_EXP 19
7565: PUSH
7566: LD_EXP 18
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PPUSH
7576: LD_EXP 16
7580: PPUSH
7581: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7585: LD_EXP 16
7589: PPUSH
7590: LD_STRING DH-quest-done-1
7592: PPUSH
7593: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7597: LD_EXP 19
7601: PPUSH
7602: LD_STRING DM-quest-done-1
7604: PPUSH
7605: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7609: LD_EXP 18
7613: PPUSH
7614: LD_STRING DG-quest-done-1
7616: PPUSH
7617: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7621: LD_EXP 16
7625: PPUSH
7626: LD_EXP 17
7630: PPUSH
7631: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7635: LD_EXP 16
7639: PPUSH
7640: LD_STRING DH-quest-done-2
7642: PPUSH
7643: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7647: LD_EXP 17
7651: PPUSH
7652: LD_STRING DO-quest-done-2
7654: PPUSH
7655: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7659: LD_EXP 17
7663: PPUSH
7664: LD_STRING DO-quest-done-3
7666: PPUSH
7667: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7671: LD_EXP 18
7675: PPUSH
7676: LD_INT 51
7678: PPUSH
7679: LD_INT 90
7681: PPUSH
7682: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7686: LD_EXP 18
7690: PPUSH
7691: LD_INT 50
7693: PPUSH
7694: LD_INT 89
7696: PPUSH
7697: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7701: LD_EXP 16
7705: PPUSH
7706: LD_EXP 18
7710: PPUSH
7711: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7715: LD_EXP 18
7719: PPUSH
7720: LD_STRING DG-quest-done-4
7722: PPUSH
7723: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_EXP 16
7736: PPUSH
7737: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7741: LD_EXP 16
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: IFFALSE 7846
// begin Say ( Olaf , DO-heal-1 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING DO-heal-1
7763: PPUSH
7764: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7768: LD_EXP 16
7772: PPUSH
7773: LD_INT 51
7775: PPUSH
7776: LD_INT 88
7778: PPUSH
7779: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7790: LD_EXP 16
7794: PPUSH
7795: LD_EXP 17
7799: PPUSH
7800: CALL_OW 296
7804: PUSH
7805: LD_INT 4
7807: LESS
7808: PUSH
7809: LD_EXP 16
7813: PPUSH
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 88
7819: PPUSH
7820: CALL_OW 307
7824: OR
7825: IFFALSE 7783
// SetLives ( Heike , 1000 ) ;
7827: LD_EXP 16
7831: PPUSH
7832: LD_INT 1000
7834: PPUSH
7835: CALL_OW 234
// wait ( 0 0$2 ) ;
7839: LD_INT 70
7841: PPUSH
7842: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7846: LD_EXP 16
7850: PPUSH
7851: LD_STRING DH-quest-done-4
7853: PPUSH
7854: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7858: LD_EXP 17
7862: PPUSH
7863: LD_STRING DO-quest-done-4
7865: PPUSH
7866: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7870: LD_EXP 16
7874: PPUSH
7875: LD_EXP 17
7879: PPUSH
7880: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7884: LD_EXP 16
7888: PPUSH
7889: LD_STRING DH-quest-done-5
7891: PPUSH
7892: CALL_OW 88
// InGameOff ;
7896: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7900: LD_STRING O6_end_cont
7902: PPUSH
7903: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7907: LD_EXP 18
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7919: LD_EXP 19
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7931: LD_INT 42
7933: PPUSH
7934: LD_INT 2
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7944: LD_EXP 17
7948: PPUSH
7949: LD_INT 53
7951: PPUSH
7952: LD_INT 89
7954: PPUSH
7955: CALL_OW 118
// lastObjectiveActive := true ;
7959: LD_ADDR_EXP 12
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7967: LD_INT 1
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: CALL_OW 424
// PreparePrison ;
7977: CALL 1164 0 0
// end ;
7981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7982: LD_INT 22
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 91
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 4
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: IFFALSE 8196
8016: GO 8018
8018: DISABLE
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8023: LD_INT 245
8025: PUSH
8026: LD_INT 210
8028: PUSH
8029: LD_INT 210
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_OWVAR 67
8041: ARRAY
8042: PPUSH
8043: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8047: LD_ADDR_VAR 0 2
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 54
8074: PUSH
8075: EMPTY
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 69
8087: ST_TO_ADDR
// if not tmp then
8088: LD_VAR 0 2
8092: NOT
8093: IFFALSE 8097
// exit ;
8095: GO 8196
// for i in tmp do
8097: LD_ADDR_VAR 0 1
8101: PUSH
8102: LD_VAR 0 2
8106: PUSH
8107: FOR_IN
8108: IFFALSE 8136
// begin ComExitBuilding ( i ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 121
8126: PPUSH
8127: LD_INT 22
8129: PPUSH
8130: CALL_OW 174
// end ;
8134: GO 8107
8136: POP
8137: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8138: LD_EXP 23
8142: PPUSH
8143: LD_INT 121
8145: PPUSH
8146: LD_INT 22
8148: PPUSH
8149: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8153: LD_EXP 24
8157: PPUSH
8158: LD_INT 121
8160: PPUSH
8161: LD_INT 22
8163: PPUSH
8164: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8168: LD_EXP 23
8172: PPUSH
8173: LD_EXP 16
8177: PPUSH
8178: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8182: LD_EXP 24
8186: PPUSH
8187: LD_EXP 16
8191: PPUSH
8192: CALL_OW 175
// end ;
8196: PPOPN 2
8198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8199: LD_INT 22
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 91
8211: PUSH
8212: LD_INT 8
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PPUSH
8227: CALL_OW 69
8231: IFFALSE 8413
8233: GO 8235
8235: DISABLE
8236: LD_INT 0
8238: PPUSH
8239: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8240: LD_INT 280
8242: PUSH
8243: LD_INT 245
8245: PUSH
8246: LD_INT 210
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_OWVAR 67
8258: ARRAY
8259: PPUSH
8260: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_INT 22
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 54
8291: PUSH
8292: EMPTY
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: ST_TO_ADDR
// if not tmp then
8305: LD_VAR 0 2
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8413
// for i in tmp do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8353
// begin ComExitBuilding ( i ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: LD_INT 142
8343: PPUSH
8344: LD_INT 71
8346: PPUSH
8347: CALL_OW 174
// end ;
8351: GO 8324
8353: POP
8354: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8355: LD_EXP 23
8359: PPUSH
8360: LD_INT 142
8362: PPUSH
8363: LD_INT 71
8365: PPUSH
8366: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8370: LD_EXP 24
8374: PPUSH
8375: LD_INT 142
8377: PPUSH
8378: LD_INT 71
8380: PPUSH
8381: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8385: LD_EXP 23
8389: PPUSH
8390: LD_EXP 16
8394: PPUSH
8395: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8399: LD_EXP 24
8403: PPUSH
8404: LD_EXP 16
8408: PPUSH
8409: CALL_OW 175
// end ;
8413: PPOPN 2
8415: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8416: LD_INT 22
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 21
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 58
8438: PUSH
8439: EMPTY
8440: LIST
8441: PUSH
8442: LD_INT 3
8444: PUSH
8445: LD_INT 24
8447: PUSH
8448: LD_INT 1000
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 91
8461: PUSH
8462: LD_EXP 17
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 17
8491: PPUSH
8492: CALL_OW 302
8496: AND
8497: IFFALSE 8611
8499: GO 8501
8501: DISABLE
// begin enable ;
8502: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8503: LD_EXP 17
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 21
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 58
8530: PUSH
8531: EMPTY
8532: LIST
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: LD_INT 24
8539: PUSH
8540: LD_INT 1000
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 91
8553: PUSH
8554: LD_EXP 17
8558: PUSH
8559: LD_INT 8
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 69
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PPUSH
8583: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8587: LD_EXP 17
8591: PPUSH
8592: LD_INT 52
8594: PPUSH
8595: LD_INT 90
8597: PPUSH
8598: CALL_OW 171
// AddComHold ( Olaf ) ;
8602: LD_EXP 17
8606: PPUSH
8607: CALL_OW 200
// end ;
8611: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8612: LD_EXP 12
8616: PUSH
8617: LD_INT 2
8619: PPUSH
8620: CALL_OW 302
8624: NOT
8625: AND
8626: PUSH
8627: LD_OWVAR 67
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: AND
8636: PUSH
8637: LD_EXP 13
8641: NOT
8642: AND
8643: IFFALSE 8660
8645: GO 8647
8647: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8648: LD_EXP 16
8652: PPUSH
8653: LD_STRING DH-prison-missing
8655: PPUSH
8656: CALL_OW 88
// end ;
8660: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8661: LD_EXP 12
8665: PUSH
8666: LD_INT 8
8668: PPUSH
8669: CALL_OW 302
8673: NOT
8674: AND
8675: PUSH
8676: LD_OWVAR 67
8680: PUSH
8681: LD_INT 1
8683: GREATER
8684: AND
8685: PUSH
8686: LD_EXP 13
8690: NOT
8691: AND
8692: IFFALSE 8709
8694: GO 8696
8696: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8697: LD_EXP 16
8701: PPUSH
8702: LD_STRING DH-prison-missing
8704: PPUSH
8705: CALL_OW 88
// end ;
8709: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8710: LD_EXP 12
8714: PUSH
8715: LD_INT 3
8717: PPUSH
8718: CALL_OW 302
8722: NOT
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing-a
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 10
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8788: LD_EXP 13
8792: NOT
8793: PUSH
8794: LD_EXP 12
8798: AND
8799: PUSH
8800: LD_INT 2
8802: PPUSH
8803: LD_EXP 20
8807: PPUSH
8808: CALL_OW 292
8812: AND
8813: IFFALSE 8900
8815: GO 8817
8817: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8818: LD_EXP 20
8822: PPUSH
8823: LD_EXP 16
8827: PPUSH
8828: CALL_OW 119
// DialogueOn ;
8832: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8836: LD_EXP 20
8840: PPUSH
8841: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8845: LD_EXP 20
8849: PPUSH
8850: LD_STRING DK-prison-found
8852: PPUSH
8853: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8857: LD_EXP 16
8861: PPUSH
8862: LD_STRING DH-prison-found
8864: PPUSH
8865: CALL_OW 88
// DialogueOff ;
8869: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8873: LD_EXP 20
8877: PPUSH
8878: LD_INT 2
8880: PPUSH
8881: CALL_OW 235
// prisonFound := true ;
8885: LD_ADDR_EXP 13
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8893: LD_STRING O6_prison_out
8895: PPUSH
8896: CALL_OW 337
// end ;
8900: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8901: LD_EXP 16
8905: PPUSH
8906: CALL_OW 256
8910: PUSH
8911: LD_INT 500
8913: LESS
8914: IFFALSE 8927
8916: GO 8918
8918: DISABLE
// heikeHurt := true ;
8919: LD_ADDR_EXP 14
8923: PUSH
8924: LD_INT 1
8926: ST_TO_ADDR
8927: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8928: LD_INT 22
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: IFFALSE 9272
8958: GO 8960
8960: DISABLE
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
8965: PPUSH
// begin uc_side := 3 ;
8966: LD_ADDR_OWVAR 20
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// uc_nation := 3 ;
8974: LD_ADDR_OWVAR 21
8978: PUSH
8979: LD_INT 3
8981: ST_TO_ADDR
// tmp := [ ] ;
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: EMPTY
8988: ST_TO_ADDR
// for i := 1 to 8 do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_INT 8
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9111
// begin PrepareHuman ( false , 1 , 4 ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_INT 4
9013: PPUSH
9014: CALL_OW 380
// un := CreateHuman ;
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_INT 4
9035: PPUSH
9036: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9040: LD_VAR 0 3
9044: PPUSH
9045: LD_INT 158
9047: PPUSH
9048: LD_INT 80
9050: PPUSH
9051: LD_INT 0
9053: PPUSH
9054: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_INT 147
9065: PPUSH
9066: LD_INT 75
9068: PPUSH
9069: CALL_OW 111
// wait ( 0 0$1 ) ;
9073: LD_INT 35
9075: PPUSH
9076: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_VAR 0 2
9094: PUSH
9095: LD_INT 1
9097: PLUS
9098: PPUSH
9099: LD_VAR 0 3
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// end ;
9109: GO 9002
9111: POP
9112: POP
// repeat wait ( 0 0$1 ) ;
9113: LD_INT 35
9115: PPUSH
9116: CALL_OW 67
// for i in tmp do
9120: LD_ADDR_VAR 0 1
9124: PUSH
9125: LD_VAR 0 2
9129: PUSH
9130: FOR_IN
9131: IFFALSE 9252
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 74
9162: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PPUSH
9172: CALL_OW 250
9176: PPUSH
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PPUSH
9186: CALL_OW 251
9190: PPUSH
9191: CALL_OW 428
9195: IFFALSE 9236
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9197: LD_VAR 0 1
9201: PPUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 114
9234: GO 9250
// ComAttackUnit ( i , Heike ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_EXP 16
9245: PPUSH
9246: CALL_OW 115
// end ;
9250: GO 9130
9252: POP
9253: POP
// until IsDead ( Heike ) or not tmp ;
9254: LD_EXP 16
9258: PPUSH
9259: CALL_OW 301
9263: PUSH
9264: LD_VAR 0 2
9268: NOT
9269: OR
9270: IFFALSE 9113
// end ;
9272: PPOPN 3
9274: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9275: LD_EXP 12
9279: PUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 302
9289: AND
9290: PUSH
9291: LD_INT 1
9293: PPUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 50
9316: PUSH
9317: EMPTY
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 71
9329: PUSH
9330: LD_INT 0
9332: EQUAL
9333: AND
9334: IFFALSE 9664
9336: GO 9338
9338: DISABLE
9339: LD_INT 0
9341: PPUSH
// begin if not heikeHurt then
9342: LD_EXP 14
9346: NOT
9347: IFFALSE 9356
// SetAchievement ( ACH_INVINCIBLE ) ;
9349: LD_STRING ACH_INVINCIBLE
9351: PPUSH
9352: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9356: LD_ADDR_VAR 0 1
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 2
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 21
9373: PUSH
9374: LD_INT 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 50
9383: PUSH
9384: EMPTY
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: PPUSH
9392: CALL_OW 69
9396: ST_TO_ADDR
// if prisonFound then
9397: LD_EXP 13
9401: IFFALSE 9415
// AddMedal ( med1 , 1 ) else
9403: LD_STRING med1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 101
9413: GO 9426
// AddMedal ( med1 , - 1 ) ;
9415: LD_STRING med1
9417: PPUSH
9418: LD_INT 1
9420: NEG
9421: PPUSH
9422: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9426: LD_VAR 0 1
9430: PUSH
9431: LD_INT 3
9433: LESS
9434: PUSH
9435: LD_EXP 13
9439: NOT
9440: AND
9441: PUSH
9442: LD_VAR 0 1
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: PUSH
9451: LD_EXP 13
9455: AND
9456: OR
9457: IFFALSE 9472
// AddMedal ( med2 , - 1 ) else
9459: LD_STRING med2
9461: PPUSH
9462: LD_INT 1
9464: NEG
9465: PPUSH
9466: CALL_OW 101
9470: GO 9482
// AddMedal ( med2 , 1 ) ;
9472: LD_STRING med2
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9482: LD_EXP 13
9486: PUSH
9487: LD_EXP 4
9491: AND
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 4
9500: GREATEREQUAL
9501: AND
9502: IFFALSE 9516
// AddMedal ( med3 , 1 ) else
9504: LD_STRING med3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 101
9514: GO 9527
// AddMedal ( med3 , - 1 ) ;
9516: LD_STRING med3
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// GiveMedals ( MAIN ) ;
9527: LD_STRING MAIN
9529: PPUSH
9530: CALL_OW 102
// RewardPeople ( tmp ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9543: LD_EXP 16
9547: PPUSH
9548: LD_STRING 01_Heike
9550: PPUSH
9551: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9555: LD_EXP 18
9559: PPUSH
9560: CALL_OW 302
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_VAR 0 1
9574: IN
9575: AND
9576: IFFALSE 9590
// SaveCharacters ( Givi , 01_Givi ) ;
9578: LD_EXP 18
9582: PPUSH
9583: LD_STRING 01_Givi
9585: PPUSH
9586: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9590: LD_EXP 19
9594: PPUSH
9595: CALL_OW 302
9599: PUSH
9600: LD_EXP 19
9604: PUSH
9605: LD_VAR 0 1
9609: IN
9610: AND
9611: IFFALSE 9625
// SaveCharacters ( Mike , 01_Mike ) ;
9613: LD_EXP 19
9617: PPUSH
9618: LD_STRING 01_Mike
9620: PPUSH
9621: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9625: LD_EXP 20
9629: PPUSH
9630: CALL_OW 302
9634: PUSH
9635: LD_EXP 20
9639: PUSH
9640: LD_VAR 0 1
9644: IN
9645: AND
9646: IFFALSE 9660
// SaveCharacters ( Kamil , 01_Kamil ) ;
9648: LD_EXP 20
9652: PPUSH
9653: LD_STRING 01_Kamil
9655: PPUSH
9656: CALL_OW 38
// YouWin ;
9660: CALL_OW 103
// end ; end_of_file
9664: PPOPN 1
9666: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9667: LD_VAR 0 1
9671: PUSH
9672: LD_EXP 16
9676: EQUAL
9677: IFFALSE 9686
// YouLost ( Heike ) ;
9679: LD_STRING Heike
9681: PPUSH
9682: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9686: LD_VAR 0 1
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 25
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 69
9719: IN
9720: IFFALSE 9826
// begin if un in russianPatrol then
9722: LD_VAR 0 1
9726: PUSH
9727: LD_EXP 21
9731: IN
9732: IFFALSE 9750
// russianPatrol := russianPatrol diff un ;
9734: LD_ADDR_EXP 21
9738: PUSH
9739: LD_EXP 21
9743: PUSH
9744: LD_VAR 0 1
9748: DIFF
9749: ST_TO_ADDR
// if un in russianForestPatrol then
9750: LD_VAR 0 1
9754: PUSH
9755: LD_EXP 22
9759: IN
9760: IFFALSE 9778
// russianForestPatrol := russianForestPatrol diff un ;
9762: LD_ADDR_EXP 22
9766: PUSH
9767: LD_EXP 22
9771: PUSH
9772: LD_VAR 0 1
9776: DIFF
9777: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9778: LD_ADDR_EXP 5
9782: PUSH
9783: LD_EXP 5
9787: PPUSH
9788: LD_EXP 5
9792: PUSH
9793: LD_INT 1
9795: PLUS
9796: PPUSH
9797: LD_VAR 0 1
9801: PPUSH
9802: CALL_OW 250
9806: PUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 251
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 1
9825: ST_TO_ADDR
// end ; end ;
9826: PPOPN 1
9828: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9829: LD_VAR 0 1
9833: PUSH
9834: LD_EXP 16
9838: EQUAL
9839: IFFALSE 9848
// YouLost ( Heike ) ;
9841: LD_STRING Heike
9843: PPUSH
9844: CALL_OW 104
// end ;
9848: PPOPN 1
9850: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9851: LD_VAR 0 1
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: LD_INT 5
9867: EQUAL
9868: AND
9869: IFFALSE 9878
// YouLost ( FriendlyFire ) ;
9871: LD_STRING FriendlyFire
9873: PPUSH
9874: CALL_OW 104
// end ;
9878: PPOPN 2
9880: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9881: LD_EXP 17
9885: PPUSH
9886: CALL_OW 256
9890: PUSH
9891: LD_INT 250
9893: LESS
9894: IFFALSE 9906
9896: GO 9898
9898: DISABLE
// YouLost ( Olaf ) ; end_of_file
9899: LD_STRING Olaf
9901: PPUSH
9902: CALL_OW 104
9906: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 100
9914: EQUAL
9915: IFFALSE 10864
// begin if not StreamModeActive then
9917: LD_EXP 26
9921: NOT
9922: IFFALSE 9932
// StreamModeActive := true ;
9924: LD_ADDR_EXP 26
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// if p3 = 0 then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 0
9939: EQUAL
9940: IFFALSE 9946
// InitStreamMode ;
9942: CALL 11022 0 0
// if p3 = 1 then
9946: LD_VAR 0 3
9950: PUSH
9951: LD_INT 1
9953: EQUAL
9954: IFFALSE 9964
// sRocket := true ;
9956: LD_ADDR_EXP 31
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// if p3 = 2 then
9964: LD_VAR 0 3
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 9982
// sSpeed := true ;
9974: LD_ADDR_EXP 30
9978: PUSH
9979: LD_INT 1
9981: ST_TO_ADDR
// if p3 = 3 then
9982: LD_VAR 0 3
9986: PUSH
9987: LD_INT 3
9989: EQUAL
9990: IFFALSE 10000
// sEngine := true ;
9992: LD_ADDR_EXP 32
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// if p3 = 4 then
10000: LD_VAR 0 3
10004: PUSH
10005: LD_INT 4
10007: EQUAL
10008: IFFALSE 10018
// sSpec := true ;
10010: LD_ADDR_EXP 29
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// if p3 = 5 then
10018: LD_VAR 0 3
10022: PUSH
10023: LD_INT 5
10025: EQUAL
10026: IFFALSE 10036
// sLevel := true ;
10028: LD_ADDR_EXP 33
10032: PUSH
10033: LD_INT 1
10035: ST_TO_ADDR
// if p3 = 6 then
10036: LD_VAR 0 3
10040: PUSH
10041: LD_INT 6
10043: EQUAL
10044: IFFALSE 10054
// sArmoury := true ;
10046: LD_ADDR_EXP 34
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// if p3 = 7 then
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 7
10061: EQUAL
10062: IFFALSE 10072
// sRadar := true ;
10064: LD_ADDR_EXP 35
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// if p3 = 8 then
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 8
10079: EQUAL
10080: IFFALSE 10090
// sBunker := true ;
10082: LD_ADDR_EXP 36
10086: PUSH
10087: LD_INT 1
10089: ST_TO_ADDR
// if p3 = 9 then
10090: LD_VAR 0 3
10094: PUSH
10095: LD_INT 9
10097: EQUAL
10098: IFFALSE 10108
// sHack := true ;
10100: LD_ADDR_EXP 37
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// if p3 = 10 then
10108: LD_VAR 0 3
10112: PUSH
10113: LD_INT 10
10115: EQUAL
10116: IFFALSE 10126
// sFire := true ;
10118: LD_ADDR_EXP 38
10122: PUSH
10123: LD_INT 1
10125: ST_TO_ADDR
// if p3 = 11 then
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 11
10133: EQUAL
10134: IFFALSE 10144
// sRefresh := true ;
10136: LD_ADDR_EXP 39
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// if p3 = 12 then
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 12
10151: EQUAL
10152: IFFALSE 10162
// sExp := true ;
10154: LD_ADDR_EXP 40
10158: PUSH
10159: LD_INT 1
10161: ST_TO_ADDR
// if p3 = 13 then
10162: LD_VAR 0 3
10166: PUSH
10167: LD_INT 13
10169: EQUAL
10170: IFFALSE 10180
// sDepot := true ;
10172: LD_ADDR_EXP 41
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// if p3 = 14 then
10180: LD_VAR 0 3
10184: PUSH
10185: LD_INT 14
10187: EQUAL
10188: IFFALSE 10198
// sFlag := true ;
10190: LD_ADDR_EXP 42
10194: PUSH
10195: LD_INT 1
10197: ST_TO_ADDR
// if p3 = 15 then
10198: LD_VAR 0 3
10202: PUSH
10203: LD_INT 15
10205: EQUAL
10206: IFFALSE 10216
// sKamikadze := true ;
10208: LD_ADDR_EXP 50
10212: PUSH
10213: LD_INT 1
10215: ST_TO_ADDR
// if p3 = 16 then
10216: LD_VAR 0 3
10220: PUSH
10221: LD_INT 16
10223: EQUAL
10224: IFFALSE 10234
// sTroll := true ;
10226: LD_ADDR_EXP 51
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// if p3 = 17 then
10234: LD_VAR 0 3
10238: PUSH
10239: LD_INT 17
10241: EQUAL
10242: IFFALSE 10252
// sSlow := true ;
10244: LD_ADDR_EXP 52
10248: PUSH
10249: LD_INT 1
10251: ST_TO_ADDR
// if p3 = 18 then
10252: LD_VAR 0 3
10256: PUSH
10257: LD_INT 18
10259: EQUAL
10260: IFFALSE 10270
// sLack := true ;
10262: LD_ADDR_EXP 53
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// if p3 = 19 then
10270: LD_VAR 0 3
10274: PUSH
10275: LD_INT 19
10277: EQUAL
10278: IFFALSE 10288
// sTank := true ;
10280: LD_ADDR_EXP 55
10284: PUSH
10285: LD_INT 1
10287: ST_TO_ADDR
// if p3 = 20 then
10288: LD_VAR 0 3
10292: PUSH
10293: LD_INT 20
10295: EQUAL
10296: IFFALSE 10306
// sRemote := true ;
10298: LD_ADDR_EXP 56
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// if p3 = 21 then
10306: LD_VAR 0 3
10310: PUSH
10311: LD_INT 21
10313: EQUAL
10314: IFFALSE 10324
// sPowell := true ;
10316: LD_ADDR_EXP 57
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// if p3 = 22 then
10324: LD_VAR 0 3
10328: PUSH
10329: LD_INT 22
10331: EQUAL
10332: IFFALSE 10342
// sTeleport := true ;
10334: LD_ADDR_EXP 60
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// if p3 = 23 then
10342: LD_VAR 0 3
10346: PUSH
10347: LD_INT 23
10349: EQUAL
10350: IFFALSE 10360
// sOilTower := true ;
10352: LD_ADDR_EXP 62
10356: PUSH
10357: LD_INT 1
10359: ST_TO_ADDR
// if p3 = 24 then
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 24
10367: EQUAL
10368: IFFALSE 10378
// sShovel := true ;
10370: LD_ADDR_EXP 63
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// if p3 = 25 then
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 25
10385: EQUAL
10386: IFFALSE 10396
// sSheik := true ;
10388: LD_ADDR_EXP 64
10392: PUSH
10393: LD_INT 1
10395: ST_TO_ADDR
// if p3 = 26 then
10396: LD_VAR 0 3
10400: PUSH
10401: LD_INT 26
10403: EQUAL
10404: IFFALSE 10414
// sEarthquake := true ;
10406: LD_ADDR_EXP 66
10410: PUSH
10411: LD_INT 1
10413: ST_TO_ADDR
// if p3 = 27 then
10414: LD_VAR 0 3
10418: PUSH
10419: LD_INT 27
10421: EQUAL
10422: IFFALSE 10432
// sAI := true ;
10424: LD_ADDR_EXP 67
10428: PUSH
10429: LD_INT 1
10431: ST_TO_ADDR
// if p3 = 28 then
10432: LD_VAR 0 3
10436: PUSH
10437: LD_INT 28
10439: EQUAL
10440: IFFALSE 10450
// sCargo := true ;
10442: LD_ADDR_EXP 70
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// if p3 = 29 then
10450: LD_VAR 0 3
10454: PUSH
10455: LD_INT 29
10457: EQUAL
10458: IFFALSE 10468
// sDLaser := true ;
10460: LD_ADDR_EXP 71
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// if p3 = 30 then
10468: LD_VAR 0 3
10472: PUSH
10473: LD_INT 30
10475: EQUAL
10476: IFFALSE 10486
// sExchange := true ;
10478: LD_ADDR_EXP 72
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// if p3 = 31 then
10486: LD_VAR 0 3
10490: PUSH
10491: LD_INT 31
10493: EQUAL
10494: IFFALSE 10504
// sFac := true ;
10496: LD_ADDR_EXP 73
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// if p3 = 32 then
10504: LD_VAR 0 3
10508: PUSH
10509: LD_INT 32
10511: EQUAL
10512: IFFALSE 10522
// sPower := true ;
10514: LD_ADDR_EXP 74
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if p3 = 33 then
10522: LD_VAR 0 3
10526: PUSH
10527: LD_INT 33
10529: EQUAL
10530: IFFALSE 10540
// sRandom := true ;
10532: LD_ADDR_EXP 75
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// if p3 = 34 then
10540: LD_VAR 0 3
10544: PUSH
10545: LD_INT 34
10547: EQUAL
10548: IFFALSE 10558
// sShield := true ;
10550: LD_ADDR_EXP 76
10554: PUSH
10555: LD_INT 1
10557: ST_TO_ADDR
// if p3 = 35 then
10558: LD_VAR 0 3
10562: PUSH
10563: LD_INT 35
10565: EQUAL
10566: IFFALSE 10576
// sTime := true ;
10568: LD_ADDR_EXP 77
10572: PUSH
10573: LD_INT 1
10575: ST_TO_ADDR
// if p3 = 36 then
10576: LD_VAR 0 3
10580: PUSH
10581: LD_INT 36
10583: EQUAL
10584: IFFALSE 10594
// sTools := true ;
10586: LD_ADDR_EXP 78
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// if p3 = 101 then
10594: LD_VAR 0 3
10598: PUSH
10599: LD_INT 101
10601: EQUAL
10602: IFFALSE 10612
// sSold := true ;
10604: LD_ADDR_EXP 43
10608: PUSH
10609: LD_INT 1
10611: ST_TO_ADDR
// if p3 = 102 then
10612: LD_VAR 0 3
10616: PUSH
10617: LD_INT 102
10619: EQUAL
10620: IFFALSE 10630
// sDiff := true ;
10622: LD_ADDR_EXP 44
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// if p3 = 103 then
10630: LD_VAR 0 3
10634: PUSH
10635: LD_INT 103
10637: EQUAL
10638: IFFALSE 10648
// sFog := true ;
10640: LD_ADDR_EXP 47
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// if p3 = 104 then
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 104
10655: EQUAL
10656: IFFALSE 10666
// sReset := true ;
10658: LD_ADDR_EXP 48
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// if p3 = 105 then
10666: LD_VAR 0 3
10670: PUSH
10671: LD_INT 105
10673: EQUAL
10674: IFFALSE 10684
// sSun := true ;
10676: LD_ADDR_EXP 49
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// if p3 = 106 then
10684: LD_VAR 0 3
10688: PUSH
10689: LD_INT 106
10691: EQUAL
10692: IFFALSE 10702
// sTiger := true ;
10694: LD_ADDR_EXP 45
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// if p3 = 107 then
10702: LD_VAR 0 3
10706: PUSH
10707: LD_INT 107
10709: EQUAL
10710: IFFALSE 10720
// sBomb := true ;
10712: LD_ADDR_EXP 46
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// if p3 = 108 then
10720: LD_VAR 0 3
10724: PUSH
10725: LD_INT 108
10727: EQUAL
10728: IFFALSE 10738
// sWound := true ;
10730: LD_ADDR_EXP 54
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if p3 = 109 then
10738: LD_VAR 0 3
10742: PUSH
10743: LD_INT 109
10745: EQUAL
10746: IFFALSE 10756
// sBetray := true ;
10748: LD_ADDR_EXP 58
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// if p3 = 110 then
10756: LD_VAR 0 3
10760: PUSH
10761: LD_INT 110
10763: EQUAL
10764: IFFALSE 10774
// sContamin := true ;
10766: LD_ADDR_EXP 59
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// if p3 = 111 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 111
10781: EQUAL
10782: IFFALSE 10792
// sOil := true ;
10784: LD_ADDR_EXP 61
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// if p3 = 112 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 112
10799: EQUAL
10800: IFFALSE 10810
// sStu := true ;
10802: LD_ADDR_EXP 65
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// if p3 = 113 then
10810: LD_VAR 0 3
10814: PUSH
10815: LD_INT 113
10817: EQUAL
10818: IFFALSE 10828
// sBazooka := true ;
10820: LD_ADDR_EXP 68
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if p3 = 114 then
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 114
10835: EQUAL
10836: IFFALSE 10846
// sMortar := true ;
10838: LD_ADDR_EXP 69
10842: PUSH
10843: LD_INT 1
10845: ST_TO_ADDR
// if p3 = 115 then
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 115
10853: EQUAL
10854: IFFALSE 10864
// sRanger := true ;
10856: LD_ADDR_EXP 79
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// end ; if p2 = 101 then
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 101
10871: EQUAL
10872: IFFALSE 11000
// begin case p3 of 1 :
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 1
10881: DOUBLE
10882: EQUAL
10883: IFTRUE 10887
10885: GO 10894
10887: POP
// hHackUnlimitedResources ; 2 :
10888: CALL 22035 0 0
10892: GO 11000
10894: LD_INT 2
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10909
10902: POP
// hHackSetLevel10 ; 3 :
10903: CALL 22168 0 0
10907: GO 11000
10909: LD_INT 3
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10924
10917: POP
// hHackSetLevel10YourUnits ; 4 :
10918: CALL 22253 0 0
10922: GO 11000
10924: LD_INT 4
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10939
10932: POP
// hHackInvincible ; 5 :
10933: CALL 22701 0 0
10937: GO 11000
10939: LD_INT 5
10941: DOUBLE
10942: EQUAL
10943: IFTRUE 10947
10945: GO 10954
10947: POP
// hHackInvisible ; 6 :
10948: CALL 22812 0 0
10952: GO 11000
10954: LD_INT 6
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 10969
10962: POP
// hHackChangeYourSide ; 7 :
10963: CALL 22869 0 0
10967: GO 11000
10969: LD_INT 7
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10977
10975: GO 10984
10977: POP
// hHackChangeUnitSide ; 8 :
10978: CALL 22911 0 0
10982: GO 11000
10984: LD_INT 8
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 10999
10992: POP
// hHackFog ; end ;
10993: CALL 23012 0 0
10997: GO 11000
10999: POP
// end ; end ;
11000: PPOPN 6
11002: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11003: GO 11005
11005: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11006: LD_STRING initStreamRollete();
11008: PPUSH
11009: CALL_OW 559
// InitStreamMode ;
11013: CALL 11022 0 0
// DefineStreamItems ( ) ;
11017: CALL 11462 0 0
// end ;
11021: END
// function InitStreamMode ; begin
11022: LD_INT 0
11024: PPUSH
// streamModeActive := false ;
11025: LD_ADDR_EXP 26
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// normalCounter := 36 ;
11033: LD_ADDR_EXP 27
11037: PUSH
11038: LD_INT 36
11040: ST_TO_ADDR
// hardcoreCounter := 16 ;
11041: LD_ADDR_EXP 28
11045: PUSH
11046: LD_INT 16
11048: ST_TO_ADDR
// sRocket := false ;
11049: LD_ADDR_EXP 31
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// sSpeed := false ;
11057: LD_ADDR_EXP 30
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// sEngine := false ;
11065: LD_ADDR_EXP 32
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// sSpec := false ;
11073: LD_ADDR_EXP 29
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sLevel := false ;
11081: LD_ADDR_EXP 33
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sArmoury := false ;
11089: LD_ADDR_EXP 34
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sRadar := false ;
11097: LD_ADDR_EXP 35
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sBunker := false ;
11105: LD_ADDR_EXP 36
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sHack := false ;
11113: LD_ADDR_EXP 37
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sFire := false ;
11121: LD_ADDR_EXP 38
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sRefresh := false ;
11129: LD_ADDR_EXP 39
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sExp := false ;
11137: LD_ADDR_EXP 40
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sDepot := false ;
11145: LD_ADDR_EXP 41
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sFlag := false ;
11153: LD_ADDR_EXP 42
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sKamikadze := false ;
11161: LD_ADDR_EXP 50
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sTroll := false ;
11169: LD_ADDR_EXP 51
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sSlow := false ;
11177: LD_ADDR_EXP 52
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sLack := false ;
11185: LD_ADDR_EXP 53
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sTank := false ;
11193: LD_ADDR_EXP 55
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sRemote := false ;
11201: LD_ADDR_EXP 56
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sPowell := false ;
11209: LD_ADDR_EXP 57
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTeleport := false ;
11217: LD_ADDR_EXP 60
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sOilTower := false ;
11225: LD_ADDR_EXP 62
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sShovel := false ;
11233: LD_ADDR_EXP 63
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sSheik := false ;
11241: LD_ADDR_EXP 64
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sEarthquake := false ;
11249: LD_ADDR_EXP 66
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sAI := false ;
11257: LD_ADDR_EXP 67
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sCargo := false ;
11265: LD_ADDR_EXP 70
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sDLaser := false ;
11273: LD_ADDR_EXP 71
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sExchange := false ;
11281: LD_ADDR_EXP 72
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sFac := false ;
11289: LD_ADDR_EXP 73
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sPower := false ;
11297: LD_ADDR_EXP 74
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sRandom := false ;
11305: LD_ADDR_EXP 75
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sShield := false ;
11313: LD_ADDR_EXP 76
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sTime := false ;
11321: LD_ADDR_EXP 77
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sTools := false ;
11329: LD_ADDR_EXP 78
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sSold := false ;
11337: LD_ADDR_EXP 43
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sDiff := false ;
11345: LD_ADDR_EXP 44
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sFog := false ;
11353: LD_ADDR_EXP 47
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sReset := false ;
11361: LD_ADDR_EXP 48
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sSun := false ;
11369: LD_ADDR_EXP 49
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sTiger := false ;
11377: LD_ADDR_EXP 45
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sBomb := false ;
11385: LD_ADDR_EXP 46
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sWound := false ;
11393: LD_ADDR_EXP 54
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sBetray := false ;
11401: LD_ADDR_EXP 58
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sContamin := false ;
11409: LD_ADDR_EXP 59
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sOil := false ;
11417: LD_ADDR_EXP 61
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sStu := false ;
11425: LD_ADDR_EXP 65
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sBazooka := false ;
11433: LD_ADDR_EXP 68
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sMortar := false ;
11441: LD_ADDR_EXP 69
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sRanger := false ;
11449: LD_ADDR_EXP 79
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// end ;
11457: LD_VAR 0 1
11461: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11462: LD_INT 0
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
// result := [ ] ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: EMPTY
11475: ST_TO_ADDR
// if campaign_id = 1 then
11476: LD_OWVAR 69
11480: PUSH
11481: LD_INT 1
11483: EQUAL
11484: IFFALSE 14422
// begin case mission_number of 1 :
11486: LD_OWVAR 70
11490: PUSH
11491: LD_INT 1
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11563
11499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: LD_INT 4
11510: PUSH
11511: LD_INT 11
11513: PUSH
11514: LD_INT 12
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 23
11528: PUSH
11529: LD_INT 26
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 101
11545: PUSH
11546: LD_INT 102
11548: PUSH
11549: LD_INT 106
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: ST_TO_ADDR
11561: GO 14420
11563: LD_INT 2
11565: DOUBLE
11566: EQUAL
11567: IFTRUE 11571
11569: GO 11643
11571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: LD_INT 11
11585: PUSH
11586: LD_INT 12
11588: PUSH
11589: LD_INT 15
11591: PUSH
11592: LD_INT 16
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 23
11600: PUSH
11601: LD_INT 26
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 105
11623: PUSH
11624: LD_INT 106
11626: PUSH
11627: LD_INT 108
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: ST_TO_ADDR
11641: GO 14420
11643: LD_INT 3
11645: DOUBLE
11646: EQUAL
11647: IFTRUE 11651
11649: GO 11727
11651: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11652: LD_ADDR_VAR 0 1
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: LD_INT 5
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 15
11674: PUSH
11675: LD_INT 16
11677: PUSH
11678: LD_INT 22
11680: PUSH
11681: LD_INT 26
11683: PUSH
11684: LD_INT 36
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 101
11701: PUSH
11702: LD_INT 102
11704: PUSH
11705: LD_INT 105
11707: PUSH
11708: LD_INT 106
11710: PUSH
11711: LD_INT 108
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: ST_TO_ADDR
11725: GO 14420
11727: LD_INT 4
11729: DOUBLE
11730: EQUAL
11731: IFTRUE 11735
11733: GO 11819
11735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: LD_INT 5
11749: PUSH
11750: LD_INT 8
11752: PUSH
11753: LD_INT 11
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: LD_INT 15
11761: PUSH
11762: LD_INT 16
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 26
11773: PUSH
11774: LD_INT 36
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 101
11793: PUSH
11794: LD_INT 102
11796: PUSH
11797: LD_INT 105
11799: PUSH
11800: LD_INT 106
11802: PUSH
11803: LD_INT 108
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
11817: GO 14420
11819: LD_INT 5
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11927
11827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 4
11838: PUSH
11839: LD_INT 5
11841: PUSH
11842: LD_INT 6
11844: PUSH
11845: LD_INT 8
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 15
11856: PUSH
11857: LD_INT 16
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 23
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 26
11871: PUSH
11872: LD_INT 36
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 101
11893: PUSH
11894: LD_INT 102
11896: PUSH
11897: LD_INT 105
11899: PUSH
11900: LD_INT 106
11902: PUSH
11903: LD_INT 108
11905: PUSH
11906: LD_INT 109
11908: PUSH
11909: LD_INT 112
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: ST_TO_ADDR
11925: GO 14420
11927: LD_INT 6
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 12055
11935: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: LD_INT 6
11952: PUSH
11953: LD_INT 8
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 20
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: LD_INT 23
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 26
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 31
11991: PUSH
11992: LD_INT 32
11994: PUSH
11995: LD_INT 36
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 102
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 108
12033: PUSH
12034: LD_INT 109
12036: PUSH
12037: LD_INT 112
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: ST_TO_ADDR
12053: GO 14420
12055: LD_INT 7
12057: DOUBLE
12058: EQUAL
12059: IFTRUE 12063
12061: GO 12163
12063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: LD_INT 7
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 15
12089: PUSH
12090: LD_INT 16
12092: PUSH
12093: LD_INT 20
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 25
12107: PUSH
12108: LD_INT 26
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 101
12129: PUSH
12130: LD_INT 102
12132: PUSH
12133: LD_INT 103
12135: PUSH
12136: LD_INT 105
12138: PUSH
12139: LD_INT 106
12141: PUSH
12142: LD_INT 108
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: ST_TO_ADDR
12161: GO 14420
12163: LD_INT 8
12165: DOUBLE
12166: EQUAL
12167: IFTRUE 12171
12169: GO 12299
12171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: LD_INT 4
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: LD_INT 6
12188: PUSH
12189: LD_INT 7
12191: PUSH
12192: LD_INT 8
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 15
12203: PUSH
12204: LD_INT 16
12206: PUSH
12207: LD_INT 20
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 26
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 31
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 36
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 101
12261: PUSH
12262: LD_INT 102
12264: PUSH
12265: LD_INT 103
12267: PUSH
12268: LD_INT 105
12270: PUSH
12271: LD_INT 106
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 112
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: ST_TO_ADDR
12297: GO 14420
12299: LD_INT 9
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12443
12307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12308: LD_ADDR_VAR 0 1
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: LD_INT 5
12321: PUSH
12322: LD_INT 6
12324: PUSH
12325: LD_INT 7
12327: PUSH
12328: LD_INT 8
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: LD_INT 15
12339: PUSH
12340: LD_INT 16
12342: PUSH
12343: LD_INT 20
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_INT 23
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 26
12360: PUSH
12361: LD_INT 28
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 31
12369: PUSH
12370: LD_INT 32
12372: PUSH
12373: LD_INT 36
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 101
12401: PUSH
12402: LD_INT 102
12404: PUSH
12405: LD_INT 103
12407: PUSH
12408: LD_INT 105
12410: PUSH
12411: LD_INT 106
12413: PUSH
12414: LD_INT 108
12416: PUSH
12417: LD_INT 109
12419: PUSH
12420: LD_INT 112
12422: PUSH
12423: LD_INT 114
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: ST_TO_ADDR
12441: GO 14420
12443: LD_INT 10
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12635
12451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12452: LD_ADDR_VAR 0 1
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 4
12462: PUSH
12463: LD_INT 5
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: LD_INT 8
12474: PUSH
12475: LD_INT 9
12477: PUSH
12478: LD_INT 10
12480: PUSH
12481: LD_INT 11
12483: PUSH
12484: LD_INT 12
12486: PUSH
12487: LD_INT 13
12489: PUSH
12490: LD_INT 14
12492: PUSH
12493: LD_INT 15
12495: PUSH
12496: LD_INT 16
12498: PUSH
12499: LD_INT 17
12501: PUSH
12502: LD_INT 18
12504: PUSH
12505: LD_INT 19
12507: PUSH
12508: LD_INT 20
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_INT 23
12519: PUSH
12520: LD_INT 24
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 26
12528: PUSH
12529: LD_INT 28
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 31
12537: PUSH
12538: LD_INT 32
12540: PUSH
12541: LD_INT 36
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 101
12577: PUSH
12578: LD_INT 102
12580: PUSH
12581: LD_INT 103
12583: PUSH
12584: LD_INT 104
12586: PUSH
12587: LD_INT 105
12589: PUSH
12590: LD_INT 106
12592: PUSH
12593: LD_INT 107
12595: PUSH
12596: LD_INT 108
12598: PUSH
12599: LD_INT 109
12601: PUSH
12602: LD_INT 110
12604: PUSH
12605: LD_INT 111
12607: PUSH
12608: LD_INT 112
12610: PUSH
12611: LD_INT 114
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: ST_TO_ADDR
12633: GO 14420
12635: LD_INT 11
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12835
12643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 2
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: LD_INT 4
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: LD_INT 6
12663: PUSH
12664: LD_INT 7
12666: PUSH
12667: LD_INT 8
12669: PUSH
12670: LD_INT 9
12672: PUSH
12673: LD_INT 10
12675: PUSH
12676: LD_INT 11
12678: PUSH
12679: LD_INT 12
12681: PUSH
12682: LD_INT 13
12684: PUSH
12685: LD_INT 14
12687: PUSH
12688: LD_INT 15
12690: PUSH
12691: LD_INT 16
12693: PUSH
12694: LD_INT 17
12696: PUSH
12697: LD_INT 18
12699: PUSH
12700: LD_INT 19
12702: PUSH
12703: LD_INT 20
12705: PUSH
12706: LD_INT 21
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_INT 23
12714: PUSH
12715: LD_INT 24
12717: PUSH
12718: LD_INT 25
12720: PUSH
12721: LD_INT 26
12723: PUSH
12724: LD_INT 28
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: LD_INT 32
12735: PUSH
12736: LD_INT 34
12738: PUSH
12739: LD_INT 36
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 101
12777: PUSH
12778: LD_INT 102
12780: PUSH
12781: LD_INT 103
12783: PUSH
12784: LD_INT 104
12786: PUSH
12787: LD_INT 105
12789: PUSH
12790: LD_INT 106
12792: PUSH
12793: LD_INT 107
12795: PUSH
12796: LD_INT 108
12798: PUSH
12799: LD_INT 109
12801: PUSH
12802: LD_INT 110
12804: PUSH
12805: LD_INT 111
12807: PUSH
12808: LD_INT 112
12810: PUSH
12811: LD_INT 114
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
12833: GO 14420
12835: LD_INT 12
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 13051
12843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 4
12860: PUSH
12861: LD_INT 5
12863: PUSH
12864: LD_INT 6
12866: PUSH
12867: LD_INT 7
12869: PUSH
12870: LD_INT 8
12872: PUSH
12873: LD_INT 9
12875: PUSH
12876: LD_INT 10
12878: PUSH
12879: LD_INT 11
12881: PUSH
12882: LD_INT 12
12884: PUSH
12885: LD_INT 13
12887: PUSH
12888: LD_INT 14
12890: PUSH
12891: LD_INT 15
12893: PUSH
12894: LD_INT 16
12896: PUSH
12897: LD_INT 17
12899: PUSH
12900: LD_INT 18
12902: PUSH
12903: LD_INT 19
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 24
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 27
12929: PUSH
12930: LD_INT 28
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 31
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 34
12947: PUSH
12948: LD_INT 36
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 101
12989: PUSH
12990: LD_INT 102
12992: PUSH
12993: LD_INT 103
12995: PUSH
12996: LD_INT 104
12998: PUSH
12999: LD_INT 105
13001: PUSH
13002: LD_INT 106
13004: PUSH
13005: LD_INT 107
13007: PUSH
13008: LD_INT 108
13010: PUSH
13011: LD_INT 109
13013: PUSH
13014: LD_INT 110
13016: PUSH
13017: LD_INT 111
13019: PUSH
13020: LD_INT 112
13022: PUSH
13023: LD_INT 113
13025: PUSH
13026: LD_INT 114
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: ST_TO_ADDR
13049: GO 14420
13051: LD_INT 13
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13255
13059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: LD_INT 4
13076: PUSH
13077: LD_INT 5
13079: PUSH
13080: LD_INT 8
13082: PUSH
13083: LD_INT 9
13085: PUSH
13086: LD_INT 10
13088: PUSH
13089: LD_INT 11
13091: PUSH
13092: LD_INT 12
13094: PUSH
13095: LD_INT 14
13097: PUSH
13098: LD_INT 15
13100: PUSH
13101: LD_INT 16
13103: PUSH
13104: LD_INT 17
13106: PUSH
13107: LD_INT 18
13109: PUSH
13110: LD_INT 19
13112: PUSH
13113: LD_INT 20
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 24
13127: PUSH
13128: LD_INT 25
13130: PUSH
13131: LD_INT 26
13133: PUSH
13134: LD_INT 27
13136: PUSH
13137: LD_INT 28
13139: PUSH
13140: LD_INT 30
13142: PUSH
13143: LD_INT 31
13145: PUSH
13146: LD_INT 32
13148: PUSH
13149: LD_INT 33
13151: PUSH
13152: LD_INT 34
13154: PUSH
13155: LD_INT 36
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 101
13193: PUSH
13194: LD_INT 102
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 104
13202: PUSH
13203: LD_INT 105
13205: PUSH
13206: LD_INT 106
13208: PUSH
13209: LD_INT 107
13211: PUSH
13212: LD_INT 108
13214: PUSH
13215: LD_INT 109
13217: PUSH
13218: LD_INT 110
13220: PUSH
13221: LD_INT 111
13223: PUSH
13224: LD_INT 112
13226: PUSH
13227: LD_INT 113
13229: PUSH
13230: LD_INT 114
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 14420
13255: LD_INT 14
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13475
13263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 36
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 101
13413: PUSH
13414: LD_INT 102
13416: PUSH
13417: LD_INT 103
13419: PUSH
13420: LD_INT 104
13422: PUSH
13423: LD_INT 105
13425: PUSH
13426: LD_INT 106
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 108
13434: PUSH
13435: LD_INT 109
13437: PUSH
13438: LD_INT 110
13440: PUSH
13441: LD_INT 111
13443: PUSH
13444: LD_INT 112
13446: PUSH
13447: LD_INT 113
13449: PUSH
13450: LD_INT 114
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: ST_TO_ADDR
13473: GO 14420
13475: LD_INT 15
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13695
13483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13484: LD_ADDR_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: LD_INT 6
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: LD_INT 8
13512: PUSH
13513: LD_INT 9
13515: PUSH
13516: LD_INT 10
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: LD_INT 12
13524: PUSH
13525: LD_INT 13
13527: PUSH
13528: LD_INT 14
13530: PUSH
13531: LD_INT 15
13533: PUSH
13534: LD_INT 16
13536: PUSH
13537: LD_INT 17
13539: PUSH
13540: LD_INT 18
13542: PUSH
13543: LD_INT 19
13545: PUSH
13546: LD_INT 20
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 22
13554: PUSH
13555: LD_INT 23
13557: PUSH
13558: LD_INT 24
13560: PUSH
13561: LD_INT 25
13563: PUSH
13564: LD_INT 26
13566: PUSH
13567: LD_INT 27
13569: PUSH
13570: LD_INT 28
13572: PUSH
13573: LD_INT 29
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 31
13581: PUSH
13582: LD_INT 32
13584: PUSH
13585: LD_INT 33
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 36
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 101
13633: PUSH
13634: LD_INT 102
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: LD_INT 104
13642: PUSH
13643: LD_INT 105
13645: PUSH
13646: LD_INT 106
13648: PUSH
13649: LD_INT 107
13651: PUSH
13652: LD_INT 108
13654: PUSH
13655: LD_INT 109
13657: PUSH
13658: LD_INT 110
13660: PUSH
13661: LD_INT 111
13663: PUSH
13664: LD_INT 112
13666: PUSH
13667: LD_INT 113
13669: PUSH
13670: LD_INT 114
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: ST_TO_ADDR
13693: GO 14420
13695: LD_INT 16
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13827
13703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: LD_INT 5
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 31
13756: PUSH
13757: LD_INT 32
13759: PUSH
13760: LD_INT 33
13762: PUSH
13763: LD_INT 34
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 101
13789: PUSH
13790: LD_INT 102
13792: PUSH
13793: LD_INT 103
13795: PUSH
13796: LD_INT 106
13798: PUSH
13799: LD_INT 108
13801: PUSH
13802: LD_INT 112
13804: PUSH
13805: LD_INT 113
13807: PUSH
13808: LD_INT 114
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: ST_TO_ADDR
13825: GO 14420
13827: LD_INT 17
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 14047
13835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 3
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: LD_INT 6
13858: PUSH
13859: LD_INT 7
13861: PUSH
13862: LD_INT 8
13864: PUSH
13865: LD_INT 9
13867: PUSH
13868: LD_INT 10
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: LD_INT 13
13879: PUSH
13880: LD_INT 14
13882: PUSH
13883: LD_INT 15
13885: PUSH
13886: LD_INT 16
13888: PUSH
13889: LD_INT 17
13891: PUSH
13892: LD_INT 18
13894: PUSH
13895: LD_INT 19
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 24
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 26
13918: PUSH
13919: LD_INT 27
13921: PUSH
13922: LD_INT 28
13924: PUSH
13925: LD_INT 29
13927: PUSH
13928: LD_INT 30
13930: PUSH
13931: LD_INT 31
13933: PUSH
13934: LD_INT 32
13936: PUSH
13937: LD_INT 33
13939: PUSH
13940: LD_INT 34
13942: PUSH
13943: LD_INT 36
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 101
13985: PUSH
13986: LD_INT 102
13988: PUSH
13989: LD_INT 103
13991: PUSH
13992: LD_INT 104
13994: PUSH
13995: LD_INT 105
13997: PUSH
13998: LD_INT 106
14000: PUSH
14001: LD_INT 107
14003: PUSH
14004: LD_INT 108
14006: PUSH
14007: LD_INT 109
14009: PUSH
14010: LD_INT 110
14012: PUSH
14013: LD_INT 111
14015: PUSH
14016: LD_INT 112
14018: PUSH
14019: LD_INT 113
14021: PUSH
14022: LD_INT 114
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: ST_TO_ADDR
14045: GO 14420
14047: LD_INT 18
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14191
14055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: LD_INT 7
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 16
14084: PUSH
14085: LD_INT 20
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 26
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 31
14108: PUSH
14109: LD_INT 32
14111: PUSH
14112: LD_INT 33
14114: PUSH
14115: LD_INT 34
14117: PUSH
14118: LD_INT 35
14120: PUSH
14121: LD_INT 36
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 103
14155: PUSH
14156: LD_INT 106
14158: PUSH
14159: LD_INT 108
14161: PUSH
14162: LD_INT 112
14164: PUSH
14165: LD_INT 113
14167: PUSH
14168: LD_INT 114
14170: PUSH
14171: LD_INT 115
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 14420
14191: LD_INT 19
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14419
14199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: LD_INT 3
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 9
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 12
14240: PUSH
14241: LD_INT 13
14243: PUSH
14244: LD_INT 14
14246: PUSH
14247: LD_INT 15
14249: PUSH
14250: LD_INT 16
14252: PUSH
14253: LD_INT 17
14255: PUSH
14256: LD_INT 18
14258: PUSH
14259: LD_INT 19
14261: PUSH
14262: LD_INT 20
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 24
14276: PUSH
14277: LD_INT 25
14279: PUSH
14280: LD_INT 26
14282: PUSH
14283: LD_INT 27
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 29
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: LD_INT 35
14309: PUSH
14310: LD_INT 36
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 103
14359: PUSH
14360: LD_INT 104
14362: PUSH
14363: LD_INT 105
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 107
14371: PUSH
14372: LD_INT 108
14374: PUSH
14375: LD_INT 109
14377: PUSH
14378: LD_INT 110
14380: PUSH
14381: LD_INT 111
14383: PUSH
14384: LD_INT 112
14386: PUSH
14387: LD_INT 113
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: LD_INT 115
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: ST_TO_ADDR
14417: GO 14420
14419: POP
// end else
14420: GO 14639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14422: LD_ADDR_VAR 0 1
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 4
14438: PUSH
14439: LD_INT 5
14441: PUSH
14442: LD_INT 6
14444: PUSH
14445: LD_INT 7
14447: PUSH
14448: LD_INT 8
14450: PUSH
14451: LD_INT 9
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 11
14459: PUSH
14460: LD_INT 12
14462: PUSH
14463: LD_INT 13
14465: PUSH
14466: LD_INT 14
14468: PUSH
14469: LD_INT 15
14471: PUSH
14472: LD_INT 16
14474: PUSH
14475: LD_INT 17
14477: PUSH
14478: LD_INT 18
14480: PUSH
14481: LD_INT 19
14483: PUSH
14484: LD_INT 20
14486: PUSH
14487: LD_INT 21
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 23
14495: PUSH
14496: LD_INT 24
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 26
14504: PUSH
14505: LD_INT 27
14507: PUSH
14508: LD_INT 28
14510: PUSH
14511: LD_INT 29
14513: PUSH
14514: LD_INT 30
14516: PUSH
14517: LD_INT 31
14519: PUSH
14520: LD_INT 32
14522: PUSH
14523: LD_INT 33
14525: PUSH
14526: LD_INT 34
14528: PUSH
14529: LD_INT 35
14531: PUSH
14532: LD_INT 36
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 101
14575: PUSH
14576: LD_INT 102
14578: PUSH
14579: LD_INT 103
14581: PUSH
14582: LD_INT 104
14584: PUSH
14585: LD_INT 105
14587: PUSH
14588: LD_INT 106
14590: PUSH
14591: LD_INT 107
14593: PUSH
14594: LD_INT 108
14596: PUSH
14597: LD_INT 109
14599: PUSH
14600: LD_INT 110
14602: PUSH
14603: LD_INT 111
14605: PUSH
14606: LD_INT 112
14608: PUSH
14609: LD_INT 113
14611: PUSH
14612: LD_INT 114
14614: PUSH
14615: LD_INT 115
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: ST_TO_ADDR
// if result then
14639: LD_VAR 0 1
14643: IFFALSE 14932
// begin normal :=  ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_STRING 
14652: ST_TO_ADDR
// hardcore :=  ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_STRING 
14660: ST_TO_ADDR
// for i = 1 to normalCounter do
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: DOUBLE
14667: LD_INT 1
14669: DEC
14670: ST_TO_ADDR
14671: LD_EXP 27
14675: PUSH
14676: FOR_TO
14677: IFFALSE 14778
// begin tmp := 0 ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_STRING 0
14686: ST_TO_ADDR
// if result [ 1 ] then
14687: LD_VAR 0 1
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: IFFALSE 14760
// if result [ 1 ] [ 1 ] = i then
14697: LD_VAR 0 1
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 5
14714: EQUAL
14715: IFFALSE 14760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_VAR 0 1
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 3
14746: PPUSH
14747: CALL_OW 1
14751: ST_TO_ADDR
// tmp := 1 ;
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_STRING 1
14759: ST_TO_ADDR
// end ; normal := normal & tmp ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_VAR 0 3
14769: PUSH
14770: LD_VAR 0 2
14774: STR
14775: ST_TO_ADDR
// end ;
14776: GO 14676
14778: POP
14779: POP
// for i = 1 to hardcoreCounter do
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_EXP 28
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14901
// begin tmp := 0 ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_STRING 0
14805: ST_TO_ADDR
// if result [ 2 ] then
14806: LD_VAR 0 1
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: IFFALSE 14883
// if result [ 2 ] [ 1 ] = 100 + i then
14816: LD_VAR 0 1
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_INT 100
14831: PUSH
14832: LD_VAR 0 5
14836: PLUS
14837: EQUAL
14838: IFFALSE 14883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: LD_VAR 0 1
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 3
14869: PPUSH
14870: CALL_OW 1
14874: ST_TO_ADDR
// tmp := 1 ;
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_STRING 1
14882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_VAR 0 4
14892: PUSH
14893: LD_VAR 0 2
14897: STR
14898: ST_TO_ADDR
// end ;
14899: GO 14795
14901: POP
14902: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14903: LD_STRING getStreamItemsFromMission("
14905: PUSH
14906: LD_VAR 0 3
14910: STR
14911: PUSH
14912: LD_STRING ","
14914: STR
14915: PUSH
14916: LD_VAR 0 4
14920: STR
14921: PUSH
14922: LD_STRING ")
14924: STR
14925: PPUSH
14926: CALL_OW 559
// end else
14930: GO 14939
// ToLua ( getStreamItemsFromMission("","") ) ;
14932: LD_STRING getStreamItemsFromMission("","")
14934: PPUSH
14935: CALL_OW 559
// end ;
14939: LD_VAR 0 1
14943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14944: LD_EXP 26
14948: PUSH
14949: LD_EXP 31
14953: AND
14954: IFFALSE 15078
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin enable ;
14963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 34
14986: PUSH
14987: LD_INT 7
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 34
14996: PUSH
14997: LD_INT 45
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 34
15006: PUSH
15007: LD_INT 28
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 34
15016: PUSH
15017: LD_INT 47
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 2
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15078
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15076
// begin SetLives ( i , 0 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 0
15069: PPUSH
15070: CALL_OW 234
// end ;
15074: GO 15059
15076: POP
15077: POP
// end ;
15078: PPOPN 2
15080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15081: LD_EXP 26
15085: PUSH
15086: LD_EXP 32
15090: AND
15091: IFFALSE 15175
15093: GO 15095
15095: DISABLE
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
// begin enable ;
15100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 2
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15175
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 2
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15173
// begin SetLives ( i , 0 ) ;
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 234
// end ;
15171: GO 15156
15173: POP
15174: POP
// end ;
15175: PPOPN 2
15177: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15178: LD_EXP 26
15182: PUSH
15183: LD_EXP 29
15187: AND
15188: IFFALSE 15281
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
// begin enable ;
15196: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15197: LD_ADDR_VAR 0 1
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: LD_INT 25
15219: PUSH
15220: LD_INT 5
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 25
15229: PUSH
15230: LD_INT 9
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 8
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15279
// begin SetClass ( i , 1 ) ;
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 336
// end ;
15277: GO 15262
15279: POP
15280: POP
// end ;
15281: PPOPN 1
15283: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15284: LD_EXP 26
15288: PUSH
15289: LD_EXP 30
15293: AND
15294: PUSH
15295: LD_OWVAR 65
15299: PUSH
15300: LD_INT 7
15302: LESS
15303: AND
15304: IFFALSE 15318
15306: GO 15308
15308: DISABLE
// begin enable ;
15309: ENABLE
// game_speed := 7 ;
15310: LD_ADDR_OWVAR 65
15314: PUSH
15315: LD_INT 7
15317: ST_TO_ADDR
// end ;
15318: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15319: LD_EXP 26
15323: PUSH
15324: LD_EXP 33
15328: AND
15329: IFFALSE 15531
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_INT 81
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: ST_TO_ADDR
// if not tmp then
15375: LD_VAR 0 3
15379: NOT
15380: IFFALSE 15384
// exit ;
15382: GO 15531
// if tmp > 5 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 5
15391: GREATER
15392: IFFALSE 15404
// k := 5 else
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 5
15401: ST_TO_ADDR
15402: GO 15414
// k := tmp ;
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: LD_VAR 0 3
15413: ST_TO_ADDR
// for i := 1 to k do
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_VAR 0 2
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_VAR 0 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 1
15447: PUSH
15448: LD_INT 4
15450: MOD
15451: PUSH
15452: LD_INT 1
15454: PLUS
15455: PPUSH
15456: CALL_OW 259
15460: PUSH
15461: LD_INT 10
15463: LESS
15464: IFFALSE 15527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15466: LD_VAR 0 3
15470: PUSH
15471: LD_VAR 0 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_INT 4
15484: MOD
15485: PUSH
15486: LD_INT 1
15488: PLUS
15489: PPUSH
15490: LD_VAR 0 3
15494: PUSH
15495: LD_VAR 0 1
15499: ARRAY
15500: PPUSH
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 4
15508: MOD
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: CALL_OW 259
15518: PUSH
15519: LD_INT 1
15521: PLUS
15522: PPUSH
15523: CALL_OW 237
15527: GO 15429
15529: POP
15530: POP
// end ;
15531: PPOPN 3
15533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15534: LD_EXP 26
15538: PUSH
15539: LD_EXP 34
15543: AND
15544: IFFALSE 15564
15546: GO 15548
15548: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15549: LD_INT 4
15551: PPUSH
15552: LD_OWVAR 2
15556: PPUSH
15557: LD_INT 0
15559: PPUSH
15560: CALL_OW 324
15564: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15565: LD_EXP 26
15569: PUSH
15570: LD_EXP 63
15574: AND
15575: IFFALSE 15595
15577: GO 15579
15579: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15580: LD_INT 19
15582: PPUSH
15583: LD_OWVAR 2
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 324
15595: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15596: LD_EXP 26
15600: PUSH
15601: LD_EXP 35
15605: AND
15606: IFFALSE 15708
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
// begin enable ;
15615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: LD_INT 34
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 34
15648: PUSH
15649: LD_INT 30
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 2
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15708
// for i in tmp do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 2
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15706
// begin SetLives ( i , 0 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 0
15699: PPUSH
15700: CALL_OW 234
// end ;
15704: GO 15689
15706: POP
15707: POP
// end ;
15708: PPOPN 2
15710: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15711: LD_EXP 26
15715: PUSH
15716: LD_EXP 36
15720: AND
15721: IFFALSE 15741
15723: GO 15725
15725: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15726: LD_INT 32
15728: PPUSH
15729: LD_OWVAR 2
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 324
15741: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15742: LD_EXP 26
15746: PUSH
15747: LD_EXP 37
15751: AND
15752: IFFALSE 15933
15754: GO 15756
15756: DISABLE
15757: LD_INT 0
15759: PPUSH
15760: PPUSH
15761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_OWVAR 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 33
15781: PUSH
15782: LD_INT 3
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: ST_TO_ADDR
// if not tmp then
15798: LD_VAR 0 2
15802: NOT
15803: IFFALSE 15807
// exit ;
15805: GO 15933
// side := 0 ;
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i := 1 to 8 do
15815: LD_ADDR_VAR 0 1
15819: PUSH
15820: DOUBLE
15821: LD_INT 1
15823: DEC
15824: ST_TO_ADDR
15825: LD_INT 8
15827: PUSH
15828: FOR_TO
15829: IFFALSE 15877
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15831: LD_OWVAR 2
15835: PUSH
15836: LD_VAR 0 1
15840: NONEQUAL
15841: PUSH
15842: LD_OWVAR 2
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 81
15856: PUSH
15857: LD_INT 2
15859: EQUAL
15860: AND
15861: IFFALSE 15875
// begin side := i ;
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_VAR 0 1
15872: ST_TO_ADDR
// break ;
15873: GO 15877
// end ;
15875: GO 15828
15877: POP
15878: POP
// if not side then
15879: LD_VAR 0 3
15883: NOT
15884: IFFALSE 15888
// exit ;
15886: GO 15933
// for i := 1 to tmp do
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: DOUBLE
15894: LD_INT 1
15896: DEC
15897: ST_TO_ADDR
15898: LD_VAR 0 2
15902: PUSH
15903: FOR_TO
15904: IFFALSE 15931
// if Prob ( 60 ) then
15906: LD_INT 60
15908: PPUSH
15909: CALL_OW 13
15913: IFFALSE 15929
// SetSide ( i , side ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: CALL_OW 235
15929: GO 15903
15931: POP
15932: POP
// end ;
15933: PPOPN 3
15935: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15936: LD_EXP 26
15940: PUSH
15941: LD_EXP 39
15945: AND
15946: IFFALSE 16065
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 22
15961: PUSH
15962: LD_OWVAR 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 3
15983: PUSH
15984: LD_INT 23
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PPUSH
16003: CALL_OW 69
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16063
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 257
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: IN
16039: IFFALSE 16061
// SetClass ( un , rand ( 1 , 4 ) ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 4
16051: PPUSH
16052: CALL_OW 12
16056: PPUSH
16057: CALL_OW 336
16061: GO 16008
16063: POP
16064: POP
// end ;
16065: PPOPN 1
16067: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16068: LD_EXP 26
16072: PUSH
16073: LD_EXP 38
16077: AND
16078: IFFALSE 16157
16080: GO 16082
16082: DISABLE
16083: LD_INT 0
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 1
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16131: LD_VAR 0 1
16135: PUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: PPUSH
16150: LD_INT 100
16152: PPUSH
16153: CALL_OW 234
// end ;
16157: PPOPN 1
16159: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16160: LD_EXP 26
16164: PUSH
16165: LD_EXP 40
16169: AND
16170: IFFALSE 16268
16172: GO 16174
16174: DISABLE
16175: LD_INT 0
16177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 21
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 69
16213: ST_TO_ADDR
// if not tmp then
16214: LD_VAR 0 1
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16268
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 12
16240: ARRAY
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: LD_INT 4
16247: PPUSH
16248: CALL_OW 12
16252: PPUSH
16253: LD_INT 3000
16255: PPUSH
16256: LD_INT 9000
16258: PPUSH
16259: CALL_OW 12
16263: PPUSH
16264: CALL_OW 492
// end ;
16268: PPOPN 1
16270: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16271: LD_EXP 26
16275: PUSH
16276: LD_EXP 41
16280: AND
16281: IFFALSE 16301
16283: GO 16285
16285: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16286: LD_INT 1
16288: PPUSH
16289: LD_OWVAR 2
16293: PPUSH
16294: LD_INT 0
16296: PPUSH
16297: CALL_OW 324
16301: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16302: LD_EXP 26
16306: PUSH
16307: LD_EXP 42
16311: AND
16312: IFFALSE 16395
16314: GO 16316
16316: DISABLE
16317: LD_INT 0
16319: PPUSH
16320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16321: LD_ADDR_VAR 0 2
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_OWVAR 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 21
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: ST_TO_ADDR
// if not tmp then
16357: LD_VAR 0 2
16361: NOT
16362: IFFALSE 16366
// exit ;
16364: GO 16395
// for i in tmp do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: LD_VAR 0 2
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16393
// SetBLevel ( i , 10 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 10
16386: PPUSH
16387: CALL_OW 241
16391: GO 16376
16393: POP
16394: POP
// end ;
16395: PPOPN 2
16397: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16398: LD_EXP 26
16402: PUSH
16403: LD_EXP 43
16407: AND
16408: IFFALSE 16519
16410: GO 16412
16412: DISABLE
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 22
16425: PUSH
16426: LD_OWVAR 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 25
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 3
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16519
// un := tmp [ rand ( 1 , tmp ) ] ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_VAR 0 3
16472: PUSH
16473: LD_INT 1
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: CALL_OW 12
16485: ARRAY
16486: ST_TO_ADDR
// if Crawls ( un ) then
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 318
16496: IFFALSE 16507
// ComWalk ( un ) ;
16498: LD_VAR 0 2
16502: PPUSH
16503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16507: LD_VAR 0 2
16511: PPUSH
16512: LD_INT 5
16514: PPUSH
16515: CALL_OW 336
// end ;
16519: PPOPN 3
16521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16522: LD_EXP 26
16526: PUSH
16527: LD_EXP 44
16531: AND
16532: PUSH
16533: LD_OWVAR 67
16537: PUSH
16538: LD_INT 3
16540: LESS
16541: AND
16542: IFFALSE 16561
16544: GO 16546
16546: DISABLE
// Difficulty := Difficulty + 1 ;
16547: LD_ADDR_OWVAR 67
16551: PUSH
16552: LD_OWVAR 67
16556: PUSH
16557: LD_INT 1
16559: PLUS
16560: ST_TO_ADDR
16561: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16562: LD_EXP 26
16566: PUSH
16567: LD_EXP 45
16571: AND
16572: IFFALSE 16675
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
// begin for i := 1 to 5 do
16580: LD_ADDR_VAR 0 1
16584: PUSH
16585: DOUBLE
16586: LD_INT 1
16588: DEC
16589: ST_TO_ADDR
16590: LD_INT 5
16592: PUSH
16593: FOR_TO
16594: IFFALSE 16673
// begin uc_nation := nation_nature ;
16596: LD_ADDR_OWVAR 21
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// uc_side := 0 ;
16604: LD_ADDR_OWVAR 20
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16612: LD_ADDR_OWVAR 29
16616: PUSH
16617: LD_INT 12
16619: PUSH
16620: LD_INT 12
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: ST_TO_ADDR
// hc_agressivity := 20 ;
16627: LD_ADDR_OWVAR 35
16631: PUSH
16632: LD_INT 20
16634: ST_TO_ADDR
// hc_class := class_tiger ;
16635: LD_ADDR_OWVAR 28
16639: PUSH
16640: LD_INT 14
16642: ST_TO_ADDR
// hc_gallery :=  ;
16643: LD_ADDR_OWVAR 33
16647: PUSH
16648: LD_STRING 
16650: ST_TO_ADDR
// hc_name :=  ;
16651: LD_ADDR_OWVAR 26
16655: PUSH
16656: LD_STRING 
16658: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16659: CALL_OW 44
16663: PPUSH
16664: LD_INT 0
16666: PPUSH
16667: CALL_OW 51
// end ;
16671: GO 16593
16673: POP
16674: POP
// end ;
16675: PPOPN 1
16677: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16678: LD_EXP 26
16682: PUSH
16683: LD_EXP 46
16687: AND
16688: IFFALSE 16697
16690: GO 16692
16692: DISABLE
// StreamSibBomb ;
16693: CALL 16698 0 0
16697: END
// export function StreamSibBomb ; var i , x , y ; begin
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
16703: PPUSH
// result := false ;
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// for i := 1 to 16 do
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: DOUBLE
16718: LD_INT 1
16720: DEC
16721: ST_TO_ADDR
16722: LD_INT 16
16724: PUSH
16725: FOR_TO
16726: IFFALSE 16925
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16728: LD_ADDR_VAR 0 3
16732: PUSH
16733: LD_INT 10
16735: PUSH
16736: LD_INT 20
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 40
16744: PUSH
16745: LD_INT 50
16747: PUSH
16748: LD_INT 60
16750: PUSH
16751: LD_INT 70
16753: PUSH
16754: LD_INT 80
16756: PUSH
16757: LD_INT 90
16759: PUSH
16760: LD_INT 100
16762: PUSH
16763: LD_INT 110
16765: PUSH
16766: LD_INT 120
16768: PUSH
16769: LD_INT 130
16771: PUSH
16772: LD_INT 140
16774: PUSH
16775: LD_INT 150
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 15
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16807: LD_ADDR_VAR 0 4
16811: PUSH
16812: LD_INT 10
16814: PUSH
16815: LD_INT 20
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: LD_INT 40
16823: PUSH
16824: LD_INT 50
16826: PUSH
16827: LD_INT 60
16829: PUSH
16830: LD_INT 70
16832: PUSH
16833: LD_INT 80
16835: PUSH
16836: LD_INT 90
16838: PUSH
16839: LD_INT 100
16841: PUSH
16842: LD_INT 110
16844: PUSH
16845: LD_INT 120
16847: PUSH
16848: LD_INT 130
16850: PUSH
16851: LD_INT 140
16853: PUSH
16854: LD_INT 150
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 15
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: ST_TO_ADDR
// if ValidHex ( x , y ) then
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_VAR 0 4
16895: PPUSH
16896: CALL_OW 488
16900: IFFALSE 16923
// begin result := [ x , y ] ;
16902: LD_ADDR_VAR 0 1
16906: PUSH
16907: LD_VAR 0 3
16911: PUSH
16912: LD_VAR 0 4
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: ST_TO_ADDR
// break ;
16921: GO 16925
// end ; end ;
16923: GO 16725
16925: POP
16926: POP
// if result then
16927: LD_VAR 0 1
16931: IFFALSE 16991
// begin ToLua ( playSibBomb() ) ;
16933: LD_STRING playSibBomb()
16935: PPUSH
16936: CALL_OW 559
// wait ( 0 0$14 ) ;
16940: LD_INT 490
16942: PPUSH
16943: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PPUSH
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PPUSH
16965: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: LD_VAR 0 1
16982: PUSH
16983: LD_INT 2
16985: ARRAY
16986: PPUSH
16987: CALL_OW 429
// end ; end ;
16991: LD_VAR 0 1
16995: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16996: LD_EXP 26
17000: PUSH
17001: LD_EXP 48
17005: AND
17006: IFFALSE 17018
17008: GO 17010
17010: DISABLE
// YouLost (  ) ;
17011: LD_STRING 
17013: PPUSH
17014: CALL_OW 104
17018: END
// every 0 0$1 trigger StreamModeActive and sFog do
17019: LD_EXP 26
17023: PUSH
17024: LD_EXP 47
17028: AND
17029: IFFALSE 17043
17031: GO 17033
17033: DISABLE
// FogOff ( your_side ) ;
17034: LD_OWVAR 2
17038: PPUSH
17039: CALL_OW 344
17043: END
// every 0 0$1 trigger StreamModeActive and sSun do
17044: LD_EXP 26
17048: PUSH
17049: LD_EXP 49
17053: AND
17054: IFFALSE 17082
17056: GO 17058
17058: DISABLE
// begin solar_recharge_percent := 0 ;
17059: LD_ADDR_OWVAR 79
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17067: LD_INT 10500
17069: PPUSH
17070: CALL_OW 67
// solar_recharge_percent := 100 ;
17074: LD_ADDR_OWVAR 79
17078: PUSH
17079: LD_INT 100
17081: ST_TO_ADDR
// end ;
17082: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17083: LD_EXP 26
17087: PUSH
17088: LD_EXP 50
17092: AND
17093: IFFALSE 17332
17095: GO 17097
17097: DISABLE
17098: LD_INT 0
17100: PPUSH
17101: PPUSH
17102: PPUSH
// begin tmp := [ ] ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: EMPTY
17109: ST_TO_ADDR
// for i := 1 to 6 do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 6
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17229
// begin uc_nation := nation_nature ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// uc_side := 0 ;
17134: LD_ADDR_OWVAR 20
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17142: LD_ADDR_OWVAR 29
17146: PUSH
17147: LD_INT 12
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: ST_TO_ADDR
// hc_agressivity := 20 ;
17157: LD_ADDR_OWVAR 35
17161: PUSH
17162: LD_INT 20
17164: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17165: LD_ADDR_OWVAR 28
17169: PUSH
17170: LD_INT 17
17172: ST_TO_ADDR
// hc_gallery :=  ;
17173: LD_ADDR_OWVAR 33
17177: PUSH
17178: LD_STRING 
17180: ST_TO_ADDR
// hc_name :=  ;
17181: LD_ADDR_OWVAR 26
17185: PUSH
17186: LD_STRING 
17188: ST_TO_ADDR
// un := CreateHuman ;
17189: LD_ADDR_VAR 0 2
17193: PUSH
17194: CALL_OW 44
17198: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 51
// tmp := tmp ^ un ;
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_VAR 0 3
17220: PUSH
17221: LD_VAR 0 2
17225: ADD
17226: ST_TO_ADDR
// end ;
17227: GO 17123
17229: POP
17230: POP
// repeat wait ( 0 0$1 ) ;
17231: LD_INT 35
17233: PPUSH
17234: CALL_OW 67
// for un in tmp do
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_VAR 0 3
17247: PUSH
17248: FOR_IN
17249: IFFALSE 17323
// begin if IsDead ( un ) then
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 301
17260: IFFALSE 17280
// begin tmp := tmp diff un ;
17262: LD_ADDR_VAR 0 3
17266: PUSH
17267: LD_VAR 0 3
17271: PUSH
17272: LD_VAR 0 2
17276: DIFF
17277: ST_TO_ADDR
// continue ;
17278: GO 17248
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17280: LD_VAR 0 2
17284: PPUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: PPUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 74
17316: PPUSH
17317: CALL_OW 115
// end ;
17321: GO 17248
17323: POP
17324: POP
// until not tmp ;
17325: LD_VAR 0 3
17329: NOT
17330: IFFALSE 17231
// end ;
17332: PPOPN 3
17334: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17335: LD_EXP 26
17339: PUSH
17340: LD_EXP 51
17344: AND
17345: IFFALSE 17399
17347: GO 17349
17349: DISABLE
// begin ToLua ( displayTroll(); ) ;
17350: LD_STRING displayTroll();
17352: PPUSH
17353: CALL_OW 559
// wait ( 3 3$00 ) ;
17357: LD_INT 6300
17359: PPUSH
17360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17364: LD_STRING hideTroll();
17366: PPUSH
17367: CALL_OW 559
// wait ( 1 1$00 ) ;
17371: LD_INT 2100
17373: PPUSH
17374: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17378: LD_STRING displayTroll();
17380: PPUSH
17381: CALL_OW 559
// wait ( 1 1$00 ) ;
17385: LD_INT 2100
17387: PPUSH
17388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17392: LD_STRING hideTroll();
17394: PPUSH
17395: CALL_OW 559
// end ;
17399: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17400: LD_EXP 26
17404: PUSH
17405: LD_EXP 52
17409: AND
17410: IFFALSE 17473
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
// begin p := 0 ;
17418: LD_ADDR_VAR 0 1
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// repeat game_speed := 1 ;
17426: LD_ADDR_OWVAR 65
17430: PUSH
17431: LD_INT 1
17433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17434: LD_INT 35
17436: PPUSH
17437: CALL_OW 67
// p := p + 1 ;
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PLUS
17454: ST_TO_ADDR
// until p >= 60 ;
17455: LD_VAR 0 1
17459: PUSH
17460: LD_INT 60
17462: GREATEREQUAL
17463: IFFALSE 17426
// game_speed := 4 ;
17465: LD_ADDR_OWVAR 65
17469: PUSH
17470: LD_INT 4
17472: ST_TO_ADDR
// end ;
17473: PPOPN 1
17475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17476: LD_EXP 26
17480: PUSH
17481: LD_EXP 53
17485: AND
17486: IFFALSE 17632
17488: GO 17490
17490: DISABLE
17491: LD_INT 0
17493: PPUSH
17494: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17495: LD_ADDR_VAR 0 1
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_OWVAR 2
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not depot then
17549: LD_VAR 0 1
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17632
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 1
17567: PUSH
17568: LD_INT 1
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: PPUSH
17582: CALL_OW 274
17586: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 0
17597: PPUSH
17598: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 2
17609: PPUSH
17610: LD_INT 0
17612: PPUSH
17613: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: LD_INT 0
17627: PPUSH
17628: CALL_OW 277
// end ;
17632: PPOPN 2
17634: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17635: LD_EXP 26
17639: PUSH
17640: LD_EXP 54
17644: AND
17645: IFFALSE 17742
17647: GO 17649
17649: DISABLE
17650: LD_INT 0
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_INT 22
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: LD_INT 23
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
// if not tmp then
17707: LD_VAR 0 1
17711: NOT
17712: IFFALSE 17716
// exit ;
17714: GO 17742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 12
17733: ARRAY
17734: PPUSH
17735: LD_INT 200
17737: PPUSH
17738: CALL_OW 234
// end ;
17742: PPOPN 1
17744: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17745: LD_EXP 26
17749: PUSH
17750: LD_EXP 55
17754: AND
17755: IFFALSE 17834
17757: GO 17759
17759: DISABLE
17760: LD_INT 0
17762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_OWVAR 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: ST_TO_ADDR
// if not tmp then
17799: LD_VAR 0 1
17803: NOT
17804: IFFALSE 17808
// exit ;
17806: GO 17834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17808: LD_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: PPUSH
17827: LD_INT 60
17829: PPUSH
17830: CALL_OW 234
// end ;
17834: PPOPN 1
17836: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17837: LD_EXP 26
17841: PUSH
17842: LD_EXP 56
17846: AND
17847: IFFALSE 17946
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// begin enable ;
17856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_OWVAR 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 61
17876: PUSH
17877: EMPTY
17878: LIST
17879: PUSH
17880: LD_INT 33
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if not tmp then
17900: LD_VAR 0 1
17904: NOT
17905: IFFALSE 17909
// exit ;
17907: GO 17946
// for i in tmp do
17909: LD_ADDR_VAR 0 2
17913: PUSH
17914: LD_VAR 0 1
17918: PUSH
17919: FOR_IN
17920: IFFALSE 17944
// if IsControledBy ( i ) then
17922: LD_VAR 0 2
17926: PPUSH
17927: CALL_OW 312
17931: IFFALSE 17942
// ComUnlink ( i ) ;
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL_OW 136
17942: GO 17919
17944: POP
17945: POP
// end ;
17946: PPOPN 2
17948: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17949: LD_EXP 26
17953: PUSH
17954: LD_EXP 57
17958: AND
17959: IFFALSE 18099
17961: GO 17963
17963: DISABLE
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
// begin ToLua ( displayPowell(); ) ;
17968: LD_STRING displayPowell();
17970: PPUSH
17971: CALL_OW 559
// uc_side := 0 ;
17975: LD_ADDR_OWVAR 20
17979: PUSH
17980: LD_INT 0
17982: ST_TO_ADDR
// uc_nation := 2 ;
17983: LD_ADDR_OWVAR 21
17987: PUSH
17988: LD_INT 2
17990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17991: LD_ADDR_OWVAR 37
17995: PUSH
17996: LD_INT 14
17998: ST_TO_ADDR
// vc_engine := engine_siberite ;
17999: LD_ADDR_OWVAR 39
18003: PUSH
18004: LD_INT 3
18006: ST_TO_ADDR
// vc_control := control_apeman ;
18007: LD_ADDR_OWVAR 38
18011: PUSH
18012: LD_INT 5
18014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18015: LD_ADDR_OWVAR 40
18019: PUSH
18020: LD_INT 29
18022: ST_TO_ADDR
// un := CreateVehicle ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: CALL_OW 45
18032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18033: LD_VAR 0 2
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18045: LD_INT 35
18047: PPUSH
18048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 74
18083: PPUSH
18084: CALL_OW 115
// until IsDead ( un ) ;
18088: LD_VAR 0 2
18092: PPUSH
18093: CALL_OW 301
18097: IFFALSE 18045
// end ;
18099: PPOPN 2
18101: END
// every 0 0$1 trigger StreamModeActive and sStu do
18102: LD_EXP 26
18106: PUSH
18107: LD_EXP 65
18111: AND
18112: IFFALSE 18128
18114: GO 18116
18116: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18117: LD_STRING displayStucuk();
18119: PPUSH
18120: CALL_OW 559
// ResetFog ;
18124: CALL_OW 335
// end ;
18128: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18129: LD_EXP 26
18133: PUSH
18134: LD_EXP 58
18138: AND
18139: IFFALSE 18280
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18148: LD_ADDR_VAR 0 2
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_OWVAR 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if not tmp then
18184: LD_VAR 0 2
18188: NOT
18189: IFFALSE 18193
// exit ;
18191: GO 18280
// un := tmp [ rand ( 1 , tmp ) ] ;
18193: LD_ADDR_VAR 0 1
18197: PUSH
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_INT 0
18224: PPUSH
18225: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_OWVAR 3
18238: PUSH
18239: LD_VAR 0 1
18243: DIFF
18244: PPUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 74
18254: PPUSH
18255: CALL_OW 115
// wait ( 0 0$20 ) ;
18259: LD_INT 700
18261: PPUSH
18262: CALL_OW 67
// SetSide ( un , your_side ) ;
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_OWVAR 2
18275: PPUSH
18276: CALL_OW 235
// end ;
18280: PPOPN 2
18282: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18283: LD_EXP 26
18287: PUSH
18288: LD_EXP 59
18292: AND
18293: IFFALSE 18399
18295: GO 18297
18297: DISABLE
18298: LD_INT 0
18300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 30
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: ST_TO_ADDR
// if not depot then
18355: LD_VAR 0 1
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18364: LD_VAR 0 1
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: CALL_OW 250
18377: PPUSH
18378: LD_VAR 0 1
18382: PUSH
18383: LD_INT 1
18385: ARRAY
18386: PPUSH
18387: CALL_OW 251
18391: PPUSH
18392: LD_INT 70
18394: PPUSH
18395: CALL_OW 495
// end ;
18399: PPOPN 1
18401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18402: LD_EXP 26
18406: PUSH
18407: LD_EXP 60
18411: AND
18412: IFFALSE 18623
18414: GO 18416
18416: DISABLE
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18424: LD_ADDR_VAR 0 5
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: ST_TO_ADDR
// if not tmp then
18460: LD_VAR 0 5
18464: NOT
18465: IFFALSE 18469
// exit ;
18467: GO 18623
// for i in tmp do
18469: LD_ADDR_VAR 0 1
18473: PUSH
18474: LD_VAR 0 5
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18621
// begin d := rand ( 0 , 5 ) ;
18482: LD_ADDR_VAR 0 4
18486: PUSH
18487: LD_INT 0
18489: PPUSH
18490: LD_INT 5
18492: PPUSH
18493: CALL_OW 12
18497: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 250
18512: PPUSH
18513: LD_VAR 0 4
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_INT 12
18523: PPUSH
18524: CALL_OW 12
18528: PPUSH
18529: CALL_OW 272
18533: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 251
18548: PPUSH
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_INT 3
18556: PPUSH
18557: LD_INT 12
18559: PPUSH
18560: CALL_OW 12
18564: PPUSH
18565: CALL_OW 273
18569: ST_TO_ADDR
// if ValidHex ( x , y ) then
18570: LD_VAR 0 2
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: CALL_OW 488
18584: IFFALSE 18619
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 6
18606: PPUSH
18607: CALL_OW 12
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 483
// end ;
18619: GO 18479
18621: POP
18622: POP
// end ;
18623: PPOPN 5
18625: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18626: LD_EXP 26
18630: PUSH
18631: LD_EXP 61
18635: AND
18636: IFFALSE 18730
18638: GO 18640
18640: DISABLE
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 22
18652: PUSH
18653: LD_OWVAR 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 32
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 69
18691: ST_TO_ADDR
// if not tmp then
18692: LD_VAR 0 2
18696: NOT
18697: IFFALSE 18701
// exit ;
18699: GO 18730
// for i in tmp do
18701: LD_ADDR_VAR 0 1
18705: PUSH
18706: LD_VAR 0 2
18710: PUSH
18711: FOR_IN
18712: IFFALSE 18728
// SetFuel ( i , 0 ) ;
18714: LD_VAR 0 1
18718: PPUSH
18719: LD_INT 0
18721: PPUSH
18722: CALL_OW 240
18726: GO 18711
18728: POP
18729: POP
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18733: LD_EXP 26
18737: PUSH
18738: LD_EXP 62
18742: AND
18743: IFFALSE 18809
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 29
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: ST_TO_ADDR
// if not tmp then
18787: LD_VAR 0 1
18791: NOT
18792: IFFALSE 18796
// exit ;
18794: GO 18809
// DestroyUnit ( tmp [ 1 ] ) ;
18796: LD_VAR 0 1
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: PPUSH
18805: CALL_OW 65
// end ;
18809: PPOPN 1
18811: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18812: LD_EXP 26
18816: PUSH
18817: LD_EXP 64
18821: AND
18822: IFFALSE 18951
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
// begin uc_side := 0 ;
18830: LD_ADDR_OWVAR 20
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// uc_nation := nation_arabian ;
18838: LD_ADDR_OWVAR 21
18842: PUSH
18843: LD_INT 2
18845: ST_TO_ADDR
// hc_gallery :=  ;
18846: LD_ADDR_OWVAR 33
18850: PUSH
18851: LD_STRING 
18853: ST_TO_ADDR
// hc_name :=  ;
18854: LD_ADDR_OWVAR 26
18858: PUSH
18859: LD_STRING 
18861: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 11
18867: PPUSH
18868: LD_INT 10
18870: PPUSH
18871: CALL_OW 380
// un := CreateHuman ;
18875: LD_ADDR_VAR 0 1
18879: PUSH
18880: CALL_OW 44
18884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_INT 1
18892: PPUSH
18893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18897: LD_INT 35
18899: PPUSH
18900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_INT 22
18911: PUSH
18912: LD_OWVAR 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PPUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 74
18935: PPUSH
18936: CALL_OW 115
// until IsDead ( un ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: CALL_OW 301
18949: IFFALSE 18897
// end ;
18951: PPOPN 1
18953: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18954: LD_EXP 26
18958: PUSH
18959: LD_EXP 66
18963: AND
18964: IFFALSE 18976
18966: GO 18968
18968: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18969: LD_STRING earthquake(getX(game), 0, 32)
18971: PPUSH
18972: CALL_OW 559
18976: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18977: LD_EXP 26
18981: PUSH
18982: LD_EXP 67
18986: AND
18987: IFFALSE 19078
18989: GO 18991
18991: DISABLE
18992: LD_INT 0
18994: PPUSH
// begin enable ;
18995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_OWVAR 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 21
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 33
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 1
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 234
// end ;
19078: PPOPN 1
19080: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19081: LD_EXP 26
19085: PUSH
19086: LD_EXP 68
19090: AND
19091: IFFALSE 19232
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: ST_TO_ADDR
// if not tmp then
19137: LD_VAR 0 3
19141: NOT
19142: IFFALSE 19146
// exit ;
19144: GO 19232
// un := tmp [ rand ( 1 , tmp ) ] ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 12
19168: ARRAY
19169: ST_TO_ADDR
// if Crawls ( un ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: CALL_OW 318
19179: IFFALSE 19190
// ComWalk ( un ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: LD_INT 9
19197: PPUSH
19198: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19202: LD_INT 28
19204: PPUSH
19205: LD_OWVAR 2
19209: PPUSH
19210: LD_INT 2
19212: PPUSH
19213: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19217: LD_INT 29
19219: PPUSH
19220: LD_OWVAR 2
19224: PPUSH
19225: LD_INT 2
19227: PPUSH
19228: CALL_OW 322
// end ;
19232: PPOPN 3
19234: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19235: LD_EXP 26
19239: PUSH
19240: LD_EXP 69
19244: AND
19245: IFFALSE 19356
19247: GO 19249
19249: DISABLE
19250: LD_INT 0
19252: PPUSH
19253: PPUSH
19254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_OWVAR 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 25
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: ST_TO_ADDR
// if not tmp then
19291: LD_VAR 0 3
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19356
// un := tmp [ rand ( 1 , tmp ) ] ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 1
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: CALL_OW 12
19322: ARRAY
19323: ST_TO_ADDR
// if Crawls ( un ) then
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 318
19333: IFFALSE 19344
// ComWalk ( un ) ;
19335: LD_VAR 0 2
19339: PPUSH
19340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19344: LD_VAR 0 2
19348: PPUSH
19349: LD_INT 8
19351: PPUSH
19352: CALL_OW 336
// end ;
19356: PPOPN 3
19358: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19359: LD_EXP 26
19363: PUSH
19364: LD_EXP 70
19368: AND
19369: IFFALSE 19513
19371: GO 19373
19373: DISABLE
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19378: LD_ADDR_VAR 0 2
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_OWVAR 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 34
19410: PUSH
19411: LD_INT 12
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 34
19420: PUSH
19421: LD_INT 51
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 34
19430: PUSH
19431: LD_INT 32
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 2
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19513
// for i in tmp do
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19511
// if GetCargo ( i , mat_artifact ) = 0 then
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_INT 4
19483: PPUSH
19484: CALL_OW 289
19488: PUSH
19489: LD_INT 0
19491: EQUAL
19492: IFFALSE 19509
// SetCargo ( i , mat_siberit , 100 ) ;
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_INT 3
19501: PPUSH
19502: LD_INT 100
19504: PPUSH
19505: CALL_OW 290
19509: GO 19473
19511: POP
19512: POP
// end ;
19513: PPOPN 2
19515: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19516: LD_EXP 26
19520: PUSH
19521: LD_EXP 71
19525: AND
19526: IFFALSE 19709
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PPUSH
19552: CALL_OW 69
19556: ST_TO_ADDR
// if not tmp then
19557: LD_VAR 0 2
19561: NOT
19562: IFFALSE 19566
// exit ;
19564: GO 19709
// for i := 1 to 2 do
19566: LD_ADDR_VAR 0 1
19570: PUSH
19571: DOUBLE
19572: LD_INT 1
19574: DEC
19575: ST_TO_ADDR
19576: LD_INT 2
19578: PUSH
19579: FOR_TO
19580: IFFALSE 19707
// begin uc_side := your_side ;
19582: LD_ADDR_OWVAR 20
19586: PUSH
19587: LD_OWVAR 2
19591: ST_TO_ADDR
// uc_nation := nation_american ;
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// vc_chassis := us_morphling ;
19600: LD_ADDR_OWVAR 37
19604: PUSH
19605: LD_INT 5
19607: ST_TO_ADDR
// vc_engine := engine_siberite ;
19608: LD_ADDR_OWVAR 39
19612: PUSH
19613: LD_INT 3
19615: ST_TO_ADDR
// vc_control := control_computer ;
19616: LD_ADDR_OWVAR 38
19620: PUSH
19621: LD_INT 3
19623: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19624: LD_ADDR_OWVAR 40
19628: PUSH
19629: LD_INT 10
19631: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19632: LD_VAR 0 2
19636: PUSH
19637: LD_INT 1
19639: ARRAY
19640: PPUSH
19641: CALL_OW 310
19645: NOT
19646: IFFALSE 19693
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19648: CALL_OW 45
19652: PPUSH
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 250
19666: PPUSH
19667: LD_VAR 0 2
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 251
19680: PPUSH
19681: LD_INT 12
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 50
19691: GO 19705
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19693: CALL_OW 45
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 51
// end ;
19705: GO 19579
19707: POP
19708: POP
// end ;
19709: PPOPN 2
19711: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19712: LD_EXP 26
19716: PUSH
19717: LD_EXP 72
19721: AND
19722: IFFALSE 19944
19724: GO 19726
19726: DISABLE
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19735: LD_ADDR_VAR 0 6
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 6
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19944
// s1 := rand ( 1 , 4 ) ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_INT 4
19808: PPUSH
19809: CALL_OW 12
19813: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19814: LD_ADDR_VAR 0 4
19818: PUSH
19819: LD_VAR 0 6
19823: PUSH
19824: LD_INT 1
19826: ARRAY
19827: PPUSH
19828: LD_VAR 0 2
19832: PPUSH
19833: CALL_OW 259
19837: ST_TO_ADDR
// if s1 = 1 then
19838: LD_VAR 0 2
19842: PUSH
19843: LD_INT 1
19845: EQUAL
19846: IFFALSE 19866
// s2 := rand ( 2 , 4 ) else
19848: LD_ADDR_VAR 0 3
19852: PUSH
19853: LD_INT 2
19855: PPUSH
19856: LD_INT 4
19858: PPUSH
19859: CALL_OW 12
19863: ST_TO_ADDR
19864: GO 19874
// s2 := 1 ;
19866: LD_ADDR_VAR 0 3
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19874: LD_ADDR_VAR 0 5
19878: PUSH
19879: LD_VAR 0 6
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PPUSH
19888: LD_VAR 0 3
19892: PPUSH
19893: CALL_OW 259
19897: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19898: LD_VAR 0 6
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PPUSH
19907: LD_VAR 0 2
19911: PPUSH
19912: LD_VAR 0 5
19916: PPUSH
19917: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19921: LD_VAR 0 6
19925: PUSH
19926: LD_INT 1
19928: ARRAY
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: LD_VAR 0 4
19939: PPUSH
19940: CALL_OW 237
// end ;
19944: PPOPN 6
19946: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19947: LD_EXP 26
19951: PUSH
19952: LD_EXP 73
19956: AND
19957: IFFALSE 20036
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 3
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// if not tmp then
20001: LD_VAR 0 1
20005: NOT
20006: IFFALSE 20010
// exit ;
20008: GO 20036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20010: LD_VAR 0 1
20014: PUSH
20015: LD_INT 1
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 234
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20039: LD_EXP 26
20043: PUSH
20044: LD_EXP 74
20048: AND
20049: IFFALSE 20161
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
20057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: LD_INT 27
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 30
20090: PUSH
20091: LD_INT 26
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 28
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 2
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20161
// for i in tmp do
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: FOR_IN
20143: IFFALSE 20159
// SetLives ( i , 1 ) ;
20145: LD_VAR 0 1
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 234
20157: GO 20142
20159: POP
20160: POP
// end ;
20161: PPOPN 2
20163: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20164: LD_EXP 26
20168: PUSH
20169: LD_EXP 75
20173: AND
20174: IFFALSE 20448
20176: GO 20178
20178: DISABLE
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
// begin i := rand ( 1 , 7 ) ;
20184: LD_ADDR_VAR 0 1
20188: PUSH
20189: LD_INT 1
20191: PPUSH
20192: LD_INT 7
20194: PPUSH
20195: CALL_OW 12
20199: ST_TO_ADDR
// case i of 1 :
20200: LD_VAR 0 1
20204: PUSH
20205: LD_INT 1
20207: DOUBLE
20208: EQUAL
20209: IFTRUE 20213
20211: GO 20223
20213: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20214: LD_STRING earthquake(getX(game), 0, 32)
20216: PPUSH
20217: CALL_OW 559
20221: GO 20448
20223: LD_INT 2
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20245
20231: POP
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ; 3 :
20243: GO 20448
20245: LD_INT 3
20247: DOUBLE
20248: EQUAL
20249: IFTRUE 20253
20251: GO 20357
20253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20254: LD_ADDR_VAR 0 2
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 25
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 2
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20448
// un := tmp [ rand ( 1 , tmp ) ] ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_VAR 0 2
20308: PUSH
20309: LD_INT 1
20311: PPUSH
20312: LD_VAR 0 2
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: ST_TO_ADDR
// if Crawls ( un ) then
20323: LD_VAR 0 3
20327: PPUSH
20328: CALL_OW 318
20332: IFFALSE 20343
// ComWalk ( un ) ;
20334: LD_VAR 0 3
20338: PPUSH
20339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 8
20350: PPUSH
20351: CALL_OW 336
// end ; 4 :
20355: GO 20448
20357: LD_INT 4
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20426
20365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: LD_INT 29
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not tmp then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20448
// DestroyUnit ( tmp [ 1 ] ) ;
20411: LD_VAR 0 2
20415: PUSH
20416: LD_INT 1
20418: ARRAY
20419: PPUSH
20420: CALL_OW 65
// end ; 5 .. 7 :
20424: GO 20448
20426: LD_INT 5
20428: DOUBLE
20429: GREATEREQUAL
20430: IFFALSE 20438
20432: LD_INT 7
20434: DOUBLE
20435: LESSEQUAL
20436: IFTRUE 20440
20438: GO 20447
20440: POP
// StreamSibBomb ; end ;
20441: CALL 16698 0 0
20445: GO 20448
20447: POP
// end ;
20448: PPOPN 3
20450: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20451: LD_EXP 26
20455: PUSH
20456: LD_EXP 76
20460: AND
20461: IFFALSE 20617
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20471: LD_ADDR_VAR 0 2
20475: PUSH
20476: LD_INT 81
20478: PUSH
20479: LD_OWVAR 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 21
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 21
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not tmp then
20525: LD_VAR 0 2
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20617
// p := 0 ;
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20542: LD_INT 35
20544: PPUSH
20545: CALL_OW 67
// p := p + 1 ;
20549: LD_ADDR_VAR 0 3
20553: PUSH
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 1
20561: PLUS
20562: ST_TO_ADDR
// for i in tmp do
20563: LD_ADDR_VAR 0 1
20567: PUSH
20568: LD_VAR 0 2
20572: PUSH
20573: FOR_IN
20574: IFFALSE 20605
// if GetLives ( i ) < 1000 then
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 256
20585: PUSH
20586: LD_INT 1000
20588: LESS
20589: IFFALSE 20603
// SetLives ( i , 1000 ) ;
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_INT 1000
20598: PPUSH
20599: CALL_OW 234
20603: GO 20573
20605: POP
20606: POP
// until p > 20 ;
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 20
20614: GREATER
20615: IFFALSE 20542
// end ;
20617: PPOPN 3
20619: END
// every 0 0$1 trigger StreamModeActive and sTime do
20620: LD_EXP 26
20624: PUSH
20625: LD_EXP 77
20629: AND
20630: IFFALSE 20665
20632: GO 20634
20634: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20635: LD_INT 28
20637: PPUSH
20638: LD_OWVAR 2
20642: PPUSH
20643: LD_INT 2
20645: PPUSH
20646: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20650: LD_INT 30
20652: PPUSH
20653: LD_OWVAR 2
20657: PPUSH
20658: LD_INT 2
20660: PPUSH
20661: CALL_OW 322
// end ;
20665: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20666: LD_EXP 26
20670: PUSH
20671: LD_EXP 78
20675: AND
20676: IFFALSE 20797
20678: GO 20680
20680: DISABLE
20681: LD_INT 0
20683: PPUSH
20684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_OWVAR 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: LD_INT 23
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PPUSH
20734: CALL_OW 69
20738: ST_TO_ADDR
// if not tmp then
20739: LD_VAR 0 2
20743: NOT
20744: IFFALSE 20748
// exit ;
20746: GO 20797
// for i in tmp do
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_VAR 0 2
20757: PUSH
20758: FOR_IN
20759: IFFALSE 20795
// begin if Crawls ( i ) then
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 318
20770: IFFALSE 20781
// ComWalk ( i ) ;
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 138
// SetClass ( i , 2 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 2
20788: PPUSH
20789: CALL_OW 336
// end ;
20793: GO 20758
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20800: LD_EXP 26
20804: PUSH
20805: LD_EXP 79
20809: AND
20810: IFFALSE 21091
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
20819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20820: LD_OWVAR 2
20824: PPUSH
20825: LD_INT 9
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20838: LD_INT 9
20840: PPUSH
20841: LD_OWVAR 2
20845: PPUSH
20846: CALL_OW 343
// uc_side := 9 ;
20850: LD_ADDR_OWVAR 20
20854: PUSH
20855: LD_INT 9
20857: ST_TO_ADDR
// uc_nation := 2 ;
20858: LD_ADDR_OWVAR 21
20862: PUSH
20863: LD_INT 2
20865: ST_TO_ADDR
// hc_name := Dark Warrior ;
20866: LD_ADDR_OWVAR 26
20870: PUSH
20871: LD_STRING Dark Warrior
20873: ST_TO_ADDR
// hc_gallery :=  ;
20874: LD_ADDR_OWVAR 33
20878: PUSH
20879: LD_STRING 
20881: ST_TO_ADDR
// hc_noskilllimit := true ;
20882: LD_ADDR_OWVAR 76
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20890: LD_ADDR_OWVAR 31
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: ST_TO_ADDR
// un := CreateHuman ;
20913: LD_ADDR_VAR 0 3
20917: PUSH
20918: CALL_OW 44
20922: ST_TO_ADDR
// hc_noskilllimit := false ;
20923: LD_ADDR_OWVAR 76
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 51
// p := 0 ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20951: LD_INT 35
20953: PPUSH
20954: CALL_OW 67
// p := p + 1 ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 2
20967: PUSH
20968: LD_INT 1
20970: PLUS
20971: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20972: LD_VAR 0 3
20976: PPUSH
20977: CALL_OW 256
20981: PUSH
20982: LD_INT 1000
20984: LESS
20985: IFFALSE 20999
// SetLives ( un , 1000 ) ;
20987: LD_VAR 0 3
20991: PPUSH
20992: LD_INT 1000
20994: PPUSH
20995: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 81
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 91
21018: PUSH
21019: LD_VAR 0 3
21023: PUSH
21024: LD_INT 30
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21055: LD_VAR 0 2
21059: PUSH
21060: LD_INT 60
21062: GREATER
21063: PUSH
21064: LD_VAR 0 3
21068: PPUSH
21069: CALL_OW 301
21073: OR
21074: IFFALSE 20951
// if un then
21076: LD_VAR 0 3
21080: IFFALSE 21091
// RemoveUnit ( un ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 64
// end ;
21091: PPOPN 3
21093: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21094: LD_INT 0
21096: PPUSH
// case cmd of 301 :
21097: LD_VAR 0 1
21101: PUSH
21102: LD_INT 301
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21142
21110: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21111: LD_VAR 0 6
21115: PPUSH
21116: LD_VAR 0 7
21120: PPUSH
21121: LD_VAR 0 8
21125: PPUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: LD_VAR 0 5
21135: PPUSH
21136: CALL 22343 0 5
21140: GO 21263
21142: LD_INT 302
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21187
21150: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21151: LD_VAR 0 6
21155: PPUSH
21156: LD_VAR 0 7
21160: PPUSH
21161: LD_VAR 0 8
21165: PPUSH
21166: LD_VAR 0 9
21170: PPUSH
21171: LD_VAR 0 4
21175: PPUSH
21176: LD_VAR 0 5
21180: PPUSH
21181: CALL 22434 0 6
21185: GO 21263
21187: LD_INT 303
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21232
21195: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21196: LD_VAR 0 6
21200: PPUSH
21201: LD_VAR 0 7
21205: PPUSH
21206: LD_VAR 0 8
21210: PPUSH
21211: LD_VAR 0 9
21215: PPUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: LD_VAR 0 5
21225: PPUSH
21226: CALL 21268 0 6
21230: GO 21263
21232: LD_INT 304
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21262
21240: POP
// hHackTeleport ( unit , x , y ) ; end ;
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL 23027 0 3
21260: GO 21263
21262: POP
// end ;
21263: LD_VAR 0 12
21267: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21268: LD_INT 0
21270: PPUSH
21271: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21272: LD_VAR 0 1
21276: PUSH
21277: LD_INT 1
21279: LESS
21280: PUSH
21281: LD_VAR 0 1
21285: PUSH
21286: LD_INT 3
21288: GREATER
21289: OR
21290: PUSH
21291: LD_VAR 0 5
21295: PPUSH
21296: LD_VAR 0 6
21300: PPUSH
21301: CALL_OW 428
21305: OR
21306: IFFALSE 21310
// exit ;
21308: GO 22030
// uc_side := your_side ;
21310: LD_ADDR_OWVAR 20
21314: PUSH
21315: LD_OWVAR 2
21319: ST_TO_ADDR
// uc_nation := nation ;
21320: LD_ADDR_OWVAR 21
21324: PUSH
21325: LD_VAR 0 1
21329: ST_TO_ADDR
// bc_level = 1 ;
21330: LD_ADDR_OWVAR 43
21334: PUSH
21335: LD_INT 1
21337: ST_TO_ADDR
// case btype of 1 :
21338: LD_VAR 0 2
21342: PUSH
21343: LD_INT 1
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21362
21351: POP
// bc_type := b_depot ; 2 :
21352: LD_ADDR_OWVAR 42
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
21360: GO 21974
21362: LD_INT 2
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21381
21370: POP
// bc_type := b_warehouse ; 3 :
21371: LD_ADDR_OWVAR 42
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
21379: GO 21974
21381: LD_INT 3
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21400
21389: POP
// bc_type := b_lab ; 4 .. 9 :
21390: LD_ADDR_OWVAR 42
21394: PUSH
21395: LD_INT 6
21397: ST_TO_ADDR
21398: GO 21974
21400: LD_INT 4
21402: DOUBLE
21403: GREATEREQUAL
21404: IFFALSE 21412
21406: LD_INT 9
21408: DOUBLE
21409: LESSEQUAL
21410: IFTRUE 21414
21412: GO 21466
21414: POP
// begin bc_type := b_lab_half ;
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 7
21422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21423: LD_ADDR_OWVAR 44
21427: PUSH
21428: LD_INT 10
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 14
21442: PUSH
21443: LD_INT 13
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: PUSH
21454: LD_VAR 0 2
21458: PUSH
21459: LD_INT 3
21461: MINUS
21462: ARRAY
21463: ST_TO_ADDR
// end ; 10 .. 13 :
21464: GO 21974
21466: LD_INT 10
21468: DOUBLE
21469: GREATEREQUAL
21470: IFFALSE 21478
21472: LD_INT 13
21474: DOUBLE
21475: LESSEQUAL
21476: IFTRUE 21480
21478: GO 21557
21480: POP
// begin bc_type := b_lab_full ;
21481: LD_ADDR_OWVAR 42
21485: PUSH
21486: LD_INT 8
21488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21489: LD_ADDR_OWVAR 44
21493: PUSH
21494: LD_INT 10
21496: PUSH
21497: LD_INT 12
21499: PUSH
21500: LD_INT 14
21502: PUSH
21503: LD_INT 13
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 9
21519: MINUS
21520: ARRAY
21521: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21522: LD_ADDR_OWVAR 45
21526: PUSH
21527: LD_INT 11
21529: PUSH
21530: LD_INT 15
21532: PUSH
21533: LD_INT 12
21535: PUSH
21536: LD_INT 15
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_INT 9
21552: MINUS
21553: ARRAY
21554: ST_TO_ADDR
// end ; 14 :
21555: GO 21974
21557: LD_INT 14
21559: DOUBLE
21560: EQUAL
21561: IFTRUE 21565
21563: GO 21576
21565: POP
// bc_type := b_workshop ; 15 :
21566: LD_ADDR_OWVAR 42
21570: PUSH
21571: LD_INT 2
21573: ST_TO_ADDR
21574: GO 21974
21576: LD_INT 15
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21595
21584: POP
// bc_type := b_factory ; 16 :
21585: LD_ADDR_OWVAR 42
21589: PUSH
21590: LD_INT 3
21592: ST_TO_ADDR
21593: GO 21974
21595: LD_INT 16
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21614
21603: POP
// bc_type := b_ext_gun ; 17 :
21604: LD_ADDR_OWVAR 42
21608: PUSH
21609: LD_INT 17
21611: ST_TO_ADDR
21612: GO 21974
21614: LD_INT 17
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21650
21622: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21623: LD_ADDR_OWVAR 42
21627: PUSH
21628: LD_INT 19
21630: PUSH
21631: LD_INT 23
21633: PUSH
21634: LD_INT 19
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_VAR 0 1
21646: ARRAY
21647: ST_TO_ADDR
21648: GO 21974
21650: LD_INT 18
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21669
21658: POP
// bc_type := b_ext_radar ; 19 :
21659: LD_ADDR_OWVAR 42
21663: PUSH
21664: LD_INT 20
21666: ST_TO_ADDR
21667: GO 21974
21669: LD_INT 19
21671: DOUBLE
21672: EQUAL
21673: IFTRUE 21677
21675: GO 21688
21677: POP
// bc_type := b_ext_radio ; 20 :
21678: LD_ADDR_OWVAR 42
21682: PUSH
21683: LD_INT 22
21685: ST_TO_ADDR
21686: GO 21974
21688: LD_INT 20
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21707
21696: POP
// bc_type := b_ext_siberium ; 21 :
21697: LD_ADDR_OWVAR 42
21701: PUSH
21702: LD_INT 21
21704: ST_TO_ADDR
21705: GO 21974
21707: LD_INT 21
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// bc_type := b_ext_computer ; 22 :
21716: LD_ADDR_OWVAR 42
21720: PUSH
21721: LD_INT 24
21723: ST_TO_ADDR
21724: GO 21974
21726: LD_INT 22
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// bc_type := b_ext_track ; 23 :
21735: LD_ADDR_OWVAR 42
21739: PUSH
21740: LD_INT 16
21742: ST_TO_ADDR
21743: GO 21974
21745: LD_INT 23
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// bc_type := b_ext_laser ; 24 :
21754: LD_ADDR_OWVAR 42
21758: PUSH
21759: LD_INT 25
21761: ST_TO_ADDR
21762: GO 21974
21764: LD_INT 24
21766: DOUBLE
21767: EQUAL
21768: IFTRUE 21772
21770: GO 21783
21772: POP
// bc_type := b_control_tower ; 25 :
21773: LD_ADDR_OWVAR 42
21777: PUSH
21778: LD_INT 36
21780: ST_TO_ADDR
21781: GO 21974
21783: LD_INT 25
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21802
21791: POP
// bc_type := b_breastwork ; 26 :
21792: LD_ADDR_OWVAR 42
21796: PUSH
21797: LD_INT 31
21799: ST_TO_ADDR
21800: GO 21974
21802: LD_INT 26
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21821
21810: POP
// bc_type := b_bunker ; 27 :
21811: LD_ADDR_OWVAR 42
21815: PUSH
21816: LD_INT 32
21818: ST_TO_ADDR
21819: GO 21974
21821: LD_INT 27
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 21840
21829: POP
// bc_type := b_turret ; 28 :
21830: LD_ADDR_OWVAR 42
21834: PUSH
21835: LD_INT 33
21837: ST_TO_ADDR
21838: GO 21974
21840: LD_INT 28
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21859
21848: POP
// bc_type := b_armoury ; 29 :
21849: LD_ADDR_OWVAR 42
21853: PUSH
21854: LD_INT 4
21856: ST_TO_ADDR
21857: GO 21974
21859: LD_INT 29
21861: DOUBLE
21862: EQUAL
21863: IFTRUE 21867
21865: GO 21878
21867: POP
// bc_type := b_barracks ; 30 :
21868: LD_ADDR_OWVAR 42
21872: PUSH
21873: LD_INT 5
21875: ST_TO_ADDR
21876: GO 21974
21878: LD_INT 30
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21897
21886: POP
// bc_type := b_solar_power ; 31 :
21887: LD_ADDR_OWVAR 42
21891: PUSH
21892: LD_INT 27
21894: ST_TO_ADDR
21895: GO 21974
21897: LD_INT 31
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 21916
21905: POP
// bc_type := b_oil_power ; 32 :
21906: LD_ADDR_OWVAR 42
21910: PUSH
21911: LD_INT 26
21913: ST_TO_ADDR
21914: GO 21974
21916: LD_INT 32
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 21935
21924: POP
// bc_type := b_siberite_power ; 33 :
21925: LD_ADDR_OWVAR 42
21929: PUSH
21930: LD_INT 28
21932: ST_TO_ADDR
21933: GO 21974
21935: LD_INT 33
21937: DOUBLE
21938: EQUAL
21939: IFTRUE 21943
21941: GO 21954
21943: POP
// bc_type := b_oil_mine ; 34 :
21944: LD_ADDR_OWVAR 42
21948: PUSH
21949: LD_INT 29
21951: ST_TO_ADDR
21952: GO 21974
21954: LD_INT 34
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_siberite_mine ; end ;
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 30
21970: ST_TO_ADDR
21971: GO 21974
21973: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21974: LD_ADDR_VAR 0 8
21978: PUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: LD_VAR 0 6
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: CALL_OW 47
21998: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21999: LD_OWVAR 42
22003: PUSH
22004: LD_INT 32
22006: PUSH
22007: LD_INT 33
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: IN
22014: IFFALSE 22030
// PlaceWeaponTurret ( b , weapon ) ;
22016: LD_VAR 0 8
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: CALL_OW 431
// end ;
22030: LD_VAR 0 7
22034: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22041: LD_ADDR_VAR 0 4
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_OWVAR 2
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 30
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PPUSH
22090: CALL_OW 69
22094: ST_TO_ADDR
// if not tmp then
22095: LD_VAR 0 4
22099: NOT
22100: IFFALSE 22104
// exit ;
22102: GO 22163
// for i in tmp do
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_VAR 0 4
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22161
// for j = 1 to 3 do
22117: LD_ADDR_VAR 0 3
22121: PUSH
22122: DOUBLE
22123: LD_INT 1
22125: DEC
22126: ST_TO_ADDR
22127: LD_INT 3
22129: PUSH
22130: FOR_TO
22131: IFFALSE 22157
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: CALL_OW 274
22142: PPUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: LD_INT 99999
22150: PPUSH
22151: CALL_OW 277
22155: GO 22130
22157: POP
22158: POP
22159: GO 22114
22161: POP
22162: POP
// end ;
22163: LD_VAR 0 1
22167: RET
// export function hHackSetLevel10 ; var i , j ; begin
22168: LD_INT 0
22170: PPUSH
22171: PPUSH
22172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 21
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22246
// if IsSelected ( i ) then
22196: LD_VAR 0 2
22200: PPUSH
22201: CALL_OW 306
22205: IFFALSE 22244
// begin for j := 1 to 4 do
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_INT 4
22219: PUSH
22220: FOR_TO
22221: IFFALSE 22242
// SetSkill ( i , j , 10 ) ;
22223: LD_VAR 0 2
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 10
22235: PPUSH
22236: CALL_OW 237
22240: GO 22220
22242: POP
22243: POP
// end ;
22244: GO 22193
22246: POP
22247: POP
// end ;
22248: LD_VAR 0 1
22252: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 21
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22336
// begin for j := 1 to 4 do
22297: LD_ADDR_VAR 0 3
22301: PUSH
22302: DOUBLE
22303: LD_INT 1
22305: DEC
22306: ST_TO_ADDR
22307: LD_INT 4
22309: PUSH
22310: FOR_TO
22311: IFFALSE 22332
// SetSkill ( i , j , 10 ) ;
22313: LD_VAR 0 2
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 10
22325: PPUSH
22326: CALL_OW 237
22330: GO 22310
22332: POP
22333: POP
// end ;
22334: GO 22294
22336: POP
22337: POP
// end ;
22338: LD_VAR 0 1
22342: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22343: LD_INT 0
22345: PPUSH
// uc_side := your_side ;
22346: LD_ADDR_OWVAR 20
22350: PUSH
22351: LD_OWVAR 2
22355: ST_TO_ADDR
// uc_nation := nation ;
22356: LD_ADDR_OWVAR 21
22360: PUSH
22361: LD_VAR 0 1
22365: ST_TO_ADDR
// InitHc ;
22366: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22370: LD_INT 0
22372: PPUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22387: LD_VAR 0 4
22391: PPUSH
22392: LD_VAR 0 5
22396: PPUSH
22397: CALL_OW 428
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22429
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22407: CALL_OW 44
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: LD_INT 1
22424: PPUSH
22425: CALL_OW 48
// end ;
22429: LD_VAR 0 6
22433: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
// uc_side := your_side ;
22438: LD_ADDR_OWVAR 20
22442: PUSH
22443: LD_OWVAR 2
22447: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 4
22464: PUSH
22465: LD_INT 5
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: IN
22475: IFFALSE 22487
// uc_nation := nation_american else
22477: LD_ADDR_OWVAR 21
22481: PUSH
22482: LD_INT 1
22484: ST_TO_ADDR
22485: GO 22530
// if chassis in [ 11 , 12 , 13 , 14 ] then
22487: LD_VAR 0 1
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 13
22500: PUSH
22501: LD_INT 14
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22522
// uc_nation := nation_arabian else
22512: LD_ADDR_OWVAR 21
22516: PUSH
22517: LD_INT 2
22519: ST_TO_ADDR
22520: GO 22530
// uc_nation := nation_russian ;
22522: LD_ADDR_OWVAR 21
22526: PUSH
22527: LD_INT 3
22529: ST_TO_ADDR
// vc_chassis := chassis ;
22530: LD_ADDR_OWVAR 37
22534: PUSH
22535: LD_VAR 0 1
22539: ST_TO_ADDR
// vc_engine := engine ;
22540: LD_ADDR_OWVAR 39
22544: PUSH
22545: LD_VAR 0 2
22549: ST_TO_ADDR
// vc_control := control ;
22550: LD_ADDR_OWVAR 38
22554: PUSH
22555: LD_VAR 0 3
22559: ST_TO_ADDR
// vc_weapon := weapon ;
22560: LD_ADDR_OWVAR 40
22564: PUSH
22565: LD_VAR 0 4
22569: ST_TO_ADDR
// un := CreateVehicle ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: CALL_OW 45
22579: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22580: LD_VAR 0 8
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: LD_INT 5
22590: PPUSH
22591: CALL_OW 12
22595: PPUSH
22596: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22600: LD_VAR 0 8
22604: PPUSH
22605: LD_VAR 0 5
22609: PPUSH
22610: LD_VAR 0 6
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: CALL_OW 48
// end ;
22622: LD_VAR 0 7
22626: RET
// export hInvincible ; every 1 do
22627: GO 22629
22629: DISABLE
// hInvincible := [ ] ;
22630: LD_ADDR_EXP 80
22634: PUSH
22635: EMPTY
22636: ST_TO_ADDR
22637: END
// every 10 do var i ;
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin enable ;
22644: ENABLE
// if not hInvincible then
22645: LD_EXP 80
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 22698
// for i in hInvincible do
22654: LD_ADDR_VAR 0 1
22658: PUSH
22659: LD_EXP 80
22663: PUSH
22664: FOR_IN
22665: IFFALSE 22696
// if GetLives ( i ) < 1000 then
22667: LD_VAR 0 1
22671: PPUSH
22672: CALL_OW 256
22676: PUSH
22677: LD_INT 1000
22679: LESS
22680: IFFALSE 22694
// SetLives ( i , 1000 ) ;
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_INT 1000
22689: PPUSH
22690: CALL_OW 234
22694: GO 22664
22696: POP
22697: POP
// end ;
22698: PPOPN 1
22700: END
// export function hHackInvincible ; var i ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 21
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 21
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22805
// if IsSelected ( i ) then
22746: LD_VAR 0 2
22750: PPUSH
22751: CALL_OW 306
22755: IFFALSE 22803
// begin if i in hInvincible then
22757: LD_VAR 0 2
22761: PUSH
22762: LD_EXP 80
22766: IN
22767: IFFALSE 22787
// hInvincible := hInvincible diff i else
22769: LD_ADDR_EXP 80
22773: PUSH
22774: LD_EXP 80
22778: PUSH
22779: LD_VAR 0 2
22783: DIFF
22784: ST_TO_ADDR
22785: GO 22803
// hInvincible := hInvincible union i ;
22787: LD_ADDR_EXP 80
22791: PUSH
22792: LD_EXP 80
22796: PUSH
22797: LD_VAR 0 2
22801: UNION
22802: ST_TO_ADDR
// end ;
22803: GO 22743
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 1
22811: RET
// export function hHackInvisible ; var i , j ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 21
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: PUSH
22837: FOR_IN
22838: IFFALSE 22862
// if IsSelected ( i ) then
22840: LD_VAR 0 2
22844: PPUSH
22845: CALL_OW 306
22849: IFFALSE 22860
// ComForceInvisible ( i ) ;
22851: LD_VAR 0 2
22855: PPUSH
22856: CALL_OW 496
22860: GO 22837
22862: POP
22863: POP
// end ;
22864: LD_VAR 0 1
22868: RET
// export function hHackChangeYourSide ; begin
22869: LD_INT 0
22871: PPUSH
// if your_side = 8 then
22872: LD_OWVAR 2
22876: PUSH
22877: LD_INT 8
22879: EQUAL
22880: IFFALSE 22892
// your_side := 0 else
22882: LD_ADDR_OWVAR 2
22886: PUSH
22887: LD_INT 0
22889: ST_TO_ADDR
22890: GO 22906
// your_side := your_side + 1 ;
22892: LD_ADDR_OWVAR 2
22896: PUSH
22897: LD_OWVAR 2
22901: PUSH
22902: LD_INT 1
22904: PLUS
22905: ST_TO_ADDR
// end ;
22906: LD_VAR 0 1
22910: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
22915: PPUSH
// for i in all_units do
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_OWVAR 3
22925: PUSH
22926: FOR_IN
22927: IFFALSE 23005
// if IsSelected ( i ) then
22929: LD_VAR 0 2
22933: PPUSH
22934: CALL_OW 306
22938: IFFALSE 23003
// begin j := GetSide ( i ) ;
22940: LD_ADDR_VAR 0 3
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 255
22954: ST_TO_ADDR
// if j = 8 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 8
22962: EQUAL
22963: IFFALSE 22975
// j := 0 else
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 0
22972: ST_TO_ADDR
22973: GO 22989
// j := j + 1 ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_VAR 0 3
22984: PUSH
22985: LD_INT 1
22987: PLUS
22988: ST_TO_ADDR
// SetSide ( i , j ) ;
22989: LD_VAR 0 2
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 235
// end ;
23003: GO 22926
23005: POP
23006: POP
// end ;
23007: LD_VAR 0 1
23011: RET
// export function hHackFog ; begin
23012: LD_INT 0
23014: PPUSH
// FogOff ( true ) ;
23015: LD_INT 1
23017: PPUSH
23018: CALL_OW 344
// end ;
23022: LD_VAR 0 1
23026: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23027: LD_INT 0
23029: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: LD_INT 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 483
// CenterOnXY ( x , y ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 84
// end ; end_of_file end_of_file
23069: LD_VAR 0 4
23073: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23074: LD_INT 0
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 264
23089: PUSH
23090: LD_EXP 95
23094: EQUAL
23095: IFFALSE 23167
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23097: LD_INT 68
23099: PPUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 255
23109: PPUSH
23110: CALL_OW 321
23114: PUSH
23115: LD_INT 2
23117: EQUAL
23118: IFFALSE 23130
// eff := 70 else
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_INT 70
23127: ST_TO_ADDR
23128: GO 23138
// eff := 30 ;
23130: LD_ADDR_VAR 0 4
23134: PUSH
23135: LD_INT 30
23137: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 250
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 251
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 495
// end ; end ;
23167: LD_VAR 0 2
23171: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23172: LD_INT 0
23174: PPUSH
// end ;
23175: LD_VAR 0 4
23179: RET
// export function SOS_Command ( cmd ) ; begin
23180: LD_INT 0
23182: PPUSH
// end ;
23183: LD_VAR 0 2
23187: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23188: LD_INT 0
23190: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23191: LD_VAR 0 1
23195: PUSH
23196: LD_INT 250
23198: EQUAL
23199: PUSH
23200: LD_VAR 0 2
23204: PPUSH
23205: CALL_OW 264
23209: PUSH
23210: LD_EXP 98
23214: EQUAL
23215: AND
23216: IFFALSE 23237
// MinerPlaceMine ( unit , x , y ) ;
23218: LD_VAR 0 2
23222: PPUSH
23223: LD_VAR 0 4
23227: PPUSH
23228: LD_VAR 0 5
23232: PPUSH
23233: CALL 25578 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23237: LD_VAR 0 1
23241: PUSH
23242: LD_INT 251
23244: EQUAL
23245: PUSH
23246: LD_VAR 0 2
23250: PPUSH
23251: CALL_OW 264
23255: PUSH
23256: LD_EXP 98
23260: EQUAL
23261: AND
23262: IFFALSE 23283
// MinerDetonateMine ( unit , x , y ) ;
23264: LD_VAR 0 2
23268: PPUSH
23269: LD_VAR 0 4
23273: PPUSH
23274: LD_VAR 0 5
23278: PPUSH
23279: CALL 25855 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23283: LD_VAR 0 1
23287: PUSH
23288: LD_INT 252
23290: EQUAL
23291: PUSH
23292: LD_VAR 0 2
23296: PPUSH
23297: CALL_OW 264
23301: PUSH
23302: LD_EXP 98
23306: EQUAL
23307: AND
23308: IFFALSE 23329
// MinerCreateMinefield ( unit , x , y ) ;
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_VAR 0 4
23319: PPUSH
23320: LD_VAR 0 5
23324: PPUSH
23325: CALL 26272 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23329: LD_VAR 0 1
23333: PUSH
23334: LD_INT 253
23336: EQUAL
23337: PUSH
23338: LD_VAR 0 2
23342: PPUSH
23343: CALL_OW 257
23347: PUSH
23348: LD_INT 5
23350: EQUAL
23351: AND
23352: IFFALSE 23373
// ComBinocular ( unit , x , y ) ;
23354: LD_VAR 0 2
23358: PPUSH
23359: LD_VAR 0 4
23363: PPUSH
23364: LD_VAR 0 5
23368: PPUSH
23369: CALL 26643 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 254
23380: EQUAL
23381: PUSH
23382: LD_VAR 0 2
23386: PPUSH
23387: CALL_OW 264
23391: PUSH
23392: LD_EXP 93
23396: EQUAL
23397: AND
23398: PUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: CALL_OW 263
23408: PUSH
23409: LD_INT 3
23411: EQUAL
23412: AND
23413: IFFALSE 23429
// HackDestroyVehicle ( unit , selectedUnit ) ;
23415: LD_VAR 0 2
23419: PPUSH
23420: LD_VAR 0 3
23424: PPUSH
23425: CALL 24938 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23429: LD_VAR 0 1
23433: PUSH
23434: LD_INT 255
23436: EQUAL
23437: PUSH
23438: LD_VAR 0 2
23442: PPUSH
23443: CALL_OW 264
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: LD_INT 53
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: IN
23458: AND
23459: PUSH
23460: LD_VAR 0 4
23464: PPUSH
23465: LD_VAR 0 5
23469: PPUSH
23470: CALL_OW 488
23474: AND
23475: IFFALSE 23499
// CutTreeXYR ( unit , x , y , 12 ) ;
23477: LD_VAR 0 2
23481: PPUSH
23482: LD_VAR 0 4
23486: PPUSH
23487: LD_VAR 0 5
23491: PPUSH
23492: LD_INT 12
23494: PPUSH
23495: CALL 23504 0 4
// end ;
23499: LD_VAR 0 6
23503: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
23510: PPUSH
23511: PPUSH
23512: PPUSH
23513: PPUSH
23514: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23515: LD_VAR 0 1
23519: NOT
23520: PUSH
23521: LD_VAR 0 2
23525: PPUSH
23526: LD_VAR 0 3
23530: PPUSH
23531: CALL_OW 488
23535: NOT
23536: OR
23537: PUSH
23538: LD_VAR 0 4
23542: NOT
23543: OR
23544: IFFALSE 23548
// exit ;
23546: GO 23888
// list := [ ] ;
23548: LD_ADDR_VAR 0 13
23552: PUSH
23553: EMPTY
23554: ST_TO_ADDR
// if x - r < 0 then
23555: LD_VAR 0 2
23559: PUSH
23560: LD_VAR 0 4
23564: MINUS
23565: PUSH
23566: LD_INT 0
23568: LESS
23569: IFFALSE 23581
// min_x := 0 else
23571: LD_ADDR_VAR 0 7
23575: PUSH
23576: LD_INT 0
23578: ST_TO_ADDR
23579: GO 23597
// min_x := x - r ;
23581: LD_ADDR_VAR 0 7
23585: PUSH
23586: LD_VAR 0 2
23590: PUSH
23591: LD_VAR 0 4
23595: MINUS
23596: ST_TO_ADDR
// if y - r < 0 then
23597: LD_VAR 0 3
23601: PUSH
23602: LD_VAR 0 4
23606: MINUS
23607: PUSH
23608: LD_INT 0
23610: LESS
23611: IFFALSE 23623
// min_y := 0 else
23613: LD_ADDR_VAR 0 8
23617: PUSH
23618: LD_INT 0
23620: ST_TO_ADDR
23621: GO 23639
// min_y := y - r ;
23623: LD_ADDR_VAR 0 8
23627: PUSH
23628: LD_VAR 0 3
23632: PUSH
23633: LD_VAR 0 4
23637: MINUS
23638: ST_TO_ADDR
// max_x := x + r ;
23639: LD_ADDR_VAR 0 9
23643: PUSH
23644: LD_VAR 0 2
23648: PUSH
23649: LD_VAR 0 4
23653: PLUS
23654: ST_TO_ADDR
// max_y := y + r ;
23655: LD_ADDR_VAR 0 10
23659: PUSH
23660: LD_VAR 0 3
23664: PUSH
23665: LD_VAR 0 4
23669: PLUS
23670: ST_TO_ADDR
// for _x = min_x to max_x do
23671: LD_ADDR_VAR 0 11
23675: PUSH
23676: DOUBLE
23677: LD_VAR 0 7
23681: DEC
23682: ST_TO_ADDR
23683: LD_VAR 0 9
23687: PUSH
23688: FOR_TO
23689: IFFALSE 23806
// for _y = min_y to max_y do
23691: LD_ADDR_VAR 0 12
23695: PUSH
23696: DOUBLE
23697: LD_VAR 0 8
23701: DEC
23702: ST_TO_ADDR
23703: LD_VAR 0 10
23707: PUSH
23708: FOR_TO
23709: IFFALSE 23802
// begin if not ValidHex ( _x , _y ) then
23711: LD_VAR 0 11
23715: PPUSH
23716: LD_VAR 0 12
23720: PPUSH
23721: CALL_OW 488
23725: NOT
23726: IFFALSE 23730
// continue ;
23728: GO 23708
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23730: LD_VAR 0 11
23734: PPUSH
23735: LD_VAR 0 12
23739: PPUSH
23740: CALL_OW 351
23744: PUSH
23745: LD_VAR 0 11
23749: PPUSH
23750: LD_VAR 0 12
23754: PPUSH
23755: CALL_OW 554
23759: AND
23760: IFFALSE 23800
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23762: LD_ADDR_VAR 0 13
23766: PUSH
23767: LD_VAR 0 13
23771: PPUSH
23772: LD_VAR 0 13
23776: PUSH
23777: LD_INT 1
23779: PLUS
23780: PPUSH
23781: LD_VAR 0 11
23785: PUSH
23786: LD_VAR 0 12
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 2
23799: ST_TO_ADDR
// end ;
23800: GO 23708
23802: POP
23803: POP
23804: GO 23688
23806: POP
23807: POP
// if not list then
23808: LD_VAR 0 13
23812: NOT
23813: IFFALSE 23817
// exit ;
23815: GO 23888
// for i in list do
23817: LD_ADDR_VAR 0 6
23821: PUSH
23822: LD_VAR 0 13
23826: PUSH
23827: FOR_IN
23828: IFFALSE 23886
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23830: LD_VAR 0 1
23834: PPUSH
23835: LD_STRING M
23837: PUSH
23838: LD_VAR 0 6
23842: PUSH
23843: LD_INT 1
23845: ARRAY
23846: PUSH
23847: LD_VAR 0 6
23851: PUSH
23852: LD_INT 2
23854: ARRAY
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: EMPTY
23878: LIST
23879: PPUSH
23880: CALL_OW 447
23884: GO 23827
23886: POP
23887: POP
// end ;
23888: LD_VAR 0 5
23892: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23893: LD_EXP 81
23897: NOT
23898: IFFALSE 23948
23900: GO 23902
23902: DISABLE
// begin initHack := true ;
23903: LD_ADDR_EXP 81
23907: PUSH
23908: LD_INT 1
23910: ST_TO_ADDR
// hackTanks := [ ] ;
23911: LD_ADDR_EXP 82
23915: PUSH
23916: EMPTY
23917: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23918: LD_ADDR_EXP 83
23922: PUSH
23923: EMPTY
23924: ST_TO_ADDR
// hackLimit := 3 ;
23925: LD_ADDR_EXP 84
23929: PUSH
23930: LD_INT 3
23932: ST_TO_ADDR
// hackDist := 12 ;
23933: LD_ADDR_EXP 85
23937: PUSH
23938: LD_INT 12
23940: ST_TO_ADDR
// hackCounter := [ ] ;
23941: LD_ADDR_EXP 86
23945: PUSH
23946: EMPTY
23947: ST_TO_ADDR
// end ;
23948: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23949: LD_EXP 81
23953: PUSH
23954: LD_INT 34
23956: PUSH
23957: LD_EXP 93
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: AND
23971: IFFALSE 24226
23973: GO 23975
23975: DISABLE
23976: LD_INT 0
23978: PPUSH
23979: PPUSH
// begin enable ;
23980: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23981: LD_ADDR_VAR 0 1
23985: PUSH
23986: LD_INT 34
23988: PUSH
23989: LD_EXP 93
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PPUSH
23998: CALL_OW 69
24002: PUSH
24003: FOR_IN
24004: IFFALSE 24224
// begin if not i in hackTanks then
24006: LD_VAR 0 1
24010: PUSH
24011: LD_EXP 82
24015: IN
24016: NOT
24017: IFFALSE 24100
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24019: LD_ADDR_EXP 82
24023: PUSH
24024: LD_EXP 82
24028: PPUSH
24029: LD_EXP 82
24033: PUSH
24034: LD_INT 1
24036: PLUS
24037: PPUSH
24038: LD_VAR 0 1
24042: PPUSH
24043: CALL_OW 1
24047: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24048: LD_ADDR_EXP 83
24052: PUSH
24053: LD_EXP 83
24057: PPUSH
24058: LD_EXP 83
24062: PUSH
24063: LD_INT 1
24065: PLUS
24066: PPUSH
24067: EMPTY
24068: PPUSH
24069: CALL_OW 1
24073: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24074: LD_ADDR_EXP 86
24078: PUSH
24079: LD_EXP 86
24083: PPUSH
24084: LD_EXP 86
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PPUSH
24093: EMPTY
24094: PPUSH
24095: CALL_OW 1
24099: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24100: LD_VAR 0 1
24104: PPUSH
24105: CALL_OW 302
24109: NOT
24110: IFFALSE 24123
// begin HackUnlinkAll ( i ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL 24229 0 1
// continue ;
24121: GO 24003
// end ; HackCheckCapturedStatus ( i ) ;
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL 24672 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24132: LD_ADDR_VAR 0 2
24136: PUSH
24137: LD_INT 81
24139: PUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 255
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 33
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 91
24166: PUSH
24167: LD_VAR 0 1
24171: PUSH
24172: LD_EXP 85
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 50
24184: PUSH
24185: EMPTY
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: PPUSH
24194: CALL_OW 69
24198: ST_TO_ADDR
// if not tmp then
24199: LD_VAR 0 2
24203: NOT
24204: IFFALSE 24208
// continue ;
24206: GO 24003
// HackLink ( i , tmp ) ;
24208: LD_VAR 0 1
24212: PPUSH
24213: LD_VAR 0 2
24217: PPUSH
24218: CALL 24365 0 2
// end ;
24222: GO 24003
24224: POP
24225: POP
// end ;
24226: PPOPN 2
24228: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
24233: PPUSH
// if not hack in hackTanks then
24234: LD_VAR 0 1
24238: PUSH
24239: LD_EXP 82
24243: IN
24244: NOT
24245: IFFALSE 24249
// exit ;
24247: GO 24360
// index := GetElementIndex ( hackTanks , hack ) ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_EXP 82
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL 31938 0 2
24268: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24269: LD_EXP 83
24273: PUSH
24274: LD_VAR 0 4
24278: ARRAY
24279: IFFALSE 24360
// begin for i in hackTanksCaptured [ index ] do
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_EXP 83
24290: PUSH
24291: LD_VAR 0 4
24295: ARRAY
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24324
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24300: LD_VAR 0 3
24304: PUSH
24305: LD_INT 1
24307: ARRAY
24308: PPUSH
24309: LD_VAR 0 3
24313: PUSH
24314: LD_INT 2
24316: ARRAY
24317: PPUSH
24318: CALL_OW 235
24322: GO 24297
24324: POP
24325: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24326: LD_ADDR_EXP 83
24330: PUSH
24331: LD_EXP 83
24335: PPUSH
24336: LD_VAR 0 4
24340: PPUSH
24341: EMPTY
24342: PPUSH
24343: CALL_OW 1
24347: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_INT 0
24355: PPUSH
24356: CALL_OW 505
// end ; end ;
24360: LD_VAR 0 2
24364: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24365: LD_INT 0
24367: PPUSH
24368: PPUSH
24369: PPUSH
// if not hack in hackTanks or not vehicles then
24370: LD_VAR 0 1
24374: PUSH
24375: LD_EXP 82
24379: IN
24380: NOT
24381: PUSH
24382: LD_VAR 0 2
24386: NOT
24387: OR
24388: IFFALSE 24392
// exit ;
24390: GO 24667
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24392: LD_ADDR_VAR 0 2
24396: PUSH
24397: LD_VAR 0 1
24401: PPUSH
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_INT 1
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL 32588 0 4
24417: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24418: LD_ADDR_VAR 0 5
24422: PUSH
24423: LD_EXP 82
24427: PPUSH
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL 31938 0 2
24437: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24438: LD_EXP 83
24442: PUSH
24443: LD_VAR 0 5
24447: ARRAY
24448: PUSH
24449: LD_EXP 84
24453: LESS
24454: IFFALSE 24643
// begin for i := 1 to vehicles do
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: DOUBLE
24462: LD_INT 1
24464: DEC
24465: ST_TO_ADDR
24466: LD_VAR 0 2
24470: PUSH
24471: FOR_TO
24472: IFFALSE 24641
// begin if hackTanksCaptured [ index ] = hackLimit then
24474: LD_EXP 83
24478: PUSH
24479: LD_VAR 0 5
24483: ARRAY
24484: PUSH
24485: LD_EXP 84
24489: EQUAL
24490: IFFALSE 24494
// break ;
24492: GO 24641
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24494: LD_ADDR_EXP 86
24498: PUSH
24499: LD_EXP 86
24503: PPUSH
24504: LD_VAR 0 5
24508: PPUSH
24509: LD_EXP 86
24513: PUSH
24514: LD_VAR 0 5
24518: ARRAY
24519: PUSH
24520: LD_INT 1
24522: PLUS
24523: PPUSH
24524: CALL_OW 1
24528: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24529: LD_ADDR_EXP 83
24533: PUSH
24534: LD_EXP 83
24538: PPUSH
24539: LD_VAR 0 5
24543: PUSH
24544: LD_EXP 83
24548: PUSH
24549: LD_VAR 0 5
24553: ARRAY
24554: PUSH
24555: LD_INT 1
24557: PLUS
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PPUSH
24563: LD_VAR 0 2
24567: PUSH
24568: LD_VAR 0 4
24572: ARRAY
24573: PUSH
24574: LD_VAR 0 2
24578: PUSH
24579: LD_VAR 0 4
24583: ARRAY
24584: PPUSH
24585: CALL_OW 255
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PPUSH
24594: CALL 32153 0 3
24598: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24599: LD_VAR 0 2
24603: PUSH
24604: LD_VAR 0 4
24608: ARRAY
24609: PPUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 255
24619: PPUSH
24620: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24624: LD_VAR 0 2
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PPUSH
24635: CALL_OW 141
// end ;
24639: GO 24471
24641: POP
24642: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24643: LD_VAR 0 1
24647: PPUSH
24648: LD_EXP 83
24652: PUSH
24653: LD_VAR 0 5
24657: ARRAY
24658: PUSH
24659: LD_INT 0
24661: PLUS
24662: PPUSH
24663: CALL_OW 505
// end ;
24667: LD_VAR 0 3
24671: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24672: LD_INT 0
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
// if not hack in hackTanks then
24678: LD_VAR 0 1
24682: PUSH
24683: LD_EXP 82
24687: IN
24688: NOT
24689: IFFALSE 24693
// exit ;
24691: GO 24933
// index := GetElementIndex ( hackTanks , hack ) ;
24693: LD_ADDR_VAR 0 4
24697: PUSH
24698: LD_EXP 82
24702: PPUSH
24703: LD_VAR 0 1
24707: PPUSH
24708: CALL 31938 0 2
24712: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: DOUBLE
24719: LD_EXP 83
24723: PUSH
24724: LD_VAR 0 4
24728: ARRAY
24729: INC
24730: ST_TO_ADDR
24731: LD_INT 1
24733: PUSH
24734: FOR_DOWNTO
24735: IFFALSE 24907
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24737: LD_ADDR_VAR 0 5
24741: PUSH
24742: LD_EXP 83
24746: PUSH
24747: LD_VAR 0 4
24751: ARRAY
24752: PUSH
24753: LD_VAR 0 3
24757: ARRAY
24758: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24759: LD_VAR 0 5
24763: PUSH
24764: LD_INT 1
24766: ARRAY
24767: PPUSH
24768: CALL_OW 302
24772: NOT
24773: PUSH
24774: LD_VAR 0 5
24778: PUSH
24779: LD_INT 1
24781: ARRAY
24782: PPUSH
24783: CALL_OW 255
24787: PUSH
24788: LD_VAR 0 1
24792: PPUSH
24793: CALL_OW 255
24797: NONEQUAL
24798: OR
24799: IFFALSE 24905
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24801: LD_VAR 0 5
24805: PUSH
24806: LD_INT 1
24808: ARRAY
24809: PPUSH
24810: CALL_OW 305
24814: PUSH
24815: LD_VAR 0 5
24819: PUSH
24820: LD_INT 1
24822: ARRAY
24823: PPUSH
24824: CALL_OW 255
24828: PUSH
24829: LD_VAR 0 1
24833: PPUSH
24834: CALL_OW 255
24838: EQUAL
24839: AND
24840: IFFALSE 24864
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24842: LD_VAR 0 5
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PPUSH
24851: LD_VAR 0 5
24855: PUSH
24856: LD_INT 2
24858: ARRAY
24859: PPUSH
24860: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24864: LD_ADDR_EXP 83
24868: PUSH
24869: LD_EXP 83
24873: PPUSH
24874: LD_VAR 0 4
24878: PPUSH
24879: LD_EXP 83
24883: PUSH
24884: LD_VAR 0 4
24888: ARRAY
24889: PPUSH
24890: LD_VAR 0 3
24894: PPUSH
24895: CALL_OW 3
24899: PPUSH
24900: CALL_OW 1
24904: ST_TO_ADDR
// end ; end ;
24905: GO 24734
24907: POP
24908: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24909: LD_VAR 0 1
24913: PPUSH
24914: LD_EXP 83
24918: PUSH
24919: LD_VAR 0 4
24923: ARRAY
24924: PUSH
24925: LD_INT 0
24927: PLUS
24928: PPUSH
24929: CALL_OW 505
// end ;
24933: LD_VAR 0 2
24937: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24938: LD_INT 0
24940: PPUSH
24941: PPUSH
24942: PPUSH
24943: PPUSH
// if not hack in hackTanks then
24944: LD_VAR 0 1
24948: PUSH
24949: LD_EXP 82
24953: IN
24954: NOT
24955: IFFALSE 24959
// exit ;
24957: GO 25044
// index := GetElementIndex ( hackTanks , hack ) ;
24959: LD_ADDR_VAR 0 5
24963: PUSH
24964: LD_EXP 82
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL 31938 0 2
24978: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24979: LD_ADDR_VAR 0 4
24983: PUSH
24984: DOUBLE
24985: LD_INT 1
24987: DEC
24988: ST_TO_ADDR
24989: LD_EXP 83
24993: PUSH
24994: LD_VAR 0 5
24998: ARRAY
24999: PUSH
25000: FOR_TO
25001: IFFALSE 25042
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25003: LD_EXP 83
25007: PUSH
25008: LD_VAR 0 5
25012: ARRAY
25013: PUSH
25014: LD_VAR 0 4
25018: ARRAY
25019: PUSH
25020: LD_INT 1
25022: ARRAY
25023: PUSH
25024: LD_VAR 0 2
25028: EQUAL
25029: IFFALSE 25040
// KillUnit ( vehicle ) ;
25031: LD_VAR 0 2
25035: PPUSH
25036: CALL_OW 66
25040: GO 25000
25042: POP
25043: POP
// end ;
25044: LD_VAR 0 3
25048: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25049: LD_EXP 87
25053: NOT
25054: IFFALSE 25089
25056: GO 25058
25058: DISABLE
// begin initMiner := true ;
25059: LD_ADDR_EXP 87
25063: PUSH
25064: LD_INT 1
25066: ST_TO_ADDR
// minersList := [ ] ;
25067: LD_ADDR_EXP 88
25071: PUSH
25072: EMPTY
25073: ST_TO_ADDR
// minerMinesList := [ ] ;
25074: LD_ADDR_EXP 89
25078: PUSH
25079: EMPTY
25080: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25081: LD_ADDR_EXP 90
25085: PUSH
25086: LD_INT 5
25088: ST_TO_ADDR
// end ;
25089: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25090: LD_EXP 87
25094: PUSH
25095: LD_INT 34
25097: PUSH
25098: LD_EXP 98
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PPUSH
25107: CALL_OW 69
25111: AND
25112: IFFALSE 25575
25114: GO 25116
25116: DISABLE
25117: LD_INT 0
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
// begin enable ;
25123: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_INT 34
25131: PUSH
25132: LD_EXP 98
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: PUSH
25146: FOR_IN
25147: IFFALSE 25219
// begin if not i in minersList then
25149: LD_VAR 0 1
25153: PUSH
25154: LD_EXP 88
25158: IN
25159: NOT
25160: IFFALSE 25217
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25162: LD_ADDR_EXP 88
25166: PUSH
25167: LD_EXP 88
25171: PPUSH
25172: LD_EXP 88
25176: PUSH
25177: LD_INT 1
25179: PLUS
25180: PPUSH
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 1
25190: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25191: LD_ADDR_EXP 89
25195: PUSH
25196: LD_EXP 89
25200: PPUSH
25201: LD_EXP 89
25205: PUSH
25206: LD_INT 1
25208: PLUS
25209: PPUSH
25210: EMPTY
25211: PPUSH
25212: CALL_OW 1
25216: ST_TO_ADDR
// end end ;
25217: GO 25146
25219: POP
25220: POP
// for i := minerMinesList downto 1 do
25221: LD_ADDR_VAR 0 1
25225: PUSH
25226: DOUBLE
25227: LD_EXP 89
25231: INC
25232: ST_TO_ADDR
25233: LD_INT 1
25235: PUSH
25236: FOR_DOWNTO
25237: IFFALSE 25573
// begin if IsLive ( minersList [ i ] ) then
25239: LD_EXP 88
25243: PUSH
25244: LD_VAR 0 1
25248: ARRAY
25249: PPUSH
25250: CALL_OW 300
25254: IFFALSE 25282
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25256: LD_EXP 88
25260: PUSH
25261: LD_VAR 0 1
25265: ARRAY
25266: PPUSH
25267: LD_EXP 89
25271: PUSH
25272: LD_VAR 0 1
25276: ARRAY
25277: PPUSH
25278: CALL_OW 505
// if not minerMinesList [ i ] then
25282: LD_EXP 89
25286: PUSH
25287: LD_VAR 0 1
25291: ARRAY
25292: NOT
25293: IFFALSE 25297
// continue ;
25295: GO 25236
// for j := minerMinesList [ i ] downto 1 do
25297: LD_ADDR_VAR 0 2
25301: PUSH
25302: DOUBLE
25303: LD_EXP 89
25307: PUSH
25308: LD_VAR 0 1
25312: ARRAY
25313: INC
25314: ST_TO_ADDR
25315: LD_INT 1
25317: PUSH
25318: FOR_DOWNTO
25319: IFFALSE 25569
// begin side := GetSide ( minersList [ i ] ) ;
25321: LD_ADDR_VAR 0 3
25325: PUSH
25326: LD_EXP 88
25330: PUSH
25331: LD_VAR 0 1
25335: ARRAY
25336: PPUSH
25337: CALL_OW 255
25341: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25342: LD_ADDR_VAR 0 4
25346: PUSH
25347: LD_EXP 89
25351: PUSH
25352: LD_VAR 0 1
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 2
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: LD_EXP 89
25372: PUSH
25373: LD_VAR 0 1
25377: ARRAY
25378: PUSH
25379: LD_VAR 0 2
25383: ARRAY
25384: PUSH
25385: LD_INT 2
25387: ARRAY
25388: PPUSH
25389: CALL_OW 428
25393: ST_TO_ADDR
// if not tmp then
25394: LD_VAR 0 4
25398: NOT
25399: IFFALSE 25403
// continue ;
25401: GO 25318
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25403: LD_VAR 0 4
25407: PUSH
25408: LD_INT 81
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: CALL_OW 69
25424: IN
25425: PUSH
25426: LD_EXP 89
25430: PUSH
25431: LD_VAR 0 1
25435: ARRAY
25436: PUSH
25437: LD_VAR 0 2
25441: ARRAY
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: LD_EXP 89
25451: PUSH
25452: LD_VAR 0 1
25456: ARRAY
25457: PUSH
25458: LD_VAR 0 2
25462: ARRAY
25463: PUSH
25464: LD_INT 2
25466: ARRAY
25467: PPUSH
25468: CALL_OW 458
25472: AND
25473: IFFALSE 25567
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25475: LD_EXP 89
25479: PUSH
25480: LD_VAR 0 1
25484: ARRAY
25485: PUSH
25486: LD_VAR 0 2
25490: ARRAY
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: LD_EXP 89
25500: PUSH
25501: LD_VAR 0 1
25505: ARRAY
25506: PUSH
25507: LD_VAR 0 2
25511: ARRAY
25512: PUSH
25513: LD_INT 2
25515: ARRAY
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25526: LD_ADDR_EXP 89
25530: PUSH
25531: LD_EXP 89
25535: PPUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_EXP 89
25545: PUSH
25546: LD_VAR 0 1
25550: ARRAY
25551: PPUSH
25552: LD_VAR 0 2
25556: PPUSH
25557: CALL_OW 3
25561: PPUSH
25562: CALL_OW 1
25566: ST_TO_ADDR
// end ; end ;
25567: GO 25318
25569: POP
25570: POP
// end ;
25571: GO 25236
25573: POP
25574: POP
// end ;
25575: PPOPN 4
25577: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
// result := false ;
25582: LD_ADDR_VAR 0 4
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 264
25599: PUSH
25600: LD_EXP 98
25604: EQUAL
25605: NOT
25606: IFFALSE 25610
// exit ;
25608: GO 25850
// index := GetElementIndex ( minersList , unit ) ;
25610: LD_ADDR_VAR 0 5
25614: PUSH
25615: LD_EXP 88
25619: PPUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL 31938 0 2
25629: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25630: LD_EXP 89
25634: PUSH
25635: LD_VAR 0 5
25639: ARRAY
25640: PUSH
25641: LD_EXP 90
25645: GREATEREQUAL
25646: IFFALSE 25650
// exit ;
25648: GO 25850
// ComMoveXY ( unit , x , y ) ;
25650: LD_VAR 0 1
25654: PPUSH
25655: LD_VAR 0 2
25659: PPUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25669: LD_INT 35
25671: PPUSH
25672: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25676: LD_VAR 0 1
25680: PPUSH
25681: LD_VAR 0 2
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: CALL 62002 0 3
25695: NOT
25696: PUSH
25697: LD_VAR 0 1
25701: PPUSH
25702: CALL_OW 314
25706: AND
25707: IFFALSE 25711
// exit ;
25709: GO 25850
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_VAR 0 3
25720: PPUSH
25721: CALL_OW 428
25725: PUSH
25726: LD_VAR 0 1
25730: EQUAL
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 314
25741: NOT
25742: AND
25743: IFFALSE 25669
// PlaySoundXY ( x , y , PlantMine ) ;
25745: LD_VAR 0 2
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: LD_STRING PlantMine
25757: PPUSH
25758: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: LD_VAR 0 3
25771: PPUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 255
25781: PPUSH
25782: LD_INT 0
25784: PPUSH
25785: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25789: LD_ADDR_EXP 89
25793: PUSH
25794: LD_EXP 89
25798: PPUSH
25799: LD_VAR 0 5
25803: PUSH
25804: LD_EXP 89
25808: PUSH
25809: LD_VAR 0 5
25813: ARRAY
25814: PUSH
25815: LD_INT 1
25817: PLUS
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PPUSH
25823: LD_VAR 0 2
25827: PUSH
25828: LD_VAR 0 3
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL 32153 0 3
25841: ST_TO_ADDR
// result := true ;
25842: LD_ADDR_VAR 0 4
25846: PUSH
25847: LD_INT 1
25849: ST_TO_ADDR
// end ;
25850: LD_VAR 0 4
25854: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25855: LD_INT 0
25857: PPUSH
25858: PPUSH
25859: PPUSH
// if not unit in minersList then
25860: LD_VAR 0 1
25864: PUSH
25865: LD_EXP 88
25869: IN
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 26267
// index := GetElementIndex ( minersList , unit ) ;
25875: LD_ADDR_VAR 0 6
25879: PUSH
25880: LD_EXP 88
25884: PPUSH
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL 31938 0 2
25894: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25895: LD_ADDR_VAR 0 5
25899: PUSH
25900: DOUBLE
25901: LD_EXP 89
25905: PUSH
25906: LD_VAR 0 6
25910: ARRAY
25911: INC
25912: ST_TO_ADDR
25913: LD_INT 1
25915: PUSH
25916: FOR_DOWNTO
25917: IFFALSE 26078
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25919: LD_EXP 89
25923: PUSH
25924: LD_VAR 0 6
25928: ARRAY
25929: PUSH
25930: LD_VAR 0 5
25934: ARRAY
25935: PUSH
25936: LD_INT 1
25938: ARRAY
25939: PUSH
25940: LD_VAR 0 2
25944: EQUAL
25945: PUSH
25946: LD_EXP 89
25950: PUSH
25951: LD_VAR 0 6
25955: ARRAY
25956: PUSH
25957: LD_VAR 0 5
25961: ARRAY
25962: PUSH
25963: LD_INT 2
25965: ARRAY
25966: PUSH
25967: LD_VAR 0 3
25971: EQUAL
25972: AND
25973: IFFALSE 26076
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25975: LD_EXP 89
25979: PUSH
25980: LD_VAR 0 6
25984: ARRAY
25985: PUSH
25986: LD_VAR 0 5
25990: ARRAY
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: PPUSH
25996: LD_EXP 89
26000: PUSH
26001: LD_VAR 0 6
26005: ARRAY
26006: PUSH
26007: LD_VAR 0 5
26011: ARRAY
26012: PUSH
26013: LD_INT 2
26015: ARRAY
26016: PPUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 255
26026: PPUSH
26027: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26031: LD_ADDR_EXP 89
26035: PUSH
26036: LD_EXP 89
26040: PPUSH
26041: LD_VAR 0 6
26045: PPUSH
26046: LD_EXP 89
26050: PUSH
26051: LD_VAR 0 6
26055: ARRAY
26056: PPUSH
26057: LD_VAR 0 5
26061: PPUSH
26062: CALL_OW 3
26066: PPUSH
26067: CALL_OW 1
26071: ST_TO_ADDR
// exit ;
26072: POP
26073: POP
26074: GO 26267
// end ; end ;
26076: GO 25916
26078: POP
26079: POP
// for i := minerMinesList [ index ] downto 1 do
26080: LD_ADDR_VAR 0 5
26084: PUSH
26085: DOUBLE
26086: LD_EXP 89
26090: PUSH
26091: LD_VAR 0 6
26095: ARRAY
26096: INC
26097: ST_TO_ADDR
26098: LD_INT 1
26100: PUSH
26101: FOR_DOWNTO
26102: IFFALSE 26265
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26104: LD_EXP 89
26108: PUSH
26109: LD_VAR 0 6
26113: ARRAY
26114: PUSH
26115: LD_VAR 0 5
26119: ARRAY
26120: PUSH
26121: LD_INT 1
26123: ARRAY
26124: PPUSH
26125: LD_EXP 89
26129: PUSH
26130: LD_VAR 0 6
26134: ARRAY
26135: PUSH
26136: LD_VAR 0 5
26140: ARRAY
26141: PUSH
26142: LD_INT 2
26144: ARRAY
26145: PPUSH
26146: LD_VAR 0 2
26150: PPUSH
26151: LD_VAR 0 3
26155: PPUSH
26156: CALL_OW 298
26160: PUSH
26161: LD_INT 6
26163: LESS
26164: IFFALSE 26263
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26166: LD_EXP 89
26170: PUSH
26171: LD_VAR 0 6
26175: ARRAY
26176: PUSH
26177: LD_VAR 0 5
26181: ARRAY
26182: PUSH
26183: LD_INT 1
26185: ARRAY
26186: PPUSH
26187: LD_EXP 89
26191: PUSH
26192: LD_VAR 0 6
26196: ARRAY
26197: PUSH
26198: LD_VAR 0 5
26202: ARRAY
26203: PUSH
26204: LD_INT 2
26206: ARRAY
26207: PPUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 255
26217: PPUSH
26218: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26222: LD_ADDR_EXP 89
26226: PUSH
26227: LD_EXP 89
26231: PPUSH
26232: LD_VAR 0 6
26236: PPUSH
26237: LD_EXP 89
26241: PUSH
26242: LD_VAR 0 6
26246: ARRAY
26247: PPUSH
26248: LD_VAR 0 5
26252: PPUSH
26253: CALL_OW 3
26257: PPUSH
26258: CALL_OW 1
26262: ST_TO_ADDR
// end ; end ;
26263: GO 26101
26265: POP
26266: POP
// end ;
26267: LD_VAR 0 4
26271: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 264
26292: PUSH
26293: LD_EXP 98
26297: EQUAL
26298: NOT
26299: PUSH
26300: LD_VAR 0 1
26304: PUSH
26305: LD_EXP 88
26309: IN
26310: NOT
26311: OR
26312: IFFALSE 26316
// exit ;
26314: GO 26638
// index := GetElementIndex ( minersList , unit ) ;
26316: LD_ADDR_VAR 0 6
26320: PUSH
26321: LD_EXP 88
26325: PPUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL 31938 0 2
26335: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26336: LD_ADDR_VAR 0 8
26340: PUSH
26341: LD_EXP 90
26345: PUSH
26346: LD_EXP 89
26350: PUSH
26351: LD_VAR 0 6
26355: ARRAY
26356: MINUS
26357: ST_TO_ADDR
// if not minesFreeAmount then
26358: LD_VAR 0 8
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26638
// tmp := [ ] ;
26367: LD_ADDR_VAR 0 7
26371: PUSH
26372: EMPTY
26373: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26374: LD_ADDR_VAR 0 5
26378: PUSH
26379: DOUBLE
26380: LD_INT 1
26382: DEC
26383: ST_TO_ADDR
26384: LD_VAR 0 8
26388: PUSH
26389: FOR_TO
26390: IFFALSE 26585
// begin _d := rand ( 0 , 5 ) ;
26392: LD_ADDR_VAR 0 11
26396: PUSH
26397: LD_INT 0
26399: PPUSH
26400: LD_INT 5
26402: PPUSH
26403: CALL_OW 12
26407: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26408: LD_ADDR_VAR 0 12
26412: PUSH
26413: LD_INT 2
26415: PPUSH
26416: LD_INT 6
26418: PPUSH
26419: CALL_OW 12
26423: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26424: LD_ADDR_VAR 0 9
26428: PUSH
26429: LD_VAR 0 2
26433: PPUSH
26434: LD_VAR 0 11
26438: PPUSH
26439: LD_VAR 0 12
26443: PPUSH
26444: CALL_OW 272
26448: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26449: LD_ADDR_VAR 0 10
26453: PUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: LD_VAR 0 11
26463: PPUSH
26464: LD_VAR 0 12
26468: PPUSH
26469: CALL_OW 273
26473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26474: LD_VAR 0 9
26478: PPUSH
26479: LD_VAR 0 10
26483: PPUSH
26484: CALL_OW 488
26488: PUSH
26489: LD_VAR 0 9
26493: PUSH
26494: LD_VAR 0 10
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_VAR 0 7
26507: IN
26508: NOT
26509: AND
26510: PUSH
26511: LD_VAR 0 9
26515: PPUSH
26516: LD_VAR 0 10
26520: PPUSH
26521: CALL_OW 458
26525: NOT
26526: AND
26527: IFFALSE 26569
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26529: LD_ADDR_VAR 0 7
26533: PUSH
26534: LD_VAR 0 7
26538: PPUSH
26539: LD_VAR 0 7
26543: PUSH
26544: LD_INT 1
26546: PLUS
26547: PPUSH
26548: LD_VAR 0 9
26552: PUSH
26553: LD_VAR 0 10
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PPUSH
26562: CALL_OW 1
26566: ST_TO_ADDR
26567: GO 26583
// i := i - 1 ;
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_VAR 0 5
26578: PUSH
26579: LD_INT 1
26581: MINUS
26582: ST_TO_ADDR
// end ;
26583: GO 26389
26585: POP
26586: POP
// for i in tmp do
26587: LD_ADDR_VAR 0 5
26591: PUSH
26592: LD_VAR 0 7
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26636
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26600: LD_VAR 0 1
26604: PPUSH
26605: LD_VAR 0 5
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 5
26618: PUSH
26619: LD_INT 2
26621: ARRAY
26622: PPUSH
26623: CALL 25578 0 3
26627: NOT
26628: IFFALSE 26634
// exit ;
26630: POP
26631: POP
26632: GO 26638
26634: GO 26597
26636: POP
26637: POP
// end ;
26638: LD_VAR 0 4
26642: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
// if not GetClass ( unit ) = class_sniper then
26652: LD_VAR 0 1
26656: PPUSH
26657: CALL_OW 257
26661: PUSH
26662: LD_INT 5
26664: EQUAL
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 27058
// dist := 8 ;
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: LD_INT 8
26677: ST_TO_ADDR
// viewRange := 12 ;
26678: LD_ADDR_VAR 0 7
26682: PUSH
26683: LD_INT 12
26685: ST_TO_ADDR
// side := GetSide ( unit ) ;
26686: LD_ADDR_VAR 0 6
26690: PUSH
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 255
26700: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26701: LD_INT 61
26703: PPUSH
26704: LD_VAR 0 6
26708: PPUSH
26709: CALL_OW 321
26713: PUSH
26714: LD_INT 2
26716: EQUAL
26717: IFFALSE 26727
// viewRange := 16 ;
26719: LD_ADDR_VAR 0 7
26723: PUSH
26724: LD_INT 16
26726: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26727: LD_VAR 0 1
26731: PPUSH
26732: LD_VAR 0 2
26736: PPUSH
26737: LD_VAR 0 3
26741: PPUSH
26742: CALL_OW 297
26746: PUSH
26747: LD_VAR 0 5
26751: GREATER
26752: IFFALSE 26831
// begin ComMoveXY ( unit , x , y ) ;
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: LD_VAR 0 3
26768: PPUSH
26769: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26773: LD_INT 35
26775: PPUSH
26776: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_VAR 0 2
26789: PPUSH
26790: LD_VAR 0 3
26794: PPUSH
26795: CALL 62002 0 3
26799: NOT
26800: IFFALSE 26804
// exit ;
26802: GO 27058
// until GetDistUnitXY ( unit , x , y ) < dist ;
26804: LD_VAR 0 1
26808: PPUSH
26809: LD_VAR 0 2
26813: PPUSH
26814: LD_VAR 0 3
26818: PPUSH
26819: CALL_OW 297
26823: PUSH
26824: LD_VAR 0 5
26828: LESS
26829: IFFALSE 26773
// end ; ComTurnXY ( unit , x , y ) ;
26831: LD_VAR 0 1
26835: PPUSH
26836: LD_VAR 0 2
26840: PPUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 118
// wait ( 5 ) ;
26850: LD_INT 5
26852: PPUSH
26853: CALL_OW 67
// _d := GetDir ( unit ) ;
26857: LD_ADDR_VAR 0 10
26861: PUSH
26862: LD_VAR 0 1
26866: PPUSH
26867: CALL_OW 254
26871: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26872: LD_ADDR_VAR 0 8
26876: PUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 250
26886: PPUSH
26887: LD_VAR 0 10
26891: PPUSH
26892: LD_VAR 0 5
26896: PPUSH
26897: CALL_OW 272
26901: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26902: LD_ADDR_VAR 0 9
26906: PUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 251
26916: PPUSH
26917: LD_VAR 0 10
26921: PPUSH
26922: LD_VAR 0 5
26926: PPUSH
26927: CALL_OW 273
26931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26932: LD_VAR 0 8
26936: PPUSH
26937: LD_VAR 0 9
26941: PPUSH
26942: CALL_OW 488
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27058
// ComAnimCustom ( unit , 1 ) ;
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_INT 1
26958: PPUSH
26959: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26963: LD_VAR 0 8
26967: PPUSH
26968: LD_VAR 0 9
26972: PPUSH
26973: LD_VAR 0 6
26977: PPUSH
26978: LD_VAR 0 7
26982: PPUSH
26983: CALL_OW 330
// repeat wait ( 1 ) ;
26987: LD_INT 1
26989: PPUSH
26990: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 316
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 314
27013: OR
27014: PUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 302
27024: NOT
27025: OR
27026: PUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 301
27036: OR
27037: IFFALSE 26987
// RemoveSeeing ( _x , _y , side ) ;
27039: LD_VAR 0 8
27043: PPUSH
27044: LD_VAR 0 9
27048: PPUSH
27049: LD_VAR 0 6
27053: PPUSH
27054: CALL_OW 331
// end ; end_of_file
27058: LD_VAR 0 4
27062: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
27063: LD_INT 0
27065: PPUSH
// ar_miner := 81 ;
27066: LD_ADDR_EXP 98
27070: PUSH
27071: LD_INT 81
27073: ST_TO_ADDR
// ar_crane := 88 ;
27074: LD_ADDR_EXP 97
27078: PUSH
27079: LD_INT 88
27081: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27082: LD_ADDR_EXP 92
27086: PUSH
27087: LD_INT 89
27089: ST_TO_ADDR
// us_hack := 99 ;
27090: LD_ADDR_EXP 93
27094: PUSH
27095: LD_INT 99
27097: ST_TO_ADDR
// us_artillery := 97 ;
27098: LD_ADDR_EXP 94
27102: PUSH
27103: LD_INT 97
27105: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27106: LD_ADDR_EXP 95
27110: PUSH
27111: LD_INT 91
27113: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
27114: LD_ADDR_EXP 96
27118: PUSH
27119: LD_INT 92
27121: ST_TO_ADDR
// ru_radar := 98 ;
27122: LD_ADDR_EXP 91
27126: PUSH
27127: LD_INT 98
27129: ST_TO_ADDR
// tech_Artillery := 80 ;
27130: LD_ADDR_EXP 99
27134: PUSH
27135: LD_INT 80
27137: ST_TO_ADDR
// tech_RadMat := 81 ;
27138: LD_ADDR_EXP 100
27142: PUSH
27143: LD_INT 81
27145: ST_TO_ADDR
// tech_BasicTools := 82 ;
27146: LD_ADDR_EXP 101
27150: PUSH
27151: LD_INT 82
27153: ST_TO_ADDR
// tech_Cargo := 83 ;
27154: LD_ADDR_EXP 102
27158: PUSH
27159: LD_INT 83
27161: ST_TO_ADDR
// tech_Track := 84 ;
27162: LD_ADDR_EXP 103
27166: PUSH
27167: LD_INT 84
27169: ST_TO_ADDR
// tech_Crane := 85 ;
27170: LD_ADDR_EXP 104
27174: PUSH
27175: LD_INT 85
27177: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27178: LD_ADDR_EXP 105
27182: PUSH
27183: LD_INT 86
27185: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27186: LD_ADDR_EXP 106
27190: PUSH
27191: LD_INT 87
27193: ST_TO_ADDR
// end ;
27194: LD_VAR 0 1
27198: RET
// every 1 do
27199: GO 27201
27201: DISABLE
// InitGlobalVariables ; end_of_file
27202: CALL 27063 0 0
27206: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27207: LD_INT 0
27209: PPUSH
27210: PPUSH
// if exist_mode then
27211: LD_VAR 0 2
27215: IFFALSE 27240
// unit := CreateCharacter ( prefix & ident ) else
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_VAR 0 1
27231: STR
27232: PPUSH
27233: CALL_OW 34
27237: ST_TO_ADDR
27238: GO 27255
// unit := NewCharacter ( ident ) ;
27240: LD_ADDR_VAR 0 5
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 25
27254: ST_TO_ADDR
// result := unit ;
27255: LD_ADDR_VAR 0 4
27259: PUSH
27260: LD_VAR 0 5
27264: ST_TO_ADDR
// end ;
27265: LD_VAR 0 4
27269: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27270: LD_INT 0
27272: PPUSH
27273: PPUSH
// if not side or not nation then
27274: LD_VAR 0 1
27278: NOT
27279: PUSH
27280: LD_VAR 0 2
27284: NOT
27285: OR
27286: IFFALSE 27290
// exit ;
27288: GO 28054
// case nation of nation_american :
27290: LD_VAR 0 2
27294: PUSH
27295: LD_INT 1
27297: DOUBLE
27298: EQUAL
27299: IFTRUE 27303
27301: GO 27517
27303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27304: LD_ADDR_VAR 0 4
27308: PUSH
27309: LD_INT 35
27311: PUSH
27312: LD_INT 45
27314: PUSH
27315: LD_INT 46
27317: PUSH
27318: LD_INT 47
27320: PUSH
27321: LD_INT 82
27323: PUSH
27324: LD_INT 83
27326: PUSH
27327: LD_INT 84
27329: PUSH
27330: LD_INT 85
27332: PUSH
27333: LD_INT 86
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 6
27344: PUSH
27345: LD_INT 15
27347: PUSH
27348: LD_INT 16
27350: PUSH
27351: LD_INT 7
27353: PUSH
27354: LD_INT 12
27356: PUSH
27357: LD_INT 13
27359: PUSH
27360: LD_INT 10
27362: PUSH
27363: LD_INT 14
27365: PUSH
27366: LD_INT 20
27368: PUSH
27369: LD_INT 21
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_INT 25
27377: PUSH
27378: LD_INT 32
27380: PUSH
27381: LD_INT 27
27383: PUSH
27384: LD_INT 36
27386: PUSH
27387: LD_INT 69
27389: PUSH
27390: LD_INT 39
27392: PUSH
27393: LD_INT 34
27395: PUSH
27396: LD_INT 40
27398: PUSH
27399: LD_INT 48
27401: PUSH
27402: LD_INT 49
27404: PUSH
27405: LD_INT 50
27407: PUSH
27408: LD_INT 51
27410: PUSH
27411: LD_INT 52
27413: PUSH
27414: LD_INT 53
27416: PUSH
27417: LD_INT 54
27419: PUSH
27420: LD_INT 55
27422: PUSH
27423: LD_INT 56
27425: PUSH
27426: LD_INT 57
27428: PUSH
27429: LD_INT 58
27431: PUSH
27432: LD_INT 59
27434: PUSH
27435: LD_INT 60
27437: PUSH
27438: LD_INT 61
27440: PUSH
27441: LD_INT 62
27443: PUSH
27444: LD_INT 80
27446: PUSH
27447: LD_INT 82
27449: PUSH
27450: LD_INT 83
27452: PUSH
27453: LD_INT 84
27455: PUSH
27456: LD_INT 85
27458: PUSH
27459: LD_INT 86
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
27515: GO 27978
27517: LD_INT 2
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27525
27523: GO 27747
27525: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27526: LD_ADDR_VAR 0 4
27530: PUSH
27531: LD_INT 35
27533: PUSH
27534: LD_INT 45
27536: PUSH
27537: LD_INT 46
27539: PUSH
27540: LD_INT 47
27542: PUSH
27543: LD_INT 82
27545: PUSH
27546: LD_INT 83
27548: PUSH
27549: LD_INT 84
27551: PUSH
27552: LD_INT 85
27554: PUSH
27555: LD_INT 87
27557: PUSH
27558: LD_INT 70
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 11
27566: PUSH
27567: LD_INT 3
27569: PUSH
27570: LD_INT 4
27572: PUSH
27573: LD_INT 5
27575: PUSH
27576: LD_INT 6
27578: PUSH
27579: LD_INT 15
27581: PUSH
27582: LD_INT 18
27584: PUSH
27585: LD_INT 7
27587: PUSH
27588: LD_INT 17
27590: PUSH
27591: LD_INT 8
27593: PUSH
27594: LD_INT 20
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 22
27602: PUSH
27603: LD_INT 72
27605: PUSH
27606: LD_INT 26
27608: PUSH
27609: LD_INT 69
27611: PUSH
27612: LD_INT 39
27614: PUSH
27615: LD_INT 40
27617: PUSH
27618: LD_INT 41
27620: PUSH
27621: LD_INT 42
27623: PUSH
27624: LD_INT 43
27626: PUSH
27627: LD_INT 48
27629: PUSH
27630: LD_INT 49
27632: PUSH
27633: LD_INT 50
27635: PUSH
27636: LD_INT 51
27638: PUSH
27639: LD_INT 52
27641: PUSH
27642: LD_INT 53
27644: PUSH
27645: LD_INT 54
27647: PUSH
27648: LD_INT 55
27650: PUSH
27651: LD_INT 56
27653: PUSH
27654: LD_INT 60
27656: PUSH
27657: LD_INT 61
27659: PUSH
27660: LD_INT 62
27662: PUSH
27663: LD_INT 66
27665: PUSH
27666: LD_INT 67
27668: PUSH
27669: LD_INT 68
27671: PUSH
27672: LD_INT 81
27674: PUSH
27675: LD_INT 82
27677: PUSH
27678: LD_INT 83
27680: PUSH
27681: LD_INT 84
27683: PUSH
27684: LD_INT 85
27686: PUSH
27687: LD_INT 87
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: ST_TO_ADDR
27745: GO 27978
27747: LD_INT 3
27749: DOUBLE
27750: EQUAL
27751: IFTRUE 27755
27753: GO 27977
27755: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27756: LD_ADDR_VAR 0 4
27760: PUSH
27761: LD_INT 46
27763: PUSH
27764: LD_INT 47
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 82
27775: PUSH
27776: LD_INT 83
27778: PUSH
27779: LD_INT 84
27781: PUSH
27782: LD_INT 85
27784: PUSH
27785: LD_INT 86
27787: PUSH
27788: LD_INT 11
27790: PUSH
27791: LD_INT 9
27793: PUSH
27794: LD_INT 20
27796: PUSH
27797: LD_INT 19
27799: PUSH
27800: LD_INT 21
27802: PUSH
27803: LD_INT 24
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_INT 25
27811: PUSH
27812: LD_INT 28
27814: PUSH
27815: LD_INT 29
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 31
27823: PUSH
27824: LD_INT 37
27826: PUSH
27827: LD_INT 38
27829: PUSH
27830: LD_INT 32
27832: PUSH
27833: LD_INT 27
27835: PUSH
27836: LD_INT 33
27838: PUSH
27839: LD_INT 69
27841: PUSH
27842: LD_INT 39
27844: PUSH
27845: LD_INT 34
27847: PUSH
27848: LD_INT 40
27850: PUSH
27851: LD_INT 71
27853: PUSH
27854: LD_INT 23
27856: PUSH
27857: LD_INT 44
27859: PUSH
27860: LD_INT 48
27862: PUSH
27863: LD_INT 49
27865: PUSH
27866: LD_INT 50
27868: PUSH
27869: LD_INT 51
27871: PUSH
27872: LD_INT 52
27874: PUSH
27875: LD_INT 53
27877: PUSH
27878: LD_INT 54
27880: PUSH
27881: LD_INT 55
27883: PUSH
27884: LD_INT 56
27886: PUSH
27887: LD_INT 57
27889: PUSH
27890: LD_INT 58
27892: PUSH
27893: LD_INT 59
27895: PUSH
27896: LD_INT 63
27898: PUSH
27899: LD_INT 64
27901: PUSH
27902: LD_INT 65
27904: PUSH
27905: LD_INT 82
27907: PUSH
27908: LD_INT 83
27910: PUSH
27911: LD_INT 84
27913: PUSH
27914: LD_INT 85
27916: PUSH
27917: LD_INT 86
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: ST_TO_ADDR
27975: GO 27978
27977: POP
// if state > - 1 and state < 3 then
27978: LD_VAR 0 3
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: GREATER
27987: PUSH
27988: LD_VAR 0 3
27992: PUSH
27993: LD_INT 3
27995: LESS
27996: AND
27997: IFFALSE 28054
// for i in result do
27999: LD_ADDR_VAR 0 5
28003: PUSH
28004: LD_VAR 0 4
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28052
// if GetTech ( i , side ) <> state then
28012: LD_VAR 0 5
28016: PPUSH
28017: LD_VAR 0 1
28021: PPUSH
28022: CALL_OW 321
28026: PUSH
28027: LD_VAR 0 3
28031: NONEQUAL
28032: IFFALSE 28050
// result := result diff i ;
28034: LD_ADDR_VAR 0 4
28038: PUSH
28039: LD_VAR 0 4
28043: PUSH
28044: LD_VAR 0 5
28048: DIFF
28049: ST_TO_ADDR
28050: GO 28009
28052: POP
28053: POP
// end ;
28054: LD_VAR 0 4
28058: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
// result := true ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_INT 1
28071: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28072: LD_ADDR_VAR 0 5
28076: PUSH
28077: LD_VAR 0 2
28081: PPUSH
28082: CALL_OW 480
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 5
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28145
// for i in tmp do
28096: LD_ADDR_VAR 0 4
28100: PUSH
28101: LD_VAR 0 5
28105: PUSH
28106: FOR_IN
28107: IFFALSE 28143
// if GetTech ( i , side ) <> state_researched then
28109: LD_VAR 0 4
28113: PPUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 321
28123: PUSH
28124: LD_INT 2
28126: NONEQUAL
28127: IFFALSE 28141
// begin result := false ;
28129: LD_ADDR_VAR 0 3
28133: PUSH
28134: LD_INT 0
28136: ST_TO_ADDR
// exit ;
28137: POP
28138: POP
28139: GO 28145
// end ;
28141: GO 28106
28143: POP
28144: POP
// end ;
28145: LD_VAR 0 3
28149: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
28154: PPUSH
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28165: LD_VAR 0 1
28169: NOT
28170: PUSH
28171: LD_VAR 0 1
28175: PPUSH
28176: CALL_OW 257
28180: PUSH
28181: LD_INT 9
28183: NONEQUAL
28184: OR
28185: IFFALSE 28189
// exit ;
28187: GO 28762
// side := GetSide ( unit ) ;
28189: LD_ADDR_VAR 0 9
28193: PUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL_OW 255
28203: ST_TO_ADDR
// tech_space := tech_spacanom ;
28204: LD_ADDR_VAR 0 12
28208: PUSH
28209: LD_INT 29
28211: ST_TO_ADDR
// tech_time := tech_taurad ;
28212: LD_ADDR_VAR 0 13
28216: PUSH
28217: LD_INT 28
28219: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28220: LD_ADDR_VAR 0 11
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 310
28234: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28235: LD_VAR 0 11
28239: PPUSH
28240: CALL_OW 247
28244: PUSH
28245: LD_INT 2
28247: EQUAL
28248: IFFALSE 28252
// exit ;
28250: GO 28762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28252: LD_ADDR_VAR 0 8
28256: PUSH
28257: LD_INT 81
28259: PUSH
28260: LD_VAR 0 9
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: LD_INT 21
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 69
28294: ST_TO_ADDR
// if not tmp then
28295: LD_VAR 0 8
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28762
// if in_unit then
28304: LD_VAR 0 11
28308: IFFALSE 28332
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28310: LD_ADDR_VAR 0 10
28314: PUSH
28315: LD_VAR 0 8
28319: PPUSH
28320: LD_VAR 0 11
28324: PPUSH
28325: CALL_OW 74
28329: ST_TO_ADDR
28330: GO 28352
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28332: LD_ADDR_VAR 0 10
28336: PUSH
28337: LD_VAR 0 8
28341: PPUSH
28342: LD_VAR 0 1
28346: PPUSH
28347: CALL_OW 74
28351: ST_TO_ADDR
// if not enemy then
28352: LD_VAR 0 10
28356: NOT
28357: IFFALSE 28361
// exit ;
28359: GO 28762
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28361: LD_VAR 0 11
28365: PUSH
28366: LD_VAR 0 11
28370: PPUSH
28371: LD_VAR 0 10
28375: PPUSH
28376: CALL_OW 296
28380: PUSH
28381: LD_INT 13
28383: GREATER
28384: AND
28385: PUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: LD_VAR 0 10
28395: PPUSH
28396: CALL_OW 296
28400: PUSH
28401: LD_INT 12
28403: GREATER
28404: OR
28405: IFFALSE 28409
// exit ;
28407: GO 28762
// missile := [ 1 ] ;
28409: LD_ADDR_VAR 0 14
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: EMPTY
28418: LIST
28419: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28420: LD_VAR 0 9
28424: PPUSH
28425: LD_VAR 0 12
28429: PPUSH
28430: CALL_OW 325
28434: IFFALSE 28463
// missile := Insert ( missile , missile + 1 , 2 ) ;
28436: LD_ADDR_VAR 0 14
28440: PUSH
28441: LD_VAR 0 14
28445: PPUSH
28446: LD_VAR 0 14
28450: PUSH
28451: LD_INT 1
28453: PLUS
28454: PPUSH
28455: LD_INT 2
28457: PPUSH
28458: CALL_OW 2
28462: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28463: LD_VAR 0 9
28467: PPUSH
28468: LD_VAR 0 13
28472: PPUSH
28473: CALL_OW 325
28477: PUSH
28478: LD_VAR 0 10
28482: PPUSH
28483: CALL_OW 255
28487: PPUSH
28488: LD_VAR 0 13
28492: PPUSH
28493: CALL_OW 325
28497: NOT
28498: AND
28499: IFFALSE 28528
// missile := Insert ( missile , missile + 1 , 3 ) ;
28501: LD_ADDR_VAR 0 14
28505: PUSH
28506: LD_VAR 0 14
28510: PPUSH
28511: LD_VAR 0 14
28515: PUSH
28516: LD_INT 1
28518: PLUS
28519: PPUSH
28520: LD_INT 3
28522: PPUSH
28523: CALL_OW 2
28527: ST_TO_ADDR
// if missile < 2 then
28528: LD_VAR 0 14
28532: PUSH
28533: LD_INT 2
28535: LESS
28536: IFFALSE 28540
// exit ;
28538: GO 28762
// x := GetX ( enemy ) ;
28540: LD_ADDR_VAR 0 4
28544: PUSH
28545: LD_VAR 0 10
28549: PPUSH
28550: CALL_OW 250
28554: ST_TO_ADDR
// y := GetY ( enemy ) ;
28555: LD_ADDR_VAR 0 5
28559: PUSH
28560: LD_VAR 0 10
28564: PPUSH
28565: CALL_OW 251
28569: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28570: LD_ADDR_VAR 0 6
28574: PUSH
28575: LD_VAR 0 4
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PPUSH
28584: LD_INT 1
28586: PPUSH
28587: CALL_OW 12
28591: PLUS
28592: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28593: LD_ADDR_VAR 0 7
28597: PUSH
28598: LD_VAR 0 5
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PPUSH
28607: LD_INT 1
28609: PPUSH
28610: CALL_OW 12
28614: PLUS
28615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28616: LD_VAR 0 6
28620: PPUSH
28621: LD_VAR 0 7
28625: PPUSH
28626: CALL_OW 488
28630: NOT
28631: IFFALSE 28653
// begin _x := x ;
28633: LD_ADDR_VAR 0 6
28637: PUSH
28638: LD_VAR 0 4
28642: ST_TO_ADDR
// _y := y ;
28643: LD_ADDR_VAR 0 7
28647: PUSH
28648: LD_VAR 0 5
28652: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_INT 1
28660: PPUSH
28661: LD_VAR 0 14
28665: PPUSH
28666: CALL_OW 12
28670: ST_TO_ADDR
// case i of 1 :
28671: LD_VAR 0 3
28675: PUSH
28676: LD_INT 1
28678: DOUBLE
28679: EQUAL
28680: IFTRUE 28684
28682: GO 28701
28684: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_VAR 0 10
28694: PPUSH
28695: CALL_OW 115
28699: GO 28762
28701: LD_INT 2
28703: DOUBLE
28704: EQUAL
28705: IFTRUE 28709
28707: GO 28731
28709: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28710: LD_VAR 0 1
28714: PPUSH
28715: LD_VAR 0 6
28719: PPUSH
28720: LD_VAR 0 7
28724: PPUSH
28725: CALL_OW 153
28729: GO 28762
28731: LD_INT 3
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28761
28739: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28740: LD_VAR 0 1
28744: PPUSH
28745: LD_VAR 0 6
28749: PPUSH
28750: LD_VAR 0 7
28754: PPUSH
28755: CALL_OW 154
28759: GO 28762
28761: POP
// end ;
28762: LD_VAR 0 2
28766: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28767: LD_INT 0
28769: PPUSH
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
// if not unit or not building then
28775: LD_VAR 0 1
28779: NOT
28780: PUSH
28781: LD_VAR 0 2
28785: NOT
28786: OR
28787: IFFALSE 28791
// exit ;
28789: GO 28949
// x := GetX ( building ) ;
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: LD_VAR 0 2
28800: PPUSH
28801: CALL_OW 250
28805: ST_TO_ADDR
// y := GetY ( building ) ;
28806: LD_ADDR_VAR 0 6
28810: PUSH
28811: LD_VAR 0 2
28815: PPUSH
28816: CALL_OW 251
28820: ST_TO_ADDR
// for i = 0 to 5 do
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: DOUBLE
28827: LD_INT 0
28829: DEC
28830: ST_TO_ADDR
28831: LD_INT 5
28833: PUSH
28834: FOR_TO
28835: IFFALSE 28947
// begin _x := ShiftX ( x , i , 3 ) ;
28837: LD_ADDR_VAR 0 7
28841: PUSH
28842: LD_VAR 0 5
28846: PPUSH
28847: LD_VAR 0 4
28851: PPUSH
28852: LD_INT 3
28854: PPUSH
28855: CALL_OW 272
28859: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28860: LD_ADDR_VAR 0 8
28864: PUSH
28865: LD_VAR 0 6
28869: PPUSH
28870: LD_VAR 0 4
28874: PPUSH
28875: LD_INT 3
28877: PPUSH
28878: CALL_OW 273
28882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28883: LD_VAR 0 7
28887: PPUSH
28888: LD_VAR 0 8
28892: PPUSH
28893: CALL_OW 488
28897: NOT
28898: IFFALSE 28902
// continue ;
28900: GO 28834
// if HexInfo ( _x , _y ) = 0 then
28902: LD_VAR 0 7
28906: PPUSH
28907: LD_VAR 0 8
28911: PPUSH
28912: CALL_OW 428
28916: PUSH
28917: LD_INT 0
28919: EQUAL
28920: IFFALSE 28945
// begin ComMoveXY ( unit , _x , _y ) ;
28922: LD_VAR 0 1
28926: PPUSH
28927: LD_VAR 0 7
28931: PPUSH
28932: LD_VAR 0 8
28936: PPUSH
28937: CALL_OW 111
// exit ;
28941: POP
28942: POP
28943: GO 28949
// end ; end ;
28945: GO 28834
28947: POP
28948: POP
// end ;
28949: LD_VAR 0 3
28953: RET
// export function ScanBase ( side , base_area ) ; begin
28954: LD_INT 0
28956: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28957: LD_ADDR_VAR 0 3
28961: PUSH
28962: LD_VAR 0 2
28966: PPUSH
28967: LD_INT 81
28969: PUSH
28970: LD_VAR 0 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PPUSH
28979: CALL_OW 70
28983: ST_TO_ADDR
// end ;
28984: LD_VAR 0 3
28988: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
// result := false ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_INT 0
29002: ST_TO_ADDR
// side := GetSide ( unit ) ;
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 255
29017: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29018: LD_ADDR_VAR 0 4
29022: PUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 248
29032: ST_TO_ADDR
// case nat of 1 :
29033: LD_VAR 0 4
29037: PUSH
29038: LD_INT 1
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29057
29046: POP
// tech := tech_lassight ; 2 :
29047: LD_ADDR_VAR 0 5
29051: PUSH
29052: LD_INT 12
29054: ST_TO_ADDR
29055: GO 29096
29057: LD_INT 2
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29076
29065: POP
// tech := tech_mortar ; 3 :
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_INT 41
29073: ST_TO_ADDR
29074: GO 29096
29076: LD_INT 3
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29095
29084: POP
// tech := tech_bazooka ; end ;
29085: LD_ADDR_VAR 0 5
29089: PUSH
29090: LD_INT 44
29092: ST_TO_ADDR
29093: GO 29096
29095: POP
// if Researched ( side , tech ) then
29096: LD_VAR 0 3
29100: PPUSH
29101: LD_VAR 0 5
29105: PPUSH
29106: CALL_OW 325
29110: IFFALSE 29137
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29112: LD_ADDR_VAR 0 2
29116: PUSH
29117: LD_INT 5
29119: PUSH
29120: LD_INT 8
29122: PUSH
29123: LD_INT 9
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: PUSH
29131: LD_VAR 0 4
29135: ARRAY
29136: ST_TO_ADDR
// end ;
29137: LD_VAR 0 2
29141: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29142: LD_INT 0
29144: PPUSH
29145: PPUSH
29146: PPUSH
// if not mines then
29147: LD_VAR 0 2
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_INT 81
29163: PUSH
29164: LD_VAR 0 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: LD_INT 21
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PPUSH
29194: CALL_OW 69
29198: ST_TO_ADDR
// for i in mines do
29199: LD_ADDR_VAR 0 4
29203: PUSH
29204: LD_VAR 0 2
29208: PUSH
29209: FOR_IN
29210: IFFALSE 29298
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29212: LD_VAR 0 4
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: LD_VAR 0 4
29225: PUSH
29226: LD_INT 2
29228: ARRAY
29229: PPUSH
29230: CALL_OW 458
29234: NOT
29235: IFFALSE 29239
// continue ;
29237: GO 29209
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29239: LD_VAR 0 4
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PPUSH
29248: LD_VAR 0 4
29252: PUSH
29253: LD_INT 2
29255: ARRAY
29256: PPUSH
29257: CALL_OW 428
29261: PUSH
29262: LD_VAR 0 5
29266: IN
29267: IFFALSE 29296
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29269: LD_VAR 0 4
29273: PUSH
29274: LD_INT 1
29276: ARRAY
29277: PPUSH
29278: LD_VAR 0 4
29282: PUSH
29283: LD_INT 2
29285: ARRAY
29286: PPUSH
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 456
// end ;
29296: GO 29209
29298: POP
29299: POP
// end ;
29300: LD_VAR 0 3
29304: RET
// export function Count ( array ) ; var i ; begin
29305: LD_INT 0
29307: PPUSH
29308: PPUSH
// result := 0 ;
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_INT 0
29316: ST_TO_ADDR
// for i in array do
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_VAR 0 1
29326: PUSH
29327: FOR_IN
29328: IFFALSE 29352
// if i then
29330: LD_VAR 0 3
29334: IFFALSE 29350
// result := result + 1 ;
29336: LD_ADDR_VAR 0 2
29340: PUSH
29341: LD_VAR 0 2
29345: PUSH
29346: LD_INT 1
29348: PLUS
29349: ST_TO_ADDR
29350: GO 29327
29352: POP
29353: POP
// end ;
29354: LD_VAR 0 2
29358: RET
// export function IsEmpty ( building ) ; begin
29359: LD_INT 0
29361: PPUSH
// if not building then
29362: LD_VAR 0 1
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29414
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29371: LD_ADDR_VAR 0 2
29375: PUSH
29376: LD_VAR 0 1
29380: PUSH
29381: LD_INT 22
29383: PUSH
29384: LD_VAR 0 1
29388: PPUSH
29389: CALL_OW 255
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 58
29400: PUSH
29401: EMPTY
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PPUSH
29408: CALL_OW 69
29412: IN
29413: ST_TO_ADDR
// end ;
29414: LD_VAR 0 2
29418: RET
// export function IsNotFull ( building ) ; begin
29419: LD_INT 0
29421: PPUSH
// if not building then
29422: LD_VAR 0 1
29426: NOT
29427: IFFALSE 29431
// exit ;
29429: GO 29450
// result := UnitsInside ( building ) < 6 ;
29431: LD_ADDR_VAR 0 2
29435: PUSH
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 313
29445: PUSH
29446: LD_INT 6
29448: LESS
29449: ST_TO_ADDR
// end ;
29450: LD_VAR 0 2
29454: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29455: LD_INT 0
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
// tmp := [ ] ;
29461: LD_ADDR_VAR 0 3
29465: PUSH
29466: EMPTY
29467: ST_TO_ADDR
// list := [ ] ;
29468: LD_ADDR_VAR 0 5
29472: PUSH
29473: EMPTY
29474: ST_TO_ADDR
// for i = 16 to 25 do
29475: LD_ADDR_VAR 0 4
29479: PUSH
29480: DOUBLE
29481: LD_INT 16
29483: DEC
29484: ST_TO_ADDR
29485: LD_INT 25
29487: PUSH
29488: FOR_TO
29489: IFFALSE 29562
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_VAR 0 3
29500: PUSH
29501: LD_INT 22
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 255
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 91
29520: PUSH
29521: LD_VAR 0 1
29525: PUSH
29526: LD_INT 6
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 30
29536: PUSH
29537: LD_VAR 0 4
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: PUSH
29551: EMPTY
29552: LIST
29553: PPUSH
29554: CALL_OW 69
29558: ADD
29559: ST_TO_ADDR
29560: GO 29488
29562: POP
29563: POP
// for i = 1 to tmp do
29564: LD_ADDR_VAR 0 4
29568: PUSH
29569: DOUBLE
29570: LD_INT 1
29572: DEC
29573: ST_TO_ADDR
29574: LD_VAR 0 3
29578: PUSH
29579: FOR_TO
29580: IFFALSE 29668
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_VAR 0 5
29591: PUSH
29592: LD_VAR 0 3
29596: PUSH
29597: LD_VAR 0 4
29601: ARRAY
29602: PPUSH
29603: CALL_OW 266
29607: PUSH
29608: LD_VAR 0 3
29612: PUSH
29613: LD_VAR 0 4
29617: ARRAY
29618: PPUSH
29619: CALL_OW 250
29623: PUSH
29624: LD_VAR 0 3
29628: PUSH
29629: LD_VAR 0 4
29633: ARRAY
29634: PPUSH
29635: CALL_OW 251
29639: PUSH
29640: LD_VAR 0 3
29644: PUSH
29645: LD_VAR 0 4
29649: ARRAY
29650: PPUSH
29651: CALL_OW 254
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: ADD
29665: ST_TO_ADDR
29666: GO 29579
29668: POP
29669: POP
// result := list ;
29670: LD_ADDR_VAR 0 2
29674: PUSH
29675: LD_VAR 0 5
29679: ST_TO_ADDR
// end ;
29680: LD_VAR 0 2
29684: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
// if not factory then
29694: LD_VAR 0 1
29698: NOT
29699: IFFALSE 29703
// exit ;
29701: GO 30296
// if control = control_apeman then
29703: LD_VAR 0 4
29707: PUSH
29708: LD_INT 5
29710: EQUAL
29711: IFFALSE 29820
// begin tmp := UnitsInside ( factory ) ;
29713: LD_ADDR_VAR 0 8
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 313
29727: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29728: LD_VAR 0 8
29732: PPUSH
29733: LD_INT 25
29735: PUSH
29736: LD_INT 12
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PPUSH
29743: CALL_OW 72
29747: NOT
29748: IFFALSE 29758
// control := control_manual ;
29750: LD_ADDR_VAR 0 4
29754: PUSH
29755: LD_INT 1
29757: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29758: LD_ADDR_VAR 0 8
29762: PUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL 29455 0 1
29772: ST_TO_ADDR
// if tmp then
29773: LD_VAR 0 8
29777: IFFALSE 29820
// begin for i in tmp do
29779: LD_ADDR_VAR 0 7
29783: PUSH
29784: LD_VAR 0 8
29788: PUSH
29789: FOR_IN
29790: IFFALSE 29818
// if i [ 1 ] = b_ext_radio then
29792: LD_VAR 0 7
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PUSH
29801: LD_INT 22
29803: EQUAL
29804: IFFALSE 29816
// begin control := control_remote ;
29806: LD_ADDR_VAR 0 4
29810: PUSH
29811: LD_INT 2
29813: ST_TO_ADDR
// break ;
29814: GO 29818
// end ;
29816: GO 29789
29818: POP
29819: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_VAR 0 2
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: LD_VAR 0 4
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL_OW 448
29849: IFFALSE 29884
// begin result := [ chassis , engine , control , weapon ] ;
29851: LD_ADDR_VAR 0 6
29855: PUSH
29856: LD_VAR 0 2
29860: PUSH
29861: LD_VAR 0 3
29865: PUSH
29866: LD_VAR 0 4
29870: PUSH
29871: LD_VAR 0 5
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// exit ;
29882: GO 30296
// end ; _chassis := AvailableChassisList ( factory ) ;
29884: LD_ADDR_VAR 0 9
29888: PUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 475
29898: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29899: LD_ADDR_VAR 0 11
29903: PUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 476
29913: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29914: LD_ADDR_VAR 0 12
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 477
29928: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29929: LD_ADDR_VAR 0 10
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 478
29943: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29944: LD_VAR 0 9
29948: NOT
29949: PUSH
29950: LD_VAR 0 11
29954: NOT
29955: OR
29956: PUSH
29957: LD_VAR 0 12
29961: NOT
29962: OR
29963: PUSH
29964: LD_VAR 0 10
29968: NOT
29969: OR
29970: IFFALSE 30005
// begin result := [ chassis , engine , control , weapon ] ;
29972: LD_ADDR_VAR 0 6
29976: PUSH
29977: LD_VAR 0 2
29981: PUSH
29982: LD_VAR 0 3
29986: PUSH
29987: LD_VAR 0 4
29991: PUSH
29992: LD_VAR 0 5
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// exit ;
30003: GO 30296
// end ; if not chassis in _chassis then
30005: LD_VAR 0 2
30009: PUSH
30010: LD_VAR 0 9
30014: IN
30015: NOT
30016: IFFALSE 30042
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: LD_VAR 0 9
30027: PUSH
30028: LD_INT 1
30030: PPUSH
30031: LD_VAR 0 9
30035: PPUSH
30036: CALL_OW 12
30040: ARRAY
30041: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30042: LD_VAR 0 2
30046: PPUSH
30047: LD_VAR 0 3
30051: PPUSH
30052: CALL 30301 0 2
30056: NOT
30057: IFFALSE 30116
// repeat engine := _engine [ 1 ] ;
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_VAR 0 11
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30073: LD_ADDR_VAR 0 11
30077: PUSH
30078: LD_VAR 0 11
30082: PPUSH
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 3
30090: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL 30301 0 2
30105: PUSH
30106: LD_VAR 0 11
30110: PUSH
30111: EMPTY
30112: EQUAL
30113: OR
30114: IFFALSE 30059
// if not control in _control then
30116: LD_VAR 0 4
30120: PUSH
30121: LD_VAR 0 12
30125: IN
30126: NOT
30127: IFFALSE 30153
// control := _control [ rand ( 1 , _control ) ] ;
30129: LD_ADDR_VAR 0 4
30133: PUSH
30134: LD_VAR 0 12
30138: PUSH
30139: LD_INT 1
30141: PPUSH
30142: LD_VAR 0 12
30146: PPUSH
30147: CALL_OW 12
30151: ARRAY
30152: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30153: LD_VAR 0 2
30157: PPUSH
30158: LD_VAR 0 5
30162: PPUSH
30163: CALL 30521 0 2
30167: NOT
30168: IFFALSE 30227
// repeat weapon := _weapon [ 1 ] ;
30170: LD_ADDR_VAR 0 5
30174: PUSH
30175: LD_VAR 0 10
30179: PUSH
30180: LD_INT 1
30182: ARRAY
30183: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30184: LD_ADDR_VAR 0 10
30188: PUSH
30189: LD_VAR 0 10
30193: PPUSH
30194: LD_INT 1
30196: PPUSH
30197: CALL_OW 3
30201: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_VAR 0 5
30211: PPUSH
30212: CALL 30521 0 2
30216: PUSH
30217: LD_VAR 0 10
30221: PUSH
30222: EMPTY
30223: EQUAL
30224: OR
30225: IFFALSE 30170
// result := [ ] ;
30227: LD_ADDR_VAR 0 6
30231: PUSH
30232: EMPTY
30233: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30234: LD_VAR 0 1
30238: PPUSH
30239: LD_VAR 0 2
30243: PPUSH
30244: LD_VAR 0 3
30248: PPUSH
30249: LD_VAR 0 4
30253: PPUSH
30254: LD_VAR 0 5
30258: PPUSH
30259: CALL_OW 448
30263: IFFALSE 30296
// result := [ chassis , engine , control , weapon ] ;
30265: LD_ADDR_VAR 0 6
30269: PUSH
30270: LD_VAR 0 2
30274: PUSH
30275: LD_VAR 0 3
30279: PUSH
30280: LD_VAR 0 4
30284: PUSH
30285: LD_VAR 0 5
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// end ;
30296: LD_VAR 0 6
30300: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30301: LD_INT 0
30303: PPUSH
// if not chassis or not engine then
30304: LD_VAR 0 1
30308: NOT
30309: PUSH
30310: LD_VAR 0 2
30314: NOT
30315: OR
30316: IFFALSE 30320
// exit ;
30318: GO 30516
// case engine of engine_solar :
30320: LD_VAR 0 2
30324: PUSH
30325: LD_INT 2
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30371
30333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30334: LD_ADDR_VAR 0 3
30338: PUSH
30339: LD_INT 11
30341: PUSH
30342: LD_INT 12
30344: PUSH
30345: LD_INT 13
30347: PUSH
30348: LD_INT 14
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: ST_TO_ADDR
30369: GO 30500
30371: LD_INT 1
30373: DOUBLE
30374: EQUAL
30375: IFTRUE 30379
30377: GO 30441
30379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_INT 11
30387: PUSH
30388: LD_INT 12
30390: PUSH
30391: LD_INT 13
30393: PUSH
30394: LD_INT 14
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: LD_INT 4
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: LD_INT 21
30414: PUSH
30415: LD_INT 23
30417: PUSH
30418: LD_INT 22
30420: PUSH
30421: LD_INT 24
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
30439: GO 30500
30441: LD_INT 3
30443: DOUBLE
30444: EQUAL
30445: IFTRUE 30449
30447: GO 30499
30449: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30450: LD_ADDR_VAR 0 3
30454: PUSH
30455: LD_INT 13
30457: PUSH
30458: LD_INT 14
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: LD_INT 4
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: LD_INT 21
30475: PUSH
30476: LD_INT 22
30478: PUSH
30479: LD_INT 23
30481: PUSH
30482: LD_INT 24
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: ST_TO_ADDR
30497: GO 30500
30499: POP
// result := ( chassis in result ) ;
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: LD_VAR 0 1
30509: PUSH
30510: LD_VAR 0 3
30514: IN
30515: ST_TO_ADDR
// end ;
30516: LD_VAR 0 3
30520: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30521: LD_INT 0
30523: PPUSH
// if not chassis or not weapon then
30524: LD_VAR 0 1
30528: NOT
30529: PUSH
30530: LD_VAR 0 2
30534: NOT
30535: OR
30536: IFFALSE 30540
// exit ;
30538: GO 31566
// case weapon of us_machine_gun :
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 2
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30583
30553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 4
30570: PUSH
30571: LD_INT 5
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
30581: GO 31550
30583: LD_INT 3
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30621
30591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 4
30608: PUSH
30609: LD_INT 5
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 31550
30621: LD_INT 11
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30659
30629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: LD_INT 4
30646: PUSH
30647: LD_INT 5
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
30657: GO 31550
30659: LD_INT 4
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30693
30667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 4
30681: PUSH
30682: LD_INT 5
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
30691: GO 31550
30693: LD_INT 5
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30727
30701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 4
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: ST_TO_ADDR
30725: GO 31550
30727: LD_INT 9
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30735
30733: GO 30761
30735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 3
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
30759: GO 31550
30761: LD_INT 7
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30795
30769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: LD_INT 4
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
30793: GO 31550
30795: LD_INT 12
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30829
30803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: LD_INT 4
30817: PUSH
30818: LD_INT 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 31550
30829: LD_INT 13
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30863
30837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31550
30863: LD_INT 14
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30889
30871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 4
30879: PUSH
30880: LD_INT 5
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: ST_TO_ADDR
30887: GO 31550
30889: LD_INT 6
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30915
30897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: ST_TO_ADDR
30913: GO 31550
30915: LD_INT 10
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30941
30923: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_INT 4
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31550
30941: LD_INT 22
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30975
30949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 11
30957: PUSH
30958: LD_INT 12
30960: PUSH
30961: LD_INT 13
30963: PUSH
30964: LD_INT 14
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31550
30975: LD_INT 23
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31009
30983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 11
30991: PUSH
30992: LD_INT 12
30994: PUSH
30995: LD_INT 13
30997: PUSH
30998: LD_INT 14
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31550
31009: LD_INT 24
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31043
31017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 11
31025: PUSH
31026: LD_INT 12
31028: PUSH
31029: LD_INT 13
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31550
31043: LD_INT 30
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31077
31051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 11
31059: PUSH
31060: LD_INT 12
31062: PUSH
31063: LD_INT 13
31065: PUSH
31066: LD_INT 14
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: ST_TO_ADDR
31075: GO 31550
31077: LD_INT 25
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31103
31085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_INT 13
31093: PUSH
31094: LD_INT 14
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31550
31103: LD_INT 27
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31129
31111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 13
31119: PUSH
31120: LD_INT 14
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: ST_TO_ADDR
31127: GO 31550
31129: LD_INT 28
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31155
31137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 13
31145: PUSH
31146: LD_INT 14
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31550
31155: LD_INT 29
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31181
31163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 13
31171: PUSH
31172: LD_INT 14
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: ST_TO_ADDR
31179: GO 31550
31181: LD_INT 31
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31207
31189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: LD_INT 13
31197: PUSH
31198: LD_INT 14
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: ST_TO_ADDR
31205: GO 31550
31207: LD_INT 26
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31233
31215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_INT 13
31223: PUSH
31224: LD_INT 14
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
31231: GO 31550
31233: LD_INT 42
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31267
31241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31242: LD_ADDR_VAR 0 3
31246: PUSH
31247: LD_INT 21
31249: PUSH
31250: LD_INT 22
31252: PUSH
31253: LD_INT 23
31255: PUSH
31256: LD_INT 24
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
31265: GO 31550
31267: LD_INT 43
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31301
31275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_INT 23
31289: PUSH
31290: LD_INT 24
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 31550
31301: LD_INT 44
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31335
31309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_INT 21
31317: PUSH
31318: LD_INT 22
31320: PUSH
31321: LD_INT 23
31323: PUSH
31324: LD_INT 24
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31550
31335: LD_INT 45
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31369
31343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 21
31351: PUSH
31352: LD_INT 22
31354: PUSH
31355: LD_INT 23
31357: PUSH
31358: LD_INT 24
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31550
31369: LD_INT 49
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31403
31377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 23
31391: PUSH
31392: LD_INT 24
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31550
31403: LD_INT 51
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31437
31411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 21
31419: PUSH
31420: LD_INT 22
31422: PUSH
31423: LD_INT 23
31425: PUSH
31426: LD_INT 24
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31550
31437: LD_INT 52
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31471
31445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_INT 21
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_INT 23
31459: PUSH
31460: LD_INT 24
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
31469: GO 31550
31471: LD_INT 53
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31497
31479: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31480: LD_ADDR_VAR 0 3
31484: PUSH
31485: LD_INT 23
31487: PUSH
31488: LD_INT 24
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: ST_TO_ADDR
31495: GO 31550
31497: LD_INT 46
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31523
31505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31506: LD_ADDR_VAR 0 3
31510: PUSH
31511: LD_INT 23
31513: PUSH
31514: LD_INT 24
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: ST_TO_ADDR
31521: GO 31550
31523: LD_INT 47
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31549
31531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31550
31549: POP
// result := ( chassis in result ) ;
31550: LD_ADDR_VAR 0 3
31554: PUSH
31555: LD_VAR 0 1
31559: PUSH
31560: LD_VAR 0 3
31564: IN
31565: ST_TO_ADDR
// end ;
31566: LD_VAR 0 3
31570: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31571: LD_INT 0
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
31578: PPUSH
31579: PPUSH
// result := array ;
31580: LD_ADDR_VAR 0 5
31584: PUSH
31585: LD_VAR 0 1
31589: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31590: LD_VAR 0 1
31594: NOT
31595: PUSH
31596: LD_VAR 0 2
31600: NOT
31601: OR
31602: PUSH
31603: LD_VAR 0 3
31607: NOT
31608: OR
31609: PUSH
31610: LD_VAR 0 2
31614: PUSH
31615: LD_VAR 0 1
31619: GREATER
31620: OR
31621: PUSH
31622: LD_VAR 0 3
31626: PUSH
31627: LD_VAR 0 1
31631: GREATER
31632: OR
31633: IFFALSE 31637
// exit ;
31635: GO 31933
// if direction then
31637: LD_VAR 0 4
31641: IFFALSE 31705
// begin d := 1 ;
31643: LD_ADDR_VAR 0 9
31647: PUSH
31648: LD_INT 1
31650: ST_TO_ADDR
// if i_from > i_to then
31651: LD_VAR 0 2
31655: PUSH
31656: LD_VAR 0 3
31660: GREATER
31661: IFFALSE 31687
// length := ( array - i_from ) + i_to else
31663: LD_ADDR_VAR 0 11
31667: PUSH
31668: LD_VAR 0 1
31672: PUSH
31673: LD_VAR 0 2
31677: MINUS
31678: PUSH
31679: LD_VAR 0 3
31683: PLUS
31684: ST_TO_ADDR
31685: GO 31703
// length := i_to - i_from ;
31687: LD_ADDR_VAR 0 11
31691: PUSH
31692: LD_VAR 0 3
31696: PUSH
31697: LD_VAR 0 2
31701: MINUS
31702: ST_TO_ADDR
// end else
31703: GO 31766
// begin d := - 1 ;
31705: LD_ADDR_VAR 0 9
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: ST_TO_ADDR
// if i_from > i_to then
31714: LD_VAR 0 2
31718: PUSH
31719: LD_VAR 0 3
31723: GREATER
31724: IFFALSE 31744
// length := i_from - i_to else
31726: LD_ADDR_VAR 0 11
31730: PUSH
31731: LD_VAR 0 2
31735: PUSH
31736: LD_VAR 0 3
31740: MINUS
31741: ST_TO_ADDR
31742: GO 31766
// length := ( array - i_to ) + i_from ;
31744: LD_ADDR_VAR 0 11
31748: PUSH
31749: LD_VAR 0 1
31753: PUSH
31754: LD_VAR 0 3
31758: MINUS
31759: PUSH
31760: LD_VAR 0 2
31764: PLUS
31765: ST_TO_ADDR
// end ; if not length then
31766: LD_VAR 0 11
31770: NOT
31771: IFFALSE 31775
// exit ;
31773: GO 31933
// tmp := array ;
31775: LD_ADDR_VAR 0 10
31779: PUSH
31780: LD_VAR 0 1
31784: ST_TO_ADDR
// for i = 1 to length do
31785: LD_ADDR_VAR 0 6
31789: PUSH
31790: DOUBLE
31791: LD_INT 1
31793: DEC
31794: ST_TO_ADDR
31795: LD_VAR 0 11
31799: PUSH
31800: FOR_TO
31801: IFFALSE 31921
// begin for j = 1 to array do
31803: LD_ADDR_VAR 0 7
31807: PUSH
31808: DOUBLE
31809: LD_INT 1
31811: DEC
31812: ST_TO_ADDR
31813: LD_VAR 0 1
31817: PUSH
31818: FOR_TO
31819: IFFALSE 31907
// begin k := j + d ;
31821: LD_ADDR_VAR 0 8
31825: PUSH
31826: LD_VAR 0 7
31830: PUSH
31831: LD_VAR 0 9
31835: PLUS
31836: ST_TO_ADDR
// if k > array then
31837: LD_VAR 0 8
31841: PUSH
31842: LD_VAR 0 1
31846: GREATER
31847: IFFALSE 31857
// k := 1 ;
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_INT 1
31856: ST_TO_ADDR
// if not k then
31857: LD_VAR 0 8
31861: NOT
31862: IFFALSE 31874
// k := array ;
31864: LD_ADDR_VAR 0 8
31868: PUSH
31869: LD_VAR 0 1
31873: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31874: LD_ADDR_VAR 0 10
31878: PUSH
31879: LD_VAR 0 10
31883: PPUSH
31884: LD_VAR 0 8
31888: PPUSH
31889: LD_VAR 0 1
31893: PUSH
31894: LD_VAR 0 7
31898: ARRAY
31899: PPUSH
31900: CALL_OW 1
31904: ST_TO_ADDR
// end ;
31905: GO 31818
31907: POP
31908: POP
// array := tmp ;
31909: LD_ADDR_VAR 0 1
31913: PUSH
31914: LD_VAR 0 10
31918: ST_TO_ADDR
// end ;
31919: GO 31800
31921: POP
31922: POP
// result := array ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 1
31932: ST_TO_ADDR
// end ;
31933: LD_VAR 0 5
31937: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
// result := 0 ;
31942: LD_ADDR_VAR 0 3
31946: PUSH
31947: LD_INT 0
31949: ST_TO_ADDR
// if not array or not value in array then
31950: LD_VAR 0 1
31954: NOT
31955: PUSH
31956: LD_VAR 0 2
31960: PUSH
31961: LD_VAR 0 1
31965: IN
31966: NOT
31967: OR
31968: IFFALSE 31972
// exit ;
31970: GO 32026
// for i = 1 to array do
31972: LD_ADDR_VAR 0 4
31976: PUSH
31977: DOUBLE
31978: LD_INT 1
31980: DEC
31981: ST_TO_ADDR
31982: LD_VAR 0 1
31986: PUSH
31987: FOR_TO
31988: IFFALSE 32024
// if value = array [ i ] then
31990: LD_VAR 0 2
31994: PUSH
31995: LD_VAR 0 1
31999: PUSH
32000: LD_VAR 0 4
32004: ARRAY
32005: EQUAL
32006: IFFALSE 32022
// begin result := i ;
32008: LD_ADDR_VAR 0 3
32012: PUSH
32013: LD_VAR 0 4
32017: ST_TO_ADDR
// exit ;
32018: POP
32019: POP
32020: GO 32026
// end ;
32022: GO 31987
32024: POP
32025: POP
// end ;
32026: LD_VAR 0 3
32030: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32031: LD_INT 0
32033: PPUSH
// vc_chassis := chassis ;
32034: LD_ADDR_OWVAR 37
32038: PUSH
32039: LD_VAR 0 1
32043: ST_TO_ADDR
// vc_engine := engine ;
32044: LD_ADDR_OWVAR 39
32048: PUSH
32049: LD_VAR 0 2
32053: ST_TO_ADDR
// vc_control := control ;
32054: LD_ADDR_OWVAR 38
32058: PUSH
32059: LD_VAR 0 3
32063: ST_TO_ADDR
// vc_weapon := weapon ;
32064: LD_ADDR_OWVAR 40
32068: PUSH
32069: LD_VAR 0 4
32073: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32074: LD_ADDR_OWVAR 41
32078: PUSH
32079: LD_VAR 0 5
32083: ST_TO_ADDR
// end ;
32084: LD_VAR 0 6
32088: RET
// export function WantPlant ( unit ) ; var task ; begin
32089: LD_INT 0
32091: PPUSH
32092: PPUSH
// result := false ;
32093: LD_ADDR_VAR 0 2
32097: PUSH
32098: LD_INT 0
32100: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32101: LD_ADDR_VAR 0 3
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 437
32115: ST_TO_ADDR
// if task then
32116: LD_VAR 0 3
32120: IFFALSE 32148
// if task [ 1 ] [ 1 ] = p then
32122: LD_VAR 0 3
32126: PUSH
32127: LD_INT 1
32129: ARRAY
32130: PUSH
32131: LD_INT 1
32133: ARRAY
32134: PUSH
32135: LD_STRING p
32137: EQUAL
32138: IFFALSE 32148
// result := true ;
32140: LD_ADDR_VAR 0 2
32144: PUSH
32145: LD_INT 1
32147: ST_TO_ADDR
// end ;
32148: LD_VAR 0 2
32152: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32153: LD_INT 0
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
// if pos < 1 then
32159: LD_VAR 0 2
32163: PUSH
32164: LD_INT 1
32166: LESS
32167: IFFALSE 32171
// exit ;
32169: GO 32474
// if pos = 1 then
32171: LD_VAR 0 2
32175: PUSH
32176: LD_INT 1
32178: EQUAL
32179: IFFALSE 32212
// result := Replace ( arr , pos [ 1 ] , value ) else
32181: LD_ADDR_VAR 0 4
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_INT 1
32198: ARRAY
32199: PPUSH
32200: LD_VAR 0 3
32204: PPUSH
32205: CALL_OW 1
32209: ST_TO_ADDR
32210: GO 32474
// begin tmp := arr ;
32212: LD_ADDR_VAR 0 6
32216: PUSH
32217: LD_VAR 0 1
32221: ST_TO_ADDR
// s_arr := [ tmp ] ;
32222: LD_ADDR_VAR 0 7
32226: PUSH
32227: LD_VAR 0 6
32231: PUSH
32232: EMPTY
32233: LIST
32234: ST_TO_ADDR
// for i = 1 to pos - 1 do
32235: LD_ADDR_VAR 0 5
32239: PUSH
32240: DOUBLE
32241: LD_INT 1
32243: DEC
32244: ST_TO_ADDR
32245: LD_VAR 0 2
32249: PUSH
32250: LD_INT 1
32252: MINUS
32253: PUSH
32254: FOR_TO
32255: IFFALSE 32300
// begin tmp := tmp [ pos [ i ] ] ;
32257: LD_ADDR_VAR 0 6
32261: PUSH
32262: LD_VAR 0 6
32266: PUSH
32267: LD_VAR 0 2
32271: PUSH
32272: LD_VAR 0 5
32276: ARRAY
32277: ARRAY
32278: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32279: LD_ADDR_VAR 0 7
32283: PUSH
32284: LD_VAR 0 7
32288: PUSH
32289: LD_VAR 0 6
32293: PUSH
32294: EMPTY
32295: LIST
32296: ADD
32297: ST_TO_ADDR
// end ;
32298: GO 32254
32300: POP
32301: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32302: LD_ADDR_VAR 0 6
32306: PUSH
32307: LD_VAR 0 6
32311: PPUSH
32312: LD_VAR 0 2
32316: PUSH
32317: LD_VAR 0 2
32321: ARRAY
32322: PPUSH
32323: LD_VAR 0 3
32327: PPUSH
32328: CALL_OW 1
32332: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32333: LD_ADDR_VAR 0 7
32337: PUSH
32338: LD_VAR 0 7
32342: PPUSH
32343: LD_VAR 0 7
32347: PPUSH
32348: LD_VAR 0 6
32352: PPUSH
32353: CALL_OW 1
32357: ST_TO_ADDR
// for i = s_arr downto 2 do
32358: LD_ADDR_VAR 0 5
32362: PUSH
32363: DOUBLE
32364: LD_VAR 0 7
32368: INC
32369: ST_TO_ADDR
32370: LD_INT 2
32372: PUSH
32373: FOR_DOWNTO
32374: IFFALSE 32458
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32376: LD_ADDR_VAR 0 6
32380: PUSH
32381: LD_VAR 0 7
32385: PUSH
32386: LD_VAR 0 5
32390: PUSH
32391: LD_INT 1
32393: MINUS
32394: ARRAY
32395: PPUSH
32396: LD_VAR 0 2
32400: PUSH
32401: LD_VAR 0 5
32405: PUSH
32406: LD_INT 1
32408: MINUS
32409: ARRAY
32410: PPUSH
32411: LD_VAR 0 7
32415: PUSH
32416: LD_VAR 0 5
32420: ARRAY
32421: PPUSH
32422: CALL_OW 1
32426: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32427: LD_ADDR_VAR 0 7
32431: PUSH
32432: LD_VAR 0 7
32436: PPUSH
32437: LD_VAR 0 5
32441: PUSH
32442: LD_INT 1
32444: MINUS
32445: PPUSH
32446: LD_VAR 0 6
32450: PPUSH
32451: CALL_OW 1
32455: ST_TO_ADDR
// end ;
32456: GO 32373
32458: POP
32459: POP
// result := s_arr [ 1 ] ;
32460: LD_ADDR_VAR 0 4
32464: PUSH
32465: LD_VAR 0 7
32469: PUSH
32470: LD_INT 1
32472: ARRAY
32473: ST_TO_ADDR
// end ; end ;
32474: LD_VAR 0 4
32478: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32479: LD_INT 0
32481: PPUSH
32482: PPUSH
// if not list then
32483: LD_VAR 0 1
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32583
// i := list [ pos1 ] ;
32492: LD_ADDR_VAR 0 5
32496: PUSH
32497: LD_VAR 0 1
32501: PUSH
32502: LD_VAR 0 2
32506: ARRAY
32507: ST_TO_ADDR
// if not i then
32508: LD_VAR 0 5
32512: NOT
32513: IFFALSE 32517
// exit ;
32515: GO 32583
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32517: LD_ADDR_VAR 0 1
32521: PUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 1
32536: PUSH
32537: LD_VAR 0 3
32541: ARRAY
32542: PPUSH
32543: CALL_OW 1
32547: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32548: LD_ADDR_VAR 0 1
32552: PUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: LD_VAR 0 3
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL_OW 1
32572: ST_TO_ADDR
// result := list ;
32573: LD_ADDR_VAR 0 4
32577: PUSH
32578: LD_VAR 0 1
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 4
32587: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32588: LD_INT 0
32590: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32591: LD_ADDR_VAR 0 5
32595: PUSH
32596: LD_VAR 0 1
32600: PPUSH
32601: CALL_OW 250
32605: PPUSH
32606: LD_VAR 0 1
32610: PPUSH
32611: CALL_OW 251
32615: PPUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: LD_VAR 0 4
32630: PPUSH
32631: CALL 32641 0 5
32635: ST_TO_ADDR
// end ;
32636: LD_VAR 0 5
32640: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32641: LD_INT 0
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
// if not list then
32647: LD_VAR 0 3
32651: NOT
32652: IFFALSE 32656
// exit ;
32654: GO 33044
// result := [ ] ;
32656: LD_ADDR_VAR 0 6
32660: PUSH
32661: EMPTY
32662: ST_TO_ADDR
// for i in list do
32663: LD_ADDR_VAR 0 7
32667: PUSH
32668: LD_VAR 0 3
32672: PUSH
32673: FOR_IN
32674: IFFALSE 32876
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32676: LD_ADDR_VAR 0 9
32680: PUSH
32681: LD_VAR 0 7
32685: PPUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: LD_VAR 0 2
32695: PPUSH
32696: CALL_OW 297
32700: ST_TO_ADDR
// if not result then
32701: LD_VAR 0 6
32705: NOT
32706: IFFALSE 32732
// result := [ [ i , tmp ] ] else
32708: LD_ADDR_VAR 0 6
32712: PUSH
32713: LD_VAR 0 7
32717: PUSH
32718: LD_VAR 0 9
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: ST_TO_ADDR
32730: GO 32874
// begin if result [ result ] [ 2 ] < tmp then
32732: LD_VAR 0 6
32736: PUSH
32737: LD_VAR 0 6
32741: ARRAY
32742: PUSH
32743: LD_INT 2
32745: ARRAY
32746: PUSH
32747: LD_VAR 0 9
32751: LESS
32752: IFFALSE 32794
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32754: LD_ADDR_VAR 0 6
32758: PUSH
32759: LD_VAR 0 6
32763: PPUSH
32764: LD_VAR 0 6
32768: PUSH
32769: LD_INT 1
32771: PLUS
32772: PPUSH
32773: LD_VAR 0 7
32777: PUSH
32778: LD_VAR 0 9
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PPUSH
32787: CALL_OW 2
32791: ST_TO_ADDR
32792: GO 32874
// for j = 1 to result do
32794: LD_ADDR_VAR 0 8
32798: PUSH
32799: DOUBLE
32800: LD_INT 1
32802: DEC
32803: ST_TO_ADDR
32804: LD_VAR 0 6
32808: PUSH
32809: FOR_TO
32810: IFFALSE 32872
// begin if tmp < result [ j ] [ 2 ] then
32812: LD_VAR 0 9
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: LD_VAR 0 8
32826: ARRAY
32827: PUSH
32828: LD_INT 2
32830: ARRAY
32831: LESS
32832: IFFALSE 32870
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32834: LD_ADDR_VAR 0 6
32838: PUSH
32839: LD_VAR 0 6
32843: PPUSH
32844: LD_VAR 0 8
32848: PPUSH
32849: LD_VAR 0 7
32853: PUSH
32854: LD_VAR 0 9
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PPUSH
32863: CALL_OW 2
32867: ST_TO_ADDR
// break ;
32868: GO 32872
// end ; end ;
32870: GO 32809
32872: POP
32873: POP
// end ; end ;
32874: GO 32673
32876: POP
32877: POP
// if result and not asc then
32878: LD_VAR 0 6
32882: PUSH
32883: LD_VAR 0 4
32887: NOT
32888: AND
32889: IFFALSE 32964
// begin tmp := result ;
32891: LD_ADDR_VAR 0 9
32895: PUSH
32896: LD_VAR 0 6
32900: ST_TO_ADDR
// for i = tmp downto 1 do
32901: LD_ADDR_VAR 0 7
32905: PUSH
32906: DOUBLE
32907: LD_VAR 0 9
32911: INC
32912: ST_TO_ADDR
32913: LD_INT 1
32915: PUSH
32916: FOR_DOWNTO
32917: IFFALSE 32962
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32919: LD_ADDR_VAR 0 6
32923: PUSH
32924: LD_VAR 0 6
32928: PPUSH
32929: LD_VAR 0 9
32933: PUSH
32934: LD_VAR 0 7
32938: MINUS
32939: PUSH
32940: LD_INT 1
32942: PLUS
32943: PPUSH
32944: LD_VAR 0 9
32948: PUSH
32949: LD_VAR 0 7
32953: ARRAY
32954: PPUSH
32955: CALL_OW 1
32959: ST_TO_ADDR
32960: GO 32916
32962: POP
32963: POP
// end ; tmp := [ ] ;
32964: LD_ADDR_VAR 0 9
32968: PUSH
32969: EMPTY
32970: ST_TO_ADDR
// if mode then
32971: LD_VAR 0 5
32975: IFFALSE 33044
// begin for i = 1 to result do
32977: LD_ADDR_VAR 0 7
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_VAR 0 6
32991: PUSH
32992: FOR_TO
32993: IFFALSE 33032
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32995: LD_ADDR_VAR 0 9
32999: PUSH
33000: LD_VAR 0 9
33004: PPUSH
33005: LD_VAR 0 7
33009: PPUSH
33010: LD_VAR 0 6
33014: PUSH
33015: LD_VAR 0 7
33019: ARRAY
33020: PUSH
33021: LD_INT 1
33023: ARRAY
33024: PPUSH
33025: CALL_OW 1
33029: ST_TO_ADDR
33030: GO 32992
33032: POP
33033: POP
// result := tmp ;
33034: LD_ADDR_VAR 0 6
33038: PUSH
33039: LD_VAR 0 9
33043: ST_TO_ADDR
// end ; end ;
33044: LD_VAR 0 6
33048: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33049: LD_INT 0
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33057: LD_ADDR_VAR 0 5
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// if not x or not y then
33079: LD_VAR 0 2
33083: NOT
33084: PUSH
33085: LD_VAR 0 3
33089: NOT
33090: OR
33091: IFFALSE 33095
// exit ;
33093: GO 34741
// if not range then
33095: LD_VAR 0 4
33099: NOT
33100: IFFALSE 33110
// range := 10 ;
33102: LD_ADDR_VAR 0 4
33106: PUSH
33107: LD_INT 10
33109: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33110: LD_ADDR_VAR 0 8
33114: PUSH
33115: LD_INT 81
33117: PUSH
33118: LD_VAR 0 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 92
33129: PUSH
33130: LD_VAR 0 2
33134: PUSH
33135: LD_VAR 0 3
33139: PUSH
33140: LD_VAR 0 4
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: LD_INT 21
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 69
33177: ST_TO_ADDR
// if not tmp then
33178: LD_VAR 0 8
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 34741
// for i in tmp do
33187: LD_ADDR_VAR 0 6
33191: PUSH
33192: LD_VAR 0 8
33196: PUSH
33197: FOR_IN
33198: IFFALSE 34716
// begin points := [ 0 , 0 , 0 ] ;
33200: LD_ADDR_VAR 0 9
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// bpoints := 1 ;
33219: LD_ADDR_VAR 0 10
33223: PUSH
33224: LD_INT 1
33226: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33227: LD_VAR 0 6
33231: PPUSH
33232: CALL_OW 247
33236: PUSH
33237: LD_INT 1
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33823
33245: POP
// begin if GetClass ( i ) = 1 then
33246: LD_VAR 0 6
33250: PPUSH
33251: CALL_OW 257
33255: PUSH
33256: LD_INT 1
33258: EQUAL
33259: IFFALSE 33280
// points := [ 10 , 5 , 3 ] ;
33261: LD_ADDR_VAR 0 9
33265: PUSH
33266: LD_INT 10
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 257
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: LD_INT 3
33295: PUSH
33296: LD_INT 4
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: IN
33304: IFFALSE 33325
// points := [ 3 , 2 , 1 ] ;
33306: LD_ADDR_VAR 0 9
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33325: LD_VAR 0 6
33329: PPUSH
33330: CALL_OW 257
33334: PUSH
33335: LD_INT 5
33337: EQUAL
33338: IFFALSE 33359
// points := [ 130 , 5 , 2 ] ;
33340: LD_ADDR_VAR 0 9
33344: PUSH
33345: LD_INT 130
33347: PUSH
33348: LD_INT 5
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 257
33368: PUSH
33369: LD_INT 8
33371: EQUAL
33372: IFFALSE 33393
// points := [ 35 , 35 , 30 ] ;
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: LD_INT 35
33381: PUSH
33382: LD_INT 35
33384: PUSH
33385: LD_INT 30
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33393: LD_VAR 0 6
33397: PPUSH
33398: CALL_OW 257
33402: PUSH
33403: LD_INT 9
33405: EQUAL
33406: IFFALSE 33427
// points := [ 20 , 55 , 40 ] ;
33408: LD_ADDR_VAR 0 9
33412: PUSH
33413: LD_INT 20
33415: PUSH
33416: LD_INT 55
33418: PUSH
33419: LD_INT 40
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 257
33436: PUSH
33437: LD_INT 12
33439: PUSH
33440: LD_INT 16
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: IN
33447: IFFALSE 33468
// points := [ 5 , 3 , 2 ] ;
33449: LD_ADDR_VAR 0 9
33453: PUSH
33454: LD_INT 5
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33468: LD_VAR 0 6
33472: PPUSH
33473: CALL_OW 257
33477: PUSH
33478: LD_INT 17
33480: EQUAL
33481: IFFALSE 33502
// points := [ 100 , 50 , 75 ] ;
33483: LD_ADDR_VAR 0 9
33487: PUSH
33488: LD_INT 100
33490: PUSH
33491: LD_INT 50
33493: PUSH
33494: LD_INT 75
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33502: LD_VAR 0 6
33506: PPUSH
33507: CALL_OW 257
33511: PUSH
33512: LD_INT 15
33514: EQUAL
33515: IFFALSE 33536
// points := [ 10 , 5 , 3 ] ;
33517: LD_ADDR_VAR 0 9
33521: PUSH
33522: LD_INT 10
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: LD_INT 3
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33536: LD_VAR 0 6
33540: PPUSH
33541: CALL_OW 257
33545: PUSH
33546: LD_INT 14
33548: EQUAL
33549: IFFALSE 33570
// points := [ 10 , 0 , 0 ] ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_INT 10
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 257
33579: PUSH
33580: LD_INT 11
33582: EQUAL
33583: IFFALSE 33604
// points := [ 30 , 10 , 5 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 30
33592: PUSH
33593: LD_INT 10
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33604: LD_VAR 0 1
33608: PPUSH
33609: LD_INT 5
33611: PPUSH
33612: CALL_OW 321
33616: PUSH
33617: LD_INT 2
33619: EQUAL
33620: IFFALSE 33637
// bpoints := bpoints * 1.8 ;
33622: LD_ADDR_VAR 0 10
33626: PUSH
33627: LD_VAR 0 10
33631: PUSH
33632: LD_REAL  1.80000000000000E+0000
33635: MUL
33636: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33637: LD_VAR 0 6
33641: PPUSH
33642: CALL_OW 257
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: IN
33665: PUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: LD_INT 51
33673: PPUSH
33674: CALL_OW 321
33678: PUSH
33679: LD_INT 2
33681: EQUAL
33682: AND
33683: IFFALSE 33700
// bpoints := bpoints * 1.2 ;
33685: LD_ADDR_VAR 0 10
33689: PUSH
33690: LD_VAR 0 10
33694: PUSH
33695: LD_REAL  1.20000000000000E+0000
33698: MUL
33699: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33700: LD_VAR 0 6
33704: PPUSH
33705: CALL_OW 257
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: LD_INT 7
33715: PUSH
33716: LD_INT 9
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: IN
33724: PUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: LD_INT 52
33732: PPUSH
33733: CALL_OW 321
33737: PUSH
33738: LD_INT 2
33740: EQUAL
33741: AND
33742: IFFALSE 33759
// bpoints := bpoints * 1.5 ;
33744: LD_ADDR_VAR 0 10
33748: PUSH
33749: LD_VAR 0 10
33753: PUSH
33754: LD_REAL  1.50000000000000E+0000
33757: MUL
33758: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33759: LD_VAR 0 1
33763: PPUSH
33764: LD_INT 66
33766: PPUSH
33767: CALL_OW 321
33771: PUSH
33772: LD_INT 2
33774: EQUAL
33775: IFFALSE 33792
// bpoints := bpoints * 1.1 ;
33777: LD_ADDR_VAR 0 10
33781: PUSH
33782: LD_VAR 0 10
33786: PUSH
33787: LD_REAL  1.10000000000000E+0000
33790: MUL
33791: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33792: LD_ADDR_VAR 0 10
33796: PUSH
33797: LD_VAR 0 10
33801: PUSH
33802: LD_VAR 0 6
33806: PPUSH
33807: LD_INT 1
33809: PPUSH
33810: CALL_OW 259
33814: PUSH
33815: LD_REAL  1.15000000000000E+0000
33818: MUL
33819: MUL
33820: ST_TO_ADDR
// end ; unit_vehicle :
33821: GO 34645
33823: LD_INT 2
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 34633
33831: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33832: LD_VAR 0 6
33836: PPUSH
33837: CALL_OW 264
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 42
33847: PUSH
33848: LD_INT 24
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: IN
33856: IFFALSE 33877
// points := [ 25 , 5 , 3 ] ;
33858: LD_ADDR_VAR 0 9
33862: PUSH
33863: LD_INT 25
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33877: LD_VAR 0 6
33881: PPUSH
33882: CALL_OW 264
33886: PUSH
33887: LD_INT 4
33889: PUSH
33890: LD_INT 43
33892: PUSH
33893: LD_INT 25
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: IN
33901: IFFALSE 33922
// points := [ 40 , 15 , 5 ] ;
33903: LD_ADDR_VAR 0 9
33907: PUSH
33908: LD_INT 40
33910: PUSH
33911: LD_INT 15
33913: PUSH
33914: LD_INT 5
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33922: LD_VAR 0 6
33926: PPUSH
33927: CALL_OW 264
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: LD_INT 23
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: IN
33942: IFFALSE 33963
// points := [ 7 , 25 , 8 ] ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_INT 7
33951: PUSH
33952: LD_INT 25
33954: PUSH
33955: LD_INT 8
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33963: LD_VAR 0 6
33967: PPUSH
33968: CALL_OW 264
33972: PUSH
33973: LD_INT 5
33975: PUSH
33976: LD_INT 27
33978: PUSH
33979: LD_INT 44
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: IN
33987: IFFALSE 34008
// points := [ 14 , 50 , 16 ] ;
33989: LD_ADDR_VAR 0 9
33993: PUSH
33994: LD_INT 14
33996: PUSH
33997: LD_INT 50
33999: PUSH
34000: LD_INT 16
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34008: LD_VAR 0 6
34012: PPUSH
34013: CALL_OW 264
34017: PUSH
34018: LD_INT 6
34020: PUSH
34021: LD_INT 46
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: IN
34028: IFFALSE 34049
// points := [ 32 , 120 , 70 ] ;
34030: LD_ADDR_VAR 0 9
34034: PUSH
34035: LD_INT 32
34037: PUSH
34038: LD_INT 120
34040: PUSH
34041: LD_INT 70
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34049: LD_VAR 0 6
34053: PPUSH
34054: CALL_OW 264
34058: PUSH
34059: LD_INT 7
34061: PUSH
34062: LD_INT 28
34064: PUSH
34065: LD_INT 45
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: IN
34073: IFFALSE 34094
// points := [ 35 , 20 , 45 ] ;
34075: LD_ADDR_VAR 0 9
34079: PUSH
34080: LD_INT 35
34082: PUSH
34083: LD_INT 20
34085: PUSH
34086: LD_INT 45
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34094: LD_VAR 0 6
34098: PPUSH
34099: CALL_OW 264
34103: PUSH
34104: LD_INT 47
34106: PUSH
34107: EMPTY
34108: LIST
34109: IN
34110: IFFALSE 34131
// points := [ 67 , 45 , 75 ] ;
34112: LD_ADDR_VAR 0 9
34116: PUSH
34117: LD_INT 67
34119: PUSH
34120: LD_INT 45
34122: PUSH
34123: LD_INT 75
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34131: LD_VAR 0 6
34135: PPUSH
34136: CALL_OW 264
34140: PUSH
34141: LD_INT 26
34143: PUSH
34144: EMPTY
34145: LIST
34146: IN
34147: IFFALSE 34168
// points := [ 120 , 30 , 80 ] ;
34149: LD_ADDR_VAR 0 9
34153: PUSH
34154: LD_INT 120
34156: PUSH
34157: LD_INT 30
34159: PUSH
34160: LD_INT 80
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34168: LD_VAR 0 6
34172: PPUSH
34173: CALL_OW 264
34177: PUSH
34178: LD_INT 22
34180: PUSH
34181: EMPTY
34182: LIST
34183: IN
34184: IFFALSE 34205
// points := [ 40 , 1 , 1 ] ;
34186: LD_ADDR_VAR 0 9
34190: PUSH
34191: LD_INT 40
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34205: LD_VAR 0 6
34209: PPUSH
34210: CALL_OW 264
34214: PUSH
34215: LD_INT 29
34217: PUSH
34218: EMPTY
34219: LIST
34220: IN
34221: IFFALSE 34242
// points := [ 70 , 200 , 400 ] ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_INT 70
34230: PUSH
34231: LD_INT 200
34233: PUSH
34234: LD_INT 400
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 264
34251: PUSH
34252: LD_INT 14
34254: PUSH
34255: LD_INT 53
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: IN
34262: IFFALSE 34283
// points := [ 40 , 10 , 20 ] ;
34264: LD_ADDR_VAR 0 9
34268: PUSH
34269: LD_INT 40
34271: PUSH
34272: LD_INT 10
34274: PUSH
34275: LD_INT 20
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34283: LD_VAR 0 6
34287: PPUSH
34288: CALL_OW 264
34292: PUSH
34293: LD_INT 9
34295: PUSH
34296: EMPTY
34297: LIST
34298: IN
34299: IFFALSE 34320
// points := [ 5 , 70 , 20 ] ;
34301: LD_ADDR_VAR 0 9
34305: PUSH
34306: LD_INT 5
34308: PUSH
34309: LD_INT 70
34311: PUSH
34312: LD_INT 20
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34320: LD_VAR 0 6
34324: PPUSH
34325: CALL_OW 264
34329: PUSH
34330: LD_INT 10
34332: PUSH
34333: EMPTY
34334: LIST
34335: IN
34336: IFFALSE 34357
// points := [ 35 , 110 , 70 ] ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_INT 35
34345: PUSH
34346: LD_INT 110
34348: PUSH
34349: LD_INT 70
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34357: LD_VAR 0 6
34361: PPUSH
34362: CALL_OW 265
34366: PUSH
34367: LD_INT 25
34369: EQUAL
34370: IFFALSE 34391
// points := [ 80 , 65 , 100 ] ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: LD_INT 80
34379: PUSH
34380: LD_INT 65
34382: PUSH
34383: LD_INT 100
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34391: LD_VAR 0 6
34395: PPUSH
34396: CALL_OW 263
34400: PUSH
34401: LD_INT 1
34403: EQUAL
34404: IFFALSE 34439
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34406: LD_ADDR_VAR 0 10
34410: PUSH
34411: LD_VAR 0 10
34415: PUSH
34416: LD_VAR 0 6
34420: PPUSH
34421: CALL_OW 311
34425: PPUSH
34426: LD_INT 3
34428: PPUSH
34429: CALL_OW 259
34433: PUSH
34434: LD_INT 4
34436: MUL
34437: MUL
34438: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34439: LD_VAR 0 6
34443: PPUSH
34444: CALL_OW 263
34448: PUSH
34449: LD_INT 2
34451: EQUAL
34452: IFFALSE 34503
// begin j := IsControledBy ( i ) ;
34454: LD_ADDR_VAR 0 7
34458: PUSH
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 312
34468: ST_TO_ADDR
// if j then
34469: LD_VAR 0 7
34473: IFFALSE 34503
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34475: LD_ADDR_VAR 0 10
34479: PUSH
34480: LD_VAR 0 10
34484: PUSH
34485: LD_VAR 0 7
34489: PPUSH
34490: LD_INT 3
34492: PPUSH
34493: CALL_OW 259
34497: PUSH
34498: LD_INT 3
34500: MUL
34501: MUL
34502: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34503: LD_VAR 0 6
34507: PPUSH
34508: CALL_OW 264
34512: PUSH
34513: LD_INT 5
34515: PUSH
34516: LD_INT 6
34518: PUSH
34519: LD_INT 46
34521: PUSH
34522: LD_INT 44
34524: PUSH
34525: LD_INT 47
34527: PUSH
34528: LD_INT 45
34530: PUSH
34531: LD_INT 28
34533: PUSH
34534: LD_INT 7
34536: PUSH
34537: LD_INT 27
34539: PUSH
34540: LD_INT 29
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: IN
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_INT 52
34563: PPUSH
34564: CALL_OW 321
34568: PUSH
34569: LD_INT 2
34571: EQUAL
34572: AND
34573: IFFALSE 34590
// bpoints := bpoints * 1.2 ;
34575: LD_ADDR_VAR 0 10
34579: PUSH
34580: LD_VAR 0 10
34584: PUSH
34585: LD_REAL  1.20000000000000E+0000
34588: MUL
34589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34590: LD_VAR 0 6
34594: PPUSH
34595: CALL_OW 264
34599: PUSH
34600: LD_INT 6
34602: PUSH
34603: LD_INT 46
34605: PUSH
34606: LD_INT 47
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: IN
34614: IFFALSE 34631
// bpoints := bpoints * 1.2 ;
34616: LD_ADDR_VAR 0 10
34620: PUSH
34621: LD_VAR 0 10
34625: PUSH
34626: LD_REAL  1.20000000000000E+0000
34629: MUL
34630: ST_TO_ADDR
// end ; unit_building :
34631: GO 34645
34633: LD_INT 3
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34644
34641: POP
// ; end ;
34642: GO 34645
34644: POP
// for j = 1 to 3 do
34645: LD_ADDR_VAR 0 7
34649: PUSH
34650: DOUBLE
34651: LD_INT 1
34653: DEC
34654: ST_TO_ADDR
34655: LD_INT 3
34657: PUSH
34658: FOR_TO
34659: IFFALSE 34712
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34661: LD_ADDR_VAR 0 5
34665: PUSH
34666: LD_VAR 0 5
34670: PPUSH
34671: LD_VAR 0 7
34675: PPUSH
34676: LD_VAR 0 5
34680: PUSH
34681: LD_VAR 0 7
34685: ARRAY
34686: PUSH
34687: LD_VAR 0 9
34691: PUSH
34692: LD_VAR 0 7
34696: ARRAY
34697: PUSH
34698: LD_VAR 0 10
34702: MUL
34703: PLUS
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
34710: GO 34658
34712: POP
34713: POP
// end ;
34714: GO 33197
34716: POP
34717: POP
// result := Replace ( result , 4 , tmp ) ;
34718: LD_ADDR_VAR 0 5
34722: PUSH
34723: LD_VAR 0 5
34727: PPUSH
34728: LD_INT 4
34730: PPUSH
34731: LD_VAR 0 8
34735: PPUSH
34736: CALL_OW 1
34740: ST_TO_ADDR
// end ;
34741: LD_VAR 0 5
34745: RET
// export function DangerAtRange ( unit , range ) ; begin
34746: LD_INT 0
34748: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34749: LD_ADDR_VAR 0 3
34753: PUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 255
34763: PPUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 250
34773: PPUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 251
34783: PPUSH
34784: LD_VAR 0 2
34788: PPUSH
34789: CALL 33049 0 4
34793: ST_TO_ADDR
// end ;
34794: LD_VAR 0 3
34798: RET
// export function DangerInArea ( side , area ) ; begin
34799: LD_INT 0
34801: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_VAR 0 2
34811: PPUSH
34812: LD_INT 81
34814: PUSH
34815: LD_VAR 0 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PPUSH
34824: CALL_OW 70
34828: ST_TO_ADDR
// end ;
34829: LD_VAR 0 3
34833: RET
// export function IsExtension ( b ) ; begin
34834: LD_INT 0
34836: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34837: LD_ADDR_VAR 0 2
34841: PUSH
34842: LD_VAR 0 1
34846: PUSH
34847: LD_INT 23
34849: PUSH
34850: LD_INT 20
34852: PUSH
34853: LD_INT 22
34855: PUSH
34856: LD_INT 17
34858: PUSH
34859: LD_INT 24
34861: PUSH
34862: LD_INT 21
34864: PUSH
34865: LD_INT 19
34867: PUSH
34868: LD_INT 16
34870: PUSH
34871: LD_INT 25
34873: PUSH
34874: LD_INT 18
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: IN
34889: ST_TO_ADDR
// end ;
34890: LD_VAR 0 2
34894: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34895: LD_INT 0
34897: PPUSH
34898: PPUSH
34899: PPUSH
// result := [ ] ;
34900: LD_ADDR_VAR 0 3
34904: PUSH
34905: EMPTY
34906: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34907: LD_ADDR_VAR 0 4
34911: PUSH
34912: LD_VAR 0 2
34916: PPUSH
34917: LD_INT 21
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PPUSH
34927: CALL_OW 70
34931: ST_TO_ADDR
// if not tmp then
34932: LD_VAR 0 4
34936: NOT
34937: IFFALSE 34941
// exit ;
34939: GO 34999
// for i in tmp do
34941: LD_ADDR_VAR 0 5
34945: PUSH
34946: LD_VAR 0 4
34950: PUSH
34951: FOR_IN
34952: IFFALSE 34987
// if GetBase ( i ) <> base then
34954: LD_VAR 0 5
34958: PPUSH
34959: CALL_OW 274
34963: PUSH
34964: LD_VAR 0 1
34968: NONEQUAL
34969: IFFALSE 34985
// ComLinkToBase ( base , i ) ;
34971: LD_VAR 0 1
34975: PPUSH
34976: LD_VAR 0 5
34980: PPUSH
34981: CALL_OW 169
34985: GO 34951
34987: POP
34988: POP
// result := tmp ;
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_VAR 0 4
34998: ST_TO_ADDR
// end ;
34999: LD_VAR 0 3
35003: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35004: LD_INT 0
35006: PPUSH
35007: PPUSH
// if BuildingStatus ( b ) = bs_build then
35008: LD_VAR 0 2
35012: PPUSH
35013: CALL_OW 461
35017: PUSH
35018: LD_INT 1
35020: EQUAL
35021: IFFALSE 35081
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_STRING h
35030: PUSH
35031: LD_VAR 0 2
35035: PPUSH
35036: CALL_OW 250
35040: PUSH
35041: LD_VAR 0 2
35045: PPUSH
35046: CALL_OW 251
35050: PUSH
35051: LD_VAR 0 2
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: EMPTY
35075: LIST
35076: PPUSH
35077: CALL_OW 446
// end ;
35081: LD_VAR 0 3
35085: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35094: LD_VAR 0 1
35098: NOT
35099: PUSH
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 263
35109: PUSH
35110: LD_INT 2
35112: EQUAL
35113: NOT
35114: OR
35115: IFFALSE 35119
// exit ;
35117: GO 35435
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35119: LD_ADDR_VAR 0 6
35123: PUSH
35124: LD_INT 22
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 255
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 30
35146: PUSH
35147: LD_INT 36
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 34
35156: PUSH
35157: LD_INT 31
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PPUSH
35173: CALL_OW 69
35177: ST_TO_ADDR
// if not tmp then
35178: LD_VAR 0 6
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 35435
// result := [ ] ;
35187: LD_ADDR_VAR 0 2
35191: PUSH
35192: EMPTY
35193: ST_TO_ADDR
// for i in tmp do
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_VAR 0 6
35203: PUSH
35204: FOR_IN
35205: IFFALSE 35276
// begin t := UnitsInside ( i ) ;
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: LD_VAR 0 3
35216: PPUSH
35217: CALL_OW 313
35221: ST_TO_ADDR
// if t then
35222: LD_VAR 0 4
35226: IFFALSE 35274
// for j in t do
35228: LD_ADDR_VAR 0 7
35232: PUSH
35233: LD_VAR 0 4
35237: PUSH
35238: FOR_IN
35239: IFFALSE 35272
// result := Insert ( result , result + 1 , j ) ;
35241: LD_ADDR_VAR 0 2
35245: PUSH
35246: LD_VAR 0 2
35250: PPUSH
35251: LD_VAR 0 2
35255: PUSH
35256: LD_INT 1
35258: PLUS
35259: PPUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: CALL_OW 2
35269: ST_TO_ADDR
35270: GO 35238
35272: POP
35273: POP
// end ;
35274: GO 35204
35276: POP
35277: POP
// if not result then
35278: LD_VAR 0 2
35282: NOT
35283: IFFALSE 35287
// exit ;
35285: GO 35435
// mech := result [ 1 ] ;
35287: LD_ADDR_VAR 0 5
35291: PUSH
35292: LD_VAR 0 2
35296: PUSH
35297: LD_INT 1
35299: ARRAY
35300: ST_TO_ADDR
// if result > 1 then
35301: LD_VAR 0 2
35305: PUSH
35306: LD_INT 1
35308: GREATER
35309: IFFALSE 35421
// for i = 2 to result do
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: DOUBLE
35317: LD_INT 2
35319: DEC
35320: ST_TO_ADDR
35321: LD_VAR 0 2
35325: PUSH
35326: FOR_TO
35327: IFFALSE 35419
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35329: LD_ADDR_VAR 0 4
35333: PUSH
35334: LD_VAR 0 2
35338: PUSH
35339: LD_VAR 0 3
35343: ARRAY
35344: PPUSH
35345: LD_INT 3
35347: PPUSH
35348: CALL_OW 259
35352: PUSH
35353: LD_VAR 0 2
35357: PUSH
35358: LD_VAR 0 3
35362: ARRAY
35363: PPUSH
35364: CALL_OW 432
35368: MINUS
35369: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35370: LD_VAR 0 4
35374: PUSH
35375: LD_VAR 0 5
35379: PPUSH
35380: LD_INT 3
35382: PPUSH
35383: CALL_OW 259
35387: PUSH
35388: LD_VAR 0 5
35392: PPUSH
35393: CALL_OW 432
35397: MINUS
35398: GREATEREQUAL
35399: IFFALSE 35417
// mech := result [ i ] ;
35401: LD_ADDR_VAR 0 5
35405: PUSH
35406: LD_VAR 0 2
35410: PUSH
35411: LD_VAR 0 3
35415: ARRAY
35416: ST_TO_ADDR
// end ;
35417: GO 35326
35419: POP
35420: POP
// ComLinkTo ( vehicle , mech ) ;
35421: LD_VAR 0 1
35425: PPUSH
35426: LD_VAR 0 5
35430: PPUSH
35431: CALL_OW 135
// end ;
35435: LD_VAR 0 2
35439: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
// result := [ ] ;
35455: LD_ADDR_VAR 0 7
35459: PUSH
35460: EMPTY
35461: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 266
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: IN
35482: NOT
35483: IFFALSE 35487
// exit ;
35485: GO 37118
// if name then
35487: LD_VAR 0 3
35491: IFFALSE 35507
// SetBName ( base_dep , name ) ;
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 3
35502: PPUSH
35503: CALL_OW 500
// base := GetBase ( base_dep ) ;
35507: LD_ADDR_VAR 0 15
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 274
35521: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35522: LD_ADDR_VAR 0 16
35526: PUSH
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL_OW 255
35536: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35537: LD_ADDR_VAR 0 17
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 248
35551: ST_TO_ADDR
// if sources then
35552: LD_VAR 0 5
35556: IFFALSE 35603
// for i = 1 to 3 do
35558: LD_ADDR_VAR 0 8
35562: PUSH
35563: DOUBLE
35564: LD_INT 1
35566: DEC
35567: ST_TO_ADDR
35568: LD_INT 3
35570: PUSH
35571: FOR_TO
35572: IFFALSE 35601
// AddResourceType ( base , i , sources [ i ] ) ;
35574: LD_VAR 0 15
35578: PPUSH
35579: LD_VAR 0 8
35583: PPUSH
35584: LD_VAR 0 5
35588: PUSH
35589: LD_VAR 0 8
35593: ARRAY
35594: PPUSH
35595: CALL_OW 276
35599: GO 35571
35601: POP
35602: POP
// buildings := GetBaseBuildings ( base , area ) ;
35603: LD_ADDR_VAR 0 18
35607: PUSH
35608: LD_VAR 0 15
35612: PPUSH
35613: LD_VAR 0 2
35617: PPUSH
35618: CALL 34895 0 2
35622: ST_TO_ADDR
// InitHc ;
35623: CALL_OW 19
// InitUc ;
35627: CALL_OW 18
// uc_side := side ;
35631: LD_ADDR_OWVAR 20
35635: PUSH
35636: LD_VAR 0 16
35640: ST_TO_ADDR
// uc_nation := nation ;
35641: LD_ADDR_OWVAR 21
35645: PUSH
35646: LD_VAR 0 17
35650: ST_TO_ADDR
// if buildings then
35651: LD_VAR 0 18
35655: IFFALSE 36977
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35657: LD_ADDR_VAR 0 19
35661: PUSH
35662: LD_VAR 0 18
35666: PPUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 30
35672: PUSH
35673: LD_INT 29
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_INT 30
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PPUSH
35695: CALL_OW 72
35699: ST_TO_ADDR
// if tmp then
35700: LD_VAR 0 19
35704: IFFALSE 35752
// for i in tmp do
35706: LD_ADDR_VAR 0 8
35710: PUSH
35711: LD_VAR 0 19
35715: PUSH
35716: FOR_IN
35717: IFFALSE 35750
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35719: LD_VAR 0 8
35723: PPUSH
35724: CALL_OW 250
35728: PPUSH
35729: LD_VAR 0 8
35733: PPUSH
35734: CALL_OW 251
35738: PPUSH
35739: LD_VAR 0 16
35743: PPUSH
35744: CALL_OW 441
35748: GO 35716
35750: POP
35751: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35752: LD_VAR 0 18
35756: PPUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 32
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 33
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 72
35789: IFFALSE 35877
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35791: LD_ADDR_VAR 0 8
35795: PUSH
35796: LD_VAR 0 18
35800: PPUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 30
35806: PUSH
35807: LD_INT 32
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 30
35816: PUSH
35817: LD_INT 33
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: PPUSH
35829: CALL_OW 72
35833: PUSH
35834: FOR_IN
35835: IFFALSE 35875
// begin if not GetBWeapon ( i ) then
35837: LD_VAR 0 8
35841: PPUSH
35842: CALL_OW 269
35846: NOT
35847: IFFALSE 35873
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35849: LD_VAR 0 8
35853: PPUSH
35854: LD_VAR 0 8
35858: PPUSH
35859: LD_VAR 0 2
35863: PPUSH
35864: CALL 37123 0 2
35868: PPUSH
35869: CALL_OW 431
// end ;
35873: GO 35834
35875: POP
35876: POP
// end ; for i = 1 to personel do
35877: LD_ADDR_VAR 0 8
35881: PUSH
35882: DOUBLE
35883: LD_INT 1
35885: DEC
35886: ST_TO_ADDR
35887: LD_VAR 0 6
35891: PUSH
35892: FOR_TO
35893: IFFALSE 36957
// begin if i > 4 then
35895: LD_VAR 0 8
35899: PUSH
35900: LD_INT 4
35902: GREATER
35903: IFFALSE 35907
// break ;
35905: GO 36957
// case i of 1 :
35907: LD_VAR 0 8
35911: PUSH
35912: LD_INT 1
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35920
35918: GO 36000
35920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35921: LD_ADDR_VAR 0 12
35925: PUSH
35926: LD_VAR 0 18
35930: PPUSH
35931: LD_INT 22
35933: PUSH
35934: LD_VAR 0 16
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 58
35945: PUSH
35946: EMPTY
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 30
35954: PUSH
35955: LD_INT 32
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 30
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 30
35974: PUSH
35975: LD_INT 5
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: PPUSH
35993: CALL_OW 72
35997: ST_TO_ADDR
35998: GO 36222
36000: LD_INT 2
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36070
36008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36009: LD_ADDR_VAR 0 12
36013: PUSH
36014: LD_VAR 0 18
36018: PPUSH
36019: LD_INT 22
36021: PUSH
36022: LD_VAR 0 16
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: LD_INT 30
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 30
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PPUSH
36063: CALL_OW 72
36067: ST_TO_ADDR
36068: GO 36222
36070: LD_INT 3
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36140
36078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36079: LD_ADDR_VAR 0 12
36083: PUSH
36084: LD_VAR 0 18
36088: PPUSH
36089: LD_INT 22
36091: PUSH
36092: LD_VAR 0 16
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 30
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 30
36116: PUSH
36117: LD_INT 3
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PPUSH
36133: CALL_OW 72
36137: ST_TO_ADDR
36138: GO 36222
36140: LD_INT 4
36142: DOUBLE
36143: EQUAL
36144: IFTRUE 36148
36146: GO 36221
36148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36149: LD_ADDR_VAR 0 12
36153: PUSH
36154: LD_VAR 0 18
36158: PPUSH
36159: LD_INT 22
36161: PUSH
36162: LD_VAR 0 16
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 30
36176: PUSH
36177: LD_INT 6
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 30
36186: PUSH
36187: LD_INT 7
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 30
36196: PUSH
36197: LD_INT 8
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PPUSH
36214: CALL_OW 72
36218: ST_TO_ADDR
36219: GO 36222
36221: POP
// if i = 1 then
36222: LD_VAR 0 8
36226: PUSH
36227: LD_INT 1
36229: EQUAL
36230: IFFALSE 36341
// begin tmp := [ ] ;
36232: LD_ADDR_VAR 0 19
36236: PUSH
36237: EMPTY
36238: ST_TO_ADDR
// for j in f do
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_VAR 0 12
36248: PUSH
36249: FOR_IN
36250: IFFALSE 36323
// if GetBType ( j ) = b_bunker then
36252: LD_VAR 0 9
36256: PPUSH
36257: CALL_OW 266
36261: PUSH
36262: LD_INT 32
36264: EQUAL
36265: IFFALSE 36292
// tmp := Insert ( tmp , 1 , j ) else
36267: LD_ADDR_VAR 0 19
36271: PUSH
36272: LD_VAR 0 19
36276: PPUSH
36277: LD_INT 1
36279: PPUSH
36280: LD_VAR 0 9
36284: PPUSH
36285: CALL_OW 2
36289: ST_TO_ADDR
36290: GO 36321
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36292: LD_ADDR_VAR 0 19
36296: PUSH
36297: LD_VAR 0 19
36301: PPUSH
36302: LD_VAR 0 19
36306: PUSH
36307: LD_INT 1
36309: PLUS
36310: PPUSH
36311: LD_VAR 0 9
36315: PPUSH
36316: CALL_OW 2
36320: ST_TO_ADDR
36321: GO 36249
36323: POP
36324: POP
// if tmp then
36325: LD_VAR 0 19
36329: IFFALSE 36341
// f := tmp ;
36331: LD_ADDR_VAR 0 12
36335: PUSH
36336: LD_VAR 0 19
36340: ST_TO_ADDR
// end ; x := personel [ i ] ;
36341: LD_ADDR_VAR 0 13
36345: PUSH
36346: LD_VAR 0 6
36350: PUSH
36351: LD_VAR 0 8
36355: ARRAY
36356: ST_TO_ADDR
// if x = - 1 then
36357: LD_VAR 0 13
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: EQUAL
36366: IFFALSE 36575
// begin for j in f do
36368: LD_ADDR_VAR 0 9
36372: PUSH
36373: LD_VAR 0 12
36377: PUSH
36378: FOR_IN
36379: IFFALSE 36571
// repeat InitHc ;
36381: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36385: LD_VAR 0 9
36389: PPUSH
36390: CALL_OW 266
36394: PUSH
36395: LD_INT 5
36397: EQUAL
36398: IFFALSE 36468
// begin if UnitsInside ( j ) < 3 then
36400: LD_VAR 0 9
36404: PPUSH
36405: CALL_OW 313
36409: PUSH
36410: LD_INT 3
36412: LESS
36413: IFFALSE 36449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36415: LD_INT 0
36417: PPUSH
36418: LD_INT 5
36420: PUSH
36421: LD_INT 8
36423: PUSH
36424: LD_INT 9
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: LD_VAR 0 17
36436: ARRAY
36437: PPUSH
36438: LD_VAR 0 4
36442: PPUSH
36443: CALL_OW 380
36447: GO 36466
// PrepareHuman ( false , i , skill ) ;
36449: LD_INT 0
36451: PPUSH
36452: LD_VAR 0 8
36456: PPUSH
36457: LD_VAR 0 4
36461: PPUSH
36462: CALL_OW 380
// end else
36466: GO 36485
// PrepareHuman ( false , i , skill ) ;
36468: LD_INT 0
36470: PPUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_VAR 0 4
36480: PPUSH
36481: CALL_OW 380
// un := CreateHuman ;
36485: LD_ADDR_VAR 0 14
36489: PUSH
36490: CALL_OW 44
36494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36495: LD_ADDR_VAR 0 7
36499: PUSH
36500: LD_VAR 0 7
36504: PPUSH
36505: LD_INT 1
36507: PPUSH
36508: LD_VAR 0 14
36512: PPUSH
36513: CALL_OW 2
36517: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36518: LD_VAR 0 14
36522: PPUSH
36523: LD_VAR 0 9
36527: PPUSH
36528: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36532: LD_VAR 0 9
36536: PPUSH
36537: CALL_OW 313
36541: PUSH
36542: LD_INT 6
36544: EQUAL
36545: PUSH
36546: LD_VAR 0 9
36550: PPUSH
36551: CALL_OW 266
36555: PUSH
36556: LD_INT 32
36558: PUSH
36559: LD_INT 31
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: IN
36566: OR
36567: IFFALSE 36381
36569: GO 36378
36571: POP
36572: POP
// end else
36573: GO 36955
// for j = 1 to x do
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: DOUBLE
36581: LD_INT 1
36583: DEC
36584: ST_TO_ADDR
36585: LD_VAR 0 13
36589: PUSH
36590: FOR_TO
36591: IFFALSE 36953
// begin InitHc ;
36593: CALL_OW 19
// if not f then
36597: LD_VAR 0 12
36601: NOT
36602: IFFALSE 36691
// begin PrepareHuman ( false , i , skill ) ;
36604: LD_INT 0
36606: PPUSH
36607: LD_VAR 0 8
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: CALL_OW 380
// un := CreateHuman ;
36621: LD_ADDR_VAR 0 14
36625: PUSH
36626: CALL_OW 44
36630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36631: LD_ADDR_VAR 0 7
36635: PUSH
36636: LD_VAR 0 7
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_VAR 0 14
36648: PPUSH
36649: CALL_OW 2
36653: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36654: LD_VAR 0 14
36658: PPUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 250
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 251
36678: PPUSH
36679: LD_INT 10
36681: PPUSH
36682: LD_INT 0
36684: PPUSH
36685: CALL_OW 50
// continue ;
36689: GO 36590
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36691: LD_VAR 0 12
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PPUSH
36700: CALL_OW 313
36704: PUSH
36705: LD_VAR 0 12
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: PPUSH
36714: CALL_OW 266
36718: PUSH
36719: LD_INT 32
36721: PUSH
36722: LD_INT 31
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: IN
36729: AND
36730: PUSH
36731: LD_VAR 0 12
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PPUSH
36740: CALL_OW 313
36744: PUSH
36745: LD_INT 6
36747: EQUAL
36748: OR
36749: IFFALSE 36769
// f := Delete ( f , 1 ) ;
36751: LD_ADDR_VAR 0 12
36755: PUSH
36756: LD_VAR 0 12
36760: PPUSH
36761: LD_INT 1
36763: PPUSH
36764: CALL_OW 3
36768: ST_TO_ADDR
// if not f then
36769: LD_VAR 0 12
36773: NOT
36774: IFFALSE 36792
// begin x := x + 2 ;
36776: LD_ADDR_VAR 0 13
36780: PUSH
36781: LD_VAR 0 13
36785: PUSH
36786: LD_INT 2
36788: PLUS
36789: ST_TO_ADDR
// continue ;
36790: GO 36590
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36792: LD_VAR 0 12
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: CALL_OW 266
36805: PUSH
36806: LD_INT 5
36808: EQUAL
36809: IFFALSE 36883
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36811: LD_VAR 0 12
36815: PUSH
36816: LD_INT 1
36818: ARRAY
36819: PPUSH
36820: CALL_OW 313
36824: PUSH
36825: LD_INT 3
36827: LESS
36828: IFFALSE 36864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36830: LD_INT 0
36832: PPUSH
36833: LD_INT 5
36835: PUSH
36836: LD_INT 8
36838: PUSH
36839: LD_INT 9
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: LD_VAR 0 17
36851: ARRAY
36852: PPUSH
36853: LD_VAR 0 4
36857: PPUSH
36858: CALL_OW 380
36862: GO 36881
// PrepareHuman ( false , i , skill ) ;
36864: LD_INT 0
36866: PPUSH
36867: LD_VAR 0 8
36871: PPUSH
36872: LD_VAR 0 4
36876: PPUSH
36877: CALL_OW 380
// end else
36881: GO 36900
// PrepareHuman ( false , i , skill ) ;
36883: LD_INT 0
36885: PPUSH
36886: LD_VAR 0 8
36890: PPUSH
36891: LD_VAR 0 4
36895: PPUSH
36896: CALL_OW 380
// un := CreateHuman ;
36900: LD_ADDR_VAR 0 14
36904: PUSH
36905: CALL_OW 44
36909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36910: LD_ADDR_VAR 0 7
36914: PUSH
36915: LD_VAR 0 7
36919: PPUSH
36920: LD_INT 1
36922: PPUSH
36923: LD_VAR 0 14
36927: PPUSH
36928: CALL_OW 2
36932: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36933: LD_VAR 0 14
36937: PPUSH
36938: LD_VAR 0 12
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: PPUSH
36947: CALL_OW 52
// end ;
36951: GO 36590
36953: POP
36954: POP
// end ;
36955: GO 35892
36957: POP
36958: POP
// result := result ^ buildings ;
36959: LD_ADDR_VAR 0 7
36963: PUSH
36964: LD_VAR 0 7
36968: PUSH
36969: LD_VAR 0 18
36973: ADD
36974: ST_TO_ADDR
// end else
36975: GO 37118
// begin for i = 1 to personel do
36977: LD_ADDR_VAR 0 8
36981: PUSH
36982: DOUBLE
36983: LD_INT 1
36985: DEC
36986: ST_TO_ADDR
36987: LD_VAR 0 6
36991: PUSH
36992: FOR_TO
36993: IFFALSE 37116
// begin if i > 4 then
36995: LD_VAR 0 8
36999: PUSH
37000: LD_INT 4
37002: GREATER
37003: IFFALSE 37007
// break ;
37005: GO 37116
// x := personel [ i ] ;
37007: LD_ADDR_VAR 0 13
37011: PUSH
37012: LD_VAR 0 6
37016: PUSH
37017: LD_VAR 0 8
37021: ARRAY
37022: ST_TO_ADDR
// if x = - 1 then
37023: LD_VAR 0 13
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: EQUAL
37032: IFFALSE 37036
// continue ;
37034: GO 36992
// PrepareHuman ( false , i , skill ) ;
37036: LD_INT 0
37038: PPUSH
37039: LD_VAR 0 8
37043: PPUSH
37044: LD_VAR 0 4
37048: PPUSH
37049: CALL_OW 380
// un := CreateHuman ;
37053: LD_ADDR_VAR 0 14
37057: PUSH
37058: CALL_OW 44
37062: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37063: LD_VAR 0 14
37067: PPUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: CALL_OW 250
37077: PPUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: CALL_OW 251
37087: PPUSH
37088: LD_INT 10
37090: PPUSH
37091: LD_INT 0
37093: PPUSH
37094: CALL_OW 50
// result := result ^ un ;
37098: LD_ADDR_VAR 0 7
37102: PUSH
37103: LD_VAR 0 7
37107: PUSH
37108: LD_VAR 0 14
37112: ADD
37113: ST_TO_ADDR
// end ;
37114: GO 36992
37116: POP
37117: POP
// end ; end ;
37118: LD_VAR 0 7
37122: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37123: LD_INT 0
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
// result := false ;
37141: LD_ADDR_VAR 0 3
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37149: LD_VAR 0 1
37153: NOT
37154: PUSH
37155: LD_VAR 0 1
37159: PPUSH
37160: CALL_OW 266
37164: PUSH
37165: LD_INT 32
37167: PUSH
37168: LD_INT 33
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: IN
37175: NOT
37176: OR
37177: IFFALSE 37181
// exit ;
37179: GO 38317
// nat := GetNation ( tower ) ;
37181: LD_ADDR_VAR 0 12
37185: PUSH
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 248
37195: ST_TO_ADDR
// side := GetSide ( tower ) ;
37196: LD_ADDR_VAR 0 16
37200: PUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 255
37210: ST_TO_ADDR
// x := GetX ( tower ) ;
37211: LD_ADDR_VAR 0 10
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 250
37225: ST_TO_ADDR
// y := GetY ( tower ) ;
37226: LD_ADDR_VAR 0 11
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 251
37240: ST_TO_ADDR
// if not x or not y then
37241: LD_VAR 0 10
37245: NOT
37246: PUSH
37247: LD_VAR 0 11
37251: NOT
37252: OR
37253: IFFALSE 37257
// exit ;
37255: GO 38317
// weapon := 0 ;
37257: LD_ADDR_VAR 0 18
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// fac_list := [ ] ;
37265: LD_ADDR_VAR 0 17
37269: PUSH
37270: EMPTY
37271: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37272: LD_ADDR_VAR 0 6
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 274
37286: PPUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: CALL 34895 0 2
37296: PPUSH
37297: LD_INT 30
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PPUSH
37307: CALL_OW 72
37311: ST_TO_ADDR
// if not factories then
37312: LD_VAR 0 6
37316: NOT
37317: IFFALSE 37321
// exit ;
37319: GO 38317
// for i in factories do
37321: LD_ADDR_VAR 0 8
37325: PUSH
37326: LD_VAR 0 6
37330: PUSH
37331: FOR_IN
37332: IFFALSE 37357
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37334: LD_ADDR_VAR 0 17
37338: PUSH
37339: LD_VAR 0 17
37343: PUSH
37344: LD_VAR 0 8
37348: PPUSH
37349: CALL_OW 478
37353: UNION
37354: ST_TO_ADDR
37355: GO 37331
37357: POP
37358: POP
// if not fac_list then
37359: LD_VAR 0 17
37363: NOT
37364: IFFALSE 37368
// exit ;
37366: GO 38317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: LD_INT 9
37381: PUSH
37382: LD_INT 10
37384: PUSH
37385: LD_INT 6
37387: PUSH
37388: LD_INT 7
37390: PUSH
37391: LD_INT 11
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 27
37405: PUSH
37406: LD_INT 28
37408: PUSH
37409: LD_INT 26
37411: PUSH
37412: LD_INT 30
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 43
37423: PUSH
37424: LD_INT 44
37426: PUSH
37427: LD_INT 46
37429: PUSH
37430: LD_INT 45
37432: PUSH
37433: LD_INT 47
37435: PUSH
37436: LD_INT 49
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: LD_VAR 0 12
37456: ARRAY
37457: ST_TO_ADDR
// for i in list do
37458: LD_ADDR_VAR 0 8
37462: PUSH
37463: LD_VAR 0 5
37467: PUSH
37468: FOR_IN
37469: IFFALSE 37502
// if not i in fac_list then
37471: LD_VAR 0 8
37475: PUSH
37476: LD_VAR 0 17
37480: IN
37481: NOT
37482: IFFALSE 37500
// list := list diff i ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_VAR 0 5
37493: PUSH
37494: LD_VAR 0 8
37498: DIFF
37499: ST_TO_ADDR
37500: GO 37468
37502: POP
37503: POP
// if not list then
37504: LD_VAR 0 5
37508: NOT
37509: IFFALSE 37513
// exit ;
37511: GO 38317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37513: LD_VAR 0 12
37517: PUSH
37518: LD_INT 3
37520: EQUAL
37521: PUSH
37522: LD_INT 49
37524: PUSH
37525: LD_VAR 0 5
37529: IN
37530: AND
37531: PUSH
37532: LD_INT 31
37534: PPUSH
37535: LD_VAR 0 16
37539: PPUSH
37540: CALL_OW 321
37544: PUSH
37545: LD_INT 2
37547: EQUAL
37548: AND
37549: IFFALSE 37609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37551: LD_INT 22
37553: PUSH
37554: LD_VAR 0 16
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 35
37565: PUSH
37566: LD_INT 49
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 91
37575: PUSH
37576: LD_VAR 0 1
37580: PUSH
37581: LD_INT 10
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PPUSH
37594: CALL_OW 69
37598: NOT
37599: IFFALSE 37609
// weapon := ru_time_lapser ;
37601: LD_ADDR_VAR 0 18
37605: PUSH
37606: LD_INT 49
37608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37609: LD_VAR 0 12
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: IN
37624: PUSH
37625: LD_INT 11
37627: PUSH
37628: LD_VAR 0 5
37632: IN
37633: PUSH
37634: LD_INT 30
37636: PUSH
37637: LD_VAR 0 5
37641: IN
37642: OR
37643: AND
37644: PUSH
37645: LD_INT 6
37647: PPUSH
37648: LD_VAR 0 16
37652: PPUSH
37653: CALL_OW 321
37657: PUSH
37658: LD_INT 2
37660: EQUAL
37661: AND
37662: IFFALSE 37827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37664: LD_INT 22
37666: PUSH
37667: LD_VAR 0 16
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 35
37681: PUSH
37682: LD_INT 11
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 35
37691: PUSH
37692: LD_INT 30
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 91
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: LD_INT 18
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: PPUSH
37725: CALL_OW 69
37729: NOT
37730: PUSH
37731: LD_INT 22
37733: PUSH
37734: LD_VAR 0 16
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 30
37748: PUSH
37749: LD_INT 32
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 30
37758: PUSH
37759: LD_INT 33
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 91
37773: PUSH
37774: LD_VAR 0 1
37778: PUSH
37779: LD_INT 12
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: PPUSH
37795: CALL_OW 69
37799: PUSH
37800: LD_INT 2
37802: GREATER
37803: AND
37804: IFFALSE 37827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37806: LD_ADDR_VAR 0 18
37810: PUSH
37811: LD_INT 11
37813: PUSH
37814: LD_INT 30
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_VAR 0 12
37825: ARRAY
37826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37827: LD_VAR 0 18
37831: NOT
37832: PUSH
37833: LD_INT 40
37835: PPUSH
37836: LD_VAR 0 16
37840: PPUSH
37841: CALL_OW 321
37845: PUSH
37846: LD_INT 2
37848: EQUAL
37849: AND
37850: PUSH
37851: LD_INT 7
37853: PUSH
37854: LD_VAR 0 5
37858: IN
37859: PUSH
37860: LD_INT 28
37862: PUSH
37863: LD_VAR 0 5
37867: IN
37868: OR
37869: PUSH
37870: LD_INT 45
37872: PUSH
37873: LD_VAR 0 5
37877: IN
37878: OR
37879: AND
37880: IFFALSE 38134
// begin hex := GetHexInfo ( x , y ) ;
37882: LD_ADDR_VAR 0 4
37886: PUSH
37887: LD_VAR 0 10
37891: PPUSH
37892: LD_VAR 0 11
37896: PPUSH
37897: CALL_OW 546
37901: ST_TO_ADDR
// if hex [ 1 ] then
37902: LD_VAR 0 4
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: IFFALSE 37914
// exit ;
37912: GO 38317
// height := hex [ 2 ] ;
37914: LD_ADDR_VAR 0 15
37918: PUSH
37919: LD_VAR 0 4
37923: PUSH
37924: LD_INT 2
37926: ARRAY
37927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37928: LD_ADDR_VAR 0 14
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: LD_INT 3
37941: PUSH
37942: LD_INT 5
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// for i in tmp do
37951: LD_ADDR_VAR 0 8
37955: PUSH
37956: LD_VAR 0 14
37960: PUSH
37961: FOR_IN
37962: IFFALSE 38132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_VAR 0 10
37973: PPUSH
37974: LD_VAR 0 8
37978: PPUSH
37979: LD_INT 5
37981: PPUSH
37982: CALL_OW 272
37986: PUSH
37987: LD_VAR 0 11
37991: PPUSH
37992: LD_VAR 0 8
37996: PPUSH
37997: LD_INT 5
37999: PPUSH
38000: CALL_OW 273
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38009: LD_VAR 0 9
38013: PUSH
38014: LD_INT 1
38016: ARRAY
38017: PPUSH
38018: LD_VAR 0 9
38022: PUSH
38023: LD_INT 2
38025: ARRAY
38026: PPUSH
38027: CALL_OW 488
38031: IFFALSE 38130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38033: LD_ADDR_VAR 0 4
38037: PUSH
38038: LD_VAR 0 9
38042: PUSH
38043: LD_INT 1
38045: ARRAY
38046: PPUSH
38047: LD_VAR 0 9
38051: PUSH
38052: LD_INT 2
38054: ARRAY
38055: PPUSH
38056: CALL_OW 546
38060: ST_TO_ADDR
// if hex [ 1 ] then
38061: LD_VAR 0 4
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: IFFALSE 38073
// continue ;
38071: GO 37961
// h := hex [ 2 ] ;
38073: LD_ADDR_VAR 0 13
38077: PUSH
38078: LD_VAR 0 4
38082: PUSH
38083: LD_INT 2
38085: ARRAY
38086: ST_TO_ADDR
// if h + 7 < height then
38087: LD_VAR 0 13
38091: PUSH
38092: LD_INT 7
38094: PLUS
38095: PUSH
38096: LD_VAR 0 15
38100: LESS
38101: IFFALSE 38130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38103: LD_ADDR_VAR 0 18
38107: PUSH
38108: LD_INT 7
38110: PUSH
38111: LD_INT 28
38113: PUSH
38114: LD_INT 45
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PUSH
38122: LD_VAR 0 12
38126: ARRAY
38127: ST_TO_ADDR
// break ;
38128: GO 38132
// end ; end ; end ;
38130: GO 37961
38132: POP
38133: POP
// end ; if not weapon then
38134: LD_VAR 0 18
38138: NOT
38139: IFFALSE 38199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38141: LD_ADDR_VAR 0 5
38145: PUSH
38146: LD_VAR 0 5
38150: PUSH
38151: LD_INT 11
38153: PUSH
38154: LD_INT 30
38156: PUSH
38157: LD_INT 49
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: DIFF
38165: ST_TO_ADDR
// if not list then
38166: LD_VAR 0 5
38170: NOT
38171: IFFALSE 38175
// exit ;
38173: GO 38317
// weapon := list [ rand ( 1 , list ) ] ;
38175: LD_ADDR_VAR 0 18
38179: PUSH
38180: LD_VAR 0 5
38184: PUSH
38185: LD_INT 1
38187: PPUSH
38188: LD_VAR 0 5
38192: PPUSH
38193: CALL_OW 12
38197: ARRAY
38198: ST_TO_ADDR
// end ; if weapon then
38199: LD_VAR 0 18
38203: IFFALSE 38317
// begin tmp := CostOfWeapon ( weapon ) ;
38205: LD_ADDR_VAR 0 14
38209: PUSH
38210: LD_VAR 0 18
38214: PPUSH
38215: CALL_OW 451
38219: ST_TO_ADDR
// j := GetBase ( tower ) ;
38220: LD_ADDR_VAR 0 9
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 274
38234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38235: LD_VAR 0 9
38239: PPUSH
38240: LD_INT 1
38242: PPUSH
38243: CALL_OW 275
38247: PUSH
38248: LD_VAR 0 14
38252: PUSH
38253: LD_INT 1
38255: ARRAY
38256: GREATEREQUAL
38257: PUSH
38258: LD_VAR 0 9
38262: PPUSH
38263: LD_INT 2
38265: PPUSH
38266: CALL_OW 275
38270: PUSH
38271: LD_VAR 0 14
38275: PUSH
38276: LD_INT 2
38278: ARRAY
38279: GREATEREQUAL
38280: AND
38281: PUSH
38282: LD_VAR 0 9
38286: PPUSH
38287: LD_INT 3
38289: PPUSH
38290: CALL_OW 275
38294: PUSH
38295: LD_VAR 0 14
38299: PUSH
38300: LD_INT 3
38302: ARRAY
38303: GREATEREQUAL
38304: AND
38305: IFFALSE 38317
// result := weapon ;
38307: LD_ADDR_VAR 0 3
38311: PUSH
38312: LD_VAR 0 18
38316: ST_TO_ADDR
// end ; end ;
38317: LD_VAR 0 3
38321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38322: LD_INT 0
38324: PPUSH
38325: PPUSH
// result := true ;
38326: LD_ADDR_VAR 0 3
38330: PUSH
38331: LD_INT 1
38333: ST_TO_ADDR
// if array1 = array2 then
38334: LD_VAR 0 1
38338: PUSH
38339: LD_VAR 0 2
38343: EQUAL
38344: IFFALSE 38404
// begin for i = 1 to array1 do
38346: LD_ADDR_VAR 0 4
38350: PUSH
38351: DOUBLE
38352: LD_INT 1
38354: DEC
38355: ST_TO_ADDR
38356: LD_VAR 0 1
38360: PUSH
38361: FOR_TO
38362: IFFALSE 38400
// if array1 [ i ] <> array2 [ i ] then
38364: LD_VAR 0 1
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PUSH
38375: LD_VAR 0 2
38379: PUSH
38380: LD_VAR 0 4
38384: ARRAY
38385: NONEQUAL
38386: IFFALSE 38398
// begin result := false ;
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: LD_INT 0
38395: ST_TO_ADDR
// break ;
38396: GO 38400
// end ;
38398: GO 38361
38400: POP
38401: POP
// end else
38402: GO 38412
// result := false ;
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// end ;
38412: LD_VAR 0 3
38416: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38417: LD_INT 0
38419: PPUSH
38420: PPUSH
38421: PPUSH
// pom := GetBase ( fac ) ;
38422: LD_ADDR_VAR 0 5
38426: PUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 274
38436: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38437: LD_ADDR_VAR 0 4
38441: PUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 1
38449: ARRAY
38450: PPUSH
38451: LD_VAR 0 2
38455: PUSH
38456: LD_INT 2
38458: ARRAY
38459: PPUSH
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 3
38467: ARRAY
38468: PPUSH
38469: LD_VAR 0 2
38473: PUSH
38474: LD_INT 4
38476: ARRAY
38477: PPUSH
38478: CALL_OW 449
38482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_VAR 0 5
38492: PPUSH
38493: LD_INT 1
38495: PPUSH
38496: CALL_OW 275
38500: PUSH
38501: LD_VAR 0 4
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: GREATEREQUAL
38510: PUSH
38511: LD_VAR 0 5
38515: PPUSH
38516: LD_INT 2
38518: PPUSH
38519: CALL_OW 275
38523: PUSH
38524: LD_VAR 0 4
38528: PUSH
38529: LD_INT 2
38531: ARRAY
38532: GREATEREQUAL
38533: AND
38534: PUSH
38535: LD_VAR 0 5
38539: PPUSH
38540: LD_INT 3
38542: PPUSH
38543: CALL_OW 275
38547: PUSH
38548: LD_VAR 0 4
38552: PUSH
38553: LD_INT 3
38555: ARRAY
38556: GREATEREQUAL
38557: AND
38558: ST_TO_ADDR
// end ;
38559: LD_VAR 0 3
38563: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38564: LD_INT 0
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
// pom := GetBase ( building ) ;
38570: LD_ADDR_VAR 0 3
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 274
38584: ST_TO_ADDR
// if not pom then
38585: LD_VAR 0 3
38589: NOT
38590: IFFALSE 38594
// exit ;
38592: GO 38764
// btype := GetBType ( building ) ;
38594: LD_ADDR_VAR 0 5
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 266
38608: ST_TO_ADDR
// if btype = b_armoury then
38609: LD_VAR 0 5
38613: PUSH
38614: LD_INT 4
38616: EQUAL
38617: IFFALSE 38627
// btype := b_barracks ;
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_INT 5
38626: ST_TO_ADDR
// if btype = b_depot then
38627: LD_VAR 0 5
38631: PUSH
38632: LD_INT 0
38634: EQUAL
38635: IFFALSE 38645
// btype := b_warehouse ;
38637: LD_ADDR_VAR 0 5
38641: PUSH
38642: LD_INT 1
38644: ST_TO_ADDR
// if btype = b_workshop then
38645: LD_VAR 0 5
38649: PUSH
38650: LD_INT 2
38652: EQUAL
38653: IFFALSE 38663
// btype := b_factory ;
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: LD_INT 3
38662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38663: LD_ADDR_VAR 0 4
38667: PUSH
38668: LD_VAR 0 5
38672: PPUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 248
38682: PPUSH
38683: CALL_OW 450
38687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38688: LD_ADDR_VAR 0 2
38692: PUSH
38693: LD_VAR 0 3
38697: PPUSH
38698: LD_INT 1
38700: PPUSH
38701: CALL_OW 275
38705: PUSH
38706: LD_VAR 0 4
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: GREATEREQUAL
38715: PUSH
38716: LD_VAR 0 3
38720: PPUSH
38721: LD_INT 2
38723: PPUSH
38724: CALL_OW 275
38728: PUSH
38729: LD_VAR 0 4
38733: PUSH
38734: LD_INT 2
38736: ARRAY
38737: GREATEREQUAL
38738: AND
38739: PUSH
38740: LD_VAR 0 3
38744: PPUSH
38745: LD_INT 3
38747: PPUSH
38748: CALL_OW 275
38752: PUSH
38753: LD_VAR 0 4
38757: PUSH
38758: LD_INT 3
38760: ARRAY
38761: GREATEREQUAL
38762: AND
38763: ST_TO_ADDR
// end ;
38764: LD_VAR 0 2
38768: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38769: LD_INT 0
38771: PPUSH
38772: PPUSH
38773: PPUSH
// pom := GetBase ( building ) ;
38774: LD_ADDR_VAR 0 4
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 274
38788: ST_TO_ADDR
// if not pom then
38789: LD_VAR 0 4
38793: NOT
38794: IFFALSE 38798
// exit ;
38796: GO 38899
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38798: LD_ADDR_VAR 0 5
38802: PUSH
38803: LD_VAR 0 2
38807: PPUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: CALL_OW 248
38817: PPUSH
38818: CALL_OW 450
38822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38823: LD_ADDR_VAR 0 3
38827: PUSH
38828: LD_VAR 0 4
38832: PPUSH
38833: LD_INT 1
38835: PPUSH
38836: CALL_OW 275
38840: PUSH
38841: LD_VAR 0 5
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: GREATEREQUAL
38850: PUSH
38851: LD_VAR 0 4
38855: PPUSH
38856: LD_INT 2
38858: PPUSH
38859: CALL_OW 275
38863: PUSH
38864: LD_VAR 0 5
38868: PUSH
38869: LD_INT 2
38871: ARRAY
38872: GREATEREQUAL
38873: AND
38874: PUSH
38875: LD_VAR 0 4
38879: PPUSH
38880: LD_INT 3
38882: PPUSH
38883: CALL_OW 275
38887: PUSH
38888: LD_VAR 0 5
38892: PUSH
38893: LD_INT 3
38895: ARRAY
38896: GREATEREQUAL
38897: AND
38898: ST_TO_ADDR
// end ;
38899: LD_VAR 0 3
38903: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38904: LD_INT 0
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
// result := false ;
38916: LD_ADDR_VAR 0 6
38920: PUSH
38921: LD_INT 0
38923: ST_TO_ADDR
// if not base or not btype or not x or not y then
38924: LD_VAR 0 1
38928: NOT
38929: PUSH
38930: LD_VAR 0 2
38934: NOT
38935: OR
38936: PUSH
38937: LD_VAR 0 3
38941: NOT
38942: OR
38943: PUSH
38944: LD_VAR 0 4
38948: NOT
38949: OR
38950: IFFALSE 38954
// exit ;
38952: GO 39563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38954: LD_ADDR_VAR 0 12
38958: PUSH
38959: LD_VAR 0 2
38963: PPUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: LD_VAR 0 4
38973: PPUSH
38974: LD_VAR 0 5
38978: PPUSH
38979: LD_VAR 0 1
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: CALL_OW 248
38992: PPUSH
38993: LD_INT 0
38995: PPUSH
38996: CALL 40400 0 6
39000: ST_TO_ADDR
// if not hexes then
39001: LD_VAR 0 12
39005: NOT
39006: IFFALSE 39010
// exit ;
39008: GO 39563
// for i = 1 to hexes do
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: DOUBLE
39016: LD_INT 1
39018: DEC
39019: ST_TO_ADDR
39020: LD_VAR 0 12
39024: PUSH
39025: FOR_TO
39026: IFFALSE 39561
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39028: LD_ADDR_VAR 0 11
39032: PUSH
39033: LD_VAR 0 12
39037: PUSH
39038: LD_VAR 0 7
39042: ARRAY
39043: PUSH
39044: LD_INT 1
39046: ARRAY
39047: PPUSH
39048: LD_VAR 0 12
39052: PUSH
39053: LD_VAR 0 7
39057: ARRAY
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: PPUSH
39063: CALL_OW 428
39067: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39068: LD_VAR 0 12
39072: PUSH
39073: LD_VAR 0 7
39077: ARRAY
39078: PUSH
39079: LD_INT 1
39081: ARRAY
39082: PPUSH
39083: LD_VAR 0 12
39087: PUSH
39088: LD_VAR 0 7
39092: ARRAY
39093: PUSH
39094: LD_INT 2
39096: ARRAY
39097: PPUSH
39098: CALL_OW 351
39102: PUSH
39103: LD_VAR 0 12
39107: PUSH
39108: LD_VAR 0 7
39112: ARRAY
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: PPUSH
39118: LD_VAR 0 12
39122: PUSH
39123: LD_VAR 0 7
39127: ARRAY
39128: PUSH
39129: LD_INT 2
39131: ARRAY
39132: PPUSH
39133: CALL_OW 488
39137: NOT
39138: OR
39139: PUSH
39140: LD_VAR 0 11
39144: PPUSH
39145: CALL_OW 247
39149: PUSH
39150: LD_INT 3
39152: EQUAL
39153: OR
39154: IFFALSE 39160
// exit ;
39156: POP
39157: POP
39158: GO 39563
// if not tmp or not tmp in base then
39160: LD_VAR 0 11
39164: NOT
39165: PUSH
39166: LD_VAR 0 11
39170: PUSH
39171: LD_VAR 0 1
39175: IN
39176: NOT
39177: OR
39178: IFFALSE 39182
// continue ;
39180: GO 39025
// result := true ;
39182: LD_ADDR_VAR 0 6
39186: PUSH
39187: LD_INT 1
39189: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39190: LD_ADDR_VAR 0 15
39194: PUSH
39195: LD_VAR 0 1
39199: PPUSH
39200: LD_INT 22
39202: PUSH
39203: LD_VAR 0 11
39207: PPUSH
39208: CALL_OW 255
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 30
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 30
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PPUSH
39249: CALL_OW 72
39253: ST_TO_ADDR
// if dep then
39254: LD_VAR 0 15
39258: IFFALSE 39394
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39260: LD_ADDR_VAR 0 14
39264: PUSH
39265: LD_VAR 0 15
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: CALL_OW 250
39278: PPUSH
39279: LD_VAR 0 15
39283: PUSH
39284: LD_INT 1
39286: ARRAY
39287: PPUSH
39288: CALL_OW 254
39292: PPUSH
39293: LD_INT 5
39295: PPUSH
39296: CALL_OW 272
39300: PUSH
39301: LD_VAR 0 15
39305: PUSH
39306: LD_INT 1
39308: ARRAY
39309: PPUSH
39310: CALL_OW 251
39314: PPUSH
39315: LD_VAR 0 15
39319: PUSH
39320: LD_INT 1
39322: ARRAY
39323: PPUSH
39324: CALL_OW 254
39328: PPUSH
39329: LD_INT 5
39331: PPUSH
39332: CALL_OW 273
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39341: LD_VAR 0 14
39345: PUSH
39346: LD_INT 1
39348: ARRAY
39349: PPUSH
39350: LD_VAR 0 14
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: PPUSH
39359: CALL_OW 488
39363: IFFALSE 39394
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39365: LD_VAR 0 11
39369: PPUSH
39370: LD_VAR 0 14
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 14
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: CALL_OW 111
// continue ;
39392: GO 39025
// end ; end ; r := GetDir ( tmp ) ;
39394: LD_ADDR_VAR 0 13
39398: PUSH
39399: LD_VAR 0 11
39403: PPUSH
39404: CALL_OW 254
39408: ST_TO_ADDR
// if r = 5 then
39409: LD_VAR 0 13
39413: PUSH
39414: LD_INT 5
39416: EQUAL
39417: IFFALSE 39427
// r := 0 ;
39419: LD_ADDR_VAR 0 13
39423: PUSH
39424: LD_INT 0
39426: ST_TO_ADDR
// for j = r to 5 do
39427: LD_ADDR_VAR 0 8
39431: PUSH
39432: DOUBLE
39433: LD_VAR 0 13
39437: DEC
39438: ST_TO_ADDR
39439: LD_INT 5
39441: PUSH
39442: FOR_TO
39443: IFFALSE 39557
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39445: LD_ADDR_VAR 0 9
39449: PUSH
39450: LD_VAR 0 11
39454: PPUSH
39455: CALL_OW 250
39459: PPUSH
39460: LD_VAR 0 8
39464: PPUSH
39465: LD_INT 2
39467: PPUSH
39468: CALL_OW 272
39472: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39473: LD_ADDR_VAR 0 10
39477: PUSH
39478: LD_VAR 0 11
39482: PPUSH
39483: CALL_OW 251
39487: PPUSH
39488: LD_VAR 0 8
39492: PPUSH
39493: LD_INT 2
39495: PPUSH
39496: CALL_OW 273
39500: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39501: LD_VAR 0 9
39505: PPUSH
39506: LD_VAR 0 10
39510: PPUSH
39511: CALL_OW 488
39515: PUSH
39516: LD_VAR 0 9
39520: PPUSH
39521: LD_VAR 0 10
39525: PPUSH
39526: CALL_OW 428
39530: NOT
39531: AND
39532: IFFALSE 39555
// begin ComMoveXY ( tmp , _x , _y ) ;
39534: LD_VAR 0 11
39538: PPUSH
39539: LD_VAR 0 9
39543: PPUSH
39544: LD_VAR 0 10
39548: PPUSH
39549: CALL_OW 111
// break ;
39553: GO 39557
// end ; end ;
39555: GO 39442
39557: POP
39558: POP
// end ;
39559: GO 39025
39561: POP
39562: POP
// end ;
39563: LD_VAR 0 6
39567: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39568: LD_INT 0
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
// result := false ;
39580: LD_ADDR_VAR 0 6
39584: PUSH
39585: LD_INT 0
39587: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39588: LD_VAR 0 1
39592: NOT
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 266
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: IN
39614: NOT
39615: OR
39616: PUSH
39617: LD_VAR 0 2
39621: NOT
39622: OR
39623: PUSH
39624: LD_VAR 0 5
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: LD_INT 4
39643: PUSH
39644: LD_INT 5
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: IN
39655: NOT
39656: OR
39657: PUSH
39658: LD_VAR 0 3
39662: PPUSH
39663: LD_VAR 0 4
39667: PPUSH
39668: CALL_OW 488
39672: NOT
39673: OR
39674: IFFALSE 39678
// exit ;
39676: GO 40395
// pom := GetBase ( depot ) ;
39678: LD_ADDR_VAR 0 10
39682: PUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 274
39692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39693: LD_ADDR_VAR 0 11
39697: PUSH
39698: LD_VAR 0 2
39702: PPUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 248
39712: PPUSH
39713: CALL_OW 450
39717: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39718: LD_VAR 0 10
39722: PPUSH
39723: LD_INT 1
39725: PPUSH
39726: CALL_OW 275
39730: PUSH
39731: LD_VAR 0 11
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: GREATEREQUAL
39740: PUSH
39741: LD_VAR 0 10
39745: PPUSH
39746: LD_INT 2
39748: PPUSH
39749: CALL_OW 275
39753: PUSH
39754: LD_VAR 0 11
39758: PUSH
39759: LD_INT 2
39761: ARRAY
39762: GREATEREQUAL
39763: AND
39764: PUSH
39765: LD_VAR 0 10
39769: PPUSH
39770: LD_INT 3
39772: PPUSH
39773: CALL_OW 275
39777: PUSH
39778: LD_VAR 0 11
39782: PUSH
39783: LD_INT 3
39785: ARRAY
39786: GREATEREQUAL
39787: AND
39788: NOT
39789: IFFALSE 39793
// exit ;
39791: GO 40395
// if GetBType ( depot ) = b_depot then
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 266
39802: PUSH
39803: LD_INT 0
39805: EQUAL
39806: IFFALSE 39818
// dist := 28 else
39808: LD_ADDR_VAR 0 14
39812: PUSH
39813: LD_INT 28
39815: ST_TO_ADDR
39816: GO 39826
// dist := 36 ;
39818: LD_ADDR_VAR 0 14
39822: PUSH
39823: LD_INT 36
39825: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39826: LD_VAR 0 1
39830: PPUSH
39831: LD_VAR 0 3
39835: PPUSH
39836: LD_VAR 0 4
39840: PPUSH
39841: CALL_OW 297
39845: PUSH
39846: LD_VAR 0 14
39850: GREATER
39851: IFFALSE 39855
// exit ;
39853: GO 40395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39855: LD_ADDR_VAR 0 12
39859: PUSH
39860: LD_VAR 0 2
39864: PPUSH
39865: LD_VAR 0 3
39869: PPUSH
39870: LD_VAR 0 4
39874: PPUSH
39875: LD_VAR 0 5
39879: PPUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 248
39889: PPUSH
39890: LD_INT 0
39892: PPUSH
39893: CALL 40400 0 6
39897: ST_TO_ADDR
// if not hexes then
39898: LD_VAR 0 12
39902: NOT
39903: IFFALSE 39907
// exit ;
39905: GO 40395
// hex := GetHexInfo ( x , y ) ;
39907: LD_ADDR_VAR 0 15
39911: PUSH
39912: LD_VAR 0 3
39916: PPUSH
39917: LD_VAR 0 4
39921: PPUSH
39922: CALL_OW 546
39926: ST_TO_ADDR
// if hex [ 1 ] then
39927: LD_VAR 0 15
39931: PUSH
39932: LD_INT 1
39934: ARRAY
39935: IFFALSE 39939
// exit ;
39937: GO 40395
// height := hex [ 2 ] ;
39939: LD_ADDR_VAR 0 13
39943: PUSH
39944: LD_VAR 0 15
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: ST_TO_ADDR
// for i = 1 to hexes do
39953: LD_ADDR_VAR 0 7
39957: PUSH
39958: DOUBLE
39959: LD_INT 1
39961: DEC
39962: ST_TO_ADDR
39963: LD_VAR 0 12
39967: PUSH
39968: FOR_TO
39969: IFFALSE 40299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39971: LD_VAR 0 12
39975: PUSH
39976: LD_VAR 0 7
39980: ARRAY
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: PPUSH
39986: LD_VAR 0 12
39990: PUSH
39991: LD_VAR 0 7
39995: ARRAY
39996: PUSH
39997: LD_INT 2
39999: ARRAY
40000: PPUSH
40001: CALL_OW 488
40005: NOT
40006: PUSH
40007: LD_VAR 0 12
40011: PUSH
40012: LD_VAR 0 7
40016: ARRAY
40017: PUSH
40018: LD_INT 1
40020: ARRAY
40021: PPUSH
40022: LD_VAR 0 12
40026: PUSH
40027: LD_VAR 0 7
40031: ARRAY
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: PPUSH
40037: CALL_OW 428
40041: PUSH
40042: LD_INT 0
40044: GREATER
40045: OR
40046: PUSH
40047: LD_VAR 0 12
40051: PUSH
40052: LD_VAR 0 7
40056: ARRAY
40057: PUSH
40058: LD_INT 1
40060: ARRAY
40061: PPUSH
40062: LD_VAR 0 12
40066: PUSH
40067: LD_VAR 0 7
40071: ARRAY
40072: PUSH
40073: LD_INT 2
40075: ARRAY
40076: PPUSH
40077: CALL_OW 351
40081: OR
40082: IFFALSE 40088
// exit ;
40084: POP
40085: POP
40086: GO 40395
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40088: LD_ADDR_VAR 0 8
40092: PUSH
40093: LD_VAR 0 12
40097: PUSH
40098: LD_VAR 0 7
40102: ARRAY
40103: PUSH
40104: LD_INT 1
40106: ARRAY
40107: PPUSH
40108: LD_VAR 0 12
40112: PUSH
40113: LD_VAR 0 7
40117: ARRAY
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: PPUSH
40123: CALL_OW 546
40127: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40128: LD_VAR 0 8
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PUSH
40137: LD_VAR 0 8
40141: PUSH
40142: LD_INT 2
40144: ARRAY
40145: PUSH
40146: LD_VAR 0 13
40150: PUSH
40151: LD_INT 2
40153: PLUS
40154: GREATER
40155: OR
40156: PUSH
40157: LD_VAR 0 8
40161: PUSH
40162: LD_INT 2
40164: ARRAY
40165: PUSH
40166: LD_VAR 0 13
40170: PUSH
40171: LD_INT 2
40173: MINUS
40174: LESS
40175: OR
40176: PUSH
40177: LD_VAR 0 8
40181: PUSH
40182: LD_INT 3
40184: ARRAY
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 8
40191: PUSH
40192: LD_INT 9
40194: PUSH
40195: LD_INT 10
40197: PUSH
40198: LD_INT 11
40200: PUSH
40201: LD_INT 12
40203: PUSH
40204: LD_INT 13
40206: PUSH
40207: LD_INT 16
40209: PUSH
40210: LD_INT 17
40212: PUSH
40213: LD_INT 18
40215: PUSH
40216: LD_INT 19
40218: PUSH
40219: LD_INT 20
40221: PUSH
40222: LD_INT 21
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: IN
40240: NOT
40241: OR
40242: PUSH
40243: LD_VAR 0 8
40247: PUSH
40248: LD_INT 5
40250: ARRAY
40251: NOT
40252: OR
40253: PUSH
40254: LD_VAR 0 8
40258: PUSH
40259: LD_INT 6
40261: ARRAY
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 7
40271: PUSH
40272: LD_INT 9
40274: PUSH
40275: LD_INT 10
40277: PUSH
40278: LD_INT 11
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: IN
40289: NOT
40290: OR
40291: IFFALSE 40297
// exit ;
40293: POP
40294: POP
40295: GO 40395
// end ;
40297: GO 39968
40299: POP
40300: POP
// side := GetSide ( depot ) ;
40301: LD_ADDR_VAR 0 9
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 255
40315: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40316: LD_VAR 0 9
40320: PPUSH
40321: LD_VAR 0 3
40325: PPUSH
40326: LD_VAR 0 4
40330: PPUSH
40331: LD_INT 20
40333: PPUSH
40334: CALL 33049 0 4
40338: PUSH
40339: LD_INT 4
40341: ARRAY
40342: IFFALSE 40346
// exit ;
40344: GO 40395
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40346: LD_VAR 0 2
40350: PUSH
40351: LD_INT 29
40353: PUSH
40354: LD_INT 30
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: IN
40361: PUSH
40362: LD_VAR 0 3
40366: PPUSH
40367: LD_VAR 0 4
40371: PPUSH
40372: LD_VAR 0 9
40376: PPUSH
40377: CALL_OW 440
40381: NOT
40382: AND
40383: IFFALSE 40387
// exit ;
40385: GO 40395
// result := true ;
40387: LD_ADDR_VAR 0 6
40391: PUSH
40392: LD_INT 1
40394: ST_TO_ADDR
// end ;
40395: LD_VAR 0 6
40399: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40400: LD_INT 0
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
// result = [ ] ;
40460: LD_ADDR_VAR 0 7
40464: PUSH
40465: EMPTY
40466: ST_TO_ADDR
// temp_list = [ ] ;
40467: LD_ADDR_VAR 0 9
40471: PUSH
40472: EMPTY
40473: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40474: LD_VAR 0 4
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: LD_INT 5
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: IN
40505: NOT
40506: PUSH
40507: LD_VAR 0 1
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: IN
40522: PUSH
40523: LD_VAR 0 5
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: IN
40542: NOT
40543: AND
40544: OR
40545: IFFALSE 40549
// exit ;
40547: GO 58940
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40549: LD_VAR 0 1
40553: PUSH
40554: LD_INT 6
40556: PUSH
40557: LD_INT 7
40559: PUSH
40560: LD_INT 8
40562: PUSH
40563: LD_INT 13
40565: PUSH
40566: LD_INT 12
40568: PUSH
40569: LD_INT 15
40571: PUSH
40572: LD_INT 11
40574: PUSH
40575: LD_INT 14
40577: PUSH
40578: LD_INT 10
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: IN
40592: IFFALSE 40602
// btype = b_lab ;
40594: LD_ADDR_VAR 0 1
40598: PUSH
40599: LD_INT 6
40601: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40602: LD_VAR 0 6
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: IN
40621: NOT
40622: PUSH
40623: LD_VAR 0 1
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: LD_INT 6
40642: PUSH
40643: LD_INT 36
40645: PUSH
40646: LD_INT 4
40648: PUSH
40649: LD_INT 5
40651: PUSH
40652: LD_INT 31
40654: PUSH
40655: LD_INT 32
40657: PUSH
40658: LD_INT 33
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: IN
40674: NOT
40675: PUSH
40676: LD_VAR 0 6
40680: PUSH
40681: LD_INT 1
40683: EQUAL
40684: AND
40685: OR
40686: PUSH
40687: LD_VAR 0 1
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 3
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: IN
40702: NOT
40703: PUSH
40704: LD_VAR 0 6
40708: PUSH
40709: LD_INT 2
40711: EQUAL
40712: AND
40713: OR
40714: IFFALSE 40724
// mode = 0 ;
40716: LD_ADDR_VAR 0 6
40720: PUSH
40721: LD_INT 0
40723: ST_TO_ADDR
// case mode of 0 :
40724: LD_VAR 0 6
40728: PUSH
40729: LD_INT 0
40731: DOUBLE
40732: EQUAL
40733: IFTRUE 40737
40735: GO 52190
40737: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40738: LD_ADDR_VAR 0 11
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40931: LD_ADDR_VAR 0 12
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41127: LD_ADDR_VAR 0 13
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 3
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 3
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: NEG
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41326: LD_ADDR_VAR 0 14
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 3
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41522: LD_ADDR_VAR 0 15
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41715: LD_ADDR_VAR 0 16
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41908: LD_ADDR_VAR 0 17
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42138: LD_ADDR_VAR 0 18
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42368: LD_ADDR_VAR 0 19
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42598: LD_ADDR_VAR 0 20
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42828: LD_ADDR_VAR 0 21
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43058: LD_ADDR_VAR 0 22
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43288: LD_ADDR_VAR 0 23
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 3
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43568: LD_ADDR_VAR 0 24
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43844: LD_ADDR_VAR 0 25
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44118: LD_ADDR_VAR 0 26
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44394: LD_ADDR_VAR 0 27
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44674: LD_ADDR_VAR 0 28
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 3
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 3
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44956: LD_ADDR_VAR 0 29
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45235: LD_ADDR_VAR 0 30
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 3
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 31
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45791: LD_ADDR_VAR 0 32
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46069: LD_ADDR_VAR 0 33
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46348: LD_ADDR_VAR 0 34
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 3
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46628: LD_ADDR_VAR 0 35
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46740: LD_ADDR_VAR 0 36
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46852: LD_ADDR_VAR 0 37
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46964: LD_ADDR_VAR 0 38
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47076: LD_ADDR_VAR 0 39
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47188: LD_ADDR_VAR 0 40
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47300: LD_ADDR_VAR 0 41
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: NEG
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: NEG
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47650: LD_ADDR_VAR 0 42
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 3
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 3
47947: NEG
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48000: LD_ADDR_VAR 0 43
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 3
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48348: LD_ADDR_VAR 0 44
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: LD_INT 3
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48698: LD_ADDR_VAR 0 45
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49048: LD_ADDR_VAR 0 46
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49396: LD_ADDR_VAR 0 47
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49547: LD_ADDR_VAR 0 48
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49694: LD_ADDR_VAR 0 49
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49838: LD_ADDR_VAR 0 50
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49982: LD_ADDR_VAR 0 51
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50129: LD_ADDR_VAR 0 52
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50280: LD_ADDR_VAR 0 53
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50510: LD_ADDR_VAR 0 54
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50740: LD_ADDR_VAR 0 55
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50970: LD_ADDR_VAR 0 56
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51200: LD_ADDR_VAR 0 57
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51430: LD_ADDR_VAR 0 58
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51660: LD_ADDR_VAR 0 59
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51748: LD_ADDR_VAR 0 60
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51836: LD_ADDR_VAR 0 61
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51924: LD_ADDR_VAR 0 62
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52012: LD_ADDR_VAR 0 63
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52100: LD_ADDR_VAR 0 64
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// end ; 1 :
52188: GO 58085
52190: LD_INT 1
52192: DOUBLE
52193: EQUAL
52194: IFTRUE 52198
52196: GO 54821
52198: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52199: LD_ADDR_VAR 0 11
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52243: LD_ADDR_VAR 0 12
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52284: LD_ADDR_VAR 0 13
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52324: LD_ADDR_VAR 0 14
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52365: LD_ADDR_VAR 0 15
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52409: LD_ADDR_VAR 0 16
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52455: LD_ADDR_VAR 0 17
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52499: LD_ADDR_VAR 0 18
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52540: LD_ADDR_VAR 0 19
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52580: LD_ADDR_VAR 0 20
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52621: LD_ADDR_VAR 0 21
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52665: LD_ADDR_VAR 0 22
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 3
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52711: LD_ADDR_VAR 0 23
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 4
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52755: LD_ADDR_VAR 0 24
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52796: LD_ADDR_VAR 0 25
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 4
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: LD_INT 4
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52836: LD_ADDR_VAR 0 26
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 4
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52877: LD_ADDR_VAR 0 27
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52921: LD_ADDR_VAR 0 28
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 4
52952: NEG
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52967: LD_ADDR_VAR 0 29
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 4
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 4
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 5
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 5
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 4
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 6
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 6
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 5
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53122: LD_ADDR_VAR 0 30
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 4
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 4
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 5
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 5
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 5
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 6
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 6
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53265: LD_ADDR_VAR 0 31
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: LD_INT 4
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 4
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 5
53332: PUSH
53333: LD_INT 4
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: LD_INT 5
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: LD_INT 5
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 6
53362: PUSH
53363: LD_INT 5
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 6
53372: PUSH
53373: LD_INT 6
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 5
53382: PUSH
53383: LD_INT 6
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53404: LD_ADDR_VAR 0 32
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 4
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 5
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 5
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 6
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 6
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 5
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53547: LD_ADDR_VAR 0 33
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 4
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 4
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 5
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 5
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 6
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 6
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53702: LD_ADDR_VAR 0 34
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 4
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 4
53757: NEG
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 4
53769: NEG
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: LD_INT 5
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 5
53793: NEG
53794: PUSH
53795: LD_INT 4
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 5
53805: NEG
53806: PUSH
53807: LD_INT 5
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 5
53817: NEG
53818: PUSH
53819: LD_INT 6
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 6
53829: NEG
53830: PUSH
53831: LD_INT 5
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 6
53841: NEG
53842: PUSH
53843: LD_INT 6
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53865: LD_ADDR_VAR 0 41
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53909: LD_ADDR_VAR 0 42
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53950: LD_ADDR_VAR 0 43
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53990: LD_ADDR_VAR 0 44
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54031: LD_ADDR_VAR 0 45
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54075: LD_ADDR_VAR 0 46
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54121: LD_ADDR_VAR 0 47
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54154: LD_ADDR_VAR 0 48
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54185: LD_ADDR_VAR 0 49
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54214: LD_ADDR_VAR 0 50
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54243: LD_ADDR_VAR 0 51
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54274: LD_ADDR_VAR 0 52
54278: PUSH
54279: LD_INT 3
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54307: LD_ADDR_VAR 0 53
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54351: LD_ADDR_VAR 0 54
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54392: LD_ADDR_VAR 0 55
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54432: LD_ADDR_VAR 0 56
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54473: LD_ADDR_VAR 0 57
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54517: LD_ADDR_VAR 0 58
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54563: LD_ADDR_VAR 0 59
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54607: LD_ADDR_VAR 0 60
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54648: LD_ADDR_VAR 0 61
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54688: LD_ADDR_VAR 0 62
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54729: LD_ADDR_VAR 0 63
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54773: LD_ADDR_VAR 0 64
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// end ; 2 :
54819: GO 58085
54821: LD_INT 2
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54829
54827: GO 58084
54829: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54830: LD_ADDR_VAR 0 29
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 5
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 4
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: LD_INT 4
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 4
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 4
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 4
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 5
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 5
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 5
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 4
55169: NEG
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: NEG
55228: PUSH
55229: LD_INT 5
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 4
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 3
55251: NEG
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 4
55263: NEG
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: LD_INT 4
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 5
55287: NEG
55288: PUSH
55289: LD_INT 5
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 5
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 5
55311: NEG
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55368: LD_ADDR_VAR 0 30
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 4
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 5
55395: PUSH
55396: LD_INT 4
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 4
55415: PUSH
55416: LD_INT 5
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: LD_INT 4
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 5
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 5
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 4
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 5
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 5
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 5
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: LD_INT 4
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 4
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 5
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 4
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 5
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 5
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55915: LD_ADDR_VAR 0 31
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 4
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 4
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: LD_INT 5
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: LD_INT 4
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: NEG
56130: PUSH
56131: LD_INT 5
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 5
56177: NEG
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 5
56189: NEG
56190: PUSH
56191: LD_INT 5
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: LD_INT 5
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 5
56213: NEG
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 4
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 5
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 5
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56465: LD_ADDR_VAR 0 32
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 4
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 5
56528: NEG
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 4
56646: NEG
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 5
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 4
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 5
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 5
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 4
56877: PUSH
56878: LD_INT 4
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: PUSH
56898: LD_INT 4
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: LD_INT 5
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: LD_INT 5
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57012: LD_ADDR_VAR 0 33
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: LD_INT 5
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 4
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 5
57079: NEG
57080: PUSH
57081: LD_INT 4
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 5
57091: NEG
57092: PUSH
57093: LD_INT 5
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 5
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 5
57115: NEG
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 4
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 4
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 5
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 4
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 4
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 4
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 4
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 5
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 4
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 5
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57550: LD_ADDR_VAR 0 34
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 5
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 4
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 5
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 4
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 4
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 5
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 4
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: LD_INT 4
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 4
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 4
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 5
57991: NEG
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 5
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 5
58014: NEG
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// end ; end ;
58082: GO 58085
58084: POP
// case btype of b_depot , b_warehouse :
58085: LD_VAR 0 1
58089: PUSH
58090: LD_INT 0
58092: DOUBLE
58093: EQUAL
58094: IFTRUE 58104
58096: LD_INT 1
58098: DOUBLE
58099: EQUAL
58100: IFTRUE 58104
58102: GO 58305
58104: POP
// case nation of nation_american :
58105: LD_VAR 0 5
58109: PUSH
58110: LD_INT 1
58112: DOUBLE
58113: EQUAL
58114: IFTRUE 58118
58116: GO 58174
58118: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58119: LD_ADDR_VAR 0 9
58123: PUSH
58124: LD_VAR 0 11
58128: PUSH
58129: LD_VAR 0 12
58133: PUSH
58134: LD_VAR 0 13
58138: PUSH
58139: LD_VAR 0 14
58143: PUSH
58144: LD_VAR 0 15
58148: PUSH
58149: LD_VAR 0 16
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: PUSH
58162: LD_VAR 0 4
58166: PUSH
58167: LD_INT 1
58169: PLUS
58170: ARRAY
58171: ST_TO_ADDR
58172: GO 58303
58174: LD_INT 2
58176: DOUBLE
58177: EQUAL
58178: IFTRUE 58182
58180: GO 58238
58182: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58183: LD_ADDR_VAR 0 9
58187: PUSH
58188: LD_VAR 0 17
58192: PUSH
58193: LD_VAR 0 18
58197: PUSH
58198: LD_VAR 0 19
58202: PUSH
58203: LD_VAR 0 20
58207: PUSH
58208: LD_VAR 0 21
58212: PUSH
58213: LD_VAR 0 22
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: PUSH
58226: LD_VAR 0 4
58230: PUSH
58231: LD_INT 1
58233: PLUS
58234: ARRAY
58235: ST_TO_ADDR
58236: GO 58303
58238: LD_INT 3
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58246
58244: GO 58302
58246: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58247: LD_ADDR_VAR 0 9
58251: PUSH
58252: LD_VAR 0 23
58256: PUSH
58257: LD_VAR 0 24
58261: PUSH
58262: LD_VAR 0 25
58266: PUSH
58267: LD_VAR 0 26
58271: PUSH
58272: LD_VAR 0 27
58276: PUSH
58277: LD_VAR 0 28
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: PUSH
58290: LD_VAR 0 4
58294: PUSH
58295: LD_INT 1
58297: PLUS
58298: ARRAY
58299: ST_TO_ADDR
58300: GO 58303
58302: POP
58303: GO 58858
58305: LD_INT 2
58307: DOUBLE
58308: EQUAL
58309: IFTRUE 58319
58311: LD_INT 3
58313: DOUBLE
58314: EQUAL
58315: IFTRUE 58319
58317: GO 58375
58319: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58320: LD_ADDR_VAR 0 9
58324: PUSH
58325: LD_VAR 0 29
58329: PUSH
58330: LD_VAR 0 30
58334: PUSH
58335: LD_VAR 0 31
58339: PUSH
58340: LD_VAR 0 32
58344: PUSH
58345: LD_VAR 0 33
58349: PUSH
58350: LD_VAR 0 34
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: PUSH
58363: LD_VAR 0 4
58367: PUSH
58368: LD_INT 1
58370: PLUS
58371: ARRAY
58372: ST_TO_ADDR
58373: GO 58858
58375: LD_INT 16
58377: DOUBLE
58378: EQUAL
58379: IFTRUE 58437
58381: LD_INT 17
58383: DOUBLE
58384: EQUAL
58385: IFTRUE 58437
58387: LD_INT 18
58389: DOUBLE
58390: EQUAL
58391: IFTRUE 58437
58393: LD_INT 19
58395: DOUBLE
58396: EQUAL
58397: IFTRUE 58437
58399: LD_INT 22
58401: DOUBLE
58402: EQUAL
58403: IFTRUE 58437
58405: LD_INT 20
58407: DOUBLE
58408: EQUAL
58409: IFTRUE 58437
58411: LD_INT 21
58413: DOUBLE
58414: EQUAL
58415: IFTRUE 58437
58417: LD_INT 23
58419: DOUBLE
58420: EQUAL
58421: IFTRUE 58437
58423: LD_INT 24
58425: DOUBLE
58426: EQUAL
58427: IFTRUE 58437
58429: LD_INT 25
58431: DOUBLE
58432: EQUAL
58433: IFTRUE 58437
58435: GO 58493
58437: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58438: LD_ADDR_VAR 0 9
58442: PUSH
58443: LD_VAR 0 35
58447: PUSH
58448: LD_VAR 0 36
58452: PUSH
58453: LD_VAR 0 37
58457: PUSH
58458: LD_VAR 0 38
58462: PUSH
58463: LD_VAR 0 39
58467: PUSH
58468: LD_VAR 0 40
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: LD_VAR 0 4
58485: PUSH
58486: LD_INT 1
58488: PLUS
58489: ARRAY
58490: ST_TO_ADDR
58491: GO 58858
58493: LD_INT 6
58495: DOUBLE
58496: EQUAL
58497: IFTRUE 58549
58499: LD_INT 7
58501: DOUBLE
58502: EQUAL
58503: IFTRUE 58549
58505: LD_INT 8
58507: DOUBLE
58508: EQUAL
58509: IFTRUE 58549
58511: LD_INT 13
58513: DOUBLE
58514: EQUAL
58515: IFTRUE 58549
58517: LD_INT 12
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58549
58523: LD_INT 15
58525: DOUBLE
58526: EQUAL
58527: IFTRUE 58549
58529: LD_INT 11
58531: DOUBLE
58532: EQUAL
58533: IFTRUE 58549
58535: LD_INT 14
58537: DOUBLE
58538: EQUAL
58539: IFTRUE 58549
58541: LD_INT 10
58543: DOUBLE
58544: EQUAL
58545: IFTRUE 58549
58547: GO 58605
58549: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58550: LD_ADDR_VAR 0 9
58554: PUSH
58555: LD_VAR 0 41
58559: PUSH
58560: LD_VAR 0 42
58564: PUSH
58565: LD_VAR 0 43
58569: PUSH
58570: LD_VAR 0 44
58574: PUSH
58575: LD_VAR 0 45
58579: PUSH
58580: LD_VAR 0 46
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: PUSH
58593: LD_VAR 0 4
58597: PUSH
58598: LD_INT 1
58600: PLUS
58601: ARRAY
58602: ST_TO_ADDR
58603: GO 58858
58605: LD_INT 36
58607: DOUBLE
58608: EQUAL
58609: IFTRUE 58613
58611: GO 58669
58613: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58614: LD_ADDR_VAR 0 9
58618: PUSH
58619: LD_VAR 0 47
58623: PUSH
58624: LD_VAR 0 48
58628: PUSH
58629: LD_VAR 0 49
58633: PUSH
58634: LD_VAR 0 50
58638: PUSH
58639: LD_VAR 0 51
58643: PUSH
58644: LD_VAR 0 52
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: LD_VAR 0 4
58661: PUSH
58662: LD_INT 1
58664: PLUS
58665: ARRAY
58666: ST_TO_ADDR
58667: GO 58858
58669: LD_INT 4
58671: DOUBLE
58672: EQUAL
58673: IFTRUE 58695
58675: LD_INT 5
58677: DOUBLE
58678: EQUAL
58679: IFTRUE 58695
58681: LD_INT 34
58683: DOUBLE
58684: EQUAL
58685: IFTRUE 58695
58687: LD_INT 37
58689: DOUBLE
58690: EQUAL
58691: IFTRUE 58695
58693: GO 58751
58695: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58696: LD_ADDR_VAR 0 9
58700: PUSH
58701: LD_VAR 0 53
58705: PUSH
58706: LD_VAR 0 54
58710: PUSH
58711: LD_VAR 0 55
58715: PUSH
58716: LD_VAR 0 56
58720: PUSH
58721: LD_VAR 0 57
58725: PUSH
58726: LD_VAR 0 58
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: PUSH
58739: LD_VAR 0 4
58743: PUSH
58744: LD_INT 1
58746: PLUS
58747: ARRAY
58748: ST_TO_ADDR
58749: GO 58858
58751: LD_INT 31
58753: DOUBLE
58754: EQUAL
58755: IFTRUE 58801
58757: LD_INT 32
58759: DOUBLE
58760: EQUAL
58761: IFTRUE 58801
58763: LD_INT 33
58765: DOUBLE
58766: EQUAL
58767: IFTRUE 58801
58769: LD_INT 27
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58801
58775: LD_INT 26
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58801
58781: LD_INT 28
58783: DOUBLE
58784: EQUAL
58785: IFTRUE 58801
58787: LD_INT 29
58789: DOUBLE
58790: EQUAL
58791: IFTRUE 58801
58793: LD_INT 30
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58801
58799: GO 58857
58801: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58802: LD_ADDR_VAR 0 9
58806: PUSH
58807: LD_VAR 0 59
58811: PUSH
58812: LD_VAR 0 60
58816: PUSH
58817: LD_VAR 0 61
58821: PUSH
58822: LD_VAR 0 62
58826: PUSH
58827: LD_VAR 0 63
58831: PUSH
58832: LD_VAR 0 64
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: PUSH
58845: LD_VAR 0 4
58849: PUSH
58850: LD_INT 1
58852: PLUS
58853: ARRAY
58854: ST_TO_ADDR
58855: GO 58858
58857: POP
// temp_list2 = [ ] ;
58858: LD_ADDR_VAR 0 10
58862: PUSH
58863: EMPTY
58864: ST_TO_ADDR
// for i in temp_list do
58865: LD_ADDR_VAR 0 8
58869: PUSH
58870: LD_VAR 0 9
58874: PUSH
58875: FOR_IN
58876: IFFALSE 58928
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58878: LD_ADDR_VAR 0 10
58882: PUSH
58883: LD_VAR 0 10
58887: PUSH
58888: LD_VAR 0 8
58892: PUSH
58893: LD_INT 1
58895: ARRAY
58896: PUSH
58897: LD_VAR 0 2
58901: PLUS
58902: PUSH
58903: LD_VAR 0 8
58907: PUSH
58908: LD_INT 2
58910: ARRAY
58911: PUSH
58912: LD_VAR 0 3
58916: PLUS
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: EMPTY
58923: LIST
58924: ADD
58925: ST_TO_ADDR
58926: GO 58875
58928: POP
58929: POP
// result = temp_list2 ;
58930: LD_ADDR_VAR 0 7
58934: PUSH
58935: LD_VAR 0 10
58939: ST_TO_ADDR
// end ;
58940: LD_VAR 0 7
58944: RET
// export function EnemyInRange ( unit , dist ) ; begin
58945: LD_INT 0
58947: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58948: LD_ADDR_VAR 0 3
58952: PUSH
58953: LD_VAR 0 1
58957: PPUSH
58958: CALL_OW 255
58962: PPUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 250
58972: PPUSH
58973: LD_VAR 0 1
58977: PPUSH
58978: CALL_OW 251
58982: PPUSH
58983: LD_VAR 0 2
58987: PPUSH
58988: CALL 33049 0 4
58992: PUSH
58993: LD_INT 4
58995: ARRAY
58996: ST_TO_ADDR
// end ;
58997: LD_VAR 0 3
59001: RET
// export function PlayerSeeMe ( unit ) ; begin
59002: LD_INT 0
59004: PPUSH
// result := See ( your_side , unit ) ;
59005: LD_ADDR_VAR 0 2
59009: PUSH
59010: LD_OWVAR 2
59014: PPUSH
59015: LD_VAR 0 1
59019: PPUSH
59020: CALL_OW 292
59024: ST_TO_ADDR
// end ;
59025: LD_VAR 0 2
59029: RET
// export function ReverseDir ( unit ) ; begin
59030: LD_INT 0
59032: PPUSH
// if not unit then
59033: LD_VAR 0 1
59037: NOT
59038: IFFALSE 59042
// exit ;
59040: GO 59065
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59042: LD_ADDR_VAR 0 2
59046: PUSH
59047: LD_VAR 0 1
59051: PPUSH
59052: CALL_OW 254
59056: PUSH
59057: LD_INT 3
59059: PLUS
59060: PUSH
59061: LD_INT 6
59063: MOD
59064: ST_TO_ADDR
// end ;
59065: LD_VAR 0 2
59069: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59070: LD_INT 0
59072: PPUSH
59073: PPUSH
59074: PPUSH
59075: PPUSH
59076: PPUSH
// if not hexes then
59077: LD_VAR 0 2
59081: NOT
59082: IFFALSE 59086
// exit ;
59084: GO 59234
// dist := 9999 ;
59086: LD_ADDR_VAR 0 5
59090: PUSH
59091: LD_INT 9999
59093: ST_TO_ADDR
// for i = 1 to hexes do
59094: LD_ADDR_VAR 0 4
59098: PUSH
59099: DOUBLE
59100: LD_INT 1
59102: DEC
59103: ST_TO_ADDR
59104: LD_VAR 0 2
59108: PUSH
59109: FOR_TO
59110: IFFALSE 59222
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59112: LD_VAR 0 1
59116: PPUSH
59117: LD_VAR 0 2
59121: PUSH
59122: LD_VAR 0 4
59126: ARRAY
59127: PUSH
59128: LD_INT 1
59130: ARRAY
59131: PPUSH
59132: LD_VAR 0 2
59136: PUSH
59137: LD_VAR 0 4
59141: ARRAY
59142: PUSH
59143: LD_INT 2
59145: ARRAY
59146: PPUSH
59147: CALL_OW 297
59151: PUSH
59152: LD_VAR 0 5
59156: LESS
59157: IFFALSE 59220
// begin hex := hexes [ i ] ;
59159: LD_ADDR_VAR 0 7
59163: PUSH
59164: LD_VAR 0 2
59168: PUSH
59169: LD_VAR 0 4
59173: ARRAY
59174: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59175: LD_ADDR_VAR 0 5
59179: PUSH
59180: LD_VAR 0 1
59184: PPUSH
59185: LD_VAR 0 2
59189: PUSH
59190: LD_VAR 0 4
59194: ARRAY
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: PPUSH
59200: LD_VAR 0 2
59204: PUSH
59205: LD_VAR 0 4
59209: ARRAY
59210: PUSH
59211: LD_INT 2
59213: ARRAY
59214: PPUSH
59215: CALL_OW 297
59219: ST_TO_ADDR
// end ; end ;
59220: GO 59109
59222: POP
59223: POP
// result := hex ;
59224: LD_ADDR_VAR 0 3
59228: PUSH
59229: LD_VAR 0 7
59233: ST_TO_ADDR
// end ;
59234: LD_VAR 0 3
59238: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59239: LD_INT 0
59241: PPUSH
59242: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59243: LD_VAR 0 1
59247: NOT
59248: PUSH
59249: LD_VAR 0 1
59253: PUSH
59254: LD_INT 21
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 23
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PPUSH
59278: CALL_OW 69
59282: IN
59283: NOT
59284: OR
59285: IFFALSE 59289
// exit ;
59287: GO 59336
// for i = 1 to 3 do
59289: LD_ADDR_VAR 0 3
59293: PUSH
59294: DOUBLE
59295: LD_INT 1
59297: DEC
59298: ST_TO_ADDR
59299: LD_INT 3
59301: PUSH
59302: FOR_TO
59303: IFFALSE 59334
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59305: LD_VAR 0 1
59309: PPUSH
59310: CALL_OW 250
59314: PPUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 251
59324: PPUSH
59325: LD_INT 1
59327: PPUSH
59328: CALL_OW 453
59332: GO 59302
59334: POP
59335: POP
// end ;
59336: LD_VAR 0 2
59340: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59341: LD_INT 0
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59349: LD_VAR 0 1
59353: NOT
59354: PUSH
59355: LD_VAR 0 2
59359: NOT
59360: OR
59361: PUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 314
59371: OR
59372: IFFALSE 59376
// exit ;
59374: GO 59817
// x := GetX ( enemy_unit ) ;
59376: LD_ADDR_VAR 0 7
59380: PUSH
59381: LD_VAR 0 2
59385: PPUSH
59386: CALL_OW 250
59390: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59391: LD_ADDR_VAR 0 8
59395: PUSH
59396: LD_VAR 0 2
59400: PPUSH
59401: CALL_OW 251
59405: ST_TO_ADDR
// if not x or not y then
59406: LD_VAR 0 7
59410: NOT
59411: PUSH
59412: LD_VAR 0 8
59416: NOT
59417: OR
59418: IFFALSE 59422
// exit ;
59420: GO 59817
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59422: LD_ADDR_VAR 0 6
59426: PUSH
59427: LD_VAR 0 7
59431: PPUSH
59432: LD_INT 0
59434: PPUSH
59435: LD_INT 4
59437: PPUSH
59438: CALL_OW 272
59442: PUSH
59443: LD_VAR 0 8
59447: PPUSH
59448: LD_INT 0
59450: PPUSH
59451: LD_INT 4
59453: PPUSH
59454: CALL_OW 273
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_VAR 0 7
59467: PPUSH
59468: LD_INT 1
59470: PPUSH
59471: LD_INT 4
59473: PPUSH
59474: CALL_OW 272
59478: PUSH
59479: LD_VAR 0 8
59483: PPUSH
59484: LD_INT 1
59486: PPUSH
59487: LD_INT 4
59489: PPUSH
59490: CALL_OW 273
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_VAR 0 7
59503: PPUSH
59504: LD_INT 2
59506: PPUSH
59507: LD_INT 4
59509: PPUSH
59510: CALL_OW 272
59514: PUSH
59515: LD_VAR 0 8
59519: PPUSH
59520: LD_INT 2
59522: PPUSH
59523: LD_INT 4
59525: PPUSH
59526: CALL_OW 273
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_VAR 0 7
59539: PPUSH
59540: LD_INT 3
59542: PPUSH
59543: LD_INT 4
59545: PPUSH
59546: CALL_OW 272
59550: PUSH
59551: LD_VAR 0 8
59555: PPUSH
59556: LD_INT 3
59558: PPUSH
59559: LD_INT 4
59561: PPUSH
59562: CALL_OW 273
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_VAR 0 7
59575: PPUSH
59576: LD_INT 4
59578: PPUSH
59579: LD_INT 4
59581: PPUSH
59582: CALL_OW 272
59586: PUSH
59587: LD_VAR 0 8
59591: PPUSH
59592: LD_INT 4
59594: PPUSH
59595: LD_INT 4
59597: PPUSH
59598: CALL_OW 273
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_VAR 0 7
59611: PPUSH
59612: LD_INT 5
59614: PPUSH
59615: LD_INT 4
59617: PPUSH
59618: CALL_OW 272
59622: PUSH
59623: LD_VAR 0 8
59627: PPUSH
59628: LD_INT 5
59630: PPUSH
59631: LD_INT 4
59633: PPUSH
59634: CALL_OW 273
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// for i = tmp downto 1 do
59651: LD_ADDR_VAR 0 4
59655: PUSH
59656: DOUBLE
59657: LD_VAR 0 6
59661: INC
59662: ST_TO_ADDR
59663: LD_INT 1
59665: PUSH
59666: FOR_DOWNTO
59667: IFFALSE 59768
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59669: LD_VAR 0 6
59673: PUSH
59674: LD_VAR 0 4
59678: ARRAY
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PPUSH
59684: LD_VAR 0 6
59688: PUSH
59689: LD_VAR 0 4
59693: ARRAY
59694: PUSH
59695: LD_INT 2
59697: ARRAY
59698: PPUSH
59699: CALL_OW 488
59703: NOT
59704: PUSH
59705: LD_VAR 0 6
59709: PUSH
59710: LD_VAR 0 4
59714: ARRAY
59715: PUSH
59716: LD_INT 1
59718: ARRAY
59719: PPUSH
59720: LD_VAR 0 6
59724: PUSH
59725: LD_VAR 0 4
59729: ARRAY
59730: PUSH
59731: LD_INT 2
59733: ARRAY
59734: PPUSH
59735: CALL_OW 428
59739: PUSH
59740: LD_INT 0
59742: NONEQUAL
59743: OR
59744: IFFALSE 59766
// tmp := Delete ( tmp , i ) ;
59746: LD_ADDR_VAR 0 6
59750: PUSH
59751: LD_VAR 0 6
59755: PPUSH
59756: LD_VAR 0 4
59760: PPUSH
59761: CALL_OW 3
59765: ST_TO_ADDR
59766: GO 59666
59768: POP
59769: POP
// j := GetClosestHex ( unit , tmp ) ;
59770: LD_ADDR_VAR 0 5
59774: PUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_VAR 0 6
59784: PPUSH
59785: CALL 59070 0 2
59789: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59790: LD_VAR 0 1
59794: PPUSH
59795: LD_VAR 0 5
59799: PUSH
59800: LD_INT 1
59802: ARRAY
59803: PPUSH
59804: LD_VAR 0 5
59808: PUSH
59809: LD_INT 2
59811: ARRAY
59812: PPUSH
59813: CALL_OW 111
// end ;
59817: LD_VAR 0 3
59821: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59822: LD_INT 0
59824: PPUSH
59825: PPUSH
59826: PPUSH
// uc_side = 0 ;
59827: LD_ADDR_OWVAR 20
59831: PUSH
59832: LD_INT 0
59834: ST_TO_ADDR
// uc_nation = 0 ;
59835: LD_ADDR_OWVAR 21
59839: PUSH
59840: LD_INT 0
59842: ST_TO_ADDR
// InitHc_All ( ) ;
59843: CALL_OW 584
// InitVc ;
59847: CALL_OW 20
// if mastodonts then
59851: LD_VAR 0 6
59855: IFFALSE 59922
// for i = 1 to mastodonts do
59857: LD_ADDR_VAR 0 11
59861: PUSH
59862: DOUBLE
59863: LD_INT 1
59865: DEC
59866: ST_TO_ADDR
59867: LD_VAR 0 6
59871: PUSH
59872: FOR_TO
59873: IFFALSE 59920
// begin vc_chassis := 31 ;
59875: LD_ADDR_OWVAR 37
59879: PUSH
59880: LD_INT 31
59882: ST_TO_ADDR
// vc_control := control_rider ;
59883: LD_ADDR_OWVAR 38
59887: PUSH
59888: LD_INT 4
59890: ST_TO_ADDR
// animal := CreateVehicle ;
59891: LD_ADDR_VAR 0 12
59895: PUSH
59896: CALL_OW 45
59900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59901: LD_VAR 0 12
59905: PPUSH
59906: LD_VAR 0 8
59910: PPUSH
59911: LD_INT 0
59913: PPUSH
59914: CALL 62110 0 3
// end ;
59918: GO 59872
59920: POP
59921: POP
// if horses then
59922: LD_VAR 0 5
59926: IFFALSE 59993
// for i = 1 to horses do
59928: LD_ADDR_VAR 0 11
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_VAR 0 5
59942: PUSH
59943: FOR_TO
59944: IFFALSE 59991
// begin hc_class := 21 ;
59946: LD_ADDR_OWVAR 28
59950: PUSH
59951: LD_INT 21
59953: ST_TO_ADDR
// hc_gallery :=  ;
59954: LD_ADDR_OWVAR 33
59958: PUSH
59959: LD_STRING 
59961: ST_TO_ADDR
// animal := CreateHuman ;
59962: LD_ADDR_VAR 0 12
59966: PUSH
59967: CALL_OW 44
59971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59972: LD_VAR 0 12
59976: PPUSH
59977: LD_VAR 0 8
59981: PPUSH
59982: LD_INT 0
59984: PPUSH
59985: CALL 62110 0 3
// end ;
59989: GO 59943
59991: POP
59992: POP
// if birds then
59993: LD_VAR 0 1
59997: IFFALSE 60064
// for i = 1 to birds do
59999: LD_ADDR_VAR 0 11
60003: PUSH
60004: DOUBLE
60005: LD_INT 1
60007: DEC
60008: ST_TO_ADDR
60009: LD_VAR 0 1
60013: PUSH
60014: FOR_TO
60015: IFFALSE 60062
// begin hc_class = 18 ;
60017: LD_ADDR_OWVAR 28
60021: PUSH
60022: LD_INT 18
60024: ST_TO_ADDR
// hc_gallery =  ;
60025: LD_ADDR_OWVAR 33
60029: PUSH
60030: LD_STRING 
60032: ST_TO_ADDR
// animal := CreateHuman ;
60033: LD_ADDR_VAR 0 12
60037: PUSH
60038: CALL_OW 44
60042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60043: LD_VAR 0 12
60047: PPUSH
60048: LD_VAR 0 8
60052: PPUSH
60053: LD_INT 0
60055: PPUSH
60056: CALL 62110 0 3
// end ;
60060: GO 60014
60062: POP
60063: POP
// if tigers then
60064: LD_VAR 0 2
60068: IFFALSE 60152
// for i = 1 to tigers do
60070: LD_ADDR_VAR 0 11
60074: PUSH
60075: DOUBLE
60076: LD_INT 1
60078: DEC
60079: ST_TO_ADDR
60080: LD_VAR 0 2
60084: PUSH
60085: FOR_TO
60086: IFFALSE 60150
// begin hc_class = class_tiger ;
60088: LD_ADDR_OWVAR 28
60092: PUSH
60093: LD_INT 14
60095: ST_TO_ADDR
// hc_gallery =  ;
60096: LD_ADDR_OWVAR 33
60100: PUSH
60101: LD_STRING 
60103: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60104: LD_ADDR_OWVAR 35
60108: PUSH
60109: LD_INT 7
60111: NEG
60112: PPUSH
60113: LD_INT 7
60115: PPUSH
60116: CALL_OW 12
60120: ST_TO_ADDR
// animal := CreateHuman ;
60121: LD_ADDR_VAR 0 12
60125: PUSH
60126: CALL_OW 44
60130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60131: LD_VAR 0 12
60135: PPUSH
60136: LD_VAR 0 8
60140: PPUSH
60141: LD_INT 0
60143: PPUSH
60144: CALL 62110 0 3
// end ;
60148: GO 60085
60150: POP
60151: POP
// if apemans then
60152: LD_VAR 0 3
60156: IFFALSE 60279
// for i = 1 to apemans do
60158: LD_ADDR_VAR 0 11
60162: PUSH
60163: DOUBLE
60164: LD_INT 1
60166: DEC
60167: ST_TO_ADDR
60168: LD_VAR 0 3
60172: PUSH
60173: FOR_TO
60174: IFFALSE 60277
// begin hc_class = class_apeman ;
60176: LD_ADDR_OWVAR 28
60180: PUSH
60181: LD_INT 12
60183: ST_TO_ADDR
// hc_gallery =  ;
60184: LD_ADDR_OWVAR 33
60188: PUSH
60189: LD_STRING 
60191: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60192: LD_ADDR_OWVAR 35
60196: PUSH
60197: LD_INT 5
60199: NEG
60200: PPUSH
60201: LD_INT 5
60203: PPUSH
60204: CALL_OW 12
60208: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60209: LD_ADDR_OWVAR 31
60213: PUSH
60214: LD_INT 1
60216: PPUSH
60217: LD_INT 3
60219: PPUSH
60220: CALL_OW 12
60224: PUSH
60225: LD_INT 1
60227: PPUSH
60228: LD_INT 3
60230: PPUSH
60231: CALL_OW 12
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: ST_TO_ADDR
// animal := CreateHuman ;
60248: LD_ADDR_VAR 0 12
60252: PUSH
60253: CALL_OW 44
60257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60258: LD_VAR 0 12
60262: PPUSH
60263: LD_VAR 0 8
60267: PPUSH
60268: LD_INT 0
60270: PPUSH
60271: CALL 62110 0 3
// end ;
60275: GO 60173
60277: POP
60278: POP
// if enchidnas then
60279: LD_VAR 0 4
60283: IFFALSE 60350
// for i = 1 to enchidnas do
60285: LD_ADDR_VAR 0 11
60289: PUSH
60290: DOUBLE
60291: LD_INT 1
60293: DEC
60294: ST_TO_ADDR
60295: LD_VAR 0 4
60299: PUSH
60300: FOR_TO
60301: IFFALSE 60348
// begin hc_class = 13 ;
60303: LD_ADDR_OWVAR 28
60307: PUSH
60308: LD_INT 13
60310: ST_TO_ADDR
// hc_gallery =  ;
60311: LD_ADDR_OWVAR 33
60315: PUSH
60316: LD_STRING 
60318: ST_TO_ADDR
// animal := CreateHuman ;
60319: LD_ADDR_VAR 0 12
60323: PUSH
60324: CALL_OW 44
60328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60329: LD_VAR 0 12
60333: PPUSH
60334: LD_VAR 0 8
60338: PPUSH
60339: LD_INT 0
60341: PPUSH
60342: CALL 62110 0 3
// end ;
60346: GO 60300
60348: POP
60349: POP
// if fishes then
60350: LD_VAR 0 7
60354: IFFALSE 60421
// for i = 1 to fishes do
60356: LD_ADDR_VAR 0 11
60360: PUSH
60361: DOUBLE
60362: LD_INT 1
60364: DEC
60365: ST_TO_ADDR
60366: LD_VAR 0 7
60370: PUSH
60371: FOR_TO
60372: IFFALSE 60419
// begin hc_class = 20 ;
60374: LD_ADDR_OWVAR 28
60378: PUSH
60379: LD_INT 20
60381: ST_TO_ADDR
// hc_gallery =  ;
60382: LD_ADDR_OWVAR 33
60386: PUSH
60387: LD_STRING 
60389: ST_TO_ADDR
// animal := CreateHuman ;
60390: LD_ADDR_VAR 0 12
60394: PUSH
60395: CALL_OW 44
60399: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60400: LD_VAR 0 12
60404: PPUSH
60405: LD_VAR 0 9
60409: PPUSH
60410: LD_INT 0
60412: PPUSH
60413: CALL 62110 0 3
// end ;
60417: GO 60371
60419: POP
60420: POP
// end ;
60421: LD_VAR 0 10
60425: RET
// export function WantHeal ( sci , unit ) ; begin
60426: LD_INT 0
60428: PPUSH
// if GetTaskList ( sci ) > 0 then
60429: LD_VAR 0 1
60433: PPUSH
60434: CALL_OW 437
60438: PUSH
60439: LD_INT 0
60441: GREATER
60442: IFFALSE 60512
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60444: LD_VAR 0 1
60448: PPUSH
60449: CALL_OW 437
60453: PUSH
60454: LD_INT 1
60456: ARRAY
60457: PUSH
60458: LD_INT 1
60460: ARRAY
60461: PUSH
60462: LD_STRING l
60464: EQUAL
60465: PUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL_OW 437
60475: PUSH
60476: LD_INT 1
60478: ARRAY
60479: PUSH
60480: LD_INT 4
60482: ARRAY
60483: PUSH
60484: LD_VAR 0 2
60488: EQUAL
60489: AND
60490: IFFALSE 60502
// result := true else
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_INT 1
60499: ST_TO_ADDR
60500: GO 60510
// result := false ;
60502: LD_ADDR_VAR 0 3
60506: PUSH
60507: LD_INT 0
60509: ST_TO_ADDR
// end else
60510: GO 60520
// result := false ;
60512: LD_ADDR_VAR 0 3
60516: PUSH
60517: LD_INT 0
60519: ST_TO_ADDR
// end ;
60520: LD_VAR 0 3
60524: RET
// export function HealTarget ( sci ) ; begin
60525: LD_INT 0
60527: PPUSH
// if not sci then
60528: LD_VAR 0 1
60532: NOT
60533: IFFALSE 60537
// exit ;
60535: GO 60602
// result := 0 ;
60537: LD_ADDR_VAR 0 2
60541: PUSH
60542: LD_INT 0
60544: ST_TO_ADDR
// if GetTaskList ( sci ) then
60545: LD_VAR 0 1
60549: PPUSH
60550: CALL_OW 437
60554: IFFALSE 60602
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 437
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: PUSH
60570: LD_INT 1
60572: ARRAY
60573: PUSH
60574: LD_STRING l
60576: EQUAL
60577: IFFALSE 60602
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60579: LD_ADDR_VAR 0 2
60583: PUSH
60584: LD_VAR 0 1
60588: PPUSH
60589: CALL_OW 437
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: PUSH
60598: LD_INT 4
60600: ARRAY
60601: ST_TO_ADDR
// end ;
60602: LD_VAR 0 2
60606: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60607: LD_INT 0
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
// if not base_units then
60613: LD_VAR 0 1
60617: NOT
60618: IFFALSE 60622
// exit ;
60620: GO 60709
// result := false ;
60622: LD_ADDR_VAR 0 2
60626: PUSH
60627: LD_INT 0
60629: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: LD_VAR 0 1
60639: PPUSH
60640: LD_INT 21
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PPUSH
60650: CALL_OW 72
60654: ST_TO_ADDR
// if not tmp then
60655: LD_VAR 0 5
60659: NOT
60660: IFFALSE 60664
// exit ;
60662: GO 60709
// for i in tmp do
60664: LD_ADDR_VAR 0 3
60668: PUSH
60669: LD_VAR 0 5
60673: PUSH
60674: FOR_IN
60675: IFFALSE 60707
// begin result := EnemyInRange ( i , 22 ) ;
60677: LD_ADDR_VAR 0 2
60681: PUSH
60682: LD_VAR 0 3
60686: PPUSH
60687: LD_INT 22
60689: PPUSH
60690: CALL 58945 0 2
60694: ST_TO_ADDR
// if result then
60695: LD_VAR 0 2
60699: IFFALSE 60705
// exit ;
60701: POP
60702: POP
60703: GO 60709
// end ;
60705: GO 60674
60707: POP
60708: POP
// end ;
60709: LD_VAR 0 2
60713: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60714: LD_INT 0
60716: PPUSH
60717: PPUSH
// if not units then
60718: LD_VAR 0 1
60722: NOT
60723: IFFALSE 60727
// exit ;
60725: GO 60797
// result := [ ] ;
60727: LD_ADDR_VAR 0 3
60731: PUSH
60732: EMPTY
60733: ST_TO_ADDR
// for i in units do
60734: LD_ADDR_VAR 0 4
60738: PUSH
60739: LD_VAR 0 1
60743: PUSH
60744: FOR_IN
60745: IFFALSE 60795
// if GetTag ( i ) = tag then
60747: LD_VAR 0 4
60751: PPUSH
60752: CALL_OW 110
60756: PUSH
60757: LD_VAR 0 2
60761: EQUAL
60762: IFFALSE 60793
// result := Insert ( result , result + 1 , i ) ;
60764: LD_ADDR_VAR 0 3
60768: PUSH
60769: LD_VAR 0 3
60773: PPUSH
60774: LD_VAR 0 3
60778: PUSH
60779: LD_INT 1
60781: PLUS
60782: PPUSH
60783: LD_VAR 0 4
60787: PPUSH
60788: CALL_OW 2
60792: ST_TO_ADDR
60793: GO 60744
60795: POP
60796: POP
// end ;
60797: LD_VAR 0 3
60801: RET
// export function IsDriver ( un ) ; begin
60802: LD_INT 0
60804: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60805: LD_ADDR_VAR 0 2
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_INT 55
60817: PUSH
60818: EMPTY
60819: LIST
60820: PPUSH
60821: CALL_OW 69
60825: IN
60826: ST_TO_ADDR
// end ;
60827: LD_VAR 0 2
60831: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
// list := [ ] ;
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: EMPTY
60842: ST_TO_ADDR
// case d of 0 :
60843: LD_VAR 0 3
60847: PUSH
60848: LD_INT 0
60850: DOUBLE
60851: EQUAL
60852: IFTRUE 60856
60854: GO 60989
60856: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60857: LD_ADDR_VAR 0 5
60861: PUSH
60862: LD_VAR 0 1
60866: PUSH
60867: LD_INT 4
60869: MINUS
60870: PUSH
60871: LD_VAR 0 2
60875: PUSH
60876: LD_INT 4
60878: MINUS
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: LD_VAR 0 1
60892: PUSH
60893: LD_INT 3
60895: MINUS
60896: PUSH
60897: LD_VAR 0 2
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 4
60917: PLUS
60918: PUSH
60919: LD_VAR 0 2
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 1
60936: PUSH
60937: LD_INT 3
60939: PLUS
60940: PUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_INT 3
60948: PLUS
60949: PUSH
60950: LD_INT 5
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: LD_VAR 0 2
60967: PUSH
60968: LD_INT 4
60970: PLUS
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// end ; 1 :
60987: GO 61687
60989: LD_INT 1
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 60997
60995: GO 61130
60997: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60998: LD_ADDR_VAR 0 5
61002: PUSH
61003: LD_VAR 0 1
61007: PUSH
61008: LD_VAR 0 2
61012: PUSH
61013: LD_INT 4
61015: MINUS
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: LD_VAR 0 1
61029: PUSH
61030: LD_INT 3
61032: MINUS
61033: PUSH
61034: LD_VAR 0 2
61038: PUSH
61039: LD_INT 3
61041: MINUS
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_VAR 0 1
61055: PUSH
61056: LD_INT 4
61058: MINUS
61059: PUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: PUSH
61073: LD_VAR 0 1
61077: PUSH
61078: LD_VAR 0 2
61082: PUSH
61083: LD_INT 3
61085: PLUS
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_VAR 0 1
61099: PUSH
61100: LD_INT 4
61102: PLUS
61103: PUSH
61104: LD_VAR 0 2
61108: PUSH
61109: LD_INT 4
61111: PLUS
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: ST_TO_ADDR
// end ; 2 :
61128: GO 61687
61130: LD_INT 2
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61267
61138: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61139: LD_ADDR_VAR 0 5
61143: PUSH
61144: LD_VAR 0 1
61148: PUSH
61149: LD_VAR 0 2
61153: PUSH
61154: LD_INT 3
61156: MINUS
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: LIST
61165: PUSH
61166: LD_VAR 0 1
61170: PUSH
61171: LD_INT 4
61173: PLUS
61174: PUSH
61175: LD_VAR 0 2
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: LIST
61187: PUSH
61188: LD_VAR 0 1
61192: PUSH
61193: LD_VAR 0 2
61197: PUSH
61198: LD_INT 4
61200: PLUS
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: LD_INT 3
61217: MINUS
61218: PUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: LD_INT 4
61239: MINUS
61240: PUSH
61241: LD_VAR 0 2
61245: PUSH
61246: LD_INT 4
61248: MINUS
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: ST_TO_ADDR
// end ; 3 :
61265: GO 61687
61267: LD_INT 3
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61408
61275: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61276: LD_ADDR_VAR 0 5
61280: PUSH
61281: LD_VAR 0 1
61285: PUSH
61286: LD_INT 3
61288: PLUS
61289: PUSH
61290: LD_VAR 0 2
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: PUSH
61303: LD_VAR 0 1
61307: PUSH
61308: LD_INT 4
61310: PLUS
61311: PUSH
61312: LD_VAR 0 2
61316: PUSH
61317: LD_INT 4
61319: PLUS
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: PUSH
61329: LD_VAR 0 1
61333: PUSH
61334: LD_INT 4
61336: MINUS
61337: PUSH
61338: LD_VAR 0 2
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: PUSH
61351: LD_VAR 0 1
61355: PUSH
61356: LD_VAR 0 2
61360: PUSH
61361: LD_INT 4
61363: MINUS
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_INT 3
61380: MINUS
61381: PUSH
61382: LD_VAR 0 2
61386: PUSH
61387: LD_INT 3
61389: MINUS
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: ST_TO_ADDR
// end ; 4 :
61406: GO 61687
61408: LD_INT 4
61410: DOUBLE
61411: EQUAL
61412: IFTRUE 61416
61414: GO 61549
61416: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61417: LD_ADDR_VAR 0 5
61421: PUSH
61422: LD_VAR 0 1
61426: PUSH
61427: LD_VAR 0 2
61431: PUSH
61432: LD_INT 4
61434: PLUS
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: PUSH
61444: LD_VAR 0 1
61448: PUSH
61449: LD_INT 3
61451: PLUS
61452: PUSH
61453: LD_VAR 0 2
61457: PUSH
61458: LD_INT 3
61460: PLUS
61461: PUSH
61462: LD_INT 5
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: PUSH
61470: LD_VAR 0 1
61474: PUSH
61475: LD_INT 4
61477: PLUS
61478: PUSH
61479: LD_VAR 0 2
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: PUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_INT 3
61504: MINUS
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 4
61521: MINUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 4
61530: MINUS
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: ST_TO_ADDR
// end ; 5 :
61547: GO 61687
61549: LD_INT 5
61551: DOUBLE
61552: EQUAL
61553: IFTRUE 61557
61555: GO 61686
61557: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61558: LD_ADDR_VAR 0 5
61562: PUSH
61563: LD_VAR 0 1
61567: PUSH
61568: LD_INT 4
61570: MINUS
61571: PUSH
61572: LD_VAR 0 2
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: PUSH
61585: LD_VAR 0 1
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_INT 4
61597: MINUS
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: PUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_INT 4
61614: PLUS
61615: PUSH
61616: LD_VAR 0 2
61620: PUSH
61621: LD_INT 4
61623: PLUS
61624: PUSH
61625: LD_INT 5
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: PUSH
61633: LD_VAR 0 1
61637: PUSH
61638: LD_INT 3
61640: PLUS
61641: PUSH
61642: LD_VAR 0 2
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_VAR 0 1
61659: PUSH
61660: LD_VAR 0 2
61664: PUSH
61665: LD_INT 3
61667: PLUS
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// end ; end ;
61684: GO 61687
61686: POP
// result := list ;
61687: LD_ADDR_VAR 0 4
61691: PUSH
61692: LD_VAR 0 5
61696: ST_TO_ADDR
// end ;
61697: LD_VAR 0 4
61701: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61702: LD_INT 0
61704: PPUSH
61705: PPUSH
61706: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61707: LD_VAR 0 1
61711: NOT
61712: PUSH
61713: LD_VAR 0 2
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 4
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: IN
61736: NOT
61737: OR
61738: IFFALSE 61742
// exit ;
61740: GO 61834
// tmp := [ ] ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: EMPTY
61748: ST_TO_ADDR
// for i in units do
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_VAR 0 1
61758: PUSH
61759: FOR_IN
61760: IFFALSE 61803
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 5
61771: PPUSH
61772: LD_VAR 0 5
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: PPUSH
61781: LD_VAR 0 4
61785: PPUSH
61786: LD_VAR 0 2
61790: PPUSH
61791: CALL_OW 259
61795: PPUSH
61796: CALL_OW 2
61800: ST_TO_ADDR
61801: GO 61759
61803: POP
61804: POP
// if not tmp then
61805: LD_VAR 0 5
61809: NOT
61810: IFFALSE 61814
// exit ;
61812: GO 61834
// result := SortListByListDesc ( units , tmp ) ;
61814: LD_ADDR_VAR 0 3
61818: PUSH
61819: LD_VAR 0 1
61823: PPUSH
61824: LD_VAR 0 5
61828: PPUSH
61829: CALL_OW 77
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 3
61838: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
61843: PPUSH
// result := false ;
61844: LD_ADDR_VAR 0 3
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
// x := GetX ( building ) ;
61852: LD_ADDR_VAR 0 4
61856: PUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: CALL_OW 250
61866: ST_TO_ADDR
// y := GetY ( building ) ;
61867: LD_ADDR_VAR 0 5
61871: PUSH
61872: LD_VAR 0 2
61876: PPUSH
61877: CALL_OW 251
61881: ST_TO_ADDR
// if not building or not x or not y then
61882: LD_VAR 0 2
61886: NOT
61887: PUSH
61888: LD_VAR 0 4
61892: NOT
61893: OR
61894: PUSH
61895: LD_VAR 0 5
61899: NOT
61900: OR
61901: IFFALSE 61905
// exit ;
61903: GO 61997
// if GetTaskList ( unit ) then
61905: LD_VAR 0 1
61909: PPUSH
61910: CALL_OW 437
61914: IFFALSE 61997
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61916: LD_STRING e
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 437
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: EQUAL
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 437
61952: PUSH
61953: LD_INT 1
61955: ARRAY
61956: PUSH
61957: LD_INT 2
61959: ARRAY
61960: EQUAL
61961: AND
61962: PUSH
61963: LD_VAR 0 5
61967: PUSH
61968: LD_VAR 0 1
61972: PPUSH
61973: CALL_OW 437
61977: PUSH
61978: LD_INT 1
61980: ARRAY
61981: PUSH
61982: LD_INT 3
61984: ARRAY
61985: EQUAL
61986: AND
61987: IFFALSE 61997
// result := true end ;
61989: LD_ADDR_VAR 0 3
61993: PUSH
61994: LD_INT 1
61996: ST_TO_ADDR
// end ;
61997: LD_VAR 0 3
62001: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62002: LD_INT 0
62004: PPUSH
// result := false ;
62005: LD_ADDR_VAR 0 4
62009: PUSH
62010: LD_INT 0
62012: ST_TO_ADDR
// if GetTaskList ( unit ) then
62013: LD_VAR 0 1
62017: PPUSH
62018: CALL_OW 437
62022: IFFALSE 62105
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62024: LD_STRING M
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 437
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: EQUAL
62045: PUSH
62046: LD_VAR 0 2
62050: PUSH
62051: LD_VAR 0 1
62055: PPUSH
62056: CALL_OW 437
62060: PUSH
62061: LD_INT 1
62063: ARRAY
62064: PUSH
62065: LD_INT 2
62067: ARRAY
62068: EQUAL
62069: AND
62070: PUSH
62071: LD_VAR 0 3
62075: PUSH
62076: LD_VAR 0 1
62080: PPUSH
62081: CALL_OW 437
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PUSH
62090: LD_INT 3
62092: ARRAY
62093: EQUAL
62094: AND
62095: IFFALSE 62105
// result := true ;
62097: LD_ADDR_VAR 0 4
62101: PUSH
62102: LD_INT 1
62104: ST_TO_ADDR
// end ; end ;
62105: LD_VAR 0 4
62109: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62110: LD_INT 0
62112: PPUSH
62113: PPUSH
62114: PPUSH
62115: PPUSH
// if not unit or not area then
62116: LD_VAR 0 1
62120: NOT
62121: PUSH
62122: LD_VAR 0 2
62126: NOT
62127: OR
62128: IFFALSE 62132
// exit ;
62130: GO 62296
// tmp := AreaToList ( area , i ) ;
62132: LD_ADDR_VAR 0 6
62136: PUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 5
62146: PPUSH
62147: CALL_OW 517
62151: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62152: LD_ADDR_VAR 0 5
62156: PUSH
62157: DOUBLE
62158: LD_INT 1
62160: DEC
62161: ST_TO_ADDR
62162: LD_VAR 0 6
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: PUSH
62171: FOR_TO
62172: IFFALSE 62294
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62174: LD_ADDR_VAR 0 7
62178: PUSH
62179: LD_VAR 0 6
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PUSH
62188: LD_VAR 0 5
62192: ARRAY
62193: PUSH
62194: LD_VAR 0 6
62198: PUSH
62199: LD_INT 2
62201: ARRAY
62202: PUSH
62203: LD_VAR 0 5
62207: ARRAY
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62213: LD_VAR 0 7
62217: PUSH
62218: LD_INT 1
62220: ARRAY
62221: PPUSH
62222: LD_VAR 0 7
62226: PUSH
62227: LD_INT 2
62229: ARRAY
62230: PPUSH
62231: CALL_OW 428
62235: PUSH
62236: LD_INT 0
62238: EQUAL
62239: IFFALSE 62292
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62241: LD_VAR 0 1
62245: PPUSH
62246: LD_VAR 0 7
62250: PUSH
62251: LD_INT 1
62253: ARRAY
62254: PPUSH
62255: LD_VAR 0 7
62259: PUSH
62260: LD_INT 2
62262: ARRAY
62263: PPUSH
62264: LD_VAR 0 3
62268: PPUSH
62269: CALL_OW 48
// result := IsPlaced ( unit ) ;
62273: LD_ADDR_VAR 0 4
62277: PUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: CALL_OW 305
62287: ST_TO_ADDR
// exit ;
62288: POP
62289: POP
62290: GO 62296
// end ; end ;
62292: GO 62171
62294: POP
62295: POP
// end ;
62296: LD_VAR 0 4
62300: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62301: LD_INT 0
62303: PPUSH
62304: PPUSH
62305: PPUSH
// if not side or side > 8 then
62306: LD_VAR 0 1
62310: NOT
62311: PUSH
62312: LD_VAR 0 1
62316: PUSH
62317: LD_INT 8
62319: GREATER
62320: OR
62321: IFFALSE 62325
// exit ;
62323: GO 62512
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62325: LD_ADDR_VAR 0 4
62329: PUSH
62330: LD_INT 22
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 21
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PPUSH
62356: CALL_OW 69
62360: ST_TO_ADDR
// if not tmp then
62361: LD_VAR 0 4
62365: NOT
62366: IFFALSE 62370
// exit ;
62368: GO 62512
// enable_addtolog := true ;
62370: LD_ADDR_OWVAR 81
62374: PUSH
62375: LD_INT 1
62377: ST_TO_ADDR
// AddToLog ( [ ) ;
62378: LD_STRING [
62380: PPUSH
62381: CALL_OW 561
// for i in tmp do
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: LD_VAR 0 4
62394: PUSH
62395: FOR_IN
62396: IFFALSE 62503
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62398: LD_STRING [
62400: PUSH
62401: LD_VAR 0 3
62405: PPUSH
62406: CALL_OW 266
62410: STR
62411: PUSH
62412: LD_STRING , 
62414: STR
62415: PUSH
62416: LD_VAR 0 3
62420: PPUSH
62421: CALL_OW 250
62425: STR
62426: PUSH
62427: LD_STRING , 
62429: STR
62430: PUSH
62431: LD_VAR 0 3
62435: PPUSH
62436: CALL_OW 251
62440: STR
62441: PUSH
62442: LD_STRING , 
62444: STR
62445: PUSH
62446: LD_VAR 0 3
62450: PPUSH
62451: CALL_OW 254
62455: STR
62456: PUSH
62457: LD_STRING , 
62459: STR
62460: PUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: LD_INT 1
62468: PPUSH
62469: CALL_OW 268
62473: STR
62474: PUSH
62475: LD_STRING , 
62477: STR
62478: PUSH
62479: LD_VAR 0 3
62483: PPUSH
62484: LD_INT 2
62486: PPUSH
62487: CALL_OW 268
62491: STR
62492: PUSH
62493: LD_STRING ],
62495: STR
62496: PPUSH
62497: CALL_OW 561
// end ;
62501: GO 62395
62503: POP
62504: POP
// AddToLog ( ]; ) ;
62505: LD_STRING ];
62507: PPUSH
62508: CALL_OW 561
// end ;
62512: LD_VAR 0 2
62516: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62517: LD_INT 0
62519: PPUSH
62520: PPUSH
62521: PPUSH
62522: PPUSH
62523: PPUSH
// if not area or not rate or not max then
62524: LD_VAR 0 1
62528: NOT
62529: PUSH
62530: LD_VAR 0 2
62534: NOT
62535: OR
62536: PUSH
62537: LD_VAR 0 4
62541: NOT
62542: OR
62543: IFFALSE 62547
// exit ;
62545: GO 62739
// while 1 do
62547: LD_INT 1
62549: IFFALSE 62739
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62551: LD_ADDR_VAR 0 9
62555: PUSH
62556: LD_VAR 0 1
62560: PPUSH
62561: LD_INT 1
62563: PPUSH
62564: CALL_OW 287
62568: PUSH
62569: LD_INT 10
62571: MUL
62572: ST_TO_ADDR
// r := rate / 10 ;
62573: LD_ADDR_VAR 0 7
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 10
62585: DIVREAL
62586: ST_TO_ADDR
// time := 1 1$00 ;
62587: LD_ADDR_VAR 0 8
62591: PUSH
62592: LD_INT 2100
62594: ST_TO_ADDR
// if amount < min then
62595: LD_VAR 0 9
62599: PUSH
62600: LD_VAR 0 3
62604: LESS
62605: IFFALSE 62623
// r := r * 2 else
62607: LD_ADDR_VAR 0 7
62611: PUSH
62612: LD_VAR 0 7
62616: PUSH
62617: LD_INT 2
62619: MUL
62620: ST_TO_ADDR
62621: GO 62649
// if amount > max then
62623: LD_VAR 0 9
62627: PUSH
62628: LD_VAR 0 4
62632: GREATER
62633: IFFALSE 62649
// r := r / 2 ;
62635: LD_ADDR_VAR 0 7
62639: PUSH
62640: LD_VAR 0 7
62644: PUSH
62645: LD_INT 2
62647: DIVREAL
62648: ST_TO_ADDR
// time := time / r ;
62649: LD_ADDR_VAR 0 8
62653: PUSH
62654: LD_VAR 0 8
62658: PUSH
62659: LD_VAR 0 7
62663: DIVREAL
62664: ST_TO_ADDR
// if time < 0 then
62665: LD_VAR 0 8
62669: PUSH
62670: LD_INT 0
62672: LESS
62673: IFFALSE 62690
// time := time * - 1 ;
62675: LD_ADDR_VAR 0 8
62679: PUSH
62680: LD_VAR 0 8
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: MUL
62689: ST_TO_ADDR
// wait ( time ) ;
62690: LD_VAR 0 8
62694: PPUSH
62695: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62699: LD_INT 35
62701: PPUSH
62702: LD_INT 875
62704: PPUSH
62705: CALL_OW 12
62709: PPUSH
62710: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62714: LD_INT 1
62716: PPUSH
62717: LD_INT 5
62719: PPUSH
62720: CALL_OW 12
62724: PPUSH
62725: LD_VAR 0 1
62729: PPUSH
62730: LD_INT 1
62732: PPUSH
62733: CALL_OW 55
// end ;
62737: GO 62547
// end ;
62739: LD_VAR 0 5
62743: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62744: LD_INT 0
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
// if not turrets or not factories then
62754: LD_VAR 0 1
62758: NOT
62759: PUSH
62760: LD_VAR 0 2
62764: NOT
62765: OR
62766: IFFALSE 62770
// exit ;
62768: GO 63077
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62770: LD_ADDR_VAR 0 10
62774: PUSH
62775: LD_INT 5
62777: PUSH
62778: LD_INT 6
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 4
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: LD_INT 5
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 24
62812: PUSH
62813: LD_INT 25
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 23
62822: PUSH
62823: LD_INT 27
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 42
62836: PUSH
62837: LD_INT 43
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 44
62846: PUSH
62847: LD_INT 46
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 45
62856: PUSH
62857: LD_INT 47
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// result := [ ] ;
62874: LD_ADDR_VAR 0 3
62878: PUSH
62879: EMPTY
62880: ST_TO_ADDR
// for i in turrets do
62881: LD_ADDR_VAR 0 4
62885: PUSH
62886: LD_VAR 0 1
62890: PUSH
62891: FOR_IN
62892: IFFALSE 63075
// begin nat := GetNation ( i ) ;
62894: LD_ADDR_VAR 0 7
62898: PUSH
62899: LD_VAR 0 4
62903: PPUSH
62904: CALL_OW 248
62908: ST_TO_ADDR
// weapon := 0 ;
62909: LD_ADDR_VAR 0 8
62913: PUSH
62914: LD_INT 0
62916: ST_TO_ADDR
// if not nat then
62917: LD_VAR 0 7
62921: NOT
62922: IFFALSE 62926
// continue ;
62924: GO 62891
// for j in list [ nat ] do
62926: LD_ADDR_VAR 0 5
62930: PUSH
62931: LD_VAR 0 10
62935: PUSH
62936: LD_VAR 0 7
62940: ARRAY
62941: PUSH
62942: FOR_IN
62943: IFFALSE 62984
// if GetBWeapon ( i ) = j [ 1 ] then
62945: LD_VAR 0 4
62949: PPUSH
62950: CALL_OW 269
62954: PUSH
62955: LD_VAR 0 5
62959: PUSH
62960: LD_INT 1
62962: ARRAY
62963: EQUAL
62964: IFFALSE 62982
// begin weapon := j [ 2 ] ;
62966: LD_ADDR_VAR 0 8
62970: PUSH
62971: LD_VAR 0 5
62975: PUSH
62976: LD_INT 2
62978: ARRAY
62979: ST_TO_ADDR
// break ;
62980: GO 62984
// end ;
62982: GO 62942
62984: POP
62985: POP
// if not weapon then
62986: LD_VAR 0 8
62990: NOT
62991: IFFALSE 62995
// continue ;
62993: GO 62891
// for k in factories do
62995: LD_ADDR_VAR 0 6
62999: PUSH
63000: LD_VAR 0 2
63004: PUSH
63005: FOR_IN
63006: IFFALSE 63071
// begin weapons := AvailableWeaponList ( k ) ;
63008: LD_ADDR_VAR 0 9
63012: PUSH
63013: LD_VAR 0 6
63017: PPUSH
63018: CALL_OW 478
63022: ST_TO_ADDR
// if not weapons then
63023: LD_VAR 0 9
63027: NOT
63028: IFFALSE 63032
// continue ;
63030: GO 63005
// if weapon in weapons then
63032: LD_VAR 0 8
63036: PUSH
63037: LD_VAR 0 9
63041: IN
63042: IFFALSE 63069
// begin result := [ i , weapon ] ;
63044: LD_ADDR_VAR 0 3
63048: PUSH
63049: LD_VAR 0 4
63053: PUSH
63054: LD_VAR 0 8
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// exit ;
63063: POP
63064: POP
63065: POP
63066: POP
63067: GO 63077
// end ; end ;
63069: GO 63005
63071: POP
63072: POP
// end ;
63073: GO 62891
63075: POP
63076: POP
// end ;
63077: LD_VAR 0 3
63081: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63082: LD_INT 0
63084: PPUSH
// if not side or side > 8 then
63085: LD_VAR 0 3
63089: NOT
63090: PUSH
63091: LD_VAR 0 3
63095: PUSH
63096: LD_INT 8
63098: GREATER
63099: OR
63100: IFFALSE 63104
// exit ;
63102: GO 63163
// if not range then
63104: LD_VAR 0 4
63108: NOT
63109: IFFALSE 63120
// range := - 12 ;
63111: LD_ADDR_VAR 0 4
63115: PUSH
63116: LD_INT 12
63118: NEG
63119: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63120: LD_VAR 0 1
63124: PPUSH
63125: LD_VAR 0 2
63129: PPUSH
63130: LD_VAR 0 3
63134: PPUSH
63135: LD_VAR 0 4
63139: PPUSH
63140: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63144: LD_VAR 0 1
63148: PPUSH
63149: LD_VAR 0 2
63153: PPUSH
63154: LD_VAR 0 3
63158: PPUSH
63159: CALL_OW 331
// end ;
63163: LD_VAR 0 5
63167: RET
// export function Video ( mode ) ; begin
63168: LD_INT 0
63170: PPUSH
// ingame_video = mode ;
63171: LD_ADDR_OWVAR 52
63175: PUSH
63176: LD_VAR 0 1
63180: ST_TO_ADDR
// interface_hidden = mode ;
63181: LD_ADDR_OWVAR 54
63185: PUSH
63186: LD_VAR 0 1
63190: ST_TO_ADDR
// end ;
63191: LD_VAR 0 2
63195: RET
// export function Join ( array , element ) ; begin
63196: LD_INT 0
63198: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63199: LD_ADDR_VAR 0 3
63203: PUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: LD_VAR 0 1
63213: PUSH
63214: LD_INT 1
63216: PLUS
63217: PPUSH
63218: LD_VAR 0 2
63222: PPUSH
63223: CALL_OW 1
63227: ST_TO_ADDR
// end ;
63228: LD_VAR 0 3
63232: RET
// export function JoinUnion ( array , element ) ; begin
63233: LD_INT 0
63235: PPUSH
// result := array union element ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: LD_VAR 0 1
63245: PUSH
63246: LD_VAR 0 2
63250: UNION
63251: ST_TO_ADDR
// end ;
63252: LD_VAR 0 3
63256: RET
// export function GetBehemoths ( side ) ; begin
63257: LD_INT 0
63259: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63260: LD_ADDR_VAR 0 2
63264: PUSH
63265: LD_INT 22
63267: PUSH
63268: LD_VAR 0 1
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 31
63279: PUSH
63280: LD_INT 25
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PPUSH
63291: CALL_OW 69
63295: ST_TO_ADDR
// end ;
63296: LD_VAR 0 2
63300: RET
// export function Shuffle ( array ) ; var i , index ; begin
63301: LD_INT 0
63303: PPUSH
63304: PPUSH
63305: PPUSH
// result := [ ] ;
63306: LD_ADDR_VAR 0 2
63310: PUSH
63311: EMPTY
63312: ST_TO_ADDR
// if not array then
63313: LD_VAR 0 1
63317: NOT
63318: IFFALSE 63322
// exit ;
63320: GO 63421
// Randomize ;
63322: CALL_OW 10
// for i = array downto 1 do
63326: LD_ADDR_VAR 0 3
63330: PUSH
63331: DOUBLE
63332: LD_VAR 0 1
63336: INC
63337: ST_TO_ADDR
63338: LD_INT 1
63340: PUSH
63341: FOR_DOWNTO
63342: IFFALSE 63419
// begin index := rand ( 1 , array ) ;
63344: LD_ADDR_VAR 0 4
63348: PUSH
63349: LD_INT 1
63351: PPUSH
63352: LD_VAR 0 1
63356: PPUSH
63357: CALL_OW 12
63361: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63362: LD_ADDR_VAR 0 2
63366: PUSH
63367: LD_VAR 0 2
63371: PPUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_INT 1
63379: PLUS
63380: PPUSH
63381: LD_VAR 0 1
63385: PUSH
63386: LD_VAR 0 4
63390: ARRAY
63391: PPUSH
63392: CALL_OW 2
63396: ST_TO_ADDR
// array := Delete ( array , index ) ;
63397: LD_ADDR_VAR 0 1
63401: PUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: LD_VAR 0 4
63411: PPUSH
63412: CALL_OW 3
63416: ST_TO_ADDR
// end ;
63417: GO 63341
63419: POP
63420: POP
// end ;
63421: LD_VAR 0 2
63425: RET
// export function GetBaseMaterials ( base ) ; begin
63426: LD_INT 0
63428: PPUSH
// result := [ 0 , 0 , 0 ] ;
63429: LD_ADDR_VAR 0 2
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: ST_TO_ADDR
// if not base then
63448: LD_VAR 0 1
63452: NOT
63453: IFFALSE 63457
// exit ;
63455: GO 63506
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63457: LD_ADDR_VAR 0 2
63461: PUSH
63462: LD_VAR 0 1
63466: PPUSH
63467: LD_INT 1
63469: PPUSH
63470: CALL_OW 275
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: LD_INT 2
63482: PPUSH
63483: CALL_OW 275
63487: PUSH
63488: LD_VAR 0 1
63492: PPUSH
63493: LD_INT 3
63495: PPUSH
63496: CALL_OW 275
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: ST_TO_ADDR
// end ;
63506: LD_VAR 0 2
63510: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63511: LD_INT 0
63513: PPUSH
63514: PPUSH
// result := array ;
63515: LD_ADDR_VAR 0 3
63519: PUSH
63520: LD_VAR 0 1
63524: ST_TO_ADDR
// if size > 0 then
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 0
63532: GREATER
63533: IFFALSE 63579
// for i := array downto size do
63535: LD_ADDR_VAR 0 4
63539: PUSH
63540: DOUBLE
63541: LD_VAR 0 1
63545: INC
63546: ST_TO_ADDR
63547: LD_VAR 0 2
63551: PUSH
63552: FOR_DOWNTO
63553: IFFALSE 63577
// result := Delete ( result , result ) ;
63555: LD_ADDR_VAR 0 3
63559: PUSH
63560: LD_VAR 0 3
63564: PPUSH
63565: LD_VAR 0 3
63569: PPUSH
63570: CALL_OW 3
63574: ST_TO_ADDR
63575: GO 63552
63577: POP
63578: POP
// end ;
63579: LD_VAR 0 3
63583: RET
// export function ComExit ( unit ) ; var tmp ; begin
63584: LD_INT 0
63586: PPUSH
63587: PPUSH
// if not IsInUnit ( unit ) then
63588: LD_VAR 0 1
63592: PPUSH
63593: CALL_OW 310
63597: NOT
63598: IFFALSE 63602
// exit ;
63600: GO 63662
// tmp := IsInUnit ( unit ) ;
63602: LD_ADDR_VAR 0 3
63606: PUSH
63607: LD_VAR 0 1
63611: PPUSH
63612: CALL_OW 310
63616: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63617: LD_VAR 0 3
63621: PPUSH
63622: CALL_OW 247
63626: PUSH
63627: LD_INT 2
63629: EQUAL
63630: IFFALSE 63643
// ComExitVehicle ( unit ) else
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 121
63641: GO 63652
// ComExitBuilding ( unit ) ;
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL_OW 122
// result := tmp ;
63652: LD_ADDR_VAR 0 2
63656: PUSH
63657: LD_VAR 0 3
63661: ST_TO_ADDR
// end ;
63662: LD_VAR 0 2
63666: RET
// export function ResetHc ; begin
63667: LD_INT 0
63669: PPUSH
// InitHc ;
63670: CALL_OW 19
// hc_importance := 0 ;
63674: LD_ADDR_OWVAR 32
63678: PUSH
63679: LD_INT 0
63681: ST_TO_ADDR
// end ;
63682: LD_VAR 0 1
63686: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63687: LD_INT 0
63689: PPUSH
63690: PPUSH
63691: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63692: LD_ADDR_VAR 0 6
63696: PUSH
63697: LD_VAR 0 1
63701: PUSH
63702: LD_VAR 0 3
63706: PLUS
63707: PUSH
63708: LD_INT 2
63710: DIV
63711: ST_TO_ADDR
// if _x < 0 then
63712: LD_VAR 0 6
63716: PUSH
63717: LD_INT 0
63719: LESS
63720: IFFALSE 63737
// _x := _x * - 1 ;
63722: LD_ADDR_VAR 0 6
63726: PUSH
63727: LD_VAR 0 6
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: MUL
63736: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63737: LD_ADDR_VAR 0 7
63741: PUSH
63742: LD_VAR 0 2
63746: PUSH
63747: LD_VAR 0 4
63751: PLUS
63752: PUSH
63753: LD_INT 2
63755: DIV
63756: ST_TO_ADDR
// if _y < 0 then
63757: LD_VAR 0 7
63761: PUSH
63762: LD_INT 0
63764: LESS
63765: IFFALSE 63782
// _y := _y * - 1 ;
63767: LD_ADDR_VAR 0 7
63771: PUSH
63772: LD_VAR 0 7
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: MUL
63781: ST_TO_ADDR
// result := [ _x , _y ] ;
63782: LD_ADDR_VAR 0 5
63786: PUSH
63787: LD_VAR 0 6
63791: PUSH
63792: LD_VAR 0 7
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// end ;
63801: LD_VAR 0 5
63805: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63806: LD_INT 0
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
// task := GetTaskList ( unit ) ;
63812: LD_ADDR_VAR 0 7
63816: PUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 437
63826: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63827: LD_VAR 0 7
63831: NOT
63832: PUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: LD_VAR 0 2
63842: PPUSH
63843: CALL_OW 308
63847: NOT
63848: AND
63849: IFFALSE 63853
// exit ;
63851: GO 63971
// if IsInArea ( unit , area ) then
63853: LD_VAR 0 1
63857: PPUSH
63858: LD_VAR 0 2
63862: PPUSH
63863: CALL_OW 308
63867: IFFALSE 63885
// begin ComMoveToArea ( unit , goAway ) ;
63869: LD_VAR 0 1
63873: PPUSH
63874: LD_VAR 0 3
63878: PPUSH
63879: CALL_OW 113
// exit ;
63883: GO 63971
// end ; if task [ 1 ] [ 1 ] <> M then
63885: LD_VAR 0 7
63889: PUSH
63890: LD_INT 1
63892: ARRAY
63893: PUSH
63894: LD_INT 1
63896: ARRAY
63897: PUSH
63898: LD_STRING M
63900: NONEQUAL
63901: IFFALSE 63905
// exit ;
63903: GO 63971
// x := task [ 1 ] [ 2 ] ;
63905: LD_ADDR_VAR 0 5
63909: PUSH
63910: LD_VAR 0 7
63914: PUSH
63915: LD_INT 1
63917: ARRAY
63918: PUSH
63919: LD_INT 2
63921: ARRAY
63922: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63923: LD_ADDR_VAR 0 6
63927: PUSH
63928: LD_VAR 0 7
63932: PUSH
63933: LD_INT 1
63935: ARRAY
63936: PUSH
63937: LD_INT 3
63939: ARRAY
63940: ST_TO_ADDR
// if InArea ( x , y , area ) then
63941: LD_VAR 0 5
63945: PPUSH
63946: LD_VAR 0 6
63950: PPUSH
63951: LD_VAR 0 2
63955: PPUSH
63956: CALL_OW 309
63960: IFFALSE 63971
// ComStop ( unit ) ;
63962: LD_VAR 0 1
63966: PPUSH
63967: CALL_OW 141
// end ;
63971: LD_VAR 0 4
63975: RET
// export function Abs ( value ) ; begin
63976: LD_INT 0
63978: PPUSH
// result := value ;
63979: LD_ADDR_VAR 0 2
63983: PUSH
63984: LD_VAR 0 1
63988: ST_TO_ADDR
// if value < 0 then
63989: LD_VAR 0 1
63993: PUSH
63994: LD_INT 0
63996: LESS
63997: IFFALSE 64014
// result := value * - 1 ;
63999: LD_ADDR_VAR 0 2
64003: PUSH
64004: LD_VAR 0 1
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: MUL
64013: ST_TO_ADDR
// end ; end_of_file
64014: LD_VAR 0 2
64018: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64019: LD_VAR 0 1
64023: PUSH
64024: LD_INT 200
64026: DOUBLE
64027: GREATEREQUAL
64028: IFFALSE 64036
64030: LD_INT 299
64032: DOUBLE
64033: LESSEQUAL
64034: IFTRUE 64038
64036: GO 64070
64038: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_VAR 0 2
64048: PPUSH
64049: LD_VAR 0 3
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: LD_VAR 0 5
64063: PPUSH
64064: CALL 23188 0 5
64068: GO 64147
64070: LD_INT 300
64072: DOUBLE
64073: GREATEREQUAL
64074: IFFALSE 64082
64076: LD_INT 399
64078: DOUBLE
64079: LESSEQUAL
64080: IFTRUE 64084
64082: GO 64146
64084: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64085: LD_VAR 0 1
64089: PPUSH
64090: LD_VAR 0 2
64094: PPUSH
64095: LD_VAR 0 3
64099: PPUSH
64100: LD_VAR 0 4
64104: PPUSH
64105: LD_VAR 0 5
64109: PPUSH
64110: LD_VAR 0 6
64114: PPUSH
64115: LD_VAR 0 7
64119: PPUSH
64120: LD_VAR 0 8
64124: PPUSH
64125: LD_VAR 0 9
64129: PPUSH
64130: LD_VAR 0 10
64134: PPUSH
64135: LD_VAR 0 11
64139: PPUSH
64140: CALL 21094 0 11
64144: GO 64147
64146: POP
// end ;
64147: PPOPN 11
64149: END
