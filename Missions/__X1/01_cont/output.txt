// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1456 0 0
// PrepareArabian ;
  46: CALL 1019 0 0
// PrepareHeike ;
  50: CALL 954 0 0
// Action ;
  54: CALL 3001 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: IFTRUE 897
 890: PUSH
 891: LD_VAR 0 2
 895: NOT
 896: OR
 897: IFFALSE 901
// exit ;
 899: GO 949
// if not See ( GetSide ( observer ) , unit ) then
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 255
 910: PPUSH
 911: LD_VAR 0 2
 915: PPUSH
 916: CALL_OW 292
 920: NOT
 921: IFFALSE 925
// exit ;
 923: GO 949
// result := GetDistUnits ( observer , unit ) < 12 ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: LD_VAR 0 1
 934: PPUSH
 935: LD_VAR 0 2
 939: PPUSH
 940: CALL_OW 296
 944: PUSH
 945: LD_INT 12
 947: LESS
 948: ST_TO_ADDR
// end ; end_of_file
 949: LD_VAR 0 3
 953: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 954: LD_INT 0
 956: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 957: LD_INT 66
 959: PPUSH
 960: LD_INT 26
 962: PPUSH
 963: CALL_OW 86
// uc_side := 2 ;
 967: LD_ADDR_OWVAR 20
 971: PUSH
 972: LD_INT 2
 974: ST_TO_ADDR
// uc_nation := 2 ;
 975: LD_ADDR_OWVAR 21
 979: PUSH
 980: LD_INT 2
 982: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 983: LD_ADDR_EXP 16
 987: PUSH
 988: LD_STRING Heike
 990: PPUSH
 991: CALL_OW 25
 995: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 996: LD_EXP 16
1000: PPUSH
1001: LD_INT 66
1003: PPUSH
1004: LD_INT 26
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 48
// end ;
1014: LD_VAR 0 1
1018: RET
// export function PrepareArabian ; begin
1019: LD_INT 0
1021: PPUSH
// uc_side := 5 ;
1022: LD_ADDR_OWVAR 20
1026: PUSH
1027: LD_INT 5
1029: ST_TO_ADDR
// uc_nation := 2 ;
1030: LD_ADDR_OWVAR 21
1034: PUSH
1035: LD_INT 2
1037: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1038: LD_ADDR_EXP 17
1042: PUSH
1043: LD_STRING Olaf
1045: PPUSH
1046: CALL_OW 25
1050: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1051: LD_EXP 17
1055: PPUSH
1056: LD_INT 39
1058: PPUSH
1059: LD_INT 52
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1069: LD_ADDR_EXP 18
1073: PUSH
1074: LD_STRING Givi
1076: PPUSH
1077: CALL_OW 25
1081: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1082: LD_EXP 18
1086: PPUSH
1087: LD_INT 55
1089: PPUSH
1090: LD_INT 90
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1100: LD_EXP 18
1104: PPUSH
1105: LD_INT 53
1107: PPUSH
1108: LD_INT 89
1110: PPUSH
1111: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1115: LD_ADDR_EXP 19
1119: PUSH
1120: LD_STRING Mike
1122: PPUSH
1123: CALL_OW 25
1127: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1128: LD_EXP 19
1132: PPUSH
1133: LD_INT 53
1135: PPUSH
1136: LD_INT 87
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1146: LD_EXP 19
1150: PPUSH
1151: LD_INT 53
1153: PPUSH
1154: LD_INT 89
1156: PPUSH
1157: CALL_OW 118
// end ;
1161: LD_VAR 0 1
1165: RET
// export function PreparePrison ; begin
1166: LD_INT 0
1168: PPUSH
// uc_side := 5 ;
1169: LD_ADDR_OWVAR 20
1173: PUSH
1174: LD_INT 5
1176: ST_TO_ADDR
// uc_nation := 2 ;
1177: LD_ADDR_OWVAR 21
1181: PUSH
1182: LD_INT 2
1184: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1185: LD_ADDR_EXP 20
1189: PUSH
1190: LD_STRING Kamil
1192: PPUSH
1193: CALL_OW 25
1197: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1198: LD_OWVAR 67
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 4
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: IN
1213: IFFALSE 1229
// PlaceHumanInUnit ( Kamil , northDep ) else
1215: LD_EXP 20
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: CALL_OW 52
1227: GO 1241
// PlaceHumanInUnit ( Kamil , southDep ) ;
1229: LD_EXP 20
1233: PPUSH
1234: LD_INT 8
1236: PPUSH
1237: CALL_OW 52
// uc_side := 3 ;
1241: LD_ADDR_OWVAR 20
1245: PUSH
1246: LD_INT 3
1248: ST_TO_ADDR
// uc_nation := 3 ;
1249: LD_ADDR_OWVAR 21
1253: PUSH
1254: LD_INT 3
1256: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1257: LD_INT 0
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 380
// if Difficulty > 1 then
1270: LD_OWVAR 67
1274: PUSH
1275: LD_INT 1
1277: GREATER
1278: IFFALSE 1294
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1280: CALL_OW 44
1284: PPUSH
1285: LD_INT 8
1287: PPUSH
1288: CALL_OW 52
1292: GO 1306
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1294: CALL_OW 44
1298: PPUSH
1299: LD_INT 2
1301: PPUSH
1302: CALL_OW 52
// end ; end_of_file
1306: LD_VAR 0 1
1310: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1311: LD_INT 0
1313: PPUSH
1314: PPUSH
1315: PPUSH
// uc_side := 3 ;
1316: LD_ADDR_OWVAR 20
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// uc_nation := 3 ;
1324: LD_ADDR_OWVAR 21
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// russianPatrol := [ ] ;
1332: LD_ADDR_EXP 21
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// for i = 1 to 3 do
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: DOUBLE
1345: LD_INT 1
1347: DEC
1348: ST_TO_ADDR
1349: LD_INT 3
1351: PUSH
1352: FOR_TO
1353: IFFALSE 1449
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1368: LD_ADDR_OWVAR 29
1372: PUSH
1373: LD_INT 9
1375: PUSH
1376: LD_INT 10
1378: PPUSH
1379: LD_INT 11
1381: PPUSH
1382: CALL_OW 12
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: ST_TO_ADDR
// un := CreateHuman ;
1391: LD_ADDR_VAR 0 3
1395: PUSH
1396: CALL_OW 44
1400: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1401: LD_ADDR_EXP 21
1405: PUSH
1406: LD_EXP 21
1410: PPUSH
1411: LD_VAR 0 2
1415: PPUSH
1416: LD_VAR 0 3
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_INT 26
1433: PPUSH
1434: LD_INT 22
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 50
// end ;
1447: GO 1352
1449: POP
1450: POP
// end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// uc_side := 3 ;
1463: LD_ADDR_OWVAR 20
1467: PUSH
1468: LD_INT 3
1470: ST_TO_ADDR
// uc_nation := 3 ;
1471: LD_ADDR_OWVAR 21
1475: PUSH
1476: LD_INT 3
1478: ST_TO_ADDR
// russianForces := [ ] ;
1479: LD_ADDR_EXP 23
1483: PUSH
1484: EMPTY
1485: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1486: LD_ADDR_EXP 22
1490: PUSH
1491: EMPTY
1492: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1493: LD_ADDR_VAR 0 5
1497: PUSH
1498: LD_INT 11
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL_OW 517
1508: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_INT 21
1516: PUSH
1517: LD_INT 0
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: FOR_IN
1530: IFFALSE 1574
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1532: LD_VAR 0 2
1536: PPUSH
1537: CALL_OW 274
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: LD_INT 200
1547: PPUSH
1548: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 274
1561: PPUSH
1562: LD_INT 2
1564: PPUSH
1565: LD_INT 10
1567: PPUSH
1568: CALL_OW 277
// end ;
1572: GO 1529
1574: POP
1575: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1576: LD_ADDR_VAR 0 2
1580: PUSH
1581: LD_INT 30
1583: PUSH
1584: LD_INT 31
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: PPUSH
1591: CALL_OW 69
1595: PUSH
1596: FOR_IN
1597: IFFALSE 1671
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1599: LD_INT 0
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_OWVAR 67
1609: PUSH
1610: LD_INT 1
1612: MINUS
1613: PPUSH
1614: CALL_OW 380
// un := CreateHuman ;
1618: LD_ADDR_VAR 0 4
1622: PUSH
1623: CALL_OW 44
1627: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1628: LD_VAR 0 4
1632: PPUSH
1633: LD_VAR 0 2
1637: PPUSH
1638: CALL_OW 254
1642: PUSH
1643: LD_INT 3
1645: MINUS
1646: PUSH
1647: LD_INT 6
1649: MOD
1650: PPUSH
1651: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1655: LD_VAR 0 4
1659: PPUSH
1660: LD_VAR 0 2
1664: PPUSH
1665: CALL_OW 52
// end ;
1669: GO 1596
1671: POP
1672: POP
// for i = 1 to 5 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 5
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1769
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1689: LD_INT 0
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: LD_OWVAR 67
1699: PPUSH
1700: CALL_OW 380
// un := CreateHuman ;
1704: LD_ADDR_VAR 0 4
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1714: LD_VAR 0 4
1718: PPUSH
1719: LD_INT 9
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 49
// ComHold ( un ) ;
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1738: LD_ADDR_EXP 23
1742: PUSH
1743: LD_EXP 23
1747: PPUSH
1748: LD_EXP 23
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL_OW 1
1766: ST_TO_ADDR
// end ;
1767: GO 1686
1769: POP
1770: POP
// for i := 1 to Difficulty + 1 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_OWVAR 67
1785: PUSH
1786: LD_INT 1
1788: PLUS
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1891
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1793: LD_INT 0
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_OWVAR 67
1803: PPUSH
1804: CALL_OW 380
// un := CreateHuman ;
1808: LD_ADDR_VAR 0 4
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_VAR 0 5
1827: PUSH
1828: LD_INT 1
1830: ARRAY
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: PPUSH
1838: LD_VAR 0 5
1842: PUSH
1843: LD_INT 2
1845: ARRAY
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1860: LD_ADDR_EXP 22
1864: PUSH
1865: LD_EXP 22
1869: PPUSH
1870: LD_EXP 22
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL_OW 1
1888: ST_TO_ADDR
// end ;
1889: GO 1790
1891: POP
1892: POP
// vc_chassis := ru_medium_wheeled ;
1893: LD_ADDR_OWVAR 37
1897: PUSH
1898: LD_INT 21
1900: ST_TO_ADDR
// vc_engine := engine_combustion ;
1901: LD_ADDR_OWVAR 39
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// vc_control := control_manual ;
1909: LD_ADDR_OWVAR 38
1913: PUSH
1914: LD_INT 1
1916: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1917: LD_ADDR_OWVAR 40
1921: PUSH
1922: LD_INT 42
1924: ST_TO_ADDR
// russianTank := CreateVehicle ;
1925: LD_ADDR_EXP 24
1929: PUSH
1930: CALL_OW 45
1934: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1935: LD_EXP 24
1939: PPUSH
1940: LD_INT 121
1942: PPUSH
1943: LD_INT 25
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_OWVAR 67
1963: PPUSH
1964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1968: CALL_OW 44
1972: PPUSH
1973: LD_EXP 24
1977: PPUSH
1978: CALL_OW 52
// if Difficulty > 1 then
1982: LD_OWVAR 67
1986: PUSH
1987: LD_INT 1
1989: GREATER
1990: IFFALSE 2076
// begin bc_type := b_breastwork ;
1992: LD_ADDR_OWVAR 42
1996: PUSH
1997: LD_INT 31
1999: ST_TO_ADDR
// bc_level := 2 ;
2000: LD_ADDR_OWVAR 43
2004: PUSH
2005: LD_INT 2
2007: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2008: LD_ADDR_VAR 0 3
2012: PUSH
2013: LD_INT 143
2015: PPUSH
2016: LD_INT 88
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL_OW 47
2026: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2027: LD_INT 0
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: CALL_OW 380
// un := CreateHuman ;
2040: LD_ADDR_VAR 0 4
2044: PUSH
2045: CALL_OW 44
2049: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2050: LD_VAR 0 4
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2062: LD_VAR 0 4
2066: PPUSH
2067: LD_VAR 0 3
2071: PPUSH
2072: CALL_OW 52
// end ; if Difficulty > 2 then
2076: LD_OWVAR 67
2080: PUSH
2081: LD_INT 2
2083: GREATER
2084: IFFALSE 2140
// begin for i := 1 to 2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 2
2098: PUSH
2099: FOR_TO
2100: IFFALSE 2138
// begin PrepareHuman ( false , 1 , 2 ) ;
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2115: CALL_OW 44
2119: PPUSH
2120: LD_INT 156
2122: PPUSH
2123: LD_INT 108
2125: PPUSH
2126: LD_INT 3
2128: PPUSH
2129: LD_INT 0
2131: PPUSH
2132: CALL_OW 50
// end ;
2136: GO 2099
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2145: LD_EXP 22
2149: IFFALSE 2457
2151: GO 2153
2153: DISABLE
2154: LD_INT 0
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
2160: PPUSH
2161: PPUSH
// begin enable ;
2162: ENABLE
// for i in russianForestPatrol do
2163: LD_ADDR_VAR 0 1
2167: PUSH
2168: LD_EXP 22
2172: PUSH
2173: FOR_IN
2174: IFFALSE 2455
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 53
2183: PPUSH
2184: LD_INT 89
2186: PPUSH
2187: CALL_OW 297
2191: PUSH
2192: LD_INT 30
2194: LESS
2195: IFFALSE 2214
// begin ComMoveXY ( i , 114 , 80 ) ;
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 114
2204: PPUSH
2205: LD_INT 80
2207: PPUSH
2208: CALL_OW 111
// continue ;
2212: GO 2173
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2214: LD_ADDR_VAR 0 6
2218: PUSH
2219: LD_EXP 22
2223: PUSH
2224: LD_VAR 0 1
2228: DIFF
2229: PPUSH
2230: LD_VAR 0 1
2234: PPUSH
2235: CALL_OW 74
2239: ST_TO_ADDR
// if tmp then
2240: LD_VAR 0 6
2244: IFFALSE 2314
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2246: LD_VAR 0 1
2250: PPUSH
2251: LD_VAR 0 6
2255: PPUSH
2256: CALL_OW 296
2260: PUSH
2261: LD_INT 14
2263: LESS
2264: IFFALSE 2281
2266: PUSH
2267: LD_VAR 0 6
2271: PPUSH
2272: CALL_OW 256
2276: PUSH
2277: LD_INT 999
2279: LESS
2280: AND
2281: IFFALSE 2314
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: LD_VAR 0 6
2292: PPUSH
2293: CALL_OW 250
2297: PPUSH
2298: LD_VAR 0 6
2302: PPUSH
2303: CALL_OW 251
2307: PPUSH
2308: CALL_OW 114
// break ;
2312: GO 2455
// end ; if not HasTask ( i ) then
2314: LD_VAR 0 1
2318: PPUSH
2319: CALL_OW 314
2323: NOT
2324: IFFALSE 2453
// begin d := rand ( 0 , 5 ) ;
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_INT 0
2333: PPUSH
2334: LD_INT 5
2336: PPUSH
2337: CALL_OW 12
2341: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2342: LD_ADDR_VAR 0 3
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_INT 7
2352: PPUSH
2353: CALL_OW 12
2357: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2358: LD_ADDR_VAR 0 4
2362: PUSH
2363: LD_VAR 0 1
2367: PPUSH
2368: CALL_OW 250
2372: PPUSH
2373: LD_VAR 0 2
2377: PPUSH
2378: LD_VAR 0 3
2382: PPUSH
2383: CALL_OW 272
2387: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2388: LD_ADDR_VAR 0 5
2392: PUSH
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 251
2402: PPUSH
2403: LD_VAR 0 2
2407: PPUSH
2408: LD_VAR 0 3
2412: PPUSH
2413: CALL_OW 273
2417: ST_TO_ADDR
// if ValidHex ( x , y ) then
2418: LD_VAR 0 4
2422: PPUSH
2423: LD_VAR 0 5
2427: PPUSH
2428: CALL_OW 488
2432: IFFALSE 2453
// ComAgressiveMove ( i , x , y ) ;
2434: LD_VAR 0 1
2438: PPUSH
2439: LD_VAR 0 4
2443: PPUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: CALL_OW 114
// end ; end ;
2453: GO 2173
2455: POP
2456: POP
// end ;
2457: PPOPN 6
2459: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2460: LD_EXP 24
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2486
2471: PUSH
2472: LD_EXP 24
2476: PPUSH
2477: CALL_OW 255
2481: PUSH
2482: LD_INT 3
2484: EQUAL
2485: AND
2486: IFFALSE 2753
2488: GO 2490
2490: DISABLE
// begin enable ;
2491: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2492: LD_EXP 24
2496: PPUSH
2497: LD_INT 124
2499: PPUSH
2500: LD_INT 25
2502: PPUSH
2503: CALL_OW 307
2507: IFFALSE 2521
// SetFuel ( russianTank , 100 ) ;
2509: LD_EXP 24
2513: PPUSH
2514: LD_INT 100
2516: PPUSH
2517: CALL_OW 240
// if HasTask ( russianTank ) then
2521: LD_EXP 24
2525: PPUSH
2526: CALL_OW 314
2530: IFFALSE 2534
// exit ;
2532: GO 2753
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2534: LD_EXP 24
2538: PPUSH
2539: LD_INT 121
2541: PPUSH
2542: LD_INT 25
2544: PPUSH
2545: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2549: LD_EXP 24
2553: PPUSH
2554: LD_INT 122
2556: PPUSH
2557: LD_INT 48
2559: PPUSH
2560: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2564: LD_EXP 24
2568: PPUSH
2569: LD_INT 70
2571: PPUSH
2572: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2576: LD_EXP 24
2580: PPUSH
2581: LD_INT 107
2583: PPUSH
2584: LD_INT 57
2586: PPUSH
2587: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2591: LD_EXP 24
2595: PPUSH
2596: LD_INT 70
2598: PPUSH
2599: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2603: LD_EXP 24
2607: PPUSH
2608: LD_INT 100
2610: PPUSH
2611: LD_INT 61
2613: PPUSH
2614: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2618: LD_EXP 24
2622: PPUSH
2623: LD_INT 105
2625: PPUSH
2626: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2630: LD_EXP 24
2634: PPUSH
2635: LD_INT 78
2637: PPUSH
2638: LD_INT 64
2640: PPUSH
2641: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2645: LD_EXP 24
2649: PPUSH
2650: LD_INT 140
2652: PPUSH
2653: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2657: LD_EXP 24
2661: PPUSH
2662: LD_INT 100
2664: PPUSH
2665: LD_INT 61
2667: PPUSH
2668: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2672: LD_EXP 24
2676: PPUSH
2677: LD_INT 105
2679: PPUSH
2680: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2684: LD_EXP 24
2688: PPUSH
2689: LD_INT 107
2691: PPUSH
2692: LD_INT 57
2694: PPUSH
2695: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2699: LD_EXP 24
2703: PPUSH
2704: LD_INT 70
2706: PPUSH
2707: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2711: LD_EXP 24
2715: PPUSH
2716: LD_INT 122
2718: PPUSH
2719: LD_INT 48
2721: PPUSH
2722: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2726: LD_EXP 24
2730: PPUSH
2731: LD_INT 70
2733: PPUSH
2734: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2738: LD_EXP 24
2742: PPUSH
2743: LD_INT 124
2745: PPUSH
2746: LD_INT 25
2748: PPUSH
2749: CALL_OW 171
// end ; end_of_file
2753: END
// export Johnny ; export function PrepareJohnny ; begin
2754: LD_INT 0
2756: PPUSH
// uc_side := 1 ;
2757: LD_ADDR_OWVAR 20
2761: PUSH
2762: LD_INT 1
2764: ST_TO_ADDR
// uc_nation := 1 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2773: LD_ADDR_EXP 25
2777: PUSH
2778: LD_STRING Harris
2780: PPUSH
2781: CALL_OW 25
2785: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2786: LD_EXP 25
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2798: LD_EXP 25
2802: PPUSH
2803: LD_INT 8
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 49
// ComCrawl ( Johnny ) ;
2813: LD_EXP 25
2817: PPUSH
2818: CALL_OW 137
// end ;
2822: LD_VAR 0 1
2826: RET
// export function PreparePatrolTank ; var veh , un ; begin
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
2831: PPUSH
// uc_side := 1 ;
2832: LD_ADDR_OWVAR 20
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// uc_nation := 1 ;
2840: LD_ADDR_OWVAR 21
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2848: LD_INT 1
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 1
2856: PPUSH
2857: CALL_OW 380
// un := CreateHuman ;
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
// vc_engine := engine_combustion ;
2879: LD_ADDR_OWVAR 39
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// vc_control := control_manual ;
2887: LD_ADDR_OWVAR 38
2891: PUSH
2892: LD_INT 1
2894: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2895: LD_ADDR_OWVAR 40
2899: PUSH
2900: LD_INT 2
2902: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2903: LD_ADDR_OWVAR 41
2907: PUSH
2908: LD_INT 72
2910: PUSH
2911: LD_INT 54
2913: PUSH
2914: LD_INT 36
2916: PUSH
2917: LD_INT 30
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: ST_TO_ADDR
// veh := CreateVehicle ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2954: LD_VAR 0 2
2958: PPUSH
2959: LD_INT 31
2961: PPUSH
2962: LD_INT 58
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2972: LD_VAR 0 3
2976: PPUSH
2977: LD_VAR 0 2
2981: PPUSH
2982: CALL_OW 52
// result := un ;
2986: LD_ADDR_VAR 0 1
2990: PUSH
2991: LD_VAR 0 3
2995: ST_TO_ADDR
// end ; end_of_file
2996: LD_VAR 0 1
3000: RET
// export function Action ; begin
3001: LD_INT 0
3003: PPUSH
// InGameOn ;
3004: CALL_OW 8
// wait ( 0 0$4 ) ;
3008: LD_INT 140
3010: PPUSH
3011: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3015: LD_EXP 16
3019: PPUSH
3020: LD_STRING DH-start-1
3022: PPUSH
3023: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3027: LD_EXP 16
3031: PPUSH
3032: LD_INT 71
3034: PPUSH
3035: LD_INT 29
3037: PPUSH
3038: CALL_OW 111
// wait ( 0 0$4 ) ;
3042: LD_INT 140
3044: PPUSH
3045: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3049: LD_EXP 16
3053: PPUSH
3054: LD_INT 71
3056: PPUSH
3057: LD_INT 33
3059: PPUSH
3060: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3064: LD_EXP 16
3068: PPUSH
3069: LD_INT 71
3071: PPUSH
3072: LD_INT 34
3074: PPUSH
3075: CALL_OW 178
// wait ( 0 0$4 ) ;
3079: LD_INT 140
3081: PPUSH
3082: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3086: LD_EXP 16
3090: PPUSH
3091: LD_STRING DH-start-2
3093: PPUSH
3094: CALL_OW 88
// wait ( 0 0$4 ) ;
3098: LD_INT 140
3100: PPUSH
3101: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3105: LD_EXP 16
3109: PPUSH
3110: LD_INT 65
3112: PPUSH
3113: LD_INT 26
3115: PPUSH
3116: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3120: LD_EXP 16
3124: PPUSH
3125: LD_STRING DH-start-3
3127: PPUSH
3128: CALL_OW 88
// InGameOff ;
3132: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3136: LD_STRING O1_cont
3138: PPUSH
3139: CALL_OW 337
// SaveForQuickRestart ;
3143: CALL_OW 22
// missionStarted := true ;
3147: LD_ADDR_EXP 1
3151: PUSH
3152: LD_INT 1
3154: ST_TO_ADDR
// PrepareJohnny ;
3155: CALL 2754 0 0
// end ;
3159: LD_VAR 0 1
3163: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3164: LD_EXP 8
3168: NOT
3169: IFFALSE 3178
3171: PUSH
3172: LD_EXP 7
3176: NOT
3177: AND
3178: IFFALSE 3194
3180: PUSH
3181: LD_INT 2
3183: PPUSH
3184: LD_EXP 25
3188: PPUSH
3189: CALL_OW 292
3193: AND
3194: IFFALSE 3211
3196: PUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_EXP 16
3204: PPUSH
3205: CALL_OW 292
3209: NOT
3210: AND
3211: IFFALSE 3245
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: PPUSH
3229: LD_EXP 16
3233: PPUSH
3234: CALL_OW 74
3238: PUSH
3239: LD_EXP 25
3243: EQUAL
3244: AND
3245: IFFALSE 3263
3247: PUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 81
3258: PUSH
3259: LD_INT 0
3261: EQUAL
3262: AND
3263: IFFALSE 4234
3265: GO 3267
3267: DISABLE
// begin InGameOn ;
3268: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3272: LD_EXP 16
3276: PPUSH
3277: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3281: LD_EXP 25
3285: PPUSH
3286: LD_STRING DJ-ambush-1
3288: PPUSH
3289: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3293: LD_INT 10
3295: PPUSH
3296: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3300: LD_EXP 16
3304: PPUSH
3305: LD_EXP 25
3309: PPUSH
3310: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3314: LD_EXP 16
3318: PPUSH
3319: LD_STRING DH-ambush-1
3321: PPUSH
3322: CALL_OW 88
// wait ( 0 0$1 ) ;
3326: LD_INT 35
3328: PPUSH
3329: CALL_OW 67
// ComWalk ( Johnny ) ;
3333: LD_EXP 25
3337: PPUSH
3338: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3342: LD_EXP 25
3346: PPUSH
3347: LD_EXP 16
3351: PPUSH
3352: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3356: LD_EXP 16
3360: PPUSH
3361: LD_EXP 25
3365: PPUSH
3366: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3370: LD_INT 35
3372: PPUSH
3373: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3377: LD_EXP 25
3381: PPUSH
3382: LD_EXP 16
3386: PPUSH
3387: CALL_OW 296
3391: PUSH
3392: LD_INT 4
3394: LESS
3395: IFFALSE 3370
// ComTurnUnit ( Johnny , Heike ) ;
3397: LD_EXP 25
3401: PPUSH
3402: LD_EXP 16
3406: PPUSH
3407: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3411: LD_EXP 25
3415: PPUSH
3416: LD_STRING DJ-ambush-2
3418: PPUSH
3419: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3423: LD_EXP 16
3427: PPUSH
3428: LD_STRING DH-ambush-2
3430: PPUSH
3431: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3435: LD_EXP 25
3439: PPUSH
3440: LD_STRING DJ-ambush-3
3442: PPUSH
3443: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3447: LD_EXP 16
3451: PPUSH
3452: LD_STRING DH-ambush-3
3454: PPUSH
3455: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3459: LD_EXP 25
3463: PPUSH
3464: LD_STRING DJ-ambush-4
3466: PPUSH
3467: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3471: LD_EXP 16
3475: PPUSH
3476: LD_INT 39
3478: PPUSH
3479: LD_INT 22
3481: PPUSH
3482: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3486: LD_EXP 16
3490: PPUSH
3491: LD_STRING DH-ambush-4
3493: PPUSH
3494: CALL_OW 88
// PrepareRussianPatrol ;
3498: CALL 1311 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3502: LD_INT 39
3504: PPUSH
3505: LD_INT 22
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 12
3513: NEG
3514: PPUSH
3515: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3519: LD_INT 39
3521: PPUSH
3522: LD_INT 22
3524: PPUSH
3525: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3529: LD_EXP 21
3533: PPUSH
3534: LD_INT 39
3536: PPUSH
3537: LD_INT 23
3539: PPUSH
3540: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3544: LD_EXP 16
3548: PUSH
3549: LD_EXP 25
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: LD_INT 39
3560: PPUSH
3561: LD_INT 7
3563: PPUSH
3564: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3568: LD_EXP 16
3572: PUSH
3573: LD_EXP 25
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PPUSH
3582: LD_EXP 21
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 1
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR-ambush-5
3606: PPUSH
3607: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: LD_STRING DR1-ambush-5
3622: PPUSH
3623: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3627: LD_INT 35
3629: PPUSH
3630: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3634: LD_EXP 16
3638: PPUSH
3639: LD_INT 39
3641: PPUSH
3642: LD_INT 7
3644: PPUSH
3645: CALL_OW 297
3649: PUSH
3650: LD_INT 6
3652: LESS
3653: IFFALSE 3627
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3655: LD_EXP 16
3659: PPUSH
3660: LD_EXP 21
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3673: LD_EXP 25
3677: PPUSH
3678: LD_EXP 16
3682: PPUSH
3683: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3687: LD_EXP 25
3691: PPUSH
3692: LD_STRING DJ-ambush-6
3694: PPUSH
3695: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3699: LD_EXP 16
3703: PPUSH
3704: LD_STRING DH-ambush-6
3706: PPUSH
3707: CALL_OW 88
// InGameOff ;
3711: CALL_OW 9
// meetJohnny := true ;
3715: LD_ADDR_EXP 3
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// ComFree ( Johnny ) ;
3723: LD_EXP 25
3727: PPUSH
3728: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3732: LD_STRING O2_ambush_cont
3734: PPUSH
3735: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3739: LD_EXP 21
3743: PUSH
3744: LD_EXP 21
3748: ARRAY
3749: PPUSH
3750: LD_INT 29
3752: PPUSH
3753: LD_INT 15
3755: PPUSH
3756: CALL_OW 111
// wait ( 0 0$2 ) ;
3760: LD_INT 70
3762: PPUSH
3763: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3767: LD_INT 3
3769: PPUSH
3770: LD_EXP 16
3774: PPUSH
3775: CALL_OW 292
3779: NOT
3780: IFFALSE 3797
3782: PUSH
3783: LD_INT 3
3785: PPUSH
3786: LD_EXP 25
3790: PPUSH
3791: CALL_OW 292
3795: NOT
3796: AND
3797: IFFALSE 3818
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3799: LD_EXP 21
3803: PUSH
3804: LD_INT 1
3806: ARRAY
3807: PPUSH
3808: LD_INT 58
3810: PPUSH
3811: LD_INT 32
3813: PPUSH
3814: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3818: LD_INT 1750
3820: PUSH
3821: LD_INT 1400
3823: PUSH
3824: LD_INT 1225
3826: PUSH
3827: LD_INT 1050
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_OWVAR 67
3840: ARRAY
3841: PPUSH
3842: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3846: LD_EXP 21
3850: PPUSH
3851: LD_INT 43
3853: PPUSH
3854: LD_INT 13
3856: PPUSH
3857: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3868: LD_EXP 21
3872: NOT
3873: IFTRUE 3887
3875: PUSH
3876: LD_EXP 25
3880: PPUSH
3881: CALL_OW 302
3885: NOT
3886: OR
3887: IFFALSE 3861
// RemoveSeeing ( 39 , 22 , 2 ) ;
3889: LD_INT 39
3891: PPUSH
3892: LD_INT 22
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 81
3912: PUSH
3913: LD_INT 2
3915: EQUAL
3916: IFFALSE 3920
// exit ;
3918: GO 4234
// if not IsOk ( Johnny ) then
3920: LD_EXP 25
3924: PPUSH
3925: CALL_OW 302
3929: NOT
3930: IFFALSE 3941
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3932: LD_STRING O2_ambush_out_cont
3934: PPUSH
3935: CALL_OW 337
// exit ;
3939: GO 4234
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3941: LD_EXP 16
3945: PPUSH
3946: LD_EXP 25
3950: PPUSH
3951: CALL_OW 296
3955: PUSH
3956: LD_INT 10
3958: GREATER
3959: IFFALSE 4020
// begin ComMoveUnit ( Johnny , Heike ) ;
3961: LD_EXP 25
3965: PPUSH
3966: LD_EXP 16
3970: PPUSH
3971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3982: LD_INT 1
3984: PPUSH
3985: LD_INT 2
3987: PPUSH
3988: CALL_OW 81
3992: PUSH
3993: LD_INT 2
3995: EQUAL
3996: IFFALSE 4000
// exit ;
3998: GO 4234
// until GetDistUnits ( Johnny , Heike ) < 6 ;
4000: LD_EXP 25
4004: PPUSH
4005: LD_EXP 16
4009: PPUSH
4010: CALL_OW 296
4014: PUSH
4015: LD_INT 6
4017: LESS
4018: IFFALSE 3975
// end ; CenterNowOnUnits ( Heike ) ;
4020: LD_EXP 16
4024: PPUSH
4025: CALL_OW 87
// InGameOn ;
4029: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_EXP 25
4042: PPUSH
4043: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4047: LD_EXP 25
4051: PPUSH
4052: LD_EXP 16
4056: PPUSH
4057: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4061: LD_EXP 25
4065: PPUSH
4066: LD_STRING DJ-thanks-1
4068: PPUSH
4069: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4073: LD_EXP 16
4077: PPUSH
4078: LD_STRING DH-thanks-1
4080: PPUSH
4081: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4085: LD_EXP 25
4089: PPUSH
4090: LD_STRING DJ-thanks-2
4092: PPUSH
4093: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4097: LD_EXP 25
4101: PPUSH
4102: LD_INT 4
4104: PPUSH
4105: LD_INT 3
4107: PPUSH
4108: CALL_OW 111
// wait ( 0 0$1 ) ;
4112: LD_INT 35
4114: PPUSH
4115: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4119: LD_EXP 16
4123: PPUSH
4124: LD_STRING DH-thanks-2
4126: PPUSH
4127: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4131: LD_INT 35
4133: PPUSH
4134: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_EXP 25
4145: PPUSH
4146: CALL_OW 292
4150: NOT
4151: IFFALSE 4131
// Say ( Heike , DH-thanks-2a ) ;
4153: LD_EXP 16
4157: PPUSH
4158: LD_STRING DH-thanks-2a
4160: PPUSH
4161: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4165: LD_EXP 25
4169: PPUSH
4170: CALL_OW 64
// InGameOff ;
4174: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4178: LD_STRING O2_ambush_out_cont
4180: PPUSH
4181: CALL_OW 337
// johnnySaved := true ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_INT 1
4192: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4193: LD_EXP 16
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 600
4203: PPUSH
4204: CALL_OW 492
// if IsOk ( Olaf ) then
4208: LD_EXP 17
4212: PPUSH
4213: CALL_OW 302
4217: IFFALSE 4234
// ComMoveXY ( Olaf , 44 , 25 ) ;
4219: LD_EXP 17
4223: PPUSH
4224: LD_INT 44
4226: PPUSH
4227: LD_INT 25
4229: PPUSH
4230: CALL_OW 111
// end ;
4234: END
// every 0 0$1 trigger russianPatrol do var i ;
4235: LD_EXP 21
4239: IFFALSE 4309
4241: GO 4243
4243: DISABLE
4244: LD_INT 0
4246: PPUSH
// begin enable ;
4247: ENABLE
// for i in russianPatrol do
4248: LD_ADDR_VAR 0 1
4252: PUSH
4253: LD_EXP 21
4257: PUSH
4258: FOR_IN
4259: IFFALSE 4307
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL_OW 256
4270: PUSH
4271: LD_INT 1000
4273: LESS
4274: IFFALSE 4288
4276: PUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: CALL_OW 314
4286: NOT
4287: AND
4288: IFFALSE 4305
// ComAgressiveMove ( i , 42 , 12 ) ;
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 42
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 114
4305: GO 4258
4307: POP
4308: POP
// end ;
4309: PPOPN 1
4311: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 2
4317: PPUSH
4318: CALL_OW 81
4322: PUSH
4323: LD_INT 2
4325: EQUAL
4326: IFFALSE 4339
4328: PUSH
4329: LD_EXP 25
4333: PPUSH
4334: CALL_OW 302
4338: AND
4339: IFFALSE 4356
4341: GO 4343
4343: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4344: LD_EXP 25
4348: PPUSH
4349: LD_STRING DJ-fire-1
4351: PPUSH
4352: CALL_OW 88
4356: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4357: LD_EXP 7
4361: NOT
4362: IFFALSE 4385
4364: PUSH
4365: LD_EXP 23
4369: PPUSH
4370: LD_INT 101
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PPUSH
4380: CALL_OW 72
4384: AND
4385: IFFALSE 4505
4387: GO 4389
4389: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4390: LD_EXP 16
4394: PPUSH
4395: CALL_OW 87
// DialogueOn ;
4399: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4403: LD_EXP 16
4407: PPUSH
4408: LD_STRING DH-see-enemy-patrol-1
4410: PPUSH
4411: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4415: LD_EXP 23
4419: PPUSH
4420: LD_INT 26
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PPUSH
4430: CALL_OW 72
4434: PUSH
4435: LD_INT 1
4437: ARRAY
4438: PPUSH
4439: LD_STRING DR-see-enemy-patrol-1
4441: PPUSH
4442: CALL_OW 88
// DialogueOff ;
4446: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4450: LD_EXP 23
4454: PPUSH
4455: LD_INT 66
4457: PPUSH
4458: LD_INT 22
4460: PPUSH
4461: CALL_OW 114
// wait ( 0 0$10 ) ;
4465: LD_INT 350
4467: PPUSH
4468: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4472: LD_EXP 23
4476: PPUSH
4477: LD_INT 175
4479: PPUSH
4480: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4484: LD_EXP 23
4488: PPUSH
4489: LD_INT 9
4491: PPUSH
4492: CALL_OW 173
// AddComFree ( russianForces ) ;
4496: LD_EXP 23
4500: PPUSH
4501: CALL_OW 199
// end ;
4505: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4506: LD_EXP 23
4510: PPUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 24
4516: PUSH
4517: LD_INT 960
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PPUSH
4528: CALL_OW 72
4532: IFFALSE 4785
4534: GO 4536
4536: DISABLE
4537: LD_INT 0
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 2
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_EXP 23
4573: PPUSH
4574: LD_INT 1
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 24
4582: PUSH
4583: LD_INT 960
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 24
4592: PUSH
4593: LD_INT 500
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 72
4613: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_EXP 23
4623: PPUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 24
4629: PUSH
4630: LD_INT 500
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 72
4645: ST_TO_ADDR
// if not tmp then
4646: LD_VAR 0 2
4650: NOT
4651: IFFALSE 4655
// exit ;
4653: GO 4785
// for i in tmp2 do
4655: LD_ADDR_VAR 0 1
4659: PUSH
4660: LD_VAR 0 3
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4724
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4668: LD_VAR 0 1
4672: PPUSH
4673: LD_VAR 0 2
4677: PPUSH
4678: LD_VAR 0 1
4682: PPUSH
4683: CALL_OW 74
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 10
4695: LESS
4696: IFFALSE 4722
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_VAR 0 2
4707: PPUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
4722: GO 4665
4724: POP
4725: POP
// if tmp3 then
4726: LD_VAR 0 4
4730: IFFALSE 4785
// for i in tmp3 do
4732: LD_ADDR_VAR 0 1
4736: PUSH
4737: LD_VAR 0 4
4741: PUSH
4742: FOR_IN
4743: IFFALSE 4783
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4745: LD_VAR 0 1
4749: PPUSH
4750: LD_INT 119
4752: PPUSH
4753: LD_INT 21
4755: PPUSH
4756: CALL_OW 297
4760: PUSH
4761: LD_INT 10
4763: GREATER
4764: IFFALSE 4781
// ComMoveXY ( i , 119 , 21 ) ;
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_INT 119
4773: PPUSH
4774: LD_INT 21
4776: PPUSH
4777: CALL_OW 111
4781: GO 4742
4783: POP
4784: POP
// end ;
4785: PPOPN 4
4787: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4788: LD_EXP 1
4792: IFFALSE 4834
4794: PUSH
4795: LD_EXP 16
4799: PPUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 14
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: PPUSH
4815: LD_EXP 16
4819: PPUSH
4820: CALL_OW 74
4824: PPUSH
4825: CALL_OW 296
4829: PUSH
4830: LD_INT 6
4832: LESS
4833: AND
4834: IFFALSE 4865
4836: GO 4838
4838: DISABLE
// begin animalCounter := animalCounter + 1 ;
4839: LD_ADDR_EXP 15
4843: PUSH
4844: LD_EXP 15
4848: PUSH
4849: LD_INT 1
4851: PLUS
4852: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_STRING DH-tiger-1
4860: PPUSH
4861: CALL_OW 88
// end ;
4865: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4866: LD_EXP 1
4870: IFFALSE 4912
4872: PUSH
4873: LD_EXP 16
4877: PPUSH
4878: LD_INT 25
4880: PUSH
4881: LD_INT 12
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: PPUSH
4893: LD_EXP 16
4897: PPUSH
4898: CALL_OW 74
4902: PPUSH
4903: CALL_OW 296
4907: PUSH
4908: LD_INT 6
4910: LESS
4911: AND
4912: IFFALSE 4943
4914: GO 4916
4916: DISABLE
// begin animalCounter := animalCounter + 1 ;
4917: LD_ADDR_EXP 15
4921: PUSH
4922: LD_EXP 15
4926: PUSH
4927: LD_INT 1
4929: PLUS
4930: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4931: LD_EXP 16
4935: PPUSH
4936: LD_STRING DH-ape-1
4938: PPUSH
4939: CALL_OW 88
// end ;
4943: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4944: LD_EXP 1
4948: IFFALSE 4990
4950: PUSH
4951: LD_EXP 16
4955: PPUSH
4956: LD_INT 25
4958: PUSH
4959: LD_INT 18
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 69
4970: PPUSH
4971: LD_EXP 16
4975: PPUSH
4976: CALL_OW 74
4980: PPUSH
4981: CALL_OW 296
4985: PUSH
4986: LD_INT 6
4988: LESS
4989: AND
4990: IFFALSE 5021
4992: GO 4994
4994: DISABLE
// begin animalCounter := animalCounter + 1 ;
4995: LD_ADDR_EXP 15
4999: PUSH
5000: LD_EXP 15
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
5009: LD_EXP 16
5013: PPUSH
5014: LD_STRING DH-bird-1
5016: PPUSH
5017: CALL_OW 88
// end ;
5021: END
// every 0 0$2 trigger animalCounter = 3 do
5022: LD_EXP 15
5026: PUSH
5027: LD_INT 3
5029: EQUAL
5030: IFFALSE 5042
5032: GO 5034
5034: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5035: LD_STRING ACH_ZOOLIGST
5037: PPUSH
5038: CALL_OW 543
5042: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5043: LD_INT 22
5045: PUSH
5046: LD_INT 2
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 101
5055: PUSH
5056: LD_INT 3
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: IFFALSE 5084
5073: GO 5075
5075: DISABLE
// russianSpotted := true ;
5076: LD_ADDR_EXP 9
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
5084: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5085: LD_EXP 16
5089: PPUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 21
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: PPUSH
5119: LD_EXP 16
5123: PPUSH
5124: CALL_OW 74
5128: PPUSH
5129: CALL_OW 296
5133: PUSH
5134: LD_INT 8
5136: LESS
5137: IFFALSE 5154
5139: GO 5141
5141: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5142: LD_EXP 16
5146: PPUSH
5147: LD_STRING DH-enemy-base
5149: PPUSH
5150: CALL_OW 88
5154: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5155: LD_EXP 25
5159: PPUSH
5160: CALL_OW 305
5164: NOT
5165: IFFALSE 5174
5167: PUSH
5168: LD_EXP 6
5172: NOT
5173: AND
5174: IFFALSE 5182
5176: PUSH
5177: LD_EXP 5
5181: AND
5182: IFFALSE 5191
5184: PUSH
5185: LD_EXP 12
5189: NOT
5190: AND
5191: IFFALSE 5200
5193: PUSH
5194: LD_EXP 11
5198: NOT
5199: AND
5200: IFFALSE 5378
5202: GO 5204
5204: DISABLE
5205: LD_INT 0
5207: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5208: LD_INT 35
5210: PPUSH
5211: CALL_OW 67
// for i in dogTag do
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_EXP 5
5224: PUSH
5225: FOR_IN
5226: IFFALSE 5275
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5228: LD_EXP 16
5232: PPUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_VAR 0 1
5246: PUSH
5247: LD_INT 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 297
5255: PUSH
5256: LD_INT 3
5258: LESS
5259: IFFALSE 5273
// begin dogTagFound := i ;
5261: LD_ADDR_EXP 6
5265: PUSH
5266: LD_VAR 0 1
5270: ST_TO_ADDR
// break ;
5271: GO 5275
// end ;
5273: GO 5225
5275: POP
5276: POP
// until dogTagFound ;
5277: LD_EXP 6
5281: IFFALSE 5208
// CenterNowOnUnits ( Heike ) ;
5283: LD_EXP 16
5287: PPUSH
5288: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5292: LD_EXP 16
5296: PPUSH
5297: LD_EXP 6
5301: PUSH
5302: LD_INT 1
5304: ARRAY
5305: PPUSH
5306: LD_EXP 6
5310: PUSH
5311: LD_INT 2
5313: ARRAY
5314: PPUSH
5315: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5319: LD_STRING ACH_DOGTAG
5321: PPUSH
5322: CALL_OW 543
// if mercenariesQuestReady then
5326: LD_EXP 10
5330: IFFALSE 5346
// Say ( Heike , DH-dogtag-found-quest ) else
5332: LD_EXP 16
5336: PPUSH
5337: LD_STRING DH-dogtag-found-quest
5339: PPUSH
5340: CALL_OW 88
5344: GO 5378
// if meetJohnny then
5346: LD_EXP 3
5350: IFFALSE 5366
// Say ( Heike , DH-dogtag-found ) else
5352: LD_EXP 16
5356: PPUSH
5357: LD_STRING DH-dogtag-found
5359: PPUSH
5360: CALL_OW 88
5364: GO 5378
// Say ( Heike , DH-dogtag-found-no-american ) ;
5366: LD_EXP 16
5370: PPUSH
5371: LD_STRING DH-dogtag-found-no-american
5373: PPUSH
5374: CALL_OW 88
// end ;
5378: PPOPN 1
5380: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5381: LD_EXP 8
5385: NOT
5386: IFFALSE 5395
5388: PUSH
5389: LD_EXP 7
5393: NOT
5394: AND
5395: IFFALSE 5411
5397: PUSH
5398: LD_INT 5
5400: PPUSH
5401: LD_EXP 16
5405: PPUSH
5406: CALL_OW 292
5410: AND
5411: IFFALSE 5433
5413: PUSH
5414: LD_EXP 16
5418: PPUSH
5419: LD_EXP 17
5423: PPUSH
5424: CALL_OW 296
5428: PUSH
5429: LD_INT 8
5431: LESS
5432: AND
5433: IFFALSE 5827
5435: GO 5437
5437: DISABLE
// begin olafSpotted := true ;
5438: LD_ADDR_EXP 8
5442: PUSH
5443: LD_INT 1
5445: ST_TO_ADDR
// if HasTask ( Olaf ) then
5446: LD_EXP 17
5450: PPUSH
5451: CALL_OW 314
5455: IFFALSE 5466
// ComStop ( Olaf ) ;
5457: LD_EXP 17
5461: PPUSH
5462: CALL_OW 141
// InGameOn ;
5466: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5470: LD_EXP 17
5474: PPUSH
5475: LD_EXP 16
5479: PPUSH
5480: CALL_OW 296
5484: PUSH
5485: LD_INT 8
5487: GREATER
5488: IFFALSE 5504
// ComMoveUnit ( Olaf , Heike ) ;
5490: LD_EXP 17
5494: PPUSH
5495: LD_EXP 16
5499: PPUSH
5500: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5504: LD_INT 35
5506: PPUSH
5507: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5511: LD_EXP 17
5515: PPUSH
5516: LD_EXP 16
5520: PPUSH
5521: CALL_OW 296
5525: PUSH
5526: LD_INT 8
5528: LESSEQUAL
5529: IFFALSE 5504
// ComTurnUnit ( Heike , Olaf ) ;
5531: LD_EXP 16
5535: PPUSH
5536: LD_EXP 17
5540: PPUSH
5541: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_EXP 16
5554: PPUSH
5555: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5559: LD_INT 18
5561: PPUSH
5562: CALL_OW 67
// DialogueOn ;
5566: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5570: LD_EXP 17
5574: PPUSH
5575: LD_STRING DO-olaf-1
5577: PPUSH
5578: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-1
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-2
5601: PPUSH
5602: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5606: LD_EXP 16
5610: PPUSH
5611: LD_STRING DH-olaf-2
5613: PPUSH
5614: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5618: LD_EXP 17
5622: PPUSH
5623: LD_STRING DO-olaf-3
5625: PPUSH
5626: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5630: LD_EXP 17
5634: PPUSH
5635: LD_STRING DO-olaf-4
5637: PPUSH
5638: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5642: LD_EXP 16
5646: PPUSH
5647: LD_STRING DH-olaf-4
5649: PPUSH
5650: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5654: LD_EXP 17
5658: PPUSH
5659: LD_STRING DO-olaf-5
5661: PPUSH
5662: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5666: LD_EXP 16
5670: PPUSH
5671: LD_STRING DH-olaf-5
5673: PPUSH
5674: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5678: LD_EXP 17
5682: PPUSH
5683: LD_STRING DO-olaf-6
5685: PPUSH
5686: CALL_OW 88
// if russianSpotted or johnnySaved then
5690: LD_EXP 9
5694: IFTRUE 5702
5696: PUSH
5697: LD_EXP 4
5701: OR
5702: IFFALSE 5730
// begin Say ( Heike , DH-olaf-6a ) ;
5704: LD_EXP 16
5708: PPUSH
5709: LD_STRING DH-olaf-6a
5711: PPUSH
5712: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5716: LD_EXP 17
5720: PPUSH
5721: LD_STRING DO-olaf-7a
5723: PPUSH
5724: CALL_OW 88
// end else
5728: GO 5754
// begin Say ( Heike , DH-olaf-6b ) ;
5730: LD_EXP 16
5734: PPUSH
5735: LD_STRING DH-olaf-6b
5737: PPUSH
5738: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5742: LD_EXP 17
5746: PPUSH
5747: LD_STRING DO-olaf-7b
5749: PPUSH
5750: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5754: LD_EXP 17
5758: PPUSH
5759: LD_STRING DO-olaf-8
5761: PPUSH
5762: CALL_OW 88
// DialogueOff ;
5766: CALL_OW 7
// InGameOff ;
5770: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5774: LD_STRING O3_camp_cont
5776: PPUSH
5777: CALL_OW 337
// if not johnnySaved then
5781: LD_EXP 4
5785: NOT
5786: IFFALSE 5797
// KillUnit ( Johnny ) ;
5788: LD_EXP 25
5792: PPUSH
5793: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5797: LD_EXP 17
5801: PPUSH
5802: LD_INT 52
5804: PPUSH
5805: LD_INT 90
5807: PPUSH
5808: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5812: LD_EXP 17
5816: PPUSH
5817: LD_INT 53
5819: PPUSH
5820: LD_INT 89
5822: PPUSH
5823: CALL_OW 178
// end ;
5827: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5828: LD_EXP 8
5832: NOT
5833: IFFALSE 5855
5835: PUSH
5836: LD_EXP 16
5840: PPUSH
5841: LD_EXP 18
5845: PPUSH
5846: CALL_OW 296
5850: PUSH
5851: LD_INT 36
5853: LESS
5854: AND
5855: IFFALSE 5875
5857: GO 5859
5859: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5860: LD_EXP 17
5864: PPUSH
5865: LD_INT 39
5867: PPUSH
5868: LD_INT 71
5870: PPUSH
5871: CALL_OW 111
5875: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , tmp , driver , tank ;
5876: LD_EXP 7
5880: NOT
5881: IFFALSE 5913
5883: PUSH
5884: LD_INT 2
5886: PPUSH
5887: LD_EXP 19
5891: PPUSH
5892: CALL_OW 292
5896: IFTRUE 5912
5898: PUSH
5899: LD_INT 2
5901: PPUSH
5902: LD_EXP 18
5906: PPUSH
5907: CALL_OW 292
5911: OR
5912: AND
5913: IFFALSE 7326
5915: GO 5917
5917: DISABLE
5918: LD_INT 0
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
// begin if not johnnySaved then
5924: LD_EXP 4
5928: NOT
5929: IFFALSE 5940
// KillUnit ( Johnny ) ;
5931: LD_EXP 25
5935: PPUSH
5936: CALL_OW 66
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , Heike , 30 ] ] ) ;
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_INT 22
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 91
5957: PUSH
5958: LD_EXP 16
5962: PUSH
5963: LD_INT 30
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 69
5979: ST_TO_ADDR
// if tmp then
5980: LD_VAR 0 2
5984: IFFALSE 6027
// begin for i in tmp do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 2
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6025
// begin ComStop ( i ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: CALL_OW 141
// AddComMoveXY ( i , 85 , 20 ) ;
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 85
6015: PPUSH
6016: LD_INT 20
6018: PPUSH
6019: CALL_OW 171
// end ;
6023: GO 5996
6025: POP
6026: POP
// end ; mercenariesSpotted := true ;
6027: LD_ADDR_EXP 7
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
6035: LD_STRING O4_camp_cont
6037: PPUSH
6038: CALL_OW 337
// InGameOn ;
6042: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
6046: LD_INT 53
6048: PPUSH
6049: LD_INT 89
6051: PPUSH
6052: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
6056: LD_INT 53
6058: PPUSH
6059: LD_INT 89
6061: PPUSH
6062: LD_INT 2
6064: PPUSH
6065: LD_INT 8
6067: NEG
6068: PPUSH
6069: CALL_OW 330
// if olafSpotted then
6073: LD_EXP 8
6077: IFFALSE 6195
// begin AddComTurnUnit ( Olaf , Heike ) ;
6079: LD_EXP 17
6083: PPUSH
6084: LD_EXP 16
6088: PPUSH
6089: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
6093: LD_EXP 16
6097: PPUSH
6098: LD_INT 51
6100: PPUSH
6101: LD_INT 86
6103: PPUSH
6104: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
6108: LD_EXP 16
6112: PPUSH
6113: LD_EXP 17
6117: PPUSH
6118: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
6122: LD_EXP 17
6126: PPUSH
6127: LD_STRING DO-camp-1
6129: PPUSH
6130: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6134: LD_EXP 18
6138: PUSH
6139: LD_EXP 19
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: LD_EXP 16
6152: PPUSH
6153: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6157: LD_EXP 18
6161: PPUSH
6162: LD_STRING DG-camp-1
6164: PPUSH
6165: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6169: LD_EXP 16
6173: PPUSH
6174: LD_STRING DH-camp-1
6176: PPUSH
6177: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6181: LD_EXP 17
6185: PPUSH
6186: LD_STRING DO-camp-2
6188: PPUSH
6189: CALL_OW 88
// end else
6193: GO 6590
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6195: LD_EXP 16
6199: PPUSH
6200: LD_INT 51
6202: PPUSH
6203: LD_INT 86
6205: PPUSH
6206: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6210: LD_EXP 16
6214: PPUSH
6215: LD_EXP 18
6219: PPUSH
6220: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6224: LD_EXP 18
6228: PUSH
6229: LD_EXP 19
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: LD_EXP 16
6242: PPUSH
6243: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6247: LD_EXP 18
6251: PPUSH
6252: LD_STRING DG-camp-1a
6254: PPUSH
6255: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6259: LD_EXP 16
6263: PPUSH
6264: LD_STRING DH-camp-1a
6266: PPUSH
6267: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6278: LD_EXP 19
6282: PPUSH
6283: LD_EXP 17
6287: PPUSH
6288: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6292: LD_EXP 19
6296: PPUSH
6297: LD_STRING DM-camp-1a
6299: PPUSH
6300: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6304: LD_EXP 17
6308: PPUSH
6309: LD_INT 52
6311: PPUSH
6312: LD_INT 90
6314: PPUSH
6315: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6319: LD_EXP 19
6323: PPUSH
6324: LD_EXP 16
6328: PPUSH
6329: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6333: LD_EXP 18
6337: PPUSH
6338: LD_STRING DG-camp-2a
6340: PPUSH
6341: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6345: LD_EXP 16
6349: PPUSH
6350: LD_STRING DH-camp-2a
6352: PPUSH
6353: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6357: LD_EXP 19
6361: PPUSH
6362: LD_STRING DM-camp-2a
6364: PPUSH
6365: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6369: LD_INT 35
6371: PPUSH
6372: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6376: LD_EXP 17
6380: PPUSH
6381: LD_EXP 16
6385: PPUSH
6386: CALL_OW 296
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: IFFALSE 6369
// AddComTurnUnit ( Olaf , Heike ) ;
6396: LD_EXP 17
6400: PPUSH
6401: LD_EXP 16
6405: PPUSH
6406: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6410: LD_EXP 19
6414: PPUSH
6415: LD_EXP 16
6419: PPUSH
6420: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING DO-camp-2a
6431: PPUSH
6432: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6436: LD_EXP 16
6440: PPUSH
6441: LD_EXP 17
6445: PPUSH
6446: CALL_OW 119
// if russianSpotted then
6450: LD_EXP 9
6454: IFFALSE 6494
// begin Say ( Heike , DH-camp-2aa ) ;
6456: LD_EXP 16
6460: PPUSH
6461: LD_STRING DH-camp-2aa
6463: PPUSH
6464: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6468: LD_EXP 18
6472: PPUSH
6473: LD_STRING DG-camp-2aa
6475: PPUSH
6476: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6480: LD_EXP 19
6484: PPUSH
6485: LD_STRING DM-camp-2aa
6487: PPUSH
6488: CALL_OW 88
// end else
6492: GO 6518
// begin Say ( Heike , DH-camp-2ab ) ;
6494: LD_EXP 16
6498: PPUSH
6499: LD_STRING DH-camp-2ab
6501: PPUSH
6502: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6506: LD_EXP 19
6510: PPUSH
6511: LD_STRING DM-camp-2ab
6513: PPUSH
6514: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-3a
6525: PPUSH
6526: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6530: LD_EXP 17
6534: PPUSH
6535: LD_STRING DO-camp-3a
6537: PPUSH
6538: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6542: LD_EXP 18
6546: PPUSH
6547: LD_STRING DG-camp-3a
6549: PPUSH
6550: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6554: LD_EXP 16
6558: PPUSH
6559: LD_STRING DH-camp-4aa
6561: PPUSH
6562: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6566: LD_EXP 19
6570: PPUSH
6571: LD_STRING DM-camp-4aa
6573: PPUSH
6574: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6578: LD_EXP 17
6582: PPUSH
6583: LD_STRING DO-camp-4a
6585: PPUSH
6586: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING DO-camp-3
6597: PPUSH
6598: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6602: LD_EXP 17
6606: PPUSH
6607: LD_STRING DO-camp-4
6609: PPUSH
6610: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6614: LD_EXP 18
6618: PPUSH
6619: LD_EXP 17
6623: PPUSH
6624: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6628: LD_EXP 18
6632: PPUSH
6633: LD_STRING DG-camp-4
6635: PPUSH
6636: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6640: LD_EXP 16
6644: PPUSH
6645: LD_EXP 18
6649: PPUSH
6650: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6654: LD_EXP 16
6658: PPUSH
6659: LD_STRING DH-camp-4
6661: PPUSH
6662: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6666: LD_EXP 19
6670: PUSH
6671: LD_EXP 17
6675: PUSH
6676: LD_EXP 18
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: PPUSH
6686: LD_EXP 16
6690: PPUSH
6691: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6695: LD_EXP 18
6699: PPUSH
6700: LD_STRING DG-camp-5
6702: PPUSH
6703: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6707: LD_EXP 18
6711: PPUSH
6712: LD_STRING DG-camp-6
6714: PPUSH
6715: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6719: LD_EXP 16
6723: PPUSH
6724: LD_STRING DH-camp-6
6726: PPUSH
6727: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6731: LD_EXP 18
6735: PPUSH
6736: LD_STRING DG-camp-7
6738: PPUSH
6739: CALL_OW 88
// if DogTagFound then
6743: LD_EXP 6
6747: IFFALSE 6787
// begin Say ( Heike , DH-quest-1a ) ;
6749: LD_EXP 16
6753: PPUSH
6754: LD_STRING DH-quest-1a
6756: PPUSH
6757: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6761: LD_EXP 18
6765: PPUSH
6766: LD_STRING DG-quest-1a
6768: PPUSH
6769: CALL_OW 88
// mercenariesQuestDone := true ;
6773: LD_ADDR_EXP 11
6777: PUSH
6778: LD_INT 1
6780: ST_TO_ADDR
// InGameOff ;
6781: CALL_OW 9
// end else
6785: GO 6955
// begin Say ( Heike , DH-camp-7 ) ;
6787: LD_EXP 16
6791: PPUSH
6792: LD_STRING DH-camp-7
6794: PPUSH
6795: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6799: LD_EXP 16
6803: PPUSH
6804: CALL_OW 256
6808: PUSH
6809: LD_INT 1000
6811: LESS
6812: IFFALSE 6906
// begin Say ( Olaf , DO-heal-1 ) ;
6814: LD_EXP 17
6818: PPUSH
6819: LD_STRING DO-heal-1
6821: PPUSH
6822: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6826: LD_EXP 16
6830: PPUSH
6831: LD_INT 51
6833: PPUSH
6834: LD_INT 88
6836: PPUSH
6837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6848: LD_EXP 16
6852: PPUSH
6853: LD_EXP 17
6857: PPUSH
6858: CALL_OW 296
6862: PUSH
6863: LD_INT 4
6865: LESS
6866: IFTRUE 6885
6868: PUSH
6869: LD_EXP 16
6873: PPUSH
6874: LD_INT 51
6876: PPUSH
6877: LD_INT 88
6879: PPUSH
6880: CALL_OW 307
6884: OR
6885: IFFALSE 6841
// SetLives ( Heike , 1000 ) ;
6887: LD_EXP 16
6891: PPUSH
6892: LD_INT 1000
6894: PPUSH
6895: CALL_OW 234
// wait ( 0 0$2 ) ;
6899: LD_INT 70
6901: PPUSH
6902: CALL_OW 67
// end ; InGameOff ;
6906: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6910: LD_EXP 17
6914: PUSH
6915: LD_EXP 18
6919: PUSH
6920: LD_EXP 19
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PPUSH
6930: LD_INT 53
6932: PPUSH
6933: LD_INT 89
6935: PPUSH
6936: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6940: LD_STRING O5_proof_cont
6942: PPUSH
6943: CALL_OW 337
// mercenariesQuestReady := true ;
6947: LD_ADDR_EXP 10
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6955: LD_EXP 10
6959: NOT
6960: IFFALSE 6964
// exit ;
6962: GO 7326
// wait ( 0 0$35 ) ;
6964: LD_INT 1225
6966: PPUSH
6967: CALL_OW 67
// driver := PreparePatrolTank ;
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: CALL 2827 0 0
6980: ST_TO_ADDR
// if not driver then
6981: LD_VAR 0 3
6985: NOT
6986: IFFALSE 6990
// exit ;
6988: GO 7326
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6990: LD_INT 2
6992: PPUSH
6993: LD_INT 1
6995: PPUSH
6996: LD_INT 2
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: CALL_OW 80
// tank := IsInUnit ( driver ) ;
7006: LD_ADDR_VAR 0 4
7010: PUSH
7011: LD_VAR 0 3
7015: PPUSH
7016: CALL_OW 310
7020: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 500
7028: PPUSH
7029: CALL_OW 234
// SetLives ( driver , 450 ) ;
7033: LD_VAR 0 3
7037: PPUSH
7038: LD_INT 450
7040: PPUSH
7041: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
7045: LD_VAR 0 3
7049: PPUSH
7050: LD_INT 59
7052: PPUSH
7053: LD_INT 60
7055: PPUSH
7056: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7060: LD_INT 35
7062: PPUSH
7063: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
7067: LD_VAR 0 4
7071: PPUSH
7072: LD_INT 59
7074: PPUSH
7075: LD_INT 60
7077: PPUSH
7078: CALL_OW 307
7082: IFFALSE 7060
// if not See ( 1 , Heike ) then
7084: LD_INT 1
7086: PPUSH
7087: LD_EXP 16
7091: PPUSH
7092: CALL_OW 292
7096: NOT
7097: IFFALSE 7221
// begin if Difficulty < 3 then
7099: LD_OWVAR 67
7103: PUSH
7104: LD_INT 3
7106: LESS
7107: IFFALSE 7125
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
7109: LD_INT 59
7111: PPUSH
7112: LD_INT 60
7114: PPUSH
7115: LD_INT 2
7117: PPUSH
7118: LD_INT 6
7120: PPUSH
7121: CALL_OW 330
// ComExitVehicle ( driver ) ;
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL_OW 121
// wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
7141: LD_VAR 0 3
7145: PPUSH
7146: LD_INT 58
7148: PPUSH
7149: LD_INT 54
7151: PPUSH
7152: CALL_OW 171
// wait ( 0 0$1 ) ;
7156: LD_INT 35
7158: PPUSH
7159: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7163: LD_VAR 0 3
7167: PPUSH
7168: LD_INT 57
7170: PPUSH
7171: LD_INT 53
7173: PPUSH
7174: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7178: LD_VAR 0 3
7182: PPUSH
7183: LD_INT 350
7185: PPUSH
7186: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7190: LD_VAR 0 3
7194: PPUSH
7195: LD_VAR 0 4
7199: PPUSH
7200: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7204: LD_VAR 0 3
7208: PPUSH
7209: LD_INT 107
7211: PPUSH
7212: LD_INT 118
7214: PPUSH
7215: CALL_OW 171
// end else
7219: GO 7236
// begin ComMoveXY ( driver , 107 , 118 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 107
7228: PPUSH
7229: LD_INT 118
7231: PPUSH
7232: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7236: LD_INT 35
7238: PPUSH
7239: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7243: LD_VAR 0 4
7247: PPUSH
7248: LD_INT 107
7250: PPUSH
7251: LD_INT 118
7253: PPUSH
7254: CALL_OW 307
7258: IFTRUE 7271
7260: PUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 301
7270: OR
7271: IFFALSE 7236
// if IsDead ( driver [ 1 ] ) then
7273: LD_VAR 0 3
7277: PUSH
7278: LD_INT 1
7280: ARRAY
7281: PPUSH
7282: CALL_OW 301
7286: IFFALSE 7290
// exit ;
7288: GO 7326
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7290: LD_ADDR_VAR 0 1
7294: PUSH
7295: LD_INT 22
7297: PUSH
7298: LD_INT 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 69
7309: PUSH
7310: FOR_IN
7311: IFFALSE 7324
// RemoveUnit ( i ) ;
7313: LD_VAR 0 1
7317: PPUSH
7318: CALL_OW 64
7322: GO 7310
7324: POP
7325: POP
// end ;
7326: PPOPN 4
7328: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7329: LD_INT 10
7331: PPUSH
7332: LD_INT 22
7334: PUSH
7335: LD_INT 2
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: IFFALSE 7434
7362: GO 7364
7364: DISABLE
// begin InGameOn ;
7365: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7369: LD_EXP 17
7373: PUSH
7374: LD_EXP 19
7378: PUSH
7379: LD_EXP 18
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: LD_EXP 16
7393: PPUSH
7394: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7398: LD_EXP 19
7402: PPUSH
7403: LD_STRING DM-quest-1
7405: PPUSH
7406: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7410: LD_EXP 18
7414: PPUSH
7415: LD_STRING DG-quest-1
7417: PPUSH
7418: CALL_OW 88
// InGameOff ;
7422: CALL_OW 9
// mercenariesQuestDone := true ;
7426: LD_ADDR_EXP 11
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// end ;
7434: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7435: LD_EXP 16
7439: PPUSH
7440: LD_INT 10
7442: PPUSH
7443: CALL_OW 308
7447: IFFALSE 7455
7449: PUSH
7450: LD_EXP 6
7454: AND
7455: IFFALSE 7463
7457: PUSH
7458: LD_EXP 10
7462: AND
7463: IFFALSE 7499
7465: PUSH
7466: LD_INT 10
7468: PPUSH
7469: LD_INT 22
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 21
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 70
7497: NOT
7498: AND
7499: IFFALSE 7673
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin InGameOn ;
7507: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7511: LD_EXP 17
7515: PUSH
7516: LD_EXP 19
7520: PUSH
7521: LD_EXP 18
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: LD_EXP 16
7535: PPUSH
7536: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 54
7547: PPUSH
7548: LD_INT 86
7550: PPUSH
7551: CALL_OW 111
// p := p + 1 ;
7555: LD_ADDR_VAR 0 1
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: LD_INT 1
7567: PLUS
7568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7569: LD_INT 35
7571: PPUSH
7572: CALL_OW 67
// p := p + 1 ;
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7590: LD_EXP 16
7594: PPUSH
7595: LD_EXP 18
7599: PPUSH
7600: CALL_OW 296
7604: PUSH
7605: LD_INT 4
7607: LESS
7608: IFTRUE 7620
7610: PUSH
7611: LD_VAR 0 1
7615: PUSH
7616: LD_INT 5
7618: GREATER
7619: OR
7620: IFFALSE 7569
// Say ( Mike , DM-quest-1 ) ;
7622: LD_EXP 19
7626: PPUSH
7627: LD_STRING DM-quest-1
7629: PPUSH
7630: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7634: LD_EXP 18
7638: PPUSH
7639: LD_STRING DG-quest-1
7641: PPUSH
7642: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7646: LD_EXP 16
7650: PPUSH
7651: LD_INT 55
7653: PPUSH
7654: LD_INT 87
7656: PPUSH
7657: CALL_OW 111
// InGameOff ;
7661: CALL_OW 9
// mercenariesQuestDone := true ;
7665: LD_ADDR_EXP 11
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// end ;
7673: PPOPN 1
7675: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7676: LD_EXP 16
7680: PUSH
7681: LD_INT 55
7683: PUSH
7684: EMPTY
7685: LIST
7686: PPUSH
7687: CALL_OW 69
7691: IN
7692: IFFALSE 7732
7694: GO 7696
7696: DISABLE
// begin if Difficulty < 3 then
7697: LD_OWVAR 67
7701: PUSH
7702: LD_INT 3
7704: LESS
7705: IFFALSE 7720
// RemoveSeeing ( 59 , 60 , 2 ) ;
7707: LD_INT 59
7709: PPUSH
7710: LD_INT 60
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7720: LD_EXP 16
7724: PPUSH
7725: LD_STRING DH-driver
7727: PPUSH
7728: CALL_OW 88
// end ;
7732: END
// every 0 0$1 trigger mercenariesQuestDone do
7733: LD_EXP 11
7737: IFFALSE 8227
7739: GO 7741
7741: DISABLE
// begin if mercenariesQuestReady then
7742: LD_EXP 10
7746: IFFALSE 7755
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7748: LD_STRING O5_proof_cont_out
7750: PPUSH
7751: CALL_OW 337
// InGameOn ;
7755: CALL_OW 8
// if IsInUnit ( Heike ) then
7759: LD_EXP 16
7763: PPUSH
7764: CALL_OW 310
7768: IFFALSE 7779
// ComExitVehicle ( Heike ) ;
7770: LD_EXP 16
7774: PPUSH
7775: CALL_OW 121
// wait ( 3 ) ;
7779: LD_INT 3
7781: PPUSH
7782: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7786: LD_EXP 16
7790: PPUSH
7791: LD_EXP 18
7795: PPUSH
7796: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7800: LD_EXP 17
7804: PUSH
7805: LD_EXP 19
7809: PUSH
7810: LD_EXP 18
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: LD_EXP 16
7824: PPUSH
7825: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7829: LD_EXP 16
7833: PPUSH
7834: LD_STRING DH-quest-done-1
7836: PPUSH
7837: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_STRING DM-quest-done-1
7848: PPUSH
7849: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7853: LD_EXP 18
7857: PPUSH
7858: LD_STRING DG-quest-done-1
7860: PPUSH
7861: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7865: LD_EXP 16
7869: PPUSH
7870: LD_EXP 17
7874: PPUSH
7875: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7879: LD_EXP 16
7883: PPUSH
7884: LD_STRING DH-quest-done-2
7886: PPUSH
7887: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7891: LD_EXP 17
7895: PPUSH
7896: LD_STRING DO-quest-done-2
7898: PPUSH
7899: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7903: LD_EXP 17
7907: PPUSH
7908: LD_STRING DO-quest-done-3
7910: PPUSH
7911: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7915: LD_EXP 18
7919: PPUSH
7920: LD_INT 51
7922: PPUSH
7923: LD_INT 90
7925: PPUSH
7926: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7930: LD_EXP 18
7934: PPUSH
7935: LD_INT 50
7937: PPUSH
7938: LD_INT 89
7940: PPUSH
7941: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7945: LD_EXP 16
7949: PPUSH
7950: LD_EXP 18
7954: PPUSH
7955: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7959: LD_EXP 18
7963: PPUSH
7964: LD_STRING DG-quest-done-4
7966: PPUSH
7967: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7971: LD_EXP 18
7975: PPUSH
7976: LD_EXP 16
7980: PPUSH
7981: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7985: LD_EXP 16
7989: PPUSH
7990: CALL_OW 256
7994: PUSH
7995: LD_INT 1000
7997: LESS
7998: IFFALSE 8092
// begin Say ( Olaf , DO-heal-1 ) ;
8000: LD_EXP 17
8004: PPUSH
8005: LD_STRING DO-heal-1
8007: PPUSH
8008: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
8012: LD_EXP 16
8016: PPUSH
8017: LD_INT 51
8019: PPUSH
8020: LD_INT 88
8022: PPUSH
8023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8027: LD_INT 35
8029: PPUSH
8030: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
8034: LD_EXP 16
8038: PPUSH
8039: LD_EXP 17
8043: PPUSH
8044: CALL_OW 296
8048: PUSH
8049: LD_INT 4
8051: LESS
8052: IFTRUE 8071
8054: PUSH
8055: LD_EXP 16
8059: PPUSH
8060: LD_INT 51
8062: PPUSH
8063: LD_INT 88
8065: PPUSH
8066: CALL_OW 307
8070: OR
8071: IFFALSE 8027
// SetLives ( Heike , 1000 ) ;
8073: LD_EXP 16
8077: PPUSH
8078: LD_INT 1000
8080: PPUSH
8081: CALL_OW 234
// wait ( 0 0$2 ) ;
8085: LD_INT 70
8087: PPUSH
8088: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
8092: LD_EXP 16
8096: PPUSH
8097: LD_STRING DH-quest-done-4
8099: PPUSH
8100: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
8104: LD_EXP 17
8108: PPUSH
8109: LD_STRING DO-quest-done-4
8111: PPUSH
8112: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
8116: LD_EXP 16
8120: PPUSH
8121: LD_EXP 17
8125: PPUSH
8126: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
8130: LD_EXP 16
8134: PPUSH
8135: LD_STRING DH-quest-done-5
8137: PPUSH
8138: CALL_OW 88
// InGameOff ;
8142: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
8146: LD_STRING O6_end_cont
8148: PPUSH
8149: CALL_OW 337
// SetSide ( Givi , 2 ) ;
8153: LD_EXP 18
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8165: LD_EXP 19
8169: PPUSH
8170: LD_INT 2
8172: PPUSH
8173: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8177: LD_INT 42
8179: PPUSH
8180: LD_INT 2
8182: PPUSH
8183: LD_INT 2
8185: PPUSH
8186: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8190: LD_EXP 17
8194: PPUSH
8195: LD_INT 53
8197: PPUSH
8198: LD_INT 89
8200: PPUSH
8201: CALL_OW 118
// lastObjectiveActive := true ;
8205: LD_ADDR_EXP 12
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: CALL_OW 424
// PreparePrison ;
8223: CALL 1166 0 0
// end ;
8227: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8228: LD_INT 22
8230: PUSH
8231: LD_INT 2
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 91
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: LD_INT 4
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PPUSH
8256: CALL_OW 69
8260: IFFALSE 8418
8262: GO 8264
8264: DISABLE
8265: LD_INT 0
8267: PPUSH
8268: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8269: LD_INT 245
8271: PUSH
8272: LD_INT 210
8274: PUSH
8275: LD_INT 210
8277: PUSH
8278: LD_INT 175
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: PUSH
8287: LD_OWVAR 67
8291: ARRAY
8292: PPUSH
8293: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8297: LD_ADDR_VAR 0 2
8301: PUSH
8302: LD_INT 22
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 25
8314: PUSH
8315: LD_INT 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 54
8324: PUSH
8325: EMPTY
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: ST_TO_ADDR
// if not tmp then
8338: LD_VAR 0 2
8342: NOT
8343: IFFALSE 8347
// exit ;
8345: GO 8418
// for i in tmp do
8347: LD_ADDR_VAR 0 1
8351: PUSH
8352: LD_VAR 0 2
8356: PUSH
8357: FOR_IN
8358: IFFALSE 8386
// begin ComExitBuilding ( i ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_INT 121
8376: PPUSH
8377: LD_INT 22
8379: PPUSH
8380: CALL_OW 174
// end ;
8384: GO 8357
8386: POP
8387: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_INT 121
8395: PPUSH
8396: LD_INT 22
8398: PPUSH
8399: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8403: LD_EXP 24
8407: PPUSH
8408: LD_INT 121
8410: PPUSH
8411: LD_INT 22
8413: PPUSH
8414: CALL_OW 114
// end ;
8418: PPOPN 2
8420: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8421: LD_INT 22
8423: PUSH
8424: LD_INT 2
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 91
8433: PUSH
8434: LD_INT 8
8436: PUSH
8437: LD_INT 4
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PPUSH
8449: CALL_OW 69
8453: IFFALSE 8611
8455: GO 8457
8457: DISABLE
8458: LD_INT 0
8460: PPUSH
8461: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8462: LD_INT 315
8464: PUSH
8465: LD_INT 280
8467: PUSH
8468: LD_INT 245
8470: PUSH
8471: LD_INT 210
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: LD_OWVAR 67
8484: ARRAY
8485: PPUSH
8486: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_INT 22
8497: PUSH
8498: LD_INT 3
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 25
8507: PUSH
8508: LD_INT 1
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 54
8517: PUSH
8518: EMPTY
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// if not tmp then
8531: LD_VAR 0 2
8535: NOT
8536: IFFALSE 8540
// exit ;
8538: GO 8611
// for i in tmp do
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_VAR 0 2
8549: PUSH
8550: FOR_IN
8551: IFFALSE 8579
// begin ComExitBuilding ( i ) ;
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_INT 142
8569: PPUSH
8570: LD_INT 71
8572: PPUSH
8573: CALL_OW 174
// end ;
8577: GO 8550
8579: POP
8580: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8581: LD_EXP 23
8585: PPUSH
8586: LD_INT 142
8588: PPUSH
8589: LD_INT 71
8591: PPUSH
8592: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8596: LD_EXP 24
8600: PPUSH
8601: LD_INT 142
8603: PPUSH
8604: LD_INT 71
8606: PPUSH
8607: CALL_OW 114
// end ;
8611: PPOPN 2
8613: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8614: LD_INT 22
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 58
8636: PUSH
8637: EMPTY
8638: LIST
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: LD_INT 24
8645: PUSH
8646: LD_INT 1000
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 91
8659: PUSH
8660: LD_EXP 17
8664: PUSH
8665: LD_INT 8
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: IFFALSE 8697
8686: PUSH
8687: LD_EXP 17
8691: PPUSH
8692: CALL_OW 302
8696: AND
8697: IFFALSE 8811
8699: GO 8701
8701: DISABLE
// begin enable ;
8702: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8703: LD_EXP 17
8707: PPUSH
8708: LD_INT 22
8710: PUSH
8711: LD_INT 2
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 21
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 58
8730: PUSH
8731: EMPTY
8732: LIST
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: LD_INT 1000
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 91
8753: PUSH
8754: LD_EXP 17
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PPUSH
8774: CALL_OW 69
8778: PUSH
8779: LD_INT 1
8781: ARRAY
8782: PPUSH
8783: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8787: LD_EXP 17
8791: PPUSH
8792: LD_INT 52
8794: PPUSH
8795: LD_INT 90
8797: PPUSH
8798: CALL_OW 171
// AddComHold ( Olaf ) ;
8802: LD_EXP 17
8806: PPUSH
8807: CALL_OW 200
// end ;
8811: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8812: LD_EXP 12
8816: IFFALSE 8828
8818: PUSH
8819: LD_INT 2
8821: PPUSH
8822: CALL_OW 302
8826: NOT
8827: AND
8828: IFFALSE 8840
8830: PUSH
8831: LD_OWVAR 67
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: AND
8840: IFFALSE 8849
8842: PUSH
8843: LD_EXP 13
8847: NOT
8848: AND
8849: IFFALSE 8866
8851: GO 8853
8853: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8854: LD_EXP 16
8858: PPUSH
8859: LD_STRING DH-prison-missing
8861: PPUSH
8862: CALL_OW 88
// end ;
8866: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8867: LD_EXP 12
8871: IFFALSE 8883
8873: PUSH
8874: LD_INT 8
8876: PPUSH
8877: CALL_OW 302
8881: NOT
8882: AND
8883: IFFALSE 8895
8885: PUSH
8886: LD_OWVAR 67
8890: PUSH
8891: LD_INT 1
8893: GREATER
8894: AND
8895: IFFALSE 8904
8897: PUSH
8898: LD_EXP 13
8902: NOT
8903: AND
8904: IFFALSE 8921
8906: GO 8908
8908: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DH-prison-missing
8916: PPUSH
8917: CALL_OW 88
// end ;
8921: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8922: LD_EXP 12
8926: IFFALSE 8938
8928: PUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 302
8936: NOT
8937: AND
8938: IFFALSE 8947
8940: PUSH
8941: LD_EXP 13
8945: NOT
8946: AND
8947: IFFALSE 8964
8949: GO 8951
8951: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8952: LD_EXP 16
8956: PPUSH
8957: LD_STRING DH-prison-missing-a
8959: PPUSH
8960: CALL_OW 88
// end ;
8964: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8965: LD_EXP 12
8969: IFFALSE 8981
8971: PUSH
8972: LD_INT 10
8974: PPUSH
8975: CALL_OW 302
8979: NOT
8980: AND
8981: IFFALSE 8990
8983: PUSH
8984: LD_EXP 13
8988: NOT
8989: AND
8990: IFFALSE 9007
8992: GO 8994
8994: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8995: LD_EXP 16
8999: PPUSH
9000: LD_STRING DH-prison-missing-a
9002: PPUSH
9003: CALL_OW 88
// end ;
9007: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
9008: LD_EXP 13
9012: NOT
9013: IFFALSE 9021
9015: PUSH
9016: LD_EXP 12
9020: AND
9021: IFFALSE 9037
9023: PUSH
9024: LD_INT 2
9026: PPUSH
9027: LD_EXP 20
9031: PPUSH
9032: CALL_OW 292
9036: AND
9037: IFFALSE 9182
9039: GO 9041
9041: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
9042: LD_EXP 20
9046: PPUSH
9047: LD_EXP 16
9051: PPUSH
9052: CALL_OW 119
// DialogueOn ;
9056: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
9060: LD_EXP 20
9064: PPUSH
9065: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
9069: LD_EXP 20
9073: PPUSH
9074: LD_STRING DK-prison-found
9076: PPUSH
9077: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
9081: LD_EXP 16
9085: PPUSH
9086: LD_STRING DH-prison-found
9088: PPUSH
9089: CALL_OW 88
// DialogueOff ;
9093: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
9097: LD_EXP 20
9101: PPUSH
9102: LD_INT 2
9104: PPUSH
9105: CALL_OW 235
// prisonFound := true ;
9109: LD_ADDR_EXP 13
9113: PUSH
9114: LD_INT 1
9116: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
9117: LD_STRING O6_prison_out
9119: PPUSH
9120: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
9124: LD_EXP 23
9128: PPUSH
9129: LD_EXP 16
9133: PPUSH
9134: CALL_OW 250
9138: PPUSH
9139: LD_EXP 16
9143: PPUSH
9144: CALL_OW 251
9148: PPUSH
9149: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
9153: LD_EXP 24
9157: PPUSH
9158: LD_EXP 16
9162: PPUSH
9163: CALL_OW 250
9167: PPUSH
9168: LD_EXP 16
9172: PPUSH
9173: CALL_OW 251
9177: PPUSH
9178: CALL_OW 114
// end ;
9182: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9183: LD_EXP 16
9187: PPUSH
9188: CALL_OW 256
9192: PUSH
9193: LD_INT 500
9195: LESS
9196: IFFALSE 9209
9198: GO 9200
9200: DISABLE
// heikeHurt := true ;
9201: LD_ADDR_EXP 14
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
9209: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 21
9222: PUSH
9223: LD_INT 3
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: IFFALSE 9556
9240: GO 9242
9242: DISABLE
9243: LD_INT 0
9245: PPUSH
9246: PPUSH
9247: PPUSH
// begin uc_side := 3 ;
9248: LD_ADDR_OWVAR 20
9252: PUSH
9253: LD_INT 3
9255: ST_TO_ADDR
// uc_nation := 3 ;
9256: LD_ADDR_OWVAR 21
9260: PUSH
9261: LD_INT 3
9263: ST_TO_ADDR
// tmp := [ ] ;
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: EMPTY
9270: ST_TO_ADDR
// for i := 1 to 5 do
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: DOUBLE
9277: LD_INT 1
9279: DEC
9280: ST_TO_ADDR
9281: LD_INT 5
9283: PUSH
9284: FOR_TO
9285: IFFALSE 9393
// begin PrepareHuman ( false , 1 , 4 ) ;
9287: LD_INT 0
9289: PPUSH
9290: LD_INT 1
9292: PPUSH
9293: LD_INT 4
9295: PPUSH
9296: CALL_OW 380
// un := CreateHuman ;
9300: LD_ADDR_VAR 0 3
9304: PUSH
9305: CALL_OW 44
9309: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9310: LD_VAR 0 3
9314: PPUSH
9315: LD_INT 4
9317: PPUSH
9318: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9322: LD_VAR 0 3
9326: PPUSH
9327: LD_INT 158
9329: PPUSH
9330: LD_INT 80
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9340: LD_VAR 0 3
9344: PPUSH
9345: LD_INT 147
9347: PPUSH
9348: LD_INT 75
9350: PPUSH
9351: CALL_OW 111
// wait ( 0 0$1 ) ;
9355: LD_INT 35
9357: PPUSH
9358: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9362: LD_ADDR_VAR 0 2
9366: PUSH
9367: LD_VAR 0 2
9371: PPUSH
9372: LD_VAR 0 2
9376: PUSH
9377: LD_INT 1
9379: PLUS
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: CALL_OW 1
9390: ST_TO_ADDR
// end ;
9391: GO 9284
9393: POP
9394: POP
// repeat wait ( 0 0$1 ) ;
9395: LD_INT 35
9397: PPUSH
9398: CALL_OW 67
// for i in tmp do
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_VAR 0 2
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9534
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9415: LD_ADDR_VAR 0 3
9419: PUSH
9420: LD_INT 22
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PPUSH
9430: CALL_OW 69
9434: PPUSH
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 74
9444: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: CALL_OW 250
9458: PPUSH
9459: LD_VAR 0 3
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 251
9472: PPUSH
9473: CALL_OW 428
9477: IFFALSE 9518
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_VAR 0 3
9488: PUSH
9489: LD_INT 1
9491: ARRAY
9492: PPUSH
9493: CALL_OW 250
9497: PPUSH
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 1
9505: ARRAY
9506: PPUSH
9507: CALL_OW 251
9511: PPUSH
9512: CALL_OW 114
9516: GO 9532
// ComAttackUnit ( i , Heike ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_EXP 16
9527: PPUSH
9528: CALL_OW 115
// end ;
9532: GO 9412
9534: POP
9535: POP
// until IsDead ( Heike ) or not tmp ;
9536: LD_EXP 16
9540: PPUSH
9541: CALL_OW 301
9545: IFTRUE 9554
9547: PUSH
9548: LD_VAR 0 2
9552: NOT
9553: OR
9554: IFFALSE 9395
// end ;
9556: PPOPN 3
9558: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9559: LD_EXP 12
9563: IFFALSE 9576
9565: PUSH
9566: LD_EXP 16
9570: PPUSH
9571: CALL_OW 302
9575: AND
9576: IFFALSE 9622
9578: PUSH
9579: LD_INT 1
9581: PPUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 22
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 50
9604: PUSH
9605: EMPTY
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 71
9617: PUSH
9618: LD_INT 0
9620: EQUAL
9621: AND
9622: IFFALSE 10062
9624: GO 9626
9626: DISABLE
9627: LD_INT 0
9629: PPUSH
// begin if not heikeHurt then
9630: LD_EXP 14
9634: NOT
9635: IFFALSE 9644
// SetAchievement ( ACH_INVINCIBLE ) ;
9637: LD_STRING ACH_INVINCIBLE
9639: PPUSH
9640: CALL_OW 543
// if tick <= 6 6$00 then
9644: LD_OWVAR 1
9648: PUSH
9649: LD_INT 12600
9651: LESSEQUAL
9652: IFFALSE 9661
// SetAchievement ( ACH_HSPEED_1 ) ;
9654: LD_STRING ACH_HSPEED_1
9656: PPUSH
9657: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9661: LD_STRING enableBioCharacter(BIO_GIVI)
9663: PPUSH
9664: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9668: LD_STRING enableBioCharacter(BIO_MIKE)
9670: PPUSH
9671: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9675: LD_STRING enableBioCharacter(BIO_OLAF)
9677: PPUSH
9678: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9682: LD_ADDR_VAR 0 1
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 1
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 50
9709: PUSH
9710: EMPTY
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if Kamil in tmp then
9723: LD_EXP 20
9727: PUSH
9728: LD_VAR 0 1
9732: IN
9733: IFFALSE 9742
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9735: LD_STRING enableBioCharacter(BIO_KAMI)
9737: PPUSH
9738: CALL_OW 559
// if prisonFound then
9742: LD_EXP 13
9746: IFFALSE 9785
// begin if not IsOk ( Kamil ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: NOT
9758: IFFALSE 9773
// AddMedal ( med1 , - 2 ) else
9760: LD_STRING med1
9762: PPUSH
9763: LD_INT 2
9765: NEG
9766: PPUSH
9767: CALL_OW 101
9771: GO 9783
// AddMedal ( med1 , 1 ) ;
9773: LD_STRING med1
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 101
// end else
9783: GO 9796
// AddMedal ( med1 , - 1 ) ;
9785: LD_STRING med1
9787: PPUSH
9788: LD_INT 1
9790: NEG
9791: PPUSH
9792: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9796: LD_VAR 0 1
9800: PUSH
9801: LD_INT 3
9803: LESS
9804: IFFALSE 9813
9806: PUSH
9807: LD_EXP 13
9811: NOT
9812: AND
9813: IFTRUE 9833
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: LD_INT 4
9823: LESS
9824: IFFALSE 9832
9826: PUSH
9827: LD_EXP 13
9831: AND
9832: OR
9833: IFFALSE 9848
// AddMedal ( med2 , - 1 ) else
9835: LD_STRING med2
9837: PPUSH
9838: LD_INT 1
9840: NEG
9841: PPUSH
9842: CALL_OW 101
9846: GO 9858
// AddMedal ( med2 , 1 ) ;
9848: LD_STRING med2
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9858: LD_EXP 13
9862: IFFALSE 9870
9864: PUSH
9865: LD_EXP 4
9869: AND
9870: IFFALSE 9882
9872: PUSH
9873: LD_VAR 0 1
9877: PUSH
9878: LD_INT 4
9880: GREATEREQUAL
9881: AND
9882: IFFALSE 9896
// AddMedal ( med3 , 1 ) else
9884: LD_STRING med3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 101
9894: GO 9907
// AddMedal ( med3 , - 1 ) ;
9896: LD_STRING med3
9898: PPUSH
9899: LD_INT 1
9901: NEG
9902: PPUSH
9903: CALL_OW 101
// GiveMedals ( MAIN ) ;
9907: LD_STRING MAIN
9909: PPUSH
9910: CALL_OW 102
// RewardPeople ( tmp ) ;
9914: LD_VAR 0 1
9918: PPUSH
9919: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9923: LD_EXP 4
9927: PPUSH
9928: LD_STRING 01_JohnnySaved
9930: PPUSH
9931: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9935: LD_EXP 16
9939: PPUSH
9940: LD_STRING 01_Heike
9942: PPUSH
9943: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9947: LD_EXP 18
9951: PPUSH
9952: CALL_OW 302
9956: IFFALSE 9970
9958: PUSH
9959: LD_EXP 18
9963: PUSH
9964: LD_VAR 0 1
9968: IN
9969: AND
9970: IFFALSE 9984
// SaveCharacters ( Givi , 01_Givi ) ;
9972: LD_EXP 18
9976: PPUSH
9977: LD_STRING 01_Givi
9979: PPUSH
9980: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9984: LD_EXP 19
9988: PPUSH
9989: CALL_OW 302
9993: IFFALSE 10007
9995: PUSH
9996: LD_EXP 19
10000: PUSH
10001: LD_VAR 0 1
10005: IN
10006: AND
10007: IFFALSE 10021
// SaveCharacters ( Mike , 01_Mike ) ;
10009: LD_EXP 19
10013: PPUSH
10014: LD_STRING 01_Mike
10016: PPUSH
10017: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
10021: LD_EXP 20
10025: PPUSH
10026: CALL_OW 302
10030: IFFALSE 10044
10032: PUSH
10033: LD_EXP 20
10037: PUSH
10038: LD_VAR 0 1
10042: IN
10043: AND
10044: IFFALSE 10058
// SaveCharacters ( Kamil , 01_Kamil ) ;
10046: LD_EXP 20
10050: PPUSH
10051: LD_STRING 01_Kamil
10053: PPUSH
10054: CALL_OW 38
// YouWin ;
10058: CALL_OW 103
// end ; end_of_file
10062: PPOPN 1
10064: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10065: LD_VAR 0 1
10069: PUSH
10070: LD_EXP 16
10074: EQUAL
10075: IFFALSE 10084
// YouLost ( Heike ) ;
10077: LD_STRING Heike
10079: PPUSH
10080: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
10084: LD_VAR 0 1
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 3
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: IN
10118: IFFALSE 10224
// begin if un in russianPatrol then
10120: LD_VAR 0 1
10124: PUSH
10125: LD_EXP 21
10129: IN
10130: IFFALSE 10148
// russianPatrol := russianPatrol diff un ;
10132: LD_ADDR_EXP 21
10136: PUSH
10137: LD_EXP 21
10141: PUSH
10142: LD_VAR 0 1
10146: DIFF
10147: ST_TO_ADDR
// if un in russianForestPatrol then
10148: LD_VAR 0 1
10152: PUSH
10153: LD_EXP 22
10157: IN
10158: IFFALSE 10176
// russianForestPatrol := russianForestPatrol diff un ;
10160: LD_ADDR_EXP 22
10164: PUSH
10165: LD_EXP 22
10169: PUSH
10170: LD_VAR 0 1
10174: DIFF
10175: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
10176: LD_ADDR_EXP 5
10180: PUSH
10181: LD_EXP 5
10185: PPUSH
10186: LD_EXP 5
10190: PUSH
10191: LD_INT 1
10193: PLUS
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 250
10204: PUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 251
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 1
10223: ST_TO_ADDR
// end ; end ;
10224: PPOPN 1
10226: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10227: LD_VAR 0 1
10231: PUSH
10232: LD_EXP 16
10236: EQUAL
10237: IFFALSE 10246
// YouLost ( Heike ) ;
10239: LD_STRING Heike
10241: PPUSH
10242: CALL_OW 104
// if un = Olaf then
10246: LD_VAR 0 1
10250: PUSH
10251: LD_EXP 17
10255: EQUAL
10256: IFFALSE 10265
// YouLost ( Olaf ) ;
10258: LD_STRING Olaf
10260: PPUSH
10261: CALL_OW 104
// end ;
10265: PPOPN 1
10267: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10268: LD_VAR 0 1
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10288
10278: PUSH
10279: LD_VAR 0 2
10283: PUSH
10284: LD_INT 5
10286: EQUAL
10287: AND
10288: IFFALSE 10297
// YouLost ( FriendlyFire ) ;
10290: LD_STRING FriendlyFire
10292: PPUSH
10293: CALL_OW 104
// end ; end_of_file
10297: PPOPN 2
10299: END
// export globalGameSaveCounter ; every 0 0$1 do
10300: GO 10302
10302: DISABLE
// begin enable ;
10303: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10304: LD_STRING updateTimer(
10306: PUSH
10307: LD_OWVAR 1
10311: STR
10312: PUSH
10313: LD_STRING );
10315: STR
10316: PPUSH
10317: CALL_OW 559
// end ;
10321: END
// every 0 0$1 do
10322: GO 10324
10324: DISABLE
// begin globalGameSaveCounter := 0 ;
10325: LD_ADDR_EXP 26
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10333: LD_STRING setGameSaveCounter(0)
10335: PPUSH
10336: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10340: LD_STRING initStreamRollete();
10342: PPUSH
10343: CALL_OW 559
// InitStreamMode ;
10347: CALL 11692 0 0
// DefineStreamItems ( false ) ;
10351: LD_INT 0
10353: PPUSH
10354: CALL 12156 0 1
// end ;
10358: END
// export function SOS_MapStart ( ) ; begin
10359: LD_INT 0
10361: PPUSH
// if streamModeActive then
10362: LD_EXP 27
10366: IFFALSE 10375
// DefineStreamItems ( true ) ;
10368: LD_INT 1
10370: PPUSH
10371: CALL 12156 0 1
// UpdateLuaVariables ( ) ;
10375: CALL 10392 0 0
// UpdateFactoryWaypoints ( ) ;
10379: CALL 25278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10383: CALL 25530 0 0
// end ;
10387: LD_VAR 0 1
10391: RET
// function UpdateLuaVariables ( ) ; begin
10392: LD_INT 0
10394: PPUSH
// if globalGameSaveCounter then
10395: LD_EXP 26
10399: IFFALSE 10433
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10401: LD_ADDR_EXP 26
10405: PUSH
10406: LD_EXP 26
10410: PPUSH
10411: CALL 71310 0 1
10415: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10416: LD_STRING setGameSaveCounter(
10418: PUSH
10419: LD_EXP 26
10423: STR
10424: PUSH
10425: LD_STRING )
10427: STR
10428: PPUSH
10429: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10433: LD_STRING setGameDifficulty(
10435: PUSH
10436: LD_OWVAR 67
10440: STR
10441: PUSH
10442: LD_STRING )
10444: STR
10445: PPUSH
10446: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10450: LD_STRING displayDifficulty(
10452: PUSH
10453: LD_OWVAR 67
10457: STR
10458: PUSH
10459: LD_STRING )
10461: STR
10462: PPUSH
10463: CALL_OW 559
// end ;
10467: LD_VAR 0 1
10471: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10472: LD_INT 0
10474: PPUSH
// if p2 = stream_mode then
10475: LD_VAR 0 2
10479: PUSH
10480: LD_INT 100
10482: EQUAL
10483: IFFALSE 11486
// begin if not StreamModeActive then
10485: LD_EXP 27
10489: NOT
10490: IFFALSE 10500
// StreamModeActive := true ;
10492: LD_ADDR_EXP 27
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 0 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 0
10507: EQUAL
10508: IFFALSE 10514
// InitStreamMode ;
10510: CALL 11692 0 0
// if p3 = 1 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 1
10521: EQUAL
10522: IFFALSE 10532
// sRocket := true ;
10524: LD_ADDR_EXP 32
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 2 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 2
10539: EQUAL
10540: IFFALSE 10550
// sSpeed := true ;
10542: LD_ADDR_EXP 31
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 3 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 3
10557: EQUAL
10558: IFFALSE 10568
// sEngine := true ;
10560: LD_ADDR_EXP 33
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 4 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 4
10575: EQUAL
10576: IFFALSE 10586
// sSpec := true ;
10578: LD_ADDR_EXP 30
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 5 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 5
10593: EQUAL
10594: IFFALSE 10604
// sLevel := true ;
10596: LD_ADDR_EXP 34
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 6 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 6
10611: EQUAL
10612: IFFALSE 10622
// sArmoury := true ;
10614: LD_ADDR_EXP 35
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 7 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 7
10629: EQUAL
10630: IFFALSE 10640
// sRadar := true ;
10632: LD_ADDR_EXP 36
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 8 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 8
10647: EQUAL
10648: IFFALSE 10658
// sBunker := true ;
10650: LD_ADDR_EXP 37
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 9 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 9
10665: EQUAL
10666: IFFALSE 10676
// sHack := true ;
10668: LD_ADDR_EXP 38
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 10 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 10
10683: EQUAL
10684: IFFALSE 10694
// sFire := true ;
10686: LD_ADDR_EXP 39
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 11 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 11
10701: EQUAL
10702: IFFALSE 10712
// sRefresh := true ;
10704: LD_ADDR_EXP 40
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// if p3 = 12 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 12
10719: EQUAL
10720: IFFALSE 10730
// sExp := true ;
10722: LD_ADDR_EXP 41
10726: PUSH
10727: LD_INT 1
10729: ST_TO_ADDR
// if p3 = 13 then
10730: LD_VAR 0 3
10734: PUSH
10735: LD_INT 13
10737: EQUAL
10738: IFFALSE 10748
// sDepot := true ;
10740: LD_ADDR_EXP 42
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// if p3 = 14 then
10748: LD_VAR 0 3
10752: PUSH
10753: LD_INT 14
10755: EQUAL
10756: IFFALSE 10766
// sFlag := true ;
10758: LD_ADDR_EXP 43
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// if p3 = 15 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 15
10773: EQUAL
10774: IFFALSE 10784
// sKamikadze := true ;
10776: LD_ADDR_EXP 51
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// if p3 = 16 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 16
10791: EQUAL
10792: IFFALSE 10802
// sTroll := true ;
10794: LD_ADDR_EXP 52
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// if p3 = 17 then
10802: LD_VAR 0 3
10806: PUSH
10807: LD_INT 17
10809: EQUAL
10810: IFFALSE 10820
// sSlow := true ;
10812: LD_ADDR_EXP 53
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// if p3 = 18 then
10820: LD_VAR 0 3
10824: PUSH
10825: LD_INT 18
10827: EQUAL
10828: IFFALSE 10838
// sLack := true ;
10830: LD_ADDR_EXP 54
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// if p3 = 19 then
10838: LD_VAR 0 3
10842: PUSH
10843: LD_INT 19
10845: EQUAL
10846: IFFALSE 10856
// sTank := true ;
10848: LD_ADDR_EXP 56
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// if p3 = 20 then
10856: LD_VAR 0 3
10860: PUSH
10861: LD_INT 20
10863: EQUAL
10864: IFFALSE 10874
// sRemote := true ;
10866: LD_ADDR_EXP 57
10870: PUSH
10871: LD_INT 1
10873: ST_TO_ADDR
// if p3 = 21 then
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 21
10881: EQUAL
10882: IFFALSE 10892
// sPowell := true ;
10884: LD_ADDR_EXP 58
10888: PUSH
10889: LD_INT 1
10891: ST_TO_ADDR
// if p3 = 22 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 22
10899: EQUAL
10900: IFFALSE 10910
// sTeleport := true ;
10902: LD_ADDR_EXP 61
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// if p3 = 23 then
10910: LD_VAR 0 3
10914: PUSH
10915: LD_INT 23
10917: EQUAL
10918: IFFALSE 10928
// sOilTower := true ;
10920: LD_ADDR_EXP 63
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// if p3 = 24 then
10928: LD_VAR 0 3
10932: PUSH
10933: LD_INT 24
10935: EQUAL
10936: IFFALSE 10946
// sShovel := true ;
10938: LD_ADDR_EXP 64
10942: PUSH
10943: LD_INT 1
10945: ST_TO_ADDR
// if p3 = 25 then
10946: LD_VAR 0 3
10950: PUSH
10951: LD_INT 25
10953: EQUAL
10954: IFFALSE 10964
// sSheik := true ;
10956: LD_ADDR_EXP 65
10960: PUSH
10961: LD_INT 1
10963: ST_TO_ADDR
// if p3 = 26 then
10964: LD_VAR 0 3
10968: PUSH
10969: LD_INT 26
10971: EQUAL
10972: IFFALSE 10982
// sEarthquake := true ;
10974: LD_ADDR_EXP 67
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if p3 = 27 then
10982: LD_VAR 0 3
10986: PUSH
10987: LD_INT 27
10989: EQUAL
10990: IFFALSE 11000
// sAI := true ;
10992: LD_ADDR_EXP 68
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// if p3 = 28 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 28
11007: EQUAL
11008: IFFALSE 11018
// sCargo := true ;
11010: LD_ADDR_EXP 71
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// if p3 = 29 then
11018: LD_VAR 0 3
11022: PUSH
11023: LD_INT 29
11025: EQUAL
11026: IFFALSE 11036
// sDLaser := true ;
11028: LD_ADDR_EXP 72
11032: PUSH
11033: LD_INT 1
11035: ST_TO_ADDR
// if p3 = 30 then
11036: LD_VAR 0 3
11040: PUSH
11041: LD_INT 30
11043: EQUAL
11044: IFFALSE 11054
// sExchange := true ;
11046: LD_ADDR_EXP 73
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// if p3 = 31 then
11054: LD_VAR 0 3
11058: PUSH
11059: LD_INT 31
11061: EQUAL
11062: IFFALSE 11072
// sFac := true ;
11064: LD_ADDR_EXP 74
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// if p3 = 32 then
11072: LD_VAR 0 3
11076: PUSH
11077: LD_INT 32
11079: EQUAL
11080: IFFALSE 11090
// sPower := true ;
11082: LD_ADDR_EXP 75
11086: PUSH
11087: LD_INT 1
11089: ST_TO_ADDR
// if p3 = 33 then
11090: LD_VAR 0 3
11094: PUSH
11095: LD_INT 33
11097: EQUAL
11098: IFFALSE 11108
// sRandom := true ;
11100: LD_ADDR_EXP 76
11104: PUSH
11105: LD_INT 1
11107: ST_TO_ADDR
// if p3 = 34 then
11108: LD_VAR 0 3
11112: PUSH
11113: LD_INT 34
11115: EQUAL
11116: IFFALSE 11126
// sShield := true ;
11118: LD_ADDR_EXP 77
11122: PUSH
11123: LD_INT 1
11125: ST_TO_ADDR
// if p3 = 35 then
11126: LD_VAR 0 3
11130: PUSH
11131: LD_INT 35
11133: EQUAL
11134: IFFALSE 11144
// sTime := true ;
11136: LD_ADDR_EXP 78
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// if p3 = 36 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 36
11151: EQUAL
11152: IFFALSE 11162
// sTools := true ;
11154: LD_ADDR_EXP 79
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// if p3 = 101 then
11162: LD_VAR 0 3
11166: PUSH
11167: LD_INT 101
11169: EQUAL
11170: IFFALSE 11180
// sSold := true ;
11172: LD_ADDR_EXP 44
11176: PUSH
11177: LD_INT 1
11179: ST_TO_ADDR
// if p3 = 102 then
11180: LD_VAR 0 3
11184: PUSH
11185: LD_INT 102
11187: EQUAL
11188: IFFALSE 11198
// sDiff := true ;
11190: LD_ADDR_EXP 45
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// if p3 = 103 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 103
11205: EQUAL
11206: IFFALSE 11216
// sFog := true ;
11208: LD_ADDR_EXP 48
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 104 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 104
11223: EQUAL
11224: IFFALSE 11234
// sReset := true ;
11226: LD_ADDR_EXP 49
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 105 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 105
11241: EQUAL
11242: IFFALSE 11252
// sSun := true ;
11244: LD_ADDR_EXP 50
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 106 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 106
11259: EQUAL
11260: IFFALSE 11270
// sTiger := true ;
11262: LD_ADDR_EXP 46
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 107 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 107
11277: EQUAL
11278: IFFALSE 11288
// sBomb := true ;
11280: LD_ADDR_EXP 47
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 108 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 108
11295: EQUAL
11296: IFFALSE 11306
// sWound := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 109 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 109
11313: EQUAL
11314: IFFALSE 11324
// sBetray := true ;
11316: LD_ADDR_EXP 59
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 110 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 110
11331: EQUAL
11332: IFFALSE 11342
// sContamin := true ;
11334: LD_ADDR_EXP 60
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 111 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 111
11349: EQUAL
11350: IFFALSE 11360
// sOil := true ;
11352: LD_ADDR_EXP 62
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 112 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 112
11367: EQUAL
11368: IFFALSE 11378
// sStu := true ;
11370: LD_ADDR_EXP 66
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 113 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 113
11385: EQUAL
11386: IFFALSE 11396
// sBazooka := true ;
11388: LD_ADDR_EXP 69
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 114 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 114
11403: EQUAL
11404: IFFALSE 11414
// sMortar := true ;
11406: LD_ADDR_EXP 70
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 115 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 115
11421: EQUAL
11422: IFFALSE 11432
// sRanger := true ;
11424: LD_ADDR_EXP 80
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 116 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 116
11439: EQUAL
11440: IFFALSE 11450
// sComputer := true ;
11442: LD_ADDR_EXP 81
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 117 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 117
11457: EQUAL
11458: IFFALSE 11468
// s30 := true ;
11460: LD_ADDR_EXP 82
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 118 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 118
11475: EQUAL
11476: IFFALSE 11486
// s60 := true ;
11478: LD_ADDR_EXP 83
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// end ; if p2 = hack_mode then
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 101
11493: EQUAL
11494: IFFALSE 11622
// begin case p3 of 1 :
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 1
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11516
11509: POP
// hHackUnlimitedResources ; 2 :
11510: CALL 23885 0 0
11514: GO 11622
11516: LD_INT 2
11518: DOUBLE
11519: EQUAL
11520: IFTRUE 11524
11522: GO 11531
11524: POP
// hHackSetLevel10 ; 3 :
11525: CALL 24018 0 0
11529: GO 11622
11531: LD_INT 3
11533: DOUBLE
11534: EQUAL
11535: IFTRUE 11539
11537: GO 11546
11539: POP
// hHackSetLevel10YourUnits ; 4 :
11540: CALL 24103 0 0
11544: GO 11622
11546: LD_INT 4
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11561
11554: POP
// hHackInvincible ; 5 :
11555: CALL 24551 0 0
11559: GO 11622
11561: LD_INT 5
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11569
11567: GO 11576
11569: POP
// hHackInvisible ; 6 :
11570: CALL 24662 0 0
11574: GO 11622
11576: LD_INT 6
11578: DOUBLE
11579: EQUAL
11580: IFTRUE 11584
11582: GO 11591
11584: POP
// hHackChangeYourSide ; 7 :
11585: CALL 24719 0 0
11589: GO 11622
11591: LD_INT 7
11593: DOUBLE
11594: EQUAL
11595: IFTRUE 11599
11597: GO 11606
11599: POP
// hHackChangeUnitSide ; 8 :
11600: CALL 24761 0 0
11604: GO 11622
11606: LD_INT 8
11608: DOUBLE
11609: EQUAL
11610: IFTRUE 11614
11612: GO 11621
11614: POP
// hHackFog ; end ;
11615: CALL 24862 0 0
11619: GO 11622
11621: POP
// end ; if p2 = game_save_mode then
11622: LD_VAR 0 2
11626: PUSH
11627: LD_INT 102
11629: EQUAL
11630: IFFALSE 11687
// begin if p3 = 1 then
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: EQUAL
11640: IFFALSE 11652
// globalGameSaveCounter := p4 ;
11642: LD_ADDR_EXP 26
11646: PUSH
11647: LD_VAR 0 4
11651: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 2
11659: EQUAL
11660: IFFALSE 11668
11662: PUSH
11663: LD_EXP 26
11667: AND
11668: IFFALSE 11687
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11670: LD_STRING setGameSaveCounter(
11672: PUSH
11673: LD_EXP 26
11677: STR
11678: PUSH
11679: LD_STRING )
11681: STR
11682: PPUSH
11683: CALL_OW 559
// end ; end ;
11687: LD_VAR 0 7
11691: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11692: LD_INT 0
11694: PPUSH
// streamModeActive := false ;
11695: LD_ADDR_EXP 27
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// normalCounter := 36 ;
11703: LD_ADDR_EXP 28
11707: PUSH
11708: LD_INT 36
11710: ST_TO_ADDR
// hardcoreCounter := 18 ;
11711: LD_ADDR_EXP 29
11715: PUSH
11716: LD_INT 18
11718: ST_TO_ADDR
// sRocket := false ;
11719: LD_ADDR_EXP 32
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sSpeed := false ;
11727: LD_ADDR_EXP 31
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sEngine := false ;
11735: LD_ADDR_EXP 33
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sSpec := false ;
11743: LD_ADDR_EXP 30
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sLevel := false ;
11751: LD_ADDR_EXP 34
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sArmoury := false ;
11759: LD_ADDR_EXP 35
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sRadar := false ;
11767: LD_ADDR_EXP 36
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sBunker := false ;
11775: LD_ADDR_EXP 37
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sHack := false ;
11783: LD_ADDR_EXP 38
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sFire := false ;
11791: LD_ADDR_EXP 39
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sRefresh := false ;
11799: LD_ADDR_EXP 40
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sExp := false ;
11807: LD_ADDR_EXP 41
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sDepot := false ;
11815: LD_ADDR_EXP 42
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sFlag := false ;
11823: LD_ADDR_EXP 43
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sKamikadze := false ;
11831: LD_ADDR_EXP 51
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sTroll := false ;
11839: LD_ADDR_EXP 52
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sSlow := false ;
11847: LD_ADDR_EXP 53
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sLack := false ;
11855: LD_ADDR_EXP 54
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sTank := false ;
11863: LD_ADDR_EXP 56
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sRemote := false ;
11871: LD_ADDR_EXP 57
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sPowell := false ;
11879: LD_ADDR_EXP 58
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sTeleport := false ;
11887: LD_ADDR_EXP 61
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sOilTower := false ;
11895: LD_ADDR_EXP 63
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sShovel := false ;
11903: LD_ADDR_EXP 64
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sSheik := false ;
11911: LD_ADDR_EXP 65
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sEarthquake := false ;
11919: LD_ADDR_EXP 67
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sAI := false ;
11927: LD_ADDR_EXP 68
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sCargo := false ;
11935: LD_ADDR_EXP 71
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sDLaser := false ;
11943: LD_ADDR_EXP 72
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sExchange := false ;
11951: LD_ADDR_EXP 73
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sFac := false ;
11959: LD_ADDR_EXP 74
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sPower := false ;
11967: LD_ADDR_EXP 75
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sRandom := false ;
11975: LD_ADDR_EXP 76
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sShield := false ;
11983: LD_ADDR_EXP 77
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sTime := false ;
11991: LD_ADDR_EXP 78
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sTools := false ;
11999: LD_ADDR_EXP 79
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sSold := false ;
12007: LD_ADDR_EXP 44
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sDiff := false ;
12015: LD_ADDR_EXP 45
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// sFog := false ;
12023: LD_ADDR_EXP 48
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// sReset := false ;
12031: LD_ADDR_EXP 49
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// sSun := false ;
12039: LD_ADDR_EXP 50
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// sTiger := false ;
12047: LD_ADDR_EXP 46
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// sBomb := false ;
12055: LD_ADDR_EXP 47
12059: PUSH
12060: LD_INT 0
12062: ST_TO_ADDR
// sWound := false ;
12063: LD_ADDR_EXP 55
12067: PUSH
12068: LD_INT 0
12070: ST_TO_ADDR
// sBetray := false ;
12071: LD_ADDR_EXP 59
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// sContamin := false ;
12079: LD_ADDR_EXP 60
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// sOil := false ;
12087: LD_ADDR_EXP 62
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// sStu := false ;
12095: LD_ADDR_EXP 66
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// sBazooka := false ;
12103: LD_ADDR_EXP 69
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// sMortar := false ;
12111: LD_ADDR_EXP 70
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sRanger := false ;
12119: LD_ADDR_EXP 80
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// sComputer := false ;
12127: LD_ADDR_EXP 81
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// s30 := false ;
12135: LD_ADDR_EXP 82
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// s60 := false ;
12143: LD_ADDR_EXP 83
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// end ;
12151: LD_VAR 0 1
12155: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
12164: PPUSH
// result := [ ] ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: EMPTY
12171: ST_TO_ADDR
// if campaign_id = 1 then
12172: LD_OWVAR 69
12176: PUSH
12177: LD_INT 1
12179: EQUAL
12180: IFFALSE 15346
// begin case mission_number of 1 :
12182: LD_OWVAR 70
12186: PUSH
12187: LD_INT 1
12189: DOUBLE
12190: EQUAL
12191: IFTRUE 12195
12193: GO 12271
12195: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: LD_INT 11
12209: PUSH
12210: LD_INT 12
12212: PUSH
12213: LD_INT 15
12215: PUSH
12216: LD_INT 16
12218: PUSH
12219: LD_INT 22
12221: PUSH
12222: LD_INT 23
12224: PUSH
12225: LD_INT 26
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 101
12241: PUSH
12242: LD_INT 102
12244: PUSH
12245: LD_INT 106
12247: PUSH
12248: LD_INT 116
12250: PUSH
12251: LD_INT 117
12253: PUSH
12254: LD_INT 118
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: ST_TO_ADDR
12269: GO 15344
12271: LD_INT 2
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12363
12279: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: LD_INT 4
12290: PUSH
12291: LD_INT 11
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 15
12299: PUSH
12300: LD_INT 16
12302: PUSH
12303: LD_INT 22
12305: PUSH
12306: LD_INT 23
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 101
12325: PUSH
12326: LD_INT 102
12328: PUSH
12329: LD_INT 105
12331: PUSH
12332: LD_INT 106
12334: PUSH
12335: LD_INT 108
12337: PUSH
12338: LD_INT 116
12340: PUSH
12341: LD_INT 117
12343: PUSH
12344: LD_INT 118
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: ST_TO_ADDR
12361: GO 15344
12363: LD_INT 3
12365: DOUBLE
12366: EQUAL
12367: IFTRUE 12371
12369: GO 12459
12371: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12372: LD_ADDR_VAR 0 2
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: LD_INT 4
12382: PUSH
12383: LD_INT 5
12385: PUSH
12386: LD_INT 11
12388: PUSH
12389: LD_INT 12
12391: PUSH
12392: LD_INT 15
12394: PUSH
12395: LD_INT 16
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_INT 26
12403: PUSH
12404: LD_INT 36
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 101
12421: PUSH
12422: LD_INT 102
12424: PUSH
12425: LD_INT 105
12427: PUSH
12428: LD_INT 106
12430: PUSH
12431: LD_INT 108
12433: PUSH
12434: LD_INT 116
12436: PUSH
12437: LD_INT 117
12439: PUSH
12440: LD_INT 118
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: ST_TO_ADDR
12457: GO 15344
12459: LD_INT 4
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12563
12467: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: LD_INT 4
12478: PUSH
12479: LD_INT 5
12481: PUSH
12482: LD_INT 8
12484: PUSH
12485: LD_INT 11
12487: PUSH
12488: LD_INT 12
12490: PUSH
12491: LD_INT 15
12493: PUSH
12494: LD_INT 16
12496: PUSH
12497: LD_INT 22
12499: PUSH
12500: LD_INT 23
12502: PUSH
12503: LD_INT 26
12505: PUSH
12506: LD_INT 36
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 101
12525: PUSH
12526: LD_INT 102
12528: PUSH
12529: LD_INT 105
12531: PUSH
12532: LD_INT 106
12534: PUSH
12535: LD_INT 108
12537: PUSH
12538: LD_INT 116
12540: PUSH
12541: LD_INT 117
12543: PUSH
12544: LD_INT 118
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: ST_TO_ADDR
12561: GO 15344
12563: LD_INT 5
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12683
12571: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12572: LD_ADDR_VAR 0 2
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 4
12582: PUSH
12583: LD_INT 5
12585: PUSH
12586: LD_INT 6
12588: PUSH
12589: LD_INT 8
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 15
12600: PUSH
12601: LD_INT 16
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 26
12615: PUSH
12616: LD_INT 36
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 101
12637: PUSH
12638: LD_INT 102
12640: PUSH
12641: LD_INT 105
12643: PUSH
12644: LD_INT 106
12646: PUSH
12647: LD_INT 108
12649: PUSH
12650: LD_INT 109
12652: PUSH
12653: LD_INT 112
12655: PUSH
12656: LD_INT 116
12658: PUSH
12659: LD_INT 117
12661: PUSH
12662: LD_INT 118
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: ST_TO_ADDR
12681: GO 15344
12683: LD_INT 6
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12823
12691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: LD_INT 2
12699: PUSH
12700: LD_INT 4
12702: PUSH
12703: LD_INT 5
12705: PUSH
12706: LD_INT 6
12708: PUSH
12709: LD_INT 8
12711: PUSH
12712: LD_INT 11
12714: PUSH
12715: LD_INT 12
12717: PUSH
12718: LD_INT 15
12720: PUSH
12721: LD_INT 16
12723: PUSH
12724: LD_INT 20
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 25
12738: PUSH
12739: LD_INT 26
12741: PUSH
12742: LD_INT 30
12744: PUSH
12745: LD_INT 31
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: LD_INT 36
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 101
12777: PUSH
12778: LD_INT 102
12780: PUSH
12781: LD_INT 105
12783: PUSH
12784: LD_INT 106
12786: PUSH
12787: LD_INT 108
12789: PUSH
12790: LD_INT 109
12792: PUSH
12793: LD_INT 112
12795: PUSH
12796: LD_INT 116
12798: PUSH
12799: LD_INT 117
12801: PUSH
12802: LD_INT 118
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
12821: GO 15344
12823: LD_INT 7
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12943
12831: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12832: LD_ADDR_VAR 0 2
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 4
12842: PUSH
12843: LD_INT 5
12845: PUSH
12846: LD_INT 7
12848: PUSH
12849: LD_INT 11
12851: PUSH
12852: LD_INT 12
12854: PUSH
12855: LD_INT 15
12857: PUSH
12858: LD_INT 16
12860: PUSH
12861: LD_INT 20
12863: PUSH
12864: LD_INT 21
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 23
12872: PUSH
12873: LD_INT 25
12875: PUSH
12876: LD_INT 26
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 101
12897: PUSH
12898: LD_INT 102
12900: PUSH
12901: LD_INT 103
12903: PUSH
12904: LD_INT 105
12906: PUSH
12907: LD_INT 106
12909: PUSH
12910: LD_INT 108
12912: PUSH
12913: LD_INT 112
12915: PUSH
12916: LD_INT 116
12918: PUSH
12919: LD_INT 117
12921: PUSH
12922: LD_INT 118
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: ST_TO_ADDR
12941: GO 15344
12943: LD_INT 8
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 13091
12951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: LD_INT 4
12962: PUSH
12963: LD_INT 5
12965: PUSH
12966: LD_INT 6
12968: PUSH
12969: LD_INT 7
12971: PUSH
12972: LD_INT 8
12974: PUSH
12975: LD_INT 11
12977: PUSH
12978: LD_INT 12
12980: PUSH
12981: LD_INT 15
12983: PUSH
12984: LD_INT 16
12986: PUSH
12987: LD_INT 20
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 30
13007: PUSH
13008: LD_INT 31
13010: PUSH
13011: LD_INT 32
13013: PUSH
13014: LD_INT 36
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 101
13041: PUSH
13042: LD_INT 102
13044: PUSH
13045: LD_INT 103
13047: PUSH
13048: LD_INT 105
13050: PUSH
13051: LD_INT 106
13053: PUSH
13054: LD_INT 108
13056: PUSH
13057: LD_INT 109
13059: PUSH
13060: LD_INT 112
13062: PUSH
13063: LD_INT 116
13065: PUSH
13066: LD_INT 117
13068: PUSH
13069: LD_INT 118
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: ST_TO_ADDR
13089: GO 15344
13091: LD_INT 9
13093: DOUBLE
13094: EQUAL
13095: IFTRUE 13099
13097: GO 13247
13099: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13100: LD_ADDR_VAR 0 2
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 4
13110: PUSH
13111: LD_INT 5
13113: PUSH
13114: LD_INT 6
13116: PUSH
13117: LD_INT 7
13119: PUSH
13120: LD_INT 8
13122: PUSH
13123: LD_INT 11
13125: PUSH
13126: LD_INT 12
13128: PUSH
13129: LD_INT 15
13131: PUSH
13132: LD_INT 16
13134: PUSH
13135: LD_INT 20
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 23
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 26
13152: PUSH
13153: LD_INT 28
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 31
13161: PUSH
13162: LD_INT 32
13164: PUSH
13165: LD_INT 36
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 101
13193: PUSH
13194: LD_INT 102
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 105
13202: PUSH
13203: LD_INT 106
13205: PUSH
13206: LD_INT 108
13208: PUSH
13209: LD_INT 109
13211: PUSH
13212: LD_INT 112
13214: PUSH
13215: LD_INT 114
13217: PUSH
13218: LD_INT 116
13220: PUSH
13221: LD_INT 117
13223: PUSH
13224: LD_INT 118
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: ST_TO_ADDR
13245: GO 15344
13247: LD_INT 10
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13451
13255: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: LD_INT 6
13272: PUSH
13273: LD_INT 7
13275: PUSH
13276: LD_INT 8
13278: PUSH
13279: LD_INT 9
13281: PUSH
13282: LD_INT 10
13284: PUSH
13285: LD_INT 11
13287: PUSH
13288: LD_INT 12
13290: PUSH
13291: LD_INT 13
13293: PUSH
13294: LD_INT 14
13296: PUSH
13297: LD_INT 15
13299: PUSH
13300: LD_INT 16
13302: PUSH
13303: LD_INT 17
13305: PUSH
13306: LD_INT 18
13308: PUSH
13309: LD_INT 19
13311: PUSH
13312: LD_INT 20
13314: PUSH
13315: LD_INT 21
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 24
13326: PUSH
13327: LD_INT 25
13329: PUSH
13330: LD_INT 26
13332: PUSH
13333: LD_INT 28
13335: PUSH
13336: LD_INT 30
13338: PUSH
13339: LD_INT 31
13341: PUSH
13342: LD_INT 32
13344: PUSH
13345: LD_INT 36
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 101
13381: PUSH
13382: LD_INT 102
13384: PUSH
13385: LD_INT 103
13387: PUSH
13388: LD_INT 104
13390: PUSH
13391: LD_INT 105
13393: PUSH
13394: LD_INT 106
13396: PUSH
13397: LD_INT 107
13399: PUSH
13400: LD_INT 108
13402: PUSH
13403: LD_INT 109
13405: PUSH
13406: LD_INT 110
13408: PUSH
13409: LD_INT 111
13411: PUSH
13412: LD_INT 112
13414: PUSH
13415: LD_INT 114
13417: PUSH
13418: LD_INT 116
13420: PUSH
13421: LD_INT 117
13423: PUSH
13424: LD_INT 118
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
13449: GO 15344
13451: LD_INT 11
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13663
13459: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13460: LD_ADDR_VAR 0 2
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 6
13479: PUSH
13480: LD_INT 7
13482: PUSH
13483: LD_INT 8
13485: PUSH
13486: LD_INT 9
13488: PUSH
13489: LD_INT 10
13491: PUSH
13492: LD_INT 11
13494: PUSH
13495: LD_INT 12
13497: PUSH
13498: LD_INT 13
13500: PUSH
13501: LD_INT 14
13503: PUSH
13504: LD_INT 15
13506: PUSH
13507: LD_INT 16
13509: PUSH
13510: LD_INT 17
13512: PUSH
13513: LD_INT 18
13515: PUSH
13516: LD_INT 19
13518: PUSH
13519: LD_INT 20
13521: PUSH
13522: LD_INT 21
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_INT 23
13530: PUSH
13531: LD_INT 24
13533: PUSH
13534: LD_INT 25
13536: PUSH
13537: LD_INT 26
13539: PUSH
13540: LD_INT 28
13542: PUSH
13543: LD_INT 30
13545: PUSH
13546: LD_INT 31
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 34
13554: PUSH
13555: LD_INT 36
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 101
13593: PUSH
13594: LD_INT 102
13596: PUSH
13597: LD_INT 103
13599: PUSH
13600: LD_INT 104
13602: PUSH
13603: LD_INT 105
13605: PUSH
13606: LD_INT 106
13608: PUSH
13609: LD_INT 107
13611: PUSH
13612: LD_INT 108
13614: PUSH
13615: LD_INT 109
13617: PUSH
13618: LD_INT 110
13620: PUSH
13621: LD_INT 111
13623: PUSH
13624: LD_INT 112
13626: PUSH
13627: LD_INT 114
13629: PUSH
13630: LD_INT 116
13632: PUSH
13633: LD_INT 117
13635: PUSH
13636: LD_INT 118
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 15344
13663: LD_INT 12
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13891
13671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: LD_INT 6
13694: PUSH
13695: LD_INT 7
13697: PUSH
13698: LD_INT 8
13700: PUSH
13701: LD_INT 9
13703: PUSH
13704: LD_INT 10
13706: PUSH
13707: LD_INT 11
13709: PUSH
13710: LD_INT 12
13712: PUSH
13713: LD_INT 13
13715: PUSH
13716: LD_INT 14
13718: PUSH
13719: LD_INT 15
13721: PUSH
13722: LD_INT 16
13724: PUSH
13725: LD_INT 17
13727: PUSH
13728: LD_INT 18
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: LD_INT 20
13736: PUSH
13737: LD_INT 21
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_INT 23
13745: PUSH
13746: LD_INT 24
13748: PUSH
13749: LD_INT 25
13751: PUSH
13752: LD_INT 26
13754: PUSH
13755: LD_INT 27
13757: PUSH
13758: LD_INT 28
13760: PUSH
13761: LD_INT 30
13763: PUSH
13764: LD_INT 31
13766: PUSH
13767: LD_INT 32
13769: PUSH
13770: LD_INT 33
13772: PUSH
13773: LD_INT 34
13775: PUSH
13776: LD_INT 36
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 101
13817: PUSH
13818: LD_INT 102
13820: PUSH
13821: LD_INT 103
13823: PUSH
13824: LD_INT 104
13826: PUSH
13827: LD_INT 105
13829: PUSH
13830: LD_INT 106
13832: PUSH
13833: LD_INT 107
13835: PUSH
13836: LD_INT 108
13838: PUSH
13839: LD_INT 109
13841: PUSH
13842: LD_INT 110
13844: PUSH
13845: LD_INT 111
13847: PUSH
13848: LD_INT 112
13850: PUSH
13851: LD_INT 113
13853: PUSH
13854: LD_INT 114
13856: PUSH
13857: LD_INT 116
13859: PUSH
13860: LD_INT 117
13862: PUSH
13863: LD_INT 118
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: ST_TO_ADDR
13889: GO 15344
13891: LD_INT 13
13893: DOUBLE
13894: EQUAL
13895: IFTRUE 13899
13897: GO 14107
13899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13900: LD_ADDR_VAR 0 2
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: LD_INT 9
13925: PUSH
13926: LD_INT 10
13928: PUSH
13929: LD_INT 11
13931: PUSH
13932: LD_INT 12
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 17
13946: PUSH
13947: LD_INT 18
13949: PUSH
13950: LD_INT 19
13952: PUSH
13953: LD_INT 20
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: LD_INT 24
13967: PUSH
13968: LD_INT 25
13970: PUSH
13971: LD_INT 26
13973: PUSH
13974: LD_INT 27
13976: PUSH
13977: LD_INT 28
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 31
13985: PUSH
13986: LD_INT 32
13988: PUSH
13989: LD_INT 33
13991: PUSH
13992: LD_INT 34
13994: PUSH
13995: LD_INT 36
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 101
14033: PUSH
14034: LD_INT 102
14036: PUSH
14037: LD_INT 103
14039: PUSH
14040: LD_INT 104
14042: PUSH
14043: LD_INT 105
14045: PUSH
14046: LD_INT 106
14048: PUSH
14049: LD_INT 107
14051: PUSH
14052: LD_INT 108
14054: PUSH
14055: LD_INT 109
14057: PUSH
14058: LD_INT 110
14060: PUSH
14061: LD_INT 111
14063: PUSH
14064: LD_INT 112
14066: PUSH
14067: LD_INT 113
14069: PUSH
14070: LD_INT 114
14072: PUSH
14073: LD_INT 116
14075: PUSH
14076: LD_INT 117
14078: PUSH
14079: LD_INT 118
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: ST_TO_ADDR
14105: GO 15344
14107: LD_INT 14
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14339
14115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 1
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: LD_INT 6
14138: PUSH
14139: LD_INT 7
14141: PUSH
14142: LD_INT 8
14144: PUSH
14145: LD_INT 9
14147: PUSH
14148: LD_INT 10
14150: PUSH
14151: LD_INT 11
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 13
14159: PUSH
14160: LD_INT 14
14162: PUSH
14163: LD_INT 15
14165: PUSH
14166: LD_INT 16
14168: PUSH
14169: LD_INT 17
14171: PUSH
14172: LD_INT 18
14174: PUSH
14175: LD_INT 19
14177: PUSH
14178: LD_INT 20
14180: PUSH
14181: LD_INT 21
14183: PUSH
14184: LD_INT 22
14186: PUSH
14187: LD_INT 23
14189: PUSH
14190: LD_INT 24
14192: PUSH
14193: LD_INT 25
14195: PUSH
14196: LD_INT 26
14198: PUSH
14199: LD_INT 27
14201: PUSH
14202: LD_INT 28
14204: PUSH
14205: LD_INT 29
14207: PUSH
14208: LD_INT 30
14210: PUSH
14211: LD_INT 31
14213: PUSH
14214: LD_INT 32
14216: PUSH
14217: LD_INT 33
14219: PUSH
14220: LD_INT 34
14222: PUSH
14223: LD_INT 36
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 101
14265: PUSH
14266: LD_INT 102
14268: PUSH
14269: LD_INT 103
14271: PUSH
14272: LD_INT 104
14274: PUSH
14275: LD_INT 105
14277: PUSH
14278: LD_INT 106
14280: PUSH
14281: LD_INT 107
14283: PUSH
14284: LD_INT 108
14286: PUSH
14287: LD_INT 109
14289: PUSH
14290: LD_INT 110
14292: PUSH
14293: LD_INT 111
14295: PUSH
14296: LD_INT 112
14298: PUSH
14299: LD_INT 113
14301: PUSH
14302: LD_INT 114
14304: PUSH
14305: LD_INT 116
14307: PUSH
14308: LD_INT 117
14310: PUSH
14311: LD_INT 118
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: ST_TO_ADDR
14337: GO 15344
14339: LD_INT 15
14341: DOUBLE
14342: EQUAL
14343: IFTRUE 14347
14345: GO 14571
14347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: LD_INT 4
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: LD_INT 7
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 9
14379: PUSH
14380: LD_INT 10
14382: PUSH
14383: LD_INT 11
14385: PUSH
14386: LD_INT 12
14388: PUSH
14389: LD_INT 13
14391: PUSH
14392: LD_INT 14
14394: PUSH
14395: LD_INT 15
14397: PUSH
14398: LD_INT 16
14400: PUSH
14401: LD_INT 17
14403: PUSH
14404: LD_INT 18
14406: PUSH
14407: LD_INT 19
14409: PUSH
14410: LD_INT 20
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_INT 23
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 26
14430: PUSH
14431: LD_INT 27
14433: PUSH
14434: LD_INT 28
14436: PUSH
14437: LD_INT 29
14439: PUSH
14440: LD_INT 30
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: LD_INT 32
14448: PUSH
14449: LD_INT 33
14451: PUSH
14452: LD_INT 34
14454: PUSH
14455: LD_INT 36
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 101
14497: PUSH
14498: LD_INT 102
14500: PUSH
14501: LD_INT 103
14503: PUSH
14504: LD_INT 104
14506: PUSH
14507: LD_INT 105
14509: PUSH
14510: LD_INT 106
14512: PUSH
14513: LD_INT 107
14515: PUSH
14516: LD_INT 108
14518: PUSH
14519: LD_INT 109
14521: PUSH
14522: LD_INT 110
14524: PUSH
14525: LD_INT 111
14527: PUSH
14528: LD_INT 112
14530: PUSH
14531: LD_INT 113
14533: PUSH
14534: LD_INT 114
14536: PUSH
14537: LD_INT 116
14539: PUSH
14540: LD_INT 117
14542: PUSH
14543: LD_INT 118
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
14569: GO 15344
14571: LD_INT 16
14573: DOUBLE
14574: EQUAL
14575: IFTRUE 14579
14577: GO 14715
14579: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 7
14596: PUSH
14597: LD_INT 11
14599: PUSH
14600: LD_INT 12
14602: PUSH
14603: LD_INT 15
14605: PUSH
14606: LD_INT 16
14608: PUSH
14609: LD_INT 20
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 22
14617: PUSH
14618: LD_INT 23
14620: PUSH
14621: LD_INT 25
14623: PUSH
14624: LD_INT 26
14626: PUSH
14627: LD_INT 30
14629: PUSH
14630: LD_INT 31
14632: PUSH
14633: LD_INT 32
14635: PUSH
14636: LD_INT 33
14638: PUSH
14639: LD_INT 34
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 101
14665: PUSH
14666: LD_INT 102
14668: PUSH
14669: LD_INT 103
14671: PUSH
14672: LD_INT 106
14674: PUSH
14675: LD_INT 108
14677: PUSH
14678: LD_INT 112
14680: PUSH
14681: LD_INT 113
14683: PUSH
14684: LD_INT 114
14686: PUSH
14687: LD_INT 116
14689: PUSH
14690: LD_INT 117
14692: PUSH
14693: LD_INT 118
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: ST_TO_ADDR
14713: GO 15344
14715: LD_INT 17
14717: DOUBLE
14718: EQUAL
14719: IFTRUE 14723
14721: GO 14947
14723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14724: LD_ADDR_VAR 0 2
14728: PUSH
14729: LD_INT 1
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 4
14740: PUSH
14741: LD_INT 5
14743: PUSH
14744: LD_INT 6
14746: PUSH
14747: LD_INT 7
14749: PUSH
14750: LD_INT 8
14752: PUSH
14753: LD_INT 9
14755: PUSH
14756: LD_INT 10
14758: PUSH
14759: LD_INT 11
14761: PUSH
14762: LD_INT 12
14764: PUSH
14765: LD_INT 13
14767: PUSH
14768: LD_INT 14
14770: PUSH
14771: LD_INT 15
14773: PUSH
14774: LD_INT 16
14776: PUSH
14777: LD_INT 17
14779: PUSH
14780: LD_INT 18
14782: PUSH
14783: LD_INT 19
14785: PUSH
14786: LD_INT 20
14788: PUSH
14789: LD_INT 21
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_INT 23
14797: PUSH
14798: LD_INT 24
14800: PUSH
14801: LD_INT 25
14803: PUSH
14804: LD_INT 26
14806: PUSH
14807: LD_INT 27
14809: PUSH
14810: LD_INT 28
14812: PUSH
14813: LD_INT 29
14815: PUSH
14816: LD_INT 30
14818: PUSH
14819: LD_INT 31
14821: PUSH
14822: LD_INT 32
14824: PUSH
14825: LD_INT 33
14827: PUSH
14828: LD_INT 34
14830: PUSH
14831: LD_INT 36
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 101
14873: PUSH
14874: LD_INT 102
14876: PUSH
14877: LD_INT 103
14879: PUSH
14880: LD_INT 104
14882: PUSH
14883: LD_INT 105
14885: PUSH
14886: LD_INT 106
14888: PUSH
14889: LD_INT 107
14891: PUSH
14892: LD_INT 108
14894: PUSH
14895: LD_INT 109
14897: PUSH
14898: LD_INT 110
14900: PUSH
14901: LD_INT 111
14903: PUSH
14904: LD_INT 112
14906: PUSH
14907: LD_INT 113
14909: PUSH
14910: LD_INT 114
14912: PUSH
14913: LD_INT 116
14915: PUSH
14916: LD_INT 117
14918: PUSH
14919: LD_INT 118
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: ST_TO_ADDR
14945: GO 15344
14947: LD_INT 18
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 15103
14955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: LD_INT 7
14972: PUSH
14973: LD_INT 11
14975: PUSH
14976: LD_INT 12
14978: PUSH
14979: LD_INT 15
14981: PUSH
14982: LD_INT 16
14984: PUSH
14985: LD_INT 20
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 23
14996: PUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 26
15002: PUSH
15003: LD_INT 30
15005: PUSH
15006: LD_INT 31
15008: PUSH
15009: LD_INT 32
15011: PUSH
15012: LD_INT 33
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 35
15020: PUSH
15021: LD_INT 36
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 101
15049: PUSH
15050: LD_INT 102
15052: PUSH
15053: LD_INT 103
15055: PUSH
15056: LD_INT 106
15058: PUSH
15059: LD_INT 108
15061: PUSH
15062: LD_INT 112
15064: PUSH
15065: LD_INT 113
15067: PUSH
15068: LD_INT 114
15070: PUSH
15071: LD_INT 115
15073: PUSH
15074: LD_INT 116
15076: PUSH
15077: LD_INT 117
15079: PUSH
15080: LD_INT 118
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: ST_TO_ADDR
15101: GO 15344
15103: LD_INT 19
15105: DOUBLE
15106: EQUAL
15107: IFTRUE 15111
15109: GO 15343
15111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: LD_INT 4
15128: PUSH
15129: LD_INT 5
15131: PUSH
15132: LD_INT 6
15134: PUSH
15135: LD_INT 7
15137: PUSH
15138: LD_INT 8
15140: PUSH
15141: LD_INT 9
15143: PUSH
15144: LD_INT 10
15146: PUSH
15147: LD_INT 11
15149: PUSH
15150: LD_INT 12
15152: PUSH
15153: LD_INT 13
15155: PUSH
15156: LD_INT 14
15158: PUSH
15159: LD_INT 15
15161: PUSH
15162: LD_INT 16
15164: PUSH
15165: LD_INT 17
15167: PUSH
15168: LD_INT 18
15170: PUSH
15171: LD_INT 19
15173: PUSH
15174: LD_INT 20
15176: PUSH
15177: LD_INT 21
15179: PUSH
15180: LD_INT 22
15182: PUSH
15183: LD_INT 23
15185: PUSH
15186: LD_INT 24
15188: PUSH
15189: LD_INT 25
15191: PUSH
15192: LD_INT 26
15194: PUSH
15195: LD_INT 27
15197: PUSH
15198: LD_INT 28
15200: PUSH
15201: LD_INT 29
15203: PUSH
15204: LD_INT 30
15206: PUSH
15207: LD_INT 31
15209: PUSH
15210: LD_INT 32
15212: PUSH
15213: LD_INT 33
15215: PUSH
15216: LD_INT 34
15218: PUSH
15219: LD_INT 35
15221: PUSH
15222: LD_INT 36
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 113
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: LD_INT 115
15307: PUSH
15308: LD_INT 116
15310: PUSH
15311: LD_INT 117
15313: PUSH
15314: LD_INT 118
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: ST_TO_ADDR
15341: GO 15344
15343: POP
// end else
15344: GO 15575
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: LD_INT 2
15356: PUSH
15357: LD_INT 3
15359: PUSH
15360: LD_INT 4
15362: PUSH
15363: LD_INT 5
15365: PUSH
15366: LD_INT 6
15368: PUSH
15369: LD_INT 7
15371: PUSH
15372: LD_INT 8
15374: PUSH
15375: LD_INT 9
15377: PUSH
15378: LD_INT 10
15380: PUSH
15381: LD_INT 11
15383: PUSH
15384: LD_INT 12
15386: PUSH
15387: LD_INT 13
15389: PUSH
15390: LD_INT 14
15392: PUSH
15393: LD_INT 15
15395: PUSH
15396: LD_INT 16
15398: PUSH
15399: LD_INT 17
15401: PUSH
15402: LD_INT 18
15404: PUSH
15405: LD_INT 19
15407: PUSH
15408: LD_INT 20
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_INT 23
15419: PUSH
15420: LD_INT 24
15422: PUSH
15423: LD_INT 25
15425: PUSH
15426: LD_INT 26
15428: PUSH
15429: LD_INT 27
15431: PUSH
15432: LD_INT 28
15434: PUSH
15435: LD_INT 29
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 31
15443: PUSH
15444: LD_INT 32
15446: PUSH
15447: LD_INT 33
15449: PUSH
15450: LD_INT 34
15452: PUSH
15453: LD_INT 35
15455: PUSH
15456: LD_INT 36
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 101
15499: PUSH
15500: LD_INT 102
15502: PUSH
15503: LD_INT 103
15505: PUSH
15506: LD_INT 104
15508: PUSH
15509: LD_INT 105
15511: PUSH
15512: LD_INT 106
15514: PUSH
15515: LD_INT 107
15517: PUSH
15518: LD_INT 108
15520: PUSH
15521: LD_INT 109
15523: PUSH
15524: LD_INT 110
15526: PUSH
15527: LD_INT 111
15529: PUSH
15530: LD_INT 112
15532: PUSH
15533: LD_INT 113
15535: PUSH
15536: LD_INT 114
15538: PUSH
15539: LD_INT 115
15541: PUSH
15542: LD_INT 116
15544: PUSH
15545: LD_INT 117
15547: PUSH
15548: LD_INT 118
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: ST_TO_ADDR
// if result then
15575: LD_VAR 0 2
15579: IFFALSE 16365
// begin normal :=  ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_STRING 
15588: ST_TO_ADDR
// hardcore :=  ;
15589: LD_ADDR_VAR 0 6
15593: PUSH
15594: LD_STRING 
15596: ST_TO_ADDR
// active :=  ;
15597: LD_ADDR_VAR 0 7
15601: PUSH
15602: LD_STRING 
15604: ST_TO_ADDR
// for i = 1 to normalCounter do
15605: LD_ADDR_VAR 0 8
15609: PUSH
15610: DOUBLE
15611: LD_INT 1
15613: DEC
15614: ST_TO_ADDR
15615: LD_EXP 28
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15722
// begin tmp := 0 ;
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: LD_STRING 0
15630: ST_TO_ADDR
// if result [ 1 ] then
15631: LD_VAR 0 2
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: IFFALSE 15704
// if result [ 1 ] [ 1 ] = i then
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PUSH
15654: LD_VAR 0 8
15658: EQUAL
15659: IFFALSE 15704
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15661: LD_ADDR_VAR 0 2
15665: PUSH
15666: LD_VAR 0 2
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: LD_VAR 0 2
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 3
15690: PPUSH
15691: CALL_OW 1
15695: ST_TO_ADDR
// tmp := 1 ;
15696: LD_ADDR_VAR 0 3
15700: PUSH
15701: LD_STRING 1
15703: ST_TO_ADDR
// end ; normal := normal & tmp ;
15704: LD_ADDR_VAR 0 5
15708: PUSH
15709: LD_VAR 0 5
15713: PUSH
15714: LD_VAR 0 3
15718: STR
15719: ST_TO_ADDR
// end ;
15720: GO 15620
15722: POP
15723: POP
// for i = 1 to hardcoreCounter do
15724: LD_ADDR_VAR 0 8
15728: PUSH
15729: DOUBLE
15730: LD_INT 1
15732: DEC
15733: ST_TO_ADDR
15734: LD_EXP 29
15738: PUSH
15739: FOR_TO
15740: IFFALSE 15845
// begin tmp := 0 ;
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_STRING 0
15749: ST_TO_ADDR
// if result [ 2 ] then
15750: LD_VAR 0 2
15754: PUSH
15755: LD_INT 2
15757: ARRAY
15758: IFFALSE 15827
// if result [ 2 ] [ 1 ] = 100 + i then
15760: LD_VAR 0 2
15764: PUSH
15765: LD_INT 2
15767: ARRAY
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PUSH
15773: LD_INT 100
15775: PUSH
15776: LD_VAR 0 8
15780: PLUS
15781: EQUAL
15782: IFFALSE 15827
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_INT 2
15796: PPUSH
15797: LD_VAR 0 2
15801: PUSH
15802: LD_INT 2
15804: ARRAY
15805: PPUSH
15806: LD_INT 1
15808: PPUSH
15809: CALL_OW 3
15813: PPUSH
15814: CALL_OW 1
15818: ST_TO_ADDR
// tmp := 1 ;
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_STRING 1
15826: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15827: LD_ADDR_VAR 0 6
15831: PUSH
15832: LD_VAR 0 6
15836: PUSH
15837: LD_VAR 0 3
15841: STR
15842: ST_TO_ADDR
// end ;
15843: GO 15739
15845: POP
15846: POP
// if isGameLoad then
15847: LD_VAR 0 1
15851: IFFALSE 16326
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15853: LD_ADDR_VAR 0 4
15857: PUSH
15858: LD_EXP 32
15862: PUSH
15863: LD_EXP 31
15867: PUSH
15868: LD_EXP 33
15872: PUSH
15873: LD_EXP 30
15877: PUSH
15878: LD_EXP 34
15882: PUSH
15883: LD_EXP 35
15887: PUSH
15888: LD_EXP 36
15892: PUSH
15893: LD_EXP 37
15897: PUSH
15898: LD_EXP 38
15902: PUSH
15903: LD_EXP 39
15907: PUSH
15908: LD_EXP 40
15912: PUSH
15913: LD_EXP 41
15917: PUSH
15918: LD_EXP 42
15922: PUSH
15923: LD_EXP 43
15927: PUSH
15928: LD_EXP 51
15932: PUSH
15933: LD_EXP 52
15937: PUSH
15938: LD_EXP 53
15942: PUSH
15943: LD_EXP 54
15947: PUSH
15948: LD_EXP 56
15952: PUSH
15953: LD_EXP 57
15957: PUSH
15958: LD_EXP 58
15962: PUSH
15963: LD_EXP 61
15967: PUSH
15968: LD_EXP 63
15972: PUSH
15973: LD_EXP 64
15977: PUSH
15978: LD_EXP 65
15982: PUSH
15983: LD_EXP 67
15987: PUSH
15988: LD_EXP 68
15992: PUSH
15993: LD_EXP 71
15997: PUSH
15998: LD_EXP 72
16002: PUSH
16003: LD_EXP 73
16007: PUSH
16008: LD_EXP 74
16012: PUSH
16013: LD_EXP 75
16017: PUSH
16018: LD_EXP 76
16022: PUSH
16023: LD_EXP 77
16027: PUSH
16028: LD_EXP 78
16032: PUSH
16033: LD_EXP 79
16037: PUSH
16038: LD_EXP 44
16042: PUSH
16043: LD_EXP 45
16047: PUSH
16048: LD_EXP 48
16052: PUSH
16053: LD_EXP 49
16057: PUSH
16058: LD_EXP 50
16062: PUSH
16063: LD_EXP 46
16067: PUSH
16068: LD_EXP 47
16072: PUSH
16073: LD_EXP 55
16077: PUSH
16078: LD_EXP 59
16082: PUSH
16083: LD_EXP 60
16087: PUSH
16088: LD_EXP 62
16092: PUSH
16093: LD_EXP 66
16097: PUSH
16098: LD_EXP 69
16102: PUSH
16103: LD_EXP 70
16107: PUSH
16108: LD_EXP 80
16112: PUSH
16113: LD_EXP 81
16117: PUSH
16118: LD_EXP 82
16122: PUSH
16123: LD_EXP 83
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
// tmp :=  ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_STRING 
16191: ST_TO_ADDR
// for i = 1 to normalCounter do
16192: LD_ADDR_VAR 0 8
16196: PUSH
16197: DOUBLE
16198: LD_INT 1
16200: DEC
16201: ST_TO_ADDR
16202: LD_EXP 28
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16244
// begin if flags [ i ] then
16210: LD_VAR 0 4
16214: PUSH
16215: LD_VAR 0 8
16219: ARRAY
16220: IFFALSE 16242
// tmp := tmp & i & ; ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_VAR 0 8
16236: STR
16237: PUSH
16238: LD_STRING ;
16240: STR
16241: ST_TO_ADDR
// end ;
16242: GO 16207
16244: POP
16245: POP
// for i = 1 to hardcoreCounter do
16246: LD_ADDR_VAR 0 8
16250: PUSH
16251: DOUBLE
16252: LD_INT 1
16254: DEC
16255: ST_TO_ADDR
16256: LD_EXP 29
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16308
// begin if flags [ normalCounter + i ] then
16264: LD_VAR 0 4
16268: PUSH
16269: LD_EXP 28
16273: PUSH
16274: LD_VAR 0 8
16278: PLUS
16279: ARRAY
16280: IFFALSE 16306
// tmp := tmp & ( 100 + i ) & ; ;
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 100
16294: PUSH
16295: LD_VAR 0 8
16299: PLUS
16300: STR
16301: PUSH
16302: LD_STRING ;
16304: STR
16305: ST_TO_ADDR
// end ;
16306: GO 16261
16308: POP
16309: POP
// if tmp then
16310: LD_VAR 0 3
16314: IFFALSE 16326
// active := tmp ;
16316: LD_ADDR_VAR 0 7
16320: PUSH
16321: LD_VAR 0 3
16325: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16326: LD_STRING getStreamItemsFromMission("
16328: PUSH
16329: LD_VAR 0 5
16333: STR
16334: PUSH
16335: LD_STRING ","
16337: STR
16338: PUSH
16339: LD_VAR 0 6
16343: STR
16344: PUSH
16345: LD_STRING ","
16347: STR
16348: PUSH
16349: LD_VAR 0 7
16353: STR
16354: PUSH
16355: LD_STRING ")
16357: STR
16358: PPUSH
16359: CALL_OW 559
// end else
16363: GO 16372
// ToLua ( getStreamItemsFromMission("","","") ) ;
16365: LD_STRING getStreamItemsFromMission("","","")
16367: PPUSH
16368: CALL_OW 559
// end ;
16372: LD_VAR 0 2
16376: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16377: LD_EXP 27
16381: IFFALSE 16389
16383: PUSH
16384: LD_EXP 32
16388: AND
16389: IFFALSE 16513
16391: GO 16393
16393: DISABLE
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
// begin enable ;
16398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_OWVAR 2
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 34
16421: PUSH
16422: LD_INT 7
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 34
16431: PUSH
16432: LD_INT 45
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 34
16441: PUSH
16442: LD_INT 28
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 34
16451: PUSH
16452: LD_INT 47
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: ST_TO_ADDR
// if not tmp then
16475: LD_VAR 0 2
16479: NOT
16480: IFFALSE 16484
// exit ;
16482: GO 16513
// for i in tmp do
16484: LD_ADDR_VAR 0 1
16488: PUSH
16489: LD_VAR 0 2
16493: PUSH
16494: FOR_IN
16495: IFFALSE 16511
// begin SetLives ( i , 0 ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_INT 0
16504: PPUSH
16505: CALL_OW 234
// end ;
16509: GO 16494
16511: POP
16512: POP
// end ;
16513: PPOPN 2
16515: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16516: LD_EXP 27
16520: IFFALSE 16528
16522: PUSH
16523: LD_EXP 33
16527: AND
16528: IFFALSE 16612
16530: GO 16532
16532: DISABLE
16533: LD_INT 0
16535: PPUSH
16536: PPUSH
// begin enable ;
16537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16538: LD_ADDR_VAR 0 2
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_OWVAR 2
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 32
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 2
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16612
// for i in tmp do
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_VAR 0 2
16592: PUSH
16593: FOR_IN
16594: IFFALSE 16610
// begin SetLives ( i , 0 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 0
16603: PPUSH
16604: CALL_OW 234
// end ;
16608: GO 16593
16610: POP
16611: POP
// end ;
16612: PPOPN 2
16614: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16615: LD_EXP 27
16619: IFFALSE 16627
16621: PUSH
16622: LD_EXP 30
16626: AND
16627: IFFALSE 16720
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
// begin enable ;
16635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_INT 22
16643: PUSH
16644: LD_OWVAR 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 25
16658: PUSH
16659: LD_INT 5
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 25
16668: PUSH
16669: LD_INT 9
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 25
16678: PUSH
16679: LD_INT 8
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PPUSH
16696: CALL_OW 69
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16718
// begin SetClass ( i , 1 ) ;
16704: LD_VAR 0 1
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 336
// end ;
16716: GO 16701
16718: POP
16719: POP
// end ;
16720: PPOPN 1
16722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16723: LD_EXP 27
16727: IFFALSE 16735
16729: PUSH
16730: LD_EXP 31
16734: AND
16735: IFFALSE 16747
16737: PUSH
16738: LD_OWVAR 65
16742: PUSH
16743: LD_INT 7
16745: LESS
16746: AND
16747: IFFALSE 16761
16749: GO 16751
16751: DISABLE
// begin enable ;
16752: ENABLE
// game_speed := 7 ;
16753: LD_ADDR_OWVAR 65
16757: PUSH
16758: LD_INT 7
16760: ST_TO_ADDR
// end ;
16761: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16762: LD_EXP 27
16766: IFFALSE 16774
16768: PUSH
16769: LD_EXP 34
16773: AND
16774: IFFALSE 16976
16776: GO 16778
16778: DISABLE
16779: LD_INT 0
16781: PPUSH
16782: PPUSH
16783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16784: LD_ADDR_VAR 0 3
16788: PUSH
16789: LD_INT 81
16791: PUSH
16792: LD_OWVAR 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 69
16819: ST_TO_ADDR
// if not tmp then
16820: LD_VAR 0 3
16824: NOT
16825: IFFALSE 16829
// exit ;
16827: GO 16976
// if tmp > 5 then
16829: LD_VAR 0 3
16833: PUSH
16834: LD_INT 5
16836: GREATER
16837: IFFALSE 16849
// k := 5 else
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_INT 5
16846: ST_TO_ADDR
16847: GO 16859
// k := tmp ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: LD_VAR 0 3
16858: ST_TO_ADDR
// for i := 1 to k do
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: DOUBLE
16865: LD_INT 1
16867: DEC
16868: ST_TO_ADDR
16869: LD_VAR 0 2
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16877: LD_VAR 0 3
16881: PUSH
16882: LD_VAR 0 1
16886: ARRAY
16887: PPUSH
16888: LD_VAR 0 1
16892: PUSH
16893: LD_INT 4
16895: MOD
16896: PUSH
16897: LD_INT 1
16899: PLUS
16900: PPUSH
16901: CALL_OW 259
16905: PUSH
16906: LD_INT 10
16908: LESS
16909: IFFALSE 16972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16911: LD_VAR 0 3
16915: PUSH
16916: LD_VAR 0 1
16920: ARRAY
16921: PPUSH
16922: LD_VAR 0 1
16926: PUSH
16927: LD_INT 4
16929: MOD
16930: PUSH
16931: LD_INT 1
16933: PLUS
16934: PPUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_VAR 0 1
16944: ARRAY
16945: PPUSH
16946: LD_VAR 0 1
16950: PUSH
16951: LD_INT 4
16953: MOD
16954: PUSH
16955: LD_INT 1
16957: PLUS
16958: PPUSH
16959: CALL_OW 259
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: PPUSH
16968: CALL_OW 237
16972: GO 16874
16974: POP
16975: POP
// end ;
16976: PPOPN 3
16978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16979: LD_EXP 27
16983: IFFALSE 16991
16985: PUSH
16986: LD_EXP 35
16990: AND
16991: IFFALSE 17011
16993: GO 16995
16995: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16996: LD_INT 4
16998: PPUSH
16999: LD_OWVAR 2
17003: PPUSH
17004: LD_INT 0
17006: PPUSH
17007: CALL_OW 324
17011: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17012: LD_EXP 27
17016: IFFALSE 17024
17018: PUSH
17019: LD_EXP 64
17023: AND
17024: IFFALSE 17044
17026: GO 17028
17028: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17029: LD_INT 19
17031: PPUSH
17032: LD_OWVAR 2
17036: PPUSH
17037: LD_INT 0
17039: PPUSH
17040: CALL_OW 324
17044: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17045: LD_EXP 27
17049: IFFALSE 17057
17051: PUSH
17052: LD_EXP 36
17056: AND
17057: IFFALSE 17159
17059: GO 17061
17061: DISABLE
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
// begin enable ;
17066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17067: LD_ADDR_VAR 0 2
17071: PUSH
17072: LD_INT 22
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 34
17089: PUSH
17090: LD_INT 11
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 34
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17159
// for i in tmp do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_VAR 0 2
17139: PUSH
17140: FOR_IN
17141: IFFALSE 17157
// begin SetLives ( i , 0 ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_INT 0
17150: PPUSH
17151: CALL_OW 234
// end ;
17155: GO 17140
17157: POP
17158: POP
// end ;
17159: PPOPN 2
17161: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17162: LD_EXP 27
17166: IFFALSE 17174
17168: PUSH
17169: LD_EXP 37
17173: AND
17174: IFFALSE 17194
17176: GO 17178
17178: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17179: LD_INT 32
17181: PPUSH
17182: LD_OWVAR 2
17186: PPUSH
17187: LD_INT 0
17189: PPUSH
17190: CALL_OW 324
17194: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17195: LD_EXP 27
17199: IFFALSE 17207
17201: PUSH
17202: LD_EXP 38
17206: AND
17207: IFFALSE 17390
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 33
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 2
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17390
// side := 0 ;
17262: LD_ADDR_VAR 0 3
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// for i := 1 to 8 do
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: DOUBLE
17276: LD_INT 1
17278: DEC
17279: ST_TO_ADDR
17280: LD_INT 8
17282: PUSH
17283: FOR_TO
17284: IFFALSE 17334
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17286: LD_OWVAR 2
17290: PUSH
17291: LD_VAR 0 1
17295: NONEQUAL
17296: IFFALSE 17318
17298: PUSH
17299: LD_OWVAR 2
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 81
17313: PUSH
17314: LD_INT 2
17316: EQUAL
17317: AND
17318: IFFALSE 17332
// begin side := i ;
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_VAR 0 1
17329: ST_TO_ADDR
// break ;
17330: GO 17334
// end ;
17332: GO 17283
17334: POP
17335: POP
// if not side then
17336: LD_VAR 0 3
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 17390
// for i := 1 to tmp do
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: DOUBLE
17351: LD_INT 1
17353: DEC
17354: ST_TO_ADDR
17355: LD_VAR 0 2
17359: PUSH
17360: FOR_TO
17361: IFFALSE 17388
// if Prob ( 60 ) then
17363: LD_INT 60
17365: PPUSH
17366: CALL_OW 13
17370: IFFALSE 17386
// SetSide ( i , side ) ;
17372: LD_VAR 0 1
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: CALL_OW 235
17386: GO 17360
17388: POP
17389: POP
// end ;
17390: PPOPN 3
17392: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17393: LD_EXP 27
17397: IFFALSE 17405
17399: PUSH
17400: LD_EXP 40
17404: AND
17405: IFFALSE 17524
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_OWVAR 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: LD_INT 23
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: PUSH
17467: FOR_IN
17468: IFFALSE 17522
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 4
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: IN
17498: IFFALSE 17520
// SetClass ( un , rand ( 1 , 4 ) ) ;
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_INT 4
17510: PPUSH
17511: CALL_OW 12
17515: PPUSH
17516: CALL_OW 336
17520: GO 17467
17522: POP
17523: POP
// end ;
17524: PPOPN 1
17526: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17527: LD_EXP 27
17531: IFFALSE 17539
17533: PUSH
17534: LD_EXP 39
17538: AND
17539: IFFALSE 17618
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 3
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: ST_TO_ADDR
// if not tmp then
17583: LD_VAR 0 1
17587: NOT
17588: IFFALSE 17592
// exit ;
17590: GO 17618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 1
17599: PPUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 12
17609: ARRAY
17610: PPUSH
17611: LD_INT 100
17613: PPUSH
17614: CALL_OW 234
// end ;
17618: PPOPN 1
17620: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17621: LD_EXP 27
17625: IFFALSE 17633
17627: PUSH
17628: LD_EXP 41
17632: AND
17633: IFFALSE 17731
17635: GO 17637
17637: DISABLE
17638: LD_INT 0
17640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17641: LD_ADDR_VAR 0 1
17645: PUSH
17646: LD_INT 22
17648: PUSH
17649: LD_OWVAR 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 21
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PPUSH
17672: CALL_OW 69
17676: ST_TO_ADDR
// if not tmp then
17677: LD_VAR 0 1
17681: NOT
17682: IFFALSE 17686
// exit ;
17684: GO 17731
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17686: LD_VAR 0 1
17690: PUSH
17691: LD_INT 1
17693: PPUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 12
17703: ARRAY
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: LD_INT 4
17710: PPUSH
17711: CALL_OW 12
17715: PPUSH
17716: LD_INT 3000
17718: PPUSH
17719: LD_INT 9000
17721: PPUSH
17722: CALL_OW 12
17726: PPUSH
17727: CALL_OW 492
// end ;
17731: PPOPN 1
17733: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17734: LD_EXP 27
17738: IFFALSE 17746
17740: PUSH
17741: LD_EXP 42
17745: AND
17746: IFFALSE 17766
17748: GO 17750
17750: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17751: LD_INT 1
17753: PPUSH
17754: LD_OWVAR 2
17758: PPUSH
17759: LD_INT 0
17761: PPUSH
17762: CALL_OW 324
17766: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17767: LD_EXP 27
17771: IFFALSE 17779
17773: PUSH
17774: LD_EXP 43
17778: AND
17779: IFFALSE 17862
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_OWVAR 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: ST_TO_ADDR
// if not tmp then
17824: LD_VAR 0 2
17828: NOT
17829: IFFALSE 17833
// exit ;
17831: GO 17862
// for i in tmp do
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_VAR 0 2
17842: PUSH
17843: FOR_IN
17844: IFFALSE 17860
// SetBLevel ( i , 10 ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: LD_INT 10
17853: PPUSH
17854: CALL_OW 241
17858: GO 17843
17860: POP
17861: POP
// end ;
17862: PPOPN 2
17864: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17865: LD_EXP 27
17869: IFFALSE 17877
17871: PUSH
17872: LD_EXP 44
17876: AND
17877: IFFALSE 17988
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17887: LD_ADDR_VAR 0 3
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 25
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: ST_TO_ADDR
// if not tmp then
17923: LD_VAR 0 3
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 17988
// un := tmp [ rand ( 1 , tmp ) ] ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 12
17954: ARRAY
17955: ST_TO_ADDR
// if Crawls ( un ) then
17956: LD_VAR 0 2
17960: PPUSH
17961: CALL_OW 318
17965: IFFALSE 17976
// ComWalk ( un ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_INT 5
17983: PPUSH
17984: CALL_OW 336
// end ;
17988: PPOPN 3
17990: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17991: LD_EXP 27
17995: IFFALSE 18003
17997: PUSH
17998: LD_EXP 45
18002: AND
18003: IFFALSE 18015
18005: PUSH
18006: LD_OWVAR 67
18010: PUSH
18011: LD_INT 4
18013: LESS
18014: AND
18015: IFFALSE 18034
18017: GO 18019
18019: DISABLE
// begin Difficulty := Difficulty + 1 ;
18020: LD_ADDR_OWVAR 67
18024: PUSH
18025: LD_OWVAR 67
18029: PUSH
18030: LD_INT 1
18032: PLUS
18033: ST_TO_ADDR
// end ;
18034: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18035: LD_EXP 27
18039: IFFALSE 18047
18041: PUSH
18042: LD_EXP 46
18046: AND
18047: IFFALSE 18150
18049: GO 18051
18051: DISABLE
18052: LD_INT 0
18054: PPUSH
// begin for i := 1 to 5 do
18055: LD_ADDR_VAR 0 1
18059: PUSH
18060: DOUBLE
18061: LD_INT 1
18063: DEC
18064: ST_TO_ADDR
18065: LD_INT 5
18067: PUSH
18068: FOR_TO
18069: IFFALSE 18148
// begin uc_nation := nation_nature ;
18071: LD_ADDR_OWVAR 21
18075: PUSH
18076: LD_INT 0
18078: ST_TO_ADDR
// uc_side := 0 ;
18079: LD_ADDR_OWVAR 20
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18087: LD_ADDR_OWVAR 29
18091: PUSH
18092: LD_INT 12
18094: PUSH
18095: LD_INT 12
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// hc_agressivity := 20 ;
18102: LD_ADDR_OWVAR 35
18106: PUSH
18107: LD_INT 20
18109: ST_TO_ADDR
// hc_class := class_tiger ;
18110: LD_ADDR_OWVAR 28
18114: PUSH
18115: LD_INT 14
18117: ST_TO_ADDR
// hc_gallery :=  ;
18118: LD_ADDR_OWVAR 33
18122: PUSH
18123: LD_STRING 
18125: ST_TO_ADDR
// hc_name :=  ;
18126: LD_ADDR_OWVAR 26
18130: PUSH
18131: LD_STRING 
18133: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18134: CALL_OW 44
18138: PPUSH
18139: LD_INT 0
18141: PPUSH
18142: CALL_OW 51
// end ;
18146: GO 18068
18148: POP
18149: POP
// end ;
18150: PPOPN 1
18152: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18153: LD_EXP 27
18157: IFFALSE 18165
18159: PUSH
18160: LD_EXP 47
18164: AND
18165: IFFALSE 18174
18167: GO 18169
18169: DISABLE
// StreamSibBomb ;
18170: CALL 18175 0 0
18174: END
// export function StreamSibBomb ; var i , x , y ; begin
18175: LD_INT 0
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// result := false ;
18181: LD_ADDR_VAR 0 1
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// for i := 1 to 16 do
18189: LD_ADDR_VAR 0 2
18193: PUSH
18194: DOUBLE
18195: LD_INT 1
18197: DEC
18198: ST_TO_ADDR
18199: LD_INT 16
18201: PUSH
18202: FOR_TO
18203: IFFALSE 18402
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 10
18212: PUSH
18213: LD_INT 20
18215: PUSH
18216: LD_INT 30
18218: PUSH
18219: LD_INT 40
18221: PUSH
18222: LD_INT 50
18224: PUSH
18225: LD_INT 60
18227: PUSH
18228: LD_INT 70
18230: PUSH
18231: LD_INT 80
18233: PUSH
18234: LD_INT 90
18236: PUSH
18237: LD_INT 100
18239: PUSH
18240: LD_INT 110
18242: PUSH
18243: LD_INT 120
18245: PUSH
18246: LD_INT 130
18248: PUSH
18249: LD_INT 140
18251: PUSH
18252: LD_INT 150
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PPUSH
18275: LD_INT 15
18277: PPUSH
18278: CALL_OW 12
18282: ARRAY
18283: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18284: LD_ADDR_VAR 0 4
18288: PUSH
18289: LD_INT 10
18291: PUSH
18292: LD_INT 20
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 40
18300: PUSH
18301: LD_INT 50
18303: PUSH
18304: LD_INT 60
18306: PUSH
18307: LD_INT 70
18309: PUSH
18310: LD_INT 80
18312: PUSH
18313: LD_INT 90
18315: PUSH
18316: LD_INT 100
18318: PUSH
18319: LD_INT 110
18321: PUSH
18322: LD_INT 120
18324: PUSH
18325: LD_INT 130
18327: PUSH
18328: LD_INT 140
18330: PUSH
18331: LD_INT 150
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PPUSH
18354: LD_INT 15
18356: PPUSH
18357: CALL_OW 12
18361: ARRAY
18362: ST_TO_ADDR
// if ValidHex ( x , y ) then
18363: LD_VAR 0 3
18367: PPUSH
18368: LD_VAR 0 4
18372: PPUSH
18373: CALL_OW 488
18377: IFFALSE 18400
// begin result := [ x , y ] ;
18379: LD_ADDR_VAR 0 1
18383: PUSH
18384: LD_VAR 0 3
18388: PUSH
18389: LD_VAR 0 4
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: ST_TO_ADDR
// break ;
18398: GO 18402
// end ; end ;
18400: GO 18202
18402: POP
18403: POP
// if result then
18404: LD_VAR 0 1
18408: IFFALSE 18468
// begin ToLua ( playSibBomb() ) ;
18410: LD_STRING playSibBomb()
18412: PPUSH
18413: CALL_OW 559
// wait ( 0 0$14 ) ;
18417: LD_INT 490
18419: PPUSH
18420: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18424: LD_VAR 0 1
18428: PUSH
18429: LD_INT 1
18431: ARRAY
18432: PPUSH
18433: LD_VAR 0 1
18437: PUSH
18438: LD_INT 2
18440: ARRAY
18441: PPUSH
18442: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18446: LD_VAR 0 1
18450: PUSH
18451: LD_INT 1
18453: ARRAY
18454: PPUSH
18455: LD_VAR 0 1
18459: PUSH
18460: LD_INT 2
18462: ARRAY
18463: PPUSH
18464: CALL_OW 429
// end ; end ;
18468: LD_VAR 0 1
18472: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18473: LD_EXP 27
18477: IFFALSE 18485
18479: PUSH
18480: LD_EXP 49
18484: AND
18485: IFFALSE 18497
18487: GO 18489
18489: DISABLE
// YouLost (  ) ;
18490: LD_STRING 
18492: PPUSH
18493: CALL_OW 104
18497: END
// every 0 0$1 trigger StreamModeActive and sFog do
18498: LD_EXP 27
18502: IFFALSE 18510
18504: PUSH
18505: LD_EXP 48
18509: AND
18510: IFFALSE 18524
18512: GO 18514
18514: DISABLE
// FogOff ( your_side ) ;
18515: LD_OWVAR 2
18519: PPUSH
18520: CALL_OW 344
18524: END
// every 0 0$1 trigger StreamModeActive and sSun do
18525: LD_EXP 27
18529: IFFALSE 18537
18531: PUSH
18532: LD_EXP 50
18536: AND
18537: IFFALSE 18565
18539: GO 18541
18541: DISABLE
// begin solar_recharge_percent := 0 ;
18542: LD_ADDR_OWVAR 79
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18550: LD_INT 10500
18552: PPUSH
18553: CALL_OW 67
// solar_recharge_percent := 100 ;
18557: LD_ADDR_OWVAR 79
18561: PUSH
18562: LD_INT 100
18564: ST_TO_ADDR
// end ;
18565: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18566: LD_EXP 27
18570: IFFALSE 18578
18572: PUSH
18573: LD_EXP 51
18577: AND
18578: IFFALSE 18817
18580: GO 18582
18582: DISABLE
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// begin tmp := [ ] ;
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: EMPTY
18594: ST_TO_ADDR
// for i := 1 to 6 do
18595: LD_ADDR_VAR 0 1
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_INT 6
18607: PUSH
18608: FOR_TO
18609: IFFALSE 18714
// begin uc_nation := nation_nature ;
18611: LD_ADDR_OWVAR 21
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// uc_side := 0 ;
18619: LD_ADDR_OWVAR 20
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18627: LD_ADDR_OWVAR 29
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: LD_INT 12
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: ST_TO_ADDR
// hc_agressivity := 20 ;
18642: LD_ADDR_OWVAR 35
18646: PUSH
18647: LD_INT 20
18649: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18650: LD_ADDR_OWVAR 28
18654: PUSH
18655: LD_INT 17
18657: ST_TO_ADDR
// hc_gallery :=  ;
18658: LD_ADDR_OWVAR 33
18662: PUSH
18663: LD_STRING 
18665: ST_TO_ADDR
// hc_name :=  ;
18666: LD_ADDR_OWVAR 26
18670: PUSH
18671: LD_STRING 
18673: ST_TO_ADDR
// un := CreateHuman ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: CALL_OW 44
18683: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 51
// tmp := tmp ^ un ;
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_VAR 0 3
18705: PUSH
18706: LD_VAR 0 2
18710: ADD
18711: ST_TO_ADDR
// end ;
18712: GO 18608
18714: POP
18715: POP
// repeat wait ( 0 0$1 ) ;
18716: LD_INT 35
18718: PPUSH
18719: CALL_OW 67
// for un in tmp do
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_VAR 0 3
18732: PUSH
18733: FOR_IN
18734: IFFALSE 18808
// begin if IsDead ( un ) then
18736: LD_VAR 0 2
18740: PPUSH
18741: CALL_OW 301
18745: IFFALSE 18765
// begin tmp := tmp diff un ;
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 2
18761: DIFF
18762: ST_TO_ADDR
// continue ;
18763: GO 18733
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18765: LD_VAR 0 2
18769: PPUSH
18770: LD_INT 3
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: PPUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: CALL_OW 74
18801: PPUSH
18802: CALL_OW 115
// end ;
18806: GO 18733
18808: POP
18809: POP
// until not tmp ;
18810: LD_VAR 0 3
18814: NOT
18815: IFFALSE 18716
// end ;
18817: PPOPN 3
18819: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18820: LD_EXP 27
18824: IFFALSE 18832
18826: PUSH
18827: LD_EXP 52
18831: AND
18832: IFFALSE 18886
18834: GO 18836
18836: DISABLE
// begin ToLua ( displayTroll(); ) ;
18837: LD_STRING displayTroll();
18839: PPUSH
18840: CALL_OW 559
// wait ( 3 3$00 ) ;
18844: LD_INT 6300
18846: PPUSH
18847: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18851: LD_STRING hideTroll();
18853: PPUSH
18854: CALL_OW 559
// wait ( 1 1$00 ) ;
18858: LD_INT 2100
18860: PPUSH
18861: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18865: LD_STRING displayTroll();
18867: PPUSH
18868: CALL_OW 559
// wait ( 1 1$00 ) ;
18872: LD_INT 2100
18874: PPUSH
18875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18879: LD_STRING hideTroll();
18881: PPUSH
18882: CALL_OW 559
// end ;
18886: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18887: LD_EXP 27
18891: IFFALSE 18899
18893: PUSH
18894: LD_EXP 53
18898: AND
18899: IFFALSE 18962
18901: GO 18903
18903: DISABLE
18904: LD_INT 0
18906: PPUSH
// begin p := 0 ;
18907: LD_ADDR_VAR 0 1
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// repeat game_speed := 1 ;
18915: LD_ADDR_OWVAR 65
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18923: LD_INT 35
18925: PPUSH
18926: CALL_OW 67
// p := p + 1 ;
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_VAR 0 1
18939: PUSH
18940: LD_INT 1
18942: PLUS
18943: ST_TO_ADDR
// until p >= 60 ;
18944: LD_VAR 0 1
18948: PUSH
18949: LD_INT 60
18951: GREATEREQUAL
18952: IFFALSE 18915
// game_speed := 4 ;
18954: LD_ADDR_OWVAR 65
18958: PUSH
18959: LD_INT 4
18961: ST_TO_ADDR
// end ;
18962: PPOPN 1
18964: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18965: LD_EXP 27
18969: IFFALSE 18977
18971: PUSH
18972: LD_EXP 54
18976: AND
18977: IFFALSE 19123
18979: GO 18981
18981: DISABLE
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_OWVAR 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 30
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 69
19039: ST_TO_ADDR
// if not depot then
19040: LD_VAR 0 1
19044: NOT
19045: IFFALSE 19049
// exit ;
19047: GO 19123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 1
19061: PPUSH
19062: LD_VAR 0 1
19066: PPUSH
19067: CALL_OW 12
19071: ARRAY
19072: PPUSH
19073: CALL_OW 274
19077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: LD_INT 1
19085: PPUSH
19086: LD_INT 0
19088: PPUSH
19089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19093: LD_VAR 0 2
19097: PPUSH
19098: LD_INT 2
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_INT 3
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 277
// end ;
19123: PPOPN 2
19125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19126: LD_EXP 27
19130: IFFALSE 19138
19132: PUSH
19133: LD_EXP 55
19137: AND
19138: IFFALSE 19235
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19146: LD_ADDR_VAR 0 1
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_OWVAR 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 21
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 3
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 1
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19209: LD_VAR 0 1
19213: PUSH
19214: LD_INT 1
19216: PPUSH
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 12
19226: ARRAY
19227: PPUSH
19228: LD_INT 200
19230: PPUSH
19231: CALL_OW 234
// end ;
19235: PPOPN 1
19237: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19238: LD_EXP 27
19242: IFFALSE 19250
19244: PUSH
19245: LD_EXP 56
19249: AND
19250: IFFALSE 19329
19252: GO 19254
19254: DISABLE
19255: LD_INT 0
19257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: LD_INT 22
19265: PUSH
19266: LD_OWVAR 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 21
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// if not tmp then
19294: LD_VAR 0 1
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19329
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 12
19320: ARRAY
19321: PPUSH
19322: LD_INT 60
19324: PPUSH
19325: CALL_OW 234
// end ;
19329: PPOPN 1
19331: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19332: LD_EXP 27
19336: IFFALSE 19344
19338: PUSH
19339: LD_EXP 57
19343: AND
19344: IFFALSE 19443
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
// begin enable ;
19353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19354: LD_ADDR_VAR 0 1
19358: PUSH
19359: LD_INT 22
19361: PUSH
19362: LD_OWVAR 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 61
19373: PUSH
19374: EMPTY
19375: LIST
19376: PUSH
19377: LD_INT 33
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: ST_TO_ADDR
// if not tmp then
19397: LD_VAR 0 1
19401: NOT
19402: IFFALSE 19406
// exit ;
19404: GO 19443
// for i in tmp do
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 1
19415: PUSH
19416: FOR_IN
19417: IFFALSE 19441
// if IsControledBy ( i ) then
19419: LD_VAR 0 2
19423: PPUSH
19424: CALL_OW 312
19428: IFFALSE 19439
// ComUnlink ( i ) ;
19430: LD_VAR 0 2
19434: PPUSH
19435: CALL_OW 136
19439: GO 19416
19441: POP
19442: POP
// end ;
19443: PPOPN 2
19445: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19446: LD_EXP 27
19450: IFFALSE 19458
19452: PUSH
19453: LD_EXP 58
19457: AND
19458: IFFALSE 19598
19460: GO 19462
19462: DISABLE
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
// begin ToLua ( displayPowell(); ) ;
19467: LD_STRING displayPowell();
19469: PPUSH
19470: CALL_OW 559
// uc_side := 0 ;
19474: LD_ADDR_OWVAR 20
19478: PUSH
19479: LD_INT 0
19481: ST_TO_ADDR
// uc_nation := 2 ;
19482: LD_ADDR_OWVAR 21
19486: PUSH
19487: LD_INT 2
19489: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19490: LD_ADDR_OWVAR 37
19494: PUSH
19495: LD_INT 14
19497: ST_TO_ADDR
// vc_engine := engine_siberite ;
19498: LD_ADDR_OWVAR 39
19502: PUSH
19503: LD_INT 3
19505: ST_TO_ADDR
// vc_control := control_apeman ;
19506: LD_ADDR_OWVAR 38
19510: PUSH
19511: LD_INT 5
19513: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19514: LD_ADDR_OWVAR 40
19518: PUSH
19519: LD_INT 29
19521: ST_TO_ADDR
// un := CreateVehicle ;
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: CALL_OW 45
19531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_INT 1
19539: PPUSH
19540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19544: LD_INT 35
19546: PPUSH
19547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: PPUSH
19573: LD_VAR 0 2
19577: PPUSH
19578: CALL_OW 74
19582: PPUSH
19583: CALL_OW 115
// until IsDead ( un ) ;
19587: LD_VAR 0 2
19591: PPUSH
19592: CALL_OW 301
19596: IFFALSE 19544
// end ;
19598: PPOPN 2
19600: END
// every 0 0$1 trigger StreamModeActive and sStu do
19601: LD_EXP 27
19605: IFFALSE 19613
19607: PUSH
19608: LD_EXP 66
19612: AND
19613: IFFALSE 19629
19615: GO 19617
19617: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19618: LD_STRING displayStucuk();
19620: PPUSH
19621: CALL_OW 559
// ResetFog ;
19625: CALL_OW 335
// end ;
19629: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19630: LD_EXP 27
19634: IFFALSE 19642
19636: PUSH
19637: LD_EXP 59
19641: AND
19642: IFFALSE 19783
19644: GO 19646
19646: DISABLE
19647: LD_INT 0
19649: PPUSH
19650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: LD_INT 22
19658: PUSH
19659: LD_OWVAR 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 21
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PPUSH
19682: CALL_OW 69
19686: ST_TO_ADDR
// if not tmp then
19687: LD_VAR 0 2
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19783
// un := tmp [ rand ( 1 , tmp ) ] ;
19696: LD_ADDR_VAR 0 1
19700: PUSH
19701: LD_VAR 0 2
19705: PUSH
19706: LD_INT 1
19708: PPUSH
19709: LD_VAR 0 2
19713: PPUSH
19714: CALL_OW 12
19718: ARRAY
19719: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19720: LD_VAR 0 1
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19732: LD_VAR 0 1
19736: PPUSH
19737: LD_OWVAR 3
19741: PUSH
19742: LD_VAR 0 1
19746: DIFF
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 74
19757: PPUSH
19758: CALL_OW 115
// wait ( 0 0$20 ) ;
19762: LD_INT 700
19764: PPUSH
19765: CALL_OW 67
// SetSide ( un , your_side ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: LD_OWVAR 2
19778: PPUSH
19779: CALL_OW 235
// end ;
19783: PPOPN 2
19785: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19786: LD_EXP 27
19790: IFFALSE 19798
19792: PUSH
19793: LD_EXP 60
19797: AND
19798: IFFALSE 19904
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PPUSH
19855: CALL_OW 69
19859: ST_TO_ADDR
// if not depot then
19860: LD_VAR 0 1
19864: NOT
19865: IFFALSE 19869
// exit ;
19867: GO 19904
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19869: LD_VAR 0 1
19873: PUSH
19874: LD_INT 1
19876: ARRAY
19877: PPUSH
19878: CALL_OW 250
19882: PPUSH
19883: LD_VAR 0 1
19887: PUSH
19888: LD_INT 1
19890: ARRAY
19891: PPUSH
19892: CALL_OW 251
19896: PPUSH
19897: LD_INT 70
19899: PPUSH
19900: CALL_OW 495
// end ;
19904: PPOPN 1
19906: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19907: LD_EXP 27
19911: IFFALSE 19919
19913: PUSH
19914: LD_EXP 61
19918: AND
19919: IFFALSE 20130
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19931: LD_ADDR_VAR 0 5
19935: PUSH
19936: LD_INT 22
19938: PUSH
19939: LD_OWVAR 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 5
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20130
// for i in tmp do
19976: LD_ADDR_VAR 0 1
19980: PUSH
19981: LD_VAR 0 5
19985: PUSH
19986: FOR_IN
19987: IFFALSE 20128
// begin d := rand ( 0 , 5 ) ;
19989: LD_ADDR_VAR 0 4
19993: PUSH
19994: LD_INT 0
19996: PPUSH
19997: LD_INT 5
19999: PPUSH
20000: CALL_OW 12
20004: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 250
20019: PPUSH
20020: LD_VAR 0 4
20024: PPUSH
20025: LD_INT 3
20027: PPUSH
20028: LD_INT 12
20030: PPUSH
20031: CALL_OW 12
20035: PPUSH
20036: CALL_OW 272
20040: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 251
20055: PPUSH
20056: LD_VAR 0 4
20060: PPUSH
20061: LD_INT 3
20063: PPUSH
20064: LD_INT 12
20066: PPUSH
20067: CALL_OW 12
20071: PPUSH
20072: CALL_OW 273
20076: ST_TO_ADDR
// if ValidHex ( x , y ) then
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_VAR 0 3
20086: PPUSH
20087: CALL_OW 488
20091: IFFALSE 20126
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: LD_INT 3
20110: PPUSH
20111: LD_INT 6
20113: PPUSH
20114: CALL_OW 12
20118: PPUSH
20119: LD_INT 1
20121: PPUSH
20122: CALL_OW 483
// end ;
20126: GO 19986
20128: POP
20129: POP
// end ;
20130: PPOPN 5
20132: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20133: LD_EXP 27
20137: IFFALSE 20145
20139: PUSH
20140: LD_EXP 62
20144: AND
20145: IFFALSE 20239
20147: GO 20149
20149: DISABLE
20150: LD_INT 0
20152: PPUSH
20153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20154: LD_ADDR_VAR 0 2
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_OWVAR 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 32
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 21
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: PPUSH
20196: CALL_OW 69
20200: ST_TO_ADDR
// if not tmp then
20201: LD_VAR 0 2
20205: NOT
20206: IFFALSE 20210
// exit ;
20208: GO 20239
// for i in tmp do
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: FOR_IN
20221: IFFALSE 20237
// SetFuel ( i , 0 ) ;
20223: LD_VAR 0 1
20227: PPUSH
20228: LD_INT 0
20230: PPUSH
20231: CALL_OW 240
20235: GO 20220
20237: POP
20238: POP
// end ;
20239: PPOPN 2
20241: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20242: LD_EXP 27
20246: IFFALSE 20254
20248: PUSH
20249: LD_EXP 63
20253: AND
20254: IFFALSE 20320
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20262: LD_ADDR_VAR 0 1
20266: PUSH
20267: LD_INT 22
20269: PUSH
20270: LD_OWVAR 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 30
20281: PUSH
20282: LD_INT 29
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: ST_TO_ADDR
// if not tmp then
20298: LD_VAR 0 1
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20320
// DestroyUnit ( tmp [ 1 ] ) ;
20307: LD_VAR 0 1
20311: PUSH
20312: LD_INT 1
20314: ARRAY
20315: PPUSH
20316: CALL_OW 65
// end ;
20320: PPOPN 1
20322: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20323: LD_EXP 27
20327: IFFALSE 20335
20329: PUSH
20330: LD_EXP 65
20334: AND
20335: IFFALSE 20464
20337: GO 20339
20339: DISABLE
20340: LD_INT 0
20342: PPUSH
// begin uc_side := 0 ;
20343: LD_ADDR_OWVAR 20
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// uc_nation := nation_arabian ;
20351: LD_ADDR_OWVAR 21
20355: PUSH
20356: LD_INT 2
20358: ST_TO_ADDR
// hc_gallery :=  ;
20359: LD_ADDR_OWVAR 33
20363: PUSH
20364: LD_STRING 
20366: ST_TO_ADDR
// hc_name :=  ;
20367: LD_ADDR_OWVAR 26
20371: PUSH
20372: LD_STRING 
20374: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20375: LD_INT 1
20377: PPUSH
20378: LD_INT 11
20380: PPUSH
20381: LD_INT 10
20383: PPUSH
20384: CALL_OW 380
// un := CreateHuman ;
20388: LD_ADDR_VAR 0 1
20392: PUSH
20393: CALL_OW 44
20397: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20398: LD_VAR 0 1
20402: PPUSH
20403: LD_INT 1
20405: PPUSH
20406: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20410: LD_INT 35
20412: PPUSH
20413: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20417: LD_VAR 0 1
20421: PPUSH
20422: LD_INT 22
20424: PUSH
20425: LD_OWVAR 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: PPUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 74
20448: PPUSH
20449: CALL_OW 115
// until IsDead ( un ) ;
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 301
20462: IFFALSE 20410
// end ;
20464: PPOPN 1
20466: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20467: LD_EXP 27
20471: IFFALSE 20479
20473: PUSH
20474: LD_EXP 67
20478: AND
20479: IFFALSE 20491
20481: GO 20483
20483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20484: LD_STRING earthquake(getX(game), 0, 32)
20486: PPUSH
20487: CALL_OW 559
20491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20492: LD_EXP 27
20496: IFFALSE 20504
20498: PUSH
20499: LD_EXP 68
20503: AND
20504: IFFALSE 20595
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin enable ;
20512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20513: LD_ADDR_VAR 0 1
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_OWVAR 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 21
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 33
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 1
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20569: LD_VAR 0 1
20573: PUSH
20574: LD_INT 1
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 12
20586: ARRAY
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 234
// end ;
20595: PPOPN 1
20597: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20598: LD_EXP 27
20602: IFFALSE 20610
20604: PUSH
20605: LD_EXP 69
20609: AND
20610: IFFALSE 20751
20612: GO 20614
20614: DISABLE
20615: LD_INT 0
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 25
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 69
20655: ST_TO_ADDR
// if not tmp then
20656: LD_VAR 0 3
20660: NOT
20661: IFFALSE 20665
// exit ;
20663: GO 20751
// un := tmp [ rand ( 1 , tmp ) ] ;
20665: LD_ADDR_VAR 0 2
20669: PUSH
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 1
20677: PPUSH
20678: LD_VAR 0 3
20682: PPUSH
20683: CALL_OW 12
20687: ARRAY
20688: ST_TO_ADDR
// if Crawls ( un ) then
20689: LD_VAR 0 2
20693: PPUSH
20694: CALL_OW 318
20698: IFFALSE 20709
// ComWalk ( un ) ;
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_INT 9
20716: PPUSH
20717: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20721: LD_INT 28
20723: PPUSH
20724: LD_OWVAR 2
20728: PPUSH
20729: LD_INT 2
20731: PPUSH
20732: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20736: LD_INT 29
20738: PPUSH
20739: LD_OWVAR 2
20743: PPUSH
20744: LD_INT 2
20746: PPUSH
20747: CALL_OW 322
// end ;
20751: PPOPN 3
20753: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20754: LD_EXP 27
20758: IFFALSE 20766
20760: PUSH
20761: LD_EXP 70
20765: AND
20766: IFFALSE 20877
20768: GO 20770
20770: DISABLE
20771: LD_INT 0
20773: PPUSH
20774: PPUSH
20775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_OWVAR 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 25
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: ST_TO_ADDR
// if not tmp then
20812: LD_VAR 0 3
20816: NOT
20817: IFFALSE 20821
// exit ;
20819: GO 20877
// un := tmp [ rand ( 1 , tmp ) ] ;
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 1
20833: PPUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// if Crawls ( un ) then
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 318
20854: IFFALSE 20865
// ComWalk ( un ) ;
20856: LD_VAR 0 2
20860: PPUSH
20861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20865: LD_VAR 0 2
20869: PPUSH
20870: LD_INT 8
20872: PPUSH
20873: CALL_OW 336
// end ;
20877: PPOPN 3
20879: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20880: LD_EXP 27
20884: IFFALSE 20892
20886: PUSH
20887: LD_EXP 71
20891: AND
20892: IFFALSE 21036
20894: GO 20896
20896: DISABLE
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_INT 22
20908: PUSH
20909: LD_OWVAR 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 21
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 34
20933: PUSH
20934: LD_INT 12
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 34
20943: PUSH
20944: LD_INT 51
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 34
20953: PUSH
20954: LD_INT 32
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PPUSH
20972: CALL_OW 69
20976: ST_TO_ADDR
// if not tmp then
20977: LD_VAR 0 2
20981: NOT
20982: IFFALSE 20986
// exit ;
20984: GO 21036
// for i in tmp do
20986: LD_ADDR_VAR 0 1
20990: PUSH
20991: LD_VAR 0 2
20995: PUSH
20996: FOR_IN
20997: IFFALSE 21034
// if GetCargo ( i , mat_artifact ) = 0 then
20999: LD_VAR 0 1
21003: PPUSH
21004: LD_INT 4
21006: PPUSH
21007: CALL_OW 289
21011: PUSH
21012: LD_INT 0
21014: EQUAL
21015: IFFALSE 21032
// SetCargo ( i , mat_siberit , 100 ) ;
21017: LD_VAR 0 1
21021: PPUSH
21022: LD_INT 3
21024: PPUSH
21025: LD_INT 100
21027: PPUSH
21028: CALL_OW 290
21032: GO 20996
21034: POP
21035: POP
// end ;
21036: PPOPN 2
21038: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21039: LD_EXP 27
21043: IFFALSE 21051
21045: PUSH
21046: LD_EXP 72
21050: AND
21051: IFFALSE 21234
21053: GO 21055
21055: DISABLE
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_OWVAR 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 2
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21234
// for i := 1 to 2 do
21091: LD_ADDR_VAR 0 1
21095: PUSH
21096: DOUBLE
21097: LD_INT 1
21099: DEC
21100: ST_TO_ADDR
21101: LD_INT 2
21103: PUSH
21104: FOR_TO
21105: IFFALSE 21232
// begin uc_side := your_side ;
21107: LD_ADDR_OWVAR 20
21111: PUSH
21112: LD_OWVAR 2
21116: ST_TO_ADDR
// uc_nation := nation_american ;
21117: LD_ADDR_OWVAR 21
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// vc_chassis := us_morphling ;
21125: LD_ADDR_OWVAR 37
21129: PUSH
21130: LD_INT 5
21132: ST_TO_ADDR
// vc_engine := engine_siberite ;
21133: LD_ADDR_OWVAR 39
21137: PUSH
21138: LD_INT 3
21140: ST_TO_ADDR
// vc_control := control_computer ;
21141: LD_ADDR_OWVAR 38
21145: PUSH
21146: LD_INT 3
21148: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21149: LD_ADDR_OWVAR 40
21153: PUSH
21154: LD_INT 10
21156: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21157: LD_VAR 0 2
21161: PUSH
21162: LD_INT 1
21164: ARRAY
21165: PPUSH
21166: CALL_OW 310
21170: NOT
21171: IFFALSE 21218
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21173: CALL_OW 45
21177: PPUSH
21178: LD_VAR 0 2
21182: PUSH
21183: LD_INT 1
21185: ARRAY
21186: PPUSH
21187: CALL_OW 250
21191: PPUSH
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 1
21199: ARRAY
21200: PPUSH
21201: CALL_OW 251
21205: PPUSH
21206: LD_INT 12
21208: PPUSH
21209: LD_INT 1
21211: PPUSH
21212: CALL_OW 50
21216: GO 21230
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21218: CALL_OW 45
21222: PPUSH
21223: LD_INT 1
21225: PPUSH
21226: CALL_OW 51
// end ;
21230: GO 21104
21232: POP
21233: POP
// end ;
21234: PPOPN 2
21236: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21237: LD_EXP 27
21241: IFFALSE 21249
21243: PUSH
21244: LD_EXP 73
21248: AND
21249: IFFALSE 21471
21251: GO 21253
21253: DISABLE
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21262: LD_ADDR_VAR 0 6
21266: PUSH
21267: LD_INT 22
21269: PUSH
21270: LD_OWVAR 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 3
21291: PUSH
21292: LD_INT 23
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 69
21315: ST_TO_ADDR
// if not tmp then
21316: LD_VAR 0 6
21320: NOT
21321: IFFALSE 21325
// exit ;
21323: GO 21471
// s1 := rand ( 1 , 4 ) ;
21325: LD_ADDR_VAR 0 2
21329: PUSH
21330: LD_INT 1
21332: PPUSH
21333: LD_INT 4
21335: PPUSH
21336: CALL_OW 12
21340: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21341: LD_ADDR_VAR 0 4
21345: PUSH
21346: LD_VAR 0 6
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PPUSH
21355: LD_VAR 0 2
21359: PPUSH
21360: CALL_OW 259
21364: ST_TO_ADDR
// if s1 = 1 then
21365: LD_VAR 0 2
21369: PUSH
21370: LD_INT 1
21372: EQUAL
21373: IFFALSE 21393
// s2 := rand ( 2 , 4 ) else
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_INT 2
21382: PPUSH
21383: LD_INT 4
21385: PPUSH
21386: CALL_OW 12
21390: ST_TO_ADDR
21391: GO 21401
// s2 := 1 ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_INT 1
21400: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21401: LD_ADDR_VAR 0 5
21405: PUSH
21406: LD_VAR 0 6
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 3
21419: PPUSH
21420: CALL_OW 259
21424: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21425: LD_VAR 0 6
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: LD_VAR 0 5
21443: PPUSH
21444: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21448: LD_VAR 0 6
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_VAR 0 4
21466: PPUSH
21467: CALL_OW 237
// end ;
21471: PPOPN 6
21473: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21474: LD_EXP 27
21478: IFFALSE 21486
21480: PUSH
21481: LD_EXP 74
21485: AND
21486: IFFALSE 21565
21488: GO 21490
21490: DISABLE
21491: LD_INT 0
21493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21494: LD_ADDR_VAR 0 1
21498: PUSH
21499: LD_INT 22
21501: PUSH
21502: LD_OWVAR 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 30
21513: PUSH
21514: LD_INT 3
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PPUSH
21525: CALL_OW 69
21529: ST_TO_ADDR
// if not tmp then
21530: LD_VAR 0 1
21534: NOT
21535: IFFALSE 21539
// exit ;
21537: GO 21565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21539: LD_VAR 0 1
21543: PUSH
21544: LD_INT 1
21546: PPUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 12
21556: ARRAY
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: CALL_OW 234
// end ;
21565: PPOPN 1
21567: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21568: LD_EXP 27
21572: IFFALSE 21580
21574: PUSH
21575: LD_EXP 75
21579: AND
21580: IFFALSE 21692
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 22
21596: PUSH
21597: LD_OWVAR 2
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_INT 27
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 30
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 30
21631: PUSH
21632: LD_INT 28
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 69
21653: ST_TO_ADDR
// if not tmp then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 21692
// for i in tmp do
21663: LD_ADDR_VAR 0 1
21667: PUSH
21668: LD_VAR 0 2
21672: PUSH
21673: FOR_IN
21674: IFFALSE 21690
// SetLives ( i , 1 ) ;
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: CALL_OW 234
21688: GO 21673
21690: POP
21691: POP
// end ;
21692: PPOPN 2
21694: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21695: LD_EXP 27
21699: IFFALSE 21707
21701: PUSH
21702: LD_EXP 76
21706: AND
21707: IFFALSE 21994
21709: GO 21711
21711: DISABLE
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
// begin i := rand ( 1 , 7 ) ;
21717: LD_ADDR_VAR 0 1
21721: PUSH
21722: LD_INT 1
21724: PPUSH
21725: LD_INT 7
21727: PPUSH
21728: CALL_OW 12
21732: ST_TO_ADDR
// case i of 1 :
21733: LD_VAR 0 1
21737: PUSH
21738: LD_INT 1
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21756
21746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21747: LD_STRING earthquake(getX(game), 0, 32)
21749: PPUSH
21750: CALL_OW 559
21754: GO 21994
21756: LD_INT 2
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21778
21764: POP
// begin ToLua ( displayStucuk(); ) ;
21765: LD_STRING displayStucuk();
21767: PPUSH
21768: CALL_OW 559
// ResetFog ;
21772: CALL_OW 335
// end ; 3 :
21776: GO 21994
21778: LD_INT 3
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21890
21786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_OWVAR 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 25
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PPUSH
21818: CALL_OW 69
21822: ST_TO_ADDR
// if not tmp then
21823: LD_VAR 0 2
21827: NOT
21828: IFFALSE 21832
// exit ;
21830: GO 21994
// un := tmp [ rand ( 1 , tmp ) ] ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_VAR 0 2
21841: PUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_VAR 0 2
21849: PPUSH
21850: CALL_OW 12
21854: ARRAY
21855: ST_TO_ADDR
// if Crawls ( un ) then
21856: LD_VAR 0 3
21860: PPUSH
21861: CALL_OW 318
21865: IFFALSE 21876
// ComWalk ( un ) ;
21867: LD_VAR 0 3
21871: PPUSH
21872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21876: LD_VAR 0 3
21880: PPUSH
21881: LD_INT 8
21883: PPUSH
21884: CALL_OW 336
// end ; 4 :
21888: GO 21994
21890: LD_INT 4
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 21972
21898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_OWVAR 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 30
21918: PUSH
21919: LD_INT 29
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PPUSH
21930: CALL_OW 69
21934: ST_TO_ADDR
// if not tmp then
21935: LD_VAR 0 2
21939: NOT
21940: IFFALSE 21944
// exit ;
21942: GO 21994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21944: LD_VAR 0 2
21948: PUSH
21949: LD_INT 1
21951: ARRAY
21952: PPUSH
21953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21957: LD_VAR 0 2
21961: PUSH
21962: LD_INT 1
21964: ARRAY
21965: PPUSH
21966: CALL_OW 65
// end ; 5 .. 7 :
21970: GO 21994
21972: LD_INT 5
21974: DOUBLE
21975: GREATEREQUAL
21976: IFFALSE 21984
21978: LD_INT 7
21980: DOUBLE
21981: LESSEQUAL
21982: IFTRUE 21986
21984: GO 21993
21986: POP
// StreamSibBomb ; end ;
21987: CALL 18175 0 0
21991: GO 21994
21993: POP
// end ;
21994: PPOPN 3
21996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21997: LD_EXP 27
22001: IFFALSE 22009
22003: PUSH
22004: LD_EXP 77
22008: AND
22009: IFFALSE 22165
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 81
22026: PUSH
22027: LD_OWVAR 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 21
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: ST_TO_ADDR
// if not tmp then
22073: LD_VAR 0 2
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22165
// p := 0 ;
22082: LD_ADDR_VAR 0 3
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22090: LD_INT 35
22092: PPUSH
22093: CALL_OW 67
// p := p + 1 ;
22097: LD_ADDR_VAR 0 3
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: LD_INT 1
22109: PLUS
22110: ST_TO_ADDR
// for i in tmp do
22111: LD_ADDR_VAR 0 1
22115: PUSH
22116: LD_VAR 0 2
22120: PUSH
22121: FOR_IN
22122: IFFALSE 22153
// if GetLives ( i ) < 1000 then
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 256
22133: PUSH
22134: LD_INT 1000
22136: LESS
22137: IFFALSE 22151
// SetLives ( i , 1000 ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_INT 1000
22146: PPUSH
22147: CALL_OW 234
22151: GO 22121
22153: POP
22154: POP
// until p > 20 ;
22155: LD_VAR 0 3
22159: PUSH
22160: LD_INT 20
22162: GREATER
22163: IFFALSE 22090
// end ;
22165: PPOPN 3
22167: END
// every 0 0$1 trigger StreamModeActive and sTime do
22168: LD_EXP 27
22172: IFFALSE 22180
22174: PUSH
22175: LD_EXP 78
22179: AND
22180: IFFALSE 22215
22182: GO 22184
22184: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22185: LD_INT 28
22187: PPUSH
22188: LD_OWVAR 2
22192: PPUSH
22193: LD_INT 2
22195: PPUSH
22196: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22200: LD_INT 30
22202: PPUSH
22203: LD_OWVAR 2
22207: PPUSH
22208: LD_INT 2
22210: PPUSH
22211: CALL_OW 322
// end ;
22215: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22216: LD_EXP 27
22220: IFFALSE 22228
22222: PUSH
22223: LD_EXP 79
22227: AND
22228: IFFALSE 22349
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
22236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22237: LD_ADDR_VAR 0 2
22241: PUSH
22242: LD_INT 22
22244: PUSH
22245: LD_OWVAR 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 21
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: LD_INT 23
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 69
22290: ST_TO_ADDR
// if not tmp then
22291: LD_VAR 0 2
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22349
// for i in tmp do
22300: LD_ADDR_VAR 0 1
22304: PUSH
22305: LD_VAR 0 2
22309: PUSH
22310: FOR_IN
22311: IFFALSE 22347
// begin if Crawls ( i ) then
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 318
22322: IFFALSE 22333
// ComWalk ( i ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 138
// SetClass ( i , 2 ) ;
22333: LD_VAR 0 1
22337: PPUSH
22338: LD_INT 2
22340: PPUSH
22341: CALL_OW 336
// end ;
22345: GO 22310
22347: POP
22348: POP
// end ;
22349: PPOPN 2
22351: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22352: LD_EXP 27
22356: IFFALSE 22364
22358: PUSH
22359: LD_EXP 80
22363: AND
22364: IFFALSE 22654
22366: GO 22368
22368: DISABLE
22369: LD_INT 0
22371: PPUSH
22372: PPUSH
22373: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22374: LD_OWVAR 2
22378: PPUSH
22379: LD_INT 9
22381: PPUSH
22382: LD_INT 1
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22392: LD_INT 9
22394: PPUSH
22395: LD_OWVAR 2
22399: PPUSH
22400: CALL_OW 343
// uc_side := 9 ;
22404: LD_ADDR_OWVAR 20
22408: PUSH
22409: LD_INT 9
22411: ST_TO_ADDR
// uc_nation := 2 ;
22412: LD_ADDR_OWVAR 21
22416: PUSH
22417: LD_INT 2
22419: ST_TO_ADDR
// hc_name := Dark Warrior ;
22420: LD_ADDR_OWVAR 26
22424: PUSH
22425: LD_STRING Dark Warrior
22427: ST_TO_ADDR
// hc_gallery :=  ;
22428: LD_ADDR_OWVAR 33
22432: PUSH
22433: LD_STRING 
22435: ST_TO_ADDR
// hc_noskilllimit := true ;
22436: LD_ADDR_OWVAR 76
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22444: LD_ADDR_OWVAR 31
22448: PUSH
22449: LD_INT 30
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 30
22457: PUSH
22458: LD_INT 30
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: ST_TO_ADDR
// un := CreateHuman ;
22467: LD_ADDR_VAR 0 3
22471: PUSH
22472: CALL_OW 44
22476: ST_TO_ADDR
// hc_noskilllimit := false ;
22477: LD_ADDR_OWVAR 76
22481: PUSH
22482: LD_INT 0
22484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 51
// ToLua ( playRanger() ) ;
22497: LD_STRING playRanger()
22499: PPUSH
22500: CALL_OW 559
// p := 0 ;
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22512: LD_INT 35
22514: PPUSH
22515: CALL_OW 67
// p := p + 1 ;
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_VAR 0 2
22528: PUSH
22529: LD_INT 1
22531: PLUS
22532: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22533: LD_VAR 0 3
22537: PPUSH
22538: CALL_OW 256
22542: PUSH
22543: LD_INT 1000
22545: LESS
22546: IFFALSE 22560
// SetLives ( un , 1000 ) ;
22548: LD_VAR 0 3
22552: PPUSH
22553: LD_INT 1000
22555: PPUSH
22556: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_INT 81
22567: PUSH
22568: LD_OWVAR 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 91
22579: PUSH
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 30
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 69
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: CALL_OW 74
22611: PPUSH
22612: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22616: LD_VAR 0 2
22620: PUSH
22621: LD_INT 80
22623: GREATER
22624: IFTRUE 22637
22626: PUSH
22627: LD_VAR 0 3
22631: PPUSH
22632: CALL_OW 301
22636: OR
22637: IFFALSE 22512
// if un then
22639: LD_VAR 0 3
22643: IFFALSE 22654
// RemoveUnit ( un ) ;
22645: LD_VAR 0 3
22649: PPUSH
22650: CALL_OW 64
// end ;
22654: PPOPN 3
22656: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22657: LD_EXP 81
22661: IFFALSE 22777
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
22669: PPUSH
22670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 81
22678: PUSH
22679: LD_OWVAR 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 21
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PPUSH
22702: CALL_OW 69
22706: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22707: LD_STRING playComputer()
22709: PPUSH
22710: CALL_OW 559
// if not tmp then
22714: LD_VAR 0 2
22718: NOT
22719: IFFALSE 22723
// exit ;
22721: GO 22777
// for i in tmp do
22723: LD_ADDR_VAR 0 1
22727: PUSH
22728: LD_VAR 0 2
22732: PUSH
22733: FOR_IN
22734: IFFALSE 22775
// for j := 1 to 4 do
22736: LD_ADDR_VAR 0 3
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_INT 4
22748: PUSH
22749: FOR_TO
22750: IFFALSE 22771
// SetSkill ( i , j , 10 ) ;
22752: LD_VAR 0 1
22756: PPUSH
22757: LD_VAR 0 3
22761: PPUSH
22762: LD_INT 10
22764: PPUSH
22765: CALL_OW 237
22769: GO 22749
22771: POP
22772: POP
22773: GO 22733
22775: POP
22776: POP
// end ;
22777: PPOPN 3
22779: END
// every 0 0$1 trigger s30 do var i , tmp ;
22780: LD_EXP 82
22784: IFFALSE 22853
22786: GO 22788
22788: DISABLE
22789: LD_INT 0
22791: PPUSH
22792: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_OWVAR 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: ST_TO_ADDR
// if not tmp then
22815: LD_VAR 0 2
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22853
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22851
// SetLives ( i , 300 ) ;
22837: LD_VAR 0 1
22841: PPUSH
22842: LD_INT 300
22844: PPUSH
22845: CALL_OW 234
22849: GO 22834
22851: POP
22852: POP
// end ;
22853: PPOPN 2
22855: END
// every 0 0$1 trigger s60 do var i , tmp ;
22856: LD_EXP 83
22860: IFFALSE 22929
22862: GO 22864
22864: DISABLE
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22869: LD_ADDR_VAR 0 2
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_OWVAR 2
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL_OW 69
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 2
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 22929
// for i in tmp do
22900: LD_ADDR_VAR 0 1
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: FOR_IN
22911: IFFALSE 22927
// SetLives ( i , 600 ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_INT 600
22920: PPUSH
22921: CALL_OW 234
22925: GO 22910
22927: POP
22928: POP
// end ;
22929: PPOPN 2
22931: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22932: LD_INT 0
22934: PPUSH
// case cmd of 301 :
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 301
22942: DOUBLE
22943: EQUAL
22944: IFTRUE 22948
22946: GO 22980
22948: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22949: LD_VAR 0 6
22953: PPUSH
22954: LD_VAR 0 7
22958: PPUSH
22959: LD_VAR 0 8
22963: PPUSH
22964: LD_VAR 0 4
22968: PPUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: CALL 24193 0 5
22978: GO 23101
22980: LD_INT 302
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23025
22988: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22989: LD_VAR 0 6
22993: PPUSH
22994: LD_VAR 0 7
22998: PPUSH
22999: LD_VAR 0 8
23003: PPUSH
23004: LD_VAR 0 9
23008: PPUSH
23009: LD_VAR 0 4
23013: PPUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: CALL 24284 0 6
23023: GO 23101
23025: LD_INT 303
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23070
23033: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23034: LD_VAR 0 6
23038: PPUSH
23039: LD_VAR 0 7
23043: PPUSH
23044: LD_VAR 0 8
23048: PPUSH
23049: LD_VAR 0 9
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL 23106 0 6
23068: GO 23101
23070: LD_INT 304
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23100
23078: POP
// hHackTeleport ( unit , x , y ) ; end ;
23079: LD_VAR 0 2
23083: PPUSH
23084: LD_VAR 0 4
23088: PPUSH
23089: LD_VAR 0 5
23093: PPUSH
23094: CALL 24877 0 3
23098: GO 23101
23100: POP
// end ;
23101: LD_VAR 0 12
23105: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23110: LD_VAR 0 1
23114: PUSH
23115: LD_INT 1
23117: LESS
23118: IFTRUE 23130
23120: PUSH
23121: LD_VAR 0 1
23125: PUSH
23126: LD_INT 3
23128: GREATER
23129: OR
23130: IFTRUE 23148
23132: PUSH
23133: LD_VAR 0 5
23137: PPUSH
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 428
23147: OR
23148: IFFALSE 23152
// exit ;
23150: GO 23880
// uc_side := your_side ;
23152: LD_ADDR_OWVAR 20
23156: PUSH
23157: LD_OWVAR 2
23161: ST_TO_ADDR
// uc_nation := nation ;
23162: LD_ADDR_OWVAR 21
23166: PUSH
23167: LD_VAR 0 1
23171: ST_TO_ADDR
// bc_level = 1 ;
23172: LD_ADDR_OWVAR 43
23176: PUSH
23177: LD_INT 1
23179: ST_TO_ADDR
// case btype of 1 :
23180: LD_VAR 0 2
23184: PUSH
23185: LD_INT 1
23187: DOUBLE
23188: EQUAL
23189: IFTRUE 23193
23191: GO 23204
23193: POP
// bc_type := b_depot ; 2 :
23194: LD_ADDR_OWVAR 42
23198: PUSH
23199: LD_INT 0
23201: ST_TO_ADDR
23202: GO 23824
23204: LD_INT 2
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23223
23212: POP
// bc_type := b_warehouse ; 3 :
23213: LD_ADDR_OWVAR 42
23217: PUSH
23218: LD_INT 1
23220: ST_TO_ADDR
23221: GO 23824
23223: LD_INT 3
23225: DOUBLE
23226: EQUAL
23227: IFTRUE 23231
23229: GO 23242
23231: POP
// bc_type := b_lab ; 4 .. 9 :
23232: LD_ADDR_OWVAR 42
23236: PUSH
23237: LD_INT 6
23239: ST_TO_ADDR
23240: GO 23824
23242: LD_INT 4
23244: DOUBLE
23245: GREATEREQUAL
23246: IFFALSE 23254
23248: LD_INT 9
23250: DOUBLE
23251: LESSEQUAL
23252: IFTRUE 23256
23254: GO 23316
23256: POP
// begin bc_type := b_lab_half ;
23257: LD_ADDR_OWVAR 42
23261: PUSH
23262: LD_INT 7
23264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23265: LD_ADDR_OWVAR 44
23269: PUSH
23270: LD_INT 10
23272: PUSH
23273: LD_INT 11
23275: PUSH
23276: LD_INT 12
23278: PUSH
23279: LD_INT 15
23281: PUSH
23282: LD_INT 14
23284: PUSH
23285: LD_INT 13
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: PUSH
23296: LD_VAR 0 2
23300: PUSH
23301: LD_INT 3
23303: MINUS
23304: ARRAY
23305: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23306: LD_ADDR_OWVAR 45
23310: PUSH
23311: LD_INT 9
23313: ST_TO_ADDR
// end ; 10 .. 13 :
23314: GO 23824
23316: LD_INT 10
23318: DOUBLE
23319: GREATEREQUAL
23320: IFFALSE 23328
23322: LD_INT 13
23324: DOUBLE
23325: LESSEQUAL
23326: IFTRUE 23330
23328: GO 23407
23330: POP
// begin bc_type := b_lab_full ;
23331: LD_ADDR_OWVAR 42
23335: PUSH
23336: LD_INT 8
23338: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23339: LD_ADDR_OWVAR 44
23343: PUSH
23344: LD_INT 10
23346: PUSH
23347: LD_INT 12
23349: PUSH
23350: LD_INT 14
23352: PUSH
23353: LD_INT 13
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: LD_INT 9
23369: MINUS
23370: ARRAY
23371: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23372: LD_ADDR_OWVAR 45
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 15
23382: PUSH
23383: LD_INT 12
23385: PUSH
23386: LD_INT 15
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_VAR 0 2
23399: PUSH
23400: LD_INT 9
23402: MINUS
23403: ARRAY
23404: ST_TO_ADDR
// end ; 14 :
23405: GO 23824
23407: LD_INT 14
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_workshop ; 15 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 2
23423: ST_TO_ADDR
23424: GO 23824
23426: LD_INT 15
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_factory ; 16 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 3
23442: ST_TO_ADDR
23443: GO 23824
23445: LD_INT 16
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_ext_gun ; 17 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 17
23461: ST_TO_ADDR
23462: GO 23824
23464: LD_INT 17
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23500
23472: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 23
23483: PUSH
23484: LD_INT 19
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: PUSH
23492: LD_VAR 0 1
23496: ARRAY
23497: ST_TO_ADDR
23498: GO 23824
23500: LD_INT 18
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23519
23508: POP
// bc_type := b_ext_radar ; 19 :
23509: LD_ADDR_OWVAR 42
23513: PUSH
23514: LD_INT 20
23516: ST_TO_ADDR
23517: GO 23824
23519: LD_INT 19
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23538
23527: POP
// bc_type := b_ext_radio ; 20 :
23528: LD_ADDR_OWVAR 42
23532: PUSH
23533: LD_INT 22
23535: ST_TO_ADDR
23536: GO 23824
23538: LD_INT 20
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23557
23546: POP
// bc_type := b_ext_siberium ; 21 :
23547: LD_ADDR_OWVAR 42
23551: PUSH
23552: LD_INT 21
23554: ST_TO_ADDR
23555: GO 23824
23557: LD_INT 21
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// bc_type := b_ext_computer ; 22 :
23566: LD_ADDR_OWVAR 42
23570: PUSH
23571: LD_INT 24
23573: ST_TO_ADDR
23574: GO 23824
23576: LD_INT 22
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23595
23584: POP
// bc_type := b_ext_track ; 23 :
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 16
23592: ST_TO_ADDR
23593: GO 23824
23595: LD_INT 23
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23614
23603: POP
// bc_type := b_ext_laser ; 24 :
23604: LD_ADDR_OWVAR 42
23608: PUSH
23609: LD_INT 25
23611: ST_TO_ADDR
23612: GO 23824
23614: LD_INT 24
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23633
23622: POP
// bc_type := b_control_tower ; 25 :
23623: LD_ADDR_OWVAR 42
23627: PUSH
23628: LD_INT 36
23630: ST_TO_ADDR
23631: GO 23824
23633: LD_INT 25
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23652
23641: POP
// bc_type := b_breastwork ; 26 :
23642: LD_ADDR_OWVAR 42
23646: PUSH
23647: LD_INT 31
23649: ST_TO_ADDR
23650: GO 23824
23652: LD_INT 26
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23671
23660: POP
// bc_type := b_bunker ; 27 :
23661: LD_ADDR_OWVAR 42
23665: PUSH
23666: LD_INT 32
23668: ST_TO_ADDR
23669: GO 23824
23671: LD_INT 27
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23690
23679: POP
// bc_type := b_turret ; 28 :
23680: LD_ADDR_OWVAR 42
23684: PUSH
23685: LD_INT 33
23687: ST_TO_ADDR
23688: GO 23824
23690: LD_INT 28
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23709
23698: POP
// bc_type := b_armoury ; 29 :
23699: LD_ADDR_OWVAR 42
23703: PUSH
23704: LD_INT 4
23706: ST_TO_ADDR
23707: GO 23824
23709: LD_INT 29
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23728
23717: POP
// bc_type := b_barracks ; 30 :
23718: LD_ADDR_OWVAR 42
23722: PUSH
23723: LD_INT 5
23725: ST_TO_ADDR
23726: GO 23824
23728: LD_INT 30
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23747
23736: POP
// bc_type := b_solar_power ; 31 :
23737: LD_ADDR_OWVAR 42
23741: PUSH
23742: LD_INT 27
23744: ST_TO_ADDR
23745: GO 23824
23747: LD_INT 31
23749: DOUBLE
23750: EQUAL
23751: IFTRUE 23755
23753: GO 23766
23755: POP
// bc_type := b_oil_power ; 32 :
23756: LD_ADDR_OWVAR 42
23760: PUSH
23761: LD_INT 26
23763: ST_TO_ADDR
23764: GO 23824
23766: LD_INT 32
23768: DOUBLE
23769: EQUAL
23770: IFTRUE 23774
23772: GO 23785
23774: POP
// bc_type := b_siberite_power ; 33 :
23775: LD_ADDR_OWVAR 42
23779: PUSH
23780: LD_INT 28
23782: ST_TO_ADDR
23783: GO 23824
23785: LD_INT 33
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 23804
23793: POP
// bc_type := b_oil_mine ; 34 :
23794: LD_ADDR_OWVAR 42
23798: PUSH
23799: LD_INT 29
23801: ST_TO_ADDR
23802: GO 23824
23804: LD_INT 34
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23823
23812: POP
// bc_type := b_siberite_mine ; end ;
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 30
23820: ST_TO_ADDR
23821: GO 23824
23823: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23824: LD_ADDR_VAR 0 8
23828: PUSH
23829: LD_VAR 0 5
23833: PPUSH
23834: LD_VAR 0 6
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: CALL_OW 47
23848: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23849: LD_OWVAR 42
23853: PUSH
23854: LD_INT 32
23856: PUSH
23857: LD_INT 33
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: IN
23864: IFFALSE 23880
// PlaceWeaponTurret ( b , weapon ) ;
23866: LD_VAR 0 8
23870: PPUSH
23871: LD_VAR 0 4
23875: PPUSH
23876: CALL_OW 431
// end ;
23880: LD_VAR 0 7
23884: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23885: LD_INT 0
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23891: LD_ADDR_VAR 0 4
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 30
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 4
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24013
// for i in tmp do
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: LD_VAR 0 4
23963: PUSH
23964: FOR_IN
23965: IFFALSE 24011
// for j = 1 to 3 do
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: DOUBLE
23973: LD_INT 1
23975: DEC
23976: ST_TO_ADDR
23977: LD_INT 3
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24007
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23983: LD_VAR 0 2
23987: PPUSH
23988: CALL_OW 274
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: LD_INT 99999
24000: PPUSH
24001: CALL_OW 277
24005: GO 23980
24007: POP
24008: POP
24009: GO 23964
24011: POP
24012: POP
// end ;
24013: LD_VAR 0 1
24017: RET
// export function hHackSetLevel10 ; var i , j ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_INT 21
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PUSH
24043: FOR_IN
24044: IFFALSE 24096
// if IsSelected ( i ) then
24046: LD_VAR 0 2
24050: PPUSH
24051: CALL_OW 306
24055: IFFALSE 24094
// begin for j := 1 to 4 do
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 4
24069: PUSH
24070: FOR_TO
24071: IFFALSE 24092
// SetSkill ( i , j , 10 ) ;
24073: LD_VAR 0 2
24077: PPUSH
24078: LD_VAR 0 3
24082: PPUSH
24083: LD_INT 10
24085: PPUSH
24086: CALL_OW 237
24090: GO 24070
24092: POP
24093: POP
// end ;
24094: GO 24043
24096: POP
24097: POP
// end ;
24098: LD_VAR 0 1
24102: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24103: LD_INT 0
24105: PPUSH
24106: PPUSH
24107: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 22
24115: PUSH
24116: LD_OWVAR 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24186
// begin for j := 1 to 4 do
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: DOUBLE
24153: LD_INT 1
24155: DEC
24156: ST_TO_ADDR
24157: LD_INT 4
24159: PUSH
24160: FOR_TO
24161: IFFALSE 24182
// SetSkill ( i , j , 10 ) ;
24163: LD_VAR 0 2
24167: PPUSH
24168: LD_VAR 0 3
24172: PPUSH
24173: LD_INT 10
24175: PPUSH
24176: CALL_OW 237
24180: GO 24160
24182: POP
24183: POP
// end ;
24184: GO 24144
24186: POP
24187: POP
// end ;
24188: LD_VAR 0 1
24192: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24193: LD_INT 0
24195: PPUSH
// uc_side := your_side ;
24196: LD_ADDR_OWVAR 20
24200: PUSH
24201: LD_OWVAR 2
24205: ST_TO_ADDR
// uc_nation := nation ;
24206: LD_ADDR_OWVAR 21
24210: PUSH
24211: LD_VAR 0 1
24215: ST_TO_ADDR
// InitHc ;
24216: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24220: LD_INT 0
24222: PPUSH
24223: LD_VAR 0 2
24227: PPUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24237: LD_VAR 0 4
24241: PPUSH
24242: LD_VAR 0 5
24246: PPUSH
24247: CALL_OW 428
24251: PUSH
24252: LD_INT 0
24254: EQUAL
24255: IFFALSE 24279
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24257: CALL_OW 44
24261: PPUSH
24262: LD_VAR 0 4
24266: PPUSH
24267: LD_VAR 0 5
24271: PPUSH
24272: LD_INT 1
24274: PPUSH
24275: CALL_OW 48
// end ;
24279: LD_VAR 0 6
24283: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
// uc_side := your_side ;
24288: LD_ADDR_OWVAR 20
24292: PUSH
24293: LD_OWVAR 2
24297: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24298: LD_VAR 0 1
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: LD_INT 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: IN
24325: IFFALSE 24337
// uc_nation := nation_american else
24327: LD_ADDR_OWVAR 21
24331: PUSH
24332: LD_INT 1
24334: ST_TO_ADDR
24335: GO 24380
// if chassis in [ 11 , 12 , 13 , 14 ] then
24337: LD_VAR 0 1
24341: PUSH
24342: LD_INT 11
24344: PUSH
24345: LD_INT 12
24347: PUSH
24348: LD_INT 13
24350: PUSH
24351: LD_INT 14
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: IN
24360: IFFALSE 24372
// uc_nation := nation_arabian else
24362: LD_ADDR_OWVAR 21
24366: PUSH
24367: LD_INT 2
24369: ST_TO_ADDR
24370: GO 24380
// uc_nation := nation_russian ;
24372: LD_ADDR_OWVAR 21
24376: PUSH
24377: LD_INT 3
24379: ST_TO_ADDR
// vc_chassis := chassis ;
24380: LD_ADDR_OWVAR 37
24384: PUSH
24385: LD_VAR 0 1
24389: ST_TO_ADDR
// vc_engine := engine ;
24390: LD_ADDR_OWVAR 39
24394: PUSH
24395: LD_VAR 0 2
24399: ST_TO_ADDR
// vc_control := control ;
24400: LD_ADDR_OWVAR 38
24404: PUSH
24405: LD_VAR 0 3
24409: ST_TO_ADDR
// vc_weapon := weapon ;
24410: LD_ADDR_OWVAR 40
24414: PUSH
24415: LD_VAR 0 4
24419: ST_TO_ADDR
// un := CreateVehicle ;
24420: LD_ADDR_VAR 0 8
24424: PUSH
24425: CALL_OW 45
24429: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24430: LD_VAR 0 8
24434: PPUSH
24435: LD_INT 0
24437: PPUSH
24438: LD_INT 5
24440: PPUSH
24441: CALL_OW 12
24445: PPUSH
24446: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24450: LD_VAR 0 8
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: LD_VAR 0 6
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 48
// end ;
24472: LD_VAR 0 7
24476: RET
// export hInvincible ; every 1 do
24477: GO 24479
24479: DISABLE
// hInvincible := [ ] ;
24480: LD_ADDR_EXP 84
24484: PUSH
24485: EMPTY
24486: ST_TO_ADDR
24487: END
// every 10 do var i ;
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
// begin enable ;
24494: ENABLE
// if not hInvincible then
24495: LD_EXP 84
24499: NOT
24500: IFFALSE 24504
// exit ;
24502: GO 24548
// for i in hInvincible do
24504: LD_ADDR_VAR 0 1
24508: PUSH
24509: LD_EXP 84
24513: PUSH
24514: FOR_IN
24515: IFFALSE 24546
// if GetLives ( i ) < 1000 then
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 256
24526: PUSH
24527: LD_INT 1000
24529: LESS
24530: IFFALSE 24544
// SetLives ( i , 1000 ) ;
24532: LD_VAR 0 1
24536: PPUSH
24537: LD_INT 1000
24539: PPUSH
24540: CALL_OW 234
24544: GO 24514
24546: POP
24547: POP
// end ;
24548: PPOPN 1
24550: END
// export function hHackInvincible ; var i ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 21
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: PUSH
24593: FOR_IN
24594: IFFALSE 24655
// if IsSelected ( i ) then
24596: LD_VAR 0 2
24600: PPUSH
24601: CALL_OW 306
24605: IFFALSE 24653
// begin if i in hInvincible then
24607: LD_VAR 0 2
24611: PUSH
24612: LD_EXP 84
24616: IN
24617: IFFALSE 24637
// hInvincible := hInvincible diff i else
24619: LD_ADDR_EXP 84
24623: PUSH
24624: LD_EXP 84
24628: PUSH
24629: LD_VAR 0 2
24633: DIFF
24634: ST_TO_ADDR
24635: GO 24653
// hInvincible := hInvincible union i ;
24637: LD_ADDR_EXP 84
24641: PUSH
24642: LD_EXP 84
24646: PUSH
24647: LD_VAR 0 2
24651: UNION
24652: ST_TO_ADDR
// end ;
24653: GO 24593
24655: POP
24656: POP
// end ;
24657: LD_VAR 0 1
24661: RET
// export function hHackInvisible ; var i , j ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
24666: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_INT 21
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24712
// if IsSelected ( i ) then
24690: LD_VAR 0 2
24694: PPUSH
24695: CALL_OW 306
24699: IFFALSE 24710
// ComForceInvisible ( i ) ;
24701: LD_VAR 0 2
24705: PPUSH
24706: CALL_OW 496
24710: GO 24687
24712: POP
24713: POP
// end ;
24714: LD_VAR 0 1
24718: RET
// export function hHackChangeYourSide ; begin
24719: LD_INT 0
24721: PPUSH
// if your_side = 8 then
24722: LD_OWVAR 2
24726: PUSH
24727: LD_INT 8
24729: EQUAL
24730: IFFALSE 24742
// your_side := 0 else
24732: LD_ADDR_OWVAR 2
24736: PUSH
24737: LD_INT 0
24739: ST_TO_ADDR
24740: GO 24756
// your_side := your_side + 1 ;
24742: LD_ADDR_OWVAR 2
24746: PUSH
24747: LD_OWVAR 2
24751: PUSH
24752: LD_INT 1
24754: PLUS
24755: ST_TO_ADDR
// end ;
24756: LD_VAR 0 1
24760: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24761: LD_INT 0
24763: PPUSH
24764: PPUSH
24765: PPUSH
// for i in all_units do
24766: LD_ADDR_VAR 0 2
24770: PUSH
24771: LD_OWVAR 3
24775: PUSH
24776: FOR_IN
24777: IFFALSE 24855
// if IsSelected ( i ) then
24779: LD_VAR 0 2
24783: PPUSH
24784: CALL_OW 306
24788: IFFALSE 24853
// begin j := GetSide ( i ) ;
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_VAR 0 2
24799: PPUSH
24800: CALL_OW 255
24804: ST_TO_ADDR
// if j = 8 then
24805: LD_VAR 0 3
24809: PUSH
24810: LD_INT 8
24812: EQUAL
24813: IFFALSE 24825
// j := 0 else
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: LD_INT 0
24822: ST_TO_ADDR
24823: GO 24839
// j := j + 1 ;
24825: LD_ADDR_VAR 0 3
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 1
24837: PLUS
24838: ST_TO_ADDR
// SetSide ( i , j ) ;
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_VAR 0 3
24848: PPUSH
24849: CALL_OW 235
// end ;
24853: GO 24776
24855: POP
24856: POP
// end ;
24857: LD_VAR 0 1
24861: RET
// export function hHackFog ; begin
24862: LD_INT 0
24864: PPUSH
// FogOff ( true ) ;
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 344
// end ;
24872: LD_VAR 0 1
24876: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24877: LD_INT 0
24879: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_VAR 0 2
24889: PPUSH
24890: LD_VAR 0 3
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: LD_INT 1
24900: PPUSH
24901: CALL_OW 483
// CenterOnXY ( x , y ) ;
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_VAR 0 3
24914: PPUSH
24915: CALL_OW 84
// end ;
24919: LD_VAR 0 4
24923: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24924: LD_INT 0
24926: PPUSH
24927: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24928: LD_VAR 0 1
24932: NOT
24933: IFTRUE 24952
24935: PUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: LD_VAR 0 3
24945: PPUSH
24946: CALL_OW 488
24950: NOT
24951: OR
24952: IFTRUE 24987
24954: PUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 266
24964: PUSH
24965: LD_INT 3
24967: NONEQUAL
24968: IFFALSE 24986
24970: PUSH
24971: LD_VAR 0 1
24975: PPUSH
24976: CALL_OW 247
24980: PUSH
24981: LD_INT 1
24983: EQUAL
24984: NOT
24985: AND
24986: OR
24987: IFFALSE 24991
// exit ;
24989: GO 25273
// if GetType ( factory ) = unit_human then
24991: LD_VAR 0 1
24995: PPUSH
24996: CALL_OW 247
25000: PUSH
25001: LD_INT 1
25003: EQUAL
25004: IFFALSE 25021
// factory := IsInUnit ( factory ) ;
25006: LD_ADDR_VAR 0 1
25010: PUSH
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 310
25020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 266
25030: PUSH
25031: LD_INT 3
25033: NONEQUAL
25034: IFFALSE 25038
// exit ;
25036: GO 25273
// for i := 1 to Count ( factoryWaypoints ) do
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: DOUBLE
25044: LD_INT 1
25046: DEC
25047: ST_TO_ADDR
25048: LD_EXP 85
25052: PPUSH
25053: CALL 34005 0 1
25057: PUSH
25058: FOR_TO
25059: IFFALSE 25221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: CALL_OW 428
25075: PUSH
25076: LD_EXP 85
25080: PUSH
25081: LD_VAR 0 5
25085: ARRAY
25086: PUSH
25087: LD_INT 2
25089: ARRAY
25090: EQUAL
25091: IFFALSE 25123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25093: LD_ADDR_EXP 85
25097: PUSH
25098: LD_EXP 85
25102: PPUSH
25103: LD_VAR 0 5
25107: PPUSH
25108: CALL_OW 3
25112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25113: CALL 25278 0 0
// exit ;
25117: POP
25118: POP
25119: GO 25273
// end else
25121: GO 25219
// if factory = factoryWaypoints [ i ] [ 2 ] then
25123: LD_VAR 0 1
25127: PUSH
25128: LD_EXP 85
25132: PUSH
25133: LD_VAR 0 5
25137: ARRAY
25138: PUSH
25139: LD_INT 2
25141: ARRAY
25142: EQUAL
25143: IFFALSE 25219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25145: LD_ADDR_EXP 85
25149: PUSH
25150: LD_EXP 85
25154: PPUSH
25155: LD_VAR 0 5
25159: PPUSH
25160: CALL_OW 3
25164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25165: LD_ADDR_EXP 85
25169: PUSH
25170: LD_EXP 85
25174: PPUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL_OW 255
25184: PUSH
25185: LD_VAR 0 1
25189: PUSH
25190: LD_VAR 0 2
25194: PUSH
25195: LD_VAR 0 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL 69937 0 2
25210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25211: CALL 25278 0 0
// exit ;
25215: POP
25216: POP
25217: GO 25273
// end ; end ;
25219: GO 25058
25221: POP
25222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25223: LD_ADDR_EXP 85
25227: PUSH
25228: LD_EXP 85
25232: PPUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 255
25242: PUSH
25243: LD_VAR 0 1
25247: PUSH
25248: LD_VAR 0 2
25252: PUSH
25253: LD_VAR 0 3
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL 69937 0 2
25268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25269: CALL 25278 0 0
// end ;
25273: LD_VAR 0 4
25277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25283: LD_STRING resetFactoryWaypoint();
25285: PPUSH
25286: CALL_OW 559
// if factoryWaypoints then
25290: LD_EXP 85
25294: IFFALSE 25415
// begin list := factoryWaypoints ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_EXP 85
25305: ST_TO_ADDR
// for i := 1 to list do
25306: LD_ADDR_VAR 0 2
25310: PUSH
25311: DOUBLE
25312: LD_INT 1
25314: DEC
25315: ST_TO_ADDR
25316: LD_VAR 0 3
25320: PUSH
25321: FOR_TO
25322: IFFALSE 25413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25324: LD_STRING setFactoryWaypointXY(
25326: PUSH
25327: LD_VAR 0 3
25331: PUSH
25332: LD_VAR 0 2
25336: ARRAY
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: STR
25342: PUSH
25343: LD_STRING ,
25345: STR
25346: PUSH
25347: LD_VAR 0 3
25351: PUSH
25352: LD_VAR 0 2
25356: ARRAY
25357: PUSH
25358: LD_INT 2
25360: ARRAY
25361: STR
25362: PUSH
25363: LD_STRING ,
25365: STR
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 2
25376: ARRAY
25377: PUSH
25378: LD_INT 3
25380: ARRAY
25381: STR
25382: PUSH
25383: LD_STRING ,
25385: STR
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: LD_VAR 0 2
25396: ARRAY
25397: PUSH
25398: LD_INT 4
25400: ARRAY
25401: STR
25402: PUSH
25403: LD_STRING )
25405: STR
25406: PPUSH
25407: CALL_OW 559
25411: GO 25321
25413: POP
25414: POP
// end ; end ;
25415: LD_VAR 0 1
25419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25420: LD_INT 0
25422: PPUSH
// if HexInfo ( x , y ) = warehouse then
25423: LD_VAR 0 2
25427: PPUSH
25428: LD_VAR 0 3
25432: PPUSH
25433: CALL_OW 428
25437: PUSH
25438: LD_VAR 0 1
25442: EQUAL
25443: IFFALSE 25470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25445: LD_ADDR_EXP 87
25449: PUSH
25450: LD_EXP 87
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: LD_INT 0
25462: PPUSH
25463: CALL_OW 1
25467: ST_TO_ADDR
25468: GO 25521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25470: LD_ADDR_EXP 87
25474: PUSH
25475: LD_EXP 87
25479: PPUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 255
25494: PUSH
25495: LD_VAR 0 1
25499: PUSH
25500: LD_VAR 0 2
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 1
25520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25521: CALL 25530 0 0
// end ;
25525: LD_VAR 0 4
25529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25530: LD_INT 0
25532: PPUSH
25533: PPUSH
25534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25535: LD_STRING resetWarehouseGatheringPoints();
25537: PPUSH
25538: CALL_OW 559
// if warehouseGatheringPoints then
25542: LD_EXP 87
25546: IFFALSE 25672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_EXP 87
25557: PPUSH
25558: CALL 73871 0 1
25562: ST_TO_ADDR
// for i := 1 to list do
25563: LD_ADDR_VAR 0 2
25567: PUSH
25568: DOUBLE
25569: LD_INT 1
25571: DEC
25572: ST_TO_ADDR
25573: LD_VAR 0 3
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25581: LD_STRING setWarehouseGatheringPointXY(
25583: PUSH
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 2
25593: ARRAY
25594: PUSH
25595: LD_INT 1
25597: ARRAY
25598: STR
25599: PUSH
25600: LD_STRING ,
25602: STR
25603: PUSH
25604: LD_VAR 0 3
25608: PUSH
25609: LD_VAR 0 2
25613: ARRAY
25614: PUSH
25615: LD_INT 2
25617: ARRAY
25618: STR
25619: PUSH
25620: LD_STRING ,
25622: STR
25623: PUSH
25624: LD_VAR 0 3
25628: PUSH
25629: LD_VAR 0 2
25633: ARRAY
25634: PUSH
25635: LD_INT 3
25637: ARRAY
25638: STR
25639: PUSH
25640: LD_STRING ,
25642: STR
25643: PUSH
25644: LD_VAR 0 3
25648: PUSH
25649: LD_VAR 0 2
25653: ARRAY
25654: PUSH
25655: LD_INT 4
25657: ARRAY
25658: STR
25659: PUSH
25660: LD_STRING )
25662: STR
25663: PPUSH
25664: CALL_OW 559
25668: GO 25578
25670: POP
25671: POP
// end ; end ;
25672: LD_VAR 0 1
25676: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25677: LD_EXP 87
25681: IFFALSE 26376
25683: GO 25685
25685: DISABLE
25686: LD_INT 0
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
// begin enable ;
25697: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_EXP 87
25707: PPUSH
25708: CALL 73871 0 1
25712: ST_TO_ADDR
// if not list then
25713: LD_VAR 0 3
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 26376
// for i := 1 to list do
25722: LD_ADDR_VAR 0 1
25726: PUSH
25727: DOUBLE
25728: LD_INT 1
25730: DEC
25731: ST_TO_ADDR
25732: LD_VAR 0 3
25736: PUSH
25737: FOR_TO
25738: IFFALSE 26374
// begin depot := list [ i ] [ 2 ] ;
25740: LD_ADDR_VAR 0 8
25744: PUSH
25745: LD_VAR 0 3
25749: PUSH
25750: LD_VAR 0 1
25754: ARRAY
25755: PUSH
25756: LD_INT 2
25758: ARRAY
25759: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25760: LD_ADDR_VAR 0 5
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 1
25774: ARRAY
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25780: LD_VAR 0 8
25784: PPUSH
25785: CALL_OW 301
25789: IFTRUE 25808
25791: PUSH
25792: LD_VAR 0 5
25796: PUSH
25797: LD_VAR 0 8
25801: PPUSH
25802: CALL_OW 255
25806: NONEQUAL
25807: OR
25808: IFFALSE 25837
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25810: LD_ADDR_EXP 87
25814: PUSH
25815: LD_EXP 87
25819: PPUSH
25820: LD_VAR 0 8
25824: PPUSH
25825: LD_INT 0
25827: PPUSH
25828: CALL_OW 1
25832: ST_TO_ADDR
// exit ;
25833: POP
25834: POP
25835: GO 26376
// end ; x := list [ i ] [ 3 ] ;
25837: LD_ADDR_VAR 0 6
25841: PUSH
25842: LD_VAR 0 3
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: PUSH
25853: LD_INT 3
25855: ARRAY
25856: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25857: LD_ADDR_VAR 0 7
25861: PUSH
25862: LD_VAR 0 3
25866: PUSH
25867: LD_VAR 0 1
25871: ARRAY
25872: PUSH
25873: LD_INT 4
25875: ARRAY
25876: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25877: LD_ADDR_VAR 0 9
25881: PUSH
25882: LD_VAR 0 6
25886: PPUSH
25887: LD_VAR 0 7
25891: PPUSH
25892: LD_INT 16
25894: PPUSH
25895: CALL 72445 0 3
25899: ST_TO_ADDR
// if not cratesNearbyPoint then
25900: LD_VAR 0 9
25904: NOT
25905: IFFALSE 25911
// exit ;
25907: POP
25908: POP
25909: GO 26376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25911: LD_ADDR_VAR 0 4
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_VAR 0 5
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: LD_INT 60
25933: PUSH
25934: EMPTY
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 91
25943: PUSH
25944: LD_VAR 0 8
25948: PUSH
25949: LD_INT 6
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 25
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 25
25972: PUSH
25973: LD_INT 16
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: PUSH
25996: LD_VAR 0 8
26000: PPUSH
26001: CALL_OW 313
26005: PPUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 60
26011: PUSH
26012: EMPTY
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 25
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 25
26034: PUSH
26035: LD_INT 16
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PPUSH
26051: CALL_OW 72
26055: UNION
26056: ST_TO_ADDR
// if tmp then
26057: LD_VAR 0 4
26061: IFFALSE 26141
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_VAR 0 4
26072: PPUSH
26073: LD_INT 3
26075: PPUSH
26076: CALL 70252 0 2
26080: ST_TO_ADDR
// for j in tmp do
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: LD_VAR 0 4
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26135
// begin if IsInUnit ( j ) then
26094: LD_VAR 0 2
26098: PPUSH
26099: CALL_OW 310
26103: IFFALSE 26114
// ComExit ( j ) ;
26105: LD_VAR 0 2
26109: PPUSH
26110: CALL 70335 0 1
// AddComCollect ( j , x , y ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 6
26123: PPUSH
26124: LD_VAR 0 7
26128: PPUSH
26129: CALL_OW 177
// end ;
26133: GO 26091
26135: POP
26136: POP
// exit ;
26137: POP
26138: POP
26139: GO 26376
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26141: LD_ADDR_VAR 0 4
26145: PUSH
26146: LD_INT 22
26148: PUSH
26149: LD_VAR 0 5
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 91
26160: PUSH
26161: LD_VAR 0 8
26165: PUSH
26166: LD_INT 8
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 34
26179: PUSH
26180: LD_INT 12
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: LD_INT 51
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 34
26199: PUSH
26200: LD_INT 32
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 89
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: PPUSH
26229: CALL_OW 69
26233: ST_TO_ADDR
// if tmp then
26234: LD_VAR 0 4
26238: IFFALSE 26372
// begin for j in tmp do
26240: LD_ADDR_VAR 0 2
26244: PUSH
26245: LD_VAR 0 4
26249: PUSH
26250: FOR_IN
26251: IFFALSE 26370
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26253: LD_VAR 0 2
26257: PPUSH
26258: CALL_OW 262
26262: PUSH
26263: LD_INT 3
26265: EQUAL
26266: IFTRUE 26283
26268: PUSH
26269: LD_VAR 0 2
26273: PPUSH
26274: CALL_OW 261
26278: PUSH
26279: LD_INT 20
26281: GREATER
26282: OR
26283: IFFALSE 26297
26285: PUSH
26286: LD_VAR 0 2
26290: PPUSH
26291: CALL_OW 314
26295: NOT
26296: AND
26297: IFFALSE 26327
26299: PUSH
26300: LD_VAR 0 2
26304: PPUSH
26305: CALL_OW 263
26309: PUSH
26310: LD_INT 1
26312: NONEQUAL
26313: IFTRUE 26326
26315: PUSH
26316: LD_VAR 0 2
26320: PPUSH
26321: CALL_OW 311
26325: OR
26326: AND
26327: IFFALSE 26368
// begin ComCollect ( j , x , y ) ;
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 6
26338: PPUSH
26339: LD_VAR 0 7
26343: PPUSH
26344: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26348: LD_VAR 0 2
26352: PPUSH
26353: LD_VAR 0 8
26357: PPUSH
26358: CALL_OW 172
// exit ;
26362: POP
26363: POP
26364: POP
26365: POP
26366: GO 26376
// end ;
26368: GO 26250
26370: POP
26371: POP
// end ; end ;
26372: GO 25737
26374: POP
26375: POP
// end ; end_of_file end_of_file
26376: PPOPN 9
26378: END
// export function SOS_UnitDestroyed ( un ) ; begin
26379: LD_INT 0
26381: PPUSH
// ComRadiation ( un ) ;
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL 27468 0 1
// end ;
26391: LD_VAR 0 2
26395: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26396: LD_INT 0
26398: PPUSH
// ComRadiation ( un ) ;
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL 27468 0 1
// end ;
26408: LD_VAR 0 2
26412: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26413: LD_INT 0
26415: PPUSH
// end ;
26416: LD_VAR 0 4
26420: RET
// export function SOS_Command ( cmd ) ; begin
26421: LD_INT 0
26423: PPUSH
// end ;
26424: LD_VAR 0 2
26428: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26429: LD_INT 0
26431: PPUSH
// end ;
26432: LD_VAR 0 6
26436: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
// if not vehicle or not factory then
26443: LD_VAR 0 1
26447: NOT
26448: IFTRUE 26457
26450: PUSH
26451: LD_VAR 0 2
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 27043
// if not factoryWaypoints then
26461: LD_EXP 85
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 27043
// for i := 1 to Count ( factoryWaypoints ) do
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: DOUBLE
26476: LD_INT 1
26478: DEC
26479: ST_TO_ADDR
26480: LD_EXP 85
26484: PPUSH
26485: CALL 34005 0 1
26489: PUSH
26490: FOR_TO
26491: IFFALSE 27041
// if factoryWaypoints [ i ] [ 2 ] = factory then
26493: LD_EXP 85
26497: PUSH
26498: LD_VAR 0 4
26502: ARRAY
26503: PUSH
26504: LD_INT 2
26506: ARRAY
26507: PUSH
26508: LD_VAR 0 2
26512: EQUAL
26513: IFFALSE 27039
// begin if GetControl ( vehicle ) = control_manual then
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 263
26524: PUSH
26525: LD_INT 1
26527: EQUAL
26528: IFFALSE 26892
// begin driver := IsDrivenBy ( vehicle ) ;
26530: LD_ADDR_VAR 0 5
26534: PUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 311
26544: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
26545: LD_VAR 0 5
26549: PUSH
26550: LD_EXP 86
26554: IN
26555: IFTRUE 26569
26557: PUSH
26558: LD_VAR 0 1
26562: PUSH
26563: LD_EXP 86
26567: IN
26568: OR
26569: IFFALSE 26575
// exit ;
26571: POP
26572: POP
26573: GO 27043
// if not HasTask ( driver ) then
26575: LD_VAR 0 5
26579: PPUSH
26580: CALL_OW 314
26584: NOT
26585: IFFALSE 26890
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
26587: LD_ADDR_EXP 86
26591: PUSH
26592: LD_EXP 86
26596: PPUSH
26597: LD_VAR 0 5
26601: PPUSH
26602: CALL 69937 0 2
26606: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
26607: LD_ADDR_EXP 86
26611: PUSH
26612: LD_EXP 86
26616: PPUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL 69937 0 2
26626: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26627: LD_ADDR_VAR 0 6
26631: PUSH
26632: LD_EXP 85
26636: PUSH
26637: LD_VAR 0 4
26641: ARRAY
26642: PUSH
26643: LD_INT 3
26645: ARRAY
26646: PPUSH
26647: LD_EXP 85
26651: PUSH
26652: LD_VAR 0 4
26656: ARRAY
26657: PUSH
26658: LD_INT 4
26660: ARRAY
26661: PPUSH
26662: CALL_OW 428
26666: ST_TO_ADDR
// if hex then
26667: LD_VAR 0 6
26671: IFFALSE 26689
// ComMoveUnit ( driver , hex ) else
26673: LD_VAR 0 5
26677: PPUSH
26678: LD_VAR 0 6
26682: PPUSH
26683: CALL_OW 112
26687: GO 26773
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
26689: LD_VAR 0 1
26693: PPUSH
26694: LD_EXP 85
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: PUSH
26705: LD_INT 3
26707: ARRAY
26708: PPUSH
26709: LD_EXP 85
26713: PUSH
26714: LD_VAR 0 4
26718: ARRAY
26719: PUSH
26720: LD_INT 4
26722: ARRAY
26723: PPUSH
26724: CALL_OW 297
26728: PUSH
26729: LD_INT 0
26731: GREATER
26732: IFFALSE 26773
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26734: LD_VAR 0 5
26738: PPUSH
26739: LD_EXP 85
26743: PUSH
26744: LD_VAR 0 4
26748: ARRAY
26749: PUSH
26750: LD_INT 3
26752: ARRAY
26753: PPUSH
26754: LD_EXP 85
26758: PUSH
26759: LD_VAR 0 4
26763: ARRAY
26764: PUSH
26765: LD_INT 4
26767: ARRAY
26768: PPUSH
26769: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26773: LD_VAR 0 5
26777: PPUSH
26778: CALL_OW 181
// if Multiplayer then
26782: LD_OWVAR 4
26786: IFFALSE 26835
// begin repeat wait ( 10 ) ;
26788: LD_INT 10
26790: PPUSH
26791: CALL_OW 67
// until not IsInUnit ( driver ) ;
26795: LD_VAR 0 5
26799: PPUSH
26800: CALL_OW 310
26804: NOT
26805: IFFALSE 26788
// if not HasTask ( driver ) then
26807: LD_VAR 0 5
26811: PPUSH
26812: CALL_OW 314
26816: NOT
26817: IFFALSE 26833
// ComEnterUnit ( driver , factory ) ;
26819: LD_VAR 0 5
26823: PPUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: CALL_OW 120
// end else
26833: GO 26849
// AddComEnterUnit ( driver , factory ) ;
26835: LD_VAR 0 5
26839: PPUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 180
// wait ( 0 0$1 ) ;
26849: LD_INT 35
26851: PPUSH
26852: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
26856: LD_ADDR_EXP 86
26860: PUSH
26861: LD_EXP 86
26865: PUSH
26866: LD_VAR 0 5
26870: DIFF
26871: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
26872: LD_ADDR_EXP 86
26876: PUSH
26877: LD_EXP 86
26881: PUSH
26882: LD_VAR 0 1
26886: DIFF
26887: ST_TO_ADDR
// break ;
26888: GO 27041
// end ; end else
26890: GO 27039
// if GetControl ( vehicle ) = control_remote then
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 263
26901: PUSH
26902: LD_INT 2
26904: EQUAL
26905: IFFALSE 26991
// begin wait ( 0 0$2 ) ;
26907: LD_INT 70
26909: PPUSH
26910: CALL_OW 67
// repeat wait ( 10 ) ;
26914: LD_INT 10
26916: PPUSH
26917: CALL_OW 67
// Connect ( vehicle ) ;
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL 40249 0 1
// until IsControledBy ( vehicle ) ;
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 312
26939: IFFALSE 26914
// wait ( 10 ) ;
26941: LD_INT 10
26943: PPUSH
26944: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26948: LD_VAR 0 1
26952: PPUSH
26953: LD_EXP 85
26957: PUSH
26958: LD_VAR 0 4
26962: ARRAY
26963: PUSH
26964: LD_INT 3
26966: ARRAY
26967: PPUSH
26968: LD_EXP 85
26972: PUSH
26973: LD_VAR 0 4
26977: ARRAY
26978: PUSH
26979: LD_INT 4
26981: ARRAY
26982: PPUSH
26983: CALL_OW 111
// break ;
26987: GO 27041
// end else
26989: GO 27039
// begin wait ( 0 0$3 ) ;
26991: LD_INT 105
26993: PPUSH
26994: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26998: LD_VAR 0 1
27002: PPUSH
27003: LD_EXP 85
27007: PUSH
27008: LD_VAR 0 4
27012: ARRAY
27013: PUSH
27014: LD_INT 3
27016: ARRAY
27017: PPUSH
27018: LD_EXP 85
27022: PUSH
27023: LD_VAR 0 4
27027: ARRAY
27028: PUSH
27029: LD_INT 4
27031: ARRAY
27032: PPUSH
27033: CALL_OW 111
// break ;
27037: GO 27041
// end ; end ;
27039: GO 26490
27041: POP
27042: POP
// end ;
27043: LD_VAR 0 3
27047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27048: LD_INT 0
27050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 250
27058: EQUAL
27059: IFFALSE 27076
27061: PUSH
27062: LD_VAR 0 2
27066: PPUSH
27067: CALL_OW 264
27071: PUSH
27072: LD_INT 81
27074: EQUAL
27075: AND
27076: IFFALSE 27097
// MinerPlaceMine ( unit , x , y ) ;
27078: LD_VAR 0 2
27082: PPUSH
27083: LD_VAR 0 4
27087: PPUSH
27088: LD_VAR 0 5
27092: PPUSH
27093: CALL 30229 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27097: LD_VAR 0 1
27101: PUSH
27102: LD_INT 251
27104: EQUAL
27105: IFFALSE 27122
27107: PUSH
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 264
27117: PUSH
27118: LD_INT 81
27120: EQUAL
27121: AND
27122: IFFALSE 27143
// MinerDetonateMine ( unit , x , y ) ;
27124: LD_VAR 0 2
27128: PPUSH
27129: LD_VAR 0 4
27133: PPUSH
27134: LD_VAR 0 5
27138: PPUSH
27139: CALL 30508 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27143: LD_VAR 0 1
27147: PUSH
27148: LD_INT 252
27150: EQUAL
27151: IFFALSE 27168
27153: PUSH
27154: LD_VAR 0 2
27158: PPUSH
27159: CALL_OW 264
27163: PUSH
27164: LD_INT 81
27166: EQUAL
27167: AND
27168: IFFALSE 27189
// MinerCreateMinefield ( unit , x , y ) ;
27170: LD_VAR 0 2
27174: PPUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_VAR 0 5
27184: PPUSH
27185: CALL 30927 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27189: LD_VAR 0 1
27193: PUSH
27194: LD_INT 253
27196: EQUAL
27197: IFFALSE 27214
27199: PUSH
27200: LD_VAR 0 2
27204: PPUSH
27205: CALL_OW 257
27209: PUSH
27210: LD_INT 5
27212: EQUAL
27213: AND
27214: IFFALSE 27235
// ComBinocular ( unit , x , y ) ;
27216: LD_VAR 0 2
27220: PPUSH
27221: LD_VAR 0 4
27225: PPUSH
27226: LD_VAR 0 5
27230: PPUSH
27231: CALL 31302 0 3
// if selectedUnit then
27235: LD_VAR 0 3
27239: IFFALSE 27299
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27241: LD_VAR 0 1
27245: PUSH
27246: LD_INT 254
27248: EQUAL
27249: IFFALSE 27266
27251: PUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 264
27261: PUSH
27262: LD_INT 99
27264: EQUAL
27265: AND
27266: IFFALSE 27283
27268: PUSH
27269: LD_VAR 0 3
27273: PPUSH
27274: CALL_OW 263
27278: PUSH
27279: LD_INT 3
27281: EQUAL
27282: AND
27283: IFFALSE 27299
// HackDestroyVehicle ( unit , selectedUnit ) ;
27285: LD_VAR 0 2
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL 29589 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27299: LD_VAR 0 1
27303: PUSH
27304: LD_INT 255
27306: EQUAL
27307: IFFALSE 27331
27309: PUSH
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 264
27319: PUSH
27320: LD_INT 14
27322: PUSH
27323: LD_INT 53
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: IN
27330: AND
27331: IFFALSE 27349
27333: PUSH
27334: LD_VAR 0 4
27338: PPUSH
27339: LD_VAR 0 5
27343: PPUSH
27344: CALL_OW 488
27348: AND
27349: IFFALSE 27373
// CutTreeXYR ( unit , x , y , 12 ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_VAR 0 4
27360: PPUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: LD_INT 12
27368: PPUSH
27369: CALL 27564 0 4
// if cmd = 256 then
27373: LD_VAR 0 1
27377: PUSH
27378: LD_INT 256
27380: EQUAL
27381: IFFALSE 27402
// SetFactoryWaypoint ( unit , x , y ) ;
27383: LD_VAR 0 2
27387: PPUSH
27388: LD_VAR 0 4
27392: PPUSH
27393: LD_VAR 0 5
27397: PPUSH
27398: CALL 24924 0 3
// if cmd = 257 then
27402: LD_VAR 0 1
27406: PUSH
27407: LD_INT 257
27409: EQUAL
27410: IFFALSE 27431
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_VAR 0 4
27421: PPUSH
27422: LD_VAR 0 5
27426: PPUSH
27427: CALL 25420 0 3
// if cmd = 258 then
27431: LD_VAR 0 1
27435: PUSH
27436: LD_INT 258
27438: EQUAL
27439: IFFALSE 27463
// BurnTreeXYR ( unit , x , y , 8 ) ;
27441: LD_VAR 0 2
27445: PPUSH
27446: LD_VAR 0 4
27450: PPUSH
27451: LD_VAR 0 5
27455: PPUSH
27456: LD_INT 8
27458: PPUSH
27459: CALL 27964 0 4
// end ;
27463: LD_VAR 0 6
27467: RET
// export function ComRadiation ( un ) ; var eff ; begin
27468: LD_INT 0
27470: PPUSH
27471: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 264
27481: PUSH
27482: LD_INT 91
27484: NONEQUAL
27485: IFFALSE 27489
// exit ;
27487: GO 27559
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27489: LD_INT 68
27491: PPUSH
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 255
27501: PPUSH
27502: CALL_OW 321
27506: PUSH
27507: LD_INT 2
27509: EQUAL
27510: IFFALSE 27522
// eff := 50 else
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 50
27519: ST_TO_ADDR
27520: GO 27530
// eff := 25 ;
27522: LD_ADDR_VAR 0 3
27526: PUSH
27527: LD_INT 25
27529: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 250
27539: PPUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 251
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: CALL_OW 495
// end ;
27559: LD_VAR 0 2
27563: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL_OW 302
27584: NOT
27585: IFTRUE 27604
27587: PUSH
27588: LD_VAR 0 2
27592: PPUSH
27593: LD_VAR 0 3
27597: PPUSH
27598: CALL_OW 488
27602: NOT
27603: OR
27604: IFTRUE 27613
27606: PUSH
27607: LD_VAR 0 4
27611: NOT
27612: OR
27613: IFFALSE 27617
// exit ;
27615: GO 27959
// list := [ ] ;
27617: LD_ADDR_VAR 0 13
27621: PUSH
27622: EMPTY
27623: ST_TO_ADDR
// if x - r < 0 then
27624: LD_VAR 0 2
27628: PUSH
27629: LD_VAR 0 4
27633: MINUS
27634: PUSH
27635: LD_INT 0
27637: LESS
27638: IFFALSE 27650
// min_x := 0 else
27640: LD_ADDR_VAR 0 7
27644: PUSH
27645: LD_INT 0
27647: ST_TO_ADDR
27648: GO 27666
// min_x := x - r ;
27650: LD_ADDR_VAR 0 7
27654: PUSH
27655: LD_VAR 0 2
27659: PUSH
27660: LD_VAR 0 4
27664: MINUS
27665: ST_TO_ADDR
// if y - r < 0 then
27666: LD_VAR 0 3
27670: PUSH
27671: LD_VAR 0 4
27675: MINUS
27676: PUSH
27677: LD_INT 0
27679: LESS
27680: IFFALSE 27692
// min_y := 0 else
27682: LD_ADDR_VAR 0 8
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
27690: GO 27708
// min_y := y - r ;
27692: LD_ADDR_VAR 0 8
27696: PUSH
27697: LD_VAR 0 3
27701: PUSH
27702: LD_VAR 0 4
27706: MINUS
27707: ST_TO_ADDR
// max_x := x + r ;
27708: LD_ADDR_VAR 0 9
27712: PUSH
27713: LD_VAR 0 2
27717: PUSH
27718: LD_VAR 0 4
27722: PLUS
27723: ST_TO_ADDR
// max_y := y + r ;
27724: LD_ADDR_VAR 0 10
27728: PUSH
27729: LD_VAR 0 3
27733: PUSH
27734: LD_VAR 0 4
27738: PLUS
27739: ST_TO_ADDR
// for _x = min_x to max_x do
27740: LD_ADDR_VAR 0 11
27744: PUSH
27745: DOUBLE
27746: LD_VAR 0 7
27750: DEC
27751: ST_TO_ADDR
27752: LD_VAR 0 9
27756: PUSH
27757: FOR_TO
27758: IFFALSE 27877
// for _y = min_y to max_y do
27760: LD_ADDR_VAR 0 12
27764: PUSH
27765: DOUBLE
27766: LD_VAR 0 8
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 10
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27873
// begin if not ValidHex ( _x , _y ) then
27780: LD_VAR 0 11
27784: PPUSH
27785: LD_VAR 0 12
27789: PPUSH
27790: CALL_OW 488
27794: NOT
27795: IFFALSE 27799
// continue ;
27797: GO 27777
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27799: LD_VAR 0 11
27803: PPUSH
27804: LD_VAR 0 12
27808: PPUSH
27809: CALL_OW 351
27813: IFFALSE 27831
27815: PUSH
27816: LD_VAR 0 11
27820: PPUSH
27821: LD_VAR 0 12
27825: PPUSH
27826: CALL_OW 554
27830: AND
27831: IFFALSE 27871
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27833: LD_ADDR_VAR 0 13
27837: PUSH
27838: LD_VAR 0 13
27842: PPUSH
27843: LD_VAR 0 13
27847: PUSH
27848: LD_INT 1
27850: PLUS
27851: PPUSH
27852: LD_VAR 0 11
27856: PUSH
27857: LD_VAR 0 12
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PPUSH
27866: CALL_OW 2
27870: ST_TO_ADDR
// end ;
27871: GO 27777
27873: POP
27874: POP
27875: GO 27757
27877: POP
27878: POP
// if not list then
27879: LD_VAR 0 13
27883: NOT
27884: IFFALSE 27888
// exit ;
27886: GO 27959
// for i in list do
27888: LD_ADDR_VAR 0 6
27892: PUSH
27893: LD_VAR 0 13
27897: PUSH
27898: FOR_IN
27899: IFFALSE 27957
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_STRING M
27908: PUSH
27909: LD_VAR 0 6
27913: PUSH
27914: LD_INT 1
27916: ARRAY
27917: PUSH
27918: LD_VAR 0 6
27922: PUSH
27923: LD_INT 2
27925: ARRAY
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: PPUSH
27951: CALL_OW 447
27955: GO 27898
27957: POP
27958: POP
// end ;
27959: LD_VAR 0 5
27963: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 302
27985: NOT
27986: IFTRUE 28005
27988: PUSH
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 488
28003: NOT
28004: OR
28005: IFTRUE 28014
28007: PUSH
28008: LD_VAR 0 4
28012: NOT
28013: OR
28014: IFFALSE 28018
// exit ;
28016: GO 28535
// list := [ ] ;
28018: LD_ADDR_VAR 0 13
28022: PUSH
28023: EMPTY
28024: ST_TO_ADDR
// if x - r < 0 then
28025: LD_VAR 0 2
28029: PUSH
28030: LD_VAR 0 4
28034: MINUS
28035: PUSH
28036: LD_INT 0
28038: LESS
28039: IFFALSE 28051
// min_x := 0 else
28041: LD_ADDR_VAR 0 7
28045: PUSH
28046: LD_INT 0
28048: ST_TO_ADDR
28049: GO 28067
// min_x := x - r ;
28051: LD_ADDR_VAR 0 7
28055: PUSH
28056: LD_VAR 0 2
28060: PUSH
28061: LD_VAR 0 4
28065: MINUS
28066: ST_TO_ADDR
// if y - r < 0 then
28067: LD_VAR 0 3
28071: PUSH
28072: LD_VAR 0 4
28076: MINUS
28077: PUSH
28078: LD_INT 0
28080: LESS
28081: IFFALSE 28093
// min_y := 0 else
28083: LD_ADDR_VAR 0 8
28087: PUSH
28088: LD_INT 0
28090: ST_TO_ADDR
28091: GO 28109
// min_y := y - r ;
28093: LD_ADDR_VAR 0 8
28097: PUSH
28098: LD_VAR 0 3
28102: PUSH
28103: LD_VAR 0 4
28107: MINUS
28108: ST_TO_ADDR
// max_x := x + r ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_VAR 0 2
28118: PUSH
28119: LD_VAR 0 4
28123: PLUS
28124: ST_TO_ADDR
// max_y := y + r ;
28125: LD_ADDR_VAR 0 10
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: LD_VAR 0 4
28139: PLUS
28140: ST_TO_ADDR
// for _x = min_x to max_x do
28141: LD_ADDR_VAR 0 11
28145: PUSH
28146: DOUBLE
28147: LD_VAR 0 7
28151: DEC
28152: ST_TO_ADDR
28153: LD_VAR 0 9
28157: PUSH
28158: FOR_TO
28159: IFFALSE 28278
// for _y = min_y to max_y do
28161: LD_ADDR_VAR 0 12
28165: PUSH
28166: DOUBLE
28167: LD_VAR 0 8
28171: DEC
28172: ST_TO_ADDR
28173: LD_VAR 0 10
28177: PUSH
28178: FOR_TO
28179: IFFALSE 28274
// begin if not ValidHex ( _x , _y ) then
28181: LD_VAR 0 11
28185: PPUSH
28186: LD_VAR 0 12
28190: PPUSH
28191: CALL_OW 488
28195: NOT
28196: IFFALSE 28200
// continue ;
28198: GO 28178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28200: LD_VAR 0 11
28204: PPUSH
28205: LD_VAR 0 12
28209: PPUSH
28210: CALL_OW 351
28214: IFFALSE 28232
28216: PUSH
28217: LD_VAR 0 11
28221: PPUSH
28222: LD_VAR 0 12
28226: PPUSH
28227: CALL_OW 554
28231: AND
28232: IFFALSE 28272
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28234: LD_ADDR_VAR 0 13
28238: PUSH
28239: LD_VAR 0 13
28243: PPUSH
28244: LD_VAR 0 13
28248: PUSH
28249: LD_INT 1
28251: PLUS
28252: PPUSH
28253: LD_VAR 0 11
28257: PUSH
28258: LD_VAR 0 12
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 2
28271: ST_TO_ADDR
// end ;
28272: GO 28178
28274: POP
28275: POP
28276: GO 28158
28278: POP
28279: POP
// if not list then
28280: LD_VAR 0 13
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 28535
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28289: LD_ADDR_VAR 0 13
28293: PUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_VAR 0 13
28303: PPUSH
28304: LD_INT 1
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: CALL 37377 0 4
28314: ST_TO_ADDR
// ComStop ( flame ) ;
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 141
// for i in list do
28324: LD_ADDR_VAR 0 6
28328: PUSH
28329: LD_VAR 0 13
28333: PUSH
28334: FOR_IN
28335: IFFALSE 28366
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28337: LD_VAR 0 1
28341: PPUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 6
28355: PUSH
28356: LD_INT 2
28358: ARRAY
28359: PPUSH
28360: CALL_OW 176
28364: GO 28334
28366: POP
28367: POP
// repeat wait ( 0 0$1 ) ;
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
// task := GetTaskList ( flame ) ;
28375: LD_ADDR_VAR 0 14
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 437
28389: ST_TO_ADDR
// if not task then
28390: LD_VAR 0 14
28394: NOT
28395: IFFALSE 28399
// exit ;
28397: GO 28535
// if task [ 1 ] [ 1 ] <> | then
28399: LD_VAR 0 14
28403: PUSH
28404: LD_INT 1
28406: ARRAY
28407: PUSH
28408: LD_INT 1
28410: ARRAY
28411: PUSH
28412: LD_STRING |
28414: NONEQUAL
28415: IFFALSE 28419
// exit ;
28417: GO 28535
// _x := task [ 1 ] [ 2 ] ;
28419: LD_ADDR_VAR 0 11
28423: PUSH
28424: LD_VAR 0 14
28428: PUSH
28429: LD_INT 1
28431: ARRAY
28432: PUSH
28433: LD_INT 2
28435: ARRAY
28436: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28437: LD_ADDR_VAR 0 12
28441: PUSH
28442: LD_VAR 0 14
28446: PUSH
28447: LD_INT 1
28449: ARRAY
28450: PUSH
28451: LD_INT 3
28453: ARRAY
28454: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28455: LD_VAR 0 11
28459: PPUSH
28460: LD_VAR 0 12
28464: PPUSH
28465: CALL_OW 351
28469: NOT
28470: IFTRUE 28489
28472: PUSH
28473: LD_VAR 0 11
28477: PPUSH
28478: LD_VAR 0 12
28482: PPUSH
28483: CALL_OW 554
28487: NOT
28488: OR
28489: IFFALSE 28523
// begin task := Delete ( task , 1 ) ;
28491: LD_ADDR_VAR 0 14
28495: PUSH
28496: LD_VAR 0 14
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 3
28508: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_VAR 0 14
28518: PPUSH
28519: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 314
28532: NOT
28533: IFFALSE 28368
// end ;
28535: LD_VAR 0 5
28539: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28540: LD_EXP 89
28544: NOT
28545: IFFALSE 28595
28547: GO 28549
28549: DISABLE
// begin initHack := true ;
28550: LD_ADDR_EXP 89
28554: PUSH
28555: LD_INT 1
28557: ST_TO_ADDR
// hackTanks := [ ] ;
28558: LD_ADDR_EXP 90
28562: PUSH
28563: EMPTY
28564: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28565: LD_ADDR_EXP 91
28569: PUSH
28570: EMPTY
28571: ST_TO_ADDR
// hackLimit := 3 ;
28572: LD_ADDR_EXP 92
28576: PUSH
28577: LD_INT 3
28579: ST_TO_ADDR
// hackDist := 12 ;
28580: LD_ADDR_EXP 93
28584: PUSH
28585: LD_INT 12
28587: ST_TO_ADDR
// hackCounter := [ ] ;
28588: LD_ADDR_EXP 94
28592: PUSH
28593: EMPTY
28594: ST_TO_ADDR
// end ;
28595: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28596: LD_EXP 89
28600: IFFALSE 28618
28602: PUSH
28603: LD_INT 34
28605: PUSH
28606: LD_INT 99
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 69
28617: AND
28618: IFFALSE 28871
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
// begin enable ;
28627: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28628: LD_ADDR_VAR 0 1
28632: PUSH
28633: LD_INT 34
28635: PUSH
28636: LD_INT 99
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PPUSH
28643: CALL_OW 69
28647: PUSH
28648: FOR_IN
28649: IFFALSE 28869
// begin if not i in hackTanks then
28651: LD_VAR 0 1
28655: PUSH
28656: LD_EXP 90
28660: IN
28661: NOT
28662: IFFALSE 28745
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28664: LD_ADDR_EXP 90
28668: PUSH
28669: LD_EXP 90
28673: PPUSH
28674: LD_EXP 90
28678: PUSH
28679: LD_INT 1
28681: PLUS
28682: PPUSH
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 1
28692: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28693: LD_ADDR_EXP 91
28697: PUSH
28698: LD_EXP 91
28702: PPUSH
28703: LD_EXP 91
28707: PUSH
28708: LD_INT 1
28710: PLUS
28711: PPUSH
28712: EMPTY
28713: PPUSH
28714: CALL_OW 1
28718: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28719: LD_ADDR_EXP 94
28723: PUSH
28724: LD_EXP 94
28728: PPUSH
28729: LD_EXP 94
28733: PUSH
28734: LD_INT 1
28736: PLUS
28737: PPUSH
28738: EMPTY
28739: PPUSH
28740: CALL_OW 1
28744: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 302
28754: NOT
28755: IFFALSE 28768
// begin HackUnlinkAll ( i ) ;
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL 28874 0 1
// continue ;
28766: GO 28648
// end ; HackCheckCapturedStatus ( i ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: CALL 29319 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28777: LD_ADDR_VAR 0 2
28781: PUSH
28782: LD_INT 81
28784: PUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 255
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 33
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 91
28811: PUSH
28812: LD_VAR 0 1
28816: PUSH
28817: LD_EXP 93
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 50
28829: PUSH
28830: EMPTY
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 2
28848: NOT
28849: IFFALSE 28853
// continue ;
28851: GO 28648
// HackLink ( i , tmp ) ;
28853: LD_VAR 0 1
28857: PPUSH
28858: LD_VAR 0 2
28862: PPUSH
28863: CALL 29010 0 2
// end ;
28867: GO 28648
28869: POP
28870: POP
// end ;
28871: PPOPN 2
28873: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28874: LD_INT 0
28876: PPUSH
28877: PPUSH
28878: PPUSH
// if not hack in hackTanks then
28879: LD_VAR 0 1
28883: PUSH
28884: LD_EXP 90
28888: IN
28889: NOT
28890: IFFALSE 28894
// exit ;
28892: GO 29005
// index := GetElementIndex ( hackTanks , hack ) ;
28894: LD_ADDR_VAR 0 4
28898: PUSH
28899: LD_EXP 90
28903: PPUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL 36672 0 2
28913: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28914: LD_EXP 91
28918: PUSH
28919: LD_VAR 0 4
28923: ARRAY
28924: IFFALSE 29005
// begin for i in hackTanksCaptured [ index ] do
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: LD_EXP 91
28935: PUSH
28936: LD_VAR 0 4
28940: ARRAY
28941: PUSH
28942: FOR_IN
28943: IFFALSE 28969
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28945: LD_VAR 0 3
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PPUSH
28954: LD_VAR 0 3
28958: PUSH
28959: LD_INT 2
28961: ARRAY
28962: PPUSH
28963: CALL_OW 235
28967: GO 28942
28969: POP
28970: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28971: LD_ADDR_EXP 91
28975: PUSH
28976: LD_EXP 91
28980: PPUSH
28981: LD_VAR 0 4
28985: PPUSH
28986: EMPTY
28987: PPUSH
28988: CALL_OW 1
28992: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_INT 0
29000: PPUSH
29001: CALL_OW 505
// end ; end ;
29005: LD_VAR 0 2
29009: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
// if not hack in hackTanks or not vehicles then
29015: LD_VAR 0 1
29019: PUSH
29020: LD_EXP 90
29024: IN
29025: NOT
29026: IFTRUE 29035
29028: PUSH
29029: LD_VAR 0 2
29033: NOT
29034: OR
29035: IFFALSE 29039
// exit ;
29037: GO 29314
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29039: LD_ADDR_VAR 0 2
29043: PUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 1
29056: PPUSH
29057: LD_INT 1
29059: PPUSH
29060: CALL 37324 0 4
29064: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_EXP 90
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL 36672 0 2
29084: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29085: LD_EXP 91
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_EXP 92
29100: LESS
29101: IFFALSE 29290
// begin for i := 1 to vehicles do
29103: LD_ADDR_VAR 0 4
29107: PUSH
29108: DOUBLE
29109: LD_INT 1
29111: DEC
29112: ST_TO_ADDR
29113: LD_VAR 0 2
29117: PUSH
29118: FOR_TO
29119: IFFALSE 29288
// begin if hackTanksCaptured [ index ] = hackLimit then
29121: LD_EXP 91
29125: PUSH
29126: LD_VAR 0 5
29130: ARRAY
29131: PUSH
29132: LD_EXP 92
29136: EQUAL
29137: IFFALSE 29141
// break ;
29139: GO 29288
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29141: LD_ADDR_EXP 94
29145: PUSH
29146: LD_EXP 94
29150: PPUSH
29151: LD_VAR 0 5
29155: PPUSH
29156: LD_EXP 94
29160: PUSH
29161: LD_VAR 0 5
29165: ARRAY
29166: PUSH
29167: LD_INT 1
29169: PLUS
29170: PPUSH
29171: CALL_OW 1
29175: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29176: LD_ADDR_EXP 91
29180: PUSH
29181: LD_EXP 91
29185: PPUSH
29186: LD_VAR 0 5
29190: PUSH
29191: LD_EXP 91
29195: PUSH
29196: LD_VAR 0 5
29200: ARRAY
29201: PUSH
29202: LD_INT 1
29204: PLUS
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PPUSH
29210: LD_VAR 0 2
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: PUSH
29221: LD_VAR 0 2
29225: PUSH
29226: LD_VAR 0 4
29230: ARRAY
29231: PPUSH
29232: CALL_OW 255
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PPUSH
29241: CALL 36889 0 3
29245: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29246: LD_VAR 0 2
29250: PUSH
29251: LD_VAR 0 4
29255: ARRAY
29256: PPUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 255
29266: PPUSH
29267: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29271: LD_VAR 0 2
29275: PUSH
29276: LD_VAR 0 4
29280: ARRAY
29281: PPUSH
29282: CALL_OW 141
// end ;
29286: GO 29118
29288: POP
29289: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29290: LD_VAR 0 1
29294: PPUSH
29295: LD_EXP 91
29299: PUSH
29300: LD_VAR 0 5
29304: ARRAY
29305: PUSH
29306: LD_INT 0
29308: PLUS
29309: PPUSH
29310: CALL_OW 505
// end ;
29314: LD_VAR 0 3
29318: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
// if not hack in hackTanks then
29325: LD_VAR 0 1
29329: PUSH
29330: LD_EXP 90
29334: IN
29335: NOT
29336: IFFALSE 29340
// exit ;
29338: GO 29584
// index := GetElementIndex ( hackTanks , hack ) ;
29340: LD_ADDR_VAR 0 4
29344: PUSH
29345: LD_EXP 90
29349: PPUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL 36672 0 2
29359: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: DOUBLE
29366: LD_EXP 91
29370: PUSH
29371: LD_VAR 0 4
29375: ARRAY
29376: INC
29377: ST_TO_ADDR
29378: LD_INT 1
29380: PUSH
29381: FOR_DOWNTO
29382: IFFALSE 29558
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29384: LD_ADDR_VAR 0 5
29388: PUSH
29389: LD_EXP 91
29393: PUSH
29394: LD_VAR 0 4
29398: ARRAY
29399: PUSH
29400: LD_VAR 0 3
29404: ARRAY
29405: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29406: LD_VAR 0 5
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: CALL_OW 302
29419: NOT
29420: IFTRUE 29448
29422: PUSH
29423: LD_VAR 0 5
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: CALL_OW 255
29436: PUSH
29437: LD_VAR 0 1
29441: PPUSH
29442: CALL_OW 255
29446: NONEQUAL
29447: OR
29448: IFFALSE 29556
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29450: LD_VAR 0 5
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 305
29463: IFFALSE 29491
29465: PUSH
29466: LD_VAR 0 5
29470: PUSH
29471: LD_INT 1
29473: ARRAY
29474: PPUSH
29475: CALL_OW 255
29479: PUSH
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 255
29489: EQUAL
29490: AND
29491: IFFALSE 29515
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29493: LD_VAR 0 5
29497: PUSH
29498: LD_INT 1
29500: ARRAY
29501: PPUSH
29502: LD_VAR 0 5
29506: PUSH
29507: LD_INT 2
29509: ARRAY
29510: PPUSH
29511: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29515: LD_ADDR_EXP 91
29519: PUSH
29520: LD_EXP 91
29524: PPUSH
29525: LD_VAR 0 4
29529: PPUSH
29530: LD_EXP 91
29534: PUSH
29535: LD_VAR 0 4
29539: ARRAY
29540: PPUSH
29541: LD_VAR 0 3
29545: PPUSH
29546: CALL_OW 3
29550: PPUSH
29551: CALL_OW 1
29555: ST_TO_ADDR
// end ; end ;
29556: GO 29381
29558: POP
29559: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_EXP 91
29569: PUSH
29570: LD_VAR 0 4
29574: ARRAY
29575: PUSH
29576: LD_INT 0
29578: PLUS
29579: PPUSH
29580: CALL_OW 505
// end ;
29584: LD_VAR 0 2
29588: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
29593: PPUSH
29594: PPUSH
// if not hack in hackTanks then
29595: LD_VAR 0 1
29599: PUSH
29600: LD_EXP 90
29604: IN
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 29695
// index := GetElementIndex ( hackTanks , hack ) ;
29610: LD_ADDR_VAR 0 5
29614: PUSH
29615: LD_EXP 90
29619: PPUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL 36672 0 2
29629: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: DOUBLE
29636: LD_INT 1
29638: DEC
29639: ST_TO_ADDR
29640: LD_EXP 91
29644: PUSH
29645: LD_VAR 0 5
29649: ARRAY
29650: PUSH
29651: FOR_TO
29652: IFFALSE 29693
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29654: LD_EXP 91
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: PUSH
29665: LD_VAR 0 4
29669: ARRAY
29670: PUSH
29671: LD_INT 1
29673: ARRAY
29674: PUSH
29675: LD_VAR 0 2
29679: EQUAL
29680: IFFALSE 29691
// KillUnit ( vehicle ) ;
29682: LD_VAR 0 2
29686: PPUSH
29687: CALL_OW 66
29691: GO 29651
29693: POP
29694: POP
// end ;
29695: LD_VAR 0 3
29699: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29700: LD_EXP 95
29704: NOT
29705: IFFALSE 29740
29707: GO 29709
29709: DISABLE
// begin initMiner := true ;
29710: LD_ADDR_EXP 95
29714: PUSH
29715: LD_INT 1
29717: ST_TO_ADDR
// minersList := [ ] ;
29718: LD_ADDR_EXP 96
29722: PUSH
29723: EMPTY
29724: ST_TO_ADDR
// minerMinesList := [ ] ;
29725: LD_ADDR_EXP 97
29729: PUSH
29730: EMPTY
29731: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29732: LD_ADDR_EXP 98
29736: PUSH
29737: LD_INT 5
29739: ST_TO_ADDR
// end ;
29740: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29741: LD_EXP 95
29745: IFFALSE 29763
29747: PUSH
29748: LD_INT 34
29750: PUSH
29751: LD_INT 81
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 69
29762: AND
29763: IFFALSE 30226
29765: GO 29767
29767: DISABLE
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
// begin enable ;
29774: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29775: LD_ADDR_VAR 0 1
29779: PUSH
29780: LD_INT 34
29782: PUSH
29783: LD_INT 81
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: PUSH
29795: FOR_IN
29796: IFFALSE 29868
// begin if not i in minersList then
29798: LD_VAR 0 1
29802: PUSH
29803: LD_EXP 96
29807: IN
29808: NOT
29809: IFFALSE 29866
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29811: LD_ADDR_EXP 96
29815: PUSH
29816: LD_EXP 96
29820: PPUSH
29821: LD_EXP 96
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: PPUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 1
29839: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29840: LD_ADDR_EXP 97
29844: PUSH
29845: LD_EXP 97
29849: PPUSH
29850: LD_EXP 97
29854: PUSH
29855: LD_INT 1
29857: PLUS
29858: PPUSH
29859: EMPTY
29860: PPUSH
29861: CALL_OW 1
29865: ST_TO_ADDR
// end end ;
29866: GO 29795
29868: POP
29869: POP
// for i := minerMinesList downto 1 do
29870: LD_ADDR_VAR 0 1
29874: PUSH
29875: DOUBLE
29876: LD_EXP 97
29880: INC
29881: ST_TO_ADDR
29882: LD_INT 1
29884: PUSH
29885: FOR_DOWNTO
29886: IFFALSE 30224
// begin if IsLive ( minersList [ i ] ) then
29888: LD_EXP 96
29892: PUSH
29893: LD_VAR 0 1
29897: ARRAY
29898: PPUSH
29899: CALL_OW 300
29903: IFFALSE 29931
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29905: LD_EXP 96
29909: PUSH
29910: LD_VAR 0 1
29914: ARRAY
29915: PPUSH
29916: LD_EXP 97
29920: PUSH
29921: LD_VAR 0 1
29925: ARRAY
29926: PPUSH
29927: CALL_OW 505
// if not minerMinesList [ i ] then
29931: LD_EXP 97
29935: PUSH
29936: LD_VAR 0 1
29940: ARRAY
29941: NOT
29942: IFFALSE 29946
// continue ;
29944: GO 29885
// for j := minerMinesList [ i ] downto 1 do
29946: LD_ADDR_VAR 0 2
29950: PUSH
29951: DOUBLE
29952: LD_EXP 97
29956: PUSH
29957: LD_VAR 0 1
29961: ARRAY
29962: INC
29963: ST_TO_ADDR
29964: LD_INT 1
29966: PUSH
29967: FOR_DOWNTO
29968: IFFALSE 30220
// begin side := GetSide ( minersList [ i ] ) ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_EXP 96
29979: PUSH
29980: LD_VAR 0 1
29984: ARRAY
29985: PPUSH
29986: CALL_OW 255
29990: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29991: LD_ADDR_VAR 0 4
29995: PUSH
29996: LD_EXP 97
30000: PUSH
30001: LD_VAR 0 1
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 2
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: LD_EXP 97
30021: PUSH
30022: LD_VAR 0 1
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 2
30032: ARRAY
30033: PUSH
30034: LD_INT 2
30036: ARRAY
30037: PPUSH
30038: CALL_OW 428
30042: ST_TO_ADDR
// if not tmp then
30043: LD_VAR 0 4
30047: NOT
30048: IFFALSE 30052
// continue ;
30050: GO 29967
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30052: LD_VAR 0 4
30056: PUSH
30057: LD_INT 81
30059: PUSH
30060: LD_VAR 0 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PPUSH
30069: CALL_OW 69
30073: IN
30074: IFFALSE 30124
30076: PUSH
30077: LD_EXP 97
30081: PUSH
30082: LD_VAR 0 1
30086: ARRAY
30087: PUSH
30088: LD_VAR 0 2
30092: ARRAY
30093: PUSH
30094: LD_INT 1
30096: ARRAY
30097: PPUSH
30098: LD_EXP 97
30102: PUSH
30103: LD_VAR 0 1
30107: ARRAY
30108: PUSH
30109: LD_VAR 0 2
30113: ARRAY
30114: PUSH
30115: LD_INT 2
30117: ARRAY
30118: PPUSH
30119: CALL_OW 458
30123: AND
30124: IFFALSE 30218
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30126: LD_EXP 97
30130: PUSH
30131: LD_VAR 0 1
30135: ARRAY
30136: PUSH
30137: LD_VAR 0 2
30141: ARRAY
30142: PUSH
30143: LD_INT 1
30145: ARRAY
30146: PPUSH
30147: LD_EXP 97
30151: PUSH
30152: LD_VAR 0 1
30156: ARRAY
30157: PUSH
30158: LD_VAR 0 2
30162: ARRAY
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: LD_VAR 0 3
30172: PPUSH
30173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30177: LD_ADDR_EXP 97
30181: PUSH
30182: LD_EXP 97
30186: PPUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: LD_EXP 97
30196: PUSH
30197: LD_VAR 0 1
30201: ARRAY
30202: PPUSH
30203: LD_VAR 0 2
30207: PPUSH
30208: CALL_OW 3
30212: PPUSH
30213: CALL_OW 1
30217: ST_TO_ADDR
// end ; end ;
30218: GO 29967
30220: POP
30221: POP
// end ;
30222: GO 29885
30224: POP
30225: POP
// end ;
30226: PPOPN 4
30228: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
// result := false ;
30233: LD_ADDR_VAR 0 4
30237: PUSH
30238: LD_INT 0
30240: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30241: LD_VAR 0 1
30245: PPUSH
30246: CALL_OW 264
30250: PUSH
30251: LD_INT 81
30253: EQUAL
30254: NOT
30255: IFFALSE 30259
// exit ;
30257: GO 30503
// index := GetElementIndex ( minersList , unit ) ;
30259: LD_ADDR_VAR 0 5
30263: PUSH
30264: LD_EXP 96
30268: PPUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL 36672 0 2
30278: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30279: LD_EXP 97
30283: PUSH
30284: LD_VAR 0 5
30288: ARRAY
30289: PUSH
30290: LD_EXP 98
30294: GREATEREQUAL
30295: IFFALSE 30299
// exit ;
30297: GO 30503
// ComMoveXY ( unit , x , y ) ;
30299: LD_VAR 0 1
30303: PPUSH
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_VAR 0 3
30313: PPUSH
30314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30318: LD_INT 35
30320: PPUSH
30321: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30325: LD_VAR 0 1
30329: PPUSH
30330: LD_VAR 0 2
30334: PPUSH
30335: LD_VAR 0 3
30339: PPUSH
30340: CALL 68718 0 3
30344: NOT
30345: IFFALSE 30358
30347: PUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 314
30357: AND
30358: IFFALSE 30362
// exit ;
30360: GO 30503
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30362: LD_VAR 0 2
30366: PPUSH
30367: LD_VAR 0 3
30371: PPUSH
30372: CALL_OW 428
30376: PUSH
30377: LD_VAR 0 1
30381: EQUAL
30382: IFFALSE 30396
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: CALL_OW 314
30394: NOT
30395: AND
30396: IFFALSE 30318
// PlaySoundXY ( x , y , PlantMine ) ;
30398: LD_VAR 0 2
30402: PPUSH
30403: LD_VAR 0 3
30407: PPUSH
30408: LD_STRING PlantMine
30410: PPUSH
30411: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30415: LD_VAR 0 2
30419: PPUSH
30420: LD_VAR 0 3
30424: PPUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 255
30434: PPUSH
30435: LD_INT 0
30437: PPUSH
30438: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30442: LD_ADDR_EXP 97
30446: PUSH
30447: LD_EXP 97
30451: PPUSH
30452: LD_VAR 0 5
30456: PUSH
30457: LD_EXP 97
30461: PUSH
30462: LD_VAR 0 5
30466: ARRAY
30467: PUSH
30468: LD_INT 1
30470: PLUS
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: LD_VAR 0 2
30480: PUSH
30481: LD_VAR 0 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL 36889 0 3
30494: ST_TO_ADDR
// result := true ;
30495: LD_ADDR_VAR 0 4
30499: PUSH
30500: LD_INT 1
30502: ST_TO_ADDR
// end ;
30503: LD_VAR 0 4
30507: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30508: LD_INT 0
30510: PPUSH
30511: PPUSH
30512: PPUSH
// if not unit in minersList then
30513: LD_VAR 0 1
30517: PUSH
30518: LD_EXP 96
30522: IN
30523: NOT
30524: IFFALSE 30528
// exit ;
30526: GO 30922
// index := GetElementIndex ( minersList , unit ) ;
30528: LD_ADDR_VAR 0 6
30532: PUSH
30533: LD_EXP 96
30537: PPUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL 36672 0 2
30547: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30548: LD_ADDR_VAR 0 5
30552: PUSH
30553: DOUBLE
30554: LD_EXP 97
30558: PUSH
30559: LD_VAR 0 6
30563: ARRAY
30564: INC
30565: ST_TO_ADDR
30566: LD_INT 1
30568: PUSH
30569: FOR_DOWNTO
30570: IFFALSE 30733
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30572: LD_EXP 97
30576: PUSH
30577: LD_VAR 0 6
30581: ARRAY
30582: PUSH
30583: LD_VAR 0 5
30587: ARRAY
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: PUSH
30593: LD_VAR 0 2
30597: EQUAL
30598: IFFALSE 30628
30600: PUSH
30601: LD_EXP 97
30605: PUSH
30606: LD_VAR 0 6
30610: ARRAY
30611: PUSH
30612: LD_VAR 0 5
30616: ARRAY
30617: PUSH
30618: LD_INT 2
30620: ARRAY
30621: PUSH
30622: LD_VAR 0 3
30626: EQUAL
30627: AND
30628: IFFALSE 30731
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30630: LD_EXP 97
30634: PUSH
30635: LD_VAR 0 6
30639: ARRAY
30640: PUSH
30641: LD_VAR 0 5
30645: ARRAY
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: PPUSH
30651: LD_EXP 97
30655: PUSH
30656: LD_VAR 0 6
30660: ARRAY
30661: PUSH
30662: LD_VAR 0 5
30666: ARRAY
30667: PUSH
30668: LD_INT 2
30670: ARRAY
30671: PPUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 255
30681: PPUSH
30682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30686: LD_ADDR_EXP 97
30690: PUSH
30691: LD_EXP 97
30695: PPUSH
30696: LD_VAR 0 6
30700: PPUSH
30701: LD_EXP 97
30705: PUSH
30706: LD_VAR 0 6
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 5
30716: PPUSH
30717: CALL_OW 3
30721: PPUSH
30722: CALL_OW 1
30726: ST_TO_ADDR
// exit ;
30727: POP
30728: POP
30729: GO 30922
// end ; end ;
30731: GO 30569
30733: POP
30734: POP
// for i := minerMinesList [ index ] downto 1 do
30735: LD_ADDR_VAR 0 5
30739: PUSH
30740: DOUBLE
30741: LD_EXP 97
30745: PUSH
30746: LD_VAR 0 6
30750: ARRAY
30751: INC
30752: ST_TO_ADDR
30753: LD_INT 1
30755: PUSH
30756: FOR_DOWNTO
30757: IFFALSE 30920
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30759: LD_EXP 97
30763: PUSH
30764: LD_VAR 0 6
30768: ARRAY
30769: PUSH
30770: LD_VAR 0 5
30774: ARRAY
30775: PUSH
30776: LD_INT 1
30778: ARRAY
30779: PPUSH
30780: LD_EXP 97
30784: PUSH
30785: LD_VAR 0 6
30789: ARRAY
30790: PUSH
30791: LD_VAR 0 5
30795: ARRAY
30796: PUSH
30797: LD_INT 2
30799: ARRAY
30800: PPUSH
30801: LD_VAR 0 2
30805: PPUSH
30806: LD_VAR 0 3
30810: PPUSH
30811: CALL_OW 298
30815: PUSH
30816: LD_INT 6
30818: LESS
30819: IFFALSE 30918
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30821: LD_EXP 97
30825: PUSH
30826: LD_VAR 0 6
30830: ARRAY
30831: PUSH
30832: LD_VAR 0 5
30836: ARRAY
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_EXP 97
30846: PUSH
30847: LD_VAR 0 6
30851: ARRAY
30852: PUSH
30853: LD_VAR 0 5
30857: ARRAY
30858: PUSH
30859: LD_INT 2
30861: ARRAY
30862: PPUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 255
30872: PPUSH
30873: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30877: LD_ADDR_EXP 97
30881: PUSH
30882: LD_EXP 97
30886: PPUSH
30887: LD_VAR 0 6
30891: PPUSH
30892: LD_EXP 97
30896: PUSH
30897: LD_VAR 0 6
30901: ARRAY
30902: PPUSH
30903: LD_VAR 0 5
30907: PPUSH
30908: CALL_OW 3
30912: PPUSH
30913: CALL_OW 1
30917: ST_TO_ADDR
// end ; end ;
30918: GO 30756
30920: POP
30921: POP
// end ;
30922: LD_VAR 0 4
30926: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30927: LD_INT 0
30929: PPUSH
30930: PPUSH
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 264
30947: PUSH
30948: LD_INT 81
30950: EQUAL
30951: NOT
30952: IFTRUE 30967
30954: PUSH
30955: LD_VAR 0 1
30959: PUSH
30960: LD_EXP 96
30964: IN
30965: NOT
30966: OR
30967: IFFALSE 30971
// exit ;
30969: GO 31297
// index := GetElementIndex ( minersList , unit ) ;
30971: LD_ADDR_VAR 0 6
30975: PUSH
30976: LD_EXP 96
30980: PPUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL 36672 0 2
30990: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30991: LD_ADDR_VAR 0 8
30995: PUSH
30996: LD_EXP 98
31000: PUSH
31001: LD_EXP 97
31005: PUSH
31006: LD_VAR 0 6
31010: ARRAY
31011: MINUS
31012: ST_TO_ADDR
// if not minesFreeAmount then
31013: LD_VAR 0 8
31017: NOT
31018: IFFALSE 31022
// exit ;
31020: GO 31297
// tmp := [ ] ;
31022: LD_ADDR_VAR 0 7
31026: PUSH
31027: EMPTY
31028: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31029: LD_ADDR_VAR 0 5
31033: PUSH
31034: DOUBLE
31035: LD_INT 1
31037: DEC
31038: ST_TO_ADDR
31039: LD_VAR 0 8
31043: PUSH
31044: FOR_TO
31045: IFFALSE 31244
// begin _d := rand ( 0 , 5 ) ;
31047: LD_ADDR_VAR 0 11
31051: PUSH
31052: LD_INT 0
31054: PPUSH
31055: LD_INT 5
31057: PPUSH
31058: CALL_OW 12
31062: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31063: LD_ADDR_VAR 0 12
31067: PUSH
31068: LD_INT 2
31070: PPUSH
31071: LD_INT 6
31073: PPUSH
31074: CALL_OW 12
31078: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31079: LD_ADDR_VAR 0 9
31083: PUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: LD_VAR 0 11
31093: PPUSH
31094: LD_VAR 0 12
31098: PPUSH
31099: CALL_OW 272
31103: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31104: LD_ADDR_VAR 0 10
31108: PUSH
31109: LD_VAR 0 3
31113: PPUSH
31114: LD_VAR 0 11
31118: PPUSH
31119: LD_VAR 0 12
31123: PPUSH
31124: CALL_OW 273
31128: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31129: LD_VAR 0 9
31133: PPUSH
31134: LD_VAR 0 10
31138: PPUSH
31139: CALL_OW 488
31143: IFFALSE 31167
31145: PUSH
31146: LD_VAR 0 9
31150: PUSH
31151: LD_VAR 0 10
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_VAR 0 7
31164: IN
31165: NOT
31166: AND
31167: IFFALSE 31186
31169: PUSH
31170: LD_VAR 0 9
31174: PPUSH
31175: LD_VAR 0 10
31179: PPUSH
31180: CALL_OW 458
31184: NOT
31185: AND
31186: IFFALSE 31228
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31188: LD_ADDR_VAR 0 7
31192: PUSH
31193: LD_VAR 0 7
31197: PPUSH
31198: LD_VAR 0 7
31202: PUSH
31203: LD_INT 1
31205: PLUS
31206: PPUSH
31207: LD_VAR 0 9
31211: PUSH
31212: LD_VAR 0 10
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 1
31225: ST_TO_ADDR
31226: GO 31242
// i := i - 1 ;
31228: LD_ADDR_VAR 0 5
31232: PUSH
31233: LD_VAR 0 5
31237: PUSH
31238: LD_INT 1
31240: MINUS
31241: ST_TO_ADDR
// end ;
31242: GO 31044
31244: POP
31245: POP
// for i in tmp do
31246: LD_ADDR_VAR 0 5
31250: PUSH
31251: LD_VAR 0 7
31255: PUSH
31256: FOR_IN
31257: IFFALSE 31295
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31259: LD_VAR 0 1
31263: PPUSH
31264: LD_VAR 0 5
31268: PUSH
31269: LD_INT 1
31271: ARRAY
31272: PPUSH
31273: LD_VAR 0 5
31277: PUSH
31278: LD_INT 2
31280: ARRAY
31281: PPUSH
31282: CALL 30229 0 3
31286: NOT
31287: IFFALSE 31293
// exit ;
31289: POP
31290: POP
31291: GO 31297
31293: GO 31256
31295: POP
31296: POP
// end ;
31297: LD_VAR 0 4
31301: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
// if GetClass ( unit ) <> class_sniper then
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 257
31322: PUSH
31323: LD_INT 5
31325: NONEQUAL
31326: IFFALSE 31330
// exit ;
31328: GO 31800
// dist := 8 ;
31330: LD_ADDR_VAR 0 5
31334: PUSH
31335: LD_INT 8
31337: ST_TO_ADDR
// viewRange := 12 ;
31338: LD_ADDR_VAR 0 8
31342: PUSH
31343: LD_INT 12
31345: ST_TO_ADDR
// side := GetSide ( unit ) ;
31346: LD_ADDR_VAR 0 6
31350: PUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 255
31360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31361: LD_INT 61
31363: PPUSH
31364: LD_VAR 0 6
31368: PPUSH
31369: CALL_OW 321
31373: PUSH
31374: LD_INT 2
31376: EQUAL
31377: IFFALSE 31387
// viewRange := 16 ;
31379: LD_ADDR_VAR 0 8
31383: PUSH
31384: LD_INT 16
31386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31387: LD_VAR 0 1
31391: PPUSH
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: CALL_OW 297
31406: PUSH
31407: LD_VAR 0 5
31411: GREATER
31412: IFFALSE 31491
// begin ComMoveXY ( unit , x , y ) ;
31414: LD_VAR 0 1
31418: PPUSH
31419: LD_VAR 0 2
31423: PPUSH
31424: LD_VAR 0 3
31428: PPUSH
31429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31433: LD_INT 35
31435: PPUSH
31436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31440: LD_VAR 0 1
31444: PPUSH
31445: LD_VAR 0 2
31449: PPUSH
31450: LD_VAR 0 3
31454: PPUSH
31455: CALL 68718 0 3
31459: NOT
31460: IFFALSE 31464
// exit ;
31462: GO 31800
// until GetDistUnitXY ( unit , x , y ) < dist ;
31464: LD_VAR 0 1
31468: PPUSH
31469: LD_VAR 0 2
31473: PPUSH
31474: LD_VAR 0 3
31478: PPUSH
31479: CALL_OW 297
31483: PUSH
31484: LD_VAR 0 5
31488: LESS
31489: IFFALSE 31433
// end ; ComTurnXY ( unit , x , y ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_VAR 0 2
31500: PPUSH
31501: LD_VAR 0 3
31505: PPUSH
31506: CALL_OW 118
// repeat if Multiplayer then
31510: LD_OWVAR 4
31514: IFFALSE 31525
// wait ( 35 ) else
31516: LD_INT 35
31518: PPUSH
31519: CALL_OW 67
31523: GO 31532
// wait ( 5 ) ;
31525: LD_INT 5
31527: PPUSH
31528: CALL_OW 67
// _d := GetDir ( unit ) ;
31532: LD_ADDR_VAR 0 11
31536: PUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL_OW 254
31546: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31547: LD_ADDR_VAR 0 7
31551: PUSH
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 250
31561: PPUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 251
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: CALL 71354 0 4
31586: ST_TO_ADDR
// until dir = _d ;
31587: LD_VAR 0 7
31591: PUSH
31592: LD_VAR 0 11
31596: EQUAL
31597: IFFALSE 31510
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 250
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_VAR 0 5
31623: PPUSH
31624: CALL_OW 272
31628: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31629: LD_ADDR_VAR 0 10
31633: PUSH
31634: LD_VAR 0 1
31638: PPUSH
31639: CALL_OW 251
31643: PPUSH
31644: LD_VAR 0 7
31648: PPUSH
31649: LD_VAR 0 5
31653: PPUSH
31654: CALL_OW 273
31658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31659: LD_VAR 0 9
31663: PPUSH
31664: LD_VAR 0 10
31668: PPUSH
31669: CALL_OW 488
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31800
// ComAnimCustom ( unit , 1 ) ;
31678: LD_VAR 0 1
31682: PPUSH
31683: LD_INT 1
31685: PPUSH
31686: CALL_OW 592
// p := 0 ;
31690: LD_ADDR_VAR 0 12
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31698: LD_VAR 0 9
31702: PPUSH
31703: LD_VAR 0 10
31707: PPUSH
31708: LD_VAR 0 6
31712: PPUSH
31713: LD_VAR 0 8
31717: PPUSH
31718: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
31722: LD_INT 35
31724: PPUSH
31725: CALL_OW 67
// p := Inc ( p ) ;
31729: LD_ADDR_VAR 0 12
31733: PUSH
31734: LD_VAR 0 12
31738: PPUSH
31739: CALL 71310 0 1
31743: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
31744: LD_VAR 0 12
31748: PUSH
31749: LD_INT 3
31751: EQUAL
31752: IFTRUE 31766
31754: PUSH
31755: LD_VAR 0 1
31759: PPUSH
31760: CALL_OW 302
31764: NOT
31765: OR
31766: IFTRUE 31779
31768: PUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 301
31778: OR
31779: IFFALSE 31722
// RemoveSeeing ( _x , _y , side ) ;
31781: LD_VAR 0 9
31785: PPUSH
31786: LD_VAR 0 10
31790: PPUSH
31791: LD_VAR 0 6
31795: PPUSH
31796: CALL_OW 331
// end ; end_of_file
31800: LD_VAR 0 4
31804: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
// if exist_mode then
31809: LD_VAR 0 2
31813: IFFALSE 31859
// begin unit := CreateCharacter ( prefix & ident ) ;
31815: LD_ADDR_VAR 0 5
31819: PUSH
31820: LD_VAR 0 3
31824: PUSH
31825: LD_VAR 0 1
31829: STR
31830: PPUSH
31831: CALL_OW 34
31835: ST_TO_ADDR
// if unit then
31836: LD_VAR 0 5
31840: IFFALSE 31857
// DeleteCharacters ( prefix & ident ) ;
31842: LD_VAR 0 3
31846: PUSH
31847: LD_VAR 0 1
31851: STR
31852: PPUSH
31853: CALL_OW 40
// end else
31857: GO 31874
// unit := NewCharacter ( ident ) ;
31859: LD_ADDR_VAR 0 5
31863: PUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL_OW 25
31873: ST_TO_ADDR
// result := unit ;
31874: LD_ADDR_VAR 0 4
31878: PUSH
31879: LD_VAR 0 5
31883: ST_TO_ADDR
// end ;
31884: LD_VAR 0 4
31888: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31889: LD_INT 0
31891: PPUSH
31892: PPUSH
// if exist_mode then
31893: LD_VAR 0 2
31897: IFFALSE 31922
// unit := CreateCharacter ( prefix & ident ) else
31899: LD_ADDR_VAR 0 5
31903: PUSH
31904: LD_VAR 0 3
31908: PUSH
31909: LD_VAR 0 1
31913: STR
31914: PPUSH
31915: CALL_OW 34
31919: ST_TO_ADDR
31920: GO 31937
// unit := NewCharacter ( ident ) ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: CALL_OW 25
31936: ST_TO_ADDR
// result := unit ;
31937: LD_ADDR_VAR 0 4
31941: PUSH
31942: LD_VAR 0 5
31946: ST_TO_ADDR
// end ;
31947: LD_VAR 0 4
31951: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
// if not side or not nation then
31956: LD_VAR 0 1
31960: NOT
31961: IFTRUE 31970
31963: PUSH
31964: LD_VAR 0 2
31968: NOT
31969: OR
31970: IFFALSE 31974
// exit ;
31972: GO 32744
// case nation of nation_american :
31974: LD_VAR 0 2
31978: PUSH
31979: LD_INT 1
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 32201
31987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31988: LD_ADDR_VAR 0 4
31992: PUSH
31993: LD_INT 35
31995: PUSH
31996: LD_INT 45
31998: PUSH
31999: LD_INT 46
32001: PUSH
32002: LD_INT 47
32004: PUSH
32005: LD_INT 82
32007: PUSH
32008: LD_INT 83
32010: PUSH
32011: LD_INT 84
32013: PUSH
32014: LD_INT 85
32016: PUSH
32017: LD_INT 86
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: LD_INT 6
32028: PUSH
32029: LD_INT 15
32031: PUSH
32032: LD_INT 16
32034: PUSH
32035: LD_INT 7
32037: PUSH
32038: LD_INT 12
32040: PUSH
32041: LD_INT 13
32043: PUSH
32044: LD_INT 10
32046: PUSH
32047: LD_INT 14
32049: PUSH
32050: LD_INT 20
32052: PUSH
32053: LD_INT 21
32055: PUSH
32056: LD_INT 22
32058: PUSH
32059: LD_INT 25
32061: PUSH
32062: LD_INT 32
32064: PUSH
32065: LD_INT 27
32067: PUSH
32068: LD_INT 36
32070: PUSH
32071: LD_INT 69
32073: PUSH
32074: LD_INT 39
32076: PUSH
32077: LD_INT 34
32079: PUSH
32080: LD_INT 40
32082: PUSH
32083: LD_INT 48
32085: PUSH
32086: LD_INT 49
32088: PUSH
32089: LD_INT 50
32091: PUSH
32092: LD_INT 51
32094: PUSH
32095: LD_INT 52
32097: PUSH
32098: LD_INT 53
32100: PUSH
32101: LD_INT 54
32103: PUSH
32104: LD_INT 55
32106: PUSH
32107: LD_INT 56
32109: PUSH
32110: LD_INT 57
32112: PUSH
32113: LD_INT 58
32115: PUSH
32116: LD_INT 59
32118: PUSH
32119: LD_INT 60
32121: PUSH
32122: LD_INT 61
32124: PUSH
32125: LD_INT 62
32127: PUSH
32128: LD_INT 80
32130: PUSH
32131: LD_INT 82
32133: PUSH
32134: LD_INT 83
32136: PUSH
32137: LD_INT 84
32139: PUSH
32140: LD_INT 85
32142: PUSH
32143: LD_INT 86
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
32199: GO 32666
32201: LD_INT 2
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32435
32209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_INT 35
32217: PUSH
32218: LD_INT 45
32220: PUSH
32221: LD_INT 46
32223: PUSH
32224: LD_INT 47
32226: PUSH
32227: LD_INT 82
32229: PUSH
32230: LD_INT 83
32232: PUSH
32233: LD_INT 84
32235: PUSH
32236: LD_INT 85
32238: PUSH
32239: LD_INT 87
32241: PUSH
32242: LD_INT 70
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 11
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: LD_INT 5
32259: PUSH
32260: LD_INT 6
32262: PUSH
32263: LD_INT 15
32265: PUSH
32266: LD_INT 18
32268: PUSH
32269: LD_INT 7
32271: PUSH
32272: LD_INT 17
32274: PUSH
32275: LD_INT 8
32277: PUSH
32278: LD_INT 20
32280: PUSH
32281: LD_INT 21
32283: PUSH
32284: LD_INT 22
32286: PUSH
32287: LD_INT 72
32289: PUSH
32290: LD_INT 26
32292: PUSH
32293: LD_INT 69
32295: PUSH
32296: LD_INT 39
32298: PUSH
32299: LD_INT 40
32301: PUSH
32302: LD_INT 41
32304: PUSH
32305: LD_INT 42
32307: PUSH
32308: LD_INT 43
32310: PUSH
32311: LD_INT 48
32313: PUSH
32314: LD_INT 49
32316: PUSH
32317: LD_INT 50
32319: PUSH
32320: LD_INT 51
32322: PUSH
32323: LD_INT 52
32325: PUSH
32326: LD_INT 53
32328: PUSH
32329: LD_INT 54
32331: PUSH
32332: LD_INT 55
32334: PUSH
32335: LD_INT 56
32337: PUSH
32338: LD_INT 60
32340: PUSH
32341: LD_INT 61
32343: PUSH
32344: LD_INT 62
32346: PUSH
32347: LD_INT 66
32349: PUSH
32350: LD_INT 67
32352: PUSH
32353: LD_INT 68
32355: PUSH
32356: LD_INT 81
32358: PUSH
32359: LD_INT 82
32361: PUSH
32362: LD_INT 83
32364: PUSH
32365: LD_INT 84
32367: PUSH
32368: LD_INT 85
32370: PUSH
32371: LD_INT 87
32373: PUSH
32374: LD_INT 88
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
32433: GO 32666
32435: LD_INT 3
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32443
32441: GO 32665
32443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32444: LD_ADDR_VAR 0 4
32448: PUSH
32449: LD_INT 46
32451: PUSH
32452: LD_INT 47
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 82
32463: PUSH
32464: LD_INT 83
32466: PUSH
32467: LD_INT 84
32469: PUSH
32470: LD_INT 85
32472: PUSH
32473: LD_INT 86
32475: PUSH
32476: LD_INT 11
32478: PUSH
32479: LD_INT 9
32481: PUSH
32482: LD_INT 20
32484: PUSH
32485: LD_INT 19
32487: PUSH
32488: LD_INT 21
32490: PUSH
32491: LD_INT 24
32493: PUSH
32494: LD_INT 22
32496: PUSH
32497: LD_INT 25
32499: PUSH
32500: LD_INT 28
32502: PUSH
32503: LD_INT 29
32505: PUSH
32506: LD_INT 30
32508: PUSH
32509: LD_INT 31
32511: PUSH
32512: LD_INT 37
32514: PUSH
32515: LD_INT 38
32517: PUSH
32518: LD_INT 32
32520: PUSH
32521: LD_INT 27
32523: PUSH
32524: LD_INT 33
32526: PUSH
32527: LD_INT 69
32529: PUSH
32530: LD_INT 39
32532: PUSH
32533: LD_INT 34
32535: PUSH
32536: LD_INT 40
32538: PUSH
32539: LD_INT 71
32541: PUSH
32542: LD_INT 23
32544: PUSH
32545: LD_INT 44
32547: PUSH
32548: LD_INT 48
32550: PUSH
32551: LD_INT 49
32553: PUSH
32554: LD_INT 50
32556: PUSH
32557: LD_INT 51
32559: PUSH
32560: LD_INT 52
32562: PUSH
32563: LD_INT 53
32565: PUSH
32566: LD_INT 54
32568: PUSH
32569: LD_INT 55
32571: PUSH
32572: LD_INT 56
32574: PUSH
32575: LD_INT 57
32577: PUSH
32578: LD_INT 58
32580: PUSH
32581: LD_INT 59
32583: PUSH
32584: LD_INT 63
32586: PUSH
32587: LD_INT 64
32589: PUSH
32590: LD_INT 65
32592: PUSH
32593: LD_INT 82
32595: PUSH
32596: LD_INT 83
32598: PUSH
32599: LD_INT 84
32601: PUSH
32602: LD_INT 85
32604: PUSH
32605: LD_INT 86
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: ST_TO_ADDR
32663: GO 32666
32665: POP
// if state > - 1 and state < 3 then
32666: LD_VAR 0 3
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: GREATER
32675: IFFALSE 32687
32677: PUSH
32678: LD_VAR 0 3
32682: PUSH
32683: LD_INT 3
32685: LESS
32686: AND
32687: IFFALSE 32744
// for i in result do
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 4
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32742
// if GetTech ( i , side ) <> state then
32702: LD_VAR 0 5
32706: PPUSH
32707: LD_VAR 0 1
32711: PPUSH
32712: CALL_OW 321
32716: PUSH
32717: LD_VAR 0 3
32721: NONEQUAL
32722: IFFALSE 32740
// result := result diff i ;
32724: LD_ADDR_VAR 0 4
32728: PUSH
32729: LD_VAR 0 4
32733: PUSH
32734: LD_VAR 0 5
32738: DIFF
32739: ST_TO_ADDR
32740: GO 32699
32742: POP
32743: POP
// end ;
32744: LD_VAR 0 4
32748: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32749: LD_INT 0
32751: PPUSH
32752: PPUSH
32753: PPUSH
// result := true ;
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 1
32761: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32762: LD_ADDR_VAR 0 5
32766: PUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: CALL_OW 480
32776: ST_TO_ADDR
// if not tmp then
32777: LD_VAR 0 5
32781: NOT
32782: IFFALSE 32786
// exit ;
32784: GO 32835
// for i in tmp do
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_VAR 0 5
32795: PUSH
32796: FOR_IN
32797: IFFALSE 32833
// if GetTech ( i , side ) <> state_researched then
32799: LD_VAR 0 4
32803: PPUSH
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 321
32813: PUSH
32814: LD_INT 2
32816: NONEQUAL
32817: IFFALSE 32831
// begin result := false ;
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 0
32826: ST_TO_ADDR
// exit ;
32827: POP
32828: POP
32829: GO 32835
// end ;
32831: GO 32796
32833: POP
32834: POP
// end ;
32835: LD_VAR 0 3
32839: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
32854: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32855: LD_VAR 0 1
32859: NOT
32860: IFTRUE 32877
32862: PUSH
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 257
32872: PUSH
32873: LD_INT 9
32875: NONEQUAL
32876: OR
32877: IFFALSE 32881
// exit ;
32879: GO 33460
// side := GetSide ( unit ) ;
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 255
32895: ST_TO_ADDR
// tech_space := tech_spacanom ;
32896: LD_ADDR_VAR 0 12
32900: PUSH
32901: LD_INT 29
32903: ST_TO_ADDR
// tech_time := tech_taurad ;
32904: LD_ADDR_VAR 0 13
32908: PUSH
32909: LD_INT 28
32911: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32912: LD_ADDR_VAR 0 11
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 310
32926: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32927: LD_VAR 0 11
32931: PPUSH
32932: CALL_OW 247
32936: PUSH
32937: LD_INT 2
32939: EQUAL
32940: IFFALSE 32944
// exit ;
32942: GO 33460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32944: LD_ADDR_VAR 0 8
32948: PUSH
32949: LD_INT 81
32951: PUSH
32952: LD_VAR 0 9
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: LD_INT 21
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PPUSH
32982: CALL_OW 69
32986: ST_TO_ADDR
// if not tmp then
32987: LD_VAR 0 8
32991: NOT
32992: IFFALSE 32996
// exit ;
32994: GO 33460
// if in_unit then
32996: LD_VAR 0 11
33000: IFFALSE 33024
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33002: LD_ADDR_VAR 0 10
33006: PUSH
33007: LD_VAR 0 8
33011: PPUSH
33012: LD_VAR 0 11
33016: PPUSH
33017: CALL_OW 74
33021: ST_TO_ADDR
33022: GO 33044
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33024: LD_ADDR_VAR 0 10
33028: PUSH
33029: LD_VAR 0 8
33033: PPUSH
33034: LD_VAR 0 1
33038: PPUSH
33039: CALL_OW 74
33043: ST_TO_ADDR
// if not enemy then
33044: LD_VAR 0 10
33048: NOT
33049: IFFALSE 33053
// exit ;
33051: GO 33460
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33053: LD_VAR 0 11
33057: IFFALSE 33079
33059: PUSH
33060: LD_VAR 0 11
33064: PPUSH
33065: LD_VAR 0 10
33069: PPUSH
33070: CALL_OW 296
33074: PUSH
33075: LD_INT 13
33077: GREATER
33078: AND
33079: IFTRUE 33101
33081: PUSH
33082: LD_VAR 0 1
33086: PPUSH
33087: LD_VAR 0 10
33091: PPUSH
33092: CALL_OW 296
33096: PUSH
33097: LD_INT 12
33099: GREATER
33100: OR
33101: IFFALSE 33105
// exit ;
33103: GO 33460
// missile := [ 1 ] ;
33105: LD_ADDR_VAR 0 14
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33116: LD_VAR 0 9
33120: PPUSH
33121: LD_VAR 0 12
33125: PPUSH
33126: CALL_OW 325
33130: IFFALSE 33159
// missile := Replace ( missile , missile + 1 , 2 ) ;
33132: LD_ADDR_VAR 0 14
33136: PUSH
33137: LD_VAR 0 14
33141: PPUSH
33142: LD_VAR 0 14
33146: PUSH
33147: LD_INT 1
33149: PLUS
33150: PPUSH
33151: LD_INT 2
33153: PPUSH
33154: CALL_OW 1
33158: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33159: LD_VAR 0 9
33163: PPUSH
33164: LD_VAR 0 13
33168: PPUSH
33169: CALL_OW 325
33173: IFFALSE 33197
33175: PUSH
33176: LD_VAR 0 10
33180: PPUSH
33181: CALL_OW 255
33185: PPUSH
33186: LD_VAR 0 13
33190: PPUSH
33191: CALL_OW 325
33195: NOT
33196: AND
33197: IFFALSE 33226
// missile := Replace ( missile , missile + 1 , 3 ) ;
33199: LD_ADDR_VAR 0 14
33203: PUSH
33204: LD_VAR 0 14
33208: PPUSH
33209: LD_VAR 0 14
33213: PUSH
33214: LD_INT 1
33216: PLUS
33217: PPUSH
33218: LD_INT 3
33220: PPUSH
33221: CALL_OW 1
33225: ST_TO_ADDR
// if missile < 2 then
33226: LD_VAR 0 14
33230: PUSH
33231: LD_INT 2
33233: LESS
33234: IFFALSE 33238
// exit ;
33236: GO 33460
// x := GetX ( enemy ) ;
33238: LD_ADDR_VAR 0 4
33242: PUSH
33243: LD_VAR 0 10
33247: PPUSH
33248: CALL_OW 250
33252: ST_TO_ADDR
// y := GetY ( enemy ) ;
33253: LD_ADDR_VAR 0 5
33257: PUSH
33258: LD_VAR 0 10
33262: PPUSH
33263: CALL_OW 251
33267: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33268: LD_ADDR_VAR 0 6
33272: PUSH
33273: LD_VAR 0 4
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PPUSH
33282: LD_INT 1
33284: PPUSH
33285: CALL_OW 12
33289: PLUS
33290: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33291: LD_ADDR_VAR 0 7
33295: PUSH
33296: LD_VAR 0 5
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: CALL_OW 12
33312: PLUS
33313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33314: LD_VAR 0 6
33318: PPUSH
33319: LD_VAR 0 7
33323: PPUSH
33324: CALL_OW 488
33328: NOT
33329: IFFALSE 33351
// begin _x := x ;
33331: LD_ADDR_VAR 0 6
33335: PUSH
33336: LD_VAR 0 4
33340: ST_TO_ADDR
// _y := y ;
33341: LD_ADDR_VAR 0 7
33345: PUSH
33346: LD_VAR 0 5
33350: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_INT 1
33358: PPUSH
33359: LD_VAR 0 14
33363: PPUSH
33364: CALL_OW 12
33368: ST_TO_ADDR
// case i of 1 :
33369: LD_VAR 0 3
33373: PUSH
33374: LD_INT 1
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33399
33382: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_VAR 0 10
33392: PPUSH
33393: CALL_OW 115
33397: GO 33460
33399: LD_INT 2
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33429
33407: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33408: LD_VAR 0 1
33412: PPUSH
33413: LD_VAR 0 6
33417: PPUSH
33418: LD_VAR 0 7
33422: PPUSH
33423: CALL_OW 153
33427: GO 33460
33429: LD_INT 3
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33459
33437: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 6
33447: PPUSH
33448: LD_VAR 0 7
33452: PPUSH
33453: CALL_OW 154
33457: GO 33460
33459: POP
// end ;
33460: LD_VAR 0 2
33464: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33465: LD_INT 0
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
// if not unit or not building then
33473: LD_VAR 0 1
33477: NOT
33478: IFTRUE 33487
33480: PUSH
33481: LD_VAR 0 2
33485: NOT
33486: OR
33487: IFFALSE 33491
// exit ;
33489: GO 33649
// x := GetX ( building ) ;
33491: LD_ADDR_VAR 0 5
33495: PUSH
33496: LD_VAR 0 2
33500: PPUSH
33501: CALL_OW 250
33505: ST_TO_ADDR
// y := GetY ( building ) ;
33506: LD_ADDR_VAR 0 6
33510: PUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: CALL_OW 251
33520: ST_TO_ADDR
// for i := 0 to 5 do
33521: LD_ADDR_VAR 0 4
33525: PUSH
33526: DOUBLE
33527: LD_INT 0
33529: DEC
33530: ST_TO_ADDR
33531: LD_INT 5
33533: PUSH
33534: FOR_TO
33535: IFFALSE 33647
// begin _x := ShiftX ( x , i , 3 ) ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 5
33546: PPUSH
33547: LD_VAR 0 4
33551: PPUSH
33552: LD_INT 3
33554: PPUSH
33555: CALL_OW 272
33559: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33560: LD_ADDR_VAR 0 8
33564: PUSH
33565: LD_VAR 0 6
33569: PPUSH
33570: LD_VAR 0 4
33574: PPUSH
33575: LD_INT 3
33577: PPUSH
33578: CALL_OW 273
33582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33583: LD_VAR 0 7
33587: PPUSH
33588: LD_VAR 0 8
33592: PPUSH
33593: CALL_OW 488
33597: NOT
33598: IFFALSE 33602
// continue ;
33600: GO 33534
// if HexInfo ( _x , _y ) = 0 then
33602: LD_VAR 0 7
33606: PPUSH
33607: LD_VAR 0 8
33611: PPUSH
33612: CALL_OW 428
33616: PUSH
33617: LD_INT 0
33619: EQUAL
33620: IFFALSE 33645
// begin ComMoveXY ( unit , _x , _y ) ;
33622: LD_VAR 0 1
33626: PPUSH
33627: LD_VAR 0 7
33631: PPUSH
33632: LD_VAR 0 8
33636: PPUSH
33637: CALL_OW 111
// exit ;
33641: POP
33642: POP
33643: GO 33649
// end ; end ;
33645: GO 33534
33647: POP
33648: POP
// end ;
33649: LD_VAR 0 3
33653: RET
// export function ScanBase ( side , base_area ) ; begin
33654: LD_INT 0
33656: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33657: LD_ADDR_VAR 0 3
33661: PUSH
33662: LD_VAR 0 2
33666: PPUSH
33667: LD_INT 81
33669: PUSH
33670: LD_VAR 0 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL_OW 70
33683: ST_TO_ADDR
// end ;
33684: LD_VAR 0 3
33688: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33689: LD_INT 0
33691: PPUSH
33692: PPUSH
33693: PPUSH
33694: PPUSH
// result := false ;
33695: LD_ADDR_VAR 0 2
33699: PUSH
33700: LD_INT 0
33702: ST_TO_ADDR
// side := GetSide ( unit ) ;
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 255
33717: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33718: LD_ADDR_VAR 0 4
33722: PUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: CALL_OW 248
33732: ST_TO_ADDR
// case nat of 1 :
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 1
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33757
33746: POP
// tech := tech_lassight ; 2 :
33747: LD_ADDR_VAR 0 5
33751: PUSH
33752: LD_INT 12
33754: ST_TO_ADDR
33755: GO 33796
33757: LD_INT 2
33759: DOUBLE
33760: EQUAL
33761: IFTRUE 33765
33763: GO 33776
33765: POP
// tech := tech_mortar ; 3 :
33766: LD_ADDR_VAR 0 5
33770: PUSH
33771: LD_INT 41
33773: ST_TO_ADDR
33774: GO 33796
33776: LD_INT 3
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33784
33782: GO 33795
33784: POP
// tech := tech_bazooka ; end ;
33785: LD_ADDR_VAR 0 5
33789: PUSH
33790: LD_INT 44
33792: ST_TO_ADDR
33793: GO 33796
33795: POP
// if Researched ( side , tech ) then
33796: LD_VAR 0 3
33800: PPUSH
33801: LD_VAR 0 5
33805: PPUSH
33806: CALL_OW 325
33810: IFFALSE 33837
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33812: LD_ADDR_VAR 0 2
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: LD_INT 8
33822: PUSH
33823: LD_INT 9
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: PUSH
33831: LD_VAR 0 4
33835: ARRAY
33836: ST_TO_ADDR
// end ;
33837: LD_VAR 0 2
33841: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
33846: PPUSH
// if not mines then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 34000
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33856: LD_ADDR_VAR 0 5
33860: PUSH
33861: LD_INT 81
33863: PUSH
33864: LD_VAR 0 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: PUSH
33876: LD_INT 21
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PPUSH
33894: CALL_OW 69
33898: ST_TO_ADDR
// for i in mines do
33899: LD_ADDR_VAR 0 4
33903: PUSH
33904: LD_VAR 0 2
33908: PUSH
33909: FOR_IN
33910: IFFALSE 33998
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33912: LD_VAR 0 4
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: PPUSH
33921: LD_VAR 0 4
33925: PUSH
33926: LD_INT 2
33928: ARRAY
33929: PPUSH
33930: CALL_OW 458
33934: NOT
33935: IFFALSE 33939
// continue ;
33937: GO 33909
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33939: LD_VAR 0 4
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PPUSH
33948: LD_VAR 0 4
33952: PUSH
33953: LD_INT 2
33955: ARRAY
33956: PPUSH
33957: CALL_OW 428
33961: PUSH
33962: LD_VAR 0 5
33966: IN
33967: IFFALSE 33996
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33969: LD_VAR 0 4
33973: PUSH
33974: LD_INT 1
33976: ARRAY
33977: PPUSH
33978: LD_VAR 0 4
33982: PUSH
33983: LD_INT 2
33985: ARRAY
33986: PPUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 456
// end ;
33996: GO 33909
33998: POP
33999: POP
// end ;
34000: LD_VAR 0 3
34004: RET
// export function Count ( array ) ; begin
34005: LD_INT 0
34007: PPUSH
// result := array + 0 ;
34008: LD_ADDR_VAR 0 2
34012: PUSH
34013: LD_VAR 0 1
34017: PUSH
34018: LD_INT 0
34020: PLUS
34021: ST_TO_ADDR
// end ;
34022: LD_VAR 0 2
34026: RET
// export function IsEmpty ( building ) ; begin
34027: LD_INT 0
34029: PPUSH
// if not building then
34030: LD_VAR 0 1
34034: NOT
34035: IFFALSE 34039
// exit ;
34037: GO 34082
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34039: LD_ADDR_VAR 0 2
34043: PUSH
34044: LD_VAR 0 1
34048: PUSH
34049: LD_INT 22
34051: PUSH
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 255
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 58
34068: PUSH
34069: EMPTY
34070: LIST
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 69
34080: IN
34081: ST_TO_ADDR
// end ;
34082: LD_VAR 0 2
34086: RET
// export function IsNotFull ( building ) ; var places ; begin
34087: LD_INT 0
34089: PPUSH
34090: PPUSH
// if not building then
34091: LD_VAR 0 1
34095: NOT
34096: IFFALSE 34100
// exit ;
34098: GO 34128
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34100: LD_ADDR_VAR 0 2
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 62
34115: PUSH
34116: EMPTY
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PPUSH
34123: CALL_OW 72
34127: ST_TO_ADDR
// end ;
34128: LD_VAR 0 2
34132: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34133: LD_INT 0
34135: PPUSH
34136: PPUSH
34137: PPUSH
34138: PPUSH
// tmp := [ ] ;
34139: LD_ADDR_VAR 0 3
34143: PUSH
34144: EMPTY
34145: ST_TO_ADDR
// list := [ ] ;
34146: LD_ADDR_VAR 0 5
34150: PUSH
34151: EMPTY
34152: ST_TO_ADDR
// for i = 16 to 25 do
34153: LD_ADDR_VAR 0 4
34157: PUSH
34158: DOUBLE
34159: LD_INT 16
34161: DEC
34162: ST_TO_ADDR
34163: LD_INT 25
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34240
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_VAR 0 3
34178: PUSH
34179: LD_INT 22
34181: PUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 255
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 91
34198: PUSH
34199: LD_VAR 0 1
34203: PUSH
34204: LD_INT 6
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 30
34214: PUSH
34215: LD_VAR 0 4
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: PPUSH
34232: CALL_OW 69
34236: ADD
34237: ST_TO_ADDR
34238: GO 34166
34240: POP
34241: POP
// for i = 1 to tmp do
34242: LD_ADDR_VAR 0 4
34246: PUSH
34247: DOUBLE
34248: LD_INT 1
34250: DEC
34251: ST_TO_ADDR
34252: LD_VAR 0 3
34256: PUSH
34257: FOR_TO
34258: IFFALSE 34346
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34260: LD_ADDR_VAR 0 5
34264: PUSH
34265: LD_VAR 0 5
34269: PUSH
34270: LD_VAR 0 3
34274: PUSH
34275: LD_VAR 0 4
34279: ARRAY
34280: PPUSH
34281: CALL_OW 266
34285: PUSH
34286: LD_VAR 0 3
34290: PUSH
34291: LD_VAR 0 4
34295: ARRAY
34296: PPUSH
34297: CALL_OW 250
34301: PUSH
34302: LD_VAR 0 3
34306: PUSH
34307: LD_VAR 0 4
34311: ARRAY
34312: PPUSH
34313: CALL_OW 251
34317: PUSH
34318: LD_VAR 0 3
34322: PUSH
34323: LD_VAR 0 4
34327: ARRAY
34328: PPUSH
34329: CALL_OW 254
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: PUSH
34340: EMPTY
34341: LIST
34342: ADD
34343: ST_TO_ADDR
34344: GO 34257
34346: POP
34347: POP
// result := list ;
34348: LD_ADDR_VAR 0 2
34352: PUSH
34353: LD_VAR 0 5
34357: ST_TO_ADDR
// end ;
34358: LD_VAR 0 2
34362: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
// if not factory then
34372: LD_VAR 0 1
34376: NOT
34377: IFFALSE 34381
// exit ;
34379: GO 34984
// if control = control_apeman then
34381: LD_VAR 0 4
34385: PUSH
34386: LD_INT 5
34388: EQUAL
34389: IFFALSE 34498
// begin tmp := UnitsInside ( factory ) ;
34391: LD_ADDR_VAR 0 8
34395: PUSH
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 313
34405: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34406: LD_VAR 0 8
34410: PPUSH
34411: LD_INT 25
34413: PUSH
34414: LD_INT 12
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PPUSH
34421: CALL_OW 72
34425: NOT
34426: IFFALSE 34436
// control := control_manual ;
34428: LD_ADDR_VAR 0 4
34432: PUSH
34433: LD_INT 1
34435: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34436: LD_ADDR_VAR 0 8
34440: PUSH
34441: LD_VAR 0 1
34445: PPUSH
34446: CALL 34133 0 1
34450: ST_TO_ADDR
// if tmp then
34451: LD_VAR 0 8
34455: IFFALSE 34498
// begin for i in tmp do
34457: LD_ADDR_VAR 0 7
34461: PUSH
34462: LD_VAR 0 8
34466: PUSH
34467: FOR_IN
34468: IFFALSE 34496
// if i [ 1 ] = b_ext_radio then
34470: LD_VAR 0 7
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: PUSH
34479: LD_INT 22
34481: EQUAL
34482: IFFALSE 34494
// begin control := control_remote ;
34484: LD_ADDR_VAR 0 4
34488: PUSH
34489: LD_INT 2
34491: ST_TO_ADDR
// break ;
34492: GO 34496
// end ;
34494: GO 34467
34496: POP
34497: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34498: LD_VAR 0 1
34502: PPUSH
34503: LD_VAR 0 2
34507: PPUSH
34508: LD_VAR 0 3
34512: PPUSH
34513: LD_VAR 0 4
34517: PPUSH
34518: LD_VAR 0 5
34522: PPUSH
34523: CALL_OW 448
34527: IFFALSE 34562
// begin result := [ chassis , engine , control , weapon ] ;
34529: LD_ADDR_VAR 0 6
34533: PUSH
34534: LD_VAR 0 2
34538: PUSH
34539: LD_VAR 0 3
34543: PUSH
34544: LD_VAR 0 4
34548: PUSH
34549: LD_VAR 0 5
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: ST_TO_ADDR
// exit ;
34560: GO 34984
// end ; _chassis := AvailableChassisList ( factory ) ;
34562: LD_ADDR_VAR 0 9
34566: PUSH
34567: LD_VAR 0 1
34571: PPUSH
34572: CALL_OW 475
34576: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 476
34591: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34592: LD_ADDR_VAR 0 12
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 477
34606: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34607: LD_ADDR_VAR 0 10
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 478
34621: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34622: LD_VAR 0 9
34626: NOT
34627: IFTRUE 34636
34629: PUSH
34630: LD_VAR 0 11
34634: NOT
34635: OR
34636: IFTRUE 34645
34638: PUSH
34639: LD_VAR 0 12
34643: NOT
34644: OR
34645: IFTRUE 34654
34647: PUSH
34648: LD_VAR 0 10
34652: NOT
34653: OR
34654: IFFALSE 34689
// begin result := [ chassis , engine , control , weapon ] ;
34656: LD_ADDR_VAR 0 6
34660: PUSH
34661: LD_VAR 0 2
34665: PUSH
34666: LD_VAR 0 3
34670: PUSH
34671: LD_VAR 0 4
34675: PUSH
34676: LD_VAR 0 5
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// exit ;
34687: GO 34984
// end ; if not chassis in _chassis then
34689: LD_VAR 0 2
34693: PUSH
34694: LD_VAR 0 9
34698: IN
34699: NOT
34700: IFFALSE 34726
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_VAR 0 9
34711: PUSH
34712: LD_INT 1
34714: PPUSH
34715: LD_VAR 0 9
34719: PPUSH
34720: CALL_OW 12
34724: ARRAY
34725: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34726: LD_VAR 0 2
34730: PPUSH
34731: LD_VAR 0 3
34735: PPUSH
34736: CALL 34989 0 2
34740: NOT
34741: IFFALSE 34802
// repeat engine := _engine [ 1 ] ;
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_VAR 0 11
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34757: LD_ADDR_VAR 0 11
34761: PUSH
34762: LD_VAR 0 11
34766: PPUSH
34767: LD_INT 1
34769: PPUSH
34770: CALL_OW 3
34774: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34775: LD_VAR 0 2
34779: PPUSH
34780: LD_VAR 0 3
34784: PPUSH
34785: CALL 34989 0 2
34789: IFTRUE 34800
34791: PUSH
34792: LD_VAR 0 11
34796: PUSH
34797: EMPTY
34798: EQUAL
34799: OR
34800: IFFALSE 34743
// if not control in _control then
34802: LD_VAR 0 4
34806: PUSH
34807: LD_VAR 0 12
34811: IN
34812: NOT
34813: IFFALSE 34839
// control := _control [ rand ( 1 , _control ) ] ;
34815: LD_ADDR_VAR 0 4
34819: PUSH
34820: LD_VAR 0 12
34824: PUSH
34825: LD_INT 1
34827: PPUSH
34828: LD_VAR 0 12
34832: PPUSH
34833: CALL_OW 12
34837: ARRAY
34838: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34839: LD_VAR 0 2
34843: PPUSH
34844: LD_VAR 0 5
34848: PPUSH
34849: CALL 35211 0 2
34853: NOT
34854: IFFALSE 34915
// repeat weapon := _weapon [ 1 ] ;
34856: LD_ADDR_VAR 0 5
34860: PUSH
34861: LD_VAR 0 10
34865: PUSH
34866: LD_INT 1
34868: ARRAY
34869: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34870: LD_ADDR_VAR 0 10
34874: PUSH
34875: LD_VAR 0 10
34879: PPUSH
34880: LD_INT 1
34882: PPUSH
34883: CALL_OW 3
34887: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34888: LD_VAR 0 2
34892: PPUSH
34893: LD_VAR 0 5
34897: PPUSH
34898: CALL 35211 0 2
34902: IFTRUE 34913
34904: PUSH
34905: LD_VAR 0 10
34909: PUSH
34910: EMPTY
34911: EQUAL
34912: OR
34913: IFFALSE 34856
// result := [ ] ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: EMPTY
34921: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 2
34931: PPUSH
34932: LD_VAR 0 3
34936: PPUSH
34937: LD_VAR 0 4
34941: PPUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: CALL_OW 448
34951: IFFALSE 34984
// result := [ chassis , engine , control , weapon ] ;
34953: LD_ADDR_VAR 0 6
34957: PUSH
34958: LD_VAR 0 2
34962: PUSH
34963: LD_VAR 0 3
34967: PUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_VAR 0 5
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// end ;
34984: LD_VAR 0 6
34988: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34989: LD_INT 0
34991: PPUSH
// if not chassis or not engine then
34992: LD_VAR 0 1
34996: NOT
34997: IFTRUE 35006
34999: PUSH
35000: LD_VAR 0 2
35004: NOT
35005: OR
35006: IFFALSE 35010
// exit ;
35008: GO 35206
// case engine of engine_solar :
35010: LD_VAR 0 2
35014: PUSH
35015: LD_INT 2
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35061
35023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_INT 11
35031: PUSH
35032: LD_INT 12
35034: PUSH
35035: LD_INT 13
35037: PUSH
35038: LD_INT 14
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
35059: GO 35190
35061: LD_INT 1
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35131
35069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 11
35077: PUSH
35078: LD_INT 12
35080: PUSH
35081: LD_INT 13
35083: PUSH
35084: LD_INT 14
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: LD_INT 5
35101: PUSH
35102: LD_INT 21
35104: PUSH
35105: LD_INT 23
35107: PUSH
35108: LD_INT 22
35110: PUSH
35111: LD_INT 24
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
35129: GO 35190
35131: LD_INT 3
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35139
35137: GO 35189
35139: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: LD_INT 13
35147: PUSH
35148: LD_INT 14
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: LD_INT 4
35159: PUSH
35160: LD_INT 5
35162: PUSH
35163: LD_INT 21
35165: PUSH
35166: LD_INT 22
35168: PUSH
35169: LD_INT 23
35171: PUSH
35172: LD_INT 24
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
35187: GO 35190
35189: POP
// result := ( chassis in result ) ;
35190: LD_ADDR_VAR 0 3
35194: PUSH
35195: LD_VAR 0 1
35199: PUSH
35200: LD_VAR 0 3
35204: IN
35205: ST_TO_ADDR
// end ;
35206: LD_VAR 0 3
35210: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35211: LD_INT 0
35213: PPUSH
// if not chassis or not weapon then
35214: LD_VAR 0 1
35218: NOT
35219: IFTRUE 35228
35221: PUSH
35222: LD_VAR 0 2
35226: NOT
35227: OR
35228: IFFALSE 35232
// exit ;
35230: GO 36292
// case weapon of us_machine_gun :
35232: LD_VAR 0 2
35236: PUSH
35237: LD_INT 2
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35245
35243: GO 35275
35245: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 3
35259: PUSH
35260: LD_INT 4
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 36276
35275: LD_INT 3
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35313
35283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: LD_INT 4
35300: PUSH
35301: LD_INT 5
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
35311: GO 36276
35313: LD_INT 11
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35321
35319: GO 35351
35321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 3
35335: PUSH
35336: LD_INT 4
35338: PUSH
35339: LD_INT 5
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
35349: GO 36276
35351: LD_INT 4
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35385
35359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 4
35373: PUSH
35374: LD_INT 5
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 36276
35385: LD_INT 5
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35419
35393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
35417: GO 36276
35419: LD_INT 9
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35453
35427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 36276
35453: LD_INT 7
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35487
35461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: LD_INT 5
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 36276
35487: LD_INT 12
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35521
35495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: LD_INT 5
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 36276
35521: LD_INT 13
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35555
35529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: LD_INT 4
35543: PUSH
35544: LD_INT 5
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
35553: GO 36276
35555: LD_INT 14
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35581
35563: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_INT 4
35571: PUSH
35572: LD_INT 5
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: ST_TO_ADDR
35579: GO 36276
35581: LD_INT 6
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35589
35587: GO 35607
35589: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35590: LD_ADDR_VAR 0 3
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: ST_TO_ADDR
35605: GO 36276
35607: LD_INT 10
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35615
35613: GO 35633
35615: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 4
35623: PUSH
35624: LD_INT 5
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: ST_TO_ADDR
35631: GO 36276
35633: LD_INT 22
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35667
35641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35642: LD_ADDR_VAR 0 3
35646: PUSH
35647: LD_INT 11
35649: PUSH
35650: LD_INT 12
35652: PUSH
35653: LD_INT 13
35655: PUSH
35656: LD_INT 14
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
35665: GO 36276
35667: LD_INT 23
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35701
35675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35676: LD_ADDR_VAR 0 3
35680: PUSH
35681: LD_INT 11
35683: PUSH
35684: LD_INT 12
35686: PUSH
35687: LD_INT 13
35689: PUSH
35690: LD_INT 14
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
35699: GO 36276
35701: LD_INT 24
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35709
35707: GO 35735
35709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35710: LD_ADDR_VAR 0 3
35714: PUSH
35715: LD_INT 11
35717: PUSH
35718: LD_INT 12
35720: PUSH
35721: LD_INT 13
35723: PUSH
35724: LD_INT 14
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
35733: GO 36276
35735: LD_INT 30
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35769
35743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_INT 11
35751: PUSH
35752: LD_INT 12
35754: PUSH
35755: LD_INT 13
35757: PUSH
35758: LD_INT 14
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
35767: GO 36276
35769: LD_INT 25
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35777
35775: GO 35795
35777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35778: LD_ADDR_VAR 0 3
35782: PUSH
35783: LD_INT 13
35785: PUSH
35786: LD_INT 14
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: ST_TO_ADDR
35793: GO 36276
35795: LD_INT 27
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35803
35801: GO 35821
35803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 13
35811: PUSH
35812: LD_INT 14
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: ST_TO_ADDR
35819: GO 36276
35821: LD_INT 92
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35829
35827: GO 35855
35829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35830: LD_ADDR_VAR 0 3
35834: PUSH
35835: LD_INT 11
35837: PUSH
35838: LD_INT 12
35840: PUSH
35841: LD_INT 13
35843: PUSH
35844: LD_INT 14
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: ST_TO_ADDR
35853: GO 36276
35855: LD_INT 28
35857: DOUBLE
35858: EQUAL
35859: IFTRUE 35863
35861: GO 35881
35863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35864: LD_ADDR_VAR 0 3
35868: PUSH
35869: LD_INT 13
35871: PUSH
35872: LD_INT 14
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: ST_TO_ADDR
35879: GO 36276
35881: LD_INT 29
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35889
35887: GO 35907
35889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: LD_INT 13
35897: PUSH
35898: LD_INT 14
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: ST_TO_ADDR
35905: GO 36276
35907: LD_INT 31
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35933
35915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 13
35923: PUSH
35924: LD_INT 14
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: ST_TO_ADDR
35931: GO 36276
35933: LD_INT 26
35935: DOUBLE
35936: EQUAL
35937: IFTRUE 35941
35939: GO 35959
35941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_INT 13
35949: PUSH
35950: LD_INT 14
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: ST_TO_ADDR
35957: GO 36276
35959: LD_INT 42
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35967
35965: GO 35993
35967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35968: LD_ADDR_VAR 0 3
35972: PUSH
35973: LD_INT 21
35975: PUSH
35976: LD_INT 22
35978: PUSH
35979: LD_INT 23
35981: PUSH
35982: LD_INT 24
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
35991: GO 36276
35993: LD_INT 43
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36027
36001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: LD_INT 21
36009: PUSH
36010: LD_INT 22
36012: PUSH
36013: LD_INT 23
36015: PUSH
36016: LD_INT 24
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: ST_TO_ADDR
36025: GO 36276
36027: LD_INT 44
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36061
36035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 21
36043: PUSH
36044: LD_INT 22
36046: PUSH
36047: LD_INT 23
36049: PUSH
36050: LD_INT 24
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: ST_TO_ADDR
36059: GO 36276
36061: LD_INT 45
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36095
36069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_INT 21
36077: PUSH
36078: LD_INT 22
36080: PUSH
36081: LD_INT 23
36083: PUSH
36084: LD_INT 24
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
36093: GO 36276
36095: LD_INT 49
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36103
36101: GO 36129
36103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36104: LD_ADDR_VAR 0 3
36108: PUSH
36109: LD_INT 21
36111: PUSH
36112: LD_INT 22
36114: PUSH
36115: LD_INT 23
36117: PUSH
36118: LD_INT 24
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
36127: GO 36276
36129: LD_INT 51
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36163
36137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_INT 21
36145: PUSH
36146: LD_INT 22
36148: PUSH
36149: LD_INT 23
36151: PUSH
36152: LD_INT 24
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36276
36163: LD_INT 52
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36197
36171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_INT 21
36179: PUSH
36180: LD_INT 22
36182: PUSH
36183: LD_INT 23
36185: PUSH
36186: LD_INT 24
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
36195: GO 36276
36197: LD_INT 53
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36223
36205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 23
36213: PUSH
36214: LD_INT 24
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: ST_TO_ADDR
36221: GO 36276
36223: LD_INT 46
36225: DOUBLE
36226: EQUAL
36227: IFTRUE 36231
36229: GO 36249
36231: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_INT 23
36239: PUSH
36240: LD_INT 24
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: ST_TO_ADDR
36247: GO 36276
36249: LD_INT 47
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36275
36257: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 23
36265: PUSH
36266: LD_INT 24
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: ST_TO_ADDR
36273: GO 36276
36275: POP
// result := ( chassis in result ) ;
36276: LD_ADDR_VAR 0 3
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_VAR 0 3
36290: IN
36291: ST_TO_ADDR
// end ;
36292: LD_VAR 0 3
36296: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
// result := array ;
36306: LD_ADDR_VAR 0 5
36310: PUSH
36311: LD_VAR 0 1
36315: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36316: LD_VAR 0 1
36320: NOT
36321: IFTRUE 36330
36323: PUSH
36324: LD_VAR 0 2
36328: NOT
36329: OR
36330: IFTRUE 36339
36332: PUSH
36333: LD_VAR 0 3
36337: NOT
36338: OR
36339: IFTRUE 36353
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_VAR 0 1
36351: GREATER
36352: OR
36353: IFTRUE 36367
36355: PUSH
36356: LD_VAR 0 3
36360: PUSH
36361: LD_VAR 0 1
36365: GREATER
36366: OR
36367: IFFALSE 36371
// exit ;
36369: GO 36667
// if direction then
36371: LD_VAR 0 4
36375: IFFALSE 36439
// begin d := 1 ;
36377: LD_ADDR_VAR 0 9
36381: PUSH
36382: LD_INT 1
36384: ST_TO_ADDR
// if i_from > i_to then
36385: LD_VAR 0 2
36389: PUSH
36390: LD_VAR 0 3
36394: GREATER
36395: IFFALSE 36421
// length := ( array - i_from ) + i_to else
36397: LD_ADDR_VAR 0 11
36401: PUSH
36402: LD_VAR 0 1
36406: PUSH
36407: LD_VAR 0 2
36411: MINUS
36412: PUSH
36413: LD_VAR 0 3
36417: PLUS
36418: ST_TO_ADDR
36419: GO 36437
// length := i_to - i_from ;
36421: LD_ADDR_VAR 0 11
36425: PUSH
36426: LD_VAR 0 3
36430: PUSH
36431: LD_VAR 0 2
36435: MINUS
36436: ST_TO_ADDR
// end else
36437: GO 36500
// begin d := - 1 ;
36439: LD_ADDR_VAR 0 9
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: ST_TO_ADDR
// if i_from > i_to then
36448: LD_VAR 0 2
36452: PUSH
36453: LD_VAR 0 3
36457: GREATER
36458: IFFALSE 36478
// length := i_from - i_to else
36460: LD_ADDR_VAR 0 11
36464: PUSH
36465: LD_VAR 0 2
36469: PUSH
36470: LD_VAR 0 3
36474: MINUS
36475: ST_TO_ADDR
36476: GO 36500
// length := ( array - i_to ) + i_from ;
36478: LD_ADDR_VAR 0 11
36482: PUSH
36483: LD_VAR 0 1
36487: PUSH
36488: LD_VAR 0 3
36492: MINUS
36493: PUSH
36494: LD_VAR 0 2
36498: PLUS
36499: ST_TO_ADDR
// end ; if not length then
36500: LD_VAR 0 11
36504: NOT
36505: IFFALSE 36509
// exit ;
36507: GO 36667
// tmp := array ;
36509: LD_ADDR_VAR 0 10
36513: PUSH
36514: LD_VAR 0 1
36518: ST_TO_ADDR
// for i = 1 to length do
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: DOUBLE
36525: LD_INT 1
36527: DEC
36528: ST_TO_ADDR
36529: LD_VAR 0 11
36533: PUSH
36534: FOR_TO
36535: IFFALSE 36655
// begin for j = 1 to array do
36537: LD_ADDR_VAR 0 7
36541: PUSH
36542: DOUBLE
36543: LD_INT 1
36545: DEC
36546: ST_TO_ADDR
36547: LD_VAR 0 1
36551: PUSH
36552: FOR_TO
36553: IFFALSE 36641
// begin k := j + d ;
36555: LD_ADDR_VAR 0 8
36559: PUSH
36560: LD_VAR 0 7
36564: PUSH
36565: LD_VAR 0 9
36569: PLUS
36570: ST_TO_ADDR
// if k > array then
36571: LD_VAR 0 8
36575: PUSH
36576: LD_VAR 0 1
36580: GREATER
36581: IFFALSE 36591
// k := 1 ;
36583: LD_ADDR_VAR 0 8
36587: PUSH
36588: LD_INT 1
36590: ST_TO_ADDR
// if not k then
36591: LD_VAR 0 8
36595: NOT
36596: IFFALSE 36608
// k := array ;
36598: LD_ADDR_VAR 0 8
36602: PUSH
36603: LD_VAR 0 1
36607: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36608: LD_ADDR_VAR 0 10
36612: PUSH
36613: LD_VAR 0 10
36617: PPUSH
36618: LD_VAR 0 8
36622: PPUSH
36623: LD_VAR 0 1
36627: PUSH
36628: LD_VAR 0 7
36632: ARRAY
36633: PPUSH
36634: CALL_OW 1
36638: ST_TO_ADDR
// end ;
36639: GO 36552
36641: POP
36642: POP
// array := tmp ;
36643: LD_ADDR_VAR 0 1
36647: PUSH
36648: LD_VAR 0 10
36652: ST_TO_ADDR
// end ;
36653: GO 36534
36655: POP
36656: POP
// result := array ;
36657: LD_ADDR_VAR 0 5
36661: PUSH
36662: LD_VAR 0 1
36666: ST_TO_ADDR
// end ;
36667: LD_VAR 0 5
36671: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36672: LD_INT 0
36674: PPUSH
36675: PPUSH
// result := 0 ;
36676: LD_ADDR_VAR 0 3
36680: PUSH
36681: LD_INT 0
36683: ST_TO_ADDR
// if not array or not value in array then
36684: LD_VAR 0 1
36688: NOT
36689: IFTRUE 36704
36691: PUSH
36692: LD_VAR 0 2
36696: PUSH
36697: LD_VAR 0 1
36701: IN
36702: NOT
36703: OR
36704: IFFALSE 36708
// exit ;
36706: GO 36762
// for i = 1 to array do
36708: LD_ADDR_VAR 0 4
36712: PUSH
36713: DOUBLE
36714: LD_INT 1
36716: DEC
36717: ST_TO_ADDR
36718: LD_VAR 0 1
36722: PUSH
36723: FOR_TO
36724: IFFALSE 36760
// if value = array [ i ] then
36726: LD_VAR 0 2
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_VAR 0 4
36740: ARRAY
36741: EQUAL
36742: IFFALSE 36758
// begin result := i ;
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_VAR 0 4
36753: ST_TO_ADDR
// exit ;
36754: POP
36755: POP
36756: GO 36762
// end ;
36758: GO 36723
36760: POP
36761: POP
// end ;
36762: LD_VAR 0 3
36766: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36767: LD_INT 0
36769: PPUSH
// vc_chassis := chassis ;
36770: LD_ADDR_OWVAR 37
36774: PUSH
36775: LD_VAR 0 1
36779: ST_TO_ADDR
// vc_engine := engine ;
36780: LD_ADDR_OWVAR 39
36784: PUSH
36785: LD_VAR 0 2
36789: ST_TO_ADDR
// vc_control := control ;
36790: LD_ADDR_OWVAR 38
36794: PUSH
36795: LD_VAR 0 3
36799: ST_TO_ADDR
// vc_weapon := weapon ;
36800: LD_ADDR_OWVAR 40
36804: PUSH
36805: LD_VAR 0 4
36809: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36810: LD_ADDR_OWVAR 41
36814: PUSH
36815: LD_VAR 0 5
36819: ST_TO_ADDR
// end ;
36820: LD_VAR 0 6
36824: RET
// export function WantPlant ( unit ) ; var task ; begin
36825: LD_INT 0
36827: PPUSH
36828: PPUSH
// result := false ;
36829: LD_ADDR_VAR 0 2
36833: PUSH
36834: LD_INT 0
36836: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 437
36851: ST_TO_ADDR
// if task then
36852: LD_VAR 0 3
36856: IFFALSE 36884
// if task [ 1 ] [ 1 ] = p then
36858: LD_VAR 0 3
36862: PUSH
36863: LD_INT 1
36865: ARRAY
36866: PUSH
36867: LD_INT 1
36869: ARRAY
36870: PUSH
36871: LD_STRING p
36873: EQUAL
36874: IFFALSE 36884
// result := true ;
36876: LD_ADDR_VAR 0 2
36880: PUSH
36881: LD_INT 1
36883: ST_TO_ADDR
// end ;
36884: LD_VAR 0 2
36888: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36889: LD_INT 0
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// if pos < 1 then
36895: LD_VAR 0 2
36899: PUSH
36900: LD_INT 1
36902: LESS
36903: IFFALSE 36907
// exit ;
36905: GO 37210
// if pos = 1 then
36907: LD_VAR 0 2
36911: PUSH
36912: LD_INT 1
36914: EQUAL
36915: IFFALSE 36948
// result := Replace ( arr , pos [ 1 ] , value ) else
36917: LD_ADDR_VAR 0 4
36921: PUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: LD_VAR 0 2
36931: PUSH
36932: LD_INT 1
36934: ARRAY
36935: PPUSH
36936: LD_VAR 0 3
36940: PPUSH
36941: CALL_OW 1
36945: ST_TO_ADDR
36946: GO 37210
// begin tmp := arr ;
36948: LD_ADDR_VAR 0 6
36952: PUSH
36953: LD_VAR 0 1
36957: ST_TO_ADDR
// s_arr := [ tmp ] ;
36958: LD_ADDR_VAR 0 7
36962: PUSH
36963: LD_VAR 0 6
36967: PUSH
36968: EMPTY
36969: LIST
36970: ST_TO_ADDR
// for i = 1 to pos - 1 do
36971: LD_ADDR_VAR 0 5
36975: PUSH
36976: DOUBLE
36977: LD_INT 1
36979: DEC
36980: ST_TO_ADDR
36981: LD_VAR 0 2
36985: PUSH
36986: LD_INT 1
36988: MINUS
36989: PUSH
36990: FOR_TO
36991: IFFALSE 37036
// begin tmp := tmp [ pos [ i ] ] ;
36993: LD_ADDR_VAR 0 6
36997: PUSH
36998: LD_VAR 0 6
37002: PUSH
37003: LD_VAR 0 2
37007: PUSH
37008: LD_VAR 0 5
37012: ARRAY
37013: ARRAY
37014: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37015: LD_ADDR_VAR 0 7
37019: PUSH
37020: LD_VAR 0 7
37024: PUSH
37025: LD_VAR 0 6
37029: PUSH
37030: EMPTY
37031: LIST
37032: ADD
37033: ST_TO_ADDR
// end ;
37034: GO 36990
37036: POP
37037: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37038: LD_ADDR_VAR 0 6
37042: PUSH
37043: LD_VAR 0 6
37047: PPUSH
37048: LD_VAR 0 2
37052: PUSH
37053: LD_VAR 0 2
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 3
37063: PPUSH
37064: CALL_OW 1
37068: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37069: LD_ADDR_VAR 0 7
37073: PUSH
37074: LD_VAR 0 7
37078: PPUSH
37079: LD_VAR 0 7
37083: PPUSH
37084: LD_VAR 0 6
37088: PPUSH
37089: CALL_OW 1
37093: ST_TO_ADDR
// for i = s_arr downto 2 do
37094: LD_ADDR_VAR 0 5
37098: PUSH
37099: DOUBLE
37100: LD_VAR 0 7
37104: INC
37105: ST_TO_ADDR
37106: LD_INT 2
37108: PUSH
37109: FOR_DOWNTO
37110: IFFALSE 37194
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37112: LD_ADDR_VAR 0 6
37116: PUSH
37117: LD_VAR 0 7
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_INT 1
37129: MINUS
37130: ARRAY
37131: PPUSH
37132: LD_VAR 0 2
37136: PUSH
37137: LD_VAR 0 5
37141: PUSH
37142: LD_INT 1
37144: MINUS
37145: ARRAY
37146: PPUSH
37147: LD_VAR 0 7
37151: PUSH
37152: LD_VAR 0 5
37156: ARRAY
37157: PPUSH
37158: CALL_OW 1
37162: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: LD_VAR 0 7
37172: PPUSH
37173: LD_VAR 0 5
37177: PUSH
37178: LD_INT 1
37180: MINUS
37181: PPUSH
37182: LD_VAR 0 6
37186: PPUSH
37187: CALL_OW 1
37191: ST_TO_ADDR
// end ;
37192: GO 37109
37194: POP
37195: POP
// result := s_arr [ 1 ] ;
37196: LD_ADDR_VAR 0 4
37200: PUSH
37201: LD_VAR 0 7
37205: PUSH
37206: LD_INT 1
37208: ARRAY
37209: ST_TO_ADDR
// end ; end ;
37210: LD_VAR 0 4
37214: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37215: LD_INT 0
37217: PPUSH
37218: PPUSH
// if not list then
37219: LD_VAR 0 1
37223: NOT
37224: IFFALSE 37228
// exit ;
37226: GO 37319
// i := list [ pos1 ] ;
37228: LD_ADDR_VAR 0 5
37232: PUSH
37233: LD_VAR 0 1
37237: PUSH
37238: LD_VAR 0 2
37242: ARRAY
37243: ST_TO_ADDR
// if not i then
37244: LD_VAR 0 5
37248: NOT
37249: IFFALSE 37253
// exit ;
37251: GO 37319
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37253: LD_ADDR_VAR 0 1
37257: PUSH
37258: LD_VAR 0 1
37262: PPUSH
37263: LD_VAR 0 2
37267: PPUSH
37268: LD_VAR 0 1
37272: PUSH
37273: LD_VAR 0 3
37277: ARRAY
37278: PPUSH
37279: CALL_OW 1
37283: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37284: LD_ADDR_VAR 0 1
37288: PUSH
37289: LD_VAR 0 1
37293: PPUSH
37294: LD_VAR 0 3
37298: PPUSH
37299: LD_VAR 0 5
37303: PPUSH
37304: CALL_OW 1
37308: ST_TO_ADDR
// result := list ;
37309: LD_ADDR_VAR 0 4
37313: PUSH
37314: LD_VAR 0 1
37318: ST_TO_ADDR
// end ;
37319: LD_VAR 0 4
37323: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37324: LD_INT 0
37326: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37327: LD_ADDR_VAR 0 5
37331: PUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 250
37341: PPUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 251
37351: PPUSH
37352: LD_VAR 0 2
37356: PPUSH
37357: LD_VAR 0 3
37361: PPUSH
37362: LD_VAR 0 4
37366: PPUSH
37367: CALL 37749 0 5
37371: ST_TO_ADDR
// end ;
37372: LD_VAR 0 5
37376: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
// if not list or not unit then
37383: LD_VAR 0 2
37387: NOT
37388: IFTRUE 37397
37390: PUSH
37391: LD_VAR 0 1
37395: NOT
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 37744
// result := [ ] ;
37401: LD_ADDR_VAR 0 5
37405: PUSH
37406: EMPTY
37407: ST_TO_ADDR
// for i in list do
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: FOR_IN
37419: IFFALSE 37637
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37421: LD_ADDR_VAR 0 8
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: LD_VAR 0 6
37435: PUSH
37436: LD_INT 1
37438: ARRAY
37439: PPUSH
37440: LD_VAR 0 6
37444: PUSH
37445: LD_INT 2
37447: ARRAY
37448: PPUSH
37449: CALL_OW 297
37453: ST_TO_ADDR
// if not Count ( result ) then
37454: LD_VAR 0 5
37458: PPUSH
37459: CALL 34005 0 1
37463: NOT
37464: IFFALSE 37497
// begin result := Join ( result , [ i , tmp ] ) ;
37466: LD_ADDR_VAR 0 5
37470: PUSH
37471: LD_VAR 0 5
37475: PPUSH
37476: LD_VAR 0 6
37480: PUSH
37481: LD_VAR 0 8
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL 69937 0 2
37494: ST_TO_ADDR
// continue ;
37495: GO 37418
// end ; if result [ result ] [ 2 ] <= tmp then
37497: LD_VAR 0 5
37501: PUSH
37502: LD_VAR 0 5
37506: ARRAY
37507: PUSH
37508: LD_INT 2
37510: ARRAY
37511: PUSH
37512: LD_VAR 0 8
37516: LESSEQUAL
37517: IFFALSE 37550
// result := Join ( result , [ i , tmp ] ) else
37519: LD_ADDR_VAR 0 5
37523: PUSH
37524: LD_VAR 0 5
37528: PPUSH
37529: LD_VAR 0 6
37533: PUSH
37534: LD_VAR 0 8
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PPUSH
37543: CALL 69937 0 2
37547: ST_TO_ADDR
37548: GO 37635
// begin for j := 1 to Count ( result ) do
37550: LD_ADDR_VAR 0 7
37554: PUSH
37555: DOUBLE
37556: LD_INT 1
37558: DEC
37559: ST_TO_ADDR
37560: LD_VAR 0 5
37564: PPUSH
37565: CALL 34005 0 1
37569: PUSH
37570: FOR_TO
37571: IFFALSE 37633
// begin if tmp < result [ j ] [ 2 ] then
37573: LD_VAR 0 8
37577: PUSH
37578: LD_VAR 0 5
37582: PUSH
37583: LD_VAR 0 7
37587: ARRAY
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: LESS
37593: IFFALSE 37631
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37595: LD_ADDR_VAR 0 5
37599: PUSH
37600: LD_VAR 0 5
37604: PPUSH
37605: LD_VAR 0 7
37609: PPUSH
37610: LD_VAR 0 6
37614: PUSH
37615: LD_VAR 0 8
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 2
37628: ST_TO_ADDR
// break ;
37629: GO 37633
// end ; end ;
37631: GO 37570
37633: POP
37634: POP
// end ; end ;
37635: GO 37418
37637: POP
37638: POP
// if result and not asc then
37639: LD_VAR 0 5
37643: IFFALSE 37652
37645: PUSH
37646: LD_VAR 0 3
37650: NOT
37651: AND
37652: IFFALSE 37669
// result := ReverseArray ( result ) ;
37654: LD_ADDR_VAR 0 5
37658: PUSH
37659: LD_VAR 0 5
37663: PPUSH
37664: CALL 65027 0 1
37668: ST_TO_ADDR
// tmp := [ ] ;
37669: LD_ADDR_VAR 0 8
37673: PUSH
37674: EMPTY
37675: ST_TO_ADDR
// if mode then
37676: LD_VAR 0 4
37680: IFFALSE 37744
// begin for i := 1 to result do
37682: LD_ADDR_VAR 0 6
37686: PUSH
37687: DOUBLE
37688: LD_INT 1
37690: DEC
37691: ST_TO_ADDR
37692: LD_VAR 0 5
37696: PUSH
37697: FOR_TO
37698: IFFALSE 37732
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37700: LD_ADDR_VAR 0 8
37704: PUSH
37705: LD_VAR 0 8
37709: PPUSH
37710: LD_VAR 0 5
37714: PUSH
37715: LD_VAR 0 6
37719: ARRAY
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: CALL 69937 0 2
37729: ST_TO_ADDR
37730: GO 37697
37732: POP
37733: POP
// result := tmp ;
37734: LD_ADDR_VAR 0 5
37738: PUSH
37739: LD_VAR 0 8
37743: ST_TO_ADDR
// end ; end ;
37744: LD_VAR 0 5
37748: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37749: LD_INT 0
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
// if not list then
37755: LD_VAR 0 3
37759: NOT
37760: IFFALSE 37764
// exit ;
37762: GO 38154
// result := [ ] ;
37764: LD_ADDR_VAR 0 6
37768: PUSH
37769: EMPTY
37770: ST_TO_ADDR
// for i in list do
37771: LD_ADDR_VAR 0 7
37775: PUSH
37776: LD_VAR 0 3
37780: PUSH
37781: FOR_IN
37782: IFFALSE 37984
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37784: LD_ADDR_VAR 0 9
37788: PUSH
37789: LD_VAR 0 7
37793: PPUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: LD_VAR 0 2
37803: PPUSH
37804: CALL_OW 297
37808: ST_TO_ADDR
// if not result then
37809: LD_VAR 0 6
37813: NOT
37814: IFFALSE 37840
// result := [ [ i , tmp ] ] else
37816: LD_ADDR_VAR 0 6
37820: PUSH
37821: LD_VAR 0 7
37825: PUSH
37826: LD_VAR 0 9
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: ST_TO_ADDR
37838: GO 37982
// begin if result [ result ] [ 2 ] <= tmp then
37840: LD_VAR 0 6
37844: PUSH
37845: LD_VAR 0 6
37849: ARRAY
37850: PUSH
37851: LD_INT 2
37853: ARRAY
37854: PUSH
37855: LD_VAR 0 9
37859: LESSEQUAL
37860: IFFALSE 37902
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37862: LD_ADDR_VAR 0 6
37866: PUSH
37867: LD_VAR 0 6
37871: PPUSH
37872: LD_VAR 0 6
37876: PUSH
37877: LD_INT 1
37879: PLUS
37880: PPUSH
37881: LD_VAR 0 7
37885: PUSH
37886: LD_VAR 0 9
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PPUSH
37895: CALL_OW 2
37899: ST_TO_ADDR
37900: GO 37982
// for j := 1 to result do
37902: LD_ADDR_VAR 0 8
37906: PUSH
37907: DOUBLE
37908: LD_INT 1
37910: DEC
37911: ST_TO_ADDR
37912: LD_VAR 0 6
37916: PUSH
37917: FOR_TO
37918: IFFALSE 37980
// begin if tmp < result [ j ] [ 2 ] then
37920: LD_VAR 0 9
37924: PUSH
37925: LD_VAR 0 6
37929: PUSH
37930: LD_VAR 0 8
37934: ARRAY
37935: PUSH
37936: LD_INT 2
37938: ARRAY
37939: LESS
37940: IFFALSE 37978
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37942: LD_ADDR_VAR 0 6
37946: PUSH
37947: LD_VAR 0 6
37951: PPUSH
37952: LD_VAR 0 8
37956: PPUSH
37957: LD_VAR 0 7
37961: PUSH
37962: LD_VAR 0 9
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PPUSH
37971: CALL_OW 2
37975: ST_TO_ADDR
// break ;
37976: GO 37980
// end ; end ;
37978: GO 37917
37980: POP
37981: POP
// end ; end ;
37982: GO 37781
37984: POP
37985: POP
// if result and not asc then
37986: LD_VAR 0 6
37990: IFFALSE 37999
37992: PUSH
37993: LD_VAR 0 4
37997: NOT
37998: AND
37999: IFFALSE 38074
// begin tmp := result ;
38001: LD_ADDR_VAR 0 9
38005: PUSH
38006: LD_VAR 0 6
38010: ST_TO_ADDR
// for i = tmp downto 1 do
38011: LD_ADDR_VAR 0 7
38015: PUSH
38016: DOUBLE
38017: LD_VAR 0 9
38021: INC
38022: ST_TO_ADDR
38023: LD_INT 1
38025: PUSH
38026: FOR_DOWNTO
38027: IFFALSE 38072
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38029: LD_ADDR_VAR 0 6
38033: PUSH
38034: LD_VAR 0 6
38038: PPUSH
38039: LD_VAR 0 9
38043: PUSH
38044: LD_VAR 0 7
38048: MINUS
38049: PUSH
38050: LD_INT 1
38052: PLUS
38053: PPUSH
38054: LD_VAR 0 9
38058: PUSH
38059: LD_VAR 0 7
38063: ARRAY
38064: PPUSH
38065: CALL_OW 1
38069: ST_TO_ADDR
38070: GO 38026
38072: POP
38073: POP
// end ; tmp := [ ] ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: EMPTY
38080: ST_TO_ADDR
// if mode then
38081: LD_VAR 0 5
38085: IFFALSE 38154
// begin for i = 1 to result do
38087: LD_ADDR_VAR 0 7
38091: PUSH
38092: DOUBLE
38093: LD_INT 1
38095: DEC
38096: ST_TO_ADDR
38097: LD_VAR 0 6
38101: PUSH
38102: FOR_TO
38103: IFFALSE 38142
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38105: LD_ADDR_VAR 0 9
38109: PUSH
38110: LD_VAR 0 9
38114: PPUSH
38115: LD_VAR 0 7
38119: PPUSH
38120: LD_VAR 0 6
38124: PUSH
38125: LD_VAR 0 7
38129: ARRAY
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PPUSH
38135: CALL_OW 1
38139: ST_TO_ADDR
38140: GO 38102
38142: POP
38143: POP
// result := tmp ;
38144: LD_ADDR_VAR 0 6
38148: PUSH
38149: LD_VAR 0 9
38153: ST_TO_ADDR
// end ; end ;
38154: LD_VAR 0 6
38158: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38159: LD_INT 0
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38167: LD_ADDR_VAR 0 5
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// if not x or not y then
38189: LD_VAR 0 2
38193: NOT
38194: IFTRUE 38203
38196: PUSH
38197: LD_VAR 0 3
38201: NOT
38202: OR
38203: IFFALSE 38207
// exit ;
38205: GO 39863
// if not range then
38207: LD_VAR 0 4
38211: NOT
38212: IFFALSE 38222
// range := 10 ;
38214: LD_ADDR_VAR 0 4
38218: PUSH
38219: LD_INT 10
38221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38222: LD_ADDR_VAR 0 8
38226: PUSH
38227: LD_INT 81
38229: PUSH
38230: LD_VAR 0 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 92
38241: PUSH
38242: LD_VAR 0 2
38246: PUSH
38247: LD_VAR 0 3
38251: PUSH
38252: LD_VAR 0 4
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: LD_INT 21
38268: PUSH
38269: LD_INT 3
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: PPUSH
38285: CALL_OW 69
38289: ST_TO_ADDR
// if not tmp then
38290: LD_VAR 0 8
38294: NOT
38295: IFFALSE 38299
// exit ;
38297: GO 39863
// for i in tmp do
38299: LD_ADDR_VAR 0 6
38303: PUSH
38304: LD_VAR 0 8
38308: PUSH
38309: FOR_IN
38310: IFFALSE 39838
// begin points := [ 0 , 0 , 0 ] ;
38312: LD_ADDR_VAR 0 9
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// bpoints := 1 ;
38331: LD_ADDR_VAR 0 10
38335: PUSH
38336: LD_INT 1
38338: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38339: LD_VAR 0 6
38343: PPUSH
38344: CALL_OW 247
38348: PUSH
38349: LD_INT 1
38351: DOUBLE
38352: EQUAL
38353: IFTRUE 38357
38355: GO 38939
38357: POP
// begin if GetClass ( i ) = 1 then
38358: LD_VAR 0 6
38362: PPUSH
38363: CALL_OW 257
38367: PUSH
38368: LD_INT 1
38370: EQUAL
38371: IFFALSE 38392
// points := [ 10 , 5 , 3 ] ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_INT 10
38380: PUSH
38381: LD_INT 5
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 257
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: LD_INT 4
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: IN
38416: IFFALSE 38437
// points := [ 3 , 2 , 1 ] ;
38418: LD_ADDR_VAR 0 9
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38437: LD_VAR 0 6
38441: PPUSH
38442: CALL_OW 257
38446: PUSH
38447: LD_INT 5
38449: EQUAL
38450: IFFALSE 38471
// points := [ 130 , 5 , 2 ] ;
38452: LD_ADDR_VAR 0 9
38456: PUSH
38457: LD_INT 130
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38471: LD_VAR 0 6
38475: PPUSH
38476: CALL_OW 257
38480: PUSH
38481: LD_INT 8
38483: EQUAL
38484: IFFALSE 38505
// points := [ 35 , 35 , 30 ] ;
38486: LD_ADDR_VAR 0 9
38490: PUSH
38491: LD_INT 35
38493: PUSH
38494: LD_INT 35
38496: PUSH
38497: LD_INT 30
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38505: LD_VAR 0 6
38509: PPUSH
38510: CALL_OW 257
38514: PUSH
38515: LD_INT 9
38517: EQUAL
38518: IFFALSE 38539
// points := [ 20 , 55 , 40 ] ;
38520: LD_ADDR_VAR 0 9
38524: PUSH
38525: LD_INT 20
38527: PUSH
38528: LD_INT 55
38530: PUSH
38531: LD_INT 40
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38539: LD_VAR 0 6
38543: PPUSH
38544: CALL_OW 257
38548: PUSH
38549: LD_INT 12
38551: PUSH
38552: LD_INT 16
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: IN
38559: IFFALSE 38580
// points := [ 5 , 3 , 2 ] ;
38561: LD_ADDR_VAR 0 9
38565: PUSH
38566: LD_INT 5
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38580: LD_VAR 0 6
38584: PPUSH
38585: CALL_OW 257
38589: PUSH
38590: LD_INT 17
38592: EQUAL
38593: IFFALSE 38614
// points := [ 100 , 50 , 75 ] ;
38595: LD_ADDR_VAR 0 9
38599: PUSH
38600: LD_INT 100
38602: PUSH
38603: LD_INT 50
38605: PUSH
38606: LD_INT 75
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38614: LD_VAR 0 6
38618: PPUSH
38619: CALL_OW 257
38623: PUSH
38624: LD_INT 15
38626: EQUAL
38627: IFFALSE 38648
// points := [ 10 , 5 , 3 ] ;
38629: LD_ADDR_VAR 0 9
38633: PUSH
38634: LD_INT 10
38636: PUSH
38637: LD_INT 5
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38648: LD_VAR 0 6
38652: PPUSH
38653: CALL_OW 257
38657: PUSH
38658: LD_INT 14
38660: EQUAL
38661: IFFALSE 38682
// points := [ 10 , 0 , 0 ] ;
38663: LD_ADDR_VAR 0 9
38667: PUSH
38668: LD_INT 10
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38682: LD_VAR 0 6
38686: PPUSH
38687: CALL_OW 257
38691: PUSH
38692: LD_INT 11
38694: EQUAL
38695: IFFALSE 38716
// points := [ 30 , 10 , 5 ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_INT 30
38704: PUSH
38705: LD_INT 10
38707: PUSH
38708: LD_INT 5
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_INT 5
38723: PPUSH
38724: CALL_OW 321
38728: PUSH
38729: LD_INT 2
38731: EQUAL
38732: IFFALSE 38749
// bpoints := bpoints * 1.8 ;
38734: LD_ADDR_VAR 0 10
38738: PUSH
38739: LD_VAR 0 10
38743: PUSH
38744: LD_REAL  1.80000000000000E+0000
38747: MUL
38748: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38749: LD_VAR 0 6
38753: PPUSH
38754: CALL_OW 257
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: LD_INT 4
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: IN
38777: IFFALSE 38797
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_INT 51
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: AND
38797: IFFALSE 38814
// bpoints := bpoints * 1.2 ;
38799: LD_ADDR_VAR 0 10
38803: PUSH
38804: LD_VAR 0 10
38808: PUSH
38809: LD_REAL  1.20000000000000E+0000
38812: MUL
38813: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38814: LD_VAR 0 6
38818: PPUSH
38819: CALL_OW 257
38823: PUSH
38824: LD_INT 5
38826: PUSH
38827: LD_INT 7
38829: PUSH
38830: LD_INT 9
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: IN
38838: IFFALSE 38858
38840: PUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: LD_INT 52
38848: PPUSH
38849: CALL_OW 321
38853: PUSH
38854: LD_INT 2
38856: EQUAL
38857: AND
38858: IFFALSE 38875
// bpoints := bpoints * 1.5 ;
38860: LD_ADDR_VAR 0 10
38864: PUSH
38865: LD_VAR 0 10
38869: PUSH
38870: LD_REAL  1.50000000000000E+0000
38873: MUL
38874: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38875: LD_VAR 0 1
38879: PPUSH
38880: LD_INT 66
38882: PPUSH
38883: CALL_OW 321
38887: PUSH
38888: LD_INT 2
38890: EQUAL
38891: IFFALSE 38908
// bpoints := bpoints * 1.1 ;
38893: LD_ADDR_VAR 0 10
38897: PUSH
38898: LD_VAR 0 10
38902: PUSH
38903: LD_REAL  1.10000000000000E+0000
38906: MUL
38907: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38908: LD_ADDR_VAR 0 10
38912: PUSH
38913: LD_VAR 0 10
38917: PUSH
38918: LD_VAR 0 6
38922: PPUSH
38923: LD_INT 1
38925: PPUSH
38926: CALL_OW 259
38930: PUSH
38931: LD_REAL  1.15000000000000E+0000
38934: MUL
38935: MUL
38936: ST_TO_ADDR
// end ; unit_vehicle :
38937: GO 39767
38939: LD_INT 2
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 39755
38947: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38948: LD_VAR 0 6
38952: PPUSH
38953: CALL_OW 264
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 42
38963: PUSH
38964: LD_INT 24
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: IN
38972: IFFALSE 38993
// points := [ 25 , 5 , 3 ] ;
38974: LD_ADDR_VAR 0 9
38978: PUSH
38979: LD_INT 25
38981: PUSH
38982: LD_INT 5
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38993: LD_VAR 0 6
38997: PPUSH
38998: CALL_OW 264
39002: PUSH
39003: LD_INT 4
39005: PUSH
39006: LD_INT 43
39008: PUSH
39009: LD_INT 25
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: IN
39017: IFFALSE 39038
// points := [ 40 , 15 , 5 ] ;
39019: LD_ADDR_VAR 0 9
39023: PUSH
39024: LD_INT 40
39026: PUSH
39027: LD_INT 15
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39038: LD_VAR 0 6
39042: PPUSH
39043: CALL_OW 264
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 23
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: IN
39058: IFFALSE 39079
// points := [ 7 , 25 , 8 ] ;
39060: LD_ADDR_VAR 0 9
39064: PUSH
39065: LD_INT 7
39067: PUSH
39068: LD_INT 25
39070: PUSH
39071: LD_INT 8
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39079: LD_VAR 0 6
39083: PPUSH
39084: CALL_OW 264
39088: PUSH
39089: LD_INT 5
39091: PUSH
39092: LD_INT 27
39094: PUSH
39095: LD_INT 44
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: IN
39103: IFFALSE 39124
// points := [ 14 , 50 , 16 ] ;
39105: LD_ADDR_VAR 0 9
39109: PUSH
39110: LD_INT 14
39112: PUSH
39113: LD_INT 50
39115: PUSH
39116: LD_INT 16
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39124: LD_VAR 0 6
39128: PPUSH
39129: CALL_OW 264
39133: PUSH
39134: LD_INT 6
39136: PUSH
39137: LD_INT 46
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: IN
39144: IFFALSE 39165
// points := [ 32 , 120 , 70 ] ;
39146: LD_ADDR_VAR 0 9
39150: PUSH
39151: LD_INT 32
39153: PUSH
39154: LD_INT 120
39156: PUSH
39157: LD_INT 70
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39165: LD_VAR 0 6
39169: PPUSH
39170: CALL_OW 264
39174: PUSH
39175: LD_INT 7
39177: PUSH
39178: LD_INT 28
39180: PUSH
39181: LD_INT 45
39183: PUSH
39184: LD_INT 92
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: IN
39193: IFFALSE 39214
// points := [ 35 , 20 , 45 ] ;
39195: LD_ADDR_VAR 0 9
39199: PUSH
39200: LD_INT 35
39202: PUSH
39203: LD_INT 20
39205: PUSH
39206: LD_INT 45
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39214: LD_VAR 0 6
39218: PPUSH
39219: CALL_OW 264
39223: PUSH
39224: LD_INT 47
39226: PUSH
39227: EMPTY
39228: LIST
39229: IN
39230: IFFALSE 39251
// points := [ 67 , 45 , 75 ] ;
39232: LD_ADDR_VAR 0 9
39236: PUSH
39237: LD_INT 67
39239: PUSH
39240: LD_INT 45
39242: PUSH
39243: LD_INT 75
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39251: LD_VAR 0 6
39255: PPUSH
39256: CALL_OW 264
39260: PUSH
39261: LD_INT 26
39263: PUSH
39264: EMPTY
39265: LIST
39266: IN
39267: IFFALSE 39288
// points := [ 120 , 30 , 80 ] ;
39269: LD_ADDR_VAR 0 9
39273: PUSH
39274: LD_INT 120
39276: PUSH
39277: LD_INT 30
39279: PUSH
39280: LD_INT 80
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39288: LD_VAR 0 6
39292: PPUSH
39293: CALL_OW 264
39297: PUSH
39298: LD_INT 22
39300: PUSH
39301: EMPTY
39302: LIST
39303: IN
39304: IFFALSE 39325
// points := [ 40 , 1 , 1 ] ;
39306: LD_ADDR_VAR 0 9
39310: PUSH
39311: LD_INT 40
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39325: LD_VAR 0 6
39329: PPUSH
39330: CALL_OW 264
39334: PUSH
39335: LD_INT 29
39337: PUSH
39338: EMPTY
39339: LIST
39340: IN
39341: IFFALSE 39362
// points := [ 70 , 200 , 400 ] ;
39343: LD_ADDR_VAR 0 9
39347: PUSH
39348: LD_INT 70
39350: PUSH
39351: LD_INT 200
39353: PUSH
39354: LD_INT 400
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39362: LD_VAR 0 6
39366: PPUSH
39367: CALL_OW 264
39371: PUSH
39372: LD_INT 14
39374: PUSH
39375: LD_INT 53
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: IN
39382: IFFALSE 39403
// points := [ 40 , 10 , 20 ] ;
39384: LD_ADDR_VAR 0 9
39388: PUSH
39389: LD_INT 40
39391: PUSH
39392: LD_INT 10
39394: PUSH
39395: LD_INT 20
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39403: LD_VAR 0 6
39407: PPUSH
39408: CALL_OW 264
39412: PUSH
39413: LD_INT 9
39415: PUSH
39416: EMPTY
39417: LIST
39418: IN
39419: IFFALSE 39440
// points := [ 5 , 70 , 20 ] ;
39421: LD_ADDR_VAR 0 9
39425: PUSH
39426: LD_INT 5
39428: PUSH
39429: LD_INT 70
39431: PUSH
39432: LD_INT 20
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39440: LD_VAR 0 6
39444: PPUSH
39445: CALL_OW 264
39449: PUSH
39450: LD_INT 10
39452: PUSH
39453: EMPTY
39454: LIST
39455: IN
39456: IFFALSE 39477
// points := [ 35 , 110 , 70 ] ;
39458: LD_ADDR_VAR 0 9
39462: PUSH
39463: LD_INT 35
39465: PUSH
39466: LD_INT 110
39468: PUSH
39469: LD_INT 70
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39477: LD_VAR 0 6
39481: PPUSH
39482: CALL_OW 265
39486: PUSH
39487: LD_INT 25
39489: EQUAL
39490: IFFALSE 39511
// points := [ 80 , 65 , 100 ] ;
39492: LD_ADDR_VAR 0 9
39496: PUSH
39497: LD_INT 80
39499: PUSH
39500: LD_INT 65
39502: PUSH
39503: LD_INT 100
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39511: LD_VAR 0 6
39515: PPUSH
39516: CALL_OW 263
39520: PUSH
39521: LD_INT 1
39523: EQUAL
39524: IFFALSE 39559
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39526: LD_ADDR_VAR 0 10
39530: PUSH
39531: LD_VAR 0 10
39535: PUSH
39536: LD_VAR 0 6
39540: PPUSH
39541: CALL_OW 311
39545: PPUSH
39546: LD_INT 3
39548: PPUSH
39549: CALL_OW 259
39553: PUSH
39554: LD_INT 4
39556: MUL
39557: MUL
39558: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39559: LD_VAR 0 6
39563: PPUSH
39564: CALL_OW 263
39568: PUSH
39569: LD_INT 2
39571: EQUAL
39572: IFFALSE 39623
// begin j := IsControledBy ( i ) ;
39574: LD_ADDR_VAR 0 7
39578: PUSH
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 312
39588: ST_TO_ADDR
// if j then
39589: LD_VAR 0 7
39593: IFFALSE 39623
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39595: LD_ADDR_VAR 0 10
39599: PUSH
39600: LD_VAR 0 10
39604: PUSH
39605: LD_VAR 0 7
39609: PPUSH
39610: LD_INT 3
39612: PPUSH
39613: CALL_OW 259
39617: PUSH
39618: LD_INT 3
39620: MUL
39621: MUL
39622: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39623: LD_VAR 0 6
39627: PPUSH
39628: CALL_OW 264
39632: PUSH
39633: LD_INT 5
39635: PUSH
39636: LD_INT 6
39638: PUSH
39639: LD_INT 46
39641: PUSH
39642: LD_INT 44
39644: PUSH
39645: LD_INT 47
39647: PUSH
39648: LD_INT 45
39650: PUSH
39651: LD_INT 28
39653: PUSH
39654: LD_INT 7
39656: PUSH
39657: LD_INT 27
39659: PUSH
39660: LD_INT 29
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: IN
39675: IFFALSE 39695
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_INT 52
39685: PPUSH
39686: CALL_OW 321
39690: PUSH
39691: LD_INT 2
39693: EQUAL
39694: AND
39695: IFFALSE 39712
// bpoints := bpoints * 1.2 ;
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: LD_VAR 0 10
39706: PUSH
39707: LD_REAL  1.20000000000000E+0000
39710: MUL
39711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39712: LD_VAR 0 6
39716: PPUSH
39717: CALL_OW 264
39721: PUSH
39722: LD_INT 6
39724: PUSH
39725: LD_INT 46
39727: PUSH
39728: LD_INT 47
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: IN
39736: IFFALSE 39753
// bpoints := bpoints * 1.2 ;
39738: LD_ADDR_VAR 0 10
39742: PUSH
39743: LD_VAR 0 10
39747: PUSH
39748: LD_REAL  1.20000000000000E+0000
39751: MUL
39752: ST_TO_ADDR
// end ; unit_building :
39753: GO 39767
39755: LD_INT 3
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39763
39761: GO 39766
39763: POP
// ; end ;
39764: GO 39767
39766: POP
// for j = 1 to 3 do
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: DOUBLE
39773: LD_INT 1
39775: DEC
39776: ST_TO_ADDR
39777: LD_INT 3
39779: PUSH
39780: FOR_TO
39781: IFFALSE 39834
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_VAR 0 5
39792: PPUSH
39793: LD_VAR 0 7
39797: PPUSH
39798: LD_VAR 0 5
39802: PUSH
39803: LD_VAR 0 7
39807: ARRAY
39808: PUSH
39809: LD_VAR 0 9
39813: PUSH
39814: LD_VAR 0 7
39818: ARRAY
39819: PUSH
39820: LD_VAR 0 10
39824: MUL
39825: PLUS
39826: PPUSH
39827: CALL_OW 1
39831: ST_TO_ADDR
39832: GO 39780
39834: POP
39835: POP
// end ;
39836: GO 38309
39838: POP
39839: POP
// result := Replace ( result , 4 , tmp ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: LD_INT 4
39852: PPUSH
39853: LD_VAR 0 8
39857: PPUSH
39858: CALL_OW 1
39862: ST_TO_ADDR
// end ;
39863: LD_VAR 0 5
39867: RET
// export function DangerAtRange ( unit , range ) ; begin
39868: LD_INT 0
39870: PPUSH
// if not unit then
39871: LD_VAR 0 1
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 39925
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 255
39894: PPUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 250
39904: PPUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 251
39914: PPUSH
39915: LD_VAR 0 2
39919: PPUSH
39920: CALL 38159 0 4
39924: ST_TO_ADDR
// end ;
39925: LD_VAR 0 3
39929: RET
// export function DangerInArea ( side , area ) ; begin
39930: LD_INT 0
39932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39933: LD_ADDR_VAR 0 3
39937: PUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: LD_INT 81
39945: PUSH
39946: LD_VAR 0 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PPUSH
39955: CALL_OW 70
39959: ST_TO_ADDR
// end ;
39960: LD_VAR 0 3
39964: RET
// export function IsExtension ( b ) ; begin
39965: LD_INT 0
39967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39968: LD_ADDR_VAR 0 2
39972: PUSH
39973: LD_VAR 0 1
39977: PUSH
39978: LD_INT 23
39980: PUSH
39981: LD_INT 20
39983: PUSH
39984: LD_INT 22
39986: PUSH
39987: LD_INT 17
39989: PUSH
39990: LD_INT 24
39992: PUSH
39993: LD_INT 21
39995: PUSH
39996: LD_INT 19
39998: PUSH
39999: LD_INT 16
40001: PUSH
40002: LD_INT 25
40004: PUSH
40005: LD_INT 18
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: IN
40020: ST_TO_ADDR
// end ;
40021: LD_VAR 0 2
40025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40026: LD_INT 0
40028: PPUSH
40029: PPUSH
40030: PPUSH
// result := [ ] ;
40031: LD_ADDR_VAR 0 4
40035: PUSH
40036: EMPTY
40037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40038: LD_ADDR_VAR 0 5
40042: PUSH
40043: LD_VAR 0 2
40047: PPUSH
40048: LD_INT 21
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PPUSH
40058: CALL_OW 70
40062: ST_TO_ADDR
// if not tmp then
40063: LD_VAR 0 5
40067: NOT
40068: IFFALSE 40072
// exit ;
40070: GO 40136
// if checkLink then
40072: LD_VAR 0 3
40076: IFFALSE 40126
// begin for i in tmp do
40078: LD_ADDR_VAR 0 6
40082: PUSH
40083: LD_VAR 0 5
40087: PUSH
40088: FOR_IN
40089: IFFALSE 40124
// if GetBase ( i ) <> base then
40091: LD_VAR 0 6
40095: PPUSH
40096: CALL_OW 274
40100: PUSH
40101: LD_VAR 0 1
40105: NONEQUAL
40106: IFFALSE 40122
// ComLinkToBase ( base , i ) ;
40108: LD_VAR 0 1
40112: PPUSH
40113: LD_VAR 0 6
40117: PPUSH
40118: CALL_OW 169
40122: GO 40088
40124: POP
40125: POP
// end ; result := tmp ;
40126: LD_ADDR_VAR 0 4
40130: PUSH
40131: LD_VAR 0 5
40135: ST_TO_ADDR
// end ;
40136: LD_VAR 0 4
40140: RET
// export function ComComplete ( units , b ) ; var i ; begin
40141: LD_INT 0
40143: PPUSH
40144: PPUSH
// if not units then
40145: LD_VAR 0 1
40149: NOT
40150: IFFALSE 40154
// exit ;
40152: GO 40244
// for i in units do
40154: LD_ADDR_VAR 0 4
40158: PUSH
40159: LD_VAR 0 1
40163: PUSH
40164: FOR_IN
40165: IFFALSE 40242
// if BuildingStatus ( b ) = bs_build then
40167: LD_VAR 0 2
40171: PPUSH
40172: CALL_OW 461
40176: PUSH
40177: LD_INT 1
40179: EQUAL
40180: IFFALSE 40240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40182: LD_VAR 0 4
40186: PPUSH
40187: LD_STRING h
40189: PUSH
40190: LD_VAR 0 2
40194: PPUSH
40195: CALL_OW 250
40199: PUSH
40200: LD_VAR 0 2
40204: PPUSH
40205: CALL_OW 251
40209: PUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: PPUSH
40236: CALL_OW 446
40240: GO 40164
40242: POP
40243: POP
// end ;
40244: LD_VAR 0 3
40248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40249: LD_INT 0
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40257: LD_VAR 0 1
40261: NOT
40262: IFTRUE 40279
40264: PUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 263
40274: PUSH
40275: LD_INT 2
40277: NONEQUAL
40278: OR
40279: IFFALSE 40283
// exit ;
40281: GO 40599
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40283: LD_ADDR_VAR 0 6
40287: PUSH
40288: LD_INT 22
40290: PUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 255
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 30
40310: PUSH
40311: LD_INT 36
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 34
40320: PUSH
40321: LD_INT 31
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PPUSH
40337: CALL_OW 69
40341: ST_TO_ADDR
// if not tmp then
40342: LD_VAR 0 6
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40599
// result := [ ] ;
40351: LD_ADDR_VAR 0 2
40355: PUSH
40356: EMPTY
40357: ST_TO_ADDR
// for i in tmp do
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_VAR 0 6
40367: PUSH
40368: FOR_IN
40369: IFFALSE 40440
// begin t := UnitsInside ( i ) ;
40371: LD_ADDR_VAR 0 4
40375: PUSH
40376: LD_VAR 0 3
40380: PPUSH
40381: CALL_OW 313
40385: ST_TO_ADDR
// if t then
40386: LD_VAR 0 4
40390: IFFALSE 40438
// for j in t do
40392: LD_ADDR_VAR 0 7
40396: PUSH
40397: LD_VAR 0 4
40401: PUSH
40402: FOR_IN
40403: IFFALSE 40436
// result := Replace ( result , result + 1 , j ) ;
40405: LD_ADDR_VAR 0 2
40409: PUSH
40410: LD_VAR 0 2
40414: PPUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_INT 1
40422: PLUS
40423: PPUSH
40424: LD_VAR 0 7
40428: PPUSH
40429: CALL_OW 1
40433: ST_TO_ADDR
40434: GO 40402
40436: POP
40437: POP
// end ;
40438: GO 40368
40440: POP
40441: POP
// if not result then
40442: LD_VAR 0 2
40446: NOT
40447: IFFALSE 40451
// exit ;
40449: GO 40599
// mech := result [ 1 ] ;
40451: LD_ADDR_VAR 0 5
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_INT 1
40463: ARRAY
40464: ST_TO_ADDR
// if result > 1 then
40465: LD_VAR 0 2
40469: PUSH
40470: LD_INT 1
40472: GREATER
40473: IFFALSE 40585
// begin for i = 2 to result do
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: DOUBLE
40481: LD_INT 2
40483: DEC
40484: ST_TO_ADDR
40485: LD_VAR 0 2
40489: PUSH
40490: FOR_TO
40491: IFFALSE 40583
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40493: LD_ADDR_VAR 0 4
40497: PUSH
40498: LD_VAR 0 2
40502: PUSH
40503: LD_VAR 0 3
40507: ARRAY
40508: PPUSH
40509: LD_INT 3
40511: PPUSH
40512: CALL_OW 259
40516: PUSH
40517: LD_VAR 0 2
40521: PUSH
40522: LD_VAR 0 3
40526: ARRAY
40527: PPUSH
40528: CALL_OW 432
40532: MINUS
40533: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40534: LD_VAR 0 4
40538: PUSH
40539: LD_VAR 0 5
40543: PPUSH
40544: LD_INT 3
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_VAR 0 5
40556: PPUSH
40557: CALL_OW 432
40561: MINUS
40562: GREATEREQUAL
40563: IFFALSE 40581
// mech := result [ i ] ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_VAR 0 2
40574: PUSH
40575: LD_VAR 0 3
40579: ARRAY
40580: ST_TO_ADDR
// end ;
40581: GO 40490
40583: POP
40584: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_VAR 0 5
40594: PPUSH
40595: CALL_OW 135
// end ;
40599: LD_VAR 0 2
40603: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40604: LD_INT 0
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
// result := [ ] ;
40619: LD_ADDR_VAR 0 7
40623: PUSH
40624: EMPTY
40625: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 266
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: IN
40646: NOT
40647: IFFALSE 40651
// exit ;
40649: GO 42291
// if name then
40651: LD_VAR 0 3
40655: IFFALSE 40671
// SetBName ( base_dep , name ) ;
40657: LD_VAR 0 1
40661: PPUSH
40662: LD_VAR 0 3
40666: PPUSH
40667: CALL_OW 500
// base := GetBase ( base_dep ) ;
40671: LD_ADDR_VAR 0 15
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 274
40685: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40686: LD_ADDR_VAR 0 16
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 255
40700: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40701: LD_ADDR_VAR 0 17
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 248
40715: ST_TO_ADDR
// if sources then
40716: LD_VAR 0 5
40720: IFFALSE 40767
// for i = 1 to 3 do
40722: LD_ADDR_VAR 0 8
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_INT 3
40734: PUSH
40735: FOR_TO
40736: IFFALSE 40765
// AddResourceType ( base , i , sources [ i ] ) ;
40738: LD_VAR 0 15
40742: PPUSH
40743: LD_VAR 0 8
40747: PPUSH
40748: LD_VAR 0 5
40752: PUSH
40753: LD_VAR 0 8
40757: ARRAY
40758: PPUSH
40759: CALL_OW 276
40763: GO 40735
40765: POP
40766: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40767: LD_ADDR_VAR 0 18
40771: PUSH
40772: LD_VAR 0 15
40776: PPUSH
40777: LD_VAR 0 2
40781: PPUSH
40782: LD_INT 1
40784: PPUSH
40785: CALL 40026 0 3
40789: ST_TO_ADDR
// InitHc ;
40790: CALL_OW 19
// InitUc ;
40794: CALL_OW 18
// uc_side := side ;
40798: LD_ADDR_OWVAR 20
40802: PUSH
40803: LD_VAR 0 16
40807: ST_TO_ADDR
// uc_nation := nation ;
40808: LD_ADDR_OWVAR 21
40812: PUSH
40813: LD_VAR 0 17
40817: ST_TO_ADDR
// if buildings then
40818: LD_VAR 0 18
40822: IFFALSE 42150
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40824: LD_ADDR_VAR 0 19
40828: PUSH
40829: LD_VAR 0 18
40833: PPUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 30
40839: PUSH
40840: LD_INT 29
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 30
40849: PUSH
40850: LD_INT 30
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: PPUSH
40862: CALL_OW 72
40866: ST_TO_ADDR
// if tmp then
40867: LD_VAR 0 19
40871: IFFALSE 40919
// for i in tmp do
40873: LD_ADDR_VAR 0 8
40877: PUSH
40878: LD_VAR 0 19
40882: PUSH
40883: FOR_IN
40884: IFFALSE 40917
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40886: LD_VAR 0 8
40890: PPUSH
40891: CALL_OW 250
40895: PPUSH
40896: LD_VAR 0 8
40900: PPUSH
40901: CALL_OW 251
40905: PPUSH
40906: LD_VAR 0 16
40910: PPUSH
40911: CALL_OW 441
40915: GO 40883
40917: POP
40918: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40919: LD_VAR 0 18
40923: PPUSH
40924: LD_INT 2
40926: PUSH
40927: LD_INT 30
40929: PUSH
40930: LD_INT 32
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 30
40939: PUSH
40940: LD_INT 33
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: PPUSH
40952: CALL_OW 72
40956: IFFALSE 41044
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: LD_VAR 0 18
40967: PPUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 30
40973: PUSH
40974: LD_INT 32
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 30
40983: PUSH
40984: LD_INT 33
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: PPUSH
40996: CALL_OW 72
41000: PUSH
41001: FOR_IN
41002: IFFALSE 41042
// begin if not GetBWeapon ( i ) then
41004: LD_VAR 0 8
41008: PPUSH
41009: CALL_OW 269
41013: NOT
41014: IFFALSE 41040
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41016: LD_VAR 0 8
41020: PPUSH
41021: LD_VAR 0 8
41025: PPUSH
41026: LD_VAR 0 2
41030: PPUSH
41031: CALL 42296 0 2
41035: PPUSH
41036: CALL_OW 431
// end ;
41040: GO 41001
41042: POP
41043: POP
// end ; for i = 1 to personel do
41044: LD_ADDR_VAR 0 8
41048: PUSH
41049: DOUBLE
41050: LD_INT 1
41052: DEC
41053: ST_TO_ADDR
41054: LD_VAR 0 6
41058: PUSH
41059: FOR_TO
41060: IFFALSE 42130
// begin if i > 4 then
41062: LD_VAR 0 8
41066: PUSH
41067: LD_INT 4
41069: GREATER
41070: IFFALSE 41074
// break ;
41072: GO 42130
// case i of 1 :
41074: LD_VAR 0 8
41078: PUSH
41079: LD_INT 1
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41167
41087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41088: LD_ADDR_VAR 0 12
41092: PUSH
41093: LD_VAR 0 18
41097: PPUSH
41098: LD_INT 22
41100: PUSH
41101: LD_VAR 0 16
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 58
41112: PUSH
41113: EMPTY
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 30
41121: PUSH
41122: LD_INT 32
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 30
41131: PUSH
41132: LD_INT 4
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 30
41141: PUSH
41142: LD_INT 5
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: PPUSH
41160: CALL_OW 72
41164: ST_TO_ADDR
41165: GO 41389
41167: LD_INT 2
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41237
41175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41176: LD_ADDR_VAR 0 12
41180: PUSH
41181: LD_VAR 0 18
41185: PPUSH
41186: LD_INT 22
41188: PUSH
41189: LD_VAR 0 16
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 30
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 30
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PPUSH
41230: CALL_OW 72
41234: ST_TO_ADDR
41235: GO 41389
41237: LD_INT 3
41239: DOUBLE
41240: EQUAL
41241: IFTRUE 41245
41243: GO 41307
41245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41246: LD_ADDR_VAR 0 12
41250: PUSH
41251: LD_VAR 0 18
41255: PPUSH
41256: LD_INT 22
41258: PUSH
41259: LD_VAR 0 16
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 30
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 30
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PPUSH
41300: CALL_OW 72
41304: ST_TO_ADDR
41305: GO 41389
41307: LD_INT 4
41309: DOUBLE
41310: EQUAL
41311: IFTRUE 41315
41313: GO 41388
41315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41316: LD_ADDR_VAR 0 12
41320: PUSH
41321: LD_VAR 0 18
41325: PPUSH
41326: LD_INT 22
41328: PUSH
41329: LD_VAR 0 16
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 30
41343: PUSH
41344: LD_INT 6
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 30
41353: PUSH
41354: LD_INT 7
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 30
41363: PUSH
41364: LD_INT 8
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PPUSH
41381: CALL_OW 72
41385: ST_TO_ADDR
41386: GO 41389
41388: POP
// if i = 1 then
41389: LD_VAR 0 8
41393: PUSH
41394: LD_INT 1
41396: EQUAL
41397: IFFALSE 41508
// begin tmp := [ ] ;
41399: LD_ADDR_VAR 0 19
41403: PUSH
41404: EMPTY
41405: ST_TO_ADDR
// for j in f do
41406: LD_ADDR_VAR 0 9
41410: PUSH
41411: LD_VAR 0 12
41415: PUSH
41416: FOR_IN
41417: IFFALSE 41490
// if GetBType ( j ) = b_bunker then
41419: LD_VAR 0 9
41423: PPUSH
41424: CALL_OW 266
41428: PUSH
41429: LD_INT 32
41431: EQUAL
41432: IFFALSE 41459
// tmp := Insert ( tmp , 1 , j ) else
41434: LD_ADDR_VAR 0 19
41438: PUSH
41439: LD_VAR 0 19
41443: PPUSH
41444: LD_INT 1
41446: PPUSH
41447: LD_VAR 0 9
41451: PPUSH
41452: CALL_OW 2
41456: ST_TO_ADDR
41457: GO 41488
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41459: LD_ADDR_VAR 0 19
41463: PUSH
41464: LD_VAR 0 19
41468: PPUSH
41469: LD_VAR 0 19
41473: PUSH
41474: LD_INT 1
41476: PLUS
41477: PPUSH
41478: LD_VAR 0 9
41482: PPUSH
41483: CALL_OW 2
41487: ST_TO_ADDR
41488: GO 41416
41490: POP
41491: POP
// if tmp then
41492: LD_VAR 0 19
41496: IFFALSE 41508
// f := tmp ;
41498: LD_ADDR_VAR 0 12
41502: PUSH
41503: LD_VAR 0 19
41507: ST_TO_ADDR
// end ; x := personel [ i ] ;
41508: LD_ADDR_VAR 0 13
41512: PUSH
41513: LD_VAR 0 6
41517: PUSH
41518: LD_VAR 0 8
41522: ARRAY
41523: ST_TO_ADDR
// if x = - 1 then
41524: LD_VAR 0 13
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: EQUAL
41533: IFFALSE 41744
// begin for j in f do
41535: LD_ADDR_VAR 0 9
41539: PUSH
41540: LD_VAR 0 12
41544: PUSH
41545: FOR_IN
41546: IFFALSE 41740
// repeat InitHc ;
41548: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41552: LD_VAR 0 9
41556: PPUSH
41557: CALL_OW 266
41561: PUSH
41562: LD_INT 5
41564: EQUAL
41565: IFFALSE 41635
// begin if UnitsInside ( j ) < 3 then
41567: LD_VAR 0 9
41571: PPUSH
41572: CALL_OW 313
41576: PUSH
41577: LD_INT 3
41579: LESS
41580: IFFALSE 41616
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41582: LD_INT 0
41584: PPUSH
41585: LD_INT 5
41587: PUSH
41588: LD_INT 8
41590: PUSH
41591: LD_INT 9
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: PUSH
41599: LD_VAR 0 17
41603: ARRAY
41604: PPUSH
41605: LD_VAR 0 4
41609: PPUSH
41610: CALL_OW 380
41614: GO 41633
// PrepareHuman ( false , i , skill ) ;
41616: LD_INT 0
41618: PPUSH
41619: LD_VAR 0 8
41623: PPUSH
41624: LD_VAR 0 4
41628: PPUSH
41629: CALL_OW 380
// end else
41633: GO 41652
// PrepareHuman ( false , i , skill ) ;
41635: LD_INT 0
41637: PPUSH
41638: LD_VAR 0 8
41642: PPUSH
41643: LD_VAR 0 4
41647: PPUSH
41648: CALL_OW 380
// un := CreateHuman ;
41652: LD_ADDR_VAR 0 14
41656: PUSH
41657: CALL_OW 44
41661: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41662: LD_ADDR_VAR 0 7
41666: PUSH
41667: LD_VAR 0 7
41671: PPUSH
41672: LD_INT 1
41674: PPUSH
41675: LD_VAR 0 14
41679: PPUSH
41680: CALL_OW 2
41684: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41685: LD_VAR 0 14
41689: PPUSH
41690: LD_VAR 0 9
41694: PPUSH
41695: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41699: LD_VAR 0 9
41703: PPUSH
41704: CALL_OW 313
41708: PUSH
41709: LD_INT 6
41711: EQUAL
41712: IFTRUE 41736
41714: PUSH
41715: LD_VAR 0 9
41719: PPUSH
41720: CALL_OW 266
41724: PUSH
41725: LD_INT 32
41727: PUSH
41728: LD_INT 31
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: IN
41735: OR
41736: IFFALSE 41548
41738: GO 41545
41740: POP
41741: POP
// end else
41742: GO 42128
// for j = 1 to x do
41744: LD_ADDR_VAR 0 9
41748: PUSH
41749: DOUBLE
41750: LD_INT 1
41752: DEC
41753: ST_TO_ADDR
41754: LD_VAR 0 13
41758: PUSH
41759: FOR_TO
41760: IFFALSE 42126
// begin InitHc ;
41762: CALL_OW 19
// if not f then
41766: LD_VAR 0 12
41770: NOT
41771: IFFALSE 41860
// begin PrepareHuman ( false , i , skill ) ;
41773: LD_INT 0
41775: PPUSH
41776: LD_VAR 0 8
41780: PPUSH
41781: LD_VAR 0 4
41785: PPUSH
41786: CALL_OW 380
// un := CreateHuman ;
41790: LD_ADDR_VAR 0 14
41794: PUSH
41795: CALL_OW 44
41799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41800: LD_ADDR_VAR 0 7
41804: PUSH
41805: LD_VAR 0 7
41809: PPUSH
41810: LD_INT 1
41812: PPUSH
41813: LD_VAR 0 14
41817: PPUSH
41818: CALL_OW 2
41822: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41823: LD_VAR 0 14
41827: PPUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 250
41837: PPUSH
41838: LD_VAR 0 1
41842: PPUSH
41843: CALL_OW 251
41847: PPUSH
41848: LD_INT 10
41850: PPUSH
41851: LD_INT 0
41853: PPUSH
41854: CALL_OW 50
// continue ;
41858: GO 41759
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41860: LD_VAR 0 12
41864: PUSH
41865: LD_INT 1
41867: ARRAY
41868: PPUSH
41869: CALL_OW 313
41873: IFFALSE 41901
41875: PUSH
41876: LD_VAR 0 12
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PPUSH
41885: CALL_OW 266
41889: PUSH
41890: LD_INT 32
41892: PUSH
41893: LD_INT 31
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: IN
41900: AND
41901: IFTRUE 41922
41903: PUSH
41904: LD_VAR 0 12
41908: PUSH
41909: LD_INT 1
41911: ARRAY
41912: PPUSH
41913: CALL_OW 313
41917: PUSH
41918: LD_INT 6
41920: EQUAL
41921: OR
41922: IFFALSE 41942
// f := Delete ( f , 1 ) ;
41924: LD_ADDR_VAR 0 12
41928: PUSH
41929: LD_VAR 0 12
41933: PPUSH
41934: LD_INT 1
41936: PPUSH
41937: CALL_OW 3
41941: ST_TO_ADDR
// if not f then
41942: LD_VAR 0 12
41946: NOT
41947: IFFALSE 41965
// begin x := x + 2 ;
41949: LD_ADDR_VAR 0 13
41953: PUSH
41954: LD_VAR 0 13
41958: PUSH
41959: LD_INT 2
41961: PLUS
41962: ST_TO_ADDR
// continue ;
41963: GO 41759
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41965: LD_VAR 0 12
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: CALL_OW 266
41978: PUSH
41979: LD_INT 5
41981: EQUAL
41982: IFFALSE 42056
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41984: LD_VAR 0 12
41988: PUSH
41989: LD_INT 1
41991: ARRAY
41992: PPUSH
41993: CALL_OW 313
41997: PUSH
41998: LD_INT 3
42000: LESS
42001: IFFALSE 42037
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42003: LD_INT 0
42005: PPUSH
42006: LD_INT 5
42008: PUSH
42009: LD_INT 8
42011: PUSH
42012: LD_INT 9
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: LD_VAR 0 17
42024: ARRAY
42025: PPUSH
42026: LD_VAR 0 4
42030: PPUSH
42031: CALL_OW 380
42035: GO 42054
// PrepareHuman ( false , i , skill ) ;
42037: LD_INT 0
42039: PPUSH
42040: LD_VAR 0 8
42044: PPUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: CALL_OW 380
// end else
42054: GO 42073
// PrepareHuman ( false , i , skill ) ;
42056: LD_INT 0
42058: PPUSH
42059: LD_VAR 0 8
42063: PPUSH
42064: LD_VAR 0 4
42068: PPUSH
42069: CALL_OW 380
// un := CreateHuman ;
42073: LD_ADDR_VAR 0 14
42077: PUSH
42078: CALL_OW 44
42082: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42083: LD_ADDR_VAR 0 7
42087: PUSH
42088: LD_VAR 0 7
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: LD_VAR 0 14
42100: PPUSH
42101: CALL_OW 2
42105: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42106: LD_VAR 0 14
42110: PPUSH
42111: LD_VAR 0 12
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: PPUSH
42120: CALL_OW 52
// end ;
42124: GO 41759
42126: POP
42127: POP
// end ;
42128: GO 41059
42130: POP
42131: POP
// result := result ^ buildings ;
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: LD_VAR 0 7
42141: PUSH
42142: LD_VAR 0 18
42146: ADD
42147: ST_TO_ADDR
// end else
42148: GO 42291
// begin for i = 1 to personel do
42150: LD_ADDR_VAR 0 8
42154: PUSH
42155: DOUBLE
42156: LD_INT 1
42158: DEC
42159: ST_TO_ADDR
42160: LD_VAR 0 6
42164: PUSH
42165: FOR_TO
42166: IFFALSE 42289
// begin if i > 4 then
42168: LD_VAR 0 8
42172: PUSH
42173: LD_INT 4
42175: GREATER
42176: IFFALSE 42180
// break ;
42178: GO 42289
// x := personel [ i ] ;
42180: LD_ADDR_VAR 0 13
42184: PUSH
42185: LD_VAR 0 6
42189: PUSH
42190: LD_VAR 0 8
42194: ARRAY
42195: ST_TO_ADDR
// if x = - 1 then
42196: LD_VAR 0 13
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: EQUAL
42205: IFFALSE 42209
// continue ;
42207: GO 42165
// PrepareHuman ( false , i , skill ) ;
42209: LD_INT 0
42211: PPUSH
42212: LD_VAR 0 8
42216: PPUSH
42217: LD_VAR 0 4
42221: PPUSH
42222: CALL_OW 380
// un := CreateHuman ;
42226: LD_ADDR_VAR 0 14
42230: PUSH
42231: CALL_OW 44
42235: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42236: LD_VAR 0 14
42240: PPUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: CALL_OW 250
42250: PPUSH
42251: LD_VAR 0 1
42255: PPUSH
42256: CALL_OW 251
42260: PPUSH
42261: LD_INT 10
42263: PPUSH
42264: LD_INT 0
42266: PPUSH
42267: CALL_OW 50
// result := result ^ un ;
42271: LD_ADDR_VAR 0 7
42275: PUSH
42276: LD_VAR 0 7
42280: PUSH
42281: LD_VAR 0 14
42285: ADD
42286: ST_TO_ADDR
// end ;
42287: GO 42165
42289: POP
42290: POP
// end ; end ;
42291: LD_VAR 0 7
42295: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42296: LD_INT 0
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
// result := false ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42322: LD_VAR 0 1
42326: NOT
42327: IFTRUE 42352
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 266
42339: PUSH
42340: LD_INT 32
42342: PUSH
42343: LD_INT 33
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: IN
42350: NOT
42351: OR
42352: IFFALSE 42356
// exit ;
42354: GO 43491
// nat := GetNation ( tower ) ;
42356: LD_ADDR_VAR 0 12
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: CALL_OW 248
42370: ST_TO_ADDR
// side := GetSide ( tower ) ;
42371: LD_ADDR_VAR 0 16
42375: PUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 255
42385: ST_TO_ADDR
// x := GetX ( tower ) ;
42386: LD_ADDR_VAR 0 10
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 250
42400: ST_TO_ADDR
// y := GetY ( tower ) ;
42401: LD_ADDR_VAR 0 11
42405: PUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 251
42415: ST_TO_ADDR
// if not x or not y then
42416: LD_VAR 0 10
42420: NOT
42421: IFTRUE 42430
42423: PUSH
42424: LD_VAR 0 11
42428: NOT
42429: OR
42430: IFFALSE 42434
// exit ;
42432: GO 43491
// weapon := 0 ;
42434: LD_ADDR_VAR 0 18
42438: PUSH
42439: LD_INT 0
42441: ST_TO_ADDR
// fac_list := [ ] ;
42442: LD_ADDR_VAR 0 17
42446: PUSH
42447: EMPTY
42448: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42449: LD_ADDR_VAR 0 6
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL_OW 274
42463: PPUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: LD_INT 0
42471: PPUSH
42472: CALL 40026 0 3
42476: PPUSH
42477: LD_INT 30
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PPUSH
42487: CALL_OW 72
42491: ST_TO_ADDR
// if not factories then
42492: LD_VAR 0 6
42496: NOT
42497: IFFALSE 42501
// exit ;
42499: GO 43491
// for i in factories do
42501: LD_ADDR_VAR 0 8
42505: PUSH
42506: LD_VAR 0 6
42510: PUSH
42511: FOR_IN
42512: IFFALSE 42537
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42514: LD_ADDR_VAR 0 17
42518: PUSH
42519: LD_VAR 0 17
42523: PUSH
42524: LD_VAR 0 8
42528: PPUSH
42529: CALL_OW 478
42533: UNION
42534: ST_TO_ADDR
42535: GO 42511
42537: POP
42538: POP
// if not fac_list then
42539: LD_VAR 0 17
42543: NOT
42544: IFFALSE 42548
// exit ;
42546: GO 43491
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42548: LD_ADDR_VAR 0 5
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: LD_INT 5
42558: PUSH
42559: LD_INT 9
42561: PUSH
42562: LD_INT 10
42564: PUSH
42565: LD_INT 6
42567: PUSH
42568: LD_INT 7
42570: PUSH
42571: LD_INT 11
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 27
42585: PUSH
42586: LD_INT 28
42588: PUSH
42589: LD_INT 26
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 43
42603: PUSH
42604: LD_INT 44
42606: PUSH
42607: LD_INT 46
42609: PUSH
42610: LD_INT 45
42612: PUSH
42613: LD_INT 47
42615: PUSH
42616: LD_INT 49
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: PUSH
42632: LD_VAR 0 12
42636: ARRAY
42637: ST_TO_ADDR
// list := list isect fac_list ;
42638: LD_ADDR_VAR 0 5
42642: PUSH
42643: LD_VAR 0 5
42647: PUSH
42648: LD_VAR 0 17
42652: ISECT
42653: ST_TO_ADDR
// if not list then
42654: LD_VAR 0 5
42658: NOT
42659: IFFALSE 42663
// exit ;
42661: GO 43491
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42663: LD_VAR 0 12
42667: PUSH
42668: LD_INT 3
42670: EQUAL
42671: IFFALSE 42683
42673: PUSH
42674: LD_INT 49
42676: PUSH
42677: LD_VAR 0 5
42681: IN
42682: AND
42683: IFFALSE 42703
42685: PUSH
42686: LD_INT 31
42688: PPUSH
42689: LD_VAR 0 16
42693: PPUSH
42694: CALL_OW 321
42698: PUSH
42699: LD_INT 2
42701: EQUAL
42702: AND
42703: IFFALSE 42763
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42705: LD_INT 22
42707: PUSH
42708: LD_VAR 0 16
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 35
42719: PUSH
42720: LD_INT 49
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 91
42729: PUSH
42730: LD_VAR 0 1
42734: PUSH
42735: LD_INT 10
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: PPUSH
42748: CALL_OW 69
42752: NOT
42753: IFFALSE 42763
// weapon := ru_time_lapser ;
42755: LD_ADDR_VAR 0 18
42759: PUSH
42760: LD_INT 49
42762: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42763: LD_VAR 0 12
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: IN
42778: IFFALSE 42802
42780: PUSH
42781: LD_INT 11
42783: PUSH
42784: LD_VAR 0 5
42788: IN
42789: IFTRUE 42801
42791: PUSH
42792: LD_INT 30
42794: PUSH
42795: LD_VAR 0 5
42799: IN
42800: OR
42801: AND
42802: IFFALSE 42822
42804: PUSH
42805: LD_INT 6
42807: PPUSH
42808: LD_VAR 0 16
42812: PPUSH
42813: CALL_OW 321
42817: PUSH
42818: LD_INT 2
42820: EQUAL
42821: AND
42822: IFFALSE 42989
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42824: LD_INT 22
42826: PUSH
42827: LD_VAR 0 16
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 35
42841: PUSH
42842: LD_INT 11
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 35
42851: PUSH
42852: LD_INT 30
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 91
42866: PUSH
42867: LD_VAR 0 1
42871: PUSH
42872: LD_INT 18
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: PPUSH
42885: CALL_OW 69
42889: NOT
42890: IFFALSE 42966
42892: PUSH
42893: LD_INT 22
42895: PUSH
42896: LD_VAR 0 16
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 30
42910: PUSH
42911: LD_INT 32
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 30
42920: PUSH
42921: LD_INT 33
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 91
42935: PUSH
42936: LD_VAR 0 1
42940: PUSH
42941: LD_INT 12
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: PPUSH
42957: CALL_OW 69
42961: PUSH
42962: LD_INT 2
42964: GREATER
42965: AND
42966: IFFALSE 42989
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42968: LD_ADDR_VAR 0 18
42972: PUSH
42973: LD_INT 11
42975: PUSH
42976: LD_INT 30
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_VAR 0 12
42987: ARRAY
42988: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42989: LD_VAR 0 18
42993: NOT
42994: IFFALSE 43014
42996: PUSH
42997: LD_INT 40
42999: PPUSH
43000: LD_VAR 0 16
43004: PPUSH
43005: CALL_OW 321
43009: PUSH
43010: LD_INT 2
43012: EQUAL
43013: AND
43014: IFFALSE 43050
43016: PUSH
43017: LD_INT 7
43019: PUSH
43020: LD_VAR 0 5
43024: IN
43025: IFTRUE 43037
43027: PUSH
43028: LD_INT 28
43030: PUSH
43031: LD_VAR 0 5
43035: IN
43036: OR
43037: IFTRUE 43049
43039: PUSH
43040: LD_INT 45
43042: PUSH
43043: LD_VAR 0 5
43047: IN
43048: OR
43049: AND
43050: IFFALSE 43304
// begin hex := GetHexInfo ( x , y ) ;
43052: LD_ADDR_VAR 0 4
43056: PUSH
43057: LD_VAR 0 10
43061: PPUSH
43062: LD_VAR 0 11
43066: PPUSH
43067: CALL_OW 546
43071: ST_TO_ADDR
// if hex [ 1 ] then
43072: LD_VAR 0 4
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: IFFALSE 43084
// exit ;
43082: GO 43491
// height := hex [ 2 ] ;
43084: LD_ADDR_VAR 0 15
43088: PUSH
43089: LD_VAR 0 4
43093: PUSH
43094: LD_INT 2
43096: ARRAY
43097: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43098: LD_ADDR_VAR 0 14
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// for i in tmp do
43121: LD_ADDR_VAR 0 8
43125: PUSH
43126: LD_VAR 0 14
43130: PUSH
43131: FOR_IN
43132: IFFALSE 43302
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43134: LD_ADDR_VAR 0 9
43138: PUSH
43139: LD_VAR 0 10
43143: PPUSH
43144: LD_VAR 0 8
43148: PPUSH
43149: LD_INT 5
43151: PPUSH
43152: CALL_OW 272
43156: PUSH
43157: LD_VAR 0 11
43161: PPUSH
43162: LD_VAR 0 8
43166: PPUSH
43167: LD_INT 5
43169: PPUSH
43170: CALL_OW 273
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43179: LD_VAR 0 9
43183: PUSH
43184: LD_INT 1
43186: ARRAY
43187: PPUSH
43188: LD_VAR 0 9
43192: PUSH
43193: LD_INT 2
43195: ARRAY
43196: PPUSH
43197: CALL_OW 488
43201: IFFALSE 43300
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43203: LD_ADDR_VAR 0 4
43207: PUSH
43208: LD_VAR 0 9
43212: PUSH
43213: LD_INT 1
43215: ARRAY
43216: PPUSH
43217: LD_VAR 0 9
43221: PUSH
43222: LD_INT 2
43224: ARRAY
43225: PPUSH
43226: CALL_OW 546
43230: ST_TO_ADDR
// if hex [ 1 ] then
43231: LD_VAR 0 4
43235: PUSH
43236: LD_INT 1
43238: ARRAY
43239: IFFALSE 43243
// continue ;
43241: GO 43131
// h := hex [ 2 ] ;
43243: LD_ADDR_VAR 0 13
43247: PUSH
43248: LD_VAR 0 4
43252: PUSH
43253: LD_INT 2
43255: ARRAY
43256: ST_TO_ADDR
// if h + 7 < height then
43257: LD_VAR 0 13
43261: PUSH
43262: LD_INT 7
43264: PLUS
43265: PUSH
43266: LD_VAR 0 15
43270: LESS
43271: IFFALSE 43300
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43273: LD_ADDR_VAR 0 18
43277: PUSH
43278: LD_INT 7
43280: PUSH
43281: LD_INT 28
43283: PUSH
43284: LD_INT 45
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: PUSH
43292: LD_VAR 0 12
43296: ARRAY
43297: ST_TO_ADDR
// break ;
43298: GO 43302
// end ; end ; end ;
43300: GO 43131
43302: POP
43303: POP
// end ; if not weapon then
43304: LD_VAR 0 18
43308: NOT
43309: IFFALSE 43369
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43311: LD_ADDR_VAR 0 5
43315: PUSH
43316: LD_VAR 0 5
43320: PUSH
43321: LD_INT 11
43323: PUSH
43324: LD_INT 30
43326: PUSH
43327: LD_INT 49
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: DIFF
43335: ST_TO_ADDR
// if not list then
43336: LD_VAR 0 5
43340: NOT
43341: IFFALSE 43345
// exit ;
43343: GO 43491
// weapon := list [ rand ( 1 , list ) ] ;
43345: LD_ADDR_VAR 0 18
43349: PUSH
43350: LD_VAR 0 5
43354: PUSH
43355: LD_INT 1
43357: PPUSH
43358: LD_VAR 0 5
43362: PPUSH
43363: CALL_OW 12
43367: ARRAY
43368: ST_TO_ADDR
// end ; if weapon then
43369: LD_VAR 0 18
43373: IFFALSE 43491
// begin tmp := CostOfWeapon ( weapon ) ;
43375: LD_ADDR_VAR 0 14
43379: PUSH
43380: LD_VAR 0 18
43384: PPUSH
43385: CALL_OW 451
43389: ST_TO_ADDR
// j := GetBase ( tower ) ;
43390: LD_ADDR_VAR 0 9
43394: PUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL_OW 274
43404: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43405: LD_VAR 0 9
43409: PPUSH
43410: LD_INT 1
43412: PPUSH
43413: CALL_OW 275
43417: PUSH
43418: LD_VAR 0 14
43422: PUSH
43423: LD_INT 1
43425: ARRAY
43426: GREATEREQUAL
43427: IFFALSE 43453
43429: PUSH
43430: LD_VAR 0 9
43434: PPUSH
43435: LD_INT 2
43437: PPUSH
43438: CALL_OW 275
43442: PUSH
43443: LD_VAR 0 14
43447: PUSH
43448: LD_INT 2
43450: ARRAY
43451: GREATEREQUAL
43452: AND
43453: IFFALSE 43479
43455: PUSH
43456: LD_VAR 0 9
43460: PPUSH
43461: LD_INT 3
43463: PPUSH
43464: CALL_OW 275
43468: PUSH
43469: LD_VAR 0 14
43473: PUSH
43474: LD_INT 3
43476: ARRAY
43477: GREATEREQUAL
43478: AND
43479: IFFALSE 43491
// result := weapon ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 18
43490: ST_TO_ADDR
// end ; end ;
43491: LD_VAR 0 3
43495: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43496: LD_INT 0
43498: PPUSH
43499: PPUSH
// result := true ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 1
43507: ST_TO_ADDR
// if array1 = array2 then
43508: LD_VAR 0 1
43512: PUSH
43513: LD_VAR 0 2
43517: EQUAL
43518: IFFALSE 43578
// begin for i = 1 to array1 do
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: DOUBLE
43526: LD_INT 1
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 1
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43574
// if array1 [ i ] <> array2 [ i ] then
43538: LD_VAR 0 1
43542: PUSH
43543: LD_VAR 0 4
43547: ARRAY
43548: PUSH
43549: LD_VAR 0 2
43553: PUSH
43554: LD_VAR 0 4
43558: ARRAY
43559: NONEQUAL
43560: IFFALSE 43572
// begin result := false ;
43562: LD_ADDR_VAR 0 3
43566: PUSH
43567: LD_INT 0
43569: ST_TO_ADDR
// break ;
43570: GO 43574
// end ;
43572: GO 43535
43574: POP
43575: POP
// end else
43576: GO 43586
// result := false ;
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// end ;
43586: LD_VAR 0 3
43590: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43591: LD_INT 0
43593: PPUSH
43594: PPUSH
// if not array1 or not array2 then
43595: LD_VAR 0 1
43599: NOT
43600: IFTRUE 43609
43602: PUSH
43603: LD_VAR 0 2
43607: NOT
43608: OR
43609: IFFALSE 43613
// exit ;
43611: GO 43677
// result := true ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_INT 1
43620: ST_TO_ADDR
// for i = 1 to array1 do
43621: LD_ADDR_VAR 0 4
43625: PUSH
43626: DOUBLE
43627: LD_INT 1
43629: DEC
43630: ST_TO_ADDR
43631: LD_VAR 0 1
43635: PUSH
43636: FOR_TO
43637: IFFALSE 43675
// if array1 [ i ] <> array2 [ i ] then
43639: LD_VAR 0 1
43643: PUSH
43644: LD_VAR 0 4
43648: ARRAY
43649: PUSH
43650: LD_VAR 0 2
43654: PUSH
43655: LD_VAR 0 4
43659: ARRAY
43660: NONEQUAL
43661: IFFALSE 43673
// begin result := false ;
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 0
43670: ST_TO_ADDR
// break ;
43671: GO 43675
// end ;
43673: GO 43636
43675: POP
43676: POP
// end ;
43677: LD_VAR 0 3
43681: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43682: LD_INT 0
43684: PPUSH
43685: PPUSH
43686: PPUSH
// pom := GetBase ( fac ) ;
43687: LD_ADDR_VAR 0 5
43691: PUSH
43692: LD_VAR 0 1
43696: PPUSH
43697: CALL_OW 274
43701: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43702: LD_ADDR_VAR 0 4
43706: PUSH
43707: LD_VAR 0 2
43711: PUSH
43712: LD_INT 1
43714: ARRAY
43715: PPUSH
43716: LD_VAR 0 2
43720: PUSH
43721: LD_INT 2
43723: ARRAY
43724: PPUSH
43725: LD_VAR 0 2
43729: PUSH
43730: LD_INT 3
43732: ARRAY
43733: PPUSH
43734: LD_VAR 0 2
43738: PUSH
43739: LD_INT 4
43741: ARRAY
43742: PPUSH
43743: CALL_OW 449
43747: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43748: LD_ADDR_VAR 0 3
43752: PUSH
43753: LD_VAR 0 5
43757: PPUSH
43758: LD_INT 1
43760: PPUSH
43761: CALL_OW 275
43765: PUSH
43766: LD_VAR 0 4
43770: PUSH
43771: LD_INT 1
43773: ARRAY
43774: GREATEREQUAL
43775: IFFALSE 43801
43777: PUSH
43778: LD_VAR 0 5
43782: PPUSH
43783: LD_INT 2
43785: PPUSH
43786: CALL_OW 275
43790: PUSH
43791: LD_VAR 0 4
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: GREATEREQUAL
43800: AND
43801: IFFALSE 43827
43803: PUSH
43804: LD_VAR 0 5
43808: PPUSH
43809: LD_INT 3
43811: PPUSH
43812: CALL_OW 275
43816: PUSH
43817: LD_VAR 0 4
43821: PUSH
43822: LD_INT 3
43824: ARRAY
43825: GREATEREQUAL
43826: AND
43827: ST_TO_ADDR
// end ;
43828: LD_VAR 0 3
43832: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43833: LD_INT 0
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
// pom := GetBase ( building ) ;
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 274
43853: ST_TO_ADDR
// if not pom then
43854: LD_VAR 0 3
43858: NOT
43859: IFFALSE 43863
// exit ;
43861: GO 44037
// btype := GetBType ( building ) ;
43863: LD_ADDR_VAR 0 5
43867: PUSH
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 266
43877: ST_TO_ADDR
// if btype = b_armoury then
43878: LD_VAR 0 5
43882: PUSH
43883: LD_INT 4
43885: EQUAL
43886: IFFALSE 43896
// btype := b_barracks ;
43888: LD_ADDR_VAR 0 5
43892: PUSH
43893: LD_INT 5
43895: ST_TO_ADDR
// if btype = b_depot then
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 0
43903: EQUAL
43904: IFFALSE 43914
// btype := b_warehouse ;
43906: LD_ADDR_VAR 0 5
43910: PUSH
43911: LD_INT 1
43913: ST_TO_ADDR
// if btype = b_workshop then
43914: LD_VAR 0 5
43918: PUSH
43919: LD_INT 2
43921: EQUAL
43922: IFFALSE 43932
// btype := b_factory ;
43924: LD_ADDR_VAR 0 5
43928: PUSH
43929: LD_INT 3
43931: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43932: LD_ADDR_VAR 0 4
43936: PUSH
43937: LD_VAR 0 5
43941: PPUSH
43942: LD_VAR 0 1
43946: PPUSH
43947: CALL_OW 248
43951: PPUSH
43952: CALL_OW 450
43956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43957: LD_ADDR_VAR 0 2
43961: PUSH
43962: LD_VAR 0 3
43966: PPUSH
43967: LD_INT 1
43969: PPUSH
43970: CALL_OW 275
43974: PUSH
43975: LD_VAR 0 4
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: GREATEREQUAL
43984: IFFALSE 44010
43986: PUSH
43987: LD_VAR 0 3
43991: PPUSH
43992: LD_INT 2
43994: PPUSH
43995: CALL_OW 275
43999: PUSH
44000: LD_VAR 0 4
44004: PUSH
44005: LD_INT 2
44007: ARRAY
44008: GREATEREQUAL
44009: AND
44010: IFFALSE 44036
44012: PUSH
44013: LD_VAR 0 3
44017: PPUSH
44018: LD_INT 3
44020: PPUSH
44021: CALL_OW 275
44025: PUSH
44026: LD_VAR 0 4
44030: PUSH
44031: LD_INT 3
44033: ARRAY
44034: GREATEREQUAL
44035: AND
44036: ST_TO_ADDR
// end ;
44037: LD_VAR 0 2
44041: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44042: LD_INT 0
44044: PPUSH
44045: PPUSH
44046: PPUSH
// pom := GetBase ( building ) ;
44047: LD_ADDR_VAR 0 4
44051: PUSH
44052: LD_VAR 0 1
44056: PPUSH
44057: CALL_OW 274
44061: ST_TO_ADDR
// if not pom then
44062: LD_VAR 0 4
44066: NOT
44067: IFFALSE 44071
// exit ;
44069: GO 44176
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: LD_VAR 0 2
44080: PPUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 248
44090: PPUSH
44091: CALL_OW 450
44095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44096: LD_ADDR_VAR 0 3
44100: PUSH
44101: LD_VAR 0 4
44105: PPUSH
44106: LD_INT 1
44108: PPUSH
44109: CALL_OW 275
44113: PUSH
44114: LD_VAR 0 5
44118: PUSH
44119: LD_INT 1
44121: ARRAY
44122: GREATEREQUAL
44123: IFFALSE 44149
44125: PUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: LD_INT 2
44133: PPUSH
44134: CALL_OW 275
44138: PUSH
44139: LD_VAR 0 5
44143: PUSH
44144: LD_INT 2
44146: ARRAY
44147: GREATEREQUAL
44148: AND
44149: IFFALSE 44175
44151: PUSH
44152: LD_VAR 0 4
44156: PPUSH
44157: LD_INT 3
44159: PPUSH
44160: CALL_OW 275
44164: PUSH
44165: LD_VAR 0 5
44169: PUSH
44170: LD_INT 3
44172: ARRAY
44173: GREATEREQUAL
44174: AND
44175: ST_TO_ADDR
// end ;
44176: LD_VAR 0 3
44180: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44181: LD_INT 0
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
// result := false ;
44194: LD_ADDR_VAR 0 8
44198: PUSH
44199: LD_INT 0
44201: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44202: LD_VAR 0 5
44206: NOT
44207: IFTRUE 44216
44209: PUSH
44210: LD_VAR 0 1
44214: NOT
44215: OR
44216: IFTRUE 44225
44218: PUSH
44219: LD_VAR 0 2
44223: NOT
44224: OR
44225: IFTRUE 44234
44227: PUSH
44228: LD_VAR 0 3
44232: NOT
44233: OR
44234: IFFALSE 44238
// exit ;
44236: GO 45064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44238: LD_ADDR_VAR 0 14
44242: PUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: LD_VAR 0 2
44252: PPUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: LD_VAR 0 4
44262: PPUSH
44263: LD_VAR 0 5
44267: PUSH
44268: LD_INT 1
44270: ARRAY
44271: PPUSH
44272: CALL_OW 248
44276: PPUSH
44277: LD_INT 0
44279: PPUSH
44280: CALL 46345 0 6
44284: ST_TO_ADDR
// if not hexes then
44285: LD_VAR 0 14
44289: NOT
44290: IFFALSE 44294
// exit ;
44292: GO 45064
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44294: LD_ADDR_VAR 0 17
44298: PUSH
44299: LD_VAR 0 5
44303: PPUSH
44304: LD_INT 22
44306: PUSH
44307: LD_VAR 0 13
44311: PPUSH
44312: CALL_OW 255
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 30
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 30
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PPUSH
44353: CALL_OW 72
44357: ST_TO_ADDR
// for i = 1 to hexes do
44358: LD_ADDR_VAR 0 9
44362: PUSH
44363: DOUBLE
44364: LD_INT 1
44366: DEC
44367: ST_TO_ADDR
44368: LD_VAR 0 14
44372: PUSH
44373: FOR_TO
44374: IFFALSE 45062
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44376: LD_ADDR_VAR 0 13
44380: PUSH
44381: LD_VAR 0 14
44385: PUSH
44386: LD_VAR 0 9
44390: ARRAY
44391: PUSH
44392: LD_INT 1
44394: ARRAY
44395: PPUSH
44396: LD_VAR 0 14
44400: PUSH
44401: LD_VAR 0 9
44405: ARRAY
44406: PUSH
44407: LD_INT 2
44409: ARRAY
44410: PPUSH
44411: CALL_OW 428
44415: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44416: LD_VAR 0 14
44420: PUSH
44421: LD_VAR 0 9
44425: ARRAY
44426: PUSH
44427: LD_INT 1
44429: ARRAY
44430: PPUSH
44431: LD_VAR 0 14
44435: PUSH
44436: LD_VAR 0 9
44440: ARRAY
44441: PUSH
44442: LD_INT 2
44444: ARRAY
44445: PPUSH
44446: CALL_OW 351
44450: IFTRUE 44489
44452: PUSH
44453: LD_VAR 0 14
44457: PUSH
44458: LD_VAR 0 9
44462: ARRAY
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: LD_VAR 0 14
44472: PUSH
44473: LD_VAR 0 9
44477: ARRAY
44478: PUSH
44479: LD_INT 2
44481: ARRAY
44482: PPUSH
44483: CALL_OW 488
44487: NOT
44488: OR
44489: IFTRUE 44506
44491: PUSH
44492: LD_VAR 0 13
44496: PPUSH
44497: CALL_OW 247
44501: PUSH
44502: LD_INT 3
44504: EQUAL
44505: OR
44506: IFFALSE 44512
// exit ;
44508: POP
44509: POP
44510: GO 45064
// if not tmp then
44512: LD_VAR 0 13
44516: NOT
44517: IFFALSE 44521
// continue ;
44519: GO 44373
// result := true ;
44521: LD_ADDR_VAR 0 8
44525: PUSH
44526: LD_INT 1
44528: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44529: LD_VAR 0 6
44533: IFFALSE 44550
44535: PUSH
44536: LD_VAR 0 13
44540: PPUSH
44541: CALL_OW 247
44545: PUSH
44546: LD_INT 2
44548: EQUAL
44549: AND
44550: IFFALSE 44567
44552: PUSH
44553: LD_VAR 0 13
44557: PPUSH
44558: CALL_OW 263
44562: PUSH
44563: LD_INT 1
44565: EQUAL
44566: AND
44567: IFFALSE 44731
// begin if IsDrivenBy ( tmp ) then
44569: LD_VAR 0 13
44573: PPUSH
44574: CALL_OW 311
44578: IFFALSE 44582
// continue ;
44580: GO 44373
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44582: LD_VAR 0 6
44586: PPUSH
44587: LD_INT 3
44589: PUSH
44590: LD_INT 60
44592: PUSH
44593: EMPTY
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 55
44605: PUSH
44606: EMPTY
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PPUSH
44617: CALL_OW 72
44621: IFFALSE 44729
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44623: LD_ADDR_VAR 0 18
44627: PUSH
44628: LD_VAR 0 6
44632: PPUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 60
44638: PUSH
44639: EMPTY
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: LD_INT 55
44651: PUSH
44652: EMPTY
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PPUSH
44663: CALL_OW 72
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: ST_TO_ADDR
// if IsInUnit ( driver ) then
44672: LD_VAR 0 18
44676: PPUSH
44677: CALL_OW 310
44681: IFFALSE 44692
// ComExit ( driver ) ;
44683: LD_VAR 0 18
44687: PPUSH
44688: CALL 70335 0 1
// AddComEnterUnit ( driver , tmp ) ;
44692: LD_VAR 0 18
44696: PPUSH
44697: LD_VAR 0 13
44701: PPUSH
44702: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44706: LD_VAR 0 18
44710: PPUSH
44711: LD_VAR 0 7
44715: PPUSH
44716: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44720: LD_VAR 0 18
44724: PPUSH
44725: CALL_OW 181
// end ; continue ;
44729: GO 44373
// end ; if not cleaners or not tmp in cleaners then
44731: LD_VAR 0 6
44735: NOT
44736: IFTRUE 44751
44738: PUSH
44739: LD_VAR 0 13
44743: PUSH
44744: LD_VAR 0 6
44748: IN
44749: NOT
44750: OR
44751: IFFALSE 45060
// begin if dep then
44753: LD_VAR 0 17
44757: IFFALSE 44893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44759: LD_ADDR_VAR 0 16
44763: PUSH
44764: LD_VAR 0 17
44768: PUSH
44769: LD_INT 1
44771: ARRAY
44772: PPUSH
44773: CALL_OW 250
44777: PPUSH
44778: LD_VAR 0 17
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PPUSH
44787: CALL_OW 254
44791: PPUSH
44792: LD_INT 5
44794: PPUSH
44795: CALL_OW 272
44799: PUSH
44800: LD_VAR 0 17
44804: PUSH
44805: LD_INT 1
44807: ARRAY
44808: PPUSH
44809: CALL_OW 251
44813: PPUSH
44814: LD_VAR 0 17
44818: PUSH
44819: LD_INT 1
44821: ARRAY
44822: PPUSH
44823: CALL_OW 254
44827: PPUSH
44828: LD_INT 5
44830: PPUSH
44831: CALL_OW 273
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44840: LD_VAR 0 16
44844: PUSH
44845: LD_INT 1
44847: ARRAY
44848: PPUSH
44849: LD_VAR 0 16
44853: PUSH
44854: LD_INT 2
44856: ARRAY
44857: PPUSH
44858: CALL_OW 488
44862: IFFALSE 44893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44864: LD_VAR 0 13
44868: PPUSH
44869: LD_VAR 0 16
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: LD_VAR 0 16
44882: PUSH
44883: LD_INT 2
44885: ARRAY
44886: PPUSH
44887: CALL_OW 111
// continue ;
44891: GO 44373
// end ; end ; r := GetDir ( tmp ) ;
44893: LD_ADDR_VAR 0 15
44897: PUSH
44898: LD_VAR 0 13
44902: PPUSH
44903: CALL_OW 254
44907: ST_TO_ADDR
// if r = 5 then
44908: LD_VAR 0 15
44912: PUSH
44913: LD_INT 5
44915: EQUAL
44916: IFFALSE 44926
// r := 0 ;
44918: LD_ADDR_VAR 0 15
44922: PUSH
44923: LD_INT 0
44925: ST_TO_ADDR
// for j = r to 5 do
44926: LD_ADDR_VAR 0 10
44930: PUSH
44931: DOUBLE
44932: LD_VAR 0 15
44936: DEC
44937: ST_TO_ADDR
44938: LD_INT 5
44940: PUSH
44941: FOR_TO
44942: IFFALSE 45058
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44944: LD_ADDR_VAR 0 11
44948: PUSH
44949: LD_VAR 0 13
44953: PPUSH
44954: CALL_OW 250
44958: PPUSH
44959: LD_VAR 0 10
44963: PPUSH
44964: LD_INT 2
44966: PPUSH
44967: CALL_OW 272
44971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44972: LD_ADDR_VAR 0 12
44976: PUSH
44977: LD_VAR 0 13
44981: PPUSH
44982: CALL_OW 251
44986: PPUSH
44987: LD_VAR 0 10
44991: PPUSH
44992: LD_INT 2
44994: PPUSH
44995: CALL_OW 273
44999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45000: LD_VAR 0 11
45004: PPUSH
45005: LD_VAR 0 12
45009: PPUSH
45010: CALL_OW 488
45014: IFFALSE 45033
45016: PUSH
45017: LD_VAR 0 11
45021: PPUSH
45022: LD_VAR 0 12
45026: PPUSH
45027: CALL_OW 428
45031: NOT
45032: AND
45033: IFFALSE 45056
// begin ComMoveXY ( tmp , _x , _y ) ;
45035: LD_VAR 0 13
45039: PPUSH
45040: LD_VAR 0 11
45044: PPUSH
45045: LD_VAR 0 12
45049: PPUSH
45050: CALL_OW 111
// break ;
45054: GO 45058
// end ; end ;
45056: GO 44941
45058: POP
45059: POP
// end ; end ;
45060: GO 44373
45062: POP
45063: POP
// end ;
45064: LD_VAR 0 8
45068: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45069: LD_INT 0
45071: PPUSH
// result := true ;
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_INT 1
45079: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45080: LD_VAR 0 2
45084: PUSH
45085: LD_INT 24
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45099
45091: LD_INT 33
45093: DOUBLE
45094: EQUAL
45095: IFTRUE 45099
45097: GO 45124
45099: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45100: LD_ADDR_VAR 0 3
45104: PUSH
45105: LD_INT 32
45107: PPUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 321
45117: PUSH
45118: LD_INT 2
45120: EQUAL
45121: ST_TO_ADDR
45122: GO 45440
45124: LD_INT 20
45126: DOUBLE
45127: EQUAL
45128: IFTRUE 45132
45130: GO 45157
45132: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45133: LD_ADDR_VAR 0 3
45137: PUSH
45138: LD_INT 6
45140: PPUSH
45141: LD_VAR 0 1
45145: PPUSH
45146: CALL_OW 321
45150: PUSH
45151: LD_INT 2
45153: EQUAL
45154: ST_TO_ADDR
45155: GO 45440
45157: LD_INT 22
45159: DOUBLE
45160: EQUAL
45161: IFTRUE 45171
45163: LD_INT 36
45165: DOUBLE
45166: EQUAL
45167: IFTRUE 45171
45169: GO 45196
45171: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45172: LD_ADDR_VAR 0 3
45176: PUSH
45177: LD_INT 15
45179: PPUSH
45180: LD_VAR 0 1
45184: PPUSH
45185: CALL_OW 321
45189: PUSH
45190: LD_INT 2
45192: EQUAL
45193: ST_TO_ADDR
45194: GO 45440
45196: LD_INT 30
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45204
45202: GO 45229
45204: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45205: LD_ADDR_VAR 0 3
45209: PUSH
45210: LD_INT 20
45212: PPUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 321
45222: PUSH
45223: LD_INT 2
45225: EQUAL
45226: ST_TO_ADDR
45227: GO 45440
45229: LD_INT 28
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45243
45235: LD_INT 21
45237: DOUBLE
45238: EQUAL
45239: IFTRUE 45243
45241: GO 45268
45243: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 21
45251: PPUSH
45252: LD_VAR 0 1
45256: PPUSH
45257: CALL_OW 321
45261: PUSH
45262: LD_INT 2
45264: EQUAL
45265: ST_TO_ADDR
45266: GO 45440
45268: LD_INT 16
45270: DOUBLE
45271: EQUAL
45272: IFTRUE 45276
45274: GO 45301
45276: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: LD_INT 84
45284: PPUSH
45285: LD_VAR 0 1
45289: PPUSH
45290: CALL_OW 321
45294: PUSH
45295: LD_INT 2
45297: EQUAL
45298: ST_TO_ADDR
45299: GO 45440
45301: LD_INT 19
45303: DOUBLE
45304: EQUAL
45305: IFTRUE 45315
45307: LD_INT 23
45309: DOUBLE
45310: EQUAL
45311: IFTRUE 45315
45313: GO 45340
45315: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45316: LD_ADDR_VAR 0 3
45320: PUSH
45321: LD_INT 83
45323: PPUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: CALL_OW 321
45333: PUSH
45334: LD_INT 2
45336: EQUAL
45337: ST_TO_ADDR
45338: GO 45440
45340: LD_INT 17
45342: DOUBLE
45343: EQUAL
45344: IFTRUE 45348
45346: GO 45373
45348: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45349: LD_ADDR_VAR 0 3
45353: PUSH
45354: LD_INT 39
45356: PPUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: CALL_OW 321
45366: PUSH
45367: LD_INT 2
45369: EQUAL
45370: ST_TO_ADDR
45371: GO 45440
45373: LD_INT 18
45375: DOUBLE
45376: EQUAL
45377: IFTRUE 45381
45379: GO 45406
45381: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45382: LD_ADDR_VAR 0 3
45386: PUSH
45387: LD_INT 40
45389: PPUSH
45390: LD_VAR 0 1
45394: PPUSH
45395: CALL_OW 321
45399: PUSH
45400: LD_INT 2
45402: EQUAL
45403: ST_TO_ADDR
45404: GO 45440
45406: LD_INT 27
45408: DOUBLE
45409: EQUAL
45410: IFTRUE 45414
45412: GO 45439
45414: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45415: LD_ADDR_VAR 0 3
45419: PUSH
45420: LD_INT 35
45422: PPUSH
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 321
45432: PUSH
45433: LD_INT 2
45435: EQUAL
45436: ST_TO_ADDR
45437: GO 45440
45439: POP
// end ;
45440: LD_VAR 0 3
45444: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45445: LD_INT 0
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
// result := false ;
45458: LD_ADDR_VAR 0 6
45462: PUSH
45463: LD_INT 0
45465: ST_TO_ADDR
// if btype = b_depot then
45466: LD_VAR 0 2
45470: PUSH
45471: LD_INT 0
45473: EQUAL
45474: IFFALSE 45486
// begin result := true ;
45476: LD_ADDR_VAR 0 6
45480: PUSH
45481: LD_INT 1
45483: ST_TO_ADDR
// exit ;
45484: GO 46340
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45486: LD_VAR 0 1
45490: NOT
45491: IFTRUE 45516
45493: PUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: CALL_OW 266
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: IN
45514: NOT
45515: OR
45516: IFTRUE 45525
45518: PUSH
45519: LD_VAR 0 2
45523: NOT
45524: OR
45525: IFTRUE 45561
45527: PUSH
45528: LD_VAR 0 5
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: LD_INT 4
45547: PUSH
45548: LD_INT 5
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: IN
45559: NOT
45560: OR
45561: IFTRUE 45580
45563: PUSH
45564: LD_VAR 0 3
45568: PPUSH
45569: LD_VAR 0 4
45573: PPUSH
45574: CALL_OW 488
45578: NOT
45579: OR
45580: IFFALSE 45584
// exit ;
45582: GO 46340
// side := GetSide ( depot ) ;
45584: LD_ADDR_VAR 0 9
45588: PUSH
45589: LD_VAR 0 1
45593: PPUSH
45594: CALL_OW 255
45598: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45599: LD_VAR 0 9
45603: PPUSH
45604: LD_VAR 0 2
45608: PPUSH
45609: CALL 45069 0 2
45613: NOT
45614: IFFALSE 45618
// exit ;
45616: GO 46340
// pom := GetBase ( depot ) ;
45618: LD_ADDR_VAR 0 10
45622: PUSH
45623: LD_VAR 0 1
45627: PPUSH
45628: CALL_OW 274
45632: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45633: LD_ADDR_VAR 0 11
45637: PUSH
45638: LD_VAR 0 2
45642: PPUSH
45643: LD_VAR 0 1
45647: PPUSH
45648: CALL_OW 248
45652: PPUSH
45653: CALL_OW 450
45657: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45658: LD_VAR 0 10
45662: PPUSH
45663: LD_INT 1
45665: PPUSH
45666: CALL_OW 275
45670: PUSH
45671: LD_VAR 0 11
45675: PUSH
45676: LD_INT 1
45678: ARRAY
45679: GREATEREQUAL
45680: IFFALSE 45706
45682: PUSH
45683: LD_VAR 0 10
45687: PPUSH
45688: LD_INT 2
45690: PPUSH
45691: CALL_OW 275
45695: PUSH
45696: LD_VAR 0 11
45700: PUSH
45701: LD_INT 2
45703: ARRAY
45704: GREATEREQUAL
45705: AND
45706: IFFALSE 45732
45708: PUSH
45709: LD_VAR 0 10
45713: PPUSH
45714: LD_INT 3
45716: PPUSH
45717: CALL_OW 275
45721: PUSH
45722: LD_VAR 0 11
45726: PUSH
45727: LD_INT 3
45729: ARRAY
45730: GREATEREQUAL
45731: AND
45732: NOT
45733: IFFALSE 45737
// exit ;
45735: GO 46340
// if GetBType ( depot ) = b_depot then
45737: LD_VAR 0 1
45741: PPUSH
45742: CALL_OW 266
45746: PUSH
45747: LD_INT 0
45749: EQUAL
45750: IFFALSE 45762
// dist := 28 else
45752: LD_ADDR_VAR 0 14
45756: PUSH
45757: LD_INT 28
45759: ST_TO_ADDR
45760: GO 45770
// dist := 36 ;
45762: LD_ADDR_VAR 0 14
45766: PUSH
45767: LD_INT 36
45769: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45770: LD_VAR 0 1
45774: PPUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: LD_VAR 0 4
45784: PPUSH
45785: CALL_OW 297
45789: PUSH
45790: LD_VAR 0 14
45794: GREATER
45795: IFFALSE 45799
// exit ;
45797: GO 46340
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45799: LD_ADDR_VAR 0 12
45803: PUSH
45804: LD_VAR 0 2
45808: PPUSH
45809: LD_VAR 0 3
45813: PPUSH
45814: LD_VAR 0 4
45818: PPUSH
45819: LD_VAR 0 5
45823: PPUSH
45824: LD_VAR 0 1
45828: PPUSH
45829: CALL_OW 248
45833: PPUSH
45834: LD_INT 0
45836: PPUSH
45837: CALL 46345 0 6
45841: ST_TO_ADDR
// if not hexes then
45842: LD_VAR 0 12
45846: NOT
45847: IFFALSE 45851
// exit ;
45849: GO 46340
// hex := GetHexInfo ( x , y ) ;
45851: LD_ADDR_VAR 0 15
45855: PUSH
45856: LD_VAR 0 3
45860: PPUSH
45861: LD_VAR 0 4
45865: PPUSH
45866: CALL_OW 546
45870: ST_TO_ADDR
// if hex [ 1 ] then
45871: LD_VAR 0 15
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: IFFALSE 45883
// exit ;
45881: GO 46340
// height := hex [ 2 ] ;
45883: LD_ADDR_VAR 0 13
45887: PUSH
45888: LD_VAR 0 15
45892: PUSH
45893: LD_INT 2
45895: ARRAY
45896: ST_TO_ADDR
// for i = 1 to hexes do
45897: LD_ADDR_VAR 0 7
45901: PUSH
45902: DOUBLE
45903: LD_INT 1
45905: DEC
45906: ST_TO_ADDR
45907: LD_VAR 0 12
45911: PUSH
45912: FOR_TO
45913: IFFALSE 46257
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45915: LD_VAR 0 12
45919: PUSH
45920: LD_VAR 0 7
45924: ARRAY
45925: PUSH
45926: LD_INT 1
45928: ARRAY
45929: PPUSH
45930: LD_VAR 0 12
45934: PUSH
45935: LD_VAR 0 7
45939: ARRAY
45940: PUSH
45941: LD_INT 2
45943: ARRAY
45944: PPUSH
45945: CALL_OW 488
45949: NOT
45950: IFTRUE 45992
45952: PUSH
45953: LD_VAR 0 12
45957: PUSH
45958: LD_VAR 0 7
45962: ARRAY
45963: PUSH
45964: LD_INT 1
45966: ARRAY
45967: PPUSH
45968: LD_VAR 0 12
45972: PUSH
45973: LD_VAR 0 7
45977: ARRAY
45978: PUSH
45979: LD_INT 2
45981: ARRAY
45982: PPUSH
45983: CALL_OW 428
45987: PUSH
45988: LD_INT 0
45990: GREATER
45991: OR
45992: IFTRUE 46030
45994: PUSH
45995: LD_VAR 0 12
45999: PUSH
46000: LD_VAR 0 7
46004: ARRAY
46005: PUSH
46006: LD_INT 1
46008: ARRAY
46009: PPUSH
46010: LD_VAR 0 12
46014: PUSH
46015: LD_VAR 0 7
46019: ARRAY
46020: PUSH
46021: LD_INT 2
46023: ARRAY
46024: PPUSH
46025: CALL_OW 351
46029: OR
46030: IFFALSE 46036
// exit ;
46032: POP
46033: POP
46034: GO 46340
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46036: LD_ADDR_VAR 0 8
46040: PUSH
46041: LD_VAR 0 12
46045: PUSH
46046: LD_VAR 0 7
46050: ARRAY
46051: PUSH
46052: LD_INT 1
46054: ARRAY
46055: PPUSH
46056: LD_VAR 0 12
46060: PUSH
46061: LD_VAR 0 7
46065: ARRAY
46066: PUSH
46067: LD_INT 2
46069: ARRAY
46070: PPUSH
46071: CALL_OW 546
46075: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46076: LD_VAR 0 8
46080: PUSH
46081: LD_INT 1
46083: ARRAY
46084: IFTRUE 46106
46086: PUSH
46087: LD_VAR 0 8
46091: PUSH
46092: LD_INT 2
46094: ARRAY
46095: PUSH
46096: LD_VAR 0 13
46100: PUSH
46101: LD_INT 2
46103: PLUS
46104: GREATER
46105: OR
46106: IFTRUE 46128
46108: PUSH
46109: LD_VAR 0 8
46113: PUSH
46114: LD_INT 2
46116: ARRAY
46117: PUSH
46118: LD_VAR 0 13
46122: PUSH
46123: LD_INT 2
46125: MINUS
46126: LESS
46127: OR
46128: IFTRUE 46196
46130: PUSH
46131: LD_VAR 0 8
46135: PUSH
46136: LD_INT 3
46138: ARRAY
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 8
46145: PUSH
46146: LD_INT 9
46148: PUSH
46149: LD_INT 10
46151: PUSH
46152: LD_INT 11
46154: PUSH
46155: LD_INT 12
46157: PUSH
46158: LD_INT 13
46160: PUSH
46161: LD_INT 16
46163: PUSH
46164: LD_INT 17
46166: PUSH
46167: LD_INT 18
46169: PUSH
46170: LD_INT 19
46172: PUSH
46173: LD_INT 20
46175: PUSH
46176: LD_INT 21
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: IN
46194: NOT
46195: OR
46196: IFTRUE 46209
46198: PUSH
46199: LD_VAR 0 8
46203: PUSH
46204: LD_INT 5
46206: ARRAY
46207: NOT
46208: OR
46209: IFTRUE 46249
46211: PUSH
46212: LD_VAR 0 8
46216: PUSH
46217: LD_INT 6
46219: ARRAY
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 7
46229: PUSH
46230: LD_INT 9
46232: PUSH
46233: LD_INT 10
46235: PUSH
46236: LD_INT 11
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: IN
46247: NOT
46248: OR
46249: IFFALSE 46255
// exit ;
46251: POP
46252: POP
46253: GO 46340
// end ;
46255: GO 45912
46257: POP
46258: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46259: LD_VAR 0 9
46263: PPUSH
46264: LD_VAR 0 3
46268: PPUSH
46269: LD_VAR 0 4
46273: PPUSH
46274: LD_INT 20
46276: PPUSH
46277: CALL 38159 0 4
46281: PUSH
46282: LD_INT 4
46284: ARRAY
46285: IFFALSE 46289
// exit ;
46287: GO 46340
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46289: LD_VAR 0 2
46293: PUSH
46294: LD_INT 29
46296: PUSH
46297: LD_INT 30
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: IN
46304: IFFALSE 46328
46306: PUSH
46307: LD_VAR 0 3
46311: PPUSH
46312: LD_VAR 0 4
46316: PPUSH
46317: LD_VAR 0 9
46321: PPUSH
46322: CALL_OW 440
46326: NOT
46327: AND
46328: IFFALSE 46332
// exit ;
46330: GO 46340
// result := true ;
46332: LD_ADDR_VAR 0 6
46336: PUSH
46337: LD_INT 1
46339: ST_TO_ADDR
// end ;
46340: LD_VAR 0 6
46344: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46345: LD_INT 0
46347: PPUSH
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
46357: PPUSH
46358: PPUSH
46359: PPUSH
46360: PPUSH
46361: PPUSH
46362: PPUSH
46363: PPUSH
46364: PPUSH
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
// result = [ ] ;
46405: LD_ADDR_VAR 0 7
46409: PUSH
46410: EMPTY
46411: ST_TO_ADDR
// temp_list = [ ] ;
46412: LD_ADDR_VAR 0 9
46416: PUSH
46417: EMPTY
46418: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46419: LD_VAR 0 4
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 4
46438: PUSH
46439: LD_INT 5
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: IN
46450: NOT
46451: IFTRUE 46494
46453: PUSH
46454: LD_VAR 0 1
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: IN
46469: IFFALSE 46493
46471: PUSH
46472: LD_VAR 0 5
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: IN
46491: NOT
46492: AND
46493: OR
46494: IFFALSE 46498
// exit ;
46496: GO 64897
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46498: LD_VAR 0 1
46502: PUSH
46503: LD_INT 6
46505: PUSH
46506: LD_INT 7
46508: PUSH
46509: LD_INT 8
46511: PUSH
46512: LD_INT 13
46514: PUSH
46515: LD_INT 12
46517: PUSH
46518: LD_INT 15
46520: PUSH
46521: LD_INT 11
46523: PUSH
46524: LD_INT 14
46526: PUSH
46527: LD_INT 10
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: IN
46541: IFFALSE 46551
// btype = b_lab ;
46543: LD_ADDR_VAR 0 1
46547: PUSH
46548: LD_INT 6
46550: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46551: LD_VAR 0 6
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: IN
46570: NOT
46571: IFTRUE 46639
46573: PUSH
46574: LD_VAR 0 1
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: LD_INT 6
46593: PUSH
46594: LD_INT 36
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: LD_INT 31
46605: PUSH
46606: LD_INT 32
46608: PUSH
46609: LD_INT 33
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: IN
46625: NOT
46626: IFFALSE 46638
46628: PUSH
46629: LD_VAR 0 6
46633: PUSH
46634: LD_INT 1
46636: EQUAL
46637: AND
46638: OR
46639: IFTRUE 46671
46641: PUSH
46642: LD_VAR 0 1
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: IN
46657: NOT
46658: IFFALSE 46670
46660: PUSH
46661: LD_VAR 0 6
46665: PUSH
46666: LD_INT 2
46668: EQUAL
46669: AND
46670: OR
46671: IFFALSE 46681
// mode = 0 ;
46673: LD_ADDR_VAR 0 6
46677: PUSH
46678: LD_INT 0
46680: ST_TO_ADDR
// case mode of 0 :
46681: LD_VAR 0 6
46685: PUSH
46686: LD_INT 0
46688: DOUBLE
46689: EQUAL
46690: IFTRUE 46694
46692: GO 58147
46694: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46695: LD_ADDR_VAR 0 11
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46888: LD_ADDR_VAR 0 12
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47084: LD_ADDR_VAR 0 13
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47283: LD_ADDR_VAR 0 14
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 3
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 3
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47479: LD_ADDR_VAR 0 15
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47672: LD_ADDR_VAR 0 16
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47865: LD_ADDR_VAR 0 17
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 18
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48325: LD_ADDR_VAR 0 19
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48555: LD_ADDR_VAR 0 20
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48785: LD_ADDR_VAR 0 21
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49015: LD_ADDR_VAR 0 22
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49245: LD_ADDR_VAR 0 23
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49525: LD_ADDR_VAR 0 24
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49801: LD_ADDR_VAR 0 25
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 3
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50075: LD_ADDR_VAR 0 26
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 3
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50351: LD_ADDR_VAR 0 27
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50631: LD_ADDR_VAR 0 28
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50913: LD_ADDR_VAR 0 29
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51192: LD_ADDR_VAR 0 30
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51470: LD_ADDR_VAR 0 31
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51748: LD_ADDR_VAR 0 32
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52026: LD_ADDR_VAR 0 33
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52305: LD_ADDR_VAR 0 34
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52585: LD_ADDR_VAR 0 35
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52697: LD_ADDR_VAR 0 36
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52809: LD_ADDR_VAR 0 37
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52921: LD_ADDR_VAR 0 38
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53033: LD_ADDR_VAR 0 39
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53145: LD_ADDR_VAR 0 40
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53257: LD_ADDR_VAR 0 41
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53607: LD_ADDR_VAR 0 42
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53957: LD_ADDR_VAR 0 43
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54305: LD_ADDR_VAR 0 44
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54655: LD_ADDR_VAR 0 45
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55005: LD_ADDR_VAR 0 46
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55353: LD_ADDR_VAR 0 47
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55504: LD_ADDR_VAR 0 48
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55651: LD_ADDR_VAR 0 49
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55795: LD_ADDR_VAR 0 50
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55939: LD_ADDR_VAR 0 51
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56086: LD_ADDR_VAR 0 52
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56237: LD_ADDR_VAR 0 53
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56467: LD_ADDR_VAR 0 54
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56697: LD_ADDR_VAR 0 55
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56927: LD_ADDR_VAR 0 56
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57157: LD_ADDR_VAR 0 57
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57387: LD_ADDR_VAR 0 58
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57617: LD_ADDR_VAR 0 59
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57705: LD_ADDR_VAR 0 60
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57793: LD_ADDR_VAR 0 61
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57881: LD_ADDR_VAR 0 62
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57969: LD_ADDR_VAR 0 63
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58057: LD_ADDR_VAR 0 64
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// end ; 1 :
58145: GO 64042
58147: LD_INT 1
58149: DOUBLE
58150: EQUAL
58151: IFTRUE 58155
58153: GO 60778
58155: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58156: LD_ADDR_VAR 0 11
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58200: LD_ADDR_VAR 0 12
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58241: LD_ADDR_VAR 0 13
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58281: LD_ADDR_VAR 0 14
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58322: LD_ADDR_VAR 0 15
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58366: LD_ADDR_VAR 0 16
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58412: LD_ADDR_VAR 0 17
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58456: LD_ADDR_VAR 0 18
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58497: LD_ADDR_VAR 0 19
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58537: LD_ADDR_VAR 0 20
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58578: LD_ADDR_VAR 0 21
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58622: LD_ADDR_VAR 0 22
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58668: LD_ADDR_VAR 0 23
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58712: LD_ADDR_VAR 0 24
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58753: LD_ADDR_VAR 0 25
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58793: LD_ADDR_VAR 0 26
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58834: LD_ADDR_VAR 0 27
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58878: LD_ADDR_VAR 0 28
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: LD_INT 4
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58924: LD_ADDR_VAR 0 29
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 5
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 5
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 4
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 6
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 6
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 5
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59079: LD_ADDR_VAR 0 30
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 5
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 5
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 5
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 6
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 6
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59222: LD_ADDR_VAR 0 31
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 4
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: LD_INT 4
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 5
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: LD_INT 5
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 6
59319: PUSH
59320: LD_INT 5
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 6
59329: PUSH
59330: LD_INT 6
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 5
59339: PUSH
59340: LD_INT 6
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59361: LD_ADDR_VAR 0 32
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 4
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 5
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 5
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 6
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 6
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 5
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59504: LD_ADDR_VAR 0 33
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 5
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 5
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 6
59624: NEG
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 6
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59659: LD_ADDR_VAR 0 34
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: LD_INT 4
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 4
59714: NEG
59715: PUSH
59716: LD_INT 3
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 4
59726: NEG
59727: PUSH
59728: LD_INT 4
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: LD_INT 5
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 5
59750: NEG
59751: PUSH
59752: LD_INT 4
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 5
59762: NEG
59763: PUSH
59764: LD_INT 5
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 5
59774: NEG
59775: PUSH
59776: LD_INT 6
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 6
59786: NEG
59787: PUSH
59788: LD_INT 5
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 6
59798: NEG
59799: PUSH
59800: LD_INT 6
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59822: LD_ADDR_VAR 0 41
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59866: LD_ADDR_VAR 0 42
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59907: LD_ADDR_VAR 0 43
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59947: LD_ADDR_VAR 0 44
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 45
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60032: LD_ADDR_VAR 0 46
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60078: LD_ADDR_VAR 0 47
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60111: LD_ADDR_VAR 0 48
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60142: LD_ADDR_VAR 0 49
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60171: LD_ADDR_VAR 0 50
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60200: LD_ADDR_VAR 0 51
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60231: LD_ADDR_VAR 0 52
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60264: LD_ADDR_VAR 0 53
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60308: LD_ADDR_VAR 0 54
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60349: LD_ADDR_VAR 0 55
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 3
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60389: LD_ADDR_VAR 0 56
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60430: LD_ADDR_VAR 0 57
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60474: LD_ADDR_VAR 0 58
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60520: LD_ADDR_VAR 0 59
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60564: LD_ADDR_VAR 0 60
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60605: LD_ADDR_VAR 0 61
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60645: LD_ADDR_VAR 0 62
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60686: LD_ADDR_VAR 0 63
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60730: LD_ADDR_VAR 0 64
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: LIST
60775: ST_TO_ADDR
// end ; 2 :
60776: GO 64042
60778: LD_INT 2
60780: DOUBLE
60781: EQUAL
60782: IFTRUE 60786
60784: GO 64041
60786: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60787: LD_ADDR_VAR 0 29
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 5
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 5
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 4
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 4
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 5
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 5
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 4
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 4
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 5
61232: NEG
61233: PUSH
61234: LD_INT 4
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 5
61244: NEG
61245: PUSH
61246: LD_INT 5
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: LD_INT 5
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61325: LD_ADDR_VAR 0 30
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: LD_INT 4
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 5
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: LD_INT 5
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 5
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 4
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 4
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 5
61571: NEG
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 5
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 5
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: LD_INT 4
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 3
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 4
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: LD_INT 4
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 4
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 4
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 5
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 4
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: LD_INT 5
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61872: LD_ADDR_VAR 0 31
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 5
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 5
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 4
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 5
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: NEG
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 4
62051: NEG
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 4
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 4
62086: NEG
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: LD_INT 4
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 5
62134: NEG
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 5
62146: NEG
62147: PUSH
62148: LD_INT 5
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 5
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 5
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 4
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 5
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 5
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62422: LD_ADDR_VAR 0 32
62426: PUSH
62427: LD_INT 4
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: NEG
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 5
62485: NEG
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 5
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 5
62508: NEG
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: NEG
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 3
62543: NEG
62544: PUSH
62545: LD_INT 4
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 4
62591: NEG
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 4
62603: NEG
62604: PUSH
62605: LD_INT 4
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: LD_INT 4
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 4
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 5
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 4
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 3
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 4
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 5
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 5
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 4
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: LD_INT 4
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 5
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 5
62864: PUSH
62865: LD_INT 5
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: LD_INT 5
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: LD_INT 4
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: LD_INT 3
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: LD_INT 5
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62969: LD_ADDR_VAR 0 33
62973: PUSH
62974: LD_INT 4
62976: NEG
62977: PUSH
62978: LD_INT 4
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 4
62988: NEG
62989: PUSH
62990: LD_INT 5
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 3
63000: NEG
63001: PUSH
63002: LD_INT 4
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 4
63024: NEG
63025: PUSH
63026: LD_INT 3
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 5
63036: NEG
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 5
63048: NEG
63049: PUSH
63050: LD_INT 5
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: LD_INT 5
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 5
63072: NEG
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 4
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 3
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 4
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 4
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 4
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 4
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 5
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 5
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 3
63258: PUSH
63259: LD_INT 2
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 5
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 4
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 4
63309: PUSH
63310: LD_INT 4
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 2
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: LD_INT 4
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 5
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 5
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63507: LD_ADDR_VAR 0 34
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 4
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 5
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 4
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 5
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: LD_INT 5
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 4
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 4
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 4
63709: PUSH
63710: LD_INT 4
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 4
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 5
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 5
63739: PUSH
63740: LD_INT 5
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 5
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 5
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 5
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 4
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: LD_INT 4
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 4
63892: NEG
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 4
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 4
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 5
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 5
63971: NEG
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: ST_TO_ADDR
// end ; end ;
64039: GO 64042
64041: POP
// case btype of b_depot , b_warehouse :
64042: LD_VAR 0 1
64046: PUSH
64047: LD_INT 0
64049: DOUBLE
64050: EQUAL
64051: IFTRUE 64061
64053: LD_INT 1
64055: DOUBLE
64056: EQUAL
64057: IFTRUE 64061
64059: GO 64262
64061: POP
// case nation of nation_american :
64062: LD_VAR 0 5
64066: PUSH
64067: LD_INT 1
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64075
64073: GO 64131
64075: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64076: LD_ADDR_VAR 0 9
64080: PUSH
64081: LD_VAR 0 11
64085: PUSH
64086: LD_VAR 0 12
64090: PUSH
64091: LD_VAR 0 13
64095: PUSH
64096: LD_VAR 0 14
64100: PUSH
64101: LD_VAR 0 15
64105: PUSH
64106: LD_VAR 0 16
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: LD_INT 1
64126: PLUS
64127: ARRAY
64128: ST_TO_ADDR
64129: GO 64260
64131: LD_INT 2
64133: DOUBLE
64134: EQUAL
64135: IFTRUE 64139
64137: GO 64195
64139: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64140: LD_ADDR_VAR 0 9
64144: PUSH
64145: LD_VAR 0 17
64149: PUSH
64150: LD_VAR 0 18
64154: PUSH
64155: LD_VAR 0 19
64159: PUSH
64160: LD_VAR 0 20
64164: PUSH
64165: LD_VAR 0 21
64169: PUSH
64170: LD_VAR 0 22
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: PUSH
64183: LD_VAR 0 4
64187: PUSH
64188: LD_INT 1
64190: PLUS
64191: ARRAY
64192: ST_TO_ADDR
64193: GO 64260
64195: LD_INT 3
64197: DOUBLE
64198: EQUAL
64199: IFTRUE 64203
64201: GO 64259
64203: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64204: LD_ADDR_VAR 0 9
64208: PUSH
64209: LD_VAR 0 23
64213: PUSH
64214: LD_VAR 0 24
64218: PUSH
64219: LD_VAR 0 25
64223: PUSH
64224: LD_VAR 0 26
64228: PUSH
64229: LD_VAR 0 27
64233: PUSH
64234: LD_VAR 0 28
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: PUSH
64247: LD_VAR 0 4
64251: PUSH
64252: LD_INT 1
64254: PLUS
64255: ARRAY
64256: ST_TO_ADDR
64257: GO 64260
64259: POP
64260: GO 64815
64262: LD_INT 2
64264: DOUBLE
64265: EQUAL
64266: IFTRUE 64276
64268: LD_INT 3
64270: DOUBLE
64271: EQUAL
64272: IFTRUE 64276
64274: GO 64332
64276: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64277: LD_ADDR_VAR 0 9
64281: PUSH
64282: LD_VAR 0 29
64286: PUSH
64287: LD_VAR 0 30
64291: PUSH
64292: LD_VAR 0 31
64296: PUSH
64297: LD_VAR 0 32
64301: PUSH
64302: LD_VAR 0 33
64306: PUSH
64307: LD_VAR 0 34
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: PUSH
64320: LD_VAR 0 4
64324: PUSH
64325: LD_INT 1
64327: PLUS
64328: ARRAY
64329: ST_TO_ADDR
64330: GO 64815
64332: LD_INT 16
64334: DOUBLE
64335: EQUAL
64336: IFTRUE 64394
64338: LD_INT 17
64340: DOUBLE
64341: EQUAL
64342: IFTRUE 64394
64344: LD_INT 18
64346: DOUBLE
64347: EQUAL
64348: IFTRUE 64394
64350: LD_INT 19
64352: DOUBLE
64353: EQUAL
64354: IFTRUE 64394
64356: LD_INT 22
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64394
64362: LD_INT 20
64364: DOUBLE
64365: EQUAL
64366: IFTRUE 64394
64368: LD_INT 21
64370: DOUBLE
64371: EQUAL
64372: IFTRUE 64394
64374: LD_INT 23
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64394
64380: LD_INT 24
64382: DOUBLE
64383: EQUAL
64384: IFTRUE 64394
64386: LD_INT 25
64388: DOUBLE
64389: EQUAL
64390: IFTRUE 64394
64392: GO 64450
64394: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64395: LD_ADDR_VAR 0 9
64399: PUSH
64400: LD_VAR 0 35
64404: PUSH
64405: LD_VAR 0 36
64409: PUSH
64410: LD_VAR 0 37
64414: PUSH
64415: LD_VAR 0 38
64419: PUSH
64420: LD_VAR 0 39
64424: PUSH
64425: LD_VAR 0 40
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: PUSH
64438: LD_VAR 0 4
64442: PUSH
64443: LD_INT 1
64445: PLUS
64446: ARRAY
64447: ST_TO_ADDR
64448: GO 64815
64450: LD_INT 6
64452: DOUBLE
64453: EQUAL
64454: IFTRUE 64506
64456: LD_INT 7
64458: DOUBLE
64459: EQUAL
64460: IFTRUE 64506
64462: LD_INT 8
64464: DOUBLE
64465: EQUAL
64466: IFTRUE 64506
64468: LD_INT 13
64470: DOUBLE
64471: EQUAL
64472: IFTRUE 64506
64474: LD_INT 12
64476: DOUBLE
64477: EQUAL
64478: IFTRUE 64506
64480: LD_INT 15
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64506
64486: LD_INT 11
64488: DOUBLE
64489: EQUAL
64490: IFTRUE 64506
64492: LD_INT 14
64494: DOUBLE
64495: EQUAL
64496: IFTRUE 64506
64498: LD_INT 10
64500: DOUBLE
64501: EQUAL
64502: IFTRUE 64506
64504: GO 64562
64506: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64507: LD_ADDR_VAR 0 9
64511: PUSH
64512: LD_VAR 0 41
64516: PUSH
64517: LD_VAR 0 42
64521: PUSH
64522: LD_VAR 0 43
64526: PUSH
64527: LD_VAR 0 44
64531: PUSH
64532: LD_VAR 0 45
64536: PUSH
64537: LD_VAR 0 46
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: PUSH
64550: LD_VAR 0 4
64554: PUSH
64555: LD_INT 1
64557: PLUS
64558: ARRAY
64559: ST_TO_ADDR
64560: GO 64815
64562: LD_INT 36
64564: DOUBLE
64565: EQUAL
64566: IFTRUE 64570
64568: GO 64626
64570: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64571: LD_ADDR_VAR 0 9
64575: PUSH
64576: LD_VAR 0 47
64580: PUSH
64581: LD_VAR 0 48
64585: PUSH
64586: LD_VAR 0 49
64590: PUSH
64591: LD_VAR 0 50
64595: PUSH
64596: LD_VAR 0 51
64600: PUSH
64601: LD_VAR 0 52
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 4
64618: PUSH
64619: LD_INT 1
64621: PLUS
64622: ARRAY
64623: ST_TO_ADDR
64624: GO 64815
64626: LD_INT 4
64628: DOUBLE
64629: EQUAL
64630: IFTRUE 64652
64632: LD_INT 5
64634: DOUBLE
64635: EQUAL
64636: IFTRUE 64652
64638: LD_INT 34
64640: DOUBLE
64641: EQUAL
64642: IFTRUE 64652
64644: LD_INT 37
64646: DOUBLE
64647: EQUAL
64648: IFTRUE 64652
64650: GO 64708
64652: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64653: LD_ADDR_VAR 0 9
64657: PUSH
64658: LD_VAR 0 53
64662: PUSH
64663: LD_VAR 0 54
64667: PUSH
64668: LD_VAR 0 55
64672: PUSH
64673: LD_VAR 0 56
64677: PUSH
64678: LD_VAR 0 57
64682: PUSH
64683: LD_VAR 0 58
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: PUSH
64696: LD_VAR 0 4
64700: PUSH
64701: LD_INT 1
64703: PLUS
64704: ARRAY
64705: ST_TO_ADDR
64706: GO 64815
64708: LD_INT 31
64710: DOUBLE
64711: EQUAL
64712: IFTRUE 64758
64714: LD_INT 32
64716: DOUBLE
64717: EQUAL
64718: IFTRUE 64758
64720: LD_INT 33
64722: DOUBLE
64723: EQUAL
64724: IFTRUE 64758
64726: LD_INT 27
64728: DOUBLE
64729: EQUAL
64730: IFTRUE 64758
64732: LD_INT 26
64734: DOUBLE
64735: EQUAL
64736: IFTRUE 64758
64738: LD_INT 28
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64758
64744: LD_INT 29
64746: DOUBLE
64747: EQUAL
64748: IFTRUE 64758
64750: LD_INT 30
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64758
64756: GO 64814
64758: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64759: LD_ADDR_VAR 0 9
64763: PUSH
64764: LD_VAR 0 59
64768: PUSH
64769: LD_VAR 0 60
64773: PUSH
64774: LD_VAR 0 61
64778: PUSH
64779: LD_VAR 0 62
64783: PUSH
64784: LD_VAR 0 63
64788: PUSH
64789: LD_VAR 0 64
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: LD_VAR 0 4
64806: PUSH
64807: LD_INT 1
64809: PLUS
64810: ARRAY
64811: ST_TO_ADDR
64812: GO 64815
64814: POP
// temp_list2 = [ ] ;
64815: LD_ADDR_VAR 0 10
64819: PUSH
64820: EMPTY
64821: ST_TO_ADDR
// for i in temp_list do
64822: LD_ADDR_VAR 0 8
64826: PUSH
64827: LD_VAR 0 9
64831: PUSH
64832: FOR_IN
64833: IFFALSE 64885
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64835: LD_ADDR_VAR 0 10
64839: PUSH
64840: LD_VAR 0 10
64844: PUSH
64845: LD_VAR 0 8
64849: PUSH
64850: LD_INT 1
64852: ARRAY
64853: PUSH
64854: LD_VAR 0 2
64858: PLUS
64859: PUSH
64860: LD_VAR 0 8
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: PUSH
64869: LD_VAR 0 3
64873: PLUS
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: EMPTY
64880: LIST
64881: ADD
64882: ST_TO_ADDR
64883: GO 64832
64885: POP
64886: POP
// result = temp_list2 ;
64887: LD_ADDR_VAR 0 7
64891: PUSH
64892: LD_VAR 0 10
64896: ST_TO_ADDR
// end ;
64897: LD_VAR 0 7
64901: RET
// export function EnemyInRange ( unit , dist ) ; begin
64902: LD_INT 0
64904: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64905: LD_ADDR_VAR 0 3
64909: PUSH
64910: LD_VAR 0 1
64914: PPUSH
64915: CALL_OW 255
64919: PPUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL_OW 250
64929: PPUSH
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 251
64939: PPUSH
64940: LD_VAR 0 2
64944: PPUSH
64945: CALL 38159 0 4
64949: PUSH
64950: LD_INT 4
64952: ARRAY
64953: ST_TO_ADDR
// end ;
64954: LD_VAR 0 3
64958: RET
// export function PlayerSeeMe ( unit ) ; begin
64959: LD_INT 0
64961: PPUSH
// result := See ( your_side , unit ) ;
64962: LD_ADDR_VAR 0 2
64966: PUSH
64967: LD_OWVAR 2
64971: PPUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 292
64981: ST_TO_ADDR
// end ;
64982: LD_VAR 0 2
64986: RET
// export function ReverseDir ( unit ) ; begin
64987: LD_INT 0
64989: PPUSH
// if not unit then
64990: LD_VAR 0 1
64994: NOT
64995: IFFALSE 64999
// exit ;
64997: GO 65022
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64999: LD_ADDR_VAR 0 2
65003: PUSH
65004: LD_VAR 0 1
65008: PPUSH
65009: CALL_OW 254
65013: PUSH
65014: LD_INT 3
65016: PLUS
65017: PUSH
65018: LD_INT 6
65020: MOD
65021: ST_TO_ADDR
// end ;
65022: LD_VAR 0 2
65026: RET
// export function ReverseArray ( array ) ; var i ; begin
65027: LD_INT 0
65029: PPUSH
65030: PPUSH
// if not array then
65031: LD_VAR 0 1
65035: NOT
65036: IFFALSE 65040
// exit ;
65038: GO 65095
// result := [ ] ;
65040: LD_ADDR_VAR 0 2
65044: PUSH
65045: EMPTY
65046: ST_TO_ADDR
// for i := array downto 1 do
65047: LD_ADDR_VAR 0 3
65051: PUSH
65052: DOUBLE
65053: LD_VAR 0 1
65057: INC
65058: ST_TO_ADDR
65059: LD_INT 1
65061: PUSH
65062: FOR_DOWNTO
65063: IFFALSE 65093
// result := Join ( result , array [ i ] ) ;
65065: LD_ADDR_VAR 0 2
65069: PUSH
65070: LD_VAR 0 2
65074: PPUSH
65075: LD_VAR 0 1
65079: PUSH
65080: LD_VAR 0 3
65084: ARRAY
65085: PPUSH
65086: CALL 69937 0 2
65090: ST_TO_ADDR
65091: GO 65062
65093: POP
65094: POP
// end ;
65095: LD_VAR 0 2
65099: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65100: LD_INT 0
65102: PPUSH
65103: PPUSH
65104: PPUSH
65105: PPUSH
65106: PPUSH
65107: PPUSH
// if not unit or not hexes then
65108: LD_VAR 0 1
65112: NOT
65113: IFTRUE 65122
65115: PUSH
65116: LD_VAR 0 2
65120: NOT
65121: OR
65122: IFFALSE 65126
// exit ;
65124: GO 65249
// dist := 9999 ;
65126: LD_ADDR_VAR 0 5
65130: PUSH
65131: LD_INT 9999
65133: ST_TO_ADDR
// for i = 1 to hexes do
65134: LD_ADDR_VAR 0 4
65138: PUSH
65139: DOUBLE
65140: LD_INT 1
65142: DEC
65143: ST_TO_ADDR
65144: LD_VAR 0 2
65148: PUSH
65149: FOR_TO
65150: IFFALSE 65237
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65152: LD_ADDR_VAR 0 6
65156: PUSH
65157: LD_VAR 0 1
65161: PPUSH
65162: LD_VAR 0 2
65166: PUSH
65167: LD_VAR 0 4
65171: ARRAY
65172: PUSH
65173: LD_INT 1
65175: ARRAY
65176: PPUSH
65177: LD_VAR 0 2
65181: PUSH
65182: LD_VAR 0 4
65186: ARRAY
65187: PUSH
65188: LD_INT 2
65190: ARRAY
65191: PPUSH
65192: CALL_OW 297
65196: ST_TO_ADDR
// if tdist < dist then
65197: LD_VAR 0 6
65201: PUSH
65202: LD_VAR 0 5
65206: LESS
65207: IFFALSE 65235
// begin hex := hexes [ i ] ;
65209: LD_ADDR_VAR 0 8
65213: PUSH
65214: LD_VAR 0 2
65218: PUSH
65219: LD_VAR 0 4
65223: ARRAY
65224: ST_TO_ADDR
// dist := tdist ;
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: LD_VAR 0 6
65234: ST_TO_ADDR
// end ; end ;
65235: GO 65149
65237: POP
65238: POP
// result := hex ;
65239: LD_ADDR_VAR 0 3
65243: PUSH
65244: LD_VAR 0 8
65248: ST_TO_ADDR
// end ;
65249: LD_VAR 0 3
65253: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65258: LD_VAR 0 1
65262: NOT
65263: IFTRUE 65302
65265: PUSH
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 21
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 23
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PPUSH
65295: CALL_OW 69
65299: IN
65300: NOT
65301: OR
65302: IFFALSE 65306
// exit ;
65304: GO 65353
// for i = 1 to 3 do
65306: LD_ADDR_VAR 0 3
65310: PUSH
65311: DOUBLE
65312: LD_INT 1
65314: DEC
65315: ST_TO_ADDR
65316: LD_INT 3
65318: PUSH
65319: FOR_TO
65320: IFFALSE 65351
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65322: LD_VAR 0 1
65326: PPUSH
65327: CALL_OW 250
65331: PPUSH
65332: LD_VAR 0 1
65336: PPUSH
65337: CALL_OW 251
65341: PPUSH
65342: LD_INT 1
65344: PPUSH
65345: CALL_OW 453
65349: GO 65319
65351: POP
65352: POP
// end ;
65353: LD_VAR 0 2
65357: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65358: LD_INT 0
65360: PPUSH
65361: PPUSH
65362: PPUSH
65363: PPUSH
65364: PPUSH
65365: PPUSH
// if not unit or not enemy_unit then
65366: LD_VAR 0 1
65370: NOT
65371: IFTRUE 65380
65373: PUSH
65374: LD_VAR 0 2
65378: NOT
65379: OR
65380: IFFALSE 65384
// exit ;
65382: GO 65855
// if GetLives ( i ) < 250 then
65384: LD_VAR 0 4
65388: PPUSH
65389: CALL_OW 256
65393: PUSH
65394: LD_INT 250
65396: LESS
65397: IFFALSE 65410
// begin ComAutodestruct ( i ) ;
65399: LD_VAR 0 4
65403: PPUSH
65404: CALL 65254 0 1
// exit ;
65408: GO 65855
// end ; x := GetX ( enemy_unit ) ;
65410: LD_ADDR_VAR 0 7
65414: PUSH
65415: LD_VAR 0 2
65419: PPUSH
65420: CALL_OW 250
65424: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65425: LD_ADDR_VAR 0 8
65429: PUSH
65430: LD_VAR 0 2
65434: PPUSH
65435: CALL_OW 251
65439: ST_TO_ADDR
// if not x or not y then
65440: LD_VAR 0 7
65444: NOT
65445: IFTRUE 65454
65447: PUSH
65448: LD_VAR 0 8
65452: NOT
65453: OR
65454: IFFALSE 65458
// exit ;
65456: GO 65855
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65458: LD_ADDR_VAR 0 6
65462: PUSH
65463: LD_VAR 0 7
65467: PPUSH
65468: LD_INT 0
65470: PPUSH
65471: LD_INT 4
65473: PPUSH
65474: CALL_OW 272
65478: PUSH
65479: LD_VAR 0 8
65483: PPUSH
65484: LD_INT 0
65486: PPUSH
65487: LD_INT 4
65489: PPUSH
65490: CALL_OW 273
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_VAR 0 7
65503: PPUSH
65504: LD_INT 1
65506: PPUSH
65507: LD_INT 4
65509: PPUSH
65510: CALL_OW 272
65514: PUSH
65515: LD_VAR 0 8
65519: PPUSH
65520: LD_INT 1
65522: PPUSH
65523: LD_INT 4
65525: PPUSH
65526: CALL_OW 273
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_VAR 0 7
65539: PPUSH
65540: LD_INT 2
65542: PPUSH
65543: LD_INT 4
65545: PPUSH
65546: CALL_OW 272
65550: PUSH
65551: LD_VAR 0 8
65555: PPUSH
65556: LD_INT 2
65558: PPUSH
65559: LD_INT 4
65561: PPUSH
65562: CALL_OW 273
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_VAR 0 7
65575: PPUSH
65576: LD_INT 3
65578: PPUSH
65579: LD_INT 4
65581: PPUSH
65582: CALL_OW 272
65586: PUSH
65587: LD_VAR 0 8
65591: PPUSH
65592: LD_INT 3
65594: PPUSH
65595: LD_INT 4
65597: PPUSH
65598: CALL_OW 273
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_VAR 0 7
65611: PPUSH
65612: LD_INT 4
65614: PPUSH
65615: LD_INT 4
65617: PPUSH
65618: CALL_OW 272
65622: PUSH
65623: LD_VAR 0 8
65627: PPUSH
65628: LD_INT 4
65630: PPUSH
65631: LD_INT 4
65633: PPUSH
65634: CALL_OW 273
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_VAR 0 7
65647: PPUSH
65648: LD_INT 5
65650: PPUSH
65651: LD_INT 4
65653: PPUSH
65654: CALL_OW 272
65658: PUSH
65659: LD_VAR 0 8
65663: PPUSH
65664: LD_INT 5
65666: PPUSH
65667: LD_INT 4
65669: PPUSH
65670: CALL_OW 273
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// for i = tmp downto 1 do
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: DOUBLE
65693: LD_VAR 0 6
65697: INC
65698: ST_TO_ADDR
65699: LD_INT 1
65701: PUSH
65702: FOR_DOWNTO
65703: IFFALSE 65806
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65705: LD_VAR 0 6
65709: PUSH
65710: LD_VAR 0 4
65714: ARRAY
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: PPUSH
65720: LD_VAR 0 6
65724: PUSH
65725: LD_VAR 0 4
65729: ARRAY
65730: PUSH
65731: LD_INT 2
65733: ARRAY
65734: PPUSH
65735: CALL_OW 488
65739: NOT
65740: IFTRUE 65782
65742: PUSH
65743: LD_VAR 0 6
65747: PUSH
65748: LD_VAR 0 4
65752: ARRAY
65753: PUSH
65754: LD_INT 1
65756: ARRAY
65757: PPUSH
65758: LD_VAR 0 6
65762: PUSH
65763: LD_VAR 0 4
65767: ARRAY
65768: PUSH
65769: LD_INT 2
65771: ARRAY
65772: PPUSH
65773: CALL_OW 428
65777: PUSH
65778: LD_INT 0
65780: NONEQUAL
65781: OR
65782: IFFALSE 65804
// tmp := Delete ( tmp , i ) ;
65784: LD_ADDR_VAR 0 6
65788: PUSH
65789: LD_VAR 0 6
65793: PPUSH
65794: LD_VAR 0 4
65798: PPUSH
65799: CALL_OW 3
65803: ST_TO_ADDR
65804: GO 65702
65806: POP
65807: POP
// j := GetClosestHex ( unit , tmp ) ;
65808: LD_ADDR_VAR 0 5
65812: PUSH
65813: LD_VAR 0 1
65817: PPUSH
65818: LD_VAR 0 6
65822: PPUSH
65823: CALL 65100 0 2
65827: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65828: LD_VAR 0 1
65832: PPUSH
65833: LD_VAR 0 5
65837: PUSH
65838: LD_INT 1
65840: ARRAY
65841: PPUSH
65842: LD_VAR 0 5
65846: PUSH
65847: LD_INT 2
65849: ARRAY
65850: PPUSH
65851: CALL_OW 111
// end ;
65855: LD_VAR 0 3
65859: RET
// export function PrepareApemanSoldier ( ) ; begin
65860: LD_INT 0
65862: PPUSH
// uc_nation := 0 ;
65863: LD_ADDR_OWVAR 21
65867: PUSH
65868: LD_INT 0
65870: ST_TO_ADDR
// hc_sex := sex_male ;
65871: LD_ADDR_OWVAR 27
65875: PUSH
65876: LD_INT 1
65878: ST_TO_ADDR
// hc_name :=  ;
65879: LD_ADDR_OWVAR 26
65883: PUSH
65884: LD_STRING 
65886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65887: LD_ADDR_OWVAR 28
65891: PUSH
65892: LD_INT 15
65894: ST_TO_ADDR
// hc_gallery :=  ;
65895: LD_ADDR_OWVAR 33
65899: PUSH
65900: LD_STRING 
65902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65903: LD_ADDR_OWVAR 31
65907: PUSH
65908: LD_INT 0
65910: PPUSH
65911: LD_INT 3
65913: PPUSH
65914: CALL_OW 12
65918: PUSH
65919: LD_INT 0
65921: PPUSH
65922: LD_INT 3
65924: PPUSH
65925: CALL_OW 12
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65942: LD_ADDR_OWVAR 29
65946: PUSH
65947: LD_INT 12
65949: PUSH
65950: LD_INT 12
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// end ;
65957: LD_VAR 0 1
65961: RET
// export function PrepareApemanEngineer ( ) ; begin
65962: LD_INT 0
65964: PPUSH
// uc_nation := 0 ;
65965: LD_ADDR_OWVAR 21
65969: PUSH
65970: LD_INT 0
65972: ST_TO_ADDR
// hc_sex := sex_male ;
65973: LD_ADDR_OWVAR 27
65977: PUSH
65978: LD_INT 1
65980: ST_TO_ADDR
// hc_name :=  ;
65981: LD_ADDR_OWVAR 26
65985: PUSH
65986: LD_STRING 
65988: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65989: LD_ADDR_OWVAR 28
65993: PUSH
65994: LD_INT 16
65996: ST_TO_ADDR
// hc_gallery :=  ;
65997: LD_ADDR_OWVAR 33
66001: PUSH
66002: LD_STRING 
66004: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66005: LD_ADDR_OWVAR 31
66009: PUSH
66010: LD_INT 0
66012: PPUSH
66013: LD_INT 3
66015: PPUSH
66016: CALL_OW 12
66020: PUSH
66021: LD_INT 0
66023: PPUSH
66024: LD_INT 3
66026: PPUSH
66027: CALL_OW 12
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66044: LD_ADDR_OWVAR 29
66048: PUSH
66049: LD_INT 12
66051: PUSH
66052: LD_INT 12
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// end ;
66059: LD_VAR 0 1
66063: RET
// export function PrepareApeman ( agressivity ) ; begin
66064: LD_INT 0
66066: PPUSH
// uc_side := 0 ;
66067: LD_ADDR_OWVAR 20
66071: PUSH
66072: LD_INT 0
66074: ST_TO_ADDR
// uc_nation := 0 ;
66075: LD_ADDR_OWVAR 21
66079: PUSH
66080: LD_INT 0
66082: ST_TO_ADDR
// hc_sex := sex_male ;
66083: LD_ADDR_OWVAR 27
66087: PUSH
66088: LD_INT 1
66090: ST_TO_ADDR
// hc_class := class_apeman ;
66091: LD_ADDR_OWVAR 28
66095: PUSH
66096: LD_INT 12
66098: ST_TO_ADDR
// hc_gallery :=  ;
66099: LD_ADDR_OWVAR 33
66103: PUSH
66104: LD_STRING 
66106: ST_TO_ADDR
// hc_name :=  ;
66107: LD_ADDR_OWVAR 26
66111: PUSH
66112: LD_STRING 
66114: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66115: LD_ADDR_OWVAR 29
66119: PUSH
66120: LD_INT 12
66122: PUSH
66123: LD_INT 12
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: ST_TO_ADDR
// if agressivity = 0 then
66130: LD_VAR 0 1
66134: PUSH
66135: LD_INT 0
66137: EQUAL
66138: IFFALSE 66150
// hc_agressivity := 0 else
66140: LD_ADDR_OWVAR 35
66144: PUSH
66145: LD_INT 0
66147: ST_TO_ADDR
66148: GO 66171
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66150: LD_ADDR_OWVAR 35
66154: PUSH
66155: LD_VAR 0 1
66159: NEG
66160: PPUSH
66161: LD_VAR 0 1
66165: PPUSH
66166: CALL_OW 12
66170: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66171: LD_ADDR_OWVAR 31
66175: PUSH
66176: LD_INT 0
66178: PPUSH
66179: LD_INT 3
66181: PPUSH
66182: CALL_OW 12
66186: PUSH
66187: LD_INT 0
66189: PPUSH
66190: LD_INT 3
66192: PPUSH
66193: CALL_OW 12
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// end ;
66210: LD_VAR 0 2
66214: RET
// export function PrepareTiger ( agressivity ) ; begin
66215: LD_INT 0
66217: PPUSH
// uc_side := 0 ;
66218: LD_ADDR_OWVAR 20
66222: PUSH
66223: LD_INT 0
66225: ST_TO_ADDR
// uc_nation := 0 ;
66226: LD_ADDR_OWVAR 21
66230: PUSH
66231: LD_INT 0
66233: ST_TO_ADDR
// InitHc ;
66234: CALL_OW 19
// hc_class := class_tiger ;
66238: LD_ADDR_OWVAR 28
66242: PUSH
66243: LD_INT 14
66245: ST_TO_ADDR
// hc_gallery :=  ;
66246: LD_ADDR_OWVAR 33
66250: PUSH
66251: LD_STRING 
66253: ST_TO_ADDR
// hc_name :=  ;
66254: LD_ADDR_OWVAR 26
66258: PUSH
66259: LD_STRING 
66261: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66262: LD_ADDR_OWVAR 35
66266: PUSH
66267: LD_VAR 0 1
66271: NEG
66272: PPUSH
66273: LD_VAR 0 1
66277: PPUSH
66278: CALL_OW 12
66282: ST_TO_ADDR
// end ;
66283: LD_VAR 0 2
66287: RET
// export function PrepareEnchidna ( ) ; begin
66288: LD_INT 0
66290: PPUSH
// uc_side := 0 ;
66291: LD_ADDR_OWVAR 20
66295: PUSH
66296: LD_INT 0
66298: ST_TO_ADDR
// uc_nation := 0 ;
66299: LD_ADDR_OWVAR 21
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// InitHc ;
66307: CALL_OW 19
// hc_class := class_baggie ;
66311: LD_ADDR_OWVAR 28
66315: PUSH
66316: LD_INT 13
66318: ST_TO_ADDR
// hc_gallery :=  ;
66319: LD_ADDR_OWVAR 33
66323: PUSH
66324: LD_STRING 
66326: ST_TO_ADDR
// hc_name :=  ;
66327: LD_ADDR_OWVAR 26
66331: PUSH
66332: LD_STRING 
66334: ST_TO_ADDR
// end ;
66335: LD_VAR 0 1
66339: RET
// export function PrepareFrog ( ) ; begin
66340: LD_INT 0
66342: PPUSH
// uc_side := 0 ;
66343: LD_ADDR_OWVAR 20
66347: PUSH
66348: LD_INT 0
66350: ST_TO_ADDR
// uc_nation := 0 ;
66351: LD_ADDR_OWVAR 21
66355: PUSH
66356: LD_INT 0
66358: ST_TO_ADDR
// InitHc ;
66359: CALL_OW 19
// hc_class := class_frog ;
66363: LD_ADDR_OWVAR 28
66367: PUSH
66368: LD_INT 19
66370: ST_TO_ADDR
// hc_gallery :=  ;
66371: LD_ADDR_OWVAR 33
66375: PUSH
66376: LD_STRING 
66378: ST_TO_ADDR
// hc_name :=  ;
66379: LD_ADDR_OWVAR 26
66383: PUSH
66384: LD_STRING 
66386: ST_TO_ADDR
// end ;
66387: LD_VAR 0 1
66391: RET
// export function PrepareFish ( ) ; begin
66392: LD_INT 0
66394: PPUSH
// uc_side := 0 ;
66395: LD_ADDR_OWVAR 20
66399: PUSH
66400: LD_INT 0
66402: ST_TO_ADDR
// uc_nation := 0 ;
66403: LD_ADDR_OWVAR 21
66407: PUSH
66408: LD_INT 0
66410: ST_TO_ADDR
// InitHc ;
66411: CALL_OW 19
// hc_class := class_fish ;
66415: LD_ADDR_OWVAR 28
66419: PUSH
66420: LD_INT 20
66422: ST_TO_ADDR
// hc_gallery :=  ;
66423: LD_ADDR_OWVAR 33
66427: PUSH
66428: LD_STRING 
66430: ST_TO_ADDR
// hc_name :=  ;
66431: LD_ADDR_OWVAR 26
66435: PUSH
66436: LD_STRING 
66438: ST_TO_ADDR
// end ;
66439: LD_VAR 0 1
66443: RET
// export function PrepareBird ( ) ; begin
66444: LD_INT 0
66446: PPUSH
// uc_side := 0 ;
66447: LD_ADDR_OWVAR 20
66451: PUSH
66452: LD_INT 0
66454: ST_TO_ADDR
// uc_nation := 0 ;
66455: LD_ADDR_OWVAR 21
66459: PUSH
66460: LD_INT 0
66462: ST_TO_ADDR
// InitHc ;
66463: CALL_OW 19
// hc_class := class_phororhacos ;
66467: LD_ADDR_OWVAR 28
66471: PUSH
66472: LD_INT 18
66474: ST_TO_ADDR
// hc_gallery :=  ;
66475: LD_ADDR_OWVAR 33
66479: PUSH
66480: LD_STRING 
66482: ST_TO_ADDR
// hc_name :=  ;
66483: LD_ADDR_OWVAR 26
66487: PUSH
66488: LD_STRING 
66490: ST_TO_ADDR
// end ;
66491: LD_VAR 0 1
66495: RET
// export function PrepareHorse ( ) ; begin
66496: LD_INT 0
66498: PPUSH
// uc_side := 0 ;
66499: LD_ADDR_OWVAR 20
66503: PUSH
66504: LD_INT 0
66506: ST_TO_ADDR
// uc_nation := 0 ;
66507: LD_ADDR_OWVAR 21
66511: PUSH
66512: LD_INT 0
66514: ST_TO_ADDR
// InitHc ;
66515: CALL_OW 19
// hc_class := class_horse ;
66519: LD_ADDR_OWVAR 28
66523: PUSH
66524: LD_INT 21
66526: ST_TO_ADDR
// hc_gallery :=  ;
66527: LD_ADDR_OWVAR 33
66531: PUSH
66532: LD_STRING 
66534: ST_TO_ADDR
// hc_name :=  ;
66535: LD_ADDR_OWVAR 26
66539: PUSH
66540: LD_STRING 
66542: ST_TO_ADDR
// end ;
66543: LD_VAR 0 1
66547: RET
// export function PrepareMastodont ( ) ; begin
66548: LD_INT 0
66550: PPUSH
// uc_side := 0 ;
66551: LD_ADDR_OWVAR 20
66555: PUSH
66556: LD_INT 0
66558: ST_TO_ADDR
// uc_nation := 0 ;
66559: LD_ADDR_OWVAR 21
66563: PUSH
66564: LD_INT 0
66566: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66567: LD_ADDR_OWVAR 37
66571: PUSH
66572: LD_INT 31
66574: ST_TO_ADDR
// vc_control := control_rider ;
66575: LD_ADDR_OWVAR 38
66579: PUSH
66580: LD_INT 4
66582: ST_TO_ADDR
// end ;
66583: LD_VAR 0 1
66587: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66588: LD_INT 0
66590: PPUSH
66591: PPUSH
66592: PPUSH
// uc_side = 0 ;
66593: LD_ADDR_OWVAR 20
66597: PUSH
66598: LD_INT 0
66600: ST_TO_ADDR
// uc_nation = 0 ;
66601: LD_ADDR_OWVAR 21
66605: PUSH
66606: LD_INT 0
66608: ST_TO_ADDR
// InitHc_All ( ) ;
66609: CALL_OW 584
// InitVc ;
66613: CALL_OW 20
// if mastodonts then
66617: LD_VAR 0 6
66621: IFFALSE 66688
// for i = 1 to mastodonts do
66623: LD_ADDR_VAR 0 11
66627: PUSH
66628: DOUBLE
66629: LD_INT 1
66631: DEC
66632: ST_TO_ADDR
66633: LD_VAR 0 6
66637: PUSH
66638: FOR_TO
66639: IFFALSE 66686
// begin vc_chassis := 31 ;
66641: LD_ADDR_OWVAR 37
66645: PUSH
66646: LD_INT 31
66648: ST_TO_ADDR
// vc_control := control_rider ;
66649: LD_ADDR_OWVAR 38
66653: PUSH
66654: LD_INT 4
66656: ST_TO_ADDR
// animal := CreateVehicle ;
66657: LD_ADDR_VAR 0 12
66661: PUSH
66662: CALL_OW 45
66666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66667: LD_VAR 0 12
66671: PPUSH
66672: LD_VAR 0 8
66676: PPUSH
66677: LD_INT 0
66679: PPUSH
66680: CALL 68830 0 3
// end ;
66684: GO 66638
66686: POP
66687: POP
// if horses then
66688: LD_VAR 0 5
66692: IFFALSE 66759
// for i = 1 to horses do
66694: LD_ADDR_VAR 0 11
66698: PUSH
66699: DOUBLE
66700: LD_INT 1
66702: DEC
66703: ST_TO_ADDR
66704: LD_VAR 0 5
66708: PUSH
66709: FOR_TO
66710: IFFALSE 66757
// begin hc_class := 21 ;
66712: LD_ADDR_OWVAR 28
66716: PUSH
66717: LD_INT 21
66719: ST_TO_ADDR
// hc_gallery :=  ;
66720: LD_ADDR_OWVAR 33
66724: PUSH
66725: LD_STRING 
66727: ST_TO_ADDR
// animal := CreateHuman ;
66728: LD_ADDR_VAR 0 12
66732: PUSH
66733: CALL_OW 44
66737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66738: LD_VAR 0 12
66742: PPUSH
66743: LD_VAR 0 8
66747: PPUSH
66748: LD_INT 0
66750: PPUSH
66751: CALL 68830 0 3
// end ;
66755: GO 66709
66757: POP
66758: POP
// if birds then
66759: LD_VAR 0 1
66763: IFFALSE 66830
// for i = 1 to birds do
66765: LD_ADDR_VAR 0 11
66769: PUSH
66770: DOUBLE
66771: LD_INT 1
66773: DEC
66774: ST_TO_ADDR
66775: LD_VAR 0 1
66779: PUSH
66780: FOR_TO
66781: IFFALSE 66828
// begin hc_class := 18 ;
66783: LD_ADDR_OWVAR 28
66787: PUSH
66788: LD_INT 18
66790: ST_TO_ADDR
// hc_gallery =  ;
66791: LD_ADDR_OWVAR 33
66795: PUSH
66796: LD_STRING 
66798: ST_TO_ADDR
// animal := CreateHuman ;
66799: LD_ADDR_VAR 0 12
66803: PUSH
66804: CALL_OW 44
66808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66809: LD_VAR 0 12
66813: PPUSH
66814: LD_VAR 0 8
66818: PPUSH
66819: LD_INT 0
66821: PPUSH
66822: CALL 68830 0 3
// end ;
66826: GO 66780
66828: POP
66829: POP
// if tigers then
66830: LD_VAR 0 2
66834: IFFALSE 66918
// for i = 1 to tigers do
66836: LD_ADDR_VAR 0 11
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_VAR 0 2
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66916
// begin hc_class = class_tiger ;
66854: LD_ADDR_OWVAR 28
66858: PUSH
66859: LD_INT 14
66861: ST_TO_ADDR
// hc_gallery =  ;
66862: LD_ADDR_OWVAR 33
66866: PUSH
66867: LD_STRING 
66869: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66870: LD_ADDR_OWVAR 35
66874: PUSH
66875: LD_INT 7
66877: NEG
66878: PPUSH
66879: LD_INT 7
66881: PPUSH
66882: CALL_OW 12
66886: ST_TO_ADDR
// animal := CreateHuman ;
66887: LD_ADDR_VAR 0 12
66891: PUSH
66892: CALL_OW 44
66896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66897: LD_VAR 0 12
66901: PPUSH
66902: LD_VAR 0 8
66906: PPUSH
66907: LD_INT 0
66909: PPUSH
66910: CALL 68830 0 3
// end ;
66914: GO 66851
66916: POP
66917: POP
// if apemans then
66918: LD_VAR 0 3
66922: IFFALSE 67045
// for i = 1 to apemans do
66924: LD_ADDR_VAR 0 11
66928: PUSH
66929: DOUBLE
66930: LD_INT 1
66932: DEC
66933: ST_TO_ADDR
66934: LD_VAR 0 3
66938: PUSH
66939: FOR_TO
66940: IFFALSE 67043
// begin hc_class = class_apeman ;
66942: LD_ADDR_OWVAR 28
66946: PUSH
66947: LD_INT 12
66949: ST_TO_ADDR
// hc_gallery =  ;
66950: LD_ADDR_OWVAR 33
66954: PUSH
66955: LD_STRING 
66957: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66958: LD_ADDR_OWVAR 35
66962: PUSH
66963: LD_INT 2
66965: NEG
66966: PPUSH
66967: LD_INT 2
66969: PPUSH
66970: CALL_OW 12
66974: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66975: LD_ADDR_OWVAR 31
66979: PUSH
66980: LD_INT 1
66982: PPUSH
66983: LD_INT 3
66985: PPUSH
66986: CALL_OW 12
66990: PUSH
66991: LD_INT 1
66993: PPUSH
66994: LD_INT 3
66996: PPUSH
66997: CALL_OW 12
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// animal := CreateHuman ;
67014: LD_ADDR_VAR 0 12
67018: PUSH
67019: CALL_OW 44
67023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67024: LD_VAR 0 12
67028: PPUSH
67029: LD_VAR 0 8
67033: PPUSH
67034: LD_INT 0
67036: PPUSH
67037: CALL 68830 0 3
// end ;
67041: GO 66939
67043: POP
67044: POP
// if enchidnas then
67045: LD_VAR 0 4
67049: IFFALSE 67116
// for i = 1 to enchidnas do
67051: LD_ADDR_VAR 0 11
67055: PUSH
67056: DOUBLE
67057: LD_INT 1
67059: DEC
67060: ST_TO_ADDR
67061: LD_VAR 0 4
67065: PUSH
67066: FOR_TO
67067: IFFALSE 67114
// begin hc_class = 13 ;
67069: LD_ADDR_OWVAR 28
67073: PUSH
67074: LD_INT 13
67076: ST_TO_ADDR
// hc_gallery =  ;
67077: LD_ADDR_OWVAR 33
67081: PUSH
67082: LD_STRING 
67084: ST_TO_ADDR
// animal := CreateHuman ;
67085: LD_ADDR_VAR 0 12
67089: PUSH
67090: CALL_OW 44
67094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67095: LD_VAR 0 12
67099: PPUSH
67100: LD_VAR 0 8
67104: PPUSH
67105: LD_INT 0
67107: PPUSH
67108: CALL 68830 0 3
// end ;
67112: GO 67066
67114: POP
67115: POP
// if fishes then
67116: LD_VAR 0 7
67120: IFFALSE 67187
// for i = 1 to fishes do
67122: LD_ADDR_VAR 0 11
67126: PUSH
67127: DOUBLE
67128: LD_INT 1
67130: DEC
67131: ST_TO_ADDR
67132: LD_VAR 0 7
67136: PUSH
67137: FOR_TO
67138: IFFALSE 67185
// begin hc_class = 20 ;
67140: LD_ADDR_OWVAR 28
67144: PUSH
67145: LD_INT 20
67147: ST_TO_ADDR
// hc_gallery =  ;
67148: LD_ADDR_OWVAR 33
67152: PUSH
67153: LD_STRING 
67155: ST_TO_ADDR
// animal := CreateHuman ;
67156: LD_ADDR_VAR 0 12
67160: PUSH
67161: CALL_OW 44
67165: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67166: LD_VAR 0 12
67170: PPUSH
67171: LD_VAR 0 9
67175: PPUSH
67176: LD_INT 0
67178: PPUSH
67179: CALL 68830 0 3
// end ;
67183: GO 67137
67185: POP
67186: POP
// end ;
67187: LD_VAR 0 10
67191: RET
// export function WantHeal ( sci , unit ) ; begin
67192: LD_INT 0
67194: PPUSH
// if GetTaskList ( sci ) > 0 then
67195: LD_VAR 0 1
67199: PPUSH
67200: CALL_OW 437
67204: PUSH
67205: LD_INT 0
67207: GREATER
67208: IFFALSE 67280
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67210: LD_VAR 0 1
67214: PPUSH
67215: CALL_OW 437
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PUSH
67228: LD_STRING l
67230: EQUAL
67231: IFFALSE 67258
67233: PUSH
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 437
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: PUSH
67248: LD_INT 4
67250: ARRAY
67251: PUSH
67252: LD_VAR 0 2
67256: EQUAL
67257: AND
67258: IFFALSE 67270
// result := true else
67260: LD_ADDR_VAR 0 3
67264: PUSH
67265: LD_INT 1
67267: ST_TO_ADDR
67268: GO 67278
// result := false ;
67270: LD_ADDR_VAR 0 3
67274: PUSH
67275: LD_INT 0
67277: ST_TO_ADDR
// end else
67278: GO 67288
// result := false ;
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: LD_INT 0
67287: ST_TO_ADDR
// end ;
67288: LD_VAR 0 3
67292: RET
// export function HealTarget ( sci ) ; begin
67293: LD_INT 0
67295: PPUSH
// if not sci then
67296: LD_VAR 0 1
67300: NOT
67301: IFFALSE 67305
// exit ;
67303: GO 67370
// result := 0 ;
67305: LD_ADDR_VAR 0 2
67309: PUSH
67310: LD_INT 0
67312: ST_TO_ADDR
// if GetTaskList ( sci ) then
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 437
67322: IFFALSE 67370
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67324: LD_VAR 0 1
67328: PPUSH
67329: CALL_OW 437
67333: PUSH
67334: LD_INT 1
67336: ARRAY
67337: PUSH
67338: LD_INT 1
67340: ARRAY
67341: PUSH
67342: LD_STRING l
67344: EQUAL
67345: IFFALSE 67370
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67347: LD_ADDR_VAR 0 2
67351: PUSH
67352: LD_VAR 0 1
67356: PPUSH
67357: CALL_OW 437
67361: PUSH
67362: LD_INT 1
67364: ARRAY
67365: PUSH
67366: LD_INT 4
67368: ARRAY
67369: ST_TO_ADDR
// end ;
67370: LD_VAR 0 2
67374: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
67379: PPUSH
67380: PPUSH
// if not base_units then
67381: LD_VAR 0 1
67385: NOT
67386: IFFALSE 67390
// exit ;
67388: GO 67477
// result := false ;
67390: LD_ADDR_VAR 0 2
67394: PUSH
67395: LD_INT 0
67397: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67398: LD_ADDR_VAR 0 5
67402: PUSH
67403: LD_VAR 0 1
67407: PPUSH
67408: LD_INT 21
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PPUSH
67418: CALL_OW 72
67422: ST_TO_ADDR
// if not tmp then
67423: LD_VAR 0 5
67427: NOT
67428: IFFALSE 67432
// exit ;
67430: GO 67477
// for i in tmp do
67432: LD_ADDR_VAR 0 3
67436: PUSH
67437: LD_VAR 0 5
67441: PUSH
67442: FOR_IN
67443: IFFALSE 67475
// begin result := EnemyInRange ( i , 22 ) ;
67445: LD_ADDR_VAR 0 2
67449: PUSH
67450: LD_VAR 0 3
67454: PPUSH
67455: LD_INT 22
67457: PPUSH
67458: CALL 64902 0 2
67462: ST_TO_ADDR
// if result then
67463: LD_VAR 0 2
67467: IFFALSE 67473
// exit ;
67469: POP
67470: POP
67471: GO 67477
// end ;
67473: GO 67442
67475: POP
67476: POP
// end ;
67477: LD_VAR 0 2
67481: RET
// export function FilterByTag ( units , tag ) ; begin
67482: LD_INT 0
67484: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67485: LD_ADDR_VAR 0 3
67489: PUSH
67490: LD_VAR 0 1
67494: PPUSH
67495: LD_INT 120
67497: PUSH
67498: LD_VAR 0 2
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PPUSH
67507: CALL_OW 72
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 3
67516: RET
// export function IsDriver ( un ) ; begin
67517: LD_INT 0
67519: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67520: LD_ADDR_VAR 0 2
67524: PUSH
67525: LD_VAR 0 1
67529: PUSH
67530: LD_INT 55
67532: PUSH
67533: EMPTY
67534: LIST
67535: PPUSH
67536: CALL_OW 69
67540: IN
67541: ST_TO_ADDR
// end ;
67542: LD_VAR 0 2
67546: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67547: LD_INT 0
67549: PPUSH
67550: PPUSH
// list := [ ] ;
67551: LD_ADDR_VAR 0 5
67555: PUSH
67556: EMPTY
67557: ST_TO_ADDR
// case d of 0 :
67558: LD_VAR 0 3
67562: PUSH
67563: LD_INT 0
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67571
67569: GO 67704
67571: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67572: LD_ADDR_VAR 0 5
67576: PUSH
67577: LD_VAR 0 1
67581: PUSH
67582: LD_INT 4
67584: MINUS
67585: PUSH
67586: LD_VAR 0 2
67590: PUSH
67591: LD_INT 4
67593: MINUS
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: PUSH
67603: LD_VAR 0 1
67607: PUSH
67608: LD_INT 3
67610: MINUS
67611: PUSH
67612: LD_VAR 0 2
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: LIST
67624: PUSH
67625: LD_VAR 0 1
67629: PUSH
67630: LD_INT 4
67632: PLUS
67633: PUSH
67634: LD_VAR 0 2
67638: PUSH
67639: LD_INT 4
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 3
67654: PLUS
67655: PUSH
67656: LD_VAR 0 2
67660: PUSH
67661: LD_INT 3
67663: PLUS
67664: PUSH
67665: LD_INT 5
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: PUSH
67673: LD_VAR 0 1
67677: PUSH
67678: LD_VAR 0 2
67682: PUSH
67683: LD_INT 4
67685: PLUS
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: ST_TO_ADDR
// end ; 1 :
67702: GO 68402
67704: LD_INT 1
67706: DOUBLE
67707: EQUAL
67708: IFTRUE 67712
67710: GO 67845
67712: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67713: LD_ADDR_VAR 0 5
67717: PUSH
67718: LD_VAR 0 1
67722: PUSH
67723: LD_VAR 0 2
67727: PUSH
67728: LD_INT 4
67730: MINUS
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: PUSH
67740: LD_VAR 0 1
67744: PUSH
67745: LD_INT 3
67747: MINUS
67748: PUSH
67749: LD_VAR 0 2
67753: PUSH
67754: LD_INT 3
67756: MINUS
67757: PUSH
67758: LD_INT 2
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: LD_INT 4
67773: MINUS
67774: PUSH
67775: LD_VAR 0 2
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: LD_INT 3
67800: PLUS
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_VAR 0 1
67814: PUSH
67815: LD_INT 4
67817: PLUS
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 4
67826: PLUS
67827: PUSH
67828: LD_INT 5
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// end ; 2 :
67843: GO 68402
67845: LD_INT 2
67847: DOUBLE
67848: EQUAL
67849: IFTRUE 67853
67851: GO 67982
67853: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67854: LD_ADDR_VAR 0 5
67858: PUSH
67859: LD_VAR 0 1
67863: PUSH
67864: LD_VAR 0 2
67868: PUSH
67869: LD_INT 3
67871: MINUS
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: PUSH
67881: LD_VAR 0 1
67885: PUSH
67886: LD_INT 4
67888: PLUS
67889: PUSH
67890: LD_VAR 0 2
67894: PUSH
67895: LD_INT 4
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: PUSH
67903: LD_VAR 0 1
67907: PUSH
67908: LD_VAR 0 2
67912: PUSH
67913: LD_INT 4
67915: PLUS
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: LD_INT 3
67932: MINUS
67933: PUSH
67934: LD_VAR 0 2
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: LIST
67946: PUSH
67947: LD_VAR 0 1
67951: PUSH
67952: LD_INT 4
67954: MINUS
67955: PUSH
67956: LD_VAR 0 2
67960: PUSH
67961: LD_INT 4
67963: MINUS
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// end ; 3 :
67980: GO 68402
67982: LD_INT 3
67984: DOUBLE
67985: EQUAL
67986: IFTRUE 67990
67988: GO 68123
67990: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67991: LD_ADDR_VAR 0 5
67995: PUSH
67996: LD_VAR 0 1
68000: PUSH
68001: LD_INT 3
68003: PLUS
68004: PUSH
68005: LD_VAR 0 2
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_INT 4
68025: PLUS
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 4
68034: PLUS
68035: PUSH
68036: LD_INT 5
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 4
68051: MINUS
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: LD_INT 4
68078: MINUS
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_INT 3
68095: MINUS
68096: PUSH
68097: LD_VAR 0 2
68101: PUSH
68102: LD_INT 3
68104: MINUS
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: ST_TO_ADDR
// end ; 4 :
68121: GO 68402
68123: LD_INT 4
68125: DOUBLE
68126: EQUAL
68127: IFTRUE 68131
68129: GO 68264
68131: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68132: LD_ADDR_VAR 0 5
68136: PUSH
68137: LD_VAR 0 1
68141: PUSH
68142: LD_VAR 0 2
68146: PUSH
68147: LD_INT 4
68149: PLUS
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: LD_INT 3
68166: PLUS
68167: PUSH
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 3
68175: PLUS
68176: PUSH
68177: LD_INT 5
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: LIST
68184: PUSH
68185: LD_VAR 0 1
68189: PUSH
68190: LD_INT 4
68192: PLUS
68193: PUSH
68194: LD_VAR 0 2
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: LIST
68206: PUSH
68207: LD_VAR 0 1
68211: PUSH
68212: LD_VAR 0 2
68216: PUSH
68217: LD_INT 3
68219: MINUS
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: LIST
68228: PUSH
68229: LD_VAR 0 1
68233: PUSH
68234: LD_INT 4
68236: MINUS
68237: PUSH
68238: LD_VAR 0 2
68242: PUSH
68243: LD_INT 4
68245: MINUS
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: ST_TO_ADDR
// end ; 5 :
68262: GO 68402
68264: LD_INT 5
68266: DOUBLE
68267: EQUAL
68268: IFTRUE 68272
68270: GO 68401
68272: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68273: LD_ADDR_VAR 0 5
68277: PUSH
68278: LD_VAR 0 1
68282: PUSH
68283: LD_INT 4
68285: MINUS
68286: PUSH
68287: LD_VAR 0 2
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: PUSH
68300: LD_VAR 0 1
68304: PUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 4
68312: MINUS
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: PUSH
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 4
68329: PLUS
68330: PUSH
68331: LD_VAR 0 2
68335: PUSH
68336: LD_INT 4
68338: PLUS
68339: PUSH
68340: LD_INT 5
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: PUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_INT 3
68355: PLUS
68356: PUSH
68357: LD_VAR 0 2
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: PUSH
68370: LD_VAR 0 1
68374: PUSH
68375: LD_VAR 0 2
68379: PUSH
68380: LD_INT 3
68382: PLUS
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: ST_TO_ADDR
// end ; end ;
68399: GO 68402
68401: POP
// result := list ;
68402: LD_ADDR_VAR 0 4
68406: PUSH
68407: LD_VAR 0 5
68411: ST_TO_ADDR
// end ;
68412: LD_VAR 0 4
68416: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68417: LD_INT 0
68419: PPUSH
68420: PPUSH
68421: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68422: LD_VAR 0 1
68426: NOT
68427: IFTRUE 68455
68429: PUSH
68430: LD_VAR 0 2
68434: PUSH
68435: LD_INT 1
68437: PUSH
68438: LD_INT 2
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: LD_INT 4
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: IN
68453: NOT
68454: OR
68455: IFFALSE 68459
// exit ;
68457: GO 68542
// tmp := [ ] ;
68459: LD_ADDR_VAR 0 5
68463: PUSH
68464: EMPTY
68465: ST_TO_ADDR
// for i in units do
68466: LD_ADDR_VAR 0 4
68470: PUSH
68471: LD_VAR 0 1
68475: PUSH
68476: FOR_IN
68477: IFFALSE 68511
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68479: LD_ADDR_VAR 0 5
68483: PUSH
68484: LD_VAR 0 5
68488: PPUSH
68489: LD_VAR 0 4
68493: PPUSH
68494: LD_VAR 0 2
68498: PPUSH
68499: CALL_OW 259
68503: PPUSH
68504: CALL 69937 0 2
68508: ST_TO_ADDR
68509: GO 68476
68511: POP
68512: POP
// if not tmp then
68513: LD_VAR 0 5
68517: NOT
68518: IFFALSE 68522
// exit ;
68520: GO 68542
// result := SortListByListDesc ( units , tmp ) ;
68522: LD_ADDR_VAR 0 3
68526: PUSH
68527: LD_VAR 0 1
68531: PPUSH
68532: LD_VAR 0 5
68536: PPUSH
68537: CALL_OW 77
68541: ST_TO_ADDR
// end ;
68542: LD_VAR 0 3
68546: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68547: LD_INT 0
68549: PPUSH
68550: PPUSH
68551: PPUSH
// result := false ;
68552: LD_ADDR_VAR 0 3
68556: PUSH
68557: LD_INT 0
68559: ST_TO_ADDR
// if not building then
68560: LD_VAR 0 2
68564: NOT
68565: IFFALSE 68569
// exit ;
68567: GO 68713
// x := GetX ( building ) ;
68569: LD_ADDR_VAR 0 4
68573: PUSH
68574: LD_VAR 0 2
68578: PPUSH
68579: CALL_OW 250
68583: ST_TO_ADDR
// y := GetY ( building ) ;
68584: LD_ADDR_VAR 0 5
68588: PUSH
68589: LD_VAR 0 2
68593: PPUSH
68594: CALL_OW 251
68598: ST_TO_ADDR
// if not x or not y then
68599: LD_VAR 0 4
68603: NOT
68604: IFTRUE 68613
68606: PUSH
68607: LD_VAR 0 5
68611: NOT
68612: OR
68613: IFFALSE 68617
// exit ;
68615: GO 68713
// if GetTaskList ( unit ) then
68617: LD_VAR 0 1
68621: PPUSH
68622: CALL_OW 437
68626: IFFALSE 68713
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68628: LD_STRING e
68630: PUSH
68631: LD_VAR 0 1
68635: PPUSH
68636: CALL_OW 437
68640: PUSH
68641: LD_INT 1
68643: ARRAY
68644: PUSH
68645: LD_INT 1
68647: ARRAY
68648: EQUAL
68649: IFFALSE 68676
68651: PUSH
68652: LD_VAR 0 4
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 437
68666: PUSH
68667: LD_INT 1
68669: ARRAY
68670: PUSH
68671: LD_INT 2
68673: ARRAY
68674: EQUAL
68675: AND
68676: IFFALSE 68703
68678: PUSH
68679: LD_VAR 0 5
68683: PUSH
68684: LD_VAR 0 1
68688: PPUSH
68689: CALL_OW 437
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PUSH
68698: LD_INT 3
68700: ARRAY
68701: EQUAL
68702: AND
68703: IFFALSE 68713
// result := true end ;
68705: LD_ADDR_VAR 0 3
68709: PUSH
68710: LD_INT 1
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 3
68717: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68718: LD_INT 0
68720: PPUSH
// result := false ;
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: LD_INT 0
68728: ST_TO_ADDR
// if GetTaskList ( unit ) then
68729: LD_VAR 0 1
68733: PPUSH
68734: CALL_OW 437
68738: IFFALSE 68825
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68740: LD_STRING M
68742: PUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: CALL_OW 437
68752: PUSH
68753: LD_INT 1
68755: ARRAY
68756: PUSH
68757: LD_INT 1
68759: ARRAY
68760: EQUAL
68761: IFFALSE 68788
68763: PUSH
68764: LD_VAR 0 2
68768: PUSH
68769: LD_VAR 0 1
68773: PPUSH
68774: CALL_OW 437
68778: PUSH
68779: LD_INT 1
68781: ARRAY
68782: PUSH
68783: LD_INT 2
68785: ARRAY
68786: EQUAL
68787: AND
68788: IFFALSE 68815
68790: PUSH
68791: LD_VAR 0 3
68795: PUSH
68796: LD_VAR 0 1
68800: PPUSH
68801: CALL_OW 437
68805: PUSH
68806: LD_INT 1
68808: ARRAY
68809: PUSH
68810: LD_INT 3
68812: ARRAY
68813: EQUAL
68814: AND
68815: IFFALSE 68825
// result := true ;
68817: LD_ADDR_VAR 0 4
68821: PUSH
68822: LD_INT 1
68824: ST_TO_ADDR
// end ; end ;
68825: LD_VAR 0 4
68829: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68830: LD_INT 0
68832: PPUSH
68833: PPUSH
68834: PPUSH
68835: PPUSH
// if not unit or not area then
68836: LD_VAR 0 1
68840: NOT
68841: IFTRUE 68850
68843: PUSH
68844: LD_VAR 0 2
68848: NOT
68849: OR
68850: IFFALSE 68854
// exit ;
68852: GO 69030
// tmp := AreaToList ( area , i ) ;
68854: LD_ADDR_VAR 0 6
68858: PUSH
68859: LD_VAR 0 2
68863: PPUSH
68864: LD_VAR 0 5
68868: PPUSH
68869: CALL_OW 517
68873: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68874: LD_ADDR_VAR 0 5
68878: PUSH
68879: DOUBLE
68880: LD_INT 1
68882: DEC
68883: ST_TO_ADDR
68884: LD_VAR 0 6
68888: PUSH
68889: LD_INT 1
68891: ARRAY
68892: PUSH
68893: FOR_TO
68894: IFFALSE 69028
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68896: LD_ADDR_VAR 0 7
68900: PUSH
68901: LD_VAR 0 6
68905: PUSH
68906: LD_INT 1
68908: ARRAY
68909: PUSH
68910: LD_VAR 0 5
68914: ARRAY
68915: PUSH
68916: LD_VAR 0 6
68920: PUSH
68921: LD_INT 2
68923: ARRAY
68924: PUSH
68925: LD_VAR 0 5
68929: ARRAY
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68935: LD_INT 92
68937: PUSH
68938: LD_VAR 0 7
68942: PUSH
68943: LD_INT 1
68945: ARRAY
68946: PUSH
68947: LD_VAR 0 7
68951: PUSH
68952: LD_INT 2
68954: ARRAY
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: PPUSH
68965: CALL_OW 69
68969: PUSH
68970: LD_INT 0
68972: EQUAL
68973: IFFALSE 69026
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68975: LD_VAR 0 1
68979: PPUSH
68980: LD_VAR 0 7
68984: PUSH
68985: LD_INT 1
68987: ARRAY
68988: PPUSH
68989: LD_VAR 0 7
68993: PUSH
68994: LD_INT 2
68996: ARRAY
68997: PPUSH
68998: LD_VAR 0 3
69002: PPUSH
69003: CALL_OW 48
// result := IsPlaced ( unit ) ;
69007: LD_ADDR_VAR 0 4
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: CALL_OW 305
69021: ST_TO_ADDR
// exit ;
69022: POP
69023: POP
69024: GO 69030
// end ; end ;
69026: GO 68893
69028: POP
69029: POP
// end ;
69030: LD_VAR 0 4
69034: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69035: LD_INT 0
69037: PPUSH
69038: PPUSH
69039: PPUSH
// if not side or side > 8 then
69040: LD_VAR 0 1
69044: NOT
69045: IFTRUE 69057
69047: PUSH
69048: LD_VAR 0 1
69052: PUSH
69053: LD_INT 8
69055: GREATER
69056: OR
69057: IFFALSE 69061
// exit ;
69059: GO 69248
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69061: LD_ADDR_VAR 0 4
69065: PUSH
69066: LD_INT 22
69068: PUSH
69069: LD_VAR 0 1
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 21
69080: PUSH
69081: LD_INT 3
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PPUSH
69092: CALL_OW 69
69096: ST_TO_ADDR
// if not tmp then
69097: LD_VAR 0 4
69101: NOT
69102: IFFALSE 69106
// exit ;
69104: GO 69248
// enable_addtolog := true ;
69106: LD_ADDR_OWVAR 81
69110: PUSH
69111: LD_INT 1
69113: ST_TO_ADDR
// AddToLog ( [ ) ;
69114: LD_STRING [
69116: PPUSH
69117: CALL_OW 561
// for i in tmp do
69121: LD_ADDR_VAR 0 3
69125: PUSH
69126: LD_VAR 0 4
69130: PUSH
69131: FOR_IN
69132: IFFALSE 69239
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69134: LD_STRING [
69136: PUSH
69137: LD_VAR 0 3
69141: PPUSH
69142: CALL_OW 266
69146: STR
69147: PUSH
69148: LD_STRING , 
69150: STR
69151: PUSH
69152: LD_VAR 0 3
69156: PPUSH
69157: CALL_OW 250
69161: STR
69162: PUSH
69163: LD_STRING , 
69165: STR
69166: PUSH
69167: LD_VAR 0 3
69171: PPUSH
69172: CALL_OW 251
69176: STR
69177: PUSH
69178: LD_STRING , 
69180: STR
69181: PUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 254
69191: STR
69192: PUSH
69193: LD_STRING , 
69195: STR
69196: PUSH
69197: LD_VAR 0 3
69201: PPUSH
69202: LD_INT 1
69204: PPUSH
69205: CALL_OW 268
69209: STR
69210: PUSH
69211: LD_STRING , 
69213: STR
69214: PUSH
69215: LD_VAR 0 3
69219: PPUSH
69220: LD_INT 2
69222: PPUSH
69223: CALL_OW 268
69227: STR
69228: PUSH
69229: LD_STRING ],
69231: STR
69232: PPUSH
69233: CALL_OW 561
// end ;
69237: GO 69131
69239: POP
69240: POP
// AddToLog ( ]; ) ;
69241: LD_STRING ];
69243: PPUSH
69244: CALL_OW 561
// end ;
69248: LD_VAR 0 2
69252: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
// if not area or not rate or not max then
69260: LD_VAR 0 1
69264: NOT
69265: IFTRUE 69274
69267: PUSH
69268: LD_VAR 0 2
69272: NOT
69273: OR
69274: IFTRUE 69283
69276: PUSH
69277: LD_VAR 0 4
69281: NOT
69282: OR
69283: IFFALSE 69287
// exit ;
69285: GO 69476
// while 1 do
69287: LD_INT 1
69289: IFFALSE 69476
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69291: LD_ADDR_VAR 0 9
69295: PUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: LD_INT 1
69303: PPUSH
69304: CALL_OW 287
69308: PUSH
69309: LD_INT 10
69311: MUL
69312: ST_TO_ADDR
// r := rate / 10 ;
69313: LD_ADDR_VAR 0 7
69317: PUSH
69318: LD_VAR 0 2
69322: PUSH
69323: LD_INT 10
69325: DIVREAL
69326: ST_TO_ADDR
// time := 1 1$00 ;
69327: LD_ADDR_VAR 0 8
69331: PUSH
69332: LD_INT 2100
69334: ST_TO_ADDR
// if amount < min then
69335: LD_VAR 0 9
69339: PUSH
69340: LD_VAR 0 3
69344: LESS
69345: IFFALSE 69363
// r := r * 2 else
69347: LD_ADDR_VAR 0 7
69351: PUSH
69352: LD_VAR 0 7
69356: PUSH
69357: LD_INT 2
69359: MUL
69360: ST_TO_ADDR
69361: GO 69389
// if amount > max then
69363: LD_VAR 0 9
69367: PUSH
69368: LD_VAR 0 4
69372: GREATER
69373: IFFALSE 69389
// r := r / 2 ;
69375: LD_ADDR_VAR 0 7
69379: PUSH
69380: LD_VAR 0 7
69384: PUSH
69385: LD_INT 2
69387: DIVREAL
69388: ST_TO_ADDR
// time := time / r ;
69389: LD_ADDR_VAR 0 8
69393: PUSH
69394: LD_VAR 0 8
69398: PUSH
69399: LD_VAR 0 7
69403: DIVREAL
69404: ST_TO_ADDR
// if time < 0 then
69405: LD_VAR 0 8
69409: PUSH
69410: LD_INT 0
69412: LESS
69413: IFFALSE 69430
// time := time * - 1 ;
69415: LD_ADDR_VAR 0 8
69419: PUSH
69420: LD_VAR 0 8
69424: PUSH
69425: LD_INT 1
69427: NEG
69428: MUL
69429: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69430: LD_VAR 0 8
69434: PUSH
69435: LD_INT 35
69437: PPUSH
69438: LD_INT 875
69440: PPUSH
69441: CALL_OW 12
69445: PLUS
69446: PPUSH
69447: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69451: LD_INT 1
69453: PPUSH
69454: LD_INT 5
69456: PPUSH
69457: CALL_OW 12
69461: PPUSH
69462: LD_VAR 0 1
69466: PPUSH
69467: LD_INT 1
69469: PPUSH
69470: CALL_OW 55
// end ;
69474: GO 69287
// end ;
69476: LD_VAR 0 5
69480: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69481: LD_INT 0
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
// if not turrets or not factories then
69491: LD_VAR 0 1
69495: NOT
69496: IFTRUE 69505
69498: PUSH
69499: LD_VAR 0 2
69503: NOT
69504: OR
69505: IFFALSE 69509
// exit ;
69507: GO 69816
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69509: LD_ADDR_VAR 0 10
69513: PUSH
69514: LD_INT 5
69516: PUSH
69517: LD_INT 6
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 2
69526: PUSH
69527: LD_INT 4
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: LD_INT 5
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 24
69551: PUSH
69552: LD_INT 25
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 23
69561: PUSH
69562: LD_INT 27
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 42
69575: PUSH
69576: LD_INT 43
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 44
69585: PUSH
69586: LD_INT 46
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 45
69595: PUSH
69596: LD_INT 47
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: ST_TO_ADDR
// result := [ ] ;
69613: LD_ADDR_VAR 0 3
69617: PUSH
69618: EMPTY
69619: ST_TO_ADDR
// for i in turrets do
69620: LD_ADDR_VAR 0 4
69624: PUSH
69625: LD_VAR 0 1
69629: PUSH
69630: FOR_IN
69631: IFFALSE 69814
// begin nat := GetNation ( i ) ;
69633: LD_ADDR_VAR 0 7
69637: PUSH
69638: LD_VAR 0 4
69642: PPUSH
69643: CALL_OW 248
69647: ST_TO_ADDR
// weapon := 0 ;
69648: LD_ADDR_VAR 0 8
69652: PUSH
69653: LD_INT 0
69655: ST_TO_ADDR
// if not nat then
69656: LD_VAR 0 7
69660: NOT
69661: IFFALSE 69665
// continue ;
69663: GO 69630
// for j in list [ nat ] do
69665: LD_ADDR_VAR 0 5
69669: PUSH
69670: LD_VAR 0 10
69674: PUSH
69675: LD_VAR 0 7
69679: ARRAY
69680: PUSH
69681: FOR_IN
69682: IFFALSE 69723
// if GetBWeapon ( i ) = j [ 1 ] then
69684: LD_VAR 0 4
69688: PPUSH
69689: CALL_OW 269
69693: PUSH
69694: LD_VAR 0 5
69698: PUSH
69699: LD_INT 1
69701: ARRAY
69702: EQUAL
69703: IFFALSE 69721
// begin weapon := j [ 2 ] ;
69705: LD_ADDR_VAR 0 8
69709: PUSH
69710: LD_VAR 0 5
69714: PUSH
69715: LD_INT 2
69717: ARRAY
69718: ST_TO_ADDR
// break ;
69719: GO 69723
// end ;
69721: GO 69681
69723: POP
69724: POP
// if not weapon then
69725: LD_VAR 0 8
69729: NOT
69730: IFFALSE 69734
// continue ;
69732: GO 69630
// for k in factories do
69734: LD_ADDR_VAR 0 6
69738: PUSH
69739: LD_VAR 0 2
69743: PUSH
69744: FOR_IN
69745: IFFALSE 69810
// begin weapons := AvailableWeaponList ( k ) ;
69747: LD_ADDR_VAR 0 9
69751: PUSH
69752: LD_VAR 0 6
69756: PPUSH
69757: CALL_OW 478
69761: ST_TO_ADDR
// if not weapons then
69762: LD_VAR 0 9
69766: NOT
69767: IFFALSE 69771
// continue ;
69769: GO 69744
// if weapon in weapons then
69771: LD_VAR 0 8
69775: PUSH
69776: LD_VAR 0 9
69780: IN
69781: IFFALSE 69808
// begin result := [ i , weapon ] ;
69783: LD_ADDR_VAR 0 3
69787: PUSH
69788: LD_VAR 0 4
69792: PUSH
69793: LD_VAR 0 8
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: ST_TO_ADDR
// exit ;
69802: POP
69803: POP
69804: POP
69805: POP
69806: GO 69816
// end ; end ;
69808: GO 69744
69810: POP
69811: POP
// end ;
69812: GO 69630
69814: POP
69815: POP
// end ;
69816: LD_VAR 0 3
69820: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69821: LD_INT 0
69823: PPUSH
// if not side or side > 8 then
69824: LD_VAR 0 3
69828: NOT
69829: IFTRUE 69841
69831: PUSH
69832: LD_VAR 0 3
69836: PUSH
69837: LD_INT 8
69839: GREATER
69840: OR
69841: IFFALSE 69845
// exit ;
69843: GO 69904
// if not range then
69845: LD_VAR 0 4
69849: NOT
69850: IFFALSE 69861
// range := - 12 ;
69852: LD_ADDR_VAR 0 4
69856: PUSH
69857: LD_INT 12
69859: NEG
69860: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69861: LD_VAR 0 1
69865: PPUSH
69866: LD_VAR 0 2
69870: PPUSH
69871: LD_VAR 0 3
69875: PPUSH
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69885: LD_VAR 0 1
69889: PPUSH
69890: LD_VAR 0 2
69894: PPUSH
69895: LD_VAR 0 3
69899: PPUSH
69900: CALL_OW 331
// end ;
69904: LD_VAR 0 5
69908: RET
// export function Video ( mode ) ; begin
69909: LD_INT 0
69911: PPUSH
// ingame_video = mode ;
69912: LD_ADDR_OWVAR 52
69916: PUSH
69917: LD_VAR 0 1
69921: ST_TO_ADDR
// interface_hidden = mode ;
69922: LD_ADDR_OWVAR 54
69926: PUSH
69927: LD_VAR 0 1
69931: ST_TO_ADDR
// end ;
69932: LD_VAR 0 2
69936: RET
// export function Join ( array , element ) ; begin
69937: LD_INT 0
69939: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69940: LD_ADDR_VAR 0 3
69944: PUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_INT 1
69957: PLUS
69958: PPUSH
69959: LD_VAR 0 2
69963: PPUSH
69964: CALL_OW 1
69968: ST_TO_ADDR
// end ;
69969: LD_VAR 0 3
69973: RET
// export function JoinUnion ( array , element ) ; begin
69974: LD_INT 0
69976: PPUSH
// result := array union element ;
69977: LD_ADDR_VAR 0 3
69981: PUSH
69982: LD_VAR 0 1
69986: PUSH
69987: LD_VAR 0 2
69991: UNION
69992: ST_TO_ADDR
// end ;
69993: LD_VAR 0 3
69997: RET
// export function GetBehemoths ( side ) ; begin
69998: LD_INT 0
70000: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70001: LD_ADDR_VAR 0 2
70005: PUSH
70006: LD_INT 22
70008: PUSH
70009: LD_VAR 0 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 31
70020: PUSH
70021: LD_INT 25
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PPUSH
70032: CALL_OW 69
70036: ST_TO_ADDR
// end ;
70037: LD_VAR 0 2
70041: RET
// export function Shuffle ( array ) ; var i , index ; begin
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
// result := [ ] ;
70047: LD_ADDR_VAR 0 2
70051: PUSH
70052: EMPTY
70053: ST_TO_ADDR
// if not array then
70054: LD_VAR 0 1
70058: NOT
70059: IFFALSE 70063
// exit ;
70061: GO 70162
// Randomize ;
70063: CALL_OW 10
// for i = array downto 1 do
70067: LD_ADDR_VAR 0 3
70071: PUSH
70072: DOUBLE
70073: LD_VAR 0 1
70077: INC
70078: ST_TO_ADDR
70079: LD_INT 1
70081: PUSH
70082: FOR_DOWNTO
70083: IFFALSE 70160
// begin index := rand ( 1 , array ) ;
70085: LD_ADDR_VAR 0 4
70089: PUSH
70090: LD_INT 1
70092: PPUSH
70093: LD_VAR 0 1
70097: PPUSH
70098: CALL_OW 12
70102: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70103: LD_ADDR_VAR 0 2
70107: PUSH
70108: LD_VAR 0 2
70112: PPUSH
70113: LD_VAR 0 2
70117: PUSH
70118: LD_INT 1
70120: PLUS
70121: PPUSH
70122: LD_VAR 0 1
70126: PUSH
70127: LD_VAR 0 4
70131: ARRAY
70132: PPUSH
70133: CALL_OW 2
70137: ST_TO_ADDR
// array := Delete ( array , index ) ;
70138: LD_ADDR_VAR 0 1
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: LD_VAR 0 4
70152: PPUSH
70153: CALL_OW 3
70157: ST_TO_ADDR
// end ;
70158: GO 70082
70160: POP
70161: POP
// end ;
70162: LD_VAR 0 2
70166: RET
// export function GetBaseMaterials ( base ) ; begin
70167: LD_INT 0
70169: PPUSH
// result := [ 0 , 0 , 0 ] ;
70170: LD_ADDR_VAR 0 2
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// if not base then
70189: LD_VAR 0 1
70193: NOT
70194: IFFALSE 70198
// exit ;
70196: GO 70247
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70198: LD_ADDR_VAR 0 2
70202: PUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: LD_INT 1
70210: PPUSH
70211: CALL_OW 275
70215: PUSH
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_INT 2
70223: PPUSH
70224: CALL_OW 275
70228: PUSH
70229: LD_VAR 0 1
70233: PPUSH
70234: LD_INT 3
70236: PPUSH
70237: CALL_OW 275
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: ST_TO_ADDR
// end ;
70247: LD_VAR 0 2
70251: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70252: LD_INT 0
70254: PPUSH
70255: PPUSH
// result := array ;
70256: LD_ADDR_VAR 0 3
70260: PUSH
70261: LD_VAR 0 1
70265: ST_TO_ADDR
// if size >= result then
70266: LD_VAR 0 2
70270: PUSH
70271: LD_VAR 0 3
70275: GREATEREQUAL
70276: IFFALSE 70280
// exit ;
70278: GO 70330
// if size then
70280: LD_VAR 0 2
70284: IFFALSE 70330
// for i := array downto size do
70286: LD_ADDR_VAR 0 4
70290: PUSH
70291: DOUBLE
70292: LD_VAR 0 1
70296: INC
70297: ST_TO_ADDR
70298: LD_VAR 0 2
70302: PUSH
70303: FOR_DOWNTO
70304: IFFALSE 70328
// result := Delete ( result , result ) ;
70306: LD_ADDR_VAR 0 3
70310: PUSH
70311: LD_VAR 0 3
70315: PPUSH
70316: LD_VAR 0 3
70320: PPUSH
70321: CALL_OW 3
70325: ST_TO_ADDR
70326: GO 70303
70328: POP
70329: POP
// end ;
70330: LD_VAR 0 3
70334: RET
// export function ComExit ( unit ) ; var tmp ; begin
70335: LD_INT 0
70337: PPUSH
70338: PPUSH
// if not IsInUnit ( unit ) then
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 310
70348: NOT
70349: IFFALSE 70353
// exit ;
70351: GO 70413
// tmp := IsInUnit ( unit ) ;
70353: LD_ADDR_VAR 0 3
70357: PUSH
70358: LD_VAR 0 1
70362: PPUSH
70363: CALL_OW 310
70367: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70368: LD_VAR 0 3
70372: PPUSH
70373: CALL_OW 247
70377: PUSH
70378: LD_INT 2
70380: EQUAL
70381: IFFALSE 70394
// ComExitVehicle ( unit ) else
70383: LD_VAR 0 1
70387: PPUSH
70388: CALL_OW 121
70392: GO 70403
// ComExitBuilding ( unit ) ;
70394: LD_VAR 0 1
70398: PPUSH
70399: CALL_OW 122
// result := tmp ;
70403: LD_ADDR_VAR 0 2
70407: PUSH
70408: LD_VAR 0 3
70412: ST_TO_ADDR
// end ;
70413: LD_VAR 0 2
70417: RET
// export function ComExitAll ( units ) ; var i ; begin
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
// if not units then
70422: LD_VAR 0 1
70426: NOT
70427: IFFALSE 70431
// exit ;
70429: GO 70457
// for i in units do
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_VAR 0 1
70440: PUSH
70441: FOR_IN
70442: IFFALSE 70455
// ComExit ( i ) ;
70444: LD_VAR 0 3
70448: PPUSH
70449: CALL 70335 0 1
70453: GO 70441
70455: POP
70456: POP
// end ;
70457: LD_VAR 0 2
70461: RET
// export function ResetHc ; begin
70462: LD_INT 0
70464: PPUSH
// InitHc ;
70465: CALL_OW 19
// hc_importance := 0 ;
70469: LD_ADDR_OWVAR 32
70473: PUSH
70474: LD_INT 0
70476: ST_TO_ADDR
// end ;
70477: LD_VAR 0 1
70481: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70482: LD_INT 0
70484: PPUSH
70485: PPUSH
70486: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70487: LD_ADDR_VAR 0 6
70491: PUSH
70492: LD_VAR 0 1
70496: PUSH
70497: LD_VAR 0 3
70501: PLUS
70502: PUSH
70503: LD_INT 2
70505: DIV
70506: ST_TO_ADDR
// if _x < 0 then
70507: LD_VAR 0 6
70511: PUSH
70512: LD_INT 0
70514: LESS
70515: IFFALSE 70532
// _x := _x * - 1 ;
70517: LD_ADDR_VAR 0 6
70521: PUSH
70522: LD_VAR 0 6
70526: PUSH
70527: LD_INT 1
70529: NEG
70530: MUL
70531: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70532: LD_ADDR_VAR 0 7
70536: PUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_VAR 0 4
70546: PLUS
70547: PUSH
70548: LD_INT 2
70550: DIV
70551: ST_TO_ADDR
// if _y < 0 then
70552: LD_VAR 0 7
70556: PUSH
70557: LD_INT 0
70559: LESS
70560: IFFALSE 70577
// _y := _y * - 1 ;
70562: LD_ADDR_VAR 0 7
70566: PUSH
70567: LD_VAR 0 7
70571: PUSH
70572: LD_INT 1
70574: NEG
70575: MUL
70576: ST_TO_ADDR
// result := [ _x , _y ] ;
70577: LD_ADDR_VAR 0 5
70581: PUSH
70582: LD_VAR 0 6
70586: PUSH
70587: LD_VAR 0 7
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: ST_TO_ADDR
// end ;
70596: LD_VAR 0 5
70600: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70601: LD_INT 0
70603: PPUSH
70604: PPUSH
70605: PPUSH
70606: PPUSH
// task := GetTaskList ( unit ) ;
70607: LD_ADDR_VAR 0 7
70611: PUSH
70612: LD_VAR 0 1
70616: PPUSH
70617: CALL_OW 437
70621: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70622: LD_VAR 0 7
70626: NOT
70627: IFFALSE 70646
70629: PUSH
70630: LD_VAR 0 1
70634: PPUSH
70635: LD_VAR 0 2
70639: PPUSH
70640: CALL_OW 308
70644: NOT
70645: AND
70646: IFFALSE 70650
// exit ;
70648: GO 70768
// if IsInArea ( unit , area ) then
70650: LD_VAR 0 1
70654: PPUSH
70655: LD_VAR 0 2
70659: PPUSH
70660: CALL_OW 308
70664: IFFALSE 70682
// begin ComMoveToArea ( unit , goAway ) ;
70666: LD_VAR 0 1
70670: PPUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: CALL_OW 113
// exit ;
70680: GO 70768
// end ; if task [ 1 ] [ 1 ] <> M then
70682: LD_VAR 0 7
70686: PUSH
70687: LD_INT 1
70689: ARRAY
70690: PUSH
70691: LD_INT 1
70693: ARRAY
70694: PUSH
70695: LD_STRING M
70697: NONEQUAL
70698: IFFALSE 70702
// exit ;
70700: GO 70768
// x := task [ 1 ] [ 2 ] ;
70702: LD_ADDR_VAR 0 5
70706: PUSH
70707: LD_VAR 0 7
70711: PUSH
70712: LD_INT 1
70714: ARRAY
70715: PUSH
70716: LD_INT 2
70718: ARRAY
70719: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70720: LD_ADDR_VAR 0 6
70724: PUSH
70725: LD_VAR 0 7
70729: PUSH
70730: LD_INT 1
70732: ARRAY
70733: PUSH
70734: LD_INT 3
70736: ARRAY
70737: ST_TO_ADDR
// if InArea ( x , y , area ) then
70738: LD_VAR 0 5
70742: PPUSH
70743: LD_VAR 0 6
70747: PPUSH
70748: LD_VAR 0 2
70752: PPUSH
70753: CALL_OW 309
70757: IFFALSE 70768
// ComStop ( unit ) ;
70759: LD_VAR 0 1
70763: PPUSH
70764: CALL_OW 141
// end ;
70768: LD_VAR 0 4
70772: RET
// export function Abs ( value ) ; begin
70773: LD_INT 0
70775: PPUSH
// result := value ;
70776: LD_ADDR_VAR 0 2
70780: PUSH
70781: LD_VAR 0 1
70785: ST_TO_ADDR
// if value < 0 then
70786: LD_VAR 0 1
70790: PUSH
70791: LD_INT 0
70793: LESS
70794: IFFALSE 70811
// result := value * - 1 ;
70796: LD_ADDR_VAR 0 2
70800: PUSH
70801: LD_VAR 0 1
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: MUL
70810: ST_TO_ADDR
// end ;
70811: LD_VAR 0 2
70815: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
70822: PPUSH
70823: PPUSH
70824: PPUSH
70825: PPUSH
// if not unit or not building then
70826: LD_VAR 0 1
70830: NOT
70831: IFTRUE 70840
70833: PUSH
70834: LD_VAR 0 2
70838: NOT
70839: OR
70840: IFFALSE 70844
// exit ;
70842: GO 71072
// x := GetX ( building ) ;
70844: LD_ADDR_VAR 0 4
70848: PUSH
70849: LD_VAR 0 2
70853: PPUSH
70854: CALL_OW 250
70858: ST_TO_ADDR
// y := GetY ( building ) ;
70859: LD_ADDR_VAR 0 6
70863: PUSH
70864: LD_VAR 0 2
70868: PPUSH
70869: CALL_OW 251
70873: ST_TO_ADDR
// d := GetDir ( building ) ;
70874: LD_ADDR_VAR 0 8
70878: PUSH
70879: LD_VAR 0 2
70883: PPUSH
70884: CALL_OW 254
70888: ST_TO_ADDR
// r := 4 ;
70889: LD_ADDR_VAR 0 9
70893: PUSH
70894: LD_INT 4
70896: ST_TO_ADDR
// for i := 1 to 5 do
70897: LD_ADDR_VAR 0 10
70901: PUSH
70902: DOUBLE
70903: LD_INT 1
70905: DEC
70906: ST_TO_ADDR
70907: LD_INT 5
70909: PUSH
70910: FOR_TO
70911: IFFALSE 71070
// begin _x := ShiftX ( x , d , r + i ) ;
70913: LD_ADDR_VAR 0 5
70917: PUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: LD_VAR 0 8
70927: PPUSH
70928: LD_VAR 0 9
70932: PUSH
70933: LD_VAR 0 10
70937: PLUS
70938: PPUSH
70939: CALL_OW 272
70943: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70944: LD_ADDR_VAR 0 7
70948: PUSH
70949: LD_VAR 0 6
70953: PPUSH
70954: LD_VAR 0 8
70958: PPUSH
70959: LD_VAR 0 9
70963: PUSH
70964: LD_VAR 0 10
70968: PLUS
70969: PPUSH
70970: CALL_OW 273
70974: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70975: LD_VAR 0 5
70979: PPUSH
70980: LD_VAR 0 7
70984: PPUSH
70985: CALL_OW 488
70989: IFFALSE 71024
70991: PUSH
70992: LD_VAR 0 5
70996: PPUSH
70997: LD_VAR 0 7
71001: PPUSH
71002: CALL_OW 428
71006: PPUSH
71007: CALL_OW 247
71011: PUSH
71012: LD_INT 3
71014: PUSH
71015: LD_INT 2
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: IN
71022: NOT
71023: AND
71024: IFFALSE 71068
// begin ComMoveXY ( unit , _x , _y ) ;
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_VAR 0 5
71035: PPUSH
71036: LD_VAR 0 7
71040: PPUSH
71041: CALL_OW 111
// result := [ _x , _y ] ;
71045: LD_ADDR_VAR 0 3
71049: PUSH
71050: LD_VAR 0 5
71054: PUSH
71055: LD_VAR 0 7
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: ST_TO_ADDR
// exit ;
71064: POP
71065: POP
71066: GO 71072
// end ; end ;
71068: GO 70910
71070: POP
71071: POP
// end ;
71072: LD_VAR 0 3
71076: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71077: LD_INT 0
71079: PPUSH
71080: PPUSH
71081: PPUSH
// result := 0 ;
71082: LD_ADDR_VAR 0 3
71086: PUSH
71087: LD_INT 0
71089: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71090: LD_VAR 0 1
71094: PUSH
71095: LD_INT 0
71097: LESS
71098: IFTRUE 71110
71100: PUSH
71101: LD_VAR 0 1
71105: PUSH
71106: LD_INT 8
71108: GREATER
71109: OR
71110: IFTRUE 71122
71112: PUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_INT 0
71120: LESS
71121: OR
71122: IFTRUE 71134
71124: PUSH
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 8
71132: GREATER
71133: OR
71134: IFFALSE 71138
// exit ;
71136: GO 71213
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71138: LD_ADDR_VAR 0 4
71142: PUSH
71143: LD_INT 22
71145: PUSH
71146: LD_VAR 0 2
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PPUSH
71155: CALL_OW 69
71159: PUSH
71160: FOR_IN
71161: IFFALSE 71211
// begin un := UnitShoot ( i ) ;
71163: LD_ADDR_VAR 0 5
71167: PUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: CALL_OW 504
71177: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71178: LD_VAR 0 5
71182: PPUSH
71183: CALL_OW 255
71187: PUSH
71188: LD_VAR 0 1
71192: EQUAL
71193: IFFALSE 71209
// begin result := un ;
71195: LD_ADDR_VAR 0 3
71199: PUSH
71200: LD_VAR 0 5
71204: ST_TO_ADDR
// exit ;
71205: POP
71206: POP
71207: GO 71213
// end ; end ;
71209: GO 71160
71211: POP
71212: POP
// end ;
71213: LD_VAR 0 3
71217: RET
// export function GetCargoBay ( units ) ; begin
71218: LD_INT 0
71220: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71221: LD_ADDR_VAR 0 2
71225: PUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: LD_INT 2
71233: PUSH
71234: LD_INT 34
71236: PUSH
71237: LD_INT 12
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 34
71246: PUSH
71247: LD_INT 51
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 34
71256: PUSH
71257: LD_INT 32
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 34
71266: PUSH
71267: LD_INT 89
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: PPUSH
71281: CALL_OW 72
71285: ST_TO_ADDR
// end ;
71286: LD_VAR 0 2
71290: RET
// export function Negate ( value ) ; begin
71291: LD_INT 0
71293: PPUSH
// result := not value ;
71294: LD_ADDR_VAR 0 2
71298: PUSH
71299: LD_VAR 0 1
71303: NOT
71304: ST_TO_ADDR
// end ;
71305: LD_VAR 0 2
71309: RET
// export function Inc ( value ) ; begin
71310: LD_INT 0
71312: PPUSH
// result := value + 1 ;
71313: LD_ADDR_VAR 0 2
71317: PUSH
71318: LD_VAR 0 1
71322: PUSH
71323: LD_INT 1
71325: PLUS
71326: ST_TO_ADDR
// end ;
71327: LD_VAR 0 2
71331: RET
// export function Dec ( value ) ; begin
71332: LD_INT 0
71334: PPUSH
// result := value - 1 ;
71335: LD_ADDR_VAR 0 2
71339: PUSH
71340: LD_VAR 0 1
71344: PUSH
71345: LD_INT 1
71347: MINUS
71348: ST_TO_ADDR
// end ;
71349: LD_VAR 0 2
71353: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71354: LD_INT 0
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71364: LD_VAR 0 1
71368: PPUSH
71369: LD_VAR 0 2
71373: PPUSH
71374: CALL_OW 488
71378: NOT
71379: IFTRUE 71398
71381: PUSH
71382: LD_VAR 0 3
71386: PPUSH
71387: LD_VAR 0 4
71391: PPUSH
71392: CALL_OW 488
71396: NOT
71397: OR
71398: IFFALSE 71411
// begin result := - 1 ;
71400: LD_ADDR_VAR 0 5
71404: PUSH
71405: LD_INT 1
71407: NEG
71408: ST_TO_ADDR
// exit ;
71409: GO 71646
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71411: LD_ADDR_VAR 0 12
71415: PUSH
71416: LD_VAR 0 1
71420: PPUSH
71421: LD_VAR 0 2
71425: PPUSH
71426: LD_VAR 0 3
71430: PPUSH
71431: LD_VAR 0 4
71435: PPUSH
71436: CALL 70482 0 4
71440: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71441: LD_ADDR_VAR 0 11
71445: PUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: LD_VAR 0 12
71460: PUSH
71461: LD_INT 1
71463: ARRAY
71464: PPUSH
71465: LD_VAR 0 12
71469: PUSH
71470: LD_INT 2
71472: ARRAY
71473: PPUSH
71474: CALL_OW 298
71478: ST_TO_ADDR
// distance := 9999 ;
71479: LD_ADDR_VAR 0 10
71483: PUSH
71484: LD_INT 9999
71486: ST_TO_ADDR
// for i := 0 to 5 do
71487: LD_ADDR_VAR 0 6
71491: PUSH
71492: DOUBLE
71493: LD_INT 0
71495: DEC
71496: ST_TO_ADDR
71497: LD_INT 5
71499: PUSH
71500: FOR_TO
71501: IFFALSE 71644
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71503: LD_ADDR_VAR 0 7
71507: PUSH
71508: LD_VAR 0 1
71512: PPUSH
71513: LD_VAR 0 6
71517: PPUSH
71518: LD_VAR 0 11
71522: PPUSH
71523: CALL_OW 272
71527: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71528: LD_ADDR_VAR 0 8
71532: PUSH
71533: LD_VAR 0 2
71537: PPUSH
71538: LD_VAR 0 6
71542: PPUSH
71543: LD_VAR 0 11
71547: PPUSH
71548: CALL_OW 273
71552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71553: LD_VAR 0 7
71557: PPUSH
71558: LD_VAR 0 8
71562: PPUSH
71563: CALL_OW 488
71567: NOT
71568: IFFALSE 71572
// continue ;
71570: GO 71500
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71572: LD_ADDR_VAR 0 9
71576: PUSH
71577: LD_VAR 0 12
71581: PUSH
71582: LD_INT 1
71584: ARRAY
71585: PPUSH
71586: LD_VAR 0 12
71590: PUSH
71591: LD_INT 2
71593: ARRAY
71594: PPUSH
71595: LD_VAR 0 7
71599: PPUSH
71600: LD_VAR 0 8
71604: PPUSH
71605: CALL_OW 298
71609: ST_TO_ADDR
// if tmp < distance then
71610: LD_VAR 0 9
71614: PUSH
71615: LD_VAR 0 10
71619: LESS
71620: IFFALSE 71642
// begin result := i ;
71622: LD_ADDR_VAR 0 5
71626: PUSH
71627: LD_VAR 0 6
71631: ST_TO_ADDR
// distance := tmp ;
71632: LD_ADDR_VAR 0 10
71636: PUSH
71637: LD_VAR 0 9
71641: ST_TO_ADDR
// end ; end ;
71642: GO 71500
71644: POP
71645: POP
// end ;
71646: LD_VAR 0 5
71650: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71651: LD_INT 0
71653: PPUSH
71654: PPUSH
// if not driver or not IsInUnit ( driver ) then
71655: LD_VAR 0 1
71659: NOT
71660: IFTRUE 71674
71662: PUSH
71663: LD_VAR 0 1
71667: PPUSH
71668: CALL_OW 310
71672: NOT
71673: OR
71674: IFFALSE 71678
// exit ;
71676: GO 71768
// vehicle := IsInUnit ( driver ) ;
71678: LD_ADDR_VAR 0 3
71682: PUSH
71683: LD_VAR 0 1
71687: PPUSH
71688: CALL_OW 310
71692: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71693: LD_VAR 0 1
71697: PPUSH
71698: LD_STRING \
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: LD_INT 0
71709: PUSH
71710: LD_INT 0
71712: PUSH
71713: LD_INT 0
71715: PUSH
71716: LD_INT 0
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: PUSH
71728: LD_STRING E
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_VAR 0 3
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PPUSH
71764: CALL_OW 446
// end ;
71768: LD_VAR 0 2
71772: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71773: LD_INT 0
71775: PPUSH
71776: PPUSH
// if not driver or not IsInUnit ( driver ) then
71777: LD_VAR 0 1
71781: NOT
71782: IFTRUE 71796
71784: PUSH
71785: LD_VAR 0 1
71789: PPUSH
71790: CALL_OW 310
71794: NOT
71795: OR
71796: IFFALSE 71800
// exit ;
71798: GO 71890
// vehicle := IsInUnit ( driver ) ;
71800: LD_ADDR_VAR 0 3
71804: PUSH
71805: LD_VAR 0 1
71809: PPUSH
71810: CALL_OW 310
71814: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71815: LD_VAR 0 1
71819: PPUSH
71820: LD_STRING \
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 0
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: PUSH
71850: LD_STRING E
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_VAR 0 3
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: LD_INT 0
71869: PUSH
71870: LD_INT 0
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PPUSH
71886: CALL_OW 447
// end ;
71890: LD_VAR 0 2
71894: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71895: LD_INT 0
71897: PPUSH
71898: PPUSH
71899: PPUSH
// tmp := [ ] ;
71900: LD_ADDR_VAR 0 5
71904: PUSH
71905: EMPTY
71906: ST_TO_ADDR
// for i in units do
71907: LD_ADDR_VAR 0 4
71911: PUSH
71912: LD_VAR 0 1
71916: PUSH
71917: FOR_IN
71918: IFFALSE 71956
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71920: LD_ADDR_VAR 0 5
71924: PUSH
71925: LD_VAR 0 5
71929: PPUSH
71930: LD_VAR 0 5
71934: PUSH
71935: LD_INT 1
71937: PLUS
71938: PPUSH
71939: LD_VAR 0 4
71943: PPUSH
71944: CALL_OW 256
71948: PPUSH
71949: CALL_OW 2
71953: ST_TO_ADDR
71954: GO 71917
71956: POP
71957: POP
// if not tmp then
71958: LD_VAR 0 5
71962: NOT
71963: IFFALSE 71967
// exit ;
71965: GO 72015
// if asc then
71967: LD_VAR 0 2
71971: IFFALSE 71995
// result := SortListByListAsc ( units , tmp ) else
71973: LD_ADDR_VAR 0 3
71977: PUSH
71978: LD_VAR 0 1
71982: PPUSH
71983: LD_VAR 0 5
71987: PPUSH
71988: CALL_OW 76
71992: ST_TO_ADDR
71993: GO 72015
// result := SortListByListDesc ( units , tmp ) ;
71995: LD_ADDR_VAR 0 3
71999: PUSH
72000: LD_VAR 0 1
72004: PPUSH
72005: LD_VAR 0 5
72009: PPUSH
72010: CALL_OW 77
72014: ST_TO_ADDR
// end ;
72015: LD_VAR 0 3
72019: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
// task := GetTaskList ( mech ) ;
72024: LD_ADDR_VAR 0 4
72028: PUSH
72029: LD_VAR 0 1
72033: PPUSH
72034: CALL_OW 437
72038: ST_TO_ADDR
// if not task then
72039: LD_VAR 0 4
72043: NOT
72044: IFFALSE 72048
// exit ;
72046: GO 72092
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72048: LD_ADDR_VAR 0 3
72052: PUSH
72053: LD_VAR 0 4
72057: PUSH
72058: LD_INT 1
72060: ARRAY
72061: PUSH
72062: LD_INT 1
72064: ARRAY
72065: PUSH
72066: LD_STRING r
72068: EQUAL
72069: IFFALSE 72091
72071: PUSH
72072: LD_VAR 0 4
72076: PUSH
72077: LD_INT 1
72079: ARRAY
72080: PUSH
72081: LD_INT 4
72083: ARRAY
72084: PUSH
72085: LD_VAR 0 2
72089: EQUAL
72090: AND
72091: ST_TO_ADDR
// end ;
72092: LD_VAR 0 3
72096: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72097: LD_INT 0
72099: PPUSH
// SetDir ( unit , d ) ;
72100: LD_VAR 0 1
72104: PPUSH
72105: LD_VAR 0 4
72109: PPUSH
72110: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72114: LD_ADDR_VAR 0 6
72118: PUSH
72119: LD_VAR 0 1
72123: PPUSH
72124: LD_VAR 0 2
72128: PPUSH
72129: LD_VAR 0 3
72133: PPUSH
72134: LD_VAR 0 5
72138: PPUSH
72139: CALL_OW 48
72143: ST_TO_ADDR
// end ;
72144: LD_VAR 0 6
72148: RET
// export function ToNaturalNumber ( number ) ; begin
72149: LD_INT 0
72151: PPUSH
// result := number div 1 ;
72152: LD_ADDR_VAR 0 2
72156: PUSH
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 1
72164: DIV
72165: ST_TO_ADDR
// if number < 0 then
72166: LD_VAR 0 1
72170: PUSH
72171: LD_INT 0
72173: LESS
72174: IFFALSE 72184
// result := 0 ;
72176: LD_ADDR_VAR 0 2
72180: PUSH
72181: LD_INT 0
72183: ST_TO_ADDR
// end ;
72184: LD_VAR 0 2
72188: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72189: LD_INT 0
72191: PPUSH
72192: PPUSH
72193: PPUSH
// if not buildings then
72194: LD_VAR 0 1
72198: NOT
72199: IFFALSE 72203
// exit ;
72201: GO 72318
// tmp := [ ] ;
72203: LD_ADDR_VAR 0 5
72207: PUSH
72208: EMPTY
72209: ST_TO_ADDR
// for b in buildings do
72210: LD_ADDR_VAR 0 4
72214: PUSH
72215: LD_VAR 0 1
72219: PUSH
72220: FOR_IN
72221: IFFALSE 72259
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72223: LD_ADDR_VAR 0 5
72227: PUSH
72228: LD_VAR 0 5
72232: PPUSH
72233: LD_VAR 0 5
72237: PUSH
72238: LD_INT 1
72240: PLUS
72241: PPUSH
72242: LD_VAR 0 4
72246: PPUSH
72247: CALL_OW 266
72251: PPUSH
72252: CALL_OW 1
72256: ST_TO_ADDR
72257: GO 72220
72259: POP
72260: POP
// if not tmp then
72261: LD_VAR 0 5
72265: NOT
72266: IFFALSE 72270
// exit ;
72268: GO 72318
// if asc then
72270: LD_VAR 0 2
72274: IFFALSE 72298
// result := SortListByListAsc ( buildings , tmp ) else
72276: LD_ADDR_VAR 0 3
72280: PUSH
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_VAR 0 5
72290: PPUSH
72291: CALL_OW 76
72295: ST_TO_ADDR
72296: GO 72318
// result := SortListByListDesc ( buildings , tmp ) ;
72298: LD_ADDR_VAR 0 3
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: LD_VAR 0 5
72312: PPUSH
72313: CALL_OW 77
72317: ST_TO_ADDR
// end ;
72318: LD_VAR 0 3
72322: RET
// export function SortByClass ( units , class ) ; var un ; begin
72323: LD_INT 0
72325: PPUSH
72326: PPUSH
// if not units or not class then
72327: LD_VAR 0 1
72331: NOT
72332: IFTRUE 72341
72334: PUSH
72335: LD_VAR 0 2
72339: NOT
72340: OR
72341: IFFALSE 72345
// exit ;
72343: GO 72440
// result := [ ] ;
72345: LD_ADDR_VAR 0 3
72349: PUSH
72350: EMPTY
72351: ST_TO_ADDR
// for un in units do
72352: LD_ADDR_VAR 0 4
72356: PUSH
72357: LD_VAR 0 1
72361: PUSH
72362: FOR_IN
72363: IFFALSE 72438
// if GetClass ( un ) = class then
72365: LD_VAR 0 4
72369: PPUSH
72370: CALL_OW 257
72374: PUSH
72375: LD_VAR 0 2
72379: EQUAL
72380: IFFALSE 72407
// result := Insert ( result , 1 , un ) else
72382: LD_ADDR_VAR 0 3
72386: PUSH
72387: LD_VAR 0 3
72391: PPUSH
72392: LD_INT 1
72394: PPUSH
72395: LD_VAR 0 4
72399: PPUSH
72400: CALL_OW 2
72404: ST_TO_ADDR
72405: GO 72436
// result := Replace ( result , result + 1 , un ) ;
72407: LD_ADDR_VAR 0 3
72411: PUSH
72412: LD_VAR 0 3
72416: PPUSH
72417: LD_VAR 0 3
72421: PUSH
72422: LD_INT 1
72424: PLUS
72425: PPUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: CALL_OW 1
72435: ST_TO_ADDR
72436: GO 72362
72438: POP
72439: POP
// end ;
72440: LD_VAR 0 3
72444: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72445: LD_INT 0
72447: PPUSH
72448: PPUSH
72449: PPUSH
72450: PPUSH
72451: PPUSH
72452: PPUSH
72453: PPUSH
// result := [ ] ;
72454: LD_ADDR_VAR 0 4
72458: PUSH
72459: EMPTY
72460: ST_TO_ADDR
// if x - r < 0 then
72461: LD_VAR 0 1
72465: PUSH
72466: LD_VAR 0 3
72470: MINUS
72471: PUSH
72472: LD_INT 0
72474: LESS
72475: IFFALSE 72487
// min_x := 0 else
72477: LD_ADDR_VAR 0 8
72481: PUSH
72482: LD_INT 0
72484: ST_TO_ADDR
72485: GO 72503
// min_x := x - r ;
72487: LD_ADDR_VAR 0 8
72491: PUSH
72492: LD_VAR 0 1
72496: PUSH
72497: LD_VAR 0 3
72501: MINUS
72502: ST_TO_ADDR
// if y - r < 0 then
72503: LD_VAR 0 2
72507: PUSH
72508: LD_VAR 0 3
72512: MINUS
72513: PUSH
72514: LD_INT 0
72516: LESS
72517: IFFALSE 72529
// min_y := 0 else
72519: LD_ADDR_VAR 0 7
72523: PUSH
72524: LD_INT 0
72526: ST_TO_ADDR
72527: GO 72545
// min_y := y - r ;
72529: LD_ADDR_VAR 0 7
72533: PUSH
72534: LD_VAR 0 2
72538: PUSH
72539: LD_VAR 0 3
72543: MINUS
72544: ST_TO_ADDR
// max_x := x + r ;
72545: LD_ADDR_VAR 0 9
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_VAR 0 3
72559: PLUS
72560: ST_TO_ADDR
// max_y := y + r ;
72561: LD_ADDR_VAR 0 10
72565: PUSH
72566: LD_VAR 0 2
72570: PUSH
72571: LD_VAR 0 3
72575: PLUS
72576: ST_TO_ADDR
// for _x = min_x to max_x do
72577: LD_ADDR_VAR 0 5
72581: PUSH
72582: DOUBLE
72583: LD_VAR 0 8
72587: DEC
72588: ST_TO_ADDR
72589: LD_VAR 0 9
72593: PUSH
72594: FOR_TO
72595: IFFALSE 72696
// for _y = min_y to max_y do
72597: LD_ADDR_VAR 0 6
72601: PUSH
72602: DOUBLE
72603: LD_VAR 0 7
72607: DEC
72608: ST_TO_ADDR
72609: LD_VAR 0 10
72613: PUSH
72614: FOR_TO
72615: IFFALSE 72692
// begin if not ValidHex ( _x , _y ) then
72617: LD_VAR 0 5
72621: PPUSH
72622: LD_VAR 0 6
72626: PPUSH
72627: CALL_OW 488
72631: NOT
72632: IFFALSE 72636
// continue ;
72634: GO 72614
// if GetResourceTypeXY ( _x , _y ) then
72636: LD_VAR 0 5
72640: PPUSH
72641: LD_VAR 0 6
72645: PPUSH
72646: CALL_OW 283
72650: IFFALSE 72690
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72652: LD_ADDR_VAR 0 4
72656: PUSH
72657: LD_VAR 0 4
72661: PPUSH
72662: LD_VAR 0 4
72666: PUSH
72667: LD_INT 1
72669: PLUS
72670: PPUSH
72671: LD_VAR 0 5
72675: PUSH
72676: LD_VAR 0 6
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PPUSH
72685: CALL_OW 1
72689: ST_TO_ADDR
// end ;
72690: GO 72614
72692: POP
72693: POP
72694: GO 72594
72696: POP
72697: POP
// end ;
72698: LD_VAR 0 4
72702: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72703: LD_INT 0
72705: PPUSH
72706: PPUSH
72707: PPUSH
72708: PPUSH
72709: PPUSH
72710: PPUSH
72711: PPUSH
72712: PPUSH
// if not units then
72713: LD_VAR 0 1
72717: NOT
72718: IFFALSE 72722
// exit ;
72720: GO 73254
// result := UnitFilter ( units , [ f_ok ] ) ;
72722: LD_ADDR_VAR 0 3
72726: PUSH
72727: LD_VAR 0 1
72731: PPUSH
72732: LD_INT 50
72734: PUSH
72735: EMPTY
72736: LIST
72737: PPUSH
72738: CALL_OW 72
72742: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72743: LD_ADDR_VAR 0 8
72747: PUSH
72748: LD_VAR 0 1
72752: PUSH
72753: LD_INT 1
72755: ARRAY
72756: PPUSH
72757: CALL_OW 255
72761: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72762: LD_ADDR_VAR 0 10
72766: PUSH
72767: LD_INT 29
72769: PUSH
72770: LD_INT 91
72772: PUSH
72773: LD_INT 49
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: LIST
72780: ST_TO_ADDR
// if not result then
72781: LD_VAR 0 3
72785: NOT
72786: IFFALSE 72790
// exit ;
72788: GO 73254
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72790: LD_ADDR_VAR 0 5
72794: PUSH
72795: LD_INT 81
72797: PUSH
72798: LD_VAR 0 8
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PPUSH
72807: CALL_OW 69
72811: ST_TO_ADDR
// for i in result do
72812: LD_ADDR_VAR 0 4
72816: PUSH
72817: LD_VAR 0 3
72821: PUSH
72822: FOR_IN
72823: IFFALSE 73252
// begin tag := GetTag ( i ) + 1 ;
72825: LD_ADDR_VAR 0 9
72829: PUSH
72830: LD_VAR 0 4
72834: PPUSH
72835: CALL_OW 110
72839: PUSH
72840: LD_INT 1
72842: PLUS
72843: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72844: LD_ADDR_VAR 0 7
72848: PUSH
72849: LD_VAR 0 4
72853: PPUSH
72854: CALL_OW 250
72858: PPUSH
72859: LD_VAR 0 4
72863: PPUSH
72864: CALL_OW 251
72868: PPUSH
72869: LD_INT 4
72871: PPUSH
72872: CALL 72445 0 3
72876: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72877: LD_VAR 0 4
72881: PPUSH
72882: CALL_OW 247
72886: PUSH
72887: LD_INT 2
72889: EQUAL
72890: IFFALSE 72902
72892: PUSH
72893: LD_VAR 0 7
72897: PUSH
72898: LD_INT 2
72900: GREATER
72901: AND
72902: IFFALSE 72922
72904: PUSH
72905: LD_VAR 0 4
72909: PPUSH
72910: CALL_OW 264
72914: PUSH
72915: LD_VAR 0 10
72919: IN
72920: NOT
72921: AND
72922: IFFALSE 72961
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72924: LD_VAR 0 4
72928: PPUSH
72929: LD_VAR 0 7
72933: PUSH
72934: LD_INT 1
72936: ARRAY
72937: PUSH
72938: LD_INT 1
72940: ARRAY
72941: PPUSH
72942: LD_VAR 0 7
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_INT 2
72953: ARRAY
72954: PPUSH
72955: CALL_OW 116
72959: GO 73250
// if path > tag then
72961: LD_VAR 0 2
72965: PUSH
72966: LD_VAR 0 9
72970: GREATER
72971: IFFALSE 73179
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72973: LD_ADDR_VAR 0 6
72977: PUSH
72978: LD_VAR 0 5
72982: PPUSH
72983: LD_INT 91
72985: PUSH
72986: LD_VAR 0 4
72990: PUSH
72991: LD_INT 8
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: PPUSH
72999: CALL_OW 72
73003: ST_TO_ADDR
// if nearEnemy then
73004: LD_VAR 0 6
73008: IFFALSE 73077
// begin if GetWeapon ( i ) = ru_time_lapser then
73010: LD_VAR 0 4
73014: PPUSH
73015: CALL_OW 264
73019: PUSH
73020: LD_INT 49
73022: EQUAL
73023: IFFALSE 73051
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73025: LD_VAR 0 4
73029: PPUSH
73030: LD_VAR 0 6
73034: PPUSH
73035: LD_VAR 0 4
73039: PPUSH
73040: CALL_OW 74
73044: PPUSH
73045: CALL_OW 112
73049: GO 73075
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73051: LD_VAR 0 4
73055: PPUSH
73056: LD_VAR 0 6
73060: PPUSH
73061: LD_VAR 0 4
73065: PPUSH
73066: CALL_OW 74
73070: PPUSH
73071: CALL 74335 0 2
// end else
73075: GO 73177
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73077: LD_VAR 0 4
73081: PPUSH
73082: LD_VAR 0 2
73086: PUSH
73087: LD_VAR 0 9
73091: ARRAY
73092: PUSH
73093: LD_INT 1
73095: ARRAY
73096: PPUSH
73097: LD_VAR 0 2
73101: PUSH
73102: LD_VAR 0 9
73106: ARRAY
73107: PUSH
73108: LD_INT 2
73110: ARRAY
73111: PPUSH
73112: CALL_OW 297
73116: PUSH
73117: LD_INT 6
73119: GREATER
73120: IFFALSE 73163
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73122: LD_VAR 0 4
73126: PPUSH
73127: LD_VAR 0 2
73131: PUSH
73132: LD_VAR 0 9
73136: ARRAY
73137: PUSH
73138: LD_INT 1
73140: ARRAY
73141: PPUSH
73142: LD_VAR 0 2
73146: PUSH
73147: LD_VAR 0 9
73151: ARRAY
73152: PUSH
73153: LD_INT 2
73155: ARRAY
73156: PPUSH
73157: CALL_OW 114
73161: GO 73177
// SetTag ( i , tag ) ;
73163: LD_VAR 0 4
73167: PPUSH
73168: LD_VAR 0 9
73172: PPUSH
73173: CALL_OW 109
// end else
73177: GO 73250
// if enemy then
73179: LD_VAR 0 5
73183: IFFALSE 73250
// begin if GetWeapon ( i ) = ru_time_lapser then
73185: LD_VAR 0 4
73189: PPUSH
73190: CALL_OW 264
73194: PUSH
73195: LD_INT 49
73197: EQUAL
73198: IFFALSE 73226
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73200: LD_VAR 0 4
73204: PPUSH
73205: LD_VAR 0 5
73209: PPUSH
73210: LD_VAR 0 4
73214: PPUSH
73215: CALL_OW 74
73219: PPUSH
73220: CALL_OW 112
73224: GO 73250
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73226: LD_VAR 0 4
73230: PPUSH
73231: LD_VAR 0 5
73235: PPUSH
73236: LD_VAR 0 4
73240: PPUSH
73241: CALL_OW 74
73245: PPUSH
73246: CALL 74335 0 2
// end ; end ;
73250: GO 72822
73252: POP
73253: POP
// end ;
73254: LD_VAR 0 3
73258: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73259: LD_INT 0
73261: PPUSH
73262: PPUSH
73263: PPUSH
// if not unit or IsInUnit ( unit ) then
73264: LD_VAR 0 1
73268: NOT
73269: IFTRUE 73282
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: CALL_OW 310
73281: OR
73282: IFFALSE 73286
// exit ;
73284: GO 73377
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73286: LD_ADDR_VAR 0 4
73290: PUSH
73291: LD_VAR 0 1
73295: PPUSH
73296: CALL_OW 250
73300: PPUSH
73301: LD_VAR 0 2
73305: PPUSH
73306: LD_INT 1
73308: PPUSH
73309: CALL_OW 272
73313: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73314: LD_ADDR_VAR 0 5
73318: PUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: CALL_OW 251
73328: PPUSH
73329: LD_VAR 0 2
73333: PPUSH
73334: LD_INT 1
73336: PPUSH
73337: CALL_OW 273
73341: ST_TO_ADDR
// if ValidHex ( x , y ) then
73342: LD_VAR 0 4
73346: PPUSH
73347: LD_VAR 0 5
73351: PPUSH
73352: CALL_OW 488
73356: IFFALSE 73377
// ComTurnXY ( unit , x , y ) ;
73358: LD_VAR 0 1
73362: PPUSH
73363: LD_VAR 0 4
73367: PPUSH
73368: LD_VAR 0 5
73372: PPUSH
73373: CALL_OW 118
// end ;
73377: LD_VAR 0 3
73381: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73382: LD_INT 0
73384: PPUSH
73385: PPUSH
// result := false ;
73386: LD_ADDR_VAR 0 3
73390: PUSH
73391: LD_INT 0
73393: ST_TO_ADDR
// if not units then
73394: LD_VAR 0 2
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73448
// for i in units do
73403: LD_ADDR_VAR 0 4
73407: PUSH
73408: LD_VAR 0 2
73412: PUSH
73413: FOR_IN
73414: IFFALSE 73446
// if See ( side , i ) then
73416: LD_VAR 0 1
73420: PPUSH
73421: LD_VAR 0 4
73425: PPUSH
73426: CALL_OW 292
73430: IFFALSE 73444
// begin result := true ;
73432: LD_ADDR_VAR 0 3
73436: PUSH
73437: LD_INT 1
73439: ST_TO_ADDR
// exit ;
73440: POP
73441: POP
73442: GO 73448
// end ;
73444: GO 73413
73446: POP
73447: POP
// end ;
73448: LD_VAR 0 3
73452: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73453: LD_INT 0
73455: PPUSH
73456: PPUSH
73457: PPUSH
73458: PPUSH
// if not unit or not points then
73459: LD_VAR 0 1
73463: NOT
73464: IFTRUE 73473
73466: PUSH
73467: LD_VAR 0 2
73471: NOT
73472: OR
73473: IFFALSE 73477
// exit ;
73475: GO 73567
// dist := 99999 ;
73477: LD_ADDR_VAR 0 5
73481: PUSH
73482: LD_INT 99999
73484: ST_TO_ADDR
// for i in points do
73485: LD_ADDR_VAR 0 4
73489: PUSH
73490: LD_VAR 0 2
73494: PUSH
73495: FOR_IN
73496: IFFALSE 73565
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73498: LD_ADDR_VAR 0 6
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: LD_VAR 0 4
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PPUSH
73517: LD_VAR 0 4
73521: PUSH
73522: LD_INT 2
73524: ARRAY
73525: PPUSH
73526: CALL_OW 297
73530: ST_TO_ADDR
// if tmpDist < dist then
73531: LD_VAR 0 6
73535: PUSH
73536: LD_VAR 0 5
73540: LESS
73541: IFFALSE 73563
// begin result := i ;
73543: LD_ADDR_VAR 0 3
73547: PUSH
73548: LD_VAR 0 4
73552: ST_TO_ADDR
// dist := tmpDist ;
73553: LD_ADDR_VAR 0 5
73557: PUSH
73558: LD_VAR 0 6
73562: ST_TO_ADDR
// end ; end ;
73563: GO 73495
73565: POP
73566: POP
// end ;
73567: LD_VAR 0 3
73571: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73572: LD_INT 0
73574: PPUSH
// uc_side := side ;
73575: LD_ADDR_OWVAR 20
73579: PUSH
73580: LD_VAR 0 1
73584: ST_TO_ADDR
// uc_nation := 3 ;
73585: LD_ADDR_OWVAR 21
73589: PUSH
73590: LD_INT 3
73592: ST_TO_ADDR
// vc_chassis := 25 ;
73593: LD_ADDR_OWVAR 37
73597: PUSH
73598: LD_INT 25
73600: ST_TO_ADDR
// vc_engine := engine_siberite ;
73601: LD_ADDR_OWVAR 39
73605: PUSH
73606: LD_INT 3
73608: ST_TO_ADDR
// vc_control := control_computer ;
73609: LD_ADDR_OWVAR 38
73613: PUSH
73614: LD_INT 3
73616: ST_TO_ADDR
// vc_weapon := 59 ;
73617: LD_ADDR_OWVAR 40
73621: PUSH
73622: LD_INT 59
73624: ST_TO_ADDR
// result := CreateVehicle ;
73625: LD_ADDR_VAR 0 5
73629: PUSH
73630: CALL_OW 45
73634: ST_TO_ADDR
// SetDir ( result , d ) ;
73635: LD_VAR 0 5
73639: PPUSH
73640: LD_VAR 0 4
73644: PPUSH
73645: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73649: LD_VAR 0 5
73653: PPUSH
73654: LD_VAR 0 2
73658: PPUSH
73659: LD_VAR 0 3
73663: PPUSH
73664: LD_INT 0
73666: PPUSH
73667: CALL_OW 48
// end ;
73671: LD_VAR 0 5
73675: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73676: LD_INT 0
73678: PPUSH
73679: PPUSH
73680: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73681: LD_ADDR_VAR 0 2
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: LD_INT 0
73691: PUSH
73692: LD_INT 0
73694: PUSH
73695: LD_INT 0
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73704: LD_VAR 0 1
73708: NOT
73709: IFTRUE 73742
73711: PUSH
73712: LD_VAR 0 1
73716: PPUSH
73717: CALL_OW 264
73721: PUSH
73722: LD_INT 12
73724: PUSH
73725: LD_INT 51
73727: PUSH
73728: LD_INT 32
73730: PUSH
73731: LD_INT 89
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: IN
73740: NOT
73741: OR
73742: IFFALSE 73746
// exit ;
73744: GO 73844
// for i := 1 to 3 do
73746: LD_ADDR_VAR 0 3
73750: PUSH
73751: DOUBLE
73752: LD_INT 1
73754: DEC
73755: ST_TO_ADDR
73756: LD_INT 3
73758: PUSH
73759: FOR_TO
73760: IFFALSE 73842
// begin tmp := GetCargo ( cargo , i ) ;
73762: LD_ADDR_VAR 0 4
73766: PUSH
73767: LD_VAR 0 1
73771: PPUSH
73772: LD_VAR 0 3
73776: PPUSH
73777: CALL_OW 289
73781: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73782: LD_ADDR_VAR 0 2
73786: PUSH
73787: LD_VAR 0 2
73791: PPUSH
73792: LD_VAR 0 3
73796: PPUSH
73797: LD_VAR 0 4
73801: PPUSH
73802: CALL_OW 1
73806: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73807: LD_ADDR_VAR 0 2
73811: PUSH
73812: LD_VAR 0 2
73816: PPUSH
73817: LD_INT 4
73819: PPUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_INT 4
73827: ARRAY
73828: PUSH
73829: LD_VAR 0 4
73833: PLUS
73834: PPUSH
73835: CALL_OW 1
73839: ST_TO_ADDR
// end ;
73840: GO 73759
73842: POP
73843: POP
// end ;
73844: LD_VAR 0 2
73848: RET
// export function Length ( array ) ; begin
73849: LD_INT 0
73851: PPUSH
// result := array + 0 ;
73852: LD_ADDR_VAR 0 2
73856: PUSH
73857: LD_VAR 0 1
73861: PUSH
73862: LD_INT 0
73864: PLUS
73865: ST_TO_ADDR
// end ;
73866: LD_VAR 0 2
73870: RET
// export function PrepareArray ( array ) ; begin
73871: LD_INT 0
73873: PPUSH
// result := array diff 0 ;
73874: LD_ADDR_VAR 0 2
73878: PUSH
73879: LD_VAR 0 1
73883: PUSH
73884: LD_INT 0
73886: DIFF
73887: ST_TO_ADDR
// if not result [ 1 ] then
73888: LD_VAR 0 2
73892: PUSH
73893: LD_INT 1
73895: ARRAY
73896: NOT
73897: IFFALSE 73917
// result := Delete ( result , 1 ) ;
73899: LD_ADDR_VAR 0 2
73903: PUSH
73904: LD_VAR 0 2
73908: PPUSH
73909: LD_INT 1
73911: PPUSH
73912: CALL_OW 3
73916: ST_TO_ADDR
// end ;
73917: LD_VAR 0 2
73921: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73922: LD_INT 0
73924: PPUSH
73925: PPUSH
73926: PPUSH
73927: PPUSH
// sibRocketRange := 25 ;
73928: LD_ADDR_VAR 0 6
73932: PUSH
73933: LD_INT 25
73935: ST_TO_ADDR
// result := false ;
73936: LD_ADDR_VAR 0 4
73940: PUSH
73941: LD_INT 0
73943: ST_TO_ADDR
// for i := 0 to 5 do
73944: LD_ADDR_VAR 0 5
73948: PUSH
73949: DOUBLE
73950: LD_INT 0
73952: DEC
73953: ST_TO_ADDR
73954: LD_INT 5
73956: PUSH
73957: FOR_TO
73958: IFFALSE 74025
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 5
73969: PPUSH
73970: LD_VAR 0 6
73974: PPUSH
73975: CALL_OW 272
73979: PPUSH
73980: LD_VAR 0 2
73984: PPUSH
73985: LD_VAR 0 5
73989: PPUSH
73990: LD_VAR 0 6
73994: PPUSH
73995: CALL_OW 273
73999: PPUSH
74000: LD_VAR 0 3
74004: PPUSH
74005: CALL_OW 309
74009: IFFALSE 74023
// begin result := true ;
74011: LD_ADDR_VAR 0 4
74015: PUSH
74016: LD_INT 1
74018: ST_TO_ADDR
// exit ;
74019: POP
74020: POP
74021: GO 74027
// end ;
74023: GO 73957
74025: POP
74026: POP
// end ;
74027: LD_VAR 0 4
74031: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74032: LD_INT 0
74034: PPUSH
74035: PPUSH
74036: PPUSH
// if btype = b_depot then
74037: LD_VAR 0 2
74041: PUSH
74042: LD_INT 0
74044: EQUAL
74045: IFFALSE 74057
// begin result := true ;
74047: LD_ADDR_VAR 0 3
74051: PUSH
74052: LD_INT 1
74054: ST_TO_ADDR
// exit ;
74055: GO 74177
// end ; pom := GetBase ( depot ) ;
74057: LD_ADDR_VAR 0 4
74061: PUSH
74062: LD_VAR 0 1
74066: PPUSH
74067: CALL_OW 274
74071: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74072: LD_ADDR_VAR 0 5
74076: PUSH
74077: LD_VAR 0 2
74081: PPUSH
74082: LD_VAR 0 1
74086: PPUSH
74087: CALL_OW 248
74091: PPUSH
74092: CALL_OW 450
74096: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74097: LD_ADDR_VAR 0 3
74101: PUSH
74102: LD_VAR 0 4
74106: PPUSH
74107: LD_INT 1
74109: PPUSH
74110: CALL_OW 275
74114: PUSH
74115: LD_VAR 0 5
74119: PUSH
74120: LD_INT 1
74122: ARRAY
74123: GREATEREQUAL
74124: IFFALSE 74150
74126: PUSH
74127: LD_VAR 0 4
74131: PPUSH
74132: LD_INT 2
74134: PPUSH
74135: CALL_OW 275
74139: PUSH
74140: LD_VAR 0 5
74144: PUSH
74145: LD_INT 2
74147: ARRAY
74148: GREATEREQUAL
74149: AND
74150: IFFALSE 74176
74152: PUSH
74153: LD_VAR 0 4
74157: PPUSH
74158: LD_INT 3
74160: PPUSH
74161: CALL_OW 275
74165: PUSH
74166: LD_VAR 0 5
74170: PUSH
74171: LD_INT 3
74173: ARRAY
74174: GREATEREQUAL
74175: AND
74176: ST_TO_ADDR
// end ;
74177: LD_VAR 0 3
74181: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74182: LD_INT 0
74184: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74185: LD_VAR 0 1
74189: PPUSH
74190: LD_VAR 0 2
74194: PPUSH
74195: LD_INT 0
74197: PPUSH
74198: LD_INT 0
74200: PPUSH
74201: LD_INT 1
74203: PPUSH
74204: LD_INT 0
74206: PPUSH
74207: CALL_OW 587
// end ;
74211: LD_VAR 0 3
74215: RET
// export function CenterOnNow ( unit ) ; begin
74216: LD_INT 0
74218: PPUSH
// result := IsInUnit ( unit ) ;
74219: LD_ADDR_VAR 0 2
74223: PUSH
74224: LD_VAR 0 1
74228: PPUSH
74229: CALL_OW 310
74233: ST_TO_ADDR
// if not result then
74234: LD_VAR 0 2
74238: NOT
74239: IFFALSE 74251
// result := unit ;
74241: LD_ADDR_VAR 0 2
74245: PUSH
74246: LD_VAR 0 1
74250: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74251: LD_VAR 0 1
74255: PPUSH
74256: CALL_OW 87
// end ;
74260: LD_VAR 0 2
74264: RET
// export function ComMoveHex ( unit , hex ) ; begin
74265: LD_INT 0
74267: PPUSH
// if not hex then
74268: LD_VAR 0 2
74272: NOT
74273: IFFALSE 74277
// exit ;
74275: GO 74330
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74277: LD_VAR 0 2
74281: PUSH
74282: LD_INT 1
74284: ARRAY
74285: PPUSH
74286: LD_VAR 0 2
74290: PUSH
74291: LD_INT 2
74293: ARRAY
74294: PPUSH
74295: CALL_OW 428
74299: IFFALSE 74303
// exit ;
74301: GO 74330
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74303: LD_VAR 0 1
74307: PPUSH
74308: LD_VAR 0 2
74312: PUSH
74313: LD_INT 1
74315: ARRAY
74316: PPUSH
74317: LD_VAR 0 2
74321: PUSH
74322: LD_INT 2
74324: ARRAY
74325: PPUSH
74326: CALL_OW 111
// end ;
74330: LD_VAR 0 3
74334: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74335: LD_INT 0
74337: PPUSH
74338: PPUSH
74339: PPUSH
// if not unit or not enemy then
74340: LD_VAR 0 1
74344: NOT
74345: IFTRUE 74354
74347: PUSH
74348: LD_VAR 0 2
74352: NOT
74353: OR
74354: IFFALSE 74358
// exit ;
74356: GO 74484
// x := GetX ( enemy ) ;
74358: LD_ADDR_VAR 0 4
74362: PUSH
74363: LD_VAR 0 2
74367: PPUSH
74368: CALL_OW 250
74372: ST_TO_ADDR
// y := GetY ( enemy ) ;
74373: LD_ADDR_VAR 0 5
74377: PUSH
74378: LD_VAR 0 2
74382: PPUSH
74383: CALL_OW 251
74387: ST_TO_ADDR
// if ValidHex ( x , y ) then
74388: LD_VAR 0 4
74392: PPUSH
74393: LD_VAR 0 5
74397: PPUSH
74398: CALL_OW 488
74402: IFFALSE 74484
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74404: LD_VAR 0 2
74408: PPUSH
74409: CALL_OW 247
74413: PUSH
74414: LD_INT 3
74416: PUSH
74417: LD_INT 2
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: IN
74424: IFTRUE 74447
74426: PUSH
74427: LD_VAR 0 1
74431: PPUSH
74432: CALL_OW 255
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: CALL_OW 292
74446: OR
74447: IFFALSE 74465
// ComAttackUnit ( unit , enemy ) else
74449: LD_VAR 0 1
74453: PPUSH
74454: LD_VAR 0 2
74458: PPUSH
74459: CALL_OW 115
74463: GO 74484
// ComAgressiveMove ( unit , x , y ) ;
74465: LD_VAR 0 1
74469: PPUSH
74470: LD_VAR 0 4
74474: PPUSH
74475: LD_VAR 0 5
74479: PPUSH
74480: CALL_OW 114
// end ;
74484: LD_VAR 0 3
74488: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74489: LD_INT 0
74491: PPUSH
74492: PPUSH
74493: PPUSH
// list := AreaToList ( area , 0 ) ;
74494: LD_ADDR_VAR 0 5
74498: PUSH
74499: LD_VAR 0 1
74503: PPUSH
74504: LD_INT 0
74506: PPUSH
74507: CALL_OW 517
74511: ST_TO_ADDR
// if not list then
74512: LD_VAR 0 5
74516: NOT
74517: IFFALSE 74521
// exit ;
74519: GO 74651
// if all then
74521: LD_VAR 0 2
74525: IFFALSE 74613
// begin for i := 1 to list [ 1 ] do
74527: LD_ADDR_VAR 0 4
74531: PUSH
74532: DOUBLE
74533: LD_INT 1
74535: DEC
74536: ST_TO_ADDR
74537: LD_VAR 0 5
74541: PUSH
74542: LD_INT 1
74544: ARRAY
74545: PUSH
74546: FOR_TO
74547: IFFALSE 74609
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74549: LD_ADDR_VAR 0 3
74553: PUSH
74554: LD_VAR 0 3
74558: PPUSH
74559: LD_VAR 0 3
74563: PUSH
74564: LD_INT 1
74566: PLUS
74567: PPUSH
74568: LD_VAR 0 5
74572: PUSH
74573: LD_INT 1
74575: ARRAY
74576: PUSH
74577: LD_VAR 0 4
74581: ARRAY
74582: PUSH
74583: LD_VAR 0 5
74587: PUSH
74588: LD_INT 2
74590: ARRAY
74591: PUSH
74592: LD_VAR 0 4
74596: ARRAY
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PPUSH
74602: CALL_OW 1
74606: ST_TO_ADDR
74607: GO 74546
74609: POP
74610: POP
// exit ;
74611: GO 74651
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74613: LD_ADDR_VAR 0 3
74617: PUSH
74618: LD_VAR 0 5
74622: PUSH
74623: LD_INT 1
74625: ARRAY
74626: PUSH
74627: LD_INT 1
74629: ARRAY
74630: PUSH
74631: LD_VAR 0 5
74635: PUSH
74636: LD_INT 2
74638: ARRAY
74639: PUSH
74640: LD_INT 1
74642: ARRAY
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: EMPTY
74649: LIST
74650: ST_TO_ADDR
// end ;
74651: LD_VAR 0 3
74655: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74656: LD_INT 0
74658: PPUSH
74659: PPUSH
// list := AreaToList ( area , 0 ) ;
74660: LD_ADDR_VAR 0 4
74664: PUSH
74665: LD_VAR 0 1
74669: PPUSH
74670: LD_INT 0
74672: PPUSH
74673: CALL_OW 517
74677: ST_TO_ADDR
// if not list then
74678: LD_VAR 0 4
74682: NOT
74683: IFFALSE 74687
// exit ;
74685: GO 74728
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74687: LD_ADDR_VAR 0 3
74691: PUSH
74692: LD_VAR 0 4
74696: PUSH
74697: LD_INT 1
74699: ARRAY
74700: PUSH
74701: LD_INT 1
74703: ARRAY
74704: PUSH
74705: LD_VAR 0 4
74709: PUSH
74710: LD_INT 2
74712: ARRAY
74713: PUSH
74714: LD_INT 1
74716: ARRAY
74717: PUSH
74718: LD_VAR 0 2
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: LIST
74727: ST_TO_ADDR
// end ;
74728: LD_VAR 0 3
74732: RET
// export function First ( array ) ; begin
74733: LD_INT 0
74735: PPUSH
// if not array then
74736: LD_VAR 0 1
74740: NOT
74741: IFFALSE 74745
// exit ;
74743: GO 74759
// result := array [ 1 ] ;
74745: LD_ADDR_VAR 0 2
74749: PUSH
74750: LD_VAR 0 1
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: ST_TO_ADDR
// end ;
74759: LD_VAR 0 2
74763: RET
// export function Last ( array ) ; begin
74764: LD_INT 0
74766: PPUSH
// if not array then
74767: LD_VAR 0 1
74771: NOT
74772: IFFALSE 74776
// exit ;
74774: GO 74792
// result := array [ array ] ;
74776: LD_ADDR_VAR 0 2
74780: PUSH
74781: LD_VAR 0 1
74785: PUSH
74786: LD_VAR 0 1
74790: ARRAY
74791: ST_TO_ADDR
// end ;
74792: LD_VAR 0 2
74796: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74797: LD_INT 0
74799: PPUSH
74800: PPUSH
// result := [ ] ;
74801: LD_ADDR_VAR 0 5
74805: PUSH
74806: EMPTY
74807: ST_TO_ADDR
// if not array then
74808: LD_VAR 0 1
74812: NOT
74813: IFFALSE 74817
// exit ;
74815: GO 74929
// for i := 1 to array do
74817: LD_ADDR_VAR 0 6
74821: PUSH
74822: DOUBLE
74823: LD_INT 1
74825: DEC
74826: ST_TO_ADDR
74827: LD_VAR 0 1
74831: PUSH
74832: FOR_TO
74833: IFFALSE 74927
// if array [ i ] [ index ] = value then
74835: LD_VAR 0 1
74839: PUSH
74840: LD_VAR 0 6
74844: ARRAY
74845: PUSH
74846: LD_VAR 0 2
74850: ARRAY
74851: PUSH
74852: LD_VAR 0 3
74856: EQUAL
74857: IFFALSE 74925
// begin if indexColumn then
74859: LD_VAR 0 4
74863: IFFALSE 74899
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74865: LD_ADDR_VAR 0 5
74869: PUSH
74870: LD_VAR 0 5
74874: PPUSH
74875: LD_VAR 0 1
74879: PUSH
74880: LD_VAR 0 6
74884: ARRAY
74885: PUSH
74886: LD_VAR 0 4
74890: ARRAY
74891: PPUSH
74892: CALL 69937 0 2
74896: ST_TO_ADDR
74897: GO 74925
// result := Join ( result , array [ i ] ) ;
74899: LD_ADDR_VAR 0 5
74903: PUSH
74904: LD_VAR 0 5
74908: PPUSH
74909: LD_VAR 0 1
74913: PUSH
74914: LD_VAR 0 6
74918: ARRAY
74919: PPUSH
74920: CALL 69937 0 2
74924: ST_TO_ADDR
// end ;
74925: GO 74832
74927: POP
74928: POP
// end ;
74929: LD_VAR 0 5
74933: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74934: LD_INT 0
74936: PPUSH
// if not vehicles or not parkingPoint then
74937: LD_VAR 0 1
74941: NOT
74942: IFTRUE 74951
74944: PUSH
74945: LD_VAR 0 2
74949: NOT
74950: OR
74951: IFFALSE 74955
// exit ;
74953: GO 75053
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74955: LD_ADDR_VAR 0 1
74959: PUSH
74960: LD_VAR 0 1
74964: PPUSH
74965: LD_INT 50
74967: PUSH
74968: EMPTY
74969: LIST
74970: PUSH
74971: LD_INT 3
74973: PUSH
74974: LD_INT 92
74976: PUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_INT 1
74984: ARRAY
74985: PUSH
74986: LD_VAR 0 2
74990: PUSH
74991: LD_INT 2
74993: ARRAY
74994: PUSH
74995: LD_INT 8
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PPUSH
75012: CALL_OW 72
75016: ST_TO_ADDR
// if not vehicles then
75017: LD_VAR 0 1
75021: NOT
75022: IFFALSE 75026
// exit ;
75024: GO 75053
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75026: LD_VAR 0 1
75030: PPUSH
75031: LD_VAR 0 2
75035: PUSH
75036: LD_INT 1
75038: ARRAY
75039: PPUSH
75040: LD_VAR 0 2
75044: PUSH
75045: LD_INT 2
75047: ARRAY
75048: PPUSH
75049: CALL_OW 111
// end ;
75053: LD_VAR 0 3
75057: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75058: LD_INT 0
75060: PPUSH
75061: PPUSH
75062: PPUSH
// if not side or not area then
75063: LD_VAR 0 1
75067: NOT
75068: IFTRUE 75077
75070: PUSH
75071: LD_VAR 0 2
75075: NOT
75076: OR
75077: IFFALSE 75081
// exit ;
75079: GO 75200
// tmp := AreaToList ( area , 0 ) ;
75081: LD_ADDR_VAR 0 5
75085: PUSH
75086: LD_VAR 0 2
75090: PPUSH
75091: LD_INT 0
75093: PPUSH
75094: CALL_OW 517
75098: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75099: LD_ADDR_VAR 0 4
75103: PUSH
75104: DOUBLE
75105: LD_INT 1
75107: DEC
75108: ST_TO_ADDR
75109: LD_VAR 0 5
75113: PUSH
75114: LD_INT 1
75116: ARRAY
75117: PUSH
75118: FOR_TO
75119: IFFALSE 75198
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75121: LD_VAR 0 5
75125: PUSH
75126: LD_INT 1
75128: ARRAY
75129: PUSH
75130: LD_VAR 0 4
75134: ARRAY
75135: PPUSH
75136: LD_VAR 0 5
75140: PUSH
75141: LD_INT 2
75143: ARRAY
75144: PUSH
75145: LD_VAR 0 4
75149: ARRAY
75150: PPUSH
75151: CALL_OW 351
75155: IFFALSE 75196
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75157: LD_VAR 0 5
75161: PUSH
75162: LD_INT 1
75164: ARRAY
75165: PUSH
75166: LD_VAR 0 4
75170: ARRAY
75171: PPUSH
75172: LD_VAR 0 5
75176: PUSH
75177: LD_INT 2
75179: ARRAY
75180: PUSH
75181: LD_VAR 0 4
75185: ARRAY
75186: PPUSH
75187: LD_VAR 0 1
75191: PPUSH
75192: CALL_OW 244
// end ;
75196: GO 75118
75198: POP
75199: POP
// end ;
75200: LD_VAR 0 3
75204: RET
// export function UniqueArray ( array ) ; var i ; begin
75205: LD_INT 0
75207: PPUSH
75208: PPUSH
// result := [ ] ;
75209: LD_ADDR_VAR 0 2
75213: PUSH
75214: EMPTY
75215: ST_TO_ADDR
// if not array then
75216: LD_VAR 0 1
75220: NOT
75221: IFFALSE 75225
// exit ;
75223: GO 75286
// for i := 1 to array do
75225: LD_ADDR_VAR 0 3
75229: PUSH
75230: DOUBLE
75231: LD_INT 1
75233: DEC
75234: ST_TO_ADDR
75235: LD_VAR 0 1
75239: PUSH
75240: FOR_TO
75241: IFFALSE 75284
// if not array [ i ] in result then
75243: LD_VAR 0 1
75247: PUSH
75248: LD_VAR 0 3
75252: ARRAY
75253: PUSH
75254: LD_VAR 0 2
75258: IN
75259: NOT
75260: IFFALSE 75282
// result := Join ( result , i ) ;
75262: LD_ADDR_VAR 0 2
75266: PUSH
75267: LD_VAR 0 2
75271: PPUSH
75272: LD_VAR 0 3
75276: PPUSH
75277: CALL 69937 0 2
75281: ST_TO_ADDR
75282: GO 75240
75284: POP
75285: POP
// end ; end_of_file
75286: LD_VAR 0 2
75290: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75291: LD_VAR 0 1
75295: PUSH
75296: LD_INT 200
75298: DOUBLE
75299: GREATEREQUAL
75300: IFFALSE 75308
75302: LD_INT 299
75304: DOUBLE
75305: LESSEQUAL
75306: IFTRUE 75310
75308: GO 75342
75310: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75311: LD_VAR 0 1
75315: PPUSH
75316: LD_VAR 0 2
75320: PPUSH
75321: LD_VAR 0 3
75325: PPUSH
75326: LD_VAR 0 4
75330: PPUSH
75331: LD_VAR 0 5
75335: PPUSH
75336: CALL 27048 0 5
75340: GO 75419
75342: LD_INT 300
75344: DOUBLE
75345: GREATEREQUAL
75346: IFFALSE 75354
75348: LD_INT 399
75350: DOUBLE
75351: LESSEQUAL
75352: IFTRUE 75356
75354: GO 75418
75356: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75357: LD_VAR 0 1
75361: PPUSH
75362: LD_VAR 0 2
75366: PPUSH
75367: LD_VAR 0 3
75371: PPUSH
75372: LD_VAR 0 4
75376: PPUSH
75377: LD_VAR 0 5
75381: PPUSH
75382: LD_VAR 0 6
75386: PPUSH
75387: LD_VAR 0 7
75391: PPUSH
75392: LD_VAR 0 8
75396: PPUSH
75397: LD_VAR 0 9
75401: PPUSH
75402: LD_VAR 0 10
75406: PPUSH
75407: LD_VAR 0 11
75411: PPUSH
75412: CALL 22932 0 11
75416: GO 75419
75418: POP
// end ;
75419: PPOPN 11
75421: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75422: LD_VAR 0 1
75426: PPUSH
75427: LD_VAR 0 2
75431: PPUSH
75432: LD_VAR 0 3
75436: PPUSH
75437: LD_VAR 0 4
75441: PPUSH
75442: LD_VAR 0 5
75446: PPUSH
75447: CALL 26429 0 5
// end ; end_of_file
75451: PPOPN 5
75453: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_VAR 0 2
75463: PPUSH
75464: LD_VAR 0 3
75468: PPUSH
75469: LD_VAR 0 4
75473: PPUSH
75474: LD_VAR 0 5
75478: PPUSH
75479: LD_VAR 0 6
75483: PPUSH
75484: CALL 10472 0 6
// end ;
75488: PPOPN 6
75490: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75491: LD_INT 0
75493: PPUSH
// begin if not units then
75494: LD_VAR 0 1
75498: NOT
75499: IFFALSE 75503
// exit ;
75501: GO 75503
// end ;
75503: PPOPN 7
75505: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75506: CALL 10359 0 0
// end ;
75510: PPOPN 1
75512: END
