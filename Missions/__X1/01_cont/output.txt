// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2901 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = class_fish ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side := 3 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// uc_nation := 3 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// russianForces := [ ] ;
1387: LD_ADDR_EXP 21
1391: PUSH
1392: EMPTY
1393: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1394: LD_ADDR_EXP 20
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1401: LD_ADDR_VAR 0 5
1405: PUSH
1406: LD_INT 11
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: CALL_OW 517
1416: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: CALL_OW 69
1436: PUSH
1437: FOR_IN
1438: IFFALSE 1482
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1440: LD_VAR 0 2
1444: PPUSH
1445: CALL_OW 274
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 200
1455: PPUSH
1456: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 274
1469: PPUSH
1470: LD_INT 2
1472: PPUSH
1473: LD_INT 10
1475: PPUSH
1476: CALL_OW 277
// end ;
1480: GO 1437
1482: POP
1483: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_INT 30
1491: PUSH
1492: LD_INT 31
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 69
1503: PUSH
1504: FOR_IN
1505: IFFALSE 1579
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_OWVAR 67
1517: PUSH
1518: LD_INT 1
1520: MINUS
1521: PPUSH
1522: CALL_OW 380
// un := CreateHuman ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: CALL_OW 44
1535: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1536: LD_VAR 0 4
1540: PPUSH
1541: LD_VAR 0 2
1545: PPUSH
1546: CALL_OW 254
1550: PUSH
1551: LD_INT 3
1553: MINUS
1554: PUSH
1555: LD_INT 6
1557: MOD
1558: PPUSH
1559: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_VAR 0 2
1572: PPUSH
1573: CALL_OW 52
// end ;
1577: GO 1504
1579: POP
1580: POP
// for i = 1 to 5 do
1581: LD_ADDR_VAR 0 2
1585: PUSH
1586: DOUBLE
1587: LD_INT 1
1589: DEC
1590: ST_TO_ADDR
1591: LD_INT 5
1593: PUSH
1594: FOR_TO
1595: IFFALSE 1677
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PPUSH
1608: CALL_OW 380
// un := CreateHuman ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: CALL_OW 44
1621: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1622: LD_VAR 0 4
1626: PPUSH
1627: LD_INT 9
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
// ComHold ( un ) ;
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1646: LD_ADDR_EXP 21
1650: PUSH
1651: LD_EXP 21
1655: PPUSH
1656: LD_EXP 21
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL_OW 1
1674: ST_TO_ADDR
// end ;
1675: GO 1594
1677: POP
1678: POP
// for i := 1 to Difficulty + 1 do
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: DOUBLE
1685: LD_INT 1
1687: DEC
1688: ST_TO_ADDR
1689: LD_OWVAR 67
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: PUSH
1698: FOR_TO
1699: IFFALSE 1799
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1701: LD_INT 0
1703: PPUSH
1704: LD_INT 1
1706: PPUSH
1707: LD_OWVAR 67
1711: PPUSH
1712: CALL_OW 380
// un := CreateHuman ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 44
1725: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PPUSH
1746: LD_VAR 0 5
1750: PUSH
1751: LD_INT 2
1753: ARRAY
1754: PUSH
1755: LD_VAR 0 2
1759: ARRAY
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1768: LD_ADDR_EXP 20
1772: PUSH
1773: LD_EXP 20
1777: PPUSH
1778: LD_EXP 20
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: PPUSH
1787: LD_VAR 0 4
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// end ;
1797: GO 1698
1799: POP
1800: POP
// vc_chassis := ru_medium_wheeled ;
1801: LD_ADDR_OWVAR 37
1805: PUSH
1806: LD_INT 21
1808: ST_TO_ADDR
// vc_engine := engine_combustion ;
1809: LD_ADDR_OWVAR 39
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// vc_control := control_manual ;
1817: LD_ADDR_OWVAR 38
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 42
1832: ST_TO_ADDR
// russianTank := CreateVehicle ;
1833: LD_ADDR_EXP 22
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1843: LD_EXP 22
1847: PPUSH
1848: LD_INT 121
1850: PPUSH
1851: LD_INT 25
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1861: LD_INT 0
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: LD_OWVAR 67
1871: PPUSH
1872: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1876: CALL_OW 44
1880: PPUSH
1881: LD_EXP 22
1885: PPUSH
1886: CALL_OW 52
// if Difficulty > 1 then
1890: LD_OWVAR 67
1894: PUSH
1895: LD_INT 1
1897: GREATER
1898: IFFALSE 1984
// begin bc_type := b_breastwork ;
1900: LD_ADDR_OWVAR 42
1904: PUSH
1905: LD_INT 31
1907: ST_TO_ADDR
// bc_level := 2 ;
1908: LD_ADDR_OWVAR 43
1912: PUSH
1913: LD_INT 2
1915: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1916: LD_ADDR_VAR 0 3
1920: PUSH
1921: LD_INT 143
1923: PPUSH
1924: LD_INT 88
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 47
1934: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 52
// end ; if Difficulty > 2 then
1984: LD_OWVAR 67
1988: PUSH
1989: LD_INT 2
1991: GREATER
1992: IFFALSE 2048
// begin for i := 1 to 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 2
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2046
// begin PrepareHuman ( false , 1 , 2 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2023: CALL_OW 44
2027: PPUSH
2028: LD_INT 156
2030: PPUSH
2031: LD_INT 108
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 50
// end ;
2044: GO 2007
2046: POP
2047: POP
// end ; end ;
2048: LD_VAR 0 1
2052: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2053: LD_EXP 20
2057: IFFALSE 2363
2059: GO 2061
2061: DISABLE
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in russianForestPatrol do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_EXP 20
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2361
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 53
2091: PPUSH
2092: LD_INT 89
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 30
2102: LESS
2103: IFFALSE 2122
// begin ComMoveXY ( i , 114 , 80 ) ;
2105: LD_VAR 0 1
2109: PPUSH
2110: LD_INT 114
2112: PPUSH
2113: LD_INT 80
2115: PPUSH
2116: CALL_OW 111
// continue ;
2120: GO 2081
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_EXP 20
2131: PUSH
2132: LD_VAR 0 1
2136: DIFF
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 74
2147: ST_TO_ADDR
// if tmp then
2148: LD_VAR 0 6
2152: IFFALSE 2220
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_VAR 0 6
2163: PPUSH
2164: CALL_OW 296
2168: PUSH
2169: LD_INT 14
2171: LESS
2172: PUSH
2173: LD_VAR 0 6
2177: PPUSH
2178: CALL_OW 256
2182: PUSH
2183: LD_INT 999
2185: LESS
2186: AND
2187: IFFALSE 2220
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 6
2208: PPUSH
2209: CALL_OW 251
2213: PPUSH
2214: CALL_OW 114
// break ;
2218: GO 2361
// end ; if not HasTask ( i ) then
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 314
2229: NOT
2230: IFFALSE 2359
// begin d := rand ( 0 , 5 ) ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: CALL_OW 12
2247: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: LD_INT 3
2255: PPUSH
2256: LD_INT 7
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2264: LD_ADDR_VAR 0 4
2268: PUSH
2269: LD_VAR 0 1
2273: PPUSH
2274: CALL_OW 250
2278: PPUSH
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_VAR 0 3
2288: PPUSH
2289: CALL_OW 272
2293: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2294: LD_ADDR_VAR 0 5
2298: PUSH
2299: LD_VAR 0 1
2303: PPUSH
2304: CALL_OW 251
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_VAR 0 3
2318: PPUSH
2319: CALL_OW 273
2323: ST_TO_ADDR
// if ValidHex ( x , y ) then
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_VAR 0 5
2333: PPUSH
2334: CALL_OW 488
2338: IFFALSE 2359
// ComAgressiveMove ( i , x , y ) ;
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_VAR 0 5
2354: PPUSH
2355: CALL_OW 114
// end ; end ;
2359: GO 2081
2361: POP
2362: POP
// end ;
2363: PPOPN 6
2365: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2366: LD_EXP 22
2370: PPUSH
2371: CALL_OW 302
2375: PUSH
2376: LD_EXP 22
2380: PPUSH
2381: CALL_OW 255
2385: PUSH
2386: LD_INT 3
2388: EQUAL
2389: AND
2390: IFFALSE 2657
2392: GO 2394
2394: DISABLE
// begin enable ;
2395: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2396: LD_EXP 22
2400: PPUSH
2401: LD_INT 124
2403: PPUSH
2404: LD_INT 25
2406: PPUSH
2407: CALL_OW 307
2411: IFFALSE 2425
// SetFuel ( russianTank , 100 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 100
2420: PPUSH
2421: CALL_OW 240
// if HasTask ( russianTank ) then
2425: LD_EXP 22
2429: PPUSH
2430: CALL_OW 314
2434: IFFALSE 2438
// exit ;
2436: GO 2657
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2438: LD_EXP 22
2442: PPUSH
2443: LD_INT 121
2445: PPUSH
2446: LD_INT 25
2448: PPUSH
2449: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2453: LD_EXP 22
2457: PPUSH
2458: LD_INT 122
2460: PPUSH
2461: LD_INT 48
2463: PPUSH
2464: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2468: LD_EXP 22
2472: PPUSH
2473: LD_INT 70
2475: PPUSH
2476: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2480: LD_EXP 22
2484: PPUSH
2485: LD_INT 107
2487: PPUSH
2488: LD_INT 57
2490: PPUSH
2491: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2495: LD_EXP 22
2499: PPUSH
2500: LD_INT 70
2502: PPUSH
2503: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2507: LD_EXP 22
2511: PPUSH
2512: LD_INT 100
2514: PPUSH
2515: LD_INT 61
2517: PPUSH
2518: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2522: LD_EXP 22
2526: PPUSH
2527: LD_INT 105
2529: PPUSH
2530: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2534: LD_EXP 22
2538: PPUSH
2539: LD_INT 78
2541: PPUSH
2542: LD_INT 64
2544: PPUSH
2545: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2549: LD_EXP 22
2553: PPUSH
2554: LD_INT 140
2556: PPUSH
2557: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2561: LD_EXP 22
2565: PPUSH
2566: LD_INT 100
2568: PPUSH
2569: LD_INT 61
2571: PPUSH
2572: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2576: LD_EXP 22
2580: PPUSH
2581: LD_INT 105
2583: PPUSH
2584: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2588: LD_EXP 22
2592: PPUSH
2593: LD_INT 107
2595: PPUSH
2596: LD_INT 57
2598: PPUSH
2599: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2603: LD_EXP 22
2607: PPUSH
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2615: LD_EXP 22
2619: PPUSH
2620: LD_INT 122
2622: PPUSH
2623: LD_INT 48
2625: PPUSH
2626: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2630: LD_EXP 22
2634: PPUSH
2635: LD_INT 70
2637: PPUSH
2638: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2642: LD_EXP 22
2646: PPUSH
2647: LD_INT 124
2649: PPUSH
2650: LD_INT 25
2652: PPUSH
2653: CALL_OW 171
// end ; end_of_file
2657: END
// export Johnny ; export function PrepareJohnny ; begin
2658: LD_INT 0
2660: PPUSH
// uc_side := 1 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// uc_nation := 1 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2677: LD_ADDR_EXP 23
2681: PUSH
2682: LD_STRING Harris
2684: PPUSH
2685: CALL_OW 25
2689: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2690: LD_EXP 23
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2702: LD_EXP 23
2706: PPUSH
2707: LD_INT 8
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// ComCrawl ( Johnny ) ;
2717: LD_EXP 23
2721: PPUSH
2722: CALL_OW 137
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PreparePatrolTank ; var veh , un ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
// uc_side := 1 ;
2736: LD_ADDR_OWVAR 20
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// uc_nation := 1 ;
2744: LD_ADDR_OWVAR 21
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL_OW 380
// un := CreateHuman ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2775: LD_ADDR_OWVAR 37
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// vc_engine := engine_combustion ;
2783: LD_ADDR_OWVAR 39
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// vc_control := control_manual ;
2791: LD_ADDR_OWVAR 38
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2799: LD_ADDR_OWVAR 40
2803: PUSH
2804: LD_INT 2
2806: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2807: LD_ADDR_OWVAR 41
2811: PUSH
2812: LD_INT 72
2814: PUSH
2815: LD_INT 54
2817: PUSH
2818: LD_INT 36
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_OWVAR 67
2830: ARRAY
2831: ST_TO_ADDR
// veh := CreateVehicle ;
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: CALL_OW 45
2841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2842: LD_VAR 0 2
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2854: LD_VAR 0 2
2858: PPUSH
2859: LD_INT 31
2861: PPUSH
2862: LD_INT 58
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 52
// result := un ;
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_VAR 0 3
2895: ST_TO_ADDR
// end ; end_of_file
2896: LD_VAR 0 1
2900: RET
// export function Action ; begin
2901: LD_INT 0
2903: PPUSH
// InGameOn ;
2904: CALL_OW 8
// wait ( 0 0$4 ) ;
2908: LD_INT 140
2910: PPUSH
2911: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2915: LD_EXP 14
2919: PPUSH
2920: LD_STRING DH-start-1
2922: PPUSH
2923: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 29
2937: PPUSH
2938: CALL_OW 111
// wait ( 0 0$4 ) ;
2942: LD_INT 140
2944: PPUSH
2945: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2949: LD_EXP 14
2953: PPUSH
2954: LD_INT 71
2956: PPUSH
2957: LD_INT 33
2959: PPUSH
2960: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2964: LD_EXP 14
2968: PPUSH
2969: LD_INT 71
2971: PPUSH
2972: LD_INT 34
2974: PPUSH
2975: CALL_OW 178
// wait ( 0 0$4 ) ;
2979: LD_INT 140
2981: PPUSH
2982: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2986: LD_EXP 14
2990: PPUSH
2991: LD_STRING DH-start-2
2993: PPUSH
2994: CALL_OW 88
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3005: LD_EXP 14
3009: PPUSH
3010: LD_INT 65
3012: PPUSH
3013: LD_INT 26
3015: PPUSH
3016: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3020: LD_EXP 14
3024: PPUSH
3025: LD_STRING DH-start-3
3027: PPUSH
3028: CALL_OW 88
// InGameOff ;
3032: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3036: LD_STRING O1_cont
3038: PPUSH
3039: CALL_OW 337
// SaveForQuickRestart ;
3043: CALL_OW 22
// missionStarted := true ;
3047: LD_ADDR_EXP 1
3051: PUSH
3052: LD_INT 1
3054: ST_TO_ADDR
// PrepareJohnny ;
3055: CALL 2658 0 0
// end ;
3059: LD_VAR 0 1
3063: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3064: LD_EXP 8
3068: NOT
3069: PUSH
3070: LD_EXP 7
3074: NOT
3075: AND
3076: PUSH
3077: LD_INT 2
3079: PPUSH
3080: LD_EXP 23
3084: PPUSH
3085: CALL_OW 292
3089: AND
3090: PUSH
3091: LD_INT 3
3093: PPUSH
3094: LD_EXP 14
3098: PPUSH
3099: CALL_OW 292
3103: NOT
3104: AND
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PPUSH
3121: LD_EXP 14
3125: PPUSH
3126: CALL_OW 74
3130: PUSH
3131: LD_EXP 23
3135: EQUAL
3136: AND
3137: PUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 2
3143: PPUSH
3144: CALL_OW 81
3148: PUSH
3149: LD_INT 0
3151: EQUAL
3152: AND
3153: IFFALSE 4084
3155: GO 3157
3157: DISABLE
// begin InGameOn ;
3158: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3162: LD_EXP 14
3166: PPUSH
3167: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3171: LD_EXP 23
3175: PPUSH
3176: LD_STRING DJ-ambush-1
3178: PPUSH
3179: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3183: LD_INT 10
3185: PPUSH
3186: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3190: LD_EXP 14
3194: PPUSH
3195: LD_EXP 23
3199: PPUSH
3200: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_STRING DH-ambush-1
3211: PPUSH
3212: CALL_OW 88
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// ComWalk ( Johnny ) ;
3223: LD_EXP 23
3227: PPUSH
3228: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3232: LD_EXP 23
3236: PPUSH
3237: LD_EXP 14
3241: PPUSH
3242: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3246: LD_INT 35
3248: PPUSH
3249: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3253: LD_EXP 23
3257: PPUSH
3258: LD_EXP 14
3262: PPUSH
3263: CALL_OW 296
3267: PUSH
3268: LD_INT 4
3270: LESS
3271: IFFALSE 3246
// ComTurnUnit ( Johnny , Heike ) ;
3273: LD_EXP 23
3277: PPUSH
3278: LD_EXP 14
3282: PPUSH
3283: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3287: LD_EXP 23
3291: PPUSH
3292: LD_STRING DJ-ambush-2
3294: PPUSH
3295: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3299: LD_EXP 14
3303: PPUSH
3304: LD_STRING DH-ambush-2
3306: PPUSH
3307: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3311: LD_EXP 23
3315: PPUSH
3316: LD_STRING DJ-ambush-3
3318: PPUSH
3319: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3323: LD_EXP 14
3327: PPUSH
3328: LD_STRING DH-ambush-3
3330: PPUSH
3331: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3335: LD_EXP 23
3339: PPUSH
3340: LD_STRING DJ-ambush-4
3342: PPUSH
3343: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3347: LD_EXP 14
3351: PPUSH
3352: LD_INT 39
3354: PPUSH
3355: LD_INT 22
3357: PPUSH
3358: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3362: LD_EXP 14
3366: PPUSH
3367: LD_STRING DH-ambush-4
3369: PPUSH
3370: CALL_OW 88
// PrepareRussianPatrol ;
3374: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3378: LD_INT 39
3380: PPUSH
3381: LD_INT 22
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: LD_INT 12
3389: NEG
3390: PPUSH
3391: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3395: LD_INT 39
3397: PPUSH
3398: LD_INT 22
3400: PPUSH
3401: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3405: LD_EXP 19
3409: PPUSH
3410: LD_INT 39
3412: PPUSH
3413: LD_INT 23
3415: PPUSH
3416: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3420: LD_EXP 14
3424: PUSH
3425: LD_EXP 23
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PPUSH
3434: LD_INT 39
3436: PPUSH
3437: LD_INT 7
3439: PPUSH
3440: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3444: LD_EXP 14
3448: PUSH
3449: LD_EXP 23
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: LD_EXP 19
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3471: LD_EXP 19
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_STRING DR-ambush-5
3482: PPUSH
3483: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3487: LD_EXP 19
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: LD_STRING DR1-ambush-5
3498: PPUSH
3499: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3503: LD_INT 35
3505: PPUSH
3506: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3510: LD_EXP 14
3514: PPUSH
3515: LD_INT 39
3517: PPUSH
3518: LD_INT 7
3520: PPUSH
3521: CALL_OW 297
3525: PUSH
3526: LD_INT 6
3528: LESS
3529: IFFALSE 3503
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3531: LD_EXP 14
3535: PPUSH
3536: LD_EXP 19
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3549: LD_EXP 23
3553: PPUSH
3554: LD_EXP 14
3558: PPUSH
3559: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3563: LD_EXP 23
3567: PPUSH
3568: LD_STRING DJ-ambush-6
3570: PPUSH
3571: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3575: LD_EXP 14
3579: PPUSH
3580: LD_STRING DH-ambush-6
3582: PPUSH
3583: CALL_OW 88
// InGameOff ;
3587: CALL_OW 9
// meetJohnny := true ;
3591: LD_ADDR_EXP 3
3595: PUSH
3596: LD_INT 1
3598: ST_TO_ADDR
// ComFree ( Johnny ) ;
3599: LD_EXP 23
3603: PPUSH
3604: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3608: LD_STRING O2_ambush_cont
3610: PPUSH
3611: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3615: LD_EXP 19
3619: PUSH
3620: LD_EXP 19
3624: ARRAY
3625: PPUSH
3626: LD_INT 29
3628: PPUSH
3629: LD_INT 15
3631: PPUSH
3632: CALL_OW 111
// wait ( 0 0$2 ) ;
3636: LD_INT 70
3638: PPUSH
3639: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3643: LD_INT 3
3645: PPUSH
3646: LD_EXP 14
3650: PPUSH
3651: CALL_OW 292
3655: NOT
3656: PUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_EXP 23
3664: PPUSH
3665: CALL_OW 292
3669: NOT
3670: AND
3671: IFFALSE 3692
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3673: LD_EXP 19
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_INT 58
3684: PPUSH
3685: LD_INT 32
3687: PPUSH
3688: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3692: LD_INT 1750
3694: PUSH
3695: LD_INT 1400
3697: PUSH
3698: LD_INT 1225
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: PPUSH
3712: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3716: LD_EXP 19
3720: PPUSH
3721: LD_INT 43
3723: PPUSH
3724: LD_INT 13
3726: PPUSH
3727: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3731: LD_INT 35
3733: PPUSH
3734: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3738: LD_EXP 19
3742: NOT
3743: PUSH
3744: LD_EXP 23
3748: PPUSH
3749: CALL_OW 302
3753: NOT
3754: OR
3755: IFFALSE 3731
// RemoveSeeing ( 39 , 22 , 2 ) ;
3757: LD_INT 39
3759: PPUSH
3760: LD_INT 22
3762: PPUSH
3763: LD_INT 2
3765: PPUSH
3766: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 81
3780: PUSH
3781: LD_INT 2
3783: EQUAL
3784: IFFALSE 3788
// exit ;
3786: GO 4084
// if not IsOk ( Johnny ) then
3788: LD_EXP 23
3792: PPUSH
3793: CALL_OW 302
3797: NOT
3798: IFFALSE 3809
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3800: LD_STRING O2_ambush_out_cont
3802: PPUSH
3803: CALL_OW 337
// exit ;
3807: GO 4084
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3809: LD_EXP 14
3813: PPUSH
3814: LD_EXP 23
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 10
3826: GREATER
3827: IFFALSE 3870
// begin ComMoveUnit ( Johnny , Heike ) ;
3829: LD_EXP 23
3833: PPUSH
3834: LD_EXP 14
3838: PPUSH
3839: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3850: LD_EXP 23
3854: PPUSH
3855: LD_EXP 14
3859: PPUSH
3860: CALL_OW 296
3864: PUSH
3865: LD_INT 6
3867: LESS
3868: IFFALSE 3843
// end ; CenterNowOnUnits ( Heike ) ;
3870: LD_EXP 14
3874: PPUSH
3875: CALL_OW 87
// InGameOn ;
3879: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3883: LD_EXP 14
3887: PPUSH
3888: LD_EXP 23
3892: PPUSH
3893: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3897: LD_EXP 23
3901: PPUSH
3902: LD_EXP 14
3906: PPUSH
3907: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3911: LD_EXP 23
3915: PPUSH
3916: LD_STRING DJ-thanks-1
3918: PPUSH
3919: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3923: LD_EXP 14
3927: PPUSH
3928: LD_STRING DH-thanks-1
3930: PPUSH
3931: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3935: LD_EXP 23
3939: PPUSH
3940: LD_STRING DJ-thanks-2
3942: PPUSH
3943: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3947: LD_EXP 23
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 3
3957: PPUSH
3958: CALL_OW 111
// wait ( 0 0$1 ) ;
3962: LD_INT 35
3964: PPUSH
3965: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3969: LD_EXP 14
3973: PPUSH
3974: LD_STRING DH-thanks-2
3976: PPUSH
3977: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3981: LD_INT 35
3983: PPUSH
3984: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3988: LD_INT 2
3990: PPUSH
3991: LD_EXP 23
3995: PPUSH
3996: CALL_OW 292
4000: NOT
4001: IFFALSE 3981
// Say ( Heike , DH-thanks-2a ) ;
4003: LD_EXP 14
4007: PPUSH
4008: LD_STRING DH-thanks-2a
4010: PPUSH
4011: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4015: LD_EXP 23
4019: PPUSH
4020: CALL_OW 64
// InGameOff ;
4024: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4028: LD_STRING O2_ambush_out_cont
4030: PPUSH
4031: CALL_OW 337
// johnnySaved := true ;
4035: LD_ADDR_EXP 4
4039: PUSH
4040: LD_INT 1
4042: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4043: LD_EXP 14
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 600
4053: PPUSH
4054: CALL_OW 492
// if IsOk ( Olaf ) then
4058: LD_EXP 15
4062: PPUSH
4063: CALL_OW 302
4067: IFFALSE 4084
// ComMoveXY ( Olaf , 44 , 25 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_INT 44
4076: PPUSH
4077: LD_INT 25
4079: PPUSH
4080: CALL_OW 111
// end ;
4084: END
// every 0 0$1 trigger russianPatrol do var i ;
4085: LD_EXP 19
4089: IFFALSE 4157
4091: GO 4093
4093: DISABLE
4094: LD_INT 0
4096: PPUSH
// begin enable ;
4097: ENABLE
// for i in russianPatrol do
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_EXP 19
4107: PUSH
4108: FOR_IN
4109: IFFALSE 4155
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4111: LD_VAR 0 1
4115: PPUSH
4116: CALL_OW 256
4120: PUSH
4121: LD_INT 1000
4123: LESS
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL_OW 314
4134: NOT
4135: AND
4136: IFFALSE 4153
// ComAgressiveMove ( i , 42 , 12 ) ;
4138: LD_VAR 0 1
4142: PPUSH
4143: LD_INT 42
4145: PPUSH
4146: LD_INT 12
4148: PPUSH
4149: CALL_OW 114
4153: GO 4108
4155: POP
4156: POP
// end ;
4157: PPOPN 1
4159: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4160: LD_INT 1
4162: PPUSH
4163: LD_INT 2
4165: PPUSH
4166: CALL_OW 81
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: PUSH
4175: LD_EXP 23
4179: PPUSH
4180: CALL_OW 302
4184: AND
4185: IFFALSE 4202
4187: GO 4189
4189: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4190: LD_EXP 23
4194: PPUSH
4195: LD_STRING DJ-fire-1
4197: PPUSH
4198: CALL_OW 88
4202: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4203: LD_EXP 7
4207: NOT
4208: PUSH
4209: LD_EXP 21
4213: PPUSH
4214: LD_INT 101
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 72
4228: AND
4229: IFFALSE 4349
4231: GO 4233
4233: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4234: LD_EXP 14
4238: PPUSH
4239: CALL_OW 87
// DialogueOn ;
4243: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4247: LD_EXP 14
4251: PPUSH
4252: LD_STRING DH-see-enemy-patrol-1
4254: PPUSH
4255: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4259: LD_EXP 21
4263: PPUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 72
4278: PUSH
4279: LD_INT 1
4281: ARRAY
4282: PPUSH
4283: LD_STRING DR-see-enemy-patrol-1
4285: PPUSH
4286: CALL_OW 88
// DialogueOff ;
4290: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4294: LD_EXP 21
4298: PPUSH
4299: LD_INT 66
4301: PPUSH
4302: LD_INT 22
4304: PPUSH
4305: CALL_OW 114
// wait ( 0 0$10 ) ;
4309: LD_INT 350
4311: PPUSH
4312: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4316: LD_EXP 21
4320: PPUSH
4321: LD_INT 175
4323: PPUSH
4324: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4328: LD_EXP 21
4332: PPUSH
4333: LD_INT 9
4335: PPUSH
4336: CALL_OW 173
// AddComFree ( russianForces ) ;
4340: LD_EXP 21
4344: PPUSH
4345: CALL_OW 199
// end ;
4349: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4350: LD_EXP 21
4354: PPUSH
4355: LD_INT 3
4357: PUSH
4358: LD_INT 24
4360: PUSH
4361: LD_INT 960
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: IFFALSE 4620
4378: GO 4380
4380: DISABLE
4381: LD_INT 0
4383: PPUSH
4384: PPUSH
4385: PPUSH
4386: PPUSH
// begin enable ;
4387: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PPUSH
4403: CALL_OW 69
4407: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4408: LD_ADDR_VAR 0 3
4412: PUSH
4413: LD_EXP 21
4417: PPUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 3
4423: PUSH
4424: LD_INT 24
4426: PUSH
4427: LD_INT 960
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 24
4436: PUSH
4437: LD_INT 500
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PPUSH
4453: CALL_OW 72
4457: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4458: LD_ADDR_VAR 0 4
4462: PUSH
4463: LD_EXP 21
4467: PPUSH
4468: LD_INT 3
4470: PUSH
4471: LD_INT 24
4473: PUSH
4474: LD_INT 500
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 72
4489: ST_TO_ADDR
// if not tmp then
4490: LD_VAR 0 2
4494: NOT
4495: IFFALSE 4499
// exit ;
4497: GO 4620
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_VAR 0 3
4508: PUSH
4509: LD_INT 1
4511: ARRAY
4512: PPUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL_OW 74
4522: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_VAR 0 3
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 296
4541: PUSH
4542: LD_INT 10
4544: LESS
4545: IFFALSE 4561
// ComAttackUnit ( tmp2 , tmp ) ;
4547: LD_VAR 0 3
4551: PPUSH
4552: LD_VAR 0 2
4556: PPUSH
4557: CALL_OW 115
// if tmp3 then
4561: LD_VAR 0 4
4565: IFFALSE 4620
// for i in tmp do
4567: LD_ADDR_VAR 0 1
4571: PUSH
4572: LD_VAR 0 2
4576: PUSH
4577: FOR_IN
4578: IFFALSE 4618
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 119
4587: PPUSH
4588: LD_INT 21
4590: PPUSH
4591: CALL_OW 297
4595: PUSH
4596: LD_INT 10
4598: GREATER
4599: IFFALSE 4616
// ComMoveXY ( i , 119 , 21 ) ;
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_INT 119
4608: PPUSH
4609: LD_INT 21
4611: PPUSH
4612: CALL_OW 111
4616: GO 4577
4618: POP
4619: POP
// end ;
4620: PPOPN 4
4622: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4623: LD_EXP 1
4627: PUSH
4628: LD_EXP 8
4632: NOT
4633: AND
4634: PUSH
4635: LD_EXP 7
4639: NOT
4640: AND
4641: PUSH
4642: LD_EXP 14
4646: PPUSH
4647: LD_INT 25
4649: PUSH
4650: LD_INT 14
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: PPUSH
4662: LD_EXP 14
4666: PPUSH
4667: CALL_OW 74
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 6
4679: LESS
4680: AND
4681: IFFALSE 4698
4683: GO 4685
4685: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4686: LD_EXP 14
4690: PPUSH
4691: LD_STRING DH-tiger-1
4693: PPUSH
4694: CALL_OW 88
4698: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4699: LD_EXP 1
4703: PUSH
4704: LD_EXP 8
4708: NOT
4709: AND
4710: PUSH
4711: LD_EXP 7
4715: NOT
4716: AND
4717: PUSH
4718: LD_EXP 14
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 12
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 69
4737: PPUSH
4738: LD_EXP 14
4742: PPUSH
4743: CALL_OW 74
4747: PPUSH
4748: CALL_OW 296
4752: PUSH
4753: LD_INT 6
4755: LESS
4756: AND
4757: IFFALSE 4774
4759: GO 4761
4761: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4762: LD_EXP 14
4766: PPUSH
4767: LD_STRING DH-ape-1
4769: PPUSH
4770: CALL_OW 88
4774: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4775: LD_EXP 1
4779: PUSH
4780: LD_EXP 8
4784: NOT
4785: AND
4786: PUSH
4787: LD_EXP 7
4791: NOT
4792: AND
4793: PUSH
4794: LD_EXP 14
4798: PPUSH
4799: LD_INT 25
4801: PUSH
4802: LD_INT 18
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 69
4813: PPUSH
4814: LD_EXP 14
4818: PPUSH
4819: CALL_OW 74
4823: PPUSH
4824: CALL_OW 296
4828: PUSH
4829: LD_INT 6
4831: LESS
4832: AND
4833: IFFALSE 4850
4835: GO 4837
4837: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4838: LD_EXP 14
4842: PPUSH
4843: LD_STRING DH-bird-1
4845: PPUSH
4846: CALL_OW 88
4850: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 101
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: IFFALSE 4892
4881: GO 4883
4883: DISABLE
// russianSpotted := true ;
4884: LD_ADDR_EXP 9
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
4892: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4893: LD_EXP 14
4897: PPUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 3
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PPUSH
4927: LD_EXP 14
4931: PPUSH
4932: CALL_OW 74
4936: PPUSH
4937: CALL_OW 296
4941: PUSH
4942: LD_INT 8
4944: LESS
4945: IFFALSE 4962
4947: GO 4949
4949: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4950: LD_EXP 14
4954: PPUSH
4955: LD_STRING DH-enemy-base
4957: PPUSH
4958: CALL_OW 88
4962: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
4963: LD_EXP 23
4967: PPUSH
4968: CALL_OW 305
4972: NOT
4973: PUSH
4974: LD_EXP 6
4978: NOT
4979: AND
4980: PUSH
4981: LD_EXP 5
4985: AND
4986: PUSH
4987: LD_EXP 12
4991: NOT
4992: AND
4993: PUSH
4994: LD_EXP 11
4998: NOT
4999: AND
5000: IFFALSE 5151
5002: GO 5004
5004: DISABLE
5005: LD_INT 0
5007: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5008: LD_INT 35
5010: PPUSH
5011: CALL_OW 67
// for i in dogTag do
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_EXP 5
5024: PUSH
5025: FOR_IN
5026: IFFALSE 5075
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5028: LD_EXP 14
5032: PPUSH
5033: LD_VAR 0 1
5037: PUSH
5038: LD_INT 1
5040: ARRAY
5041: PPUSH
5042: LD_VAR 0 1
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PPUSH
5051: CALL_OW 297
5055: PUSH
5056: LD_INT 3
5058: LESS
5059: IFFALSE 5073
// begin dogTagFound := i ;
5061: LD_ADDR_EXP 6
5065: PUSH
5066: LD_VAR 0 1
5070: ST_TO_ADDR
// break ;
5071: GO 5075
// end ;
5073: GO 5025
5075: POP
5076: POP
// until dogTagFound ;
5077: LD_EXP 6
5081: IFFALSE 5008
// CenterNowOnUnits ( Heike ) ;
5083: LD_EXP 14
5087: PPUSH
5088: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5092: LD_EXP 14
5096: PPUSH
5097: LD_EXP 6
5101: PUSH
5102: LD_INT 1
5104: ARRAY
5105: PPUSH
5106: LD_EXP 6
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PPUSH
5115: CALL_OW 111
// if mercenariesQuestReady then
5119: LD_EXP 10
5123: IFFALSE 5139
// Say ( Heike , DH-dogtag-found-quest ) else
5125: LD_EXP 14
5129: PPUSH
5130: LD_STRING DH-dogtag-found-quest
5132: PPUSH
5133: CALL_OW 88
5137: GO 5151
// Say ( Heike , DH-dogtag-found ) ;
5139: LD_EXP 14
5143: PPUSH
5144: LD_STRING DH-dogtag-found
5146: PPUSH
5147: CALL_OW 88
// end ;
5151: PPOPN 1
5153: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5154: LD_EXP 8
5158: NOT
5159: PUSH
5160: LD_EXP 7
5164: NOT
5165: AND
5166: PUSH
5167: LD_INT 5
5169: PPUSH
5170: LD_EXP 14
5174: PPUSH
5175: CALL_OW 292
5179: AND
5180: PUSH
5181: LD_EXP 14
5185: PPUSH
5186: LD_EXP 15
5190: PPUSH
5191: CALL_OW 296
5195: PUSH
5196: LD_INT 8
5198: LESS
5199: AND
5200: IFFALSE 5561
5202: GO 5204
5204: DISABLE
// begin olafSpotted := true ;
5205: LD_ADDR_EXP 8
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if HasTask ( Olaf ) then
5213: LD_EXP 15
5217: PPUSH
5218: CALL_OW 314
5222: IFFALSE 5233
// ComStop ( Olaf ) ;
5224: LD_EXP 15
5228: PPUSH
5229: CALL_OW 141
// InGameOn ;
5233: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5237: LD_EXP 15
5241: PPUSH
5242: LD_EXP 14
5246: PPUSH
5247: CALL_OW 296
5251: PUSH
5252: LD_INT 8
5254: GREATER
5255: IFFALSE 5271
// ComMoveUnit ( Olaf , Heike ) ;
5257: LD_EXP 15
5261: PPUSH
5262: LD_EXP 14
5266: PPUSH
5267: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5271: LD_INT 35
5273: PPUSH
5274: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5278: LD_EXP 15
5282: PPUSH
5283: LD_EXP 14
5287: PPUSH
5288: CALL_OW 296
5292: PUSH
5293: LD_INT 8
5295: LESSEQUAL
5296: IFFALSE 5271
// ComTurnUnit ( Heike , Olaf ) ;
5298: LD_EXP 14
5302: PPUSH
5303: LD_EXP 15
5307: PPUSH
5308: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5312: LD_EXP 15
5316: PPUSH
5317: LD_EXP 14
5321: PPUSH
5322: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5326: LD_EXP 15
5330: PPUSH
5331: LD_STRING DO-olaf-1
5333: PPUSH
5334: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5338: LD_EXP 14
5342: PPUSH
5343: LD_STRING DH-olaf-1
5345: PPUSH
5346: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5350: LD_EXP 15
5354: PPUSH
5355: LD_STRING DO-olaf-2
5357: PPUSH
5358: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5362: LD_EXP 14
5366: PPUSH
5367: LD_STRING DH-olaf-2
5369: PPUSH
5370: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5374: LD_EXP 15
5378: PPUSH
5379: LD_STRING DO-olaf-3
5381: PPUSH
5382: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5386: LD_EXP 15
5390: PPUSH
5391: LD_STRING DO-olaf-4
5393: PPUSH
5394: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5398: LD_EXP 14
5402: PPUSH
5403: LD_STRING DH-olaf-4
5405: PPUSH
5406: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5410: LD_EXP 15
5414: PPUSH
5415: LD_STRING DO-olaf-5
5417: PPUSH
5418: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5422: LD_EXP 14
5426: PPUSH
5427: LD_STRING DH-olaf-5
5429: PPUSH
5430: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5434: LD_EXP 15
5438: PPUSH
5439: LD_STRING DO-olaf-6
5441: PPUSH
5442: CALL_OW 88
// if russianSpotted or johnnySaved then
5446: LD_EXP 9
5450: PUSH
5451: LD_EXP 4
5455: OR
5456: IFFALSE 5484
// begin Say ( Heike , DH-olaf-6a ) ;
5458: LD_EXP 14
5462: PPUSH
5463: LD_STRING DH-olaf-6a
5465: PPUSH
5466: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5470: LD_EXP 15
5474: PPUSH
5475: LD_STRING DO-olaf-7a
5477: PPUSH
5478: CALL_OW 88
// end else
5482: GO 5508
// begin Say ( Heike , DH-olaf-6b ) ;
5484: LD_EXP 14
5488: PPUSH
5489: LD_STRING DH-olaf-6b
5491: PPUSH
5492: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5496: LD_EXP 15
5500: PPUSH
5501: LD_STRING DO-olaf-7b
5503: PPUSH
5504: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5508: LD_EXP 15
5512: PPUSH
5513: LD_STRING DO-olaf-8
5515: PPUSH
5516: CALL_OW 88
// InGameOff ;
5520: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5524: LD_STRING O3_camp_cont
5526: PPUSH
5527: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5531: LD_EXP 15
5535: PPUSH
5536: LD_INT 52
5538: PPUSH
5539: LD_INT 90
5541: PPUSH
5542: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5546: LD_EXP 15
5550: PPUSH
5551: LD_INT 53
5553: PPUSH
5554: LD_INT 89
5556: PPUSH
5557: CALL_OW 178
// end ;
5561: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5562: LD_EXP 8
5566: NOT
5567: PUSH
5568: LD_EXP 14
5572: PPUSH
5573: LD_EXP 16
5577: PPUSH
5578: CALL_OW 296
5582: PUSH
5583: LD_INT 36
5585: LESS
5586: AND
5587: IFFALSE 5607
5589: GO 5591
5591: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5592: LD_EXP 15
5596: PPUSH
5597: LD_INT 39
5599: PPUSH
5600: LD_INT 71
5602: PPUSH
5603: CALL_OW 111
5607: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5608: LD_EXP 7
5612: NOT
5613: PUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_EXP 17
5621: PPUSH
5622: CALL_OW 292
5626: PUSH
5627: LD_INT 2
5629: PPUSH
5630: LD_EXP 16
5634: PPUSH
5635: CALL_OW 292
5639: OR
5640: AND
5641: IFFALSE 6966
5643: GO 5645
5645: DISABLE
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin if IsLive ( Johnny ) then
5651: LD_EXP 23
5655: PPUSH
5656: CALL_OW 300
5660: IFFALSE 5671
// KillUnit ( Johnny ) ;
5662: LD_EXP 23
5666: PPUSH
5667: CALL_OW 66
// mercenariesSpotted := true ;
5671: LD_ADDR_EXP 7
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5679: LD_STRING O4_camp_cont
5681: PPUSH
5682: CALL_OW 337
// InGameOn ;
5686: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5690: LD_INT 53
5692: PPUSH
5693: LD_INT 89
5695: PPUSH
5696: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5700: LD_INT 53
5702: PPUSH
5703: LD_INT 89
5705: PPUSH
5706: LD_INT 2
5708: PPUSH
5709: LD_INT 8
5711: NEG
5712: PPUSH
5713: CALL_OW 330
// if olafSpotted then
5717: LD_EXP 8
5721: IFFALSE 5839
// begin AddComTurnUnit ( Olaf , Heike ) ;
5723: LD_EXP 15
5727: PPUSH
5728: LD_EXP 14
5732: PPUSH
5733: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 51
5744: PPUSH
5745: LD_INT 86
5747: PPUSH
5748: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5752: LD_EXP 14
5756: PPUSH
5757: LD_EXP 15
5761: PPUSH
5762: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5766: LD_EXP 15
5770: PPUSH
5771: LD_STRING DO-camp-1
5773: PPUSH
5774: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5778: LD_EXP 16
5782: PUSH
5783: LD_EXP 17
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: LD_EXP 14
5796: PPUSH
5797: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5801: LD_EXP 16
5805: PPUSH
5806: LD_STRING DG-camp-1
5808: PPUSH
5809: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5813: LD_EXP 14
5817: PPUSH
5818: LD_STRING DH-camp-1
5820: PPUSH
5821: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5825: LD_EXP 15
5829: PPUSH
5830: LD_STRING DO-camp-2
5832: PPUSH
5833: CALL_OW 88
// end else
5837: GO 6234
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5839: LD_EXP 14
5843: PPUSH
5844: LD_INT 51
5846: PPUSH
5847: LD_INT 86
5849: PPUSH
5850: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5854: LD_EXP 14
5858: PPUSH
5859: LD_EXP 16
5863: PPUSH
5864: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5868: LD_EXP 16
5872: PUSH
5873: LD_EXP 17
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PPUSH
5882: LD_EXP 14
5886: PPUSH
5887: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5891: LD_EXP 16
5895: PPUSH
5896: LD_STRING DG-camp-1a
5898: PPUSH
5899: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5903: LD_EXP 14
5907: PPUSH
5908: LD_STRING DH-camp-1a
5910: PPUSH
5911: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5915: LD_INT 1
5917: PPUSH
5918: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5922: LD_EXP 17
5926: PPUSH
5927: LD_EXP 15
5931: PPUSH
5932: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5936: LD_EXP 17
5940: PPUSH
5941: LD_STRING DM-camp-1a
5943: PPUSH
5944: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5948: LD_EXP 15
5952: PPUSH
5953: LD_INT 52
5955: PPUSH
5956: LD_INT 90
5958: PPUSH
5959: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5963: LD_EXP 17
5967: PPUSH
5968: LD_EXP 14
5972: PPUSH
5973: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5977: LD_EXP 16
5981: PPUSH
5982: LD_STRING DG-camp-2a
5984: PPUSH
5985: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5989: LD_EXP 14
5993: PPUSH
5994: LD_STRING DH-camp-2a
5996: PPUSH
5997: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6001: LD_EXP 17
6005: PPUSH
6006: LD_STRING DM-camp-2a
6008: PPUSH
6009: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6013: LD_INT 35
6015: PPUSH
6016: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6020: LD_EXP 15
6024: PPUSH
6025: LD_EXP 14
6029: PPUSH
6030: CALL_OW 296
6034: PUSH
6035: LD_INT 10
6037: LESS
6038: IFFALSE 6013
// AddComTurnUnit ( Olaf , Heike ) ;
6040: LD_EXP 15
6044: PPUSH
6045: LD_EXP 14
6049: PPUSH
6050: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6054: LD_EXP 17
6058: PPUSH
6059: LD_EXP 14
6063: PPUSH
6064: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6068: LD_EXP 15
6072: PPUSH
6073: LD_STRING DO-camp-2a
6075: PPUSH
6076: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6080: LD_EXP 14
6084: PPUSH
6085: LD_EXP 15
6089: PPUSH
6090: CALL_OW 119
// if russianSpotted then
6094: LD_EXP 9
6098: IFFALSE 6138
// begin Say ( Heike , DH-camp-2aa ) ;
6100: LD_EXP 14
6104: PPUSH
6105: LD_STRING DH-camp-2aa
6107: PPUSH
6108: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6112: LD_EXP 16
6116: PPUSH
6117: LD_STRING DG-camp-2aa
6119: PPUSH
6120: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6124: LD_EXP 17
6128: PPUSH
6129: LD_STRING DM-camp-2aa
6131: PPUSH
6132: CALL_OW 88
// end else
6136: GO 6162
// begin Say ( Heike , DH-camp-2ab ) ;
6138: LD_EXP 14
6142: PPUSH
6143: LD_STRING DH-camp-2ab
6145: PPUSH
6146: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6150: LD_EXP 17
6154: PPUSH
6155: LD_STRING DM-camp-2ab
6157: PPUSH
6158: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6162: LD_EXP 14
6166: PPUSH
6167: LD_STRING DH-camp-3a
6169: PPUSH
6170: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6174: LD_EXP 15
6178: PPUSH
6179: LD_STRING DO-camp-3a
6181: PPUSH
6182: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6186: LD_EXP 16
6190: PPUSH
6191: LD_STRING DG-camp-3a
6193: PPUSH
6194: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_STRING DH-camp-4aa
6205: PPUSH
6206: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6210: LD_EXP 17
6214: PPUSH
6215: LD_STRING DM-camp-4aa
6217: PPUSH
6218: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6222: LD_EXP 15
6226: PPUSH
6227: LD_STRING DO-camp-4a
6229: PPUSH
6230: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6234: LD_EXP 15
6238: PPUSH
6239: LD_STRING DO-camp-3
6241: PPUSH
6242: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6246: LD_EXP 15
6250: PPUSH
6251: LD_STRING DO-camp-4
6253: PPUSH
6254: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6258: LD_EXP 16
6262: PPUSH
6263: LD_EXP 15
6267: PPUSH
6268: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6272: LD_EXP 16
6276: PPUSH
6277: LD_STRING DG-camp-4
6279: PPUSH
6280: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6284: LD_EXP 14
6288: PPUSH
6289: LD_EXP 16
6293: PPUSH
6294: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6298: LD_EXP 14
6302: PPUSH
6303: LD_STRING DH-camp-4
6305: PPUSH
6306: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6310: LD_EXP 17
6314: PUSH
6315: LD_EXP 15
6319: PUSH
6320: LD_EXP 16
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: LD_EXP 14
6334: PPUSH
6335: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6339: LD_EXP 16
6343: PPUSH
6344: LD_STRING DG-camp-5
6346: PPUSH
6347: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6351: LD_EXP 16
6355: PPUSH
6356: LD_STRING DG-camp-6
6358: PPUSH
6359: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6363: LD_EXP 14
6367: PPUSH
6368: LD_STRING DH-camp-6
6370: PPUSH
6371: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6375: LD_EXP 16
6379: PPUSH
6380: LD_STRING DG-camp-7
6382: PPUSH
6383: CALL_OW 88
// if DogTagFound then
6387: LD_EXP 6
6391: IFFALSE 6431
// begin Say ( Heike , DH-quest-1a ) ;
6393: LD_EXP 14
6397: PPUSH
6398: LD_STRING DH-quest-1a
6400: PPUSH
6401: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6405: LD_EXP 16
6409: PPUSH
6410: LD_STRING DG-quest-1a
6412: PPUSH
6413: CALL_OW 88
// mercenariesQuestDone := true ;
6417: LD_ADDR_EXP 11
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// InGameOff ;
6425: CALL_OW 9
// end else
6429: GO 6597
// begin Say ( Heike , DH-camp-7 ) ;
6431: LD_EXP 14
6435: PPUSH
6436: LD_STRING DH-camp-7
6438: PPUSH
6439: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6443: LD_EXP 14
6447: PPUSH
6448: CALL_OW 256
6452: PUSH
6453: LD_INT 1000
6455: LESS
6456: IFFALSE 6548
// begin Say ( Olaf , DO-heal-1 ) ;
6458: LD_EXP 15
6462: PPUSH
6463: LD_STRING DO-heal-1
6465: PPUSH
6466: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6470: LD_EXP 14
6474: PPUSH
6475: LD_INT 51
6477: PPUSH
6478: LD_INT 88
6480: PPUSH
6481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6485: LD_INT 35
6487: PPUSH
6488: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6492: LD_EXP 14
6496: PPUSH
6497: LD_EXP 15
6501: PPUSH
6502: CALL_OW 296
6506: PUSH
6507: LD_INT 4
6509: LESS
6510: PUSH
6511: LD_EXP 14
6515: PPUSH
6516: LD_INT 51
6518: PPUSH
6519: LD_INT 88
6521: PPUSH
6522: CALL_OW 307
6526: OR
6527: IFFALSE 6485
// SetLives ( Heike , 1000 ) ;
6529: LD_EXP 14
6533: PPUSH
6534: LD_INT 1000
6536: PPUSH
6537: CALL_OW 234
// wait ( 0 0$2 ) ;
6541: LD_INT 70
6543: PPUSH
6544: CALL_OW 67
// end ; InGameOff ;
6548: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6552: LD_EXP 15
6556: PUSH
6557: LD_EXP 16
6561: PUSH
6562: LD_EXP 17
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: PPUSH
6572: LD_INT 53
6574: PPUSH
6575: LD_INT 89
6577: PPUSH
6578: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6582: LD_STRING O5_proof_cont
6584: PPUSH
6585: CALL_OW 337
// mercenariesQuestReady := true ;
6589: LD_ADDR_EXP 10
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6597: LD_EXP 10
6601: NOT
6602: IFFALSE 6606
// exit ;
6604: GO 6966
// wait ( 0 0$35 ) ;
6606: LD_INT 1225
6608: PPUSH
6609: CALL_OW 67
// driver := PreparePatrolTank ;
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: CALL 2731 0 0
6622: ST_TO_ADDR
// if not driver then
6623: LD_VAR 0 2
6627: NOT
6628: IFFALSE 6632
// exit ;
6630: GO 6966
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6632: LD_INT 2
6634: PPUSH
6635: LD_INT 1
6637: PPUSH
6638: LD_INT 2
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_VAR 0 2
6657: PPUSH
6658: CALL_OW 310
6662: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 500
6670: PPUSH
6671: CALL_OW 234
// SetLives ( driver , 450 ) ;
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_INT 450
6682: PPUSH
6683: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_INT 59
6694: PPUSH
6695: LD_INT 60
6697: PPUSH
6698: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6709: LD_VAR 0 3
6713: PPUSH
6714: LD_INT 59
6716: PPUSH
6717: LD_INT 60
6719: PPUSH
6720: CALL_OW 307
6724: IFFALSE 6702
// if not See ( 1 , Heike ) then
6726: LD_INT 1
6728: PPUSH
6729: LD_EXP 14
6733: PPUSH
6734: CALL_OW 292
6738: NOT
6739: IFFALSE 6863
// begin if Difficulty < 3 then
6741: LD_OWVAR 67
6745: PUSH
6746: LD_INT 3
6748: LESS
6749: IFFALSE 6767
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6751: LD_INT 59
6753: PPUSH
6754: LD_INT 60
6756: PPUSH
6757: LD_INT 2
6759: PPUSH
6760: LD_INT 6
6762: PPUSH
6763: CALL_OW 330
// ComExitVehicle ( driver ) ;
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 121
// wait ( 0 0$1 ) ;
6776: LD_INT 35
6778: PPUSH
6779: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6783: LD_VAR 0 2
6787: PPUSH
6788: LD_INT 58
6790: PPUSH
6791: LD_INT 54
6793: PPUSH
6794: CALL_OW 171
// wait ( 0 0$1 ) ;
6798: LD_INT 35
6800: PPUSH
6801: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6805: LD_VAR 0 2
6809: PPUSH
6810: LD_INT 57
6812: PPUSH
6813: LD_INT 53
6815: PPUSH
6816: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6820: LD_VAR 0 2
6824: PPUSH
6825: LD_INT 350
6827: PPUSH
6828: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6832: LD_VAR 0 2
6836: PPUSH
6837: LD_VAR 0 3
6841: PPUSH
6842: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6846: LD_VAR 0 2
6850: PPUSH
6851: LD_INT 107
6853: PPUSH
6854: LD_INT 118
6856: PPUSH
6857: CALL_OW 171
// end else
6861: GO 6878
// begin ComMoveXY ( driver , 107 , 118 ) ;
6863: LD_VAR 0 2
6867: PPUSH
6868: LD_INT 107
6870: PPUSH
6871: LD_INT 118
6873: PPUSH
6874: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6878: LD_INT 35
6880: PPUSH
6881: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6885: LD_VAR 0 3
6889: PPUSH
6890: LD_INT 107
6892: PPUSH
6893: LD_INT 118
6895: PPUSH
6896: CALL_OW 307
6900: PUSH
6901: LD_VAR 0 2
6905: PPUSH
6906: CALL_OW 301
6910: OR
6911: IFFALSE 6878
// if IsDead ( driver [ 1 ] ) then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 1
6920: ARRAY
6921: PPUSH
6922: CALL_OW 301
6926: IFFALSE 6930
// exit ;
6928: GO 6966
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6930: LD_ADDR_VAR 0 1
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 69
6949: PUSH
6950: FOR_IN
6951: IFFALSE 6964
// RemoveUnit ( i ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL_OW 64
6962: GO 6950
6964: POP
6965: POP
// end ;
6966: PPOPN 3
6968: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6969: LD_INT 10
6971: PPUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 2
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 70
7000: IFFALSE 7074
7002: GO 7004
7004: DISABLE
// begin InGameOn ;
7005: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7009: LD_EXP 15
7013: PUSH
7014: LD_EXP 17
7018: PUSH
7019: LD_EXP 16
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: LD_EXP 14
7033: PPUSH
7034: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7038: LD_EXP 17
7042: PPUSH
7043: LD_STRING DM-quest-1
7045: PPUSH
7046: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7050: LD_EXP 16
7054: PPUSH
7055: LD_STRING DG-quest-1
7057: PPUSH
7058: CALL_OW 88
// InGameOff ;
7062: CALL_OW 9
// mercenariesQuestDone := true ;
7066: LD_ADDR_EXP 11
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// end ;
7074: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7075: LD_EXP 14
7079: PPUSH
7080: LD_INT 10
7082: PPUSH
7083: CALL_OW 308
7087: PUSH
7088: LD_EXP 6
7092: AND
7093: PUSH
7094: LD_EXP 10
7098: AND
7099: PUSH
7100: LD_INT 10
7102: PPUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 2
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 70
7131: NOT
7132: AND
7133: IFFALSE 7305
7135: GO 7137
7137: DISABLE
7138: LD_INT 0
7140: PPUSH
// begin InGameOn ;
7141: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7145: LD_EXP 15
7149: PUSH
7150: LD_EXP 17
7154: PUSH
7155: LD_EXP 16
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: LD_EXP 14
7169: PPUSH
7170: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7174: LD_EXP 14
7178: PPUSH
7179: LD_INT 54
7181: PPUSH
7182: LD_INT 86
7184: PPUSH
7185: CALL_OW 111
// p := p + 1 ;
7189: LD_ADDR_VAR 0 1
7193: PUSH
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: PLUS
7202: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7203: LD_INT 35
7205: PPUSH
7206: CALL_OW 67
// p := p + 1 ;
7210: LD_ADDR_VAR 0 1
7214: PUSH
7215: LD_VAR 0 1
7219: PUSH
7220: LD_INT 1
7222: PLUS
7223: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7224: LD_EXP 14
7228: PPUSH
7229: LD_EXP 16
7233: PPUSH
7234: CALL_OW 296
7238: PUSH
7239: LD_INT 4
7241: LESS
7242: PUSH
7243: LD_VAR 0 1
7247: PUSH
7248: LD_INT 5
7250: GREATER
7251: OR
7252: IFFALSE 7203
// Say ( Mike , DM-quest-1 ) ;
7254: LD_EXP 17
7258: PPUSH
7259: LD_STRING DM-quest-1
7261: PPUSH
7262: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7266: LD_EXP 16
7270: PPUSH
7271: LD_STRING DG-quest-1
7273: PPUSH
7274: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7278: LD_EXP 14
7282: PPUSH
7283: LD_INT 55
7285: PPUSH
7286: LD_INT 87
7288: PPUSH
7289: CALL_OW 111
// InGameOff ;
7293: CALL_OW 9
// mercenariesQuestDone := true ;
7297: LD_ADDR_EXP 11
7301: PUSH
7302: LD_INT 1
7304: ST_TO_ADDR
// end ;
7305: PPOPN 1
7307: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7308: LD_EXP 14
7312: PUSH
7313: LD_INT 55
7315: PUSH
7316: EMPTY
7317: LIST
7318: PPUSH
7319: CALL_OW 69
7323: IN
7324: IFFALSE 7364
7326: GO 7328
7328: DISABLE
// begin if Difficulty < 3 then
7329: LD_OWVAR 67
7333: PUSH
7334: LD_INT 3
7336: LESS
7337: IFFALSE 7352
// RemoveSeeing ( 59 , 60 , 2 ) ;
7339: LD_INT 59
7341: PPUSH
7342: LD_INT 60
7344: PPUSH
7345: LD_INT 2
7347: PPUSH
7348: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7352: LD_EXP 14
7356: PPUSH
7357: LD_STRING DH-driver
7359: PPUSH
7360: CALL_OW 88
// end ;
7364: END
// every 0 0$1 trigger mercenariesQuestDone do
7365: LD_EXP 11
7369: IFFALSE 7857
7371: GO 7373
7373: DISABLE
// begin if mercenariesQuestReady then
7374: LD_EXP 10
7378: IFFALSE 7387
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7380: LD_STRING O5_proof_cont_out
7382: PPUSH
7383: CALL_OW 337
// InGameOn ;
7387: CALL_OW 8
// if IsInUnit ( Heike ) then
7391: LD_EXP 14
7395: PPUSH
7396: CALL_OW 310
7400: IFFALSE 7411
// ComExitVehicle ( Heike ) ;
7402: LD_EXP 14
7406: PPUSH
7407: CALL_OW 121
// wait ( 3 ) ;
7411: LD_INT 3
7413: PPUSH
7414: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7418: LD_EXP 14
7422: PPUSH
7423: LD_EXP 16
7427: PPUSH
7428: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7432: LD_EXP 15
7436: PUSH
7437: LD_EXP 17
7441: PUSH
7442: LD_EXP 16
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: PPUSH
7452: LD_EXP 14
7456: PPUSH
7457: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7461: LD_EXP 14
7465: PPUSH
7466: LD_STRING DH-quest-done-1
7468: PPUSH
7469: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7473: LD_EXP 17
7477: PPUSH
7478: LD_STRING DM-quest-done-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7485: LD_EXP 16
7489: PPUSH
7490: LD_STRING DG-quest-done-1
7492: PPUSH
7493: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7497: LD_EXP 14
7501: PPUSH
7502: LD_EXP 15
7506: PPUSH
7507: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7511: LD_EXP 14
7515: PPUSH
7516: LD_STRING DH-quest-done-2
7518: PPUSH
7519: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7523: LD_EXP 15
7527: PPUSH
7528: LD_STRING DO-quest-done-2
7530: PPUSH
7531: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7535: LD_EXP 15
7539: PPUSH
7540: LD_STRING DO-quest-done-3
7542: PPUSH
7543: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7547: LD_EXP 16
7551: PPUSH
7552: LD_INT 51
7554: PPUSH
7555: LD_INT 90
7557: PPUSH
7558: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7562: LD_EXP 16
7566: PPUSH
7567: LD_INT 50
7569: PPUSH
7570: LD_INT 89
7572: PPUSH
7573: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7577: LD_EXP 14
7581: PPUSH
7582: LD_EXP 16
7586: PPUSH
7587: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7591: LD_EXP 16
7595: PPUSH
7596: LD_STRING DG-quest-done-4
7598: PPUSH
7599: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7603: LD_EXP 16
7607: PPUSH
7608: LD_EXP 14
7612: PPUSH
7613: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7617: LD_EXP 14
7621: PPUSH
7622: CALL_OW 256
7626: PUSH
7627: LD_INT 1000
7629: LESS
7630: IFFALSE 7722
// begin Say ( Olaf , DO-heal-1 ) ;
7632: LD_EXP 15
7636: PPUSH
7637: LD_STRING DO-heal-1
7639: PPUSH
7640: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7644: LD_EXP 14
7648: PPUSH
7649: LD_INT 51
7651: PPUSH
7652: LD_INT 88
7654: PPUSH
7655: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7659: LD_INT 35
7661: PPUSH
7662: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7666: LD_EXP 14
7670: PPUSH
7671: LD_EXP 15
7675: PPUSH
7676: CALL_OW 296
7680: PUSH
7681: LD_INT 4
7683: LESS
7684: PUSH
7685: LD_EXP 14
7689: PPUSH
7690: LD_INT 51
7692: PPUSH
7693: LD_INT 88
7695: PPUSH
7696: CALL_OW 307
7700: OR
7701: IFFALSE 7659
// SetLives ( Heike , 1000 ) ;
7703: LD_EXP 14
7707: PPUSH
7708: LD_INT 1000
7710: PPUSH
7711: CALL_OW 234
// wait ( 0 0$2 ) ;
7715: LD_INT 70
7717: PPUSH
7718: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7722: LD_EXP 14
7726: PPUSH
7727: LD_STRING DH-quest-done-4
7729: PPUSH
7730: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7734: LD_EXP 15
7738: PPUSH
7739: LD_STRING DO-quest-done-4
7741: PPUSH
7742: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7746: LD_EXP 14
7750: PPUSH
7751: LD_EXP 15
7755: PPUSH
7756: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7760: LD_EXP 14
7764: PPUSH
7765: LD_STRING DH-quest-done-5
7767: PPUSH
7768: CALL_OW 88
// InGameOff ;
7772: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7776: LD_STRING O6_end_cont
7778: PPUSH
7779: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7783: LD_EXP 16
7787: PPUSH
7788: LD_INT 2
7790: PPUSH
7791: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7795: LD_EXP 17
7799: PPUSH
7800: LD_INT 2
7802: PPUSH
7803: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7807: LD_INT 42
7809: PPUSH
7810: LD_INT 2
7812: PPUSH
7813: LD_INT 2
7815: PPUSH
7816: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7820: LD_EXP 15
7824: PPUSH
7825: LD_INT 53
7827: PPUSH
7828: LD_INT 89
7830: PPUSH
7831: CALL_OW 118
// lastObjectiveActive := true ;
7835: LD_ADDR_EXP 12
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7843: LD_INT 1
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 424
// PreparePrison ;
7853: CALL 1081 0 0
// end ;
7857: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7858: LD_INT 22
7860: PUSH
7861: LD_INT 2
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 91
7870: PUSH
7871: LD_INT 2
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: IFFALSE 8044
7892: GO 7894
7894: DISABLE
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
// begin wait ( [ 0 0$10 , 0 0$09 , 0 0$08 ] [ Difficulty ] ) ;
7899: LD_INT 350
7901: PUSH
7902: LD_INT 315
7904: PUSH
7905: LD_INT 280
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: PUSH
7913: LD_OWVAR 67
7917: ARRAY
7918: PPUSH
7919: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 54
7950: PUSH
7951: EMPTY
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: ST_TO_ADDR
// if not tmp then
7964: LD_VAR 0 2
7968: NOT
7969: IFFALSE 7973
// exit ;
7971: GO 8044
// for i in tmp do
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_VAR 0 2
7982: PUSH
7983: FOR_IN
7984: IFFALSE 8012
// begin ComExitBuilding ( i ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 121
8002: PPUSH
8003: LD_INT 22
8005: PPUSH
8006: CALL_OW 174
// end ;
8010: GO 7983
8012: POP
8013: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8014: LD_EXP 21
8018: PPUSH
8019: LD_INT 121
8021: PPUSH
8022: LD_INT 22
8024: PPUSH
8025: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8029: LD_EXP 22
8033: PPUSH
8034: LD_INT 121
8036: PPUSH
8037: LD_INT 22
8039: PPUSH
8040: CALL_OW 114
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8047: LD_INT 22
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 91
8059: PUSH
8060: LD_INT 8
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: IFFALSE 8233
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
// begin wait ( [ 0 0$09 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8088: LD_INT 315
8090: PUSH
8091: LD_INT 245
8093: PUSH
8094: LD_INT 210
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_OWVAR 67
8106: ARRAY
8107: PPUSH
8108: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_INT 22
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 54
8139: PUSH
8140: EMPTY
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: ST_TO_ADDR
// if not tmp then
8153: LD_VAR 0 2
8157: NOT
8158: IFFALSE 8162
// exit ;
8160: GO 8233
// for i in tmp do
8162: LD_ADDR_VAR 0 1
8166: PUSH
8167: LD_VAR 0 2
8171: PUSH
8172: FOR_IN
8173: IFFALSE 8201
// begin ComExitBuilding ( i ) ;
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8184: LD_VAR 0 1
8188: PPUSH
8189: LD_INT 142
8191: PPUSH
8192: LD_INT 71
8194: PPUSH
8195: CALL_OW 174
// end ;
8199: GO 8172
8201: POP
8202: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8203: LD_EXP 21
8207: PPUSH
8208: LD_INT 142
8210: PPUSH
8211: LD_INT 71
8213: PPUSH
8214: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8218: LD_EXP 22
8222: PPUSH
8223: LD_INT 142
8225: PPUSH
8226: LD_INT 71
8228: PPUSH
8229: CALL_OW 114
// end ;
8233: PPOPN 2
8235: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8236: LD_INT 22
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 21
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 58
8258: PUSH
8259: EMPTY
8260: LIST
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 24
8267: PUSH
8268: LD_INT 1000
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 91
8281: PUSH
8282: LD_EXP 15
8286: PUSH
8287: LD_INT 8
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: PUSH
8307: LD_EXP 15
8311: PPUSH
8312: CALL_OW 302
8316: AND
8317: IFFALSE 8431
8319: GO 8321
8321: DISABLE
// begin enable ;
8322: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8323: LD_EXP 15
8327: PPUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 58
8350: PUSH
8351: EMPTY
8352: LIST
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: LD_INT 24
8359: PUSH
8360: LD_INT 1000
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 91
8373: PUSH
8374: LD_EXP 15
8378: PUSH
8379: LD_INT 8
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: PPUSH
8394: CALL_OW 69
8398: PUSH
8399: LD_INT 1
8401: ARRAY
8402: PPUSH
8403: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8407: LD_EXP 15
8411: PPUSH
8412: LD_INT 52
8414: PPUSH
8415: LD_INT 90
8417: PPUSH
8418: CALL_OW 171
// AddComHold ( Olaf ) ;
8422: LD_EXP 15
8426: PPUSH
8427: CALL_OW 200
// end ;
8431: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8432: LD_EXP 12
8436: PUSH
8437: LD_INT 2
8439: PPUSH
8440: CALL_OW 302
8444: NOT
8445: AND
8446: PUSH
8447: LD_OWVAR 67
8451: PUSH
8452: LD_INT 1
8454: EQUAL
8455: AND
8456: PUSH
8457: LD_EXP 13
8461: NOT
8462: AND
8463: IFFALSE 8480
8465: GO 8467
8467: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8468: LD_EXP 14
8472: PPUSH
8473: LD_STRING DH-prison-missing
8475: PPUSH
8476: CALL_OW 88
// end ;
8480: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8481: LD_EXP 12
8485: PUSH
8486: LD_INT 8
8488: PPUSH
8489: CALL_OW 302
8493: NOT
8494: AND
8495: PUSH
8496: LD_OWVAR 67
8500: PUSH
8501: LD_INT 1
8503: GREATER
8504: AND
8505: PUSH
8506: LD_EXP 13
8510: NOT
8511: AND
8512: IFFALSE 8529
8514: GO 8516
8516: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8517: LD_EXP 14
8521: PPUSH
8522: LD_STRING DH-prison-missing
8524: PPUSH
8525: CALL_OW 88
// end ;
8529: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8530: LD_EXP 12
8534: PUSH
8535: LD_INT 3
8537: PPUSH
8538: CALL_OW 302
8542: NOT
8543: AND
8544: PUSH
8545: LD_EXP 13
8549: NOT
8550: AND
8551: IFFALSE 8568
8553: GO 8555
8555: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8556: LD_EXP 14
8560: PPUSH
8561: LD_STRING DH-prison-missing-a
8563: PPUSH
8564: CALL_OW 88
// end ;
8568: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8569: LD_EXP 12
8573: PUSH
8574: LD_INT 10
8576: PPUSH
8577: CALL_OW 302
8581: NOT
8582: AND
8583: PUSH
8584: LD_EXP 13
8588: NOT
8589: AND
8590: IFFALSE 8607
8592: GO 8594
8594: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8595: LD_EXP 14
8599: PPUSH
8600: LD_STRING DH-prison-missing-a
8602: PPUSH
8603: CALL_OW 88
// end ;
8607: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8608: LD_EXP 13
8612: NOT
8613: PUSH
8614: LD_EXP 12
8618: AND
8619: PUSH
8620: LD_INT 2
8622: PPUSH
8623: LD_EXP 18
8627: PPUSH
8628: CALL_OW 292
8632: AND
8633: IFFALSE 8720
8635: GO 8637
8637: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8638: LD_EXP 18
8642: PPUSH
8643: LD_EXP 14
8647: PPUSH
8648: CALL_OW 119
// DialogueOn ;
8652: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8656: LD_EXP 18
8660: PPUSH
8661: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8665: LD_EXP 18
8669: PPUSH
8670: LD_STRING DK-prison-found
8672: PPUSH
8673: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8677: LD_EXP 14
8681: PPUSH
8682: LD_STRING DH-prison-found
8684: PPUSH
8685: CALL_OW 88
// DialogueOff ;
8689: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8693: LD_EXP 18
8697: PPUSH
8698: LD_INT 2
8700: PPUSH
8701: CALL_OW 235
// prisonFound := true ;
8705: LD_ADDR_EXP 13
8709: PUSH
8710: LD_INT 1
8712: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8713: LD_STRING O6_prison_out
8715: PPUSH
8716: CALL_OW 337
// end ;
8720: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8721: LD_EXP 12
8725: PUSH
8726: LD_EXP 14
8730: PPUSH
8731: CALL_OW 302
8735: AND
8736: PUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 21
8742: PUSH
8743: LD_INT 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 50
8762: PUSH
8763: EMPTY
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 71
8775: PUSH
8776: LD_INT 0
8778: EQUAL
8779: AND
8780: IFFALSE 9096
8782: GO 8784
8784: DISABLE
8785: LD_INT 0
8787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8788: LD_ADDR_VAR 0 1
8792: PUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 50
8815: PUSH
8816: EMPTY
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PPUSH
8824: CALL_OW 69
8828: ST_TO_ADDR
// if prisonFound then
8829: LD_EXP 13
8833: IFFALSE 8847
// AddMedal ( med1 , 1 ) else
8835: LD_STRING med1
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: CALL_OW 101
8845: GO 8858
// AddMedal ( med1 , - 1 ) ;
8847: LD_STRING med1
8849: PPUSH
8850: LD_INT 1
8852: NEG
8853: PPUSH
8854: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
8858: LD_VAR 0 1
8862: PUSH
8863: LD_INT 3
8865: LESS
8866: PUSH
8867: LD_EXP 13
8871: NOT
8872: AND
8873: PUSH
8874: LD_VAR 0 1
8878: PUSH
8879: LD_INT 4
8881: LESS
8882: PUSH
8883: LD_EXP 13
8887: AND
8888: OR
8889: IFFALSE 8904
// AddMedal ( med2 , - 1 ) else
8891: LD_STRING med2
8893: PPUSH
8894: LD_INT 1
8896: NEG
8897: PPUSH
8898: CALL_OW 101
8902: GO 8914
// AddMedal ( med2 , 1 ) ;
8904: LD_STRING med2
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
8914: LD_EXP 13
8918: PUSH
8919: LD_EXP 4
8923: AND
8924: PUSH
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 4
8932: GREATEREQUAL
8933: AND
8934: IFFALSE 8948
// AddMedal ( med3 , 1 ) else
8936: LD_STRING med3
8938: PPUSH
8939: LD_INT 1
8941: PPUSH
8942: CALL_OW 101
8946: GO 8959
// AddMedal ( med3 , - 1 ) ;
8948: LD_STRING med3
8950: PPUSH
8951: LD_INT 1
8953: NEG
8954: PPUSH
8955: CALL_OW 101
// GiveMedals ( MAIN ) ;
8959: LD_STRING MAIN
8961: PPUSH
8962: CALL_OW 102
// RewardPeople ( tmp ) ;
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
8975: LD_EXP 14
8979: PPUSH
8980: LD_STRING 01_Heike
8982: PPUSH
8983: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
8987: LD_EXP 16
8991: PPUSH
8992: CALL_OW 302
8996: PUSH
8997: LD_EXP 16
9001: PUSH
9002: LD_VAR 0 1
9006: IN
9007: AND
9008: IFFALSE 9022
// SaveCharacters ( Givi , 01_Givi ) ;
9010: LD_EXP 16
9014: PPUSH
9015: LD_STRING 01_Givi
9017: PPUSH
9018: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9022: LD_EXP 17
9026: PPUSH
9027: CALL_OW 302
9031: PUSH
9032: LD_EXP 17
9036: PUSH
9037: LD_VAR 0 1
9041: IN
9042: AND
9043: IFFALSE 9057
// SaveCharacters ( Mike , 01_Mike ) ;
9045: LD_EXP 17
9049: PPUSH
9050: LD_STRING 01_Mike
9052: PPUSH
9053: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9057: LD_EXP 18
9061: PPUSH
9062: CALL_OW 302
9066: PUSH
9067: LD_EXP 18
9071: PUSH
9072: LD_VAR 0 1
9076: IN
9077: AND
9078: IFFALSE 9092
// SaveCharacters ( Kamil , 01_Kamil ) ;
9080: LD_EXP 18
9084: PPUSH
9085: LD_STRING 01_Kamil
9087: PPUSH
9088: CALL_OW 38
// YouWin ;
9092: CALL_OW 103
// end ; end_of_file
9096: PPOPN 1
9098: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9099: LD_VAR 0 1
9103: PUSH
9104: LD_EXP 14
9108: EQUAL
9109: IFFALSE 9118
// YouLost ( Heike ) ;
9111: LD_STRING Heike
9113: PPUSH
9114: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9118: LD_VAR 0 1
9122: PUSH
9123: LD_INT 22
9125: PUSH
9126: LD_INT 3
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 25
9135: PUSH
9136: LD_INT 1
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 69
9151: IN
9152: IFFALSE 9258
// begin if un in russianPatrol then
9154: LD_VAR 0 1
9158: PUSH
9159: LD_EXP 19
9163: IN
9164: IFFALSE 9182
// russianPatrol := russianPatrol diff un ;
9166: LD_ADDR_EXP 19
9170: PUSH
9171: LD_EXP 19
9175: PUSH
9176: LD_VAR 0 1
9180: DIFF
9181: ST_TO_ADDR
// if un in russianForestPatrol then
9182: LD_VAR 0 1
9186: PUSH
9187: LD_EXP 20
9191: IN
9192: IFFALSE 9210
// russianForestPatrol := russianForestPatrol diff un ;
9194: LD_ADDR_EXP 20
9198: PUSH
9199: LD_EXP 20
9203: PUSH
9204: LD_VAR 0 1
9208: DIFF
9209: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9210: LD_ADDR_EXP 5
9214: PUSH
9215: LD_EXP 5
9219: PPUSH
9220: LD_EXP 5
9224: PUSH
9225: LD_INT 1
9227: PLUS
9228: PPUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 250
9238: PUSH
9239: LD_VAR 0 1
9243: PPUSH
9244: CALL_OW 251
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL_OW 1
9257: ST_TO_ADDR
// end ; end ;
9258: PPOPN 1
9260: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9261: LD_VAR 0 1
9265: PUSH
9266: LD_EXP 14
9270: EQUAL
9271: IFFALSE 9280
// YouLost ( Heike ) ;
9273: LD_STRING Heike
9275: PPUSH
9276: CALL_OW 104
// end ;
9280: PPOPN 1
9282: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9283: LD_VAR 0 1
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 5
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: IN
9298: PUSH
9299: LD_VAR 0 2
9303: PUSH
9304: LD_INT 5
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: IN
9314: AND
9315: IFFALSE 9324
// YouLost ( FriendlyFire ) ;
9317: LD_STRING FriendlyFire
9319: PPUSH
9320: CALL_OW 104
// end ; end_of_file
9324: PPOPN 2
9326: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9327: GO 9329
9329: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9330: LD_STRING initStreamRollete();
9332: PPUSH
9333: CALL_OW 559
// InitStreamMode ;
9337: CALL 9346 0 0
// DefineStreamItems ( ) ;
9341: CALL 9786 0 0
// end ;
9345: END
// function InitStreamMode ; begin
9346: LD_INT 0
9348: PPUSH
// streamModeActive := false ;
9349: LD_ADDR_EXP 24
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// normalCounter := 36 ;
9357: LD_ADDR_EXP 25
9361: PUSH
9362: LD_INT 36
9364: ST_TO_ADDR
// hardcoreCounter := 16 ;
9365: LD_ADDR_EXP 26
9369: PUSH
9370: LD_INT 16
9372: ST_TO_ADDR
// sRocket := false ;
9373: LD_ADDR_EXP 29
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// sSpeed := false ;
9381: LD_ADDR_EXP 28
9385: PUSH
9386: LD_INT 0
9388: ST_TO_ADDR
// sEngine := false ;
9389: LD_ADDR_EXP 30
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// sSpec := false ;
9397: LD_ADDR_EXP 27
9401: PUSH
9402: LD_INT 0
9404: ST_TO_ADDR
// sLevel := false ;
9405: LD_ADDR_EXP 31
9409: PUSH
9410: LD_INT 0
9412: ST_TO_ADDR
// sArmoury := false ;
9413: LD_ADDR_EXP 32
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// sRadar := false ;
9421: LD_ADDR_EXP 33
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// sBunker := false ;
9429: LD_ADDR_EXP 34
9433: PUSH
9434: LD_INT 0
9436: ST_TO_ADDR
// sHack := false ;
9437: LD_ADDR_EXP 35
9441: PUSH
9442: LD_INT 0
9444: ST_TO_ADDR
// sFire := false ;
9445: LD_ADDR_EXP 36
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// sRefresh := false ;
9453: LD_ADDR_EXP 37
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// sExp := false ;
9461: LD_ADDR_EXP 38
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// sDepot := false ;
9469: LD_ADDR_EXP 39
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// sFlag := false ;
9477: LD_ADDR_EXP 40
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// sKamikadze := false ;
9485: LD_ADDR_EXP 48
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// sTroll := false ;
9493: LD_ADDR_EXP 49
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// sSlow := false ;
9501: LD_ADDR_EXP 50
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// sLack := false ;
9509: LD_ADDR_EXP 51
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// sTank := false ;
9517: LD_ADDR_EXP 53
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// sRemote := false ;
9525: LD_ADDR_EXP 54
9529: PUSH
9530: LD_INT 0
9532: ST_TO_ADDR
// sPowell := false ;
9533: LD_ADDR_EXP 55
9537: PUSH
9538: LD_INT 0
9540: ST_TO_ADDR
// sTeleport := false ;
9541: LD_ADDR_EXP 58
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// sOilTower := false ;
9549: LD_ADDR_EXP 60
9553: PUSH
9554: LD_INT 0
9556: ST_TO_ADDR
// sShovel := false ;
9557: LD_ADDR_EXP 61
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// sSheik := false ;
9565: LD_ADDR_EXP 62
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// sEarthquake := false ;
9573: LD_ADDR_EXP 64
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// sAI := false ;
9581: LD_ADDR_EXP 65
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// sCargo := false ;
9589: LD_ADDR_EXP 68
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// sDLaser := false ;
9597: LD_ADDR_EXP 69
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// sExchange := false ;
9605: LD_ADDR_EXP 70
9609: PUSH
9610: LD_INT 0
9612: ST_TO_ADDR
// sFac := false ;
9613: LD_ADDR_EXP 71
9617: PUSH
9618: LD_INT 0
9620: ST_TO_ADDR
// sPower := false ;
9621: LD_ADDR_EXP 72
9625: PUSH
9626: LD_INT 0
9628: ST_TO_ADDR
// sRandom := false ;
9629: LD_ADDR_EXP 73
9633: PUSH
9634: LD_INT 0
9636: ST_TO_ADDR
// sShield := false ;
9637: LD_ADDR_EXP 74
9641: PUSH
9642: LD_INT 0
9644: ST_TO_ADDR
// sTime := false ;
9645: LD_ADDR_EXP 75
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// sTools := false ;
9653: LD_ADDR_EXP 76
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// sSold := false ;
9661: LD_ADDR_EXP 41
9665: PUSH
9666: LD_INT 0
9668: ST_TO_ADDR
// sDiff := false ;
9669: LD_ADDR_EXP 42
9673: PUSH
9674: LD_INT 0
9676: ST_TO_ADDR
// sFog := false ;
9677: LD_ADDR_EXP 45
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// sReset := false ;
9685: LD_ADDR_EXP 46
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// sSun := false ;
9693: LD_ADDR_EXP 47
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// sTiger := false ;
9701: LD_ADDR_EXP 43
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// sBomb := false ;
9709: LD_ADDR_EXP 44
9713: PUSH
9714: LD_INT 0
9716: ST_TO_ADDR
// sWound := false ;
9717: LD_ADDR_EXP 52
9721: PUSH
9722: LD_INT 0
9724: ST_TO_ADDR
// sBetray := false ;
9725: LD_ADDR_EXP 56
9729: PUSH
9730: LD_INT 0
9732: ST_TO_ADDR
// sContamin := false ;
9733: LD_ADDR_EXP 57
9737: PUSH
9738: LD_INT 0
9740: ST_TO_ADDR
// sOil := false ;
9741: LD_ADDR_EXP 59
9745: PUSH
9746: LD_INT 0
9748: ST_TO_ADDR
// sStu := false ;
9749: LD_ADDR_EXP 63
9753: PUSH
9754: LD_INT 0
9756: ST_TO_ADDR
// sBazooka := false ;
9757: LD_ADDR_EXP 66
9761: PUSH
9762: LD_INT 0
9764: ST_TO_ADDR
// sMortar := false ;
9765: LD_ADDR_EXP 67
9769: PUSH
9770: LD_INT 0
9772: ST_TO_ADDR
// sRanger := false ;
9773: LD_ADDR_EXP 77
9777: PUSH
9778: LD_INT 0
9780: ST_TO_ADDR
// end ;
9781: LD_VAR 0 1
9785: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9786: LD_INT 0
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
9792: PPUSH
// result := [ ] ;
9793: LD_ADDR_VAR 0 1
9797: PUSH
9798: EMPTY
9799: ST_TO_ADDR
// if campaign_id = 1 then
9800: LD_OWVAR 69
9804: PUSH
9805: LD_INT 1
9807: EQUAL
9808: IFFALSE 12746
// begin case mission_number of 1 :
9810: LD_OWVAR 70
9814: PUSH
9815: LD_INT 1
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9887
9823: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9824: LD_ADDR_VAR 0 1
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 4
9834: PUSH
9835: LD_INT 11
9837: PUSH
9838: LD_INT 12
9840: PUSH
9841: LD_INT 15
9843: PUSH
9844: LD_INT 16
9846: PUSH
9847: LD_INT 22
9849: PUSH
9850: LD_INT 23
9852: PUSH
9853: LD_INT 26
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 101
9869: PUSH
9870: LD_INT 102
9872: PUSH
9873: LD_INT 106
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: ST_TO_ADDR
9885: GO 12744
9887: LD_INT 2
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9895
9893: GO 9967
9895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 4
9906: PUSH
9907: LD_INT 11
9909: PUSH
9910: LD_INT 12
9912: PUSH
9913: LD_INT 15
9915: PUSH
9916: LD_INT 16
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 23
9924: PUSH
9925: LD_INT 26
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 101
9941: PUSH
9942: LD_INT 102
9944: PUSH
9945: LD_INT 105
9947: PUSH
9948: LD_INT 106
9950: PUSH
9951: LD_INT 108
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: ST_TO_ADDR
9965: GO 12744
9967: LD_INT 3
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10051
9975: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 4
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: LD_INT 11
9992: PUSH
9993: LD_INT 12
9995: PUSH
9996: LD_INT 15
9998: PUSH
9999: LD_INT 16
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 26
10007: PUSH
10008: LD_INT 36
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 102
10028: PUSH
10029: LD_INT 105
10031: PUSH
10032: LD_INT 106
10034: PUSH
10035: LD_INT 108
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: ST_TO_ADDR
10049: GO 12744
10051: LD_INT 4
10053: DOUBLE
10054: EQUAL
10055: IFTRUE 10059
10057: GO 10143
10059: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10060: LD_ADDR_VAR 0 1
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 4
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: LD_INT 11
10079: PUSH
10080: LD_INT 12
10082: PUSH
10083: LD_INT 15
10085: PUSH
10086: LD_INT 16
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 23
10094: PUSH
10095: LD_INT 26
10097: PUSH
10098: LD_INT 36
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 101
10117: PUSH
10118: LD_INT 102
10120: PUSH
10121: LD_INT 105
10123: PUSH
10124: LD_INT 106
10126: PUSH
10127: LD_INT 108
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: ST_TO_ADDR
10141: GO 12744
10143: LD_INT 5
10145: DOUBLE
10146: EQUAL
10147: IFTRUE 10151
10149: GO 10251
10151: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10152: LD_ADDR_VAR 0 1
10156: PUSH
10157: LD_INT 2
10159: PUSH
10160: LD_INT 4
10162: PUSH
10163: LD_INT 5
10165: PUSH
10166: LD_INT 6
10168: PUSH
10169: LD_INT 8
10171: PUSH
10172: LD_INT 11
10174: PUSH
10175: LD_INT 12
10177: PUSH
10178: LD_INT 15
10180: PUSH
10181: LD_INT 16
10183: PUSH
10184: LD_INT 22
10186: PUSH
10187: LD_INT 23
10189: PUSH
10190: LD_INT 25
10192: PUSH
10193: LD_INT 26
10195: PUSH
10196: LD_INT 36
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 101
10217: PUSH
10218: LD_INT 102
10220: PUSH
10221: LD_INT 105
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 109
10232: PUSH
10233: LD_INT 112
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: ST_TO_ADDR
10249: GO 12744
10251: LD_INT 6
10253: DOUBLE
10254: EQUAL
10255: IFTRUE 10259
10257: GO 10379
10259: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10260: LD_ADDR_VAR 0 1
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 4
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: LD_INT 6
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: LD_INT 11
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 15
10288: PUSH
10289: LD_INT 16
10291: PUSH
10292: LD_INT 20
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 22
10300: PUSH
10301: LD_INT 23
10303: PUSH
10304: LD_INT 25
10306: PUSH
10307: LD_INT 26
10309: PUSH
10310: LD_INT 30
10312: PUSH
10313: LD_INT 31
10315: PUSH
10316: LD_INT 32
10318: PUSH
10319: LD_INT 36
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 101
10345: PUSH
10346: LD_INT 102
10348: PUSH
10349: LD_INT 105
10351: PUSH
10352: LD_INT 106
10354: PUSH
10355: LD_INT 108
10357: PUSH
10358: LD_INT 109
10360: PUSH
10361: LD_INT 112
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: ST_TO_ADDR
10377: GO 12744
10379: LD_INT 7
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10487
10387: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10388: LD_ADDR_VAR 0 1
10392: PUSH
10393: LD_INT 2
10395: PUSH
10396: LD_INT 4
10398: PUSH
10399: LD_INT 5
10401: PUSH
10402: LD_INT 7
10404: PUSH
10405: LD_INT 11
10407: PUSH
10408: LD_INT 12
10410: PUSH
10411: LD_INT 15
10413: PUSH
10414: LD_INT 16
10416: PUSH
10417: LD_INT 20
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 23
10428: PUSH
10429: LD_INT 25
10431: PUSH
10432: LD_INT 26
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 101
10453: PUSH
10454: LD_INT 102
10456: PUSH
10457: LD_INT 103
10459: PUSH
10460: LD_INT 105
10462: PUSH
10463: LD_INT 106
10465: PUSH
10466: LD_INT 108
10468: PUSH
10469: LD_INT 112
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: ST_TO_ADDR
10485: GO 12744
10487: LD_INT 8
10489: DOUBLE
10490: EQUAL
10491: IFTRUE 10495
10493: GO 10623
10495: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 4
10506: PUSH
10507: LD_INT 5
10509: PUSH
10510: LD_INT 6
10512: PUSH
10513: LD_INT 7
10515: PUSH
10516: LD_INT 8
10518: PUSH
10519: LD_INT 11
10521: PUSH
10522: LD_INT 12
10524: PUSH
10525: LD_INT 15
10527: PUSH
10528: LD_INT 16
10530: PUSH
10531: LD_INT 20
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_INT 23
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 26
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 31
10554: PUSH
10555: LD_INT 32
10557: PUSH
10558: LD_INT 36
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 101
10585: PUSH
10586: LD_INT 102
10588: PUSH
10589: LD_INT 103
10591: PUSH
10592: LD_INT 105
10594: PUSH
10595: LD_INT 106
10597: PUSH
10598: LD_INT 108
10600: PUSH
10601: LD_INT 109
10603: PUSH
10604: LD_INT 112
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: ST_TO_ADDR
10621: GO 12744
10623: LD_INT 9
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10767
10631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10632: LD_ADDR_VAR 0 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 4
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: LD_INT 6
10648: PUSH
10649: LD_INT 7
10651: PUSH
10652: LD_INT 8
10654: PUSH
10655: LD_INT 11
10657: PUSH
10658: LD_INT 12
10660: PUSH
10661: LD_INT 15
10663: PUSH
10664: LD_INT 16
10666: PUSH
10667: LD_INT 20
10669: PUSH
10670: LD_INT 21
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 23
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 26
10684: PUSH
10685: LD_INT 28
10687: PUSH
10688: LD_INT 30
10690: PUSH
10691: LD_INT 31
10693: PUSH
10694: LD_INT 32
10696: PUSH
10697: LD_INT 36
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 101
10725: PUSH
10726: LD_INT 102
10728: PUSH
10729: LD_INT 103
10731: PUSH
10732: LD_INT 105
10734: PUSH
10735: LD_INT 106
10737: PUSH
10738: LD_INT 108
10740: PUSH
10741: LD_INT 109
10743: PUSH
10744: LD_INT 112
10746: PUSH
10747: LD_INT 114
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: ST_TO_ADDR
10765: GO 12744
10767: LD_INT 10
10769: DOUBLE
10770: EQUAL
10771: IFTRUE 10775
10773: GO 10959
10775: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_INT 2
10783: PUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 6
10792: PUSH
10793: LD_INT 7
10795: PUSH
10796: LD_INT 8
10798: PUSH
10799: LD_INT 9
10801: PUSH
10802: LD_INT 10
10804: PUSH
10805: LD_INT 11
10807: PUSH
10808: LD_INT 12
10810: PUSH
10811: LD_INT 13
10813: PUSH
10814: LD_INT 14
10816: PUSH
10817: LD_INT 15
10819: PUSH
10820: LD_INT 16
10822: PUSH
10823: LD_INT 17
10825: PUSH
10826: LD_INT 18
10828: PUSH
10829: LD_INT 19
10831: PUSH
10832: LD_INT 20
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 22
10840: PUSH
10841: LD_INT 23
10843: PUSH
10844: LD_INT 24
10846: PUSH
10847: LD_INT 25
10849: PUSH
10850: LD_INT 26
10852: PUSH
10853: LD_INT 28
10855: PUSH
10856: LD_INT 30
10858: PUSH
10859: LD_INT 31
10861: PUSH
10862: LD_INT 32
10864: PUSH
10865: LD_INT 36
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 101
10901: PUSH
10902: LD_INT 102
10904: PUSH
10905: LD_INT 103
10907: PUSH
10908: LD_INT 104
10910: PUSH
10911: LD_INT 105
10913: PUSH
10914: LD_INT 106
10916: PUSH
10917: LD_INT 107
10919: PUSH
10920: LD_INT 108
10922: PUSH
10923: LD_INT 109
10925: PUSH
10926: LD_INT 110
10928: PUSH
10929: LD_INT 111
10931: PUSH
10932: LD_INT 112
10934: PUSH
10935: LD_INT 114
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: ST_TO_ADDR
10957: GO 12744
10959: LD_INT 11
10961: DOUBLE
10962: EQUAL
10963: IFTRUE 10967
10965: GO 11159
10967: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_INT 2
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: LD_INT 4
10981: PUSH
10982: LD_INT 5
10984: PUSH
10985: LD_INT 6
10987: PUSH
10988: LD_INT 7
10990: PUSH
10991: LD_INT 8
10993: PUSH
10994: LD_INT 9
10996: PUSH
10997: LD_INT 10
10999: PUSH
11000: LD_INT 11
11002: PUSH
11003: LD_INT 12
11005: PUSH
11006: LD_INT 13
11008: PUSH
11009: LD_INT 14
11011: PUSH
11012: LD_INT 15
11014: PUSH
11015: LD_INT 16
11017: PUSH
11018: LD_INT 17
11020: PUSH
11021: LD_INT 18
11023: PUSH
11024: LD_INT 19
11026: PUSH
11027: LD_INT 20
11029: PUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 23
11038: PUSH
11039: LD_INT 24
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 26
11047: PUSH
11048: LD_INT 28
11050: PUSH
11051: LD_INT 30
11053: PUSH
11054: LD_INT 31
11056: PUSH
11057: LD_INT 32
11059: PUSH
11060: LD_INT 34
11062: PUSH
11063: LD_INT 36
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 101
11101: PUSH
11102: LD_INT 102
11104: PUSH
11105: LD_INT 103
11107: PUSH
11108: LD_INT 104
11110: PUSH
11111: LD_INT 105
11113: PUSH
11114: LD_INT 106
11116: PUSH
11117: LD_INT 107
11119: PUSH
11120: LD_INT 108
11122: PUSH
11123: LD_INT 109
11125: PUSH
11126: LD_INT 110
11128: PUSH
11129: LD_INT 111
11131: PUSH
11132: LD_INT 112
11134: PUSH
11135: LD_INT 114
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: ST_TO_ADDR
11157: GO 12744
11159: LD_INT 12
11161: DOUBLE
11162: EQUAL
11163: IFTRUE 11167
11165: GO 11375
11167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11168: LD_ADDR_VAR 0 1
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 3
11181: PUSH
11182: LD_INT 4
11184: PUSH
11185: LD_INT 5
11187: PUSH
11188: LD_INT 6
11190: PUSH
11191: LD_INT 7
11193: PUSH
11194: LD_INT 8
11196: PUSH
11197: LD_INT 9
11199: PUSH
11200: LD_INT 10
11202: PUSH
11203: LD_INT 11
11205: PUSH
11206: LD_INT 12
11208: PUSH
11209: LD_INT 13
11211: PUSH
11212: LD_INT 14
11214: PUSH
11215: LD_INT 15
11217: PUSH
11218: LD_INT 16
11220: PUSH
11221: LD_INT 17
11223: PUSH
11224: LD_INT 18
11226: PUSH
11227: LD_INT 19
11229: PUSH
11230: LD_INT 20
11232: PUSH
11233: LD_INT 21
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_INT 23
11241: PUSH
11242: LD_INT 24
11244: PUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 26
11250: PUSH
11251: LD_INT 27
11253: PUSH
11254: LD_INT 28
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 31
11262: PUSH
11263: LD_INT 32
11265: PUSH
11266: LD_INT 33
11268: PUSH
11269: LD_INT 34
11271: PUSH
11272: LD_INT 36
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 101
11313: PUSH
11314: LD_INT 102
11316: PUSH
11317: LD_INT 103
11319: PUSH
11320: LD_INT 104
11322: PUSH
11323: LD_INT 105
11325: PUSH
11326: LD_INT 106
11328: PUSH
11329: LD_INT 107
11331: PUSH
11332: LD_INT 108
11334: PUSH
11335: LD_INT 109
11337: PUSH
11338: LD_INT 110
11340: PUSH
11341: LD_INT 111
11343: PUSH
11344: LD_INT 112
11346: PUSH
11347: LD_INT 113
11349: PUSH
11350: LD_INT 114
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: ST_TO_ADDR
11373: GO 12744
11375: LD_INT 13
11377: DOUBLE
11378: EQUAL
11379: IFTRUE 11383
11381: GO 11579
11383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11384: LD_ADDR_VAR 0 1
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: LD_INT 2
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: LD_INT 5
11403: PUSH
11404: LD_INT 8
11406: PUSH
11407: LD_INT 9
11409: PUSH
11410: LD_INT 10
11412: PUSH
11413: LD_INT 11
11415: PUSH
11416: LD_INT 12
11418: PUSH
11419: LD_INT 14
11421: PUSH
11422: LD_INT 15
11424: PUSH
11425: LD_INT 16
11427: PUSH
11428: LD_INT 17
11430: PUSH
11431: LD_INT 18
11433: PUSH
11434: LD_INT 19
11436: PUSH
11437: LD_INT 20
11439: PUSH
11440: LD_INT 21
11442: PUSH
11443: LD_INT 22
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 24
11451: PUSH
11452: LD_INT 25
11454: PUSH
11455: LD_INT 26
11457: PUSH
11458: LD_INT 27
11460: PUSH
11461: LD_INT 28
11463: PUSH
11464: LD_INT 30
11466: PUSH
11467: LD_INT 31
11469: PUSH
11470: LD_INT 32
11472: PUSH
11473: LD_INT 33
11475: PUSH
11476: LD_INT 34
11478: PUSH
11479: LD_INT 36
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 101
11517: PUSH
11518: LD_INT 102
11520: PUSH
11521: LD_INT 103
11523: PUSH
11524: LD_INT 104
11526: PUSH
11527: LD_INT 105
11529: PUSH
11530: LD_INT 106
11532: PUSH
11533: LD_INT 107
11535: PUSH
11536: LD_INT 108
11538: PUSH
11539: LD_INT 109
11541: PUSH
11542: LD_INT 110
11544: PUSH
11545: LD_INT 111
11547: PUSH
11548: LD_INT 112
11550: PUSH
11551: LD_INT 113
11553: PUSH
11554: LD_INT 114
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
11577: GO 12744
11579: LD_INT 14
11581: DOUBLE
11582: EQUAL
11583: IFTRUE 11587
11585: GO 11799
11587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: LD_INT 2
11598: PUSH
11599: LD_INT 3
11601: PUSH
11602: LD_INT 4
11604: PUSH
11605: LD_INT 5
11607: PUSH
11608: LD_INT 6
11610: PUSH
11611: LD_INT 7
11613: PUSH
11614: LD_INT 8
11616: PUSH
11617: LD_INT 9
11619: PUSH
11620: LD_INT 10
11622: PUSH
11623: LD_INT 11
11625: PUSH
11626: LD_INT 12
11628: PUSH
11629: LD_INT 13
11631: PUSH
11632: LD_INT 14
11634: PUSH
11635: LD_INT 15
11637: PUSH
11638: LD_INT 16
11640: PUSH
11641: LD_INT 17
11643: PUSH
11644: LD_INT 18
11646: PUSH
11647: LD_INT 19
11649: PUSH
11650: LD_INT 20
11652: PUSH
11653: LD_INT 21
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 23
11661: PUSH
11662: LD_INT 24
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: LD_INT 27
11673: PUSH
11674: LD_INT 28
11676: PUSH
11677: LD_INT 29
11679: PUSH
11680: LD_INT 30
11682: PUSH
11683: LD_INT 31
11685: PUSH
11686: LD_INT 32
11688: PUSH
11689: LD_INT 33
11691: PUSH
11692: LD_INT 34
11694: PUSH
11695: LD_INT 36
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 101
11737: PUSH
11738: LD_INT 102
11740: PUSH
11741: LD_INT 103
11743: PUSH
11744: LD_INT 104
11746: PUSH
11747: LD_INT 105
11749: PUSH
11750: LD_INT 106
11752: PUSH
11753: LD_INT 107
11755: PUSH
11756: LD_INT 108
11758: PUSH
11759: LD_INT 109
11761: PUSH
11762: LD_INT 110
11764: PUSH
11765: LD_INT 111
11767: PUSH
11768: LD_INT 112
11770: PUSH
11771: LD_INT 113
11773: PUSH
11774: LD_INT 114
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: ST_TO_ADDR
11797: GO 12744
11799: LD_INT 15
11801: DOUBLE
11802: EQUAL
11803: IFTRUE 11807
11805: GO 12019
11807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11808: LD_ADDR_VAR 0 1
11812: PUSH
11813: LD_INT 1
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 4
11824: PUSH
11825: LD_INT 5
11827: PUSH
11828: LD_INT 6
11830: PUSH
11831: LD_INT 7
11833: PUSH
11834: LD_INT 8
11836: PUSH
11837: LD_INT 9
11839: PUSH
11840: LD_INT 10
11842: PUSH
11843: LD_INT 11
11845: PUSH
11846: LD_INT 12
11848: PUSH
11849: LD_INT 13
11851: PUSH
11852: LD_INT 14
11854: PUSH
11855: LD_INT 15
11857: PUSH
11858: LD_INT 16
11860: PUSH
11861: LD_INT 17
11863: PUSH
11864: LD_INT 18
11866: PUSH
11867: LD_INT 19
11869: PUSH
11870: LD_INT 20
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 22
11878: PUSH
11879: LD_INT 23
11881: PUSH
11882: LD_INT 24
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 26
11890: PUSH
11891: LD_INT 27
11893: PUSH
11894: LD_INT 28
11896: PUSH
11897: LD_INT 29
11899: PUSH
11900: LD_INT 30
11902: PUSH
11903: LD_INT 31
11905: PUSH
11906: LD_INT 32
11908: PUSH
11909: LD_INT 33
11911: PUSH
11912: LD_INT 34
11914: PUSH
11915: LD_INT 36
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 101
11957: PUSH
11958: LD_INT 102
11960: PUSH
11961: LD_INT 103
11963: PUSH
11964: LD_INT 104
11966: PUSH
11967: LD_INT 105
11969: PUSH
11970: LD_INT 106
11972: PUSH
11973: LD_INT 107
11975: PUSH
11976: LD_INT 108
11978: PUSH
11979: LD_INT 109
11981: PUSH
11982: LD_INT 110
11984: PUSH
11985: LD_INT 111
11987: PUSH
11988: LD_INT 112
11990: PUSH
11991: LD_INT 113
11993: PUSH
11994: LD_INT 114
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: ST_TO_ADDR
12017: GO 12744
12019: LD_INT 16
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12151
12027: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12028: LD_ADDR_VAR 0 1
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 4
12038: PUSH
12039: LD_INT 5
12041: PUSH
12042: LD_INT 7
12044: PUSH
12045: LD_INT 11
12047: PUSH
12048: LD_INT 12
12050: PUSH
12051: LD_INT 15
12053: PUSH
12054: LD_INT 16
12056: PUSH
12057: LD_INT 20
12059: PUSH
12060: LD_INT 21
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_INT 23
12068: PUSH
12069: LD_INT 25
12071: PUSH
12072: LD_INT 26
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 31
12080: PUSH
12081: LD_INT 32
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 34
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 101
12113: PUSH
12114: LD_INT 102
12116: PUSH
12117: LD_INT 103
12119: PUSH
12120: LD_INT 106
12122: PUSH
12123: LD_INT 108
12125: PUSH
12126: LD_INT 112
12128: PUSH
12129: LD_INT 113
12131: PUSH
12132: LD_INT 114
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: ST_TO_ADDR
12149: GO 12744
12151: LD_INT 17
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12371
12159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 3
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: LD_INT 6
12182: PUSH
12183: LD_INT 7
12185: PUSH
12186: LD_INT 8
12188: PUSH
12189: LD_INT 9
12191: PUSH
12192: LD_INT 10
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 13
12203: PUSH
12204: LD_INT 14
12206: PUSH
12207: LD_INT 15
12209: PUSH
12210: LD_INT 16
12212: PUSH
12213: LD_INT 17
12215: PUSH
12216: LD_INT 18
12218: PUSH
12219: LD_INT 19
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_INT 23
12233: PUSH
12234: LD_INT 24
12236: PUSH
12237: LD_INT 25
12239: PUSH
12240: LD_INT 26
12242: PUSH
12243: LD_INT 27
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 29
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 31
12257: PUSH
12258: LD_INT 32
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 34
12266: PUSH
12267: LD_INT 36
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 101
12309: PUSH
12310: LD_INT 102
12312: PUSH
12313: LD_INT 103
12315: PUSH
12316: LD_INT 104
12318: PUSH
12319: LD_INT 105
12321: PUSH
12322: LD_INT 106
12324: PUSH
12325: LD_INT 107
12327: PUSH
12328: LD_INT 108
12330: PUSH
12331: LD_INT 109
12333: PUSH
12334: LD_INT 110
12336: PUSH
12337: LD_INT 111
12339: PUSH
12340: LD_INT 112
12342: PUSH
12343: LD_INT 113
12345: PUSH
12346: LD_INT 114
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: ST_TO_ADDR
12369: GO 12744
12371: LD_INT 18
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12515
12379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12380: LD_ADDR_VAR 0 1
12384: PUSH
12385: LD_INT 2
12387: PUSH
12388: LD_INT 4
12390: PUSH
12391: LD_INT 5
12393: PUSH
12394: LD_INT 7
12396: PUSH
12397: LD_INT 11
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: LD_INT 15
12405: PUSH
12406: LD_INT 16
12408: PUSH
12409: LD_INT 20
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 22
12417: PUSH
12418: LD_INT 23
12420: PUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 26
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 31
12432: PUSH
12433: LD_INT 32
12435: PUSH
12436: LD_INT 33
12438: PUSH
12439: LD_INT 34
12441: PUSH
12442: LD_INT 35
12444: PUSH
12445: LD_INT 36
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 101
12473: PUSH
12474: LD_INT 102
12476: PUSH
12477: LD_INT 103
12479: PUSH
12480: LD_INT 106
12482: PUSH
12483: LD_INT 108
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 113
12491: PUSH
12492: LD_INT 114
12494: PUSH
12495: LD_INT 115
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
12513: GO 12744
12515: LD_INT 19
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12743
12523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12524: LD_ADDR_VAR 0 1
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: LD_INT 6
12546: PUSH
12547: LD_INT 7
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: LD_INT 10
12558: PUSH
12559: LD_INT 11
12561: PUSH
12562: LD_INT 12
12564: PUSH
12565: LD_INT 13
12567: PUSH
12568: LD_INT 14
12570: PUSH
12571: LD_INT 15
12573: PUSH
12574: LD_INT 16
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 18
12582: PUSH
12583: LD_INT 19
12585: PUSH
12586: LD_INT 20
12588: PUSH
12589: LD_INT 21
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 24
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 26
12606: PUSH
12607: LD_INT 27
12609: PUSH
12610: LD_INT 28
12612: PUSH
12613: LD_INT 29
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 31
12621: PUSH
12622: LD_INT 32
12624: PUSH
12625: LD_INT 33
12627: PUSH
12628: LD_INT 34
12630: PUSH
12631: LD_INT 35
12633: PUSH
12634: LD_INT 36
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 101
12677: PUSH
12678: LD_INT 102
12680: PUSH
12681: LD_INT 103
12683: PUSH
12684: LD_INT 104
12686: PUSH
12687: LD_INT 105
12689: PUSH
12690: LD_INT 106
12692: PUSH
12693: LD_INT 107
12695: PUSH
12696: LD_INT 108
12698: PUSH
12699: LD_INT 109
12701: PUSH
12702: LD_INT 110
12704: PUSH
12705: LD_INT 111
12707: PUSH
12708: LD_INT 112
12710: PUSH
12711: LD_INT 113
12713: PUSH
12714: LD_INT 114
12716: PUSH
12717: LD_INT 115
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
12741: GO 12744
12743: POP
// end else
12744: GO 12963
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_INT 1
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: LD_INT 4
12762: PUSH
12763: LD_INT 5
12765: PUSH
12766: LD_INT 6
12768: PUSH
12769: LD_INT 7
12771: PUSH
12772: LD_INT 8
12774: PUSH
12775: LD_INT 9
12777: PUSH
12778: LD_INT 10
12780: PUSH
12781: LD_INT 11
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: LD_INT 13
12789: PUSH
12790: LD_INT 14
12792: PUSH
12793: LD_INT 15
12795: PUSH
12796: LD_INT 16
12798: PUSH
12799: LD_INT 17
12801: PUSH
12802: LD_INT 18
12804: PUSH
12805: LD_INT 19
12807: PUSH
12808: LD_INT 20
12810: PUSH
12811: LD_INT 21
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_INT 23
12819: PUSH
12820: LD_INT 24
12822: PUSH
12823: LD_INT 25
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: LD_INT 27
12831: PUSH
12832: LD_INT 28
12834: PUSH
12835: LD_INT 29
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: LD_INT 31
12843: PUSH
12844: LD_INT 32
12846: PUSH
12847: LD_INT 33
12849: PUSH
12850: LD_INT 34
12852: PUSH
12853: LD_INT 35
12855: PUSH
12856: LD_INT 36
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 101
12899: PUSH
12900: LD_INT 102
12902: PUSH
12903: LD_INT 103
12905: PUSH
12906: LD_INT 104
12908: PUSH
12909: LD_INT 105
12911: PUSH
12912: LD_INT 106
12914: PUSH
12915: LD_INT 107
12917: PUSH
12918: LD_INT 108
12920: PUSH
12921: LD_INT 109
12923: PUSH
12924: LD_INT 110
12926: PUSH
12927: LD_INT 111
12929: PUSH
12930: LD_INT 112
12932: PUSH
12933: LD_INT 113
12935: PUSH
12936: LD_INT 114
12938: PUSH
12939: LD_INT 115
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: ST_TO_ADDR
// if result then
12963: LD_VAR 0 1
12967: IFFALSE 13256
// begin normal :=  ;
12969: LD_ADDR_VAR 0 3
12973: PUSH
12974: LD_STRING 
12976: ST_TO_ADDR
// hardcore :=  ;
12977: LD_ADDR_VAR 0 4
12981: PUSH
12982: LD_STRING 
12984: ST_TO_ADDR
// for i = 1 to normalCounter do
12985: LD_ADDR_VAR 0 5
12989: PUSH
12990: DOUBLE
12991: LD_INT 1
12993: DEC
12994: ST_TO_ADDR
12995: LD_EXP 25
12999: PUSH
13000: FOR_TO
13001: IFFALSE 13102
// begin tmp := 0 ;
13003: LD_ADDR_VAR 0 2
13007: PUSH
13008: LD_STRING 0
13010: ST_TO_ADDR
// if result [ 1 ] then
13011: LD_VAR 0 1
13015: PUSH
13016: LD_INT 1
13018: ARRAY
13019: IFFALSE 13084
// if result [ 1 ] [ 1 ] = i then
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: ARRAY
13029: PUSH
13030: LD_INT 1
13032: ARRAY
13033: PUSH
13034: LD_VAR 0 5
13038: EQUAL
13039: IFFALSE 13084
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13041: LD_ADDR_VAR 0 1
13045: PUSH
13046: LD_VAR 0 1
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 3
13070: PPUSH
13071: CALL_OW 1
13075: ST_TO_ADDR
// tmp := 1 ;
13076: LD_ADDR_VAR 0 2
13080: PUSH
13081: LD_STRING 1
13083: ST_TO_ADDR
// end ; normal := normal & tmp ;
13084: LD_ADDR_VAR 0 3
13088: PUSH
13089: LD_VAR 0 3
13093: PUSH
13094: LD_VAR 0 2
13098: STR
13099: ST_TO_ADDR
// end ;
13100: GO 13000
13102: POP
13103: POP
// for i = 1 to hardcoreCounter do
13104: LD_ADDR_VAR 0 5
13108: PUSH
13109: DOUBLE
13110: LD_INT 1
13112: DEC
13113: ST_TO_ADDR
13114: LD_EXP 26
13118: PUSH
13119: FOR_TO
13120: IFFALSE 13225
// begin tmp := 0 ;
13122: LD_ADDR_VAR 0 2
13126: PUSH
13127: LD_STRING 0
13129: ST_TO_ADDR
// if result [ 2 ] then
13130: LD_VAR 0 1
13134: PUSH
13135: LD_INT 2
13137: ARRAY
13138: IFFALSE 13207
// if result [ 2 ] [ 1 ] = 100 + i then
13140: LD_VAR 0 1
13144: PUSH
13145: LD_INT 2
13147: ARRAY
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PUSH
13153: LD_INT 100
13155: PUSH
13156: LD_VAR 0 5
13160: PLUS
13161: EQUAL
13162: IFFALSE 13207
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_VAR 0 1
13173: PPUSH
13174: LD_INT 2
13176: PPUSH
13177: LD_VAR 0 1
13181: PUSH
13182: LD_INT 2
13184: ARRAY
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 3
13193: PPUSH
13194: CALL_OW 1
13198: ST_TO_ADDR
// tmp := 1 ;
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_STRING 1
13206: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13207: LD_ADDR_VAR 0 4
13211: PUSH
13212: LD_VAR 0 4
13216: PUSH
13217: LD_VAR 0 2
13221: STR
13222: ST_TO_ADDR
// end ;
13223: GO 13119
13225: POP
13226: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13227: LD_STRING getStreamItemsFromMission("
13229: PUSH
13230: LD_VAR 0 3
13234: STR
13235: PUSH
13236: LD_STRING ","
13238: STR
13239: PUSH
13240: LD_VAR 0 4
13244: STR
13245: PUSH
13246: LD_STRING ")
13248: STR
13249: PPUSH
13250: CALL_OW 559
// end else
13254: GO 13263
// ToLua ( getStreamItemsFromMission("","") ) ;
13256: LD_STRING getStreamItemsFromMission("","")
13258: PPUSH
13259: CALL_OW 559
// end ;
13263: LD_VAR 0 1
13267: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13268: LD_VAR 0 2
13272: PUSH
13273: LD_INT 100
13275: EQUAL
13276: IFFALSE 14225
// begin if not StreamModeActive then
13278: LD_EXP 24
13282: NOT
13283: IFFALSE 13293
// StreamModeActive := true ;
13285: LD_ADDR_EXP 24
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// if p3 = 0 then
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 0
13300: EQUAL
13301: IFFALSE 13307
// InitStreamMode ;
13303: CALL 9346 0 0
// if p3 = 1 then
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: IFFALSE 13325
// sRocket := true ;
13317: LD_ADDR_EXP 29
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// if p3 = 2 then
13325: LD_VAR 0 3
13329: PUSH
13330: LD_INT 2
13332: EQUAL
13333: IFFALSE 13343
// sSpeed := true ;
13335: LD_ADDR_EXP 28
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// if p3 = 3 then
13343: LD_VAR 0 3
13347: PUSH
13348: LD_INT 3
13350: EQUAL
13351: IFFALSE 13361
// sEngine := true ;
13353: LD_ADDR_EXP 30
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// if p3 = 4 then
13361: LD_VAR 0 3
13365: PUSH
13366: LD_INT 4
13368: EQUAL
13369: IFFALSE 13379
// sSpec := true ;
13371: LD_ADDR_EXP 27
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// if p3 = 5 then
13379: LD_VAR 0 3
13383: PUSH
13384: LD_INT 5
13386: EQUAL
13387: IFFALSE 13397
// sLevel := true ;
13389: LD_ADDR_EXP 31
13393: PUSH
13394: LD_INT 1
13396: ST_TO_ADDR
// if p3 = 6 then
13397: LD_VAR 0 3
13401: PUSH
13402: LD_INT 6
13404: EQUAL
13405: IFFALSE 13415
// sArmoury := true ;
13407: LD_ADDR_EXP 32
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// if p3 = 7 then
13415: LD_VAR 0 3
13419: PUSH
13420: LD_INT 7
13422: EQUAL
13423: IFFALSE 13433
// sRadar := true ;
13425: LD_ADDR_EXP 33
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
// if p3 = 8 then
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 8
13440: EQUAL
13441: IFFALSE 13451
// sBunker := true ;
13443: LD_ADDR_EXP 34
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// if p3 = 9 then
13451: LD_VAR 0 3
13455: PUSH
13456: LD_INT 9
13458: EQUAL
13459: IFFALSE 13469
// sHack := true ;
13461: LD_ADDR_EXP 35
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// if p3 = 10 then
13469: LD_VAR 0 3
13473: PUSH
13474: LD_INT 10
13476: EQUAL
13477: IFFALSE 13487
// sFire := true ;
13479: LD_ADDR_EXP 36
13483: PUSH
13484: LD_INT 1
13486: ST_TO_ADDR
// if p3 = 11 then
13487: LD_VAR 0 3
13491: PUSH
13492: LD_INT 11
13494: EQUAL
13495: IFFALSE 13505
// sRefresh := true ;
13497: LD_ADDR_EXP 37
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// if p3 = 12 then
13505: LD_VAR 0 3
13509: PUSH
13510: LD_INT 12
13512: EQUAL
13513: IFFALSE 13523
// sExp := true ;
13515: LD_ADDR_EXP 38
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// if p3 = 13 then
13523: LD_VAR 0 3
13527: PUSH
13528: LD_INT 13
13530: EQUAL
13531: IFFALSE 13541
// sDepot := true ;
13533: LD_ADDR_EXP 39
13537: PUSH
13538: LD_INT 1
13540: ST_TO_ADDR
// if p3 = 14 then
13541: LD_VAR 0 3
13545: PUSH
13546: LD_INT 14
13548: EQUAL
13549: IFFALSE 13559
// sFlag := true ;
13551: LD_ADDR_EXP 40
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// if p3 = 15 then
13559: LD_VAR 0 3
13563: PUSH
13564: LD_INT 15
13566: EQUAL
13567: IFFALSE 13577
// sKamikadze := true ;
13569: LD_ADDR_EXP 48
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// if p3 = 16 then
13577: LD_VAR 0 3
13581: PUSH
13582: LD_INT 16
13584: EQUAL
13585: IFFALSE 13595
// sTroll := true ;
13587: LD_ADDR_EXP 49
13591: PUSH
13592: LD_INT 1
13594: ST_TO_ADDR
// if p3 = 17 then
13595: LD_VAR 0 3
13599: PUSH
13600: LD_INT 17
13602: EQUAL
13603: IFFALSE 13613
// sSlow := true ;
13605: LD_ADDR_EXP 50
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// if p3 = 18 then
13613: LD_VAR 0 3
13617: PUSH
13618: LD_INT 18
13620: EQUAL
13621: IFFALSE 13631
// sLack := true ;
13623: LD_ADDR_EXP 51
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// if p3 = 19 then
13631: LD_VAR 0 3
13635: PUSH
13636: LD_INT 19
13638: EQUAL
13639: IFFALSE 13649
// sTank := true ;
13641: LD_ADDR_EXP 53
13645: PUSH
13646: LD_INT 1
13648: ST_TO_ADDR
// if p3 = 20 then
13649: LD_VAR 0 3
13653: PUSH
13654: LD_INT 20
13656: EQUAL
13657: IFFALSE 13667
// sRemote := true ;
13659: LD_ADDR_EXP 54
13663: PUSH
13664: LD_INT 1
13666: ST_TO_ADDR
// if p3 = 21 then
13667: LD_VAR 0 3
13671: PUSH
13672: LD_INT 21
13674: EQUAL
13675: IFFALSE 13685
// sPowell := true ;
13677: LD_ADDR_EXP 55
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
// if p3 = 22 then
13685: LD_VAR 0 3
13689: PUSH
13690: LD_INT 22
13692: EQUAL
13693: IFFALSE 13703
// sTeleport := true ;
13695: LD_ADDR_EXP 58
13699: PUSH
13700: LD_INT 1
13702: ST_TO_ADDR
// if p3 = 23 then
13703: LD_VAR 0 3
13707: PUSH
13708: LD_INT 23
13710: EQUAL
13711: IFFALSE 13721
// sOilTower := true ;
13713: LD_ADDR_EXP 60
13717: PUSH
13718: LD_INT 1
13720: ST_TO_ADDR
// if p3 = 24 then
13721: LD_VAR 0 3
13725: PUSH
13726: LD_INT 24
13728: EQUAL
13729: IFFALSE 13739
// sShovel := true ;
13731: LD_ADDR_EXP 61
13735: PUSH
13736: LD_INT 1
13738: ST_TO_ADDR
// if p3 = 25 then
13739: LD_VAR 0 3
13743: PUSH
13744: LD_INT 25
13746: EQUAL
13747: IFFALSE 13757
// sSheik := true ;
13749: LD_ADDR_EXP 62
13753: PUSH
13754: LD_INT 1
13756: ST_TO_ADDR
// if p3 = 26 then
13757: LD_VAR 0 3
13761: PUSH
13762: LD_INT 26
13764: EQUAL
13765: IFFALSE 13775
// sEarthquake := true ;
13767: LD_ADDR_EXP 64
13771: PUSH
13772: LD_INT 1
13774: ST_TO_ADDR
// if p3 = 27 then
13775: LD_VAR 0 3
13779: PUSH
13780: LD_INT 27
13782: EQUAL
13783: IFFALSE 13793
// sAI := true ;
13785: LD_ADDR_EXP 65
13789: PUSH
13790: LD_INT 1
13792: ST_TO_ADDR
// if p3 = 28 then
13793: LD_VAR 0 3
13797: PUSH
13798: LD_INT 28
13800: EQUAL
13801: IFFALSE 13811
// sCargo := true ;
13803: LD_ADDR_EXP 68
13807: PUSH
13808: LD_INT 1
13810: ST_TO_ADDR
// if p3 = 29 then
13811: LD_VAR 0 3
13815: PUSH
13816: LD_INT 29
13818: EQUAL
13819: IFFALSE 13829
// sDLaser := true ;
13821: LD_ADDR_EXP 69
13825: PUSH
13826: LD_INT 1
13828: ST_TO_ADDR
// if p3 = 30 then
13829: LD_VAR 0 3
13833: PUSH
13834: LD_INT 30
13836: EQUAL
13837: IFFALSE 13847
// sExchange := true ;
13839: LD_ADDR_EXP 70
13843: PUSH
13844: LD_INT 1
13846: ST_TO_ADDR
// if p3 = 31 then
13847: LD_VAR 0 3
13851: PUSH
13852: LD_INT 31
13854: EQUAL
13855: IFFALSE 13865
// sFac := true ;
13857: LD_ADDR_EXP 71
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// if p3 = 32 then
13865: LD_VAR 0 3
13869: PUSH
13870: LD_INT 32
13872: EQUAL
13873: IFFALSE 13883
// sPower := true ;
13875: LD_ADDR_EXP 72
13879: PUSH
13880: LD_INT 1
13882: ST_TO_ADDR
// if p3 = 33 then
13883: LD_VAR 0 3
13887: PUSH
13888: LD_INT 33
13890: EQUAL
13891: IFFALSE 13901
// sRandom := true ;
13893: LD_ADDR_EXP 73
13897: PUSH
13898: LD_INT 1
13900: ST_TO_ADDR
// if p3 = 34 then
13901: LD_VAR 0 3
13905: PUSH
13906: LD_INT 34
13908: EQUAL
13909: IFFALSE 13919
// sShield := true ;
13911: LD_ADDR_EXP 74
13915: PUSH
13916: LD_INT 1
13918: ST_TO_ADDR
// if p3 = 35 then
13919: LD_VAR 0 3
13923: PUSH
13924: LD_INT 35
13926: EQUAL
13927: IFFALSE 13937
// sTime := true ;
13929: LD_ADDR_EXP 75
13933: PUSH
13934: LD_INT 1
13936: ST_TO_ADDR
// if p3 = 36 then
13937: LD_VAR 0 3
13941: PUSH
13942: LD_INT 36
13944: EQUAL
13945: IFFALSE 13955
// sTools := true ;
13947: LD_ADDR_EXP 76
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
// if p3 = 101 then
13955: LD_VAR 0 3
13959: PUSH
13960: LD_INT 101
13962: EQUAL
13963: IFFALSE 13973
// sSold := true ;
13965: LD_ADDR_EXP 41
13969: PUSH
13970: LD_INT 1
13972: ST_TO_ADDR
// if p3 = 102 then
13973: LD_VAR 0 3
13977: PUSH
13978: LD_INT 102
13980: EQUAL
13981: IFFALSE 13991
// sDiff := true ;
13983: LD_ADDR_EXP 42
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// if p3 = 103 then
13991: LD_VAR 0 3
13995: PUSH
13996: LD_INT 103
13998: EQUAL
13999: IFFALSE 14009
// sFog := true ;
14001: LD_ADDR_EXP 45
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// if p3 = 104 then
14009: LD_VAR 0 3
14013: PUSH
14014: LD_INT 104
14016: EQUAL
14017: IFFALSE 14027
// sReset := true ;
14019: LD_ADDR_EXP 46
14023: PUSH
14024: LD_INT 1
14026: ST_TO_ADDR
// if p3 = 105 then
14027: LD_VAR 0 3
14031: PUSH
14032: LD_INT 105
14034: EQUAL
14035: IFFALSE 14045
// sSun := true ;
14037: LD_ADDR_EXP 47
14041: PUSH
14042: LD_INT 1
14044: ST_TO_ADDR
// if p3 = 106 then
14045: LD_VAR 0 3
14049: PUSH
14050: LD_INT 106
14052: EQUAL
14053: IFFALSE 14063
// sTiger := true ;
14055: LD_ADDR_EXP 43
14059: PUSH
14060: LD_INT 1
14062: ST_TO_ADDR
// if p3 = 107 then
14063: LD_VAR 0 3
14067: PUSH
14068: LD_INT 107
14070: EQUAL
14071: IFFALSE 14081
// sBomb := true ;
14073: LD_ADDR_EXP 44
14077: PUSH
14078: LD_INT 1
14080: ST_TO_ADDR
// if p3 = 108 then
14081: LD_VAR 0 3
14085: PUSH
14086: LD_INT 108
14088: EQUAL
14089: IFFALSE 14099
// sWound := true ;
14091: LD_ADDR_EXP 52
14095: PUSH
14096: LD_INT 1
14098: ST_TO_ADDR
// if p3 = 109 then
14099: LD_VAR 0 3
14103: PUSH
14104: LD_INT 109
14106: EQUAL
14107: IFFALSE 14117
// sBetray := true ;
14109: LD_ADDR_EXP 56
14113: PUSH
14114: LD_INT 1
14116: ST_TO_ADDR
// if p3 = 110 then
14117: LD_VAR 0 3
14121: PUSH
14122: LD_INT 110
14124: EQUAL
14125: IFFALSE 14135
// sContamin := true ;
14127: LD_ADDR_EXP 57
14131: PUSH
14132: LD_INT 1
14134: ST_TO_ADDR
// if p3 = 111 then
14135: LD_VAR 0 3
14139: PUSH
14140: LD_INT 111
14142: EQUAL
14143: IFFALSE 14153
// sOil := true ;
14145: LD_ADDR_EXP 59
14149: PUSH
14150: LD_INT 1
14152: ST_TO_ADDR
// if p3 = 112 then
14153: LD_VAR 0 3
14157: PUSH
14158: LD_INT 112
14160: EQUAL
14161: IFFALSE 14171
// sStu := true ;
14163: LD_ADDR_EXP 63
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// if p3 = 113 then
14171: LD_VAR 0 3
14175: PUSH
14176: LD_INT 113
14178: EQUAL
14179: IFFALSE 14189
// sBazooka := true ;
14181: LD_ADDR_EXP 66
14185: PUSH
14186: LD_INT 1
14188: ST_TO_ADDR
// if p3 = 114 then
14189: LD_VAR 0 3
14193: PUSH
14194: LD_INT 114
14196: EQUAL
14197: IFFALSE 14207
// sMortar := true ;
14199: LD_ADDR_EXP 67
14203: PUSH
14204: LD_INT 1
14206: ST_TO_ADDR
// if p3 = 115 then
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 115
14214: EQUAL
14215: IFFALSE 14225
// sRanger := true ;
14217: LD_ADDR_EXP 77
14221: PUSH
14222: LD_INT 1
14224: ST_TO_ADDR
// end ; end ;
14225: PPOPN 6
14227: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14228: LD_EXP 24
14232: PUSH
14233: LD_EXP 29
14237: AND
14238: IFFALSE 14362
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
// begin enable ;
14247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14248: LD_ADDR_VAR 0 2
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_OWVAR 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 7
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 34
14280: PUSH
14281: LD_INT 45
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 34
14290: PUSH
14291: LD_INT 28
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 34
14300: PUSH
14301: LD_INT 47
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// if not tmp then
14324: LD_VAR 0 2
14328: NOT
14329: IFFALSE 14333
// exit ;
14331: GO 14362
// for i in tmp do
14333: LD_ADDR_VAR 0 1
14337: PUSH
14338: LD_VAR 0 2
14342: PUSH
14343: FOR_IN
14344: IFFALSE 14360
// begin SetLives ( i , 0 ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: LD_INT 0
14353: PPUSH
14354: CALL_OW 234
// end ;
14358: GO 14343
14360: POP
14361: POP
// end ;
14362: PPOPN 2
14364: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14365: LD_EXP 24
14369: PUSH
14370: LD_EXP 30
14374: AND
14375: IFFALSE 14459
14377: GO 14379
14379: DISABLE
14380: LD_INT 0
14382: PPUSH
14383: PPUSH
// begin enable ;
14384: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14385: LD_ADDR_VAR 0 2
14389: PUSH
14390: LD_INT 22
14392: PUSH
14393: LD_OWVAR 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 32
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 69
14420: ST_TO_ADDR
// if not tmp then
14421: LD_VAR 0 2
14425: NOT
14426: IFFALSE 14430
// exit ;
14428: GO 14459
// for i in tmp do
14430: LD_ADDR_VAR 0 1
14434: PUSH
14435: LD_VAR 0 2
14439: PUSH
14440: FOR_IN
14441: IFFALSE 14457
// begin SetLives ( i , 0 ) ;
14443: LD_VAR 0 1
14447: PPUSH
14448: LD_INT 0
14450: PPUSH
14451: CALL_OW 234
// end ;
14455: GO 14440
14457: POP
14458: POP
// end ;
14459: PPOPN 2
14461: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14462: LD_EXP 24
14466: PUSH
14467: LD_EXP 27
14471: AND
14472: IFFALSE 14565
14474: GO 14476
14476: DISABLE
14477: LD_INT 0
14479: PPUSH
// begin enable ;
14480: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_OWVAR 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 2
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 5
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 9
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 25
14523: PUSH
14524: LD_INT 8
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: PUSH
14546: FOR_IN
14547: IFFALSE 14563
// begin SetClass ( i , 1 ) ;
14549: LD_VAR 0 1
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 336
// end ;
14561: GO 14546
14563: POP
14564: POP
// end ;
14565: PPOPN 1
14567: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14568: LD_EXP 24
14572: PUSH
14573: LD_EXP 28
14577: AND
14578: PUSH
14579: LD_OWVAR 65
14583: PUSH
14584: LD_INT 7
14586: LESS
14587: AND
14588: IFFALSE 14602
14590: GO 14592
14592: DISABLE
// begin enable ;
14593: ENABLE
// game_speed := 7 ;
14594: LD_ADDR_OWVAR 65
14598: PUSH
14599: LD_INT 7
14601: ST_TO_ADDR
// end ;
14602: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14603: LD_EXP 24
14607: PUSH
14608: LD_EXP 31
14612: AND
14613: IFFALSE 14815
14615: GO 14617
14617: DISABLE
14618: LD_INT 0
14620: PPUSH
14621: PPUSH
14622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14623: LD_ADDR_VAR 0 3
14627: PUSH
14628: LD_INT 81
14630: PUSH
14631: LD_OWVAR 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: ST_TO_ADDR
// if not tmp then
14659: LD_VAR 0 3
14663: NOT
14664: IFFALSE 14668
// exit ;
14666: GO 14815
// if tmp > 5 then
14668: LD_VAR 0 3
14672: PUSH
14673: LD_INT 5
14675: GREATER
14676: IFFALSE 14688
// k := 5 else
14678: LD_ADDR_VAR 0 2
14682: PUSH
14683: LD_INT 5
14685: ST_TO_ADDR
14686: GO 14698
// k := tmp ;
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_VAR 0 3
14697: ST_TO_ADDR
// for i := 1 to k do
14698: LD_ADDR_VAR 0 1
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 2
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14813
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14716: LD_VAR 0 3
14720: PUSH
14721: LD_VAR 0 1
14725: ARRAY
14726: PPUSH
14727: LD_VAR 0 1
14731: PUSH
14732: LD_INT 4
14734: MOD
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: PPUSH
14740: CALL_OW 259
14744: PUSH
14745: LD_INT 10
14747: LESS
14748: IFFALSE 14811
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14750: LD_VAR 0 3
14754: PUSH
14755: LD_VAR 0 1
14759: ARRAY
14760: PPUSH
14761: LD_VAR 0 1
14765: PUSH
14766: LD_INT 4
14768: MOD
14769: PUSH
14770: LD_INT 1
14772: PLUS
14773: PPUSH
14774: LD_VAR 0 3
14778: PUSH
14779: LD_VAR 0 1
14783: ARRAY
14784: PPUSH
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 4
14792: MOD
14793: PUSH
14794: LD_INT 1
14796: PLUS
14797: PPUSH
14798: CALL_OW 259
14802: PUSH
14803: LD_INT 1
14805: PLUS
14806: PPUSH
14807: CALL_OW 237
14811: GO 14713
14813: POP
14814: POP
// end ;
14815: PPOPN 3
14817: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14818: LD_EXP 24
14822: PUSH
14823: LD_EXP 32
14827: AND
14828: IFFALSE 14848
14830: GO 14832
14832: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14833: LD_INT 4
14835: PPUSH
14836: LD_OWVAR 2
14840: PPUSH
14841: LD_INT 0
14843: PPUSH
14844: CALL_OW 324
14848: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14849: LD_EXP 24
14853: PUSH
14854: LD_EXP 61
14858: AND
14859: IFFALSE 14879
14861: GO 14863
14863: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14864: LD_INT 19
14866: PPUSH
14867: LD_OWVAR 2
14871: PPUSH
14872: LD_INT 0
14874: PPUSH
14875: CALL_OW 324
14879: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14880: LD_EXP 24
14884: PUSH
14885: LD_EXP 33
14889: AND
14890: IFFALSE 14992
14892: GO 14894
14894: DISABLE
14895: LD_INT 0
14897: PPUSH
14898: PPUSH
// begin enable ;
14899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_OWVAR 2
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: LD_INT 34
14922: PUSH
14923: LD_INT 11
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 34
14932: PUSH
14933: LD_INT 30
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: ST_TO_ADDR
// if not tmp then
14954: LD_VAR 0 2
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 14992
// for i in tmp do
14963: LD_ADDR_VAR 0 1
14967: PUSH
14968: LD_VAR 0 2
14972: PUSH
14973: FOR_IN
14974: IFFALSE 14990
// begin SetLives ( i , 0 ) ;
14976: LD_VAR 0 1
14980: PPUSH
14981: LD_INT 0
14983: PPUSH
14984: CALL_OW 234
// end ;
14988: GO 14973
14990: POP
14991: POP
// end ;
14992: PPOPN 2
14994: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14995: LD_EXP 24
14999: PUSH
15000: LD_EXP 34
15004: AND
15005: IFFALSE 15025
15007: GO 15009
15009: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15010: LD_INT 32
15012: PPUSH
15013: LD_OWVAR 2
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL_OW 324
15025: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15026: LD_EXP 24
15030: PUSH
15031: LD_EXP 35
15035: AND
15036: IFFALSE 15217
15038: GO 15040
15040: DISABLE
15041: LD_INT 0
15043: PPUSH
15044: PPUSH
15045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_INT 22
15053: PUSH
15054: LD_OWVAR 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 33
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 69
15081: ST_TO_ADDR
// if not tmp then
15082: LD_VAR 0 2
15086: NOT
15087: IFFALSE 15091
// exit ;
15089: GO 15217
// side := 0 ;
15091: LD_ADDR_VAR 0 3
15095: PUSH
15096: LD_INT 0
15098: ST_TO_ADDR
// for i := 1 to 8 do
15099: LD_ADDR_VAR 0 1
15103: PUSH
15104: DOUBLE
15105: LD_INT 1
15107: DEC
15108: ST_TO_ADDR
15109: LD_INT 8
15111: PUSH
15112: FOR_TO
15113: IFFALSE 15161
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15115: LD_OWVAR 2
15119: PUSH
15120: LD_VAR 0 1
15124: NONEQUAL
15125: PUSH
15126: LD_OWVAR 2
15130: PPUSH
15131: LD_VAR 0 1
15135: PPUSH
15136: CALL_OW 81
15140: PUSH
15141: LD_INT 2
15143: EQUAL
15144: AND
15145: IFFALSE 15159
// begin side := i ;
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: LD_VAR 0 1
15156: ST_TO_ADDR
// break ;
15157: GO 15161
// end ;
15159: GO 15112
15161: POP
15162: POP
// if not side then
15163: LD_VAR 0 3
15167: NOT
15168: IFFALSE 15172
// exit ;
15170: GO 15217
// for i := 1 to tmp do
15172: LD_ADDR_VAR 0 1
15176: PUSH
15177: DOUBLE
15178: LD_INT 1
15180: DEC
15181: ST_TO_ADDR
15182: LD_VAR 0 2
15186: PUSH
15187: FOR_TO
15188: IFFALSE 15215
// if Prob ( 60 ) then
15190: LD_INT 60
15192: PPUSH
15193: CALL_OW 13
15197: IFFALSE 15213
// SetSide ( i , side ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: CALL_OW 235
15213: GO 15187
15215: POP
15216: POP
// end ;
15217: PPOPN 3
15219: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15220: LD_EXP 24
15224: PUSH
15225: LD_EXP 37
15229: AND
15230: IFFALSE 15349
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_INT 22
15245: PUSH
15246: LD_OWVAR 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 21
15257: PUSH
15258: LD_INT 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 23
15270: PUSH
15271: LD_INT 0
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: PUSH
15292: FOR_IN
15293: IFFALSE 15347
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 257
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: LD_INT 2
15310: PUSH
15311: LD_INT 3
15313: PUSH
15314: LD_INT 4
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: IN
15323: IFFALSE 15345
// SetClass ( un , rand ( 1 , 4 ) ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: LD_INT 4
15335: PPUSH
15336: CALL_OW 12
15340: PPUSH
15341: CALL_OW 336
15345: GO 15292
15347: POP
15348: POP
// end ;
15349: PPOPN 1
15351: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15352: LD_EXP 24
15356: PUSH
15357: LD_EXP 36
15361: AND
15362: IFFALSE 15441
15364: GO 15366
15366: DISABLE
15367: LD_INT 0
15369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15370: LD_ADDR_VAR 0 1
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_OWVAR 2
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 21
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: ST_TO_ADDR
// if not tmp then
15406: LD_VAR 0 1
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 15441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15415: LD_VAR 0 1
15419: PUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL_OW 12
15432: ARRAY
15433: PPUSH
15434: LD_INT 100
15436: PPUSH
15437: CALL_OW 234
// end ;
15441: PPOPN 1
15443: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15444: LD_EXP 24
15448: PUSH
15449: LD_EXP 38
15453: AND
15454: IFFALSE 15552
15456: GO 15458
15458: DISABLE
15459: LD_INT 0
15461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15462: LD_ADDR_VAR 0 1
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 69
15497: ST_TO_ADDR
// if not tmp then
15498: LD_VAR 0 1
15502: NOT
15503: IFFALSE 15507
// exit ;
15505: GO 15552
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15507: LD_VAR 0 1
15511: PUSH
15512: LD_INT 1
15514: PPUSH
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 12
15524: ARRAY
15525: PPUSH
15526: LD_INT 1
15528: PPUSH
15529: LD_INT 4
15531: PPUSH
15532: CALL_OW 12
15536: PPUSH
15537: LD_INT 3000
15539: PPUSH
15540: LD_INT 9000
15542: PPUSH
15543: CALL_OW 12
15547: PPUSH
15548: CALL_OW 492
// end ;
15552: PPOPN 1
15554: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15555: LD_EXP 24
15559: PUSH
15560: LD_EXP 39
15564: AND
15565: IFFALSE 15585
15567: GO 15569
15569: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15570: LD_INT 1
15572: PPUSH
15573: LD_OWVAR 2
15577: PPUSH
15578: LD_INT 0
15580: PPUSH
15581: CALL_OW 324
15585: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15586: LD_EXP 24
15590: PUSH
15591: LD_EXP 40
15595: AND
15596: IFFALSE 15679
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
15604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 22
15612: PUSH
15613: LD_OWVAR 2
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 3
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 69
15640: ST_TO_ADDR
// if not tmp then
15641: LD_VAR 0 2
15645: NOT
15646: IFFALSE 15650
// exit ;
15648: GO 15679
// for i in tmp do
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_VAR 0 2
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15677
// SetBLevel ( i , 10 ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_INT 10
15670: PPUSH
15671: CALL_OW 241
15675: GO 15660
15677: POP
15678: POP
// end ;
15679: PPOPN 2
15681: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15682: LD_EXP 24
15686: PUSH
15687: LD_EXP 41
15691: AND
15692: IFFALSE 15803
15694: GO 15696
15696: DISABLE
15697: LD_INT 0
15699: PPUSH
15700: PPUSH
15701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15702: LD_ADDR_VAR 0 3
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_OWVAR 2
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 25
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 69
15737: ST_TO_ADDR
// if not tmp then
15738: LD_VAR 0 3
15742: NOT
15743: IFFALSE 15747
// exit ;
15745: GO 15803
// un := tmp [ rand ( 1 , tmp ) ] ;
15747: LD_ADDR_VAR 0 2
15751: PUSH
15752: LD_VAR 0 3
15756: PUSH
15757: LD_INT 1
15759: PPUSH
15760: LD_VAR 0 3
15764: PPUSH
15765: CALL_OW 12
15769: ARRAY
15770: ST_TO_ADDR
// if Crawls ( un ) then
15771: LD_VAR 0 2
15775: PPUSH
15776: CALL_OW 318
15780: IFFALSE 15791
// ComWalk ( un ) ;
15782: LD_VAR 0 2
15786: PPUSH
15787: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_INT 5
15798: PPUSH
15799: CALL_OW 336
// end ;
15803: PPOPN 3
15805: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15806: LD_EXP 24
15810: PUSH
15811: LD_EXP 42
15815: AND
15816: PUSH
15817: LD_OWVAR 67
15821: PUSH
15822: LD_INT 3
15824: LESS
15825: AND
15826: IFFALSE 15845
15828: GO 15830
15830: DISABLE
// Difficulty := Difficulty + 1 ;
15831: LD_ADDR_OWVAR 67
15835: PUSH
15836: LD_OWVAR 67
15840: PUSH
15841: LD_INT 1
15843: PLUS
15844: ST_TO_ADDR
15845: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15846: LD_EXP 24
15850: PUSH
15851: LD_EXP 43
15855: AND
15856: IFFALSE 15959
15858: GO 15860
15860: DISABLE
15861: LD_INT 0
15863: PPUSH
// begin for i := 1 to 5 do
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: DOUBLE
15870: LD_INT 1
15872: DEC
15873: ST_TO_ADDR
15874: LD_INT 5
15876: PUSH
15877: FOR_TO
15878: IFFALSE 15957
// begin uc_nation := nation_nature ;
15880: LD_ADDR_OWVAR 21
15884: PUSH
15885: LD_INT 0
15887: ST_TO_ADDR
// uc_side := 0 ;
15888: LD_ADDR_OWVAR 20
15892: PUSH
15893: LD_INT 0
15895: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15896: LD_ADDR_OWVAR 29
15900: PUSH
15901: LD_INT 12
15903: PUSH
15904: LD_INT 12
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: ST_TO_ADDR
// hc_agressivity := 20 ;
15911: LD_ADDR_OWVAR 35
15915: PUSH
15916: LD_INT 20
15918: ST_TO_ADDR
// hc_class := class_tiger ;
15919: LD_ADDR_OWVAR 28
15923: PUSH
15924: LD_INT 14
15926: ST_TO_ADDR
// hc_gallery :=  ;
15927: LD_ADDR_OWVAR 33
15931: PUSH
15932: LD_STRING 
15934: ST_TO_ADDR
// hc_name :=  ;
15935: LD_ADDR_OWVAR 26
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15943: CALL_OW 44
15947: PPUSH
15948: LD_INT 0
15950: PPUSH
15951: CALL_OW 51
// end ;
15955: GO 15877
15957: POP
15958: POP
// end ;
15959: PPOPN 1
15961: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15962: LD_EXP 24
15966: PUSH
15967: LD_EXP 44
15971: AND
15972: IFFALSE 15981
15974: GO 15976
15976: DISABLE
// StreamSibBomb ;
15977: CALL 15982 0 0
15981: END
// export function StreamSibBomb ; var i , x , y ; begin
15982: LD_INT 0
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
// result := false ;
15988: LD_ADDR_VAR 0 1
15992: PUSH
15993: LD_INT 0
15995: ST_TO_ADDR
// for i := 1 to 16 do
15996: LD_ADDR_VAR 0 2
16000: PUSH
16001: DOUBLE
16002: LD_INT 1
16004: DEC
16005: ST_TO_ADDR
16006: LD_INT 16
16008: PUSH
16009: FOR_TO
16010: IFFALSE 16209
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16012: LD_ADDR_VAR 0 3
16016: PUSH
16017: LD_INT 10
16019: PUSH
16020: LD_INT 20
16022: PUSH
16023: LD_INT 30
16025: PUSH
16026: LD_INT 40
16028: PUSH
16029: LD_INT 50
16031: PUSH
16032: LD_INT 60
16034: PUSH
16035: LD_INT 70
16037: PUSH
16038: LD_INT 80
16040: PUSH
16041: LD_INT 90
16043: PUSH
16044: LD_INT 100
16046: PUSH
16047: LD_INT 110
16049: PUSH
16050: LD_INT 120
16052: PUSH
16053: LD_INT 130
16055: PUSH
16056: LD_INT 140
16058: PUSH
16059: LD_INT 150
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 1
16081: PPUSH
16082: LD_INT 15
16084: PPUSH
16085: CALL_OW 12
16089: ARRAY
16090: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16091: LD_ADDR_VAR 0 4
16095: PUSH
16096: LD_INT 10
16098: PUSH
16099: LD_INT 20
16101: PUSH
16102: LD_INT 30
16104: PUSH
16105: LD_INT 40
16107: PUSH
16108: LD_INT 50
16110: PUSH
16111: LD_INT 60
16113: PUSH
16114: LD_INT 70
16116: PUSH
16117: LD_INT 80
16119: PUSH
16120: LD_INT 90
16122: PUSH
16123: LD_INT 100
16125: PUSH
16126: LD_INT 110
16128: PUSH
16129: LD_INT 120
16131: PUSH
16132: LD_INT 130
16134: PUSH
16135: LD_INT 140
16137: PUSH
16138: LD_INT 150
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 1
16160: PPUSH
16161: LD_INT 15
16163: PPUSH
16164: CALL_OW 12
16168: ARRAY
16169: ST_TO_ADDR
// if ValidHex ( x , y ) then
16170: LD_VAR 0 3
16174: PPUSH
16175: LD_VAR 0 4
16179: PPUSH
16180: CALL_OW 488
16184: IFFALSE 16207
// begin result := [ x , y ] ;
16186: LD_ADDR_VAR 0 1
16190: PUSH
16191: LD_VAR 0 3
16195: PUSH
16196: LD_VAR 0 4
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: ST_TO_ADDR
// break ;
16205: GO 16209
// end ; end ;
16207: GO 16009
16209: POP
16210: POP
// if result then
16211: LD_VAR 0 1
16215: IFFALSE 16275
// begin ToLua ( playSibBomb() ) ;
16217: LD_STRING playSibBomb()
16219: PPUSH
16220: CALL_OW 559
// wait ( 0 0$14 ) ;
16224: LD_INT 490
16226: PPUSH
16227: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16231: LD_VAR 0 1
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_VAR 0 1
16244: PUSH
16245: LD_INT 2
16247: ARRAY
16248: PPUSH
16249: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16253: LD_VAR 0 1
16257: PUSH
16258: LD_INT 1
16260: ARRAY
16261: PPUSH
16262: LD_VAR 0 1
16266: PUSH
16267: LD_INT 2
16269: ARRAY
16270: PPUSH
16271: CALL_OW 429
// end ; end ;
16275: LD_VAR 0 1
16279: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16280: LD_EXP 24
16284: PUSH
16285: LD_EXP 46
16289: AND
16290: IFFALSE 16302
16292: GO 16294
16294: DISABLE
// YouLost (  ) ;
16295: LD_STRING 
16297: PPUSH
16298: CALL_OW 104
16302: END
// every 0 0$1 trigger StreamModeActive and sFog do
16303: LD_EXP 24
16307: PUSH
16308: LD_EXP 45
16312: AND
16313: IFFALSE 16327
16315: GO 16317
16317: DISABLE
// FogOff ( your_side ) ;
16318: LD_OWVAR 2
16322: PPUSH
16323: CALL_OW 344
16327: END
// every 0 0$1 trigger StreamModeActive and sSun do
16328: LD_EXP 24
16332: PUSH
16333: LD_EXP 47
16337: AND
16338: IFFALSE 16366
16340: GO 16342
16342: DISABLE
// begin solar_recharge_percent := 0 ;
16343: LD_ADDR_OWVAR 79
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16351: LD_INT 10500
16353: PPUSH
16354: CALL_OW 67
// solar_recharge_percent := 100 ;
16358: LD_ADDR_OWVAR 79
16362: PUSH
16363: LD_INT 100
16365: ST_TO_ADDR
// end ;
16366: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16367: LD_EXP 24
16371: PUSH
16372: LD_EXP 48
16376: AND
16377: IFFALSE 16616
16379: GO 16381
16381: DISABLE
16382: LD_INT 0
16384: PPUSH
16385: PPUSH
16386: PPUSH
// begin tmp := [ ] ;
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: EMPTY
16393: ST_TO_ADDR
// for i := 1 to 6 do
16394: LD_ADDR_VAR 0 1
16398: PUSH
16399: DOUBLE
16400: LD_INT 1
16402: DEC
16403: ST_TO_ADDR
16404: LD_INT 6
16406: PUSH
16407: FOR_TO
16408: IFFALSE 16513
// begin uc_nation := nation_nature ;
16410: LD_ADDR_OWVAR 21
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// uc_side := 0 ;
16418: LD_ADDR_OWVAR 20
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16426: LD_ADDR_OWVAR 29
16430: PUSH
16431: LD_INT 12
16433: PUSH
16434: LD_INT 12
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
// hc_agressivity := 20 ;
16441: LD_ADDR_OWVAR 35
16445: PUSH
16446: LD_INT 20
16448: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16449: LD_ADDR_OWVAR 28
16453: PUSH
16454: LD_INT 17
16456: ST_TO_ADDR
// hc_gallery :=  ;
16457: LD_ADDR_OWVAR 33
16461: PUSH
16462: LD_STRING 
16464: ST_TO_ADDR
// hc_name :=  ;
16465: LD_ADDR_OWVAR 26
16469: PUSH
16470: LD_STRING 
16472: ST_TO_ADDR
// un := CreateHuman ;
16473: LD_ADDR_VAR 0 2
16477: PUSH
16478: CALL_OW 44
16482: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16483: LD_VAR 0 2
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 51
// tmp := tmp ^ un ;
16495: LD_ADDR_VAR 0 3
16499: PUSH
16500: LD_VAR 0 3
16504: PUSH
16505: LD_VAR 0 2
16509: ADD
16510: ST_TO_ADDR
// end ;
16511: GO 16407
16513: POP
16514: POP
// repeat wait ( 0 0$1 ) ;
16515: LD_INT 35
16517: PPUSH
16518: CALL_OW 67
// for un in tmp do
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_VAR 0 3
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16607
// begin if IsDead ( un ) then
16535: LD_VAR 0 2
16539: PPUSH
16540: CALL_OW 301
16544: IFFALSE 16564
// begin tmp := tmp diff un ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_VAR 0 3
16555: PUSH
16556: LD_VAR 0 2
16560: DIFF
16561: ST_TO_ADDR
// continue ;
16562: GO 16532
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_INT 3
16571: PUSH
16572: LD_INT 22
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PPUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: CALL_OW 74
16600: PPUSH
16601: CALL_OW 115
// end ;
16605: GO 16532
16607: POP
16608: POP
// until not tmp ;
16609: LD_VAR 0 3
16613: NOT
16614: IFFALSE 16515
// end ;
16616: PPOPN 3
16618: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16619: LD_EXP 24
16623: PUSH
16624: LD_EXP 49
16628: AND
16629: IFFALSE 16683
16631: GO 16633
16633: DISABLE
// begin ToLua ( displayTroll(); ) ;
16634: LD_STRING displayTroll();
16636: PPUSH
16637: CALL_OW 559
// wait ( 3 3$00 ) ;
16641: LD_INT 6300
16643: PPUSH
16644: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16648: LD_STRING hideTroll();
16650: PPUSH
16651: CALL_OW 559
// wait ( 1 1$00 ) ;
16655: LD_INT 2100
16657: PPUSH
16658: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16662: LD_STRING displayTroll();
16664: PPUSH
16665: CALL_OW 559
// wait ( 1 1$00 ) ;
16669: LD_INT 2100
16671: PPUSH
16672: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16676: LD_STRING hideTroll();
16678: PPUSH
16679: CALL_OW 559
// end ;
16683: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16684: LD_EXP 24
16688: PUSH
16689: LD_EXP 50
16693: AND
16694: IFFALSE 16757
16696: GO 16698
16698: DISABLE
16699: LD_INT 0
16701: PPUSH
// begin p := 0 ;
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_INT 0
16709: ST_TO_ADDR
// repeat game_speed := 1 ;
16710: LD_ADDR_OWVAR 65
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16718: LD_INT 35
16720: PPUSH
16721: CALL_OW 67
// p := p + 1 ;
16725: LD_ADDR_VAR 0 1
16729: PUSH
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 1
16737: PLUS
16738: ST_TO_ADDR
// until p >= 60 ;
16739: LD_VAR 0 1
16743: PUSH
16744: LD_INT 60
16746: GREATEREQUAL
16747: IFFALSE 16710
// game_speed := 4 ;
16749: LD_ADDR_OWVAR 65
16753: PUSH
16754: LD_INT 4
16756: ST_TO_ADDR
// end ;
16757: PPOPN 1
16759: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16760: LD_EXP 24
16764: PUSH
16765: LD_EXP 51
16769: AND
16770: IFFALSE 16916
16772: GO 16774
16774: DISABLE
16775: LD_INT 0
16777: PPUSH
16778: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16779: LD_ADDR_VAR 0 1
16783: PUSH
16784: LD_INT 22
16786: PUSH
16787: LD_OWVAR 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: LD_INT 30
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 30
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// if not depot then
16833: LD_VAR 0 1
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 16916
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16842: LD_ADDR_VAR 0 2
16846: PUSH
16847: LD_VAR 0 1
16851: PUSH
16852: LD_INT 1
16854: PPUSH
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 12
16864: ARRAY
16865: PPUSH
16866: CALL_OW 274
16870: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16871: LD_VAR 0 2
16875: PPUSH
16876: LD_INT 1
16878: PPUSH
16879: LD_INT 0
16881: PPUSH
16882: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16886: LD_VAR 0 2
16890: PPUSH
16891: LD_INT 2
16893: PPUSH
16894: LD_INT 0
16896: PPUSH
16897: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16901: LD_VAR 0 2
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: LD_INT 0
16911: PPUSH
16912: CALL_OW 277
// end ;
16916: PPOPN 2
16918: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16919: LD_EXP 24
16923: PUSH
16924: LD_EXP 52
16928: AND
16929: IFFALSE 17026
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_INT 22
16944: PUSH
16945: LD_OWVAR 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 21
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 3
16966: PUSH
16967: LD_INT 23
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 69
16990: ST_TO_ADDR
// if not tmp then
16991: LD_VAR 0 1
16995: NOT
16996: IFFALSE 17000
// exit ;
16998: GO 17026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17000: LD_VAR 0 1
17004: PUSH
17005: LD_INT 1
17007: PPUSH
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 12
17017: ARRAY
17018: PPUSH
17019: LD_INT 200
17021: PPUSH
17022: CALL_OW 234
// end ;
17026: PPOPN 1
17028: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17029: LD_EXP 24
17033: PUSH
17034: LD_EXP 53
17038: AND
17039: IFFALSE 17118
17041: GO 17043
17043: DISABLE
17044: LD_INT 0
17046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_OWVAR 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 21
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PPUSH
17078: CALL_OW 69
17082: ST_TO_ADDR
// if not tmp then
17083: LD_VAR 0 1
17087: NOT
17088: IFFALSE 17092
// exit ;
17090: GO 17118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17092: LD_VAR 0 1
17096: PUSH
17097: LD_INT 1
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 12
17109: ARRAY
17110: PPUSH
17111: LD_INT 60
17113: PPUSH
17114: CALL_OW 234
// end ;
17118: PPOPN 1
17120: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17121: LD_EXP 24
17125: PUSH
17126: LD_EXP 54
17130: AND
17131: IFFALSE 17230
17133: GO 17135
17135: DISABLE
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
// begin enable ;
17140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17141: LD_ADDR_VAR 0 1
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 61
17160: PUSH
17161: EMPTY
17162: LIST
17163: PUSH
17164: LD_INT 33
17166: PUSH
17167: LD_INT 2
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 69
17183: ST_TO_ADDR
// if not tmp then
17184: LD_VAR 0 1
17188: NOT
17189: IFFALSE 17193
// exit ;
17191: GO 17230
// for i in tmp do
17193: LD_ADDR_VAR 0 2
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: FOR_IN
17204: IFFALSE 17228
// if IsControledBy ( i ) then
17206: LD_VAR 0 2
17210: PPUSH
17211: CALL_OW 312
17215: IFFALSE 17226
// ComUnlink ( i ) ;
17217: LD_VAR 0 2
17221: PPUSH
17222: CALL_OW 136
17226: GO 17203
17228: POP
17229: POP
// end ;
17230: PPOPN 2
17232: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17233: LD_EXP 24
17237: PUSH
17238: LD_EXP 55
17242: AND
17243: IFFALSE 17383
17245: GO 17247
17247: DISABLE
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
// begin ToLua ( displayPowell(); ) ;
17252: LD_STRING displayPowell();
17254: PPUSH
17255: CALL_OW 559
// uc_side := 0 ;
17259: LD_ADDR_OWVAR 20
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// uc_nation := 2 ;
17267: LD_ADDR_OWVAR 21
17271: PUSH
17272: LD_INT 2
17274: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17275: LD_ADDR_OWVAR 37
17279: PUSH
17280: LD_INT 14
17282: ST_TO_ADDR
// vc_engine := engine_siberite ;
17283: LD_ADDR_OWVAR 39
17287: PUSH
17288: LD_INT 3
17290: ST_TO_ADDR
// vc_control := control_apeman ;
17291: LD_ADDR_OWVAR 38
17295: PUSH
17296: LD_INT 5
17298: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17299: LD_ADDR_OWVAR 40
17303: PUSH
17304: LD_INT 29
17306: ST_TO_ADDR
// un := CreateVehicle ;
17307: LD_ADDR_VAR 0 2
17311: PUSH
17312: CALL_OW 45
17316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17329: LD_INT 35
17331: PPUSH
17332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17336: LD_VAR 0 2
17340: PPUSH
17341: LD_INT 22
17343: PUSH
17344: LD_OWVAR 2
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: PPUSH
17358: LD_VAR 0 2
17362: PPUSH
17363: CALL_OW 74
17367: PPUSH
17368: CALL_OW 115
// until IsDead ( un ) ;
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 301
17381: IFFALSE 17329
// end ;
17383: PPOPN 2
17385: END
// every 0 0$1 trigger StreamModeActive and sStu do
17386: LD_EXP 24
17390: PUSH
17391: LD_EXP 63
17395: AND
17396: IFFALSE 17412
17398: GO 17400
17400: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17401: LD_STRING displayStucuk();
17403: PPUSH
17404: CALL_OW 559
// ResetFog ;
17408: CALL_OW 335
// end ;
17412: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17413: LD_EXP 24
17417: PUSH
17418: LD_EXP 56
17422: AND
17423: IFFALSE 17564
17425: GO 17427
17427: DISABLE
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17432: LD_ADDR_VAR 0 2
17436: PUSH
17437: LD_INT 22
17439: PUSH
17440: LD_OWVAR 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 21
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 69
17467: ST_TO_ADDR
// if not tmp then
17468: LD_VAR 0 2
17472: NOT
17473: IFFALSE 17477
// exit ;
17475: GO 17564
// un := tmp [ rand ( 1 , tmp ) ] ;
17477: LD_ADDR_VAR 0 1
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_VAR 0 2
17494: PPUSH
17495: CALL_OW 12
17499: ARRAY
17500: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_INT 0
17508: PPUSH
17509: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17513: LD_VAR 0 1
17517: PPUSH
17518: LD_OWVAR 3
17522: PUSH
17523: LD_VAR 0 1
17527: DIFF
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 74
17538: PPUSH
17539: CALL_OW 115
// wait ( 0 0$20 ) ;
17543: LD_INT 700
17545: PPUSH
17546: CALL_OW 67
// SetSide ( un , your_side ) ;
17550: LD_VAR 0 1
17554: PPUSH
17555: LD_OWVAR 2
17559: PPUSH
17560: CALL_OW 235
// end ;
17564: PPOPN 2
17566: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17567: LD_EXP 24
17571: PUSH
17572: LD_EXP 57
17576: AND
17577: IFFALSE 17683
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17585: LD_ADDR_VAR 0 1
17589: PUSH
17590: LD_INT 22
17592: PUSH
17593: LD_OWVAR 2
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 30
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: ST_TO_ADDR
// if not depot then
17639: LD_VAR 0 1
17643: NOT
17644: IFFALSE 17648
// exit ;
17646: GO 17683
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: PPUSH
17657: CALL_OW 250
17661: PPUSH
17662: LD_VAR 0 1
17666: PUSH
17667: LD_INT 1
17669: ARRAY
17670: PPUSH
17671: CALL_OW 251
17675: PPUSH
17676: LD_INT 70
17678: PPUSH
17679: CALL_OW 495
// end ;
17683: PPOPN 1
17685: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17686: LD_EXP 24
17690: PUSH
17691: LD_EXP 58
17695: AND
17696: IFFALSE 17907
17698: GO 17700
17700: DISABLE
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17708: LD_ADDR_VAR 0 5
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_OWVAR 2
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 69
17743: ST_TO_ADDR
// if not tmp then
17744: LD_VAR 0 5
17748: NOT
17749: IFFALSE 17753
// exit ;
17751: GO 17907
// for i in tmp do
17753: LD_ADDR_VAR 0 1
17757: PUSH
17758: LD_VAR 0 5
17762: PUSH
17763: FOR_IN
17764: IFFALSE 17905
// begin d := rand ( 0 , 5 ) ;
17766: LD_ADDR_VAR 0 4
17770: PUSH
17771: LD_INT 0
17773: PPUSH
17774: LD_INT 5
17776: PPUSH
17777: CALL_OW 12
17781: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 250
17796: PPUSH
17797: LD_VAR 0 4
17801: PPUSH
17802: LD_INT 3
17804: PPUSH
17805: LD_INT 12
17807: PPUSH
17808: CALL_OW 12
17812: PPUSH
17813: CALL_OW 272
17817: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17818: LD_ADDR_VAR 0 3
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 251
17832: PPUSH
17833: LD_VAR 0 4
17837: PPUSH
17838: LD_INT 3
17840: PPUSH
17841: LD_INT 12
17843: PPUSH
17844: CALL_OW 12
17848: PPUSH
17849: CALL_OW 273
17853: ST_TO_ADDR
// if ValidHex ( x , y ) then
17854: LD_VAR 0 2
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: CALL_OW 488
17868: IFFALSE 17903
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17870: LD_VAR 0 1
17874: PPUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: LD_INT 3
17887: PPUSH
17888: LD_INT 6
17890: PPUSH
17891: CALL_OW 12
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 483
// end ;
17903: GO 17763
17905: POP
17906: POP
// end ;
17907: PPOPN 5
17909: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17910: LD_EXP 24
17914: PUSH
17915: LD_EXP 59
17919: AND
17920: IFFALSE 18014
17922: GO 17924
17924: DISABLE
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17929: LD_ADDR_VAR 0 2
17933: PUSH
17934: LD_INT 22
17936: PUSH
17937: LD_OWVAR 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: ST_TO_ADDR
// if not tmp then
17976: LD_VAR 0 2
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18014
// for i in tmp do
17985: LD_ADDR_VAR 0 1
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: FOR_IN
17996: IFFALSE 18012
// SetFuel ( i , 0 ) ;
17998: LD_VAR 0 1
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: CALL_OW 240
18010: GO 17995
18012: POP
18013: POP
// end ;
18014: PPOPN 2
18016: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18017: LD_EXP 24
18021: PUSH
18022: LD_EXP 60
18026: AND
18027: IFFALSE 18093
18029: GO 18031
18031: DISABLE
18032: LD_INT 0
18034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18035: LD_ADDR_VAR 0 1
18039: PUSH
18040: LD_INT 22
18042: PUSH
18043: LD_OWVAR 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 30
18054: PUSH
18055: LD_INT 29
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 1
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18093
// DestroyUnit ( tmp [ 1 ] ) ;
18080: LD_VAR 0 1
18084: PUSH
18085: LD_INT 1
18087: ARRAY
18088: PPUSH
18089: CALL_OW 65
// end ;
18093: PPOPN 1
18095: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18096: LD_EXP 24
18100: PUSH
18101: LD_EXP 62
18105: AND
18106: IFFALSE 18235
18108: GO 18110
18110: DISABLE
18111: LD_INT 0
18113: PPUSH
// begin uc_side := 0 ;
18114: LD_ADDR_OWVAR 20
18118: PUSH
18119: LD_INT 0
18121: ST_TO_ADDR
// uc_nation := nation_arabian ;
18122: LD_ADDR_OWVAR 21
18126: PUSH
18127: LD_INT 2
18129: ST_TO_ADDR
// hc_gallery :=  ;
18130: LD_ADDR_OWVAR 33
18134: PUSH
18135: LD_STRING 
18137: ST_TO_ADDR
// hc_name :=  ;
18138: LD_ADDR_OWVAR 26
18142: PUSH
18143: LD_STRING 
18145: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18146: LD_INT 1
18148: PPUSH
18149: LD_INT 11
18151: PPUSH
18152: LD_INT 10
18154: PPUSH
18155: CALL_OW 380
// un := CreateHuman ;
18159: LD_ADDR_VAR 0 1
18163: PUSH
18164: CALL_OW 44
18168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18181: LD_INT 35
18183: PPUSH
18184: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18188: LD_VAR 0 1
18192: PPUSH
18193: LD_INT 22
18195: PUSH
18196: LD_OWVAR 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: PPUSH
18210: LD_VAR 0 1
18214: PPUSH
18215: CALL_OW 74
18219: PPUSH
18220: CALL_OW 115
// until IsDead ( un ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 301
18233: IFFALSE 18181
// end ;
18235: PPOPN 1
18237: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18238: LD_EXP 24
18242: PUSH
18243: LD_EXP 64
18247: AND
18248: IFFALSE 18260
18250: GO 18252
18252: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18253: LD_STRING earthquake(getX(game), 0, 32)
18255: PPUSH
18256: CALL_OW 559
18260: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18261: LD_EXP 24
18265: PUSH
18266: LD_EXP 65
18270: AND
18271: IFFALSE 18362
18273: GO 18275
18275: DISABLE
18276: LD_INT 0
18278: PPUSH
// begin enable ;
18279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18280: LD_ADDR_VAR 0 1
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_OWVAR 2
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 21
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 33
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: PPUSH
18322: CALL_OW 69
18326: ST_TO_ADDR
// if not tmp then
18327: LD_VAR 0 1
18331: NOT
18332: IFFALSE 18336
// exit ;
18334: GO 18362
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18336: LD_VAR 0 1
18340: PUSH
18341: LD_INT 1
18343: PPUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 12
18353: ARRAY
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: CALL_OW 234
// end ;
18362: PPOPN 1
18364: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18365: LD_EXP 24
18369: PUSH
18370: LD_EXP 66
18374: AND
18375: IFFALSE 18516
18377: GO 18379
18379: DISABLE
18380: LD_INT 0
18382: PPUSH
18383: PPUSH
18384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18385: LD_ADDR_VAR 0 3
18389: PUSH
18390: LD_INT 22
18392: PUSH
18393: LD_OWVAR 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 25
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: ST_TO_ADDR
// if not tmp then
18421: LD_VAR 0 3
18425: NOT
18426: IFFALSE 18430
// exit ;
18428: GO 18516
// un := tmp [ rand ( 1 , tmp ) ] ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 1
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: CALL_OW 12
18452: ARRAY
18453: ST_TO_ADDR
// if Crawls ( un ) then
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 318
18463: IFFALSE 18474
// ComWalk ( un ) ;
18465: LD_VAR 0 2
18469: PPUSH
18470: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_INT 9
18481: PPUSH
18482: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18486: LD_INT 28
18488: PPUSH
18489: LD_OWVAR 2
18493: PPUSH
18494: LD_INT 2
18496: PPUSH
18497: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18501: LD_INT 29
18503: PPUSH
18504: LD_OWVAR 2
18508: PPUSH
18509: LD_INT 2
18511: PPUSH
18512: CALL_OW 322
// end ;
18516: PPOPN 3
18518: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18519: LD_EXP 24
18523: PUSH
18524: LD_EXP 67
18528: AND
18529: IFFALSE 18640
18531: GO 18533
18533: DISABLE
18534: LD_INT 0
18536: PPUSH
18537: PPUSH
18538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18539: LD_ADDR_VAR 0 3
18543: PUSH
18544: LD_INT 22
18546: PUSH
18547: LD_OWVAR 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 25
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PPUSH
18570: CALL_OW 69
18574: ST_TO_ADDR
// if not tmp then
18575: LD_VAR 0 3
18579: NOT
18580: IFFALSE 18584
// exit ;
18582: GO 18640
// un := tmp [ rand ( 1 , tmp ) ] ;
18584: LD_ADDR_VAR 0 2
18588: PUSH
18589: LD_VAR 0 3
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: ST_TO_ADDR
// if Crawls ( un ) then
18608: LD_VAR 0 2
18612: PPUSH
18613: CALL_OW 318
18617: IFFALSE 18628
// ComWalk ( un ) ;
18619: LD_VAR 0 2
18623: PPUSH
18624: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 8
18635: PPUSH
18636: CALL_OW 336
// end ;
18640: PPOPN 3
18642: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18643: LD_EXP 24
18647: PUSH
18648: LD_EXP 68
18652: AND
18653: IFFALSE 18797
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_INT 22
18669: PUSH
18670: LD_OWVAR 2
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 21
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 34
18694: PUSH
18695: LD_INT 12
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 34
18704: PUSH
18705: LD_INT 51
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 34
18714: PUSH
18715: LD_INT 32
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: PPUSH
18733: CALL_OW 69
18737: ST_TO_ADDR
// if not tmp then
18738: LD_VAR 0 2
18742: NOT
18743: IFFALSE 18747
// exit ;
18745: GO 18797
// for i in tmp do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 2
18756: PUSH
18757: FOR_IN
18758: IFFALSE 18795
// if GetCargo ( i , mat_artifact ) = 0 then
18760: LD_VAR 0 1
18764: PPUSH
18765: LD_INT 4
18767: PPUSH
18768: CALL_OW 289
18772: PUSH
18773: LD_INT 0
18775: EQUAL
18776: IFFALSE 18793
// SetCargo ( i , mat_siberit , 100 ) ;
18778: LD_VAR 0 1
18782: PPUSH
18783: LD_INT 3
18785: PPUSH
18786: LD_INT 100
18788: PPUSH
18789: CALL_OW 290
18793: GO 18757
18795: POP
18796: POP
// end ;
18797: PPOPN 2
18799: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18800: LD_EXP 24
18804: PUSH
18805: LD_EXP 69
18809: AND
18810: IFFALSE 18963
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: LD_INT 22
18826: PUSH
18827: LD_OWVAR 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PPUSH
18836: CALL_OW 69
18840: ST_TO_ADDR
// if not tmp then
18841: LD_VAR 0 2
18845: NOT
18846: IFFALSE 18850
// exit ;
18848: GO 18963
// for i := 1 to 2 do
18850: LD_ADDR_VAR 0 1
18854: PUSH
18855: DOUBLE
18856: LD_INT 1
18858: DEC
18859: ST_TO_ADDR
18860: LD_INT 2
18862: PUSH
18863: FOR_TO
18864: IFFALSE 18961
// begin uc_side := your_side ;
18866: LD_ADDR_OWVAR 20
18870: PUSH
18871: LD_OWVAR 2
18875: ST_TO_ADDR
// uc_nation := nation_american ;
18876: LD_ADDR_OWVAR 21
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// vc_chassis := us_morphling ;
18884: LD_ADDR_OWVAR 37
18888: PUSH
18889: LD_INT 5
18891: ST_TO_ADDR
// vc_engine := engine_siberite ;
18892: LD_ADDR_OWVAR 39
18896: PUSH
18897: LD_INT 3
18899: ST_TO_ADDR
// vc_control := control_computer ;
18900: LD_ADDR_OWVAR 38
18904: PUSH
18905: LD_INT 3
18907: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18908: LD_ADDR_OWVAR 40
18912: PUSH
18913: LD_INT 10
18915: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18916: CALL_OW 45
18920: PPUSH
18921: LD_VAR 0 2
18925: PUSH
18926: LD_INT 1
18928: ARRAY
18929: PPUSH
18930: CALL_OW 250
18934: PPUSH
18935: LD_VAR 0 2
18939: PUSH
18940: LD_INT 1
18942: ARRAY
18943: PPUSH
18944: CALL_OW 251
18948: PPUSH
18949: LD_INT 12
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 50
// end ;
18959: GO 18863
18961: POP
18962: POP
// end ;
18963: PPOPN 2
18965: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18966: LD_EXP 24
18970: PUSH
18971: LD_EXP 70
18975: AND
18976: IFFALSE 19198
18978: GO 18980
18980: DISABLE
18981: LD_INT 0
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18989: LD_ADDR_VAR 0 6
18993: PUSH
18994: LD_INT 22
18996: PUSH
18997: LD_OWVAR 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 21
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: LD_INT 23
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 6
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19198
// s1 := rand ( 1 , 4 ) ;
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_INT 4
19062: PPUSH
19063: CALL_OW 12
19067: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19068: LD_ADDR_VAR 0 4
19072: PUSH
19073: LD_VAR 0 6
19077: PUSH
19078: LD_INT 1
19080: ARRAY
19081: PPUSH
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 259
19091: ST_TO_ADDR
// if s1 = 1 then
19092: LD_VAR 0 2
19096: PUSH
19097: LD_INT 1
19099: EQUAL
19100: IFFALSE 19120
// s2 := rand ( 2 , 4 ) else
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_INT 2
19109: PPUSH
19110: LD_INT 4
19112: PPUSH
19113: CALL_OW 12
19117: ST_TO_ADDR
19118: GO 19128
// s2 := 1 ;
19120: LD_ADDR_VAR 0 3
19124: PUSH
19125: LD_INT 1
19127: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_VAR 0 6
19137: PUSH
19138: LD_INT 1
19140: ARRAY
19141: PPUSH
19142: LD_VAR 0 3
19146: PPUSH
19147: CALL_OW 259
19151: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19152: LD_VAR 0 6
19156: PUSH
19157: LD_INT 1
19159: ARRAY
19160: PPUSH
19161: LD_VAR 0 2
19165: PPUSH
19166: LD_VAR 0 5
19170: PPUSH
19171: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19175: LD_VAR 0 6
19179: PUSH
19180: LD_INT 1
19182: ARRAY
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: CALL_OW 237
// end ;
19198: PPOPN 6
19200: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19201: LD_EXP 24
19205: PUSH
19206: LD_EXP 71
19210: AND
19211: IFFALSE 19290
19213: GO 19215
19215: DISABLE
19216: LD_INT 0
19218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19219: LD_ADDR_VAR 0 1
19223: PUSH
19224: LD_INT 22
19226: PUSH
19227: LD_OWVAR 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 3
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: ST_TO_ADDR
// if not tmp then
19255: LD_VAR 0 1
19259: NOT
19260: IFFALSE 19264
// exit ;
19262: GO 19290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19264: LD_VAR 0 1
19268: PUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL_OW 12
19281: ARRAY
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 234
// end ;
19290: PPOPN 1
19292: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19293: LD_EXP 24
19297: PUSH
19298: LD_EXP 72
19302: AND
19303: IFFALSE 19415
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19312: LD_ADDR_VAR 0 2
19316: PUSH
19317: LD_INT 22
19319: PUSH
19320: LD_OWVAR 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 30
19334: PUSH
19335: LD_INT 27
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 30
19344: PUSH
19345: LD_INT 26
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 30
19354: PUSH
19355: LD_INT 28
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PPUSH
19372: CALL_OW 69
19376: ST_TO_ADDR
// if not tmp then
19377: LD_VAR 0 2
19381: NOT
19382: IFFALSE 19386
// exit ;
19384: GO 19415
// for i in tmp do
19386: LD_ADDR_VAR 0 1
19390: PUSH
19391: LD_VAR 0 2
19395: PUSH
19396: FOR_IN
19397: IFFALSE 19413
// SetLives ( i , 1 ) ;
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_INT 1
19406: PPUSH
19407: CALL_OW 234
19411: GO 19396
19413: POP
19414: POP
// end ;
19415: PPOPN 2
19417: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19418: LD_EXP 24
19422: PUSH
19423: LD_EXP 73
19427: AND
19428: IFFALSE 19702
19430: GO 19432
19432: DISABLE
19433: LD_INT 0
19435: PPUSH
19436: PPUSH
19437: PPUSH
// begin i := rand ( 1 , 7 ) ;
19438: LD_ADDR_VAR 0 1
19442: PUSH
19443: LD_INT 1
19445: PPUSH
19446: LD_INT 7
19448: PPUSH
19449: CALL_OW 12
19453: ST_TO_ADDR
// case i of 1 :
19454: LD_VAR 0 1
19458: PUSH
19459: LD_INT 1
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19477
19467: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19468: LD_STRING earthquake(getX(game), 0, 32)
19470: PPUSH
19471: CALL_OW 559
19475: GO 19702
19477: LD_INT 2
19479: DOUBLE
19480: EQUAL
19481: IFTRUE 19485
19483: GO 19499
19485: POP
// begin ToLua ( displayStucuk(); ) ;
19486: LD_STRING displayStucuk();
19488: PPUSH
19489: CALL_OW 559
// ResetFog ;
19493: CALL_OW 335
// end ; 3 :
19497: GO 19702
19499: LD_INT 3
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19611
19507: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19508: LD_ADDR_VAR 0 2
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_OWVAR 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 25
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PPUSH
19539: CALL_OW 69
19543: ST_TO_ADDR
// if not tmp then
19544: LD_VAR 0 2
19548: NOT
19549: IFFALSE 19553
// exit ;
19551: GO 19702
// un := tmp [ rand ( 1 , tmp ) ] ;
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: LD_VAR 0 2
19562: PUSH
19563: LD_INT 1
19565: PPUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: CALL_OW 12
19575: ARRAY
19576: ST_TO_ADDR
// if Crawls ( un ) then
19577: LD_VAR 0 3
19581: PPUSH
19582: CALL_OW 318
19586: IFFALSE 19597
// ComWalk ( un ) ;
19588: LD_VAR 0 3
19592: PPUSH
19593: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_INT 8
19604: PPUSH
19605: CALL_OW 336
// end ; 4 :
19609: GO 19702
19611: LD_INT 4
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19680
19619: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_OWVAR 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 30
19639: PUSH
19640: LD_INT 29
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PPUSH
19651: CALL_OW 69
19655: ST_TO_ADDR
// if not tmp then
19656: LD_VAR 0 2
19660: NOT
19661: IFFALSE 19665
// exit ;
19663: GO 19702
// DestroyUnit ( tmp [ 1 ] ) ;
19665: LD_VAR 0 2
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: PPUSH
19674: CALL_OW 65
// end ; 5 .. 7 :
19678: GO 19702
19680: LD_INT 5
19682: DOUBLE
19683: GREATEREQUAL
19684: IFFALSE 19692
19686: LD_INT 7
19688: DOUBLE
19689: LESSEQUAL
19690: IFTRUE 19694
19692: GO 19701
19694: POP
// StreamSibBomb ; end ;
19695: CALL 15982 0 0
19699: GO 19702
19701: POP
// end ;
19702: PPOPN 3
19704: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19705: LD_EXP 24
19709: PUSH
19710: LD_EXP 74
19714: AND
19715: IFFALSE 19871
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
19723: PPUSH
19724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19725: LD_ADDR_VAR 0 2
19729: PUSH
19730: LD_INT 81
19732: PUSH
19733: LD_OWVAR 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 21
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: ST_TO_ADDR
// if not tmp then
19779: LD_VAR 0 2
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19871
// p := 0 ;
19788: LD_ADDR_VAR 0 3
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19796: LD_INT 35
19798: PPUSH
19799: CALL_OW 67
// p := p + 1 ;
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 1
19815: PLUS
19816: ST_TO_ADDR
// for i in tmp do
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_VAR 0 2
19826: PUSH
19827: FOR_IN
19828: IFFALSE 19859
// if GetLives ( i ) < 1000 then
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 256
19839: PUSH
19840: LD_INT 1000
19842: LESS
19843: IFFALSE 19857
// SetLives ( i , 1000 ) ;
19845: LD_VAR 0 1
19849: PPUSH
19850: LD_INT 1000
19852: PPUSH
19853: CALL_OW 234
19857: GO 19827
19859: POP
19860: POP
// until p > 20 ;
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 20
19868: GREATER
19869: IFFALSE 19796
// end ;
19871: PPOPN 3
19873: END
// every 0 0$1 trigger StreamModeActive and sTime do
19874: LD_EXP 24
19878: PUSH
19879: LD_EXP 75
19883: AND
19884: IFFALSE 19919
19886: GO 19888
19888: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19889: LD_INT 28
19891: PPUSH
19892: LD_OWVAR 2
19896: PPUSH
19897: LD_INT 2
19899: PPUSH
19900: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19904: LD_INT 30
19906: PPUSH
19907: LD_OWVAR 2
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 322
// end ;
19919: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19920: LD_EXP 24
19924: PUSH
19925: LD_EXP 76
19929: AND
19930: IFFALSE 20051
19932: GO 19934
19934: DISABLE
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19939: LD_ADDR_VAR 0 2
19943: PUSH
19944: LD_INT 22
19946: PUSH
19947: LD_OWVAR 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 3
19968: PUSH
19969: LD_INT 23
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: PPUSH
19988: CALL_OW 69
19992: ST_TO_ADDR
// if not tmp then
19993: LD_VAR 0 2
19997: NOT
19998: IFFALSE 20002
// exit ;
20000: GO 20051
// for i in tmp do
20002: LD_ADDR_VAR 0 1
20006: PUSH
20007: LD_VAR 0 2
20011: PUSH
20012: FOR_IN
20013: IFFALSE 20049
// begin if Crawls ( i ) then
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL_OW 318
20024: IFFALSE 20035
// ComWalk ( i ) ;
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 138
// SetClass ( i , 2 ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: LD_INT 2
20042: PPUSH
20043: CALL_OW 336
// end ;
20047: GO 20012
20049: POP
20050: POP
// end ;
20051: PPOPN 2
20053: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20054: LD_EXP 24
20058: PUSH
20059: LD_EXP 77
20063: AND
20064: IFFALSE 20345
20066: GO 20068
20068: DISABLE
20069: LD_INT 0
20071: PPUSH
20072: PPUSH
20073: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20074: LD_OWVAR 2
20078: PPUSH
20079: LD_INT 9
20081: PPUSH
20082: LD_INT 1
20084: PPUSH
20085: LD_INT 1
20087: PPUSH
20088: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20092: LD_INT 9
20094: PPUSH
20095: LD_OWVAR 2
20099: PPUSH
20100: CALL_OW 343
// uc_side := 9 ;
20104: LD_ADDR_OWVAR 20
20108: PUSH
20109: LD_INT 9
20111: ST_TO_ADDR
// uc_nation := 2 ;
20112: LD_ADDR_OWVAR 21
20116: PUSH
20117: LD_INT 2
20119: ST_TO_ADDR
// hc_name := Dark Warrior ;
20120: LD_ADDR_OWVAR 26
20124: PUSH
20125: LD_STRING Dark Warrior
20127: ST_TO_ADDR
// hc_gallery :=  ;
20128: LD_ADDR_OWVAR 33
20132: PUSH
20133: LD_STRING 
20135: ST_TO_ADDR
// hc_noskilllimit := true ;
20136: LD_ADDR_OWVAR 76
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20144: LD_ADDR_OWVAR 31
20148: PUSH
20149: LD_INT 30
20151: PUSH
20152: LD_INT 30
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 30
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: ST_TO_ADDR
// un := CreateHuman ;
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: CALL_OW 44
20176: ST_TO_ADDR
// hc_noskilllimit := false ;
20177: LD_ADDR_OWVAR 76
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20185: LD_VAR 0 3
20189: PPUSH
20190: LD_INT 1
20192: PPUSH
20193: CALL_OW 51
// p := 0 ;
20197: LD_ADDR_VAR 0 2
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20205: LD_INT 35
20207: PPUSH
20208: CALL_OW 67
// p := p + 1 ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_VAR 0 2
20221: PUSH
20222: LD_INT 1
20224: PLUS
20225: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20226: LD_VAR 0 3
20230: PPUSH
20231: CALL_OW 256
20235: PUSH
20236: LD_INT 1000
20238: LESS
20239: IFFALSE 20253
// SetLives ( un , 1000 ) ;
20241: LD_VAR 0 3
20245: PPUSH
20246: LD_INT 1000
20248: PPUSH
20249: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20253: LD_VAR 0 3
20257: PPUSH
20258: LD_INT 81
20260: PUSH
20261: LD_OWVAR 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 91
20272: PUSH
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL_OW 69
20294: PPUSH
20295: LD_VAR 0 3
20299: PPUSH
20300: CALL_OW 74
20304: PPUSH
20305: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20309: LD_VAR 0 2
20313: PUSH
20314: LD_INT 60
20316: GREATER
20317: PUSH
20318: LD_VAR 0 3
20322: PPUSH
20323: CALL_OW 301
20327: OR
20328: IFFALSE 20205
// if un then
20330: LD_VAR 0 3
20334: IFFALSE 20345
// RemoveUnit ( un ) ;
20336: LD_VAR 0 3
20340: PPUSH
20341: CALL_OW 64
// end ; end_of_file end_of_file
20345: PPOPN 3
20347: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20354: LD_VAR 0 1
20358: PPUSH
20359: CALL_OW 264
20363: PUSH
20364: LD_EXP 82
20368: EQUAL
20369: IFFALSE 20441
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20371: LD_INT 68
20373: PPUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: CALL_OW 255
20383: PPUSH
20384: CALL_OW 321
20388: PUSH
20389: LD_INT 2
20391: EQUAL
20392: IFFALSE 20404
// eff := 70 else
20394: LD_ADDR_VAR 0 4
20398: PUSH
20399: LD_INT 70
20401: ST_TO_ADDR
20402: GO 20412
// eff := 30 ;
20404: LD_ADDR_VAR 0 4
20408: PUSH
20409: LD_INT 30
20411: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 250
20421: PPUSH
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 251
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 495
// end ; end ;
20441: LD_VAR 0 2
20445: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20446: LD_INT 0
20448: PPUSH
// end ;
20449: LD_VAR 0 4
20453: RET
// export function SOS_Command ( cmd ) ; begin
20454: LD_INT 0
20456: PPUSH
// end ;
20457: LD_VAR 0 2
20461: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20462: LD_VAR 0 1
20466: PUSH
20467: LD_INT 255
20469: EQUAL
20470: PUSH
20471: LD_VAR 0 2
20475: PPUSH
20476: CALL_OW 264
20480: PUSH
20481: LD_INT 14
20483: PUSH
20484: LD_INT 53
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: IN
20491: AND
20492: PUSH
20493: LD_VAR 0 4
20497: PPUSH
20498: LD_VAR 0 5
20502: PPUSH
20503: CALL_OW 488
20507: AND
20508: IFFALSE 20532
// CutTreeXYR ( unit , x , y , 12 ) ;
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_VAR 0 5
20524: PPUSH
20525: LD_INT 12
20527: PPUSH
20528: CALL 20535 0 4
// end ;
20532: PPOPN 5
20534: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20535: LD_INT 0
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
20544: PPUSH
20545: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20546: LD_VAR 0 1
20550: NOT
20551: PUSH
20552: LD_VAR 0 2
20556: PPUSH
20557: LD_VAR 0 3
20561: PPUSH
20562: CALL_OW 488
20566: NOT
20567: OR
20568: PUSH
20569: LD_VAR 0 4
20573: NOT
20574: OR
20575: IFFALSE 20579
// exit ;
20577: GO 20919
// list := [ ] ;
20579: LD_ADDR_VAR 0 13
20583: PUSH
20584: EMPTY
20585: ST_TO_ADDR
// if x - r < 0 then
20586: LD_VAR 0 2
20590: PUSH
20591: LD_VAR 0 4
20595: MINUS
20596: PUSH
20597: LD_INT 0
20599: LESS
20600: IFFALSE 20612
// min_x := 0 else
20602: LD_ADDR_VAR 0 7
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
20610: GO 20628
// min_x := x - r ;
20612: LD_ADDR_VAR 0 7
20616: PUSH
20617: LD_VAR 0 2
20621: PUSH
20622: LD_VAR 0 4
20626: MINUS
20627: ST_TO_ADDR
// if y - r < 0 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_VAR 0 4
20637: MINUS
20638: PUSH
20639: LD_INT 0
20641: LESS
20642: IFFALSE 20654
// min_y := 0 else
20644: LD_ADDR_VAR 0 8
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
20652: GO 20670
// min_y := y - r ;
20654: LD_ADDR_VAR 0 8
20658: PUSH
20659: LD_VAR 0 3
20663: PUSH
20664: LD_VAR 0 4
20668: MINUS
20669: ST_TO_ADDR
// max_x := x + r ;
20670: LD_ADDR_VAR 0 9
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: LD_VAR 0 4
20684: PLUS
20685: ST_TO_ADDR
// max_y := y + r ;
20686: LD_ADDR_VAR 0 10
20690: PUSH
20691: LD_VAR 0 3
20695: PUSH
20696: LD_VAR 0 4
20700: PLUS
20701: ST_TO_ADDR
// for _x = min_x to max_x do
20702: LD_ADDR_VAR 0 11
20706: PUSH
20707: DOUBLE
20708: LD_VAR 0 7
20712: DEC
20713: ST_TO_ADDR
20714: LD_VAR 0 9
20718: PUSH
20719: FOR_TO
20720: IFFALSE 20837
// for _y = min_y to max_y do
20722: LD_ADDR_VAR 0 12
20726: PUSH
20727: DOUBLE
20728: LD_VAR 0 8
20732: DEC
20733: ST_TO_ADDR
20734: LD_VAR 0 10
20738: PUSH
20739: FOR_TO
20740: IFFALSE 20833
// begin if not ValidHex ( _x , _y ) then
20742: LD_VAR 0 11
20746: PPUSH
20747: LD_VAR 0 12
20751: PPUSH
20752: CALL_OW 488
20756: NOT
20757: IFFALSE 20761
// continue ;
20759: GO 20739
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20761: LD_VAR 0 11
20765: PPUSH
20766: LD_VAR 0 12
20770: PPUSH
20771: CALL_OW 351
20775: PUSH
20776: LD_VAR 0 11
20780: PPUSH
20781: LD_VAR 0 12
20785: PPUSH
20786: CALL_OW 554
20790: AND
20791: IFFALSE 20831
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20793: LD_ADDR_VAR 0 13
20797: PUSH
20798: LD_VAR 0 13
20802: PPUSH
20803: LD_VAR 0 13
20807: PUSH
20808: LD_INT 1
20810: PLUS
20811: PPUSH
20812: LD_VAR 0 11
20816: PUSH
20817: LD_VAR 0 12
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PPUSH
20826: CALL_OW 2
20830: ST_TO_ADDR
// end ;
20831: GO 20739
20833: POP
20834: POP
20835: GO 20719
20837: POP
20838: POP
// if not list then
20839: LD_VAR 0 13
20843: NOT
20844: IFFALSE 20848
// exit ;
20846: GO 20919
// for i in list do
20848: LD_ADDR_VAR 0 6
20852: PUSH
20853: LD_VAR 0 13
20857: PUSH
20858: FOR_IN
20859: IFFALSE 20917
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_STRING M
20868: PUSH
20869: LD_VAR 0 6
20873: PUSH
20874: LD_INT 1
20876: ARRAY
20877: PUSH
20878: LD_VAR 0 6
20882: PUSH
20883: LD_INT 2
20885: ARRAY
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: PPUSH
20911: CALL_OW 447
20915: GO 20858
20917: POP
20918: POP
// end ; end_of_file
20919: LD_VAR 0 5
20923: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
20924: GO 20926
20926: DISABLE
// begin ru_radar := 98 ;
20927: LD_ADDR_EXP 78
20931: PUSH
20932: LD_INT 98
20934: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20935: LD_ADDR_EXP 79
20939: PUSH
20940: LD_INT 89
20942: ST_TO_ADDR
// us_hack := 99 ;
20943: LD_ADDR_EXP 80
20947: PUSH
20948: LD_INT 99
20950: ST_TO_ADDR
// us_artillery := 97 ;
20951: LD_ADDR_EXP 81
20955: PUSH
20956: LD_INT 97
20958: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20959: LD_ADDR_EXP 82
20963: PUSH
20964: LD_INT 91
20966: ST_TO_ADDR
// tech_Artillery := 80 ;
20967: LD_ADDR_EXP 83
20971: PUSH
20972: LD_INT 80
20974: ST_TO_ADDR
// tech_RadMat := 81 ;
20975: LD_ADDR_EXP 84
20979: PUSH
20980: LD_INT 81
20982: ST_TO_ADDR
// tech_BasicTools := 82 ;
20983: LD_ADDR_EXP 85
20987: PUSH
20988: LD_INT 82
20990: ST_TO_ADDR
// tech_Cargo := 83 ;
20991: LD_ADDR_EXP 86
20995: PUSH
20996: LD_INT 83
20998: ST_TO_ADDR
// tech_Track := 84 ;
20999: LD_ADDR_EXP 87
21003: PUSH
21004: LD_INT 84
21006: ST_TO_ADDR
// tech_Crane := 85 ;
21007: LD_ADDR_EXP 88
21011: PUSH
21012: LD_INT 85
21014: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21015: LD_ADDR_EXP 89
21019: PUSH
21020: LD_INT 86
21022: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21023: LD_ADDR_EXP 90
21027: PUSH
21028: LD_INT 87
21030: ST_TO_ADDR
// end ;
21031: END
