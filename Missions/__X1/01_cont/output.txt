// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2901 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = 20 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side := 3 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// uc_nation := 3 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// russianForces := [ ] ;
1387: LD_ADDR_EXP 21
1391: PUSH
1392: EMPTY
1393: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1394: LD_ADDR_EXP 20
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1401: LD_ADDR_VAR 0 5
1405: PUSH
1406: LD_INT 11
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: CALL_OW 517
1416: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: CALL_OW 69
1436: PUSH
1437: FOR_IN
1438: IFFALSE 1482
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1440: LD_VAR 0 2
1444: PPUSH
1445: CALL_OW 274
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 200
1455: PPUSH
1456: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 274
1469: PPUSH
1470: LD_INT 2
1472: PPUSH
1473: LD_INT 10
1475: PPUSH
1476: CALL_OW 277
// end ;
1480: GO 1437
1482: POP
1483: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_INT 30
1491: PUSH
1492: LD_INT 31
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 69
1503: PUSH
1504: FOR_IN
1505: IFFALSE 1579
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_OWVAR 67
1517: PUSH
1518: LD_INT 1
1520: MINUS
1521: PPUSH
1522: CALL_OW 380
// un := CreateHuman ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: CALL_OW 44
1535: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1536: LD_VAR 0 4
1540: PPUSH
1541: LD_VAR 0 2
1545: PPUSH
1546: CALL_OW 254
1550: PUSH
1551: LD_INT 3
1553: MINUS
1554: PUSH
1555: LD_INT 6
1557: MOD
1558: PPUSH
1559: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_VAR 0 2
1572: PPUSH
1573: CALL_OW 52
// end ;
1577: GO 1504
1579: POP
1580: POP
// for i = 1 to 5 do
1581: LD_ADDR_VAR 0 2
1585: PUSH
1586: DOUBLE
1587: LD_INT 1
1589: DEC
1590: ST_TO_ADDR
1591: LD_INT 5
1593: PUSH
1594: FOR_TO
1595: IFFALSE 1677
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PPUSH
1608: CALL_OW 380
// un := CreateHuman ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: CALL_OW 44
1621: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1622: LD_VAR 0 4
1626: PPUSH
1627: LD_INT 9
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
// ComHold ( un ) ;
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1646: LD_ADDR_EXP 21
1650: PUSH
1651: LD_EXP 21
1655: PPUSH
1656: LD_EXP 21
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL_OW 1
1674: ST_TO_ADDR
// end ;
1675: GO 1594
1677: POP
1678: POP
// for i := 1 to Difficulty + 1 do
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: DOUBLE
1685: LD_INT 1
1687: DEC
1688: ST_TO_ADDR
1689: LD_OWVAR 67
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: PUSH
1698: FOR_TO
1699: IFFALSE 1799
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1701: LD_INT 0
1703: PPUSH
1704: LD_INT 1
1706: PPUSH
1707: LD_OWVAR 67
1711: PPUSH
1712: CALL_OW 380
// un := CreateHuman ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 44
1725: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PPUSH
1746: LD_VAR 0 5
1750: PUSH
1751: LD_INT 2
1753: ARRAY
1754: PUSH
1755: LD_VAR 0 2
1759: ARRAY
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1768: LD_ADDR_EXP 20
1772: PUSH
1773: LD_EXP 20
1777: PPUSH
1778: LD_EXP 20
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: PPUSH
1787: LD_VAR 0 4
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// end ;
1797: GO 1698
1799: POP
1800: POP
// vc_chassis := ru_medium_wheeled ;
1801: LD_ADDR_OWVAR 37
1805: PUSH
1806: LD_INT 21
1808: ST_TO_ADDR
// vc_engine := engine_combustion ;
1809: LD_ADDR_OWVAR 39
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// vc_control := control_manual ;
1817: LD_ADDR_OWVAR 38
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 42
1832: ST_TO_ADDR
// russianTank := CreateVehicle ;
1833: LD_ADDR_EXP 22
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1843: LD_EXP 22
1847: PPUSH
1848: LD_INT 121
1850: PPUSH
1851: LD_INT 25
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1861: LD_INT 0
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: LD_OWVAR 67
1871: PPUSH
1872: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1876: CALL_OW 44
1880: PPUSH
1881: LD_EXP 22
1885: PPUSH
1886: CALL_OW 52
// if Difficulty > 1 then
1890: LD_OWVAR 67
1894: PUSH
1895: LD_INT 1
1897: GREATER
1898: IFFALSE 1984
// begin bc_type := b_breastwork ;
1900: LD_ADDR_OWVAR 42
1904: PUSH
1905: LD_INT 31
1907: ST_TO_ADDR
// bc_level := 2 ;
1908: LD_ADDR_OWVAR 43
1912: PUSH
1913: LD_INT 2
1915: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1916: LD_ADDR_VAR 0 3
1920: PUSH
1921: LD_INT 143
1923: PPUSH
1924: LD_INT 88
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 47
1934: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 52
// end ; if Difficulty > 2 then
1984: LD_OWVAR 67
1988: PUSH
1989: LD_INT 2
1991: GREATER
1992: IFFALSE 2048
// begin for i := 1 to 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 2
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2046
// begin PrepareHuman ( false , 1 , 2 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2023: CALL_OW 44
2027: PPUSH
2028: LD_INT 156
2030: PPUSH
2031: LD_INT 108
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 50
// end ;
2044: GO 2007
2046: POP
2047: POP
// end ; end ;
2048: LD_VAR 0 1
2052: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2053: LD_EXP 20
2057: IFFALSE 2363
2059: GO 2061
2061: DISABLE
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in russianForestPatrol do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_EXP 20
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2361
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 53
2091: PPUSH
2092: LD_INT 89
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 30
2102: LESS
2103: IFFALSE 2122
// begin ComMoveXY ( i , 114 , 80 ) ;
2105: LD_VAR 0 1
2109: PPUSH
2110: LD_INT 114
2112: PPUSH
2113: LD_INT 80
2115: PPUSH
2116: CALL_OW 111
// continue ;
2120: GO 2081
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_EXP 20
2131: PUSH
2132: LD_VAR 0 1
2136: DIFF
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 74
2147: ST_TO_ADDR
// if tmp then
2148: LD_VAR 0 6
2152: IFFALSE 2220
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_VAR 0 6
2163: PPUSH
2164: CALL_OW 296
2168: PUSH
2169: LD_INT 14
2171: LESS
2172: PUSH
2173: LD_VAR 0 6
2177: PPUSH
2178: CALL_OW 256
2182: PUSH
2183: LD_INT 999
2185: LESS
2186: AND
2187: IFFALSE 2220
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 6
2208: PPUSH
2209: CALL_OW 251
2213: PPUSH
2214: CALL_OW 114
// break ;
2218: GO 2361
// end ; if not HasTask ( i ) then
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 314
2229: NOT
2230: IFFALSE 2359
// begin d := rand ( 0 , 5 ) ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: CALL_OW 12
2247: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: LD_INT 3
2255: PPUSH
2256: LD_INT 7
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2264: LD_ADDR_VAR 0 4
2268: PUSH
2269: LD_VAR 0 1
2273: PPUSH
2274: CALL_OW 250
2278: PPUSH
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_VAR 0 3
2288: PPUSH
2289: CALL_OW 272
2293: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2294: LD_ADDR_VAR 0 5
2298: PUSH
2299: LD_VAR 0 1
2303: PPUSH
2304: CALL_OW 251
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_VAR 0 3
2318: PPUSH
2319: CALL_OW 273
2323: ST_TO_ADDR
// if ValidHex ( x , y ) then
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_VAR 0 5
2333: PPUSH
2334: CALL_OW 488
2338: IFFALSE 2359
// ComAgressiveMove ( i , x , y ) ;
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_VAR 0 5
2354: PPUSH
2355: CALL_OW 114
// end ; end ;
2359: GO 2081
2361: POP
2362: POP
// end ;
2363: PPOPN 6
2365: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2366: LD_EXP 22
2370: PPUSH
2371: CALL_OW 302
2375: PUSH
2376: LD_EXP 22
2380: PPUSH
2381: CALL_OW 255
2385: PUSH
2386: LD_INT 3
2388: EQUAL
2389: AND
2390: IFFALSE 2657
2392: GO 2394
2394: DISABLE
// begin enable ;
2395: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2396: LD_EXP 22
2400: PPUSH
2401: LD_INT 124
2403: PPUSH
2404: LD_INT 25
2406: PPUSH
2407: CALL_OW 307
2411: IFFALSE 2425
// SetFuel ( russianTank , 100 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 100
2420: PPUSH
2421: CALL_OW 240
// if HasTask ( russianTank ) then
2425: LD_EXP 22
2429: PPUSH
2430: CALL_OW 314
2434: IFFALSE 2438
// exit ;
2436: GO 2657
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2438: LD_EXP 22
2442: PPUSH
2443: LD_INT 121
2445: PPUSH
2446: LD_INT 25
2448: PPUSH
2449: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2453: LD_EXP 22
2457: PPUSH
2458: LD_INT 122
2460: PPUSH
2461: LD_INT 48
2463: PPUSH
2464: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2468: LD_EXP 22
2472: PPUSH
2473: LD_INT 70
2475: PPUSH
2476: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2480: LD_EXP 22
2484: PPUSH
2485: LD_INT 107
2487: PPUSH
2488: LD_INT 57
2490: PPUSH
2491: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2495: LD_EXP 22
2499: PPUSH
2500: LD_INT 70
2502: PPUSH
2503: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2507: LD_EXP 22
2511: PPUSH
2512: LD_INT 100
2514: PPUSH
2515: LD_INT 61
2517: PPUSH
2518: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2522: LD_EXP 22
2526: PPUSH
2527: LD_INT 105
2529: PPUSH
2530: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2534: LD_EXP 22
2538: PPUSH
2539: LD_INT 78
2541: PPUSH
2542: LD_INT 64
2544: PPUSH
2545: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2549: LD_EXP 22
2553: PPUSH
2554: LD_INT 140
2556: PPUSH
2557: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2561: LD_EXP 22
2565: PPUSH
2566: LD_INT 100
2568: PPUSH
2569: LD_INT 61
2571: PPUSH
2572: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2576: LD_EXP 22
2580: PPUSH
2581: LD_INT 105
2583: PPUSH
2584: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2588: LD_EXP 22
2592: PPUSH
2593: LD_INT 107
2595: PPUSH
2596: LD_INT 57
2598: PPUSH
2599: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2603: LD_EXP 22
2607: PPUSH
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2615: LD_EXP 22
2619: PPUSH
2620: LD_INT 122
2622: PPUSH
2623: LD_INT 48
2625: PPUSH
2626: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2630: LD_EXP 22
2634: PPUSH
2635: LD_INT 70
2637: PPUSH
2638: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2642: LD_EXP 22
2646: PPUSH
2647: LD_INT 124
2649: PPUSH
2650: LD_INT 25
2652: PPUSH
2653: CALL_OW 171
// end ; end_of_file
2657: END
// export Johnny ; export function PrepareJohnny ; begin
2658: LD_INT 0
2660: PPUSH
// uc_side := 1 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// uc_nation := 1 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2677: LD_ADDR_EXP 23
2681: PUSH
2682: LD_STRING Harris
2684: PPUSH
2685: CALL_OW 25
2689: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2690: LD_EXP 23
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2702: LD_EXP 23
2706: PPUSH
2707: LD_INT 8
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// ComCrawl ( Johnny ) ;
2717: LD_EXP 23
2721: PPUSH
2722: CALL_OW 137
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PreparePatrolTank ; var veh , un ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
// uc_side := 1 ;
2736: LD_ADDR_OWVAR 20
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// uc_nation := 1 ;
2744: LD_ADDR_OWVAR 21
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL_OW 380
// un := CreateHuman ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2775: LD_ADDR_OWVAR 37
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// vc_engine := engine_combustion ;
2783: LD_ADDR_OWVAR 39
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// vc_control := control_manual ;
2791: LD_ADDR_OWVAR 38
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2799: LD_ADDR_OWVAR 40
2803: PUSH
2804: LD_INT 2
2806: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2807: LD_ADDR_OWVAR 41
2811: PUSH
2812: LD_INT 72
2814: PUSH
2815: LD_INT 54
2817: PUSH
2818: LD_INT 36
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_OWVAR 67
2830: ARRAY
2831: ST_TO_ADDR
// veh := CreateVehicle ;
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: CALL_OW 45
2841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2842: LD_VAR 0 2
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2854: LD_VAR 0 2
2858: PPUSH
2859: LD_INT 31
2861: PPUSH
2862: LD_INT 58
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 52
// result := un ;
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_VAR 0 3
2895: ST_TO_ADDR
// end ; end_of_file
2896: LD_VAR 0 1
2900: RET
// export function Action ; begin
2901: LD_INT 0
2903: PPUSH
// InGameOn ;
2904: CALL_OW 8
// wait ( 0 0$4 ) ;
2908: LD_INT 140
2910: PPUSH
2911: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2915: LD_EXP 14
2919: PPUSH
2920: LD_STRING DH-start-1
2922: PPUSH
2923: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 29
2937: PPUSH
2938: CALL_OW 111
// wait ( 0 0$4 ) ;
2942: LD_INT 140
2944: PPUSH
2945: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2949: LD_EXP 14
2953: PPUSH
2954: LD_INT 71
2956: PPUSH
2957: LD_INT 33
2959: PPUSH
2960: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2964: LD_EXP 14
2968: PPUSH
2969: LD_INT 71
2971: PPUSH
2972: LD_INT 34
2974: PPUSH
2975: CALL_OW 178
// wait ( 0 0$4 ) ;
2979: LD_INT 140
2981: PPUSH
2982: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2986: LD_EXP 14
2990: PPUSH
2991: LD_STRING DH-start-2
2993: PPUSH
2994: CALL_OW 88
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3005: LD_EXP 14
3009: PPUSH
3010: LD_INT 65
3012: PPUSH
3013: LD_INT 26
3015: PPUSH
3016: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3020: LD_EXP 14
3024: PPUSH
3025: LD_STRING DH-start-3
3027: PPUSH
3028: CALL_OW 88
// InGameOff ;
3032: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3036: LD_STRING O1_cont
3038: PPUSH
3039: CALL_OW 337
// SaveForQuickRestart ;
3043: CALL_OW 22
// missionStarted := true ;
3047: LD_ADDR_EXP 1
3051: PUSH
3052: LD_INT 1
3054: ST_TO_ADDR
// PrepareJohnny ;
3055: CALL 2658 0 0
// end ;
3059: LD_VAR 0 1
3063: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 3 ) = att_neutral do
3064: LD_EXP 8
3068: NOT
3069: PUSH
3070: LD_EXP 7
3074: NOT
3075: AND
3076: PUSH
3077: LD_INT 2
3079: PPUSH
3080: LD_EXP 23
3084: PPUSH
3085: CALL_OW 292
3089: AND
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 1
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: PPUSH
3106: LD_EXP 14
3110: PPUSH
3111: CALL_OW 74
3115: PUSH
3116: LD_EXP 23
3120: EQUAL
3121: AND
3122: PUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 81
3133: PUSH
3134: LD_INT 0
3136: EQUAL
3137: AND
3138: IFFALSE 4057
3140: GO 3142
3142: DISABLE
// begin InGameOn ;
3143: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3147: LD_EXP 14
3151: PPUSH
3152: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3156: LD_EXP 23
3160: PPUSH
3161: LD_STRING DJ-ambush-1
3163: PPUSH
3164: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3168: LD_INT 10
3170: PPUSH
3171: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3175: LD_EXP 14
3179: PPUSH
3180: LD_EXP 23
3184: PPUSH
3185: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3189: LD_EXP 14
3193: PPUSH
3194: LD_STRING DH-ambush-1
3196: PPUSH
3197: CALL_OW 88
// wait ( 0 0$1 ) ;
3201: LD_INT 35
3203: PPUSH
3204: CALL_OW 67
// ComWalk ( Johnny ) ;
3208: LD_EXP 23
3212: PPUSH
3213: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3217: LD_EXP 23
3221: PPUSH
3222: LD_EXP 14
3226: PPUSH
3227: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3231: LD_INT 35
3233: PPUSH
3234: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3238: LD_EXP 23
3242: PPUSH
3243: LD_EXP 14
3247: PPUSH
3248: CALL_OW 296
3252: PUSH
3253: LD_INT 4
3255: LESS
3256: IFFALSE 3231
// ComTurnUnit ( Johnny , Heike ) ;
3258: LD_EXP 23
3262: PPUSH
3263: LD_EXP 14
3267: PPUSH
3268: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3272: LD_EXP 23
3276: PPUSH
3277: LD_STRING DJ-ambush-2
3279: PPUSH
3280: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3284: LD_EXP 14
3288: PPUSH
3289: LD_STRING DH-ambush-2
3291: PPUSH
3292: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3296: LD_EXP 23
3300: PPUSH
3301: LD_STRING DJ-ambush-3
3303: PPUSH
3304: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3308: LD_EXP 14
3312: PPUSH
3313: LD_STRING DH-ambush-3
3315: PPUSH
3316: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3320: LD_EXP 23
3324: PPUSH
3325: LD_STRING DJ-ambush-4
3327: PPUSH
3328: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3332: LD_EXP 14
3336: PPUSH
3337: LD_INT 39
3339: PPUSH
3340: LD_INT 22
3342: PPUSH
3343: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3347: LD_EXP 14
3351: PPUSH
3352: LD_STRING DH-ambush-4
3354: PPUSH
3355: CALL_OW 88
// PrepareRussianPatrol ;
3359: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3363: LD_INT 39
3365: PPUSH
3366: LD_INT 22
3368: PPUSH
3369: LD_INT 2
3371: PPUSH
3372: LD_INT 12
3374: NEG
3375: PPUSH
3376: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3380: LD_INT 39
3382: PPUSH
3383: LD_INT 22
3385: PPUSH
3386: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3390: LD_EXP 19
3394: PPUSH
3395: LD_INT 39
3397: PPUSH
3398: LD_INT 23
3400: PPUSH
3401: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3405: LD_EXP 14
3409: PUSH
3410: LD_EXP 23
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PPUSH
3419: LD_INT 39
3421: PPUSH
3422: LD_INT 7
3424: PPUSH
3425: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3429: LD_EXP 14
3433: PUSH
3434: LD_EXP 23
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: LD_EXP 19
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3456: LD_EXP 19
3460: PUSH
3461: LD_INT 1
3463: ARRAY
3464: PPUSH
3465: LD_STRING DR-ambush-5
3467: PPUSH
3468: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3472: LD_EXP 19
3476: PUSH
3477: LD_INT 2
3479: ARRAY
3480: PPUSH
3481: LD_STRING DR1-ambush-5
3483: PPUSH
3484: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3488: LD_INT 35
3490: PPUSH
3491: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3495: LD_EXP 14
3499: PPUSH
3500: LD_INT 39
3502: PPUSH
3503: LD_INT 7
3505: PPUSH
3506: CALL_OW 297
3510: PUSH
3511: LD_INT 6
3513: LESS
3514: IFFALSE 3488
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3516: LD_EXP 14
3520: PPUSH
3521: LD_EXP 19
3525: PUSH
3526: LD_INT 1
3528: ARRAY
3529: PPUSH
3530: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3534: LD_EXP 23
3538: PPUSH
3539: LD_EXP 14
3543: PPUSH
3544: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3548: LD_EXP 23
3552: PPUSH
3553: LD_STRING DJ-ambush-6
3555: PPUSH
3556: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3560: LD_EXP 14
3564: PPUSH
3565: LD_STRING DH-ambush-6
3567: PPUSH
3568: CALL_OW 88
// InGameOff ;
3572: CALL_OW 9
// meetJohnny := true ;
3576: LD_ADDR_EXP 3
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// ComFree ( Johnny ) ;
3584: LD_EXP 23
3588: PPUSH
3589: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3593: LD_STRING O2_ambush_cont
3595: PPUSH
3596: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3600: LD_EXP 19
3604: PUSH
3605: LD_EXP 19
3609: ARRAY
3610: PPUSH
3611: LD_INT 29
3613: PPUSH
3614: LD_INT 15
3616: PPUSH
3617: CALL_OW 111
// wait ( 0 0$2 ) ;
3621: LD_INT 70
3623: PPUSH
3624: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3628: LD_INT 3
3630: PPUSH
3631: LD_EXP 14
3635: PPUSH
3636: CALL_OW 292
3640: NOT
3641: PUSH
3642: LD_INT 3
3644: PPUSH
3645: LD_EXP 23
3649: PPUSH
3650: CALL_OW 292
3654: NOT
3655: AND
3656: IFFALSE 3677
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3658: LD_EXP 19
3662: PUSH
3663: LD_INT 1
3665: ARRAY
3666: PPUSH
3667: LD_INT 58
3669: PPUSH
3670: LD_INT 32
3672: PPUSH
3673: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3677: LD_INT 1750
3679: PUSH
3680: LD_INT 1400
3682: PUSH
3683: LD_INT 1225
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_OWVAR 67
3695: ARRAY
3696: PPUSH
3697: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3701: LD_EXP 19
3705: PPUSH
3706: LD_INT 43
3708: PPUSH
3709: LD_INT 13
3711: PPUSH
3712: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3716: LD_INT 35
3718: PPUSH
3719: CALL_OW 67
// until not russianPatrol ;
3723: LD_EXP 19
3727: NOT
3728: IFFALSE 3716
// RemoveSeeing ( 39 , 22 , 2 ) ;
3730: LD_INT 39
3732: PPUSH
3733: LD_INT 22
3735: PPUSH
3736: LD_INT 2
3738: PPUSH
3739: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 81
3753: PUSH
3754: LD_INT 2
3756: EQUAL
3757: IFFALSE 3761
// exit ;
3759: GO 4057
// if not IsOk ( Johnny ) then
3761: LD_EXP 23
3765: PPUSH
3766: CALL_OW 302
3770: NOT
3771: IFFALSE 3782
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3773: LD_STRING O2_ambush_out_cont
3775: PPUSH
3776: CALL_OW 337
// exit ;
3780: GO 4057
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3782: LD_EXP 14
3786: PPUSH
3787: LD_EXP 23
3791: PPUSH
3792: CALL_OW 296
3796: PUSH
3797: LD_INT 10
3799: GREATER
3800: IFFALSE 3843
// begin ComMoveUnit ( Johnny , Heike ) ;
3802: LD_EXP 23
3806: PPUSH
3807: LD_EXP 14
3811: PPUSH
3812: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3823: LD_EXP 23
3827: PPUSH
3828: LD_EXP 14
3832: PPUSH
3833: CALL_OW 296
3837: PUSH
3838: LD_INT 6
3840: LESS
3841: IFFALSE 3816
// end ; CenterNowOnUnits ( Heike ) ;
3843: LD_EXP 14
3847: PPUSH
3848: CALL_OW 87
// InGameOn ;
3852: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3856: LD_EXP 14
3860: PPUSH
3861: LD_EXP 23
3865: PPUSH
3866: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3870: LD_EXP 23
3874: PPUSH
3875: LD_EXP 14
3879: PPUSH
3880: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3884: LD_EXP 23
3888: PPUSH
3889: LD_STRING DJ-thanks-1
3891: PPUSH
3892: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3896: LD_EXP 14
3900: PPUSH
3901: LD_STRING DH-thanks-1
3903: PPUSH
3904: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3908: LD_EXP 23
3912: PPUSH
3913: LD_STRING DJ-thanks-2
3915: PPUSH
3916: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3920: LD_EXP 23
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 111
// wait ( 0 0$1 ) ;
3935: LD_INT 35
3937: PPUSH
3938: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3942: LD_EXP 14
3946: PPUSH
3947: LD_STRING DH-thanks-2
3949: PPUSH
3950: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3961: LD_INT 2
3963: PPUSH
3964: LD_EXP 23
3968: PPUSH
3969: CALL_OW 292
3973: NOT
3974: IFFALSE 3954
// Say ( Heike , DH-thanks-2a ) ;
3976: LD_EXP 14
3980: PPUSH
3981: LD_STRING DH-thanks-2a
3983: PPUSH
3984: CALL_OW 88
// RemoveUnit ( Johnny ) ;
3988: LD_EXP 23
3992: PPUSH
3993: CALL_OW 64
// InGameOff ;
3997: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4001: LD_STRING O2_ambush_out_cont
4003: PPUSH
4004: CALL_OW 337
// johnnySaved := true ;
4008: LD_ADDR_EXP 4
4012: PUSH
4013: LD_INT 1
4015: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4016: LD_EXP 14
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 600
4026: PPUSH
4027: CALL_OW 492
// if IsOk ( Olaf ) then
4031: LD_EXP 15
4035: PPUSH
4036: CALL_OW 302
4040: IFFALSE 4057
// ComMoveXY ( Olaf , 44 , 25 ) ;
4042: LD_EXP 15
4046: PPUSH
4047: LD_INT 44
4049: PPUSH
4050: LD_INT 25
4052: PPUSH
4053: CALL_OW 111
// end ;
4057: END
// every 0 0$1 trigger russianPatrol do var i ;
4058: LD_EXP 19
4062: IFFALSE 4130
4064: GO 4066
4066: DISABLE
4067: LD_INT 0
4069: PPUSH
// begin enable ;
4070: ENABLE
// for i in russianPatrol do
4071: LD_ADDR_VAR 0 1
4075: PUSH
4076: LD_EXP 19
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4128
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 256
4093: PUSH
4094: LD_INT 1000
4096: LESS
4097: PUSH
4098: LD_VAR 0 1
4102: PPUSH
4103: CALL_OW 314
4107: NOT
4108: AND
4109: IFFALSE 4126
// ComAgressiveMove ( i , 42 , 12 ) ;
4111: LD_VAR 0 1
4115: PPUSH
4116: LD_INT 42
4118: PPUSH
4119: LD_INT 12
4121: PPUSH
4122: CALL_OW 114
4126: GO 4081
4128: POP
4129: POP
// end ;
4130: PPOPN 1
4132: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 81
4143: PUSH
4144: LD_INT 2
4146: EQUAL
4147: PUSH
4148: LD_EXP 23
4152: PPUSH
4153: CALL_OW 302
4157: AND
4158: IFFALSE 4175
4160: GO 4162
4162: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4163: LD_EXP 23
4167: PPUSH
4168: LD_STRING DJ-fire-1
4170: PPUSH
4171: CALL_OW 88
4175: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4176: LD_EXP 7
4180: NOT
4181: PUSH
4182: LD_EXP 21
4186: PPUSH
4187: LD_INT 101
4189: PUSH
4190: LD_INT 2
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 72
4201: AND
4202: IFFALSE 4322
4204: GO 4206
4206: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4207: LD_EXP 14
4211: PPUSH
4212: CALL_OW 87
// DialogueOn ;
4216: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4220: LD_EXP 14
4224: PPUSH
4225: LD_STRING DH-see-enemy-patrol-1
4227: PPUSH
4228: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4232: LD_EXP 21
4236: PPUSH
4237: LD_INT 26
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 72
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: PPUSH
4256: LD_STRING DR-see-enemy-patrol-1
4258: PPUSH
4259: CALL_OW 88
// DialogueOff ;
4263: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4267: LD_EXP 21
4271: PPUSH
4272: LD_INT 66
4274: PPUSH
4275: LD_INT 22
4277: PPUSH
4278: CALL_OW 114
// wait ( 0 0$10 ) ;
4282: LD_INT 350
4284: PPUSH
4285: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4289: LD_EXP 21
4293: PPUSH
4294: LD_INT 175
4296: PPUSH
4297: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4301: LD_EXP 21
4305: PPUSH
4306: LD_INT 9
4308: PPUSH
4309: CALL_OW 173
// AddComFree ( russianForces ) ;
4313: LD_EXP 21
4317: PPUSH
4318: CALL_OW 199
// end ;
4322: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 24
4333: PUSH
4334: LD_INT 960
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 72
4349: IFFALSE 4593
4351: GO 4353
4353: DISABLE
4354: LD_INT 0
4356: PPUSH
4357: PPUSH
4358: PPUSH
4359: PPUSH
// begin enable ;
4360: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4361: LD_ADDR_VAR 0 2
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4381: LD_ADDR_VAR 0 3
4385: PUSH
4386: LD_EXP 21
4390: PPUSH
4391: LD_INT 1
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: LD_INT 960
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 24
4409: PUSH
4410: LD_INT 500
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 72
4430: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_EXP 21
4440: PPUSH
4441: LD_INT 3
4443: PUSH
4444: LD_INT 24
4446: PUSH
4447: LD_INT 500
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PPUSH
4458: CALL_OW 72
4462: ST_TO_ADDR
// if not tmp then
4463: LD_VAR 0 2
4467: NOT
4468: IFFALSE 4472
// exit ;
4470: GO 4593
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4472: LD_ADDR_VAR 0 2
4476: PUSH
4477: LD_VAR 0 3
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PPUSH
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 74
4495: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4496: LD_VAR 0 2
4500: PPUSH
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PPUSH
4510: CALL_OW 296
4514: PUSH
4515: LD_INT 10
4517: LESS
4518: IFFALSE 4534
// ComAttackUnit ( tmp2 , tmp ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 115
// if tmp3 then
4534: LD_VAR 0 4
4538: IFFALSE 4593
// for i in tmp do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: LD_VAR 0 2
4549: PUSH
4550: FOR_IN
4551: IFFALSE 4591
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4553: LD_VAR 0 1
4557: PPUSH
4558: LD_INT 119
4560: PPUSH
4561: LD_INT 21
4563: PPUSH
4564: CALL_OW 297
4568: PUSH
4569: LD_INT 10
4571: GREATER
4572: IFFALSE 4589
// ComMoveXY ( i , 119 , 21 ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_INT 119
4581: PPUSH
4582: LD_INT 21
4584: PPUSH
4585: CALL_OW 111
4589: GO 4550
4591: POP
4592: POP
// end ;
4593: PPOPN 4
4595: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4596: LD_EXP 1
4600: PUSH
4601: LD_EXP 8
4605: NOT
4606: AND
4607: PUSH
4608: LD_EXP 7
4612: NOT
4613: AND
4614: PUSH
4615: LD_EXP 14
4619: PPUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 14
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PPUSH
4630: CALL_OW 69
4634: PPUSH
4635: LD_EXP 14
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 296
4649: PUSH
4650: LD_INT 6
4652: LESS
4653: AND
4654: IFFALSE 4671
4656: GO 4658
4658: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4659: LD_EXP 14
4663: PPUSH
4664: LD_STRING DH-tiger-1
4666: PPUSH
4667: CALL_OW 88
4671: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4672: LD_EXP 1
4676: PUSH
4677: LD_EXP 8
4681: NOT
4682: AND
4683: PUSH
4684: LD_EXP 7
4688: NOT
4689: AND
4690: PUSH
4691: LD_EXP 14
4695: PPUSH
4696: LD_INT 25
4698: PUSH
4699: LD_INT 12
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PPUSH
4706: CALL_OW 69
4710: PPUSH
4711: LD_EXP 14
4715: PPUSH
4716: CALL_OW 74
4720: PPUSH
4721: CALL_OW 296
4725: PUSH
4726: LD_INT 6
4728: LESS
4729: AND
4730: IFFALSE 4747
4732: GO 4734
4734: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4735: LD_EXP 14
4739: PPUSH
4740: LD_STRING DH-ape-1
4742: PPUSH
4743: CALL_OW 88
4747: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4748: LD_EXP 1
4752: PUSH
4753: LD_EXP 8
4757: NOT
4758: AND
4759: PUSH
4760: LD_EXP 7
4764: NOT
4765: AND
4766: PUSH
4767: LD_EXP 14
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 18
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 14
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4823
4808: GO 4810
4810: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4811: LD_EXP 14
4815: PPUSH
4816: LD_STRING DH-bird-1
4818: PPUSH
4819: CALL_OW 88
4823: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4824: LD_INT 22
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: LD_INT 101
4836: PUSH
4837: LD_INT 3
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: IFFALSE 4865
4854: GO 4856
4856: DISABLE
// russianSpotted := true ;
4857: LD_ADDR_EXP 9
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
4865: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4866: LD_EXP 14
4870: PPUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 3
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: PPUSH
4900: LD_EXP 14
4904: PPUSH
4905: CALL_OW 74
4909: PPUSH
4910: CALL_OW 296
4914: PUSH
4915: LD_INT 8
4917: LESS
4918: IFFALSE 4935
4920: GO 4922
4922: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4923: LD_EXP 14
4927: PPUSH
4928: LD_STRING DH-enemy-base
4930: PPUSH
4931: CALL_OW 88
4935: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
4936: LD_EXP 23
4940: PPUSH
4941: CALL_OW 305
4945: NOT
4946: PUSH
4947: LD_EXP 6
4951: NOT
4952: AND
4953: PUSH
4954: LD_EXP 5
4958: AND
4959: PUSH
4960: LD_EXP 12
4964: NOT
4965: AND
4966: PUSH
4967: LD_EXP 11
4971: NOT
4972: AND
4973: IFFALSE 5124
4975: GO 4977
4977: DISABLE
4978: LD_INT 0
4980: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4981: LD_INT 35
4983: PPUSH
4984: CALL_OW 67
// for i in dogTag do
4988: LD_ADDR_VAR 0 1
4992: PUSH
4993: LD_EXP 5
4997: PUSH
4998: FOR_IN
4999: IFFALSE 5048
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5001: LD_EXP 14
5005: PPUSH
5006: LD_VAR 0 1
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: LD_VAR 0 1
5019: PUSH
5020: LD_INT 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 297
5028: PUSH
5029: LD_INT 3
5031: LESS
5032: IFFALSE 5046
// begin dogTagFound := i ;
5034: LD_ADDR_EXP 6
5038: PUSH
5039: LD_VAR 0 1
5043: ST_TO_ADDR
// break ;
5044: GO 5048
// end ;
5046: GO 4998
5048: POP
5049: POP
// until dogTagFound ;
5050: LD_EXP 6
5054: IFFALSE 4981
// CenterNowOnUnits ( Heike ) ;
5056: LD_EXP 14
5060: PPUSH
5061: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5065: LD_EXP 14
5069: PPUSH
5070: LD_EXP 6
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: LD_EXP 6
5083: PUSH
5084: LD_INT 2
5086: ARRAY
5087: PPUSH
5088: CALL_OW 111
// if mercenariesQuestReady then
5092: LD_EXP 10
5096: IFFALSE 5112
// Say ( Heike , DH-dogtag-found-quest ) else
5098: LD_EXP 14
5102: PPUSH
5103: LD_STRING DH-dogtag-found-quest
5105: PPUSH
5106: CALL_OW 88
5110: GO 5124
// Say ( Heike , DH-dogtag-found ) ;
5112: LD_EXP 14
5116: PPUSH
5117: LD_STRING DH-dogtag-found
5119: PPUSH
5120: CALL_OW 88
// end ;
5124: PPOPN 1
5126: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5127: LD_EXP 8
5131: NOT
5132: PUSH
5133: LD_EXP 7
5137: NOT
5138: AND
5139: PUSH
5140: LD_INT 5
5142: PPUSH
5143: LD_EXP 14
5147: PPUSH
5148: CALL_OW 292
5152: AND
5153: PUSH
5154: LD_EXP 14
5158: PPUSH
5159: LD_EXP 15
5163: PPUSH
5164: CALL_OW 296
5168: PUSH
5169: LD_INT 8
5171: LESS
5172: AND
5173: IFFALSE 5534
5175: GO 5177
5177: DISABLE
// begin olafSpotted := true ;
5178: LD_ADDR_EXP 8
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if HasTask ( Olaf ) then
5186: LD_EXP 15
5190: PPUSH
5191: CALL_OW 314
5195: IFFALSE 5206
// ComStop ( Olaf ) ;
5197: LD_EXP 15
5201: PPUSH
5202: CALL_OW 141
// InGameOn ;
5206: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5210: LD_EXP 15
5214: PPUSH
5215: LD_EXP 14
5219: PPUSH
5220: CALL_OW 296
5224: PUSH
5225: LD_INT 8
5227: GREATER
5228: IFFALSE 5244
// ComMoveUnit ( Olaf , Heike ) ;
5230: LD_EXP 15
5234: PPUSH
5235: LD_EXP 14
5239: PPUSH
5240: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5244: LD_INT 35
5246: PPUSH
5247: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5251: LD_EXP 15
5255: PPUSH
5256: LD_EXP 14
5260: PPUSH
5261: CALL_OW 296
5265: PUSH
5266: LD_INT 8
5268: LESSEQUAL
5269: IFFALSE 5244
// ComTurnUnit ( Heike , Olaf ) ;
5271: LD_EXP 14
5275: PPUSH
5276: LD_EXP 15
5280: PPUSH
5281: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5285: LD_EXP 15
5289: PPUSH
5290: LD_EXP 14
5294: PPUSH
5295: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5299: LD_EXP 15
5303: PPUSH
5304: LD_STRING DO-olaf-1
5306: PPUSH
5307: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5311: LD_EXP 14
5315: PPUSH
5316: LD_STRING DH-olaf-1
5318: PPUSH
5319: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5323: LD_EXP 15
5327: PPUSH
5328: LD_STRING DO-olaf-2
5330: PPUSH
5331: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5335: LD_EXP 14
5339: PPUSH
5340: LD_STRING DH-olaf-2
5342: PPUSH
5343: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5347: LD_EXP 15
5351: PPUSH
5352: LD_STRING DO-olaf-3
5354: PPUSH
5355: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5359: LD_EXP 15
5363: PPUSH
5364: LD_STRING DO-olaf-4
5366: PPUSH
5367: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5371: LD_EXP 14
5375: PPUSH
5376: LD_STRING DH-olaf-4
5378: PPUSH
5379: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5383: LD_EXP 15
5387: PPUSH
5388: LD_STRING DO-olaf-5
5390: PPUSH
5391: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5395: LD_EXP 14
5399: PPUSH
5400: LD_STRING DH-olaf-5
5402: PPUSH
5403: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5407: LD_EXP 15
5411: PPUSH
5412: LD_STRING DO-olaf-6
5414: PPUSH
5415: CALL_OW 88
// if russianSpotted or johnnySaved then
5419: LD_EXP 9
5423: PUSH
5424: LD_EXP 4
5428: OR
5429: IFFALSE 5457
// begin Say ( Heike , DH-olaf-6a ) ;
5431: LD_EXP 14
5435: PPUSH
5436: LD_STRING DH-olaf-6a
5438: PPUSH
5439: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5443: LD_EXP 15
5447: PPUSH
5448: LD_STRING DO-olaf-7a
5450: PPUSH
5451: CALL_OW 88
// end else
5455: GO 5481
// begin Say ( Heike , DH-olaf-6b ) ;
5457: LD_EXP 14
5461: PPUSH
5462: LD_STRING DH-olaf-6b
5464: PPUSH
5465: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING DO-olaf-7b
5476: PPUSH
5477: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5481: LD_EXP 15
5485: PPUSH
5486: LD_STRING DO-olaf-8
5488: PPUSH
5489: CALL_OW 88
// InGameOff ;
5493: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5497: LD_STRING O3_camp_cont
5499: PPUSH
5500: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5504: LD_EXP 15
5508: PPUSH
5509: LD_INT 52
5511: PPUSH
5512: LD_INT 90
5514: PPUSH
5515: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5519: LD_EXP 15
5523: PPUSH
5524: LD_INT 53
5526: PPUSH
5527: LD_INT 89
5529: PPUSH
5530: CALL_OW 178
// end ;
5534: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5535: LD_EXP 8
5539: NOT
5540: PUSH
5541: LD_EXP 14
5545: PPUSH
5546: LD_EXP 16
5550: PPUSH
5551: CALL_OW 296
5555: PUSH
5556: LD_INT 36
5558: LESS
5559: AND
5560: IFFALSE 5580
5562: GO 5564
5564: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5565: LD_EXP 15
5569: PPUSH
5570: LD_INT 39
5572: PPUSH
5573: LD_INT 71
5575: PPUSH
5576: CALL_OW 111
5580: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5581: LD_EXP 7
5585: NOT
5586: PUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_EXP 17
5594: PPUSH
5595: CALL_OW 292
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_EXP 16
5607: PPUSH
5608: CALL_OW 292
5612: OR
5613: AND
5614: IFFALSE 6939
5616: GO 5618
5618: DISABLE
5619: LD_INT 0
5621: PPUSH
5622: PPUSH
5623: PPUSH
// begin if IsLive ( Johnny ) then
5624: LD_EXP 23
5628: PPUSH
5629: CALL_OW 300
5633: IFFALSE 5644
// KillUnit ( Johnny ) ;
5635: LD_EXP 23
5639: PPUSH
5640: CALL_OW 66
// mercenariesSpotted := true ;
5644: LD_ADDR_EXP 7
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5652: LD_STRING O4_camp_cont
5654: PPUSH
5655: CALL_OW 337
// InGameOn ;
5659: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5663: LD_INT 53
5665: PPUSH
5666: LD_INT 89
5668: PPUSH
5669: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5673: LD_INT 53
5675: PPUSH
5676: LD_INT 89
5678: PPUSH
5679: LD_INT 2
5681: PPUSH
5682: LD_INT 8
5684: NEG
5685: PPUSH
5686: CALL_OW 330
// if olafSpotted then
5690: LD_EXP 8
5694: IFFALSE 5812
// begin AddComTurnUnit ( Olaf , Heike ) ;
5696: LD_EXP 15
5700: PPUSH
5701: LD_EXP 14
5705: PPUSH
5706: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5710: LD_EXP 14
5714: PPUSH
5715: LD_INT 51
5717: PPUSH
5718: LD_INT 86
5720: PPUSH
5721: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5725: LD_EXP 14
5729: PPUSH
5730: LD_EXP 15
5734: PPUSH
5735: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5739: LD_EXP 15
5743: PPUSH
5744: LD_STRING DO-camp-1
5746: PPUSH
5747: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5751: LD_EXP 16
5755: PUSH
5756: LD_EXP 17
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PPUSH
5765: LD_EXP 14
5769: PPUSH
5770: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5774: LD_EXP 16
5778: PPUSH
5779: LD_STRING DG-camp-1
5781: PPUSH
5782: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5786: LD_EXP 14
5790: PPUSH
5791: LD_STRING DH-camp-1
5793: PPUSH
5794: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5798: LD_EXP 15
5802: PPUSH
5803: LD_STRING DO-camp-2
5805: PPUSH
5806: CALL_OW 88
// end else
5810: GO 6207
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5812: LD_EXP 14
5816: PPUSH
5817: LD_INT 51
5819: PPUSH
5820: LD_INT 86
5822: PPUSH
5823: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5827: LD_EXP 14
5831: PPUSH
5832: LD_EXP 16
5836: PPUSH
5837: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5841: LD_EXP 16
5845: PUSH
5846: LD_EXP 17
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PPUSH
5855: LD_EXP 14
5859: PPUSH
5860: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5864: LD_EXP 16
5868: PPUSH
5869: LD_STRING DG-camp-1a
5871: PPUSH
5872: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5876: LD_EXP 14
5880: PPUSH
5881: LD_STRING DH-camp-1a
5883: PPUSH
5884: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5895: LD_EXP 17
5899: PPUSH
5900: LD_EXP 15
5904: PPUSH
5905: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5909: LD_EXP 17
5913: PPUSH
5914: LD_STRING DM-camp-1a
5916: PPUSH
5917: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5921: LD_EXP 15
5925: PPUSH
5926: LD_INT 52
5928: PPUSH
5929: LD_INT 90
5931: PPUSH
5932: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5936: LD_EXP 17
5940: PPUSH
5941: LD_EXP 14
5945: PPUSH
5946: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5950: LD_EXP 16
5954: PPUSH
5955: LD_STRING DG-camp-2a
5957: PPUSH
5958: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5962: LD_EXP 14
5966: PPUSH
5967: LD_STRING DH-camp-2a
5969: PPUSH
5970: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
5974: LD_EXP 17
5978: PPUSH
5979: LD_STRING DM-camp-2a
5981: PPUSH
5982: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5986: LD_INT 35
5988: PPUSH
5989: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
5993: LD_EXP 15
5997: PPUSH
5998: LD_EXP 14
6002: PPUSH
6003: CALL_OW 296
6007: PUSH
6008: LD_INT 10
6010: LESS
6011: IFFALSE 5986
// AddComTurnUnit ( Olaf , Heike ) ;
6013: LD_EXP 15
6017: PPUSH
6018: LD_EXP 14
6022: PPUSH
6023: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6027: LD_EXP 17
6031: PPUSH
6032: LD_EXP 14
6036: PPUSH
6037: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6041: LD_EXP 15
6045: PPUSH
6046: LD_STRING DO-camp-2a
6048: PPUSH
6049: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6053: LD_EXP 14
6057: PPUSH
6058: LD_EXP 15
6062: PPUSH
6063: CALL_OW 119
// if russianSpotted then
6067: LD_EXP 9
6071: IFFALSE 6111
// begin Say ( Heike , DH-camp-2aa ) ;
6073: LD_EXP 14
6077: PPUSH
6078: LD_STRING DH-camp-2aa
6080: PPUSH
6081: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6085: LD_EXP 16
6089: PPUSH
6090: LD_STRING DG-camp-2aa
6092: PPUSH
6093: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6097: LD_EXP 17
6101: PPUSH
6102: LD_STRING DM-camp-2aa
6104: PPUSH
6105: CALL_OW 88
// end else
6109: GO 6135
// begin Say ( Heike , DH-camp-2ab ) ;
6111: LD_EXP 14
6115: PPUSH
6116: LD_STRING DH-camp-2ab
6118: PPUSH
6119: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6123: LD_EXP 17
6127: PPUSH
6128: LD_STRING DM-camp-2ab
6130: PPUSH
6131: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6135: LD_EXP 14
6139: PPUSH
6140: LD_STRING DH-camp-3a
6142: PPUSH
6143: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6147: LD_EXP 15
6151: PPUSH
6152: LD_STRING DO-camp-3a
6154: PPUSH
6155: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6159: LD_EXP 16
6163: PPUSH
6164: LD_STRING DG-camp-3a
6166: PPUSH
6167: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6171: LD_EXP 14
6175: PPUSH
6176: LD_STRING DH-camp-4aa
6178: PPUSH
6179: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6183: LD_EXP 17
6187: PPUSH
6188: LD_STRING DM-camp-4aa
6190: PPUSH
6191: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6195: LD_EXP 15
6199: PPUSH
6200: LD_STRING DO-camp-4a
6202: PPUSH
6203: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6207: LD_EXP 15
6211: PPUSH
6212: LD_STRING DO-camp-3
6214: PPUSH
6215: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6219: LD_EXP 15
6223: PPUSH
6224: LD_STRING DO-camp-4
6226: PPUSH
6227: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6231: LD_EXP 16
6235: PPUSH
6236: LD_EXP 15
6240: PPUSH
6241: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6245: LD_EXP 16
6249: PPUSH
6250: LD_STRING DG-camp-4
6252: PPUSH
6253: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6257: LD_EXP 14
6261: PPUSH
6262: LD_EXP 16
6266: PPUSH
6267: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6271: LD_EXP 14
6275: PPUSH
6276: LD_STRING DH-camp-4
6278: PPUSH
6279: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6283: LD_EXP 17
6287: PUSH
6288: LD_EXP 15
6292: PUSH
6293: LD_EXP 16
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: PPUSH
6303: LD_EXP 14
6307: PPUSH
6308: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6312: LD_EXP 16
6316: PPUSH
6317: LD_STRING DG-camp-5
6319: PPUSH
6320: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6324: LD_EXP 16
6328: PPUSH
6329: LD_STRING DG-camp-6
6331: PPUSH
6332: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6336: LD_EXP 14
6340: PPUSH
6341: LD_STRING DH-camp-6
6343: PPUSH
6344: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6348: LD_EXP 16
6352: PPUSH
6353: LD_STRING DG-camp-7
6355: PPUSH
6356: CALL_OW 88
// if DogTagFound then
6360: LD_EXP 6
6364: IFFALSE 6404
// begin Say ( Heike , DH-quest-1a ) ;
6366: LD_EXP 14
6370: PPUSH
6371: LD_STRING DH-quest-1a
6373: PPUSH
6374: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6378: LD_EXP 16
6382: PPUSH
6383: LD_STRING DG-quest-1a
6385: PPUSH
6386: CALL_OW 88
// mercenariesQuestDone := true ;
6390: LD_ADDR_EXP 11
6394: PUSH
6395: LD_INT 1
6397: ST_TO_ADDR
// InGameOff ;
6398: CALL_OW 9
// end else
6402: GO 6570
// begin Say ( Heike , DH-camp-7 ) ;
6404: LD_EXP 14
6408: PPUSH
6409: LD_STRING DH-camp-7
6411: PPUSH
6412: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6416: LD_EXP 14
6420: PPUSH
6421: CALL_OW 256
6425: PUSH
6426: LD_INT 1000
6428: LESS
6429: IFFALSE 6521
// begin Say ( Olaf , DO-heal-1 ) ;
6431: LD_EXP 15
6435: PPUSH
6436: LD_STRING DO-heal-1
6438: PPUSH
6439: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6443: LD_EXP 14
6447: PPUSH
6448: LD_INT 51
6450: PPUSH
6451: LD_INT 88
6453: PPUSH
6454: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6458: LD_INT 35
6460: PPUSH
6461: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6465: LD_EXP 14
6469: PPUSH
6470: LD_EXP 15
6474: PPUSH
6475: CALL_OW 296
6479: PUSH
6480: LD_INT 4
6482: LESS
6483: PUSH
6484: LD_EXP 14
6488: PPUSH
6489: LD_INT 51
6491: PPUSH
6492: LD_INT 88
6494: PPUSH
6495: CALL_OW 307
6499: OR
6500: IFFALSE 6458
// SetLives ( Heike , 1000 ) ;
6502: LD_EXP 14
6506: PPUSH
6507: LD_INT 1000
6509: PPUSH
6510: CALL_OW 234
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; InGameOff ;
6521: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6525: LD_EXP 15
6529: PUSH
6530: LD_EXP 16
6534: PUSH
6535: LD_EXP 17
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: LD_INT 53
6547: PPUSH
6548: LD_INT 89
6550: PPUSH
6551: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6555: LD_STRING O5_proof_cont
6557: PPUSH
6558: CALL_OW 337
// mercenariesQuestReady := true ;
6562: LD_ADDR_EXP 10
6566: PUSH
6567: LD_INT 1
6569: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6570: LD_EXP 10
6574: NOT
6575: IFFALSE 6579
// exit ;
6577: GO 6939
// wait ( 0 0$35 ) ;
6579: LD_INT 1225
6581: PPUSH
6582: CALL_OW 67
// driver := PreparePatrolTank ;
6586: LD_ADDR_VAR 0 2
6590: PUSH
6591: CALL 2731 0 0
6595: ST_TO_ADDR
// if not driver then
6596: LD_VAR 0 2
6600: NOT
6601: IFFALSE 6605
// exit ;
6603: GO 6939
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6605: LD_INT 2
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_INT 2
6613: PPUSH
6614: LD_INT 1
6616: PPUSH
6617: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6621: LD_ADDR_VAR 0 3
6625: PUSH
6626: LD_VAR 0 2
6630: PPUSH
6631: CALL_OW 310
6635: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6636: LD_VAR 0 3
6640: PPUSH
6641: LD_INT 500
6643: PPUSH
6644: CALL_OW 234
// SetLives ( driver , 450 ) ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_INT 450
6655: PPUSH
6656: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_INT 59
6667: PPUSH
6668: LD_INT 60
6670: PPUSH
6671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6675: LD_INT 35
6677: PPUSH
6678: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_INT 59
6689: PPUSH
6690: LD_INT 60
6692: PPUSH
6693: CALL_OW 307
6697: IFFALSE 6675
// if not See ( 1 , Heike ) then
6699: LD_INT 1
6701: PPUSH
6702: LD_EXP 14
6706: PPUSH
6707: CALL_OW 292
6711: NOT
6712: IFFALSE 6836
// begin if Difficulty < 3 then
6714: LD_OWVAR 67
6718: PUSH
6719: LD_INT 3
6721: LESS
6722: IFFALSE 6740
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6724: LD_INT 59
6726: PPUSH
6727: LD_INT 60
6729: PPUSH
6730: LD_INT 2
6732: PPUSH
6733: LD_INT 6
6735: PPUSH
6736: CALL_OW 330
// ComExitVehicle ( driver ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: CALL_OW 121
// wait ( 0 0$1 ) ;
6749: LD_INT 35
6751: PPUSH
6752: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6756: LD_VAR 0 2
6760: PPUSH
6761: LD_INT 58
6763: PPUSH
6764: LD_INT 54
6766: PPUSH
6767: CALL_OW 171
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6778: LD_VAR 0 2
6782: PPUSH
6783: LD_INT 57
6785: PPUSH
6786: LD_INT 53
6788: PPUSH
6789: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_INT 350
6800: PPUSH
6801: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6805: LD_VAR 0 2
6809: PPUSH
6810: LD_VAR 0 3
6814: PPUSH
6815: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6819: LD_VAR 0 2
6823: PPUSH
6824: LD_INT 107
6826: PPUSH
6827: LD_INT 118
6829: PPUSH
6830: CALL_OW 171
// end else
6834: GO 6851
// begin ComMoveXY ( driver , 107 , 118 ) ;
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_INT 107
6843: PPUSH
6844: LD_INT 118
6846: PPUSH
6847: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6851: LD_INT 35
6853: PPUSH
6854: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6858: LD_VAR 0 3
6862: PPUSH
6863: LD_INT 107
6865: PPUSH
6866: LD_INT 118
6868: PPUSH
6869: CALL_OW 307
6873: PUSH
6874: LD_VAR 0 2
6878: PPUSH
6879: CALL_OW 301
6883: OR
6884: IFFALSE 6851
// if IsDead ( driver [ 1 ] ) then
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 1
6893: ARRAY
6894: PPUSH
6895: CALL_OW 301
6899: IFFALSE 6903
// exit ;
6901: GO 6939
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6903: LD_ADDR_VAR 0 1
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_INT 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 69
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6937
// RemoveUnit ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 64
6935: GO 6923
6937: POP
6938: POP
// end ;
6939: PPOPN 3
6941: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6942: LD_INT 10
6944: PPUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 70
6973: IFFALSE 7047
6975: GO 6977
6977: DISABLE
// begin InGameOn ;
6978: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6982: LD_EXP 15
6986: PUSH
6987: LD_EXP 17
6991: PUSH
6992: LD_EXP 16
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: LD_EXP 14
7006: PPUSH
7007: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7011: LD_EXP 17
7015: PPUSH
7016: LD_STRING DM-quest-1
7018: PPUSH
7019: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7023: LD_EXP 16
7027: PPUSH
7028: LD_STRING DG-quest-1
7030: PPUSH
7031: CALL_OW 88
// InGameOff ;
7035: CALL_OW 9
// mercenariesQuestDone := true ;
7039: LD_ADDR_EXP 11
7043: PUSH
7044: LD_INT 1
7046: ST_TO_ADDR
// end ;
7047: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
7048: LD_EXP 14
7052: PPUSH
7053: LD_INT 10
7055: PPUSH
7056: CALL_OW 308
7060: PUSH
7061: LD_EXP 6
7065: AND
7066: PUSH
7067: LD_EXP 10
7071: AND
7072: IFFALSE 7244
7074: GO 7076
7076: DISABLE
7077: LD_INT 0
7079: PPUSH
// begin InGameOn ;
7080: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7084: LD_EXP 15
7088: PUSH
7089: LD_EXP 17
7093: PUSH
7094: LD_EXP 16
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: PPUSH
7104: LD_EXP 14
7108: PPUSH
7109: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7113: LD_EXP 14
7117: PPUSH
7118: LD_INT 54
7120: PPUSH
7121: LD_INT 86
7123: PPUSH
7124: CALL_OW 111
// p := p + 1 ;
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: LD_INT 1
7140: PLUS
7141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7142: LD_INT 35
7144: PPUSH
7145: CALL_OW 67
// p := p + 1 ;
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: LD_VAR 0 1
7158: PUSH
7159: LD_INT 1
7161: PLUS
7162: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7163: LD_EXP 14
7167: PPUSH
7168: LD_EXP 16
7172: PPUSH
7173: CALL_OW 296
7177: PUSH
7178: LD_INT 4
7180: LESS
7181: PUSH
7182: LD_VAR 0 1
7186: PUSH
7187: LD_INT 5
7189: GREATER
7190: OR
7191: IFFALSE 7142
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 17
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 16
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7217: LD_EXP 14
7221: PPUSH
7222: LD_INT 55
7224: PPUSH
7225: LD_INT 87
7227: PPUSH
7228: CALL_OW 111
// InGameOff ;
7232: CALL_OW 9
// mercenariesQuestDone := true ;
7236: LD_ADDR_EXP 11
7240: PUSH
7241: LD_INT 1
7243: ST_TO_ADDR
// end ;
7244: PPOPN 1
7246: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7247: LD_EXP 14
7251: PUSH
7252: LD_INT 55
7254: PUSH
7255: EMPTY
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: IN
7263: IFFALSE 7303
7265: GO 7267
7267: DISABLE
// begin if Difficulty < 3 then
7268: LD_OWVAR 67
7272: PUSH
7273: LD_INT 3
7275: LESS
7276: IFFALSE 7291
// RemoveSeeing ( 59 , 60 , 2 ) ;
7278: LD_INT 59
7280: PPUSH
7281: LD_INT 60
7283: PPUSH
7284: LD_INT 2
7286: PPUSH
7287: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7291: LD_EXP 14
7295: PPUSH
7296: LD_STRING DH-driver
7298: PPUSH
7299: CALL_OW 88
// end ;
7303: END
// every 0 0$1 trigger mercenariesQuestDone do
7304: LD_EXP 11
7308: IFFALSE 7796
7310: GO 7312
7312: DISABLE
// begin if mercenariesQuestReady then
7313: LD_EXP 10
7317: IFFALSE 7326
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7319: LD_STRING O5_proof_cont_out
7321: PPUSH
7322: CALL_OW 337
// InGameOn ;
7326: CALL_OW 8
// if IsInUnit ( Heike ) then
7330: LD_EXP 14
7334: PPUSH
7335: CALL_OW 310
7339: IFFALSE 7350
// ComExitVehicle ( Heike ) ;
7341: LD_EXP 14
7345: PPUSH
7346: CALL_OW 121
// wait ( 3 ) ;
7350: LD_INT 3
7352: PPUSH
7353: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7357: LD_EXP 14
7361: PPUSH
7362: LD_EXP 16
7366: PPUSH
7367: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7371: LD_EXP 15
7375: PUSH
7376: LD_EXP 17
7380: PUSH
7381: LD_EXP 16
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: PPUSH
7391: LD_EXP 14
7395: PPUSH
7396: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7400: LD_EXP 14
7404: PPUSH
7405: LD_STRING DH-quest-done-1
7407: PPUSH
7408: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7412: LD_EXP 17
7416: PPUSH
7417: LD_STRING DM-quest-done-1
7419: PPUSH
7420: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7424: LD_EXP 16
7428: PPUSH
7429: LD_STRING DG-quest-done-1
7431: PPUSH
7432: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7436: LD_EXP 14
7440: PPUSH
7441: LD_EXP 15
7445: PPUSH
7446: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7450: LD_EXP 14
7454: PPUSH
7455: LD_STRING DH-quest-done-2
7457: PPUSH
7458: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7462: LD_EXP 15
7466: PPUSH
7467: LD_STRING DO-quest-done-2
7469: PPUSH
7470: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7474: LD_EXP 15
7478: PPUSH
7479: LD_STRING DO-quest-done-3
7481: PPUSH
7482: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7486: LD_EXP 16
7490: PPUSH
7491: LD_INT 51
7493: PPUSH
7494: LD_INT 90
7496: PPUSH
7497: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7501: LD_EXP 16
7505: PPUSH
7506: LD_INT 50
7508: PPUSH
7509: LD_INT 89
7511: PPUSH
7512: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7516: LD_EXP 14
7520: PPUSH
7521: LD_EXP 16
7525: PPUSH
7526: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7530: LD_EXP 16
7534: PPUSH
7535: LD_STRING DG-quest-done-4
7537: PPUSH
7538: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7542: LD_EXP 16
7546: PPUSH
7547: LD_EXP 14
7551: PPUSH
7552: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7556: LD_EXP 14
7560: PPUSH
7561: CALL_OW 256
7565: PUSH
7566: LD_INT 1000
7568: LESS
7569: IFFALSE 7661
// begin Say ( Olaf , DO-heal-1 ) ;
7571: LD_EXP 15
7575: PPUSH
7576: LD_STRING DO-heal-1
7578: PPUSH
7579: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7583: LD_EXP 14
7587: PPUSH
7588: LD_INT 51
7590: PPUSH
7591: LD_INT 88
7593: PPUSH
7594: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7598: LD_INT 35
7600: PPUSH
7601: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7605: LD_EXP 14
7609: PPUSH
7610: LD_EXP 15
7614: PPUSH
7615: CALL_OW 296
7619: PUSH
7620: LD_INT 4
7622: LESS
7623: PUSH
7624: LD_EXP 14
7628: PPUSH
7629: LD_INT 51
7631: PPUSH
7632: LD_INT 88
7634: PPUSH
7635: CALL_OW 307
7639: OR
7640: IFFALSE 7598
// SetLives ( Heike , 1000 ) ;
7642: LD_EXP 14
7646: PPUSH
7647: LD_INT 1000
7649: PPUSH
7650: CALL_OW 234
// wait ( 0 0$2 ) ;
7654: LD_INT 70
7656: PPUSH
7657: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7661: LD_EXP 14
7665: PPUSH
7666: LD_STRING DH-quest-done-4
7668: PPUSH
7669: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7673: LD_EXP 15
7677: PPUSH
7678: LD_STRING DO-quest-done-4
7680: PPUSH
7681: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_EXP 15
7694: PPUSH
7695: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7699: LD_EXP 14
7703: PPUSH
7704: LD_STRING DH-quest-done-5
7706: PPUSH
7707: CALL_OW 88
// InGameOff ;
7711: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7715: LD_STRING O6_end_cont
7717: PPUSH
7718: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7722: LD_EXP 16
7726: PPUSH
7727: LD_INT 2
7729: PPUSH
7730: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7734: LD_EXP 17
7738: PPUSH
7739: LD_INT 2
7741: PPUSH
7742: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7746: LD_INT 42
7748: PPUSH
7749: LD_INT 2
7751: PPUSH
7752: LD_INT 2
7754: PPUSH
7755: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 53
7766: PPUSH
7767: LD_INT 89
7769: PPUSH
7770: CALL_OW 118
// lastObjectiveActive := true ;
7774: LD_ADDR_EXP 12
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7782: LD_INT 1
7784: PPUSH
7785: LD_INT 1
7787: PPUSH
7788: CALL_OW 424
// PreparePrison ;
7792: CALL 1081 0 0
// end ;
7796: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7797: LD_INT 22
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: LD_INT 91
7809: PUSH
7810: LD_INT 2
7812: PUSH
7813: LD_INT 4
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 69
7829: IFFALSE 7997
7831: GO 7833
7833: DISABLE
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// begin wait ( [ 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
7838: LD_INT 245
7840: PUSH
7841: LD_INT 210
7843: PUSH
7844: LD_INT 175
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: PUSH
7852: LD_OWVAR 67
7856: ARRAY
7857: PPUSH
7858: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7862: LD_ADDR_VAR 0 2
7866: PUSH
7867: LD_INT 22
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 54
7889: PUSH
7890: EMPTY
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// if not tmp then
7903: LD_VAR 0 2
7907: NOT
7908: IFFALSE 7912
// exit ;
7910: GO 7997
// for i in tmp do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: LD_VAR 0 2
7921: PUSH
7922: FOR_IN
7923: IFFALSE 7951
// begin ComExitBuilding ( i ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7934: LD_VAR 0 1
7938: PPUSH
7939: LD_INT 121
7941: PPUSH
7942: LD_INT 22
7944: PPUSH
7945: CALL_OW 174
// end ;
7949: GO 7922
7951: POP
7952: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7953: LD_EXP 21
7957: PPUSH
7958: LD_INT 121
7960: PPUSH
7961: LD_INT 22
7963: PPUSH
7964: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7968: LD_EXP 22
7972: PPUSH
7973: LD_INT 121
7975: PPUSH
7976: LD_INT 22
7978: PPUSH
7979: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7983: LD_EXP 22
7987: PPUSH
7988: LD_EXP 14
7992: PPUSH
7993: CALL_OW 175
// end ;
7997: PPOPN 2
7999: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8000: LD_INT 22
8002: PUSH
8003: LD_INT 2
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 91
8012: PUSH
8013: LD_INT 8
8015: PUSH
8016: LD_INT 4
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PPUSH
8028: CALL_OW 69
8032: IFFALSE 8200
8034: GO 8036
8036: DISABLE
8037: LD_INT 0
8039: PPUSH
8040: PPUSH
// begin wait ( [ 0 0$06 , 0 0$05 , 0 0$04 ] [ Difficulty ] ) ;
8041: LD_INT 210
8043: PUSH
8044: LD_INT 175
8046: PUSH
8047: LD_INT 140
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_OWVAR 67
8059: ARRAY
8060: PPUSH
8061: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 22
8072: PUSH
8073: LD_INT 3
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 54
8092: PUSH
8093: EMPTY
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: ST_TO_ADDR
// if not tmp then
8106: LD_VAR 0 2
8110: NOT
8111: IFFALSE 8115
// exit ;
8113: GO 8200
// for i in tmp do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 2
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8154
// begin ComExitBuilding ( i ) ;
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8137: LD_VAR 0 1
8141: PPUSH
8142: LD_INT 142
8144: PPUSH
8145: LD_INT 71
8147: PPUSH
8148: CALL_OW 174
// end ;
8152: GO 8125
8154: POP
8155: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8156: LD_EXP 21
8160: PPUSH
8161: LD_INT 142
8163: PPUSH
8164: LD_INT 71
8166: PPUSH
8167: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8171: LD_EXP 22
8175: PPUSH
8176: LD_INT 142
8178: PPUSH
8179: LD_INT 71
8181: PPUSH
8182: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
8186: LD_EXP 22
8190: PPUSH
8191: LD_EXP 14
8195: PPUSH
8196: CALL_OW 175
// end ;
8200: PPOPN 2
8202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8203: LD_INT 22
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 21
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 58
8225: PUSH
8226: EMPTY
8227: LIST
8228: PUSH
8229: LD_INT 3
8231: PUSH
8232: LD_INT 24
8234: PUSH
8235: LD_INT 1000
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 91
8248: PUSH
8249: LD_EXP 15
8253: PUSH
8254: LD_INT 8
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 69
8273: PUSH
8274: LD_EXP 15
8278: PPUSH
8279: CALL_OW 302
8283: AND
8284: IFFALSE 8398
8286: GO 8288
8288: DISABLE
// begin enable ;
8289: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8290: LD_EXP 15
8294: PPUSH
8295: LD_INT 22
8297: PUSH
8298: LD_INT 2
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: LD_INT 58
8317: PUSH
8318: EMPTY
8319: LIST
8320: PUSH
8321: LD_INT 3
8323: PUSH
8324: LD_INT 24
8326: PUSH
8327: LD_INT 1000
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 91
8340: PUSH
8341: LD_EXP 15
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 69
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8374: LD_EXP 15
8378: PPUSH
8379: LD_INT 52
8381: PPUSH
8382: LD_INT 90
8384: PPUSH
8385: CALL_OW 171
// AddComHold ( Olaf ) ;
8389: LD_EXP 15
8393: PPUSH
8394: CALL_OW 200
// end ;
8398: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8399: LD_EXP 12
8403: PUSH
8404: LD_INT 2
8406: PPUSH
8407: CALL_OW 302
8411: NOT
8412: AND
8413: PUSH
8414: LD_OWVAR 67
8418: PUSH
8419: LD_INT 1
8421: EQUAL
8422: AND
8423: PUSH
8424: LD_EXP 13
8428: NOT
8429: AND
8430: IFFALSE 8447
8432: GO 8434
8434: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8435: LD_EXP 14
8439: PPUSH
8440: LD_STRING DH-prison-missing
8442: PPUSH
8443: CALL_OW 88
// end ;
8447: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8448: LD_EXP 12
8452: PUSH
8453: LD_INT 8
8455: PPUSH
8456: CALL_OW 302
8460: NOT
8461: AND
8462: PUSH
8463: LD_OWVAR 67
8467: PUSH
8468: LD_INT 1
8470: GREATER
8471: AND
8472: PUSH
8473: LD_EXP 13
8477: NOT
8478: AND
8479: IFFALSE 8496
8481: GO 8483
8483: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8484: LD_EXP 14
8488: PPUSH
8489: LD_STRING DH-prison-missing
8491: PPUSH
8492: CALL_OW 88
// end ;
8496: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8497: LD_EXP 12
8501: PUSH
8502: LD_INT 3
8504: PPUSH
8505: CALL_OW 302
8509: NOT
8510: AND
8511: PUSH
8512: LD_EXP 13
8516: NOT
8517: AND
8518: IFFALSE 8535
8520: GO 8522
8522: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8523: LD_EXP 14
8527: PPUSH
8528: LD_STRING DH-prison-missing-a
8530: PPUSH
8531: CALL_OW 88
// end ;
8535: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8536: LD_EXP 12
8540: PUSH
8541: LD_INT 10
8543: PPUSH
8544: CALL_OW 302
8548: NOT
8549: AND
8550: PUSH
8551: LD_EXP 13
8555: NOT
8556: AND
8557: IFFALSE 8574
8559: GO 8561
8561: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8562: LD_EXP 14
8566: PPUSH
8567: LD_STRING DH-prison-missing-a
8569: PPUSH
8570: CALL_OW 88
// end ;
8574: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8575: LD_EXP 13
8579: NOT
8580: PUSH
8581: LD_EXP 12
8585: AND
8586: PUSH
8587: LD_INT 2
8589: PPUSH
8590: LD_EXP 18
8594: PPUSH
8595: CALL_OW 292
8599: AND
8600: IFFALSE 8687
8602: GO 8604
8604: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8605: LD_EXP 18
8609: PPUSH
8610: LD_EXP 14
8614: PPUSH
8615: CALL_OW 119
// DialogueOn ;
8619: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8623: LD_EXP 18
8627: PPUSH
8628: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8632: LD_EXP 18
8636: PPUSH
8637: LD_STRING DK-prison-found
8639: PPUSH
8640: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8644: LD_EXP 14
8648: PPUSH
8649: LD_STRING DH-prison-found
8651: PPUSH
8652: CALL_OW 88
// DialogueOff ;
8656: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8660: LD_EXP 18
8664: PPUSH
8665: LD_INT 2
8667: PPUSH
8668: CALL_OW 235
// prisonFound := true ;
8672: LD_ADDR_EXP 13
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8680: LD_STRING O6_prison_out
8682: PPUSH
8683: CALL_OW 337
// end ;
8687: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) = 0 do var tmp ;
8688: LD_EXP 12
8692: PUSH
8693: LD_EXP 14
8697: PPUSH
8698: CALL_OW 302
8702: AND
8703: PUSH
8704: LD_INT 1
8706: PPUSH
8707: LD_INT 21
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 22
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 71
8735: PUSH
8736: LD_INT 0
8738: EQUAL
8739: AND
8740: IFFALSE 9049
8742: GO 8744
8744: DISABLE
8745: LD_INT 0
8747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
8748: LD_ADDR_VAR 0 1
8752: PUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 69
8781: ST_TO_ADDR
// if prisonFound then
8782: LD_EXP 13
8786: IFFALSE 8800
// AddMedal ( med1 , 1 ) else
8788: LD_STRING med1
8790: PPUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL_OW 101
8798: GO 8811
// AddMedal ( med1 , - 1 ) ;
8800: LD_STRING med1
8802: PPUSH
8803: LD_INT 1
8805: NEG
8806: PPUSH
8807: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
8811: LD_VAR 0 1
8815: PUSH
8816: LD_INT 3
8818: LESS
8819: PUSH
8820: LD_EXP 13
8824: NOT
8825: AND
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: LD_INT 4
8834: LESS
8835: PUSH
8836: LD_EXP 13
8840: AND
8841: OR
8842: IFFALSE 8857
// AddMedal ( med2 , - 1 ) else
8844: LD_STRING med2
8846: PPUSH
8847: LD_INT 1
8849: NEG
8850: PPUSH
8851: CALL_OW 101
8855: GO 8867
// AddMedal ( med2 , 1 ) ;
8857: LD_STRING med2
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
8867: LD_EXP 13
8871: PUSH
8872: LD_EXP 4
8876: AND
8877: PUSH
8878: LD_VAR 0 1
8882: PUSH
8883: LD_INT 4
8885: GREATEREQUAL
8886: AND
8887: IFFALSE 8901
// AddMedal ( med3 , 1 ) else
8889: LD_STRING med3
8891: PPUSH
8892: LD_INT 1
8894: PPUSH
8895: CALL_OW 101
8899: GO 8912
// AddMedal ( med3 , - 1 ) ;
8901: LD_STRING med3
8903: PPUSH
8904: LD_INT 1
8906: NEG
8907: PPUSH
8908: CALL_OW 101
// GiveMedals ( MAIN ) ;
8912: LD_STRING MAIN
8914: PPUSH
8915: CALL_OW 102
// RewardPeople ( tmp ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
8928: LD_EXP 14
8932: PPUSH
8933: LD_STRING 01_Heike
8935: PPUSH
8936: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
8940: LD_EXP 16
8944: PPUSH
8945: CALL_OW 302
8949: PUSH
8950: LD_EXP 16
8954: PUSH
8955: LD_VAR 0 1
8959: IN
8960: AND
8961: IFFALSE 8975
// SaveCharacters ( Givi , 01_Givi ) ;
8963: LD_EXP 16
8967: PPUSH
8968: LD_STRING 01_Givi
8970: PPUSH
8971: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
8975: LD_EXP 17
8979: PPUSH
8980: CALL_OW 302
8984: PUSH
8985: LD_EXP 17
8989: PUSH
8990: LD_VAR 0 1
8994: IN
8995: AND
8996: IFFALSE 9010
// SaveCharacters ( Mike , 01_Mike ) ;
8998: LD_EXP 17
9002: PPUSH
9003: LD_STRING 01_Mike
9005: PPUSH
9006: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9010: LD_EXP 18
9014: PPUSH
9015: CALL_OW 302
9019: PUSH
9020: LD_EXP 18
9024: PUSH
9025: LD_VAR 0 1
9029: IN
9030: AND
9031: IFFALSE 9045
// SaveCharacters ( Kamil , 01_Kamil ) ;
9033: LD_EXP 18
9037: PPUSH
9038: LD_STRING 01_Kamil
9040: PPUSH
9041: CALL_OW 38
// YouWin ;
9045: CALL_OW 103
// end ; end_of_file
9049: PPOPN 1
9051: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9052: LD_VAR 0 1
9056: PUSH
9057: LD_EXP 14
9061: EQUAL
9062: IFFALSE 9071
// YouLost ( Heike ) ;
9064: LD_STRING Heike
9066: PPUSH
9067: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9071: LD_VAR 0 1
9075: PUSH
9076: LD_INT 22
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IN
9105: IFFALSE 9211
// begin if un in russianPatrol then
9107: LD_VAR 0 1
9111: PUSH
9112: LD_EXP 19
9116: IN
9117: IFFALSE 9135
// russianPatrol := russianPatrol diff un ;
9119: LD_ADDR_EXP 19
9123: PUSH
9124: LD_EXP 19
9128: PUSH
9129: LD_VAR 0 1
9133: DIFF
9134: ST_TO_ADDR
// if un in russianForestPatrol then
9135: LD_VAR 0 1
9139: PUSH
9140: LD_EXP 20
9144: IN
9145: IFFALSE 9163
// russianForestPatrol := russianForestPatrol diff un ;
9147: LD_ADDR_EXP 20
9151: PUSH
9152: LD_EXP 20
9156: PUSH
9157: LD_VAR 0 1
9161: DIFF
9162: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9163: LD_ADDR_EXP 5
9167: PUSH
9168: LD_EXP 5
9172: PPUSH
9173: LD_EXP 5
9177: PUSH
9178: LD_INT 1
9180: PLUS
9181: PPUSH
9182: LD_VAR 0 1
9186: PPUSH
9187: CALL_OW 250
9191: PUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 251
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 1
9210: ST_TO_ADDR
// end ; end ;
9211: PPOPN 1
9213: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9214: LD_VAR 0 1
9218: PUSH
9219: LD_EXP 14
9223: EQUAL
9224: IFFALSE 9233
// YouLost ( Heike ) ;
9226: LD_STRING Heike
9228: PPUSH
9229: CALL_OW 104
// end ;
9233: PPOPN 1
9235: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9236: LD_VAR 0 1
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: IN
9251: PUSH
9252: LD_VAR 0 2
9256: PUSH
9257: LD_INT 5
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: IN
9267: AND
9268: IFFALSE 9277
// YouLost ( FriendlyFire ) ;
9270: LD_STRING FriendlyFire
9272: PPUSH
9273: CALL_OW 104
// end ; end_of_file
9277: PPOPN 2
9279: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9280: GO 9282
9282: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9283: LD_STRING initStreamRollete();
9285: PPUSH
9286: CALL_OW 559
// InitStreamMode ;
9290: CALL 9299 0 0
// DefineStreamItems ( ) ;
9294: CALL 9739 0 0
// end ;
9298: END
// function InitStreamMode ; begin
9299: LD_INT 0
9301: PPUSH
// streamModeActive := false ;
9302: LD_ADDR_EXP 24
9306: PUSH
9307: LD_INT 0
9309: ST_TO_ADDR
// normalCounter := 36 ;
9310: LD_ADDR_EXP 25
9314: PUSH
9315: LD_INT 36
9317: ST_TO_ADDR
// hardcoreCounter := 16 ;
9318: LD_ADDR_EXP 26
9322: PUSH
9323: LD_INT 16
9325: ST_TO_ADDR
// sRocket := false ;
9326: LD_ADDR_EXP 29
9330: PUSH
9331: LD_INT 0
9333: ST_TO_ADDR
// sSpeed := false ;
9334: LD_ADDR_EXP 28
9338: PUSH
9339: LD_INT 0
9341: ST_TO_ADDR
// sEngine := false ;
9342: LD_ADDR_EXP 30
9346: PUSH
9347: LD_INT 0
9349: ST_TO_ADDR
// sSpec := false ;
9350: LD_ADDR_EXP 27
9354: PUSH
9355: LD_INT 0
9357: ST_TO_ADDR
// sLevel := false ;
9358: LD_ADDR_EXP 31
9362: PUSH
9363: LD_INT 0
9365: ST_TO_ADDR
// sArmoury := false ;
9366: LD_ADDR_EXP 32
9370: PUSH
9371: LD_INT 0
9373: ST_TO_ADDR
// sRadar := false ;
9374: LD_ADDR_EXP 33
9378: PUSH
9379: LD_INT 0
9381: ST_TO_ADDR
// sBunker := false ;
9382: LD_ADDR_EXP 34
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// sHack := false ;
9390: LD_ADDR_EXP 35
9394: PUSH
9395: LD_INT 0
9397: ST_TO_ADDR
// sFire := false ;
9398: LD_ADDR_EXP 36
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// sRefresh := false ;
9406: LD_ADDR_EXP 37
9410: PUSH
9411: LD_INT 0
9413: ST_TO_ADDR
// sExp := false ;
9414: LD_ADDR_EXP 38
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// sDepot := false ;
9422: LD_ADDR_EXP 39
9426: PUSH
9427: LD_INT 0
9429: ST_TO_ADDR
// sFlag := false ;
9430: LD_ADDR_EXP 40
9434: PUSH
9435: LD_INT 0
9437: ST_TO_ADDR
// sKamikadze := false ;
9438: LD_ADDR_EXP 48
9442: PUSH
9443: LD_INT 0
9445: ST_TO_ADDR
// sTroll := false ;
9446: LD_ADDR_EXP 49
9450: PUSH
9451: LD_INT 0
9453: ST_TO_ADDR
// sSlow := false ;
9454: LD_ADDR_EXP 50
9458: PUSH
9459: LD_INT 0
9461: ST_TO_ADDR
// sLack := false ;
9462: LD_ADDR_EXP 51
9466: PUSH
9467: LD_INT 0
9469: ST_TO_ADDR
// sTank := false ;
9470: LD_ADDR_EXP 53
9474: PUSH
9475: LD_INT 0
9477: ST_TO_ADDR
// sRemote := false ;
9478: LD_ADDR_EXP 54
9482: PUSH
9483: LD_INT 0
9485: ST_TO_ADDR
// sPowell := false ;
9486: LD_ADDR_EXP 55
9490: PUSH
9491: LD_INT 0
9493: ST_TO_ADDR
// sTeleport := false ;
9494: LD_ADDR_EXP 58
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// sOilTower := false ;
9502: LD_ADDR_EXP 60
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// sShovel := false ;
9510: LD_ADDR_EXP 61
9514: PUSH
9515: LD_INT 0
9517: ST_TO_ADDR
// sSheik := false ;
9518: LD_ADDR_EXP 62
9522: PUSH
9523: LD_INT 0
9525: ST_TO_ADDR
// sEarthquake := false ;
9526: LD_ADDR_EXP 64
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// sAI := false ;
9534: LD_ADDR_EXP 65
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// sCargo := false ;
9542: LD_ADDR_EXP 68
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// sDLaser := false ;
9550: LD_ADDR_EXP 69
9554: PUSH
9555: LD_INT 0
9557: ST_TO_ADDR
// sExchange := false ;
9558: LD_ADDR_EXP 70
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// sFac := false ;
9566: LD_ADDR_EXP 71
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// sPower := false ;
9574: LD_ADDR_EXP 72
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// sRandom := false ;
9582: LD_ADDR_EXP 73
9586: PUSH
9587: LD_INT 0
9589: ST_TO_ADDR
// sShield := false ;
9590: LD_ADDR_EXP 74
9594: PUSH
9595: LD_INT 0
9597: ST_TO_ADDR
// sTime := false ;
9598: LD_ADDR_EXP 75
9602: PUSH
9603: LD_INT 0
9605: ST_TO_ADDR
// sTools := false ;
9606: LD_ADDR_EXP 76
9610: PUSH
9611: LD_INT 0
9613: ST_TO_ADDR
// sSold := false ;
9614: LD_ADDR_EXP 41
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// sDiff := false ;
9622: LD_ADDR_EXP 42
9626: PUSH
9627: LD_INT 0
9629: ST_TO_ADDR
// sFog := false ;
9630: LD_ADDR_EXP 45
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// sReset := false ;
9638: LD_ADDR_EXP 46
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// sSun := false ;
9646: LD_ADDR_EXP 47
9650: PUSH
9651: LD_INT 0
9653: ST_TO_ADDR
// sTiger := false ;
9654: LD_ADDR_EXP 43
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// sBomb := false ;
9662: LD_ADDR_EXP 44
9666: PUSH
9667: LD_INT 0
9669: ST_TO_ADDR
// sWound := false ;
9670: LD_ADDR_EXP 52
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// sBetray := false ;
9678: LD_ADDR_EXP 56
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// sContamin := false ;
9686: LD_ADDR_EXP 57
9690: PUSH
9691: LD_INT 0
9693: ST_TO_ADDR
// sOil := false ;
9694: LD_ADDR_EXP 59
9698: PUSH
9699: LD_INT 0
9701: ST_TO_ADDR
// sStu := false ;
9702: LD_ADDR_EXP 63
9706: PUSH
9707: LD_INT 0
9709: ST_TO_ADDR
// sBazooka := false ;
9710: LD_ADDR_EXP 66
9714: PUSH
9715: LD_INT 0
9717: ST_TO_ADDR
// sMortar := false ;
9718: LD_ADDR_EXP 67
9722: PUSH
9723: LD_INT 0
9725: ST_TO_ADDR
// sRanger := false ;
9726: LD_ADDR_EXP 77
9730: PUSH
9731: LD_INT 0
9733: ST_TO_ADDR
// end ;
9734: LD_VAR 0 1
9738: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9739: LD_INT 0
9741: PPUSH
9742: PPUSH
9743: PPUSH
9744: PPUSH
9745: PPUSH
// result := [ ] ;
9746: LD_ADDR_VAR 0 1
9750: PUSH
9751: EMPTY
9752: ST_TO_ADDR
// if campaign_id = 1 then
9753: LD_OWVAR 69
9757: PUSH
9758: LD_INT 1
9760: EQUAL
9761: IFFALSE 12699
// begin case mission_number of 1 :
9763: LD_OWVAR 70
9767: PUSH
9768: LD_INT 1
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9840
9776: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9777: LD_ADDR_VAR 0 1
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 11
9790: PUSH
9791: LD_INT 12
9793: PUSH
9794: LD_INT 15
9796: PUSH
9797: LD_INT 16
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_INT 23
9805: PUSH
9806: LD_INT 26
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 101
9822: PUSH
9823: LD_INT 102
9825: PUSH
9826: LD_INT 106
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
9838: GO 12697
9840: LD_INT 2
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 9920
9848: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9849: LD_ADDR_VAR 0 1
9853: PUSH
9854: LD_INT 2
9856: PUSH
9857: LD_INT 4
9859: PUSH
9860: LD_INT 11
9862: PUSH
9863: LD_INT 12
9865: PUSH
9866: LD_INT 15
9868: PUSH
9869: LD_INT 16
9871: PUSH
9872: LD_INT 22
9874: PUSH
9875: LD_INT 23
9877: PUSH
9878: LD_INT 26
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 101
9894: PUSH
9895: LD_INT 102
9897: PUSH
9898: LD_INT 105
9900: PUSH
9901: LD_INT 106
9903: PUSH
9904: LD_INT 108
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: ST_TO_ADDR
9918: GO 12697
9920: LD_INT 3
9922: DOUBLE
9923: EQUAL
9924: IFTRUE 9928
9926: GO 10004
9928: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9929: LD_ADDR_VAR 0 1
9933: PUSH
9934: LD_INT 2
9936: PUSH
9937: LD_INT 4
9939: PUSH
9940: LD_INT 5
9942: PUSH
9943: LD_INT 11
9945: PUSH
9946: LD_INT 12
9948: PUSH
9949: LD_INT 15
9951: PUSH
9952: LD_INT 16
9954: PUSH
9955: LD_INT 22
9957: PUSH
9958: LD_INT 26
9960: PUSH
9961: LD_INT 36
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 101
9978: PUSH
9979: LD_INT 102
9981: PUSH
9982: LD_INT 105
9984: PUSH
9985: LD_INT 106
9987: PUSH
9988: LD_INT 108
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 12697
10004: LD_INT 4
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10096
10012: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10013: LD_ADDR_VAR 0 1
10017: PUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 4
10023: PUSH
10024: LD_INT 5
10026: PUSH
10027: LD_INT 8
10029: PUSH
10030: LD_INT 11
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: LD_INT 15
10038: PUSH
10039: LD_INT 16
10041: PUSH
10042: LD_INT 22
10044: PUSH
10045: LD_INT 23
10047: PUSH
10048: LD_INT 26
10050: PUSH
10051: LD_INT 36
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 101
10070: PUSH
10071: LD_INT 102
10073: PUSH
10074: LD_INT 105
10076: PUSH
10077: LD_INT 106
10079: PUSH
10080: LD_INT 108
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: ST_TO_ADDR
10094: GO 12697
10096: LD_INT 5
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10204
10104: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 4
10115: PUSH
10116: LD_INT 5
10118: PUSH
10119: LD_INT 6
10121: PUSH
10122: LD_INT 8
10124: PUSH
10125: LD_INT 11
10127: PUSH
10128: LD_INT 12
10130: PUSH
10131: LD_INT 15
10133: PUSH
10134: LD_INT 16
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_INT 23
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 26
10148: PUSH
10149: LD_INT 36
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 101
10170: PUSH
10171: LD_INT 102
10173: PUSH
10174: LD_INT 105
10176: PUSH
10177: LD_INT 106
10179: PUSH
10180: LD_INT 108
10182: PUSH
10183: LD_INT 109
10185: PUSH
10186: LD_INT 112
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: ST_TO_ADDR
10202: GO 12697
10204: LD_INT 6
10206: DOUBLE
10207: EQUAL
10208: IFTRUE 10212
10210: GO 10332
10212: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10213: LD_ADDR_VAR 0 1
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: LD_INT 4
10223: PUSH
10224: LD_INT 5
10226: PUSH
10227: LD_INT 6
10229: PUSH
10230: LD_INT 8
10232: PUSH
10233: LD_INT 11
10235: PUSH
10236: LD_INT 12
10238: PUSH
10239: LD_INT 15
10241: PUSH
10242: LD_INT 16
10244: PUSH
10245: LD_INT 20
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: LD_INT 23
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 26
10262: PUSH
10263: LD_INT 30
10265: PUSH
10266: LD_INT 31
10268: PUSH
10269: LD_INT 32
10271: PUSH
10272: LD_INT 36
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 101
10298: PUSH
10299: LD_INT 102
10301: PUSH
10302: LD_INT 105
10304: PUSH
10305: LD_INT 106
10307: PUSH
10308: LD_INT 108
10310: PUSH
10311: LD_INT 109
10313: PUSH
10314: LD_INT 112
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: ST_TO_ADDR
10330: GO 12697
10332: LD_INT 7
10334: DOUBLE
10335: EQUAL
10336: IFTRUE 10340
10338: GO 10440
10340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10341: LD_ADDR_VAR 0 1
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 4
10351: PUSH
10352: LD_INT 5
10354: PUSH
10355: LD_INT 7
10357: PUSH
10358: LD_INT 11
10360: PUSH
10361: LD_INT 12
10363: PUSH
10364: LD_INT 15
10366: PUSH
10367: LD_INT 16
10369: PUSH
10370: LD_INT 20
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 22
10378: PUSH
10379: LD_INT 23
10381: PUSH
10382: LD_INT 25
10384: PUSH
10385: LD_INT 26
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 101
10406: PUSH
10407: LD_INT 102
10409: PUSH
10410: LD_INT 103
10412: PUSH
10413: LD_INT 105
10415: PUSH
10416: LD_INT 106
10418: PUSH
10419: LD_INT 108
10421: PUSH
10422: LD_INT 112
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: ST_TO_ADDR
10438: GO 12697
10440: LD_INT 8
10442: DOUBLE
10443: EQUAL
10444: IFTRUE 10448
10446: GO 10576
10448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10449: LD_ADDR_VAR 0 1
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: LD_INT 5
10462: PUSH
10463: LD_INT 6
10465: PUSH
10466: LD_INT 7
10468: PUSH
10469: LD_INT 8
10471: PUSH
10472: LD_INT 11
10474: PUSH
10475: LD_INT 12
10477: PUSH
10478: LD_INT 15
10480: PUSH
10481: LD_INT 16
10483: PUSH
10484: LD_INT 20
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 22
10492: PUSH
10493: LD_INT 23
10495: PUSH
10496: LD_INT 25
10498: PUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 30
10504: PUSH
10505: LD_INT 31
10507: PUSH
10508: LD_INT 32
10510: PUSH
10511: LD_INT 36
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 101
10538: PUSH
10539: LD_INT 102
10541: PUSH
10542: LD_INT 103
10544: PUSH
10545: LD_INT 105
10547: PUSH
10548: LD_INT 106
10550: PUSH
10551: LD_INT 108
10553: PUSH
10554: LD_INT 109
10556: PUSH
10557: LD_INT 112
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
10574: GO 12697
10576: LD_INT 9
10578: DOUBLE
10579: EQUAL
10580: IFTRUE 10584
10582: GO 10720
10584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10585: LD_ADDR_VAR 0 1
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 4
10595: PUSH
10596: LD_INT 5
10598: PUSH
10599: LD_INT 6
10601: PUSH
10602: LD_INT 7
10604: PUSH
10605: LD_INT 8
10607: PUSH
10608: LD_INT 11
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: LD_INT 15
10616: PUSH
10617: LD_INT 16
10619: PUSH
10620: LD_INT 20
10622: PUSH
10623: LD_INT 21
10625: PUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 25
10634: PUSH
10635: LD_INT 26
10637: PUSH
10638: LD_INT 28
10640: PUSH
10641: LD_INT 30
10643: PUSH
10644: LD_INT 31
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 36
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 101
10678: PUSH
10679: LD_INT 102
10681: PUSH
10682: LD_INT 103
10684: PUSH
10685: LD_INT 105
10687: PUSH
10688: LD_INT 106
10690: PUSH
10691: LD_INT 108
10693: PUSH
10694: LD_INT 109
10696: PUSH
10697: LD_INT 112
10699: PUSH
10700: LD_INT 114
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: ST_TO_ADDR
10718: GO 12697
10720: LD_INT 10
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10912
10728: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 4
10739: PUSH
10740: LD_INT 5
10742: PUSH
10743: LD_INT 6
10745: PUSH
10746: LD_INT 7
10748: PUSH
10749: LD_INT 8
10751: PUSH
10752: LD_INT 9
10754: PUSH
10755: LD_INT 10
10757: PUSH
10758: LD_INT 11
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 13
10766: PUSH
10767: LD_INT 14
10769: PUSH
10770: LD_INT 15
10772: PUSH
10773: LD_INT 16
10775: PUSH
10776: LD_INT 17
10778: PUSH
10779: LD_INT 18
10781: PUSH
10782: LD_INT 19
10784: PUSH
10785: LD_INT 20
10787: PUSH
10788: LD_INT 21
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_INT 23
10796: PUSH
10797: LD_INT 24
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 28
10808: PUSH
10809: LD_INT 30
10811: PUSH
10812: LD_INT 31
10814: PUSH
10815: LD_INT 32
10817: PUSH
10818: LD_INT 36
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 101
10854: PUSH
10855: LD_INT 102
10857: PUSH
10858: LD_INT 103
10860: PUSH
10861: LD_INT 104
10863: PUSH
10864: LD_INT 105
10866: PUSH
10867: LD_INT 106
10869: PUSH
10870: LD_INT 107
10872: PUSH
10873: LD_INT 108
10875: PUSH
10876: LD_INT 109
10878: PUSH
10879: LD_INT 110
10881: PUSH
10882: LD_INT 111
10884: PUSH
10885: LD_INT 112
10887: PUSH
10888: LD_INT 114
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: ST_TO_ADDR
10910: GO 12697
10912: LD_INT 11
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 11112
10920: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: LD_INT 3
10931: PUSH
10932: LD_INT 4
10934: PUSH
10935: LD_INT 5
10937: PUSH
10938: LD_INT 6
10940: PUSH
10941: LD_INT 7
10943: PUSH
10944: LD_INT 8
10946: PUSH
10947: LD_INT 9
10949: PUSH
10950: LD_INT 10
10952: PUSH
10953: LD_INT 11
10955: PUSH
10956: LD_INT 12
10958: PUSH
10959: LD_INT 13
10961: PUSH
10962: LD_INT 14
10964: PUSH
10965: LD_INT 15
10967: PUSH
10968: LD_INT 16
10970: PUSH
10971: LD_INT 17
10973: PUSH
10974: LD_INT 18
10976: PUSH
10977: LD_INT 19
10979: PUSH
10980: LD_INT 20
10982: PUSH
10983: LD_INT 21
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_INT 23
10991: PUSH
10992: LD_INT 24
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 26
11000: PUSH
11001: LD_INT 28
11003: PUSH
11004: LD_INT 30
11006: PUSH
11007: LD_INT 31
11009: PUSH
11010: LD_INT 32
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 36
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 101
11054: PUSH
11055: LD_INT 102
11057: PUSH
11058: LD_INT 103
11060: PUSH
11061: LD_INT 104
11063: PUSH
11064: LD_INT 105
11066: PUSH
11067: LD_INT 106
11069: PUSH
11070: LD_INT 107
11072: PUSH
11073: LD_INT 108
11075: PUSH
11076: LD_INT 109
11078: PUSH
11079: LD_INT 110
11081: PUSH
11082: LD_INT 111
11084: PUSH
11085: LD_INT 112
11087: PUSH
11088: LD_INT 114
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: ST_TO_ADDR
11110: GO 12697
11112: LD_INT 12
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11328
11120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11121: LD_ADDR_VAR 0 1
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: LD_INT 4
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 6
11143: PUSH
11144: LD_INT 7
11146: PUSH
11147: LD_INT 8
11149: PUSH
11150: LD_INT 9
11152: PUSH
11153: LD_INT 10
11155: PUSH
11156: LD_INT 11
11158: PUSH
11159: LD_INT 12
11161: PUSH
11162: LD_INT 13
11164: PUSH
11165: LD_INT 14
11167: PUSH
11168: LD_INT 15
11170: PUSH
11171: LD_INT 16
11173: PUSH
11174: LD_INT 17
11176: PUSH
11177: LD_INT 18
11179: PUSH
11180: LD_INT 19
11182: PUSH
11183: LD_INT 20
11185: PUSH
11186: LD_INT 21
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 23
11194: PUSH
11195: LD_INT 24
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 26
11203: PUSH
11204: LD_INT 27
11206: PUSH
11207: LD_INT 28
11209: PUSH
11210: LD_INT 30
11212: PUSH
11213: LD_INT 31
11215: PUSH
11216: LD_INT 32
11218: PUSH
11219: LD_INT 33
11221: PUSH
11222: LD_INT 34
11224: PUSH
11225: LD_INT 36
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 101
11266: PUSH
11267: LD_INT 102
11269: PUSH
11270: LD_INT 103
11272: PUSH
11273: LD_INT 104
11275: PUSH
11276: LD_INT 105
11278: PUSH
11279: LD_INT 106
11281: PUSH
11282: LD_INT 107
11284: PUSH
11285: LD_INT 108
11287: PUSH
11288: LD_INT 109
11290: PUSH
11291: LD_INT 110
11293: PUSH
11294: LD_INT 111
11296: PUSH
11297: LD_INT 112
11299: PUSH
11300: LD_INT 113
11302: PUSH
11303: LD_INT 114
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: ST_TO_ADDR
11326: GO 12697
11328: LD_INT 13
11330: DOUBLE
11331: EQUAL
11332: IFTRUE 11336
11334: GO 11532
11336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11337: LD_ADDR_VAR 0 1
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: LD_INT 3
11350: PUSH
11351: LD_INT 4
11353: PUSH
11354: LD_INT 5
11356: PUSH
11357: LD_INT 8
11359: PUSH
11360: LD_INT 9
11362: PUSH
11363: LD_INT 10
11365: PUSH
11366: LD_INT 11
11368: PUSH
11369: LD_INT 12
11371: PUSH
11372: LD_INT 14
11374: PUSH
11375: LD_INT 15
11377: PUSH
11378: LD_INT 16
11380: PUSH
11381: LD_INT 17
11383: PUSH
11384: LD_INT 18
11386: PUSH
11387: LD_INT 19
11389: PUSH
11390: LD_INT 20
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 22
11398: PUSH
11399: LD_INT 23
11401: PUSH
11402: LD_INT 24
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 26
11410: PUSH
11411: LD_INT 27
11413: PUSH
11414: LD_INT 28
11416: PUSH
11417: LD_INT 30
11419: PUSH
11420: LD_INT 31
11422: PUSH
11423: LD_INT 32
11425: PUSH
11426: LD_INT 33
11428: PUSH
11429: LD_INT 34
11431: PUSH
11432: LD_INT 36
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 101
11470: PUSH
11471: LD_INT 102
11473: PUSH
11474: LD_INT 103
11476: PUSH
11477: LD_INT 104
11479: PUSH
11480: LD_INT 105
11482: PUSH
11483: LD_INT 106
11485: PUSH
11486: LD_INT 107
11488: PUSH
11489: LD_INT 108
11491: PUSH
11492: LD_INT 109
11494: PUSH
11495: LD_INT 110
11497: PUSH
11498: LD_INT 111
11500: PUSH
11501: LD_INT 112
11503: PUSH
11504: LD_INT 113
11506: PUSH
11507: LD_INT 114
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 12697
11532: LD_INT 14
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11752
11540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: LD_INT 1
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 3
11554: PUSH
11555: LD_INT 4
11557: PUSH
11558: LD_INT 5
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 7
11566: PUSH
11567: LD_INT 8
11569: PUSH
11570: LD_INT 9
11572: PUSH
11573: LD_INT 10
11575: PUSH
11576: LD_INT 11
11578: PUSH
11579: LD_INT 12
11581: PUSH
11582: LD_INT 13
11584: PUSH
11585: LD_INT 14
11587: PUSH
11588: LD_INT 15
11590: PUSH
11591: LD_INT 16
11593: PUSH
11594: LD_INT 17
11596: PUSH
11597: LD_INT 18
11599: PUSH
11600: LD_INT 19
11602: PUSH
11603: LD_INT 20
11605: PUSH
11606: LD_INT 21
11608: PUSH
11609: LD_INT 22
11611: PUSH
11612: LD_INT 23
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 25
11620: PUSH
11621: LD_INT 26
11623: PUSH
11624: LD_INT 27
11626: PUSH
11627: LD_INT 28
11629: PUSH
11630: LD_INT 29
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 31
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 33
11644: PUSH
11645: LD_INT 34
11647: PUSH
11648: LD_INT 36
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 101
11690: PUSH
11691: LD_INT 102
11693: PUSH
11694: LD_INT 103
11696: PUSH
11697: LD_INT 104
11699: PUSH
11700: LD_INT 105
11702: PUSH
11703: LD_INT 106
11705: PUSH
11706: LD_INT 107
11708: PUSH
11709: LD_INT 108
11711: PUSH
11712: LD_INT 109
11714: PUSH
11715: LD_INT 110
11717: PUSH
11718: LD_INT 111
11720: PUSH
11721: LD_INT 112
11723: PUSH
11724: LD_INT 113
11726: PUSH
11727: LD_INT 114
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: ST_TO_ADDR
11750: GO 12697
11752: LD_INT 15
11754: DOUBLE
11755: EQUAL
11756: IFTRUE 11760
11758: GO 11972
11760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11761: LD_ADDR_VAR 0 1
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 3
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: LD_INT 6
11783: PUSH
11784: LD_INT 7
11786: PUSH
11787: LD_INT 8
11789: PUSH
11790: LD_INT 9
11792: PUSH
11793: LD_INT 10
11795: PUSH
11796: LD_INT 11
11798: PUSH
11799: LD_INT 12
11801: PUSH
11802: LD_INT 13
11804: PUSH
11805: LD_INT 14
11807: PUSH
11808: LD_INT 15
11810: PUSH
11811: LD_INT 16
11813: PUSH
11814: LD_INT 17
11816: PUSH
11817: LD_INT 18
11819: PUSH
11820: LD_INT 19
11822: PUSH
11823: LD_INT 20
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_INT 23
11834: PUSH
11835: LD_INT 24
11837: PUSH
11838: LD_INT 25
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 27
11846: PUSH
11847: LD_INT 28
11849: PUSH
11850: LD_INT 29
11852: PUSH
11853: LD_INT 30
11855: PUSH
11856: LD_INT 31
11858: PUSH
11859: LD_INT 32
11861: PUSH
11862: LD_INT 33
11864: PUSH
11865: LD_INT 34
11867: PUSH
11868: LD_INT 36
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 101
11910: PUSH
11911: LD_INT 102
11913: PUSH
11914: LD_INT 103
11916: PUSH
11917: LD_INT 104
11919: PUSH
11920: LD_INT 105
11922: PUSH
11923: LD_INT 106
11925: PUSH
11926: LD_INT 107
11928: PUSH
11929: LD_INT 108
11931: PUSH
11932: LD_INT 109
11934: PUSH
11935: LD_INT 110
11937: PUSH
11938: LD_INT 111
11940: PUSH
11941: LD_INT 112
11943: PUSH
11944: LD_INT 113
11946: PUSH
11947: LD_INT 114
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: ST_TO_ADDR
11970: GO 12697
11972: LD_INT 16
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 12104
11980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_INT 2
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: LD_INT 5
11994: PUSH
11995: LD_INT 7
11997: PUSH
11998: LD_INT 11
12000: PUSH
12001: LD_INT 12
12003: PUSH
12004: LD_INT 15
12006: PUSH
12007: LD_INT 16
12009: PUSH
12010: LD_INT 20
12012: PUSH
12013: LD_INT 21
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 23
12021: PUSH
12022: LD_INT 25
12024: PUSH
12025: LD_INT 26
12027: PUSH
12028: LD_INT 30
12030: PUSH
12031: LD_INT 31
12033: PUSH
12034: LD_INT 32
12036: PUSH
12037: LD_INT 33
12039: PUSH
12040: LD_INT 34
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 101
12066: PUSH
12067: LD_INT 102
12069: PUSH
12070: LD_INT 103
12072: PUSH
12073: LD_INT 106
12075: PUSH
12076: LD_INT 108
12078: PUSH
12079: LD_INT 112
12081: PUSH
12082: LD_INT 113
12084: PUSH
12085: LD_INT 114
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: ST_TO_ADDR
12102: GO 12697
12104: LD_INT 17
12106: DOUBLE
12107: EQUAL
12108: IFTRUE 12112
12110: GO 12324
12112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12113: LD_ADDR_VAR 0 1
12117: PUSH
12118: LD_INT 1
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: LD_INT 4
12129: PUSH
12130: LD_INT 5
12132: PUSH
12133: LD_INT 6
12135: PUSH
12136: LD_INT 7
12138: PUSH
12139: LD_INT 8
12141: PUSH
12142: LD_INT 9
12144: PUSH
12145: LD_INT 10
12147: PUSH
12148: LD_INT 11
12150: PUSH
12151: LD_INT 12
12153: PUSH
12154: LD_INT 13
12156: PUSH
12157: LD_INT 14
12159: PUSH
12160: LD_INT 15
12162: PUSH
12163: LD_INT 16
12165: PUSH
12166: LD_INT 17
12168: PUSH
12169: LD_INT 18
12171: PUSH
12172: LD_INT 19
12174: PUSH
12175: LD_INT 20
12177: PUSH
12178: LD_INT 21
12180: PUSH
12181: LD_INT 22
12183: PUSH
12184: LD_INT 23
12186: PUSH
12187: LD_INT 24
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 26
12195: PUSH
12196: LD_INT 27
12198: PUSH
12199: LD_INT 28
12201: PUSH
12202: LD_INT 29
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 31
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: LD_INT 33
12216: PUSH
12217: LD_INT 34
12219: PUSH
12220: LD_INT 36
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 101
12262: PUSH
12263: LD_INT 102
12265: PUSH
12266: LD_INT 103
12268: PUSH
12269: LD_INT 104
12271: PUSH
12272: LD_INT 105
12274: PUSH
12275: LD_INT 106
12277: PUSH
12278: LD_INT 107
12280: PUSH
12281: LD_INT 108
12283: PUSH
12284: LD_INT 109
12286: PUSH
12287: LD_INT 110
12289: PUSH
12290: LD_INT 111
12292: PUSH
12293: LD_INT 112
12295: PUSH
12296: LD_INT 113
12298: PUSH
12299: LD_INT 114
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: ST_TO_ADDR
12322: GO 12697
12324: LD_INT 18
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12468
12332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 4
12343: PUSH
12344: LD_INT 5
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: LD_INT 11
12352: PUSH
12353: LD_INT 12
12355: PUSH
12356: LD_INT 15
12358: PUSH
12359: LD_INT 16
12361: PUSH
12362: LD_INT 20
12364: PUSH
12365: LD_INT 21
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 23
12373: PUSH
12374: LD_INT 25
12376: PUSH
12377: LD_INT 26
12379: PUSH
12380: LD_INT 30
12382: PUSH
12383: LD_INT 31
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 33
12391: PUSH
12392: LD_INT 34
12394: PUSH
12395: LD_INT 35
12397: PUSH
12398: LD_INT 36
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 101
12426: PUSH
12427: LD_INT 102
12429: PUSH
12430: LD_INT 103
12432: PUSH
12433: LD_INT 106
12435: PUSH
12436: LD_INT 108
12438: PUSH
12439: LD_INT 112
12441: PUSH
12442: LD_INT 113
12444: PUSH
12445: LD_INT 114
12447: PUSH
12448: LD_INT 115
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: ST_TO_ADDR
12466: GO 12697
12468: LD_INT 19
12470: DOUBLE
12471: EQUAL
12472: IFTRUE 12476
12474: GO 12696
12476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12477: LD_ADDR_VAR 0 1
12481: PUSH
12482: LD_INT 1
12484: PUSH
12485: LD_INT 2
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: LD_INT 5
12496: PUSH
12497: LD_INT 6
12499: PUSH
12500: LD_INT 7
12502: PUSH
12503: LD_INT 8
12505: PUSH
12506: LD_INT 9
12508: PUSH
12509: LD_INT 10
12511: PUSH
12512: LD_INT 11
12514: PUSH
12515: LD_INT 12
12517: PUSH
12518: LD_INT 13
12520: PUSH
12521: LD_INT 14
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: LD_INT 16
12529: PUSH
12530: LD_INT 17
12532: PUSH
12533: LD_INT 18
12535: PUSH
12536: LD_INT 19
12538: PUSH
12539: LD_INT 20
12541: PUSH
12542: LD_INT 21
12544: PUSH
12545: LD_INT 22
12547: PUSH
12548: LD_INT 23
12550: PUSH
12551: LD_INT 24
12553: PUSH
12554: LD_INT 25
12556: PUSH
12557: LD_INT 26
12559: PUSH
12560: LD_INT 27
12562: PUSH
12563: LD_INT 28
12565: PUSH
12566: LD_INT 29
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 31
12574: PUSH
12575: LD_INT 32
12577: PUSH
12578: LD_INT 33
12580: PUSH
12581: LD_INT 34
12583: PUSH
12584: LD_INT 35
12586: PUSH
12587: LD_INT 36
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 101
12630: PUSH
12631: LD_INT 102
12633: PUSH
12634: LD_INT 103
12636: PUSH
12637: LD_INT 104
12639: PUSH
12640: LD_INT 105
12642: PUSH
12643: LD_INT 106
12645: PUSH
12646: LD_INT 107
12648: PUSH
12649: LD_INT 108
12651: PUSH
12652: LD_INT 109
12654: PUSH
12655: LD_INT 110
12657: PUSH
12658: LD_INT 111
12660: PUSH
12661: LD_INT 112
12663: PUSH
12664: LD_INT 113
12666: PUSH
12667: LD_INT 114
12669: PUSH
12670: LD_INT 115
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: ST_TO_ADDR
12694: GO 12697
12696: POP
// end else
12697: GO 12734
// if campaign_id = 5 then
12699: LD_OWVAR 69
12703: PUSH
12704: LD_INT 5
12706: EQUAL
12707: IFFALSE 12734
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 100
12726: PUSH
12727: EMPTY
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
// end ; if result then
12734: LD_VAR 0 1
12738: IFFALSE 13027
// begin normal :=  ;
12740: LD_ADDR_VAR 0 3
12744: PUSH
12745: LD_STRING 
12747: ST_TO_ADDR
// hardcore :=  ;
12748: LD_ADDR_VAR 0 4
12752: PUSH
12753: LD_STRING 
12755: ST_TO_ADDR
// for i = 1 to normalCounter do
12756: LD_ADDR_VAR 0 5
12760: PUSH
12761: DOUBLE
12762: LD_INT 1
12764: DEC
12765: ST_TO_ADDR
12766: LD_EXP 25
12770: PUSH
12771: FOR_TO
12772: IFFALSE 12873
// begin tmp := 0 ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_STRING 0
12781: ST_TO_ADDR
// if result [ 1 ] then
12782: LD_VAR 0 1
12786: PUSH
12787: LD_INT 1
12789: ARRAY
12790: IFFALSE 12855
// if result [ 1 ] [ 1 ] = i then
12792: LD_VAR 0 1
12796: PUSH
12797: LD_INT 1
12799: ARRAY
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PUSH
12805: LD_VAR 0 5
12809: EQUAL
12810: IFFALSE 12855
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_VAR 0 1
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_VAR 0 1
12829: PUSH
12830: LD_INT 1
12832: ARRAY
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 3
12841: PPUSH
12842: CALL_OW 1
12846: ST_TO_ADDR
// tmp := 1 ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_STRING 1
12854: ST_TO_ADDR
// end ; normal := normal & tmp ;
12855: LD_ADDR_VAR 0 3
12859: PUSH
12860: LD_VAR 0 3
12864: PUSH
12865: LD_VAR 0 2
12869: STR
12870: ST_TO_ADDR
// end ;
12871: GO 12771
12873: POP
12874: POP
// for i = 1 to hardcoreCounter do
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: DOUBLE
12881: LD_INT 1
12883: DEC
12884: ST_TO_ADDR
12885: LD_EXP 26
12889: PUSH
12890: FOR_TO
12891: IFFALSE 12996
// begin tmp := 0 ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_STRING 0
12900: ST_TO_ADDR
// if result [ 2 ] then
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 2
12908: ARRAY
12909: IFFALSE 12978
// if result [ 2 ] [ 1 ] = 100 + i then
12911: LD_VAR 0 1
12915: PUSH
12916: LD_INT 2
12918: ARRAY
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PUSH
12924: LD_INT 100
12926: PUSH
12927: LD_VAR 0 5
12931: PLUS
12932: EQUAL
12933: IFFALSE 12978
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12935: LD_ADDR_VAR 0 1
12939: PUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_INT 2
12947: PPUSH
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 2
12955: ARRAY
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 3
12964: PPUSH
12965: CALL_OW 1
12969: ST_TO_ADDR
// tmp := 1 ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_STRING 1
12977: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12978: LD_ADDR_VAR 0 4
12982: PUSH
12983: LD_VAR 0 4
12987: PUSH
12988: LD_VAR 0 2
12992: STR
12993: ST_TO_ADDR
// end ;
12994: GO 12890
12996: POP
12997: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12998: LD_STRING getStreamItemsFromMission("
13000: PUSH
13001: LD_VAR 0 3
13005: STR
13006: PUSH
13007: LD_STRING ","
13009: STR
13010: PUSH
13011: LD_VAR 0 4
13015: STR
13016: PUSH
13017: LD_STRING ")
13019: STR
13020: PPUSH
13021: CALL_OW 559
// end else
13025: GO 13034
// ToLua ( getStreamItemsFromMission("","") ) ;
13027: LD_STRING getStreamItemsFromMission("","")
13029: PPUSH
13030: CALL_OW 559
// end ;
13034: LD_VAR 0 1
13038: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13039: LD_VAR 0 2
13043: PUSH
13044: LD_INT 100
13046: EQUAL
13047: IFFALSE 13996
// begin if not StreamModeActive then
13049: LD_EXP 24
13053: NOT
13054: IFFALSE 13064
// StreamModeActive := true ;
13056: LD_ADDR_EXP 24
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// if p3 = 0 then
13064: LD_VAR 0 3
13068: PUSH
13069: LD_INT 0
13071: EQUAL
13072: IFFALSE 13078
// InitStreamMode ;
13074: CALL 9299 0 0
// if p3 = 1 then
13078: LD_VAR 0 3
13082: PUSH
13083: LD_INT 1
13085: EQUAL
13086: IFFALSE 13096
// sRocket := true ;
13088: LD_ADDR_EXP 29
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// if p3 = 2 then
13096: LD_VAR 0 3
13100: PUSH
13101: LD_INT 2
13103: EQUAL
13104: IFFALSE 13114
// sSpeed := true ;
13106: LD_ADDR_EXP 28
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// if p3 = 3 then
13114: LD_VAR 0 3
13118: PUSH
13119: LD_INT 3
13121: EQUAL
13122: IFFALSE 13132
// sEngine := true ;
13124: LD_ADDR_EXP 30
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// if p3 = 4 then
13132: LD_VAR 0 3
13136: PUSH
13137: LD_INT 4
13139: EQUAL
13140: IFFALSE 13150
// sSpec := true ;
13142: LD_ADDR_EXP 27
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if p3 = 5 then
13150: LD_VAR 0 3
13154: PUSH
13155: LD_INT 5
13157: EQUAL
13158: IFFALSE 13168
// sLevel := true ;
13160: LD_ADDR_EXP 31
13164: PUSH
13165: LD_INT 1
13167: ST_TO_ADDR
// if p3 = 6 then
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 6
13175: EQUAL
13176: IFFALSE 13186
// sArmoury := true ;
13178: LD_ADDR_EXP 32
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// if p3 = 7 then
13186: LD_VAR 0 3
13190: PUSH
13191: LD_INT 7
13193: EQUAL
13194: IFFALSE 13204
// sRadar := true ;
13196: LD_ADDR_EXP 33
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// if p3 = 8 then
13204: LD_VAR 0 3
13208: PUSH
13209: LD_INT 8
13211: EQUAL
13212: IFFALSE 13222
// sBunker := true ;
13214: LD_ADDR_EXP 34
13218: PUSH
13219: LD_INT 1
13221: ST_TO_ADDR
// if p3 = 9 then
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 9
13229: EQUAL
13230: IFFALSE 13240
// sHack := true ;
13232: LD_ADDR_EXP 35
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// if p3 = 10 then
13240: LD_VAR 0 3
13244: PUSH
13245: LD_INT 10
13247: EQUAL
13248: IFFALSE 13258
// sFire := true ;
13250: LD_ADDR_EXP 36
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// if p3 = 11 then
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 11
13265: EQUAL
13266: IFFALSE 13276
// sRefresh := true ;
13268: LD_ADDR_EXP 37
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// if p3 = 12 then
13276: LD_VAR 0 3
13280: PUSH
13281: LD_INT 12
13283: EQUAL
13284: IFFALSE 13294
// sExp := true ;
13286: LD_ADDR_EXP 38
13290: PUSH
13291: LD_INT 1
13293: ST_TO_ADDR
// if p3 = 13 then
13294: LD_VAR 0 3
13298: PUSH
13299: LD_INT 13
13301: EQUAL
13302: IFFALSE 13312
// sDepot := true ;
13304: LD_ADDR_EXP 39
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if p3 = 14 then
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 14
13319: EQUAL
13320: IFFALSE 13330
// sFlag := true ;
13322: LD_ADDR_EXP 40
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// if p3 = 15 then
13330: LD_VAR 0 3
13334: PUSH
13335: LD_INT 15
13337: EQUAL
13338: IFFALSE 13348
// sKamikadze := true ;
13340: LD_ADDR_EXP 48
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if p3 = 16 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_INT 16
13355: EQUAL
13356: IFFALSE 13366
// sTroll := true ;
13358: LD_ADDR_EXP 49
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// if p3 = 17 then
13366: LD_VAR 0 3
13370: PUSH
13371: LD_INT 17
13373: EQUAL
13374: IFFALSE 13384
// sSlow := true ;
13376: LD_ADDR_EXP 50
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// if p3 = 18 then
13384: LD_VAR 0 3
13388: PUSH
13389: LD_INT 18
13391: EQUAL
13392: IFFALSE 13402
// sLack := true ;
13394: LD_ADDR_EXP 51
13398: PUSH
13399: LD_INT 1
13401: ST_TO_ADDR
// if p3 = 19 then
13402: LD_VAR 0 3
13406: PUSH
13407: LD_INT 19
13409: EQUAL
13410: IFFALSE 13420
// sTank := true ;
13412: LD_ADDR_EXP 53
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 20 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 20
13427: EQUAL
13428: IFFALSE 13438
// sRemote := true ;
13430: LD_ADDR_EXP 54
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if p3 = 21 then
13438: LD_VAR 0 3
13442: PUSH
13443: LD_INT 21
13445: EQUAL
13446: IFFALSE 13456
// sPowell := true ;
13448: LD_ADDR_EXP 55
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if p3 = 22 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 22
13463: EQUAL
13464: IFFALSE 13474
// sTeleport := true ;
13466: LD_ADDR_EXP 58
13470: PUSH
13471: LD_INT 1
13473: ST_TO_ADDR
// if p3 = 23 then
13474: LD_VAR 0 3
13478: PUSH
13479: LD_INT 23
13481: EQUAL
13482: IFFALSE 13492
// sOilTower := true ;
13484: LD_ADDR_EXP 60
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// if p3 = 24 then
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 24
13499: EQUAL
13500: IFFALSE 13510
// sShovel := true ;
13502: LD_ADDR_EXP 61
13506: PUSH
13507: LD_INT 1
13509: ST_TO_ADDR
// if p3 = 25 then
13510: LD_VAR 0 3
13514: PUSH
13515: LD_INT 25
13517: EQUAL
13518: IFFALSE 13528
// sSheik := true ;
13520: LD_ADDR_EXP 62
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// if p3 = 26 then
13528: LD_VAR 0 3
13532: PUSH
13533: LD_INT 26
13535: EQUAL
13536: IFFALSE 13546
// sEarthquake := true ;
13538: LD_ADDR_EXP 64
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
// if p3 = 27 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 27
13553: EQUAL
13554: IFFALSE 13564
// sAI := true ;
13556: LD_ADDR_EXP 65
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// if p3 = 28 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_INT 28
13571: EQUAL
13572: IFFALSE 13582
// sCargo := true ;
13574: LD_ADDR_EXP 68
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// if p3 = 29 then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 29
13589: EQUAL
13590: IFFALSE 13600
// sDLaser := true ;
13592: LD_ADDR_EXP 69
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if p3 = 30 then
13600: LD_VAR 0 3
13604: PUSH
13605: LD_INT 30
13607: EQUAL
13608: IFFALSE 13618
// sExchange := true ;
13610: LD_ADDR_EXP 70
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if p3 = 31 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_INT 31
13625: EQUAL
13626: IFFALSE 13636
// sFac := true ;
13628: LD_ADDR_EXP 71
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if p3 = 32 then
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 32
13643: EQUAL
13644: IFFALSE 13654
// sPower := true ;
13646: LD_ADDR_EXP 72
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// if p3 = 33 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 33
13661: EQUAL
13662: IFFALSE 13672
// sRandom := true ;
13664: LD_ADDR_EXP 73
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// if p3 = 34 then
13672: LD_VAR 0 3
13676: PUSH
13677: LD_INT 34
13679: EQUAL
13680: IFFALSE 13690
// sShield := true ;
13682: LD_ADDR_EXP 74
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if p3 = 35 then
13690: LD_VAR 0 3
13694: PUSH
13695: LD_INT 35
13697: EQUAL
13698: IFFALSE 13708
// sTime := true ;
13700: LD_ADDR_EXP 75
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if p3 = 36 then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 36
13715: EQUAL
13716: IFFALSE 13726
// sTools := true ;
13718: LD_ADDR_EXP 76
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// if p3 = 101 then
13726: LD_VAR 0 3
13730: PUSH
13731: LD_INT 101
13733: EQUAL
13734: IFFALSE 13744
// sSold := true ;
13736: LD_ADDR_EXP 41
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// if p3 = 102 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 102
13751: EQUAL
13752: IFFALSE 13762
// sDiff := true ;
13754: LD_ADDR_EXP 42
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if p3 = 103 then
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 103
13769: EQUAL
13770: IFFALSE 13780
// sFog := true ;
13772: LD_ADDR_EXP 45
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// if p3 = 104 then
13780: LD_VAR 0 3
13784: PUSH
13785: LD_INT 104
13787: EQUAL
13788: IFFALSE 13798
// sReset := true ;
13790: LD_ADDR_EXP 46
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
// if p3 = 105 then
13798: LD_VAR 0 3
13802: PUSH
13803: LD_INT 105
13805: EQUAL
13806: IFFALSE 13816
// sSun := true ;
13808: LD_ADDR_EXP 47
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// if p3 = 106 then
13816: LD_VAR 0 3
13820: PUSH
13821: LD_INT 106
13823: EQUAL
13824: IFFALSE 13834
// sTiger := true ;
13826: LD_ADDR_EXP 43
13830: PUSH
13831: LD_INT 1
13833: ST_TO_ADDR
// if p3 = 107 then
13834: LD_VAR 0 3
13838: PUSH
13839: LD_INT 107
13841: EQUAL
13842: IFFALSE 13852
// sBomb := true ;
13844: LD_ADDR_EXP 44
13848: PUSH
13849: LD_INT 1
13851: ST_TO_ADDR
// if p3 = 108 then
13852: LD_VAR 0 3
13856: PUSH
13857: LD_INT 108
13859: EQUAL
13860: IFFALSE 13870
// sWound := true ;
13862: LD_ADDR_EXP 52
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// if p3 = 109 then
13870: LD_VAR 0 3
13874: PUSH
13875: LD_INT 109
13877: EQUAL
13878: IFFALSE 13888
// sBetray := true ;
13880: LD_ADDR_EXP 56
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if p3 = 110 then
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 110
13895: EQUAL
13896: IFFALSE 13906
// sContamin := true ;
13898: LD_ADDR_EXP 57
13902: PUSH
13903: LD_INT 1
13905: ST_TO_ADDR
// if p3 = 111 then
13906: LD_VAR 0 3
13910: PUSH
13911: LD_INT 111
13913: EQUAL
13914: IFFALSE 13924
// sOil := true ;
13916: LD_ADDR_EXP 59
13920: PUSH
13921: LD_INT 1
13923: ST_TO_ADDR
// if p3 = 112 then
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 112
13931: EQUAL
13932: IFFALSE 13942
// sStu := true ;
13934: LD_ADDR_EXP 63
13938: PUSH
13939: LD_INT 1
13941: ST_TO_ADDR
// if p3 = 113 then
13942: LD_VAR 0 3
13946: PUSH
13947: LD_INT 113
13949: EQUAL
13950: IFFALSE 13960
// sBazooka := true ;
13952: LD_ADDR_EXP 66
13956: PUSH
13957: LD_INT 1
13959: ST_TO_ADDR
// if p3 = 114 then
13960: LD_VAR 0 3
13964: PUSH
13965: LD_INT 114
13967: EQUAL
13968: IFFALSE 13978
// sMortar := true ;
13970: LD_ADDR_EXP 67
13974: PUSH
13975: LD_INT 1
13977: ST_TO_ADDR
// if p3 = 115 then
13978: LD_VAR 0 3
13982: PUSH
13983: LD_INT 115
13985: EQUAL
13986: IFFALSE 13996
// sRanger := true ;
13988: LD_ADDR_EXP 77
13992: PUSH
13993: LD_INT 1
13995: ST_TO_ADDR
// end ; end ;
13996: PPOPN 6
13998: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13999: LD_EXP 24
14003: PUSH
14004: LD_EXP 29
14008: AND
14009: IFFALSE 14133
14011: GO 14013
14013: DISABLE
14014: LD_INT 0
14016: PPUSH
14017: PPUSH
// begin enable ;
14018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 22
14026: PUSH
14027: LD_OWVAR 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: LD_INT 34
14041: PUSH
14042: LD_INT 7
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 34
14051: PUSH
14052: LD_INT 45
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 34
14061: PUSH
14062: LD_INT 28
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 34
14071: PUSH
14072: LD_INT 47
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PPUSH
14090: CALL_OW 69
14094: ST_TO_ADDR
// if not tmp then
14095: LD_VAR 0 2
14099: NOT
14100: IFFALSE 14104
// exit ;
14102: GO 14133
// for i in tmp do
14104: LD_ADDR_VAR 0 1
14108: PUSH
14109: LD_VAR 0 2
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14131
// begin SetLives ( i , 0 ) ;
14117: LD_VAR 0 1
14121: PPUSH
14122: LD_INT 0
14124: PPUSH
14125: CALL_OW 234
// end ;
14129: GO 14114
14131: POP
14132: POP
// end ;
14133: PPOPN 2
14135: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14136: LD_EXP 24
14140: PUSH
14141: LD_EXP 30
14145: AND
14146: IFFALSE 14230
14148: GO 14150
14150: DISABLE
14151: LD_INT 0
14153: PPUSH
14154: PPUSH
// begin enable ;
14155: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14156: LD_ADDR_VAR 0 2
14160: PUSH
14161: LD_INT 22
14163: PUSH
14164: LD_OWVAR 2
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 32
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: ST_TO_ADDR
// if not tmp then
14192: LD_VAR 0 2
14196: NOT
14197: IFFALSE 14201
// exit ;
14199: GO 14230
// for i in tmp do
14201: LD_ADDR_VAR 0 1
14205: PUSH
14206: LD_VAR 0 2
14210: PUSH
14211: FOR_IN
14212: IFFALSE 14228
// begin SetLives ( i , 0 ) ;
14214: LD_VAR 0 1
14218: PPUSH
14219: LD_INT 0
14221: PPUSH
14222: CALL_OW 234
// end ;
14226: GO 14211
14228: POP
14229: POP
// end ;
14230: PPOPN 2
14232: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14233: LD_EXP 24
14237: PUSH
14238: LD_EXP 27
14242: AND
14243: IFFALSE 14336
14245: GO 14247
14247: DISABLE
14248: LD_INT 0
14250: PPUSH
// begin enable ;
14251: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14252: LD_ADDR_VAR 0 1
14256: PUSH
14257: LD_INT 22
14259: PUSH
14260: LD_OWVAR 2
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 2
14271: PUSH
14272: LD_INT 25
14274: PUSH
14275: LD_INT 5
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 9
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 25
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: PUSH
14317: FOR_IN
14318: IFFALSE 14334
// begin SetClass ( i , 1 ) ;
14320: LD_VAR 0 1
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 336
// end ;
14332: GO 14317
14334: POP
14335: POP
// end ;
14336: PPOPN 1
14338: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14339: LD_EXP 24
14343: PUSH
14344: LD_EXP 28
14348: AND
14349: PUSH
14350: LD_OWVAR 65
14354: PUSH
14355: LD_INT 7
14357: LESS
14358: AND
14359: IFFALSE 14373
14361: GO 14363
14363: DISABLE
// begin enable ;
14364: ENABLE
// game_speed := 7 ;
14365: LD_ADDR_OWVAR 65
14369: PUSH
14370: LD_INT 7
14372: ST_TO_ADDR
// end ;
14373: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14374: LD_EXP 24
14378: PUSH
14379: LD_EXP 31
14383: AND
14384: IFFALSE 14586
14386: GO 14388
14388: DISABLE
14389: LD_INT 0
14391: PPUSH
14392: PPUSH
14393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14394: LD_ADDR_VAR 0 3
14398: PUSH
14399: LD_INT 81
14401: PUSH
14402: LD_OWVAR 2
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 21
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 3
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14586
// if tmp > 5 then
14439: LD_VAR 0 3
14443: PUSH
14444: LD_INT 5
14446: GREATER
14447: IFFALSE 14459
// k := 5 else
14449: LD_ADDR_VAR 0 2
14453: PUSH
14454: LD_INT 5
14456: ST_TO_ADDR
14457: GO 14469
// k := tmp ;
14459: LD_ADDR_VAR 0 2
14463: PUSH
14464: LD_VAR 0 3
14468: ST_TO_ADDR
// for i := 1 to k do
14469: LD_ADDR_VAR 0 1
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_VAR 0 2
14483: PUSH
14484: FOR_TO
14485: IFFALSE 14584
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14487: LD_VAR 0 3
14491: PUSH
14492: LD_VAR 0 1
14496: ARRAY
14497: PPUSH
14498: LD_VAR 0 1
14502: PUSH
14503: LD_INT 4
14505: MOD
14506: PUSH
14507: LD_INT 1
14509: PLUS
14510: PPUSH
14511: CALL_OW 259
14515: PUSH
14516: LD_INT 10
14518: LESS
14519: IFFALSE 14582
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14521: LD_VAR 0 3
14525: PUSH
14526: LD_VAR 0 1
14530: ARRAY
14531: PPUSH
14532: LD_VAR 0 1
14536: PUSH
14537: LD_INT 4
14539: MOD
14540: PUSH
14541: LD_INT 1
14543: PLUS
14544: PPUSH
14545: LD_VAR 0 3
14549: PUSH
14550: LD_VAR 0 1
14554: ARRAY
14555: PPUSH
14556: LD_VAR 0 1
14560: PUSH
14561: LD_INT 4
14563: MOD
14564: PUSH
14565: LD_INT 1
14567: PLUS
14568: PPUSH
14569: CALL_OW 259
14573: PUSH
14574: LD_INT 1
14576: PLUS
14577: PPUSH
14578: CALL_OW 237
14582: GO 14484
14584: POP
14585: POP
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14589: LD_EXP 24
14593: PUSH
14594: LD_EXP 32
14598: AND
14599: IFFALSE 14619
14601: GO 14603
14603: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14604: LD_INT 4
14606: PPUSH
14607: LD_OWVAR 2
14611: PPUSH
14612: LD_INT 0
14614: PPUSH
14615: CALL_OW 324
14619: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14620: LD_EXP 24
14624: PUSH
14625: LD_EXP 61
14629: AND
14630: IFFALSE 14650
14632: GO 14634
14634: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14635: LD_INT 19
14637: PPUSH
14638: LD_OWVAR 2
14642: PPUSH
14643: LD_INT 0
14645: PPUSH
14646: CALL_OW 324
14650: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14651: LD_EXP 24
14655: PUSH
14656: LD_EXP 33
14660: AND
14661: IFFALSE 14763
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
// begin enable ;
14670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_OWVAR 2
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 34
14693: PUSH
14694: LD_INT 11
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 34
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: ST_TO_ADDR
// if not tmp then
14725: LD_VAR 0 2
14729: NOT
14730: IFFALSE 14734
// exit ;
14732: GO 14763
// for i in tmp do
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: LD_VAR 0 2
14743: PUSH
14744: FOR_IN
14745: IFFALSE 14761
// begin SetLives ( i , 0 ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_INT 0
14754: PPUSH
14755: CALL_OW 234
// end ;
14759: GO 14744
14761: POP
14762: POP
// end ;
14763: PPOPN 2
14765: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14766: LD_EXP 24
14770: PUSH
14771: LD_EXP 34
14775: AND
14776: IFFALSE 14796
14778: GO 14780
14780: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14781: LD_INT 32
14783: PPUSH
14784: LD_OWVAR 2
14788: PPUSH
14789: LD_INT 0
14791: PPUSH
14792: CALL_OW 324
14796: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14797: LD_EXP 24
14801: PUSH
14802: LD_EXP 35
14806: AND
14807: IFFALSE 14988
14809: GO 14811
14811: DISABLE
14812: LD_INT 0
14814: PPUSH
14815: PPUSH
14816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14817: LD_ADDR_VAR 0 2
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_OWVAR 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 33
14836: PUSH
14837: LD_INT 3
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// if not tmp then
14853: LD_VAR 0 2
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 14988
// side := 0 ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 0
14869: ST_TO_ADDR
// for i := 1 to 8 do
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: DOUBLE
14876: LD_INT 1
14878: DEC
14879: ST_TO_ADDR
14880: LD_INT 8
14882: PUSH
14883: FOR_TO
14884: IFFALSE 14932
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14886: LD_OWVAR 2
14890: PUSH
14891: LD_VAR 0 1
14895: NONEQUAL
14896: PUSH
14897: LD_OWVAR 2
14901: PPUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 81
14911: PUSH
14912: LD_INT 2
14914: EQUAL
14915: AND
14916: IFFALSE 14930
// begin side := i ;
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_VAR 0 1
14927: ST_TO_ADDR
// break ;
14928: GO 14932
// end ;
14930: GO 14883
14932: POP
14933: POP
// if not side then
14934: LD_VAR 0 3
14938: NOT
14939: IFFALSE 14943
// exit ;
14941: GO 14988
// for i := 1 to tmp do
14943: LD_ADDR_VAR 0 1
14947: PUSH
14948: DOUBLE
14949: LD_INT 1
14951: DEC
14952: ST_TO_ADDR
14953: LD_VAR 0 2
14957: PUSH
14958: FOR_TO
14959: IFFALSE 14986
// if Prob ( 60 ) then
14961: LD_INT 60
14963: PPUSH
14964: CALL_OW 13
14968: IFFALSE 14984
// SetSide ( i , side ) ;
14970: LD_VAR 0 1
14974: PPUSH
14975: LD_VAR 0 3
14979: PPUSH
14980: CALL_OW 235
14984: GO 14958
14986: POP
14987: POP
// end ;
14988: PPOPN 3
14990: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14991: LD_EXP 24
14995: PUSH
14996: LD_EXP 37
15000: AND
15001: IFFALSE 15120
15003: GO 15005
15005: DISABLE
15006: LD_INT 0
15008: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15009: LD_ADDR_VAR 0 1
15013: PUSH
15014: LD_INT 22
15016: PUSH
15017: LD_OWVAR 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 21
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 3
15038: PUSH
15039: LD_INT 23
15041: PUSH
15042: LD_INT 0
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15118
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15066: LD_VAR 0 1
15070: PPUSH
15071: CALL_OW 257
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: LD_INT 4
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: IN
15094: IFFALSE 15116
// SetClass ( un , rand ( 1 , 4 ) ) ;
15096: LD_VAR 0 1
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: LD_INT 4
15106: PPUSH
15107: CALL_OW 12
15111: PPUSH
15112: CALL_OW 336
15116: GO 15063
15118: POP
15119: POP
// end ;
15120: PPOPN 1
15122: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15123: LD_EXP 24
15127: PUSH
15128: LD_EXP 36
15132: AND
15133: IFFALSE 15212
15135: GO 15137
15137: DISABLE
15138: LD_INT 0
15140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15141: LD_ADDR_VAR 0 1
15145: PUSH
15146: LD_INT 22
15148: PUSH
15149: LD_OWVAR 2
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 21
15160: PUSH
15161: LD_INT 3
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 69
15176: ST_TO_ADDR
// if not tmp then
15177: LD_VAR 0 1
15181: NOT
15182: IFFALSE 15186
// exit ;
15184: GO 15212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15186: LD_VAR 0 1
15190: PUSH
15191: LD_INT 1
15193: PPUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 12
15203: ARRAY
15204: PPUSH
15205: LD_INT 100
15207: PPUSH
15208: CALL_OW 234
// end ;
15212: PPOPN 1
15214: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15215: LD_EXP 24
15219: PUSH
15220: LD_EXP 38
15224: AND
15225: IFFALSE 15323
15227: GO 15229
15229: DISABLE
15230: LD_INT 0
15232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_INT 22
15240: PUSH
15241: LD_OWVAR 2
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 69
15268: ST_TO_ADDR
// if not tmp then
15269: LD_VAR 0 1
15273: NOT
15274: IFFALSE 15278
// exit ;
15276: GO 15323
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15278: LD_VAR 0 1
15282: PUSH
15283: LD_INT 1
15285: PPUSH
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 12
15295: ARRAY
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: LD_INT 4
15302: PPUSH
15303: CALL_OW 12
15307: PPUSH
15308: LD_INT 3000
15310: PPUSH
15311: LD_INT 9000
15313: PPUSH
15314: CALL_OW 12
15318: PPUSH
15319: CALL_OW 492
// end ;
15323: PPOPN 1
15325: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15326: LD_EXP 24
15330: PUSH
15331: LD_EXP 39
15335: AND
15336: IFFALSE 15356
15338: GO 15340
15340: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15341: LD_INT 1
15343: PPUSH
15344: LD_OWVAR 2
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL_OW 324
15356: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15357: LD_EXP 24
15361: PUSH
15362: LD_EXP 40
15366: AND
15367: IFFALSE 15450
15369: GO 15371
15371: DISABLE
15372: LD_INT 0
15374: PPUSH
15375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: LD_INT 22
15383: PUSH
15384: LD_OWVAR 2
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 21
15395: PUSH
15396: LD_INT 3
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: ST_TO_ADDR
// if not tmp then
15412: LD_VAR 0 2
15416: NOT
15417: IFFALSE 15421
// exit ;
15419: GO 15450
// for i in tmp do
15421: LD_ADDR_VAR 0 1
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: FOR_IN
15432: IFFALSE 15448
// SetBLevel ( i , 10 ) ;
15434: LD_VAR 0 1
15438: PPUSH
15439: LD_INT 10
15441: PPUSH
15442: CALL_OW 241
15446: GO 15431
15448: POP
15449: POP
// end ;
15450: PPOPN 2
15452: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15453: LD_EXP 24
15457: PUSH
15458: LD_EXP 41
15462: AND
15463: IFFALSE 15574
15465: GO 15467
15467: DISABLE
15468: LD_INT 0
15470: PPUSH
15471: PPUSH
15472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_OWVAR 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 25
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: ST_TO_ADDR
// if not tmp then
15509: LD_VAR 0 3
15513: NOT
15514: IFFALSE 15518
// exit ;
15516: GO 15574
// un := tmp [ rand ( 1 , tmp ) ] ;
15518: LD_ADDR_VAR 0 2
15522: PUSH
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 1
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: CALL_OW 12
15540: ARRAY
15541: ST_TO_ADDR
// if Crawls ( un ) then
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 318
15551: IFFALSE 15562
// ComWalk ( un ) ;
15553: LD_VAR 0 2
15557: PPUSH
15558: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15562: LD_VAR 0 2
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 336
// end ;
15574: PPOPN 3
15576: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15577: LD_EXP 24
15581: PUSH
15582: LD_EXP 42
15586: AND
15587: PUSH
15588: LD_OWVAR 67
15592: PUSH
15593: LD_INT 3
15595: LESS
15596: AND
15597: IFFALSE 15616
15599: GO 15601
15601: DISABLE
// Difficulty := Difficulty + 1 ;
15602: LD_ADDR_OWVAR 67
15606: PUSH
15607: LD_OWVAR 67
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: ST_TO_ADDR
15616: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15617: LD_EXP 24
15621: PUSH
15622: LD_EXP 43
15626: AND
15627: IFFALSE 15730
15629: GO 15631
15631: DISABLE
15632: LD_INT 0
15634: PPUSH
// begin for i := 1 to 5 do
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: DOUBLE
15641: LD_INT 1
15643: DEC
15644: ST_TO_ADDR
15645: LD_INT 5
15647: PUSH
15648: FOR_TO
15649: IFFALSE 15728
// begin uc_nation := nation_nature ;
15651: LD_ADDR_OWVAR 21
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// uc_side := 0 ;
15659: LD_ADDR_OWVAR 20
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15667: LD_ADDR_OWVAR 29
15671: PUSH
15672: LD_INT 12
15674: PUSH
15675: LD_INT 12
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: ST_TO_ADDR
// hc_agressivity := 20 ;
15682: LD_ADDR_OWVAR 35
15686: PUSH
15687: LD_INT 20
15689: ST_TO_ADDR
// hc_class := class_tiger ;
15690: LD_ADDR_OWVAR 28
15694: PUSH
15695: LD_INT 14
15697: ST_TO_ADDR
// hc_gallery :=  ;
15698: LD_ADDR_OWVAR 33
15702: PUSH
15703: LD_STRING 
15705: ST_TO_ADDR
// hc_name :=  ;
15706: LD_ADDR_OWVAR 26
15710: PUSH
15711: LD_STRING 
15713: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15714: CALL_OW 44
15718: PPUSH
15719: LD_INT 0
15721: PPUSH
15722: CALL_OW 51
// end ;
15726: GO 15648
15728: POP
15729: POP
// end ;
15730: PPOPN 1
15732: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15733: LD_EXP 24
15737: PUSH
15738: LD_EXP 44
15742: AND
15743: IFFALSE 15752
15745: GO 15747
15747: DISABLE
// StreamSibBomb ;
15748: CALL 15753 0 0
15752: END
// export function StreamSibBomb ; var i , x , y ; begin
15753: LD_INT 0
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
// result := false ;
15759: LD_ADDR_VAR 0 1
15763: PUSH
15764: LD_INT 0
15766: ST_TO_ADDR
// for i := 1 to 16 do
15767: LD_ADDR_VAR 0 2
15771: PUSH
15772: DOUBLE
15773: LD_INT 1
15775: DEC
15776: ST_TO_ADDR
15777: LD_INT 16
15779: PUSH
15780: FOR_TO
15781: IFFALSE 15980
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15783: LD_ADDR_VAR 0 3
15787: PUSH
15788: LD_INT 10
15790: PUSH
15791: LD_INT 20
15793: PUSH
15794: LD_INT 30
15796: PUSH
15797: LD_INT 40
15799: PUSH
15800: LD_INT 50
15802: PUSH
15803: LD_INT 60
15805: PUSH
15806: LD_INT 70
15808: PUSH
15809: LD_INT 80
15811: PUSH
15812: LD_INT 90
15814: PUSH
15815: LD_INT 100
15817: PUSH
15818: LD_INT 110
15820: PUSH
15821: LD_INT 120
15823: PUSH
15824: LD_INT 130
15826: PUSH
15827: LD_INT 140
15829: PUSH
15830: LD_INT 150
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 1
15852: PPUSH
15853: LD_INT 15
15855: PPUSH
15856: CALL_OW 12
15860: ARRAY
15861: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15862: LD_ADDR_VAR 0 4
15866: PUSH
15867: LD_INT 10
15869: PUSH
15870: LD_INT 20
15872: PUSH
15873: LD_INT 30
15875: PUSH
15876: LD_INT 40
15878: PUSH
15879: LD_INT 50
15881: PUSH
15882: LD_INT 60
15884: PUSH
15885: LD_INT 70
15887: PUSH
15888: LD_INT 80
15890: PUSH
15891: LD_INT 90
15893: PUSH
15894: LD_INT 100
15896: PUSH
15897: LD_INT 110
15899: PUSH
15900: LD_INT 120
15902: PUSH
15903: LD_INT 130
15905: PUSH
15906: LD_INT 140
15908: PUSH
15909: LD_INT 150
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 1
15931: PPUSH
15932: LD_INT 15
15934: PPUSH
15935: CALL_OW 12
15939: ARRAY
15940: ST_TO_ADDR
// if ValidHex ( x , y ) then
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_VAR 0 4
15950: PPUSH
15951: CALL_OW 488
15955: IFFALSE 15978
// begin result := [ x , y ] ;
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_VAR 0 4
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// break ;
15976: GO 15980
// end ; end ;
15978: GO 15780
15980: POP
15981: POP
// if result then
15982: LD_VAR 0 1
15986: IFFALSE 16046
// begin ToLua ( playSibBomb() ) ;
15988: LD_STRING playSibBomb()
15990: PPUSH
15991: CALL_OW 559
// wait ( 0 0$14 ) ;
15995: LD_INT 490
15997: PPUSH
15998: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16002: LD_VAR 0 1
16006: PUSH
16007: LD_INT 1
16009: ARRAY
16010: PPUSH
16011: LD_VAR 0 1
16015: PUSH
16016: LD_INT 2
16018: ARRAY
16019: PPUSH
16020: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16024: LD_VAR 0 1
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: PPUSH
16033: LD_VAR 0 1
16037: PUSH
16038: LD_INT 2
16040: ARRAY
16041: PPUSH
16042: CALL_OW 429
// end ; end ;
16046: LD_VAR 0 1
16050: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16051: LD_EXP 24
16055: PUSH
16056: LD_EXP 46
16060: AND
16061: IFFALSE 16073
16063: GO 16065
16065: DISABLE
// YouLost (  ) ;
16066: LD_STRING 
16068: PPUSH
16069: CALL_OW 104
16073: END
// every 0 0$1 trigger StreamModeActive and sFog do
16074: LD_EXP 24
16078: PUSH
16079: LD_EXP 45
16083: AND
16084: IFFALSE 16098
16086: GO 16088
16088: DISABLE
// FogOff ( your_side ) ;
16089: LD_OWVAR 2
16093: PPUSH
16094: CALL_OW 344
16098: END
// every 0 0$1 trigger StreamModeActive and sSun do
16099: LD_EXP 24
16103: PUSH
16104: LD_EXP 47
16108: AND
16109: IFFALSE 16137
16111: GO 16113
16113: DISABLE
// begin solar_recharge_percent := 0 ;
16114: LD_ADDR_OWVAR 79
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16122: LD_INT 10500
16124: PPUSH
16125: CALL_OW 67
// solar_recharge_percent := 100 ;
16129: LD_ADDR_OWVAR 79
16133: PUSH
16134: LD_INT 100
16136: ST_TO_ADDR
// end ;
16137: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16138: LD_EXP 24
16142: PUSH
16143: LD_EXP 48
16147: AND
16148: IFFALSE 16387
16150: GO 16152
16152: DISABLE
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
16157: PPUSH
// begin tmp := [ ] ;
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: EMPTY
16164: ST_TO_ADDR
// for i := 1 to 6 do
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: DOUBLE
16171: LD_INT 1
16173: DEC
16174: ST_TO_ADDR
16175: LD_INT 6
16177: PUSH
16178: FOR_TO
16179: IFFALSE 16284
// begin uc_nation := nation_nature ;
16181: LD_ADDR_OWVAR 21
16185: PUSH
16186: LD_INT 0
16188: ST_TO_ADDR
// uc_side := 0 ;
16189: LD_ADDR_OWVAR 20
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16197: LD_ADDR_OWVAR 29
16201: PUSH
16202: LD_INT 12
16204: PUSH
16205: LD_INT 12
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// hc_agressivity := 20 ;
16212: LD_ADDR_OWVAR 35
16216: PUSH
16217: LD_INT 20
16219: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16220: LD_ADDR_OWVAR 28
16224: PUSH
16225: LD_INT 17
16227: ST_TO_ADDR
// hc_gallery :=  ;
16228: LD_ADDR_OWVAR 33
16232: PUSH
16233: LD_STRING 
16235: ST_TO_ADDR
// hc_name :=  ;
16236: LD_ADDR_OWVAR 26
16240: PUSH
16241: LD_STRING 
16243: ST_TO_ADDR
// un := CreateHuman ;
16244: LD_ADDR_VAR 0 2
16248: PUSH
16249: CALL_OW 44
16253: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 51
// tmp := tmp ^ un ;
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: LD_VAR 0 3
16275: PUSH
16276: LD_VAR 0 2
16280: ADD
16281: ST_TO_ADDR
// end ;
16282: GO 16178
16284: POP
16285: POP
// repeat wait ( 0 0$1 ) ;
16286: LD_INT 35
16288: PPUSH
16289: CALL_OW 67
// for un in tmp do
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_VAR 0 3
16302: PUSH
16303: FOR_IN
16304: IFFALSE 16378
// begin if IsDead ( un ) then
16306: LD_VAR 0 2
16310: PPUSH
16311: CALL_OW 301
16315: IFFALSE 16335
// begin tmp := tmp diff un ;
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_VAR 0 3
16326: PUSH
16327: LD_VAR 0 2
16331: DIFF
16332: ST_TO_ADDR
// continue ;
16333: GO 16303
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16335: LD_VAR 0 2
16339: PPUSH
16340: LD_INT 3
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_INT 0
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PPUSH
16357: CALL_OW 69
16361: PPUSH
16362: LD_VAR 0 2
16366: PPUSH
16367: CALL_OW 74
16371: PPUSH
16372: CALL_OW 115
// end ;
16376: GO 16303
16378: POP
16379: POP
// until not tmp ;
16380: LD_VAR 0 3
16384: NOT
16385: IFFALSE 16286
// end ;
16387: PPOPN 3
16389: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16390: LD_EXP 24
16394: PUSH
16395: LD_EXP 49
16399: AND
16400: IFFALSE 16454
16402: GO 16404
16404: DISABLE
// begin ToLua ( displayTroll(); ) ;
16405: LD_STRING displayTroll();
16407: PPUSH
16408: CALL_OW 559
// wait ( 3 3$00 ) ;
16412: LD_INT 6300
16414: PPUSH
16415: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16419: LD_STRING hideTroll();
16421: PPUSH
16422: CALL_OW 559
// wait ( 1 1$00 ) ;
16426: LD_INT 2100
16428: PPUSH
16429: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16433: LD_STRING displayTroll();
16435: PPUSH
16436: CALL_OW 559
// wait ( 1 1$00 ) ;
16440: LD_INT 2100
16442: PPUSH
16443: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16447: LD_STRING hideTroll();
16449: PPUSH
16450: CALL_OW 559
// end ;
16454: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16455: LD_EXP 24
16459: PUSH
16460: LD_EXP 50
16464: AND
16465: IFFALSE 16528
16467: GO 16469
16469: DISABLE
16470: LD_INT 0
16472: PPUSH
// begin p := 0 ;
16473: LD_ADDR_VAR 0 1
16477: PUSH
16478: LD_INT 0
16480: ST_TO_ADDR
// repeat game_speed := 1 ;
16481: LD_ADDR_OWVAR 65
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16489: LD_INT 35
16491: PPUSH
16492: CALL_OW 67
// p := p + 1 ;
16496: LD_ADDR_VAR 0 1
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: LD_INT 1
16508: PLUS
16509: ST_TO_ADDR
// until p >= 60 ;
16510: LD_VAR 0 1
16514: PUSH
16515: LD_INT 60
16517: GREATEREQUAL
16518: IFFALSE 16481
// game_speed := 4 ;
16520: LD_ADDR_OWVAR 65
16524: PUSH
16525: LD_INT 4
16527: ST_TO_ADDR
// end ;
16528: PPOPN 1
16530: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16531: LD_EXP 24
16535: PUSH
16536: LD_EXP 51
16540: AND
16541: IFFALSE 16687
16543: GO 16545
16545: DISABLE
16546: LD_INT 0
16548: PPUSH
16549: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_OWVAR 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 30
16572: PUSH
16573: LD_INT 0
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 69
16603: ST_TO_ADDR
// if not depot then
16604: LD_VAR 0 1
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16687
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16613: LD_ADDR_VAR 0 2
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 1
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 12
16635: ARRAY
16636: PPUSH
16637: CALL_OW 274
16641: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16642: LD_VAR 0 2
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16657: LD_VAR 0 2
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: LD_INT 0
16667: PPUSH
16668: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16672: LD_VAR 0 2
16676: PPUSH
16677: LD_INT 3
16679: PPUSH
16680: LD_INT 0
16682: PPUSH
16683: CALL_OW 277
// end ;
16687: PPOPN 2
16689: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16690: LD_EXP 24
16694: PUSH
16695: LD_EXP 52
16699: AND
16700: IFFALSE 16797
16702: GO 16704
16704: DISABLE
16705: LD_INT 0
16707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16708: LD_ADDR_VAR 0 1
16712: PUSH
16713: LD_INT 22
16715: PUSH
16716: LD_OWVAR 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 23
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 69
16761: ST_TO_ADDR
// if not tmp then
16762: LD_VAR 0 1
16766: NOT
16767: IFFALSE 16771
// exit ;
16769: GO 16797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16771: LD_VAR 0 1
16775: PUSH
16776: LD_INT 1
16778: PPUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 12
16788: ARRAY
16789: PPUSH
16790: LD_INT 200
16792: PPUSH
16793: CALL_OW 234
// end ;
16797: PPOPN 1
16799: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16800: LD_EXP 24
16804: PUSH
16805: LD_EXP 53
16809: AND
16810: IFFALSE 16889
16812: GO 16814
16814: DISABLE
16815: LD_INT 0
16817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16818: LD_ADDR_VAR 0 1
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_OWVAR 2
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 2
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 69
16853: ST_TO_ADDR
// if not tmp then
16854: LD_VAR 0 1
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 16889
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16863: LD_VAR 0 1
16867: PUSH
16868: LD_INT 1
16870: PPUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 12
16880: ARRAY
16881: PPUSH
16882: LD_INT 60
16884: PPUSH
16885: CALL_OW 234
// end ;
16889: PPOPN 1
16891: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16892: LD_EXP 24
16896: PUSH
16897: LD_EXP 54
16901: AND
16902: IFFALSE 17001
16904: GO 16906
16906: DISABLE
16907: LD_INT 0
16909: PPUSH
16910: PPUSH
// begin enable ;
16911: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16912: LD_ADDR_VAR 0 1
16916: PUSH
16917: LD_INT 22
16919: PUSH
16920: LD_OWVAR 2
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 61
16931: PUSH
16932: EMPTY
16933: LIST
16934: PUSH
16935: LD_INT 33
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: ST_TO_ADDR
// if not tmp then
16955: LD_VAR 0 1
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 17001
// for i in tmp do
16964: LD_ADDR_VAR 0 2
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: FOR_IN
16975: IFFALSE 16999
// if IsControledBy ( i ) then
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 312
16986: IFFALSE 16997
// ComUnlink ( i ) ;
16988: LD_VAR 0 2
16992: PPUSH
16993: CALL_OW 136
16997: GO 16974
16999: POP
17000: POP
// end ;
17001: PPOPN 2
17003: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17004: LD_EXP 24
17008: PUSH
17009: LD_EXP 55
17013: AND
17014: IFFALSE 17154
17016: GO 17018
17018: DISABLE
17019: LD_INT 0
17021: PPUSH
17022: PPUSH
// begin ToLua ( displayPowell(); ) ;
17023: LD_STRING displayPowell();
17025: PPUSH
17026: CALL_OW 559
// uc_side := 0 ;
17030: LD_ADDR_OWVAR 20
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// uc_nation := 2 ;
17038: LD_ADDR_OWVAR 21
17042: PUSH
17043: LD_INT 2
17045: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17046: LD_ADDR_OWVAR 37
17050: PUSH
17051: LD_INT 14
17053: ST_TO_ADDR
// vc_engine := engine_siberite ;
17054: LD_ADDR_OWVAR 39
17058: PUSH
17059: LD_INT 3
17061: ST_TO_ADDR
// vc_control := control_apeman ;
17062: LD_ADDR_OWVAR 38
17066: PUSH
17067: LD_INT 5
17069: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17070: LD_ADDR_OWVAR 40
17074: PUSH
17075: LD_INT 29
17077: ST_TO_ADDR
// un := CreateVehicle ;
17078: LD_ADDR_VAR 0 2
17082: PUSH
17083: CALL_OW 45
17087: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17088: LD_VAR 0 2
17092: PPUSH
17093: LD_INT 1
17095: PPUSH
17096: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17107: LD_VAR 0 2
17111: PPUSH
17112: LD_INT 22
17114: PUSH
17115: LD_OWVAR 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: PPUSH
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 74
17138: PPUSH
17139: CALL_OW 115
// until IsDead ( un ) ;
17143: LD_VAR 0 2
17147: PPUSH
17148: CALL_OW 301
17152: IFFALSE 17100
// end ;
17154: PPOPN 2
17156: END
// every 0 0$1 trigger StreamModeActive and sStu do
17157: LD_EXP 24
17161: PUSH
17162: LD_EXP 63
17166: AND
17167: IFFALSE 17183
17169: GO 17171
17171: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17172: LD_STRING displayStucuk();
17174: PPUSH
17175: CALL_OW 559
// ResetFog ;
17179: CALL_OW 335
// end ;
17183: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17184: LD_EXP 24
17188: PUSH
17189: LD_EXP 56
17193: AND
17194: IFFALSE 17335
17196: GO 17198
17198: DISABLE
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_OWVAR 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 21
17222: PUSH
17223: LD_INT 1
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PPUSH
17234: CALL_OW 69
17238: ST_TO_ADDR
// if not tmp then
17239: LD_VAR 0 2
17243: NOT
17244: IFFALSE 17248
// exit ;
17246: GO 17335
// un := tmp [ rand ( 1 , tmp ) ] ;
17248: LD_ADDR_VAR 0 1
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: LD_INT 1
17260: PPUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: CALL_OW 12
17270: ARRAY
17271: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17272: LD_VAR 0 1
17276: PPUSH
17277: LD_INT 0
17279: PPUSH
17280: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_OWVAR 3
17293: PUSH
17294: LD_VAR 0 1
17298: DIFF
17299: PPUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 74
17309: PPUSH
17310: CALL_OW 115
// wait ( 0 0$20 ) ;
17314: LD_INT 700
17316: PPUSH
17317: CALL_OW 67
// SetSide ( un , your_side ) ;
17321: LD_VAR 0 1
17325: PPUSH
17326: LD_OWVAR 2
17330: PPUSH
17331: CALL_OW 235
// end ;
17335: PPOPN 2
17337: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17338: LD_EXP 24
17342: PUSH
17343: LD_EXP 57
17347: AND
17348: IFFALSE 17454
17350: GO 17352
17352: DISABLE
17353: LD_INT 0
17355: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17356: LD_ADDR_VAR 0 1
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_OWVAR 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: LD_INT 30
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 30
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PPUSH
17405: CALL_OW 69
17409: ST_TO_ADDR
// if not depot then
17410: LD_VAR 0 1
17414: NOT
17415: IFFALSE 17419
// exit ;
17417: GO 17454
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17419: LD_VAR 0 1
17423: PUSH
17424: LD_INT 1
17426: ARRAY
17427: PPUSH
17428: CALL_OW 250
17432: PPUSH
17433: LD_VAR 0 1
17437: PUSH
17438: LD_INT 1
17440: ARRAY
17441: PPUSH
17442: CALL_OW 251
17446: PPUSH
17447: LD_INT 70
17449: PPUSH
17450: CALL_OW 495
// end ;
17454: PPOPN 1
17456: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17457: LD_EXP 24
17461: PUSH
17462: LD_EXP 58
17466: AND
17467: IFFALSE 17678
17469: GO 17471
17471: DISABLE
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17479: LD_ADDR_VAR 0 5
17483: PUSH
17484: LD_INT 22
17486: PUSH
17487: LD_OWVAR 2
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 21
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PPUSH
17510: CALL_OW 69
17514: ST_TO_ADDR
// if not tmp then
17515: LD_VAR 0 5
17519: NOT
17520: IFFALSE 17524
// exit ;
17522: GO 17678
// for i in tmp do
17524: LD_ADDR_VAR 0 1
17528: PUSH
17529: LD_VAR 0 5
17533: PUSH
17534: FOR_IN
17535: IFFALSE 17676
// begin d := rand ( 0 , 5 ) ;
17537: LD_ADDR_VAR 0 4
17541: PUSH
17542: LD_INT 0
17544: PPUSH
17545: LD_INT 5
17547: PPUSH
17548: CALL_OW 12
17552: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: LD_VAR 0 1
17562: PPUSH
17563: CALL_OW 250
17567: PPUSH
17568: LD_VAR 0 4
17572: PPUSH
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 12
17578: PPUSH
17579: CALL_OW 12
17583: PPUSH
17584: CALL_OW 272
17588: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17589: LD_ADDR_VAR 0 3
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 251
17603: PPUSH
17604: LD_VAR 0 4
17608: PPUSH
17609: LD_INT 3
17611: PPUSH
17612: LD_INT 12
17614: PPUSH
17615: CALL_OW 12
17619: PPUSH
17620: CALL_OW 273
17624: ST_TO_ADDR
// if ValidHex ( x , y ) then
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: CALL_OW 488
17639: IFFALSE 17674
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_VAR 0 2
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_INT 3
17658: PPUSH
17659: LD_INT 6
17661: PPUSH
17662: CALL_OW 12
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: CALL_OW 483
// end ;
17674: GO 17534
17676: POP
17677: POP
// end ;
17678: PPOPN 5
17680: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17681: LD_EXP 24
17685: PUSH
17686: LD_EXP 59
17690: AND
17691: IFFALSE 17785
17693: GO 17695
17695: DISABLE
17696: LD_INT 0
17698: PPUSH
17699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17700: LD_ADDR_VAR 0 2
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_OWVAR 2
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 32
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 21
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: PPUSH
17742: CALL_OW 69
17746: ST_TO_ADDR
// if not tmp then
17747: LD_VAR 0 2
17751: NOT
17752: IFFALSE 17756
// exit ;
17754: GO 17785
// for i in tmp do
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: LD_VAR 0 2
17765: PUSH
17766: FOR_IN
17767: IFFALSE 17783
// SetFuel ( i , 0 ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 0
17776: PPUSH
17777: CALL_OW 240
17781: GO 17766
17783: POP
17784: POP
// end ;
17785: PPOPN 2
17787: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17788: LD_EXP 24
17792: PUSH
17793: LD_EXP 60
17797: AND
17798: IFFALSE 17864
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17806: LD_ADDR_VAR 0 1
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 30
17825: PUSH
17826: LD_INT 29
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: ST_TO_ADDR
// if not tmp then
17842: LD_VAR 0 1
17846: NOT
17847: IFFALSE 17851
// exit ;
17849: GO 17864
// DestroyUnit ( tmp [ 1 ] ) ;
17851: LD_VAR 0 1
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: CALL_OW 65
// end ;
17864: PPOPN 1
17866: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17867: LD_EXP 24
17871: PUSH
17872: LD_EXP 62
17876: AND
17877: IFFALSE 18006
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
// begin uc_side := 0 ;
17885: LD_ADDR_OWVAR 20
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// uc_nation := nation_arabian ;
17893: LD_ADDR_OWVAR 21
17897: PUSH
17898: LD_INT 2
17900: ST_TO_ADDR
// hc_gallery :=  ;
17901: LD_ADDR_OWVAR 33
17905: PUSH
17906: LD_STRING 
17908: ST_TO_ADDR
// hc_name :=  ;
17909: LD_ADDR_OWVAR 26
17913: PUSH
17914: LD_STRING 
17916: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17917: LD_INT 1
17919: PPUSH
17920: LD_INT 11
17922: PPUSH
17923: LD_INT 10
17925: PPUSH
17926: CALL_OW 380
// un := CreateHuman ;
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: CALL_OW 44
17939: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17940: LD_VAR 0 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17952: LD_INT 35
17954: PPUSH
17955: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_INT 22
17966: PUSH
17967: LD_OWVAR 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: PPUSH
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 74
17990: PPUSH
17991: CALL_OW 115
// until IsDead ( un ) ;
17995: LD_VAR 0 1
17999: PPUSH
18000: CALL_OW 301
18004: IFFALSE 17952
// end ;
18006: PPOPN 1
18008: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18009: LD_EXP 24
18013: PUSH
18014: LD_EXP 64
18018: AND
18019: IFFALSE 18031
18021: GO 18023
18023: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18024: LD_STRING earthquake(getX(game), 0, 32)
18026: PPUSH
18027: CALL_OW 559
18031: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18032: LD_EXP 24
18036: PUSH
18037: LD_EXP 65
18041: AND
18042: IFFALSE 18133
18044: GO 18046
18046: DISABLE
18047: LD_INT 0
18049: PPUSH
// begin enable ;
18050: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_INT 22
18058: PUSH
18059: LD_OWVAR 2
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 33
18080: PUSH
18081: LD_INT 3
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: ST_TO_ADDR
// if not tmp then
18098: LD_VAR 0 1
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18133
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 1
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 12
18124: ARRAY
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: CALL_OW 234
// end ;
18133: PPOPN 1
18135: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18136: LD_EXP 24
18140: PUSH
18141: LD_EXP 66
18145: AND
18146: IFFALSE 18287
18148: GO 18150
18150: DISABLE
18151: LD_INT 0
18153: PPUSH
18154: PPUSH
18155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18156: LD_ADDR_VAR 0 3
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_OWVAR 2
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 25
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: ST_TO_ADDR
// if not tmp then
18192: LD_VAR 0 3
18196: NOT
18197: IFFALSE 18201
// exit ;
18199: GO 18287
// un := tmp [ rand ( 1 , tmp ) ] ;
18201: LD_ADDR_VAR 0 2
18205: PUSH
18206: LD_VAR 0 3
18210: PUSH
18211: LD_INT 1
18213: PPUSH
18214: LD_VAR 0 3
18218: PPUSH
18219: CALL_OW 12
18223: ARRAY
18224: ST_TO_ADDR
// if Crawls ( un ) then
18225: LD_VAR 0 2
18229: PPUSH
18230: CALL_OW 318
18234: IFFALSE 18245
// ComWalk ( un ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18245: LD_VAR 0 2
18249: PPUSH
18250: LD_INT 9
18252: PPUSH
18253: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18257: LD_INT 28
18259: PPUSH
18260: LD_OWVAR 2
18264: PPUSH
18265: LD_INT 2
18267: PPUSH
18268: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18272: LD_INT 29
18274: PPUSH
18275: LD_OWVAR 2
18279: PPUSH
18280: LD_INT 2
18282: PPUSH
18283: CALL_OW 322
// end ;
18287: PPOPN 3
18289: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18290: LD_EXP 24
18294: PUSH
18295: LD_EXP 67
18299: AND
18300: IFFALSE 18411
18302: GO 18304
18304: DISABLE
18305: LD_INT 0
18307: PPUSH
18308: PPUSH
18309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18310: LD_ADDR_VAR 0 3
18314: PUSH
18315: LD_INT 22
18317: PUSH
18318: LD_OWVAR 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 25
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 69
18345: ST_TO_ADDR
// if not tmp then
18346: LD_VAR 0 3
18350: NOT
18351: IFFALSE 18355
// exit ;
18353: GO 18411
// un := tmp [ rand ( 1 , tmp ) ] ;
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: LD_VAR 0 3
18364: PUSH
18365: LD_INT 1
18367: PPUSH
18368: LD_VAR 0 3
18372: PPUSH
18373: CALL_OW 12
18377: ARRAY
18378: ST_TO_ADDR
// if Crawls ( un ) then
18379: LD_VAR 0 2
18383: PPUSH
18384: CALL_OW 318
18388: IFFALSE 18399
// ComWalk ( un ) ;
18390: LD_VAR 0 2
18394: PPUSH
18395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18399: LD_VAR 0 2
18403: PPUSH
18404: LD_INT 8
18406: PPUSH
18407: CALL_OW 336
// end ;
18411: PPOPN 3
18413: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18414: LD_EXP 24
18418: PUSH
18419: LD_EXP 68
18423: AND
18424: IFFALSE 18568
18426: GO 18428
18428: DISABLE
18429: LD_INT 0
18431: PPUSH
18432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18433: LD_ADDR_VAR 0 2
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 21
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 34
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 34
18475: PUSH
18476: LD_INT 51
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 34
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: ST_TO_ADDR
// if not tmp then
18509: LD_VAR 0 2
18513: NOT
18514: IFFALSE 18518
// exit ;
18516: GO 18568
// for i in tmp do
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: FOR_IN
18529: IFFALSE 18566
// if GetCargo ( i , mat_artifact ) = 0 then
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 4
18538: PPUSH
18539: CALL_OW 289
18543: PUSH
18544: LD_INT 0
18546: EQUAL
18547: IFFALSE 18564
// SetCargo ( i , mat_siberit , 100 ) ;
18549: LD_VAR 0 1
18553: PPUSH
18554: LD_INT 3
18556: PPUSH
18557: LD_INT 100
18559: PPUSH
18560: CALL_OW 290
18564: GO 18528
18566: POP
18567: POP
// end ;
18568: PPOPN 2
18570: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18571: LD_EXP 24
18575: PUSH
18576: LD_EXP 69
18580: AND
18581: IFFALSE 18734
18583: GO 18585
18585: DISABLE
18586: LD_INT 0
18588: PPUSH
18589: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_INT 22
18597: PUSH
18598: LD_OWVAR 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: ST_TO_ADDR
// if not tmp then
18612: LD_VAR 0 2
18616: NOT
18617: IFFALSE 18621
// exit ;
18619: GO 18734
// for i := 1 to 2 do
18621: LD_ADDR_VAR 0 1
18625: PUSH
18626: DOUBLE
18627: LD_INT 1
18629: DEC
18630: ST_TO_ADDR
18631: LD_INT 2
18633: PUSH
18634: FOR_TO
18635: IFFALSE 18732
// begin uc_side := your_side ;
18637: LD_ADDR_OWVAR 20
18641: PUSH
18642: LD_OWVAR 2
18646: ST_TO_ADDR
// uc_nation := nation_american ;
18647: LD_ADDR_OWVAR 21
18651: PUSH
18652: LD_INT 1
18654: ST_TO_ADDR
// vc_chassis := us_morphling ;
18655: LD_ADDR_OWVAR 37
18659: PUSH
18660: LD_INT 5
18662: ST_TO_ADDR
// vc_engine := engine_siberite ;
18663: LD_ADDR_OWVAR 39
18667: PUSH
18668: LD_INT 3
18670: ST_TO_ADDR
// vc_control := control_computer ;
18671: LD_ADDR_OWVAR 38
18675: PUSH
18676: LD_INT 3
18678: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18679: LD_ADDR_OWVAR 40
18683: PUSH
18684: LD_INT 10
18686: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18687: CALL_OW 45
18691: PPUSH
18692: LD_VAR 0 2
18696: PUSH
18697: LD_INT 1
18699: ARRAY
18700: PPUSH
18701: CALL_OW 250
18705: PPUSH
18706: LD_VAR 0 2
18710: PUSH
18711: LD_INT 1
18713: ARRAY
18714: PPUSH
18715: CALL_OW 251
18719: PPUSH
18720: LD_INT 12
18722: PPUSH
18723: LD_INT 1
18725: PPUSH
18726: CALL_OW 50
// end ;
18730: GO 18634
18732: POP
18733: POP
// end ;
18734: PPOPN 2
18736: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18737: LD_EXP 24
18741: PUSH
18742: LD_EXP 70
18746: AND
18747: IFFALSE 18969
18749: GO 18751
18751: DISABLE
18752: LD_INT 0
18754: PPUSH
18755: PPUSH
18756: PPUSH
18757: PPUSH
18758: PPUSH
18759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_INT 22
18767: PUSH
18768: LD_OWVAR 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 21
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 23
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: ST_TO_ADDR
// if not tmp then
18814: LD_VAR 0 6
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18969
// s1 := rand ( 1 , 4 ) ;
18823: LD_ADDR_VAR 0 2
18827: PUSH
18828: LD_INT 1
18830: PPUSH
18831: LD_INT 4
18833: PPUSH
18834: CALL_OW 12
18838: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18839: LD_ADDR_VAR 0 4
18843: PUSH
18844: LD_VAR 0 6
18848: PUSH
18849: LD_INT 1
18851: ARRAY
18852: PPUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: CALL_OW 259
18862: ST_TO_ADDR
// if s1 = 1 then
18863: LD_VAR 0 2
18867: PUSH
18868: LD_INT 1
18870: EQUAL
18871: IFFALSE 18891
// s2 := rand ( 2 , 4 ) else
18873: LD_ADDR_VAR 0 3
18877: PUSH
18878: LD_INT 2
18880: PPUSH
18881: LD_INT 4
18883: PPUSH
18884: CALL_OW 12
18888: ST_TO_ADDR
18889: GO 18899
// s2 := 1 ;
18891: LD_ADDR_VAR 0 3
18895: PUSH
18896: LD_INT 1
18898: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18899: LD_ADDR_VAR 0 5
18903: PUSH
18904: LD_VAR 0 6
18908: PUSH
18909: LD_INT 1
18911: ARRAY
18912: PPUSH
18913: LD_VAR 0 3
18917: PPUSH
18918: CALL_OW 259
18922: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18923: LD_VAR 0 6
18927: PUSH
18928: LD_INT 1
18930: ARRAY
18931: PPUSH
18932: LD_VAR 0 2
18936: PPUSH
18937: LD_VAR 0 5
18941: PPUSH
18942: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18946: LD_VAR 0 6
18950: PUSH
18951: LD_INT 1
18953: ARRAY
18954: PPUSH
18955: LD_VAR 0 3
18959: PPUSH
18960: LD_VAR 0 4
18964: PPUSH
18965: CALL_OW 237
// end ;
18969: PPOPN 6
18971: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18972: LD_EXP 24
18976: PUSH
18977: LD_EXP 71
18981: AND
18982: IFFALSE 19061
18984: GO 18986
18986: DISABLE
18987: LD_INT 0
18989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18990: LD_ADDR_VAR 0 1
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_OWVAR 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 30
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 69
19025: ST_TO_ADDR
// if not tmp then
19026: LD_VAR 0 1
19030: NOT
19031: IFFALSE 19035
// exit ;
19033: GO 19061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19035: LD_VAR 0 1
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL_OW 12
19052: ARRAY
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: CALL_OW 234
// end ;
19061: PPOPN 1
19063: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19064: LD_EXP 24
19068: PUSH
19069: LD_EXP 72
19073: AND
19074: IFFALSE 19186
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19083: LD_ADDR_VAR 0 2
19087: PUSH
19088: LD_INT 22
19090: PUSH
19091: LD_OWVAR 2
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: LD_INT 30
19105: PUSH
19106: LD_INT 27
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 30
19115: PUSH
19116: LD_INT 26
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 30
19125: PUSH
19126: LD_INT 28
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: ST_TO_ADDR
// if not tmp then
19148: LD_VAR 0 2
19152: NOT
19153: IFFALSE 19157
// exit ;
19155: GO 19186
// for i in tmp do
19157: LD_ADDR_VAR 0 1
19161: PUSH
19162: LD_VAR 0 2
19166: PUSH
19167: FOR_IN
19168: IFFALSE 19184
// SetLives ( i , 1 ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: CALL_OW 234
19182: GO 19167
19184: POP
19185: POP
// end ;
19186: PPOPN 2
19188: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19189: LD_EXP 24
19193: PUSH
19194: LD_EXP 73
19198: AND
19199: IFFALSE 19473
19201: GO 19203
19203: DISABLE
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
19208: PPUSH
// begin i := rand ( 1 , 7 ) ;
19209: LD_ADDR_VAR 0 1
19213: PUSH
19214: LD_INT 1
19216: PPUSH
19217: LD_INT 7
19219: PPUSH
19220: CALL_OW 12
19224: ST_TO_ADDR
// case i of 1 :
19225: LD_VAR 0 1
19229: PUSH
19230: LD_INT 1
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19248
19238: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19239: LD_STRING earthquake(getX(game), 0, 32)
19241: PPUSH
19242: CALL_OW 559
19246: GO 19473
19248: LD_INT 2
19250: DOUBLE
19251: EQUAL
19252: IFTRUE 19256
19254: GO 19270
19256: POP
// begin ToLua ( displayStucuk(); ) ;
19257: LD_STRING displayStucuk();
19259: PPUSH
19260: CALL_OW 559
// ResetFog ;
19264: CALL_OW 335
// end ; 3 :
19268: GO 19473
19270: LD_INT 3
19272: DOUBLE
19273: EQUAL
19274: IFTRUE 19278
19276: GO 19382
19278: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19279: LD_ADDR_VAR 0 2
19283: PUSH
19284: LD_INT 22
19286: PUSH
19287: LD_OWVAR 2
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 25
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: ST_TO_ADDR
// if not tmp then
19315: LD_VAR 0 2
19319: NOT
19320: IFFALSE 19324
// exit ;
19322: GO 19473
// un := tmp [ rand ( 1 , tmp ) ] ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: LD_VAR 0 2
19333: PUSH
19334: LD_INT 1
19336: PPUSH
19337: LD_VAR 0 2
19341: PPUSH
19342: CALL_OW 12
19346: ARRAY
19347: ST_TO_ADDR
// if Crawls ( un ) then
19348: LD_VAR 0 3
19352: PPUSH
19353: CALL_OW 318
19357: IFFALSE 19368
// ComWalk ( un ) ;
19359: LD_VAR 0 3
19363: PPUSH
19364: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19368: LD_VAR 0 3
19372: PPUSH
19373: LD_INT 8
19375: PPUSH
19376: CALL_OW 336
// end ; 4 :
19380: GO 19473
19382: LD_INT 4
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19451
19390: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_OWVAR 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 30
19410: PUSH
19411: LD_INT 29
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: ST_TO_ADDR
// if not tmp then
19427: LD_VAR 0 2
19431: NOT
19432: IFFALSE 19436
// exit ;
19434: GO 19473
// DestroyUnit ( tmp [ 1 ] ) ;
19436: LD_VAR 0 2
19440: PUSH
19441: LD_INT 1
19443: ARRAY
19444: PPUSH
19445: CALL_OW 65
// end ; 5 .. 7 :
19449: GO 19473
19451: LD_INT 5
19453: DOUBLE
19454: GREATEREQUAL
19455: IFFALSE 19463
19457: LD_INT 7
19459: DOUBLE
19460: LESSEQUAL
19461: IFTRUE 19465
19463: GO 19472
19465: POP
// StreamSibBomb ; end ;
19466: CALL 15753 0 0
19470: GO 19473
19472: POP
// end ;
19473: PPOPN 3
19475: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19476: LD_EXP 24
19480: PUSH
19481: LD_EXP 74
19485: AND
19486: IFFALSE 19642
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
19495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_INT 81
19503: PUSH
19504: LD_OWVAR 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: ST_TO_ADDR
// if not tmp then
19550: LD_VAR 0 2
19554: NOT
19555: IFFALSE 19559
// exit ;
19557: GO 19642
// p := 0 ;
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19567: LD_INT 35
19569: PPUSH
19570: CALL_OW 67
// p := p + 1 ;
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 1
19586: PLUS
19587: ST_TO_ADDR
// for i in tmp do
19588: LD_ADDR_VAR 0 1
19592: PUSH
19593: LD_VAR 0 2
19597: PUSH
19598: FOR_IN
19599: IFFALSE 19630
// if GetLives ( i ) < 1000 then
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 256
19610: PUSH
19611: LD_INT 1000
19613: LESS
19614: IFFALSE 19628
// SetLives ( i , 1000 ) ;
19616: LD_VAR 0 1
19620: PPUSH
19621: LD_INT 1000
19623: PPUSH
19624: CALL_OW 234
19628: GO 19598
19630: POP
19631: POP
// until p > 20 ;
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 20
19639: GREATER
19640: IFFALSE 19567
// end ;
19642: PPOPN 3
19644: END
// every 0 0$1 trigger StreamModeActive and sTime do
19645: LD_EXP 24
19649: PUSH
19650: LD_EXP 75
19654: AND
19655: IFFALSE 19690
19657: GO 19659
19659: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19660: LD_INT 28
19662: PPUSH
19663: LD_OWVAR 2
19667: PPUSH
19668: LD_INT 2
19670: PPUSH
19671: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19675: LD_INT 30
19677: PPUSH
19678: LD_OWVAR 2
19682: PPUSH
19683: LD_INT 2
19685: PPUSH
19686: CALL_OW 322
// end ;
19690: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19691: LD_EXP 24
19695: PUSH
19696: LD_EXP 76
19700: AND
19701: IFFALSE 19822
19703: GO 19705
19705: DISABLE
19706: LD_INT 0
19708: PPUSH
19709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_INT 22
19717: PUSH
19718: LD_OWVAR 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 21
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 3
19739: PUSH
19740: LD_INT 23
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: LIST
19758: PPUSH
19759: CALL_OW 69
19763: ST_TO_ADDR
// if not tmp then
19764: LD_VAR 0 2
19768: NOT
19769: IFFALSE 19773
// exit ;
19771: GO 19822
// for i in tmp do
19773: LD_ADDR_VAR 0 1
19777: PUSH
19778: LD_VAR 0 2
19782: PUSH
19783: FOR_IN
19784: IFFALSE 19820
// begin if Crawls ( i ) then
19786: LD_VAR 0 1
19790: PPUSH
19791: CALL_OW 318
19795: IFFALSE 19806
// ComWalk ( i ) ;
19797: LD_VAR 0 1
19801: PPUSH
19802: CALL_OW 138
// SetClass ( i , 2 ) ;
19806: LD_VAR 0 1
19810: PPUSH
19811: LD_INT 2
19813: PPUSH
19814: CALL_OW 336
// end ;
19818: GO 19783
19820: POP
19821: POP
// end ;
19822: PPOPN 2
19824: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19825: LD_EXP 24
19829: PUSH
19830: LD_EXP 77
19834: AND
19835: IFFALSE 20116
19837: GO 19839
19839: DISABLE
19840: LD_INT 0
19842: PPUSH
19843: PPUSH
19844: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19845: LD_OWVAR 2
19849: PPUSH
19850: LD_INT 9
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: LD_INT 1
19858: PPUSH
19859: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19863: LD_INT 9
19865: PPUSH
19866: LD_OWVAR 2
19870: PPUSH
19871: CALL_OW 343
// uc_side := 9 ;
19875: LD_ADDR_OWVAR 20
19879: PUSH
19880: LD_INT 9
19882: ST_TO_ADDR
// uc_nation := 2 ;
19883: LD_ADDR_OWVAR 21
19887: PUSH
19888: LD_INT 2
19890: ST_TO_ADDR
// hc_name := Dark Warrior ;
19891: LD_ADDR_OWVAR 26
19895: PUSH
19896: LD_STRING Dark Warrior
19898: ST_TO_ADDR
// hc_gallery :=  ;
19899: LD_ADDR_OWVAR 33
19903: PUSH
19904: LD_STRING 
19906: ST_TO_ADDR
// hc_noskilllimit := true ;
19907: LD_ADDR_OWVAR 76
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19915: LD_ADDR_OWVAR 31
19919: PUSH
19920: LD_INT 30
19922: PUSH
19923: LD_INT 30
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
// un := CreateHuman ;
19938: LD_ADDR_VAR 0 3
19942: PUSH
19943: CALL_OW 44
19947: ST_TO_ADDR
// hc_noskilllimit := false ;
19948: LD_ADDR_OWVAR 76
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19956: LD_VAR 0 3
19960: PPUSH
19961: LD_INT 1
19963: PPUSH
19964: CALL_OW 51
// p := 0 ;
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19976: LD_INT 35
19978: PPUSH
19979: CALL_OW 67
// p := p + 1 ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_VAR 0 2
19992: PUSH
19993: LD_INT 1
19995: PLUS
19996: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 256
20006: PUSH
20007: LD_INT 1000
20009: LESS
20010: IFFALSE 20024
// SetLives ( un , 1000 ) ;
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_INT 1000
20019: PPUSH
20020: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20024: LD_VAR 0 3
20028: PPUSH
20029: LD_INT 81
20031: PUSH
20032: LD_OWVAR 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 91
20043: PUSH
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: PPUSH
20066: LD_VAR 0 3
20070: PPUSH
20071: CALL_OW 74
20075: PPUSH
20076: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20080: LD_VAR 0 2
20084: PUSH
20085: LD_INT 60
20087: GREATER
20088: PUSH
20089: LD_VAR 0 3
20093: PPUSH
20094: CALL_OW 301
20098: OR
20099: IFFALSE 19976
// if un then
20101: LD_VAR 0 3
20105: IFFALSE 20116
// RemoveUnit ( un ) ;
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 64
// end ; end_of_file end_of_file
20116: PPOPN 3
20118: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20119: LD_INT 0
20121: PPUSH
20122: PPUSH
20123: PPUSH
20124: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 264
20134: PUSH
20135: LD_EXP 82
20139: EQUAL
20140: IFFALSE 20212
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20142: LD_INT 68
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 255
20154: PPUSH
20155: CALL_OW 321
20159: PUSH
20160: LD_INT 2
20162: EQUAL
20163: IFFALSE 20175
// eff := 70 else
20165: LD_ADDR_VAR 0 4
20169: PUSH
20170: LD_INT 70
20172: ST_TO_ADDR
20173: GO 20183
// eff := 30 ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_INT 30
20182: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 250
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 251
20202: PPUSH
20203: LD_VAR 0 4
20207: PPUSH
20208: CALL_OW 495
// end ; end ;
20212: LD_VAR 0 2
20216: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20217: LD_INT 0
20219: PPUSH
// end ;
20220: LD_VAR 0 4
20224: RET
// export function SOS_Command ( cmd ) ; begin
20225: LD_INT 0
20227: PPUSH
// end ;
20228: LD_VAR 0 2
20232: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20233: LD_VAR 0 1
20237: PUSH
20238: LD_INT 255
20240: EQUAL
20241: PUSH
20242: LD_VAR 0 2
20246: PPUSH
20247: CALL_OW 264
20251: PUSH
20252: LD_INT 14
20254: PUSH
20255: LD_INT 53
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: IN
20262: AND
20263: PUSH
20264: LD_VAR 0 4
20268: PPUSH
20269: LD_VAR 0 5
20273: PPUSH
20274: CALL_OW 488
20278: AND
20279: IFFALSE 20303
// CutTreeXYR ( unit , x , y , 12 ) ;
20281: LD_VAR 0 2
20285: PPUSH
20286: LD_VAR 0 4
20290: PPUSH
20291: LD_VAR 0 5
20295: PPUSH
20296: LD_INT 12
20298: PPUSH
20299: CALL 20306 0 4
// end ;
20303: PPOPN 5
20305: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20306: LD_INT 0
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20317: LD_VAR 0 1
20321: NOT
20322: PUSH
20323: LD_VAR 0 2
20327: PPUSH
20328: LD_VAR 0 3
20332: PPUSH
20333: CALL_OW 488
20337: NOT
20338: OR
20339: PUSH
20340: LD_VAR 0 4
20344: NOT
20345: OR
20346: IFFALSE 20350
// exit ;
20348: GO 20690
// list := [ ] ;
20350: LD_ADDR_VAR 0 13
20354: PUSH
20355: EMPTY
20356: ST_TO_ADDR
// if x - r < 0 then
20357: LD_VAR 0 2
20361: PUSH
20362: LD_VAR 0 4
20366: MINUS
20367: PUSH
20368: LD_INT 0
20370: LESS
20371: IFFALSE 20383
// min_x := 0 else
20373: LD_ADDR_VAR 0 7
20377: PUSH
20378: LD_INT 0
20380: ST_TO_ADDR
20381: GO 20399
// min_x := x - r ;
20383: LD_ADDR_VAR 0 7
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: LD_VAR 0 4
20397: MINUS
20398: ST_TO_ADDR
// if y - r < 0 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_VAR 0 4
20408: MINUS
20409: PUSH
20410: LD_INT 0
20412: LESS
20413: IFFALSE 20425
// min_y := 0 else
20415: LD_ADDR_VAR 0 8
20419: PUSH
20420: LD_INT 0
20422: ST_TO_ADDR
20423: GO 20441
// min_y := y - r ;
20425: LD_ADDR_VAR 0 8
20429: PUSH
20430: LD_VAR 0 3
20434: PUSH
20435: LD_VAR 0 4
20439: MINUS
20440: ST_TO_ADDR
// max_x := x + r ;
20441: LD_ADDR_VAR 0 9
20445: PUSH
20446: LD_VAR 0 2
20450: PUSH
20451: LD_VAR 0 4
20455: PLUS
20456: ST_TO_ADDR
// max_y := y + r ;
20457: LD_ADDR_VAR 0 10
20461: PUSH
20462: LD_VAR 0 3
20466: PUSH
20467: LD_VAR 0 4
20471: PLUS
20472: ST_TO_ADDR
// for _x = min_x to max_x do
20473: LD_ADDR_VAR 0 11
20477: PUSH
20478: DOUBLE
20479: LD_VAR 0 7
20483: DEC
20484: ST_TO_ADDR
20485: LD_VAR 0 9
20489: PUSH
20490: FOR_TO
20491: IFFALSE 20608
// for _y = min_y to max_y do
20493: LD_ADDR_VAR 0 12
20497: PUSH
20498: DOUBLE
20499: LD_VAR 0 8
20503: DEC
20504: ST_TO_ADDR
20505: LD_VAR 0 10
20509: PUSH
20510: FOR_TO
20511: IFFALSE 20604
// begin if not ValidHex ( _x , _y ) then
20513: LD_VAR 0 11
20517: PPUSH
20518: LD_VAR 0 12
20522: PPUSH
20523: CALL_OW 488
20527: NOT
20528: IFFALSE 20532
// continue ;
20530: GO 20510
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20532: LD_VAR 0 11
20536: PPUSH
20537: LD_VAR 0 12
20541: PPUSH
20542: CALL_OW 351
20546: PUSH
20547: LD_VAR 0 11
20551: PPUSH
20552: LD_VAR 0 12
20556: PPUSH
20557: CALL_OW 554
20561: AND
20562: IFFALSE 20602
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20564: LD_ADDR_VAR 0 13
20568: PUSH
20569: LD_VAR 0 13
20573: PPUSH
20574: LD_VAR 0 13
20578: PUSH
20579: LD_INT 1
20581: PLUS
20582: PPUSH
20583: LD_VAR 0 11
20587: PUSH
20588: LD_VAR 0 12
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 2
20601: ST_TO_ADDR
// end ;
20602: GO 20510
20604: POP
20605: POP
20606: GO 20490
20608: POP
20609: POP
// if not list then
20610: LD_VAR 0 13
20614: NOT
20615: IFFALSE 20619
// exit ;
20617: GO 20690
// for i in list do
20619: LD_ADDR_VAR 0 6
20623: PUSH
20624: LD_VAR 0 13
20628: PUSH
20629: FOR_IN
20630: IFFALSE 20688
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20632: LD_VAR 0 1
20636: PPUSH
20637: LD_STRING M
20639: PUSH
20640: LD_VAR 0 6
20644: PUSH
20645: LD_INT 1
20647: ARRAY
20648: PUSH
20649: LD_VAR 0 6
20653: PUSH
20654: LD_INT 2
20656: ARRAY
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: PPUSH
20682: CALL_OW 447
20686: GO 20629
20688: POP
20689: POP
// end ; end_of_file
20690: LD_VAR 0 5
20694: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
20695: GO 20697
20697: DISABLE
// begin ru_radar := 98 ;
20698: LD_ADDR_EXP 78
20702: PUSH
20703: LD_INT 98
20705: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20706: LD_ADDR_EXP 79
20710: PUSH
20711: LD_INT 89
20713: ST_TO_ADDR
// us_hack := 99 ;
20714: LD_ADDR_EXP 80
20718: PUSH
20719: LD_INT 99
20721: ST_TO_ADDR
// us_artillery := 97 ;
20722: LD_ADDR_EXP 81
20726: PUSH
20727: LD_INT 97
20729: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20730: LD_ADDR_EXP 82
20734: PUSH
20735: LD_INT 91
20737: ST_TO_ADDR
// end ;
20738: END
