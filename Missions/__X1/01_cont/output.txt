// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 0
  22: PPUSH
  23: LD_INT 0
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 207 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1380 0 0
// PrepareArabian ;
  50: CALL 950 0 0
// PrepareHeike ;
  54: CALL 885 0 0
// Action ;
  58: CALL 2917 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeHurt := false ;
 169: LD_ADDR_EXP 14
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// animalCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$1 trigger debug do
 190: LD_EXP 2
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// FogOff ( 2 ) ; end_of_file
 199: LD_INT 2
 201: PPUSH
 202: CALL_OW 344
 206: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 207: LD_INT 0
 209: PPUSH
 210: PPUSH
 211: PPUSH
// uc_side = 0 ;
 212: LD_ADDR_OWVAR 20
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// uc_nation = 0 ;
 220: LD_ADDR_OWVAR 21
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// InitHc ;
 228: CALL_OW 19
// InitVc ;
 232: CALL_OW 20
// if mastodonts then
 236: LD_VAR 0 6
 240: IFFALSE 307
// for i = 1 to mastodonts do
 242: LD_ADDR_VAR 0 11
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_VAR 0 6
 256: PUSH
 257: FOR_TO
 258: IFFALSE 305
// begin vc_chassis := 31 ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_INT 31
 267: ST_TO_ADDR
// vc_control := control_rider ;
 268: LD_ADDR_OWVAR 38
 272: PUSH
 273: LD_INT 4
 275: ST_TO_ADDR
// animal := CreateVehicle ;
 276: LD_ADDR_VAR 0 12
 280: PUSH
 281: CALL_OW 45
 285: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 286: LD_VAR 0 12
 290: PPUSH
 291: LD_VAR 0 8
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 49
// end ;
 303: GO 257
 305: POP
 306: POP
// if horses then
 307: LD_VAR 0 5
 311: IFFALSE 378
// for i = 1 to horses do
 313: LD_ADDR_VAR 0 11
 317: PUSH
 318: DOUBLE
 319: LD_INT 1
 321: DEC
 322: ST_TO_ADDR
 323: LD_VAR 0 5
 327: PUSH
 328: FOR_TO
 329: IFFALSE 376
// begin hc_class := 21 ;
 331: LD_ADDR_OWVAR 28
 335: PUSH
 336: LD_INT 21
 338: ST_TO_ADDR
// hc_gallery :=  ;
 339: LD_ADDR_OWVAR 33
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// animal := CreateHuman ;
 347: LD_ADDR_VAR 0 12
 351: PUSH
 352: CALL_OW 44
 356: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 357: LD_VAR 0 12
 361: PPUSH
 362: LD_VAR 0 8
 366: PPUSH
 367: LD_INT 0
 369: PPUSH
 370: CALL_OW 49
// end ;
 374: GO 328
 376: POP
 377: POP
// if birds then
 378: LD_VAR 0 1
 382: IFFALSE 449
// for i = 1 to birds do
 384: LD_ADDR_VAR 0 11
 388: PUSH
 389: DOUBLE
 390: LD_INT 1
 392: DEC
 393: ST_TO_ADDR
 394: LD_VAR 0 1
 398: PUSH
 399: FOR_TO
 400: IFFALSE 447
// begin hc_class = 18 ;
 402: LD_ADDR_OWVAR 28
 406: PUSH
 407: LD_INT 18
 409: ST_TO_ADDR
// hc_gallery =  ;
 410: LD_ADDR_OWVAR 33
 414: PUSH
 415: LD_STRING 
 417: ST_TO_ADDR
// animal := CreateHuman ;
 418: LD_ADDR_VAR 0 12
 422: PUSH
 423: CALL_OW 44
 427: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 428: LD_VAR 0 12
 432: PPUSH
 433: LD_VAR 0 8
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: CALL_OW 49
// end ;
 445: GO 399
 447: POP
 448: POP
// if tigers then
 449: LD_VAR 0 2
 453: IFFALSE 537
// for i = 1 to tigers do
 455: LD_ADDR_VAR 0 11
 459: PUSH
 460: DOUBLE
 461: LD_INT 1
 463: DEC
 464: ST_TO_ADDR
 465: LD_VAR 0 2
 469: PUSH
 470: FOR_TO
 471: IFFALSE 535
// begin hc_class = class_tiger ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 14
 480: ST_TO_ADDR
// hc_gallery =  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 489: LD_ADDR_OWVAR 35
 493: PUSH
 494: LD_INT 7
 496: NEG
 497: PPUSH
 498: LD_INT 7
 500: PPUSH
 501: CALL_OW 12
 505: ST_TO_ADDR
// animal := CreateHuman ;
 506: LD_ADDR_VAR 0 12
 510: PUSH
 511: CALL_OW 44
 515: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 516: LD_VAR 0 12
 520: PPUSH
 521: LD_VAR 0 8
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL_OW 49
// end ;
 533: GO 470
 535: POP
 536: POP
// if apemans then
 537: LD_VAR 0 3
 541: IFFALSE 664
// for i = 1 to apemans do
 543: LD_ADDR_VAR 0 11
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_VAR 0 3
 557: PUSH
 558: FOR_TO
 559: IFFALSE 662
// begin hc_class = class_apeman ;
 561: LD_ADDR_OWVAR 28
 565: PUSH
 566: LD_INT 12
 568: ST_TO_ADDR
// hc_gallery =  ;
 569: LD_ADDR_OWVAR 33
 573: PUSH
 574: LD_STRING 
 576: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 577: LD_ADDR_OWVAR 35
 581: PUSH
 582: LD_INT 5
 584: NEG
 585: PPUSH
 586: LD_INT 5
 588: PPUSH
 589: CALL_OW 12
 593: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 594: LD_ADDR_OWVAR 31
 598: PUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: CALL_OW 12
 609: PUSH
 610: LD_INT 1
 612: PPUSH
 613: LD_INT 3
 615: PPUSH
 616: CALL_OW 12
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: ST_TO_ADDR
// animal := CreateHuman ;
 633: LD_ADDR_VAR 0 12
 637: PUSH
 638: CALL_OW 44
 642: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 643: LD_VAR 0 12
 647: PPUSH
 648: LD_VAR 0 8
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: CALL_OW 49
// end ;
 660: GO 558
 662: POP
 663: POP
// if enchidnas then
 664: LD_VAR 0 4
 668: IFFALSE 735
// for i = 1 to enchidnas do
 670: LD_ADDR_VAR 0 11
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_VAR 0 4
 684: PUSH
 685: FOR_TO
 686: IFFALSE 733
// begin hc_class = 13 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 13
 695: ST_TO_ADDR
// hc_gallery =  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// animal := CreateHuman ;
 704: LD_ADDR_VAR 0 12
 708: PUSH
 709: CALL_OW 44
 713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 714: LD_VAR 0 12
 718: PPUSH
 719: LD_VAR 0 8
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 685
 733: POP
 734: POP
// if fishes then
 735: LD_VAR 0 7
 739: IFFALSE 806
// for i = 1 to fishes do
 741: LD_ADDR_VAR 0 11
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_VAR 0 7
 755: PUSH
 756: FOR_TO
 757: IFFALSE 804
// begin hc_class = class_fish ;
 759: LD_ADDR_OWVAR 28
 763: PUSH
 764: LD_INT 20
 766: ST_TO_ADDR
// hc_gallery =  ;
 767: LD_ADDR_OWVAR 33
 771: PUSH
 772: LD_STRING 
 774: ST_TO_ADDR
// animal := CreateHuman ;
 775: LD_ADDR_VAR 0 12
 779: PUSH
 780: CALL_OW 44
 784: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 785: LD_VAR 0 12
 789: PPUSH
 790: LD_VAR 0 9
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 49
// end ;
 802: GO 756
 804: POP
 805: POP
// end ;
 806: LD_VAR 0 10
 810: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 811: LD_INT 0
 813: PPUSH
 814: PPUSH
 815: PPUSH
// if not observer or not unit then
 816: LD_VAR 0 1
 820: NOT
 821: PUSH
 822: LD_VAR 0 2
 826: NOT
 827: OR
 828: IFFALSE 832
// exit ;
 830: GO 880
// if not See ( GetSide ( observer ) , unit ) then
 832: LD_VAR 0 1
 836: PPUSH
 837: CALL_OW 255
 841: PPUSH
 842: LD_VAR 0 2
 846: PPUSH
 847: CALL_OW 292
 851: NOT
 852: IFFALSE 856
// exit ;
 854: GO 880
// result := GetDistUnits ( observer , unit ) < 12 ;
 856: LD_ADDR_VAR 0 3
 860: PUSH
 861: LD_VAR 0 1
 865: PPUSH
 866: LD_VAR 0 2
 870: PPUSH
 871: CALL_OW 296
 875: PUSH
 876: LD_INT 12
 878: LESS
 879: ST_TO_ADDR
// end ; end_of_file
 880: LD_VAR 0 3
 884: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 885: LD_INT 0
 887: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 888: LD_INT 66
 890: PPUSH
 891: LD_INT 26
 893: PPUSH
 894: CALL_OW 86
// uc_side := 2 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 2
 905: ST_TO_ADDR
// uc_nation := 2 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 2
 913: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 914: LD_ADDR_EXP 16
 918: PUSH
 919: LD_STRING Heike
 921: PPUSH
 922: CALL_OW 25
 926: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 927: LD_EXP 16
 931: PPUSH
 932: LD_INT 66
 934: PPUSH
 935: LD_INT 26
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: CALL_OW 48
// end ;
 945: LD_VAR 0 1
 949: RET
// export function PrepareArabian ; begin
 950: LD_INT 0
 952: PPUSH
// uc_side := 5 ;
 953: LD_ADDR_OWVAR 20
 957: PUSH
 958: LD_INT 5
 960: ST_TO_ADDR
// uc_nation := 2 ;
 961: LD_ADDR_OWVAR 21
 965: PUSH
 966: LD_INT 2
 968: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 969: LD_ADDR_EXP 17
 973: PUSH
 974: LD_STRING Olaf
 976: PPUSH
 977: CALL_OW 25
 981: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 982: LD_EXP 17
 986: PPUSH
 987: LD_INT 39
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1000: LD_ADDR_EXP 18
1004: PUSH
1005: LD_STRING Givi
1007: PPUSH
1008: CALL_OW 25
1012: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1013: LD_EXP 18
1017: PPUSH
1018: LD_INT 55
1020: PPUSH
1021: LD_INT 90
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1031: LD_EXP 18
1035: PPUSH
1036: LD_INT 53
1038: PPUSH
1039: LD_INT 89
1041: PPUSH
1042: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1046: LD_ADDR_EXP 19
1050: PUSH
1051: LD_STRING Mike
1053: PPUSH
1054: CALL_OW 25
1058: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1059: LD_EXP 19
1063: PPUSH
1064: LD_INT 53
1066: PPUSH
1067: LD_INT 87
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1077: LD_EXP 19
1081: PPUSH
1082: LD_INT 53
1084: PPUSH
1085: LD_INT 89
1087: PPUSH
1088: CALL_OW 118
// end ;
1092: LD_VAR 0 1
1096: RET
// export function PreparePrison ; begin
1097: LD_INT 0
1099: PPUSH
// uc_side := 5 ;
1100: LD_ADDR_OWVAR 20
1104: PUSH
1105: LD_INT 5
1107: ST_TO_ADDR
// uc_nation := 2 ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1116: LD_ADDR_EXP 20
1120: PUSH
1121: LD_STRING Kamil
1123: PPUSH
1124: CALL_OW 25
1128: ST_TO_ADDR
// if Difficulty > 1 then
1129: LD_OWVAR 67
1133: PUSH
1134: LD_INT 1
1136: GREATER
1137: IFFALSE 1153
// PlaceHumanInUnit ( Kamil , northDep ) else
1139: LD_EXP 20
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: CALL_OW 52
1151: GO 1165
// PlaceHumanInUnit ( Kamil , southDep ) ;
1153: LD_EXP 20
1157: PPUSH
1158: LD_INT 8
1160: PPUSH
1161: CALL_OW 52
// uc_side := 3 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 3
1172: ST_TO_ADDR
// uc_nation := 3 ;
1173: LD_ADDR_OWVAR 21
1177: PUSH
1178: LD_INT 3
1180: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1181: LD_INT 0
1183: PPUSH
1184: LD_INT 2
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: CALL_OW 380
// if Difficulty > 1 then
1194: LD_OWVAR 67
1198: PUSH
1199: LD_INT 1
1201: GREATER
1202: IFFALSE 1218
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1204: CALL_OW 44
1208: PPUSH
1209: LD_INT 8
1211: PPUSH
1212: CALL_OW 52
1216: GO 1230
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1218: CALL_OW 44
1222: PPUSH
1223: LD_INT 2
1225: PPUSH
1226: CALL_OW 52
// end ; end_of_file
1230: LD_VAR 0 1
1234: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1235: LD_INT 0
1237: PPUSH
1238: PPUSH
1239: PPUSH
// uc_side := 3 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// uc_nation := 3 ;
1248: LD_ADDR_OWVAR 21
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// russianPatrol := [ ] ;
1256: LD_ADDR_EXP 21
1260: PUSH
1261: EMPTY
1262: ST_TO_ADDR
// for i = 1 to 3 do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: DOUBLE
1269: LD_INT 1
1271: DEC
1272: ST_TO_ADDR
1273: LD_INT 3
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1373
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1279: LD_INT 1
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1292: LD_ADDR_OWVAR 29
1296: PUSH
1297: LD_INT 9
1299: PUSH
1300: LD_INT 10
1302: PPUSH
1303: LD_INT 11
1305: PPUSH
1306: CALL_OW 12
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: ST_TO_ADDR
// un := CreateHuman ;
1315: LD_ADDR_VAR 0 3
1319: PUSH
1320: CALL_OW 44
1324: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1325: LD_ADDR_EXP 21
1329: PUSH
1330: LD_EXP 21
1334: PPUSH
1335: LD_VAR 0 2
1339: PPUSH
1340: LD_VAR 0 3
1344: PPUSH
1345: CALL_OW 1
1349: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1350: LD_VAR 0 3
1354: PPUSH
1355: LD_INT 26
1357: PPUSH
1358: LD_INT 22
1360: PPUSH
1361: LD_INT 4
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 50
// end ;
1371: GO 1276
1373: POP
1374: POP
// end ;
1375: LD_VAR 0 1
1379: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1380: LD_INT 0
1382: PPUSH
1383: PPUSH
1384: PPUSH
1385: PPUSH
1386: PPUSH
// uc_side := 3 ;
1387: LD_ADDR_OWVAR 20
1391: PUSH
1392: LD_INT 3
1394: ST_TO_ADDR
// uc_nation := 3 ;
1395: LD_ADDR_OWVAR 21
1399: PUSH
1400: LD_INT 3
1402: ST_TO_ADDR
// russianForces := [ ] ;
1403: LD_ADDR_EXP 23
1407: PUSH
1408: EMPTY
1409: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1410: LD_ADDR_EXP 22
1414: PUSH
1415: EMPTY
1416: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1417: LD_ADDR_VAR 0 5
1421: PUSH
1422: LD_INT 11
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 517
1432: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1433: LD_ADDR_VAR 0 2
1437: PUSH
1438: LD_INT 21
1440: PUSH
1441: LD_INT 0
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PPUSH
1448: CALL_OW 69
1452: PUSH
1453: FOR_IN
1454: IFFALSE 1498
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1456: LD_VAR 0 2
1460: PPUSH
1461: CALL_OW 274
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 200
1471: PPUSH
1472: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 274
1485: PPUSH
1486: LD_INT 2
1488: PPUSH
1489: LD_INT 10
1491: PPUSH
1492: CALL_OW 277
// end ;
1496: GO 1453
1498: POP
1499: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 30
1507: PUSH
1508: LD_INT 31
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1595
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 1
1528: PPUSH
1529: LD_OWVAR 67
1533: PUSH
1534: LD_INT 1
1536: MINUS
1537: PPUSH
1538: CALL_OW 380
// un := CreateHuman ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: CALL_OW 44
1551: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1552: LD_VAR 0 4
1556: PPUSH
1557: LD_VAR 0 2
1561: PPUSH
1562: CALL_OW 254
1566: PUSH
1567: LD_INT 3
1569: MINUS
1570: PUSH
1571: LD_INT 6
1573: MOD
1574: PPUSH
1575: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1579: LD_VAR 0 4
1583: PPUSH
1584: LD_VAR 0 2
1588: PPUSH
1589: CALL_OW 52
// end ;
1593: GO 1520
1595: POP
1596: POP
// for i = 1 to 5 do
1597: LD_ADDR_VAR 0 2
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 5
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1693
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_OWVAR 67
1623: PPUSH
1624: CALL_OW 380
// un := CreateHuman ;
1628: LD_ADDR_VAR 0 4
1632: PUSH
1633: CALL_OW 44
1637: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1638: LD_VAR 0 4
1642: PPUSH
1643: LD_INT 9
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 49
// ComHold ( un ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1662: LD_ADDR_EXP 23
1666: PUSH
1667: LD_EXP 23
1671: PPUSH
1672: LD_EXP 23
1676: PUSH
1677: LD_INT 1
1679: PLUS
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL_OW 1
1690: ST_TO_ADDR
// end ;
1691: GO 1610
1693: POP
1694: POP
// for i := 1 to Difficulty + 1 do
1695: LD_ADDR_VAR 0 2
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_OWVAR 67
1709: PUSH
1710: LD_INT 1
1712: PLUS
1713: PUSH
1714: FOR_TO
1715: IFFALSE 1815
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_OWVAR 67
1727: PPUSH
1728: CALL_OW 380
// un := CreateHuman ;
1732: LD_ADDR_VAR 0 4
1736: PUSH
1737: CALL_OW 44
1741: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 5
1751: PUSH
1752: LD_INT 1
1754: ARRAY
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PPUSH
1762: LD_VAR 0 5
1766: PUSH
1767: LD_INT 2
1769: ARRAY
1770: PUSH
1771: LD_VAR 0 2
1775: ARRAY
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1784: LD_ADDR_EXP 22
1788: PUSH
1789: LD_EXP 22
1793: PPUSH
1794: LD_EXP 22
1798: PUSH
1799: LD_INT 1
1801: PLUS
1802: PPUSH
1803: LD_VAR 0 4
1807: PPUSH
1808: CALL_OW 1
1812: ST_TO_ADDR
// end ;
1813: GO 1714
1815: POP
1816: POP
// vc_chassis := ru_medium_wheeled ;
1817: LD_ADDR_OWVAR 37
1821: PUSH
1822: LD_INT 21
1824: ST_TO_ADDR
// vc_engine := engine_combustion ;
1825: LD_ADDR_OWVAR 39
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// vc_control := control_manual ;
1833: LD_ADDR_OWVAR 38
1837: PUSH
1838: LD_INT 1
1840: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1841: LD_ADDR_OWVAR 40
1845: PUSH
1846: LD_INT 42
1848: ST_TO_ADDR
// russianTank := CreateVehicle ;
1849: LD_ADDR_EXP 24
1853: PUSH
1854: CALL_OW 45
1858: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1859: LD_EXP 24
1863: PPUSH
1864: LD_INT 121
1866: PPUSH
1867: LD_INT 25
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_OWVAR 67
1887: PPUSH
1888: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1892: CALL_OW 44
1896: PPUSH
1897: LD_EXP 24
1901: PPUSH
1902: CALL_OW 52
// if Difficulty > 1 then
1906: LD_OWVAR 67
1910: PUSH
1911: LD_INT 1
1913: GREATER
1914: IFFALSE 2000
// begin bc_type := b_breastwork ;
1916: LD_ADDR_OWVAR 42
1920: PUSH
1921: LD_INT 31
1923: ST_TO_ADDR
// bc_level := 2 ;
1924: LD_ADDR_OWVAR 43
1928: PUSH
1929: LD_INT 2
1931: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1932: LD_ADDR_VAR 0 3
1936: PUSH
1937: LD_INT 143
1939: PPUSH
1940: LD_INT 88
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 47
1950: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 2
1959: PPUSH
1960: CALL_OW 380
// un := CreateHuman ;
1964: LD_ADDR_VAR 0 4
1968: PUSH
1969: CALL_OW 44
1973: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1974: LD_VAR 0 4
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1986: LD_VAR 0 4
1990: PPUSH
1991: LD_VAR 0 3
1995: PPUSH
1996: CALL_OW 52
// end ; if Difficulty > 2 then
2000: LD_OWVAR 67
2004: PUSH
2005: LD_INT 2
2007: GREATER
2008: IFFALSE 2064
// begin for i := 1 to 2 do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: DOUBLE
2016: LD_INT 1
2018: DEC
2019: ST_TO_ADDR
2020: LD_INT 2
2022: PUSH
2023: FOR_TO
2024: IFFALSE 2062
// begin PrepareHuman ( false , 1 , 2 ) ;
2026: LD_INT 0
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 2
2034: PPUSH
2035: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2039: CALL_OW 44
2043: PPUSH
2044: LD_INT 156
2046: PPUSH
2047: LD_INT 108
2049: PPUSH
2050: LD_INT 3
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL_OW 50
// end ;
2060: GO 2023
2062: POP
2063: POP
// end ; end ;
2064: LD_VAR 0 1
2068: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2069: LD_EXP 22
2073: IFFALSE 2379
2075: GO 2077
2077: DISABLE
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
// begin enable ;
2086: ENABLE
// for i in russianForestPatrol do
2087: LD_ADDR_VAR 0 1
2091: PUSH
2092: LD_EXP 22
2096: PUSH
2097: FOR_IN
2098: IFFALSE 2377
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2100: LD_VAR 0 1
2104: PPUSH
2105: LD_INT 53
2107: PPUSH
2108: LD_INT 89
2110: PPUSH
2111: CALL_OW 297
2115: PUSH
2116: LD_INT 30
2118: LESS
2119: IFFALSE 2138
// begin ComMoveXY ( i , 114 , 80 ) ;
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_INT 114
2128: PPUSH
2129: LD_INT 80
2131: PPUSH
2132: CALL_OW 111
// continue ;
2136: GO 2097
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_EXP 22
2147: PUSH
2148: LD_VAR 0 1
2152: DIFF
2153: PPUSH
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 74
2163: ST_TO_ADDR
// if tmp then
2164: LD_VAR 0 6
2168: IFFALSE 2236
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_VAR 0 6
2179: PPUSH
2180: CALL_OW 296
2184: PUSH
2185: LD_INT 14
2187: LESS
2188: PUSH
2189: LD_VAR 0 6
2193: PPUSH
2194: CALL_OW 256
2198: PUSH
2199: LD_INT 999
2201: LESS
2202: AND
2203: IFFALSE 2236
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2205: LD_VAR 0 1
2209: PPUSH
2210: LD_VAR 0 6
2214: PPUSH
2215: CALL_OW 250
2219: PPUSH
2220: LD_VAR 0 6
2224: PPUSH
2225: CALL_OW 251
2229: PPUSH
2230: CALL_OW 114
// break ;
2234: GO 2377
// end ; if not HasTask ( i ) then
2236: LD_VAR 0 1
2240: PPUSH
2241: CALL_OW 314
2245: NOT
2246: IFFALSE 2375
// begin d := rand ( 0 , 5 ) ;
2248: LD_ADDR_VAR 0 2
2252: PUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 5
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 3
2271: PPUSH
2272: LD_INT 7
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2280: LD_ADDR_VAR 0 4
2284: PUSH
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL_OW 250
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: LD_VAR 0 3
2304: PPUSH
2305: CALL_OW 272
2309: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2310: LD_ADDR_VAR 0 5
2314: PUSH
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 251
2324: PPUSH
2325: LD_VAR 0 2
2329: PPUSH
2330: LD_VAR 0 3
2334: PPUSH
2335: CALL_OW 273
2339: ST_TO_ADDR
// if ValidHex ( x , y ) then
2340: LD_VAR 0 4
2344: PPUSH
2345: LD_VAR 0 5
2349: PPUSH
2350: CALL_OW 488
2354: IFFALSE 2375
// ComAgressiveMove ( i , x , y ) ;
2356: LD_VAR 0 1
2360: PPUSH
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_VAR 0 5
2370: PPUSH
2371: CALL_OW 114
// end ; end ;
2375: GO 2097
2377: POP
2378: POP
// end ;
2379: PPOPN 6
2381: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2382: LD_EXP 24
2386: PPUSH
2387: CALL_OW 302
2391: PUSH
2392: LD_EXP 24
2396: PPUSH
2397: CALL_OW 255
2401: PUSH
2402: LD_INT 3
2404: EQUAL
2405: AND
2406: IFFALSE 2673
2408: GO 2410
2410: DISABLE
// begin enable ;
2411: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2412: LD_EXP 24
2416: PPUSH
2417: LD_INT 124
2419: PPUSH
2420: LD_INT 25
2422: PPUSH
2423: CALL_OW 307
2427: IFFALSE 2441
// SetFuel ( russianTank , 100 ) ;
2429: LD_EXP 24
2433: PPUSH
2434: LD_INT 100
2436: PPUSH
2437: CALL_OW 240
// if HasTask ( russianTank ) then
2441: LD_EXP 24
2445: PPUSH
2446: CALL_OW 314
2450: IFFALSE 2454
// exit ;
2452: GO 2673
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2454: LD_EXP 24
2458: PPUSH
2459: LD_INT 121
2461: PPUSH
2462: LD_INT 25
2464: PPUSH
2465: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2469: LD_EXP 24
2473: PPUSH
2474: LD_INT 122
2476: PPUSH
2477: LD_INT 48
2479: PPUSH
2480: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2484: LD_EXP 24
2488: PPUSH
2489: LD_INT 70
2491: PPUSH
2492: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 107
2503: PPUSH
2504: LD_INT 57
2506: PPUSH
2507: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2511: LD_EXP 24
2515: PPUSH
2516: LD_INT 70
2518: PPUSH
2519: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2523: LD_EXP 24
2527: PPUSH
2528: LD_INT 100
2530: PPUSH
2531: LD_INT 61
2533: PPUSH
2534: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2538: LD_EXP 24
2542: PPUSH
2543: LD_INT 105
2545: PPUSH
2546: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2550: LD_EXP 24
2554: PPUSH
2555: LD_INT 78
2557: PPUSH
2558: LD_INT 64
2560: PPUSH
2561: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2565: LD_EXP 24
2569: PPUSH
2570: LD_INT 140
2572: PPUSH
2573: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2577: LD_EXP 24
2581: PPUSH
2582: LD_INT 100
2584: PPUSH
2585: LD_INT 61
2587: PPUSH
2588: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2592: LD_EXP 24
2596: PPUSH
2597: LD_INT 105
2599: PPUSH
2600: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2604: LD_EXP 24
2608: PPUSH
2609: LD_INT 107
2611: PPUSH
2612: LD_INT 57
2614: PPUSH
2615: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2619: LD_EXP 24
2623: PPUSH
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2631: LD_EXP 24
2635: PPUSH
2636: LD_INT 122
2638: PPUSH
2639: LD_INT 48
2641: PPUSH
2642: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2646: LD_EXP 24
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2658: LD_EXP 24
2662: PPUSH
2663: LD_INT 124
2665: PPUSH
2666: LD_INT 25
2668: PPUSH
2669: CALL_OW 171
// end ; end_of_file
2673: END
// export Johnny ; export function PrepareJohnny ; begin
2674: LD_INT 0
2676: PPUSH
// uc_side := 1 ;
2677: LD_ADDR_OWVAR 20
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// uc_nation := 1 ;
2685: LD_ADDR_OWVAR 21
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2693: LD_ADDR_EXP 25
2697: PUSH
2698: LD_STRING Harris
2700: PPUSH
2701: CALL_OW 25
2705: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2706: LD_EXP 25
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2718: LD_EXP 25
2722: PPUSH
2723: LD_INT 8
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComCrawl ( Johnny ) ;
2733: LD_EXP 25
2737: PPUSH
2738: CALL_OW 137
// end ;
2742: LD_VAR 0 1
2746: RET
// export function PreparePatrolTank ; var veh , un ; begin
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
// uc_side := 1 ;
2752: LD_ADDR_OWVAR 20
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// uc_nation := 1 ;
2760: LD_ADDR_OWVAR 21
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2768: LD_INT 1
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 380
// un := CreateHuman ;
2781: LD_ADDR_VAR 0 3
2785: PUSH
2786: CALL_OW 44
2790: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2791: LD_ADDR_OWVAR 37
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_engine := engine_combustion ;
2799: LD_ADDR_OWVAR 39
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// vc_control := control_manual ;
2807: LD_ADDR_OWVAR 38
2811: PUSH
2812: LD_INT 1
2814: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2815: LD_ADDR_OWVAR 40
2819: PUSH
2820: LD_INT 2
2822: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2823: LD_ADDR_OWVAR 41
2827: PUSH
2828: LD_INT 72
2830: PUSH
2831: LD_INT 54
2833: PUSH
2834: LD_INT 36
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: ST_TO_ADDR
// veh := CreateVehicle ;
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: CALL_OW 45
2857: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2858: LD_VAR 0 2
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2870: LD_VAR 0 2
2874: PPUSH
2875: LD_INT 31
2877: PPUSH
2878: LD_INT 58
2880: PPUSH
2881: LD_INT 0
2883: PPUSH
2884: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2888: LD_VAR 0 3
2892: PPUSH
2893: LD_VAR 0 2
2897: PPUSH
2898: CALL_OW 52
// result := un ;
2902: LD_ADDR_VAR 0 1
2906: PUSH
2907: LD_VAR 0 3
2911: ST_TO_ADDR
// end ; end_of_file
2912: LD_VAR 0 1
2916: RET
// export function Action ; begin
2917: LD_INT 0
2919: PPUSH
// InGameOn ;
2920: CALL_OW 8
// wait ( 0 0$4 ) ;
2924: LD_INT 140
2926: PPUSH
2927: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2931: LD_EXP 16
2935: PPUSH
2936: LD_STRING DH-start-1
2938: PPUSH
2939: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2943: LD_EXP 16
2947: PPUSH
2948: LD_INT 71
2950: PPUSH
2951: LD_INT 29
2953: PPUSH
2954: CALL_OW 111
// wait ( 0 0$4 ) ;
2958: LD_INT 140
2960: PPUSH
2961: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2965: LD_EXP 16
2969: PPUSH
2970: LD_INT 71
2972: PPUSH
2973: LD_INT 33
2975: PPUSH
2976: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2980: LD_EXP 16
2984: PPUSH
2985: LD_INT 71
2987: PPUSH
2988: LD_INT 34
2990: PPUSH
2991: CALL_OW 178
// wait ( 0 0$4 ) ;
2995: LD_INT 140
2997: PPUSH
2998: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_STRING DH-start-2
3009: PPUSH
3010: CALL_OW 88
// wait ( 0 0$4 ) ;
3014: LD_INT 140
3016: PPUSH
3017: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 65
3028: PPUSH
3029: LD_INT 26
3031: PPUSH
3032: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3036: LD_EXP 16
3040: PPUSH
3041: LD_STRING DH-start-3
3043: PPUSH
3044: CALL_OW 88
// InGameOff ;
3048: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3052: LD_STRING O1_cont
3054: PPUSH
3055: CALL_OW 337
// SaveForQuickRestart ;
3059: CALL_OW 22
// missionStarted := true ;
3063: LD_ADDR_EXP 1
3067: PUSH
3068: LD_INT 1
3070: ST_TO_ADDR
// PrepareJohnny ;
3071: CALL 2674 0 0
// end ;
3075: LD_VAR 0 1
3079: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3080: LD_EXP 8
3084: NOT
3085: PUSH
3086: LD_EXP 7
3090: NOT
3091: AND
3092: PUSH
3093: LD_INT 2
3095: PPUSH
3096: LD_EXP 25
3100: PPUSH
3101: CALL_OW 292
3105: AND
3106: PUSH
3107: LD_INT 3
3109: PPUSH
3110: LD_EXP 16
3114: PPUSH
3115: CALL_OW 292
3119: NOT
3120: AND
3121: PUSH
3122: LD_INT 22
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: PPUSH
3137: LD_EXP 16
3141: PPUSH
3142: CALL_OW 74
3146: PUSH
3147: LD_EXP 25
3151: EQUAL
3152: AND
3153: PUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL_OW 81
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: AND
3169: IFFALSE 4100
3171: GO 3173
3173: DISABLE
// begin InGameOn ;
3174: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3178: LD_EXP 16
3182: PPUSH
3183: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3187: LD_EXP 25
3191: PPUSH
3192: LD_STRING DJ-ambush-1
3194: PPUSH
3195: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3199: LD_INT 10
3201: PPUSH
3202: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3206: LD_EXP 16
3210: PPUSH
3211: LD_EXP 25
3215: PPUSH
3216: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3220: LD_EXP 16
3224: PPUSH
3225: LD_STRING DH-ambush-1
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// ComWalk ( Johnny ) ;
3239: LD_EXP 25
3243: PPUSH
3244: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3248: LD_EXP 25
3252: PPUSH
3253: LD_EXP 16
3257: PPUSH
3258: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3262: LD_INT 35
3264: PPUSH
3265: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3269: LD_EXP 25
3273: PPUSH
3274: LD_EXP 16
3278: PPUSH
3279: CALL_OW 296
3283: PUSH
3284: LD_INT 4
3286: LESS
3287: IFFALSE 3262
// ComTurnUnit ( Johnny , Heike ) ;
3289: LD_EXP 25
3293: PPUSH
3294: LD_EXP 16
3298: PPUSH
3299: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3303: LD_EXP 25
3307: PPUSH
3308: LD_STRING DJ-ambush-2
3310: PPUSH
3311: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3315: LD_EXP 16
3319: PPUSH
3320: LD_STRING DH-ambush-2
3322: PPUSH
3323: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3327: LD_EXP 25
3331: PPUSH
3332: LD_STRING DJ-ambush-3
3334: PPUSH
3335: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3339: LD_EXP 16
3343: PPUSH
3344: LD_STRING DH-ambush-3
3346: PPUSH
3347: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3351: LD_EXP 25
3355: PPUSH
3356: LD_STRING DJ-ambush-4
3358: PPUSH
3359: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3363: LD_EXP 16
3367: PPUSH
3368: LD_INT 39
3370: PPUSH
3371: LD_INT 22
3373: PPUSH
3374: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3378: LD_EXP 16
3382: PPUSH
3383: LD_STRING DH-ambush-4
3385: PPUSH
3386: CALL_OW 88
// PrepareRussianPatrol ;
3390: CALL 1235 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3394: LD_INT 39
3396: PPUSH
3397: LD_INT 22
3399: PPUSH
3400: LD_INT 2
3402: PPUSH
3403: LD_INT 12
3405: NEG
3406: PPUSH
3407: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3411: LD_INT 39
3413: PPUSH
3414: LD_INT 22
3416: PPUSH
3417: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3421: LD_EXP 21
3425: PPUSH
3426: LD_INT 39
3428: PPUSH
3429: LD_INT 23
3431: PPUSH
3432: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3436: LD_EXP 16
3440: PUSH
3441: LD_EXP 25
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: LD_INT 39
3452: PPUSH
3453: LD_INT 7
3455: PPUSH
3456: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3460: LD_EXP 16
3464: PUSH
3465: LD_EXP 25
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: LD_EXP 21
3478: PUSH
3479: LD_INT 1
3481: ARRAY
3482: PPUSH
3483: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3487: LD_EXP 21
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: LD_STRING DR-ambush-5
3498: PPUSH
3499: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3503: LD_EXP 21
3507: PUSH
3508: LD_INT 2
3510: ARRAY
3511: PPUSH
3512: LD_STRING DR1-ambush-5
3514: PPUSH
3515: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3519: LD_INT 35
3521: PPUSH
3522: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3526: LD_EXP 16
3530: PPUSH
3531: LD_INT 39
3533: PPUSH
3534: LD_INT 7
3536: PPUSH
3537: CALL_OW 297
3541: PUSH
3542: LD_INT 6
3544: LESS
3545: IFFALSE 3519
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3547: LD_EXP 16
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3565: LD_EXP 25
3569: PPUSH
3570: LD_EXP 16
3574: PPUSH
3575: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3579: LD_EXP 25
3583: PPUSH
3584: LD_STRING DJ-ambush-6
3586: PPUSH
3587: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3591: LD_EXP 16
3595: PPUSH
3596: LD_STRING DH-ambush-6
3598: PPUSH
3599: CALL_OW 88
// InGameOff ;
3603: CALL_OW 9
// meetJohnny := true ;
3607: LD_ADDR_EXP 3
3611: PUSH
3612: LD_INT 1
3614: ST_TO_ADDR
// ComFree ( Johnny ) ;
3615: LD_EXP 25
3619: PPUSH
3620: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3624: LD_STRING O2_ambush_cont
3626: PPUSH
3627: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3631: LD_EXP 21
3635: PUSH
3636: LD_EXP 21
3640: ARRAY
3641: PPUSH
3642: LD_INT 29
3644: PPUSH
3645: LD_INT 15
3647: PPUSH
3648: CALL_OW 111
// wait ( 0 0$2 ) ;
3652: LD_INT 70
3654: PPUSH
3655: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3659: LD_INT 3
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 292
3671: NOT
3672: PUSH
3673: LD_INT 3
3675: PPUSH
3676: LD_EXP 25
3680: PPUSH
3681: CALL_OW 292
3685: NOT
3686: AND
3687: IFFALSE 3708
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3689: LD_EXP 21
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_INT 58
3700: PPUSH
3701: LD_INT 32
3703: PPUSH
3704: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3708: LD_INT 1750
3710: PUSH
3711: LD_INT 1400
3713: PUSH
3714: LD_INT 1225
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: PPUSH
3728: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 43
3739: PPUSH
3740: LD_INT 13
3742: PPUSH
3743: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3747: LD_INT 35
3749: PPUSH
3750: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3754: LD_EXP 21
3758: NOT
3759: PUSH
3760: LD_EXP 25
3764: PPUSH
3765: CALL_OW 302
3769: NOT
3770: OR
3771: IFFALSE 3747
// RemoveSeeing ( 39 , 22 , 2 ) ;
3773: LD_INT 39
3775: PPUSH
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 2
3791: PPUSH
3792: CALL_OW 81
3796: PUSH
3797: LD_INT 2
3799: EQUAL
3800: IFFALSE 3804
// exit ;
3802: GO 4100
// if not IsOk ( Johnny ) then
3804: LD_EXP 25
3808: PPUSH
3809: CALL_OW 302
3813: NOT
3814: IFFALSE 3825
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3816: LD_STRING O2_ambush_out_cont
3818: PPUSH
3819: CALL_OW 337
// exit ;
3823: GO 4100
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3825: LD_EXP 16
3829: PPUSH
3830: LD_EXP 25
3834: PPUSH
3835: CALL_OW 296
3839: PUSH
3840: LD_INT 10
3842: GREATER
3843: IFFALSE 3886
// begin ComMoveUnit ( Johnny , Heike ) ;
3845: LD_EXP 25
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3859: LD_INT 35
3861: PPUSH
3862: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3866: LD_EXP 25
3870: PPUSH
3871: LD_EXP 16
3875: PPUSH
3876: CALL_OW 296
3880: PUSH
3881: LD_INT 6
3883: LESS
3884: IFFALSE 3859
// end ; CenterNowOnUnits ( Heike ) ;
3886: LD_EXP 16
3890: PPUSH
3891: CALL_OW 87
// InGameOn ;
3895: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3899: LD_EXP 16
3903: PPUSH
3904: LD_EXP 25
3908: PPUSH
3909: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3913: LD_EXP 25
3917: PPUSH
3918: LD_EXP 16
3922: PPUSH
3923: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_STRING DJ-thanks-1
3934: PPUSH
3935: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3939: LD_EXP 16
3943: PPUSH
3944: LD_STRING DH-thanks-1
3946: PPUSH
3947: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3951: LD_EXP 25
3955: PPUSH
3956: LD_STRING DJ-thanks-2
3958: PPUSH
3959: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3963: LD_EXP 25
3967: PPUSH
3968: LD_INT 4
3970: PPUSH
3971: LD_INT 3
3973: PPUSH
3974: CALL_OW 111
// wait ( 0 0$1 ) ;
3978: LD_INT 35
3980: PPUSH
3981: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3985: LD_EXP 16
3989: PPUSH
3990: LD_STRING DH-thanks-2
3992: PPUSH
3993: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3997: LD_INT 35
3999: PPUSH
4000: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4004: LD_INT 2
4006: PPUSH
4007: LD_EXP 25
4011: PPUSH
4012: CALL_OW 292
4016: NOT
4017: IFFALSE 3997
// Say ( Heike , DH-thanks-2a ) ;
4019: LD_EXP 16
4023: PPUSH
4024: LD_STRING DH-thanks-2a
4026: PPUSH
4027: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4031: LD_EXP 25
4035: PPUSH
4036: CALL_OW 64
// InGameOff ;
4040: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4044: LD_STRING O2_ambush_out_cont
4046: PPUSH
4047: CALL_OW 337
// johnnySaved := true ;
4051: LD_ADDR_EXP 4
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4059: LD_EXP 16
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 600
4069: PPUSH
4070: CALL_OW 492
// if IsOk ( Olaf ) then
4074: LD_EXP 17
4078: PPUSH
4079: CALL_OW 302
4083: IFFALSE 4100
// ComMoveXY ( Olaf , 44 , 25 ) ;
4085: LD_EXP 17
4089: PPUSH
4090: LD_INT 44
4092: PPUSH
4093: LD_INT 25
4095: PPUSH
4096: CALL_OW 111
// end ;
4100: END
// every 0 0$1 trigger russianPatrol do var i ;
4101: LD_EXP 21
4105: IFFALSE 4173
4107: GO 4109
4109: DISABLE
4110: LD_INT 0
4112: PPUSH
// begin enable ;
4113: ENABLE
// for i in russianPatrol do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_EXP 21
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4171
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL_OW 256
4136: PUSH
4137: LD_INT 1000
4139: LESS
4140: PUSH
4141: LD_VAR 0 1
4145: PPUSH
4146: CALL_OW 314
4150: NOT
4151: AND
4152: IFFALSE 4169
// ComAgressiveMove ( i , 42 , 12 ) ;
4154: LD_VAR 0 1
4158: PPUSH
4159: LD_INT 42
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: CALL_OW 114
4169: GO 4124
4171: POP
4172: POP
// end ;
4173: PPOPN 1
4175: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 2
4181: PPUSH
4182: CALL_OW 81
4186: PUSH
4187: LD_INT 2
4189: EQUAL
4190: PUSH
4191: LD_EXP 25
4195: PPUSH
4196: CALL_OW 302
4200: AND
4201: IFFALSE 4218
4203: GO 4205
4205: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4206: LD_EXP 25
4210: PPUSH
4211: LD_STRING DJ-fire-1
4213: PPUSH
4214: CALL_OW 88
4218: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4219: LD_EXP 7
4223: NOT
4224: PUSH
4225: LD_EXP 23
4229: PPUSH
4230: LD_INT 101
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 72
4244: AND
4245: IFFALSE 4365
4247: GO 4249
4249: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4250: LD_EXP 16
4254: PPUSH
4255: CALL_OW 87
// DialogueOn ;
4259: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4263: LD_EXP 16
4267: PPUSH
4268: LD_STRING DH-see-enemy-patrol-1
4270: PPUSH
4271: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4275: LD_EXP 23
4279: PPUSH
4280: LD_INT 26
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PPUSH
4290: CALL_OW 72
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_STRING DR-see-enemy-patrol-1
4301: PPUSH
4302: CALL_OW 88
// DialogueOff ;
4306: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4310: LD_EXP 23
4314: PPUSH
4315: LD_INT 66
4317: PPUSH
4318: LD_INT 22
4320: PPUSH
4321: CALL_OW 114
// wait ( 0 0$10 ) ;
4325: LD_INT 350
4327: PPUSH
4328: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4332: LD_EXP 23
4336: PPUSH
4337: LD_INT 175
4339: PPUSH
4340: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4344: LD_EXP 23
4348: PPUSH
4349: LD_INT 9
4351: PPUSH
4352: CALL_OW 173
// AddComFree ( russianForces ) ;
4356: LD_EXP 23
4360: PPUSH
4361: CALL_OW 199
// end ;
4365: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4366: LD_EXP 23
4370: PPUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 24
4376: PUSH
4377: LD_INT 960
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PPUSH
4388: CALL_OW 72
4392: IFFALSE 4636
4394: GO 4396
4396: DISABLE
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
4402: PPUSH
// begin enable ;
4403: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 2
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_EXP 23
4433: PPUSH
4434: LD_INT 1
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: LD_INT 24
4442: PUSH
4443: LD_INT 960
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 24
4452: PUSH
4453: LD_INT 500
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PPUSH
4469: CALL_OW 72
4473: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4474: LD_ADDR_VAR 0 4
4478: PUSH
4479: LD_EXP 23
4483: PPUSH
4484: LD_INT 3
4486: PUSH
4487: LD_INT 24
4489: PUSH
4490: LD_INT 500
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 72
4505: ST_TO_ADDR
// if not tmp then
4506: LD_VAR 0 2
4510: NOT
4511: IFFALSE 4515
// exit ;
4513: GO 4636
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_VAR 0 3
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 74
4538: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4539: LD_VAR 0 2
4543: PPUSH
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 296
4557: PUSH
4558: LD_INT 10
4560: LESS
4561: IFFALSE 4577
// ComAttackUnit ( tmp2 , tmp ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_VAR 0 2
4572: PPUSH
4573: CALL_OW 115
// if tmp3 then
4577: LD_VAR 0 4
4581: IFFALSE 4636
// for i in tmp do
4583: LD_ADDR_VAR 0 1
4587: PUSH
4588: LD_VAR 0 2
4592: PUSH
4593: FOR_IN
4594: IFFALSE 4634
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_INT 119
4603: PPUSH
4604: LD_INT 21
4606: PPUSH
4607: CALL_OW 297
4611: PUSH
4612: LD_INT 10
4614: GREATER
4615: IFFALSE 4632
// ComMoveXY ( i , 119 , 21 ) ;
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 119
4624: PPUSH
4625: LD_INT 21
4627: PPUSH
4628: CALL_OW 111
4632: GO 4593
4634: POP
4635: POP
// end ;
4636: PPOPN 4
4638: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4639: LD_EXP 1
4643: PUSH
4644: LD_EXP 8
4648: NOT
4649: AND
4650: PUSH
4651: LD_EXP 7
4655: NOT
4656: AND
4657: PUSH
4658: LD_EXP 16
4662: PPUSH
4663: LD_INT 25
4665: PUSH
4666: LD_INT 14
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 69
4677: PPUSH
4678: LD_EXP 16
4682: PPUSH
4683: CALL_OW 74
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 6
4695: LESS
4696: AND
4697: IFFALSE 4728
4699: GO 4701
4701: DISABLE
// begin animalCounter := animalCounter + 1 ;
4702: LD_ADDR_EXP 15
4706: PUSH
4707: LD_EXP 15
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4716: LD_EXP 16
4720: PPUSH
4721: LD_STRING DH-tiger-1
4723: PPUSH
4724: CALL_OW 88
// end ;
4728: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4729: LD_EXP 1
4733: PUSH
4734: LD_EXP 8
4738: NOT
4739: AND
4740: PUSH
4741: LD_EXP 7
4745: NOT
4746: AND
4747: PUSH
4748: LD_EXP 16
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 12
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PPUSH
4768: LD_EXP 16
4772: PPUSH
4773: CALL_OW 74
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 6
4785: LESS
4786: AND
4787: IFFALSE 4818
4789: GO 4791
4791: DISABLE
// begin animalCounter := animalCounter + 1 ;
4792: LD_ADDR_EXP 15
4796: PUSH
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 1
4804: PLUS
4805: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4806: LD_EXP 16
4810: PPUSH
4811: LD_STRING DH-ape-1
4813: PPUSH
4814: CALL_OW 88
// end ;
4818: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4819: LD_EXP 1
4823: PUSH
4824: LD_EXP 8
4828: NOT
4829: AND
4830: PUSH
4831: LD_EXP 7
4835: NOT
4836: AND
4837: PUSH
4838: LD_EXP 16
4842: PPUSH
4843: LD_INT 25
4845: PUSH
4846: LD_INT 18
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PPUSH
4858: LD_EXP 16
4862: PPUSH
4863: CALL_OW 74
4867: PPUSH
4868: CALL_OW 296
4872: PUSH
4873: LD_INT 6
4875: LESS
4876: AND
4877: IFFALSE 4908
4879: GO 4881
4881: DISABLE
// begin animalCounter := animalCounter + 1 ;
4882: LD_ADDR_EXP 15
4886: PUSH
4887: LD_EXP 15
4891: PUSH
4892: LD_INT 1
4894: PLUS
4895: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4896: LD_EXP 16
4900: PPUSH
4901: LD_STRING DH-bird-1
4903: PPUSH
4904: CALL_OW 88
// end ;
4908: END
// every 0 0$2 trigger animalCounter = 3 do
4909: LD_EXP 15
4913: PUSH
4914: LD_INT 3
4916: EQUAL
4917: IFFALSE 4929
4919: GO 4921
4921: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4922: LD_STRING ACH_ZOOLIGST
4924: PPUSH
4925: CALL_OW 543
4929: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4930: LD_INT 22
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 101
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: IFFALSE 4971
4960: GO 4962
4962: DISABLE
// russianSpotted := true ;
4963: LD_ADDR_EXP 9
4967: PUSH
4968: LD_INT 1
4970: ST_TO_ADDR
4971: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4972: LD_EXP 16
4976: PPUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 3
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 21
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 74
5015: PPUSH
5016: CALL_OW 296
5020: PUSH
5021: LD_INT 8
5023: LESS
5024: IFFALSE 5041
5026: GO 5028
5028: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5029: LD_EXP 16
5033: PPUSH
5034: LD_STRING DH-enemy-base
5036: PPUSH
5037: CALL_OW 88
5041: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5042: LD_EXP 25
5046: PPUSH
5047: CALL_OW 305
5051: NOT
5052: PUSH
5053: LD_EXP 6
5057: NOT
5058: AND
5059: PUSH
5060: LD_EXP 5
5064: AND
5065: PUSH
5066: LD_EXP 12
5070: NOT
5071: AND
5072: PUSH
5073: LD_EXP 11
5077: NOT
5078: AND
5079: IFFALSE 5237
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5087: LD_INT 35
5089: PPUSH
5090: CALL_OW 67
// for i in dogTag do
5094: LD_ADDR_VAR 0 1
5098: PUSH
5099: LD_EXP 5
5103: PUSH
5104: FOR_IN
5105: IFFALSE 5154
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5107: LD_EXP 16
5111: PPUSH
5112: LD_VAR 0 1
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PPUSH
5121: LD_VAR 0 1
5125: PUSH
5126: LD_INT 2
5128: ARRAY
5129: PPUSH
5130: CALL_OW 297
5134: PUSH
5135: LD_INT 3
5137: LESS
5138: IFFALSE 5152
// begin dogTagFound := i ;
5140: LD_ADDR_EXP 6
5144: PUSH
5145: LD_VAR 0 1
5149: ST_TO_ADDR
// break ;
5150: GO 5154
// end ;
5152: GO 5104
5154: POP
5155: POP
// until dogTagFound ;
5156: LD_EXP 6
5160: IFFALSE 5087
// CenterNowOnUnits ( Heike ) ;
5162: LD_EXP 16
5166: PPUSH
5167: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5171: LD_EXP 16
5175: PPUSH
5176: LD_EXP 6
5180: PUSH
5181: LD_INT 1
5183: ARRAY
5184: PPUSH
5185: LD_EXP 6
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: PPUSH
5194: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5198: LD_STRING ACH_DOGTAG
5200: PPUSH
5201: CALL_OW 543
// if mercenariesQuestReady then
5205: LD_EXP 10
5209: IFFALSE 5225
// Say ( Heike , DH-dogtag-found-quest ) else
5211: LD_EXP 16
5215: PPUSH
5216: LD_STRING DH-dogtag-found-quest
5218: PPUSH
5219: CALL_OW 88
5223: GO 5237
// Say ( Heike , DH-dogtag-found ) ;
5225: LD_EXP 16
5229: PPUSH
5230: LD_STRING DH-dogtag-found
5232: PPUSH
5233: CALL_OW 88
// end ;
5237: PPOPN 1
5239: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5240: LD_EXP 8
5244: NOT
5245: PUSH
5246: LD_EXP 7
5250: NOT
5251: AND
5252: PUSH
5253: LD_INT 5
5255: PPUSH
5256: LD_EXP 16
5260: PPUSH
5261: CALL_OW 292
5265: AND
5266: PUSH
5267: LD_EXP 16
5271: PPUSH
5272: LD_EXP 17
5276: PPUSH
5277: CALL_OW 296
5281: PUSH
5282: LD_INT 8
5284: LESS
5285: AND
5286: IFFALSE 5647
5288: GO 5290
5290: DISABLE
// begin olafSpotted := true ;
5291: LD_ADDR_EXP 8
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if HasTask ( Olaf ) then
5299: LD_EXP 17
5303: PPUSH
5304: CALL_OW 314
5308: IFFALSE 5319
// ComStop ( Olaf ) ;
5310: LD_EXP 17
5314: PPUSH
5315: CALL_OW 141
// InGameOn ;
5319: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5323: LD_EXP 17
5327: PPUSH
5328: LD_EXP 16
5332: PPUSH
5333: CALL_OW 296
5337: PUSH
5338: LD_INT 8
5340: GREATER
5341: IFFALSE 5357
// ComMoveUnit ( Olaf , Heike ) ;
5343: LD_EXP 17
5347: PPUSH
5348: LD_EXP 16
5352: PPUSH
5353: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5357: LD_INT 35
5359: PPUSH
5360: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5364: LD_EXP 17
5368: PPUSH
5369: LD_EXP 16
5373: PPUSH
5374: CALL_OW 296
5378: PUSH
5379: LD_INT 8
5381: LESSEQUAL
5382: IFFALSE 5357
// ComTurnUnit ( Heike , Olaf ) ;
5384: LD_EXP 16
5388: PPUSH
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5412: LD_EXP 17
5416: PPUSH
5417: LD_STRING DO-olaf-1
5419: PPUSH
5420: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5424: LD_EXP 16
5428: PPUSH
5429: LD_STRING DH-olaf-1
5431: PPUSH
5432: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5436: LD_EXP 17
5440: PPUSH
5441: LD_STRING DO-olaf-2
5443: PPUSH
5444: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5448: LD_EXP 16
5452: PPUSH
5453: LD_STRING DH-olaf-2
5455: PPUSH
5456: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5460: LD_EXP 17
5464: PPUSH
5465: LD_STRING DO-olaf-3
5467: PPUSH
5468: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5472: LD_EXP 17
5476: PPUSH
5477: LD_STRING DO-olaf-4
5479: PPUSH
5480: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5484: LD_EXP 16
5488: PPUSH
5489: LD_STRING DH-olaf-4
5491: PPUSH
5492: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5496: LD_EXP 17
5500: PPUSH
5501: LD_STRING DO-olaf-5
5503: PPUSH
5504: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5508: LD_EXP 16
5512: PPUSH
5513: LD_STRING DH-olaf-5
5515: PPUSH
5516: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5520: LD_EXP 17
5524: PPUSH
5525: LD_STRING DO-olaf-6
5527: PPUSH
5528: CALL_OW 88
// if russianSpotted or johnnySaved then
5532: LD_EXP 9
5536: PUSH
5537: LD_EXP 4
5541: OR
5542: IFFALSE 5570
// begin Say ( Heike , DH-olaf-6a ) ;
5544: LD_EXP 16
5548: PPUSH
5549: LD_STRING DH-olaf-6a
5551: PPUSH
5552: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5556: LD_EXP 17
5560: PPUSH
5561: LD_STRING DO-olaf-7a
5563: PPUSH
5564: CALL_OW 88
// end else
5568: GO 5594
// begin Say ( Heike , DH-olaf-6b ) ;
5570: LD_EXP 16
5574: PPUSH
5575: LD_STRING DH-olaf-6b
5577: PPUSH
5578: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5582: LD_EXP 17
5586: PPUSH
5587: LD_STRING DO-olaf-7b
5589: PPUSH
5590: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-8
5601: PPUSH
5602: CALL_OW 88
// InGameOff ;
5606: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5610: LD_STRING O3_camp_cont
5612: PPUSH
5613: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5617: LD_EXP 17
5621: PPUSH
5622: LD_INT 52
5624: PPUSH
5625: LD_INT 90
5627: PPUSH
5628: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_INT 53
5639: PPUSH
5640: LD_INT 89
5642: PPUSH
5643: CALL_OW 178
// end ;
5647: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5648: LD_EXP 8
5652: NOT
5653: PUSH
5654: LD_EXP 16
5658: PPUSH
5659: LD_EXP 18
5663: PPUSH
5664: CALL_OW 296
5668: PUSH
5669: LD_INT 36
5671: LESS
5672: AND
5673: IFFALSE 5693
5675: GO 5677
5677: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5678: LD_EXP 17
5682: PPUSH
5683: LD_INT 39
5685: PPUSH
5686: LD_INT 71
5688: PPUSH
5689: CALL_OW 111
5693: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5694: LD_EXP 7
5698: NOT
5699: PUSH
5700: LD_INT 2
5702: PPUSH
5703: LD_EXP 19
5707: PPUSH
5708: CALL_OW 292
5712: PUSH
5713: LD_INT 2
5715: PPUSH
5716: LD_EXP 18
5720: PPUSH
5721: CALL_OW 292
5725: OR
5726: AND
5727: IFFALSE 7048
5729: GO 5731
5731: DISABLE
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
// begin if not johnnySaved then
5737: LD_EXP 4
5741: NOT
5742: IFFALSE 5753
// KillUnit ( Johnny ) ;
5744: LD_EXP 25
5748: PPUSH
5749: CALL_OW 66
// mercenariesSpotted := true ;
5753: LD_ADDR_EXP 7
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5761: LD_STRING O4_camp_cont
5763: PPUSH
5764: CALL_OW 337
// InGameOn ;
5768: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5772: LD_INT 53
5774: PPUSH
5775: LD_INT 89
5777: PPUSH
5778: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5782: LD_INT 53
5784: PPUSH
5785: LD_INT 89
5787: PPUSH
5788: LD_INT 2
5790: PPUSH
5791: LD_INT 8
5793: NEG
5794: PPUSH
5795: CALL_OW 330
// if olafSpotted then
5799: LD_EXP 8
5803: IFFALSE 5921
// begin AddComTurnUnit ( Olaf , Heike ) ;
5805: LD_EXP 17
5809: PPUSH
5810: LD_EXP 16
5814: PPUSH
5815: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5819: LD_EXP 16
5823: PPUSH
5824: LD_INT 51
5826: PPUSH
5827: LD_INT 86
5829: PPUSH
5830: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5834: LD_EXP 16
5838: PPUSH
5839: LD_EXP 17
5843: PPUSH
5844: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5848: LD_EXP 17
5852: PPUSH
5853: LD_STRING DO-camp-1
5855: PPUSH
5856: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5860: LD_EXP 18
5864: PUSH
5865: LD_EXP 19
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: LD_EXP 16
5878: PPUSH
5879: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5883: LD_EXP 18
5887: PPUSH
5888: LD_STRING DG-camp-1
5890: PPUSH
5891: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5895: LD_EXP 16
5899: PPUSH
5900: LD_STRING DH-camp-1
5902: PPUSH
5903: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5907: LD_EXP 17
5911: PPUSH
5912: LD_STRING DO-camp-2
5914: PPUSH
5915: CALL_OW 88
// end else
5919: GO 6316
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_INT 51
5928: PPUSH
5929: LD_INT 86
5931: PPUSH
5932: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5936: LD_EXP 16
5940: PPUSH
5941: LD_EXP 18
5945: PPUSH
5946: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5950: LD_EXP 18
5954: PUSH
5955: LD_EXP 19
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PPUSH
5964: LD_EXP 16
5968: PPUSH
5969: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5973: LD_EXP 18
5977: PPUSH
5978: LD_STRING DG-camp-1a
5980: PPUSH
5981: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5985: LD_EXP 16
5989: PPUSH
5990: LD_STRING DH-camp-1a
5992: PPUSH
5993: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5997: LD_INT 1
5999: PPUSH
6000: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6004: LD_EXP 19
6008: PPUSH
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6018: LD_EXP 19
6022: PPUSH
6023: LD_STRING DM-camp-1a
6025: PPUSH
6026: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6030: LD_EXP 17
6034: PPUSH
6035: LD_INT 52
6037: PPUSH
6038: LD_INT 90
6040: PPUSH
6041: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6045: LD_EXP 19
6049: PPUSH
6050: LD_EXP 16
6054: PPUSH
6055: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6059: LD_EXP 18
6063: PPUSH
6064: LD_STRING DG-camp-2a
6066: PPUSH
6067: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6071: LD_EXP 16
6075: PPUSH
6076: LD_STRING DH-camp-2a
6078: PPUSH
6079: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6083: LD_EXP 19
6087: PPUSH
6088: LD_STRING DM-camp-2a
6090: PPUSH
6091: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6095: LD_INT 35
6097: PPUSH
6098: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6102: LD_EXP 17
6106: PPUSH
6107: LD_EXP 16
6111: PPUSH
6112: CALL_OW 296
6116: PUSH
6117: LD_INT 10
6119: LESS
6120: IFFALSE 6095
// AddComTurnUnit ( Olaf , Heike ) ;
6122: LD_EXP 17
6126: PPUSH
6127: LD_EXP 16
6131: PPUSH
6132: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_EXP 16
6145: PPUSH
6146: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6150: LD_EXP 17
6154: PPUSH
6155: LD_STRING DO-camp-2a
6157: PPUSH
6158: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6162: LD_EXP 16
6166: PPUSH
6167: LD_EXP 17
6171: PPUSH
6172: CALL_OW 119
// if russianSpotted then
6176: LD_EXP 9
6180: IFFALSE 6220
// begin Say ( Heike , DH-camp-2aa ) ;
6182: LD_EXP 16
6186: PPUSH
6187: LD_STRING DH-camp-2aa
6189: PPUSH
6190: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6194: LD_EXP 18
6198: PPUSH
6199: LD_STRING DG-camp-2aa
6201: PPUSH
6202: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6206: LD_EXP 19
6210: PPUSH
6211: LD_STRING DM-camp-2aa
6213: PPUSH
6214: CALL_OW 88
// end else
6218: GO 6244
// begin Say ( Heike , DH-camp-2ab ) ;
6220: LD_EXP 16
6224: PPUSH
6225: LD_STRING DH-camp-2ab
6227: PPUSH
6228: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6232: LD_EXP 19
6236: PPUSH
6237: LD_STRING DM-camp-2ab
6239: PPUSH
6240: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6244: LD_EXP 16
6248: PPUSH
6249: LD_STRING DH-camp-3a
6251: PPUSH
6252: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6256: LD_EXP 17
6260: PPUSH
6261: LD_STRING DO-camp-3a
6263: PPUSH
6264: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6268: LD_EXP 18
6272: PPUSH
6273: LD_STRING DG-camp-3a
6275: PPUSH
6276: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6280: LD_EXP 16
6284: PPUSH
6285: LD_STRING DH-camp-4aa
6287: PPUSH
6288: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6292: LD_EXP 19
6296: PPUSH
6297: LD_STRING DM-camp-4aa
6299: PPUSH
6300: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6304: LD_EXP 17
6308: PPUSH
6309: LD_STRING DO-camp-4a
6311: PPUSH
6312: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6316: LD_EXP 17
6320: PPUSH
6321: LD_STRING DO-camp-3
6323: PPUSH
6324: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6328: LD_EXP 17
6332: PPUSH
6333: LD_STRING DO-camp-4
6335: PPUSH
6336: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6340: LD_EXP 18
6344: PPUSH
6345: LD_EXP 17
6349: PPUSH
6350: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6354: LD_EXP 18
6358: PPUSH
6359: LD_STRING DG-camp-4
6361: PPUSH
6362: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6366: LD_EXP 16
6370: PPUSH
6371: LD_EXP 18
6375: PPUSH
6376: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6380: LD_EXP 16
6384: PPUSH
6385: LD_STRING DH-camp-4
6387: PPUSH
6388: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6392: LD_EXP 19
6396: PUSH
6397: LD_EXP 17
6401: PUSH
6402: LD_EXP 18
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PPUSH
6412: LD_EXP 16
6416: PPUSH
6417: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6421: LD_EXP 18
6425: PPUSH
6426: LD_STRING DG-camp-5
6428: PPUSH
6429: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6433: LD_EXP 18
6437: PPUSH
6438: LD_STRING DG-camp-6
6440: PPUSH
6441: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6445: LD_EXP 16
6449: PPUSH
6450: LD_STRING DH-camp-6
6452: PPUSH
6453: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6457: LD_EXP 18
6461: PPUSH
6462: LD_STRING DG-camp-7
6464: PPUSH
6465: CALL_OW 88
// if DogTagFound then
6469: LD_EXP 6
6473: IFFALSE 6513
// begin Say ( Heike , DH-quest-1a ) ;
6475: LD_EXP 16
6479: PPUSH
6480: LD_STRING DH-quest-1a
6482: PPUSH
6483: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DG-quest-1a
6494: PPUSH
6495: CALL_OW 88
// mercenariesQuestDone := true ;
6499: LD_ADDR_EXP 11
6503: PUSH
6504: LD_INT 1
6506: ST_TO_ADDR
// InGameOff ;
6507: CALL_OW 9
// end else
6511: GO 6679
// begin Say ( Heike , DH-camp-7 ) ;
6513: LD_EXP 16
6517: PPUSH
6518: LD_STRING DH-camp-7
6520: PPUSH
6521: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6525: LD_EXP 16
6529: PPUSH
6530: CALL_OW 256
6534: PUSH
6535: LD_INT 1000
6537: LESS
6538: IFFALSE 6630
// begin Say ( Olaf , DO-heal-1 ) ;
6540: LD_EXP 17
6544: PPUSH
6545: LD_STRING DO-heal-1
6547: PPUSH
6548: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6552: LD_EXP 16
6556: PPUSH
6557: LD_INT 51
6559: PPUSH
6560: LD_INT 88
6562: PPUSH
6563: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6567: LD_INT 35
6569: PPUSH
6570: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6574: LD_EXP 16
6578: PPUSH
6579: LD_EXP 17
6583: PPUSH
6584: CALL_OW 296
6588: PUSH
6589: LD_INT 4
6591: LESS
6592: PUSH
6593: LD_EXP 16
6597: PPUSH
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 88
6603: PPUSH
6604: CALL_OW 307
6608: OR
6609: IFFALSE 6567
// SetLives ( Heike , 1000 ) ;
6611: LD_EXP 16
6615: PPUSH
6616: LD_INT 1000
6618: PPUSH
6619: CALL_OW 234
// wait ( 0 0$2 ) ;
6623: LD_INT 70
6625: PPUSH
6626: CALL_OW 67
// end ; InGameOff ;
6630: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6634: LD_EXP 17
6638: PUSH
6639: LD_EXP 18
6643: PUSH
6644: LD_EXP 19
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_INT 53
6656: PPUSH
6657: LD_INT 89
6659: PPUSH
6660: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6664: LD_STRING O5_proof_cont
6666: PPUSH
6667: CALL_OW 337
// mercenariesQuestReady := true ;
6671: LD_ADDR_EXP 10
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6679: LD_EXP 10
6683: NOT
6684: IFFALSE 6688
// exit ;
6686: GO 7048
// wait ( 0 0$35 ) ;
6688: LD_INT 1225
6690: PPUSH
6691: CALL_OW 67
// driver := PreparePatrolTank ;
6695: LD_ADDR_VAR 0 2
6699: PUSH
6700: CALL 2747 0 0
6704: ST_TO_ADDR
// if not driver then
6705: LD_VAR 0 2
6709: NOT
6710: IFFALSE 6714
// exit ;
6712: GO 7048
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6714: LD_INT 2
6716: PPUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 2
6722: PPUSH
6723: LD_INT 1
6725: PPUSH
6726: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6730: LD_ADDR_VAR 0 3
6734: PUSH
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 310
6744: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_INT 500
6752: PPUSH
6753: CALL_OW 234
// SetLives ( driver , 450 ) ;
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_INT 450
6764: PPUSH
6765: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_INT 59
6776: PPUSH
6777: LD_INT 60
6779: PPUSH
6780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6784: LD_INT 35
6786: PPUSH
6787: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 59
6798: PPUSH
6799: LD_INT 60
6801: PPUSH
6802: CALL_OW 307
6806: IFFALSE 6784
// if not See ( 1 , Heike ) then
6808: LD_INT 1
6810: PPUSH
6811: LD_EXP 16
6815: PPUSH
6816: CALL_OW 292
6820: NOT
6821: IFFALSE 6945
// begin if Difficulty < 3 then
6823: LD_OWVAR 67
6827: PUSH
6828: LD_INT 3
6830: LESS
6831: IFFALSE 6849
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6833: LD_INT 59
6835: PPUSH
6836: LD_INT 60
6838: PPUSH
6839: LD_INT 2
6841: PPUSH
6842: LD_INT 6
6844: PPUSH
6845: CALL_OW 330
// ComExitVehicle ( driver ) ;
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 121
// wait ( 0 0$1 ) ;
6858: LD_INT 35
6860: PPUSH
6861: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6865: LD_VAR 0 2
6869: PPUSH
6870: LD_INT 58
6872: PPUSH
6873: LD_INT 54
6875: PPUSH
6876: CALL_OW 171
// wait ( 0 0$1 ) ;
6880: LD_INT 35
6882: PPUSH
6883: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_INT 57
6894: PPUSH
6895: LD_INT 53
6897: PPUSH
6898: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6902: LD_VAR 0 2
6906: PPUSH
6907: LD_INT 350
6909: PPUSH
6910: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6914: LD_VAR 0 2
6918: PPUSH
6919: LD_VAR 0 3
6923: PPUSH
6924: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_INT 107
6935: PPUSH
6936: LD_INT 118
6938: PPUSH
6939: CALL_OW 171
// end else
6943: GO 6960
// begin ComMoveXY ( driver , 107 , 118 ) ;
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_INT 107
6952: PPUSH
6953: LD_INT 118
6955: PPUSH
6956: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6960: LD_INT 35
6962: PPUSH
6963: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6967: LD_VAR 0 3
6971: PPUSH
6972: LD_INT 107
6974: PPUSH
6975: LD_INT 118
6977: PPUSH
6978: CALL_OW 307
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 301
6992: OR
6993: IFFALSE 6960
// if IsDead ( driver [ 1 ] ) then
6995: LD_VAR 0 2
6999: PUSH
7000: LD_INT 1
7002: ARRAY
7003: PPUSH
7004: CALL_OW 301
7008: IFFALSE 7012
// exit ;
7010: GO 7048
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7012: LD_ADDR_VAR 0 1
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7046
// RemoveUnit ( i ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: CALL_OW 64
7044: GO 7032
7046: POP
7047: POP
// end ;
7048: PPOPN 3
7050: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7051: LD_INT 10
7053: PPUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 70
7082: IFFALSE 7156
7084: GO 7086
7086: DISABLE
// begin InGameOn ;
7087: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7091: LD_EXP 17
7095: PUSH
7096: LD_EXP 19
7100: PUSH
7101: LD_EXP 18
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: LIST
7110: PPUSH
7111: LD_EXP 16
7115: PPUSH
7116: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7120: LD_EXP 19
7124: PPUSH
7125: LD_STRING DM-quest-1
7127: PPUSH
7128: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7132: LD_EXP 18
7136: PPUSH
7137: LD_STRING DG-quest-1
7139: PPUSH
7140: CALL_OW 88
// InGameOff ;
7144: CALL_OW 9
// mercenariesQuestDone := true ;
7148: LD_ADDR_EXP 11
7152: PUSH
7153: LD_INT 1
7155: ST_TO_ADDR
// end ;
7156: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7157: LD_EXP 16
7161: PPUSH
7162: LD_INT 10
7164: PPUSH
7165: CALL_OW 308
7169: PUSH
7170: LD_EXP 6
7174: AND
7175: PUSH
7176: LD_EXP 10
7180: AND
7181: PUSH
7182: LD_INT 10
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 2
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 70
7213: NOT
7214: AND
7215: IFFALSE 7387
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7227: LD_EXP 17
7231: PUSH
7232: LD_EXP 19
7236: PUSH
7237: LD_EXP 18
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: LD_EXP 16
7251: PPUSH
7252: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7256: LD_EXP 16
7260: PPUSH
7261: LD_INT 54
7263: PPUSH
7264: LD_INT 86
7266: PPUSH
7267: CALL_OW 111
// p := p + 1 ;
7271: LD_ADDR_VAR 0 1
7275: PUSH
7276: LD_VAR 0 1
7280: PUSH
7281: LD_INT 1
7283: PLUS
7284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7285: LD_INT 35
7287: PPUSH
7288: CALL_OW 67
// p := p + 1 ;
7292: LD_ADDR_VAR 0 1
7296: PUSH
7297: LD_VAR 0 1
7301: PUSH
7302: LD_INT 1
7304: PLUS
7305: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7306: LD_EXP 16
7310: PPUSH
7311: LD_EXP 18
7315: PPUSH
7316: CALL_OW 296
7320: PUSH
7321: LD_INT 4
7323: LESS
7324: PUSH
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 5
7332: GREATER
7333: OR
7334: IFFALSE 7285
// Say ( Mike , DM-quest-1 ) ;
7336: LD_EXP 19
7340: PPUSH
7341: LD_STRING DM-quest-1
7343: PPUSH
7344: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7348: LD_EXP 18
7352: PPUSH
7353: LD_STRING DG-quest-1
7355: PPUSH
7356: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7360: LD_EXP 16
7364: PPUSH
7365: LD_INT 55
7367: PPUSH
7368: LD_INT 87
7370: PPUSH
7371: CALL_OW 111
// InGameOff ;
7375: CALL_OW 9
// mercenariesQuestDone := true ;
7379: LD_ADDR_EXP 11
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// end ;
7387: PPOPN 1
7389: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7390: LD_EXP 16
7394: PUSH
7395: LD_INT 55
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 69
7405: IN
7406: IFFALSE 7446
7408: GO 7410
7410: DISABLE
// begin if Difficulty < 3 then
7411: LD_OWVAR 67
7415: PUSH
7416: LD_INT 3
7418: LESS
7419: IFFALSE 7434
// RemoveSeeing ( 59 , 60 , 2 ) ;
7421: LD_INT 59
7423: PPUSH
7424: LD_INT 60
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7434: LD_EXP 16
7438: PPUSH
7439: LD_STRING DH-driver
7441: PPUSH
7442: CALL_OW 88
// end ;
7446: END
// every 0 0$1 trigger mercenariesQuestDone do
7447: LD_EXP 11
7451: IFFALSE 7939
7453: GO 7455
7455: DISABLE
// begin if mercenariesQuestReady then
7456: LD_EXP 10
7460: IFFALSE 7469
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7462: LD_STRING O5_proof_cont_out
7464: PPUSH
7465: CALL_OW 337
// InGameOn ;
7469: CALL_OW 8
// if IsInUnit ( Heike ) then
7473: LD_EXP 16
7477: PPUSH
7478: CALL_OW 310
7482: IFFALSE 7493
// ComExitVehicle ( Heike ) ;
7484: LD_EXP 16
7488: PPUSH
7489: CALL_OW 121
// wait ( 3 ) ;
7493: LD_INT 3
7495: PPUSH
7496: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7500: LD_EXP 16
7504: PPUSH
7505: LD_EXP 18
7509: PPUSH
7510: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7514: LD_EXP 17
7518: PUSH
7519: LD_EXP 19
7523: PUSH
7524: LD_EXP 18
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PPUSH
7534: LD_EXP 16
7538: PPUSH
7539: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7543: LD_EXP 16
7547: PPUSH
7548: LD_STRING DH-quest-done-1
7550: PPUSH
7551: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7555: LD_EXP 19
7559: PPUSH
7560: LD_STRING DM-quest-done-1
7562: PPUSH
7563: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7567: LD_EXP 18
7571: PPUSH
7572: LD_STRING DG-quest-done-1
7574: PPUSH
7575: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7579: LD_EXP 16
7583: PPUSH
7584: LD_EXP 17
7588: PPUSH
7589: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7593: LD_EXP 16
7597: PPUSH
7598: LD_STRING DH-quest-done-2
7600: PPUSH
7601: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7605: LD_EXP 17
7609: PPUSH
7610: LD_STRING DO-quest-done-2
7612: PPUSH
7613: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7617: LD_EXP 17
7621: PPUSH
7622: LD_STRING DO-quest-done-3
7624: PPUSH
7625: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7629: LD_EXP 18
7633: PPUSH
7634: LD_INT 51
7636: PPUSH
7637: LD_INT 90
7639: PPUSH
7640: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7644: LD_EXP 18
7648: PPUSH
7649: LD_INT 50
7651: PPUSH
7652: LD_INT 89
7654: PPUSH
7655: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7659: LD_EXP 16
7663: PPUSH
7664: LD_EXP 18
7668: PPUSH
7669: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7673: LD_EXP 18
7677: PPUSH
7678: LD_STRING DG-quest-done-4
7680: PPUSH
7681: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7685: LD_EXP 18
7689: PPUSH
7690: LD_EXP 16
7694: PPUSH
7695: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7699: LD_EXP 16
7703: PPUSH
7704: CALL_OW 256
7708: PUSH
7709: LD_INT 1000
7711: LESS
7712: IFFALSE 7804
// begin Say ( Olaf , DO-heal-1 ) ;
7714: LD_EXP 17
7718: PPUSH
7719: LD_STRING DO-heal-1
7721: PPUSH
7722: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7726: LD_EXP 16
7730: PPUSH
7731: LD_INT 51
7733: PPUSH
7734: LD_INT 88
7736: PPUSH
7737: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7741: LD_INT 35
7743: PPUSH
7744: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7748: LD_EXP 16
7752: PPUSH
7753: LD_EXP 17
7757: PPUSH
7758: CALL_OW 296
7762: PUSH
7763: LD_INT 4
7765: LESS
7766: PUSH
7767: LD_EXP 16
7771: PPUSH
7772: LD_INT 51
7774: PPUSH
7775: LD_INT 88
7777: PPUSH
7778: CALL_OW 307
7782: OR
7783: IFFALSE 7741
// SetLives ( Heike , 1000 ) ;
7785: LD_EXP 16
7789: PPUSH
7790: LD_INT 1000
7792: PPUSH
7793: CALL_OW 234
// wait ( 0 0$2 ) ;
7797: LD_INT 70
7799: PPUSH
7800: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7804: LD_EXP 16
7808: PPUSH
7809: LD_STRING DH-quest-done-4
7811: PPUSH
7812: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7816: LD_EXP 17
7820: PPUSH
7821: LD_STRING DO-quest-done-4
7823: PPUSH
7824: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7828: LD_EXP 16
7832: PPUSH
7833: LD_EXP 17
7837: PPUSH
7838: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7842: LD_EXP 16
7846: PPUSH
7847: LD_STRING DH-quest-done-5
7849: PPUSH
7850: CALL_OW 88
// InGameOff ;
7854: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7858: LD_STRING O6_end_cont
7860: PPUSH
7861: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7865: LD_EXP 18
7869: PPUSH
7870: LD_INT 2
7872: PPUSH
7873: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7877: LD_EXP 19
7881: PPUSH
7882: LD_INT 2
7884: PPUSH
7885: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7889: LD_INT 42
7891: PPUSH
7892: LD_INT 2
7894: PPUSH
7895: LD_INT 2
7897: PPUSH
7898: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7902: LD_EXP 17
7906: PPUSH
7907: LD_INT 53
7909: PPUSH
7910: LD_INT 89
7912: PPUSH
7913: CALL_OW 118
// lastObjectiveActive := true ;
7917: LD_ADDR_EXP 12
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7925: LD_INT 1
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: CALL_OW 424
// PreparePrison ;
7935: CALL 1097 0 0
// end ;
7939: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7940: LD_INT 22
7942: PUSH
7943: LD_INT 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 91
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: LD_INT 4
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: IFFALSE 8154
7974: GO 7976
7976: DISABLE
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
7981: LD_INT 245
7983: PUSH
7984: LD_INT 210
7986: PUSH
7987: LD_INT 210
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: PUSH
7995: LD_OWVAR 67
7999: ARRAY
8000: PPUSH
8001: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8005: LD_ADDR_VAR 0 2
8009: PUSH
8010: LD_INT 22
8012: PUSH
8013: LD_INT 3
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 25
8022: PUSH
8023: LD_INT 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 54
8032: PUSH
8033: EMPTY
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: ST_TO_ADDR
// if not tmp then
8046: LD_VAR 0 2
8050: NOT
8051: IFFALSE 8055
// exit ;
8053: GO 8154
// for i in tmp do
8055: LD_ADDR_VAR 0 1
8059: PUSH
8060: LD_VAR 0 2
8064: PUSH
8065: FOR_IN
8066: IFFALSE 8094
// begin ComExitBuilding ( i ) ;
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8077: LD_VAR 0 1
8081: PPUSH
8082: LD_INT 121
8084: PPUSH
8085: LD_INT 22
8087: PPUSH
8088: CALL_OW 174
// end ;
8092: GO 8065
8094: POP
8095: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8096: LD_EXP 23
8100: PPUSH
8101: LD_INT 121
8103: PPUSH
8104: LD_INT 22
8106: PPUSH
8107: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8111: LD_EXP 24
8115: PPUSH
8116: LD_INT 121
8118: PPUSH
8119: LD_INT 22
8121: PPUSH
8122: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8126: LD_EXP 23
8130: PPUSH
8131: LD_EXP 16
8135: PPUSH
8136: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8140: LD_EXP 24
8144: PPUSH
8145: LD_EXP 16
8149: PPUSH
8150: CALL_OW 175
// end ;
8154: PPOPN 2
8156: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 91
8169: PUSH
8170: LD_INT 8
8172: PUSH
8173: LD_INT 4
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 69
8189: IFFALSE 8371
8191: GO 8193
8193: DISABLE
8194: LD_INT 0
8196: PPUSH
8197: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8198: LD_INT 280
8200: PUSH
8201: LD_INT 245
8203: PUSH
8204: LD_INT 210
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_OWVAR 67
8216: ARRAY
8217: PPUSH
8218: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8222: LD_ADDR_VAR 0 2
8226: PUSH
8227: LD_INT 22
8229: PUSH
8230: LD_INT 3
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 25
8239: PUSH
8240: LD_INT 1
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 54
8249: PUSH
8250: EMPTY
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 69
8262: ST_TO_ADDR
// if not tmp then
8263: LD_VAR 0 2
8267: NOT
8268: IFFALSE 8272
// exit ;
8270: GO 8371
// for i in tmp do
8272: LD_ADDR_VAR 0 1
8276: PUSH
8277: LD_VAR 0 2
8281: PUSH
8282: FOR_IN
8283: IFFALSE 8311
// begin ComExitBuilding ( i ) ;
8285: LD_VAR 0 1
8289: PPUSH
8290: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8294: LD_VAR 0 1
8298: PPUSH
8299: LD_INT 142
8301: PPUSH
8302: LD_INT 71
8304: PPUSH
8305: CALL_OW 174
// end ;
8309: GO 8282
8311: POP
8312: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8313: LD_EXP 23
8317: PPUSH
8318: LD_INT 142
8320: PPUSH
8321: LD_INT 71
8323: PPUSH
8324: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8328: LD_EXP 24
8332: PPUSH
8333: LD_INT 142
8335: PPUSH
8336: LD_INT 71
8338: PPUSH
8339: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8343: LD_EXP 23
8347: PPUSH
8348: LD_EXP 16
8352: PPUSH
8353: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8357: LD_EXP 24
8361: PPUSH
8362: LD_EXP 16
8366: PPUSH
8367: CALL_OW 175
// end ;
8371: PPOPN 2
8373: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8374: LD_INT 22
8376: PUSH
8377: LD_INT 2
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 2
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: LD_INT 58
8396: PUSH
8397: EMPTY
8398: LIST
8399: PUSH
8400: LD_INT 3
8402: PUSH
8403: LD_INT 24
8405: PUSH
8406: LD_INT 1000
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 91
8419: PUSH
8420: LD_EXP 17
8424: PUSH
8425: LD_INT 8
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PPUSH
8440: CALL_OW 69
8444: PUSH
8445: LD_EXP 17
8449: PPUSH
8450: CALL_OW 302
8454: AND
8455: IFFALSE 8569
8457: GO 8459
8459: DISABLE
// begin enable ;
8460: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8461: LD_EXP 17
8465: PPUSH
8466: LD_INT 22
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 21
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 58
8488: PUSH
8489: EMPTY
8490: LIST
8491: PUSH
8492: LD_INT 3
8494: PUSH
8495: LD_INT 24
8497: PUSH
8498: LD_INT 1000
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 91
8511: PUSH
8512: LD_EXP 17
8516: PUSH
8517: LD_INT 8
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: PPUSH
8532: CALL_OW 69
8536: PUSH
8537: LD_INT 1
8539: ARRAY
8540: PPUSH
8541: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8545: LD_EXP 17
8549: PPUSH
8550: LD_INT 52
8552: PPUSH
8553: LD_INT 90
8555: PPUSH
8556: CALL_OW 171
// AddComHold ( Olaf ) ;
8560: LD_EXP 17
8564: PPUSH
8565: CALL_OW 200
// end ;
8569: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8570: LD_EXP 12
8574: PUSH
8575: LD_INT 2
8577: PPUSH
8578: CALL_OW 302
8582: NOT
8583: AND
8584: PUSH
8585: LD_OWVAR 67
8589: PUSH
8590: LD_INT 1
8592: EQUAL
8593: AND
8594: PUSH
8595: LD_EXP 13
8599: NOT
8600: AND
8601: IFFALSE 8618
8603: GO 8605
8605: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8606: LD_EXP 16
8610: PPUSH
8611: LD_STRING DH-prison-missing
8613: PPUSH
8614: CALL_OW 88
// end ;
8618: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8619: LD_EXP 12
8623: PUSH
8624: LD_INT 8
8626: PPUSH
8627: CALL_OW 302
8631: NOT
8632: AND
8633: PUSH
8634: LD_OWVAR 67
8638: PUSH
8639: LD_INT 1
8641: GREATER
8642: AND
8643: PUSH
8644: LD_EXP 13
8648: NOT
8649: AND
8650: IFFALSE 8667
8652: GO 8654
8654: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8655: LD_EXP 16
8659: PPUSH
8660: LD_STRING DH-prison-missing
8662: PPUSH
8663: CALL_OW 88
// end ;
8667: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8668: LD_EXP 12
8672: PUSH
8673: LD_INT 3
8675: PPUSH
8676: CALL_OW 302
8680: NOT
8681: AND
8682: PUSH
8683: LD_EXP 13
8687: NOT
8688: AND
8689: IFFALSE 8706
8691: GO 8693
8693: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8694: LD_EXP 16
8698: PPUSH
8699: LD_STRING DH-prison-missing-a
8701: PPUSH
8702: CALL_OW 88
// end ;
8706: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8707: LD_EXP 12
8711: PUSH
8712: LD_INT 10
8714: PPUSH
8715: CALL_OW 302
8719: NOT
8720: AND
8721: PUSH
8722: LD_EXP 13
8726: NOT
8727: AND
8728: IFFALSE 8745
8730: GO 8732
8732: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8733: LD_EXP 16
8737: PPUSH
8738: LD_STRING DH-prison-missing-a
8740: PPUSH
8741: CALL_OW 88
// end ;
8745: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8746: LD_EXP 13
8750: NOT
8751: PUSH
8752: LD_EXP 12
8756: AND
8757: PUSH
8758: LD_INT 2
8760: PPUSH
8761: LD_EXP 20
8765: PPUSH
8766: CALL_OW 292
8770: AND
8771: IFFALSE 8858
8773: GO 8775
8775: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8776: LD_EXP 20
8780: PPUSH
8781: LD_EXP 16
8785: PPUSH
8786: CALL_OW 119
// DialogueOn ;
8790: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8794: LD_EXP 20
8798: PPUSH
8799: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8803: LD_EXP 20
8807: PPUSH
8808: LD_STRING DK-prison-found
8810: PPUSH
8811: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8815: LD_EXP 16
8819: PPUSH
8820: LD_STRING DH-prison-found
8822: PPUSH
8823: CALL_OW 88
// DialogueOff ;
8827: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8831: LD_EXP 20
8835: PPUSH
8836: LD_INT 2
8838: PPUSH
8839: CALL_OW 235
// prisonFound := true ;
8843: LD_ADDR_EXP 13
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8851: LD_STRING O6_prison_out
8853: PPUSH
8854: CALL_OW 337
// end ;
8858: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8859: LD_EXP 16
8863: PPUSH
8864: CALL_OW 256
8868: PUSH
8869: LD_INT 500
8871: LESS
8872: IFFALSE 8885
8874: GO 8876
8876: DISABLE
// heikeHurt := true ;
8877: LD_ADDR_EXP 14
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
8885: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8886: LD_EXP 12
8890: PUSH
8891: LD_EXP 16
8895: PPUSH
8896: CALL_OW 302
8900: AND
8901: PUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_INT 21
8907: PUSH
8908: LD_INT 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 50
8927: PUSH
8928: EMPTY
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: PPUSH
8936: CALL_OW 71
8940: PUSH
8941: LD_INT 0
8943: EQUAL
8944: AND
8945: IFFALSE 9275
8947: GO 8949
8949: DISABLE
8950: LD_INT 0
8952: PPUSH
// begin if not heikeHurt then
8953: LD_EXP 14
8957: NOT
8958: IFFALSE 8967
// SetAchievement ( ACH_INVINCIBLE ) ;
8960: LD_STRING ACH_INVINCIBLE
8962: PPUSH
8963: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 21
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 50
8994: PUSH
8995: EMPTY
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 69
9007: ST_TO_ADDR
// if prisonFound then
9008: LD_EXP 13
9012: IFFALSE 9026
// AddMedal ( med1 , 1 ) else
9014: LD_STRING med1
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: CALL_OW 101
9024: GO 9037
// AddMedal ( med1 , - 1 ) ;
9026: LD_STRING med1
9028: PPUSH
9029: LD_INT 1
9031: NEG
9032: PPUSH
9033: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9037: LD_VAR 0 1
9041: PUSH
9042: LD_INT 3
9044: LESS
9045: PUSH
9046: LD_EXP 13
9050: NOT
9051: AND
9052: PUSH
9053: LD_VAR 0 1
9057: PUSH
9058: LD_INT 4
9060: LESS
9061: PUSH
9062: LD_EXP 13
9066: AND
9067: OR
9068: IFFALSE 9083
// AddMedal ( med2 , - 1 ) else
9070: LD_STRING med2
9072: PPUSH
9073: LD_INT 1
9075: NEG
9076: PPUSH
9077: CALL_OW 101
9081: GO 9093
// AddMedal ( med2 , 1 ) ;
9083: LD_STRING med2
9085: PPUSH
9086: LD_INT 1
9088: PPUSH
9089: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9093: LD_EXP 13
9097: PUSH
9098: LD_EXP 4
9102: AND
9103: PUSH
9104: LD_VAR 0 1
9108: PUSH
9109: LD_INT 4
9111: GREATEREQUAL
9112: AND
9113: IFFALSE 9127
// AddMedal ( med3 , 1 ) else
9115: LD_STRING med3
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 101
9125: GO 9138
// AddMedal ( med3 , - 1 ) ;
9127: LD_STRING med3
9129: PPUSH
9130: LD_INT 1
9132: NEG
9133: PPUSH
9134: CALL_OW 101
// GiveMedals ( MAIN ) ;
9138: LD_STRING MAIN
9140: PPUSH
9141: CALL_OW 102
// RewardPeople ( tmp ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9154: LD_EXP 16
9158: PPUSH
9159: LD_STRING 01_Heike
9161: PPUSH
9162: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9166: LD_EXP 18
9170: PPUSH
9171: CALL_OW 302
9175: PUSH
9176: LD_EXP 18
9180: PUSH
9181: LD_VAR 0 1
9185: IN
9186: AND
9187: IFFALSE 9201
// SaveCharacters ( Givi , 01_Givi ) ;
9189: LD_EXP 18
9193: PPUSH
9194: LD_STRING 01_Givi
9196: PPUSH
9197: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9201: LD_EXP 19
9205: PPUSH
9206: CALL_OW 302
9210: PUSH
9211: LD_EXP 19
9215: PUSH
9216: LD_VAR 0 1
9220: IN
9221: AND
9222: IFFALSE 9236
// SaveCharacters ( Mike , 01_Mike ) ;
9224: LD_EXP 19
9228: PPUSH
9229: LD_STRING 01_Mike
9231: PPUSH
9232: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9236: LD_EXP 20
9240: PPUSH
9241: CALL_OW 302
9245: PUSH
9246: LD_EXP 20
9250: PUSH
9251: LD_VAR 0 1
9255: IN
9256: AND
9257: IFFALSE 9271
// SaveCharacters ( Kamil , 01_Kamil ) ;
9259: LD_EXP 20
9263: PPUSH
9264: LD_STRING 01_Kamil
9266: PPUSH
9267: CALL_OW 38
// YouWin ;
9271: CALL_OW 103
// end ; end_of_file
9275: PPOPN 1
9277: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9278: LD_VAR 0 1
9282: PUSH
9283: LD_EXP 16
9287: EQUAL
9288: IFFALSE 9297
// YouLost ( Heike ) ;
9290: LD_STRING Heike
9292: PPUSH
9293: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9297: LD_VAR 0 1
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_INT 3
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 25
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 69
9330: IN
9331: IFFALSE 9437
// begin if un in russianPatrol then
9333: LD_VAR 0 1
9337: PUSH
9338: LD_EXP 21
9342: IN
9343: IFFALSE 9361
// russianPatrol := russianPatrol diff un ;
9345: LD_ADDR_EXP 21
9349: PUSH
9350: LD_EXP 21
9354: PUSH
9355: LD_VAR 0 1
9359: DIFF
9360: ST_TO_ADDR
// if un in russianForestPatrol then
9361: LD_VAR 0 1
9365: PUSH
9366: LD_EXP 22
9370: IN
9371: IFFALSE 9389
// russianForestPatrol := russianForestPatrol diff un ;
9373: LD_ADDR_EXP 22
9377: PUSH
9378: LD_EXP 22
9382: PUSH
9383: LD_VAR 0 1
9387: DIFF
9388: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9389: LD_ADDR_EXP 5
9393: PUSH
9394: LD_EXP 5
9398: PPUSH
9399: LD_EXP 5
9403: PUSH
9404: LD_INT 1
9406: PLUS
9407: PPUSH
9408: LD_VAR 0 1
9412: PPUSH
9413: CALL_OW 250
9417: PUSH
9418: LD_VAR 0 1
9422: PPUSH
9423: CALL_OW 251
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 1
9436: ST_TO_ADDR
// end ; end ;
9437: PPOPN 1
9439: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9440: LD_VAR 0 1
9444: PUSH
9445: LD_EXP 16
9449: EQUAL
9450: IFFALSE 9459
// YouLost ( Heike ) ;
9452: LD_STRING Heike
9454: PPUSH
9455: CALL_OW 104
// end ;
9459: PPOPN 1
9461: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9462: LD_VAR 0 1
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: IN
9477: PUSH
9478: LD_VAR 0 2
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: IN
9493: AND
9494: IFFALSE 9503
// YouLost ( FriendlyFire ) ;
9496: LD_STRING FriendlyFire
9498: PPUSH
9499: CALL_OW 104
// end ; end_of_file
9503: PPOPN 2
9505: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9506: GO 9508
9508: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 9525 0 0
// DefineStreamItems ( ) ;
9520: CALL 9965 0 0
// end ;
9524: END
// function InitStreamMode ; begin
9525: LD_INT 0
9527: PPUSH
// streamModeActive := false ;
9528: LD_ADDR_EXP 26
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// normalCounter := 36 ;
9536: LD_ADDR_EXP 27
9540: PUSH
9541: LD_INT 36
9543: ST_TO_ADDR
// hardcoreCounter := 16 ;
9544: LD_ADDR_EXP 28
9548: PUSH
9549: LD_INT 16
9551: ST_TO_ADDR
// sRocket := false ;
9552: LD_ADDR_EXP 31
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sSpeed := false ;
9560: LD_ADDR_EXP 30
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sEngine := false ;
9568: LD_ADDR_EXP 32
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sSpec := false ;
9576: LD_ADDR_EXP 29
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sLevel := false ;
9584: LD_ADDR_EXP 33
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// sArmoury := false ;
9592: LD_ADDR_EXP 34
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// sRadar := false ;
9600: LD_ADDR_EXP 35
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// sBunker := false ;
9608: LD_ADDR_EXP 36
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// sHack := false ;
9616: LD_ADDR_EXP 37
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// sFire := false ;
9624: LD_ADDR_EXP 38
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// sRefresh := false ;
9632: LD_ADDR_EXP 39
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// sExp := false ;
9640: LD_ADDR_EXP 40
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// sDepot := false ;
9648: LD_ADDR_EXP 41
9652: PUSH
9653: LD_INT 0
9655: ST_TO_ADDR
// sFlag := false ;
9656: LD_ADDR_EXP 42
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// sKamikadze := false ;
9664: LD_ADDR_EXP 50
9668: PUSH
9669: LD_INT 0
9671: ST_TO_ADDR
// sTroll := false ;
9672: LD_ADDR_EXP 51
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// sSlow := false ;
9680: LD_ADDR_EXP 52
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// sLack := false ;
9688: LD_ADDR_EXP 53
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// sTank := false ;
9696: LD_ADDR_EXP 55
9700: PUSH
9701: LD_INT 0
9703: ST_TO_ADDR
// sRemote := false ;
9704: LD_ADDR_EXP 56
9708: PUSH
9709: LD_INT 0
9711: ST_TO_ADDR
// sPowell := false ;
9712: LD_ADDR_EXP 57
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// sTeleport := false ;
9720: LD_ADDR_EXP 60
9724: PUSH
9725: LD_INT 0
9727: ST_TO_ADDR
// sOilTower := false ;
9728: LD_ADDR_EXP 62
9732: PUSH
9733: LD_INT 0
9735: ST_TO_ADDR
// sShovel := false ;
9736: LD_ADDR_EXP 63
9740: PUSH
9741: LD_INT 0
9743: ST_TO_ADDR
// sSheik := false ;
9744: LD_ADDR_EXP 64
9748: PUSH
9749: LD_INT 0
9751: ST_TO_ADDR
// sEarthquake := false ;
9752: LD_ADDR_EXP 66
9756: PUSH
9757: LD_INT 0
9759: ST_TO_ADDR
// sAI := false ;
9760: LD_ADDR_EXP 67
9764: PUSH
9765: LD_INT 0
9767: ST_TO_ADDR
// sCargo := false ;
9768: LD_ADDR_EXP 70
9772: PUSH
9773: LD_INT 0
9775: ST_TO_ADDR
// sDLaser := false ;
9776: LD_ADDR_EXP 71
9780: PUSH
9781: LD_INT 0
9783: ST_TO_ADDR
// sExchange := false ;
9784: LD_ADDR_EXP 72
9788: PUSH
9789: LD_INT 0
9791: ST_TO_ADDR
// sFac := false ;
9792: LD_ADDR_EXP 73
9796: PUSH
9797: LD_INT 0
9799: ST_TO_ADDR
// sPower := false ;
9800: LD_ADDR_EXP 74
9804: PUSH
9805: LD_INT 0
9807: ST_TO_ADDR
// sRandom := false ;
9808: LD_ADDR_EXP 75
9812: PUSH
9813: LD_INT 0
9815: ST_TO_ADDR
// sShield := false ;
9816: LD_ADDR_EXP 76
9820: PUSH
9821: LD_INT 0
9823: ST_TO_ADDR
// sTime := false ;
9824: LD_ADDR_EXP 77
9828: PUSH
9829: LD_INT 0
9831: ST_TO_ADDR
// sTools := false ;
9832: LD_ADDR_EXP 78
9836: PUSH
9837: LD_INT 0
9839: ST_TO_ADDR
// sSold := false ;
9840: LD_ADDR_EXP 43
9844: PUSH
9845: LD_INT 0
9847: ST_TO_ADDR
// sDiff := false ;
9848: LD_ADDR_EXP 44
9852: PUSH
9853: LD_INT 0
9855: ST_TO_ADDR
// sFog := false ;
9856: LD_ADDR_EXP 47
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// sReset := false ;
9864: LD_ADDR_EXP 48
9868: PUSH
9869: LD_INT 0
9871: ST_TO_ADDR
// sSun := false ;
9872: LD_ADDR_EXP 49
9876: PUSH
9877: LD_INT 0
9879: ST_TO_ADDR
// sTiger := false ;
9880: LD_ADDR_EXP 45
9884: PUSH
9885: LD_INT 0
9887: ST_TO_ADDR
// sBomb := false ;
9888: LD_ADDR_EXP 46
9892: PUSH
9893: LD_INT 0
9895: ST_TO_ADDR
// sWound := false ;
9896: LD_ADDR_EXP 54
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// sBetray := false ;
9904: LD_ADDR_EXP 58
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// sContamin := false ;
9912: LD_ADDR_EXP 59
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// sOil := false ;
9920: LD_ADDR_EXP 61
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// sStu := false ;
9928: LD_ADDR_EXP 65
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// sBazooka := false ;
9936: LD_ADDR_EXP 68
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// sMortar := false ;
9944: LD_ADDR_EXP 69
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// sRanger := false ;
9952: LD_ADDR_EXP 79
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// end ;
9960: LD_VAR 0 1
9964: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9965: LD_INT 0
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
// result := [ ] ;
9972: LD_ADDR_VAR 0 1
9976: PUSH
9977: EMPTY
9978: ST_TO_ADDR
// if campaign_id = 1 then
9979: LD_OWVAR 69
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 12925
// begin case mission_number of 1 :
9989: LD_OWVAR 70
9993: PUSH
9994: LD_INT 1
9996: DOUBLE
9997: EQUAL
9998: IFTRUE 10002
10000: GO 10066
10002: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10003: LD_ADDR_VAR 0 1
10007: PUSH
10008: LD_INT 2
10010: PUSH
10011: LD_INT 4
10013: PUSH
10014: LD_INT 11
10016: PUSH
10017: LD_INT 12
10019: PUSH
10020: LD_INT 15
10022: PUSH
10023: LD_INT 16
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 23
10031: PUSH
10032: LD_INT 26
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 101
10048: PUSH
10049: LD_INT 102
10051: PUSH
10052: LD_INT 106
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: ST_TO_ADDR
10064: GO 12923
10066: LD_INT 2
10068: DOUBLE
10069: EQUAL
10070: IFTRUE 10074
10072: GO 10146
10074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10075: LD_ADDR_VAR 0 1
10079: PUSH
10080: LD_INT 2
10082: PUSH
10083: LD_INT 4
10085: PUSH
10086: LD_INT 11
10088: PUSH
10089: LD_INT 12
10091: PUSH
10092: LD_INT 15
10094: PUSH
10095: LD_INT 16
10097: PUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 23
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 101
10120: PUSH
10121: LD_INT 102
10123: PUSH
10124: LD_INT 105
10126: PUSH
10127: LD_INT 106
10129: PUSH
10130: LD_INT 108
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: ST_TO_ADDR
10144: GO 12923
10146: LD_INT 3
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10230
10154: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10155: LD_ADDR_VAR 0 1
10159: PUSH
10160: LD_INT 2
10162: PUSH
10163: LD_INT 4
10165: PUSH
10166: LD_INT 5
10168: PUSH
10169: LD_INT 11
10171: PUSH
10172: LD_INT 12
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 26
10186: PUSH
10187: LD_INT 36
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 101
10204: PUSH
10205: LD_INT 102
10207: PUSH
10208: LD_INT 105
10210: PUSH
10211: LD_INT 106
10213: PUSH
10214: LD_INT 108
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: ST_TO_ADDR
10228: GO 12923
10230: LD_INT 4
10232: DOUBLE
10233: EQUAL
10234: IFTRUE 10238
10236: GO 10322
10238: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10239: LD_ADDR_VAR 0 1
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: LD_INT 4
10249: PUSH
10250: LD_INT 5
10252: PUSH
10253: LD_INT 8
10255: PUSH
10256: LD_INT 11
10258: PUSH
10259: LD_INT 12
10261: PUSH
10262: LD_INT 15
10264: PUSH
10265: LD_INT 16
10267: PUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 23
10273: PUSH
10274: LD_INT 26
10276: PUSH
10277: LD_INT 36
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 101
10296: PUSH
10297: LD_INT 102
10299: PUSH
10300: LD_INT 105
10302: PUSH
10303: LD_INT 106
10305: PUSH
10306: LD_INT 108
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: ST_TO_ADDR
10320: GO 12923
10322: LD_INT 5
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10430
10330: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: LD_INT 4
10341: PUSH
10342: LD_INT 5
10344: PUSH
10345: LD_INT 6
10347: PUSH
10348: LD_INT 8
10350: PUSH
10351: LD_INT 11
10353: PUSH
10354: LD_INT 12
10356: PUSH
10357: LD_INT 15
10359: PUSH
10360: LD_INT 16
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_INT 23
10368: PUSH
10369: LD_INT 25
10371: PUSH
10372: LD_INT 26
10374: PUSH
10375: LD_INT 36
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 101
10396: PUSH
10397: LD_INT 102
10399: PUSH
10400: LD_INT 105
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 108
10408: PUSH
10409: LD_INT 109
10411: PUSH
10412: LD_INT 112
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: ST_TO_ADDR
10428: GO 12923
10430: LD_INT 6
10432: DOUBLE
10433: EQUAL
10434: IFTRUE 10438
10436: GO 10558
10438: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 4
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: LD_INT 6
10455: PUSH
10456: LD_INT 8
10458: PUSH
10459: LD_INT 11
10461: PUSH
10462: LD_INT 12
10464: PUSH
10465: LD_INT 15
10467: PUSH
10468: LD_INT 16
10470: PUSH
10471: LD_INT 20
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 22
10479: PUSH
10480: LD_INT 23
10482: PUSH
10483: LD_INT 25
10485: PUSH
10486: LD_INT 26
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: LD_INT 32
10497: PUSH
10498: LD_INT 36
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 101
10524: PUSH
10525: LD_INT 102
10527: PUSH
10528: LD_INT 105
10530: PUSH
10531: LD_INT 106
10533: PUSH
10534: LD_INT 108
10536: PUSH
10537: LD_INT 109
10539: PUSH
10540: LD_INT 112
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: ST_TO_ADDR
10556: GO 12923
10558: LD_INT 7
10560: DOUBLE
10561: EQUAL
10562: IFTRUE 10566
10564: GO 10666
10566: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10567: LD_ADDR_VAR 0 1
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: LD_INT 4
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: LD_INT 7
10583: PUSH
10584: LD_INT 11
10586: PUSH
10587: LD_INT 12
10589: PUSH
10590: LD_INT 15
10592: PUSH
10593: LD_INT 16
10595: PUSH
10596: LD_INT 20
10598: PUSH
10599: LD_INT 21
10601: PUSH
10602: LD_INT 22
10604: PUSH
10605: LD_INT 23
10607: PUSH
10608: LD_INT 25
10610: PUSH
10611: LD_INT 26
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 101
10632: PUSH
10633: LD_INT 102
10635: PUSH
10636: LD_INT 103
10638: PUSH
10639: LD_INT 105
10641: PUSH
10642: LD_INT 106
10644: PUSH
10645: LD_INT 108
10647: PUSH
10648: LD_INT 112
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: ST_TO_ADDR
10664: GO 12923
10666: LD_INT 8
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10802
10674: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10675: LD_ADDR_VAR 0 1
10679: PUSH
10680: LD_INT 2
10682: PUSH
10683: LD_INT 4
10685: PUSH
10686: LD_INT 5
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: LD_INT 7
10694: PUSH
10695: LD_INT 8
10697: PUSH
10698: LD_INT 11
10700: PUSH
10701: LD_INT 12
10703: PUSH
10704: LD_INT 15
10706: PUSH
10707: LD_INT 16
10709: PUSH
10710: LD_INT 20
10712: PUSH
10713: LD_INT 21
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 25
10724: PUSH
10725: LD_INT 26
10727: PUSH
10728: LD_INT 30
10730: PUSH
10731: LD_INT 31
10733: PUSH
10734: LD_INT 32
10736: PUSH
10737: LD_INT 36
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 101
10764: PUSH
10765: LD_INT 102
10767: PUSH
10768: LD_INT 103
10770: PUSH
10771: LD_INT 105
10773: PUSH
10774: LD_INT 106
10776: PUSH
10777: LD_INT 108
10779: PUSH
10780: LD_INT 109
10782: PUSH
10783: LD_INT 112
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
10800: GO 12923
10802: LD_INT 9
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10810
10808: GO 10946
10810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: LD_INT 5
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: LD_INT 8
10833: PUSH
10834: LD_INT 11
10836: PUSH
10837: LD_INT 12
10839: PUSH
10840: LD_INT 15
10842: PUSH
10843: LD_INT 16
10845: PUSH
10846: LD_INT 20
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 22
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 26
10863: PUSH
10864: LD_INT 28
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 31
10872: PUSH
10873: LD_INT 32
10875: PUSH
10876: LD_INT 36
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 101
10904: PUSH
10905: LD_INT 102
10907: PUSH
10908: LD_INT 103
10910: PUSH
10911: LD_INT 105
10913: PUSH
10914: LD_INT 106
10916: PUSH
10917: LD_INT 108
10919: PUSH
10920: LD_INT 109
10922: PUSH
10923: LD_INT 112
10925: PUSH
10926: LD_INT 114
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: ST_TO_ADDR
10944: GO 12923
10946: LD_INT 10
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 11138
10954: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10955: LD_ADDR_VAR 0 1
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: LD_INT 4
10965: PUSH
10966: LD_INT 5
10968: PUSH
10969: LD_INT 6
10971: PUSH
10972: LD_INT 7
10974: PUSH
10975: LD_INT 8
10977: PUSH
10978: LD_INT 9
10980: PUSH
10981: LD_INT 10
10983: PUSH
10984: LD_INT 11
10986: PUSH
10987: LD_INT 12
10989: PUSH
10990: LD_INT 13
10992: PUSH
10993: LD_INT 14
10995: PUSH
10996: LD_INT 15
10998: PUSH
10999: LD_INT 16
11001: PUSH
11002: LD_INT 17
11004: PUSH
11005: LD_INT 18
11007: PUSH
11008: LD_INT 19
11010: PUSH
11011: LD_INT 20
11013: PUSH
11014: LD_INT 21
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 23
11022: PUSH
11023: LD_INT 24
11025: PUSH
11026: LD_INT 25
11028: PUSH
11029: LD_INT 26
11031: PUSH
11032: LD_INT 28
11034: PUSH
11035: LD_INT 30
11037: PUSH
11038: LD_INT 31
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: LD_INT 36
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 101
11080: PUSH
11081: LD_INT 102
11083: PUSH
11084: LD_INT 103
11086: PUSH
11087: LD_INT 104
11089: PUSH
11090: LD_INT 105
11092: PUSH
11093: LD_INT 106
11095: PUSH
11096: LD_INT 107
11098: PUSH
11099: LD_INT 108
11101: PUSH
11102: LD_INT 109
11104: PUSH
11105: LD_INT 110
11107: PUSH
11108: LD_INT 111
11110: PUSH
11111: LD_INT 112
11113: PUSH
11114: LD_INT 114
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: ST_TO_ADDR
11136: GO 12923
11138: LD_INT 11
11140: DOUBLE
11141: EQUAL
11142: IFTRUE 11146
11144: GO 11338
11146: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11147: LD_ADDR_VAR 0 1
11151: PUSH
11152: LD_INT 2
11154: PUSH
11155: LD_INT 3
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: LD_INT 7
11169: PUSH
11170: LD_INT 8
11172: PUSH
11173: LD_INT 9
11175: PUSH
11176: LD_INT 10
11178: PUSH
11179: LD_INT 11
11181: PUSH
11182: LD_INT 12
11184: PUSH
11185: LD_INT 13
11187: PUSH
11188: LD_INT 14
11190: PUSH
11191: LD_INT 15
11193: PUSH
11194: LD_INT 16
11196: PUSH
11197: LD_INT 17
11199: PUSH
11200: LD_INT 18
11202: PUSH
11203: LD_INT 19
11205: PUSH
11206: LD_INT 20
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 22
11214: PUSH
11215: LD_INT 23
11217: PUSH
11218: LD_INT 24
11220: PUSH
11221: LD_INT 25
11223: PUSH
11224: LD_INT 26
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: LD_INT 30
11232: PUSH
11233: LD_INT 31
11235: PUSH
11236: LD_INT 32
11238: PUSH
11239: LD_INT 34
11241: PUSH
11242: LD_INT 36
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 101
11280: PUSH
11281: LD_INT 102
11283: PUSH
11284: LD_INT 103
11286: PUSH
11287: LD_INT 104
11289: PUSH
11290: LD_INT 105
11292: PUSH
11293: LD_INT 106
11295: PUSH
11296: LD_INT 107
11298: PUSH
11299: LD_INT 108
11301: PUSH
11302: LD_INT 109
11304: PUSH
11305: LD_INT 110
11307: PUSH
11308: LD_INT 111
11310: PUSH
11311: LD_INT 112
11313: PUSH
11314: LD_INT 114
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: ST_TO_ADDR
11336: GO 12923
11338: LD_INT 12
11340: DOUBLE
11341: EQUAL
11342: IFTRUE 11346
11344: GO 11554
11346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11347: LD_ADDR_VAR 0 1
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: LD_INT 2
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: LD_INT 4
11363: PUSH
11364: LD_INT 5
11366: PUSH
11367: LD_INT 6
11369: PUSH
11370: LD_INT 7
11372: PUSH
11373: LD_INT 8
11375: PUSH
11376: LD_INT 9
11378: PUSH
11379: LD_INT 10
11381: PUSH
11382: LD_INT 11
11384: PUSH
11385: LD_INT 12
11387: PUSH
11388: LD_INT 13
11390: PUSH
11391: LD_INT 14
11393: PUSH
11394: LD_INT 15
11396: PUSH
11397: LD_INT 16
11399: PUSH
11400: LD_INT 17
11402: PUSH
11403: LD_INT 18
11405: PUSH
11406: LD_INT 19
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 21
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_INT 23
11420: PUSH
11421: LD_INT 24
11423: PUSH
11424: LD_INT 25
11426: PUSH
11427: LD_INT 26
11429: PUSH
11430: LD_INT 27
11432: PUSH
11433: LD_INT 28
11435: PUSH
11436: LD_INT 30
11438: PUSH
11439: LD_INT 31
11441: PUSH
11442: LD_INT 32
11444: PUSH
11445: LD_INT 33
11447: PUSH
11448: LD_INT 34
11450: PUSH
11451: LD_INT 36
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 101
11492: PUSH
11493: LD_INT 102
11495: PUSH
11496: LD_INT 103
11498: PUSH
11499: LD_INT 104
11501: PUSH
11502: LD_INT 105
11504: PUSH
11505: LD_INT 106
11507: PUSH
11508: LD_INT 107
11510: PUSH
11511: LD_INT 108
11513: PUSH
11514: LD_INT 109
11516: PUSH
11517: LD_INT 110
11519: PUSH
11520: LD_INT 111
11522: PUSH
11523: LD_INT 112
11525: PUSH
11526: LD_INT 113
11528: PUSH
11529: LD_INT 114
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 12923
11554: LD_INT 13
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11758
11562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_INT 1
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 4
11579: PUSH
11580: LD_INT 5
11582: PUSH
11583: LD_INT 8
11585: PUSH
11586: LD_INT 9
11588: PUSH
11589: LD_INT 10
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 14
11600: PUSH
11601: LD_INT 15
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 17
11609: PUSH
11610: LD_INT 18
11612: PUSH
11613: LD_INT 19
11615: PUSH
11616: LD_INT 20
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 23
11627: PUSH
11628: LD_INT 24
11630: PUSH
11631: LD_INT 25
11633: PUSH
11634: LD_INT 26
11636: PUSH
11637: LD_INT 27
11639: PUSH
11640: LD_INT 28
11642: PUSH
11643: LD_INT 30
11645: PUSH
11646: LD_INT 31
11648: PUSH
11649: LD_INT 32
11651: PUSH
11652: LD_INT 33
11654: PUSH
11655: LD_INT 34
11657: PUSH
11658: LD_INT 36
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 101
11696: PUSH
11697: LD_INT 102
11699: PUSH
11700: LD_INT 103
11702: PUSH
11703: LD_INT 104
11705: PUSH
11706: LD_INT 105
11708: PUSH
11709: LD_INT 106
11711: PUSH
11712: LD_INT 107
11714: PUSH
11715: LD_INT 108
11717: PUSH
11718: LD_INT 109
11720: PUSH
11721: LD_INT 110
11723: PUSH
11724: LD_INT 111
11726: PUSH
11727: LD_INT 112
11729: PUSH
11730: LD_INT 113
11732: PUSH
11733: LD_INT 114
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: ST_TO_ADDR
11756: GO 12923
11758: LD_INT 14
11760: DOUBLE
11761: EQUAL
11762: IFTRUE 11766
11764: GO 11978
11766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11767: LD_ADDR_VAR 0 1
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: LD_INT 2
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: LD_INT 4
11783: PUSH
11784: LD_INT 5
11786: PUSH
11787: LD_INT 6
11789: PUSH
11790: LD_INT 7
11792: PUSH
11793: LD_INT 8
11795: PUSH
11796: LD_INT 9
11798: PUSH
11799: LD_INT 10
11801: PUSH
11802: LD_INT 11
11804: PUSH
11805: LD_INT 12
11807: PUSH
11808: LD_INT 13
11810: PUSH
11811: LD_INT 14
11813: PUSH
11814: LD_INT 15
11816: PUSH
11817: LD_INT 16
11819: PUSH
11820: LD_INT 17
11822: PUSH
11823: LD_INT 18
11825: PUSH
11826: LD_INT 19
11828: PUSH
11829: LD_INT 20
11831: PUSH
11832: LD_INT 21
11834: PUSH
11835: LD_INT 22
11837: PUSH
11838: LD_INT 23
11840: PUSH
11841: LD_INT 24
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 26
11849: PUSH
11850: LD_INT 27
11852: PUSH
11853: LD_INT 28
11855: PUSH
11856: LD_INT 29
11858: PUSH
11859: LD_INT 30
11861: PUSH
11862: LD_INT 31
11864: PUSH
11865: LD_INT 32
11867: PUSH
11868: LD_INT 33
11870: PUSH
11871: LD_INT 34
11873: PUSH
11874: LD_INT 36
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 101
11916: PUSH
11917: LD_INT 102
11919: PUSH
11920: LD_INT 103
11922: PUSH
11923: LD_INT 104
11925: PUSH
11926: LD_INT 105
11928: PUSH
11929: LD_INT 106
11931: PUSH
11932: LD_INT 107
11934: PUSH
11935: LD_INT 108
11937: PUSH
11938: LD_INT 109
11940: PUSH
11941: LD_INT 110
11943: PUSH
11944: LD_INT 111
11946: PUSH
11947: LD_INT 112
11949: PUSH
11950: LD_INT 113
11952: PUSH
11953: LD_INT 114
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: ST_TO_ADDR
11976: GO 12923
11978: LD_INT 15
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12198
11986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11987: LD_ADDR_VAR 0 1
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 3
12000: PUSH
12001: LD_INT 4
12003: PUSH
12004: LD_INT 5
12006: PUSH
12007: LD_INT 6
12009: PUSH
12010: LD_INT 7
12012: PUSH
12013: LD_INT 8
12015: PUSH
12016: LD_INT 9
12018: PUSH
12019: LD_INT 10
12021: PUSH
12022: LD_INT 11
12024: PUSH
12025: LD_INT 12
12027: PUSH
12028: LD_INT 13
12030: PUSH
12031: LD_INT 14
12033: PUSH
12034: LD_INT 15
12036: PUSH
12037: LD_INT 16
12039: PUSH
12040: LD_INT 17
12042: PUSH
12043: LD_INT 18
12045: PUSH
12046: LD_INT 19
12048: PUSH
12049: LD_INT 20
12051: PUSH
12052: LD_INT 21
12054: PUSH
12055: LD_INT 22
12057: PUSH
12058: LD_INT 23
12060: PUSH
12061: LD_INT 24
12063: PUSH
12064: LD_INT 25
12066: PUSH
12067: LD_INT 26
12069: PUSH
12070: LD_INT 27
12072: PUSH
12073: LD_INT 28
12075: PUSH
12076: LD_INT 29
12078: PUSH
12079: LD_INT 30
12081: PUSH
12082: LD_INT 31
12084: PUSH
12085: LD_INT 32
12087: PUSH
12088: LD_INT 33
12090: PUSH
12091: LD_INT 34
12093: PUSH
12094: LD_INT 36
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 101
12136: PUSH
12137: LD_INT 102
12139: PUSH
12140: LD_INT 103
12142: PUSH
12143: LD_INT 104
12145: PUSH
12146: LD_INT 105
12148: PUSH
12149: LD_INT 106
12151: PUSH
12152: LD_INT 107
12154: PUSH
12155: LD_INT 108
12157: PUSH
12158: LD_INT 109
12160: PUSH
12161: LD_INT 110
12163: PUSH
12164: LD_INT 111
12166: PUSH
12167: LD_INT 112
12169: PUSH
12170: LD_INT 113
12172: PUSH
12173: LD_INT 114
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: ST_TO_ADDR
12196: GO 12923
12198: LD_INT 16
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12330
12206: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12207: LD_ADDR_VAR 0 1
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: LD_INT 7
12223: PUSH
12224: LD_INT 11
12226: PUSH
12227: LD_INT 12
12229: PUSH
12230: LD_INT 15
12232: PUSH
12233: LD_INT 16
12235: PUSH
12236: LD_INT 20
12238: PUSH
12239: LD_INT 21
12241: PUSH
12242: LD_INT 22
12244: PUSH
12245: LD_INT 23
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 31
12259: PUSH
12260: LD_INT 32
12262: PUSH
12263: LD_INT 33
12265: PUSH
12266: LD_INT 34
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 101
12292: PUSH
12293: LD_INT 102
12295: PUSH
12296: LD_INT 103
12298: PUSH
12299: LD_INT 106
12301: PUSH
12302: LD_INT 108
12304: PUSH
12305: LD_INT 112
12307: PUSH
12308: LD_INT 113
12310: PUSH
12311: LD_INT 114
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: ST_TO_ADDR
12328: GO 12923
12330: LD_INT 17
12332: DOUBLE
12333: EQUAL
12334: IFTRUE 12338
12336: GO 12550
12338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: LD_INT 2
12349: PUSH
12350: LD_INT 3
12352: PUSH
12353: LD_INT 4
12355: PUSH
12356: LD_INT 5
12358: PUSH
12359: LD_INT 6
12361: PUSH
12362: LD_INT 7
12364: PUSH
12365: LD_INT 8
12367: PUSH
12368: LD_INT 9
12370: PUSH
12371: LD_INT 10
12373: PUSH
12374: LD_INT 11
12376: PUSH
12377: LD_INT 12
12379: PUSH
12380: LD_INT 13
12382: PUSH
12383: LD_INT 14
12385: PUSH
12386: LD_INT 15
12388: PUSH
12389: LD_INT 16
12391: PUSH
12392: LD_INT 17
12394: PUSH
12395: LD_INT 18
12397: PUSH
12398: LD_INT 19
12400: PUSH
12401: LD_INT 20
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 22
12409: PUSH
12410: LD_INT 23
12412: PUSH
12413: LD_INT 24
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 26
12421: PUSH
12422: LD_INT 27
12424: PUSH
12425: LD_INT 28
12427: PUSH
12428: LD_INT 29
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_INT 31
12436: PUSH
12437: LD_INT 32
12439: PUSH
12440: LD_INT 33
12442: PUSH
12443: LD_INT 34
12445: PUSH
12446: LD_INT 36
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 101
12488: PUSH
12489: LD_INT 102
12491: PUSH
12492: LD_INT 103
12494: PUSH
12495: LD_INT 104
12497: PUSH
12498: LD_INT 105
12500: PUSH
12501: LD_INT 106
12503: PUSH
12504: LD_INT 107
12506: PUSH
12507: LD_INT 108
12509: PUSH
12510: LD_INT 109
12512: PUSH
12513: LD_INT 110
12515: PUSH
12516: LD_INT 111
12518: PUSH
12519: LD_INT 112
12521: PUSH
12522: LD_INT 113
12524: PUSH
12525: LD_INT 114
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: ST_TO_ADDR
12548: GO 12923
12550: LD_INT 18
12552: DOUBLE
12553: EQUAL
12554: IFTRUE 12558
12556: GO 12694
12558: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12559: LD_ADDR_VAR 0 1
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: LD_INT 4
12569: PUSH
12570: LD_INT 5
12572: PUSH
12573: LD_INT 7
12575: PUSH
12576: LD_INT 11
12578: PUSH
12579: LD_INT 12
12581: PUSH
12582: LD_INT 15
12584: PUSH
12585: LD_INT 16
12587: PUSH
12588: LD_INT 20
12590: PUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 22
12596: PUSH
12597: LD_INT 23
12599: PUSH
12600: LD_INT 25
12602: PUSH
12603: LD_INT 26
12605: PUSH
12606: LD_INT 30
12608: PUSH
12609: LD_INT 31
12611: PUSH
12612: LD_INT 32
12614: PUSH
12615: LD_INT 33
12617: PUSH
12618: LD_INT 34
12620: PUSH
12621: LD_INT 35
12623: PUSH
12624: LD_INT 36
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 101
12652: PUSH
12653: LD_INT 102
12655: PUSH
12656: LD_INT 103
12658: PUSH
12659: LD_INT 106
12661: PUSH
12662: LD_INT 108
12664: PUSH
12665: LD_INT 112
12667: PUSH
12668: LD_INT 113
12670: PUSH
12671: LD_INT 114
12673: PUSH
12674: LD_INT 115
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: ST_TO_ADDR
12692: GO 12923
12694: LD_INT 19
12696: DOUBLE
12697: EQUAL
12698: IFTRUE 12702
12700: GO 12922
12702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: LD_INT 2
12713: PUSH
12714: LD_INT 3
12716: PUSH
12717: LD_INT 4
12719: PUSH
12720: LD_INT 5
12722: PUSH
12723: LD_INT 6
12725: PUSH
12726: LD_INT 7
12728: PUSH
12729: LD_INT 8
12731: PUSH
12732: LD_INT 9
12734: PUSH
12735: LD_INT 10
12737: PUSH
12738: LD_INT 11
12740: PUSH
12741: LD_INT 12
12743: PUSH
12744: LD_INT 13
12746: PUSH
12747: LD_INT 14
12749: PUSH
12750: LD_INT 15
12752: PUSH
12753: LD_INT 16
12755: PUSH
12756: LD_INT 17
12758: PUSH
12759: LD_INT 18
12761: PUSH
12762: LD_INT 19
12764: PUSH
12765: LD_INT 20
12767: PUSH
12768: LD_INT 21
12770: PUSH
12771: LD_INT 22
12773: PUSH
12774: LD_INT 23
12776: PUSH
12777: LD_INT 24
12779: PUSH
12780: LD_INT 25
12782: PUSH
12783: LD_INT 26
12785: PUSH
12786: LD_INT 27
12788: PUSH
12789: LD_INT 28
12791: PUSH
12792: LD_INT 29
12794: PUSH
12795: LD_INT 30
12797: PUSH
12798: LD_INT 31
12800: PUSH
12801: LD_INT 32
12803: PUSH
12804: LD_INT 33
12806: PUSH
12807: LD_INT 34
12809: PUSH
12810: LD_INT 35
12812: PUSH
12813: LD_INT 36
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 101
12856: PUSH
12857: LD_INT 102
12859: PUSH
12860: LD_INT 103
12862: PUSH
12863: LD_INT 104
12865: PUSH
12866: LD_INT 105
12868: PUSH
12869: LD_INT 106
12871: PUSH
12872: LD_INT 107
12874: PUSH
12875: LD_INT 108
12877: PUSH
12878: LD_INT 109
12880: PUSH
12881: LD_INT 110
12883: PUSH
12884: LD_INT 111
12886: PUSH
12887: LD_INT 112
12889: PUSH
12890: LD_INT 113
12892: PUSH
12893: LD_INT 114
12895: PUSH
12896: LD_INT 115
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: ST_TO_ADDR
12920: GO 12923
12922: POP
// end else
12923: GO 13142
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12925: LD_ADDR_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: LD_INT 4
12941: PUSH
12942: LD_INT 5
12944: PUSH
12945: LD_INT 6
12947: PUSH
12948: LD_INT 7
12950: PUSH
12951: LD_INT 8
12953: PUSH
12954: LD_INT 9
12956: PUSH
12957: LD_INT 10
12959: PUSH
12960: LD_INT 11
12962: PUSH
12963: LD_INT 12
12965: PUSH
12966: LD_INT 13
12968: PUSH
12969: LD_INT 14
12971: PUSH
12972: LD_INT 15
12974: PUSH
12975: LD_INT 16
12977: PUSH
12978: LD_INT 17
12980: PUSH
12981: LD_INT 18
12983: PUSH
12984: LD_INT 19
12986: PUSH
12987: LD_INT 20
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 24
13001: PUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 26
13007: PUSH
13008: LD_INT 27
13010: PUSH
13011: LD_INT 28
13013: PUSH
13014: LD_INT 29
13016: PUSH
13017: LD_INT 30
13019: PUSH
13020: LD_INT 31
13022: PUSH
13023: LD_INT 32
13025: PUSH
13026: LD_INT 33
13028: PUSH
13029: LD_INT 34
13031: PUSH
13032: LD_INT 35
13034: PUSH
13035: LD_INT 36
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 101
13078: PUSH
13079: LD_INT 102
13081: PUSH
13082: LD_INT 103
13084: PUSH
13085: LD_INT 104
13087: PUSH
13088: LD_INT 105
13090: PUSH
13091: LD_INT 106
13093: PUSH
13094: LD_INT 107
13096: PUSH
13097: LD_INT 108
13099: PUSH
13100: LD_INT 109
13102: PUSH
13103: LD_INT 110
13105: PUSH
13106: LD_INT 111
13108: PUSH
13109: LD_INT 112
13111: PUSH
13112: LD_INT 113
13114: PUSH
13115: LD_INT 114
13117: PUSH
13118: LD_INT 115
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: ST_TO_ADDR
// if result then
13142: LD_VAR 0 1
13146: IFFALSE 13435
// begin normal :=  ;
13148: LD_ADDR_VAR 0 3
13152: PUSH
13153: LD_STRING 
13155: ST_TO_ADDR
// hardcore :=  ;
13156: LD_ADDR_VAR 0 4
13160: PUSH
13161: LD_STRING 
13163: ST_TO_ADDR
// for i = 1 to normalCounter do
13164: LD_ADDR_VAR 0 5
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_EXP 27
13178: PUSH
13179: FOR_TO
13180: IFFALSE 13281
// begin tmp := 0 ;
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_STRING 0
13189: ST_TO_ADDR
// if result [ 1 ] then
13190: LD_VAR 0 1
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: IFFALSE 13263
// if result [ 1 ] [ 1 ] = i then
13200: LD_VAR 0 1
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PUSH
13213: LD_VAR 0 5
13217: EQUAL
13218: IFFALSE 13263
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: LD_VAR 0 1
13237: PUSH
13238: LD_INT 1
13240: ARRAY
13241: PPUSH
13242: LD_INT 1
13244: PPUSH
13245: CALL_OW 3
13249: PPUSH
13250: CALL_OW 1
13254: ST_TO_ADDR
// tmp := 1 ;
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_STRING 1
13262: ST_TO_ADDR
// end ; normal := normal & tmp ;
13263: LD_ADDR_VAR 0 3
13267: PUSH
13268: LD_VAR 0 3
13272: PUSH
13273: LD_VAR 0 2
13277: STR
13278: ST_TO_ADDR
// end ;
13279: GO 13179
13281: POP
13282: POP
// for i = 1 to hardcoreCounter do
13283: LD_ADDR_VAR 0 5
13287: PUSH
13288: DOUBLE
13289: LD_INT 1
13291: DEC
13292: ST_TO_ADDR
13293: LD_EXP 28
13297: PUSH
13298: FOR_TO
13299: IFFALSE 13404
// begin tmp := 0 ;
13301: LD_ADDR_VAR 0 2
13305: PUSH
13306: LD_STRING 0
13308: ST_TO_ADDR
// if result [ 2 ] then
13309: LD_VAR 0 1
13313: PUSH
13314: LD_INT 2
13316: ARRAY
13317: IFFALSE 13386
// if result [ 2 ] [ 1 ] = 100 + i then
13319: LD_VAR 0 1
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PUSH
13332: LD_INT 100
13334: PUSH
13335: LD_VAR 0 5
13339: PLUS
13340: EQUAL
13341: IFFALSE 13386
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13343: LD_ADDR_VAR 0 1
13347: PUSH
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 2
13355: PPUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 2
13363: ARRAY
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 3
13372: PPUSH
13373: CALL_OW 1
13377: ST_TO_ADDR
// tmp := 1 ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_STRING 1
13385: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13386: LD_ADDR_VAR 0 4
13390: PUSH
13391: LD_VAR 0 4
13395: PUSH
13396: LD_VAR 0 2
13400: STR
13401: ST_TO_ADDR
// end ;
13402: GO 13298
13404: POP
13405: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13406: LD_STRING getStreamItemsFromMission("
13408: PUSH
13409: LD_VAR 0 3
13413: STR
13414: PUSH
13415: LD_STRING ","
13417: STR
13418: PUSH
13419: LD_VAR 0 4
13423: STR
13424: PUSH
13425: LD_STRING ")
13427: STR
13428: PPUSH
13429: CALL_OW 559
// end else
13433: GO 13442
// ToLua ( getStreamItemsFromMission("","") ) ;
13435: LD_STRING getStreamItemsFromMission("","")
13437: PPUSH
13438: CALL_OW 559
// end ;
13442: LD_VAR 0 1
13446: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13447: LD_VAR 0 2
13451: PUSH
13452: LD_INT 100
13454: EQUAL
13455: IFFALSE 14404
// begin if not StreamModeActive then
13457: LD_EXP 26
13461: NOT
13462: IFFALSE 13472
// StreamModeActive := true ;
13464: LD_ADDR_EXP 26
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 0 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 0
13479: EQUAL
13480: IFFALSE 13486
// InitStreamMode ;
13482: CALL 9525 0 0
// if p3 = 1 then
13486: LD_VAR 0 3
13490: PUSH
13491: LD_INT 1
13493: EQUAL
13494: IFFALSE 13504
// sRocket := true ;
13496: LD_ADDR_EXP 31
13500: PUSH
13501: LD_INT 1
13503: ST_TO_ADDR
// if p3 = 2 then
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 2
13511: EQUAL
13512: IFFALSE 13522
// sSpeed := true ;
13514: LD_ADDR_EXP 30
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// if p3 = 3 then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_INT 3
13529: EQUAL
13530: IFFALSE 13540
// sEngine := true ;
13532: LD_ADDR_EXP 32
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// if p3 = 4 then
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 4
13547: EQUAL
13548: IFFALSE 13558
// sSpec := true ;
13550: LD_ADDR_EXP 29
13554: PUSH
13555: LD_INT 1
13557: ST_TO_ADDR
// if p3 = 5 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 5
13565: EQUAL
13566: IFFALSE 13576
// sLevel := true ;
13568: LD_ADDR_EXP 33
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// if p3 = 6 then
13576: LD_VAR 0 3
13580: PUSH
13581: LD_INT 6
13583: EQUAL
13584: IFFALSE 13594
// sArmoury := true ;
13586: LD_ADDR_EXP 34
13590: PUSH
13591: LD_INT 1
13593: ST_TO_ADDR
// if p3 = 7 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 7
13601: EQUAL
13602: IFFALSE 13612
// sRadar := true ;
13604: LD_ADDR_EXP 35
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// if p3 = 8 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 8
13619: EQUAL
13620: IFFALSE 13630
// sBunker := true ;
13622: LD_ADDR_EXP 36
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 9 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 9
13637: EQUAL
13638: IFFALSE 13648
// sHack := true ;
13640: LD_ADDR_EXP 37
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 10 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 10
13655: EQUAL
13656: IFFALSE 13666
// sFire := true ;
13658: LD_ADDR_EXP 38
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 11 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 11
13673: EQUAL
13674: IFFALSE 13684
// sRefresh := true ;
13676: LD_ADDR_EXP 39
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 12 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 12
13691: EQUAL
13692: IFFALSE 13702
// sExp := true ;
13694: LD_ADDR_EXP 40
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 13 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 13
13709: EQUAL
13710: IFFALSE 13720
// sDepot := true ;
13712: LD_ADDR_EXP 41
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 14 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 14
13727: EQUAL
13728: IFFALSE 13738
// sFlag := true ;
13730: LD_ADDR_EXP 42
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 15 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 15
13745: EQUAL
13746: IFFALSE 13756
// sKamikadze := true ;
13748: LD_ADDR_EXP 50
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 16 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 16
13763: EQUAL
13764: IFFALSE 13774
// sTroll := true ;
13766: LD_ADDR_EXP 51
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 17 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 17
13781: EQUAL
13782: IFFALSE 13792
// sSlow := true ;
13784: LD_ADDR_EXP 52
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 18 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 18
13799: EQUAL
13800: IFFALSE 13810
// sLack := true ;
13802: LD_ADDR_EXP 53
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 19 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 19
13817: EQUAL
13818: IFFALSE 13828
// sTank := true ;
13820: LD_ADDR_EXP 55
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 20 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 20
13835: EQUAL
13836: IFFALSE 13846
// sRemote := true ;
13838: LD_ADDR_EXP 56
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 21 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 21
13853: EQUAL
13854: IFFALSE 13864
// sPowell := true ;
13856: LD_ADDR_EXP 57
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 22 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 22
13871: EQUAL
13872: IFFALSE 13882
// sTeleport := true ;
13874: LD_ADDR_EXP 60
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 23 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 23
13889: EQUAL
13890: IFFALSE 13900
// sOilTower := true ;
13892: LD_ADDR_EXP 62
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 24 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 24
13907: EQUAL
13908: IFFALSE 13918
// sShovel := true ;
13910: LD_ADDR_EXP 63
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 25 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 25
13925: EQUAL
13926: IFFALSE 13936
// sSheik := true ;
13928: LD_ADDR_EXP 64
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 26 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 26
13943: EQUAL
13944: IFFALSE 13954
// sEarthquake := true ;
13946: LD_ADDR_EXP 66
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 27 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 27
13961: EQUAL
13962: IFFALSE 13972
// sAI := true ;
13964: LD_ADDR_EXP 67
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 28 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 28
13979: EQUAL
13980: IFFALSE 13990
// sCargo := true ;
13982: LD_ADDR_EXP 70
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// if p3 = 29 then
13990: LD_VAR 0 3
13994: PUSH
13995: LD_INT 29
13997: EQUAL
13998: IFFALSE 14008
// sDLaser := true ;
14000: LD_ADDR_EXP 71
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// if p3 = 30 then
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 30
14015: EQUAL
14016: IFFALSE 14026
// sExchange := true ;
14018: LD_ADDR_EXP 72
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// if p3 = 31 then
14026: LD_VAR 0 3
14030: PUSH
14031: LD_INT 31
14033: EQUAL
14034: IFFALSE 14044
// sFac := true ;
14036: LD_ADDR_EXP 73
14040: PUSH
14041: LD_INT 1
14043: ST_TO_ADDR
// if p3 = 32 then
14044: LD_VAR 0 3
14048: PUSH
14049: LD_INT 32
14051: EQUAL
14052: IFFALSE 14062
// sPower := true ;
14054: LD_ADDR_EXP 74
14058: PUSH
14059: LD_INT 1
14061: ST_TO_ADDR
// if p3 = 33 then
14062: LD_VAR 0 3
14066: PUSH
14067: LD_INT 33
14069: EQUAL
14070: IFFALSE 14080
// sRandom := true ;
14072: LD_ADDR_EXP 75
14076: PUSH
14077: LD_INT 1
14079: ST_TO_ADDR
// if p3 = 34 then
14080: LD_VAR 0 3
14084: PUSH
14085: LD_INT 34
14087: EQUAL
14088: IFFALSE 14098
// sShield := true ;
14090: LD_ADDR_EXP 76
14094: PUSH
14095: LD_INT 1
14097: ST_TO_ADDR
// if p3 = 35 then
14098: LD_VAR 0 3
14102: PUSH
14103: LD_INT 35
14105: EQUAL
14106: IFFALSE 14116
// sTime := true ;
14108: LD_ADDR_EXP 77
14112: PUSH
14113: LD_INT 1
14115: ST_TO_ADDR
// if p3 = 36 then
14116: LD_VAR 0 3
14120: PUSH
14121: LD_INT 36
14123: EQUAL
14124: IFFALSE 14134
// sTools := true ;
14126: LD_ADDR_EXP 78
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// if p3 = 101 then
14134: LD_VAR 0 3
14138: PUSH
14139: LD_INT 101
14141: EQUAL
14142: IFFALSE 14152
// sSold := true ;
14144: LD_ADDR_EXP 43
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// if p3 = 102 then
14152: LD_VAR 0 3
14156: PUSH
14157: LD_INT 102
14159: EQUAL
14160: IFFALSE 14170
// sDiff := true ;
14162: LD_ADDR_EXP 44
14166: PUSH
14167: LD_INT 1
14169: ST_TO_ADDR
// if p3 = 103 then
14170: LD_VAR 0 3
14174: PUSH
14175: LD_INT 103
14177: EQUAL
14178: IFFALSE 14188
// sFog := true ;
14180: LD_ADDR_EXP 47
14184: PUSH
14185: LD_INT 1
14187: ST_TO_ADDR
// if p3 = 104 then
14188: LD_VAR 0 3
14192: PUSH
14193: LD_INT 104
14195: EQUAL
14196: IFFALSE 14206
// sReset := true ;
14198: LD_ADDR_EXP 48
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// if p3 = 105 then
14206: LD_VAR 0 3
14210: PUSH
14211: LD_INT 105
14213: EQUAL
14214: IFFALSE 14224
// sSun := true ;
14216: LD_ADDR_EXP 49
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// if p3 = 106 then
14224: LD_VAR 0 3
14228: PUSH
14229: LD_INT 106
14231: EQUAL
14232: IFFALSE 14242
// sTiger := true ;
14234: LD_ADDR_EXP 45
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// if p3 = 107 then
14242: LD_VAR 0 3
14246: PUSH
14247: LD_INT 107
14249: EQUAL
14250: IFFALSE 14260
// sBomb := true ;
14252: LD_ADDR_EXP 46
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// if p3 = 108 then
14260: LD_VAR 0 3
14264: PUSH
14265: LD_INT 108
14267: EQUAL
14268: IFFALSE 14278
// sWound := true ;
14270: LD_ADDR_EXP 54
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// if p3 = 109 then
14278: LD_VAR 0 3
14282: PUSH
14283: LD_INT 109
14285: EQUAL
14286: IFFALSE 14296
// sBetray := true ;
14288: LD_ADDR_EXP 58
14292: PUSH
14293: LD_INT 1
14295: ST_TO_ADDR
// if p3 = 110 then
14296: LD_VAR 0 3
14300: PUSH
14301: LD_INT 110
14303: EQUAL
14304: IFFALSE 14314
// sContamin := true ;
14306: LD_ADDR_EXP 59
14310: PUSH
14311: LD_INT 1
14313: ST_TO_ADDR
// if p3 = 111 then
14314: LD_VAR 0 3
14318: PUSH
14319: LD_INT 111
14321: EQUAL
14322: IFFALSE 14332
// sOil := true ;
14324: LD_ADDR_EXP 61
14328: PUSH
14329: LD_INT 1
14331: ST_TO_ADDR
// if p3 = 112 then
14332: LD_VAR 0 3
14336: PUSH
14337: LD_INT 112
14339: EQUAL
14340: IFFALSE 14350
// sStu := true ;
14342: LD_ADDR_EXP 65
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// if p3 = 113 then
14350: LD_VAR 0 3
14354: PUSH
14355: LD_INT 113
14357: EQUAL
14358: IFFALSE 14368
// sBazooka := true ;
14360: LD_ADDR_EXP 68
14364: PUSH
14365: LD_INT 1
14367: ST_TO_ADDR
// if p3 = 114 then
14368: LD_VAR 0 3
14372: PUSH
14373: LD_INT 114
14375: EQUAL
14376: IFFALSE 14386
// sMortar := true ;
14378: LD_ADDR_EXP 69
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// if p3 = 115 then
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 115
14393: EQUAL
14394: IFFALSE 14404
// sRanger := true ;
14396: LD_ADDR_EXP 79
14400: PUSH
14401: LD_INT 1
14403: ST_TO_ADDR
// end ; end ;
14404: PPOPN 6
14406: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14407: LD_EXP 26
14411: PUSH
14412: LD_EXP 31
14416: AND
14417: IFFALSE 14541
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
// begin enable ;
14426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_OWVAR 2
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: LD_INT 34
14449: PUSH
14450: LD_INT 7
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 34
14459: PUSH
14460: LD_INT 45
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 34
14469: PUSH
14470: LD_INT 28
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 34
14479: PUSH
14480: LD_INT 47
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 69
14502: ST_TO_ADDR
// if not tmp then
14503: LD_VAR 0 2
14507: NOT
14508: IFFALSE 14512
// exit ;
14510: GO 14541
// for i in tmp do
14512: LD_ADDR_VAR 0 1
14516: PUSH
14517: LD_VAR 0 2
14521: PUSH
14522: FOR_IN
14523: IFFALSE 14539
// begin SetLives ( i , 0 ) ;
14525: LD_VAR 0 1
14529: PPUSH
14530: LD_INT 0
14532: PPUSH
14533: CALL_OW 234
// end ;
14537: GO 14522
14539: POP
14540: POP
// end ;
14541: PPOPN 2
14543: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14544: LD_EXP 26
14548: PUSH
14549: LD_EXP 32
14553: AND
14554: IFFALSE 14638
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
// begin enable ;
14563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_OWVAR 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 32
14583: PUSH
14584: LD_INT 3
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 69
14599: ST_TO_ADDR
// if not tmp then
14600: LD_VAR 0 2
14604: NOT
14605: IFFALSE 14609
// exit ;
14607: GO 14638
// for i in tmp do
14609: LD_ADDR_VAR 0 1
14613: PUSH
14614: LD_VAR 0 2
14618: PUSH
14619: FOR_IN
14620: IFFALSE 14636
// begin SetLives ( i , 0 ) ;
14622: LD_VAR 0 1
14626: PPUSH
14627: LD_INT 0
14629: PPUSH
14630: CALL_OW 234
// end ;
14634: GO 14619
14636: POP
14637: POP
// end ;
14638: PPOPN 2
14640: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14641: LD_EXP 26
14645: PUSH
14646: LD_EXP 29
14650: AND
14651: IFFALSE 14744
14653: GO 14655
14655: DISABLE
14656: LD_INT 0
14658: PPUSH
// begin enable ;
14659: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14660: LD_ADDR_VAR 0 1
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_OWVAR 2
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 5
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 25
14692: PUSH
14693: LD_INT 9
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 25
14702: PUSH
14703: LD_INT 8
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: PUSH
14725: FOR_IN
14726: IFFALSE 14742
// begin SetClass ( i , 1 ) ;
14728: LD_VAR 0 1
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 336
// end ;
14740: GO 14725
14742: POP
14743: POP
// end ;
14744: PPOPN 1
14746: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14747: LD_EXP 26
14751: PUSH
14752: LD_EXP 30
14756: AND
14757: PUSH
14758: LD_OWVAR 65
14762: PUSH
14763: LD_INT 7
14765: LESS
14766: AND
14767: IFFALSE 14781
14769: GO 14771
14771: DISABLE
// begin enable ;
14772: ENABLE
// game_speed := 7 ;
14773: LD_ADDR_OWVAR 65
14777: PUSH
14778: LD_INT 7
14780: ST_TO_ADDR
// end ;
14781: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14782: LD_EXP 26
14786: PUSH
14787: LD_EXP 33
14791: AND
14792: IFFALSE 14994
14794: GO 14796
14796: DISABLE
14797: LD_INT 0
14799: PPUSH
14800: PPUSH
14801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14802: LD_ADDR_VAR 0 3
14806: PUSH
14807: LD_INT 81
14809: PUSH
14810: LD_OWVAR 2
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: ST_TO_ADDR
// if not tmp then
14838: LD_VAR 0 3
14842: NOT
14843: IFFALSE 14847
// exit ;
14845: GO 14994
// if tmp > 5 then
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 5
14854: GREATER
14855: IFFALSE 14867
// k := 5 else
14857: LD_ADDR_VAR 0 2
14861: PUSH
14862: LD_INT 5
14864: ST_TO_ADDR
14865: GO 14877
// k := tmp ;
14867: LD_ADDR_VAR 0 2
14871: PUSH
14872: LD_VAR 0 3
14876: ST_TO_ADDR
// for i := 1 to k do
14877: LD_ADDR_VAR 0 1
14881: PUSH
14882: DOUBLE
14883: LD_INT 1
14885: DEC
14886: ST_TO_ADDR
14887: LD_VAR 0 2
14891: PUSH
14892: FOR_TO
14893: IFFALSE 14992
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14895: LD_VAR 0 3
14899: PUSH
14900: LD_VAR 0 1
14904: ARRAY
14905: PPUSH
14906: LD_VAR 0 1
14910: PUSH
14911: LD_INT 4
14913: MOD
14914: PUSH
14915: LD_INT 1
14917: PLUS
14918: PPUSH
14919: CALL_OW 259
14923: PUSH
14924: LD_INT 10
14926: LESS
14927: IFFALSE 14990
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14929: LD_VAR 0 3
14933: PUSH
14934: LD_VAR 0 1
14938: ARRAY
14939: PPUSH
14940: LD_VAR 0 1
14944: PUSH
14945: LD_INT 4
14947: MOD
14948: PUSH
14949: LD_INT 1
14951: PLUS
14952: PPUSH
14953: LD_VAR 0 3
14957: PUSH
14958: LD_VAR 0 1
14962: ARRAY
14963: PPUSH
14964: LD_VAR 0 1
14968: PUSH
14969: LD_INT 4
14971: MOD
14972: PUSH
14973: LD_INT 1
14975: PLUS
14976: PPUSH
14977: CALL_OW 259
14981: PUSH
14982: LD_INT 1
14984: PLUS
14985: PPUSH
14986: CALL_OW 237
14990: GO 14892
14992: POP
14993: POP
// end ;
14994: PPOPN 3
14996: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14997: LD_EXP 26
15001: PUSH
15002: LD_EXP 34
15006: AND
15007: IFFALSE 15027
15009: GO 15011
15011: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15012: LD_INT 4
15014: PPUSH
15015: LD_OWVAR 2
15019: PPUSH
15020: LD_INT 0
15022: PPUSH
15023: CALL_OW 324
15027: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15028: LD_EXP 26
15032: PUSH
15033: LD_EXP 63
15037: AND
15038: IFFALSE 15058
15040: GO 15042
15042: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15043: LD_INT 19
15045: PPUSH
15046: LD_OWVAR 2
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 324
15058: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15059: LD_EXP 26
15063: PUSH
15064: LD_EXP 35
15068: AND
15069: IFFALSE 15171
15071: GO 15073
15073: DISABLE
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
// begin enable ;
15078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_OWVAR 2
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 34
15101: PUSH
15102: LD_INT 11
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 34
15111: PUSH
15112: LD_INT 30
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PPUSH
15128: CALL_OW 69
15132: ST_TO_ADDR
// if not tmp then
15133: LD_VAR 0 2
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15171
// for i in tmp do
15142: LD_ADDR_VAR 0 1
15146: PUSH
15147: LD_VAR 0 2
15151: PUSH
15152: FOR_IN
15153: IFFALSE 15169
// begin SetLives ( i , 0 ) ;
15155: LD_VAR 0 1
15159: PPUSH
15160: LD_INT 0
15162: PPUSH
15163: CALL_OW 234
// end ;
15167: GO 15152
15169: POP
15170: POP
// end ;
15171: PPOPN 2
15173: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15174: LD_EXP 26
15178: PUSH
15179: LD_EXP 36
15183: AND
15184: IFFALSE 15204
15186: GO 15188
15188: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15189: LD_INT 32
15191: PPUSH
15192: LD_OWVAR 2
15196: PPUSH
15197: LD_INT 0
15199: PPUSH
15200: CALL_OW 324
15204: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15205: LD_EXP 26
15209: PUSH
15210: LD_EXP 37
15214: AND
15215: IFFALSE 15396
15217: GO 15219
15219: DISABLE
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
15224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15225: LD_ADDR_VAR 0 2
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_OWVAR 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 33
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PPUSH
15256: CALL_OW 69
15260: ST_TO_ADDR
// if not tmp then
15261: LD_VAR 0 2
15265: NOT
15266: IFFALSE 15270
// exit ;
15268: GO 15396
// side := 0 ;
15270: LD_ADDR_VAR 0 3
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// for i := 1 to 8 do
15278: LD_ADDR_VAR 0 1
15282: PUSH
15283: DOUBLE
15284: LD_INT 1
15286: DEC
15287: ST_TO_ADDR
15288: LD_INT 8
15290: PUSH
15291: FOR_TO
15292: IFFALSE 15340
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15294: LD_OWVAR 2
15298: PUSH
15299: LD_VAR 0 1
15303: NONEQUAL
15304: PUSH
15305: LD_OWVAR 2
15309: PPUSH
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 81
15319: PUSH
15320: LD_INT 2
15322: EQUAL
15323: AND
15324: IFFALSE 15338
// begin side := i ;
15326: LD_ADDR_VAR 0 3
15330: PUSH
15331: LD_VAR 0 1
15335: ST_TO_ADDR
// break ;
15336: GO 15340
// end ;
15338: GO 15291
15340: POP
15341: POP
// if not side then
15342: LD_VAR 0 3
15346: NOT
15347: IFFALSE 15351
// exit ;
15349: GO 15396
// for i := 1 to tmp do
15351: LD_ADDR_VAR 0 1
15355: PUSH
15356: DOUBLE
15357: LD_INT 1
15359: DEC
15360: ST_TO_ADDR
15361: LD_VAR 0 2
15365: PUSH
15366: FOR_TO
15367: IFFALSE 15394
// if Prob ( 60 ) then
15369: LD_INT 60
15371: PPUSH
15372: CALL_OW 13
15376: IFFALSE 15392
// SetSide ( i , side ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: CALL_OW 235
15392: GO 15366
15394: POP
15395: POP
// end ;
15396: PPOPN 3
15398: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15399: LD_EXP 26
15403: PUSH
15404: LD_EXP 39
15408: AND
15409: IFFALSE 15528
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15417: LD_ADDR_VAR 0 1
15421: PUSH
15422: LD_INT 22
15424: PUSH
15425: LD_OWVAR 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 21
15436: PUSH
15437: LD_INT 1
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 3
15446: PUSH
15447: LD_INT 23
15449: PUSH
15450: LD_INT 0
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: FOR_IN
15472: IFFALSE 15526
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 257
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: LD_INT 4
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: IN
15502: IFFALSE 15524
// SetClass ( un , rand ( 1 , 4 ) ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: LD_INT 4
15514: PPUSH
15515: CALL_OW 12
15519: PPUSH
15520: CALL_OW 336
15524: GO 15471
15526: POP
15527: POP
// end ;
15528: PPOPN 1
15530: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15531: LD_EXP 26
15535: PUSH
15536: LD_EXP 38
15540: AND
15541: IFFALSE 15620
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15549: LD_ADDR_VAR 0 1
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_OWVAR 2
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 3
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: ST_TO_ADDR
// if not tmp then
15585: LD_VAR 0 1
15589: NOT
15590: IFFALSE 15594
// exit ;
15592: GO 15620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15594: LD_VAR 0 1
15598: PUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 12
15611: ARRAY
15612: PPUSH
15613: LD_INT 100
15615: PPUSH
15616: CALL_OW 234
// end ;
15620: PPOPN 1
15622: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15623: LD_EXP 26
15627: PUSH
15628: LD_EXP 40
15632: AND
15633: IFFALSE 15731
15635: GO 15637
15637: DISABLE
15638: LD_INT 0
15640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15641: LD_ADDR_VAR 0 1
15645: PUSH
15646: LD_INT 22
15648: PUSH
15649: LD_OWVAR 2
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 21
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: ST_TO_ADDR
// if not tmp then
15677: LD_VAR 0 1
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15731
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15686: LD_VAR 0 1
15690: PUSH
15691: LD_INT 1
15693: PPUSH
15694: LD_VAR 0 1
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: LD_INT 4
15710: PPUSH
15711: CALL_OW 12
15715: PPUSH
15716: LD_INT 3000
15718: PPUSH
15719: LD_INT 9000
15721: PPUSH
15722: CALL_OW 12
15726: PPUSH
15727: CALL_OW 492
// end ;
15731: PPOPN 1
15733: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15734: LD_EXP 26
15738: PUSH
15739: LD_EXP 41
15743: AND
15744: IFFALSE 15764
15746: GO 15748
15748: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15749: LD_INT 1
15751: PPUSH
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_INT 0
15759: PPUSH
15760: CALL_OW 324
15764: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15765: LD_EXP 26
15769: PUSH
15770: LD_EXP 42
15774: AND
15775: IFFALSE 15858
15777: GO 15779
15779: DISABLE
15780: LD_INT 0
15782: PPUSH
15783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_OWVAR 2
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 21
15803: PUSH
15804: LD_INT 3
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// if not tmp then
15820: LD_VAR 0 2
15824: NOT
15825: IFFALSE 15829
// exit ;
15827: GO 15858
// for i in tmp do
15829: LD_ADDR_VAR 0 1
15833: PUSH
15834: LD_VAR 0 2
15838: PUSH
15839: FOR_IN
15840: IFFALSE 15856
// SetBLevel ( i , 10 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 10
15849: PPUSH
15850: CALL_OW 241
15854: GO 15839
15856: POP
15857: POP
// end ;
15858: PPOPN 2
15860: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15861: LD_EXP 26
15865: PUSH
15866: LD_EXP 43
15870: AND
15871: IFFALSE 15982
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
15880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15881: LD_ADDR_VAR 0 3
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_OWVAR 2
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 25
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 69
15916: ST_TO_ADDR
// if not tmp then
15917: LD_VAR 0 3
15921: NOT
15922: IFFALSE 15926
// exit ;
15924: GO 15982
// un := tmp [ rand ( 1 , tmp ) ] ;
15926: LD_ADDR_VAR 0 2
15930: PUSH
15931: LD_VAR 0 3
15935: PUSH
15936: LD_INT 1
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: CALL_OW 12
15948: ARRAY
15949: ST_TO_ADDR
// if Crawls ( un ) then
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 318
15959: IFFALSE 15970
// ComWalk ( un ) ;
15961: LD_VAR 0 2
15965: PPUSH
15966: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: LD_INT 5
15977: PPUSH
15978: CALL_OW 336
// end ;
15982: PPOPN 3
15984: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15985: LD_EXP 26
15989: PUSH
15990: LD_EXP 44
15994: AND
15995: PUSH
15996: LD_OWVAR 67
16000: PUSH
16001: LD_INT 3
16003: LESS
16004: AND
16005: IFFALSE 16024
16007: GO 16009
16009: DISABLE
// Difficulty := Difficulty + 1 ;
16010: LD_ADDR_OWVAR 67
16014: PUSH
16015: LD_OWVAR 67
16019: PUSH
16020: LD_INT 1
16022: PLUS
16023: ST_TO_ADDR
16024: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16025: LD_EXP 26
16029: PUSH
16030: LD_EXP 45
16034: AND
16035: IFFALSE 16138
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
// begin for i := 1 to 5 do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: DOUBLE
16049: LD_INT 1
16051: DEC
16052: ST_TO_ADDR
16053: LD_INT 5
16055: PUSH
16056: FOR_TO
16057: IFFALSE 16136
// begin uc_nation := nation_nature ;
16059: LD_ADDR_OWVAR 21
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// uc_side := 0 ;
16067: LD_ADDR_OWVAR 20
16071: PUSH
16072: LD_INT 0
16074: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16075: LD_ADDR_OWVAR 29
16079: PUSH
16080: LD_INT 12
16082: PUSH
16083: LD_INT 12
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ST_TO_ADDR
// hc_agressivity := 20 ;
16090: LD_ADDR_OWVAR 35
16094: PUSH
16095: LD_INT 20
16097: ST_TO_ADDR
// hc_class := class_tiger ;
16098: LD_ADDR_OWVAR 28
16102: PUSH
16103: LD_INT 14
16105: ST_TO_ADDR
// hc_gallery :=  ;
16106: LD_ADDR_OWVAR 33
16110: PUSH
16111: LD_STRING 
16113: ST_TO_ADDR
// hc_name :=  ;
16114: LD_ADDR_OWVAR 26
16118: PUSH
16119: LD_STRING 
16121: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16122: CALL_OW 44
16126: PPUSH
16127: LD_INT 0
16129: PPUSH
16130: CALL_OW 51
// end ;
16134: GO 16056
16136: POP
16137: POP
// end ;
16138: PPOPN 1
16140: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16141: LD_EXP 26
16145: PUSH
16146: LD_EXP 46
16150: AND
16151: IFFALSE 16160
16153: GO 16155
16155: DISABLE
// StreamSibBomb ;
16156: CALL 16161 0 0
16160: END
// export function StreamSibBomb ; var i , x , y ; begin
16161: LD_INT 0
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
// result := false ;
16167: LD_ADDR_VAR 0 1
16171: PUSH
16172: LD_INT 0
16174: ST_TO_ADDR
// for i := 1 to 16 do
16175: LD_ADDR_VAR 0 2
16179: PUSH
16180: DOUBLE
16181: LD_INT 1
16183: DEC
16184: ST_TO_ADDR
16185: LD_INT 16
16187: PUSH
16188: FOR_TO
16189: IFFALSE 16388
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_INT 10
16198: PUSH
16199: LD_INT 20
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 40
16207: PUSH
16208: LD_INT 50
16210: PUSH
16211: LD_INT 60
16213: PUSH
16214: LD_INT 70
16216: PUSH
16217: LD_INT 80
16219: PUSH
16220: LD_INT 90
16222: PUSH
16223: LD_INT 100
16225: PUSH
16226: LD_INT 110
16228: PUSH
16229: LD_INT 120
16231: PUSH
16232: LD_INT 130
16234: PUSH
16235: LD_INT 140
16237: PUSH
16238: LD_INT 150
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_INT 15
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16270: LD_ADDR_VAR 0 4
16274: PUSH
16275: LD_INT 10
16277: PUSH
16278: LD_INT 20
16280: PUSH
16281: LD_INT 30
16283: PUSH
16284: LD_INT 40
16286: PUSH
16287: LD_INT 50
16289: PUSH
16290: LD_INT 60
16292: PUSH
16293: LD_INT 70
16295: PUSH
16296: LD_INT 80
16298: PUSH
16299: LD_INT 90
16301: PUSH
16302: LD_INT 100
16304: PUSH
16305: LD_INT 110
16307: PUSH
16308: LD_INT 120
16310: PUSH
16311: LD_INT 130
16313: PUSH
16314: LD_INT 140
16316: PUSH
16317: LD_INT 150
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 1
16339: PPUSH
16340: LD_INT 15
16342: PPUSH
16343: CALL_OW 12
16347: ARRAY
16348: ST_TO_ADDR
// if ValidHex ( x , y ) then
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_VAR 0 4
16358: PPUSH
16359: CALL_OW 488
16363: IFFALSE 16386
// begin result := [ x , y ] ;
16365: LD_ADDR_VAR 0 1
16369: PUSH
16370: LD_VAR 0 3
16374: PUSH
16375: LD_VAR 0 4
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: ST_TO_ADDR
// break ;
16384: GO 16388
// end ; end ;
16386: GO 16188
16388: POP
16389: POP
// if result then
16390: LD_VAR 0 1
16394: IFFALSE 16454
// begin ToLua ( playSibBomb() ) ;
16396: LD_STRING playSibBomb()
16398: PPUSH
16399: CALL_OW 559
// wait ( 0 0$14 ) ;
16403: LD_INT 490
16405: PPUSH
16406: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16410: LD_VAR 0 1
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PPUSH
16419: LD_VAR 0 1
16423: PUSH
16424: LD_INT 2
16426: ARRAY
16427: PPUSH
16428: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16432: LD_VAR 0 1
16436: PUSH
16437: LD_INT 1
16439: ARRAY
16440: PPUSH
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 2
16448: ARRAY
16449: PPUSH
16450: CALL_OW 429
// end ; end ;
16454: LD_VAR 0 1
16458: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16459: LD_EXP 26
16463: PUSH
16464: LD_EXP 48
16468: AND
16469: IFFALSE 16481
16471: GO 16473
16473: DISABLE
// YouLost (  ) ;
16474: LD_STRING 
16476: PPUSH
16477: CALL_OW 104
16481: END
// every 0 0$1 trigger StreamModeActive and sFog do
16482: LD_EXP 26
16486: PUSH
16487: LD_EXP 47
16491: AND
16492: IFFALSE 16506
16494: GO 16496
16496: DISABLE
// FogOff ( your_side ) ;
16497: LD_OWVAR 2
16501: PPUSH
16502: CALL_OW 344
16506: END
// every 0 0$1 trigger StreamModeActive and sSun do
16507: LD_EXP 26
16511: PUSH
16512: LD_EXP 49
16516: AND
16517: IFFALSE 16545
16519: GO 16521
16521: DISABLE
// begin solar_recharge_percent := 0 ;
16522: LD_ADDR_OWVAR 79
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16530: LD_INT 10500
16532: PPUSH
16533: CALL_OW 67
// solar_recharge_percent := 100 ;
16537: LD_ADDR_OWVAR 79
16541: PUSH
16542: LD_INT 100
16544: ST_TO_ADDR
// end ;
16545: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16546: LD_EXP 26
16550: PUSH
16551: LD_EXP 50
16555: AND
16556: IFFALSE 16795
16558: GO 16560
16560: DISABLE
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
// begin tmp := [ ] ;
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: EMPTY
16572: ST_TO_ADDR
// for i := 1 to 6 do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: DOUBLE
16579: LD_INT 1
16581: DEC
16582: ST_TO_ADDR
16583: LD_INT 6
16585: PUSH
16586: FOR_TO
16587: IFFALSE 16692
// begin uc_nation := nation_nature ;
16589: LD_ADDR_OWVAR 21
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// uc_side := 0 ;
16597: LD_ADDR_OWVAR 20
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16605: LD_ADDR_OWVAR 29
16609: PUSH
16610: LD_INT 12
16612: PUSH
16613: LD_INT 12
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: ST_TO_ADDR
// hc_agressivity := 20 ;
16620: LD_ADDR_OWVAR 35
16624: PUSH
16625: LD_INT 20
16627: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16628: LD_ADDR_OWVAR 28
16632: PUSH
16633: LD_INT 17
16635: ST_TO_ADDR
// hc_gallery :=  ;
16636: LD_ADDR_OWVAR 33
16640: PUSH
16641: LD_STRING 
16643: ST_TO_ADDR
// hc_name :=  ;
16644: LD_ADDR_OWVAR 26
16648: PUSH
16649: LD_STRING 
16651: ST_TO_ADDR
// un := CreateHuman ;
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: CALL_OW 44
16661: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16662: LD_VAR 0 2
16666: PPUSH
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 51
// tmp := tmp ^ un ;
16674: LD_ADDR_VAR 0 3
16678: PUSH
16679: LD_VAR 0 3
16683: PUSH
16684: LD_VAR 0 2
16688: ADD
16689: ST_TO_ADDR
// end ;
16690: GO 16586
16692: POP
16693: POP
// repeat wait ( 0 0$1 ) ;
16694: LD_INT 35
16696: PPUSH
16697: CALL_OW 67
// for un in tmp do
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_VAR 0 3
16710: PUSH
16711: FOR_IN
16712: IFFALSE 16786
// begin if IsDead ( un ) then
16714: LD_VAR 0 2
16718: PPUSH
16719: CALL_OW 301
16723: IFFALSE 16743
// begin tmp := tmp diff un ;
16725: LD_ADDR_VAR 0 3
16729: PUSH
16730: LD_VAR 0 3
16734: PUSH
16735: LD_VAR 0 2
16739: DIFF
16740: ST_TO_ADDR
// continue ;
16741: GO 16711
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16743: LD_VAR 0 2
16747: PPUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 22
16753: PUSH
16754: LD_INT 0
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PPUSH
16765: CALL_OW 69
16769: PPUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 74
16779: PPUSH
16780: CALL_OW 115
// end ;
16784: GO 16711
16786: POP
16787: POP
// until not tmp ;
16788: LD_VAR 0 3
16792: NOT
16793: IFFALSE 16694
// end ;
16795: PPOPN 3
16797: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16798: LD_EXP 26
16802: PUSH
16803: LD_EXP 51
16807: AND
16808: IFFALSE 16862
16810: GO 16812
16812: DISABLE
// begin ToLua ( displayTroll(); ) ;
16813: LD_STRING displayTroll();
16815: PPUSH
16816: CALL_OW 559
// wait ( 3 3$00 ) ;
16820: LD_INT 6300
16822: PPUSH
16823: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16827: LD_STRING hideTroll();
16829: PPUSH
16830: CALL_OW 559
// wait ( 1 1$00 ) ;
16834: LD_INT 2100
16836: PPUSH
16837: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16841: LD_STRING displayTroll();
16843: PPUSH
16844: CALL_OW 559
// wait ( 1 1$00 ) ;
16848: LD_INT 2100
16850: PPUSH
16851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16855: LD_STRING hideTroll();
16857: PPUSH
16858: CALL_OW 559
// end ;
16862: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16863: LD_EXP 26
16867: PUSH
16868: LD_EXP 52
16872: AND
16873: IFFALSE 16936
16875: GO 16877
16877: DISABLE
16878: LD_INT 0
16880: PPUSH
// begin p := 0 ;
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// repeat game_speed := 1 ;
16889: LD_ADDR_OWVAR 65
16893: PUSH
16894: LD_INT 1
16896: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16897: LD_INT 35
16899: PPUSH
16900: CALL_OW 67
// p := p + 1 ;
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_VAR 0 1
16913: PUSH
16914: LD_INT 1
16916: PLUS
16917: ST_TO_ADDR
// until p >= 60 ;
16918: LD_VAR 0 1
16922: PUSH
16923: LD_INT 60
16925: GREATEREQUAL
16926: IFFALSE 16889
// game_speed := 4 ;
16928: LD_ADDR_OWVAR 65
16932: PUSH
16933: LD_INT 4
16935: ST_TO_ADDR
// end ;
16936: PPOPN 1
16938: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16939: LD_EXP 26
16943: PUSH
16944: LD_EXP 53
16948: AND
16949: IFFALSE 17095
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16958: LD_ADDR_VAR 0 1
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_OWVAR 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 30
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 1
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PPUSH
17007: CALL_OW 69
17011: ST_TO_ADDR
// if not depot then
17012: LD_VAR 0 1
17016: NOT
17017: IFFALSE 17021
// exit ;
17019: GO 17095
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17021: LD_ADDR_VAR 0 2
17025: PUSH
17026: LD_VAR 0 1
17030: PUSH
17031: LD_INT 1
17033: PPUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 12
17043: ARRAY
17044: PPUSH
17045: CALL_OW 274
17049: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17050: LD_VAR 0 2
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: LD_INT 0
17060: PPUSH
17061: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17065: LD_VAR 0 2
17069: PPUSH
17070: LD_INT 2
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17080: LD_VAR 0 2
17084: PPUSH
17085: LD_INT 3
17087: PPUSH
17088: LD_INT 0
17090: PPUSH
17091: CALL_OW 277
// end ;
17095: PPOPN 2
17097: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17098: LD_EXP 26
17102: PUSH
17103: LD_EXP 54
17107: AND
17108: IFFALSE 17205
17110: GO 17112
17112: DISABLE
17113: LD_INT 0
17115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_OWVAR 2
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 3
17145: PUSH
17146: LD_INT 23
17148: PUSH
17149: LD_INT 0
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: ST_TO_ADDR
// if not tmp then
17170: LD_VAR 0 1
17174: NOT
17175: IFFALSE 17179
// exit ;
17177: GO 17205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17179: LD_VAR 0 1
17183: PUSH
17184: LD_INT 1
17186: PPUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 12
17196: ARRAY
17197: PPUSH
17198: LD_INT 200
17200: PPUSH
17201: CALL_OW 234
// end ;
17205: PPOPN 1
17207: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17208: LD_EXP 26
17212: PUSH
17213: LD_EXP 55
17217: AND
17218: IFFALSE 17297
17220: GO 17222
17222: DISABLE
17223: LD_INT 0
17225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17226: LD_ADDR_VAR 0 1
17230: PUSH
17231: LD_INT 22
17233: PUSH
17234: LD_OWVAR 2
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: ST_TO_ADDR
// if not tmp then
17262: LD_VAR 0 1
17266: NOT
17267: IFFALSE 17271
// exit ;
17269: GO 17297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17271: LD_VAR 0 1
17275: PUSH
17276: LD_INT 1
17278: PPUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 12
17288: ARRAY
17289: PPUSH
17290: LD_INT 60
17292: PPUSH
17293: CALL_OW 234
// end ;
17297: PPOPN 1
17299: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17300: LD_EXP 26
17304: PUSH
17305: LD_EXP 56
17309: AND
17310: IFFALSE 17409
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
// begin enable ;
17319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 61
17339: PUSH
17340: EMPTY
17341: LIST
17342: PUSH
17343: LD_INT 33
17345: PUSH
17346: LD_INT 2
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// if not tmp then
17363: LD_VAR 0 1
17367: NOT
17368: IFFALSE 17372
// exit ;
17370: GO 17409
// for i in tmp do
17372: LD_ADDR_VAR 0 2
17376: PUSH
17377: LD_VAR 0 1
17381: PUSH
17382: FOR_IN
17383: IFFALSE 17407
// if IsControledBy ( i ) then
17385: LD_VAR 0 2
17389: PPUSH
17390: CALL_OW 312
17394: IFFALSE 17405
// ComUnlink ( i ) ;
17396: LD_VAR 0 2
17400: PPUSH
17401: CALL_OW 136
17405: GO 17382
17407: POP
17408: POP
// end ;
17409: PPOPN 2
17411: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17412: LD_EXP 26
17416: PUSH
17417: LD_EXP 57
17421: AND
17422: IFFALSE 17562
17424: GO 17426
17426: DISABLE
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
// begin ToLua ( displayPowell(); ) ;
17431: LD_STRING displayPowell();
17433: PPUSH
17434: CALL_OW 559
// uc_side := 0 ;
17438: LD_ADDR_OWVAR 20
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// uc_nation := 2 ;
17446: LD_ADDR_OWVAR 21
17450: PUSH
17451: LD_INT 2
17453: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17454: LD_ADDR_OWVAR 37
17458: PUSH
17459: LD_INT 14
17461: ST_TO_ADDR
// vc_engine := engine_siberite ;
17462: LD_ADDR_OWVAR 39
17466: PUSH
17467: LD_INT 3
17469: ST_TO_ADDR
// vc_control := control_apeman ;
17470: LD_ADDR_OWVAR 38
17474: PUSH
17475: LD_INT 5
17477: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17478: LD_ADDR_OWVAR 40
17482: PUSH
17483: LD_INT 29
17485: ST_TO_ADDR
// un := CreateVehicle ;
17486: LD_ADDR_VAR 0 2
17490: PUSH
17491: CALL_OW 45
17495: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17496: LD_VAR 0 2
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17508: LD_INT 35
17510: PPUSH
17511: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17515: LD_VAR 0 2
17519: PPUSH
17520: LD_INT 22
17522: PUSH
17523: LD_OWVAR 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: PPUSH
17537: LD_VAR 0 2
17541: PPUSH
17542: CALL_OW 74
17546: PPUSH
17547: CALL_OW 115
// until IsDead ( un ) ;
17551: LD_VAR 0 2
17555: PPUSH
17556: CALL_OW 301
17560: IFFALSE 17508
// end ;
17562: PPOPN 2
17564: END
// every 0 0$1 trigger StreamModeActive and sStu do
17565: LD_EXP 26
17569: PUSH
17570: LD_EXP 65
17574: AND
17575: IFFALSE 17591
17577: GO 17579
17579: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17580: LD_STRING displayStucuk();
17582: PPUSH
17583: CALL_OW 559
// ResetFog ;
17587: CALL_OW 335
// end ;
17591: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17592: LD_EXP 26
17596: PUSH
17597: LD_EXP 58
17601: AND
17602: IFFALSE 17743
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17611: LD_ADDR_VAR 0 2
17615: PUSH
17616: LD_INT 22
17618: PUSH
17619: LD_OWVAR 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 21
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not tmp then
17647: LD_VAR 0 2
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17743
// un := tmp [ rand ( 1 , tmp ) ] ;
17656: LD_ADDR_VAR 0 1
17660: PUSH
17661: LD_VAR 0 2
17665: PUSH
17666: LD_INT 1
17668: PPUSH
17669: LD_VAR 0 2
17673: PPUSH
17674: CALL_OW 12
17678: ARRAY
17679: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 0
17687: PPUSH
17688: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17692: LD_VAR 0 1
17696: PPUSH
17697: LD_OWVAR 3
17701: PUSH
17702: LD_VAR 0 1
17706: DIFF
17707: PPUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 74
17717: PPUSH
17718: CALL_OW 115
// wait ( 0 0$20 ) ;
17722: LD_INT 700
17724: PPUSH
17725: CALL_OW 67
// SetSide ( un , your_side ) ;
17729: LD_VAR 0 1
17733: PPUSH
17734: LD_OWVAR 2
17738: PPUSH
17739: CALL_OW 235
// end ;
17743: PPOPN 2
17745: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17746: LD_EXP 26
17750: PUSH
17751: LD_EXP 59
17755: AND
17756: IFFALSE 17862
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_OWVAR 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: LD_INT 30
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 30
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 69
17817: ST_TO_ADDR
// if not depot then
17818: LD_VAR 0 1
17822: NOT
17823: IFFALSE 17827
// exit ;
17825: GO 17862
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17827: LD_VAR 0 1
17831: PUSH
17832: LD_INT 1
17834: ARRAY
17835: PPUSH
17836: CALL_OW 250
17840: PPUSH
17841: LD_VAR 0 1
17845: PUSH
17846: LD_INT 1
17848: ARRAY
17849: PPUSH
17850: CALL_OW 251
17854: PPUSH
17855: LD_INT 70
17857: PPUSH
17858: CALL_OW 495
// end ;
17862: PPOPN 1
17864: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17865: LD_EXP 26
17869: PUSH
17870: LD_EXP 60
17874: AND
17875: IFFALSE 18086
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17887: LD_ADDR_VAR 0 5
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 21
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: ST_TO_ADDR
// if not tmp then
17923: LD_VAR 0 5
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 18086
// for i in tmp do
17932: LD_ADDR_VAR 0 1
17936: PUSH
17937: LD_VAR 0 5
17941: PUSH
17942: FOR_IN
17943: IFFALSE 18084
// begin d := rand ( 0 , 5 ) ;
17945: LD_ADDR_VAR 0 4
17949: PUSH
17950: LD_INT 0
17952: PPUSH
17953: LD_INT 5
17955: PPUSH
17956: CALL_OW 12
17960: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17961: LD_ADDR_VAR 0 2
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 250
17975: PPUSH
17976: LD_VAR 0 4
17980: PPUSH
17981: LD_INT 3
17983: PPUSH
17984: LD_INT 12
17986: PPUSH
17987: CALL_OW 12
17991: PPUSH
17992: CALL_OW 272
17996: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 251
18011: PPUSH
18012: LD_VAR 0 4
18016: PPUSH
18017: LD_INT 3
18019: PPUSH
18020: LD_INT 12
18022: PPUSH
18023: CALL_OW 12
18027: PPUSH
18028: CALL_OW 273
18032: ST_TO_ADDR
// if ValidHex ( x , y ) then
18033: LD_VAR 0 2
18037: PPUSH
18038: LD_VAR 0 3
18042: PPUSH
18043: CALL_OW 488
18047: IFFALSE 18082
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18049: LD_VAR 0 1
18053: PPUSH
18054: LD_VAR 0 2
18058: PPUSH
18059: LD_VAR 0 3
18063: PPUSH
18064: LD_INT 3
18066: PPUSH
18067: LD_INT 6
18069: PPUSH
18070: CALL_OW 12
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL_OW 483
// end ;
18082: GO 17942
18084: POP
18085: POP
// end ;
18086: PPOPN 5
18088: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18089: LD_EXP 26
18093: PUSH
18094: LD_EXP 61
18098: AND
18099: IFFALSE 18193
18101: GO 18103
18103: DISABLE
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_OWVAR 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 32
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 21
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 69
18154: ST_TO_ADDR
// if not tmp then
18155: LD_VAR 0 2
18159: NOT
18160: IFFALSE 18164
// exit ;
18162: GO 18193
// for i in tmp do
18164: LD_ADDR_VAR 0 1
18168: PUSH
18169: LD_VAR 0 2
18173: PUSH
18174: FOR_IN
18175: IFFALSE 18191
// SetFuel ( i , 0 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 0
18184: PPUSH
18185: CALL_OW 240
18189: GO 18174
18191: POP
18192: POP
// end ;
18193: PPOPN 2
18195: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18196: LD_EXP 26
18200: PUSH
18201: LD_EXP 62
18205: AND
18206: IFFALSE 18272
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18214: LD_ADDR_VAR 0 1
18218: PUSH
18219: LD_INT 22
18221: PUSH
18222: LD_OWVAR 2
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 30
18233: PUSH
18234: LD_INT 29
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PPUSH
18245: CALL_OW 69
18249: ST_TO_ADDR
// if not tmp then
18250: LD_VAR 0 1
18254: NOT
18255: IFFALSE 18259
// exit ;
18257: GO 18272
// DestroyUnit ( tmp [ 1 ] ) ;
18259: LD_VAR 0 1
18263: PUSH
18264: LD_INT 1
18266: ARRAY
18267: PPUSH
18268: CALL_OW 65
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18275: LD_EXP 26
18279: PUSH
18280: LD_EXP 64
18284: AND
18285: IFFALSE 18414
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin uc_side := 0 ;
18293: LD_ADDR_OWVAR 20
18297: PUSH
18298: LD_INT 0
18300: ST_TO_ADDR
// uc_nation := nation_arabian ;
18301: LD_ADDR_OWVAR 21
18305: PUSH
18306: LD_INT 2
18308: ST_TO_ADDR
// hc_gallery :=  ;
18309: LD_ADDR_OWVAR 33
18313: PUSH
18314: LD_STRING 
18316: ST_TO_ADDR
// hc_name :=  ;
18317: LD_ADDR_OWVAR 26
18321: PUSH
18322: LD_STRING 
18324: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18325: LD_INT 1
18327: PPUSH
18328: LD_INT 11
18330: PPUSH
18331: LD_INT 10
18333: PPUSH
18334: CALL_OW 380
// un := CreateHuman ;
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: CALL_OW 44
18347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18348: LD_VAR 0 1
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18360: LD_INT 35
18362: PPUSH
18363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_INT 22
18374: PUSH
18375: LD_OWVAR 2
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: PPUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 74
18398: PPUSH
18399: CALL_OW 115
// until IsDead ( un ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: CALL_OW 301
18412: IFFALSE 18360
// end ;
18414: PPOPN 1
18416: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18417: LD_EXP 26
18421: PUSH
18422: LD_EXP 66
18426: AND
18427: IFFALSE 18439
18429: GO 18431
18431: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18432: LD_STRING earthquake(getX(game), 0, 32)
18434: PPUSH
18435: CALL_OW 559
18439: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18440: LD_EXP 26
18444: PUSH
18445: LD_EXP 67
18449: AND
18450: IFFALSE 18541
18452: GO 18454
18454: DISABLE
18455: LD_INT 0
18457: PPUSH
// begin enable ;
18458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: LD_INT 22
18466: PUSH
18467: LD_OWVAR 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 21
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 33
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: PPUSH
18501: CALL_OW 69
18505: ST_TO_ADDR
// if not tmp then
18506: LD_VAR 0 1
18510: NOT
18511: IFFALSE 18515
// exit ;
18513: GO 18541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18515: LD_VAR 0 1
18519: PUSH
18520: LD_INT 1
18522: PPUSH
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL_OW 12
18532: ARRAY
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 234
// end ;
18541: PPOPN 1
18543: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18544: LD_EXP 26
18548: PUSH
18549: LD_EXP 68
18553: AND
18554: IFFALSE 18695
18556: GO 18558
18558: DISABLE
18559: LD_INT 0
18561: PPUSH
18562: PPUSH
18563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18564: LD_ADDR_VAR 0 3
18568: PUSH
18569: LD_INT 22
18571: PUSH
18572: LD_OWVAR 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 25
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: ST_TO_ADDR
// if not tmp then
18600: LD_VAR 0 3
18604: NOT
18605: IFFALSE 18609
// exit ;
18607: GO 18695
// un := tmp [ rand ( 1 , tmp ) ] ;
18609: LD_ADDR_VAR 0 2
18613: PUSH
18614: LD_VAR 0 3
18618: PUSH
18619: LD_INT 1
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: CALL_OW 12
18631: ARRAY
18632: ST_TO_ADDR
// if Crawls ( un ) then
18633: LD_VAR 0 2
18637: PPUSH
18638: CALL_OW 318
18642: IFFALSE 18653
// ComWalk ( un ) ;
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18653: LD_VAR 0 2
18657: PPUSH
18658: LD_INT 9
18660: PPUSH
18661: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18665: LD_INT 28
18667: PPUSH
18668: LD_OWVAR 2
18672: PPUSH
18673: LD_INT 2
18675: PPUSH
18676: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18680: LD_INT 29
18682: PPUSH
18683: LD_OWVAR 2
18687: PPUSH
18688: LD_INT 2
18690: PPUSH
18691: CALL_OW 322
// end ;
18695: PPOPN 3
18697: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18698: LD_EXP 26
18702: PUSH
18703: LD_EXP 69
18707: AND
18708: IFFALSE 18819
18710: GO 18712
18712: DISABLE
18713: LD_INT 0
18715: PPUSH
18716: PPUSH
18717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18718: LD_ADDR_VAR 0 3
18722: PUSH
18723: LD_INT 22
18725: PUSH
18726: LD_OWVAR 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 25
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: ST_TO_ADDR
// if not tmp then
18754: LD_VAR 0 3
18758: NOT
18759: IFFALSE 18763
// exit ;
18761: GO 18819
// un := tmp [ rand ( 1 , tmp ) ] ;
18763: LD_ADDR_VAR 0 2
18767: PUSH
18768: LD_VAR 0 3
18772: PUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_VAR 0 3
18780: PPUSH
18781: CALL_OW 12
18785: ARRAY
18786: ST_TO_ADDR
// if Crawls ( un ) then
18787: LD_VAR 0 2
18791: PPUSH
18792: CALL_OW 318
18796: IFFALSE 18807
// ComWalk ( un ) ;
18798: LD_VAR 0 2
18802: PPUSH
18803: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18807: LD_VAR 0 2
18811: PPUSH
18812: LD_INT 8
18814: PPUSH
18815: CALL_OW 336
// end ;
18819: PPOPN 3
18821: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18822: LD_EXP 26
18826: PUSH
18827: LD_EXP 70
18831: AND
18832: IFFALSE 18976
18834: GO 18836
18836: DISABLE
18837: LD_INT 0
18839: PPUSH
18840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 22
18848: PUSH
18849: LD_OWVAR 2
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 21
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 34
18873: PUSH
18874: LD_INT 12
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 34
18883: PUSH
18884: LD_INT 51
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 34
18893: PUSH
18894: LD_INT 32
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: PPUSH
18912: CALL_OW 69
18916: ST_TO_ADDR
// if not tmp then
18917: LD_VAR 0 2
18921: NOT
18922: IFFALSE 18926
// exit ;
18924: GO 18976
// for i in tmp do
18926: LD_ADDR_VAR 0 1
18930: PUSH
18931: LD_VAR 0 2
18935: PUSH
18936: FOR_IN
18937: IFFALSE 18974
// if GetCargo ( i , mat_artifact ) = 0 then
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 4
18946: PPUSH
18947: CALL_OW 289
18951: PUSH
18952: LD_INT 0
18954: EQUAL
18955: IFFALSE 18972
// SetCargo ( i , mat_siberit , 100 ) ;
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 3
18964: PPUSH
18965: LD_INT 100
18967: PPUSH
18968: CALL_OW 290
18972: GO 18936
18974: POP
18975: POP
// end ;
18976: PPOPN 2
18978: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18979: LD_EXP 26
18983: PUSH
18984: LD_EXP 71
18988: AND
18989: IFFALSE 19172
18991: GO 18993
18993: DISABLE
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_OWVAR 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 69
19019: ST_TO_ADDR
// if not tmp then
19020: LD_VAR 0 2
19024: NOT
19025: IFFALSE 19029
// exit ;
19027: GO 19172
// for i := 1 to 2 do
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: DOUBLE
19035: LD_INT 1
19037: DEC
19038: ST_TO_ADDR
19039: LD_INT 2
19041: PUSH
19042: FOR_TO
19043: IFFALSE 19170
// begin uc_side := your_side ;
19045: LD_ADDR_OWVAR 20
19049: PUSH
19050: LD_OWVAR 2
19054: ST_TO_ADDR
// uc_nation := nation_american ;
19055: LD_ADDR_OWVAR 21
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// vc_chassis := us_morphling ;
19063: LD_ADDR_OWVAR 37
19067: PUSH
19068: LD_INT 5
19070: ST_TO_ADDR
// vc_engine := engine_siberite ;
19071: LD_ADDR_OWVAR 39
19075: PUSH
19076: LD_INT 3
19078: ST_TO_ADDR
// vc_control := control_computer ;
19079: LD_ADDR_OWVAR 38
19083: PUSH
19084: LD_INT 3
19086: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19087: LD_ADDR_OWVAR 40
19091: PUSH
19092: LD_INT 10
19094: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19095: LD_VAR 0 2
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: CALL_OW 310
19108: NOT
19109: IFFALSE 19156
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19111: CALL_OW 45
19115: PPUSH
19116: LD_VAR 0 2
19120: PUSH
19121: LD_INT 1
19123: ARRAY
19124: PPUSH
19125: CALL_OW 250
19129: PPUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 1
19137: ARRAY
19138: PPUSH
19139: CALL_OW 251
19143: PPUSH
19144: LD_INT 12
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 50
19154: GO 19168
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19156: CALL_OW 45
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: CALL_OW 51
// end ;
19168: GO 19042
19170: POP
19171: POP
// end ;
19172: PPOPN 2
19174: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19175: LD_EXP 26
19179: PUSH
19180: LD_EXP 72
19184: AND
19185: IFFALSE 19407
19187: GO 19189
19189: DISABLE
19190: LD_INT 0
19192: PPUSH
19193: PPUSH
19194: PPUSH
19195: PPUSH
19196: PPUSH
19197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19198: LD_ADDR_VAR 0 6
19202: PUSH
19203: LD_INT 22
19205: PUSH
19206: LD_OWVAR 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 21
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: LD_INT 23
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 69
19251: ST_TO_ADDR
// if not tmp then
19252: LD_VAR 0 6
19256: NOT
19257: IFFALSE 19261
// exit ;
19259: GO 19407
// s1 := rand ( 1 , 4 ) ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_INT 4
19271: PPUSH
19272: CALL_OW 12
19276: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19277: LD_ADDR_VAR 0 4
19281: PUSH
19282: LD_VAR 0 6
19286: PUSH
19287: LD_INT 1
19289: ARRAY
19290: PPUSH
19291: LD_VAR 0 2
19295: PPUSH
19296: CALL_OW 259
19300: ST_TO_ADDR
// if s1 = 1 then
19301: LD_VAR 0 2
19305: PUSH
19306: LD_INT 1
19308: EQUAL
19309: IFFALSE 19329
// s2 := rand ( 2 , 4 ) else
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 2
19318: PPUSH
19319: LD_INT 4
19321: PPUSH
19322: CALL_OW 12
19326: ST_TO_ADDR
19327: GO 19337
// s2 := 1 ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19337: LD_ADDR_VAR 0 5
19341: PUSH
19342: LD_VAR 0 6
19346: PUSH
19347: LD_INT 1
19349: ARRAY
19350: PPUSH
19351: LD_VAR 0 3
19355: PPUSH
19356: CALL_OW 259
19360: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19361: LD_VAR 0 6
19365: PUSH
19366: LD_INT 1
19368: ARRAY
19369: PPUSH
19370: LD_VAR 0 2
19374: PPUSH
19375: LD_VAR 0 5
19379: PPUSH
19380: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19384: LD_VAR 0 6
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PPUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_VAR 0 4
19402: PPUSH
19403: CALL_OW 237
// end ;
19407: PPOPN 6
19409: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19410: LD_EXP 26
19414: PUSH
19415: LD_EXP 73
19419: AND
19420: IFFALSE 19499
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19428: LD_ADDR_VAR 0 1
19432: PUSH
19433: LD_INT 22
19435: PUSH
19436: LD_OWVAR 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 30
19447: PUSH
19448: LD_INT 3
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PPUSH
19459: CALL_OW 69
19463: ST_TO_ADDR
// if not tmp then
19464: LD_VAR 0 1
19468: NOT
19469: IFFALSE 19473
// exit ;
19471: GO 19499
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19473: LD_VAR 0 1
19477: PUSH
19478: LD_INT 1
19480: PPUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 12
19490: ARRAY
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 234
// end ;
19499: PPOPN 1
19501: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19502: LD_EXP 26
19506: PUSH
19507: LD_EXP 74
19511: AND
19512: IFFALSE 19624
19514: GO 19516
19516: DISABLE
19517: LD_INT 0
19519: PPUSH
19520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19521: LD_ADDR_VAR 0 2
19525: PUSH
19526: LD_INT 22
19528: PUSH
19529: LD_OWVAR 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 30
19543: PUSH
19544: LD_INT 27
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 30
19553: PUSH
19554: LD_INT 26
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 30
19563: PUSH
19564: LD_INT 28
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: ST_TO_ADDR
// if not tmp then
19586: LD_VAR 0 2
19590: NOT
19591: IFFALSE 19595
// exit ;
19593: GO 19624
// for i in tmp do
19595: LD_ADDR_VAR 0 1
19599: PUSH
19600: LD_VAR 0 2
19604: PUSH
19605: FOR_IN
19606: IFFALSE 19622
// SetLives ( i , 1 ) ;
19608: LD_VAR 0 1
19612: PPUSH
19613: LD_INT 1
19615: PPUSH
19616: CALL_OW 234
19620: GO 19605
19622: POP
19623: POP
// end ;
19624: PPOPN 2
19626: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19627: LD_EXP 26
19631: PUSH
19632: LD_EXP 75
19636: AND
19637: IFFALSE 19911
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
19646: PPUSH
// begin i := rand ( 1 , 7 ) ;
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_INT 1
19654: PPUSH
19655: LD_INT 7
19657: PPUSH
19658: CALL_OW 12
19662: ST_TO_ADDR
// case i of 1 :
19663: LD_VAR 0 1
19667: PUSH
19668: LD_INT 1
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19686
19676: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19677: LD_STRING earthquake(getX(game), 0, 32)
19679: PPUSH
19680: CALL_OW 559
19684: GO 19911
19686: LD_INT 2
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19708
19694: POP
// begin ToLua ( displayStucuk(); ) ;
19695: LD_STRING displayStucuk();
19697: PPUSH
19698: CALL_OW 559
// ResetFog ;
19702: CALL_OW 335
// end ; 3 :
19706: GO 19911
19708: LD_INT 3
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19820
19716: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19717: LD_ADDR_VAR 0 2
19721: PUSH
19722: LD_INT 22
19724: PUSH
19725: LD_OWVAR 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 25
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 69
19752: ST_TO_ADDR
// if not tmp then
19753: LD_VAR 0 2
19757: NOT
19758: IFFALSE 19762
// exit ;
19760: GO 19911
// un := tmp [ rand ( 1 , tmp ) ] ;
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: LD_VAR 0 2
19771: PUSH
19772: LD_INT 1
19774: PPUSH
19775: LD_VAR 0 2
19779: PPUSH
19780: CALL_OW 12
19784: ARRAY
19785: ST_TO_ADDR
// if Crawls ( un ) then
19786: LD_VAR 0 3
19790: PPUSH
19791: CALL_OW 318
19795: IFFALSE 19806
// ComWalk ( un ) ;
19797: LD_VAR 0 3
19801: PPUSH
19802: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19806: LD_VAR 0 3
19810: PPUSH
19811: LD_INT 8
19813: PPUSH
19814: CALL_OW 336
// end ; 4 :
19818: GO 19911
19820: LD_INT 4
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19889
19828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_OWVAR 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: LD_INT 29
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PPUSH
19860: CALL_OW 69
19864: ST_TO_ADDR
// if not tmp then
19865: LD_VAR 0 2
19869: NOT
19870: IFFALSE 19874
// exit ;
19872: GO 19911
// DestroyUnit ( tmp [ 1 ] ) ;
19874: LD_VAR 0 2
19878: PUSH
19879: LD_INT 1
19881: ARRAY
19882: PPUSH
19883: CALL_OW 65
// end ; 5 .. 7 :
19887: GO 19911
19889: LD_INT 5
19891: DOUBLE
19892: GREATEREQUAL
19893: IFFALSE 19901
19895: LD_INT 7
19897: DOUBLE
19898: LESSEQUAL
19899: IFTRUE 19903
19901: GO 19910
19903: POP
// StreamSibBomb ; end ;
19904: CALL 16161 0 0
19908: GO 19911
19910: POP
// end ;
19911: PPOPN 3
19913: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19914: LD_EXP 26
19918: PUSH
19919: LD_EXP 76
19923: AND
19924: IFFALSE 20080
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_INT 81
19941: PUSH
19942: LD_OWVAR 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 21
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PPUSH
19983: CALL_OW 69
19987: ST_TO_ADDR
// if not tmp then
19988: LD_VAR 0 2
19992: NOT
19993: IFFALSE 19997
// exit ;
19995: GO 20080
// p := 0 ;
19997: LD_ADDR_VAR 0 3
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20005: LD_INT 35
20007: PPUSH
20008: CALL_OW 67
// p := p + 1 ;
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 1
20024: PLUS
20025: ST_TO_ADDR
// for i in tmp do
20026: LD_ADDR_VAR 0 1
20030: PUSH
20031: LD_VAR 0 2
20035: PUSH
20036: FOR_IN
20037: IFFALSE 20068
// if GetLives ( i ) < 1000 then
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 256
20048: PUSH
20049: LD_INT 1000
20051: LESS
20052: IFFALSE 20066
// SetLives ( i , 1000 ) ;
20054: LD_VAR 0 1
20058: PPUSH
20059: LD_INT 1000
20061: PPUSH
20062: CALL_OW 234
20066: GO 20036
20068: POP
20069: POP
// until p > 20 ;
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 20
20077: GREATER
20078: IFFALSE 20005
// end ;
20080: PPOPN 3
20082: END
// every 0 0$1 trigger StreamModeActive and sTime do
20083: LD_EXP 26
20087: PUSH
20088: LD_EXP 77
20092: AND
20093: IFFALSE 20128
20095: GO 20097
20097: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20098: LD_INT 28
20100: PPUSH
20101: LD_OWVAR 2
20105: PPUSH
20106: LD_INT 2
20108: PPUSH
20109: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20113: LD_INT 30
20115: PPUSH
20116: LD_OWVAR 2
20120: PPUSH
20121: LD_INT 2
20123: PPUSH
20124: CALL_OW 322
// end ;
20128: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20129: LD_EXP 26
20133: PUSH
20134: LD_EXP 78
20138: AND
20139: IFFALSE 20260
20141: GO 20143
20143: DISABLE
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 22
20155: PUSH
20156: LD_OWVAR 2
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 3
20177: PUSH
20178: LD_INT 23
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: ST_TO_ADDR
// if not tmp then
20202: LD_VAR 0 2
20206: NOT
20207: IFFALSE 20211
// exit ;
20209: GO 20260
// for i in tmp do
20211: LD_ADDR_VAR 0 1
20215: PUSH
20216: LD_VAR 0 2
20220: PUSH
20221: FOR_IN
20222: IFFALSE 20258
// begin if Crawls ( i ) then
20224: LD_VAR 0 1
20228: PPUSH
20229: CALL_OW 318
20233: IFFALSE 20244
// ComWalk ( i ) ;
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 138
// SetClass ( i , 2 ) ;
20244: LD_VAR 0 1
20248: PPUSH
20249: LD_INT 2
20251: PPUSH
20252: CALL_OW 336
// end ;
20256: GO 20221
20258: POP
20259: POP
// end ;
20260: PPOPN 2
20262: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20263: LD_EXP 26
20267: PUSH
20268: LD_EXP 79
20272: AND
20273: IFFALSE 20554
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
20282: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20283: LD_OWVAR 2
20287: PPUSH
20288: LD_INT 9
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: LD_INT 1
20296: PPUSH
20297: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20301: LD_INT 9
20303: PPUSH
20304: LD_OWVAR 2
20308: PPUSH
20309: CALL_OW 343
// uc_side := 9 ;
20313: LD_ADDR_OWVAR 20
20317: PUSH
20318: LD_INT 9
20320: ST_TO_ADDR
// uc_nation := 2 ;
20321: LD_ADDR_OWVAR 21
20325: PUSH
20326: LD_INT 2
20328: ST_TO_ADDR
// hc_name := Dark Warrior ;
20329: LD_ADDR_OWVAR 26
20333: PUSH
20334: LD_STRING Dark Warrior
20336: ST_TO_ADDR
// hc_gallery :=  ;
20337: LD_ADDR_OWVAR 33
20341: PUSH
20342: LD_STRING 
20344: ST_TO_ADDR
// hc_noskilllimit := true ;
20345: LD_ADDR_OWVAR 76
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20353: LD_ADDR_OWVAR 31
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 30
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 30
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: ST_TO_ADDR
// un := CreateHuman ;
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: CALL_OW 44
20385: ST_TO_ADDR
// hc_noskilllimit := false ;
20386: LD_ADDR_OWVAR 76
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20394: LD_VAR 0 3
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 51
// p := 0 ;
20406: LD_ADDR_VAR 0 2
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20414: LD_INT 35
20416: PPUSH
20417: CALL_OW 67
// p := p + 1 ;
20421: LD_ADDR_VAR 0 2
20425: PUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_INT 1
20433: PLUS
20434: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20435: LD_VAR 0 3
20439: PPUSH
20440: CALL_OW 256
20444: PUSH
20445: LD_INT 1000
20447: LESS
20448: IFFALSE 20462
// SetLives ( un , 1000 ) ;
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_INT 1000
20457: PPUSH
20458: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20462: LD_VAR 0 3
20466: PPUSH
20467: LD_INT 81
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 91
20481: PUSH
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 30
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PPUSH
20499: CALL_OW 69
20503: PPUSH
20504: LD_VAR 0 3
20508: PPUSH
20509: CALL_OW 74
20513: PPUSH
20514: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20518: LD_VAR 0 2
20522: PUSH
20523: LD_INT 60
20525: GREATER
20526: PUSH
20527: LD_VAR 0 3
20531: PPUSH
20532: CALL_OW 301
20536: OR
20537: IFFALSE 20414
// if un then
20539: LD_VAR 0 3
20543: IFFALSE 20554
// RemoveUnit ( un ) ;
20545: LD_VAR 0 3
20549: PPUSH
20550: CALL_OW 64
// end ; end_of_file end_of_file
20554: PPOPN 3
20556: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20557: LD_INT 0
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20563: LD_VAR 0 1
20567: PPUSH
20568: CALL_OW 264
20572: PUSH
20573: LD_EXP 84
20577: EQUAL
20578: IFFALSE 20650
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20580: LD_INT 68
20582: PPUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 255
20592: PPUSH
20593: CALL_OW 321
20597: PUSH
20598: LD_INT 2
20600: EQUAL
20601: IFFALSE 20613
// eff := 70 else
20603: LD_ADDR_VAR 0 4
20607: PUSH
20608: LD_INT 70
20610: ST_TO_ADDR
20611: GO 20621
// eff := 30 ;
20613: LD_ADDR_VAR 0 4
20617: PUSH
20618: LD_INT 30
20620: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL_OW 250
20630: PPUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 251
20640: PPUSH
20641: LD_VAR 0 4
20645: PPUSH
20646: CALL_OW 495
// end ; end ;
20650: LD_VAR 0 2
20654: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20655: LD_INT 0
20657: PPUSH
// end ;
20658: LD_VAR 0 4
20662: RET
// export function SOS_Command ( cmd ) ; begin
20663: LD_INT 0
20665: PPUSH
// end ;
20666: LD_VAR 0 2
20670: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20671: LD_VAR 0 1
20675: PUSH
20676: LD_INT 255
20678: EQUAL
20679: PUSH
20680: LD_VAR 0 2
20684: PPUSH
20685: CALL_OW 264
20689: PUSH
20690: LD_INT 14
20692: PUSH
20693: LD_INT 53
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: IN
20700: AND
20701: PUSH
20702: LD_VAR 0 4
20706: PPUSH
20707: LD_VAR 0 5
20711: PPUSH
20712: CALL_OW 488
20716: AND
20717: IFFALSE 20741
// CutTreeXYR ( unit , x , y , 12 ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_VAR 0 4
20728: PPUSH
20729: LD_VAR 0 5
20733: PPUSH
20734: LD_INT 12
20736: PPUSH
20737: CALL 20744 0 4
// end ;
20741: PPOPN 5
20743: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20744: LD_INT 0
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20755: LD_VAR 0 1
20759: NOT
20760: PUSH
20761: LD_VAR 0 2
20765: PPUSH
20766: LD_VAR 0 3
20770: PPUSH
20771: CALL_OW 488
20775: NOT
20776: OR
20777: PUSH
20778: LD_VAR 0 4
20782: NOT
20783: OR
20784: IFFALSE 20788
// exit ;
20786: GO 21128
// list := [ ] ;
20788: LD_ADDR_VAR 0 13
20792: PUSH
20793: EMPTY
20794: ST_TO_ADDR
// if x - r < 0 then
20795: LD_VAR 0 2
20799: PUSH
20800: LD_VAR 0 4
20804: MINUS
20805: PUSH
20806: LD_INT 0
20808: LESS
20809: IFFALSE 20821
// min_x := 0 else
20811: LD_ADDR_VAR 0 7
20815: PUSH
20816: LD_INT 0
20818: ST_TO_ADDR
20819: GO 20837
// min_x := x - r ;
20821: LD_ADDR_VAR 0 7
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: LD_VAR 0 4
20835: MINUS
20836: ST_TO_ADDR
// if y - r < 0 then
20837: LD_VAR 0 3
20841: PUSH
20842: LD_VAR 0 4
20846: MINUS
20847: PUSH
20848: LD_INT 0
20850: LESS
20851: IFFALSE 20863
// min_y := 0 else
20853: LD_ADDR_VAR 0 8
20857: PUSH
20858: LD_INT 0
20860: ST_TO_ADDR
20861: GO 20879
// min_y := y - r ;
20863: LD_ADDR_VAR 0 8
20867: PUSH
20868: LD_VAR 0 3
20872: PUSH
20873: LD_VAR 0 4
20877: MINUS
20878: ST_TO_ADDR
// max_x := x + r ;
20879: LD_ADDR_VAR 0 9
20883: PUSH
20884: LD_VAR 0 2
20888: PUSH
20889: LD_VAR 0 4
20893: PLUS
20894: ST_TO_ADDR
// max_y := y + r ;
20895: LD_ADDR_VAR 0 10
20899: PUSH
20900: LD_VAR 0 3
20904: PUSH
20905: LD_VAR 0 4
20909: PLUS
20910: ST_TO_ADDR
// for _x = min_x to max_x do
20911: LD_ADDR_VAR 0 11
20915: PUSH
20916: DOUBLE
20917: LD_VAR 0 7
20921: DEC
20922: ST_TO_ADDR
20923: LD_VAR 0 9
20927: PUSH
20928: FOR_TO
20929: IFFALSE 21046
// for _y = min_y to max_y do
20931: LD_ADDR_VAR 0 12
20935: PUSH
20936: DOUBLE
20937: LD_VAR 0 8
20941: DEC
20942: ST_TO_ADDR
20943: LD_VAR 0 10
20947: PUSH
20948: FOR_TO
20949: IFFALSE 21042
// begin if not ValidHex ( _x , _y ) then
20951: LD_VAR 0 11
20955: PPUSH
20956: LD_VAR 0 12
20960: PPUSH
20961: CALL_OW 488
20965: NOT
20966: IFFALSE 20970
// continue ;
20968: GO 20948
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20970: LD_VAR 0 11
20974: PPUSH
20975: LD_VAR 0 12
20979: PPUSH
20980: CALL_OW 351
20984: PUSH
20985: LD_VAR 0 11
20989: PPUSH
20990: LD_VAR 0 12
20994: PPUSH
20995: CALL_OW 554
20999: AND
21000: IFFALSE 21040
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21002: LD_ADDR_VAR 0 13
21006: PUSH
21007: LD_VAR 0 13
21011: PPUSH
21012: LD_VAR 0 13
21016: PUSH
21017: LD_INT 1
21019: PLUS
21020: PPUSH
21021: LD_VAR 0 11
21025: PUSH
21026: LD_VAR 0 12
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PPUSH
21035: CALL_OW 2
21039: ST_TO_ADDR
// end ;
21040: GO 20948
21042: POP
21043: POP
21044: GO 20928
21046: POP
21047: POP
// if not list then
21048: LD_VAR 0 13
21052: NOT
21053: IFFALSE 21057
// exit ;
21055: GO 21128
// for i in list do
21057: LD_ADDR_VAR 0 6
21061: PUSH
21062: LD_VAR 0 13
21066: PUSH
21067: FOR_IN
21068: IFFALSE 21126
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_STRING M
21077: PUSH
21078: LD_VAR 0 6
21082: PUSH
21083: LD_INT 1
21085: ARRAY
21086: PUSH
21087: LD_VAR 0 6
21091: PUSH
21092: LD_INT 2
21094: ARRAY
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: PPUSH
21120: CALL_OW 447
21124: GO 21067
21126: POP
21127: POP
// end ; end_of_file
21128: LD_VAR 0 5
21132: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21133: GO 21135
21135: DISABLE
// begin ru_radar := 98 ;
21136: LD_ADDR_EXP 80
21140: PUSH
21141: LD_INT 98
21143: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21144: LD_ADDR_EXP 81
21148: PUSH
21149: LD_INT 89
21151: ST_TO_ADDR
// us_hack := 99 ;
21152: LD_ADDR_EXP 82
21156: PUSH
21157: LD_INT 99
21159: ST_TO_ADDR
// us_artillery := 97 ;
21160: LD_ADDR_EXP 83
21164: PUSH
21165: LD_INT 97
21167: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21168: LD_ADDR_EXP 84
21172: PUSH
21173: LD_INT 91
21175: ST_TO_ADDR
// tech_Artillery := 80 ;
21176: LD_ADDR_EXP 85
21180: PUSH
21181: LD_INT 80
21183: ST_TO_ADDR
// tech_RadMat := 81 ;
21184: LD_ADDR_EXP 86
21188: PUSH
21189: LD_INT 81
21191: ST_TO_ADDR
// tech_BasicTools := 82 ;
21192: LD_ADDR_EXP 87
21196: PUSH
21197: LD_INT 82
21199: ST_TO_ADDR
// tech_Cargo := 83 ;
21200: LD_ADDR_EXP 88
21204: PUSH
21205: LD_INT 83
21207: ST_TO_ADDR
// tech_Track := 84 ;
21208: LD_ADDR_EXP 89
21212: PUSH
21213: LD_INT 84
21215: ST_TO_ADDR
// tech_Crane := 85 ;
21216: LD_ADDR_EXP 90
21220: PUSH
21221: LD_INT 85
21223: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21224: LD_ADDR_EXP 91
21228: PUSH
21229: LD_INT 86
21231: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21232: LD_ADDR_EXP 92
21236: PUSH
21237: LD_INT 87
21239: ST_TO_ADDR
// end ;
21240: END
