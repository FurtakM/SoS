// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 0
  22: PPUSH
  23: LD_INT 0
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 207 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1380 0 0
// PrepareArabian ;
  50: CALL 950 0 0
// PrepareHeike ;
  54: CALL 885 0 0
// Action ;
  58: CALL 2917 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeHurt := false ;
 169: LD_ADDR_EXP 14
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// animalCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$1 trigger debug do
 190: LD_EXP 2
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// FogOff ( 2 ) ; end_of_file
 199: LD_INT 2
 201: PPUSH
 202: CALL_OW 344
 206: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 207: LD_INT 0
 209: PPUSH
 210: PPUSH
 211: PPUSH
// uc_side = 0 ;
 212: LD_ADDR_OWVAR 20
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// uc_nation = 0 ;
 220: LD_ADDR_OWVAR 21
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// InitHc ;
 228: CALL_OW 19
// InitVc ;
 232: CALL_OW 20
// if mastodonts then
 236: LD_VAR 0 6
 240: IFFALSE 307
// for i = 1 to mastodonts do
 242: LD_ADDR_VAR 0 11
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_VAR 0 6
 256: PUSH
 257: FOR_TO
 258: IFFALSE 305
// begin vc_chassis := 31 ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_INT 31
 267: ST_TO_ADDR
// vc_control := control_rider ;
 268: LD_ADDR_OWVAR 38
 272: PUSH
 273: LD_INT 4
 275: ST_TO_ADDR
// animal := CreateVehicle ;
 276: LD_ADDR_VAR 0 12
 280: PUSH
 281: CALL_OW 45
 285: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 286: LD_VAR 0 12
 290: PPUSH
 291: LD_VAR 0 8
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 49
// end ;
 303: GO 257
 305: POP
 306: POP
// if horses then
 307: LD_VAR 0 5
 311: IFFALSE 378
// for i = 1 to horses do
 313: LD_ADDR_VAR 0 11
 317: PUSH
 318: DOUBLE
 319: LD_INT 1
 321: DEC
 322: ST_TO_ADDR
 323: LD_VAR 0 5
 327: PUSH
 328: FOR_TO
 329: IFFALSE 376
// begin hc_class := 21 ;
 331: LD_ADDR_OWVAR 28
 335: PUSH
 336: LD_INT 21
 338: ST_TO_ADDR
// hc_gallery :=  ;
 339: LD_ADDR_OWVAR 33
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// animal := CreateHuman ;
 347: LD_ADDR_VAR 0 12
 351: PUSH
 352: CALL_OW 44
 356: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 357: LD_VAR 0 12
 361: PPUSH
 362: LD_VAR 0 8
 366: PPUSH
 367: LD_INT 0
 369: PPUSH
 370: CALL_OW 49
// end ;
 374: GO 328
 376: POP
 377: POP
// if birds then
 378: LD_VAR 0 1
 382: IFFALSE 449
// for i = 1 to birds do
 384: LD_ADDR_VAR 0 11
 388: PUSH
 389: DOUBLE
 390: LD_INT 1
 392: DEC
 393: ST_TO_ADDR
 394: LD_VAR 0 1
 398: PUSH
 399: FOR_TO
 400: IFFALSE 447
// begin hc_class = 18 ;
 402: LD_ADDR_OWVAR 28
 406: PUSH
 407: LD_INT 18
 409: ST_TO_ADDR
// hc_gallery =  ;
 410: LD_ADDR_OWVAR 33
 414: PUSH
 415: LD_STRING 
 417: ST_TO_ADDR
// animal := CreateHuman ;
 418: LD_ADDR_VAR 0 12
 422: PUSH
 423: CALL_OW 44
 427: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 428: LD_VAR 0 12
 432: PPUSH
 433: LD_VAR 0 8
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: CALL_OW 49
// end ;
 445: GO 399
 447: POP
 448: POP
// if tigers then
 449: LD_VAR 0 2
 453: IFFALSE 537
// for i = 1 to tigers do
 455: LD_ADDR_VAR 0 11
 459: PUSH
 460: DOUBLE
 461: LD_INT 1
 463: DEC
 464: ST_TO_ADDR
 465: LD_VAR 0 2
 469: PUSH
 470: FOR_TO
 471: IFFALSE 535
// begin hc_class = class_tiger ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 14
 480: ST_TO_ADDR
// hc_gallery =  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 489: LD_ADDR_OWVAR 35
 493: PUSH
 494: LD_INT 7
 496: NEG
 497: PPUSH
 498: LD_INT 7
 500: PPUSH
 501: CALL_OW 12
 505: ST_TO_ADDR
// animal := CreateHuman ;
 506: LD_ADDR_VAR 0 12
 510: PUSH
 511: CALL_OW 44
 515: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 516: LD_VAR 0 12
 520: PPUSH
 521: LD_VAR 0 8
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL_OW 49
// end ;
 533: GO 470
 535: POP
 536: POP
// if apemans then
 537: LD_VAR 0 3
 541: IFFALSE 664
// for i = 1 to apemans do
 543: LD_ADDR_VAR 0 11
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_VAR 0 3
 557: PUSH
 558: FOR_TO
 559: IFFALSE 662
// begin hc_class = class_apeman ;
 561: LD_ADDR_OWVAR 28
 565: PUSH
 566: LD_INT 12
 568: ST_TO_ADDR
// hc_gallery =  ;
 569: LD_ADDR_OWVAR 33
 573: PUSH
 574: LD_STRING 
 576: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 577: LD_ADDR_OWVAR 35
 581: PUSH
 582: LD_INT 5
 584: NEG
 585: PPUSH
 586: LD_INT 5
 588: PPUSH
 589: CALL_OW 12
 593: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 594: LD_ADDR_OWVAR 31
 598: PUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: CALL_OW 12
 609: PUSH
 610: LD_INT 1
 612: PPUSH
 613: LD_INT 3
 615: PPUSH
 616: CALL_OW 12
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: ST_TO_ADDR
// animal := CreateHuman ;
 633: LD_ADDR_VAR 0 12
 637: PUSH
 638: CALL_OW 44
 642: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 643: LD_VAR 0 12
 647: PPUSH
 648: LD_VAR 0 8
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: CALL_OW 49
// end ;
 660: GO 558
 662: POP
 663: POP
// if enchidnas then
 664: LD_VAR 0 4
 668: IFFALSE 735
// for i = 1 to enchidnas do
 670: LD_ADDR_VAR 0 11
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_VAR 0 4
 684: PUSH
 685: FOR_TO
 686: IFFALSE 733
// begin hc_class = 13 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 13
 695: ST_TO_ADDR
// hc_gallery =  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// animal := CreateHuman ;
 704: LD_ADDR_VAR 0 12
 708: PUSH
 709: CALL_OW 44
 713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 714: LD_VAR 0 12
 718: PPUSH
 719: LD_VAR 0 8
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 685
 733: POP
 734: POP
// if fishes then
 735: LD_VAR 0 7
 739: IFFALSE 806
// for i = 1 to fishes do
 741: LD_ADDR_VAR 0 11
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_VAR 0 7
 755: PUSH
 756: FOR_TO
 757: IFFALSE 804
// begin hc_class = class_fish ;
 759: LD_ADDR_OWVAR 28
 763: PUSH
 764: LD_INT 20
 766: ST_TO_ADDR
// hc_gallery =  ;
 767: LD_ADDR_OWVAR 33
 771: PUSH
 772: LD_STRING 
 774: ST_TO_ADDR
// animal := CreateHuman ;
 775: LD_ADDR_VAR 0 12
 779: PUSH
 780: CALL_OW 44
 784: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 785: LD_VAR 0 12
 789: PPUSH
 790: LD_VAR 0 9
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 49
// end ;
 802: GO 756
 804: POP
 805: POP
// end ;
 806: LD_VAR 0 10
 810: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 811: LD_INT 0
 813: PPUSH
 814: PPUSH
 815: PPUSH
// if not observer or not unit then
 816: LD_VAR 0 1
 820: NOT
 821: PUSH
 822: LD_VAR 0 2
 826: NOT
 827: OR
 828: IFFALSE 832
// exit ;
 830: GO 880
// if not See ( GetSide ( observer ) , unit ) then
 832: LD_VAR 0 1
 836: PPUSH
 837: CALL_OW 255
 841: PPUSH
 842: LD_VAR 0 2
 846: PPUSH
 847: CALL_OW 292
 851: NOT
 852: IFFALSE 856
// exit ;
 854: GO 880
// result := GetDistUnits ( observer , unit ) < 12 ;
 856: LD_ADDR_VAR 0 3
 860: PUSH
 861: LD_VAR 0 1
 865: PPUSH
 866: LD_VAR 0 2
 870: PPUSH
 871: CALL_OW 296
 875: PUSH
 876: LD_INT 12
 878: LESS
 879: ST_TO_ADDR
// end ; end_of_file
 880: LD_VAR 0 3
 884: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 885: LD_INT 0
 887: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 888: LD_INT 66
 890: PPUSH
 891: LD_INT 26
 893: PPUSH
 894: CALL_OW 86
// uc_side := 2 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 2
 905: ST_TO_ADDR
// uc_nation := 2 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 2
 913: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 914: LD_ADDR_EXP 16
 918: PUSH
 919: LD_STRING Heike
 921: PPUSH
 922: CALL_OW 25
 926: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 927: LD_EXP 16
 931: PPUSH
 932: LD_INT 66
 934: PPUSH
 935: LD_INT 26
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: CALL_OW 48
// end ;
 945: LD_VAR 0 1
 949: RET
// export function PrepareArabian ; begin
 950: LD_INT 0
 952: PPUSH
// uc_side := 5 ;
 953: LD_ADDR_OWVAR 20
 957: PUSH
 958: LD_INT 5
 960: ST_TO_ADDR
// uc_nation := 2 ;
 961: LD_ADDR_OWVAR 21
 965: PUSH
 966: LD_INT 2
 968: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 969: LD_ADDR_EXP 17
 973: PUSH
 974: LD_STRING Olaf
 976: PPUSH
 977: CALL_OW 25
 981: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 982: LD_EXP 17
 986: PPUSH
 987: LD_INT 39
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1000: LD_ADDR_EXP 18
1004: PUSH
1005: LD_STRING Givi
1007: PPUSH
1008: CALL_OW 25
1012: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1013: LD_EXP 18
1017: PPUSH
1018: LD_INT 55
1020: PPUSH
1021: LD_INT 90
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1031: LD_EXP 18
1035: PPUSH
1036: LD_INT 53
1038: PPUSH
1039: LD_INT 89
1041: PPUSH
1042: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1046: LD_ADDR_EXP 19
1050: PUSH
1051: LD_STRING Mike
1053: PPUSH
1054: CALL_OW 25
1058: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1059: LD_EXP 19
1063: PPUSH
1064: LD_INT 53
1066: PPUSH
1067: LD_INT 87
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1077: LD_EXP 19
1081: PPUSH
1082: LD_INT 53
1084: PPUSH
1085: LD_INT 89
1087: PPUSH
1088: CALL_OW 118
// end ;
1092: LD_VAR 0 1
1096: RET
// export function PreparePrison ; begin
1097: LD_INT 0
1099: PPUSH
// uc_side := 5 ;
1100: LD_ADDR_OWVAR 20
1104: PUSH
1105: LD_INT 5
1107: ST_TO_ADDR
// uc_nation := 2 ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1116: LD_ADDR_EXP 20
1120: PUSH
1121: LD_STRING Kamil
1123: PPUSH
1124: CALL_OW 25
1128: ST_TO_ADDR
// if Difficulty > 1 then
1129: LD_OWVAR 67
1133: PUSH
1134: LD_INT 1
1136: GREATER
1137: IFFALSE 1153
// PlaceHumanInUnit ( Kamil , northDep ) else
1139: LD_EXP 20
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: CALL_OW 52
1151: GO 1165
// PlaceHumanInUnit ( Kamil , southDep ) ;
1153: LD_EXP 20
1157: PPUSH
1158: LD_INT 8
1160: PPUSH
1161: CALL_OW 52
// uc_side := 3 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 3
1172: ST_TO_ADDR
// uc_nation := 3 ;
1173: LD_ADDR_OWVAR 21
1177: PUSH
1178: LD_INT 3
1180: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1181: LD_INT 0
1183: PPUSH
1184: LD_INT 2
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: CALL_OW 380
// if Difficulty > 1 then
1194: LD_OWVAR 67
1198: PUSH
1199: LD_INT 1
1201: GREATER
1202: IFFALSE 1218
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1204: CALL_OW 44
1208: PPUSH
1209: LD_INT 8
1211: PPUSH
1212: CALL_OW 52
1216: GO 1230
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1218: CALL_OW 44
1222: PPUSH
1223: LD_INT 2
1225: PPUSH
1226: CALL_OW 52
// end ; end_of_file
1230: LD_VAR 0 1
1234: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1235: LD_INT 0
1237: PPUSH
1238: PPUSH
1239: PPUSH
// uc_side := 3 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// uc_nation := 3 ;
1248: LD_ADDR_OWVAR 21
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// russianPatrol := [ ] ;
1256: LD_ADDR_EXP 21
1260: PUSH
1261: EMPTY
1262: ST_TO_ADDR
// for i = 1 to 3 do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: DOUBLE
1269: LD_INT 1
1271: DEC
1272: ST_TO_ADDR
1273: LD_INT 3
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1373
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1279: LD_INT 1
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1292: LD_ADDR_OWVAR 29
1296: PUSH
1297: LD_INT 9
1299: PUSH
1300: LD_INT 10
1302: PPUSH
1303: LD_INT 11
1305: PPUSH
1306: CALL_OW 12
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: ST_TO_ADDR
// un := CreateHuman ;
1315: LD_ADDR_VAR 0 3
1319: PUSH
1320: CALL_OW 44
1324: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1325: LD_ADDR_EXP 21
1329: PUSH
1330: LD_EXP 21
1334: PPUSH
1335: LD_VAR 0 2
1339: PPUSH
1340: LD_VAR 0 3
1344: PPUSH
1345: CALL_OW 1
1349: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1350: LD_VAR 0 3
1354: PPUSH
1355: LD_INT 26
1357: PPUSH
1358: LD_INT 22
1360: PPUSH
1361: LD_INT 4
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 50
// end ;
1371: GO 1276
1373: POP
1374: POP
// end ;
1375: LD_VAR 0 1
1379: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1380: LD_INT 0
1382: PPUSH
1383: PPUSH
1384: PPUSH
1385: PPUSH
1386: PPUSH
// uc_side := 3 ;
1387: LD_ADDR_OWVAR 20
1391: PUSH
1392: LD_INT 3
1394: ST_TO_ADDR
// uc_nation := 3 ;
1395: LD_ADDR_OWVAR 21
1399: PUSH
1400: LD_INT 3
1402: ST_TO_ADDR
// russianForces := [ ] ;
1403: LD_ADDR_EXP 23
1407: PUSH
1408: EMPTY
1409: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1410: LD_ADDR_EXP 22
1414: PUSH
1415: EMPTY
1416: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1417: LD_ADDR_VAR 0 5
1421: PUSH
1422: LD_INT 11
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 517
1432: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1433: LD_ADDR_VAR 0 2
1437: PUSH
1438: LD_INT 21
1440: PUSH
1441: LD_INT 0
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PPUSH
1448: CALL_OW 69
1452: PUSH
1453: FOR_IN
1454: IFFALSE 1498
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1456: LD_VAR 0 2
1460: PPUSH
1461: CALL_OW 274
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 200
1471: PPUSH
1472: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 274
1485: PPUSH
1486: LD_INT 2
1488: PPUSH
1489: LD_INT 10
1491: PPUSH
1492: CALL_OW 277
// end ;
1496: GO 1453
1498: POP
1499: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 30
1507: PUSH
1508: LD_INT 31
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1595
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 1
1528: PPUSH
1529: LD_OWVAR 67
1533: PUSH
1534: LD_INT 1
1536: MINUS
1537: PPUSH
1538: CALL_OW 380
// un := CreateHuman ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: CALL_OW 44
1551: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1552: LD_VAR 0 4
1556: PPUSH
1557: LD_VAR 0 2
1561: PPUSH
1562: CALL_OW 254
1566: PUSH
1567: LD_INT 3
1569: MINUS
1570: PUSH
1571: LD_INT 6
1573: MOD
1574: PPUSH
1575: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1579: LD_VAR 0 4
1583: PPUSH
1584: LD_VAR 0 2
1588: PPUSH
1589: CALL_OW 52
// end ;
1593: GO 1520
1595: POP
1596: POP
// for i = 1 to 5 do
1597: LD_ADDR_VAR 0 2
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 5
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1693
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_OWVAR 67
1623: PPUSH
1624: CALL_OW 380
// un := CreateHuman ;
1628: LD_ADDR_VAR 0 4
1632: PUSH
1633: CALL_OW 44
1637: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1638: LD_VAR 0 4
1642: PPUSH
1643: LD_INT 9
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 49
// ComHold ( un ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1662: LD_ADDR_EXP 23
1666: PUSH
1667: LD_EXP 23
1671: PPUSH
1672: LD_EXP 23
1676: PUSH
1677: LD_INT 1
1679: PLUS
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL_OW 1
1690: ST_TO_ADDR
// end ;
1691: GO 1610
1693: POP
1694: POP
// for i := 1 to Difficulty + 1 do
1695: LD_ADDR_VAR 0 2
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_OWVAR 67
1709: PUSH
1710: LD_INT 1
1712: PLUS
1713: PUSH
1714: FOR_TO
1715: IFFALSE 1815
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_OWVAR 67
1727: PPUSH
1728: CALL_OW 380
// un := CreateHuman ;
1732: LD_ADDR_VAR 0 4
1736: PUSH
1737: CALL_OW 44
1741: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 5
1751: PUSH
1752: LD_INT 1
1754: ARRAY
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PPUSH
1762: LD_VAR 0 5
1766: PUSH
1767: LD_INT 2
1769: ARRAY
1770: PUSH
1771: LD_VAR 0 2
1775: ARRAY
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1784: LD_ADDR_EXP 22
1788: PUSH
1789: LD_EXP 22
1793: PPUSH
1794: LD_EXP 22
1798: PUSH
1799: LD_INT 1
1801: PLUS
1802: PPUSH
1803: LD_VAR 0 4
1807: PPUSH
1808: CALL_OW 1
1812: ST_TO_ADDR
// end ;
1813: GO 1714
1815: POP
1816: POP
// vc_chassis := ru_medium_wheeled ;
1817: LD_ADDR_OWVAR 37
1821: PUSH
1822: LD_INT 21
1824: ST_TO_ADDR
// vc_engine := engine_combustion ;
1825: LD_ADDR_OWVAR 39
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// vc_control := control_manual ;
1833: LD_ADDR_OWVAR 38
1837: PUSH
1838: LD_INT 1
1840: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1841: LD_ADDR_OWVAR 40
1845: PUSH
1846: LD_INT 42
1848: ST_TO_ADDR
// russianTank := CreateVehicle ;
1849: LD_ADDR_EXP 24
1853: PUSH
1854: CALL_OW 45
1858: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1859: LD_EXP 24
1863: PPUSH
1864: LD_INT 121
1866: PPUSH
1867: LD_INT 25
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_OWVAR 67
1887: PPUSH
1888: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1892: CALL_OW 44
1896: PPUSH
1897: LD_EXP 24
1901: PPUSH
1902: CALL_OW 52
// if Difficulty > 1 then
1906: LD_OWVAR 67
1910: PUSH
1911: LD_INT 1
1913: GREATER
1914: IFFALSE 2000
// begin bc_type := b_breastwork ;
1916: LD_ADDR_OWVAR 42
1920: PUSH
1921: LD_INT 31
1923: ST_TO_ADDR
// bc_level := 2 ;
1924: LD_ADDR_OWVAR 43
1928: PUSH
1929: LD_INT 2
1931: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1932: LD_ADDR_VAR 0 3
1936: PUSH
1937: LD_INT 143
1939: PPUSH
1940: LD_INT 88
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 47
1950: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 2
1959: PPUSH
1960: CALL_OW 380
// un := CreateHuman ;
1964: LD_ADDR_VAR 0 4
1968: PUSH
1969: CALL_OW 44
1973: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1974: LD_VAR 0 4
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1986: LD_VAR 0 4
1990: PPUSH
1991: LD_VAR 0 3
1995: PPUSH
1996: CALL_OW 52
// end ; if Difficulty > 2 then
2000: LD_OWVAR 67
2004: PUSH
2005: LD_INT 2
2007: GREATER
2008: IFFALSE 2064
// begin for i := 1 to 2 do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: DOUBLE
2016: LD_INT 1
2018: DEC
2019: ST_TO_ADDR
2020: LD_INT 2
2022: PUSH
2023: FOR_TO
2024: IFFALSE 2062
// begin PrepareHuman ( false , 1 , 2 ) ;
2026: LD_INT 0
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 2
2034: PPUSH
2035: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2039: CALL_OW 44
2043: PPUSH
2044: LD_INT 156
2046: PPUSH
2047: LD_INT 108
2049: PPUSH
2050: LD_INT 3
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL_OW 50
// end ;
2060: GO 2023
2062: POP
2063: POP
// end ; end ;
2064: LD_VAR 0 1
2068: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2069: LD_EXP 22
2073: IFFALSE 2379
2075: GO 2077
2077: DISABLE
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
// begin enable ;
2086: ENABLE
// for i in russianForestPatrol do
2087: LD_ADDR_VAR 0 1
2091: PUSH
2092: LD_EXP 22
2096: PUSH
2097: FOR_IN
2098: IFFALSE 2377
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2100: LD_VAR 0 1
2104: PPUSH
2105: LD_INT 53
2107: PPUSH
2108: LD_INT 89
2110: PPUSH
2111: CALL_OW 297
2115: PUSH
2116: LD_INT 30
2118: LESS
2119: IFFALSE 2138
// begin ComMoveXY ( i , 114 , 80 ) ;
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_INT 114
2128: PPUSH
2129: LD_INT 80
2131: PPUSH
2132: CALL_OW 111
// continue ;
2136: GO 2097
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_EXP 22
2147: PUSH
2148: LD_VAR 0 1
2152: DIFF
2153: PPUSH
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 74
2163: ST_TO_ADDR
// if tmp then
2164: LD_VAR 0 6
2168: IFFALSE 2236
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_VAR 0 6
2179: PPUSH
2180: CALL_OW 296
2184: PUSH
2185: LD_INT 14
2187: LESS
2188: PUSH
2189: LD_VAR 0 6
2193: PPUSH
2194: CALL_OW 256
2198: PUSH
2199: LD_INT 999
2201: LESS
2202: AND
2203: IFFALSE 2236
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2205: LD_VAR 0 1
2209: PPUSH
2210: LD_VAR 0 6
2214: PPUSH
2215: CALL_OW 250
2219: PPUSH
2220: LD_VAR 0 6
2224: PPUSH
2225: CALL_OW 251
2229: PPUSH
2230: CALL_OW 114
// break ;
2234: GO 2377
// end ; if not HasTask ( i ) then
2236: LD_VAR 0 1
2240: PPUSH
2241: CALL_OW 314
2245: NOT
2246: IFFALSE 2375
// begin d := rand ( 0 , 5 ) ;
2248: LD_ADDR_VAR 0 2
2252: PUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 5
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 3
2271: PPUSH
2272: LD_INT 7
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2280: LD_ADDR_VAR 0 4
2284: PUSH
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL_OW 250
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: LD_VAR 0 3
2304: PPUSH
2305: CALL_OW 272
2309: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2310: LD_ADDR_VAR 0 5
2314: PUSH
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 251
2324: PPUSH
2325: LD_VAR 0 2
2329: PPUSH
2330: LD_VAR 0 3
2334: PPUSH
2335: CALL_OW 273
2339: ST_TO_ADDR
// if ValidHex ( x , y ) then
2340: LD_VAR 0 4
2344: PPUSH
2345: LD_VAR 0 5
2349: PPUSH
2350: CALL_OW 488
2354: IFFALSE 2375
// ComAgressiveMove ( i , x , y ) ;
2356: LD_VAR 0 1
2360: PPUSH
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_VAR 0 5
2370: PPUSH
2371: CALL_OW 114
// end ; end ;
2375: GO 2097
2377: POP
2378: POP
// end ;
2379: PPOPN 6
2381: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2382: LD_EXP 24
2386: PPUSH
2387: CALL_OW 302
2391: PUSH
2392: LD_EXP 24
2396: PPUSH
2397: CALL_OW 255
2401: PUSH
2402: LD_INT 3
2404: EQUAL
2405: AND
2406: IFFALSE 2673
2408: GO 2410
2410: DISABLE
// begin enable ;
2411: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2412: LD_EXP 24
2416: PPUSH
2417: LD_INT 124
2419: PPUSH
2420: LD_INT 25
2422: PPUSH
2423: CALL_OW 307
2427: IFFALSE 2441
// SetFuel ( russianTank , 100 ) ;
2429: LD_EXP 24
2433: PPUSH
2434: LD_INT 100
2436: PPUSH
2437: CALL_OW 240
// if HasTask ( russianTank ) then
2441: LD_EXP 24
2445: PPUSH
2446: CALL_OW 314
2450: IFFALSE 2454
// exit ;
2452: GO 2673
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2454: LD_EXP 24
2458: PPUSH
2459: LD_INT 121
2461: PPUSH
2462: LD_INT 25
2464: PPUSH
2465: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2469: LD_EXP 24
2473: PPUSH
2474: LD_INT 122
2476: PPUSH
2477: LD_INT 48
2479: PPUSH
2480: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2484: LD_EXP 24
2488: PPUSH
2489: LD_INT 70
2491: PPUSH
2492: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 107
2503: PPUSH
2504: LD_INT 57
2506: PPUSH
2507: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2511: LD_EXP 24
2515: PPUSH
2516: LD_INT 70
2518: PPUSH
2519: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2523: LD_EXP 24
2527: PPUSH
2528: LD_INT 100
2530: PPUSH
2531: LD_INT 61
2533: PPUSH
2534: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2538: LD_EXP 24
2542: PPUSH
2543: LD_INT 105
2545: PPUSH
2546: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2550: LD_EXP 24
2554: PPUSH
2555: LD_INT 78
2557: PPUSH
2558: LD_INT 64
2560: PPUSH
2561: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2565: LD_EXP 24
2569: PPUSH
2570: LD_INT 140
2572: PPUSH
2573: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2577: LD_EXP 24
2581: PPUSH
2582: LD_INT 100
2584: PPUSH
2585: LD_INT 61
2587: PPUSH
2588: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2592: LD_EXP 24
2596: PPUSH
2597: LD_INT 105
2599: PPUSH
2600: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2604: LD_EXP 24
2608: PPUSH
2609: LD_INT 107
2611: PPUSH
2612: LD_INT 57
2614: PPUSH
2615: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2619: LD_EXP 24
2623: PPUSH
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2631: LD_EXP 24
2635: PPUSH
2636: LD_INT 122
2638: PPUSH
2639: LD_INT 48
2641: PPUSH
2642: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2646: LD_EXP 24
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2658: LD_EXP 24
2662: PPUSH
2663: LD_INT 124
2665: PPUSH
2666: LD_INT 25
2668: PPUSH
2669: CALL_OW 171
// end ; end_of_file
2673: END
// export Johnny ; export function PrepareJohnny ; begin
2674: LD_INT 0
2676: PPUSH
// uc_side := 1 ;
2677: LD_ADDR_OWVAR 20
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// uc_nation := 1 ;
2685: LD_ADDR_OWVAR 21
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2693: LD_ADDR_EXP 25
2697: PUSH
2698: LD_STRING Harris
2700: PPUSH
2701: CALL_OW 25
2705: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2706: LD_EXP 25
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2718: LD_EXP 25
2722: PPUSH
2723: LD_INT 8
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComCrawl ( Johnny ) ;
2733: LD_EXP 25
2737: PPUSH
2738: CALL_OW 137
// end ;
2742: LD_VAR 0 1
2746: RET
// export function PreparePatrolTank ; var veh , un ; begin
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
// uc_side := 1 ;
2752: LD_ADDR_OWVAR 20
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// uc_nation := 1 ;
2760: LD_ADDR_OWVAR 21
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2768: LD_INT 1
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 380
// un := CreateHuman ;
2781: LD_ADDR_VAR 0 3
2785: PUSH
2786: CALL_OW 44
2790: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2791: LD_ADDR_OWVAR 37
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_engine := engine_combustion ;
2799: LD_ADDR_OWVAR 39
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// vc_control := control_manual ;
2807: LD_ADDR_OWVAR 38
2811: PUSH
2812: LD_INT 1
2814: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2815: LD_ADDR_OWVAR 40
2819: PUSH
2820: LD_INT 2
2822: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2823: LD_ADDR_OWVAR 41
2827: PUSH
2828: LD_INT 72
2830: PUSH
2831: LD_INT 54
2833: PUSH
2834: LD_INT 36
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: ST_TO_ADDR
// veh := CreateVehicle ;
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: CALL_OW 45
2857: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2858: LD_VAR 0 2
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2870: LD_VAR 0 2
2874: PPUSH
2875: LD_INT 31
2877: PPUSH
2878: LD_INT 58
2880: PPUSH
2881: LD_INT 0
2883: PPUSH
2884: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2888: LD_VAR 0 3
2892: PPUSH
2893: LD_VAR 0 2
2897: PPUSH
2898: CALL_OW 52
// result := un ;
2902: LD_ADDR_VAR 0 1
2906: PUSH
2907: LD_VAR 0 3
2911: ST_TO_ADDR
// end ; end_of_file
2912: LD_VAR 0 1
2916: RET
// export function Action ; begin
2917: LD_INT 0
2919: PPUSH
// InGameOn ;
2920: CALL_OW 8
// wait ( 0 0$4 ) ;
2924: LD_INT 140
2926: PPUSH
2927: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2931: LD_EXP 16
2935: PPUSH
2936: LD_STRING DH-start-1
2938: PPUSH
2939: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2943: LD_EXP 16
2947: PPUSH
2948: LD_INT 71
2950: PPUSH
2951: LD_INT 29
2953: PPUSH
2954: CALL_OW 111
// wait ( 0 0$4 ) ;
2958: LD_INT 140
2960: PPUSH
2961: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2965: LD_EXP 16
2969: PPUSH
2970: LD_INT 71
2972: PPUSH
2973: LD_INT 33
2975: PPUSH
2976: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2980: LD_EXP 16
2984: PPUSH
2985: LD_INT 71
2987: PPUSH
2988: LD_INT 34
2990: PPUSH
2991: CALL_OW 178
// wait ( 0 0$4 ) ;
2995: LD_INT 140
2997: PPUSH
2998: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_STRING DH-start-2
3009: PPUSH
3010: CALL_OW 88
// wait ( 0 0$4 ) ;
3014: LD_INT 140
3016: PPUSH
3017: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 65
3028: PPUSH
3029: LD_INT 26
3031: PPUSH
3032: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3036: LD_EXP 16
3040: PPUSH
3041: LD_STRING DH-start-3
3043: PPUSH
3044: CALL_OW 88
// InGameOff ;
3048: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3052: LD_STRING O1_cont
3054: PPUSH
3055: CALL_OW 337
// SaveForQuickRestart ;
3059: CALL_OW 22
// missionStarted := true ;
3063: LD_ADDR_EXP 1
3067: PUSH
3068: LD_INT 1
3070: ST_TO_ADDR
// PrepareJohnny ;
3071: CALL 2674 0 0
// end ;
3075: LD_VAR 0 1
3079: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3080: LD_EXP 8
3084: NOT
3085: PUSH
3086: LD_EXP 7
3090: NOT
3091: AND
3092: PUSH
3093: LD_INT 2
3095: PPUSH
3096: LD_EXP 25
3100: PPUSH
3101: CALL_OW 292
3105: AND
3106: PUSH
3107: LD_INT 3
3109: PPUSH
3110: LD_EXP 16
3114: PPUSH
3115: CALL_OW 292
3119: NOT
3120: AND
3121: PUSH
3122: LD_INT 22
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: PPUSH
3137: LD_EXP 16
3141: PPUSH
3142: CALL_OW 74
3146: PUSH
3147: LD_EXP 25
3151: EQUAL
3152: AND
3153: PUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL_OW 81
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: AND
3169: IFFALSE 4100
3171: GO 3173
3173: DISABLE
// begin InGameOn ;
3174: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3178: LD_EXP 16
3182: PPUSH
3183: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3187: LD_EXP 25
3191: PPUSH
3192: LD_STRING DJ-ambush-1
3194: PPUSH
3195: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3199: LD_INT 10
3201: PPUSH
3202: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3206: LD_EXP 16
3210: PPUSH
3211: LD_EXP 25
3215: PPUSH
3216: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3220: LD_EXP 16
3224: PPUSH
3225: LD_STRING DH-ambush-1
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// ComWalk ( Johnny ) ;
3239: LD_EXP 25
3243: PPUSH
3244: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3248: LD_EXP 25
3252: PPUSH
3253: LD_EXP 16
3257: PPUSH
3258: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3262: LD_INT 35
3264: PPUSH
3265: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3269: LD_EXP 25
3273: PPUSH
3274: LD_EXP 16
3278: PPUSH
3279: CALL_OW 296
3283: PUSH
3284: LD_INT 4
3286: LESS
3287: IFFALSE 3262
// ComTurnUnit ( Johnny , Heike ) ;
3289: LD_EXP 25
3293: PPUSH
3294: LD_EXP 16
3298: PPUSH
3299: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3303: LD_EXP 25
3307: PPUSH
3308: LD_STRING DJ-ambush-2
3310: PPUSH
3311: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3315: LD_EXP 16
3319: PPUSH
3320: LD_STRING DH-ambush-2
3322: PPUSH
3323: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3327: LD_EXP 25
3331: PPUSH
3332: LD_STRING DJ-ambush-3
3334: PPUSH
3335: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3339: LD_EXP 16
3343: PPUSH
3344: LD_STRING DH-ambush-3
3346: PPUSH
3347: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3351: LD_EXP 25
3355: PPUSH
3356: LD_STRING DJ-ambush-4
3358: PPUSH
3359: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3363: LD_EXP 16
3367: PPUSH
3368: LD_INT 39
3370: PPUSH
3371: LD_INT 22
3373: PPUSH
3374: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3378: LD_EXP 16
3382: PPUSH
3383: LD_STRING DH-ambush-4
3385: PPUSH
3386: CALL_OW 88
// PrepareRussianPatrol ;
3390: CALL 1235 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3394: LD_INT 39
3396: PPUSH
3397: LD_INT 22
3399: PPUSH
3400: LD_INT 2
3402: PPUSH
3403: LD_INT 12
3405: NEG
3406: PPUSH
3407: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3411: LD_INT 39
3413: PPUSH
3414: LD_INT 22
3416: PPUSH
3417: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3421: LD_EXP 21
3425: PPUSH
3426: LD_INT 39
3428: PPUSH
3429: LD_INT 23
3431: PPUSH
3432: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3436: LD_EXP 16
3440: PUSH
3441: LD_EXP 25
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: LD_INT 39
3452: PPUSH
3453: LD_INT 7
3455: PPUSH
3456: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3460: LD_EXP 16
3464: PUSH
3465: LD_EXP 25
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: LD_EXP 21
3478: PUSH
3479: LD_INT 1
3481: ARRAY
3482: PPUSH
3483: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3487: LD_EXP 21
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: LD_STRING DR-ambush-5
3498: PPUSH
3499: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3503: LD_EXP 21
3507: PUSH
3508: LD_INT 2
3510: ARRAY
3511: PPUSH
3512: LD_STRING DR1-ambush-5
3514: PPUSH
3515: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3519: LD_INT 35
3521: PPUSH
3522: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3526: LD_EXP 16
3530: PPUSH
3531: LD_INT 39
3533: PPUSH
3534: LD_INT 7
3536: PPUSH
3537: CALL_OW 297
3541: PUSH
3542: LD_INT 6
3544: LESS
3545: IFFALSE 3519
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3547: LD_EXP 16
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3565: LD_EXP 25
3569: PPUSH
3570: LD_EXP 16
3574: PPUSH
3575: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3579: LD_EXP 25
3583: PPUSH
3584: LD_STRING DJ-ambush-6
3586: PPUSH
3587: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3591: LD_EXP 16
3595: PPUSH
3596: LD_STRING DH-ambush-6
3598: PPUSH
3599: CALL_OW 88
// InGameOff ;
3603: CALL_OW 9
// meetJohnny := true ;
3607: LD_ADDR_EXP 3
3611: PUSH
3612: LD_INT 1
3614: ST_TO_ADDR
// ComFree ( Johnny ) ;
3615: LD_EXP 25
3619: PPUSH
3620: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3624: LD_STRING O2_ambush_cont
3626: PPUSH
3627: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3631: LD_EXP 21
3635: PUSH
3636: LD_EXP 21
3640: ARRAY
3641: PPUSH
3642: LD_INT 29
3644: PPUSH
3645: LD_INT 15
3647: PPUSH
3648: CALL_OW 111
// wait ( 0 0$2 ) ;
3652: LD_INT 70
3654: PPUSH
3655: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3659: LD_INT 3
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 292
3671: NOT
3672: PUSH
3673: LD_INT 3
3675: PPUSH
3676: LD_EXP 25
3680: PPUSH
3681: CALL_OW 292
3685: NOT
3686: AND
3687: IFFALSE 3708
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3689: LD_EXP 21
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_INT 58
3700: PPUSH
3701: LD_INT 32
3703: PPUSH
3704: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3708: LD_INT 1750
3710: PUSH
3711: LD_INT 1400
3713: PUSH
3714: LD_INT 1225
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: PPUSH
3728: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 43
3739: PPUSH
3740: LD_INT 13
3742: PPUSH
3743: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3747: LD_INT 35
3749: PPUSH
3750: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3754: LD_EXP 21
3758: NOT
3759: PUSH
3760: LD_EXP 25
3764: PPUSH
3765: CALL_OW 302
3769: NOT
3770: OR
3771: IFFALSE 3747
// RemoveSeeing ( 39 , 22 , 2 ) ;
3773: LD_INT 39
3775: PPUSH
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 2
3791: PPUSH
3792: CALL_OW 81
3796: PUSH
3797: LD_INT 2
3799: EQUAL
3800: IFFALSE 3804
// exit ;
3802: GO 4100
// if not IsOk ( Johnny ) then
3804: LD_EXP 25
3808: PPUSH
3809: CALL_OW 302
3813: NOT
3814: IFFALSE 3825
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3816: LD_STRING O2_ambush_out_cont
3818: PPUSH
3819: CALL_OW 337
// exit ;
3823: GO 4100
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3825: LD_EXP 16
3829: PPUSH
3830: LD_EXP 25
3834: PPUSH
3835: CALL_OW 296
3839: PUSH
3840: LD_INT 10
3842: GREATER
3843: IFFALSE 3886
// begin ComMoveUnit ( Johnny , Heike ) ;
3845: LD_EXP 25
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3859: LD_INT 35
3861: PPUSH
3862: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3866: LD_EXP 25
3870: PPUSH
3871: LD_EXP 16
3875: PPUSH
3876: CALL_OW 296
3880: PUSH
3881: LD_INT 6
3883: LESS
3884: IFFALSE 3859
// end ; CenterNowOnUnits ( Heike ) ;
3886: LD_EXP 16
3890: PPUSH
3891: CALL_OW 87
// InGameOn ;
3895: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3899: LD_EXP 16
3903: PPUSH
3904: LD_EXP 25
3908: PPUSH
3909: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3913: LD_EXP 25
3917: PPUSH
3918: LD_EXP 16
3922: PPUSH
3923: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_STRING DJ-thanks-1
3934: PPUSH
3935: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3939: LD_EXP 16
3943: PPUSH
3944: LD_STRING DH-thanks-1
3946: PPUSH
3947: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3951: LD_EXP 25
3955: PPUSH
3956: LD_STRING DJ-thanks-2
3958: PPUSH
3959: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3963: LD_EXP 25
3967: PPUSH
3968: LD_INT 4
3970: PPUSH
3971: LD_INT 3
3973: PPUSH
3974: CALL_OW 111
// wait ( 0 0$1 ) ;
3978: LD_INT 35
3980: PPUSH
3981: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3985: LD_EXP 16
3989: PPUSH
3990: LD_STRING DH-thanks-2
3992: PPUSH
3993: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3997: LD_INT 35
3999: PPUSH
4000: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4004: LD_INT 2
4006: PPUSH
4007: LD_EXP 25
4011: PPUSH
4012: CALL_OW 292
4016: NOT
4017: IFFALSE 3997
// Say ( Heike , DH-thanks-2a ) ;
4019: LD_EXP 16
4023: PPUSH
4024: LD_STRING DH-thanks-2a
4026: PPUSH
4027: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4031: LD_EXP 25
4035: PPUSH
4036: CALL_OW 64
// InGameOff ;
4040: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4044: LD_STRING O2_ambush_out_cont
4046: PPUSH
4047: CALL_OW 337
// johnnySaved := true ;
4051: LD_ADDR_EXP 4
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4059: LD_EXP 16
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 600
4069: PPUSH
4070: CALL_OW 492
// if IsOk ( Olaf ) then
4074: LD_EXP 17
4078: PPUSH
4079: CALL_OW 302
4083: IFFALSE 4100
// ComMoveXY ( Olaf , 44 , 25 ) ;
4085: LD_EXP 17
4089: PPUSH
4090: LD_INT 44
4092: PPUSH
4093: LD_INT 25
4095: PPUSH
4096: CALL_OW 111
// end ;
4100: END
// every 0 0$1 trigger russianPatrol do var i ;
4101: LD_EXP 21
4105: IFFALSE 4173
4107: GO 4109
4109: DISABLE
4110: LD_INT 0
4112: PPUSH
// begin enable ;
4113: ENABLE
// for i in russianPatrol do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_EXP 21
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4171
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL_OW 256
4136: PUSH
4137: LD_INT 1000
4139: LESS
4140: PUSH
4141: LD_VAR 0 1
4145: PPUSH
4146: CALL_OW 314
4150: NOT
4151: AND
4152: IFFALSE 4169
// ComAgressiveMove ( i , 42 , 12 ) ;
4154: LD_VAR 0 1
4158: PPUSH
4159: LD_INT 42
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: CALL_OW 114
4169: GO 4124
4171: POP
4172: POP
// end ;
4173: PPOPN 1
4175: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 2
4181: PPUSH
4182: CALL_OW 81
4186: PUSH
4187: LD_INT 2
4189: EQUAL
4190: PUSH
4191: LD_EXP 25
4195: PPUSH
4196: CALL_OW 302
4200: AND
4201: IFFALSE 4218
4203: GO 4205
4205: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4206: LD_EXP 25
4210: PPUSH
4211: LD_STRING DJ-fire-1
4213: PPUSH
4214: CALL_OW 88
4218: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4219: LD_EXP 7
4223: NOT
4224: PUSH
4225: LD_EXP 23
4229: PPUSH
4230: LD_INT 101
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 72
4244: AND
4245: IFFALSE 4365
4247: GO 4249
4249: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4250: LD_EXP 16
4254: PPUSH
4255: CALL_OW 87
// DialogueOn ;
4259: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4263: LD_EXP 16
4267: PPUSH
4268: LD_STRING DH-see-enemy-patrol-1
4270: PPUSH
4271: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4275: LD_EXP 23
4279: PPUSH
4280: LD_INT 26
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PPUSH
4290: CALL_OW 72
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_STRING DR-see-enemy-patrol-1
4301: PPUSH
4302: CALL_OW 88
// DialogueOff ;
4306: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4310: LD_EXP 23
4314: PPUSH
4315: LD_INT 66
4317: PPUSH
4318: LD_INT 22
4320: PPUSH
4321: CALL_OW 114
// wait ( 0 0$10 ) ;
4325: LD_INT 350
4327: PPUSH
4328: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4332: LD_EXP 23
4336: PPUSH
4337: LD_INT 175
4339: PPUSH
4340: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4344: LD_EXP 23
4348: PPUSH
4349: LD_INT 9
4351: PPUSH
4352: CALL_OW 173
// AddComFree ( russianForces ) ;
4356: LD_EXP 23
4360: PPUSH
4361: CALL_OW 199
// end ;
4365: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4366: LD_EXP 23
4370: PPUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 24
4376: PUSH
4377: LD_INT 960
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PPUSH
4388: CALL_OW 72
4392: IFFALSE 4636
4394: GO 4396
4396: DISABLE
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
4402: PPUSH
// begin enable ;
4403: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 2
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_EXP 23
4433: PPUSH
4434: LD_INT 1
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: LD_INT 24
4442: PUSH
4443: LD_INT 960
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 24
4452: PUSH
4453: LD_INT 500
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PPUSH
4469: CALL_OW 72
4473: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4474: LD_ADDR_VAR 0 4
4478: PUSH
4479: LD_EXP 23
4483: PPUSH
4484: LD_INT 3
4486: PUSH
4487: LD_INT 24
4489: PUSH
4490: LD_INT 500
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 72
4505: ST_TO_ADDR
// if not tmp then
4506: LD_VAR 0 2
4510: NOT
4511: IFFALSE 4515
// exit ;
4513: GO 4636
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_VAR 0 3
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 74
4538: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4539: LD_VAR 0 2
4543: PPUSH
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 296
4557: PUSH
4558: LD_INT 10
4560: LESS
4561: IFFALSE 4577
// ComAttackUnit ( tmp2 , tmp ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_VAR 0 2
4572: PPUSH
4573: CALL_OW 115
// if tmp3 then
4577: LD_VAR 0 4
4581: IFFALSE 4636
// for i in tmp do
4583: LD_ADDR_VAR 0 1
4587: PUSH
4588: LD_VAR 0 2
4592: PUSH
4593: FOR_IN
4594: IFFALSE 4634
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_INT 119
4603: PPUSH
4604: LD_INT 21
4606: PPUSH
4607: CALL_OW 297
4611: PUSH
4612: LD_INT 10
4614: GREATER
4615: IFFALSE 4632
// ComMoveXY ( i , 119 , 21 ) ;
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 119
4624: PPUSH
4625: LD_INT 21
4627: PPUSH
4628: CALL_OW 111
4632: GO 4593
4634: POP
4635: POP
// end ;
4636: PPOPN 4
4638: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4639: LD_EXP 1
4643: PUSH
4644: LD_EXP 8
4648: NOT
4649: AND
4650: PUSH
4651: LD_EXP 7
4655: NOT
4656: AND
4657: PUSH
4658: LD_EXP 16
4662: PPUSH
4663: LD_INT 25
4665: PUSH
4666: LD_INT 14
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 69
4677: PPUSH
4678: LD_EXP 16
4682: PPUSH
4683: CALL_OW 74
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 6
4695: LESS
4696: AND
4697: IFFALSE 4728
4699: GO 4701
4701: DISABLE
// begin animalCounter := animalCounter + 1 ;
4702: LD_ADDR_EXP 15
4706: PUSH
4707: LD_EXP 15
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4716: LD_EXP 16
4720: PPUSH
4721: LD_STRING DH-tiger-1
4723: PPUSH
4724: CALL_OW 88
// end ;
4728: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4729: LD_EXP 1
4733: PUSH
4734: LD_EXP 8
4738: NOT
4739: AND
4740: PUSH
4741: LD_EXP 7
4745: NOT
4746: AND
4747: PUSH
4748: LD_EXP 16
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 12
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PPUSH
4768: LD_EXP 16
4772: PPUSH
4773: CALL_OW 74
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 6
4785: LESS
4786: AND
4787: IFFALSE 4818
4789: GO 4791
4791: DISABLE
// begin animalCounter := animalCounter + 1 ;
4792: LD_ADDR_EXP 15
4796: PUSH
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 1
4804: PLUS
4805: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4806: LD_EXP 16
4810: PPUSH
4811: LD_STRING DH-ape-1
4813: PPUSH
4814: CALL_OW 88
// end ;
4818: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4819: LD_EXP 1
4823: PUSH
4824: LD_EXP 8
4828: NOT
4829: AND
4830: PUSH
4831: LD_EXP 7
4835: NOT
4836: AND
4837: PUSH
4838: LD_EXP 16
4842: PPUSH
4843: LD_INT 25
4845: PUSH
4846: LD_INT 18
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PPUSH
4858: LD_EXP 16
4862: PPUSH
4863: CALL_OW 74
4867: PPUSH
4868: CALL_OW 296
4872: PUSH
4873: LD_INT 6
4875: LESS
4876: AND
4877: IFFALSE 4908
4879: GO 4881
4881: DISABLE
// begin animalCounter := animalCounter + 1 ;
4882: LD_ADDR_EXP 15
4886: PUSH
4887: LD_EXP 15
4891: PUSH
4892: LD_INT 1
4894: PLUS
4895: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4896: LD_EXP 16
4900: PPUSH
4901: LD_STRING DH-bird-1
4903: PPUSH
4904: CALL_OW 88
// end ;
4908: END
// every 0 0$2 trigger animalCounter = 3 do
4909: LD_EXP 15
4913: PUSH
4914: LD_INT 3
4916: EQUAL
4917: IFFALSE 4929
4919: GO 4921
4921: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4922: LD_STRING ACH_ZOOLIGST
4924: PPUSH
4925: CALL_OW 543
4929: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4930: LD_INT 22
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 101
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: IFFALSE 4971
4960: GO 4962
4962: DISABLE
// russianSpotted := true ;
4963: LD_ADDR_EXP 9
4967: PUSH
4968: LD_INT 1
4970: ST_TO_ADDR
4971: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4972: LD_EXP 16
4976: PPUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 3
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 21
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 74
5015: PPUSH
5016: CALL_OW 296
5020: PUSH
5021: LD_INT 8
5023: LESS
5024: IFFALSE 5041
5026: GO 5028
5028: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5029: LD_EXP 16
5033: PPUSH
5034: LD_STRING DH-enemy-base
5036: PPUSH
5037: CALL_OW 88
5041: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5042: LD_EXP 25
5046: PPUSH
5047: CALL_OW 305
5051: NOT
5052: PUSH
5053: LD_EXP 6
5057: NOT
5058: AND
5059: PUSH
5060: LD_EXP 5
5064: AND
5065: PUSH
5066: LD_EXP 12
5070: NOT
5071: AND
5072: PUSH
5073: LD_EXP 11
5077: NOT
5078: AND
5079: IFFALSE 5237
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5087: LD_INT 35
5089: PPUSH
5090: CALL_OW 67
// for i in dogTag do
5094: LD_ADDR_VAR 0 1
5098: PUSH
5099: LD_EXP 5
5103: PUSH
5104: FOR_IN
5105: IFFALSE 5154
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5107: LD_EXP 16
5111: PPUSH
5112: LD_VAR 0 1
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PPUSH
5121: LD_VAR 0 1
5125: PUSH
5126: LD_INT 2
5128: ARRAY
5129: PPUSH
5130: CALL_OW 297
5134: PUSH
5135: LD_INT 3
5137: LESS
5138: IFFALSE 5152
// begin dogTagFound := i ;
5140: LD_ADDR_EXP 6
5144: PUSH
5145: LD_VAR 0 1
5149: ST_TO_ADDR
// break ;
5150: GO 5154
// end ;
5152: GO 5104
5154: POP
5155: POP
// until dogTagFound ;
5156: LD_EXP 6
5160: IFFALSE 5087
// CenterNowOnUnits ( Heike ) ;
5162: LD_EXP 16
5166: PPUSH
5167: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5171: LD_EXP 16
5175: PPUSH
5176: LD_EXP 6
5180: PUSH
5181: LD_INT 1
5183: ARRAY
5184: PPUSH
5185: LD_EXP 6
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: PPUSH
5194: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5198: LD_STRING ACH_DOGTAG
5200: PPUSH
5201: CALL_OW 543
// if mercenariesQuestReady then
5205: LD_EXP 10
5209: IFFALSE 5225
// Say ( Heike , DH-dogtag-found-quest ) else
5211: LD_EXP 16
5215: PPUSH
5216: LD_STRING DH-dogtag-found-quest
5218: PPUSH
5219: CALL_OW 88
5223: GO 5237
// Say ( Heike , DH-dogtag-found ) ;
5225: LD_EXP 16
5229: PPUSH
5230: LD_STRING DH-dogtag-found
5232: PPUSH
5233: CALL_OW 88
// end ;
5237: PPOPN 1
5239: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5240: LD_EXP 8
5244: NOT
5245: PUSH
5246: LD_EXP 7
5250: NOT
5251: AND
5252: PUSH
5253: LD_INT 5
5255: PPUSH
5256: LD_EXP 16
5260: PPUSH
5261: CALL_OW 292
5265: AND
5266: PUSH
5267: LD_EXP 16
5271: PPUSH
5272: LD_EXP 17
5276: PPUSH
5277: CALL_OW 296
5281: PUSH
5282: LD_INT 8
5284: LESS
5285: AND
5286: IFFALSE 5647
5288: GO 5290
5290: DISABLE
// begin olafSpotted := true ;
5291: LD_ADDR_EXP 8
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if HasTask ( Olaf ) then
5299: LD_EXP 17
5303: PPUSH
5304: CALL_OW 314
5308: IFFALSE 5319
// ComStop ( Olaf ) ;
5310: LD_EXP 17
5314: PPUSH
5315: CALL_OW 141
// InGameOn ;
5319: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5323: LD_EXP 17
5327: PPUSH
5328: LD_EXP 16
5332: PPUSH
5333: CALL_OW 296
5337: PUSH
5338: LD_INT 8
5340: GREATER
5341: IFFALSE 5357
// ComMoveUnit ( Olaf , Heike ) ;
5343: LD_EXP 17
5347: PPUSH
5348: LD_EXP 16
5352: PPUSH
5353: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5357: LD_INT 35
5359: PPUSH
5360: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5364: LD_EXP 17
5368: PPUSH
5369: LD_EXP 16
5373: PPUSH
5374: CALL_OW 296
5378: PUSH
5379: LD_INT 8
5381: LESSEQUAL
5382: IFFALSE 5357
// ComTurnUnit ( Heike , Olaf ) ;
5384: LD_EXP 16
5388: PPUSH
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5412: LD_EXP 17
5416: PPUSH
5417: LD_STRING DO-olaf-1
5419: PPUSH
5420: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5424: LD_EXP 16
5428: PPUSH
5429: LD_STRING DH-olaf-1
5431: PPUSH
5432: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5436: LD_EXP 17
5440: PPUSH
5441: LD_STRING DO-olaf-2
5443: PPUSH
5444: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5448: LD_EXP 16
5452: PPUSH
5453: LD_STRING DH-olaf-2
5455: PPUSH
5456: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5460: LD_EXP 17
5464: PPUSH
5465: LD_STRING DO-olaf-3
5467: PPUSH
5468: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5472: LD_EXP 17
5476: PPUSH
5477: LD_STRING DO-olaf-4
5479: PPUSH
5480: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5484: LD_EXP 16
5488: PPUSH
5489: LD_STRING DH-olaf-4
5491: PPUSH
5492: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5496: LD_EXP 17
5500: PPUSH
5501: LD_STRING DO-olaf-5
5503: PPUSH
5504: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5508: LD_EXP 16
5512: PPUSH
5513: LD_STRING DH-olaf-5
5515: PPUSH
5516: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5520: LD_EXP 17
5524: PPUSH
5525: LD_STRING DO-olaf-6
5527: PPUSH
5528: CALL_OW 88
// if russianSpotted or johnnySaved then
5532: LD_EXP 9
5536: PUSH
5537: LD_EXP 4
5541: OR
5542: IFFALSE 5570
// begin Say ( Heike , DH-olaf-6a ) ;
5544: LD_EXP 16
5548: PPUSH
5549: LD_STRING DH-olaf-6a
5551: PPUSH
5552: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5556: LD_EXP 17
5560: PPUSH
5561: LD_STRING DO-olaf-7a
5563: PPUSH
5564: CALL_OW 88
// end else
5568: GO 5594
// begin Say ( Heike , DH-olaf-6b ) ;
5570: LD_EXP 16
5574: PPUSH
5575: LD_STRING DH-olaf-6b
5577: PPUSH
5578: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5582: LD_EXP 17
5586: PPUSH
5587: LD_STRING DO-olaf-7b
5589: PPUSH
5590: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-8
5601: PPUSH
5602: CALL_OW 88
// InGameOff ;
5606: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5610: LD_STRING O3_camp_cont
5612: PPUSH
5613: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5617: LD_EXP 17
5621: PPUSH
5622: LD_INT 52
5624: PPUSH
5625: LD_INT 90
5627: PPUSH
5628: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_INT 53
5639: PPUSH
5640: LD_INT 89
5642: PPUSH
5643: CALL_OW 178
// end ;
5647: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5648: LD_EXP 8
5652: NOT
5653: PUSH
5654: LD_EXP 16
5658: PPUSH
5659: LD_EXP 18
5663: PPUSH
5664: CALL_OW 296
5668: PUSH
5669: LD_INT 36
5671: LESS
5672: AND
5673: IFFALSE 5693
5675: GO 5677
5677: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5678: LD_EXP 17
5682: PPUSH
5683: LD_INT 39
5685: PPUSH
5686: LD_INT 71
5688: PPUSH
5689: CALL_OW 111
5693: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5694: LD_EXP 7
5698: NOT
5699: PUSH
5700: LD_INT 2
5702: PPUSH
5703: LD_EXP 19
5707: PPUSH
5708: CALL_OW 292
5712: PUSH
5713: LD_INT 2
5715: PPUSH
5716: LD_EXP 18
5720: PPUSH
5721: CALL_OW 292
5725: OR
5726: AND
5727: IFFALSE 7052
5729: GO 5731
5731: DISABLE
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
// begin if IsLive ( Johnny ) then
5737: LD_EXP 25
5741: PPUSH
5742: CALL_OW 300
5746: IFFALSE 5757
// KillUnit ( Johnny ) ;
5748: LD_EXP 25
5752: PPUSH
5753: CALL_OW 66
// mercenariesSpotted := true ;
5757: LD_ADDR_EXP 7
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5765: LD_STRING O4_camp_cont
5767: PPUSH
5768: CALL_OW 337
// InGameOn ;
5772: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5776: LD_INT 53
5778: PPUSH
5779: LD_INT 89
5781: PPUSH
5782: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5786: LD_INT 53
5788: PPUSH
5789: LD_INT 89
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: LD_INT 8
5797: NEG
5798: PPUSH
5799: CALL_OW 330
// if olafSpotted then
5803: LD_EXP 8
5807: IFFALSE 5925
// begin AddComTurnUnit ( Olaf , Heike ) ;
5809: LD_EXP 17
5813: PPUSH
5814: LD_EXP 16
5818: PPUSH
5819: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5823: LD_EXP 16
5827: PPUSH
5828: LD_INT 51
5830: PPUSH
5831: LD_INT 86
5833: PPUSH
5834: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5838: LD_EXP 16
5842: PPUSH
5843: LD_EXP 17
5847: PPUSH
5848: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5852: LD_EXP 17
5856: PPUSH
5857: LD_STRING DO-camp-1
5859: PPUSH
5860: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5864: LD_EXP 18
5868: PUSH
5869: LD_EXP 19
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: LD_EXP 16
5882: PPUSH
5883: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5887: LD_EXP 18
5891: PPUSH
5892: LD_STRING DG-camp-1
5894: PPUSH
5895: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5899: LD_EXP 16
5903: PPUSH
5904: LD_STRING DH-camp-1
5906: PPUSH
5907: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5911: LD_EXP 17
5915: PPUSH
5916: LD_STRING DO-camp-2
5918: PPUSH
5919: CALL_OW 88
// end else
5923: GO 6320
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5925: LD_EXP 16
5929: PPUSH
5930: LD_INT 51
5932: PPUSH
5933: LD_INT 86
5935: PPUSH
5936: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5940: LD_EXP 16
5944: PPUSH
5945: LD_EXP 18
5949: PPUSH
5950: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5954: LD_EXP 18
5958: PUSH
5959: LD_EXP 19
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PPUSH
5968: LD_EXP 16
5972: PPUSH
5973: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5977: LD_EXP 18
5981: PPUSH
5982: LD_STRING DG-camp-1a
5984: PPUSH
5985: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5989: LD_EXP 16
5993: PPUSH
5994: LD_STRING DH-camp-1a
5996: PPUSH
5997: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6008: LD_EXP 19
6012: PPUSH
6013: LD_EXP 17
6017: PPUSH
6018: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6022: LD_EXP 19
6026: PPUSH
6027: LD_STRING DM-camp-1a
6029: PPUSH
6030: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 52
6041: PPUSH
6042: LD_INT 90
6044: PPUSH
6045: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6049: LD_EXP 19
6053: PPUSH
6054: LD_EXP 16
6058: PPUSH
6059: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6063: LD_EXP 18
6067: PPUSH
6068: LD_STRING DG-camp-2a
6070: PPUSH
6071: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6075: LD_EXP 16
6079: PPUSH
6080: LD_STRING DH-camp-2a
6082: PPUSH
6083: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6087: LD_EXP 19
6091: PPUSH
6092: LD_STRING DM-camp-2a
6094: PPUSH
6095: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6106: LD_EXP 17
6110: PPUSH
6111: LD_EXP 16
6115: PPUSH
6116: CALL_OW 296
6120: PUSH
6121: LD_INT 10
6123: LESS
6124: IFFALSE 6099
// AddComTurnUnit ( Olaf , Heike ) ;
6126: LD_EXP 17
6130: PPUSH
6131: LD_EXP 16
6135: PPUSH
6136: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6140: LD_EXP 19
6144: PPUSH
6145: LD_EXP 16
6149: PPUSH
6150: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6154: LD_EXP 17
6158: PPUSH
6159: LD_STRING DO-camp-2a
6161: PPUSH
6162: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6166: LD_EXP 16
6170: PPUSH
6171: LD_EXP 17
6175: PPUSH
6176: CALL_OW 119
// if russianSpotted then
6180: LD_EXP 9
6184: IFFALSE 6224
// begin Say ( Heike , DH-camp-2aa ) ;
6186: LD_EXP 16
6190: PPUSH
6191: LD_STRING DH-camp-2aa
6193: PPUSH
6194: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6198: LD_EXP 18
6202: PPUSH
6203: LD_STRING DG-camp-2aa
6205: PPUSH
6206: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6210: LD_EXP 19
6214: PPUSH
6215: LD_STRING DM-camp-2aa
6217: PPUSH
6218: CALL_OW 88
// end else
6222: GO 6248
// begin Say ( Heike , DH-camp-2ab ) ;
6224: LD_EXP 16
6228: PPUSH
6229: LD_STRING DH-camp-2ab
6231: PPUSH
6232: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6236: LD_EXP 19
6240: PPUSH
6241: LD_STRING DM-camp-2ab
6243: PPUSH
6244: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6248: LD_EXP 16
6252: PPUSH
6253: LD_STRING DH-camp-3a
6255: PPUSH
6256: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6260: LD_EXP 17
6264: PPUSH
6265: LD_STRING DO-camp-3a
6267: PPUSH
6268: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6272: LD_EXP 18
6276: PPUSH
6277: LD_STRING DG-camp-3a
6279: PPUSH
6280: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6284: LD_EXP 16
6288: PPUSH
6289: LD_STRING DH-camp-4aa
6291: PPUSH
6292: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6296: LD_EXP 19
6300: PPUSH
6301: LD_STRING DM-camp-4aa
6303: PPUSH
6304: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6308: LD_EXP 17
6312: PPUSH
6313: LD_STRING DO-camp-4a
6315: PPUSH
6316: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6320: LD_EXP 17
6324: PPUSH
6325: LD_STRING DO-camp-3
6327: PPUSH
6328: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6332: LD_EXP 17
6336: PPUSH
6337: LD_STRING DO-camp-4
6339: PPUSH
6340: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6344: LD_EXP 18
6348: PPUSH
6349: LD_EXP 17
6353: PPUSH
6354: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6358: LD_EXP 18
6362: PPUSH
6363: LD_STRING DG-camp-4
6365: PPUSH
6366: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6370: LD_EXP 16
6374: PPUSH
6375: LD_EXP 18
6379: PPUSH
6380: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6384: LD_EXP 16
6388: PPUSH
6389: LD_STRING DH-camp-4
6391: PPUSH
6392: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6396: LD_EXP 19
6400: PUSH
6401: LD_EXP 17
6405: PUSH
6406: LD_EXP 18
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: PPUSH
6416: LD_EXP 16
6420: PPUSH
6421: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6425: LD_EXP 18
6429: PPUSH
6430: LD_STRING DG-camp-5
6432: PPUSH
6433: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6437: LD_EXP 18
6441: PPUSH
6442: LD_STRING DG-camp-6
6444: PPUSH
6445: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6449: LD_EXP 16
6453: PPUSH
6454: LD_STRING DH-camp-6
6456: PPUSH
6457: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6461: LD_EXP 18
6465: PPUSH
6466: LD_STRING DG-camp-7
6468: PPUSH
6469: CALL_OW 88
// if DogTagFound then
6473: LD_EXP 6
6477: IFFALSE 6517
// begin Say ( Heike , DH-quest-1a ) ;
6479: LD_EXP 16
6483: PPUSH
6484: LD_STRING DH-quest-1a
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-quest-1a
6498: PPUSH
6499: CALL_OW 88
// mercenariesQuestDone := true ;
6503: LD_ADDR_EXP 11
6507: PUSH
6508: LD_INT 1
6510: ST_TO_ADDR
// InGameOff ;
6511: CALL_OW 9
// end else
6515: GO 6683
// begin Say ( Heike , DH-camp-7 ) ;
6517: LD_EXP 16
6521: PPUSH
6522: LD_STRING DH-camp-7
6524: PPUSH
6525: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6529: LD_EXP 16
6533: PPUSH
6534: CALL_OW 256
6538: PUSH
6539: LD_INT 1000
6541: LESS
6542: IFFALSE 6634
// begin Say ( Olaf , DO-heal-1 ) ;
6544: LD_EXP 17
6548: PPUSH
6549: LD_STRING DO-heal-1
6551: PPUSH
6552: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6556: LD_EXP 16
6560: PPUSH
6561: LD_INT 51
6563: PPUSH
6564: LD_INT 88
6566: PPUSH
6567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6571: LD_INT 35
6573: PPUSH
6574: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6578: LD_EXP 16
6582: PPUSH
6583: LD_EXP 17
6587: PPUSH
6588: CALL_OW 296
6592: PUSH
6593: LD_INT 4
6595: LESS
6596: PUSH
6597: LD_EXP 16
6601: PPUSH
6602: LD_INT 51
6604: PPUSH
6605: LD_INT 88
6607: PPUSH
6608: CALL_OW 307
6612: OR
6613: IFFALSE 6571
// SetLives ( Heike , 1000 ) ;
6615: LD_EXP 16
6619: PPUSH
6620: LD_INT 1000
6622: PPUSH
6623: CALL_OW 234
// wait ( 0 0$2 ) ;
6627: LD_INT 70
6629: PPUSH
6630: CALL_OW 67
// end ; InGameOff ;
6634: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6638: LD_EXP 17
6642: PUSH
6643: LD_EXP 18
6647: PUSH
6648: LD_EXP 19
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: LD_INT 53
6660: PPUSH
6661: LD_INT 89
6663: PPUSH
6664: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6668: LD_STRING O5_proof_cont
6670: PPUSH
6671: CALL_OW 337
// mercenariesQuestReady := true ;
6675: LD_ADDR_EXP 10
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6683: LD_EXP 10
6687: NOT
6688: IFFALSE 6692
// exit ;
6690: GO 7052
// wait ( 0 0$35 ) ;
6692: LD_INT 1225
6694: PPUSH
6695: CALL_OW 67
// driver := PreparePatrolTank ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: CALL 2747 0 0
6708: ST_TO_ADDR
// if not driver then
6709: LD_VAR 0 2
6713: NOT
6714: IFFALSE 6718
// exit ;
6716: GO 7052
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6718: LD_INT 2
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: LD_INT 2
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL_OW 310
6748: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6749: LD_VAR 0 3
6753: PPUSH
6754: LD_INT 500
6756: PPUSH
6757: CALL_OW 234
// SetLives ( driver , 450 ) ;
6761: LD_VAR 0 2
6765: PPUSH
6766: LD_INT 450
6768: PPUSH
6769: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_INT 59
6780: PPUSH
6781: LD_INT 60
6783: PPUSH
6784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6788: LD_INT 35
6790: PPUSH
6791: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6795: LD_VAR 0 3
6799: PPUSH
6800: LD_INT 59
6802: PPUSH
6803: LD_INT 60
6805: PPUSH
6806: CALL_OW 307
6810: IFFALSE 6788
// if not See ( 1 , Heike ) then
6812: LD_INT 1
6814: PPUSH
6815: LD_EXP 16
6819: PPUSH
6820: CALL_OW 292
6824: NOT
6825: IFFALSE 6949
// begin if Difficulty < 3 then
6827: LD_OWVAR 67
6831: PUSH
6832: LD_INT 3
6834: LESS
6835: IFFALSE 6853
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6837: LD_INT 59
6839: PPUSH
6840: LD_INT 60
6842: PPUSH
6843: LD_INT 2
6845: PPUSH
6846: LD_INT 6
6848: PPUSH
6849: CALL_OW 330
// ComExitVehicle ( driver ) ;
6853: LD_VAR 0 2
6857: PPUSH
6858: CALL_OW 121
// wait ( 0 0$1 ) ;
6862: LD_INT 35
6864: PPUSH
6865: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6869: LD_VAR 0 2
6873: PPUSH
6874: LD_INT 58
6876: PPUSH
6877: LD_INT 54
6879: PPUSH
6880: CALL_OW 171
// wait ( 0 0$1 ) ;
6884: LD_INT 35
6886: PPUSH
6887: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6891: LD_VAR 0 2
6895: PPUSH
6896: LD_INT 57
6898: PPUSH
6899: LD_INT 53
6901: PPUSH
6902: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6906: LD_VAR 0 2
6910: PPUSH
6911: LD_INT 350
6913: PPUSH
6914: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6918: LD_VAR 0 2
6922: PPUSH
6923: LD_VAR 0 3
6927: PPUSH
6928: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6932: LD_VAR 0 2
6936: PPUSH
6937: LD_INT 107
6939: PPUSH
6940: LD_INT 118
6942: PPUSH
6943: CALL_OW 171
// end else
6947: GO 6964
// begin ComMoveXY ( driver , 107 , 118 ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 107
6956: PPUSH
6957: LD_INT 118
6959: PPUSH
6960: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6964: LD_INT 35
6966: PPUSH
6967: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6971: LD_VAR 0 3
6975: PPUSH
6976: LD_INT 107
6978: PPUSH
6979: LD_INT 118
6981: PPUSH
6982: CALL_OW 307
6986: PUSH
6987: LD_VAR 0 2
6991: PPUSH
6992: CALL_OW 301
6996: OR
6997: IFFALSE 6964
// if IsDead ( driver [ 1 ] ) then
6999: LD_VAR 0 2
7003: PUSH
7004: LD_INT 1
7006: ARRAY
7007: PPUSH
7008: CALL_OW 301
7012: IFFALSE 7016
// exit ;
7014: GO 7052
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7016: LD_ADDR_VAR 0 1
7020: PUSH
7021: LD_INT 22
7023: PUSH
7024: LD_INT 1
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: PUSH
7036: FOR_IN
7037: IFFALSE 7050
// RemoveUnit ( i ) ;
7039: LD_VAR 0 1
7043: PPUSH
7044: CALL_OW 64
7048: GO 7036
7050: POP
7051: POP
// end ;
7052: PPOPN 3
7054: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7055: LD_INT 10
7057: PPUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 2
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 21
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 70
7086: IFFALSE 7160
7088: GO 7090
7090: DISABLE
// begin InGameOn ;
7091: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7095: LD_EXP 17
7099: PUSH
7100: LD_EXP 19
7104: PUSH
7105: LD_EXP 18
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: LD_EXP 16
7119: PPUSH
7120: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7124: LD_EXP 19
7128: PPUSH
7129: LD_STRING DM-quest-1
7131: PPUSH
7132: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7136: LD_EXP 18
7140: PPUSH
7141: LD_STRING DG-quest-1
7143: PPUSH
7144: CALL_OW 88
// InGameOff ;
7148: CALL_OW 9
// mercenariesQuestDone := true ;
7152: LD_ADDR_EXP 11
7156: PUSH
7157: LD_INT 1
7159: ST_TO_ADDR
// end ;
7160: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7161: LD_EXP 16
7165: PPUSH
7166: LD_INT 10
7168: PPUSH
7169: CALL_OW 308
7173: PUSH
7174: LD_EXP 6
7178: AND
7179: PUSH
7180: LD_EXP 10
7184: AND
7185: PUSH
7186: LD_INT 10
7188: PPUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 2
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 21
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 70
7217: NOT
7218: AND
7219: IFFALSE 7391
7221: GO 7223
7223: DISABLE
7224: LD_INT 0
7226: PPUSH
// begin InGameOn ;
7227: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7231: LD_EXP 17
7235: PUSH
7236: LD_EXP 19
7240: PUSH
7241: LD_EXP 18
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: LD_EXP 16
7255: PPUSH
7256: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7260: LD_EXP 16
7264: PPUSH
7265: LD_INT 54
7267: PPUSH
7268: LD_INT 86
7270: PPUSH
7271: CALL_OW 111
// p := p + 1 ;
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_VAR 0 1
7284: PUSH
7285: LD_INT 1
7287: PLUS
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 1
7300: PUSH
7301: LD_VAR 0 1
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7310: LD_EXP 16
7314: PPUSH
7315: LD_EXP 18
7319: PPUSH
7320: CALL_OW 296
7324: PUSH
7325: LD_INT 4
7327: LESS
7328: PUSH
7329: LD_VAR 0 1
7333: PUSH
7334: LD_INT 5
7336: GREATER
7337: OR
7338: IFFALSE 7289
// Say ( Mike , DM-quest-1 ) ;
7340: LD_EXP 19
7344: PPUSH
7345: LD_STRING DM-quest-1
7347: PPUSH
7348: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7352: LD_EXP 18
7356: PPUSH
7357: LD_STRING DG-quest-1
7359: PPUSH
7360: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7364: LD_EXP 16
7368: PPUSH
7369: LD_INT 55
7371: PPUSH
7372: LD_INT 87
7374: PPUSH
7375: CALL_OW 111
// InGameOff ;
7379: CALL_OW 9
// mercenariesQuestDone := true ;
7383: LD_ADDR_EXP 11
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// end ;
7391: PPOPN 1
7393: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7394: LD_EXP 16
7398: PUSH
7399: LD_INT 55
7401: PUSH
7402: EMPTY
7403: LIST
7404: PPUSH
7405: CALL_OW 69
7409: IN
7410: IFFALSE 7450
7412: GO 7414
7414: DISABLE
// begin if Difficulty < 3 then
7415: LD_OWVAR 67
7419: PUSH
7420: LD_INT 3
7422: LESS
7423: IFFALSE 7438
// RemoveSeeing ( 59 , 60 , 2 ) ;
7425: LD_INT 59
7427: PPUSH
7428: LD_INT 60
7430: PPUSH
7431: LD_INT 2
7433: PPUSH
7434: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7438: LD_EXP 16
7442: PPUSH
7443: LD_STRING DH-driver
7445: PPUSH
7446: CALL_OW 88
// end ;
7450: END
// every 0 0$1 trigger mercenariesQuestDone do
7451: LD_EXP 11
7455: IFFALSE 7943
7457: GO 7459
7459: DISABLE
// begin if mercenariesQuestReady then
7460: LD_EXP 10
7464: IFFALSE 7473
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7466: LD_STRING O5_proof_cont_out
7468: PPUSH
7469: CALL_OW 337
// InGameOn ;
7473: CALL_OW 8
// if IsInUnit ( Heike ) then
7477: LD_EXP 16
7481: PPUSH
7482: CALL_OW 310
7486: IFFALSE 7497
// ComExitVehicle ( Heike ) ;
7488: LD_EXP 16
7492: PPUSH
7493: CALL_OW 121
// wait ( 3 ) ;
7497: LD_INT 3
7499: PPUSH
7500: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7504: LD_EXP 16
7508: PPUSH
7509: LD_EXP 18
7513: PPUSH
7514: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7518: LD_EXP 17
7522: PUSH
7523: LD_EXP 19
7527: PUSH
7528: LD_EXP 18
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: LD_EXP 16
7542: PPUSH
7543: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7547: LD_EXP 16
7551: PPUSH
7552: LD_STRING DH-quest-done-1
7554: PPUSH
7555: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7559: LD_EXP 19
7563: PPUSH
7564: LD_STRING DM-quest-done-1
7566: PPUSH
7567: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7571: LD_EXP 18
7575: PPUSH
7576: LD_STRING DG-quest-done-1
7578: PPUSH
7579: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7583: LD_EXP 16
7587: PPUSH
7588: LD_EXP 17
7592: PPUSH
7593: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7597: LD_EXP 16
7601: PPUSH
7602: LD_STRING DH-quest-done-2
7604: PPUSH
7605: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7609: LD_EXP 17
7613: PPUSH
7614: LD_STRING DO-quest-done-2
7616: PPUSH
7617: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7621: LD_EXP 17
7625: PPUSH
7626: LD_STRING DO-quest-done-3
7628: PPUSH
7629: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7633: LD_EXP 18
7637: PPUSH
7638: LD_INT 51
7640: PPUSH
7641: LD_INT 90
7643: PPUSH
7644: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7648: LD_EXP 18
7652: PPUSH
7653: LD_INT 50
7655: PPUSH
7656: LD_INT 89
7658: PPUSH
7659: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7663: LD_EXP 16
7667: PPUSH
7668: LD_EXP 18
7672: PPUSH
7673: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7677: LD_EXP 18
7681: PPUSH
7682: LD_STRING DG-quest-done-4
7684: PPUSH
7685: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7689: LD_EXP 18
7693: PPUSH
7694: LD_EXP 16
7698: PPUSH
7699: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7703: LD_EXP 16
7707: PPUSH
7708: CALL_OW 256
7712: PUSH
7713: LD_INT 1000
7715: LESS
7716: IFFALSE 7808
// begin Say ( Olaf , DO-heal-1 ) ;
7718: LD_EXP 17
7722: PPUSH
7723: LD_STRING DO-heal-1
7725: PPUSH
7726: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7730: LD_EXP 16
7734: PPUSH
7735: LD_INT 51
7737: PPUSH
7738: LD_INT 88
7740: PPUSH
7741: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7745: LD_INT 35
7747: PPUSH
7748: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7752: LD_EXP 16
7756: PPUSH
7757: LD_EXP 17
7761: PPUSH
7762: CALL_OW 296
7766: PUSH
7767: LD_INT 4
7769: LESS
7770: PUSH
7771: LD_EXP 16
7775: PPUSH
7776: LD_INT 51
7778: PPUSH
7779: LD_INT 88
7781: PPUSH
7782: CALL_OW 307
7786: OR
7787: IFFALSE 7745
// SetLives ( Heike , 1000 ) ;
7789: LD_EXP 16
7793: PPUSH
7794: LD_INT 1000
7796: PPUSH
7797: CALL_OW 234
// wait ( 0 0$2 ) ;
7801: LD_INT 70
7803: PPUSH
7804: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7808: LD_EXP 16
7812: PPUSH
7813: LD_STRING DH-quest-done-4
7815: PPUSH
7816: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7820: LD_EXP 17
7824: PPUSH
7825: LD_STRING DO-quest-done-4
7827: PPUSH
7828: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7832: LD_EXP 16
7836: PPUSH
7837: LD_EXP 17
7841: PPUSH
7842: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7846: LD_EXP 16
7850: PPUSH
7851: LD_STRING DH-quest-done-5
7853: PPUSH
7854: CALL_OW 88
// InGameOff ;
7858: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7862: LD_STRING O6_end_cont
7864: PPUSH
7865: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7869: LD_EXP 18
7873: PPUSH
7874: LD_INT 2
7876: PPUSH
7877: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7881: LD_EXP 19
7885: PPUSH
7886: LD_INT 2
7888: PPUSH
7889: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7893: LD_INT 42
7895: PPUSH
7896: LD_INT 2
7898: PPUSH
7899: LD_INT 2
7901: PPUSH
7902: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7906: LD_EXP 17
7910: PPUSH
7911: LD_INT 53
7913: PPUSH
7914: LD_INT 89
7916: PPUSH
7917: CALL_OW 118
// lastObjectiveActive := true ;
7921: LD_ADDR_EXP 12
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7929: LD_INT 1
7931: PPUSH
7932: LD_INT 1
7934: PPUSH
7935: CALL_OW 424
// PreparePrison ;
7939: CALL 1097 0 0
// end ;
7943: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7944: LD_INT 22
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 91
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: LD_INT 4
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PPUSH
7972: CALL_OW 69
7976: IFFALSE 8130
7978: GO 7980
7980: DISABLE
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
// begin wait ( [ 0 0$10 , 0 0$09 , 0 0$08 ] [ Difficulty ] ) ;
7985: LD_INT 350
7987: PUSH
7988: LD_INT 315
7990: PUSH
7991: LD_INT 280
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_OWVAR 67
8003: ARRAY
8004: PPUSH
8005: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8009: LD_ADDR_VAR 0 2
8013: PUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 25
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 54
8036: PUSH
8037: EMPTY
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 69
8049: ST_TO_ADDR
// if not tmp then
8050: LD_VAR 0 2
8054: NOT
8055: IFFALSE 8059
// exit ;
8057: GO 8130
// for i in tmp do
8059: LD_ADDR_VAR 0 1
8063: PUSH
8064: LD_VAR 0 2
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8098
// begin ComExitBuilding ( i ) ;
8072: LD_VAR 0 1
8076: PPUSH
8077: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8081: LD_VAR 0 1
8085: PPUSH
8086: LD_INT 121
8088: PPUSH
8089: LD_INT 22
8091: PPUSH
8092: CALL_OW 174
// end ;
8096: GO 8069
8098: POP
8099: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8100: LD_EXP 23
8104: PPUSH
8105: LD_INT 121
8107: PPUSH
8108: LD_INT 22
8110: PPUSH
8111: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8115: LD_EXP 24
8119: PPUSH
8120: LD_INT 121
8122: PPUSH
8123: LD_INT 22
8125: PPUSH
8126: CALL_OW 114
// end ;
8130: PPOPN 2
8132: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8133: LD_INT 22
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 91
8145: PUSH
8146: LD_INT 8
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PPUSH
8161: CALL_OW 69
8165: IFFALSE 8319
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// begin wait ( [ 0 0$09 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8174: LD_INT 315
8176: PUSH
8177: LD_INT 245
8179: PUSH
8180: LD_INT 210
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_OWVAR 67
8192: ARRAY
8193: PPUSH
8194: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8198: LD_ADDR_VAR 0 2
8202: PUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 3
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 25
8215: PUSH
8216: LD_INT 1
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 54
8225: PUSH
8226: EMPTY
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: ST_TO_ADDR
// if not tmp then
8239: LD_VAR 0 2
8243: NOT
8244: IFFALSE 8248
// exit ;
8246: GO 8319
// for i in tmp do
8248: LD_ADDR_VAR 0 1
8252: PUSH
8253: LD_VAR 0 2
8257: PUSH
8258: FOR_IN
8259: IFFALSE 8287
// begin ComExitBuilding ( i ) ;
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: LD_INT 142
8277: PPUSH
8278: LD_INT 71
8280: PPUSH
8281: CALL_OW 174
// end ;
8285: GO 8258
8287: POP
8288: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8289: LD_EXP 23
8293: PPUSH
8294: LD_INT 142
8296: PPUSH
8297: LD_INT 71
8299: PPUSH
8300: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8304: LD_EXP 24
8308: PPUSH
8309: LD_INT 142
8311: PPUSH
8312: LD_INT 71
8314: PPUSH
8315: CALL_OW 114
// end ;
8319: PPOPN 2
8321: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8322: LD_INT 22
8324: PUSH
8325: LD_INT 2
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 2
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 58
8344: PUSH
8345: EMPTY
8346: LIST
8347: PUSH
8348: LD_INT 3
8350: PUSH
8351: LD_INT 24
8353: PUSH
8354: LD_INT 1000
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 91
8367: PUSH
8368: LD_EXP 17
8372: PUSH
8373: LD_INT 8
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PPUSH
8388: CALL_OW 69
8392: PUSH
8393: LD_EXP 17
8397: PPUSH
8398: CALL_OW 302
8402: AND
8403: IFFALSE 8517
8405: GO 8407
8407: DISABLE
// begin enable ;
8408: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8409: LD_EXP 17
8413: PPUSH
8414: LD_INT 22
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 21
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 58
8436: PUSH
8437: EMPTY
8438: LIST
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 1000
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 91
8459: PUSH
8460: LD_EXP 17
8464: PUSH
8465: LD_INT 8
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PPUSH
8480: CALL_OW 69
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8493: LD_EXP 17
8497: PPUSH
8498: LD_INT 52
8500: PPUSH
8501: LD_INT 90
8503: PPUSH
8504: CALL_OW 171
// AddComHold ( Olaf ) ;
8508: LD_EXP 17
8512: PPUSH
8513: CALL_OW 200
// end ;
8517: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8518: LD_EXP 12
8522: PUSH
8523: LD_INT 2
8525: PPUSH
8526: CALL_OW 302
8530: NOT
8531: AND
8532: PUSH
8533: LD_OWVAR 67
8537: PUSH
8538: LD_INT 1
8540: EQUAL
8541: AND
8542: PUSH
8543: LD_EXP 13
8547: NOT
8548: AND
8549: IFFALSE 8566
8551: GO 8553
8553: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8554: LD_EXP 16
8558: PPUSH
8559: LD_STRING DH-prison-missing
8561: PPUSH
8562: CALL_OW 88
// end ;
8566: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8567: LD_EXP 12
8571: PUSH
8572: LD_INT 8
8574: PPUSH
8575: CALL_OW 302
8579: NOT
8580: AND
8581: PUSH
8582: LD_OWVAR 67
8586: PUSH
8587: LD_INT 1
8589: GREATER
8590: AND
8591: PUSH
8592: LD_EXP 13
8596: NOT
8597: AND
8598: IFFALSE 8615
8600: GO 8602
8602: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8603: LD_EXP 16
8607: PPUSH
8608: LD_STRING DH-prison-missing
8610: PPUSH
8611: CALL_OW 88
// end ;
8615: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8616: LD_EXP 12
8620: PUSH
8621: LD_INT 3
8623: PPUSH
8624: CALL_OW 302
8628: NOT
8629: AND
8630: PUSH
8631: LD_EXP 13
8635: NOT
8636: AND
8637: IFFALSE 8654
8639: GO 8641
8641: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8642: LD_EXP 16
8646: PPUSH
8647: LD_STRING DH-prison-missing-a
8649: PPUSH
8650: CALL_OW 88
// end ;
8654: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8655: LD_EXP 12
8659: PUSH
8660: LD_INT 10
8662: PPUSH
8663: CALL_OW 302
8667: NOT
8668: AND
8669: PUSH
8670: LD_EXP 13
8674: NOT
8675: AND
8676: IFFALSE 8693
8678: GO 8680
8680: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8681: LD_EXP 16
8685: PPUSH
8686: LD_STRING DH-prison-missing-a
8688: PPUSH
8689: CALL_OW 88
// end ;
8693: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8694: LD_EXP 13
8698: NOT
8699: PUSH
8700: LD_EXP 12
8704: AND
8705: PUSH
8706: LD_INT 2
8708: PPUSH
8709: LD_EXP 20
8713: PPUSH
8714: CALL_OW 292
8718: AND
8719: IFFALSE 8806
8721: GO 8723
8723: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8724: LD_EXP 20
8728: PPUSH
8729: LD_EXP 16
8733: PPUSH
8734: CALL_OW 119
// DialogueOn ;
8738: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8742: LD_EXP 20
8746: PPUSH
8747: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8751: LD_EXP 20
8755: PPUSH
8756: LD_STRING DK-prison-found
8758: PPUSH
8759: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8763: LD_EXP 16
8767: PPUSH
8768: LD_STRING DH-prison-found
8770: PPUSH
8771: CALL_OW 88
// DialogueOff ;
8775: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8779: LD_EXP 20
8783: PPUSH
8784: LD_INT 2
8786: PPUSH
8787: CALL_OW 235
// prisonFound := true ;
8791: LD_ADDR_EXP 13
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8799: LD_STRING O6_prison_out
8801: PPUSH
8802: CALL_OW 337
// end ;
8806: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8807: LD_EXP 16
8811: PPUSH
8812: CALL_OW 256
8816: PUSH
8817: LD_INT 500
8819: LESS
8820: IFFALSE 8833
8822: GO 8824
8824: DISABLE
// heikeHurt := true ;
8825: LD_ADDR_EXP 14
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
8833: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8834: LD_EXP 12
8838: PUSH
8839: LD_EXP 16
8843: PPUSH
8844: CALL_OW 302
8848: AND
8849: PUSH
8850: LD_INT 1
8852: PPUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 50
8875: PUSH
8876: EMPTY
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: PPUSH
8884: CALL_OW 71
8888: PUSH
8889: LD_INT 0
8891: EQUAL
8892: AND
8893: IFFALSE 9223
8895: GO 8897
8897: DISABLE
8898: LD_INT 0
8900: PPUSH
// begin if not heikeHurt then
8901: LD_EXP 14
8905: NOT
8906: IFFALSE 8915
// SetAchievement ( ACH_INVINCIBLE ) ;
8908: LD_STRING ACH_INVINCIBLE
8910: PPUSH
8911: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8915: LD_ADDR_VAR 0 1
8919: PUSH
8920: LD_INT 22
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 21
8932: PUSH
8933: LD_INT 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 50
8942: PUSH
8943: EMPTY
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 69
8955: ST_TO_ADDR
// if prisonFound then
8956: LD_EXP 13
8960: IFFALSE 8974
// AddMedal ( med1 , 1 ) else
8962: LD_STRING med1
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 101
8972: GO 8985
// AddMedal ( med1 , - 1 ) ;
8974: LD_STRING med1
8976: PPUSH
8977: LD_INT 1
8979: NEG
8980: PPUSH
8981: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: LESS
8993: PUSH
8994: LD_EXP 13
8998: NOT
8999: AND
9000: PUSH
9001: LD_VAR 0 1
9005: PUSH
9006: LD_INT 4
9008: LESS
9009: PUSH
9010: LD_EXP 13
9014: AND
9015: OR
9016: IFFALSE 9031
// AddMedal ( med2 , - 1 ) else
9018: LD_STRING med2
9020: PPUSH
9021: LD_INT 1
9023: NEG
9024: PPUSH
9025: CALL_OW 101
9029: GO 9041
// AddMedal ( med2 , 1 ) ;
9031: LD_STRING med2
9033: PPUSH
9034: LD_INT 1
9036: PPUSH
9037: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9041: LD_EXP 13
9045: PUSH
9046: LD_EXP 4
9050: AND
9051: PUSH
9052: LD_VAR 0 1
9056: PUSH
9057: LD_INT 4
9059: GREATEREQUAL
9060: AND
9061: IFFALSE 9075
// AddMedal ( med3 , 1 ) else
9063: LD_STRING med3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 101
9073: GO 9086
// AddMedal ( med3 , - 1 ) ;
9075: LD_STRING med3
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// GiveMedals ( MAIN ) ;
9086: LD_STRING MAIN
9088: PPUSH
9089: CALL_OW 102
// RewardPeople ( tmp ) ;
9093: LD_VAR 0 1
9097: PPUSH
9098: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9102: LD_EXP 16
9106: PPUSH
9107: LD_STRING 01_Heike
9109: PPUSH
9110: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9114: LD_EXP 18
9118: PPUSH
9119: CALL_OW 302
9123: PUSH
9124: LD_EXP 18
9128: PUSH
9129: LD_VAR 0 1
9133: IN
9134: AND
9135: IFFALSE 9149
// SaveCharacters ( Givi , 01_Givi ) ;
9137: LD_EXP 18
9141: PPUSH
9142: LD_STRING 01_Givi
9144: PPUSH
9145: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9149: LD_EXP 19
9153: PPUSH
9154: CALL_OW 302
9158: PUSH
9159: LD_EXP 19
9163: PUSH
9164: LD_VAR 0 1
9168: IN
9169: AND
9170: IFFALSE 9184
// SaveCharacters ( Mike , 01_Mike ) ;
9172: LD_EXP 19
9176: PPUSH
9177: LD_STRING 01_Mike
9179: PPUSH
9180: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9184: LD_EXP 20
9188: PPUSH
9189: CALL_OW 302
9193: PUSH
9194: LD_EXP 20
9198: PUSH
9199: LD_VAR 0 1
9203: IN
9204: AND
9205: IFFALSE 9219
// SaveCharacters ( Kamil , 01_Kamil ) ;
9207: LD_EXP 20
9211: PPUSH
9212: LD_STRING 01_Kamil
9214: PPUSH
9215: CALL_OW 38
// YouWin ;
9219: CALL_OW 103
// end ; end_of_file
9223: PPOPN 1
9225: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9226: LD_VAR 0 1
9230: PUSH
9231: LD_EXP 16
9235: EQUAL
9236: IFFALSE 9245
// YouLost ( Heike ) ;
9238: LD_STRING Heike
9240: PPUSH
9241: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9245: LD_VAR 0 1
9249: PUSH
9250: LD_INT 22
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 25
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: IN
9279: IFFALSE 9385
// begin if un in russianPatrol then
9281: LD_VAR 0 1
9285: PUSH
9286: LD_EXP 21
9290: IN
9291: IFFALSE 9309
// russianPatrol := russianPatrol diff un ;
9293: LD_ADDR_EXP 21
9297: PUSH
9298: LD_EXP 21
9302: PUSH
9303: LD_VAR 0 1
9307: DIFF
9308: ST_TO_ADDR
// if un in russianForestPatrol then
9309: LD_VAR 0 1
9313: PUSH
9314: LD_EXP 22
9318: IN
9319: IFFALSE 9337
// russianForestPatrol := russianForestPatrol diff un ;
9321: LD_ADDR_EXP 22
9325: PUSH
9326: LD_EXP 22
9330: PUSH
9331: LD_VAR 0 1
9335: DIFF
9336: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9337: LD_ADDR_EXP 5
9341: PUSH
9342: LD_EXP 5
9346: PPUSH
9347: LD_EXP 5
9351: PUSH
9352: LD_INT 1
9354: PLUS
9355: PPUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 250
9365: PUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 251
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 1
9384: ST_TO_ADDR
// end ; end ;
9385: PPOPN 1
9387: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9388: LD_VAR 0 1
9392: PUSH
9393: LD_EXP 16
9397: EQUAL
9398: IFFALSE 9407
// YouLost ( Heike ) ;
9400: LD_STRING Heike
9402: PPUSH
9403: CALL_OW 104
// end ;
9407: PPOPN 1
9409: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9410: LD_VAR 0 1
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: LD_INT 5
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: IN
9425: PUSH
9426: LD_VAR 0 2
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: IN
9441: AND
9442: IFFALSE 9451
// YouLost ( FriendlyFire ) ;
9444: LD_STRING FriendlyFire
9446: PPUSH
9447: CALL_OW 104
// end ; end_of_file
9451: PPOPN 2
9453: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9454: GO 9456
9456: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9457: LD_STRING initStreamRollete();
9459: PPUSH
9460: CALL_OW 559
// InitStreamMode ;
9464: CALL 9473 0 0
// DefineStreamItems ( ) ;
9468: CALL 9913 0 0
// end ;
9472: END
// function InitStreamMode ; begin
9473: LD_INT 0
9475: PPUSH
// streamModeActive := false ;
9476: LD_ADDR_EXP 26
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// normalCounter := 36 ;
9484: LD_ADDR_EXP 27
9488: PUSH
9489: LD_INT 36
9491: ST_TO_ADDR
// hardcoreCounter := 16 ;
9492: LD_ADDR_EXP 28
9496: PUSH
9497: LD_INT 16
9499: ST_TO_ADDR
// sRocket := false ;
9500: LD_ADDR_EXP 31
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// sSpeed := false ;
9508: LD_ADDR_EXP 30
9512: PUSH
9513: LD_INT 0
9515: ST_TO_ADDR
// sEngine := false ;
9516: LD_ADDR_EXP 32
9520: PUSH
9521: LD_INT 0
9523: ST_TO_ADDR
// sSpec := false ;
9524: LD_ADDR_EXP 29
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// sLevel := false ;
9532: LD_ADDR_EXP 33
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// sArmoury := false ;
9540: LD_ADDR_EXP 34
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// sRadar := false ;
9548: LD_ADDR_EXP 35
9552: PUSH
9553: LD_INT 0
9555: ST_TO_ADDR
// sBunker := false ;
9556: LD_ADDR_EXP 36
9560: PUSH
9561: LD_INT 0
9563: ST_TO_ADDR
// sHack := false ;
9564: LD_ADDR_EXP 37
9568: PUSH
9569: LD_INT 0
9571: ST_TO_ADDR
// sFire := false ;
9572: LD_ADDR_EXP 38
9576: PUSH
9577: LD_INT 0
9579: ST_TO_ADDR
// sRefresh := false ;
9580: LD_ADDR_EXP 39
9584: PUSH
9585: LD_INT 0
9587: ST_TO_ADDR
// sExp := false ;
9588: LD_ADDR_EXP 40
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// sDepot := false ;
9596: LD_ADDR_EXP 41
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// sFlag := false ;
9604: LD_ADDR_EXP 42
9608: PUSH
9609: LD_INT 0
9611: ST_TO_ADDR
// sKamikadze := false ;
9612: LD_ADDR_EXP 50
9616: PUSH
9617: LD_INT 0
9619: ST_TO_ADDR
// sTroll := false ;
9620: LD_ADDR_EXP 51
9624: PUSH
9625: LD_INT 0
9627: ST_TO_ADDR
// sSlow := false ;
9628: LD_ADDR_EXP 52
9632: PUSH
9633: LD_INT 0
9635: ST_TO_ADDR
// sLack := false ;
9636: LD_ADDR_EXP 53
9640: PUSH
9641: LD_INT 0
9643: ST_TO_ADDR
// sTank := false ;
9644: LD_ADDR_EXP 55
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// sRemote := false ;
9652: LD_ADDR_EXP 56
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// sPowell := false ;
9660: LD_ADDR_EXP 57
9664: PUSH
9665: LD_INT 0
9667: ST_TO_ADDR
// sTeleport := false ;
9668: LD_ADDR_EXP 60
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// sOilTower := false ;
9676: LD_ADDR_EXP 62
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// sShovel := false ;
9684: LD_ADDR_EXP 63
9688: PUSH
9689: LD_INT 0
9691: ST_TO_ADDR
// sSheik := false ;
9692: LD_ADDR_EXP 64
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// sEarthquake := false ;
9700: LD_ADDR_EXP 66
9704: PUSH
9705: LD_INT 0
9707: ST_TO_ADDR
// sAI := false ;
9708: LD_ADDR_EXP 67
9712: PUSH
9713: LD_INT 0
9715: ST_TO_ADDR
// sCargo := false ;
9716: LD_ADDR_EXP 70
9720: PUSH
9721: LD_INT 0
9723: ST_TO_ADDR
// sDLaser := false ;
9724: LD_ADDR_EXP 71
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// sExchange := false ;
9732: LD_ADDR_EXP 72
9736: PUSH
9737: LD_INT 0
9739: ST_TO_ADDR
// sFac := false ;
9740: LD_ADDR_EXP 73
9744: PUSH
9745: LD_INT 0
9747: ST_TO_ADDR
// sPower := false ;
9748: LD_ADDR_EXP 74
9752: PUSH
9753: LD_INT 0
9755: ST_TO_ADDR
// sRandom := false ;
9756: LD_ADDR_EXP 75
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// sShield := false ;
9764: LD_ADDR_EXP 76
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// sTime := false ;
9772: LD_ADDR_EXP 77
9776: PUSH
9777: LD_INT 0
9779: ST_TO_ADDR
// sTools := false ;
9780: LD_ADDR_EXP 78
9784: PUSH
9785: LD_INT 0
9787: ST_TO_ADDR
// sSold := false ;
9788: LD_ADDR_EXP 43
9792: PUSH
9793: LD_INT 0
9795: ST_TO_ADDR
// sDiff := false ;
9796: LD_ADDR_EXP 44
9800: PUSH
9801: LD_INT 0
9803: ST_TO_ADDR
// sFog := false ;
9804: LD_ADDR_EXP 47
9808: PUSH
9809: LD_INT 0
9811: ST_TO_ADDR
// sReset := false ;
9812: LD_ADDR_EXP 48
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// sSun := false ;
9820: LD_ADDR_EXP 49
9824: PUSH
9825: LD_INT 0
9827: ST_TO_ADDR
// sTiger := false ;
9828: LD_ADDR_EXP 45
9832: PUSH
9833: LD_INT 0
9835: ST_TO_ADDR
// sBomb := false ;
9836: LD_ADDR_EXP 46
9840: PUSH
9841: LD_INT 0
9843: ST_TO_ADDR
// sWound := false ;
9844: LD_ADDR_EXP 54
9848: PUSH
9849: LD_INT 0
9851: ST_TO_ADDR
// sBetray := false ;
9852: LD_ADDR_EXP 58
9856: PUSH
9857: LD_INT 0
9859: ST_TO_ADDR
// sContamin := false ;
9860: LD_ADDR_EXP 59
9864: PUSH
9865: LD_INT 0
9867: ST_TO_ADDR
// sOil := false ;
9868: LD_ADDR_EXP 61
9872: PUSH
9873: LD_INT 0
9875: ST_TO_ADDR
// sStu := false ;
9876: LD_ADDR_EXP 65
9880: PUSH
9881: LD_INT 0
9883: ST_TO_ADDR
// sBazooka := false ;
9884: LD_ADDR_EXP 68
9888: PUSH
9889: LD_INT 0
9891: ST_TO_ADDR
// sMortar := false ;
9892: LD_ADDR_EXP 69
9896: PUSH
9897: LD_INT 0
9899: ST_TO_ADDR
// sRanger := false ;
9900: LD_ADDR_EXP 79
9904: PUSH
9905: LD_INT 0
9907: ST_TO_ADDR
// end ;
9908: LD_VAR 0 1
9912: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9913: LD_INT 0
9915: PPUSH
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
// result := [ ] ;
9920: LD_ADDR_VAR 0 1
9924: PUSH
9925: EMPTY
9926: ST_TO_ADDR
// if campaign_id = 1 then
9927: LD_OWVAR 69
9931: PUSH
9932: LD_INT 1
9934: EQUAL
9935: IFFALSE 12873
// begin case mission_number of 1 :
9937: LD_OWVAR 70
9941: PUSH
9942: LD_INT 1
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10014
9950: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9951: LD_ADDR_VAR 0 1
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 11
9964: PUSH
9965: LD_INT 12
9967: PUSH
9968: LD_INT 15
9970: PUSH
9971: LD_INT 16
9973: PUSH
9974: LD_INT 22
9976: PUSH
9977: LD_INT 23
9979: PUSH
9980: LD_INT 26
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 101
9996: PUSH
9997: LD_INT 102
9999: PUSH
10000: LD_INT 106
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: ST_TO_ADDR
10012: GO 12871
10014: LD_INT 2
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10094
10022: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10023: LD_ADDR_VAR 0 1
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: LD_INT 11
10036: PUSH
10037: LD_INT 12
10039: PUSH
10040: LD_INT 15
10042: PUSH
10043: LD_INT 16
10045: PUSH
10046: LD_INT 22
10048: PUSH
10049: LD_INT 23
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 101
10068: PUSH
10069: LD_INT 102
10071: PUSH
10072: LD_INT 105
10074: PUSH
10075: LD_INT 106
10077: PUSH
10078: LD_INT 108
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: ST_TO_ADDR
10092: GO 12871
10094: LD_INT 3
10096: DOUBLE
10097: EQUAL
10098: IFTRUE 10102
10100: GO 10178
10102: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10103: LD_ADDR_VAR 0 1
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: LD_INT 4
10113: PUSH
10114: LD_INT 5
10116: PUSH
10117: LD_INT 11
10119: PUSH
10120: LD_INT 12
10122: PUSH
10123: LD_INT 15
10125: PUSH
10126: LD_INT 16
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: LD_INT 26
10134: PUSH
10135: LD_INT 36
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 101
10152: PUSH
10153: LD_INT 102
10155: PUSH
10156: LD_INT 105
10158: PUSH
10159: LD_INT 106
10161: PUSH
10162: LD_INT 108
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: ST_TO_ADDR
10176: GO 12871
10178: LD_INT 4
10180: DOUBLE
10181: EQUAL
10182: IFTRUE 10186
10184: GO 10270
10186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10187: LD_ADDR_VAR 0 1
10191: PUSH
10192: LD_INT 2
10194: PUSH
10195: LD_INT 4
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: LD_INT 8
10203: PUSH
10204: LD_INT 11
10206: PUSH
10207: LD_INT 12
10209: PUSH
10210: LD_INT 15
10212: PUSH
10213: LD_INT 16
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_INT 23
10221: PUSH
10222: LD_INT 26
10224: PUSH
10225: LD_INT 36
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 101
10244: PUSH
10245: LD_INT 102
10247: PUSH
10248: LD_INT 105
10250: PUSH
10251: LD_INT 106
10253: PUSH
10254: LD_INT 108
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: ST_TO_ADDR
10268: GO 12871
10270: LD_INT 5
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10378
10278: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 4
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 6
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: LD_INT 11
10301: PUSH
10302: LD_INT 12
10304: PUSH
10305: LD_INT 15
10307: PUSH
10308: LD_INT 16
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 23
10316: PUSH
10317: LD_INT 25
10319: PUSH
10320: LD_INT 26
10322: PUSH
10323: LD_INT 36
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 101
10344: PUSH
10345: LD_INT 102
10347: PUSH
10348: LD_INT 105
10350: PUSH
10351: LD_INT 106
10353: PUSH
10354: LD_INT 108
10356: PUSH
10357: LD_INT 109
10359: PUSH
10360: LD_INT 112
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: ST_TO_ADDR
10376: GO 12871
10378: LD_INT 6
10380: DOUBLE
10381: EQUAL
10382: IFTRUE 10386
10384: GO 10506
10386: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10387: LD_ADDR_VAR 0 1
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: LD_INT 4
10397: PUSH
10398: LD_INT 5
10400: PUSH
10401: LD_INT 6
10403: PUSH
10404: LD_INT 8
10406: PUSH
10407: LD_INT 11
10409: PUSH
10410: LD_INT 12
10412: PUSH
10413: LD_INT 15
10415: PUSH
10416: LD_INT 16
10418: PUSH
10419: LD_INT 20
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 22
10427: PUSH
10428: LD_INT 23
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 26
10436: PUSH
10437: LD_INT 30
10439: PUSH
10440: LD_INT 31
10442: PUSH
10443: LD_INT 32
10445: PUSH
10446: LD_INT 36
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 101
10472: PUSH
10473: LD_INT 102
10475: PUSH
10476: LD_INT 105
10478: PUSH
10479: LD_INT 106
10481: PUSH
10482: LD_INT 108
10484: PUSH
10485: LD_INT 109
10487: PUSH
10488: LD_INT 112
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: ST_TO_ADDR
10504: GO 12871
10506: LD_INT 7
10508: DOUBLE
10509: EQUAL
10510: IFTRUE 10514
10512: GO 10614
10514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10515: LD_ADDR_VAR 0 1
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 7
10531: PUSH
10532: LD_INT 11
10534: PUSH
10535: LD_INT 12
10537: PUSH
10538: LD_INT 15
10540: PUSH
10541: LD_INT 16
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 26
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 101
10580: PUSH
10581: LD_INT 102
10583: PUSH
10584: LD_INT 103
10586: PUSH
10587: LD_INT 105
10589: PUSH
10590: LD_INT 106
10592: PUSH
10593: LD_INT 108
10595: PUSH
10596: LD_INT 112
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: ST_TO_ADDR
10612: GO 12871
10614: LD_INT 8
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10750
10622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10623: LD_ADDR_VAR 0 1
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: LD_INT 4
10633: PUSH
10634: LD_INT 5
10636: PUSH
10637: LD_INT 6
10639: PUSH
10640: LD_INT 7
10642: PUSH
10643: LD_INT 8
10645: PUSH
10646: LD_INT 11
10648: PUSH
10649: LD_INT 12
10651: PUSH
10652: LD_INT 15
10654: PUSH
10655: LD_INT 16
10657: PUSH
10658: LD_INT 20
10660: PUSH
10661: LD_INT 21
10663: PUSH
10664: LD_INT 22
10666: PUSH
10667: LD_INT 23
10669: PUSH
10670: LD_INT 25
10672: PUSH
10673: LD_INT 26
10675: PUSH
10676: LD_INT 30
10678: PUSH
10679: LD_INT 31
10681: PUSH
10682: LD_INT 32
10684: PUSH
10685: LD_INT 36
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 101
10712: PUSH
10713: LD_INT 102
10715: PUSH
10716: LD_INT 103
10718: PUSH
10719: LD_INT 105
10721: PUSH
10722: LD_INT 106
10724: PUSH
10725: LD_INT 108
10727: PUSH
10728: LD_INT 109
10730: PUSH
10731: LD_INT 112
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: ST_TO_ADDR
10748: GO 12871
10750: LD_INT 9
10752: DOUBLE
10753: EQUAL
10754: IFTRUE 10758
10756: GO 10894
10758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10759: LD_ADDR_VAR 0 1
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 4
10769: PUSH
10770: LD_INT 5
10772: PUSH
10773: LD_INT 6
10775: PUSH
10776: LD_INT 7
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 11
10784: PUSH
10785: LD_INT 12
10787: PUSH
10788: LD_INT 15
10790: PUSH
10791: LD_INT 16
10793: PUSH
10794: LD_INT 20
10796: PUSH
10797: LD_INT 21
10799: PUSH
10800: LD_INT 22
10802: PUSH
10803: LD_INT 23
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 26
10811: PUSH
10812: LD_INT 28
10814: PUSH
10815: LD_INT 30
10817: PUSH
10818: LD_INT 31
10820: PUSH
10821: LD_INT 32
10823: PUSH
10824: LD_INT 36
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 101
10852: PUSH
10853: LD_INT 102
10855: PUSH
10856: LD_INT 103
10858: PUSH
10859: LD_INT 105
10861: PUSH
10862: LD_INT 106
10864: PUSH
10865: LD_INT 108
10867: PUSH
10868: LD_INT 109
10870: PUSH
10871: LD_INT 112
10873: PUSH
10874: LD_INT 114
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: ST_TO_ADDR
10892: GO 12871
10894: LD_INT 10
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 11086
10902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10903: LD_ADDR_VAR 0 1
10907: PUSH
10908: LD_INT 2
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: LD_INT 5
10916: PUSH
10917: LD_INT 6
10919: PUSH
10920: LD_INT 7
10922: PUSH
10923: LD_INT 8
10925: PUSH
10926: LD_INT 9
10928: PUSH
10929: LD_INT 10
10931: PUSH
10932: LD_INT 11
10934: PUSH
10935: LD_INT 12
10937: PUSH
10938: LD_INT 13
10940: PUSH
10941: LD_INT 14
10943: PUSH
10944: LD_INT 15
10946: PUSH
10947: LD_INT 16
10949: PUSH
10950: LD_INT 17
10952: PUSH
10953: LD_INT 18
10955: PUSH
10956: LD_INT 19
10958: PUSH
10959: LD_INT 20
10961: PUSH
10962: LD_INT 21
10964: PUSH
10965: LD_INT 22
10967: PUSH
10968: LD_INT 23
10970: PUSH
10971: LD_INT 24
10973: PUSH
10974: LD_INT 25
10976: PUSH
10977: LD_INT 26
10979: PUSH
10980: LD_INT 28
10982: PUSH
10983: LD_INT 30
10985: PUSH
10986: LD_INT 31
10988: PUSH
10989: LD_INT 32
10991: PUSH
10992: LD_INT 36
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 101
11028: PUSH
11029: LD_INT 102
11031: PUSH
11032: LD_INT 103
11034: PUSH
11035: LD_INT 104
11037: PUSH
11038: LD_INT 105
11040: PUSH
11041: LD_INT 106
11043: PUSH
11044: LD_INT 107
11046: PUSH
11047: LD_INT 108
11049: PUSH
11050: LD_INT 109
11052: PUSH
11053: LD_INT 110
11055: PUSH
11056: LD_INT 111
11058: PUSH
11059: LD_INT 112
11061: PUSH
11062: LD_INT 114
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: ST_TO_ADDR
11084: GO 12871
11086: LD_INT 11
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11286
11094: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11095: LD_ADDR_VAR 0 1
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: LD_INT 4
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: LD_INT 6
11114: PUSH
11115: LD_INT 7
11117: PUSH
11118: LD_INT 8
11120: PUSH
11121: LD_INT 9
11123: PUSH
11124: LD_INT 10
11126: PUSH
11127: LD_INT 11
11129: PUSH
11130: LD_INT 12
11132: PUSH
11133: LD_INT 13
11135: PUSH
11136: LD_INT 14
11138: PUSH
11139: LD_INT 15
11141: PUSH
11142: LD_INT 16
11144: PUSH
11145: LD_INT 17
11147: PUSH
11148: LD_INT 18
11150: PUSH
11151: LD_INT 19
11153: PUSH
11154: LD_INT 20
11156: PUSH
11157: LD_INT 21
11159: PUSH
11160: LD_INT 22
11162: PUSH
11163: LD_INT 23
11165: PUSH
11166: LD_INT 24
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 26
11174: PUSH
11175: LD_INT 28
11177: PUSH
11178: LD_INT 30
11180: PUSH
11181: LD_INT 31
11183: PUSH
11184: LD_INT 32
11186: PUSH
11187: LD_INT 34
11189: PUSH
11190: LD_INT 36
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 101
11228: PUSH
11229: LD_INT 102
11231: PUSH
11232: LD_INT 103
11234: PUSH
11235: LD_INT 104
11237: PUSH
11238: LD_INT 105
11240: PUSH
11241: LD_INT 106
11243: PUSH
11244: LD_INT 107
11246: PUSH
11247: LD_INT 108
11249: PUSH
11250: LD_INT 109
11252: PUSH
11253: LD_INT 110
11255: PUSH
11256: LD_INT 111
11258: PUSH
11259: LD_INT 112
11261: PUSH
11262: LD_INT 114
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: ST_TO_ADDR
11284: GO 12871
11286: LD_INT 12
11288: DOUBLE
11289: EQUAL
11290: IFTRUE 11294
11292: GO 11502
11294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11295: LD_ADDR_VAR 0 1
11299: PUSH
11300: LD_INT 1
11302: PUSH
11303: LD_INT 2
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: LD_INT 5
11314: PUSH
11315: LD_INT 6
11317: PUSH
11318: LD_INT 7
11320: PUSH
11321: LD_INT 8
11323: PUSH
11324: LD_INT 9
11326: PUSH
11327: LD_INT 10
11329: PUSH
11330: LD_INT 11
11332: PUSH
11333: LD_INT 12
11335: PUSH
11336: LD_INT 13
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 15
11344: PUSH
11345: LD_INT 16
11347: PUSH
11348: LD_INT 17
11350: PUSH
11351: LD_INT 18
11353: PUSH
11354: LD_INT 19
11356: PUSH
11357: LD_INT 20
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 23
11368: PUSH
11369: LD_INT 24
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: LD_INT 27
11380: PUSH
11381: LD_INT 28
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 36
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 101
11440: PUSH
11441: LD_INT 102
11443: PUSH
11444: LD_INT 103
11446: PUSH
11447: LD_INT 104
11449: PUSH
11450: LD_INT 105
11452: PUSH
11453: LD_INT 106
11455: PUSH
11456: LD_INT 107
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 109
11464: PUSH
11465: LD_INT 110
11467: PUSH
11468: LD_INT 111
11470: PUSH
11471: LD_INT 112
11473: PUSH
11474: LD_INT 113
11476: PUSH
11477: LD_INT 114
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: ST_TO_ADDR
11500: GO 12871
11502: LD_INT 13
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11706
11510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11511: LD_ADDR_VAR 0 1
11515: PUSH
11516: LD_INT 1
11518: PUSH
11519: LD_INT 2
11521: PUSH
11522: LD_INT 3
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: LD_INT 5
11530: PUSH
11531: LD_INT 8
11533: PUSH
11534: LD_INT 9
11536: PUSH
11537: LD_INT 10
11539: PUSH
11540: LD_INT 11
11542: PUSH
11543: LD_INT 12
11545: PUSH
11546: LD_INT 14
11548: PUSH
11549: LD_INT 15
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 17
11557: PUSH
11558: LD_INT 18
11560: PUSH
11561: LD_INT 19
11563: PUSH
11564: LD_INT 20
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 22
11572: PUSH
11573: LD_INT 23
11575: PUSH
11576: LD_INT 24
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 26
11584: PUSH
11585: LD_INT 27
11587: PUSH
11588: LD_INT 28
11590: PUSH
11591: LD_INT 30
11593: PUSH
11594: LD_INT 31
11596: PUSH
11597: LD_INT 32
11599: PUSH
11600: LD_INT 33
11602: PUSH
11603: LD_INT 34
11605: PUSH
11606: LD_INT 36
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 101
11644: PUSH
11645: LD_INT 102
11647: PUSH
11648: LD_INT 103
11650: PUSH
11651: LD_INT 104
11653: PUSH
11654: LD_INT 105
11656: PUSH
11657: LD_INT 106
11659: PUSH
11660: LD_INT 107
11662: PUSH
11663: LD_INT 108
11665: PUSH
11666: LD_INT 109
11668: PUSH
11669: LD_INT 110
11671: PUSH
11672: LD_INT 111
11674: PUSH
11675: LD_INT 112
11677: PUSH
11678: LD_INT 113
11680: PUSH
11681: LD_INT 114
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: ST_TO_ADDR
11704: GO 12871
11706: LD_INT 14
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11926
11714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11715: LD_ADDR_VAR 0 1
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: LD_INT 3
11728: PUSH
11729: LD_INT 4
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: LD_INT 6
11737: PUSH
11738: LD_INT 7
11740: PUSH
11741: LD_INT 8
11743: PUSH
11744: LD_INT 9
11746: PUSH
11747: LD_INT 10
11749: PUSH
11750: LD_INT 11
11752: PUSH
11753: LD_INT 12
11755: PUSH
11756: LD_INT 13
11758: PUSH
11759: LD_INT 14
11761: PUSH
11762: LD_INT 15
11764: PUSH
11765: LD_INT 16
11767: PUSH
11768: LD_INT 17
11770: PUSH
11771: LD_INT 18
11773: PUSH
11774: LD_INT 19
11776: PUSH
11777: LD_INT 20
11779: PUSH
11780: LD_INT 21
11782: PUSH
11783: LD_INT 22
11785: PUSH
11786: LD_INT 23
11788: PUSH
11789: LD_INT 24
11791: PUSH
11792: LD_INT 25
11794: PUSH
11795: LD_INT 26
11797: PUSH
11798: LD_INT 27
11800: PUSH
11801: LD_INT 28
11803: PUSH
11804: LD_INT 29
11806: PUSH
11807: LD_INT 30
11809: PUSH
11810: LD_INT 31
11812: PUSH
11813: LD_INT 32
11815: PUSH
11816: LD_INT 33
11818: PUSH
11819: LD_INT 34
11821: PUSH
11822: LD_INT 36
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 101
11864: PUSH
11865: LD_INT 102
11867: PUSH
11868: LD_INT 103
11870: PUSH
11871: LD_INT 104
11873: PUSH
11874: LD_INT 105
11876: PUSH
11877: LD_INT 106
11879: PUSH
11880: LD_INT 107
11882: PUSH
11883: LD_INT 108
11885: PUSH
11886: LD_INT 109
11888: PUSH
11889: LD_INT 110
11891: PUSH
11892: LD_INT 111
11894: PUSH
11895: LD_INT 112
11897: PUSH
11898: LD_INT 113
11900: PUSH
11901: LD_INT 114
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: ST_TO_ADDR
11924: GO 12871
11926: LD_INT 15
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 12146
11934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11935: LD_ADDR_VAR 0 1
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: LD_INT 4
11951: PUSH
11952: LD_INT 5
11954: PUSH
11955: LD_INT 6
11957: PUSH
11958: LD_INT 7
11960: PUSH
11961: LD_INT 8
11963: PUSH
11964: LD_INT 9
11966: PUSH
11967: LD_INT 10
11969: PUSH
11970: LD_INT 11
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: LD_INT 13
11978: PUSH
11979: LD_INT 14
11981: PUSH
11982: LD_INT 15
11984: PUSH
11985: LD_INT 16
11987: PUSH
11988: LD_INT 17
11990: PUSH
11991: LD_INT 18
11993: PUSH
11994: LD_INT 19
11996: PUSH
11997: LD_INT 20
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: LD_INT 23
12008: PUSH
12009: LD_INT 24
12011: PUSH
12012: LD_INT 25
12014: PUSH
12015: LD_INT 26
12017: PUSH
12018: LD_INT 27
12020: PUSH
12021: LD_INT 28
12023: PUSH
12024: LD_INT 29
12026: PUSH
12027: LD_INT 30
12029: PUSH
12030: LD_INT 31
12032: PUSH
12033: LD_INT 32
12035: PUSH
12036: LD_INT 33
12038: PUSH
12039: LD_INT 34
12041: PUSH
12042: LD_INT 36
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 101
12084: PUSH
12085: LD_INT 102
12087: PUSH
12088: LD_INT 103
12090: PUSH
12091: LD_INT 104
12093: PUSH
12094: LD_INT 105
12096: PUSH
12097: LD_INT 106
12099: PUSH
12100: LD_INT 107
12102: PUSH
12103: LD_INT 108
12105: PUSH
12106: LD_INT 109
12108: PUSH
12109: LD_INT 110
12111: PUSH
12112: LD_INT 111
12114: PUSH
12115: LD_INT 112
12117: PUSH
12118: LD_INT 113
12120: PUSH
12121: LD_INT 114
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: ST_TO_ADDR
12144: GO 12871
12146: LD_INT 16
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12278
12154: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12155: LD_ADDR_VAR 0 1
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: LD_INT 4
12165: PUSH
12166: LD_INT 5
12168: PUSH
12169: LD_INT 7
12171: PUSH
12172: LD_INT 11
12174: PUSH
12175: LD_INT 12
12177: PUSH
12178: LD_INT 15
12180: PUSH
12181: LD_INT 16
12183: PUSH
12184: LD_INT 20
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 23
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 26
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 31
12207: PUSH
12208: LD_INT 32
12210: PUSH
12211: LD_INT 33
12213: PUSH
12214: LD_INT 34
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 101
12240: PUSH
12241: LD_INT 102
12243: PUSH
12244: LD_INT 103
12246: PUSH
12247: LD_INT 106
12249: PUSH
12250: LD_INT 108
12252: PUSH
12253: LD_INT 112
12255: PUSH
12256: LD_INT 113
12258: PUSH
12259: LD_INT 114
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: ST_TO_ADDR
12276: GO 12871
12278: LD_INT 17
12280: DOUBLE
12281: EQUAL
12282: IFTRUE 12286
12284: GO 12498
12286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12287: LD_ADDR_VAR 0 1
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 4
12303: PUSH
12304: LD_INT 5
12306: PUSH
12307: LD_INT 6
12309: PUSH
12310: LD_INT 7
12312: PUSH
12313: LD_INT 8
12315: PUSH
12316: LD_INT 9
12318: PUSH
12319: LD_INT 10
12321: PUSH
12322: LD_INT 11
12324: PUSH
12325: LD_INT 12
12327: PUSH
12328: LD_INT 13
12330: PUSH
12331: LD_INT 14
12333: PUSH
12334: LD_INT 15
12336: PUSH
12337: LD_INT 16
12339: PUSH
12340: LD_INT 17
12342: PUSH
12343: LD_INT 18
12345: PUSH
12346: LD_INT 19
12348: PUSH
12349: LD_INT 20
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_INT 23
12360: PUSH
12361: LD_INT 24
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: LD_INT 26
12369: PUSH
12370: LD_INT 27
12372: PUSH
12373: LD_INT 28
12375: PUSH
12376: LD_INT 29
12378: PUSH
12379: LD_INT 30
12381: PUSH
12382: LD_INT 31
12384: PUSH
12385: LD_INT 32
12387: PUSH
12388: LD_INT 33
12390: PUSH
12391: LD_INT 34
12393: PUSH
12394: LD_INT 36
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 101
12436: PUSH
12437: LD_INT 102
12439: PUSH
12440: LD_INT 103
12442: PUSH
12443: LD_INT 104
12445: PUSH
12446: LD_INT 105
12448: PUSH
12449: LD_INT 106
12451: PUSH
12452: LD_INT 107
12454: PUSH
12455: LD_INT 108
12457: PUSH
12458: LD_INT 109
12460: PUSH
12461: LD_INT 110
12463: PUSH
12464: LD_INT 111
12466: PUSH
12467: LD_INT 112
12469: PUSH
12470: LD_INT 113
12472: PUSH
12473: LD_INT 114
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: ST_TO_ADDR
12496: GO 12871
12498: LD_INT 18
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12642
12506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 4
12517: PUSH
12518: LD_INT 5
12520: PUSH
12521: LD_INT 7
12523: PUSH
12524: LD_INT 11
12526: PUSH
12527: LD_INT 12
12529: PUSH
12530: LD_INT 15
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: LD_INT 20
12538: PUSH
12539: LD_INT 21
12541: PUSH
12542: LD_INT 22
12544: PUSH
12545: LD_INT 23
12547: PUSH
12548: LD_INT 25
12550: PUSH
12551: LD_INT 26
12553: PUSH
12554: LD_INT 30
12556: PUSH
12557: LD_INT 31
12559: PUSH
12560: LD_INT 32
12562: PUSH
12563: LD_INT 33
12565: PUSH
12566: LD_INT 34
12568: PUSH
12569: LD_INT 35
12571: PUSH
12572: LD_INT 36
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 101
12600: PUSH
12601: LD_INT 102
12603: PUSH
12604: LD_INT 103
12606: PUSH
12607: LD_INT 106
12609: PUSH
12610: LD_INT 108
12612: PUSH
12613: LD_INT 112
12615: PUSH
12616: LD_INT 113
12618: PUSH
12619: LD_INT 114
12621: PUSH
12622: LD_INT 115
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: ST_TO_ADDR
12640: GO 12871
12642: LD_INT 19
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12870
12650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12651: LD_ADDR_VAR 0 1
12655: PUSH
12656: LD_INT 1
12658: PUSH
12659: LD_INT 2
12661: PUSH
12662: LD_INT 3
12664: PUSH
12665: LD_INT 4
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: LD_INT 6
12673: PUSH
12674: LD_INT 7
12676: PUSH
12677: LD_INT 8
12679: PUSH
12680: LD_INT 9
12682: PUSH
12683: LD_INT 10
12685: PUSH
12686: LD_INT 11
12688: PUSH
12689: LD_INT 12
12691: PUSH
12692: LD_INT 13
12694: PUSH
12695: LD_INT 14
12697: PUSH
12698: LD_INT 15
12700: PUSH
12701: LD_INT 16
12703: PUSH
12704: LD_INT 17
12706: PUSH
12707: LD_INT 18
12709: PUSH
12710: LD_INT 19
12712: PUSH
12713: LD_INT 20
12715: PUSH
12716: LD_INT 21
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 23
12724: PUSH
12725: LD_INT 24
12727: PUSH
12728: LD_INT 25
12730: PUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 27
12736: PUSH
12737: LD_INT 28
12739: PUSH
12740: LD_INT 29
12742: PUSH
12743: LD_INT 30
12745: PUSH
12746: LD_INT 31
12748: PUSH
12749: LD_INT 32
12751: PUSH
12752: LD_INT 33
12754: PUSH
12755: LD_INT 34
12757: PUSH
12758: LD_INT 35
12760: PUSH
12761: LD_INT 36
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 101
12804: PUSH
12805: LD_INT 102
12807: PUSH
12808: LD_INT 103
12810: PUSH
12811: LD_INT 104
12813: PUSH
12814: LD_INT 105
12816: PUSH
12817: LD_INT 106
12819: PUSH
12820: LD_INT 107
12822: PUSH
12823: LD_INT 108
12825: PUSH
12826: LD_INT 109
12828: PUSH
12829: LD_INT 110
12831: PUSH
12832: LD_INT 111
12834: PUSH
12835: LD_INT 112
12837: PUSH
12838: LD_INT 113
12840: PUSH
12841: LD_INT 114
12843: PUSH
12844: LD_INT 115
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: ST_TO_ADDR
12868: GO 12871
12870: POP
// end else
12871: GO 13090
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12873: LD_ADDR_VAR 0 1
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: LD_INT 5
12892: PUSH
12893: LD_INT 6
12895: PUSH
12896: LD_INT 7
12898: PUSH
12899: LD_INT 8
12901: PUSH
12902: LD_INT 9
12904: PUSH
12905: LD_INT 10
12907: PUSH
12908: LD_INT 11
12910: PUSH
12911: LD_INT 12
12913: PUSH
12914: LD_INT 13
12916: PUSH
12917: LD_INT 14
12919: PUSH
12920: LD_INT 15
12922: PUSH
12923: LD_INT 16
12925: PUSH
12926: LD_INT 17
12928: PUSH
12929: LD_INT 18
12931: PUSH
12932: LD_INT 19
12934: PUSH
12935: LD_INT 20
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 23
12946: PUSH
12947: LD_INT 24
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 26
12955: PUSH
12956: LD_INT 27
12958: PUSH
12959: LD_INT 28
12961: PUSH
12962: LD_INT 29
12964: PUSH
12965: LD_INT 30
12967: PUSH
12968: LD_INT 31
12970: PUSH
12971: LD_INT 32
12973: PUSH
12974: LD_INT 33
12976: PUSH
12977: LD_INT 34
12979: PUSH
12980: LD_INT 35
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 101
13026: PUSH
13027: LD_INT 102
13029: PUSH
13030: LD_INT 103
13032: PUSH
13033: LD_INT 104
13035: PUSH
13036: LD_INT 105
13038: PUSH
13039: LD_INT 106
13041: PUSH
13042: LD_INT 107
13044: PUSH
13045: LD_INT 108
13047: PUSH
13048: LD_INT 109
13050: PUSH
13051: LD_INT 110
13053: PUSH
13054: LD_INT 111
13056: PUSH
13057: LD_INT 112
13059: PUSH
13060: LD_INT 113
13062: PUSH
13063: LD_INT 114
13065: PUSH
13066: LD_INT 115
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: ST_TO_ADDR
// if result then
13090: LD_VAR 0 1
13094: IFFALSE 13383
// begin normal :=  ;
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hardcore :=  ;
13104: LD_ADDR_VAR 0 4
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// for i = 1 to normalCounter do
13112: LD_ADDR_VAR 0 5
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_EXP 27
13126: PUSH
13127: FOR_TO
13128: IFFALSE 13229
// begin tmp := 0 ;
13130: LD_ADDR_VAR 0 2
13134: PUSH
13135: LD_STRING 0
13137: ST_TO_ADDR
// if result [ 1 ] then
13138: LD_VAR 0 1
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: IFFALSE 13211
// if result [ 1 ] [ 1 ] = i then
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 1
13155: ARRAY
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PUSH
13161: LD_VAR 0 5
13165: EQUAL
13166: IFFALSE 13211
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13168: LD_ADDR_VAR 0 1
13172: PUSH
13173: LD_VAR 0 1
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: LD_VAR 0 1
13185: PUSH
13186: LD_INT 1
13188: ARRAY
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 3
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
// tmp := 1 ;
13203: LD_ADDR_VAR 0 2
13207: PUSH
13208: LD_STRING 1
13210: ST_TO_ADDR
// end ; normal := normal & tmp ;
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: LD_VAR 0 3
13220: PUSH
13221: LD_VAR 0 2
13225: STR
13226: ST_TO_ADDR
// end ;
13227: GO 13127
13229: POP
13230: POP
// for i = 1 to hardcoreCounter do
13231: LD_ADDR_VAR 0 5
13235: PUSH
13236: DOUBLE
13237: LD_INT 1
13239: DEC
13240: ST_TO_ADDR
13241: LD_EXP 28
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13352
// begin tmp := 0 ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_STRING 0
13256: ST_TO_ADDR
// if result [ 2 ] then
13257: LD_VAR 0 1
13261: PUSH
13262: LD_INT 2
13264: ARRAY
13265: IFFALSE 13334
// if result [ 2 ] [ 1 ] = 100 + i then
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 2
13274: ARRAY
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PUSH
13280: LD_INT 100
13282: PUSH
13283: LD_VAR 0 5
13287: PLUS
13288: EQUAL
13289: IFFALSE 13334
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_VAR 0 1
13300: PPUSH
13301: LD_INT 2
13303: PPUSH
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 2
13311: ARRAY
13312: PPUSH
13313: LD_INT 1
13315: PPUSH
13316: CALL_OW 3
13320: PPUSH
13321: CALL_OW 1
13325: ST_TO_ADDR
// tmp := 1 ;
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_STRING 1
13333: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13334: LD_ADDR_VAR 0 4
13338: PUSH
13339: LD_VAR 0 4
13343: PUSH
13344: LD_VAR 0 2
13348: STR
13349: ST_TO_ADDR
// end ;
13350: GO 13246
13352: POP
13353: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13354: LD_STRING getStreamItemsFromMission("
13356: PUSH
13357: LD_VAR 0 3
13361: STR
13362: PUSH
13363: LD_STRING ","
13365: STR
13366: PUSH
13367: LD_VAR 0 4
13371: STR
13372: PUSH
13373: LD_STRING ")
13375: STR
13376: PPUSH
13377: CALL_OW 559
// end else
13381: GO 13390
// ToLua ( getStreamItemsFromMission("","") ) ;
13383: LD_STRING getStreamItemsFromMission("","")
13385: PPUSH
13386: CALL_OW 559
// end ;
13390: LD_VAR 0 1
13394: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13395: LD_VAR 0 2
13399: PUSH
13400: LD_INT 100
13402: EQUAL
13403: IFFALSE 14352
// begin if not StreamModeActive then
13405: LD_EXP 26
13409: NOT
13410: IFFALSE 13420
// StreamModeActive := true ;
13412: LD_ADDR_EXP 26
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 0 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 0
13427: EQUAL
13428: IFFALSE 13434
// InitStreamMode ;
13430: CALL 9473 0 0
// if p3 = 1 then
13434: LD_VAR 0 3
13438: PUSH
13439: LD_INT 1
13441: EQUAL
13442: IFFALSE 13452
// sRocket := true ;
13444: LD_ADDR_EXP 31
13448: PUSH
13449: LD_INT 1
13451: ST_TO_ADDR
// if p3 = 2 then
13452: LD_VAR 0 3
13456: PUSH
13457: LD_INT 2
13459: EQUAL
13460: IFFALSE 13470
// sSpeed := true ;
13462: LD_ADDR_EXP 30
13466: PUSH
13467: LD_INT 1
13469: ST_TO_ADDR
// if p3 = 3 then
13470: LD_VAR 0 3
13474: PUSH
13475: LD_INT 3
13477: EQUAL
13478: IFFALSE 13488
// sEngine := true ;
13480: LD_ADDR_EXP 32
13484: PUSH
13485: LD_INT 1
13487: ST_TO_ADDR
// if p3 = 4 then
13488: LD_VAR 0 3
13492: PUSH
13493: LD_INT 4
13495: EQUAL
13496: IFFALSE 13506
// sSpec := true ;
13498: LD_ADDR_EXP 29
13502: PUSH
13503: LD_INT 1
13505: ST_TO_ADDR
// if p3 = 5 then
13506: LD_VAR 0 3
13510: PUSH
13511: LD_INT 5
13513: EQUAL
13514: IFFALSE 13524
// sLevel := true ;
13516: LD_ADDR_EXP 33
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// if p3 = 6 then
13524: LD_VAR 0 3
13528: PUSH
13529: LD_INT 6
13531: EQUAL
13532: IFFALSE 13542
// sArmoury := true ;
13534: LD_ADDR_EXP 34
13538: PUSH
13539: LD_INT 1
13541: ST_TO_ADDR
// if p3 = 7 then
13542: LD_VAR 0 3
13546: PUSH
13547: LD_INT 7
13549: EQUAL
13550: IFFALSE 13560
// sRadar := true ;
13552: LD_ADDR_EXP 35
13556: PUSH
13557: LD_INT 1
13559: ST_TO_ADDR
// if p3 = 8 then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 8
13567: EQUAL
13568: IFFALSE 13578
// sBunker := true ;
13570: LD_ADDR_EXP 36
13574: PUSH
13575: LD_INT 1
13577: ST_TO_ADDR
// if p3 = 9 then
13578: LD_VAR 0 3
13582: PUSH
13583: LD_INT 9
13585: EQUAL
13586: IFFALSE 13596
// sHack := true ;
13588: LD_ADDR_EXP 37
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// if p3 = 10 then
13596: LD_VAR 0 3
13600: PUSH
13601: LD_INT 10
13603: EQUAL
13604: IFFALSE 13614
// sFire := true ;
13606: LD_ADDR_EXP 38
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// if p3 = 11 then
13614: LD_VAR 0 3
13618: PUSH
13619: LD_INT 11
13621: EQUAL
13622: IFFALSE 13632
// sRefresh := true ;
13624: LD_ADDR_EXP 39
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// if p3 = 12 then
13632: LD_VAR 0 3
13636: PUSH
13637: LD_INT 12
13639: EQUAL
13640: IFFALSE 13650
// sExp := true ;
13642: LD_ADDR_EXP 40
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// if p3 = 13 then
13650: LD_VAR 0 3
13654: PUSH
13655: LD_INT 13
13657: EQUAL
13658: IFFALSE 13668
// sDepot := true ;
13660: LD_ADDR_EXP 41
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if p3 = 14 then
13668: LD_VAR 0 3
13672: PUSH
13673: LD_INT 14
13675: EQUAL
13676: IFFALSE 13686
// sFlag := true ;
13678: LD_ADDR_EXP 42
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// if p3 = 15 then
13686: LD_VAR 0 3
13690: PUSH
13691: LD_INT 15
13693: EQUAL
13694: IFFALSE 13704
// sKamikadze := true ;
13696: LD_ADDR_EXP 50
13700: PUSH
13701: LD_INT 1
13703: ST_TO_ADDR
// if p3 = 16 then
13704: LD_VAR 0 3
13708: PUSH
13709: LD_INT 16
13711: EQUAL
13712: IFFALSE 13722
// sTroll := true ;
13714: LD_ADDR_EXP 51
13718: PUSH
13719: LD_INT 1
13721: ST_TO_ADDR
// if p3 = 17 then
13722: LD_VAR 0 3
13726: PUSH
13727: LD_INT 17
13729: EQUAL
13730: IFFALSE 13740
// sSlow := true ;
13732: LD_ADDR_EXP 52
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// if p3 = 18 then
13740: LD_VAR 0 3
13744: PUSH
13745: LD_INT 18
13747: EQUAL
13748: IFFALSE 13758
// sLack := true ;
13750: LD_ADDR_EXP 53
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// if p3 = 19 then
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 19
13765: EQUAL
13766: IFFALSE 13776
// sTank := true ;
13768: LD_ADDR_EXP 55
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// if p3 = 20 then
13776: LD_VAR 0 3
13780: PUSH
13781: LD_INT 20
13783: EQUAL
13784: IFFALSE 13794
// sRemote := true ;
13786: LD_ADDR_EXP 56
13790: PUSH
13791: LD_INT 1
13793: ST_TO_ADDR
// if p3 = 21 then
13794: LD_VAR 0 3
13798: PUSH
13799: LD_INT 21
13801: EQUAL
13802: IFFALSE 13812
// sPowell := true ;
13804: LD_ADDR_EXP 57
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// if p3 = 22 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 22
13819: EQUAL
13820: IFFALSE 13830
// sTeleport := true ;
13822: LD_ADDR_EXP 60
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// if p3 = 23 then
13830: LD_VAR 0 3
13834: PUSH
13835: LD_INT 23
13837: EQUAL
13838: IFFALSE 13848
// sOilTower := true ;
13840: LD_ADDR_EXP 62
13844: PUSH
13845: LD_INT 1
13847: ST_TO_ADDR
// if p3 = 24 then
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 24
13855: EQUAL
13856: IFFALSE 13866
// sShovel := true ;
13858: LD_ADDR_EXP 63
13862: PUSH
13863: LD_INT 1
13865: ST_TO_ADDR
// if p3 = 25 then
13866: LD_VAR 0 3
13870: PUSH
13871: LD_INT 25
13873: EQUAL
13874: IFFALSE 13884
// sSheik := true ;
13876: LD_ADDR_EXP 64
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// if p3 = 26 then
13884: LD_VAR 0 3
13888: PUSH
13889: LD_INT 26
13891: EQUAL
13892: IFFALSE 13902
// sEarthquake := true ;
13894: LD_ADDR_EXP 66
13898: PUSH
13899: LD_INT 1
13901: ST_TO_ADDR
// if p3 = 27 then
13902: LD_VAR 0 3
13906: PUSH
13907: LD_INT 27
13909: EQUAL
13910: IFFALSE 13920
// sAI := true ;
13912: LD_ADDR_EXP 67
13916: PUSH
13917: LD_INT 1
13919: ST_TO_ADDR
// if p3 = 28 then
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 28
13927: EQUAL
13928: IFFALSE 13938
// sCargo := true ;
13930: LD_ADDR_EXP 70
13934: PUSH
13935: LD_INT 1
13937: ST_TO_ADDR
// if p3 = 29 then
13938: LD_VAR 0 3
13942: PUSH
13943: LD_INT 29
13945: EQUAL
13946: IFFALSE 13956
// sDLaser := true ;
13948: LD_ADDR_EXP 71
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if p3 = 30 then
13956: LD_VAR 0 3
13960: PUSH
13961: LD_INT 30
13963: EQUAL
13964: IFFALSE 13974
// sExchange := true ;
13966: LD_ADDR_EXP 72
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// if p3 = 31 then
13974: LD_VAR 0 3
13978: PUSH
13979: LD_INT 31
13981: EQUAL
13982: IFFALSE 13992
// sFac := true ;
13984: LD_ADDR_EXP 73
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// if p3 = 32 then
13992: LD_VAR 0 3
13996: PUSH
13997: LD_INT 32
13999: EQUAL
14000: IFFALSE 14010
// sPower := true ;
14002: LD_ADDR_EXP 74
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// if p3 = 33 then
14010: LD_VAR 0 3
14014: PUSH
14015: LD_INT 33
14017: EQUAL
14018: IFFALSE 14028
// sRandom := true ;
14020: LD_ADDR_EXP 75
14024: PUSH
14025: LD_INT 1
14027: ST_TO_ADDR
// if p3 = 34 then
14028: LD_VAR 0 3
14032: PUSH
14033: LD_INT 34
14035: EQUAL
14036: IFFALSE 14046
// sShield := true ;
14038: LD_ADDR_EXP 76
14042: PUSH
14043: LD_INT 1
14045: ST_TO_ADDR
// if p3 = 35 then
14046: LD_VAR 0 3
14050: PUSH
14051: LD_INT 35
14053: EQUAL
14054: IFFALSE 14064
// sTime := true ;
14056: LD_ADDR_EXP 77
14060: PUSH
14061: LD_INT 1
14063: ST_TO_ADDR
// if p3 = 36 then
14064: LD_VAR 0 3
14068: PUSH
14069: LD_INT 36
14071: EQUAL
14072: IFFALSE 14082
// sTools := true ;
14074: LD_ADDR_EXP 78
14078: PUSH
14079: LD_INT 1
14081: ST_TO_ADDR
// if p3 = 101 then
14082: LD_VAR 0 3
14086: PUSH
14087: LD_INT 101
14089: EQUAL
14090: IFFALSE 14100
// sSold := true ;
14092: LD_ADDR_EXP 43
14096: PUSH
14097: LD_INT 1
14099: ST_TO_ADDR
// if p3 = 102 then
14100: LD_VAR 0 3
14104: PUSH
14105: LD_INT 102
14107: EQUAL
14108: IFFALSE 14118
// sDiff := true ;
14110: LD_ADDR_EXP 44
14114: PUSH
14115: LD_INT 1
14117: ST_TO_ADDR
// if p3 = 103 then
14118: LD_VAR 0 3
14122: PUSH
14123: LD_INT 103
14125: EQUAL
14126: IFFALSE 14136
// sFog := true ;
14128: LD_ADDR_EXP 47
14132: PUSH
14133: LD_INT 1
14135: ST_TO_ADDR
// if p3 = 104 then
14136: LD_VAR 0 3
14140: PUSH
14141: LD_INT 104
14143: EQUAL
14144: IFFALSE 14154
// sReset := true ;
14146: LD_ADDR_EXP 48
14150: PUSH
14151: LD_INT 1
14153: ST_TO_ADDR
// if p3 = 105 then
14154: LD_VAR 0 3
14158: PUSH
14159: LD_INT 105
14161: EQUAL
14162: IFFALSE 14172
// sSun := true ;
14164: LD_ADDR_EXP 49
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
// if p3 = 106 then
14172: LD_VAR 0 3
14176: PUSH
14177: LD_INT 106
14179: EQUAL
14180: IFFALSE 14190
// sTiger := true ;
14182: LD_ADDR_EXP 45
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// if p3 = 107 then
14190: LD_VAR 0 3
14194: PUSH
14195: LD_INT 107
14197: EQUAL
14198: IFFALSE 14208
// sBomb := true ;
14200: LD_ADDR_EXP 46
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// if p3 = 108 then
14208: LD_VAR 0 3
14212: PUSH
14213: LD_INT 108
14215: EQUAL
14216: IFFALSE 14226
// sWound := true ;
14218: LD_ADDR_EXP 54
14222: PUSH
14223: LD_INT 1
14225: ST_TO_ADDR
// if p3 = 109 then
14226: LD_VAR 0 3
14230: PUSH
14231: LD_INT 109
14233: EQUAL
14234: IFFALSE 14244
// sBetray := true ;
14236: LD_ADDR_EXP 58
14240: PUSH
14241: LD_INT 1
14243: ST_TO_ADDR
// if p3 = 110 then
14244: LD_VAR 0 3
14248: PUSH
14249: LD_INT 110
14251: EQUAL
14252: IFFALSE 14262
// sContamin := true ;
14254: LD_ADDR_EXP 59
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// if p3 = 111 then
14262: LD_VAR 0 3
14266: PUSH
14267: LD_INT 111
14269: EQUAL
14270: IFFALSE 14280
// sOil := true ;
14272: LD_ADDR_EXP 61
14276: PUSH
14277: LD_INT 1
14279: ST_TO_ADDR
// if p3 = 112 then
14280: LD_VAR 0 3
14284: PUSH
14285: LD_INT 112
14287: EQUAL
14288: IFFALSE 14298
// sStu := true ;
14290: LD_ADDR_EXP 65
14294: PUSH
14295: LD_INT 1
14297: ST_TO_ADDR
// if p3 = 113 then
14298: LD_VAR 0 3
14302: PUSH
14303: LD_INT 113
14305: EQUAL
14306: IFFALSE 14316
// sBazooka := true ;
14308: LD_ADDR_EXP 68
14312: PUSH
14313: LD_INT 1
14315: ST_TO_ADDR
// if p3 = 114 then
14316: LD_VAR 0 3
14320: PUSH
14321: LD_INT 114
14323: EQUAL
14324: IFFALSE 14334
// sMortar := true ;
14326: LD_ADDR_EXP 69
14330: PUSH
14331: LD_INT 1
14333: ST_TO_ADDR
// if p3 = 115 then
14334: LD_VAR 0 3
14338: PUSH
14339: LD_INT 115
14341: EQUAL
14342: IFFALSE 14352
// sRanger := true ;
14344: LD_ADDR_EXP 79
14348: PUSH
14349: LD_INT 1
14351: ST_TO_ADDR
// end ; end ;
14352: PPOPN 6
14354: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14355: LD_EXP 26
14359: PUSH
14360: LD_EXP 31
14364: AND
14365: IFFALSE 14489
14367: GO 14369
14369: DISABLE
14370: LD_INT 0
14372: PPUSH
14373: PPUSH
// begin enable ;
14374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14375: LD_ADDR_VAR 0 2
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_OWVAR 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 7
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 34
14407: PUSH
14408: LD_INT 45
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 34
14417: PUSH
14418: LD_INT 28
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 34
14427: PUSH
14428: LD_INT 47
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 2
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14489
// for i in tmp do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: LD_VAR 0 2
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14487
// begin SetLives ( i , 0 ) ;
14473: LD_VAR 0 1
14477: PPUSH
14478: LD_INT 0
14480: PPUSH
14481: CALL_OW 234
// end ;
14485: GO 14470
14487: POP
14488: POP
// end ;
14489: PPOPN 2
14491: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14492: LD_EXP 26
14496: PUSH
14497: LD_EXP 32
14501: AND
14502: IFFALSE 14586
14504: GO 14506
14506: DISABLE
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// begin enable ;
14511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14512: LD_ADDR_VAR 0 2
14516: PUSH
14517: LD_INT 22
14519: PUSH
14520: LD_OWVAR 2
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 32
14531: PUSH
14532: LD_INT 3
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PPUSH
14543: CALL_OW 69
14547: ST_TO_ADDR
// if not tmp then
14548: LD_VAR 0 2
14552: NOT
14553: IFFALSE 14557
// exit ;
14555: GO 14586
// for i in tmp do
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_VAR 0 2
14566: PUSH
14567: FOR_IN
14568: IFFALSE 14584
// begin SetLives ( i , 0 ) ;
14570: LD_VAR 0 1
14574: PPUSH
14575: LD_INT 0
14577: PPUSH
14578: CALL_OW 234
// end ;
14582: GO 14567
14584: POP
14585: POP
// end ;
14586: PPOPN 2
14588: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14589: LD_EXP 26
14593: PUSH
14594: LD_EXP 29
14598: AND
14599: IFFALSE 14692
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
// begin enable ;
14607: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 2
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 5
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 9
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 25
14650: PUSH
14651: LD_INT 8
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: PUSH
14673: FOR_IN
14674: IFFALSE 14690
// begin SetClass ( i , 1 ) ;
14676: LD_VAR 0 1
14680: PPUSH
14681: LD_INT 1
14683: PPUSH
14684: CALL_OW 336
// end ;
14688: GO 14673
14690: POP
14691: POP
// end ;
14692: PPOPN 1
14694: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14695: LD_EXP 26
14699: PUSH
14700: LD_EXP 30
14704: AND
14705: PUSH
14706: LD_OWVAR 65
14710: PUSH
14711: LD_INT 7
14713: LESS
14714: AND
14715: IFFALSE 14729
14717: GO 14719
14719: DISABLE
// begin enable ;
14720: ENABLE
// game_speed := 7 ;
14721: LD_ADDR_OWVAR 65
14725: PUSH
14726: LD_INT 7
14728: ST_TO_ADDR
// end ;
14729: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14730: LD_EXP 26
14734: PUSH
14735: LD_EXP 33
14739: AND
14740: IFFALSE 14942
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 81
14757: PUSH
14758: LD_OWVAR 2
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 1
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: ST_TO_ADDR
// if not tmp then
14786: LD_VAR 0 3
14790: NOT
14791: IFFALSE 14795
// exit ;
14793: GO 14942
// if tmp > 5 then
14795: LD_VAR 0 3
14799: PUSH
14800: LD_INT 5
14802: GREATER
14803: IFFALSE 14815
// k := 5 else
14805: LD_ADDR_VAR 0 2
14809: PUSH
14810: LD_INT 5
14812: ST_TO_ADDR
14813: GO 14825
// k := tmp ;
14815: LD_ADDR_VAR 0 2
14819: PUSH
14820: LD_VAR 0 3
14824: ST_TO_ADDR
// for i := 1 to k do
14825: LD_ADDR_VAR 0 1
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_VAR 0 2
14839: PUSH
14840: FOR_TO
14841: IFFALSE 14940
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_VAR 0 1
14852: ARRAY
14853: PPUSH
14854: LD_VAR 0 1
14858: PUSH
14859: LD_INT 4
14861: MOD
14862: PUSH
14863: LD_INT 1
14865: PLUS
14866: PPUSH
14867: CALL_OW 259
14871: PUSH
14872: LD_INT 10
14874: LESS
14875: IFFALSE 14938
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14877: LD_VAR 0 3
14881: PUSH
14882: LD_VAR 0 1
14886: ARRAY
14887: PPUSH
14888: LD_VAR 0 1
14892: PUSH
14893: LD_INT 4
14895: MOD
14896: PUSH
14897: LD_INT 1
14899: PLUS
14900: PPUSH
14901: LD_VAR 0 3
14905: PUSH
14906: LD_VAR 0 1
14910: ARRAY
14911: PPUSH
14912: LD_VAR 0 1
14916: PUSH
14917: LD_INT 4
14919: MOD
14920: PUSH
14921: LD_INT 1
14923: PLUS
14924: PPUSH
14925: CALL_OW 259
14929: PUSH
14930: LD_INT 1
14932: PLUS
14933: PPUSH
14934: CALL_OW 237
14938: GO 14840
14940: POP
14941: POP
// end ;
14942: PPOPN 3
14944: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14945: LD_EXP 26
14949: PUSH
14950: LD_EXP 34
14954: AND
14955: IFFALSE 14975
14957: GO 14959
14959: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14960: LD_INT 4
14962: PPUSH
14963: LD_OWVAR 2
14967: PPUSH
14968: LD_INT 0
14970: PPUSH
14971: CALL_OW 324
14975: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14976: LD_EXP 26
14980: PUSH
14981: LD_EXP 63
14985: AND
14986: IFFALSE 15006
14988: GO 14990
14990: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14991: LD_INT 19
14993: PPUSH
14994: LD_OWVAR 2
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 324
15006: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15007: LD_EXP 26
15011: PUSH
15012: LD_EXP 35
15016: AND
15017: IFFALSE 15119
15019: GO 15021
15021: DISABLE
15022: LD_INT 0
15024: PPUSH
15025: PPUSH
// begin enable ;
15026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_INT 22
15034: PUSH
15035: LD_OWVAR 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 2
15046: PUSH
15047: LD_INT 34
15049: PUSH
15050: LD_INT 11
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 34
15059: PUSH
15060: LD_INT 30
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: ST_TO_ADDR
// if not tmp then
15081: LD_VAR 0 2
15085: NOT
15086: IFFALSE 15090
// exit ;
15088: GO 15119
// for i in tmp do
15090: LD_ADDR_VAR 0 1
15094: PUSH
15095: LD_VAR 0 2
15099: PUSH
15100: FOR_IN
15101: IFFALSE 15117
// begin SetLives ( i , 0 ) ;
15103: LD_VAR 0 1
15107: PPUSH
15108: LD_INT 0
15110: PPUSH
15111: CALL_OW 234
// end ;
15115: GO 15100
15117: POP
15118: POP
// end ;
15119: PPOPN 2
15121: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15122: LD_EXP 26
15126: PUSH
15127: LD_EXP 36
15131: AND
15132: IFFALSE 15152
15134: GO 15136
15136: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15137: LD_INT 32
15139: PPUSH
15140: LD_OWVAR 2
15144: PPUSH
15145: LD_INT 0
15147: PPUSH
15148: CALL_OW 324
15152: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15153: LD_EXP 26
15157: PUSH
15158: LD_EXP 37
15162: AND
15163: IFFALSE 15344
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
15172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15173: LD_ADDR_VAR 0 2
15177: PUSH
15178: LD_INT 22
15180: PUSH
15181: LD_OWVAR 2
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 33
15192: PUSH
15193: LD_INT 3
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PPUSH
15204: CALL_OW 69
15208: ST_TO_ADDR
// if not tmp then
15209: LD_VAR 0 2
15213: NOT
15214: IFFALSE 15218
// exit ;
15216: GO 15344
// side := 0 ;
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: LD_INT 0
15225: ST_TO_ADDR
// for i := 1 to 8 do
15226: LD_ADDR_VAR 0 1
15230: PUSH
15231: DOUBLE
15232: LD_INT 1
15234: DEC
15235: ST_TO_ADDR
15236: LD_INT 8
15238: PUSH
15239: FOR_TO
15240: IFFALSE 15288
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15242: LD_OWVAR 2
15246: PUSH
15247: LD_VAR 0 1
15251: NONEQUAL
15252: PUSH
15253: LD_OWVAR 2
15257: PPUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 81
15267: PUSH
15268: LD_INT 2
15270: EQUAL
15271: AND
15272: IFFALSE 15286
// begin side := i ;
15274: LD_ADDR_VAR 0 3
15278: PUSH
15279: LD_VAR 0 1
15283: ST_TO_ADDR
// break ;
15284: GO 15288
// end ;
15286: GO 15239
15288: POP
15289: POP
// if not side then
15290: LD_VAR 0 3
15294: NOT
15295: IFFALSE 15299
// exit ;
15297: GO 15344
// for i := 1 to tmp do
15299: LD_ADDR_VAR 0 1
15303: PUSH
15304: DOUBLE
15305: LD_INT 1
15307: DEC
15308: ST_TO_ADDR
15309: LD_VAR 0 2
15313: PUSH
15314: FOR_TO
15315: IFFALSE 15342
// if Prob ( 60 ) then
15317: LD_INT 60
15319: PPUSH
15320: CALL_OW 13
15324: IFFALSE 15340
// SetSide ( i , side ) ;
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: CALL_OW 235
15340: GO 15314
15342: POP
15343: POP
// end ;
15344: PPOPN 3
15346: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15347: LD_EXP 26
15351: PUSH
15352: LD_EXP 39
15356: AND
15357: IFFALSE 15476
15359: GO 15361
15361: DISABLE
15362: LD_INT 0
15364: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15365: LD_ADDR_VAR 0 1
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_OWVAR 2
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 3
15394: PUSH
15395: LD_INT 23
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15474
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15422: LD_VAR 0 1
15426: PPUSH
15427: CALL_OW 257
15431: PUSH
15432: LD_INT 1
15434: PUSH
15435: LD_INT 2
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 4
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: IN
15450: IFFALSE 15472
// SetClass ( un , rand ( 1 , 4 ) ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: LD_INT 4
15462: PPUSH
15463: CALL_OW 12
15467: PPUSH
15468: CALL_OW 336
15472: GO 15419
15474: POP
15475: POP
// end ;
15476: PPOPN 1
15478: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15479: LD_EXP 26
15483: PUSH
15484: LD_EXP 38
15488: AND
15489: IFFALSE 15568
15491: GO 15493
15493: DISABLE
15494: LD_INT 0
15496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15497: LD_ADDR_VAR 0 1
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_OWVAR 2
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 3
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: ST_TO_ADDR
// if not tmp then
15533: LD_VAR 0 1
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 15568
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15542: LD_VAR 0 1
15546: PUSH
15547: LD_INT 1
15549: PPUSH
15550: LD_VAR 0 1
15554: PPUSH
15555: CALL_OW 12
15559: ARRAY
15560: PPUSH
15561: LD_INT 100
15563: PPUSH
15564: CALL_OW 234
// end ;
15568: PPOPN 1
15570: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15571: LD_EXP 26
15575: PUSH
15576: LD_EXP 40
15580: AND
15581: IFFALSE 15679
15583: GO 15585
15585: DISABLE
15586: LD_INT 0
15588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15589: LD_ADDR_VAR 0 1
15593: PUSH
15594: LD_INT 22
15596: PUSH
15597: LD_OWVAR 2
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 69
15624: ST_TO_ADDR
// if not tmp then
15625: LD_VAR 0 1
15629: NOT
15630: IFFALSE 15634
// exit ;
15632: GO 15679
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 1
15641: PPUSH
15642: LD_VAR 0 1
15646: PPUSH
15647: CALL_OW 12
15651: ARRAY
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: LD_INT 4
15658: PPUSH
15659: CALL_OW 12
15663: PPUSH
15664: LD_INT 3000
15666: PPUSH
15667: LD_INT 9000
15669: PPUSH
15670: CALL_OW 12
15674: PPUSH
15675: CALL_OW 492
// end ;
15679: PPOPN 1
15681: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15682: LD_EXP 26
15686: PUSH
15687: LD_EXP 41
15691: AND
15692: IFFALSE 15712
15694: GO 15696
15696: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15697: LD_INT 1
15699: PPUSH
15700: LD_OWVAR 2
15704: PPUSH
15705: LD_INT 0
15707: PPUSH
15708: CALL_OW 324
15712: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15713: LD_EXP 26
15717: PUSH
15718: LD_EXP 42
15722: AND
15723: IFFALSE 15806
15725: GO 15727
15727: DISABLE
15728: LD_INT 0
15730: PPUSH
15731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15732: LD_ADDR_VAR 0 2
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_OWVAR 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 21
15751: PUSH
15752: LD_INT 3
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 2
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15806
// for i in tmp do
15777: LD_ADDR_VAR 0 1
15781: PUSH
15782: LD_VAR 0 2
15786: PUSH
15787: FOR_IN
15788: IFFALSE 15804
// SetBLevel ( i , 10 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_INT 10
15797: PPUSH
15798: CALL_OW 241
15802: GO 15787
15804: POP
15805: POP
// end ;
15806: PPOPN 2
15808: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15809: LD_EXP 26
15813: PUSH
15814: LD_EXP 43
15818: AND
15819: IFFALSE 15930
15821: GO 15823
15823: DISABLE
15824: LD_INT 0
15826: PPUSH
15827: PPUSH
15828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_OWVAR 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 25
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 69
15864: ST_TO_ADDR
// if not tmp then
15865: LD_VAR 0 3
15869: NOT
15870: IFFALSE 15874
// exit ;
15872: GO 15930
// un := tmp [ rand ( 1 , tmp ) ] ;
15874: LD_ADDR_VAR 0 2
15878: PUSH
15879: LD_VAR 0 3
15883: PUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: CALL_OW 12
15896: ARRAY
15897: ST_TO_ADDR
// if Crawls ( un ) then
15898: LD_VAR 0 2
15902: PPUSH
15903: CALL_OW 318
15907: IFFALSE 15918
// ComWalk ( un ) ;
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_INT 5
15925: PPUSH
15926: CALL_OW 336
// end ;
15930: PPOPN 3
15932: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15933: LD_EXP 26
15937: PUSH
15938: LD_EXP 44
15942: AND
15943: PUSH
15944: LD_OWVAR 67
15948: PUSH
15949: LD_INT 3
15951: LESS
15952: AND
15953: IFFALSE 15972
15955: GO 15957
15957: DISABLE
// Difficulty := Difficulty + 1 ;
15958: LD_ADDR_OWVAR 67
15962: PUSH
15963: LD_OWVAR 67
15967: PUSH
15968: LD_INT 1
15970: PLUS
15971: ST_TO_ADDR
15972: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15973: LD_EXP 26
15977: PUSH
15978: LD_EXP 45
15982: AND
15983: IFFALSE 16086
15985: GO 15987
15987: DISABLE
15988: LD_INT 0
15990: PPUSH
// begin for i := 1 to 5 do
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: DOUBLE
15997: LD_INT 1
15999: DEC
16000: ST_TO_ADDR
16001: LD_INT 5
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16084
// begin uc_nation := nation_nature ;
16007: LD_ADDR_OWVAR 21
16011: PUSH
16012: LD_INT 0
16014: ST_TO_ADDR
// uc_side := 0 ;
16015: LD_ADDR_OWVAR 20
16019: PUSH
16020: LD_INT 0
16022: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16023: LD_ADDR_OWVAR 29
16027: PUSH
16028: LD_INT 12
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: ST_TO_ADDR
// hc_agressivity := 20 ;
16038: LD_ADDR_OWVAR 35
16042: PUSH
16043: LD_INT 20
16045: ST_TO_ADDR
// hc_class := class_tiger ;
16046: LD_ADDR_OWVAR 28
16050: PUSH
16051: LD_INT 14
16053: ST_TO_ADDR
// hc_gallery :=  ;
16054: LD_ADDR_OWVAR 33
16058: PUSH
16059: LD_STRING 
16061: ST_TO_ADDR
// hc_name :=  ;
16062: LD_ADDR_OWVAR 26
16066: PUSH
16067: LD_STRING 
16069: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16070: CALL_OW 44
16074: PPUSH
16075: LD_INT 0
16077: PPUSH
16078: CALL_OW 51
// end ;
16082: GO 16004
16084: POP
16085: POP
// end ;
16086: PPOPN 1
16088: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16089: LD_EXP 26
16093: PUSH
16094: LD_EXP 46
16098: AND
16099: IFFALSE 16108
16101: GO 16103
16103: DISABLE
// StreamSibBomb ;
16104: CALL 16109 0 0
16108: END
// export function StreamSibBomb ; var i , x , y ; begin
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
// result := false ;
16115: LD_ADDR_VAR 0 1
16119: PUSH
16120: LD_INT 0
16122: ST_TO_ADDR
// for i := 1 to 16 do
16123: LD_ADDR_VAR 0 2
16127: PUSH
16128: DOUBLE
16129: LD_INT 1
16131: DEC
16132: ST_TO_ADDR
16133: LD_INT 16
16135: PUSH
16136: FOR_TO
16137: IFFALSE 16336
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: LD_INT 10
16146: PUSH
16147: LD_INT 20
16149: PUSH
16150: LD_INT 30
16152: PUSH
16153: LD_INT 40
16155: PUSH
16156: LD_INT 50
16158: PUSH
16159: LD_INT 60
16161: PUSH
16162: LD_INT 70
16164: PUSH
16165: LD_INT 80
16167: PUSH
16168: LD_INT 90
16170: PUSH
16171: LD_INT 100
16173: PUSH
16174: LD_INT 110
16176: PUSH
16177: LD_INT 120
16179: PUSH
16180: LD_INT 130
16182: PUSH
16183: LD_INT 140
16185: PUSH
16186: LD_INT 150
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: PPUSH
16209: LD_INT 15
16211: PPUSH
16212: CALL_OW 12
16216: ARRAY
16217: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16218: LD_ADDR_VAR 0 4
16222: PUSH
16223: LD_INT 10
16225: PUSH
16226: LD_INT 20
16228: PUSH
16229: LD_INT 30
16231: PUSH
16232: LD_INT 40
16234: PUSH
16235: LD_INT 50
16237: PUSH
16238: LD_INT 60
16240: PUSH
16241: LD_INT 70
16243: PUSH
16244: LD_INT 80
16246: PUSH
16247: LD_INT 90
16249: PUSH
16250: LD_INT 100
16252: PUSH
16253: LD_INT 110
16255: PUSH
16256: LD_INT 120
16258: PUSH
16259: LD_INT 130
16261: PUSH
16262: LD_INT 140
16264: PUSH
16265: LD_INT 150
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: PPUSH
16288: LD_INT 15
16290: PPUSH
16291: CALL_OW 12
16295: ARRAY
16296: ST_TO_ADDR
// if ValidHex ( x , y ) then
16297: LD_VAR 0 3
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: CALL_OW 488
16311: IFFALSE 16334
// begin result := [ x , y ] ;
16313: LD_ADDR_VAR 0 1
16317: PUSH
16318: LD_VAR 0 3
16322: PUSH
16323: LD_VAR 0 4
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: ST_TO_ADDR
// break ;
16332: GO 16336
// end ; end ;
16334: GO 16136
16336: POP
16337: POP
// if result then
16338: LD_VAR 0 1
16342: IFFALSE 16402
// begin ToLua ( playSibBomb() ) ;
16344: LD_STRING playSibBomb()
16346: PPUSH
16347: CALL_OW 559
// wait ( 0 0$14 ) ;
16351: LD_INT 490
16353: PPUSH
16354: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16358: LD_VAR 0 1
16362: PUSH
16363: LD_INT 1
16365: ARRAY
16366: PPUSH
16367: LD_VAR 0 1
16371: PUSH
16372: LD_INT 2
16374: ARRAY
16375: PPUSH
16376: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 1
16387: ARRAY
16388: PPUSH
16389: LD_VAR 0 1
16393: PUSH
16394: LD_INT 2
16396: ARRAY
16397: PPUSH
16398: CALL_OW 429
// end ; end ;
16402: LD_VAR 0 1
16406: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16407: LD_EXP 26
16411: PUSH
16412: LD_EXP 48
16416: AND
16417: IFFALSE 16429
16419: GO 16421
16421: DISABLE
// YouLost (  ) ;
16422: LD_STRING 
16424: PPUSH
16425: CALL_OW 104
16429: END
// every 0 0$1 trigger StreamModeActive and sFog do
16430: LD_EXP 26
16434: PUSH
16435: LD_EXP 47
16439: AND
16440: IFFALSE 16454
16442: GO 16444
16444: DISABLE
// FogOff ( your_side ) ;
16445: LD_OWVAR 2
16449: PPUSH
16450: CALL_OW 344
16454: END
// every 0 0$1 trigger StreamModeActive and sSun do
16455: LD_EXP 26
16459: PUSH
16460: LD_EXP 49
16464: AND
16465: IFFALSE 16493
16467: GO 16469
16469: DISABLE
// begin solar_recharge_percent := 0 ;
16470: LD_ADDR_OWVAR 79
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16478: LD_INT 10500
16480: PPUSH
16481: CALL_OW 67
// solar_recharge_percent := 100 ;
16485: LD_ADDR_OWVAR 79
16489: PUSH
16490: LD_INT 100
16492: ST_TO_ADDR
// end ;
16493: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16494: LD_EXP 26
16498: PUSH
16499: LD_EXP 50
16503: AND
16504: IFFALSE 16743
16506: GO 16508
16508: DISABLE
16509: LD_INT 0
16511: PPUSH
16512: PPUSH
16513: PPUSH
// begin tmp := [ ] ;
16514: LD_ADDR_VAR 0 3
16518: PUSH
16519: EMPTY
16520: ST_TO_ADDR
// for i := 1 to 6 do
16521: LD_ADDR_VAR 0 1
16525: PUSH
16526: DOUBLE
16527: LD_INT 1
16529: DEC
16530: ST_TO_ADDR
16531: LD_INT 6
16533: PUSH
16534: FOR_TO
16535: IFFALSE 16640
// begin uc_nation := nation_nature ;
16537: LD_ADDR_OWVAR 21
16541: PUSH
16542: LD_INT 0
16544: ST_TO_ADDR
// uc_side := 0 ;
16545: LD_ADDR_OWVAR 20
16549: PUSH
16550: LD_INT 0
16552: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16553: LD_ADDR_OWVAR 29
16557: PUSH
16558: LD_INT 12
16560: PUSH
16561: LD_INT 12
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: ST_TO_ADDR
// hc_agressivity := 20 ;
16568: LD_ADDR_OWVAR 35
16572: PUSH
16573: LD_INT 20
16575: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16576: LD_ADDR_OWVAR 28
16580: PUSH
16581: LD_INT 17
16583: ST_TO_ADDR
// hc_gallery :=  ;
16584: LD_ADDR_OWVAR 33
16588: PUSH
16589: LD_STRING 
16591: ST_TO_ADDR
// hc_name :=  ;
16592: LD_ADDR_OWVAR 26
16596: PUSH
16597: LD_STRING 
16599: ST_TO_ADDR
// un := CreateHuman ;
16600: LD_ADDR_VAR 0 2
16604: PUSH
16605: CALL_OW 44
16609: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 51
// tmp := tmp ^ un ;
16622: LD_ADDR_VAR 0 3
16626: PUSH
16627: LD_VAR 0 3
16631: PUSH
16632: LD_VAR 0 2
16636: ADD
16637: ST_TO_ADDR
// end ;
16638: GO 16534
16640: POP
16641: POP
// repeat wait ( 0 0$1 ) ;
16642: LD_INT 35
16644: PPUSH
16645: CALL_OW 67
// for un in tmp do
16649: LD_ADDR_VAR 0 2
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: FOR_IN
16660: IFFALSE 16734
// begin if IsDead ( un ) then
16662: LD_VAR 0 2
16666: PPUSH
16667: CALL_OW 301
16671: IFFALSE 16691
// begin tmp := tmp diff un ;
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_VAR 0 3
16682: PUSH
16683: LD_VAR 0 2
16687: DIFF
16688: ST_TO_ADDR
// continue ;
16689: GO 16659
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16691: LD_VAR 0 2
16695: PPUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PPUSH
16713: CALL_OW 69
16717: PPUSH
16718: LD_VAR 0 2
16722: PPUSH
16723: CALL_OW 74
16727: PPUSH
16728: CALL_OW 115
// end ;
16732: GO 16659
16734: POP
16735: POP
// until not tmp ;
16736: LD_VAR 0 3
16740: NOT
16741: IFFALSE 16642
// end ;
16743: PPOPN 3
16745: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16746: LD_EXP 26
16750: PUSH
16751: LD_EXP 51
16755: AND
16756: IFFALSE 16810
16758: GO 16760
16760: DISABLE
// begin ToLua ( displayTroll(); ) ;
16761: LD_STRING displayTroll();
16763: PPUSH
16764: CALL_OW 559
// wait ( 3 3$00 ) ;
16768: LD_INT 6300
16770: PPUSH
16771: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16775: LD_STRING hideTroll();
16777: PPUSH
16778: CALL_OW 559
// wait ( 1 1$00 ) ;
16782: LD_INT 2100
16784: PPUSH
16785: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16789: LD_STRING displayTroll();
16791: PPUSH
16792: CALL_OW 559
// wait ( 1 1$00 ) ;
16796: LD_INT 2100
16798: PPUSH
16799: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16803: LD_STRING hideTroll();
16805: PPUSH
16806: CALL_OW 559
// end ;
16810: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16811: LD_EXP 26
16815: PUSH
16816: LD_EXP 52
16820: AND
16821: IFFALSE 16884
16823: GO 16825
16825: DISABLE
16826: LD_INT 0
16828: PPUSH
// begin p := 0 ;
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// repeat game_speed := 1 ;
16837: LD_ADDR_OWVAR 65
16841: PUSH
16842: LD_INT 1
16844: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16845: LD_INT 35
16847: PPUSH
16848: CALL_OW 67
// p := p + 1 ;
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 1
16864: PLUS
16865: ST_TO_ADDR
// until p >= 60 ;
16866: LD_VAR 0 1
16870: PUSH
16871: LD_INT 60
16873: GREATEREQUAL
16874: IFFALSE 16837
// game_speed := 4 ;
16876: LD_ADDR_OWVAR 65
16880: PUSH
16881: LD_INT 4
16883: ST_TO_ADDR
// end ;
16884: PPOPN 1
16886: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16887: LD_EXP 26
16891: PUSH
16892: LD_EXP 53
16896: AND
16897: IFFALSE 17043
16899: GO 16901
16901: DISABLE
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16906: LD_ADDR_VAR 0 1
16910: PUSH
16911: LD_INT 22
16913: PUSH
16914: LD_OWVAR 2
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 30
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 30
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PPUSH
16955: CALL_OW 69
16959: ST_TO_ADDR
// if not depot then
16960: LD_VAR 0 1
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17043
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16969: LD_ADDR_VAR 0 2
16973: PUSH
16974: LD_VAR 0 1
16978: PUSH
16979: LD_INT 1
16981: PPUSH
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 12
16991: ARRAY
16992: PPUSH
16993: CALL_OW 274
16997: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_INT 1
17005: PPUSH
17006: LD_INT 0
17008: PPUSH
17009: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17013: LD_VAR 0 2
17017: PPUSH
17018: LD_INT 2
17020: PPUSH
17021: LD_INT 0
17023: PPUSH
17024: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17028: LD_VAR 0 2
17032: PPUSH
17033: LD_INT 3
17035: PPUSH
17036: LD_INT 0
17038: PPUSH
17039: CALL_OW 277
// end ;
17043: PPOPN 2
17045: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17046: LD_EXP 26
17050: PUSH
17051: LD_EXP 54
17055: AND
17056: IFFALSE 17153
17058: GO 17060
17060: DISABLE
17061: LD_INT 0
17063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: LD_INT 22
17071: PUSH
17072: LD_OWVAR 2
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 3
17093: PUSH
17094: LD_INT 23
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 69
17117: ST_TO_ADDR
// if not tmp then
17118: LD_VAR 0 1
17122: NOT
17123: IFFALSE 17127
// exit ;
17125: GO 17153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17127: LD_VAR 0 1
17131: PUSH
17132: LD_INT 1
17134: PPUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 12
17144: ARRAY
17145: PPUSH
17146: LD_INT 200
17148: PPUSH
17149: CALL_OW 234
// end ;
17153: PPOPN 1
17155: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17156: LD_EXP 26
17160: PUSH
17161: LD_EXP 55
17165: AND
17166: IFFALSE 17245
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17174: LD_ADDR_VAR 0 1
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_OWVAR 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PPUSH
17205: CALL_OW 69
17209: ST_TO_ADDR
// if not tmp then
17210: LD_VAR 0 1
17214: NOT
17215: IFFALSE 17219
// exit ;
17217: GO 17245
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 1
17226: PPUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 12
17236: ARRAY
17237: PPUSH
17238: LD_INT 60
17240: PPUSH
17241: CALL_OW 234
// end ;
17245: PPOPN 1
17247: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17248: LD_EXP 26
17252: PUSH
17253: LD_EXP 56
17257: AND
17258: IFFALSE 17357
17260: GO 17262
17262: DISABLE
17263: LD_INT 0
17265: PPUSH
17266: PPUSH
// begin enable ;
17267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17268: LD_ADDR_VAR 0 1
17272: PUSH
17273: LD_INT 22
17275: PUSH
17276: LD_OWVAR 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 61
17287: PUSH
17288: EMPTY
17289: LIST
17290: PUSH
17291: LD_INT 33
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: ST_TO_ADDR
// if not tmp then
17311: LD_VAR 0 1
17315: NOT
17316: IFFALSE 17320
// exit ;
17318: GO 17357
// for i in tmp do
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_VAR 0 1
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17355
// if IsControledBy ( i ) then
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 312
17342: IFFALSE 17353
// ComUnlink ( i ) ;
17344: LD_VAR 0 2
17348: PPUSH
17349: CALL_OW 136
17353: GO 17330
17355: POP
17356: POP
// end ;
17357: PPOPN 2
17359: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17360: LD_EXP 26
17364: PUSH
17365: LD_EXP 57
17369: AND
17370: IFFALSE 17510
17372: GO 17374
17374: DISABLE
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
// begin ToLua ( displayPowell(); ) ;
17379: LD_STRING displayPowell();
17381: PPUSH
17382: CALL_OW 559
// uc_side := 0 ;
17386: LD_ADDR_OWVAR 20
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// uc_nation := 2 ;
17394: LD_ADDR_OWVAR 21
17398: PUSH
17399: LD_INT 2
17401: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17402: LD_ADDR_OWVAR 37
17406: PUSH
17407: LD_INT 14
17409: ST_TO_ADDR
// vc_engine := engine_siberite ;
17410: LD_ADDR_OWVAR 39
17414: PUSH
17415: LD_INT 3
17417: ST_TO_ADDR
// vc_control := control_apeman ;
17418: LD_ADDR_OWVAR 38
17422: PUSH
17423: LD_INT 5
17425: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17426: LD_ADDR_OWVAR 40
17430: PUSH
17431: LD_INT 29
17433: ST_TO_ADDR
// un := CreateVehicle ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: CALL_OW 45
17443: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17444: LD_VAR 0 2
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17456: LD_INT 35
17458: PPUSH
17459: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17463: LD_VAR 0 2
17467: PPUSH
17468: LD_INT 22
17470: PUSH
17471: LD_OWVAR 2
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: PPUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: CALL_OW 74
17494: PPUSH
17495: CALL_OW 115
// until IsDead ( un ) ;
17499: LD_VAR 0 2
17503: PPUSH
17504: CALL_OW 301
17508: IFFALSE 17456
// end ;
17510: PPOPN 2
17512: END
// every 0 0$1 trigger StreamModeActive and sStu do
17513: LD_EXP 26
17517: PUSH
17518: LD_EXP 65
17522: AND
17523: IFFALSE 17539
17525: GO 17527
17527: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17528: LD_STRING displayStucuk();
17530: PPUSH
17531: CALL_OW 559
// ResetFog ;
17535: CALL_OW 335
// end ;
17539: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17540: LD_EXP 26
17544: PUSH
17545: LD_EXP 58
17549: AND
17550: IFFALSE 17691
17552: GO 17554
17554: DISABLE
17555: LD_INT 0
17557: PPUSH
17558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_INT 22
17566: PUSH
17567: LD_OWVAR 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 21
17578: PUSH
17579: LD_INT 1
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
// if not tmp then
17595: LD_VAR 0 2
17599: NOT
17600: IFFALSE 17604
// exit ;
17602: GO 17691
// un := tmp [ rand ( 1 , tmp ) ] ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 2
17621: PPUSH
17622: CALL_OW 12
17626: ARRAY
17627: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_INT 0
17635: PPUSH
17636: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17640: LD_VAR 0 1
17644: PPUSH
17645: LD_OWVAR 3
17649: PUSH
17650: LD_VAR 0 1
17654: DIFF
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 74
17665: PPUSH
17666: CALL_OW 115
// wait ( 0 0$20 ) ;
17670: LD_INT 700
17672: PPUSH
17673: CALL_OW 67
// SetSide ( un , your_side ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_OWVAR 2
17686: PPUSH
17687: CALL_OW 235
// end ;
17691: PPOPN 2
17693: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17694: LD_EXP 26
17698: PUSH
17699: LD_EXP 59
17703: AND
17704: IFFALSE 17810
17706: GO 17708
17708: DISABLE
17709: LD_INT 0
17711: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 30
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 30
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: ST_TO_ADDR
// if not depot then
17766: LD_VAR 0 1
17770: NOT
17771: IFFALSE 17775
// exit ;
17773: GO 17810
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17775: LD_VAR 0 1
17779: PUSH
17780: LD_INT 1
17782: ARRAY
17783: PPUSH
17784: CALL_OW 250
17788: PPUSH
17789: LD_VAR 0 1
17793: PUSH
17794: LD_INT 1
17796: ARRAY
17797: PPUSH
17798: CALL_OW 251
17802: PPUSH
17803: LD_INT 70
17805: PPUSH
17806: CALL_OW 495
// end ;
17810: PPOPN 1
17812: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17813: LD_EXP 26
17817: PUSH
17818: LD_EXP 60
17822: AND
17823: IFFALSE 18034
17825: GO 17827
17827: DISABLE
17828: LD_INT 0
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17835: LD_ADDR_VAR 0 5
17839: PUSH
17840: LD_INT 22
17842: PUSH
17843: LD_OWVAR 2
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 21
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 69
17870: ST_TO_ADDR
// if not tmp then
17871: LD_VAR 0 5
17875: NOT
17876: IFFALSE 17880
// exit ;
17878: GO 18034
// for i in tmp do
17880: LD_ADDR_VAR 0 1
17884: PUSH
17885: LD_VAR 0 5
17889: PUSH
17890: FOR_IN
17891: IFFALSE 18032
// begin d := rand ( 0 , 5 ) ;
17893: LD_ADDR_VAR 0 4
17897: PUSH
17898: LD_INT 0
17900: PPUSH
17901: LD_INT 5
17903: PPUSH
17904: CALL_OW 12
17908: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17909: LD_ADDR_VAR 0 2
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 250
17923: PPUSH
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_INT 3
17931: PPUSH
17932: LD_INT 12
17934: PPUSH
17935: CALL_OW 12
17939: PPUSH
17940: CALL_OW 272
17944: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17945: LD_ADDR_VAR 0 3
17949: PUSH
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 251
17959: PPUSH
17960: LD_VAR 0 4
17964: PPUSH
17965: LD_INT 3
17967: PPUSH
17968: LD_INT 12
17970: PPUSH
17971: CALL_OW 12
17975: PPUSH
17976: CALL_OW 273
17980: ST_TO_ADDR
// if ValidHex ( x , y ) then
17981: LD_VAR 0 2
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: CALL_OW 488
17995: IFFALSE 18030
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17997: LD_VAR 0 1
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: LD_VAR 0 3
18011: PPUSH
18012: LD_INT 3
18014: PPUSH
18015: LD_INT 6
18017: PPUSH
18018: CALL_OW 12
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 483
// end ;
18030: GO 17890
18032: POP
18033: POP
// end ;
18034: PPOPN 5
18036: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18037: LD_EXP 26
18041: PUSH
18042: LD_EXP 61
18046: AND
18047: IFFALSE 18141
18049: GO 18051
18051: DISABLE
18052: LD_INT 0
18054: PPUSH
18055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18056: LD_ADDR_VAR 0 2
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_OWVAR 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 32
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 69
18102: ST_TO_ADDR
// if not tmp then
18103: LD_VAR 0 2
18107: NOT
18108: IFFALSE 18112
// exit ;
18110: GO 18141
// for i in tmp do
18112: LD_ADDR_VAR 0 1
18116: PUSH
18117: LD_VAR 0 2
18121: PUSH
18122: FOR_IN
18123: IFFALSE 18139
// SetFuel ( i , 0 ) ;
18125: LD_VAR 0 1
18129: PPUSH
18130: LD_INT 0
18132: PPUSH
18133: CALL_OW 240
18137: GO 18122
18139: POP
18140: POP
// end ;
18141: PPOPN 2
18143: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18144: LD_EXP 26
18148: PUSH
18149: LD_EXP 62
18153: AND
18154: IFFALSE 18220
18156: GO 18158
18158: DISABLE
18159: LD_INT 0
18161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18162: LD_ADDR_VAR 0 1
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_OWVAR 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 30
18181: PUSH
18182: LD_INT 29
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PPUSH
18193: CALL_OW 69
18197: ST_TO_ADDR
// if not tmp then
18198: LD_VAR 0 1
18202: NOT
18203: IFFALSE 18207
// exit ;
18205: GO 18220
// DestroyUnit ( tmp [ 1 ] ) ;
18207: LD_VAR 0 1
18211: PUSH
18212: LD_INT 1
18214: ARRAY
18215: PPUSH
18216: CALL_OW 65
// end ;
18220: PPOPN 1
18222: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18223: LD_EXP 26
18227: PUSH
18228: LD_EXP 64
18232: AND
18233: IFFALSE 18362
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
// begin uc_side := 0 ;
18241: LD_ADDR_OWVAR 20
18245: PUSH
18246: LD_INT 0
18248: ST_TO_ADDR
// uc_nation := nation_arabian ;
18249: LD_ADDR_OWVAR 21
18253: PUSH
18254: LD_INT 2
18256: ST_TO_ADDR
// hc_gallery :=  ;
18257: LD_ADDR_OWVAR 33
18261: PUSH
18262: LD_STRING 
18264: ST_TO_ADDR
// hc_name :=  ;
18265: LD_ADDR_OWVAR 26
18269: PUSH
18270: LD_STRING 
18272: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18273: LD_INT 1
18275: PPUSH
18276: LD_INT 11
18278: PPUSH
18279: LD_INT 10
18281: PPUSH
18282: CALL_OW 380
// un := CreateHuman ;
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: CALL_OW 44
18295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18296: LD_VAR 0 1
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18308: LD_INT 35
18310: PPUSH
18311: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18315: LD_VAR 0 1
18319: PPUSH
18320: LD_INT 22
18322: PUSH
18323: LD_OWVAR 2
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: PPUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 74
18346: PPUSH
18347: CALL_OW 115
// until IsDead ( un ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 301
18360: IFFALSE 18308
// end ;
18362: PPOPN 1
18364: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18365: LD_EXP 26
18369: PUSH
18370: LD_EXP 66
18374: AND
18375: IFFALSE 18387
18377: GO 18379
18379: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18380: LD_STRING earthquake(getX(game), 0, 32)
18382: PPUSH
18383: CALL_OW 559
18387: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18388: LD_EXP 26
18392: PUSH
18393: LD_EXP 67
18397: AND
18398: IFFALSE 18489
18400: GO 18402
18402: DISABLE
18403: LD_INT 0
18405: PPUSH
// begin enable ;
18406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18407: LD_ADDR_VAR 0 1
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_OWVAR 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 33
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL_OW 69
18453: ST_TO_ADDR
// if not tmp then
18454: LD_VAR 0 1
18458: NOT
18459: IFFALSE 18463
// exit ;
18461: GO 18489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18463: LD_VAR 0 1
18467: PUSH
18468: LD_INT 1
18470: PPUSH
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 12
18480: ARRAY
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 234
// end ;
18489: PPOPN 1
18491: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18492: LD_EXP 26
18496: PUSH
18497: LD_EXP 68
18501: AND
18502: IFFALSE 18643
18504: GO 18506
18506: DISABLE
18507: LD_INT 0
18509: PPUSH
18510: PPUSH
18511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18512: LD_ADDR_VAR 0 3
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_OWVAR 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 25
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: ST_TO_ADDR
// if not tmp then
18548: LD_VAR 0 3
18552: NOT
18553: IFFALSE 18557
// exit ;
18555: GO 18643
// un := tmp [ rand ( 1 , tmp ) ] ;
18557: LD_ADDR_VAR 0 2
18561: PUSH
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 1
18569: PPUSH
18570: LD_VAR 0 3
18574: PPUSH
18575: CALL_OW 12
18579: ARRAY
18580: ST_TO_ADDR
// if Crawls ( un ) then
18581: LD_VAR 0 2
18585: PPUSH
18586: CALL_OW 318
18590: IFFALSE 18601
// ComWalk ( un ) ;
18592: LD_VAR 0 2
18596: PPUSH
18597: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_INT 9
18608: PPUSH
18609: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18613: LD_INT 28
18615: PPUSH
18616: LD_OWVAR 2
18620: PPUSH
18621: LD_INT 2
18623: PPUSH
18624: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18628: LD_INT 29
18630: PPUSH
18631: LD_OWVAR 2
18635: PPUSH
18636: LD_INT 2
18638: PPUSH
18639: CALL_OW 322
// end ;
18643: PPOPN 3
18645: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18646: LD_EXP 26
18650: PUSH
18651: LD_EXP 69
18655: AND
18656: IFFALSE 18767
18658: GO 18660
18660: DISABLE
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
18665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18666: LD_ADDR_VAR 0 3
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_OWVAR 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 25
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 69
18701: ST_TO_ADDR
// if not tmp then
18702: LD_VAR 0 3
18706: NOT
18707: IFFALSE 18711
// exit ;
18709: GO 18767
// un := tmp [ rand ( 1 , tmp ) ] ;
18711: LD_ADDR_VAR 0 2
18715: PUSH
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 1
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: CALL_OW 12
18733: ARRAY
18734: ST_TO_ADDR
// if Crawls ( un ) then
18735: LD_VAR 0 2
18739: PPUSH
18740: CALL_OW 318
18744: IFFALSE 18755
// ComWalk ( un ) ;
18746: LD_VAR 0 2
18750: PPUSH
18751: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_INT 8
18762: PPUSH
18763: CALL_OW 336
// end ;
18767: PPOPN 3
18769: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18770: LD_EXP 26
18774: PUSH
18775: LD_EXP 70
18779: AND
18780: IFFALSE 18924
18782: GO 18784
18784: DISABLE
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_OWVAR 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: LD_INT 34
18821: PUSH
18822: LD_INT 12
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 34
18831: PUSH
18832: LD_INT 51
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 34
18841: PUSH
18842: LD_INT 32
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: ST_TO_ADDR
// if not tmp then
18865: LD_VAR 0 2
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18924
// for i in tmp do
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: FOR_IN
18885: IFFALSE 18922
// if GetCargo ( i , mat_artifact ) = 0 then
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 4
18894: PPUSH
18895: CALL_OW 289
18899: PUSH
18900: LD_INT 0
18902: EQUAL
18903: IFFALSE 18920
// SetCargo ( i , mat_siberit , 100 ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 3
18912: PPUSH
18913: LD_INT 100
18915: PPUSH
18916: CALL_OW 290
18920: GO 18884
18922: POP
18923: POP
// end ;
18924: PPOPN 2
18926: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18927: LD_EXP 26
18931: PUSH
18932: LD_EXP 71
18936: AND
18937: IFFALSE 19120
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_INT 22
18953: PUSH
18954: LD_OWVAR 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PPUSH
18963: CALL_OW 69
18967: ST_TO_ADDR
// if not tmp then
18968: LD_VAR 0 2
18972: NOT
18973: IFFALSE 18977
// exit ;
18975: GO 19120
// for i := 1 to 2 do
18977: LD_ADDR_VAR 0 1
18981: PUSH
18982: DOUBLE
18983: LD_INT 1
18985: DEC
18986: ST_TO_ADDR
18987: LD_INT 2
18989: PUSH
18990: FOR_TO
18991: IFFALSE 19118
// begin uc_side := your_side ;
18993: LD_ADDR_OWVAR 20
18997: PUSH
18998: LD_OWVAR 2
19002: ST_TO_ADDR
// uc_nation := nation_american ;
19003: LD_ADDR_OWVAR 21
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// vc_chassis := us_morphling ;
19011: LD_ADDR_OWVAR 37
19015: PUSH
19016: LD_INT 5
19018: ST_TO_ADDR
// vc_engine := engine_siberite ;
19019: LD_ADDR_OWVAR 39
19023: PUSH
19024: LD_INT 3
19026: ST_TO_ADDR
// vc_control := control_computer ;
19027: LD_ADDR_OWVAR 38
19031: PUSH
19032: LD_INT 3
19034: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19035: LD_ADDR_OWVAR 40
19039: PUSH
19040: LD_INT 10
19042: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19043: LD_VAR 0 2
19047: PUSH
19048: LD_INT 1
19050: ARRAY
19051: PPUSH
19052: CALL_OW 310
19056: NOT
19057: IFFALSE 19104
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19059: CALL_OW 45
19063: PPUSH
19064: LD_VAR 0 2
19068: PUSH
19069: LD_INT 1
19071: ARRAY
19072: PPUSH
19073: CALL_OW 250
19077: PPUSH
19078: LD_VAR 0 2
19082: PUSH
19083: LD_INT 1
19085: ARRAY
19086: PPUSH
19087: CALL_OW 251
19091: PPUSH
19092: LD_INT 12
19094: PPUSH
19095: LD_INT 1
19097: PPUSH
19098: CALL_OW 50
19102: GO 19116
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19104: CALL_OW 45
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 51
// end ;
19116: GO 18990
19118: POP
19119: POP
// end ;
19120: PPOPN 2
19122: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19123: LD_EXP 26
19127: PUSH
19128: LD_EXP 72
19132: AND
19133: IFFALSE 19355
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
19141: PPUSH
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19146: LD_ADDR_VAR 0 6
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_OWVAR 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 21
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 3
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 6
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19355
// s1 := rand ( 1 , 4 ) ;
19209: LD_ADDR_VAR 0 2
19213: PUSH
19214: LD_INT 1
19216: PPUSH
19217: LD_INT 4
19219: PPUSH
19220: CALL_OW 12
19224: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19225: LD_ADDR_VAR 0 4
19229: PUSH
19230: LD_VAR 0 6
19234: PUSH
19235: LD_INT 1
19237: ARRAY
19238: PPUSH
19239: LD_VAR 0 2
19243: PPUSH
19244: CALL_OW 259
19248: ST_TO_ADDR
// if s1 = 1 then
19249: LD_VAR 0 2
19253: PUSH
19254: LD_INT 1
19256: EQUAL
19257: IFFALSE 19277
// s2 := rand ( 2 , 4 ) else
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: LD_INT 2
19266: PPUSH
19267: LD_INT 4
19269: PPUSH
19270: CALL_OW 12
19274: ST_TO_ADDR
19275: GO 19285
// s2 := 1 ;
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: LD_INT 1
19284: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19285: LD_ADDR_VAR 0 5
19289: PUSH
19290: LD_VAR 0 6
19294: PUSH
19295: LD_INT 1
19297: ARRAY
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 259
19308: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19309: LD_VAR 0 6
19313: PUSH
19314: LD_INT 1
19316: ARRAY
19317: PPUSH
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 5
19327: PPUSH
19328: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19332: LD_VAR 0 6
19336: PUSH
19337: LD_INT 1
19339: ARRAY
19340: PPUSH
19341: LD_VAR 0 3
19345: PPUSH
19346: LD_VAR 0 4
19350: PPUSH
19351: CALL_OW 237
// end ;
19355: PPOPN 6
19357: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19358: LD_EXP 26
19362: PUSH
19363: LD_EXP 73
19367: AND
19368: IFFALSE 19447
19370: GO 19372
19372: DISABLE
19373: LD_INT 0
19375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19376: LD_ADDR_VAR 0 1
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_OWVAR 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 30
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 1
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19421: LD_VAR 0 1
19425: PUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_VAR 0 1
19433: PPUSH
19434: CALL_OW 12
19438: ARRAY
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 234
// end ;
19447: PPOPN 1
19449: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19450: LD_EXP 26
19454: PUSH
19455: LD_EXP 74
19459: AND
19460: IFFALSE 19572
19462: GO 19464
19464: DISABLE
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19469: LD_ADDR_VAR 0 2
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_OWVAR 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 30
19491: PUSH
19492: LD_INT 27
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 30
19501: PUSH
19502: LD_INT 26
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 30
19511: PUSH
19512: LD_INT 28
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if not tmp then
19534: LD_VAR 0 2
19538: NOT
19539: IFFALSE 19543
// exit ;
19541: GO 19572
// for i in tmp do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19570
// SetLives ( i , 1 ) ;
19556: LD_VAR 0 1
19560: PPUSH
19561: LD_INT 1
19563: PPUSH
19564: CALL_OW 234
19568: GO 19553
19570: POP
19571: POP
// end ;
19572: PPOPN 2
19574: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19575: LD_EXP 26
19579: PUSH
19580: LD_EXP 75
19584: AND
19585: IFFALSE 19859
19587: GO 19589
19589: DISABLE
19590: LD_INT 0
19592: PPUSH
19593: PPUSH
19594: PPUSH
// begin i := rand ( 1 , 7 ) ;
19595: LD_ADDR_VAR 0 1
19599: PUSH
19600: LD_INT 1
19602: PPUSH
19603: LD_INT 7
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
// case i of 1 :
19611: LD_VAR 0 1
19615: PUSH
19616: LD_INT 1
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19634
19624: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19625: LD_STRING earthquake(getX(game), 0, 32)
19627: PPUSH
19628: CALL_OW 559
19632: GO 19859
19634: LD_INT 2
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19656
19642: POP
// begin ToLua ( displayStucuk(); ) ;
19643: LD_STRING displayStucuk();
19645: PPUSH
19646: CALL_OW 559
// ResetFog ;
19650: CALL_OW 335
// end ; 3 :
19654: GO 19859
19656: LD_INT 3
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19768
19664: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19665: LD_ADDR_VAR 0 2
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_OWVAR 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 25
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PPUSH
19696: CALL_OW 69
19700: ST_TO_ADDR
// if not tmp then
19701: LD_VAR 0 2
19705: NOT
19706: IFFALSE 19710
// exit ;
19708: GO 19859
// un := tmp [ rand ( 1 , tmp ) ] ;
19710: LD_ADDR_VAR 0 3
19714: PUSH
19715: LD_VAR 0 2
19719: PUSH
19720: LD_INT 1
19722: PPUSH
19723: LD_VAR 0 2
19727: PPUSH
19728: CALL_OW 12
19732: ARRAY
19733: ST_TO_ADDR
// if Crawls ( un ) then
19734: LD_VAR 0 3
19738: PPUSH
19739: CALL_OW 318
19743: IFFALSE 19754
// ComWalk ( un ) ;
19745: LD_VAR 0 3
19749: PPUSH
19750: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19754: LD_VAR 0 3
19758: PPUSH
19759: LD_INT 8
19761: PPUSH
19762: CALL_OW 336
// end ; 4 :
19766: GO 19859
19768: LD_INT 4
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19837
19776: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 30
19796: PUSH
19797: LD_INT 29
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// if not tmp then
19813: LD_VAR 0 2
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 19859
// DestroyUnit ( tmp [ 1 ] ) ;
19822: LD_VAR 0 2
19826: PUSH
19827: LD_INT 1
19829: ARRAY
19830: PPUSH
19831: CALL_OW 65
// end ; 5 .. 7 :
19835: GO 19859
19837: LD_INT 5
19839: DOUBLE
19840: GREATEREQUAL
19841: IFFALSE 19849
19843: LD_INT 7
19845: DOUBLE
19846: LESSEQUAL
19847: IFTRUE 19851
19849: GO 19858
19851: POP
// StreamSibBomb ; end ;
19852: CALL 16109 0 0
19856: GO 19859
19858: POP
// end ;
19859: PPOPN 3
19861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19862: LD_EXP 26
19866: PUSH
19867: LD_EXP 76
19871: AND
19872: IFFALSE 20028
19874: GO 19876
19876: DISABLE
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
19881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: LD_INT 81
19889: PUSH
19890: LD_OWVAR 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: ST_TO_ADDR
// if not tmp then
19936: LD_VAR 0 2
19940: NOT
19941: IFFALSE 19945
// exit ;
19943: GO 20028
// p := 0 ;
19945: LD_ADDR_VAR 0 3
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19953: LD_INT 35
19955: PPUSH
19956: CALL_OW 67
// p := p + 1 ;
19960: LD_ADDR_VAR 0 3
19964: PUSH
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 1
19972: PLUS
19973: ST_TO_ADDR
// for i in tmp do
19974: LD_ADDR_VAR 0 1
19978: PUSH
19979: LD_VAR 0 2
19983: PUSH
19984: FOR_IN
19985: IFFALSE 20016
// if GetLives ( i ) < 1000 then
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 256
19996: PUSH
19997: LD_INT 1000
19999: LESS
20000: IFFALSE 20014
// SetLives ( i , 1000 ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 1000
20009: PPUSH
20010: CALL_OW 234
20014: GO 19984
20016: POP
20017: POP
// until p > 20 ;
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 20
20025: GREATER
20026: IFFALSE 19953
// end ;
20028: PPOPN 3
20030: END
// every 0 0$1 trigger StreamModeActive and sTime do
20031: LD_EXP 26
20035: PUSH
20036: LD_EXP 77
20040: AND
20041: IFFALSE 20076
20043: GO 20045
20045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20046: LD_INT 28
20048: PPUSH
20049: LD_OWVAR 2
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20061: LD_INT 30
20063: PPUSH
20064: LD_OWVAR 2
20068: PPUSH
20069: LD_INT 2
20071: PPUSH
20072: CALL_OW 322
// end ;
20076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20077: LD_EXP 26
20081: PUSH
20082: LD_EXP 78
20086: AND
20087: IFFALSE 20208
20089: GO 20091
20091: DISABLE
20092: LD_INT 0
20094: PPUSH
20095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_OWVAR 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 21
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 23
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: PPUSH
20145: CALL_OW 69
20149: ST_TO_ADDR
// if not tmp then
20150: LD_VAR 0 2
20154: NOT
20155: IFFALSE 20159
// exit ;
20157: GO 20208
// for i in tmp do
20159: LD_ADDR_VAR 0 1
20163: PUSH
20164: LD_VAR 0 2
20168: PUSH
20169: FOR_IN
20170: IFFALSE 20206
// begin if Crawls ( i ) then
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 318
20181: IFFALSE 20192
// ComWalk ( i ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 138
// SetClass ( i , 2 ) ;
20192: LD_VAR 0 1
20196: PPUSH
20197: LD_INT 2
20199: PPUSH
20200: CALL_OW 336
// end ;
20204: GO 20169
20206: POP
20207: POP
// end ;
20208: PPOPN 2
20210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20211: LD_EXP 26
20215: PUSH
20216: LD_EXP 79
20220: AND
20221: IFFALSE 20502
20223: GO 20225
20225: DISABLE
20226: LD_INT 0
20228: PPUSH
20229: PPUSH
20230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20231: LD_OWVAR 2
20235: PPUSH
20236: LD_INT 9
20238: PPUSH
20239: LD_INT 1
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20249: LD_INT 9
20251: PPUSH
20252: LD_OWVAR 2
20256: PPUSH
20257: CALL_OW 343
// uc_side := 9 ;
20261: LD_ADDR_OWVAR 20
20265: PUSH
20266: LD_INT 9
20268: ST_TO_ADDR
// uc_nation := 2 ;
20269: LD_ADDR_OWVAR 21
20273: PUSH
20274: LD_INT 2
20276: ST_TO_ADDR
// hc_name := Dark Warrior ;
20277: LD_ADDR_OWVAR 26
20281: PUSH
20282: LD_STRING Dark Warrior
20284: ST_TO_ADDR
// hc_gallery :=  ;
20285: LD_ADDR_OWVAR 33
20289: PUSH
20290: LD_STRING 
20292: ST_TO_ADDR
// hc_noskilllimit := true ;
20293: LD_ADDR_OWVAR 76
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20301: LD_ADDR_OWVAR 31
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 30
20314: PUSH
20315: LD_INT 30
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: ST_TO_ADDR
// un := CreateHuman ;
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: CALL_OW 44
20333: ST_TO_ADDR
// hc_noskilllimit := false ;
20334: LD_ADDR_OWVAR 76
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20342: LD_VAR 0 3
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: CALL_OW 51
// p := 0 ;
20354: LD_ADDR_VAR 0 2
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20362: LD_INT 35
20364: PPUSH
20365: CALL_OW 67
// p := p + 1 ;
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: LD_VAR 0 2
20378: PUSH
20379: LD_INT 1
20381: PLUS
20382: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20383: LD_VAR 0 3
20387: PPUSH
20388: CALL_OW 256
20392: PUSH
20393: LD_INT 1000
20395: LESS
20396: IFFALSE 20410
// SetLives ( un , 1000 ) ;
20398: LD_VAR 0 3
20402: PPUSH
20403: LD_INT 1000
20405: PPUSH
20406: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20410: LD_VAR 0 3
20414: PPUSH
20415: LD_INT 81
20417: PUSH
20418: LD_OWVAR 2
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 91
20429: PUSH
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PPUSH
20447: CALL_OW 69
20451: PPUSH
20452: LD_VAR 0 3
20456: PPUSH
20457: CALL_OW 74
20461: PPUSH
20462: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20466: LD_VAR 0 2
20470: PUSH
20471: LD_INT 60
20473: GREATER
20474: PUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 301
20484: OR
20485: IFFALSE 20362
// if un then
20487: LD_VAR 0 3
20491: IFFALSE 20502
// RemoveUnit ( un ) ;
20493: LD_VAR 0 3
20497: PPUSH
20498: CALL_OW 64
// end ; end_of_file end_of_file
20502: PPOPN 3
20504: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20505: LD_INT 0
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20511: LD_VAR 0 1
20515: PPUSH
20516: CALL_OW 264
20520: PUSH
20521: LD_EXP 84
20525: EQUAL
20526: IFFALSE 20598
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20528: LD_INT 68
20530: PPUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 255
20540: PPUSH
20541: CALL_OW 321
20545: PUSH
20546: LD_INT 2
20548: EQUAL
20549: IFFALSE 20561
// eff := 70 else
20551: LD_ADDR_VAR 0 4
20555: PUSH
20556: LD_INT 70
20558: ST_TO_ADDR
20559: GO 20569
// eff := 30 ;
20561: LD_ADDR_VAR 0 4
20565: PUSH
20566: LD_INT 30
20568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 250
20578: PPUSH
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 251
20588: PPUSH
20589: LD_VAR 0 4
20593: PPUSH
20594: CALL_OW 495
// end ; end ;
20598: LD_VAR 0 2
20602: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20603: LD_INT 0
20605: PPUSH
// end ;
20606: LD_VAR 0 4
20610: RET
// export function SOS_Command ( cmd ) ; begin
20611: LD_INT 0
20613: PPUSH
// end ;
20614: LD_VAR 0 2
20618: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20619: LD_VAR 0 1
20623: PUSH
20624: LD_INT 255
20626: EQUAL
20627: PUSH
20628: LD_VAR 0 2
20632: PPUSH
20633: CALL_OW 264
20637: PUSH
20638: LD_INT 14
20640: PUSH
20641: LD_INT 53
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: IN
20648: AND
20649: PUSH
20650: LD_VAR 0 4
20654: PPUSH
20655: LD_VAR 0 5
20659: PPUSH
20660: CALL_OW 488
20664: AND
20665: IFFALSE 20689
// CutTreeXYR ( unit , x , y , 12 ) ;
20667: LD_VAR 0 2
20671: PPUSH
20672: LD_VAR 0 4
20676: PPUSH
20677: LD_VAR 0 5
20681: PPUSH
20682: LD_INT 12
20684: PPUSH
20685: CALL 20692 0 4
// end ;
20689: PPOPN 5
20691: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20692: LD_INT 0
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20703: LD_VAR 0 1
20707: NOT
20708: PUSH
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: CALL_OW 488
20723: NOT
20724: OR
20725: PUSH
20726: LD_VAR 0 4
20730: NOT
20731: OR
20732: IFFALSE 20736
// exit ;
20734: GO 21076
// list := [ ] ;
20736: LD_ADDR_VAR 0 13
20740: PUSH
20741: EMPTY
20742: ST_TO_ADDR
// if x - r < 0 then
20743: LD_VAR 0 2
20747: PUSH
20748: LD_VAR 0 4
20752: MINUS
20753: PUSH
20754: LD_INT 0
20756: LESS
20757: IFFALSE 20769
// min_x := 0 else
20759: LD_ADDR_VAR 0 7
20763: PUSH
20764: LD_INT 0
20766: ST_TO_ADDR
20767: GO 20785
// min_x := x - r ;
20769: LD_ADDR_VAR 0 7
20773: PUSH
20774: LD_VAR 0 2
20778: PUSH
20779: LD_VAR 0 4
20783: MINUS
20784: ST_TO_ADDR
// if y - r < 0 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_VAR 0 4
20794: MINUS
20795: PUSH
20796: LD_INT 0
20798: LESS
20799: IFFALSE 20811
// min_y := 0 else
20801: LD_ADDR_VAR 0 8
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
20809: GO 20827
// min_y := y - r ;
20811: LD_ADDR_VAR 0 8
20815: PUSH
20816: LD_VAR 0 3
20820: PUSH
20821: LD_VAR 0 4
20825: MINUS
20826: ST_TO_ADDR
// max_x := x + r ;
20827: LD_ADDR_VAR 0 9
20831: PUSH
20832: LD_VAR 0 2
20836: PUSH
20837: LD_VAR 0 4
20841: PLUS
20842: ST_TO_ADDR
// max_y := y + r ;
20843: LD_ADDR_VAR 0 10
20847: PUSH
20848: LD_VAR 0 3
20852: PUSH
20853: LD_VAR 0 4
20857: PLUS
20858: ST_TO_ADDR
// for _x = min_x to max_x do
20859: LD_ADDR_VAR 0 11
20863: PUSH
20864: DOUBLE
20865: LD_VAR 0 7
20869: DEC
20870: ST_TO_ADDR
20871: LD_VAR 0 9
20875: PUSH
20876: FOR_TO
20877: IFFALSE 20994
// for _y = min_y to max_y do
20879: LD_ADDR_VAR 0 12
20883: PUSH
20884: DOUBLE
20885: LD_VAR 0 8
20889: DEC
20890: ST_TO_ADDR
20891: LD_VAR 0 10
20895: PUSH
20896: FOR_TO
20897: IFFALSE 20990
// begin if not ValidHex ( _x , _y ) then
20899: LD_VAR 0 11
20903: PPUSH
20904: LD_VAR 0 12
20908: PPUSH
20909: CALL_OW 488
20913: NOT
20914: IFFALSE 20918
// continue ;
20916: GO 20896
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20918: LD_VAR 0 11
20922: PPUSH
20923: LD_VAR 0 12
20927: PPUSH
20928: CALL_OW 351
20932: PUSH
20933: LD_VAR 0 11
20937: PPUSH
20938: LD_VAR 0 12
20942: PPUSH
20943: CALL_OW 554
20947: AND
20948: IFFALSE 20988
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20950: LD_ADDR_VAR 0 13
20954: PUSH
20955: LD_VAR 0 13
20959: PPUSH
20960: LD_VAR 0 13
20964: PUSH
20965: LD_INT 1
20967: PLUS
20968: PPUSH
20969: LD_VAR 0 11
20973: PUSH
20974: LD_VAR 0 12
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 2
20987: ST_TO_ADDR
// end ;
20988: GO 20896
20990: POP
20991: POP
20992: GO 20876
20994: POP
20995: POP
// if not list then
20996: LD_VAR 0 13
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21076
// for i in list do
21005: LD_ADDR_VAR 0 6
21009: PUSH
21010: LD_VAR 0 13
21014: PUSH
21015: FOR_IN
21016: IFFALSE 21074
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21018: LD_VAR 0 1
21022: PPUSH
21023: LD_STRING M
21025: PUSH
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: PUSH
21035: LD_VAR 0 6
21039: PUSH
21040: LD_INT 2
21042: ARRAY
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: PPUSH
21068: CALL_OW 447
21072: GO 21015
21074: POP
21075: POP
// end ; end_of_file
21076: LD_VAR 0 5
21080: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21081: GO 21083
21083: DISABLE
// begin ru_radar := 98 ;
21084: LD_ADDR_EXP 80
21088: PUSH
21089: LD_INT 98
21091: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21092: LD_ADDR_EXP 81
21096: PUSH
21097: LD_INT 89
21099: ST_TO_ADDR
// us_hack := 99 ;
21100: LD_ADDR_EXP 82
21104: PUSH
21105: LD_INT 99
21107: ST_TO_ADDR
// us_artillery := 97 ;
21108: LD_ADDR_EXP 83
21112: PUSH
21113: LD_INT 97
21115: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21116: LD_ADDR_EXP 84
21120: PUSH
21121: LD_INT 91
21123: ST_TO_ADDR
// tech_Artillery := 80 ;
21124: LD_ADDR_EXP 85
21128: PUSH
21129: LD_INT 80
21131: ST_TO_ADDR
// tech_RadMat := 81 ;
21132: LD_ADDR_EXP 86
21136: PUSH
21137: LD_INT 81
21139: ST_TO_ADDR
// tech_BasicTools := 82 ;
21140: LD_ADDR_EXP 87
21144: PUSH
21145: LD_INT 82
21147: ST_TO_ADDR
// tech_Cargo := 83 ;
21148: LD_ADDR_EXP 88
21152: PUSH
21153: LD_INT 83
21155: ST_TO_ADDR
// tech_Track := 84 ;
21156: LD_ADDR_EXP 89
21160: PUSH
21161: LD_INT 84
21163: ST_TO_ADDR
// tech_Crane := 85 ;
21164: LD_ADDR_EXP 90
21168: PUSH
21169: LD_INT 85
21171: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21172: LD_ADDR_EXP 91
21176: PUSH
21177: LD_INT 86
21179: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21180: LD_ADDR_EXP 92
21184: PUSH
21185: LD_INT 87
21187: ST_TO_ADDR
// end ;
21188: END
