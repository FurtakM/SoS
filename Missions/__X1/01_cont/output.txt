// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 2 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 0
  22: PPUSH
  23: LD_INT 0
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 2
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 6
  40: PPUSH
  41: CALL 210 0 10
// InitVariables ;
  45: CALL 66 0 0
// PrepareRussian ;
  49: CALL 1454 0 0
// PrepareArabian ;
  53: CALL 1024 0 0
// PrepareHeike ;
  57: CALL 959 0 0
// Action ;
  61: CALL 2991 0 0
// end ;
  65: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// missionStarted := false ;
  77: LD_ADDR_EXP 1
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// meetJohnny := false ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// johnnySaved := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// dogTag := [ ] ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: EMPTY
 107: ST_TO_ADDR
// dogTagFound := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// mercenariesSpotted := false ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// olafSpotted := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// russianSpotted := false ;
 132: LD_ADDR_EXP 9
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// mercenariesQuestReady := false ;
 140: LD_ADDR_EXP 10
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// mercenariesQuestDone := false ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// lastObjectiveActive := false ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// prisonFound := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// heikeHurt := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// animalCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// end ;
 188: LD_VAR 0 1
 192: RET
// every 0 0$1 trigger debug do
 193: LD_EXP 2
 197: IFFALSE 209
 199: GO 201
 201: DISABLE
// FogOff ( 2 ) ; end_of_file
 202: LD_INT 2
 204: PPUSH
 205: CALL_OW 344
 209: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
 214: PPUSH
// uc_side = 0 ;
 215: LD_ADDR_OWVAR 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// uc_nation = 0 ;
 223: LD_ADDR_OWVAR 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// InitHc ;
 231: CALL_OW 19
// InitVc ;
 235: CALL_OW 20
// if mastodonts then
 239: LD_VAR 0 6
 243: IFFALSE 310
// for i = 1 to mastodonts do
 245: LD_ADDR_VAR 0 12
 249: PUSH
 250: DOUBLE
 251: LD_INT 1
 253: DEC
 254: ST_TO_ADDR
 255: LD_VAR 0 6
 259: PUSH
 260: FOR_TO
 261: IFFALSE 308
// begin vc_chassis := 31 ;
 263: LD_ADDR_OWVAR 37
 267: PUSH
 268: LD_INT 31
 270: ST_TO_ADDR
// vc_control := control_rider ;
 271: LD_ADDR_OWVAR 38
 275: PUSH
 276: LD_INT 4
 278: ST_TO_ADDR
// animal := CreateVehicle ;
 279: LD_ADDR_VAR 0 13
 283: PUSH
 284: CALL_OW 45
 288: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 289: LD_VAR 0 13
 293: PPUSH
 294: LD_VAR 0 9
 298: PPUSH
 299: LD_INT 0
 301: PPUSH
 302: CALL_OW 49
// end ;
 306: GO 260
 308: POP
 309: POP
// if horses then
 310: LD_VAR 0 5
 314: IFFALSE 381
// for i = 1 to horses do
 316: LD_ADDR_VAR 0 12
 320: PUSH
 321: DOUBLE
 322: LD_INT 1
 324: DEC
 325: ST_TO_ADDR
 326: LD_VAR 0 5
 330: PUSH
 331: FOR_TO
 332: IFFALSE 379
// begin hc_class := 21 ;
 334: LD_ADDR_OWVAR 28
 338: PUSH
 339: LD_INT 21
 341: ST_TO_ADDR
// hc_gallery :=  ;
 342: LD_ADDR_OWVAR 33
 346: PUSH
 347: LD_STRING 
 349: ST_TO_ADDR
// animal := CreateHuman ;
 350: LD_ADDR_VAR 0 13
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 360: LD_VAR 0 13
 364: PPUSH
 365: LD_VAR 0 9
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// end ;
 377: GO 331
 379: POP
 380: POP
// if birds then
 381: LD_VAR 0 1
 385: IFFALSE 452
// for i = 1 to birds do
 387: LD_ADDR_VAR 0 12
 391: PUSH
 392: DOUBLE
 393: LD_INT 1
 395: DEC
 396: ST_TO_ADDR
 397: LD_VAR 0 1
 401: PUSH
 402: FOR_TO
 403: IFFALSE 450
// begin hc_class = 18 ;
 405: LD_ADDR_OWVAR 28
 409: PUSH
 410: LD_INT 18
 412: ST_TO_ADDR
// hc_gallery =  ;
 413: LD_ADDR_OWVAR 33
 417: PUSH
 418: LD_STRING 
 420: ST_TO_ADDR
// animal := CreateHuman ;
 421: LD_ADDR_VAR 0 13
 425: PUSH
 426: CALL_OW 44
 430: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 431: LD_VAR 0 13
 435: PPUSH
 436: LD_VAR 0 9
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 402
 450: POP
 451: POP
// if tigers then
 452: LD_VAR 0 2
 456: IFFALSE 540
// for i = 1 to tigers do
 458: LD_ADDR_VAR 0 12
 462: PUSH
 463: DOUBLE
 464: LD_INT 1
 466: DEC
 467: ST_TO_ADDR
 468: LD_VAR 0 2
 472: PUSH
 473: FOR_TO
 474: IFFALSE 538
// begin hc_class = class_tiger ;
 476: LD_ADDR_OWVAR 28
 480: PUSH
 481: LD_INT 14
 483: ST_TO_ADDR
// hc_gallery =  ;
 484: LD_ADDR_OWVAR 33
 488: PUSH
 489: LD_STRING 
 491: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 492: LD_ADDR_OWVAR 35
 496: PUSH
 497: LD_INT 7
 499: NEG
 500: PPUSH
 501: LD_INT 7
 503: PPUSH
 504: CALL_OW 12
 508: ST_TO_ADDR
// animal := CreateHuman ;
 509: LD_ADDR_VAR 0 13
 513: PUSH
 514: CALL_OW 44
 518: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 519: LD_VAR 0 13
 523: PPUSH
 524: LD_VAR 0 9
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// end ;
 536: GO 473
 538: POP
 539: POP
// if apemans then
 540: LD_VAR 0 3
 544: IFFALSE 667
// for i = 1 to apemans do
 546: LD_ADDR_VAR 0 12
 550: PUSH
 551: DOUBLE
 552: LD_INT 1
 554: DEC
 555: ST_TO_ADDR
 556: LD_VAR 0 3
 560: PUSH
 561: FOR_TO
 562: IFFALSE 665
// begin hc_class = class_apeman ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 12
 571: ST_TO_ADDR
// hc_gallery =  ;
 572: LD_ADDR_OWVAR 33
 576: PUSH
 577: LD_STRING 
 579: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 580: LD_ADDR_OWVAR 35
 584: PUSH
 585: LD_INT 5
 587: NEG
 588: PPUSH
 589: LD_INT 5
 591: PPUSH
 592: CALL_OW 12
 596: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 597: LD_ADDR_OWVAR 31
 601: PUSH
 602: LD_INT 1
 604: PPUSH
 605: LD_INT 3
 607: PPUSH
 608: CALL_OW 12
 612: PUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 12
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// animal := CreateHuman ;
 636: LD_ADDR_VAR 0 13
 640: PUSH
 641: CALL_OW 44
 645: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 646: LD_VAR 0 13
 650: PPUSH
 651: LD_VAR 0 9
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 49
// end ;
 663: GO 561
 665: POP
 666: POP
// if enchidnas then
 667: LD_VAR 0 4
 671: IFFALSE 738
// for i = 1 to enchidnas do
 673: LD_ADDR_VAR 0 12
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 4
 687: PUSH
 688: FOR_TO
 689: IFFALSE 736
// begin hc_class = 13 ;
 691: LD_ADDR_OWVAR 28
 695: PUSH
 696: LD_INT 13
 698: ST_TO_ADDR
// hc_gallery =  ;
 699: LD_ADDR_OWVAR 33
 703: PUSH
 704: LD_STRING 
 706: ST_TO_ADDR
// animal := CreateHuman ;
 707: LD_ADDR_VAR 0 13
 711: PUSH
 712: CALL_OW 44
 716: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 717: LD_VAR 0 13
 721: PPUSH
 722: LD_VAR 0 9
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// end ;
 734: GO 688
 736: POP
 737: POP
// if fishes then
 738: LD_VAR 0 7
 742: IFFALSE 809
// for i = 1 to fishes do
 744: LD_ADDR_VAR 0 12
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 7
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin hc_class = class_fish ;
 762: LD_ADDR_OWVAR 28
 766: PUSH
 767: LD_INT 20
 769: ST_TO_ADDR
// hc_gallery =  ;
 770: LD_ADDR_OWVAR 33
 774: PUSH
 775: LD_STRING 
 777: ST_TO_ADDR
// animal := CreateHuman ;
 778: LD_ADDR_VAR 0 13
 782: PUSH
 783: CALL_OW 44
 787: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 788: LD_VAR 0 13
 792: PPUSH
 793: LD_VAR 0 10
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 759
 807: POP
 808: POP
// if frogs then
 809: LD_VAR 0 8
 813: IFFALSE 880
// for i := 1 to frogs do
 815: LD_ADDR_VAR 0 12
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 8
 829: PUSH
 830: FOR_TO
 831: IFFALSE 878
// begin hc_class := class_frog ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 19
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// animal := CreateHuman ;
 849: LD_ADDR_VAR 0 13
 853: PUSH
 854: CALL_OW 44
 858: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 859: LD_VAR 0 13
 863: PPUSH
 864: LD_VAR 0 10
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ;
 876: GO 830
 878: POP
 879: POP
// end ;
 880: LD_VAR 0 11
 884: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// if not observer or not unit then
 890: LD_VAR 0 1
 894: NOT
 895: PUSH
 896: LD_VAR 0 2
 900: NOT
 901: OR
 902: IFFALSE 906
// exit ;
 904: GO 954
// if not See ( GetSide ( observer ) , unit ) then
 906: LD_VAR 0 1
 910: PPUSH
 911: CALL_OW 255
 915: PPUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: CALL_OW 292
 925: NOT
 926: IFFALSE 930
// exit ;
 928: GO 954
// result := GetDistUnits ( observer , unit ) < 12 ;
 930: LD_ADDR_VAR 0 3
 934: PUSH
 935: LD_VAR 0 1
 939: PPUSH
 940: LD_VAR 0 2
 944: PPUSH
 945: CALL_OW 296
 949: PUSH
 950: LD_INT 12
 952: LESS
 953: ST_TO_ADDR
// end ; end_of_file
 954: LD_VAR 0 3
 958: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 959: LD_INT 0
 961: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 962: LD_INT 66
 964: PPUSH
 965: LD_INT 26
 967: PPUSH
 968: CALL_OW 86
// uc_side := 2 ;
 972: LD_ADDR_OWVAR 20
 976: PUSH
 977: LD_INT 2
 979: ST_TO_ADDR
// uc_nation := 2 ;
 980: LD_ADDR_OWVAR 21
 984: PUSH
 985: LD_INT 2
 987: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 988: LD_ADDR_EXP 16
 992: PUSH
 993: LD_STRING Heike
 995: PPUSH
 996: CALL_OW 25
1000: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
1001: LD_EXP 16
1005: PPUSH
1006: LD_INT 66
1008: PPUSH
1009: LD_INT 26
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 48
// end ;
1019: LD_VAR 0 1
1023: RET
// export function PrepareArabian ; begin
1024: LD_INT 0
1026: PPUSH
// uc_side := 5 ;
1027: LD_ADDR_OWVAR 20
1031: PUSH
1032: LD_INT 5
1034: ST_TO_ADDR
// uc_nation := 2 ;
1035: LD_ADDR_OWVAR 21
1039: PUSH
1040: LD_INT 2
1042: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_STRING Olaf
1050: PPUSH
1051: CALL_OW 25
1055: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1056: LD_EXP 17
1060: PPUSH
1061: LD_INT 39
1063: PPUSH
1064: LD_INT 52
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_STRING Givi
1081: PPUSH
1082: CALL_OW 25
1086: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1087: LD_EXP 18
1091: PPUSH
1092: LD_INT 55
1094: PPUSH
1095: LD_INT 90
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1105: LD_EXP 18
1109: PPUSH
1110: LD_INT 53
1112: PPUSH
1113: LD_INT 89
1115: PPUSH
1116: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1120: LD_ADDR_EXP 19
1124: PUSH
1125: LD_STRING Mike
1127: PPUSH
1128: CALL_OW 25
1132: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1133: LD_EXP 19
1137: PPUSH
1138: LD_INT 53
1140: PPUSH
1141: LD_INT 87
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1151: LD_EXP 19
1155: PPUSH
1156: LD_INT 53
1158: PPUSH
1159: LD_INT 89
1161: PPUSH
1162: CALL_OW 118
// end ;
1166: LD_VAR 0 1
1170: RET
// export function PreparePrison ; begin
1171: LD_INT 0
1173: PPUSH
// uc_side := 5 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 5
1181: ST_TO_ADDR
// uc_nation := 2 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 2
1189: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1190: LD_ADDR_EXP 20
1194: PUSH
1195: LD_STRING Kamil
1197: PPUSH
1198: CALL_OW 25
1202: ST_TO_ADDR
// if Difficulty > 1 then
1203: LD_OWVAR 67
1207: PUSH
1208: LD_INT 1
1210: GREATER
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PUSH
2916: LD_OWVAR 67
2920: ARRAY
2921: ST_TO_ADDR
// veh := CreateVehicle ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: CALL_OW 45
2931: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 31
2951: PPUSH
2952: LD_INT 58
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 52
// result := un ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_VAR 0 3
2985: ST_TO_ADDR
// end ; end_of_file
2986: LD_VAR 0 1
2990: RET
// export function Action ; begin
2991: LD_INT 0
2993: PPUSH
// InGameOn ;
2994: CALL_OW 8
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3005: LD_EXP 16
3009: PPUSH
3010: LD_STRING DH-start-1
3012: PPUSH
3013: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3017: LD_EXP 16
3021: PPUSH
3022: LD_INT 71
3024: PPUSH
3025: LD_INT 29
3027: PPUSH
3028: CALL_OW 111
// wait ( 0 0$4 ) ;
3032: LD_INT 140
3034: PPUSH
3035: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3039: LD_EXP 16
3043: PPUSH
3044: LD_INT 71
3046: PPUSH
3047: LD_INT 33
3049: PPUSH
3050: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3054: LD_EXP 16
3058: PPUSH
3059: LD_INT 71
3061: PPUSH
3062: LD_INT 34
3064: PPUSH
3065: CALL_OW 178
// wait ( 0 0$4 ) ;
3069: LD_INT 140
3071: PPUSH
3072: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3076: LD_EXP 16
3080: PPUSH
3081: LD_STRING DH-start-2
3083: PPUSH
3084: CALL_OW 88
// wait ( 0 0$4 ) ;
3088: LD_INT 140
3090: PPUSH
3091: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3095: LD_EXP 16
3099: PPUSH
3100: LD_INT 65
3102: PPUSH
3103: LD_INT 26
3105: PPUSH
3106: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3110: LD_EXP 16
3114: PPUSH
3115: LD_STRING DH-start-3
3117: PPUSH
3118: CALL_OW 88
// InGameOff ;
3122: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3126: LD_STRING O1_cont
3128: PPUSH
3129: CALL_OW 337
// SaveForQuickRestart ;
3133: CALL_OW 22
// missionStarted := true ;
3137: LD_ADDR_EXP 1
3141: PUSH
3142: LD_INT 1
3144: ST_TO_ADDR
// PrepareJohnny ;
3145: CALL 2748 0 0
// end ;
3149: LD_VAR 0 1
3153: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3154: LD_EXP 8
3158: NOT
3159: PUSH
3160: LD_EXP 7
3164: NOT
3165: AND
3166: PUSH
3167: LD_INT 2
3169: PPUSH
3170: LD_EXP 25
3174: PPUSH
3175: CALL_OW 292
3179: AND
3180: PUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: CALL_OW 292
3193: NOT
3194: AND
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 69
3210: PPUSH
3211: LD_EXP 16
3215: PPUSH
3216: CALL_OW 74
3220: PUSH
3221: LD_EXP 25
3225: EQUAL
3226: AND
3227: PUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 2
3233: PPUSH
3234: CALL_OW 81
3238: PUSH
3239: LD_INT 0
3241: EQUAL
3242: AND
3243: IFFALSE 4174
3245: GO 3247
3247: DISABLE
// begin InGameOn ;
3248: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3252: LD_EXP 16
3256: PPUSH
3257: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3261: LD_EXP 25
3265: PPUSH
3266: LD_STRING DJ-ambush-1
3268: PPUSH
3269: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3273: LD_INT 10
3275: PPUSH
3276: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3280: LD_EXP 16
3284: PPUSH
3285: LD_EXP 25
3289: PPUSH
3290: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3294: LD_EXP 16
3298: PPUSH
3299: LD_STRING DH-ambush-1
3301: PPUSH
3302: CALL_OW 88
// wait ( 0 0$1 ) ;
3306: LD_INT 35
3308: PPUSH
3309: CALL_OW 67
// ComWalk ( Johnny ) ;
3313: LD_EXP 25
3317: PPUSH
3318: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3322: LD_EXP 25
3326: PPUSH
3327: LD_EXP 16
3331: PPUSH
3332: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3336: LD_INT 35
3338: PPUSH
3339: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3343: LD_EXP 25
3347: PPUSH
3348: LD_EXP 16
3352: PPUSH
3353: CALL_OW 296
3357: PUSH
3358: LD_INT 4
3360: LESS
3361: IFFALSE 3336
// ComTurnUnit ( Johnny , Heike ) ;
3363: LD_EXP 25
3367: PPUSH
3368: LD_EXP 16
3372: PPUSH
3373: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3377: LD_EXP 25
3381: PPUSH
3382: LD_STRING DJ-ambush-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3389: LD_EXP 16
3393: PPUSH
3394: LD_STRING DH-ambush-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3401: LD_EXP 25
3405: PPUSH
3406: LD_STRING DJ-ambush-3
3408: PPUSH
3409: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3413: LD_EXP 16
3417: PPUSH
3418: LD_STRING DH-ambush-3
3420: PPUSH
3421: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3425: LD_EXP 25
3429: PPUSH
3430: LD_STRING DJ-ambush-4
3432: PPUSH
3433: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3437: LD_EXP 16
3441: PPUSH
3442: LD_INT 39
3444: PPUSH
3445: LD_INT 22
3447: PPUSH
3448: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3452: LD_EXP 16
3456: PPUSH
3457: LD_STRING DH-ambush-4
3459: PPUSH
3460: CALL_OW 88
// PrepareRussianPatrol ;
3464: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3468: LD_INT 39
3470: PPUSH
3471: LD_INT 22
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 12
3479: NEG
3480: PPUSH
3481: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3485: LD_INT 39
3487: PPUSH
3488: LD_INT 22
3490: PPUSH
3491: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3495: LD_EXP 21
3499: PPUSH
3500: LD_INT 39
3502: PPUSH
3503: LD_INT 23
3505: PPUSH
3506: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3510: LD_EXP 16
3514: PUSH
3515: LD_EXP 25
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_INT 39
3526: PPUSH
3527: LD_INT 7
3529: PPUSH
3530: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3534: LD_EXP 16
3538: PUSH
3539: LD_EXP 25
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: LD_EXP 21
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3561: LD_EXP 21
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: LD_STRING DR-ambush-5
3572: PPUSH
3573: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3577: LD_EXP 21
3581: PUSH
3582: LD_INT 2
3584: ARRAY
3585: PPUSH
3586: LD_STRING DR1-ambush-5
3588: PPUSH
3589: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3600: LD_EXP 16
3604: PPUSH
3605: LD_INT 39
3607: PPUSH
3608: LD_INT 7
3610: PPUSH
3611: CALL_OW 297
3615: PUSH
3616: LD_INT 6
3618: LESS
3619: IFFALSE 3593
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3621: LD_EXP 16
3625: PPUSH
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_EXP 16
3648: PPUSH
3649: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3653: LD_EXP 25
3657: PPUSH
3658: LD_STRING DJ-ambush-6
3660: PPUSH
3661: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3665: LD_EXP 16
3669: PPUSH
3670: LD_STRING DH-ambush-6
3672: PPUSH
3673: CALL_OW 88
// InGameOff ;
3677: CALL_OW 9
// meetJohnny := true ;
3681: LD_ADDR_EXP 3
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
// ComFree ( Johnny ) ;
3689: LD_EXP 25
3693: PPUSH
3694: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3698: LD_STRING O2_ambush_cont
3700: PPUSH
3701: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3705: LD_EXP 21
3709: PUSH
3710: LD_EXP 21
3714: ARRAY
3715: PPUSH
3716: LD_INT 29
3718: PPUSH
3719: LD_INT 15
3721: PPUSH
3722: CALL_OW 111
// wait ( 0 0$2 ) ;
3726: LD_INT 70
3728: PPUSH
3729: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3733: LD_INT 3
3735: PPUSH
3736: LD_EXP 16
3740: PPUSH
3741: CALL_OW 292
3745: NOT
3746: PUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_EXP 25
3754: PPUSH
3755: CALL_OW 292
3759: NOT
3760: AND
3761: IFFALSE 3782
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3763: LD_EXP 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_INT 58
3774: PPUSH
3775: LD_INT 32
3777: PPUSH
3778: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3782: LD_INT 1750
3784: PUSH
3785: LD_INT 1400
3787: PUSH
3788: LD_INT 1225
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3806: LD_EXP 21
3810: PPUSH
3811: LD_INT 43
3813: PPUSH
3814: LD_INT 13
3816: PPUSH
3817: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3821: LD_INT 35
3823: PPUSH
3824: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3828: LD_EXP 21
3832: NOT
3833: PUSH
3834: LD_EXP 25
3838: PPUSH
3839: CALL_OW 302
3843: NOT
3844: OR
3845: IFFALSE 3821
// RemoveSeeing ( 39 , 22 , 2 ) ;
3847: LD_INT 39
3849: PPUSH
3850: LD_INT 22
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 81
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3878
// exit ;
3876: GO 4174
// if not IsOk ( Johnny ) then
3878: LD_EXP 25
3882: PPUSH
3883: CALL_OW 302
3887: NOT
3888: IFFALSE 3899
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3890: LD_STRING O2_ambush_out_cont
3892: PPUSH
3893: CALL_OW 337
// exit ;
3897: GO 4174
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3899: LD_EXP 16
3903: PPUSH
3904: LD_EXP 25
3908: PPUSH
3909: CALL_OW 296
3913: PUSH
3914: LD_INT 10
3916: GREATER
3917: IFFALSE 3960
// begin ComMoveUnit ( Johnny , Heike ) ;
3919: LD_EXP 25
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3933: LD_INT 35
3935: PPUSH
3936: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3940: LD_EXP 25
3944: PPUSH
3945: LD_EXP 16
3949: PPUSH
3950: CALL_OW 296
3954: PUSH
3955: LD_INT 6
3957: LESS
3958: IFFALSE 3933
// end ; CenterNowOnUnits ( Heike ) ;
3960: LD_EXP 16
3964: PPUSH
3965: CALL_OW 87
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 25
3982: PPUSH
3983: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3987: LD_EXP 25
3991: PPUSH
3992: LD_EXP 16
3996: PPUSH
3997: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4001: LD_EXP 25
4005: PPUSH
4006: LD_STRING DJ-thanks-1
4008: PPUSH
4009: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_STRING DH-thanks-1
4020: PPUSH
4021: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4025: LD_EXP 25
4029: PPUSH
4030: LD_STRING DJ-thanks-2
4032: PPUSH
4033: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4037: LD_EXP 25
4041: PPUSH
4042: LD_INT 4
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 111
// wait ( 0 0$1 ) ;
4052: LD_INT 35
4054: PPUSH
4055: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4059: LD_EXP 16
4063: PPUSH
4064: LD_STRING DH-thanks-2
4066: PPUSH
4067: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4071: LD_INT 35
4073: PPUSH
4074: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4078: LD_INT 2
4080: PPUSH
4081: LD_EXP 25
4085: PPUSH
4086: CALL_OW 292
4090: NOT
4091: IFFALSE 4071
// Say ( Heike , DH-thanks-2a ) ;
4093: LD_EXP 16
4097: PPUSH
4098: LD_STRING DH-thanks-2a
4100: PPUSH
4101: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4105: LD_EXP 25
4109: PPUSH
4110: CALL_OW 64
// InGameOff ;
4114: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4118: LD_STRING O2_ambush_out_cont
4120: PPUSH
4121: CALL_OW 337
// johnnySaved := true ;
4125: LD_ADDR_EXP 4
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 600
4143: PPUSH
4144: CALL_OW 492
// if IsOk ( Olaf ) then
4148: LD_EXP 17
4152: PPUSH
4153: CALL_OW 302
4157: IFFALSE 4174
// ComMoveXY ( Olaf , 44 , 25 ) ;
4159: LD_EXP 17
4163: PPUSH
4164: LD_INT 44
4166: PPUSH
4167: LD_INT 25
4169: PPUSH
4170: CALL_OW 111
// end ;
4174: END
// every 0 0$1 trigger russianPatrol do var i ;
4175: LD_EXP 21
4179: IFFALSE 4247
4181: GO 4183
4183: DISABLE
4184: LD_INT 0
4186: PPUSH
// begin enable ;
4187: ENABLE
// for i in russianPatrol do
4188: LD_ADDR_VAR 0 1
4192: PUSH
4193: LD_EXP 21
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4245
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4201: LD_VAR 0 1
4205: PPUSH
4206: CALL_OW 256
4210: PUSH
4211: LD_INT 1000
4213: LESS
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 314
4224: NOT
4225: AND
4226: IFFALSE 4243
// ComAgressiveMove ( i , 42 , 12 ) ;
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_INT 42
4235: PPUSH
4236: LD_INT 12
4238: PPUSH
4239: CALL_OW 114
4243: GO 4198
4245: POP
4246: POP
// end ;
4247: PPOPN 1
4249: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4250: LD_INT 1
4252: PPUSH
4253: LD_INT 2
4255: PPUSH
4256: CALL_OW 81
4260: PUSH
4261: LD_INT 2
4263: EQUAL
4264: PUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 302
4274: AND
4275: IFFALSE 4292
4277: GO 4279
4279: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4280: LD_EXP 25
4284: PPUSH
4285: LD_STRING DJ-fire-1
4287: PPUSH
4288: CALL_OW 88
4292: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4293: LD_EXP 7
4297: NOT
4298: PUSH
4299: LD_EXP 23
4303: PPUSH
4304: LD_INT 101
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 72
4318: AND
4319: IFFALSE 4439
4321: GO 4323
4323: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4324: LD_EXP 16
4328: PPUSH
4329: CALL_OW 87
// DialogueOn ;
4333: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4337: LD_EXP 16
4341: PPUSH
4342: LD_STRING DH-see-enemy-patrol-1
4344: PPUSH
4345: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4349: LD_EXP 23
4353: PPUSH
4354: LD_INT 26
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 72
4368: PUSH
4369: LD_INT 1
4371: ARRAY
4372: PPUSH
4373: LD_STRING DR-see-enemy-patrol-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4384: LD_EXP 23
4388: PPUSH
4389: LD_INT 66
4391: PPUSH
4392: LD_INT 22
4394: PPUSH
4395: CALL_OW 114
// wait ( 0 0$10 ) ;
4399: LD_INT 350
4401: PPUSH
4402: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4406: LD_EXP 23
4410: PPUSH
4411: LD_INT 175
4413: PPUSH
4414: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4418: LD_EXP 23
4422: PPUSH
4423: LD_INT 9
4425: PPUSH
4426: CALL_OW 173
// AddComFree ( russianForces ) ;
4430: LD_EXP 23
4434: PPUSH
4435: CALL_OW 199
// end ;
4439: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4440: LD_EXP 23
4444: PPUSH
4445: LD_INT 3
4447: PUSH
4448: LD_INT 24
4450: PUSH
4451: LD_INT 960
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 72
4466: IFFALSE 4710
4468: GO 4470
4470: DISABLE
4471: LD_INT 0
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
// begin enable ;
4477: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 69
4497: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_EXP 23
4507: PPUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 24
4516: PUSH
4517: LD_INT 960
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 24
4526: PUSH
4527: LD_INT 500
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 72
4547: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_EXP 23
4557: PPUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 24
4563: PUSH
4564: LD_INT 500
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 72
4579: ST_TO_ADDR
// if not tmp then
4580: LD_VAR 0 2
4584: NOT
4585: IFFALSE 4589
// exit ;
4587: GO 4710
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4589: LD_ADDR_VAR 0 2
4593: PUSH
4594: LD_VAR 0 3
4598: PUSH
4599: LD_INT 1
4601: ARRAY
4602: PPUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 74
4612: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 3
4622: PUSH
4623: LD_INT 1
4625: ARRAY
4626: PPUSH
4627: CALL_OW 296
4631: PUSH
4632: LD_INT 10
4634: LESS
4635: IFFALSE 4651
// ComAttackUnit ( tmp2 , tmp ) ;
4637: LD_VAR 0 3
4641: PPUSH
4642: LD_VAR 0 2
4646: PPUSH
4647: CALL_OW 115
// if tmp3 then
4651: LD_VAR 0 4
4655: IFFALSE 4710
// for i in tmp do
4657: LD_ADDR_VAR 0 1
4661: PUSH
4662: LD_VAR 0 2
4666: PUSH
4667: FOR_IN
4668: IFFALSE 4708
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4670: LD_VAR 0 1
4674: PPUSH
4675: LD_INT 119
4677: PPUSH
4678: LD_INT 21
4680: PPUSH
4681: CALL_OW 297
4685: PUSH
4686: LD_INT 10
4688: GREATER
4689: IFFALSE 4706
// ComMoveXY ( i , 119 , 21 ) ;
4691: LD_VAR 0 1
4695: PPUSH
4696: LD_INT 119
4698: PPUSH
4699: LD_INT 21
4701: PPUSH
4702: CALL_OW 111
4706: GO 4667
4708: POP
4709: POP
// end ;
4710: PPOPN 4
4712: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4713: LD_EXP 1
4717: PUSH
4718: LD_EXP 8
4722: NOT
4723: AND
4724: PUSH
4725: LD_EXP 7
4729: NOT
4730: AND
4731: PUSH
4732: LD_EXP 16
4736: PPUSH
4737: LD_INT 25
4739: PUSH
4740: LD_INT 14
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 69
4751: PPUSH
4752: LD_EXP 16
4756: PPUSH
4757: CALL_OW 74
4761: PPUSH
4762: CALL_OW 296
4766: PUSH
4767: LD_INT 6
4769: LESS
4770: AND
4771: IFFALSE 4802
4773: GO 4775
4775: DISABLE
// begin animalCounter := animalCounter + 1 ;
4776: LD_ADDR_EXP 15
4780: PUSH
4781: LD_EXP 15
4785: PUSH
4786: LD_INT 1
4788: PLUS
4789: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4790: LD_EXP 16
4794: PPUSH
4795: LD_STRING DH-tiger-1
4797: PPUSH
4798: CALL_OW 88
// end ;
4802: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4803: LD_EXP 1
4807: PUSH
4808: LD_EXP 8
4812: NOT
4813: AND
4814: PUSH
4815: LD_EXP 7
4819: NOT
4820: AND
4821: PUSH
4822: LD_EXP 16
4826: PPUSH
4827: LD_INT 25
4829: PUSH
4830: LD_INT 12
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: PPUSH
4842: LD_EXP 16
4846: PPUSH
4847: CALL_OW 74
4851: PPUSH
4852: CALL_OW 296
4856: PUSH
4857: LD_INT 6
4859: LESS
4860: AND
4861: IFFALSE 4892
4863: GO 4865
4865: DISABLE
// begin animalCounter := animalCounter + 1 ;
4866: LD_ADDR_EXP 15
4870: PUSH
4871: LD_EXP 15
4875: PUSH
4876: LD_INT 1
4878: PLUS
4879: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4880: LD_EXP 16
4884: PPUSH
4885: LD_STRING DH-ape-1
4887: PPUSH
4888: CALL_OW 88
// end ;
4892: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4893: LD_EXP 1
4897: PUSH
4898: LD_EXP 8
4902: NOT
4903: AND
4904: PUSH
4905: LD_EXP 7
4909: NOT
4910: AND
4911: PUSH
4912: LD_EXP 16
4916: PPUSH
4917: LD_INT 25
4919: PUSH
4920: LD_INT 18
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: PPUSH
4932: LD_EXP 16
4936: PPUSH
4937: CALL_OW 74
4941: PPUSH
4942: CALL_OW 296
4946: PUSH
4947: LD_INT 6
4949: LESS
4950: AND
4951: IFFALSE 4982
4953: GO 4955
4955: DISABLE
// begin animalCounter := animalCounter + 1 ;
4956: LD_ADDR_EXP 15
4960: PUSH
4961: LD_EXP 15
4965: PUSH
4966: LD_INT 1
4968: PLUS
4969: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4970: LD_EXP 16
4974: PPUSH
4975: LD_STRING DH-bird-1
4977: PPUSH
4978: CALL_OW 88
// end ;
4982: END
// every 0 0$2 trigger animalCounter = 3 do
4983: LD_EXP 15
4987: PUSH
4988: LD_INT 3
4990: EQUAL
4991: IFFALSE 5003
4993: GO 4995
4995: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4996: LD_STRING ACH_ZOOLIGST
4998: PPUSH
4999: CALL_OW 543
5003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5004: LD_INT 22
5006: PUSH
5007: LD_INT 2
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 101
5016: PUSH
5017: LD_INT 3
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 69
5032: IFFALSE 5045
5034: GO 5036
5036: DISABLE
// russianSpotted := true ;
5037: LD_ADDR_EXP 9
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
5045: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5046: LD_EXP 16
5050: PPUSH
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: PPUSH
5080: LD_EXP 16
5084: PPUSH
5085: CALL_OW 74
5089: PPUSH
5090: CALL_OW 296
5094: PUSH
5095: LD_INT 8
5097: LESS
5098: IFFALSE 5115
5100: GO 5102
5102: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5103: LD_EXP 16
5107: PPUSH
5108: LD_STRING DH-enemy-base
5110: PPUSH
5111: CALL_OW 88
5115: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5116: LD_EXP 25
5120: PPUSH
5121: CALL_OW 305
5125: NOT
5126: PUSH
5127: LD_EXP 6
5131: NOT
5132: AND
5133: PUSH
5134: LD_EXP 5
5138: AND
5139: PUSH
5140: LD_EXP 12
5144: NOT
5145: AND
5146: PUSH
5147: LD_EXP 11
5151: NOT
5152: AND
5153: IFFALSE 5311
5155: GO 5157
5157: DISABLE
5158: LD_INT 0
5160: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5161: LD_INT 35
5163: PPUSH
5164: CALL_OW 67
// for i in dogTag do
5168: LD_ADDR_VAR 0 1
5172: PUSH
5173: LD_EXP 5
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5228
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5181: LD_EXP 16
5185: PPUSH
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: ARRAY
5194: PPUSH
5195: LD_VAR 0 1
5199: PUSH
5200: LD_INT 2
5202: ARRAY
5203: PPUSH
5204: CALL_OW 297
5208: PUSH
5209: LD_INT 3
5211: LESS
5212: IFFALSE 5226
// begin dogTagFound := i ;
5214: LD_ADDR_EXP 6
5218: PUSH
5219: LD_VAR 0 1
5223: ST_TO_ADDR
// break ;
5224: GO 5228
// end ;
5226: GO 5178
5228: POP
5229: POP
// until dogTagFound ;
5230: LD_EXP 6
5234: IFFALSE 5161
// CenterNowOnUnits ( Heike ) ;
5236: LD_EXP 16
5240: PPUSH
5241: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5245: LD_EXP 16
5249: PPUSH
5250: LD_EXP 6
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: PPUSH
5259: LD_EXP 6
5263: PUSH
5264: LD_INT 2
5266: ARRAY
5267: PPUSH
5268: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5272: LD_STRING ACH_DOGTAG
5274: PPUSH
5275: CALL_OW 543
// if mercenariesQuestReady then
5279: LD_EXP 10
5283: IFFALSE 5299
// Say ( Heike , DH-dogtag-found-quest ) else
5285: LD_EXP 16
5289: PPUSH
5290: LD_STRING DH-dogtag-found-quest
5292: PPUSH
5293: CALL_OW 88
5297: GO 5311
// Say ( Heike , DH-dogtag-found ) ;
5299: LD_EXP 16
5303: PPUSH
5304: LD_STRING DH-dogtag-found
5306: PPUSH
5307: CALL_OW 88
// end ;
5311: PPOPN 1
5313: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5314: LD_EXP 8
5318: NOT
5319: PUSH
5320: LD_EXP 7
5324: NOT
5325: AND
5326: PUSH
5327: LD_INT 5
5329: PPUSH
5330: LD_EXP 16
5334: PPUSH
5335: CALL_OW 292
5339: AND
5340: PUSH
5341: LD_EXP 16
5345: PPUSH
5346: LD_EXP 17
5350: PPUSH
5351: CALL_OW 296
5355: PUSH
5356: LD_INT 8
5358: LESS
5359: AND
5360: IFFALSE 5721
5362: GO 5364
5364: DISABLE
// begin olafSpotted := true ;
5365: LD_ADDR_EXP 8
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// if HasTask ( Olaf ) then
5373: LD_EXP 17
5377: PPUSH
5378: CALL_OW 314
5382: IFFALSE 5393
// ComStop ( Olaf ) ;
5384: LD_EXP 17
5388: PPUSH
5389: CALL_OW 141
// InGameOn ;
5393: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5397: LD_EXP 17
5401: PPUSH
5402: LD_EXP 16
5406: PPUSH
5407: CALL_OW 296
5411: PUSH
5412: LD_INT 8
5414: GREATER
5415: IFFALSE 5431
// ComMoveUnit ( Olaf , Heike ) ;
5417: LD_EXP 17
5421: PPUSH
5422: LD_EXP 16
5426: PPUSH
5427: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5431: LD_INT 35
5433: PPUSH
5434: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_EXP 16
5447: PPUSH
5448: CALL_OW 296
5452: PUSH
5453: LD_INT 8
5455: LESSEQUAL
5456: IFFALSE 5431
// ComTurnUnit ( Heike , Olaf ) ;
5458: LD_EXP 16
5462: PPUSH
5463: LD_EXP 17
5467: PPUSH
5468: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5472: LD_EXP 17
5476: PPUSH
5477: LD_EXP 16
5481: PPUSH
5482: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5486: LD_EXP 17
5490: PPUSH
5491: LD_STRING DO-olaf-1
5493: PPUSH
5494: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5498: LD_EXP 16
5502: PPUSH
5503: LD_STRING DH-olaf-1
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-2
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-2
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-3
5541: PPUSH
5542: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5546: LD_EXP 17
5550: PPUSH
5551: LD_STRING DO-olaf-4
5553: PPUSH
5554: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_STRING DH-olaf-4
5565: PPUSH
5566: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5570: LD_EXP 17
5574: PPUSH
5575: LD_STRING DO-olaf-5
5577: PPUSH
5578: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-5
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-6
5601: PPUSH
5602: CALL_OW 88
// if russianSpotted or johnnySaved then
5606: LD_EXP 9
5610: PUSH
5611: LD_EXP 4
5615: OR
5616: IFFALSE 5644
// begin Say ( Heike , DH-olaf-6a ) ;
5618: LD_EXP 16
5622: PPUSH
5623: LD_STRING DH-olaf-6a
5625: PPUSH
5626: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5630: LD_EXP 17
5634: PPUSH
5635: LD_STRING DO-olaf-7a
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Heike , DH-olaf-6b ) ;
5644: LD_EXP 16
5648: PPUSH
5649: LD_STRING DH-olaf-6b
5651: PPUSH
5652: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5656: LD_EXP 17
5660: PPUSH
5661: LD_STRING DO-olaf-7b
5663: PPUSH
5664: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING DO-olaf-8
5675: PPUSH
5676: CALL_OW 88
// InGameOff ;
5680: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5684: LD_STRING O3_camp_cont
5686: PPUSH
5687: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5691: LD_EXP 17
5695: PPUSH
5696: LD_INT 52
5698: PPUSH
5699: LD_INT 90
5701: PPUSH
5702: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_INT 53
5713: PPUSH
5714: LD_INT 89
5716: PPUSH
5717: CALL_OW 178
// end ;
5721: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5722: LD_EXP 8
5726: NOT
5727: PUSH
5728: LD_EXP 16
5732: PPUSH
5733: LD_EXP 18
5737: PPUSH
5738: CALL_OW 296
5742: PUSH
5743: LD_INT 36
5745: LESS
5746: AND
5747: IFFALSE 5767
5749: GO 5751
5751: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5752: LD_EXP 17
5756: PPUSH
5757: LD_INT 39
5759: PPUSH
5760: LD_INT 71
5762: PPUSH
5763: CALL_OW 111
5767: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5768: LD_EXP 7
5772: NOT
5773: PUSH
5774: LD_INT 2
5776: PPUSH
5777: LD_EXP 19
5781: PPUSH
5782: CALL_OW 292
5786: PUSH
5787: LD_INT 2
5789: PPUSH
5790: LD_EXP 18
5794: PPUSH
5795: CALL_OW 292
5799: OR
5800: AND
5801: IFFALSE 7122
5803: GO 5805
5805: DISABLE
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
5810: PPUSH
// begin if not johnnySaved then
5811: LD_EXP 4
5815: NOT
5816: IFFALSE 5827
// KillUnit ( Johnny ) ;
5818: LD_EXP 25
5822: PPUSH
5823: CALL_OW 66
// mercenariesSpotted := true ;
5827: LD_ADDR_EXP 7
5831: PUSH
5832: LD_INT 1
5834: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5835: LD_STRING O4_camp_cont
5837: PPUSH
5838: CALL_OW 337
// InGameOn ;
5842: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5846: LD_INT 53
5848: PPUSH
5849: LD_INT 89
5851: PPUSH
5852: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5856: LD_INT 53
5858: PPUSH
5859: LD_INT 89
5861: PPUSH
5862: LD_INT 2
5864: PPUSH
5865: LD_INT 8
5867: NEG
5868: PPUSH
5869: CALL_OW 330
// if olafSpotted then
5873: LD_EXP 8
5877: IFFALSE 5995
// begin AddComTurnUnit ( Olaf , Heike ) ;
5879: LD_EXP 17
5883: PPUSH
5884: LD_EXP 16
5888: PPUSH
5889: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5893: LD_EXP 16
5897: PPUSH
5898: LD_INT 51
5900: PPUSH
5901: LD_INT 86
5903: PPUSH
5904: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5908: LD_EXP 16
5912: PPUSH
5913: LD_EXP 17
5917: PPUSH
5918: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5922: LD_EXP 17
5926: PPUSH
5927: LD_STRING DO-camp-1
5929: PPUSH
5930: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5934: LD_EXP 18
5938: PUSH
5939: LD_EXP 19
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: LD_EXP 16
5952: PPUSH
5953: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5957: LD_EXP 18
5961: PPUSH
5962: LD_STRING DG-camp-1
5964: PPUSH
5965: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5969: LD_EXP 16
5973: PPUSH
5974: LD_STRING DH-camp-1
5976: PPUSH
5977: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5981: LD_EXP 17
5985: PPUSH
5986: LD_STRING DO-camp-2
5988: PPUSH
5989: CALL_OW 88
// end else
5993: GO 6390
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5995: LD_EXP 16
5999: PPUSH
6000: LD_INT 51
6002: PPUSH
6003: LD_INT 86
6005: PPUSH
6006: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6010: LD_EXP 16
6014: PPUSH
6015: LD_EXP 18
6019: PPUSH
6020: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6024: LD_EXP 18
6028: PUSH
6029: LD_EXP 19
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PPUSH
6038: LD_EXP 16
6042: PPUSH
6043: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6047: LD_EXP 18
6051: PPUSH
6052: LD_STRING DG-camp-1a
6054: PPUSH
6055: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6059: LD_EXP 16
6063: PPUSH
6064: LD_STRING DH-camp-1a
6066: PPUSH
6067: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6071: LD_INT 1
6073: PPUSH
6074: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6078: LD_EXP 19
6082: PPUSH
6083: LD_EXP 17
6087: PPUSH
6088: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6092: LD_EXP 19
6096: PPUSH
6097: LD_STRING DM-camp-1a
6099: PPUSH
6100: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6104: LD_EXP 17
6108: PPUSH
6109: LD_INT 52
6111: PPUSH
6112: LD_INT 90
6114: PPUSH
6115: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6119: LD_EXP 19
6123: PPUSH
6124: LD_EXP 16
6128: PPUSH
6129: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6133: LD_EXP 18
6137: PPUSH
6138: LD_STRING DG-camp-2a
6140: PPUSH
6141: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6145: LD_EXP 16
6149: PPUSH
6150: LD_STRING DH-camp-2a
6152: PPUSH
6153: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6157: LD_EXP 19
6161: PPUSH
6162: LD_STRING DM-camp-2a
6164: PPUSH
6165: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6169: LD_INT 35
6171: PPUSH
6172: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6176: LD_EXP 17
6180: PPUSH
6181: LD_EXP 16
6185: PPUSH
6186: CALL_OW 296
6190: PUSH
6191: LD_INT 10
6193: LESS
6194: IFFALSE 6169
// AddComTurnUnit ( Olaf , Heike ) ;
6196: LD_EXP 17
6200: PPUSH
6201: LD_EXP 16
6205: PPUSH
6206: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6210: LD_EXP 19
6214: PPUSH
6215: LD_EXP 16
6219: PPUSH
6220: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6224: LD_EXP 17
6228: PPUSH
6229: LD_STRING DO-camp-2a
6231: PPUSH
6232: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6236: LD_EXP 16
6240: PPUSH
6241: LD_EXP 17
6245: PPUSH
6246: CALL_OW 119
// if russianSpotted then
6250: LD_EXP 9
6254: IFFALSE 6294
// begin Say ( Heike , DH-camp-2aa ) ;
6256: LD_EXP 16
6260: PPUSH
6261: LD_STRING DH-camp-2aa
6263: PPUSH
6264: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6268: LD_EXP 18
6272: PPUSH
6273: LD_STRING DG-camp-2aa
6275: PPUSH
6276: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6280: LD_EXP 19
6284: PPUSH
6285: LD_STRING DM-camp-2aa
6287: PPUSH
6288: CALL_OW 88
// end else
6292: GO 6318
// begin Say ( Heike , DH-camp-2ab ) ;
6294: LD_EXP 16
6298: PPUSH
6299: LD_STRING DH-camp-2ab
6301: PPUSH
6302: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6306: LD_EXP 19
6310: PPUSH
6311: LD_STRING DM-camp-2ab
6313: PPUSH
6314: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6318: LD_EXP 16
6322: PPUSH
6323: LD_STRING DH-camp-3a
6325: PPUSH
6326: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6330: LD_EXP 17
6334: PPUSH
6335: LD_STRING DO-camp-3a
6337: PPUSH
6338: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6342: LD_EXP 18
6346: PPUSH
6347: LD_STRING DG-camp-3a
6349: PPUSH
6350: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6354: LD_EXP 16
6358: PPUSH
6359: LD_STRING DH-camp-4aa
6361: PPUSH
6362: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6366: LD_EXP 19
6370: PPUSH
6371: LD_STRING DM-camp-4aa
6373: PPUSH
6374: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6378: LD_EXP 17
6382: PPUSH
6383: LD_STRING DO-camp-4a
6385: PPUSH
6386: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6390: LD_EXP 17
6394: PPUSH
6395: LD_STRING DO-camp-3
6397: PPUSH
6398: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6402: LD_EXP 17
6406: PPUSH
6407: LD_STRING DO-camp-4
6409: PPUSH
6410: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6414: LD_EXP 18
6418: PPUSH
6419: LD_EXP 17
6423: PPUSH
6424: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6428: LD_EXP 18
6432: PPUSH
6433: LD_STRING DG-camp-4
6435: PPUSH
6436: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6440: LD_EXP 16
6444: PPUSH
6445: LD_EXP 18
6449: PPUSH
6450: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6454: LD_EXP 16
6458: PPUSH
6459: LD_STRING DH-camp-4
6461: PPUSH
6462: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6466: LD_EXP 19
6470: PUSH
6471: LD_EXP 17
6475: PUSH
6476: LD_EXP 18
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: PPUSH
6486: LD_EXP 16
6490: PPUSH
6491: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6495: LD_EXP 18
6499: PPUSH
6500: LD_STRING DG-camp-5
6502: PPUSH
6503: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6507: LD_EXP 18
6511: PPUSH
6512: LD_STRING DG-camp-6
6514: PPUSH
6515: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6519: LD_EXP 16
6523: PPUSH
6524: LD_STRING DH-camp-6
6526: PPUSH
6527: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6531: LD_EXP 18
6535: PPUSH
6536: LD_STRING DG-camp-7
6538: PPUSH
6539: CALL_OW 88
// if DogTagFound then
6543: LD_EXP 6
6547: IFFALSE 6587
// begin Say ( Heike , DH-quest-1a ) ;
6549: LD_EXP 16
6553: PPUSH
6554: LD_STRING DH-quest-1a
6556: PPUSH
6557: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6561: LD_EXP 18
6565: PPUSH
6566: LD_STRING DG-quest-1a
6568: PPUSH
6569: CALL_OW 88
// mercenariesQuestDone := true ;
6573: LD_ADDR_EXP 11
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// InGameOff ;
6581: CALL_OW 9
// end else
6585: GO 6753
// begin Say ( Heike , DH-camp-7 ) ;
6587: LD_EXP 16
6591: PPUSH
6592: LD_STRING DH-camp-7
6594: PPUSH
6595: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6599: LD_EXP 16
6603: PPUSH
6604: CALL_OW 256
6608: PUSH
6609: LD_INT 1000
6611: LESS
6612: IFFALSE 6704
// begin Say ( Olaf , DO-heal-1 ) ;
6614: LD_EXP 17
6618: PPUSH
6619: LD_STRING DO-heal-1
6621: PPUSH
6622: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6626: LD_EXP 16
6630: PPUSH
6631: LD_INT 51
6633: PPUSH
6634: LD_INT 88
6636: PPUSH
6637: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6641: LD_INT 35
6643: PPUSH
6644: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6648: LD_EXP 16
6652: PPUSH
6653: LD_EXP 17
6657: PPUSH
6658: CALL_OW 296
6662: PUSH
6663: LD_INT 4
6665: LESS
6666: PUSH
6667: LD_EXP 16
6671: PPUSH
6672: LD_INT 51
6674: PPUSH
6675: LD_INT 88
6677: PPUSH
6678: CALL_OW 307
6682: OR
6683: IFFALSE 6641
// SetLives ( Heike , 1000 ) ;
6685: LD_EXP 16
6689: PPUSH
6690: LD_INT 1000
6692: PPUSH
6693: CALL_OW 234
// wait ( 0 0$2 ) ;
6697: LD_INT 70
6699: PPUSH
6700: CALL_OW 67
// end ; InGameOff ;
6704: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6708: LD_EXP 17
6712: PUSH
6713: LD_EXP 18
6717: PUSH
6718: LD_EXP 19
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PPUSH
6728: LD_INT 53
6730: PPUSH
6731: LD_INT 89
6733: PPUSH
6734: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6738: LD_STRING O5_proof_cont
6740: PPUSH
6741: CALL_OW 337
// mercenariesQuestReady := true ;
6745: LD_ADDR_EXP 10
6749: PUSH
6750: LD_INT 1
6752: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6753: LD_EXP 10
6757: NOT
6758: IFFALSE 6762
// exit ;
6760: GO 7122
// wait ( 0 0$35 ) ;
6762: LD_INT 1225
6764: PPUSH
6765: CALL_OW 67
// driver := PreparePatrolTank ;
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: CALL 2821 0 0
6778: ST_TO_ADDR
// if not driver then
6779: LD_VAR 0 2
6783: NOT
6784: IFFALSE 6788
// exit ;
6786: GO 7122
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6788: LD_INT 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 2
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: CALL_OW 310
6818: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6819: LD_VAR 0 3
6823: PPUSH
6824: LD_INT 500
6826: PPUSH
6827: CALL_OW 234
// SetLives ( driver , 450 ) ;
6831: LD_VAR 0 2
6835: PPUSH
6836: LD_INT 450
6838: PPUSH
6839: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 59
6850: PPUSH
6851: LD_INT 60
6853: PPUSH
6854: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6858: LD_INT 35
6860: PPUSH
6861: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 59
6872: PPUSH
6873: LD_INT 60
6875: PPUSH
6876: CALL_OW 307
6880: IFFALSE 6858
// if not See ( 1 , Heike ) then
6882: LD_INT 1
6884: PPUSH
6885: LD_EXP 16
6889: PPUSH
6890: CALL_OW 292
6894: NOT
6895: IFFALSE 7019
// begin if Difficulty < 3 then
6897: LD_OWVAR 67
6901: PUSH
6902: LD_INT 3
6904: LESS
6905: IFFALSE 6923
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6907: LD_INT 59
6909: PPUSH
6910: LD_INT 60
6912: PPUSH
6913: LD_INT 2
6915: PPUSH
6916: LD_INT 6
6918: PPUSH
6919: CALL_OW 330
// ComExitVehicle ( driver ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: CALL_OW 121
// wait ( 0 0$1 ) ;
6932: LD_INT 35
6934: PPUSH
6935: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6939: LD_VAR 0 2
6943: PPUSH
6944: LD_INT 58
6946: PPUSH
6947: LD_INT 54
6949: PPUSH
6950: CALL_OW 171
// wait ( 0 0$1 ) ;
6954: LD_INT 35
6956: PPUSH
6957: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6961: LD_VAR 0 2
6965: PPUSH
6966: LD_INT 57
6968: PPUSH
6969: LD_INT 53
6971: PPUSH
6972: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6976: LD_VAR 0 2
6980: PPUSH
6981: LD_INT 350
6983: PPUSH
6984: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6988: LD_VAR 0 2
6992: PPUSH
6993: LD_VAR 0 3
6997: PPUSH
6998: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7002: LD_VAR 0 2
7006: PPUSH
7007: LD_INT 107
7009: PPUSH
7010: LD_INT 118
7012: PPUSH
7013: CALL_OW 171
// end else
7017: GO 7034
// begin ComMoveXY ( driver , 107 , 118 ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_INT 107
7026: PPUSH
7027: LD_INT 118
7029: PPUSH
7030: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7034: LD_INT 35
7036: PPUSH
7037: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_INT 107
7048: PPUSH
7049: LD_INT 118
7051: PPUSH
7052: CALL_OW 307
7056: PUSH
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 301
7066: OR
7067: IFFALSE 7034
// if IsDead ( driver [ 1 ] ) then
7069: LD_VAR 0 2
7073: PUSH
7074: LD_INT 1
7076: ARRAY
7077: PPUSH
7078: CALL_OW 301
7082: IFFALSE 7086
// exit ;
7084: GO 7122
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7086: LD_ADDR_VAR 0 1
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7120
// RemoveUnit ( i ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 64
7118: GO 7106
7120: POP
7121: POP
// end ;
7122: PPOPN 3
7124: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7125: LD_INT 10
7127: PPUSH
7128: LD_INT 22
7130: PUSH
7131: LD_INT 2
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 70
7156: IFFALSE 7230
7158: GO 7160
7160: DISABLE
// begin InGameOn ;
7161: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7165: LD_EXP 17
7169: PUSH
7170: LD_EXP 19
7174: PUSH
7175: LD_EXP 18
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PPUSH
7185: LD_EXP 16
7189: PPUSH
7190: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7194: LD_EXP 19
7198: PPUSH
7199: LD_STRING DM-quest-1
7201: PPUSH
7202: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7206: LD_EXP 18
7210: PPUSH
7211: LD_STRING DG-quest-1
7213: PPUSH
7214: CALL_OW 88
// InGameOff ;
7218: CALL_OW 9
// mercenariesQuestDone := true ;
7222: LD_ADDR_EXP 11
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// end ;
7230: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7231: LD_EXP 16
7235: PPUSH
7236: LD_INT 10
7238: PPUSH
7239: CALL_OW 308
7243: PUSH
7244: LD_EXP 6
7248: AND
7249: PUSH
7250: LD_EXP 10
7254: AND
7255: PUSH
7256: LD_INT 10
7258: PPUSH
7259: LD_INT 22
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: NOT
7288: AND
7289: IFFALSE 7461
7291: GO 7293
7293: DISABLE
7294: LD_INT 0
7296: PPUSH
// begin InGameOn ;
7297: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7301: LD_EXP 17
7305: PUSH
7306: LD_EXP 19
7310: PUSH
7311: LD_EXP 18
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: PPUSH
7321: LD_EXP 16
7325: PPUSH
7326: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7330: LD_EXP 16
7334: PPUSH
7335: LD_INT 54
7337: PPUSH
7338: LD_INT 86
7340: PPUSH
7341: CALL_OW 111
// p := p + 1 ;
7345: LD_ADDR_VAR 0 1
7349: PUSH
7350: LD_VAR 0 1
7354: PUSH
7355: LD_INT 1
7357: PLUS
7358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7359: LD_INT 35
7361: PPUSH
7362: CALL_OW 67
// p := p + 1 ;
7366: LD_ADDR_VAR 0 1
7370: PUSH
7371: LD_VAR 0 1
7375: PUSH
7376: LD_INT 1
7378: PLUS
7379: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7380: LD_EXP 16
7384: PPUSH
7385: LD_EXP 18
7389: PPUSH
7390: CALL_OW 296
7394: PUSH
7395: LD_INT 4
7397: LESS
7398: PUSH
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 5
7406: GREATER
7407: OR
7408: IFFALSE 7359
// Say ( Mike , DM-quest-1 ) ;
7410: LD_EXP 19
7414: PPUSH
7415: LD_STRING DM-quest-1
7417: PPUSH
7418: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7422: LD_EXP 18
7426: PPUSH
7427: LD_STRING DG-quest-1
7429: PPUSH
7430: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7434: LD_EXP 16
7438: PPUSH
7439: LD_INT 55
7441: PPUSH
7442: LD_INT 87
7444: PPUSH
7445: CALL_OW 111
// InGameOff ;
7449: CALL_OW 9
// mercenariesQuestDone := true ;
7453: LD_ADDR_EXP 11
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// end ;
7461: PPOPN 1
7463: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7464: LD_EXP 16
7468: PUSH
7469: LD_INT 55
7471: PUSH
7472: EMPTY
7473: LIST
7474: PPUSH
7475: CALL_OW 69
7479: IN
7480: IFFALSE 7520
7482: GO 7484
7484: DISABLE
// begin if Difficulty < 3 then
7485: LD_OWVAR 67
7489: PUSH
7490: LD_INT 3
7492: LESS
7493: IFFALSE 7508
// RemoveSeeing ( 59 , 60 , 2 ) ;
7495: LD_INT 59
7497: PPUSH
7498: LD_INT 60
7500: PPUSH
7501: LD_INT 2
7503: PPUSH
7504: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7508: LD_EXP 16
7512: PPUSH
7513: LD_STRING DH-driver
7515: PPUSH
7516: CALL_OW 88
// end ;
7520: END
// every 0 0$1 trigger mercenariesQuestDone do
7521: LD_EXP 11
7525: IFFALSE 8013
7527: GO 7529
7529: DISABLE
// begin if mercenariesQuestReady then
7530: LD_EXP 10
7534: IFFALSE 7543
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7536: LD_STRING O5_proof_cont_out
7538: PPUSH
7539: CALL_OW 337
// InGameOn ;
7543: CALL_OW 8
// if IsInUnit ( Heike ) then
7547: LD_EXP 16
7551: PPUSH
7552: CALL_OW 310
7556: IFFALSE 7567
// ComExitVehicle ( Heike ) ;
7558: LD_EXP 16
7562: PPUSH
7563: CALL_OW 121
// wait ( 3 ) ;
7567: LD_INT 3
7569: PPUSH
7570: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7574: LD_EXP 16
7578: PPUSH
7579: LD_EXP 18
7583: PPUSH
7584: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7588: LD_EXP 17
7592: PUSH
7593: LD_EXP 19
7597: PUSH
7598: LD_EXP 18
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: PPUSH
7608: LD_EXP 16
7612: PPUSH
7613: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7617: LD_EXP 16
7621: PPUSH
7622: LD_STRING DH-quest-done-1
7624: PPUSH
7625: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7629: LD_EXP 19
7633: PPUSH
7634: LD_STRING DM-quest-done-1
7636: PPUSH
7637: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7641: LD_EXP 18
7645: PPUSH
7646: LD_STRING DG-quest-done-1
7648: PPUSH
7649: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7653: LD_EXP 16
7657: PPUSH
7658: LD_EXP 17
7662: PPUSH
7663: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7667: LD_EXP 16
7671: PPUSH
7672: LD_STRING DH-quest-done-2
7674: PPUSH
7675: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7679: LD_EXP 17
7683: PPUSH
7684: LD_STRING DO-quest-done-2
7686: PPUSH
7687: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7691: LD_EXP 17
7695: PPUSH
7696: LD_STRING DO-quest-done-3
7698: PPUSH
7699: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7703: LD_EXP 18
7707: PPUSH
7708: LD_INT 51
7710: PPUSH
7711: LD_INT 90
7713: PPUSH
7714: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7718: LD_EXP 18
7722: PPUSH
7723: LD_INT 50
7725: PPUSH
7726: LD_INT 89
7728: PPUSH
7729: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7733: LD_EXP 16
7737: PPUSH
7738: LD_EXP 18
7742: PPUSH
7743: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7747: LD_EXP 18
7751: PPUSH
7752: LD_STRING DG-quest-done-4
7754: PPUSH
7755: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7759: LD_EXP 18
7763: PPUSH
7764: LD_EXP 16
7768: PPUSH
7769: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7773: LD_EXP 16
7777: PPUSH
7778: CALL_OW 256
7782: PUSH
7783: LD_INT 1000
7785: LESS
7786: IFFALSE 7878
// begin Say ( Olaf , DO-heal-1 ) ;
7788: LD_EXP 17
7792: PPUSH
7793: LD_STRING DO-heal-1
7795: PPUSH
7796: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7800: LD_EXP 16
7804: PPUSH
7805: LD_INT 51
7807: PPUSH
7808: LD_INT 88
7810: PPUSH
7811: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7815: LD_INT 35
7817: PPUSH
7818: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7822: LD_EXP 16
7826: PPUSH
7827: LD_EXP 17
7831: PPUSH
7832: CALL_OW 296
7836: PUSH
7837: LD_INT 4
7839: LESS
7840: PUSH
7841: LD_EXP 16
7845: PPUSH
7846: LD_INT 51
7848: PPUSH
7849: LD_INT 88
7851: PPUSH
7852: CALL_OW 307
7856: OR
7857: IFFALSE 7815
// SetLives ( Heike , 1000 ) ;
7859: LD_EXP 16
7863: PPUSH
7864: LD_INT 1000
7866: PPUSH
7867: CALL_OW 234
// wait ( 0 0$2 ) ;
7871: LD_INT 70
7873: PPUSH
7874: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7878: LD_EXP 16
7882: PPUSH
7883: LD_STRING DH-quest-done-4
7885: PPUSH
7886: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7890: LD_EXP 17
7894: PPUSH
7895: LD_STRING DO-quest-done-4
7897: PPUSH
7898: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7902: LD_EXP 16
7906: PPUSH
7907: LD_EXP 17
7911: PPUSH
7912: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7916: LD_EXP 16
7920: PPUSH
7921: LD_STRING DH-quest-done-5
7923: PPUSH
7924: CALL_OW 88
// InGameOff ;
7928: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7932: LD_STRING O6_end_cont
7934: PPUSH
7935: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7939: LD_EXP 18
7943: PPUSH
7944: LD_INT 2
7946: PPUSH
7947: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7951: LD_EXP 19
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7963: LD_INT 42
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7976: LD_EXP 17
7980: PPUSH
7981: LD_INT 53
7983: PPUSH
7984: LD_INT 89
7986: PPUSH
7987: CALL_OW 118
// lastObjectiveActive := true ;
7991: LD_ADDR_EXP 12
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 424
// PreparePrison ;
8009: CALL 1171 0 0
// end ;
8013: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8014: LD_INT 22
8016: PUSH
8017: LD_INT 2
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 91
8026: PUSH
8027: LD_INT 2
8029: PUSH
8030: LD_INT 4
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 69
8046: IFFALSE 8228
8048: GO 8050
8050: DISABLE
8051: LD_INT 0
8053: PPUSH
8054: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8055: LD_INT 245
8057: PUSH
8058: LD_INT 210
8060: PUSH
8061: LD_INT 210
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_OWVAR 67
8073: ARRAY
8074: PPUSH
8075: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: LD_INT 22
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 25
8096: PUSH
8097: LD_INT 1
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 54
8106: PUSH
8107: EMPTY
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: PPUSH
8115: CALL_OW 69
8119: ST_TO_ADDR
// if not tmp then
8120: LD_VAR 0 2
8124: NOT
8125: IFFALSE 8129
// exit ;
8127: GO 8228
// for i in tmp do
8129: LD_ADDR_VAR 0 1
8133: PUSH
8134: LD_VAR 0 2
8138: PUSH
8139: FOR_IN
8140: IFFALSE 8168
// begin ComExitBuilding ( i ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8151: LD_VAR 0 1
8155: PPUSH
8156: LD_INT 121
8158: PPUSH
8159: LD_INT 22
8161: PPUSH
8162: CALL_OW 174
// end ;
8166: GO 8139
8168: POP
8169: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8170: LD_EXP 23
8174: PPUSH
8175: LD_INT 121
8177: PPUSH
8178: LD_INT 22
8180: PPUSH
8181: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8185: LD_EXP 24
8189: PPUSH
8190: LD_INT 121
8192: PPUSH
8193: LD_INT 22
8195: PPUSH
8196: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8200: LD_EXP 23
8204: PPUSH
8205: LD_EXP 16
8209: PPUSH
8210: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8214: LD_EXP 24
8218: PPUSH
8219: LD_EXP 16
8223: PPUSH
8224: CALL_OW 175
// end ;
8228: PPOPN 2
8230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8231: LD_INT 22
8233: PUSH
8234: LD_INT 2
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_INT 8
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 69
8263: IFFALSE 8445
8265: GO 8267
8267: DISABLE
8268: LD_INT 0
8270: PPUSH
8271: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8272: LD_INT 280
8274: PUSH
8275: LD_INT 245
8277: PUSH
8278: LD_INT 210
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: LD_OWVAR 67
8290: ARRAY
8291: PPUSH
8292: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8296: LD_ADDR_VAR 0 2
8300: PUSH
8301: LD_INT 22
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 25
8313: PUSH
8314: LD_INT 1
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 54
8323: PUSH
8324: EMPTY
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 69
8336: ST_TO_ADDR
// if not tmp then
8337: LD_VAR 0 2
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8445
// for i in tmp do
8346: LD_ADDR_VAR 0 1
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: FOR_IN
8357: IFFALSE 8385
// begin ComExitBuilding ( i ) ;
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 142
8375: PPUSH
8376: LD_INT 71
8378: PPUSH
8379: CALL_OW 174
// end ;
8383: GO 8356
8385: POP
8386: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8387: LD_EXP 23
8391: PPUSH
8392: LD_INT 142
8394: PPUSH
8395: LD_INT 71
8397: PPUSH
8398: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8402: LD_EXP 24
8406: PPUSH
8407: LD_INT 142
8409: PPUSH
8410: LD_INT 71
8412: PPUSH
8413: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8417: LD_EXP 23
8421: PPUSH
8422: LD_EXP 16
8426: PPUSH
8427: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8431: LD_EXP 24
8435: PPUSH
8436: LD_EXP 16
8440: PPUSH
8441: CALL_OW 175
// end ;
8445: PPOPN 2
8447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8448: LD_INT 22
8450: PUSH
8451: LD_INT 2
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 58
8470: PUSH
8471: EMPTY
8472: LIST
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: LD_INT 24
8479: PUSH
8480: LD_INT 1000
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 91
8493: PUSH
8494: LD_EXP 17
8498: PUSH
8499: LD_INT 8
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: PPUSH
8514: CALL_OW 69
8518: PUSH
8519: LD_EXP 17
8523: PPUSH
8524: CALL_OW 302
8528: AND
8529: IFFALSE 8643
8531: GO 8533
8533: DISABLE
// begin enable ;
8534: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8535: LD_EXP 17
8539: PPUSH
8540: LD_INT 22
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 21
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 58
8562: PUSH
8563: EMPTY
8564: LIST
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 24
8571: PUSH
8572: LD_INT 1000
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: LD_INT 91
8585: PUSH
8586: LD_EXP 17
8590: PUSH
8591: LD_INT 8
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 69
8610: PUSH
8611: LD_INT 1
8613: ARRAY
8614: PPUSH
8615: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8619: LD_EXP 17
8623: PPUSH
8624: LD_INT 52
8626: PPUSH
8627: LD_INT 90
8629: PPUSH
8630: CALL_OW 171
// AddComHold ( Olaf ) ;
8634: LD_EXP 17
8638: PPUSH
8639: CALL_OW 200
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 2
8651: PPUSH
8652: CALL_OW 302
8656: NOT
8657: AND
8658: PUSH
8659: LD_OWVAR 67
8663: PUSH
8664: LD_INT 1
8666: EQUAL
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: CALL_OW 88
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 8
8700: PPUSH
8701: CALL_OW 302
8705: NOT
8706: AND
8707: PUSH
8708: LD_OWVAR 67
8712: PUSH
8713: LD_INT 1
8715: GREATER
8716: AND
8717: PUSH
8718: LD_EXP 13
8722: NOT
8723: AND
8724: IFFALSE 8741
8726: GO 8728
8728: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8729: LD_EXP 16
8733: PPUSH
8734: LD_STRING DH-prison-missing
8736: PPUSH
8737: CALL_OW 88
// end ;
8741: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8742: LD_EXP 12
8746: PUSH
8747: LD_INT 3
8749: PPUSH
8750: CALL_OW 302
8754: NOT
8755: AND
8756: PUSH
8757: LD_EXP 13
8761: NOT
8762: AND
8763: IFFALSE 8780
8765: GO 8767
8767: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8768: LD_EXP 16
8772: PPUSH
8773: LD_STRING DH-prison-missing-a
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8781: LD_EXP 12
8785: PUSH
8786: LD_INT 10
8788: PPUSH
8789: CALL_OW 302
8793: NOT
8794: AND
8795: PUSH
8796: LD_EXP 13
8800: NOT
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8807: LD_EXP 16
8811: PPUSH
8812: LD_STRING DH-prison-missing-a
8814: PPUSH
8815: CALL_OW 88
// end ;
8819: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8820: LD_EXP 13
8824: NOT
8825: PUSH
8826: LD_EXP 12
8830: AND
8831: PUSH
8832: LD_INT 2
8834: PPUSH
8835: LD_EXP 20
8839: PPUSH
8840: CALL_OW 292
8844: AND
8845: IFFALSE 8932
8847: GO 8849
8849: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8850: LD_EXP 20
8854: PPUSH
8855: LD_EXP 16
8859: PPUSH
8860: CALL_OW 119
// DialogueOn ;
8864: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8868: LD_EXP 20
8872: PPUSH
8873: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8877: LD_EXP 20
8881: PPUSH
8882: LD_STRING DK-prison-found
8884: PPUSH
8885: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8889: LD_EXP 16
8893: PPUSH
8894: LD_STRING DH-prison-found
8896: PPUSH
8897: CALL_OW 88
// DialogueOff ;
8901: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8905: LD_EXP 20
8909: PPUSH
8910: LD_INT 2
8912: PPUSH
8913: CALL_OW 235
// prisonFound := true ;
8917: LD_ADDR_EXP 13
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8925: LD_STRING O6_prison_out
8927: PPUSH
8928: CALL_OW 337
// end ;
8932: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8933: LD_EXP 16
8937: PPUSH
8938: CALL_OW 256
8942: PUSH
8943: LD_INT 500
8945: LESS
8946: IFFALSE 8959
8948: GO 8950
8950: DISABLE
// heikeHurt := true ;
8951: LD_ADDR_EXP 14
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
8959: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8960: LD_EXP 12
8964: PUSH
8965: LD_EXP 16
8969: PPUSH
8970: CALL_OW 302
8974: AND
8975: PUSH
8976: LD_INT 1
8978: PPUSH
8979: LD_INT 21
8981: PUSH
8982: LD_INT 1
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_INT 2
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 50
9001: PUSH
9002: EMPTY
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 71
9014: PUSH
9015: LD_INT 0
9017: EQUAL
9018: AND
9019: IFFALSE 9349
9021: GO 9023
9023: DISABLE
9024: LD_INT 0
9026: PPUSH
// begin if not heikeHurt then
9027: LD_EXP 14
9031: NOT
9032: IFFALSE 9041
// SetAchievement ( ACH_INVINCIBLE ) ;
9034: LD_STRING ACH_INVINCIBLE
9036: PPUSH
9037: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: LD_INT 22
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 21
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 50
9068: PUSH
9069: EMPTY
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: ST_TO_ADDR
// if prisonFound then
9082: LD_EXP 13
9086: IFFALSE 9100
// AddMedal ( med1 , 1 ) else
9088: LD_STRING med1
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: CALL_OW 101
9098: GO 9111
// AddMedal ( med1 , - 1 ) ;
9100: LD_STRING med1
9102: PPUSH
9103: LD_INT 1
9105: NEG
9106: PPUSH
9107: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9111: LD_VAR 0 1
9115: PUSH
9116: LD_INT 3
9118: LESS
9119: PUSH
9120: LD_EXP 13
9124: NOT
9125: AND
9126: PUSH
9127: LD_VAR 0 1
9131: PUSH
9132: LD_INT 4
9134: LESS
9135: PUSH
9136: LD_EXP 13
9140: AND
9141: OR
9142: IFFALSE 9157
// AddMedal ( med2 , - 1 ) else
9144: LD_STRING med2
9146: PPUSH
9147: LD_INT 1
9149: NEG
9150: PPUSH
9151: CALL_OW 101
9155: GO 9167
// AddMedal ( med2 , 1 ) ;
9157: LD_STRING med2
9159: PPUSH
9160: LD_INT 1
9162: PPUSH
9163: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9167: LD_EXP 13
9171: PUSH
9172: LD_EXP 4
9176: AND
9177: PUSH
9178: LD_VAR 0 1
9182: PUSH
9183: LD_INT 4
9185: GREATEREQUAL
9186: AND
9187: IFFALSE 9201
// AddMedal ( med3 , 1 ) else
9189: LD_STRING med3
9191: PPUSH
9192: LD_INT 1
9194: PPUSH
9195: CALL_OW 101
9199: GO 9212
// AddMedal ( med3 , - 1 ) ;
9201: LD_STRING med3
9203: PPUSH
9204: LD_INT 1
9206: NEG
9207: PPUSH
9208: CALL_OW 101
// GiveMedals ( MAIN ) ;
9212: LD_STRING MAIN
9214: PPUSH
9215: CALL_OW 102
// RewardPeople ( tmp ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9228: LD_EXP 16
9232: PPUSH
9233: LD_STRING 01_Heike
9235: PPUSH
9236: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9240: LD_EXP 18
9244: PPUSH
9245: CALL_OW 302
9249: PUSH
9250: LD_EXP 18
9254: PUSH
9255: LD_VAR 0 1
9259: IN
9260: AND
9261: IFFALSE 9275
// SaveCharacters ( Givi , 01_Givi ) ;
9263: LD_EXP 18
9267: PPUSH
9268: LD_STRING 01_Givi
9270: PPUSH
9271: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9275: LD_EXP 19
9279: PPUSH
9280: CALL_OW 302
9284: PUSH
9285: LD_EXP 19
9289: PUSH
9290: LD_VAR 0 1
9294: IN
9295: AND
9296: IFFALSE 9310
// SaveCharacters ( Mike , 01_Mike ) ;
9298: LD_EXP 19
9302: PPUSH
9303: LD_STRING 01_Mike
9305: PPUSH
9306: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9310: LD_EXP 20
9314: PPUSH
9315: CALL_OW 302
9319: PUSH
9320: LD_EXP 20
9324: PUSH
9325: LD_VAR 0 1
9329: IN
9330: AND
9331: IFFALSE 9345
// SaveCharacters ( Kamil , 01_Kamil ) ;
9333: LD_EXP 20
9337: PPUSH
9338: LD_STRING 01_Kamil
9340: PPUSH
9341: CALL_OW 38
// YouWin ;
9345: CALL_OW 103
// end ; end_of_file
9349: PPOPN 1
9351: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9352: LD_VAR 0 1
9356: PUSH
9357: LD_EXP 16
9361: EQUAL
9362: IFFALSE 9371
// YouLost ( Heike ) ;
9364: LD_STRING Heike
9366: PPUSH
9367: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9371: LD_VAR 0 1
9375: PUSH
9376: LD_INT 22
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 25
9388: PUSH
9389: LD_INT 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 69
9404: IN
9405: IFFALSE 9511
// begin if un in russianPatrol then
9407: LD_VAR 0 1
9411: PUSH
9412: LD_EXP 21
9416: IN
9417: IFFALSE 9435
// russianPatrol := russianPatrol diff un ;
9419: LD_ADDR_EXP 21
9423: PUSH
9424: LD_EXP 21
9428: PUSH
9429: LD_VAR 0 1
9433: DIFF
9434: ST_TO_ADDR
// if un in russianForestPatrol then
9435: LD_VAR 0 1
9439: PUSH
9440: LD_EXP 22
9444: IN
9445: IFFALSE 9463
// russianForestPatrol := russianForestPatrol diff un ;
9447: LD_ADDR_EXP 22
9451: PUSH
9452: LD_EXP 22
9456: PUSH
9457: LD_VAR 0 1
9461: DIFF
9462: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9463: LD_ADDR_EXP 5
9467: PUSH
9468: LD_EXP 5
9472: PPUSH
9473: LD_EXP 5
9477: PUSH
9478: LD_INT 1
9480: PLUS
9481: PPUSH
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL_OW 250
9491: PUSH
9492: LD_VAR 0 1
9496: PPUSH
9497: CALL_OW 251
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 1
9510: ST_TO_ADDR
// end ; end ;
9511: PPOPN 1
9513: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9514: LD_VAR 0 1
9518: PUSH
9519: LD_EXP 16
9523: EQUAL
9524: IFFALSE 9533
// YouLost ( Heike ) ;
9526: LD_STRING Heike
9528: PPUSH
9529: CALL_OW 104
// end ;
9533: PPOPN 1
9535: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9536: LD_VAR 0 1
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: IN
9551: PUSH
9552: LD_VAR 0 2
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 2
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: IN
9567: AND
9568: IFFALSE 9577
// YouLost ( FriendlyFire ) ;
9570: LD_STRING FriendlyFire
9572: PPUSH
9573: CALL_OW 104
// end ; end_of_file
9577: PPOPN 2
9579: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9580: GO 9582
9582: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9583: LD_STRING initStreamRollete();
9585: PPUSH
9586: CALL_OW 559
// InitStreamMode ;
9590: CALL 9599 0 0
// DefineStreamItems ( ) ;
9594: CALL 10039 0 0
// end ;
9598: END
// function InitStreamMode ; begin
9599: LD_INT 0
9601: PPUSH
// streamModeActive := false ;
9602: LD_ADDR_EXP 26
9606: PUSH
9607: LD_INT 0
9609: ST_TO_ADDR
// normalCounter := 36 ;
9610: LD_ADDR_EXP 27
9614: PUSH
9615: LD_INT 36
9617: ST_TO_ADDR
// hardcoreCounter := 16 ;
9618: LD_ADDR_EXP 28
9622: PUSH
9623: LD_INT 16
9625: ST_TO_ADDR
// sRocket := false ;
9626: LD_ADDR_EXP 31
9630: PUSH
9631: LD_INT 0
9633: ST_TO_ADDR
// sSpeed := false ;
9634: LD_ADDR_EXP 30
9638: PUSH
9639: LD_INT 0
9641: ST_TO_ADDR
// sEngine := false ;
9642: LD_ADDR_EXP 32
9646: PUSH
9647: LD_INT 0
9649: ST_TO_ADDR
// sSpec := false ;
9650: LD_ADDR_EXP 29
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// sLevel := false ;
9658: LD_ADDR_EXP 33
9662: PUSH
9663: LD_INT 0
9665: ST_TO_ADDR
// sArmoury := false ;
9666: LD_ADDR_EXP 34
9670: PUSH
9671: LD_INT 0
9673: ST_TO_ADDR
// sRadar := false ;
9674: LD_ADDR_EXP 35
9678: PUSH
9679: LD_INT 0
9681: ST_TO_ADDR
// sBunker := false ;
9682: LD_ADDR_EXP 36
9686: PUSH
9687: LD_INT 0
9689: ST_TO_ADDR
// sHack := false ;
9690: LD_ADDR_EXP 37
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// sFire := false ;
9698: LD_ADDR_EXP 38
9702: PUSH
9703: LD_INT 0
9705: ST_TO_ADDR
// sRefresh := false ;
9706: LD_ADDR_EXP 39
9710: PUSH
9711: LD_INT 0
9713: ST_TO_ADDR
// sExp := false ;
9714: LD_ADDR_EXP 40
9718: PUSH
9719: LD_INT 0
9721: ST_TO_ADDR
// sDepot := false ;
9722: LD_ADDR_EXP 41
9726: PUSH
9727: LD_INT 0
9729: ST_TO_ADDR
// sFlag := false ;
9730: LD_ADDR_EXP 42
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// sKamikadze := false ;
9738: LD_ADDR_EXP 50
9742: PUSH
9743: LD_INT 0
9745: ST_TO_ADDR
// sTroll := false ;
9746: LD_ADDR_EXP 51
9750: PUSH
9751: LD_INT 0
9753: ST_TO_ADDR
// sSlow := false ;
9754: LD_ADDR_EXP 52
9758: PUSH
9759: LD_INT 0
9761: ST_TO_ADDR
// sLack := false ;
9762: LD_ADDR_EXP 53
9766: PUSH
9767: LD_INT 0
9769: ST_TO_ADDR
// sTank := false ;
9770: LD_ADDR_EXP 55
9774: PUSH
9775: LD_INT 0
9777: ST_TO_ADDR
// sRemote := false ;
9778: LD_ADDR_EXP 56
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// sPowell := false ;
9786: LD_ADDR_EXP 57
9790: PUSH
9791: LD_INT 0
9793: ST_TO_ADDR
// sTeleport := false ;
9794: LD_ADDR_EXP 60
9798: PUSH
9799: LD_INT 0
9801: ST_TO_ADDR
// sOilTower := false ;
9802: LD_ADDR_EXP 62
9806: PUSH
9807: LD_INT 0
9809: ST_TO_ADDR
// sShovel := false ;
9810: LD_ADDR_EXP 63
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// sSheik := false ;
9818: LD_ADDR_EXP 64
9822: PUSH
9823: LD_INT 0
9825: ST_TO_ADDR
// sEarthquake := false ;
9826: LD_ADDR_EXP 66
9830: PUSH
9831: LD_INT 0
9833: ST_TO_ADDR
// sAI := false ;
9834: LD_ADDR_EXP 67
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// sCargo := false ;
9842: LD_ADDR_EXP 70
9846: PUSH
9847: LD_INT 0
9849: ST_TO_ADDR
// sDLaser := false ;
9850: LD_ADDR_EXP 71
9854: PUSH
9855: LD_INT 0
9857: ST_TO_ADDR
// sExchange := false ;
9858: LD_ADDR_EXP 72
9862: PUSH
9863: LD_INT 0
9865: ST_TO_ADDR
// sFac := false ;
9866: LD_ADDR_EXP 73
9870: PUSH
9871: LD_INT 0
9873: ST_TO_ADDR
// sPower := false ;
9874: LD_ADDR_EXP 74
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// sRandom := false ;
9882: LD_ADDR_EXP 75
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// sShield := false ;
9890: LD_ADDR_EXP 76
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// sTime := false ;
9898: LD_ADDR_EXP 77
9902: PUSH
9903: LD_INT 0
9905: ST_TO_ADDR
// sTools := false ;
9906: LD_ADDR_EXP 78
9910: PUSH
9911: LD_INT 0
9913: ST_TO_ADDR
// sSold := false ;
9914: LD_ADDR_EXP 43
9918: PUSH
9919: LD_INT 0
9921: ST_TO_ADDR
// sDiff := false ;
9922: LD_ADDR_EXP 44
9926: PUSH
9927: LD_INT 0
9929: ST_TO_ADDR
// sFog := false ;
9930: LD_ADDR_EXP 47
9934: PUSH
9935: LD_INT 0
9937: ST_TO_ADDR
// sReset := false ;
9938: LD_ADDR_EXP 48
9942: PUSH
9943: LD_INT 0
9945: ST_TO_ADDR
// sSun := false ;
9946: LD_ADDR_EXP 49
9950: PUSH
9951: LD_INT 0
9953: ST_TO_ADDR
// sTiger := false ;
9954: LD_ADDR_EXP 45
9958: PUSH
9959: LD_INT 0
9961: ST_TO_ADDR
// sBomb := false ;
9962: LD_ADDR_EXP 46
9966: PUSH
9967: LD_INT 0
9969: ST_TO_ADDR
// sWound := false ;
9970: LD_ADDR_EXP 54
9974: PUSH
9975: LD_INT 0
9977: ST_TO_ADDR
// sBetray := false ;
9978: LD_ADDR_EXP 58
9982: PUSH
9983: LD_INT 0
9985: ST_TO_ADDR
// sContamin := false ;
9986: LD_ADDR_EXP 59
9990: PUSH
9991: LD_INT 0
9993: ST_TO_ADDR
// sOil := false ;
9994: LD_ADDR_EXP 61
9998: PUSH
9999: LD_INT 0
10001: ST_TO_ADDR
// sStu := false ;
10002: LD_ADDR_EXP 65
10006: PUSH
10007: LD_INT 0
10009: ST_TO_ADDR
// sBazooka := false ;
10010: LD_ADDR_EXP 68
10014: PUSH
10015: LD_INT 0
10017: ST_TO_ADDR
// sMortar := false ;
10018: LD_ADDR_EXP 69
10022: PUSH
10023: LD_INT 0
10025: ST_TO_ADDR
// sRanger := false ;
10026: LD_ADDR_EXP 79
10030: PUSH
10031: LD_INT 0
10033: ST_TO_ADDR
// end ;
10034: LD_VAR 0 1
10038: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10039: LD_INT 0
10041: PPUSH
10042: PPUSH
10043: PPUSH
10044: PPUSH
10045: PPUSH
// result := [ ] ;
10046: LD_ADDR_VAR 0 1
10050: PUSH
10051: EMPTY
10052: ST_TO_ADDR
// if campaign_id = 1 then
10053: LD_OWVAR 69
10057: PUSH
10058: LD_INT 1
10060: EQUAL
10061: IFFALSE 12999
// begin case mission_number of 1 :
10063: LD_OWVAR 70
10067: PUSH
10068: LD_INT 1
10070: DOUBLE
10071: EQUAL
10072: IFTRUE 10076
10074: GO 10140
10076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10077: LD_ADDR_VAR 0 1
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: LD_INT 4
10087: PUSH
10088: LD_INT 11
10090: PUSH
10091: LD_INT 12
10093: PUSH
10094: LD_INT 15
10096: PUSH
10097: LD_INT 16
10099: PUSH
10100: LD_INT 22
10102: PUSH
10103: LD_INT 23
10105: PUSH
10106: LD_INT 26
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 101
10122: PUSH
10123: LD_INT 102
10125: PUSH
10126: LD_INT 106
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: ST_TO_ADDR
10138: GO 12997
10140: LD_INT 2
10142: DOUBLE
10143: EQUAL
10144: IFTRUE 10148
10146: GO 10220
10148: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10149: LD_ADDR_VAR 0 1
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: LD_INT 4
10159: PUSH
10160: LD_INT 11
10162: PUSH
10163: LD_INT 12
10165: PUSH
10166: LD_INT 15
10168: PUSH
10169: LD_INT 16
10171: PUSH
10172: LD_INT 22
10174: PUSH
10175: LD_INT 23
10177: PUSH
10178: LD_INT 26
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 101
10194: PUSH
10195: LD_INT 102
10197: PUSH
10198: LD_INT 105
10200: PUSH
10201: LD_INT 106
10203: PUSH
10204: LD_INT 108
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: ST_TO_ADDR
10218: GO 12997
10220: LD_INT 3
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10304
10228: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10229: LD_ADDR_VAR 0 1
10233: PUSH
10234: LD_INT 2
10236: PUSH
10237: LD_INT 4
10239: PUSH
10240: LD_INT 5
10242: PUSH
10243: LD_INT 11
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: LD_INT 15
10251: PUSH
10252: LD_INT 16
10254: PUSH
10255: LD_INT 22
10257: PUSH
10258: LD_INT 26
10260: PUSH
10261: LD_INT 36
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 101
10278: PUSH
10279: LD_INT 102
10281: PUSH
10282: LD_INT 105
10284: PUSH
10285: LD_INT 106
10287: PUSH
10288: LD_INT 108
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: ST_TO_ADDR
10302: GO 12997
10304: LD_INT 4
10306: DOUBLE
10307: EQUAL
10308: IFTRUE 10312
10310: GO 10396
10312: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10313: LD_ADDR_VAR 0 1
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: LD_INT 5
10326: PUSH
10327: LD_INT 8
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 15
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_INT 23
10347: PUSH
10348: LD_INT 26
10350: PUSH
10351: LD_INT 36
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 101
10370: PUSH
10371: LD_INT 102
10373: PUSH
10374: LD_INT 105
10376: PUSH
10377: LD_INT 106
10379: PUSH
10380: LD_INT 108
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: ST_TO_ADDR
10394: GO 12997
10396: LD_INT 5
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 10504
10404: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 4
10415: PUSH
10416: LD_INT 5
10418: PUSH
10419: LD_INT 6
10421: PUSH
10422: LD_INT 8
10424: PUSH
10425: LD_INT 11
10427: PUSH
10428: LD_INT 12
10430: PUSH
10431: LD_INT 15
10433: PUSH
10434: LD_INT 16
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_INT 23
10442: PUSH
10443: LD_INT 25
10445: PUSH
10446: LD_INT 26
10448: PUSH
10449: LD_INT 36
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 101
10470: PUSH
10471: LD_INT 102
10473: PUSH
10474: LD_INT 105
10476: PUSH
10477: LD_INT 106
10479: PUSH
10480: LD_INT 108
10482: PUSH
10483: LD_INT 109
10485: PUSH
10486: LD_INT 112
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: ST_TO_ADDR
10502: GO 12997
10504: LD_INT 6
10506: DOUBLE
10507: EQUAL
10508: IFTRUE 10512
10510: GO 10632
10512: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 2
10520: PUSH
10521: LD_INT 4
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: LD_INT 6
10529: PUSH
10530: LD_INT 8
10532: PUSH
10533: LD_INT 11
10535: PUSH
10536: LD_INT 12
10538: PUSH
10539: LD_INT 15
10541: PUSH
10542: LD_INT 16
10544: PUSH
10545: LD_INT 20
10547: PUSH
10548: LD_INT 21
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 23
10556: PUSH
10557: LD_INT 25
10559: PUSH
10560: LD_INT 26
10562: PUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 31
10568: PUSH
10569: LD_INT 32
10571: PUSH
10572: LD_INT 36
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 101
10598: PUSH
10599: LD_INT 102
10601: PUSH
10602: LD_INT 105
10604: PUSH
10605: LD_INT 106
10607: PUSH
10608: LD_INT 108
10610: PUSH
10611: LD_INT 109
10613: PUSH
10614: LD_INT 112
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: ST_TO_ADDR
10630: GO 12997
10632: LD_INT 7
10634: DOUBLE
10635: EQUAL
10636: IFTRUE 10640
10638: GO 10740
10640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10641: LD_ADDR_VAR 0 1
10645: PUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 4
10651: PUSH
10652: LD_INT 5
10654: PUSH
10655: LD_INT 7
10657: PUSH
10658: LD_INT 11
10660: PUSH
10661: LD_INT 12
10663: PUSH
10664: LD_INT 15
10666: PUSH
10667: LD_INT 16
10669: PUSH
10670: LD_INT 20
10672: PUSH
10673: LD_INT 21
10675: PUSH
10676: LD_INT 22
10678: PUSH
10679: LD_INT 23
10681: PUSH
10682: LD_INT 25
10684: PUSH
10685: LD_INT 26
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 102
10709: PUSH
10710: LD_INT 103
10712: PUSH
10713: LD_INT 105
10715: PUSH
10716: LD_INT 106
10718: PUSH
10719: LD_INT 108
10721: PUSH
10722: LD_INT 112
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: ST_TO_ADDR
10738: GO 12997
10740: LD_INT 8
10742: DOUBLE
10743: EQUAL
10744: IFTRUE 10748
10746: GO 10876
10748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10749: LD_ADDR_VAR 0 1
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 4
10759: PUSH
10760: LD_INT 5
10762: PUSH
10763: LD_INT 6
10765: PUSH
10766: LD_INT 7
10768: PUSH
10769: LD_INT 8
10771: PUSH
10772: LD_INT 11
10774: PUSH
10775: LD_INT 12
10777: PUSH
10778: LD_INT 15
10780: PUSH
10781: LD_INT 16
10783: PUSH
10784: LD_INT 20
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 23
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 26
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 31
10807: PUSH
10808: LD_INT 32
10810: PUSH
10811: LD_INT 36
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 101
10838: PUSH
10839: LD_INT 102
10841: PUSH
10842: LD_INT 103
10844: PUSH
10845: LD_INT 105
10847: PUSH
10848: LD_INT 106
10850: PUSH
10851: LD_INT 108
10853: PUSH
10854: LD_INT 109
10856: PUSH
10857: LD_INT 112
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: ST_TO_ADDR
10874: GO 12997
10876: LD_INT 9
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 11020
10884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10885: LD_ADDR_VAR 0 1
10889: PUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 4
10895: PUSH
10896: LD_INT 5
10898: PUSH
10899: LD_INT 6
10901: PUSH
10902: LD_INT 7
10904: PUSH
10905: LD_INT 8
10907: PUSH
10908: LD_INT 11
10910: PUSH
10911: LD_INT 12
10913: PUSH
10914: LD_INT 15
10916: PUSH
10917: LD_INT 16
10919: PUSH
10920: LD_INT 20
10922: PUSH
10923: LD_INT 21
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 26
10937: PUSH
10938: LD_INT 28
10940: PUSH
10941: LD_INT 30
10943: PUSH
10944: LD_INT 31
10946: PUSH
10947: LD_INT 32
10949: PUSH
10950: LD_INT 36
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 101
10978: PUSH
10979: LD_INT 102
10981: PUSH
10982: LD_INT 103
10984: PUSH
10985: LD_INT 105
10987: PUSH
10988: LD_INT 106
10990: PUSH
10991: LD_INT 108
10993: PUSH
10994: LD_INT 109
10996: PUSH
10997: LD_INT 112
10999: PUSH
11000: LD_INT 114
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: ST_TO_ADDR
11018: GO 12997
11020: LD_INT 10
11022: DOUBLE
11023: EQUAL
11024: IFTRUE 11028
11026: GO 11212
11028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11029: LD_ADDR_VAR 0 1
11033: PUSH
11034: LD_INT 2
11036: PUSH
11037: LD_INT 4
11039: PUSH
11040: LD_INT 5
11042: PUSH
11043: LD_INT 6
11045: PUSH
11046: LD_INT 7
11048: PUSH
11049: LD_INT 8
11051: PUSH
11052: LD_INT 9
11054: PUSH
11055: LD_INT 10
11057: PUSH
11058: LD_INT 11
11060: PUSH
11061: LD_INT 12
11063: PUSH
11064: LD_INT 13
11066: PUSH
11067: LD_INT 14
11069: PUSH
11070: LD_INT 15
11072: PUSH
11073: LD_INT 16
11075: PUSH
11076: LD_INT 17
11078: PUSH
11079: LD_INT 18
11081: PUSH
11082: LD_INT 19
11084: PUSH
11085: LD_INT 20
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 22
11093: PUSH
11094: LD_INT 23
11096: PUSH
11097: LD_INT 24
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 26
11105: PUSH
11106: LD_INT 28
11108: PUSH
11109: LD_INT 30
11111: PUSH
11112: LD_INT 31
11114: PUSH
11115: LD_INT 32
11117: PUSH
11118: LD_INT 36
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: PUSH
11152: LD_INT 101
11154: PUSH
11155: LD_INT 102
11157: PUSH
11158: LD_INT 103
11160: PUSH
11161: LD_INT 104
11163: PUSH
11164: LD_INT 105
11166: PUSH
11167: LD_INT 106
11169: PUSH
11170: LD_INT 107
11172: PUSH
11173: LD_INT 108
11175: PUSH
11176: LD_INT 109
11178: PUSH
11179: LD_INT 110
11181: PUSH
11182: LD_INT 111
11184: PUSH
11185: LD_INT 112
11187: PUSH
11188: LD_INT 114
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: ST_TO_ADDR
11210: GO 12997
11212: LD_INT 11
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11412
11220: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 3
11231: PUSH
11232: LD_INT 4
11234: PUSH
11235: LD_INT 5
11237: PUSH
11238: LD_INT 6
11240: PUSH
11241: LD_INT 7
11243: PUSH
11244: LD_INT 8
11246: PUSH
11247: LD_INT 9
11249: PUSH
11250: LD_INT 10
11252: PUSH
11253: LD_INT 11
11255: PUSH
11256: LD_INT 12
11258: PUSH
11259: LD_INT 13
11261: PUSH
11262: LD_INT 14
11264: PUSH
11265: LD_INT 15
11267: PUSH
11268: LD_INT 16
11270: PUSH
11271: LD_INT 17
11273: PUSH
11274: LD_INT 18
11276: PUSH
11277: LD_INT 19
11279: PUSH
11280: LD_INT 20
11282: PUSH
11283: LD_INT 21
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_INT 23
11291: PUSH
11292: LD_INT 24
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 26
11300: PUSH
11301: LD_INT 28
11303: PUSH
11304: LD_INT 30
11306: PUSH
11307: LD_INT 31
11309: PUSH
11310: LD_INT 32
11312: PUSH
11313: LD_INT 34
11315: PUSH
11316: LD_INT 36
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 101
11354: PUSH
11355: LD_INT 102
11357: PUSH
11358: LD_INT 103
11360: PUSH
11361: LD_INT 104
11363: PUSH
11364: LD_INT 105
11366: PUSH
11367: LD_INT 106
11369: PUSH
11370: LD_INT 107
11372: PUSH
11373: LD_INT 108
11375: PUSH
11376: LD_INT 109
11378: PUSH
11379: LD_INT 110
11381: PUSH
11382: LD_INT 111
11384: PUSH
11385: LD_INT 112
11387: PUSH
11388: LD_INT 114
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: ST_TO_ADDR
11410: GO 12997
11412: LD_INT 12
11414: DOUBLE
11415: EQUAL
11416: IFTRUE 11420
11418: GO 11628
11420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 1
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: LD_INT 3
11434: PUSH
11435: LD_INT 4
11437: PUSH
11438: LD_INT 5
11440: PUSH
11441: LD_INT 6
11443: PUSH
11444: LD_INT 7
11446: PUSH
11447: LD_INT 8
11449: PUSH
11450: LD_INT 9
11452: PUSH
11453: LD_INT 10
11455: PUSH
11456: LD_INT 11
11458: PUSH
11459: LD_INT 12
11461: PUSH
11462: LD_INT 13
11464: PUSH
11465: LD_INT 14
11467: PUSH
11468: LD_INT 15
11470: PUSH
11471: LD_INT 16
11473: PUSH
11474: LD_INT 17
11476: PUSH
11477: LD_INT 18
11479: PUSH
11480: LD_INT 19
11482: PUSH
11483: LD_INT 20
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_INT 23
11494: PUSH
11495: LD_INT 24
11497: PUSH
11498: LD_INT 25
11500: PUSH
11501: LD_INT 26
11503: PUSH
11504: LD_INT 27
11506: PUSH
11507: LD_INT 28
11509: PUSH
11510: LD_INT 30
11512: PUSH
11513: LD_INT 31
11515: PUSH
11516: LD_INT 32
11518: PUSH
11519: LD_INT 33
11521: PUSH
11522: LD_INT 34
11524: PUSH
11525: LD_INT 36
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 101
11566: PUSH
11567: LD_INT 102
11569: PUSH
11570: LD_INT 103
11572: PUSH
11573: LD_INT 104
11575: PUSH
11576: LD_INT 105
11578: PUSH
11579: LD_INT 106
11581: PUSH
11582: LD_INT 107
11584: PUSH
11585: LD_INT 108
11587: PUSH
11588: LD_INT 109
11590: PUSH
11591: LD_INT 110
11593: PUSH
11594: LD_INT 111
11596: PUSH
11597: LD_INT 112
11599: PUSH
11600: LD_INT 113
11602: PUSH
11603: LD_INT 114
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: ST_TO_ADDR
11626: GO 12997
11628: LD_INT 13
11630: DOUBLE
11631: EQUAL
11632: IFTRUE 11636
11634: GO 11832
11636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: LD_INT 8
11659: PUSH
11660: LD_INT 9
11662: PUSH
11663: LD_INT 10
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 14
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: LD_INT 16
11680: PUSH
11681: LD_INT 17
11683: PUSH
11684: LD_INT 18
11686: PUSH
11687: LD_INT 19
11689: PUSH
11690: LD_INT 20
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 22
11698: PUSH
11699: LD_INT 23
11701: PUSH
11702: LD_INT 24
11704: PUSH
11705: LD_INT 25
11707: PUSH
11708: LD_INT 26
11710: PUSH
11711: LD_INT 27
11713: PUSH
11714: LD_INT 28
11716: PUSH
11717: LD_INT 30
11719: PUSH
11720: LD_INT 31
11722: PUSH
11723: LD_INT 32
11725: PUSH
11726: LD_INT 33
11728: PUSH
11729: LD_INT 34
11731: PUSH
11732: LD_INT 36
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 101
11770: PUSH
11771: LD_INT 102
11773: PUSH
11774: LD_INT 103
11776: PUSH
11777: LD_INT 104
11779: PUSH
11780: LD_INT 105
11782: PUSH
11783: LD_INT 106
11785: PUSH
11786: LD_INT 107
11788: PUSH
11789: LD_INT 108
11791: PUSH
11792: LD_INT 109
11794: PUSH
11795: LD_INT 110
11797: PUSH
11798: LD_INT 111
11800: PUSH
11801: LD_INT 112
11803: PUSH
11804: LD_INT 113
11806: PUSH
11807: LD_INT 114
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 12997
11832: LD_INT 14
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 12052
11840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: LD_INT 3
11854: PUSH
11855: LD_INT 4
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: LD_INT 6
11863: PUSH
11864: LD_INT 7
11866: PUSH
11867: LD_INT 8
11869: PUSH
11870: LD_INT 9
11872: PUSH
11873: LD_INT 10
11875: PUSH
11876: LD_INT 11
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 13
11884: PUSH
11885: LD_INT 14
11887: PUSH
11888: LD_INT 15
11890: PUSH
11891: LD_INT 16
11893: PUSH
11894: LD_INT 17
11896: PUSH
11897: LD_INT 18
11899: PUSH
11900: LD_INT 19
11902: PUSH
11903: LD_INT 20
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 22
11911: PUSH
11912: LD_INT 23
11914: PUSH
11915: LD_INT 24
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 26
11923: PUSH
11924: LD_INT 27
11926: PUSH
11927: LD_INT 28
11929: PUSH
11930: LD_INT 29
11932: PUSH
11933: LD_INT 30
11935: PUSH
11936: LD_INT 31
11938: PUSH
11939: LD_INT 32
11941: PUSH
11942: LD_INT 33
11944: PUSH
11945: LD_INT 34
11947: PUSH
11948: LD_INT 36
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 101
11990: PUSH
11991: LD_INT 102
11993: PUSH
11994: LD_INT 103
11996: PUSH
11997: LD_INT 104
11999: PUSH
12000: LD_INT 105
12002: PUSH
12003: LD_INT 106
12005: PUSH
12006: LD_INT 107
12008: PUSH
12009: LD_INT 108
12011: PUSH
12012: LD_INT 109
12014: PUSH
12015: LD_INT 110
12017: PUSH
12018: LD_INT 111
12020: PUSH
12021: LD_INT 112
12023: PUSH
12024: LD_INT 113
12026: PUSH
12027: LD_INT 114
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: ST_TO_ADDR
12050: GO 12997
12052: LD_INT 15
12054: DOUBLE
12055: EQUAL
12056: IFTRUE 12060
12058: GO 12272
12060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12061: LD_ADDR_VAR 0 1
12065: PUSH
12066: LD_INT 1
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 3
12074: PUSH
12075: LD_INT 4
12077: PUSH
12078: LD_INT 5
12080: PUSH
12081: LD_INT 6
12083: PUSH
12084: LD_INT 7
12086: PUSH
12087: LD_INT 8
12089: PUSH
12090: LD_INT 9
12092: PUSH
12093: LD_INT 10
12095: PUSH
12096: LD_INT 11
12098: PUSH
12099: LD_INT 12
12101: PUSH
12102: LD_INT 13
12104: PUSH
12105: LD_INT 14
12107: PUSH
12108: LD_INT 15
12110: PUSH
12111: LD_INT 16
12113: PUSH
12114: LD_INT 17
12116: PUSH
12117: LD_INT 18
12119: PUSH
12120: LD_INT 19
12122: PUSH
12123: LD_INT 20
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 24
12137: PUSH
12138: LD_INT 25
12140: PUSH
12141: LD_INT 26
12143: PUSH
12144: LD_INT 27
12146: PUSH
12147: LD_INT 28
12149: PUSH
12150: LD_INT 29
12152: PUSH
12153: LD_INT 30
12155: PUSH
12156: LD_INT 31
12158: PUSH
12159: LD_INT 32
12161: PUSH
12162: LD_INT 33
12164: PUSH
12165: LD_INT 34
12167: PUSH
12168: LD_INT 36
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 101
12210: PUSH
12211: LD_INT 102
12213: PUSH
12214: LD_INT 103
12216: PUSH
12217: LD_INT 104
12219: PUSH
12220: LD_INT 105
12222: PUSH
12223: LD_INT 106
12225: PUSH
12226: LD_INT 107
12228: PUSH
12229: LD_INT 108
12231: PUSH
12232: LD_INT 109
12234: PUSH
12235: LD_INT 110
12237: PUSH
12238: LD_INT 111
12240: PUSH
12241: LD_INT 112
12243: PUSH
12244: LD_INT 113
12246: PUSH
12247: LD_INT 114
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: ST_TO_ADDR
12270: GO 12997
12272: LD_INT 16
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12404
12280: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12281: LD_ADDR_VAR 0 1
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 5
12294: PUSH
12295: LD_INT 7
12297: PUSH
12298: LD_INT 11
12300: PUSH
12301: LD_INT 12
12303: PUSH
12304: LD_INT 15
12306: PUSH
12307: LD_INT 16
12309: PUSH
12310: LD_INT 20
12312: PUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_INT 23
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 26
12327: PUSH
12328: LD_INT 30
12330: PUSH
12331: LD_INT 31
12333: PUSH
12334: LD_INT 32
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 34
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 101
12366: PUSH
12367: LD_INT 102
12369: PUSH
12370: LD_INT 103
12372: PUSH
12373: LD_INT 106
12375: PUSH
12376: LD_INT 108
12378: PUSH
12379: LD_INT 112
12381: PUSH
12382: LD_INT 113
12384: PUSH
12385: LD_INT 114
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 12997
12404: LD_INT 17
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12624
12412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12413: LD_ADDR_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: LD_INT 4
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: LD_INT 6
12435: PUSH
12436: LD_INT 7
12438: PUSH
12439: LD_INT 8
12441: PUSH
12442: LD_INT 9
12444: PUSH
12445: LD_INT 10
12447: PUSH
12448: LD_INT 11
12450: PUSH
12451: LD_INT 12
12453: PUSH
12454: LD_INT 13
12456: PUSH
12457: LD_INT 14
12459: PUSH
12460: LD_INT 15
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: LD_INT 17
12468: PUSH
12469: LD_INT 18
12471: PUSH
12472: LD_INT 19
12474: PUSH
12475: LD_INT 20
12477: PUSH
12478: LD_INT 21
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 23
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 26
12495: PUSH
12496: LD_INT 27
12498: PUSH
12499: LD_INT 28
12501: PUSH
12502: LD_INT 29
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 33
12516: PUSH
12517: LD_INT 34
12519: PUSH
12520: LD_INT 36
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 104
12571: PUSH
12572: LD_INT 105
12574: PUSH
12575: LD_INT 106
12577: PUSH
12578: LD_INT 107
12580: PUSH
12581: LD_INT 108
12583: PUSH
12584: LD_INT 109
12586: PUSH
12587: LD_INT 110
12589: PUSH
12590: LD_INT 111
12592: PUSH
12593: LD_INT 112
12595: PUSH
12596: LD_INT 113
12598: PUSH
12599: LD_INT 114
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: ST_TO_ADDR
12622: GO 12997
12624: LD_INT 18
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12768
12632: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_INT 2
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: LD_INT 5
12646: PUSH
12647: LD_INT 7
12649: PUSH
12650: LD_INT 11
12652: PUSH
12653: LD_INT 12
12655: PUSH
12656: LD_INT 15
12658: PUSH
12659: LD_INT 16
12661: PUSH
12662: LD_INT 20
12664: PUSH
12665: LD_INT 21
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_INT 23
12673: PUSH
12674: LD_INT 25
12676: PUSH
12677: LD_INT 26
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 31
12685: PUSH
12686: LD_INT 32
12688: PUSH
12689: LD_INT 33
12691: PUSH
12692: LD_INT 34
12694: PUSH
12695: LD_INT 35
12697: PUSH
12698: LD_INT 36
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 101
12726: PUSH
12727: LD_INT 102
12729: PUSH
12730: LD_INT 103
12732: PUSH
12733: LD_INT 106
12735: PUSH
12736: LD_INT 108
12738: PUSH
12739: LD_INT 112
12741: PUSH
12742: LD_INT 113
12744: PUSH
12745: LD_INT 114
12747: PUSH
12748: LD_INT 115
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: ST_TO_ADDR
12766: GO 12997
12768: LD_INT 19
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12996
12776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 1
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: LD_INT 4
12793: PUSH
12794: LD_INT 5
12796: PUSH
12797: LD_INT 6
12799: PUSH
12800: LD_INT 7
12802: PUSH
12803: LD_INT 8
12805: PUSH
12806: LD_INT 9
12808: PUSH
12809: LD_INT 10
12811: PUSH
12812: LD_INT 11
12814: PUSH
12815: LD_INT 12
12817: PUSH
12818: LD_INT 13
12820: PUSH
12821: LD_INT 14
12823: PUSH
12824: LD_INT 15
12826: PUSH
12827: LD_INT 16
12829: PUSH
12830: LD_INT 17
12832: PUSH
12833: LD_INT 18
12835: PUSH
12836: LD_INT 19
12838: PUSH
12839: LD_INT 20
12841: PUSH
12842: LD_INT 21
12844: PUSH
12845: LD_INT 22
12847: PUSH
12848: LD_INT 23
12850: PUSH
12851: LD_INT 24
12853: PUSH
12854: LD_INT 25
12856: PUSH
12857: LD_INT 26
12859: PUSH
12860: LD_INT 27
12862: PUSH
12863: LD_INT 28
12865: PUSH
12866: LD_INT 29
12868: PUSH
12869: LD_INT 30
12871: PUSH
12872: LD_INT 31
12874: PUSH
12875: LD_INT 32
12877: PUSH
12878: LD_INT 33
12880: PUSH
12881: LD_INT 34
12883: PUSH
12884: LD_INT 35
12886: PUSH
12887: LD_INT 36
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 101
12930: PUSH
12931: LD_INT 102
12933: PUSH
12934: LD_INT 103
12936: PUSH
12937: LD_INT 104
12939: PUSH
12940: LD_INT 105
12942: PUSH
12943: LD_INT 106
12945: PUSH
12946: LD_INT 107
12948: PUSH
12949: LD_INT 108
12951: PUSH
12952: LD_INT 109
12954: PUSH
12955: LD_INT 110
12957: PUSH
12958: LD_INT 111
12960: PUSH
12961: LD_INT 112
12963: PUSH
12964: LD_INT 113
12966: PUSH
12967: LD_INT 114
12969: PUSH
12970: LD_INT 115
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 12997
12996: POP
// end else
12997: GO 13216
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12999: LD_ADDR_VAR 0 1
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 6
13021: PUSH
13022: LD_INT 7
13024: PUSH
13025: LD_INT 8
13027: PUSH
13028: LD_INT 9
13030: PUSH
13031: LD_INT 10
13033: PUSH
13034: LD_INT 11
13036: PUSH
13037: LD_INT 12
13039: PUSH
13040: LD_INT 13
13042: PUSH
13043: LD_INT 14
13045: PUSH
13046: LD_INT 15
13048: PUSH
13049: LD_INT 16
13051: PUSH
13052: LD_INT 17
13054: PUSH
13055: LD_INT 18
13057: PUSH
13058: LD_INT 19
13060: PUSH
13061: LD_INT 20
13063: PUSH
13064: LD_INT 21
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 23
13072: PUSH
13073: LD_INT 24
13075: PUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 26
13081: PUSH
13082: LD_INT 27
13084: PUSH
13085: LD_INT 28
13087: PUSH
13088: LD_INT 29
13090: PUSH
13091: LD_INT 30
13093: PUSH
13094: LD_INT 31
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: LD_INT 33
13102: PUSH
13103: LD_INT 34
13105: PUSH
13106: LD_INT 35
13108: PUSH
13109: LD_INT 36
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 101
13152: PUSH
13153: LD_INT 102
13155: PUSH
13156: LD_INT 103
13158: PUSH
13159: LD_INT 104
13161: PUSH
13162: LD_INT 105
13164: PUSH
13165: LD_INT 106
13167: PUSH
13168: LD_INT 107
13170: PUSH
13171: LD_INT 108
13173: PUSH
13174: LD_INT 109
13176: PUSH
13177: LD_INT 110
13179: PUSH
13180: LD_INT 111
13182: PUSH
13183: LD_INT 112
13185: PUSH
13186: LD_INT 113
13188: PUSH
13189: LD_INT 114
13191: PUSH
13192: LD_INT 115
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: ST_TO_ADDR
// if result then
13216: LD_VAR 0 1
13220: IFFALSE 13509
// begin normal :=  ;
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_STRING 
13229: ST_TO_ADDR
// hardcore :=  ;
13230: LD_ADDR_VAR 0 4
13234: PUSH
13235: LD_STRING 
13237: ST_TO_ADDR
// for i = 1 to normalCounter do
13238: LD_ADDR_VAR 0 5
13242: PUSH
13243: DOUBLE
13244: LD_INT 1
13246: DEC
13247: ST_TO_ADDR
13248: LD_EXP 27
13252: PUSH
13253: FOR_TO
13254: IFFALSE 13355
// begin tmp := 0 ;
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_STRING 0
13263: ST_TO_ADDR
// if result [ 1 ] then
13264: LD_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: IFFALSE 13337
// if result [ 1 ] [ 1 ] = i then
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: PUSH
13287: LD_VAR 0 5
13291: EQUAL
13292: IFFALSE 13337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: LD_VAR 0 1
13311: PUSH
13312: LD_INT 1
13314: ARRAY
13315: PPUSH
13316: LD_INT 1
13318: PPUSH
13319: CALL_OW 3
13323: PPUSH
13324: CALL_OW 1
13328: ST_TO_ADDR
// tmp := 1 ;
13329: LD_ADDR_VAR 0 2
13333: PUSH
13334: LD_STRING 1
13336: ST_TO_ADDR
// end ; normal := normal & tmp ;
13337: LD_ADDR_VAR 0 3
13341: PUSH
13342: LD_VAR 0 3
13346: PUSH
13347: LD_VAR 0 2
13351: STR
13352: ST_TO_ADDR
// end ;
13353: GO 13253
13355: POP
13356: POP
// for i = 1 to hardcoreCounter do
13357: LD_ADDR_VAR 0 5
13361: PUSH
13362: DOUBLE
13363: LD_INT 1
13365: DEC
13366: ST_TO_ADDR
13367: LD_EXP 28
13371: PUSH
13372: FOR_TO
13373: IFFALSE 13478
// begin tmp := 0 ;
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_STRING 0
13382: ST_TO_ADDR
// if result [ 2 ] then
13383: LD_VAR 0 1
13387: PUSH
13388: LD_INT 2
13390: ARRAY
13391: IFFALSE 13460
// if result [ 2 ] [ 1 ] = 100 + i then
13393: LD_VAR 0 1
13397: PUSH
13398: LD_INT 2
13400: ARRAY
13401: PUSH
13402: LD_INT 1
13404: ARRAY
13405: PUSH
13406: LD_INT 100
13408: PUSH
13409: LD_VAR 0 5
13413: PLUS
13414: EQUAL
13415: IFFALSE 13460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13417: LD_ADDR_VAR 0 1
13421: PUSH
13422: LD_VAR 0 1
13426: PPUSH
13427: LD_INT 2
13429: PPUSH
13430: LD_VAR 0 1
13434: PUSH
13435: LD_INT 2
13437: ARRAY
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 3
13446: PPUSH
13447: CALL_OW 1
13451: ST_TO_ADDR
// tmp := 1 ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_STRING 1
13459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13460: LD_ADDR_VAR 0 4
13464: PUSH
13465: LD_VAR 0 4
13469: PUSH
13470: LD_VAR 0 2
13474: STR
13475: ST_TO_ADDR
// end ;
13476: GO 13372
13478: POP
13479: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13480: LD_STRING getStreamItemsFromMission("
13482: PUSH
13483: LD_VAR 0 3
13487: STR
13488: PUSH
13489: LD_STRING ","
13491: STR
13492: PUSH
13493: LD_VAR 0 4
13497: STR
13498: PUSH
13499: LD_STRING ")
13501: STR
13502: PPUSH
13503: CALL_OW 559
// end else
13507: GO 13516
// ToLua ( getStreamItemsFromMission("","") ) ;
13509: LD_STRING getStreamItemsFromMission("","")
13511: PPUSH
13512: CALL_OW 559
// end ;
13516: LD_VAR 0 1
13520: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13521: LD_VAR 0 2
13525: PUSH
13526: LD_INT 100
13528: EQUAL
13529: IFFALSE 14478
// begin if not StreamModeActive then
13531: LD_EXP 26
13535: NOT
13536: IFFALSE 13546
// StreamModeActive := true ;
13538: LD_ADDR_EXP 26
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
// if p3 = 0 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 0
13553: EQUAL
13554: IFFALSE 13560
// InitStreamMode ;
13556: CALL 9599 0 0
// if p3 = 1 then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 1
13567: EQUAL
13568: IFFALSE 13578
// sRocket := true ;
13570: LD_ADDR_EXP 31
13574: PUSH
13575: LD_INT 1
13577: ST_TO_ADDR
// if p3 = 2 then
13578: LD_VAR 0 3
13582: PUSH
13583: LD_INT 2
13585: EQUAL
13586: IFFALSE 13596
// sSpeed := true ;
13588: LD_ADDR_EXP 30
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// if p3 = 3 then
13596: LD_VAR 0 3
13600: PUSH
13601: LD_INT 3
13603: EQUAL
13604: IFFALSE 13614
// sEngine := true ;
13606: LD_ADDR_EXP 32
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// if p3 = 4 then
13614: LD_VAR 0 3
13618: PUSH
13619: LD_INT 4
13621: EQUAL
13622: IFFALSE 13632
// sSpec := true ;
13624: LD_ADDR_EXP 29
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// if p3 = 5 then
13632: LD_VAR 0 3
13636: PUSH
13637: LD_INT 5
13639: EQUAL
13640: IFFALSE 13650
// sLevel := true ;
13642: LD_ADDR_EXP 33
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// if p3 = 6 then
13650: LD_VAR 0 3
13654: PUSH
13655: LD_INT 6
13657: EQUAL
13658: IFFALSE 13668
// sArmoury := true ;
13660: LD_ADDR_EXP 34
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if p3 = 7 then
13668: LD_VAR 0 3
13672: PUSH
13673: LD_INT 7
13675: EQUAL
13676: IFFALSE 13686
// sRadar := true ;
13678: LD_ADDR_EXP 35
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// if p3 = 8 then
13686: LD_VAR 0 3
13690: PUSH
13691: LD_INT 8
13693: EQUAL
13694: IFFALSE 13704
// sBunker := true ;
13696: LD_ADDR_EXP 36
13700: PUSH
13701: LD_INT 1
13703: ST_TO_ADDR
// if p3 = 9 then
13704: LD_VAR 0 3
13708: PUSH
13709: LD_INT 9
13711: EQUAL
13712: IFFALSE 13722
// sHack := true ;
13714: LD_ADDR_EXP 37
13718: PUSH
13719: LD_INT 1
13721: ST_TO_ADDR
// if p3 = 10 then
13722: LD_VAR 0 3
13726: PUSH
13727: LD_INT 10
13729: EQUAL
13730: IFFALSE 13740
// sFire := true ;
13732: LD_ADDR_EXP 38
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// if p3 = 11 then
13740: LD_VAR 0 3
13744: PUSH
13745: LD_INT 11
13747: EQUAL
13748: IFFALSE 13758
// sRefresh := true ;
13750: LD_ADDR_EXP 39
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// if p3 = 12 then
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 12
13765: EQUAL
13766: IFFALSE 13776
// sExp := true ;
13768: LD_ADDR_EXP 40
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// if p3 = 13 then
13776: LD_VAR 0 3
13780: PUSH
13781: LD_INT 13
13783: EQUAL
13784: IFFALSE 13794
// sDepot := true ;
13786: LD_ADDR_EXP 41
13790: PUSH
13791: LD_INT 1
13793: ST_TO_ADDR
// if p3 = 14 then
13794: LD_VAR 0 3
13798: PUSH
13799: LD_INT 14
13801: EQUAL
13802: IFFALSE 13812
// sFlag := true ;
13804: LD_ADDR_EXP 42
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// if p3 = 15 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 15
13819: EQUAL
13820: IFFALSE 13830
// sKamikadze := true ;
13822: LD_ADDR_EXP 50
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// if p3 = 16 then
13830: LD_VAR 0 3
13834: PUSH
13835: LD_INT 16
13837: EQUAL
13838: IFFALSE 13848
// sTroll := true ;
13840: LD_ADDR_EXP 51
13844: PUSH
13845: LD_INT 1
13847: ST_TO_ADDR
// if p3 = 17 then
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 17
13855: EQUAL
13856: IFFALSE 13866
// sSlow := true ;
13858: LD_ADDR_EXP 52
13862: PUSH
13863: LD_INT 1
13865: ST_TO_ADDR
// if p3 = 18 then
13866: LD_VAR 0 3
13870: PUSH
13871: LD_INT 18
13873: EQUAL
13874: IFFALSE 13884
// sLack := true ;
13876: LD_ADDR_EXP 53
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// if p3 = 19 then
13884: LD_VAR 0 3
13888: PUSH
13889: LD_INT 19
13891: EQUAL
13892: IFFALSE 13902
// sTank := true ;
13894: LD_ADDR_EXP 55
13898: PUSH
13899: LD_INT 1
13901: ST_TO_ADDR
// if p3 = 20 then
13902: LD_VAR 0 3
13906: PUSH
13907: LD_INT 20
13909: EQUAL
13910: IFFALSE 13920
// sRemote := true ;
13912: LD_ADDR_EXP 56
13916: PUSH
13917: LD_INT 1
13919: ST_TO_ADDR
// if p3 = 21 then
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 21
13927: EQUAL
13928: IFFALSE 13938
// sPowell := true ;
13930: LD_ADDR_EXP 57
13934: PUSH
13935: LD_INT 1
13937: ST_TO_ADDR
// if p3 = 22 then
13938: LD_VAR 0 3
13942: PUSH
13943: LD_INT 22
13945: EQUAL
13946: IFFALSE 13956
// sTeleport := true ;
13948: LD_ADDR_EXP 60
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if p3 = 23 then
13956: LD_VAR 0 3
13960: PUSH
13961: LD_INT 23
13963: EQUAL
13964: IFFALSE 13974
// sOilTower := true ;
13966: LD_ADDR_EXP 62
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// if p3 = 24 then
13974: LD_VAR 0 3
13978: PUSH
13979: LD_INT 24
13981: EQUAL
13982: IFFALSE 13992
// sShovel := true ;
13984: LD_ADDR_EXP 63
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// if p3 = 25 then
13992: LD_VAR 0 3
13996: PUSH
13997: LD_INT 25
13999: EQUAL
14000: IFFALSE 14010
// sSheik := true ;
14002: LD_ADDR_EXP 64
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// if p3 = 26 then
14010: LD_VAR 0 3
14014: PUSH
14015: LD_INT 26
14017: EQUAL
14018: IFFALSE 14028
// sEarthquake := true ;
14020: LD_ADDR_EXP 66
14024: PUSH
14025: LD_INT 1
14027: ST_TO_ADDR
// if p3 = 27 then
14028: LD_VAR 0 3
14032: PUSH
14033: LD_INT 27
14035: EQUAL
14036: IFFALSE 14046
// sAI := true ;
14038: LD_ADDR_EXP 67
14042: PUSH
14043: LD_INT 1
14045: ST_TO_ADDR
// if p3 = 28 then
14046: LD_VAR 0 3
14050: PUSH
14051: LD_INT 28
14053: EQUAL
14054: IFFALSE 14064
// sCargo := true ;
14056: LD_ADDR_EXP 70
14060: PUSH
14061: LD_INT 1
14063: ST_TO_ADDR
// if p3 = 29 then
14064: LD_VAR 0 3
14068: PUSH
14069: LD_INT 29
14071: EQUAL
14072: IFFALSE 14082
// sDLaser := true ;
14074: LD_ADDR_EXP 71
14078: PUSH
14079: LD_INT 1
14081: ST_TO_ADDR
// if p3 = 30 then
14082: LD_VAR 0 3
14086: PUSH
14087: LD_INT 30
14089: EQUAL
14090: IFFALSE 14100
// sExchange := true ;
14092: LD_ADDR_EXP 72
14096: PUSH
14097: LD_INT 1
14099: ST_TO_ADDR
// if p3 = 31 then
14100: LD_VAR 0 3
14104: PUSH
14105: LD_INT 31
14107: EQUAL
14108: IFFALSE 14118
// sFac := true ;
14110: LD_ADDR_EXP 73
14114: PUSH
14115: LD_INT 1
14117: ST_TO_ADDR
// if p3 = 32 then
14118: LD_VAR 0 3
14122: PUSH
14123: LD_INT 32
14125: EQUAL
14126: IFFALSE 14136
// sPower := true ;
14128: LD_ADDR_EXP 74
14132: PUSH
14133: LD_INT 1
14135: ST_TO_ADDR
// if p3 = 33 then
14136: LD_VAR 0 3
14140: PUSH
14141: LD_INT 33
14143: EQUAL
14144: IFFALSE 14154
// sRandom := true ;
14146: LD_ADDR_EXP 75
14150: PUSH
14151: LD_INT 1
14153: ST_TO_ADDR
// if p3 = 34 then
14154: LD_VAR 0 3
14158: PUSH
14159: LD_INT 34
14161: EQUAL
14162: IFFALSE 14172
// sShield := true ;
14164: LD_ADDR_EXP 76
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
// if p3 = 35 then
14172: LD_VAR 0 3
14176: PUSH
14177: LD_INT 35
14179: EQUAL
14180: IFFALSE 14190
// sTime := true ;
14182: LD_ADDR_EXP 77
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// if p3 = 36 then
14190: LD_VAR 0 3
14194: PUSH
14195: LD_INT 36
14197: EQUAL
14198: IFFALSE 14208
// sTools := true ;
14200: LD_ADDR_EXP 78
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// if p3 = 101 then
14208: LD_VAR 0 3
14212: PUSH
14213: LD_INT 101
14215: EQUAL
14216: IFFALSE 14226
// sSold := true ;
14218: LD_ADDR_EXP 43
14222: PUSH
14223: LD_INT 1
14225: ST_TO_ADDR
// if p3 = 102 then
14226: LD_VAR 0 3
14230: PUSH
14231: LD_INT 102
14233: EQUAL
14234: IFFALSE 14244
// sDiff := true ;
14236: LD_ADDR_EXP 44
14240: PUSH
14241: LD_INT 1
14243: ST_TO_ADDR
// if p3 = 103 then
14244: LD_VAR 0 3
14248: PUSH
14249: LD_INT 103
14251: EQUAL
14252: IFFALSE 14262
// sFog := true ;
14254: LD_ADDR_EXP 47
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// if p3 = 104 then
14262: LD_VAR 0 3
14266: PUSH
14267: LD_INT 104
14269: EQUAL
14270: IFFALSE 14280
// sReset := true ;
14272: LD_ADDR_EXP 48
14276: PUSH
14277: LD_INT 1
14279: ST_TO_ADDR
// if p3 = 105 then
14280: LD_VAR 0 3
14284: PUSH
14285: LD_INT 105
14287: EQUAL
14288: IFFALSE 14298
// sSun := true ;
14290: LD_ADDR_EXP 49
14294: PUSH
14295: LD_INT 1
14297: ST_TO_ADDR
// if p3 = 106 then
14298: LD_VAR 0 3
14302: PUSH
14303: LD_INT 106
14305: EQUAL
14306: IFFALSE 14316
// sTiger := true ;
14308: LD_ADDR_EXP 45
14312: PUSH
14313: LD_INT 1
14315: ST_TO_ADDR
// if p3 = 107 then
14316: LD_VAR 0 3
14320: PUSH
14321: LD_INT 107
14323: EQUAL
14324: IFFALSE 14334
// sBomb := true ;
14326: LD_ADDR_EXP 46
14330: PUSH
14331: LD_INT 1
14333: ST_TO_ADDR
// if p3 = 108 then
14334: LD_VAR 0 3
14338: PUSH
14339: LD_INT 108
14341: EQUAL
14342: IFFALSE 14352
// sWound := true ;
14344: LD_ADDR_EXP 54
14348: PUSH
14349: LD_INT 1
14351: ST_TO_ADDR
// if p3 = 109 then
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 109
14359: EQUAL
14360: IFFALSE 14370
// sBetray := true ;
14362: LD_ADDR_EXP 58
14366: PUSH
14367: LD_INT 1
14369: ST_TO_ADDR
// if p3 = 110 then
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 110
14377: EQUAL
14378: IFFALSE 14388
// sContamin := true ;
14380: LD_ADDR_EXP 59
14384: PUSH
14385: LD_INT 1
14387: ST_TO_ADDR
// if p3 = 111 then
14388: LD_VAR 0 3
14392: PUSH
14393: LD_INT 111
14395: EQUAL
14396: IFFALSE 14406
// sOil := true ;
14398: LD_ADDR_EXP 61
14402: PUSH
14403: LD_INT 1
14405: ST_TO_ADDR
// if p3 = 112 then
14406: LD_VAR 0 3
14410: PUSH
14411: LD_INT 112
14413: EQUAL
14414: IFFALSE 14424
// sStu := true ;
14416: LD_ADDR_EXP 65
14420: PUSH
14421: LD_INT 1
14423: ST_TO_ADDR
// if p3 = 113 then
14424: LD_VAR 0 3
14428: PUSH
14429: LD_INT 113
14431: EQUAL
14432: IFFALSE 14442
// sBazooka := true ;
14434: LD_ADDR_EXP 68
14438: PUSH
14439: LD_INT 1
14441: ST_TO_ADDR
// if p3 = 114 then
14442: LD_VAR 0 3
14446: PUSH
14447: LD_INT 114
14449: EQUAL
14450: IFFALSE 14460
// sMortar := true ;
14452: LD_ADDR_EXP 69
14456: PUSH
14457: LD_INT 1
14459: ST_TO_ADDR
// if p3 = 115 then
14460: LD_VAR 0 3
14464: PUSH
14465: LD_INT 115
14467: EQUAL
14468: IFFALSE 14478
// sRanger := true ;
14470: LD_ADDR_EXP 79
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// end ; end ;
14478: PPOPN 6
14480: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14481: LD_EXP 26
14485: PUSH
14486: LD_EXP 31
14490: AND
14491: IFFALSE 14615
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// begin enable ;
14500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_OWVAR 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 2
14520: PUSH
14521: LD_INT 34
14523: PUSH
14524: LD_INT 7
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 34
14533: PUSH
14534: LD_INT 45
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 34
14543: PUSH
14544: LD_INT 28
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 34
14553: PUSH
14554: LD_INT 47
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: ST_TO_ADDR
// if not tmp then
14577: LD_VAR 0 2
14581: NOT
14582: IFFALSE 14586
// exit ;
14584: GO 14615
// for i in tmp do
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_VAR 0 2
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14613
// begin SetLives ( i , 0 ) ;
14599: LD_VAR 0 1
14603: PPUSH
14604: LD_INT 0
14606: PPUSH
14607: CALL_OW 234
// end ;
14611: GO 14596
14613: POP
14614: POP
// end ;
14615: PPOPN 2
14617: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14618: LD_EXP 26
14622: PUSH
14623: LD_EXP 32
14627: AND
14628: IFFALSE 14712
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
14636: PPUSH
// begin enable ;
14637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14638: LD_ADDR_VAR 0 2
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 32
14657: PUSH
14658: LD_INT 3
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 69
14673: ST_TO_ADDR
// if not tmp then
14674: LD_VAR 0 2
14678: NOT
14679: IFFALSE 14683
// exit ;
14681: GO 14712
// for i in tmp do
14683: LD_ADDR_VAR 0 1
14687: PUSH
14688: LD_VAR 0 2
14692: PUSH
14693: FOR_IN
14694: IFFALSE 14710
// begin SetLives ( i , 0 ) ;
14696: LD_VAR 0 1
14700: PPUSH
14701: LD_INT 0
14703: PPUSH
14704: CALL_OW 234
// end ;
14708: GO 14693
14710: POP
14711: POP
// end ;
14712: PPOPN 2
14714: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14715: LD_EXP 26
14719: PUSH
14720: LD_EXP 29
14724: AND
14725: IFFALSE 14818
14727: GO 14729
14729: DISABLE
14730: LD_INT 0
14732: PPUSH
// begin enable ;
14733: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: LD_INT 22
14741: PUSH
14742: LD_OWVAR 2
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 2
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: LD_INT 5
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 25
14766: PUSH
14767: LD_INT 9
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 25
14776: PUSH
14777: LD_INT 8
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: PUSH
14799: FOR_IN
14800: IFFALSE 14816
// begin SetClass ( i , 1 ) ;
14802: LD_VAR 0 1
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 336
// end ;
14814: GO 14799
14816: POP
14817: POP
// end ;
14818: PPOPN 1
14820: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14821: LD_EXP 26
14825: PUSH
14826: LD_EXP 30
14830: AND
14831: PUSH
14832: LD_OWVAR 65
14836: PUSH
14837: LD_INT 7
14839: LESS
14840: AND
14841: IFFALSE 14855
14843: GO 14845
14845: DISABLE
// begin enable ;
14846: ENABLE
// game_speed := 7 ;
14847: LD_ADDR_OWVAR 65
14851: PUSH
14852: LD_INT 7
14854: ST_TO_ADDR
// end ;
14855: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14856: LD_EXP 26
14860: PUSH
14861: LD_EXP 33
14865: AND
14866: IFFALSE 15068
14868: GO 14870
14870: DISABLE
14871: LD_INT 0
14873: PPUSH
14874: PPUSH
14875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14876: LD_ADDR_VAR 0 3
14880: PUSH
14881: LD_INT 81
14883: PUSH
14884: LD_OWVAR 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PPUSH
14907: CALL_OW 69
14911: ST_TO_ADDR
// if not tmp then
14912: LD_VAR 0 3
14916: NOT
14917: IFFALSE 14921
// exit ;
14919: GO 15068
// if tmp > 5 then
14921: LD_VAR 0 3
14925: PUSH
14926: LD_INT 5
14928: GREATER
14929: IFFALSE 14941
// k := 5 else
14931: LD_ADDR_VAR 0 2
14935: PUSH
14936: LD_INT 5
14938: ST_TO_ADDR
14939: GO 14951
// k := tmp ;
14941: LD_ADDR_VAR 0 2
14945: PUSH
14946: LD_VAR 0 3
14950: ST_TO_ADDR
// for i := 1 to k do
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: DOUBLE
14957: LD_INT 1
14959: DEC
14960: ST_TO_ADDR
14961: LD_VAR 0 2
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15066
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_VAR 0 1
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 4
14987: MOD
14988: PUSH
14989: LD_INT 1
14991: PLUS
14992: PPUSH
14993: CALL_OW 259
14997: PUSH
14998: LD_INT 10
15000: LESS
15001: IFFALSE 15064
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15003: LD_VAR 0 3
15007: PUSH
15008: LD_VAR 0 1
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 1
15018: PUSH
15019: LD_INT 4
15021: MOD
15022: PUSH
15023: LD_INT 1
15025: PLUS
15026: PPUSH
15027: LD_VAR 0 3
15031: PUSH
15032: LD_VAR 0 1
15036: ARRAY
15037: PPUSH
15038: LD_VAR 0 1
15042: PUSH
15043: LD_INT 4
15045: MOD
15046: PUSH
15047: LD_INT 1
15049: PLUS
15050: PPUSH
15051: CALL_OW 259
15055: PUSH
15056: LD_INT 1
15058: PLUS
15059: PPUSH
15060: CALL_OW 237
15064: GO 14966
15066: POP
15067: POP
// end ;
15068: PPOPN 3
15070: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15071: LD_EXP 26
15075: PUSH
15076: LD_EXP 34
15080: AND
15081: IFFALSE 15101
15083: GO 15085
15085: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15086: LD_INT 4
15088: PPUSH
15089: LD_OWVAR 2
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: CALL_OW 324
15101: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15102: LD_EXP 26
15106: PUSH
15107: LD_EXP 63
15111: AND
15112: IFFALSE 15132
15114: GO 15116
15116: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15117: LD_INT 19
15119: PPUSH
15120: LD_OWVAR 2
15124: PPUSH
15125: LD_INT 0
15127: PPUSH
15128: CALL_OW 324
15132: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15133: LD_EXP 26
15137: PUSH
15138: LD_EXP 35
15142: AND
15143: IFFALSE 15245
15145: GO 15147
15147: DISABLE
15148: LD_INT 0
15150: PPUSH
15151: PPUSH
// begin enable ;
15152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_INT 22
15160: PUSH
15161: LD_OWVAR 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: LD_INT 34
15175: PUSH
15176: LD_INT 11
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 34
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: ST_TO_ADDR
// if not tmp then
15207: LD_VAR 0 2
15211: NOT
15212: IFFALSE 15216
// exit ;
15214: GO 15245
// for i in tmp do
15216: LD_ADDR_VAR 0 1
15220: PUSH
15221: LD_VAR 0 2
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15243
// begin SetLives ( i , 0 ) ;
15229: LD_VAR 0 1
15233: PPUSH
15234: LD_INT 0
15236: PPUSH
15237: CALL_OW 234
// end ;
15241: GO 15226
15243: POP
15244: POP
// end ;
15245: PPOPN 2
15247: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15248: LD_EXP 26
15252: PUSH
15253: LD_EXP 36
15257: AND
15258: IFFALSE 15278
15260: GO 15262
15262: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15263: LD_INT 32
15265: PPUSH
15266: LD_OWVAR 2
15270: PPUSH
15271: LD_INT 0
15273: PPUSH
15274: CALL_OW 324
15278: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15279: LD_EXP 26
15283: PUSH
15284: LD_EXP 37
15288: AND
15289: IFFALSE 15470
15291: GO 15293
15293: DISABLE
15294: LD_INT 0
15296: PPUSH
15297: PPUSH
15298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15299: LD_ADDR_VAR 0 2
15303: PUSH
15304: LD_INT 22
15306: PUSH
15307: LD_OWVAR 2
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 33
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 69
15334: ST_TO_ADDR
// if not tmp then
15335: LD_VAR 0 2
15339: NOT
15340: IFFALSE 15344
// exit ;
15342: GO 15470
// side := 0 ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: LD_INT 0
15351: ST_TO_ADDR
// for i := 1 to 8 do
15352: LD_ADDR_VAR 0 1
15356: PUSH
15357: DOUBLE
15358: LD_INT 1
15360: DEC
15361: ST_TO_ADDR
15362: LD_INT 8
15364: PUSH
15365: FOR_TO
15366: IFFALSE 15414
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15368: LD_OWVAR 2
15372: PUSH
15373: LD_VAR 0 1
15377: NONEQUAL
15378: PUSH
15379: LD_OWVAR 2
15383: PPUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 81
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: AND
15398: IFFALSE 15412
// begin side := i ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_VAR 0 1
15409: ST_TO_ADDR
// break ;
15410: GO 15414
// end ;
15412: GO 15365
15414: POP
15415: POP
// if not side then
15416: LD_VAR 0 3
15420: NOT
15421: IFFALSE 15425
// exit ;
15423: GO 15470
// for i := 1 to tmp do
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: DOUBLE
15431: LD_INT 1
15433: DEC
15434: ST_TO_ADDR
15435: LD_VAR 0 2
15439: PUSH
15440: FOR_TO
15441: IFFALSE 15468
// if Prob ( 60 ) then
15443: LD_INT 60
15445: PPUSH
15446: CALL_OW 13
15450: IFFALSE 15466
// SetSide ( i , side ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_VAR 0 3
15461: PPUSH
15462: CALL_OW 235
15466: GO 15440
15468: POP
15469: POP
// end ;
15470: PPOPN 3
15472: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15473: LD_EXP 26
15477: PUSH
15478: LD_EXP 39
15482: AND
15483: IFFALSE 15602
15485: GO 15487
15487: DISABLE
15488: LD_INT 0
15490: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_OWVAR 2
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 3
15520: PUSH
15521: LD_INT 23
15523: PUSH
15524: LD_INT 0
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: PUSH
15545: FOR_IN
15546: IFFALSE 15600
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15548: LD_VAR 0 1
15552: PPUSH
15553: CALL_OW 257
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: LD_INT 4
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: IN
15576: IFFALSE 15598
// SetClass ( un , rand ( 1 , 4 ) ) ;
15578: LD_VAR 0 1
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: LD_INT 4
15588: PPUSH
15589: CALL_OW 12
15593: PPUSH
15594: CALL_OW 336
15598: GO 15545
15600: POP
15601: POP
// end ;
15602: PPOPN 1
15604: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15605: LD_EXP 26
15609: PUSH
15610: LD_EXP 38
15614: AND
15615: IFFALSE 15694
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15623: LD_ADDR_VAR 0 1
15627: PUSH
15628: LD_INT 22
15630: PUSH
15631: LD_OWVAR 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
// if not tmp then
15659: LD_VAR 0 1
15663: NOT
15664: IFFALSE 15668
// exit ;
15666: GO 15694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15668: LD_VAR 0 1
15672: PUSH
15673: LD_INT 1
15675: PPUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 12
15685: ARRAY
15686: PPUSH
15687: LD_INT 100
15689: PPUSH
15690: CALL_OW 234
// end ;
15694: PPOPN 1
15696: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15697: LD_EXP 26
15701: PUSH
15702: LD_EXP 40
15706: AND
15707: IFFALSE 15805
15709: GO 15711
15711: DISABLE
15712: LD_INT 0
15714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15715: LD_ADDR_VAR 0 1
15719: PUSH
15720: LD_INT 22
15722: PUSH
15723: LD_OWVAR 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
// if not tmp then
15751: LD_VAR 0 1
15755: NOT
15756: IFFALSE 15760
// exit ;
15758: GO 15805
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15760: LD_VAR 0 1
15764: PUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL_OW 12
15777: ARRAY
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 4
15784: PPUSH
15785: CALL_OW 12
15789: PPUSH
15790: LD_INT 3000
15792: PPUSH
15793: LD_INT 9000
15795: PPUSH
15796: CALL_OW 12
15800: PPUSH
15801: CALL_OW 492
// end ;
15805: PPOPN 1
15807: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15808: LD_EXP 26
15812: PUSH
15813: LD_EXP 41
15817: AND
15818: IFFALSE 15838
15820: GO 15822
15822: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15823: LD_INT 1
15825: PPUSH
15826: LD_OWVAR 2
15830: PPUSH
15831: LD_INT 0
15833: PPUSH
15834: CALL_OW 324
15838: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15839: LD_EXP 26
15843: PUSH
15844: LD_EXP 42
15848: AND
15849: IFFALSE 15932
15851: GO 15853
15853: DISABLE
15854: LD_INT 0
15856: PPUSH
15857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_OWVAR 2
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 3
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 2
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15932
// for i in tmp do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15930
// SetBLevel ( i , 10 ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 10
15923: PPUSH
15924: CALL_OW 241
15928: GO 15913
15930: POP
15931: POP
// end ;
15932: PPOPN 2
15934: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15935: LD_EXP 26
15939: PUSH
15940: LD_EXP 43
15944: AND
15945: IFFALSE 16056
15947: GO 15949
15949: DISABLE
15950: LD_INT 0
15952: PPUSH
15953: PPUSH
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 25
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 3
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16056
// un := tmp [ rand ( 1 , tmp ) ] ;
16000: LD_ADDR_VAR 0 2
16004: PUSH
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 1
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: CALL_OW 12
16022: ARRAY
16023: ST_TO_ADDR
// if Crawls ( un ) then
16024: LD_VAR 0 2
16028: PPUSH
16029: CALL_OW 318
16033: IFFALSE 16044
// ComWalk ( un ) ;
16035: LD_VAR 0 2
16039: PPUSH
16040: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16044: LD_VAR 0 2
16048: PPUSH
16049: LD_INT 5
16051: PPUSH
16052: CALL_OW 336
// end ;
16056: PPOPN 3
16058: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16059: LD_EXP 26
16063: PUSH
16064: LD_EXP 44
16068: AND
16069: PUSH
16070: LD_OWVAR 67
16074: PUSH
16075: LD_INT 3
16077: LESS
16078: AND
16079: IFFALSE 16098
16081: GO 16083
16083: DISABLE
// Difficulty := Difficulty + 1 ;
16084: LD_ADDR_OWVAR 67
16088: PUSH
16089: LD_OWVAR 67
16093: PUSH
16094: LD_INT 1
16096: PLUS
16097: ST_TO_ADDR
16098: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16099: LD_EXP 26
16103: PUSH
16104: LD_EXP 45
16108: AND
16109: IFFALSE 16212
16111: GO 16113
16113: DISABLE
16114: LD_INT 0
16116: PPUSH
// begin for i := 1 to 5 do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_INT 5
16129: PUSH
16130: FOR_TO
16131: IFFALSE 16210
// begin uc_nation := nation_nature ;
16133: LD_ADDR_OWVAR 21
16137: PUSH
16138: LD_INT 0
16140: ST_TO_ADDR
// uc_side := 0 ;
16141: LD_ADDR_OWVAR 20
16145: PUSH
16146: LD_INT 0
16148: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16149: LD_ADDR_OWVAR 29
16153: PUSH
16154: LD_INT 12
16156: PUSH
16157: LD_INT 12
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: ST_TO_ADDR
// hc_agressivity := 20 ;
16164: LD_ADDR_OWVAR 35
16168: PUSH
16169: LD_INT 20
16171: ST_TO_ADDR
// hc_class := class_tiger ;
16172: LD_ADDR_OWVAR 28
16176: PUSH
16177: LD_INT 14
16179: ST_TO_ADDR
// hc_gallery :=  ;
16180: LD_ADDR_OWVAR 33
16184: PUSH
16185: LD_STRING 
16187: ST_TO_ADDR
// hc_name :=  ;
16188: LD_ADDR_OWVAR 26
16192: PUSH
16193: LD_STRING 
16195: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16196: CALL_OW 44
16200: PPUSH
16201: LD_INT 0
16203: PPUSH
16204: CALL_OW 51
// end ;
16208: GO 16130
16210: POP
16211: POP
// end ;
16212: PPOPN 1
16214: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16215: LD_EXP 26
16219: PUSH
16220: LD_EXP 46
16224: AND
16225: IFFALSE 16234
16227: GO 16229
16229: DISABLE
// StreamSibBomb ;
16230: CALL 16235 0 0
16234: END
// export function StreamSibBomb ; var i , x , y ; begin
16235: LD_INT 0
16237: PPUSH
16238: PPUSH
16239: PPUSH
16240: PPUSH
// result := false ;
16241: LD_ADDR_VAR 0 1
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// for i := 1 to 16 do
16249: LD_ADDR_VAR 0 2
16253: PUSH
16254: DOUBLE
16255: LD_INT 1
16257: DEC
16258: ST_TO_ADDR
16259: LD_INT 16
16261: PUSH
16262: FOR_TO
16263: IFFALSE 16462
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16265: LD_ADDR_VAR 0 3
16269: PUSH
16270: LD_INT 10
16272: PUSH
16273: LD_INT 20
16275: PUSH
16276: LD_INT 30
16278: PUSH
16279: LD_INT 40
16281: PUSH
16282: LD_INT 50
16284: PUSH
16285: LD_INT 60
16287: PUSH
16288: LD_INT 70
16290: PUSH
16291: LD_INT 80
16293: PUSH
16294: LD_INT 90
16296: PUSH
16297: LD_INT 100
16299: PUSH
16300: LD_INT 110
16302: PUSH
16303: LD_INT 120
16305: PUSH
16306: LD_INT 130
16308: PUSH
16309: LD_INT 140
16311: PUSH
16312: LD_INT 150
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 1
16334: PPUSH
16335: LD_INT 15
16337: PPUSH
16338: CALL_OW 12
16342: ARRAY
16343: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16344: LD_ADDR_VAR 0 4
16348: PUSH
16349: LD_INT 10
16351: PUSH
16352: LD_INT 20
16354: PUSH
16355: LD_INT 30
16357: PUSH
16358: LD_INT 40
16360: PUSH
16361: LD_INT 50
16363: PUSH
16364: LD_INT 60
16366: PUSH
16367: LD_INT 70
16369: PUSH
16370: LD_INT 80
16372: PUSH
16373: LD_INT 90
16375: PUSH
16376: LD_INT 100
16378: PUSH
16379: LD_INT 110
16381: PUSH
16382: LD_INT 120
16384: PUSH
16385: LD_INT 130
16387: PUSH
16388: LD_INT 140
16390: PUSH
16391: LD_INT 150
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: PPUSH
16414: LD_INT 15
16416: PPUSH
16417: CALL_OW 12
16421: ARRAY
16422: ST_TO_ADDR
// if ValidHex ( x , y ) then
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_VAR 0 4
16432: PPUSH
16433: CALL_OW 488
16437: IFFALSE 16460
// begin result := [ x , y ] ;
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_VAR 0 3
16448: PUSH
16449: LD_VAR 0 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: ST_TO_ADDR
// break ;
16458: GO 16462
// end ; end ;
16460: GO 16262
16462: POP
16463: POP
// if result then
16464: LD_VAR 0 1
16468: IFFALSE 16528
// begin ToLua ( playSibBomb() ) ;
16470: LD_STRING playSibBomb()
16472: PPUSH
16473: CALL_OW 559
// wait ( 0 0$14 ) ;
16477: LD_INT 490
16479: PPUSH
16480: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16484: LD_VAR 0 1
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 2
16500: ARRAY
16501: PPUSH
16502: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16506: LD_VAR 0 1
16510: PUSH
16511: LD_INT 1
16513: ARRAY
16514: PPUSH
16515: LD_VAR 0 1
16519: PUSH
16520: LD_INT 2
16522: ARRAY
16523: PPUSH
16524: CALL_OW 429
// end ; end ;
16528: LD_VAR 0 1
16532: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16533: LD_EXP 26
16537: PUSH
16538: LD_EXP 48
16542: AND
16543: IFFALSE 16555
16545: GO 16547
16547: DISABLE
// YouLost (  ) ;
16548: LD_STRING 
16550: PPUSH
16551: CALL_OW 104
16555: END
// every 0 0$1 trigger StreamModeActive and sFog do
16556: LD_EXP 26
16560: PUSH
16561: LD_EXP 47
16565: AND
16566: IFFALSE 16580
16568: GO 16570
16570: DISABLE
// FogOff ( your_side ) ;
16571: LD_OWVAR 2
16575: PPUSH
16576: CALL_OW 344
16580: END
// every 0 0$1 trigger StreamModeActive and sSun do
16581: LD_EXP 26
16585: PUSH
16586: LD_EXP 49
16590: AND
16591: IFFALSE 16619
16593: GO 16595
16595: DISABLE
// begin solar_recharge_percent := 0 ;
16596: LD_ADDR_OWVAR 79
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16604: LD_INT 10500
16606: PPUSH
16607: CALL_OW 67
// solar_recharge_percent := 100 ;
16611: LD_ADDR_OWVAR 79
16615: PUSH
16616: LD_INT 100
16618: ST_TO_ADDR
// end ;
16619: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16620: LD_EXP 26
16624: PUSH
16625: LD_EXP 50
16629: AND
16630: IFFALSE 16869
16632: GO 16634
16634: DISABLE
16635: LD_INT 0
16637: PPUSH
16638: PPUSH
16639: PPUSH
// begin tmp := [ ] ;
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: EMPTY
16646: ST_TO_ADDR
// for i := 1 to 6 do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: LD_INT 6
16659: PUSH
16660: FOR_TO
16661: IFFALSE 16766
// begin uc_nation := nation_nature ;
16663: LD_ADDR_OWVAR 21
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// uc_side := 0 ;
16671: LD_ADDR_OWVAR 20
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16679: LD_ADDR_OWVAR 29
16683: PUSH
16684: LD_INT 12
16686: PUSH
16687: LD_INT 12
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// hc_agressivity := 20 ;
16694: LD_ADDR_OWVAR 35
16698: PUSH
16699: LD_INT 20
16701: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16702: LD_ADDR_OWVAR 28
16706: PUSH
16707: LD_INT 17
16709: ST_TO_ADDR
// hc_gallery :=  ;
16710: LD_ADDR_OWVAR 33
16714: PUSH
16715: LD_STRING 
16717: ST_TO_ADDR
// hc_name :=  ;
16718: LD_ADDR_OWVAR 26
16722: PUSH
16723: LD_STRING 
16725: ST_TO_ADDR
// un := CreateHuman ;
16726: LD_ADDR_VAR 0 2
16730: PUSH
16731: CALL_OW 44
16735: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16736: LD_VAR 0 2
16740: PPUSH
16741: LD_INT 1
16743: PPUSH
16744: CALL_OW 51
// tmp := tmp ^ un ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 2
16762: ADD
16763: ST_TO_ADDR
// end ;
16764: GO 16660
16766: POP
16767: POP
// repeat wait ( 0 0$1 ) ;
16768: LD_INT 35
16770: PPUSH
16771: CALL_OW 67
// for un in tmp do
16775: LD_ADDR_VAR 0 2
16779: PUSH
16780: LD_VAR 0 3
16784: PUSH
16785: FOR_IN
16786: IFFALSE 16860
// begin if IsDead ( un ) then
16788: LD_VAR 0 2
16792: PPUSH
16793: CALL_OW 301
16797: IFFALSE 16817
// begin tmp := tmp diff un ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_VAR 0 3
16808: PUSH
16809: LD_VAR 0 2
16813: DIFF
16814: ST_TO_ADDR
// continue ;
16815: GO 16785
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16817: LD_VAR 0 2
16821: PPUSH
16822: LD_INT 3
16824: PUSH
16825: LD_INT 22
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PPUSH
16839: CALL_OW 69
16843: PPUSH
16844: LD_VAR 0 2
16848: PPUSH
16849: CALL_OW 74
16853: PPUSH
16854: CALL_OW 115
// end ;
16858: GO 16785
16860: POP
16861: POP
// until not tmp ;
16862: LD_VAR 0 3
16866: NOT
16867: IFFALSE 16768
// end ;
16869: PPOPN 3
16871: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16872: LD_EXP 26
16876: PUSH
16877: LD_EXP 51
16881: AND
16882: IFFALSE 16936
16884: GO 16886
16886: DISABLE
// begin ToLua ( displayTroll(); ) ;
16887: LD_STRING displayTroll();
16889: PPUSH
16890: CALL_OW 559
// wait ( 3 3$00 ) ;
16894: LD_INT 6300
16896: PPUSH
16897: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16901: LD_STRING hideTroll();
16903: PPUSH
16904: CALL_OW 559
// wait ( 1 1$00 ) ;
16908: LD_INT 2100
16910: PPUSH
16911: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16915: LD_STRING displayTroll();
16917: PPUSH
16918: CALL_OW 559
// wait ( 1 1$00 ) ;
16922: LD_INT 2100
16924: PPUSH
16925: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16929: LD_STRING hideTroll();
16931: PPUSH
16932: CALL_OW 559
// end ;
16936: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16937: LD_EXP 26
16941: PUSH
16942: LD_EXP 52
16946: AND
16947: IFFALSE 17010
16949: GO 16951
16951: DISABLE
16952: LD_INT 0
16954: PPUSH
// begin p := 0 ;
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_INT 0
16962: ST_TO_ADDR
// repeat game_speed := 1 ;
16963: LD_ADDR_OWVAR 65
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16971: LD_INT 35
16973: PPUSH
16974: CALL_OW 67
// p := p + 1 ;
16978: LD_ADDR_VAR 0 1
16982: PUSH
16983: LD_VAR 0 1
16987: PUSH
16988: LD_INT 1
16990: PLUS
16991: ST_TO_ADDR
// until p >= 60 ;
16992: LD_VAR 0 1
16996: PUSH
16997: LD_INT 60
16999: GREATEREQUAL
17000: IFFALSE 16963
// game_speed := 4 ;
17002: LD_ADDR_OWVAR 65
17006: PUSH
17007: LD_INT 4
17009: ST_TO_ADDR
// end ;
17010: PPOPN 1
17012: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17013: LD_EXP 26
17017: PUSH
17018: LD_EXP 53
17022: AND
17023: IFFALSE 17169
17025: GO 17027
17027: DISABLE
17028: LD_INT 0
17030: PPUSH
17031: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17032: LD_ADDR_VAR 0 1
17036: PUSH
17037: LD_INT 22
17039: PUSH
17040: LD_OWVAR 2
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 30
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 30
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: ST_TO_ADDR
// if not depot then
17086: LD_VAR 0 1
17090: NOT
17091: IFFALSE 17095
// exit ;
17093: GO 17169
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17095: LD_ADDR_VAR 0 2
17099: PUSH
17100: LD_VAR 0 1
17104: PUSH
17105: LD_INT 1
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 12
17117: ARRAY
17118: PPUSH
17119: CALL_OW 274
17123: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17124: LD_VAR 0 2
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: LD_INT 0
17134: PPUSH
17135: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 2
17146: PPUSH
17147: LD_INT 0
17149: PPUSH
17150: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17154: LD_VAR 0 2
17158: PPUSH
17159: LD_INT 3
17161: PPUSH
17162: LD_INT 0
17164: PPUSH
17165: CALL_OW 277
// end ;
17169: PPOPN 2
17171: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17172: LD_EXP 26
17176: PUSH
17177: LD_EXP 54
17181: AND
17182: IFFALSE 17279
17184: GO 17186
17186: DISABLE
17187: LD_INT 0
17189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17190: LD_ADDR_VAR 0 1
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_OWVAR 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 21
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: LD_INT 23
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: PPUSH
17239: CALL_OW 69
17243: ST_TO_ADDR
// if not tmp then
17244: LD_VAR 0 1
17248: NOT
17249: IFFALSE 17253
// exit ;
17251: GO 17279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 1
17260: PPUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 12
17270: ARRAY
17271: PPUSH
17272: LD_INT 200
17274: PPUSH
17275: CALL_OW 234
// end ;
17279: PPOPN 1
17281: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17282: LD_EXP 26
17286: PUSH
17287: LD_EXP 55
17291: AND
17292: IFFALSE 17371
17294: GO 17296
17296: DISABLE
17297: LD_INT 0
17299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17300: LD_ADDR_VAR 0 1
17304: PUSH
17305: LD_INT 22
17307: PUSH
17308: LD_OWVAR 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if not tmp then
17336: LD_VAR 0 1
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 17371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17345: LD_VAR 0 1
17349: PUSH
17350: LD_INT 1
17352: PPUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 12
17362: ARRAY
17363: PPUSH
17364: LD_INT 60
17366: PPUSH
17367: CALL_OW 234
// end ;
17371: PPOPN 1
17373: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17374: LD_EXP 26
17378: PUSH
17379: LD_EXP 56
17383: AND
17384: IFFALSE 17483
17386: GO 17388
17388: DISABLE
17389: LD_INT 0
17391: PPUSH
17392: PPUSH
// begin enable ;
17393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17394: LD_ADDR_VAR 0 1
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_OWVAR 2
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 61
17413: PUSH
17414: EMPTY
17415: LIST
17416: PUSH
17417: LD_INT 33
17419: PUSH
17420: LD_INT 2
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PPUSH
17432: CALL_OW 69
17436: ST_TO_ADDR
// if not tmp then
17437: LD_VAR 0 1
17441: NOT
17442: IFFALSE 17446
// exit ;
17444: GO 17483
// for i in tmp do
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: FOR_IN
17457: IFFALSE 17481
// if IsControledBy ( i ) then
17459: LD_VAR 0 2
17463: PPUSH
17464: CALL_OW 312
17468: IFFALSE 17479
// ComUnlink ( i ) ;
17470: LD_VAR 0 2
17474: PPUSH
17475: CALL_OW 136
17479: GO 17456
17481: POP
17482: POP
// end ;
17483: PPOPN 2
17485: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17486: LD_EXP 26
17490: PUSH
17491: LD_EXP 57
17495: AND
17496: IFFALSE 17636
17498: GO 17500
17500: DISABLE
17501: LD_INT 0
17503: PPUSH
17504: PPUSH
// begin ToLua ( displayPowell(); ) ;
17505: LD_STRING displayPowell();
17507: PPUSH
17508: CALL_OW 559
// uc_side := 0 ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// uc_nation := 2 ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_INT 2
17527: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17528: LD_ADDR_OWVAR 37
17532: PUSH
17533: LD_INT 14
17535: ST_TO_ADDR
// vc_engine := engine_siberite ;
17536: LD_ADDR_OWVAR 39
17540: PUSH
17541: LD_INT 3
17543: ST_TO_ADDR
// vc_control := control_apeman ;
17544: LD_ADDR_OWVAR 38
17548: PUSH
17549: LD_INT 5
17551: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17552: LD_ADDR_OWVAR 40
17556: PUSH
17557: LD_INT 29
17559: ST_TO_ADDR
// un := CreateVehicle ;
17560: LD_ADDR_VAR 0 2
17564: PUSH
17565: CALL_OW 45
17569: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17570: LD_VAR 0 2
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17582: LD_INT 35
17584: PPUSH
17585: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17589: LD_VAR 0 2
17593: PPUSH
17594: LD_INT 22
17596: PUSH
17597: LD_OWVAR 2
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PPUSH
17606: CALL_OW 69
17610: PPUSH
17611: LD_VAR 0 2
17615: PPUSH
17616: CALL_OW 74
17620: PPUSH
17621: CALL_OW 115
// until IsDead ( un ) ;
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 301
17634: IFFALSE 17582
// end ;
17636: PPOPN 2
17638: END
// every 0 0$1 trigger StreamModeActive and sStu do
17639: LD_EXP 26
17643: PUSH
17644: LD_EXP 65
17648: AND
17649: IFFALSE 17665
17651: GO 17653
17653: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17654: LD_STRING displayStucuk();
17656: PPUSH
17657: CALL_OW 559
// ResetFog ;
17661: CALL_OW 335
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17666: LD_EXP 26
17670: PUSH
17671: LD_EXP 58
17675: AND
17676: IFFALSE 17817
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 22
17692: PUSH
17693: LD_OWVAR 2
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 69
17720: ST_TO_ADDR
// if not tmp then
17721: LD_VAR 0 2
17725: NOT
17726: IFFALSE 17730
// exit ;
17728: GO 17817
// un := tmp [ rand ( 1 , tmp ) ] ;
17730: LD_ADDR_VAR 0 1
17734: PUSH
17735: LD_VAR 0 2
17739: PUSH
17740: LD_INT 1
17742: PPUSH
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 12
17752: ARRAY
17753: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17754: LD_VAR 0 1
17758: PPUSH
17759: LD_INT 0
17761: PPUSH
17762: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17766: LD_VAR 0 1
17770: PPUSH
17771: LD_OWVAR 3
17775: PUSH
17776: LD_VAR 0 1
17780: DIFF
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 74
17791: PPUSH
17792: CALL_OW 115
// wait ( 0 0$20 ) ;
17796: LD_INT 700
17798: PPUSH
17799: CALL_OW 67
// SetSide ( un , your_side ) ;
17803: LD_VAR 0 1
17807: PPUSH
17808: LD_OWVAR 2
17812: PPUSH
17813: CALL_OW 235
// end ;
17817: PPOPN 2
17819: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17820: LD_EXP 26
17824: PUSH
17825: LD_EXP 59
17829: AND
17830: IFFALSE 17936
17832: GO 17834
17834: DISABLE
17835: LD_INT 0
17837: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 30
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 30
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PPUSH
17887: CALL_OW 69
17891: ST_TO_ADDR
// if not depot then
17892: LD_VAR 0 1
17896: NOT
17897: IFFALSE 17901
// exit ;
17899: GO 17936
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17901: LD_VAR 0 1
17905: PUSH
17906: LD_INT 1
17908: ARRAY
17909: PPUSH
17910: CALL_OW 250
17914: PPUSH
17915: LD_VAR 0 1
17919: PUSH
17920: LD_INT 1
17922: ARRAY
17923: PPUSH
17924: CALL_OW 251
17928: PPUSH
17929: LD_INT 70
17931: PPUSH
17932: CALL_OW 495
// end ;
17936: PPOPN 1
17938: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17939: LD_EXP 26
17943: PUSH
17944: LD_EXP 60
17948: AND
17949: IFFALSE 18160
17951: GO 17953
17953: DISABLE
17954: LD_INT 0
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17961: LD_ADDR_VAR 0 5
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_OWVAR 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 21
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 69
17996: ST_TO_ADDR
// if not tmp then
17997: LD_VAR 0 5
18001: NOT
18002: IFFALSE 18006
// exit ;
18004: GO 18160
// for i in tmp do
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_VAR 0 5
18015: PUSH
18016: FOR_IN
18017: IFFALSE 18158
// begin d := rand ( 0 , 5 ) ;
18019: LD_ADDR_VAR 0 4
18023: PUSH
18024: LD_INT 0
18026: PPUSH
18027: LD_INT 5
18029: PPUSH
18030: CALL_OW 12
18034: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 250
18049: PPUSH
18050: LD_VAR 0 4
18054: PPUSH
18055: LD_INT 3
18057: PPUSH
18058: LD_INT 12
18060: PPUSH
18061: CALL_OW 12
18065: PPUSH
18066: CALL_OW 272
18070: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18071: LD_ADDR_VAR 0 3
18075: PUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 251
18085: PPUSH
18086: LD_VAR 0 4
18090: PPUSH
18091: LD_INT 3
18093: PPUSH
18094: LD_INT 12
18096: PPUSH
18097: CALL_OW 12
18101: PPUSH
18102: CALL_OW 273
18106: ST_TO_ADDR
// if ValidHex ( x , y ) then
18107: LD_VAR 0 2
18111: PPUSH
18112: LD_VAR 0 3
18116: PPUSH
18117: CALL_OW 488
18121: IFFALSE 18156
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18123: LD_VAR 0 1
18127: PPUSH
18128: LD_VAR 0 2
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: LD_INT 3
18140: PPUSH
18141: LD_INT 6
18143: PPUSH
18144: CALL_OW 12
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 483
// end ;
18156: GO 18016
18158: POP
18159: POP
// end ;
18160: PPOPN 5
18162: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18163: LD_EXP 26
18167: PUSH
18168: LD_EXP 61
18172: AND
18173: IFFALSE 18267
18175: GO 18177
18177: DISABLE
18178: LD_INT 0
18180: PPUSH
18181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18182: LD_ADDR_VAR 0 2
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_OWVAR 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 32
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: PPUSH
18224: CALL_OW 69
18228: ST_TO_ADDR
// if not tmp then
18229: LD_VAR 0 2
18233: NOT
18234: IFFALSE 18238
// exit ;
18236: GO 18267
// for i in tmp do
18238: LD_ADDR_VAR 0 1
18242: PUSH
18243: LD_VAR 0 2
18247: PUSH
18248: FOR_IN
18249: IFFALSE 18265
// SetFuel ( i , 0 ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: LD_INT 0
18258: PPUSH
18259: CALL_OW 240
18263: GO 18248
18265: POP
18266: POP
// end ;
18267: PPOPN 2
18269: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18270: LD_EXP 26
18274: PUSH
18275: LD_EXP 62
18279: AND
18280: IFFALSE 18346
18282: GO 18284
18284: DISABLE
18285: LD_INT 0
18287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18288: LD_ADDR_VAR 0 1
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 29
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 69
18323: ST_TO_ADDR
// if not tmp then
18324: LD_VAR 0 1
18328: NOT
18329: IFFALSE 18333
// exit ;
18331: GO 18346
// DestroyUnit ( tmp [ 1 ] ) ;
18333: LD_VAR 0 1
18337: PUSH
18338: LD_INT 1
18340: ARRAY
18341: PPUSH
18342: CALL_OW 65
// end ;
18346: PPOPN 1
18348: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18349: LD_EXP 26
18353: PUSH
18354: LD_EXP 64
18358: AND
18359: IFFALSE 18488
18361: GO 18363
18363: DISABLE
18364: LD_INT 0
18366: PPUSH
// begin uc_side := 0 ;
18367: LD_ADDR_OWVAR 20
18371: PUSH
18372: LD_INT 0
18374: ST_TO_ADDR
// uc_nation := nation_arabian ;
18375: LD_ADDR_OWVAR 21
18379: PUSH
18380: LD_INT 2
18382: ST_TO_ADDR
// hc_gallery :=  ;
18383: LD_ADDR_OWVAR 33
18387: PUSH
18388: LD_STRING 
18390: ST_TO_ADDR
// hc_name :=  ;
18391: LD_ADDR_OWVAR 26
18395: PUSH
18396: LD_STRING 
18398: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18399: LD_INT 1
18401: PPUSH
18402: LD_INT 11
18404: PPUSH
18405: LD_INT 10
18407: PPUSH
18408: CALL_OW 380
// un := CreateHuman ;
18412: LD_ADDR_VAR 0 1
18416: PUSH
18417: CALL_OW 44
18421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18422: LD_VAR 0 1
18426: PPUSH
18427: LD_INT 1
18429: PPUSH
18430: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18434: LD_INT 35
18436: PPUSH
18437: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_INT 22
18448: PUSH
18449: LD_OWVAR 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PPUSH
18458: CALL_OW 69
18462: PPUSH
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 74
18472: PPUSH
18473: CALL_OW 115
// until IsDead ( un ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 301
18486: IFFALSE 18434
// end ;
18488: PPOPN 1
18490: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18491: LD_EXP 26
18495: PUSH
18496: LD_EXP 66
18500: AND
18501: IFFALSE 18513
18503: GO 18505
18505: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18506: LD_STRING earthquake(getX(game), 0, 32)
18508: PPUSH
18509: CALL_OW 559
18513: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18514: LD_EXP 26
18518: PUSH
18519: LD_EXP 67
18523: AND
18524: IFFALSE 18615
18526: GO 18528
18528: DISABLE
18529: LD_INT 0
18531: PPUSH
// begin enable ;
18532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 33
18562: PUSH
18563: LD_INT 3
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 69
18579: ST_TO_ADDR
// if not tmp then
18580: LD_VAR 0 1
18584: NOT
18585: IFFALSE 18589
// exit ;
18587: GO 18615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18589: LD_VAR 0 1
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: CALL_OW 234
// end ;
18615: PPOPN 1
18617: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18618: LD_EXP 26
18622: PUSH
18623: LD_EXP 68
18627: AND
18628: IFFALSE 18769
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
18636: PPUSH
18637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_OWVAR 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: ST_TO_ADDR
// if not tmp then
18674: LD_VAR 0 3
18678: NOT
18679: IFFALSE 18683
// exit ;
18681: GO 18769
// un := tmp [ rand ( 1 , tmp ) ] ;
18683: LD_ADDR_VAR 0 2
18687: PUSH
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 1
18695: PPUSH
18696: LD_VAR 0 3
18700: PPUSH
18701: CALL_OW 12
18705: ARRAY
18706: ST_TO_ADDR
// if Crawls ( un ) then
18707: LD_VAR 0 2
18711: PPUSH
18712: CALL_OW 318
18716: IFFALSE 18727
// ComWalk ( un ) ;
18718: LD_VAR 0 2
18722: PPUSH
18723: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18727: LD_VAR 0 2
18731: PPUSH
18732: LD_INT 9
18734: PPUSH
18735: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18739: LD_INT 28
18741: PPUSH
18742: LD_OWVAR 2
18746: PPUSH
18747: LD_INT 2
18749: PPUSH
18750: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18754: LD_INT 29
18756: PPUSH
18757: LD_OWVAR 2
18761: PPUSH
18762: LD_INT 2
18764: PPUSH
18765: CALL_OW 322
// end ;
18769: PPOPN 3
18771: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18772: LD_EXP 26
18776: PUSH
18777: LD_EXP 69
18781: AND
18782: IFFALSE 18893
18784: GO 18786
18786: DISABLE
18787: LD_INT 0
18789: PPUSH
18790: PPUSH
18791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18792: LD_ADDR_VAR 0 3
18796: PUSH
18797: LD_INT 22
18799: PUSH
18800: LD_OWVAR 2
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 25
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 69
18827: ST_TO_ADDR
// if not tmp then
18828: LD_VAR 0 3
18832: NOT
18833: IFFALSE 18837
// exit ;
18835: GO 18893
// un := tmp [ rand ( 1 , tmp ) ] ;
18837: LD_ADDR_VAR 0 2
18841: PUSH
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 1
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: CALL_OW 12
18859: ARRAY
18860: ST_TO_ADDR
// if Crawls ( un ) then
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL_OW 318
18870: IFFALSE 18881
// ComWalk ( un ) ;
18872: LD_VAR 0 2
18876: PPUSH
18877: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_INT 8
18888: PPUSH
18889: CALL_OW 336
// end ;
18893: PPOPN 3
18895: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18896: LD_EXP 26
18900: PUSH
18901: LD_EXP 70
18905: AND
18906: IFFALSE 19050
18908: GO 18910
18910: DISABLE
18911: LD_INT 0
18913: PPUSH
18914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18915: LD_ADDR_VAR 0 2
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_OWVAR 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 34
18947: PUSH
18948: LD_INT 12
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 34
18957: PUSH
18958: LD_INT 51
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 34
18967: PUSH
18968: LD_INT 32
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: ST_TO_ADDR
// if not tmp then
18991: LD_VAR 0 2
18995: NOT
18996: IFFALSE 19000
// exit ;
18998: GO 19050
// for i in tmp do
19000: LD_ADDR_VAR 0 1
19004: PUSH
19005: LD_VAR 0 2
19009: PUSH
19010: FOR_IN
19011: IFFALSE 19048
// if GetCargo ( i , mat_artifact ) = 0 then
19013: LD_VAR 0 1
19017: PPUSH
19018: LD_INT 4
19020: PPUSH
19021: CALL_OW 289
19025: PUSH
19026: LD_INT 0
19028: EQUAL
19029: IFFALSE 19046
// SetCargo ( i , mat_siberit , 100 ) ;
19031: LD_VAR 0 1
19035: PPUSH
19036: LD_INT 3
19038: PPUSH
19039: LD_INT 100
19041: PPUSH
19042: CALL_OW 290
19046: GO 19010
19048: POP
19049: POP
// end ;
19050: PPOPN 2
19052: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19053: LD_EXP 26
19057: PUSH
19058: LD_EXP 71
19062: AND
19063: IFFALSE 19246
19065: GO 19067
19067: DISABLE
19068: LD_INT 0
19070: PPUSH
19071: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19072: LD_ADDR_VAR 0 2
19076: PUSH
19077: LD_INT 22
19079: PUSH
19080: LD_OWVAR 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: ST_TO_ADDR
// if not tmp then
19094: LD_VAR 0 2
19098: NOT
19099: IFFALSE 19103
// exit ;
19101: GO 19246
// for i := 1 to 2 do
19103: LD_ADDR_VAR 0 1
19107: PUSH
19108: DOUBLE
19109: LD_INT 1
19111: DEC
19112: ST_TO_ADDR
19113: LD_INT 2
19115: PUSH
19116: FOR_TO
19117: IFFALSE 19244
// begin uc_side := your_side ;
19119: LD_ADDR_OWVAR 20
19123: PUSH
19124: LD_OWVAR 2
19128: ST_TO_ADDR
// uc_nation := nation_american ;
19129: LD_ADDR_OWVAR 21
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// vc_chassis := us_morphling ;
19137: LD_ADDR_OWVAR 37
19141: PUSH
19142: LD_INT 5
19144: ST_TO_ADDR
// vc_engine := engine_siberite ;
19145: LD_ADDR_OWVAR 39
19149: PUSH
19150: LD_INT 3
19152: ST_TO_ADDR
// vc_control := control_computer ;
19153: LD_ADDR_OWVAR 38
19157: PUSH
19158: LD_INT 3
19160: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19161: LD_ADDR_OWVAR 40
19165: PUSH
19166: LD_INT 10
19168: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19169: LD_VAR 0 2
19173: PUSH
19174: LD_INT 1
19176: ARRAY
19177: PPUSH
19178: CALL_OW 310
19182: NOT
19183: IFFALSE 19230
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19185: CALL_OW 45
19189: PPUSH
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: CALL_OW 250
19203: PPUSH
19204: LD_VAR 0 2
19208: PUSH
19209: LD_INT 1
19211: ARRAY
19212: PPUSH
19213: CALL_OW 251
19217: PPUSH
19218: LD_INT 12
19220: PPUSH
19221: LD_INT 1
19223: PPUSH
19224: CALL_OW 50
19228: GO 19242
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19230: CALL_OW 45
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: CALL_OW 51
// end ;
19242: GO 19116
19244: POP
19245: POP
// end ;
19246: PPOPN 2
19248: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19249: LD_EXP 26
19253: PUSH
19254: LD_EXP 72
19258: AND
19259: IFFALSE 19481
19261: GO 19263
19263: DISABLE
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19272: LD_ADDR_VAR 0 6
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_OWVAR 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 21
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 69
19325: ST_TO_ADDR
// if not tmp then
19326: LD_VAR 0 6
19330: NOT
19331: IFFALSE 19335
// exit ;
19333: GO 19481
// s1 := rand ( 1 , 4 ) ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_INT 1
19342: PPUSH
19343: LD_INT 4
19345: PPUSH
19346: CALL_OW 12
19350: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_VAR 0 6
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: LD_VAR 0 2
19369: PPUSH
19370: CALL_OW 259
19374: ST_TO_ADDR
// if s1 = 1 then
19375: LD_VAR 0 2
19379: PUSH
19380: LD_INT 1
19382: EQUAL
19383: IFFALSE 19403
// s2 := rand ( 2 , 4 ) else
19385: LD_ADDR_VAR 0 3
19389: PUSH
19390: LD_INT 2
19392: PPUSH
19393: LD_INT 4
19395: PPUSH
19396: CALL_OW 12
19400: ST_TO_ADDR
19401: GO 19411
// s2 := 1 ;
19403: LD_ADDR_VAR 0 3
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19411: LD_ADDR_VAR 0 5
19415: PUSH
19416: LD_VAR 0 6
19420: PUSH
19421: LD_INT 1
19423: ARRAY
19424: PPUSH
19425: LD_VAR 0 3
19429: PPUSH
19430: CALL_OW 259
19434: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19435: LD_VAR 0 6
19439: PUSH
19440: LD_INT 1
19442: ARRAY
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_VAR 0 5
19453: PPUSH
19454: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19458: LD_VAR 0 6
19462: PUSH
19463: LD_INT 1
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 3
19471: PPUSH
19472: LD_VAR 0 4
19476: PPUSH
19477: CALL_OW 237
// end ;
19481: PPOPN 6
19483: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19484: LD_EXP 26
19488: PUSH
19489: LD_EXP 73
19493: AND
19494: IFFALSE 19573
19496: GO 19498
19498: DISABLE
19499: LD_INT 0
19501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_OWVAR 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 30
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 69
19537: ST_TO_ADDR
// if not tmp then
19538: LD_VAR 0 1
19542: NOT
19543: IFFALSE 19547
// exit ;
19545: GO 19573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19547: LD_VAR 0 1
19551: PUSH
19552: LD_INT 1
19554: PPUSH
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 12
19564: ARRAY
19565: PPUSH
19566: LD_INT 1
19568: PPUSH
19569: CALL_OW 234
// end ;
19573: PPOPN 1
19575: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19576: LD_EXP 26
19580: PUSH
19581: LD_EXP 74
19585: AND
19586: IFFALSE 19698
19588: GO 19590
19590: DISABLE
19591: LD_INT 0
19593: PPUSH
19594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19595: LD_ADDR_VAR 0 2
19599: PUSH
19600: LD_INT 22
19602: PUSH
19603: LD_OWVAR 2
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 2
19614: PUSH
19615: LD_INT 30
19617: PUSH
19618: LD_INT 27
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 30
19627: PUSH
19628: LD_INT 26
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 30
19637: PUSH
19638: LD_INT 28
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 2
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19698
// for i in tmp do
19669: LD_ADDR_VAR 0 1
19673: PUSH
19674: LD_VAR 0 2
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19696
// SetLives ( i , 1 ) ;
19682: LD_VAR 0 1
19686: PPUSH
19687: LD_INT 1
19689: PPUSH
19690: CALL_OW 234
19694: GO 19679
19696: POP
19697: POP
// end ;
19698: PPOPN 2
19700: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19701: LD_EXP 26
19705: PUSH
19706: LD_EXP 75
19710: AND
19711: IFFALSE 19985
19713: GO 19715
19715: DISABLE
19716: LD_INT 0
19718: PPUSH
19719: PPUSH
19720: PPUSH
// begin i := rand ( 1 , 7 ) ;
19721: LD_ADDR_VAR 0 1
19725: PUSH
19726: LD_INT 1
19728: PPUSH
19729: LD_INT 7
19731: PPUSH
19732: CALL_OW 12
19736: ST_TO_ADDR
// case i of 1 :
19737: LD_VAR 0 1
19741: PUSH
19742: LD_INT 1
19744: DOUBLE
19745: EQUAL
19746: IFTRUE 19750
19748: GO 19760
19750: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19751: LD_STRING earthquake(getX(game), 0, 32)
19753: PPUSH
19754: CALL_OW 559
19758: GO 19985
19760: LD_INT 2
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19782
19768: POP
// begin ToLua ( displayStucuk(); ) ;
19769: LD_STRING displayStucuk();
19771: PPUSH
19772: CALL_OW 559
// ResetFog ;
19776: CALL_OW 335
// end ; 3 :
19780: GO 19985
19782: LD_INT 3
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19894
19790: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_OWVAR 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 69
19826: ST_TO_ADDR
// if not tmp then
19827: LD_VAR 0 2
19831: NOT
19832: IFFALSE 19836
// exit ;
19834: GO 19985
// un := tmp [ rand ( 1 , tmp ) ] ;
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_VAR 0 2
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// if Crawls ( un ) then
19860: LD_VAR 0 3
19864: PPUSH
19865: CALL_OW 318
19869: IFFALSE 19880
// ComWalk ( un ) ;
19871: LD_VAR 0 3
19875: PPUSH
19876: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19880: LD_VAR 0 3
19884: PPUSH
19885: LD_INT 8
19887: PPUSH
19888: CALL_OW 336
// end ; 4 :
19892: GO 19985
19894: LD_INT 4
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19963
19902: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19903: LD_ADDR_VAR 0 2
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_OWVAR 2
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 30
19922: PUSH
19923: LD_INT 29
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PPUSH
19934: CALL_OW 69
19938: ST_TO_ADDR
// if not tmp then
19939: LD_VAR 0 2
19943: NOT
19944: IFFALSE 19948
// exit ;
19946: GO 19985
// DestroyUnit ( tmp [ 1 ] ) ;
19948: LD_VAR 0 2
19952: PUSH
19953: LD_INT 1
19955: ARRAY
19956: PPUSH
19957: CALL_OW 65
// end ; 5 .. 7 :
19961: GO 19985
19963: LD_INT 5
19965: DOUBLE
19966: GREATEREQUAL
19967: IFFALSE 19975
19969: LD_INT 7
19971: DOUBLE
19972: LESSEQUAL
19973: IFTRUE 19977
19975: GO 19984
19977: POP
// StreamSibBomb ; end ;
19978: CALL 16235 0 0
19982: GO 19985
19984: POP
// end ;
19985: PPOPN 3
19987: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19988: LD_EXP 26
19992: PUSH
19993: LD_EXP 76
19997: AND
19998: IFFALSE 20154
20000: GO 20002
20002: DISABLE
20003: LD_INT 0
20005: PPUSH
20006: PPUSH
20007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_INT 81
20015: PUSH
20016: LD_OWVAR 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 21
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 21
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: ST_TO_ADDR
// if not tmp then
20062: LD_VAR 0 2
20066: NOT
20067: IFFALSE 20071
// exit ;
20069: GO 20154
// p := 0 ;
20071: LD_ADDR_VAR 0 3
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20079: LD_INT 35
20081: PPUSH
20082: CALL_OW 67
// p := p + 1 ;
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 1
20098: PLUS
20099: ST_TO_ADDR
// for i in tmp do
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: LD_VAR 0 2
20109: PUSH
20110: FOR_IN
20111: IFFALSE 20142
// if GetLives ( i ) < 1000 then
20113: LD_VAR 0 1
20117: PPUSH
20118: CALL_OW 256
20122: PUSH
20123: LD_INT 1000
20125: LESS
20126: IFFALSE 20140
// SetLives ( i , 1000 ) ;
20128: LD_VAR 0 1
20132: PPUSH
20133: LD_INT 1000
20135: PPUSH
20136: CALL_OW 234
20140: GO 20110
20142: POP
20143: POP
// until p > 20 ;
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 20
20151: GREATER
20152: IFFALSE 20079
// end ;
20154: PPOPN 3
20156: END
// every 0 0$1 trigger StreamModeActive and sTime do
20157: LD_EXP 26
20161: PUSH
20162: LD_EXP 77
20166: AND
20167: IFFALSE 20202
20169: GO 20171
20171: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20172: LD_INT 28
20174: PPUSH
20175: LD_OWVAR 2
20179: PPUSH
20180: LD_INT 2
20182: PPUSH
20183: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20187: LD_INT 30
20189: PPUSH
20190: LD_OWVAR 2
20194: PPUSH
20195: LD_INT 2
20197: PPUSH
20198: CALL_OW 322
// end ;
20202: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20203: LD_EXP 26
20207: PUSH
20208: LD_EXP 78
20212: AND
20213: IFFALSE 20334
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 21
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: LD_INT 23
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PPUSH
20271: CALL_OW 69
20275: ST_TO_ADDR
// if not tmp then
20276: LD_VAR 0 2
20280: NOT
20281: IFFALSE 20285
// exit ;
20283: GO 20334
// for i in tmp do
20285: LD_ADDR_VAR 0 1
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: FOR_IN
20296: IFFALSE 20332
// begin if Crawls ( i ) then
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 318
20307: IFFALSE 20318
// ComWalk ( i ) ;
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 138
// SetClass ( i , 2 ) ;
20318: LD_VAR 0 1
20322: PPUSH
20323: LD_INT 2
20325: PPUSH
20326: CALL_OW 336
// end ;
20330: GO 20295
20332: POP
20333: POP
// end ;
20334: PPOPN 2
20336: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20337: LD_EXP 26
20341: PUSH
20342: LD_EXP 79
20346: AND
20347: IFFALSE 20628
20349: GO 20351
20351: DISABLE
20352: LD_INT 0
20354: PPUSH
20355: PPUSH
20356: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20357: LD_OWVAR 2
20361: PPUSH
20362: LD_INT 9
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: LD_INT 1
20370: PPUSH
20371: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20375: LD_INT 9
20377: PPUSH
20378: LD_OWVAR 2
20382: PPUSH
20383: CALL_OW 343
// uc_side := 9 ;
20387: LD_ADDR_OWVAR 20
20391: PUSH
20392: LD_INT 9
20394: ST_TO_ADDR
// uc_nation := 2 ;
20395: LD_ADDR_OWVAR 21
20399: PUSH
20400: LD_INT 2
20402: ST_TO_ADDR
// hc_name := Dark Warrior ;
20403: LD_ADDR_OWVAR 26
20407: PUSH
20408: LD_STRING Dark Warrior
20410: ST_TO_ADDR
// hc_gallery :=  ;
20411: LD_ADDR_OWVAR 33
20415: PUSH
20416: LD_STRING 
20418: ST_TO_ADDR
// hc_noskilllimit := true ;
20419: LD_ADDR_OWVAR 76
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20427: LD_ADDR_OWVAR 31
20431: PUSH
20432: LD_INT 30
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: ST_TO_ADDR
// un := CreateHuman ;
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: CALL_OW 44
20459: ST_TO_ADDR
// hc_noskilllimit := false ;
20460: LD_ADDR_OWVAR 76
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20468: LD_VAR 0 3
20472: PPUSH
20473: LD_INT 1
20475: PPUSH
20476: CALL_OW 51
// p := 0 ;
20480: LD_ADDR_VAR 0 2
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20488: LD_INT 35
20490: PPUSH
20491: CALL_OW 67
// p := p + 1 ;
20495: LD_ADDR_VAR 0 2
20499: PUSH
20500: LD_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: PLUS
20508: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20509: LD_VAR 0 3
20513: PPUSH
20514: CALL_OW 256
20518: PUSH
20519: LD_INT 1000
20521: LESS
20522: IFFALSE 20536
// SetLives ( un , 1000 ) ;
20524: LD_VAR 0 3
20528: PPUSH
20529: LD_INT 1000
20531: PPUSH
20532: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 81
20543: PUSH
20544: LD_OWVAR 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 91
20555: PUSH
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 30
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PPUSH
20573: CALL_OW 69
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL_OW 74
20587: PPUSH
20588: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20592: LD_VAR 0 2
20596: PUSH
20597: LD_INT 60
20599: GREATER
20600: PUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: CALL_OW 301
20610: OR
20611: IFFALSE 20488
// if un then
20613: LD_VAR 0 3
20617: IFFALSE 20628
// RemoveUnit ( un ) ;
20619: LD_VAR 0 3
20623: PPUSH
20624: CALL_OW 64
// end ; end_of_file end_of_file
20628: PPOPN 3
20630: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20631: LD_INT 0
20633: PPUSH
20634: PPUSH
20635: PPUSH
20636: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 264
20646: PUSH
20647: LD_EXP 84
20651: EQUAL
20652: IFFALSE 20724
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20654: LD_INT 68
20656: PPUSH
20657: LD_VAR 0 1
20661: PPUSH
20662: CALL_OW 255
20666: PPUSH
20667: CALL_OW 321
20671: PUSH
20672: LD_INT 2
20674: EQUAL
20675: IFFALSE 20687
// eff := 70 else
20677: LD_ADDR_VAR 0 4
20681: PUSH
20682: LD_INT 70
20684: ST_TO_ADDR
20685: GO 20695
// eff := 30 ;
20687: LD_ADDR_VAR 0 4
20691: PUSH
20692: LD_INT 30
20694: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 250
20704: PPUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 251
20714: PPUSH
20715: LD_VAR 0 4
20719: PPUSH
20720: CALL_OW 495
// end ; end ;
20724: LD_VAR 0 2
20728: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20729: LD_INT 0
20731: PPUSH
// end ;
20732: LD_VAR 0 4
20736: RET
// export function SOS_Command ( cmd ) ; begin
20737: LD_INT 0
20739: PPUSH
// end ;
20740: LD_VAR 0 2
20744: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20745: LD_VAR 0 1
20749: PUSH
20750: LD_INT 255
20752: EQUAL
20753: PUSH
20754: LD_VAR 0 2
20758: PPUSH
20759: CALL_OW 264
20763: PUSH
20764: LD_INT 14
20766: PUSH
20767: LD_INT 53
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: IN
20774: AND
20775: PUSH
20776: LD_VAR 0 4
20780: PPUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: CALL_OW 488
20790: AND
20791: IFFALSE 20815
// CutTreeXYR ( unit , x , y , 12 ) ;
20793: LD_VAR 0 2
20797: PPUSH
20798: LD_VAR 0 4
20802: PPUSH
20803: LD_VAR 0 5
20807: PPUSH
20808: LD_INT 12
20810: PPUSH
20811: CALL 20818 0 4
// end ;
20815: PPOPN 5
20817: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20829: LD_VAR 0 1
20833: NOT
20834: PUSH
20835: LD_VAR 0 2
20839: PPUSH
20840: LD_VAR 0 3
20844: PPUSH
20845: CALL_OW 488
20849: NOT
20850: OR
20851: PUSH
20852: LD_VAR 0 4
20856: NOT
20857: OR
20858: IFFALSE 20862
// exit ;
20860: GO 21202
// list := [ ] ;
20862: LD_ADDR_VAR 0 13
20866: PUSH
20867: EMPTY
20868: ST_TO_ADDR
// if x - r < 0 then
20869: LD_VAR 0 2
20873: PUSH
20874: LD_VAR 0 4
20878: MINUS
20879: PUSH
20880: LD_INT 0
20882: LESS
20883: IFFALSE 20895
// min_x := 0 else
20885: LD_ADDR_VAR 0 7
20889: PUSH
20890: LD_INT 0
20892: ST_TO_ADDR
20893: GO 20911
// min_x := x - r ;
20895: LD_ADDR_VAR 0 7
20899: PUSH
20900: LD_VAR 0 2
20904: PUSH
20905: LD_VAR 0 4
20909: MINUS
20910: ST_TO_ADDR
// if y - r < 0 then
20911: LD_VAR 0 3
20915: PUSH
20916: LD_VAR 0 4
20920: MINUS
20921: PUSH
20922: LD_INT 0
20924: LESS
20925: IFFALSE 20937
// min_y := 0 else
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
20935: GO 20953
// min_y := y - r ;
20937: LD_ADDR_VAR 0 8
20941: PUSH
20942: LD_VAR 0 3
20946: PUSH
20947: LD_VAR 0 4
20951: MINUS
20952: ST_TO_ADDR
// max_x := x + r ;
20953: LD_ADDR_VAR 0 9
20957: PUSH
20958: LD_VAR 0 2
20962: PUSH
20963: LD_VAR 0 4
20967: PLUS
20968: ST_TO_ADDR
// max_y := y + r ;
20969: LD_ADDR_VAR 0 10
20973: PUSH
20974: LD_VAR 0 3
20978: PUSH
20979: LD_VAR 0 4
20983: PLUS
20984: ST_TO_ADDR
// for _x = min_x to max_x do
20985: LD_ADDR_VAR 0 11
20989: PUSH
20990: DOUBLE
20991: LD_VAR 0 7
20995: DEC
20996: ST_TO_ADDR
20997: LD_VAR 0 9
21001: PUSH
21002: FOR_TO
21003: IFFALSE 21120
// for _y = min_y to max_y do
21005: LD_ADDR_VAR 0 12
21009: PUSH
21010: DOUBLE
21011: LD_VAR 0 8
21015: DEC
21016: ST_TO_ADDR
21017: LD_VAR 0 10
21021: PUSH
21022: FOR_TO
21023: IFFALSE 21116
// begin if not ValidHex ( _x , _y ) then
21025: LD_VAR 0 11
21029: PPUSH
21030: LD_VAR 0 12
21034: PPUSH
21035: CALL_OW 488
21039: NOT
21040: IFFALSE 21044
// continue ;
21042: GO 21022
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21044: LD_VAR 0 11
21048: PPUSH
21049: LD_VAR 0 12
21053: PPUSH
21054: CALL_OW 351
21058: PUSH
21059: LD_VAR 0 11
21063: PPUSH
21064: LD_VAR 0 12
21068: PPUSH
21069: CALL_OW 554
21073: AND
21074: IFFALSE 21114
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21076: LD_ADDR_VAR 0 13
21080: PUSH
21081: LD_VAR 0 13
21085: PPUSH
21086: LD_VAR 0 13
21090: PUSH
21091: LD_INT 1
21093: PLUS
21094: PPUSH
21095: LD_VAR 0 11
21099: PUSH
21100: LD_VAR 0 12
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 2
21113: ST_TO_ADDR
// end ;
21114: GO 21022
21116: POP
21117: POP
21118: GO 21002
21120: POP
21121: POP
// if not list then
21122: LD_VAR 0 13
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21202
// for i in list do
21131: LD_ADDR_VAR 0 6
21135: PUSH
21136: LD_VAR 0 13
21140: PUSH
21141: FOR_IN
21142: IFFALSE 21200
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21144: LD_VAR 0 1
21148: PPUSH
21149: LD_STRING M
21151: PUSH
21152: LD_VAR 0 6
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: PUSH
21161: LD_VAR 0 6
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: PPUSH
21194: CALL_OW 447
21198: GO 21141
21200: POP
21201: POP
// end ; end_of_file
21202: LD_VAR 0 5
21206: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21207: GO 21209
21209: DISABLE
// begin ru_radar := 98 ;
21210: LD_ADDR_EXP 80
21214: PUSH
21215: LD_INT 98
21217: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21218: LD_ADDR_EXP 81
21222: PUSH
21223: LD_INT 89
21225: ST_TO_ADDR
// us_hack := 99 ;
21226: LD_ADDR_EXP 82
21230: PUSH
21231: LD_INT 99
21233: ST_TO_ADDR
// us_artillery := 97 ;
21234: LD_ADDR_EXP 83
21238: PUSH
21239: LD_INT 97
21241: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21242: LD_ADDR_EXP 84
21246: PUSH
21247: LD_INT 91
21249: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21250: LD_ADDR_EXP 85
21254: PUSH
21255: LD_INT 92
21257: ST_TO_ADDR
// tech_Artillery := 80 ;
21258: LD_ADDR_EXP 86
21262: PUSH
21263: LD_INT 80
21265: ST_TO_ADDR
// tech_RadMat := 81 ;
21266: LD_ADDR_EXP 87
21270: PUSH
21271: LD_INT 81
21273: ST_TO_ADDR
// tech_BasicTools := 82 ;
21274: LD_ADDR_EXP 88
21278: PUSH
21279: LD_INT 82
21281: ST_TO_ADDR
// tech_Cargo := 83 ;
21282: LD_ADDR_EXP 89
21286: PUSH
21287: LD_INT 83
21289: ST_TO_ADDR
// tech_Track := 84 ;
21290: LD_ADDR_EXP 90
21294: PUSH
21295: LD_INT 84
21297: ST_TO_ADDR
// tech_Crane := 85 ;
21298: LD_ADDR_EXP 91
21302: PUSH
21303: LD_INT 85
21305: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21306: LD_ADDR_EXP 92
21310: PUSH
21311: LD_INT 86
21313: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21314: LD_ADDR_EXP 93
21318: PUSH
21319: LD_INT 87
21321: ST_TO_ADDR
// end ;
21322: END
