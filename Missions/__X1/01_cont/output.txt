// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 2 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 2
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 2
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5681
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5446: LD_EXP 17
5450: PPUSH
5451: LD_STRING DO-olaf-1
5453: PPUSH
5454: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5458: LD_EXP 16
5462: PPUSH
5463: LD_STRING DH-olaf-1
5465: PPUSH
5466: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING DO-olaf-2
5477: PPUSH
5478: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5482: LD_EXP 16
5486: PPUSH
5487: LD_STRING DH-olaf-2
5489: PPUSH
5490: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5494: LD_EXP 17
5498: PPUSH
5499: LD_STRING DO-olaf-3
5501: PPUSH
5502: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5506: LD_EXP 17
5510: PPUSH
5511: LD_STRING DO-olaf-4
5513: PPUSH
5514: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5518: LD_EXP 16
5522: PPUSH
5523: LD_STRING DH-olaf-4
5525: PPUSH
5526: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5530: LD_EXP 17
5534: PPUSH
5535: LD_STRING DO-olaf-5
5537: PPUSH
5538: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5542: LD_EXP 16
5546: PPUSH
5547: LD_STRING DH-olaf-5
5549: PPUSH
5550: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5554: LD_EXP 17
5558: PPUSH
5559: LD_STRING DO-olaf-6
5561: PPUSH
5562: CALL_OW 88
// if russianSpotted or johnnySaved then
5566: LD_EXP 9
5570: PUSH
5571: LD_EXP 4
5575: OR
5576: IFFALSE 5604
// begin Say ( Heike , DH-olaf-6a ) ;
5578: LD_EXP 16
5582: PPUSH
5583: LD_STRING DH-olaf-6a
5585: PPUSH
5586: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5590: LD_EXP 17
5594: PPUSH
5595: LD_STRING DO-olaf-7a
5597: PPUSH
5598: CALL_OW 88
// end else
5602: GO 5628
// begin Say ( Heike , DH-olaf-6b ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING DH-olaf-6b
5611: PPUSH
5612: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5616: LD_EXP 17
5620: PPUSH
5621: LD_STRING DO-olaf-7b
5623: PPUSH
5624: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5628: LD_EXP 17
5632: PPUSH
5633: LD_STRING DO-olaf-8
5635: PPUSH
5636: CALL_OW 88
// InGameOff ;
5640: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5644: LD_STRING O3_camp_cont
5646: PPUSH
5647: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5651: LD_EXP 17
5655: PPUSH
5656: LD_INT 52
5658: PPUSH
5659: LD_INT 90
5661: PPUSH
5662: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 53
5673: PPUSH
5674: LD_INT 89
5676: PPUSH
5677: CALL_OW 178
// end ;
5681: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5682: LD_EXP 8
5686: NOT
5687: PUSH
5688: LD_EXP 16
5692: PPUSH
5693: LD_EXP 18
5697: PPUSH
5698: CALL_OW 296
5702: PUSH
5703: LD_INT 36
5705: LESS
5706: AND
5707: IFFALSE 5727
5709: GO 5711
5711: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5712: LD_EXP 17
5716: PPUSH
5717: LD_INT 39
5719: PPUSH
5720: LD_INT 71
5722: PPUSH
5723: CALL_OW 111
5727: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5728: LD_EXP 7
5732: NOT
5733: PUSH
5734: LD_INT 2
5736: PPUSH
5737: LD_EXP 19
5741: PPUSH
5742: CALL_OW 292
5746: PUSH
5747: LD_INT 2
5749: PPUSH
5750: LD_EXP 18
5754: PPUSH
5755: CALL_OW 292
5759: OR
5760: AND
5761: IFFALSE 7082
5763: GO 5765
5765: DISABLE
5766: LD_INT 0
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin if not johnnySaved then
5771: LD_EXP 4
5775: NOT
5776: IFFALSE 5787
// KillUnit ( Johnny ) ;
5778: LD_EXP 25
5782: PPUSH
5783: CALL_OW 66
// mercenariesSpotted := true ;
5787: LD_ADDR_EXP 7
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5795: LD_STRING O4_camp_cont
5797: PPUSH
5798: CALL_OW 337
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5806: LD_INT 53
5808: PPUSH
5809: LD_INT 89
5811: PPUSH
5812: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5816: LD_INT 53
5818: PPUSH
5819: LD_INT 89
5821: PPUSH
5822: LD_INT 2
5824: PPUSH
5825: LD_INT 8
5827: NEG
5828: PPUSH
5829: CALL_OW 330
// if olafSpotted then
5833: LD_EXP 8
5837: IFFALSE 5955
// begin AddComTurnUnit ( Olaf , Heike ) ;
5839: LD_EXP 17
5843: PPUSH
5844: LD_EXP 16
5848: PPUSH
5849: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5853: LD_EXP 16
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 86
5863: PPUSH
5864: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5868: LD_EXP 16
5872: PPUSH
5873: LD_EXP 17
5877: PPUSH
5878: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5882: LD_EXP 17
5886: PPUSH
5887: LD_STRING DO-camp-1
5889: PPUSH
5890: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5894: LD_EXP 18
5898: PUSH
5899: LD_EXP 19
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: LD_EXP 16
5912: PPUSH
5913: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5917: LD_EXP 18
5921: PPUSH
5922: LD_STRING DG-camp-1
5924: PPUSH
5925: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5929: LD_EXP 16
5933: PPUSH
5934: LD_STRING DH-camp-1
5936: PPUSH
5937: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5941: LD_EXP 17
5945: PPUSH
5946: LD_STRING DO-camp-2
5948: PPUSH
5949: CALL_OW 88
// end else
5953: GO 6350
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5955: LD_EXP 16
5959: PPUSH
5960: LD_INT 51
5962: PPUSH
5963: LD_INT 86
5965: PPUSH
5966: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5970: LD_EXP 16
5974: PPUSH
5975: LD_EXP 18
5979: PPUSH
5980: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5984: LD_EXP 18
5988: PUSH
5989: LD_EXP 19
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: LD_EXP 16
6002: PPUSH
6003: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6007: LD_EXP 18
6011: PPUSH
6012: LD_STRING DG-camp-1a
6014: PPUSH
6015: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING DH-camp-1a
6026: PPUSH
6027: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6038: LD_EXP 19
6042: PPUSH
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6052: LD_EXP 19
6056: PPUSH
6057: LD_STRING DM-camp-1a
6059: PPUSH
6060: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6064: LD_EXP 17
6068: PPUSH
6069: LD_INT 52
6071: PPUSH
6072: LD_INT 90
6074: PPUSH
6075: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6079: LD_EXP 19
6083: PPUSH
6084: LD_EXP 16
6088: PPUSH
6089: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING DG-camp-2a
6100: PPUSH
6101: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6105: LD_EXP 16
6109: PPUSH
6110: LD_STRING DH-camp-2a
6112: PPUSH
6113: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6117: LD_EXP 19
6121: PPUSH
6122: LD_STRING DM-camp-2a
6124: PPUSH
6125: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6129: LD_INT 35
6131: PPUSH
6132: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6136: LD_EXP 17
6140: PPUSH
6141: LD_EXP 16
6145: PPUSH
6146: CALL_OW 296
6150: PUSH
6151: LD_INT 10
6153: LESS
6154: IFFALSE 6129
// AddComTurnUnit ( Olaf , Heike ) ;
6156: LD_EXP 17
6160: PPUSH
6161: LD_EXP 16
6165: PPUSH
6166: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6170: LD_EXP 19
6174: PPUSH
6175: LD_EXP 16
6179: PPUSH
6180: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6184: LD_EXP 17
6188: PPUSH
6189: LD_STRING DO-camp-2a
6191: PPUSH
6192: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6196: LD_EXP 16
6200: PPUSH
6201: LD_EXP 17
6205: PPUSH
6206: CALL_OW 119
// if russianSpotted then
6210: LD_EXP 9
6214: IFFALSE 6254
// begin Say ( Heike , DH-camp-2aa ) ;
6216: LD_EXP 16
6220: PPUSH
6221: LD_STRING DH-camp-2aa
6223: PPUSH
6224: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6228: LD_EXP 18
6232: PPUSH
6233: LD_STRING DG-camp-2aa
6235: PPUSH
6236: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6240: LD_EXP 19
6244: PPUSH
6245: LD_STRING DM-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// end else
6252: GO 6278
// begin Say ( Heike , DH-camp-2ab ) ;
6254: LD_EXP 16
6258: PPUSH
6259: LD_STRING DH-camp-2ab
6261: PPUSH
6262: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6266: LD_EXP 19
6270: PPUSH
6271: LD_STRING DM-camp-2ab
6273: PPUSH
6274: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-3a
6285: PPUSH
6286: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6290: LD_EXP 17
6294: PPUSH
6295: LD_STRING DO-camp-3a
6297: PPUSH
6298: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6302: LD_EXP 18
6306: PPUSH
6307: LD_STRING DG-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-4aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6326: LD_EXP 19
6330: PPUSH
6331: LD_STRING DM-camp-4aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_STRING DO-camp-4a
6345: PPUSH
6346: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6350: LD_EXP 17
6354: PPUSH
6355: LD_STRING DO-camp-3
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4
6369: PPUSH
6370: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_EXP 17
6383: PPUSH
6384: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6388: LD_EXP 18
6392: PPUSH
6393: LD_STRING DG-camp-4
6395: PPUSH
6396: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6400: LD_EXP 16
6404: PPUSH
6405: LD_EXP 18
6409: PPUSH
6410: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6414: LD_EXP 16
6418: PPUSH
6419: LD_STRING DH-camp-4
6421: PPUSH
6422: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6426: LD_EXP 19
6430: PUSH
6431: LD_EXP 17
6435: PUSH
6436: LD_EXP 18
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: PPUSH
6446: LD_EXP 16
6450: PPUSH
6451: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6455: LD_EXP 18
6459: PPUSH
6460: LD_STRING DG-camp-5
6462: PPUSH
6463: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6467: LD_EXP 18
6471: PPUSH
6472: LD_STRING DG-camp-6
6474: PPUSH
6475: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6479: LD_EXP 16
6483: PPUSH
6484: LD_STRING DH-camp-6
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-7
6498: PPUSH
6499: CALL_OW 88
// if DogTagFound then
6503: LD_EXP 6
6507: IFFALSE 6547
// begin Say ( Heike , DH-quest-1a ) ;
6509: LD_EXP 16
6513: PPUSH
6514: LD_STRING DH-quest-1a
6516: PPUSH
6517: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6521: LD_EXP 18
6525: PPUSH
6526: LD_STRING DG-quest-1a
6528: PPUSH
6529: CALL_OW 88
// mercenariesQuestDone := true ;
6533: LD_ADDR_EXP 11
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// InGameOff ;
6541: CALL_OW 9
// end else
6545: GO 6713
// begin Say ( Heike , DH-camp-7 ) ;
6547: LD_EXP 16
6551: PPUSH
6552: LD_STRING DH-camp-7
6554: PPUSH
6555: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6559: LD_EXP 16
6563: PPUSH
6564: CALL_OW 256
6568: PUSH
6569: LD_INT 1000
6571: LESS
6572: IFFALSE 6664
// begin Say ( Olaf , DO-heal-1 ) ;
6574: LD_EXP 17
6578: PPUSH
6579: LD_STRING DO-heal-1
6581: PPUSH
6582: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_INT 51
6593: PPUSH
6594: LD_INT 88
6596: PPUSH
6597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6601: LD_INT 35
6603: PPUSH
6604: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6608: LD_EXP 16
6612: PPUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 296
6622: PUSH
6623: LD_INT 4
6625: LESS
6626: PUSH
6627: LD_EXP 16
6631: PPUSH
6632: LD_INT 51
6634: PPUSH
6635: LD_INT 88
6637: PPUSH
6638: CALL_OW 307
6642: OR
6643: IFFALSE 6601
// SetLives ( Heike , 1000 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_INT 1000
6652: PPUSH
6653: CALL_OW 234
// wait ( 0 0$2 ) ;
6657: LD_INT 70
6659: PPUSH
6660: CALL_OW 67
// end ; InGameOff ;
6664: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6668: LD_EXP 17
6672: PUSH
6673: LD_EXP 18
6677: PUSH
6678: LD_EXP 19
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: PPUSH
6688: LD_INT 53
6690: PPUSH
6691: LD_INT 89
6693: PPUSH
6694: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6698: LD_STRING O5_proof_cont
6700: PPUSH
6701: CALL_OW 337
// mercenariesQuestReady := true ;
6705: LD_ADDR_EXP 10
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6713: LD_EXP 10
6717: NOT
6718: IFFALSE 6722
// exit ;
6720: GO 7082
// wait ( 0 0$35 ) ;
6722: LD_INT 1225
6724: PPUSH
6725: CALL_OW 67
// driver := PreparePatrolTank ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL 2814 0 0
6738: ST_TO_ADDR
// if not driver then
6739: LD_VAR 0 2
6743: NOT
6744: IFFALSE 6748
// exit ;
6746: GO 7082
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_INT 1
6753: PPUSH
6754: LD_INT 2
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 310
6778: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6779: LD_VAR 0 3
6783: PPUSH
6784: LD_INT 500
6786: PPUSH
6787: CALL_OW 234
// SetLives ( driver , 450 ) ;
6791: LD_VAR 0 2
6795: PPUSH
6796: LD_INT 450
6798: PPUSH
6799: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 59
6810: PPUSH
6811: LD_INT 60
6813: PPUSH
6814: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 59
6832: PPUSH
6833: LD_INT 60
6835: PPUSH
6836: CALL_OW 307
6840: IFFALSE 6818
// if not See ( 1 , Heike ) then
6842: LD_INT 1
6844: PPUSH
6845: LD_EXP 16
6849: PPUSH
6850: CALL_OW 292
6854: NOT
6855: IFFALSE 6979
// begin if Difficulty < 3 then
6857: LD_OWVAR 67
6861: PUSH
6862: LD_INT 3
6864: LESS
6865: IFFALSE 6883
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6867: LD_INT 59
6869: PPUSH
6870: LD_INT 60
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 6
6878: PPUSH
6879: CALL_OW 330
// ComExitVehicle ( driver ) ;
6883: LD_VAR 0 2
6887: PPUSH
6888: CALL_OW 121
// wait ( 0 0$1 ) ;
6892: LD_INT 35
6894: PPUSH
6895: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6899: LD_VAR 0 2
6903: PPUSH
6904: LD_INT 58
6906: PPUSH
6907: LD_INT 54
6909: PPUSH
6910: CALL_OW 171
// wait ( 0 0$1 ) ;
6914: LD_INT 35
6916: PPUSH
6917: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6921: LD_VAR 0 2
6925: PPUSH
6926: LD_INT 57
6928: PPUSH
6929: LD_INT 53
6931: PPUSH
6932: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_INT 350
6943: PPUSH
6944: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6962: LD_VAR 0 2
6966: PPUSH
6967: LD_INT 107
6969: PPUSH
6970: LD_INT 118
6972: PPUSH
6973: CALL_OW 171
// end else
6977: GO 6994
// begin ComMoveXY ( driver , 107 , 118 ) ;
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_INT 107
6986: PPUSH
6987: LD_INT 118
6989: PPUSH
6990: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6994: LD_INT 35
6996: PPUSH
6997: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 307
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 301
7026: OR
7027: IFFALSE 6994
// if IsDead ( driver [ 1 ] ) then
7029: LD_VAR 0 2
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 301
7042: IFFALSE 7046
// exit ;
7044: GO 7082
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7046: LD_ADDR_VAR 0 1
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: PUSH
7066: FOR_IN
7067: IFFALSE 7080
// RemoveUnit ( i ) ;
7069: LD_VAR 0 1
7073: PPUSH
7074: CALL_OW 64
7078: GO 7066
7080: POP
7081: POP
// end ;
7082: PPOPN 3
7084: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7085: LD_INT 10
7087: PPUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 2
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 21
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 70
7116: IFFALSE 7190
7118: GO 7120
7120: DISABLE
// begin InGameOn ;
7121: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7125: LD_EXP 17
7129: PUSH
7130: LD_EXP 19
7134: PUSH
7135: LD_EXP 18
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PPUSH
7145: LD_EXP 16
7149: PPUSH
7150: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7154: LD_EXP 19
7158: PPUSH
7159: LD_STRING DM-quest-1
7161: PPUSH
7162: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7166: LD_EXP 18
7170: PPUSH
7171: LD_STRING DG-quest-1
7173: PPUSH
7174: CALL_OW 88
// InGameOff ;
7178: CALL_OW 9
// mercenariesQuestDone := true ;
7182: LD_ADDR_EXP 11
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// end ;
7190: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7191: LD_EXP 16
7195: PPUSH
7196: LD_INT 10
7198: PPUSH
7199: CALL_OW 308
7203: PUSH
7204: LD_EXP 6
7208: AND
7209: PUSH
7210: LD_EXP 10
7214: AND
7215: PUSH
7216: LD_INT 10
7218: PPUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 70
7247: NOT
7248: AND
7249: IFFALSE 7421
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
// begin InGameOn ;
7257: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7261: LD_EXP 17
7265: PUSH
7266: LD_EXP 19
7270: PUSH
7271: LD_EXP 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: LD_EXP 16
7285: PPUSH
7286: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7290: LD_EXP 16
7294: PPUSH
7295: LD_INT 54
7297: PPUSH
7298: LD_INT 86
7300: PPUSH
7301: CALL_OW 111
// p := p + 1 ;
7305: LD_ADDR_VAR 0 1
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: LD_INT 1
7317: PLUS
7318: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7319: LD_INT 35
7321: PPUSH
7322: CALL_OW 67
// p := p + 1 ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 1
7335: PUSH
7336: LD_INT 1
7338: PLUS
7339: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7340: LD_EXP 16
7344: PPUSH
7345: LD_EXP 18
7349: PPUSH
7350: CALL_OW 296
7354: PUSH
7355: LD_INT 4
7357: LESS
7358: PUSH
7359: LD_VAR 0 1
7363: PUSH
7364: LD_INT 5
7366: GREATER
7367: OR
7368: IFFALSE 7319
// Say ( Mike , DM-quest-1 ) ;
7370: LD_EXP 19
7374: PPUSH
7375: LD_STRING DM-quest-1
7377: PPUSH
7378: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7382: LD_EXP 18
7386: PPUSH
7387: LD_STRING DG-quest-1
7389: PPUSH
7390: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7394: LD_EXP 16
7398: PPUSH
7399: LD_INT 55
7401: PPUSH
7402: LD_INT 87
7404: PPUSH
7405: CALL_OW 111
// InGameOff ;
7409: CALL_OW 9
// mercenariesQuestDone := true ;
7413: LD_ADDR_EXP 11
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// end ;
7421: PPOPN 1
7423: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7424: LD_EXP 16
7428: PUSH
7429: LD_INT 55
7431: PUSH
7432: EMPTY
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: IN
7440: IFFALSE 7480
7442: GO 7444
7444: DISABLE
// begin if Difficulty < 3 then
7445: LD_OWVAR 67
7449: PUSH
7450: LD_INT 3
7452: LESS
7453: IFFALSE 7468
// RemoveSeeing ( 59 , 60 , 2 ) ;
7455: LD_INT 59
7457: PPUSH
7458: LD_INT 60
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7468: LD_EXP 16
7472: PPUSH
7473: LD_STRING DH-driver
7475: PPUSH
7476: CALL_OW 88
// end ;
7480: END
// every 0 0$1 trigger mercenariesQuestDone do
7481: LD_EXP 11
7485: IFFALSE 7973
7487: GO 7489
7489: DISABLE
// begin if mercenariesQuestReady then
7490: LD_EXP 10
7494: IFFALSE 7503
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7496: LD_STRING O5_proof_cont_out
7498: PPUSH
7499: CALL_OW 337
// InGameOn ;
7503: CALL_OW 8
// if IsInUnit ( Heike ) then
7507: LD_EXP 16
7511: PPUSH
7512: CALL_OW 310
7516: IFFALSE 7527
// ComExitVehicle ( Heike ) ;
7518: LD_EXP 16
7522: PPUSH
7523: CALL_OW 121
// wait ( 3 ) ;
7527: LD_INT 3
7529: PPUSH
7530: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7534: LD_EXP 16
7538: PPUSH
7539: LD_EXP 18
7543: PPUSH
7544: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7548: LD_EXP 17
7552: PUSH
7553: LD_EXP 19
7557: PUSH
7558: LD_EXP 18
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PPUSH
7568: LD_EXP 16
7572: PPUSH
7573: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7577: LD_EXP 16
7581: PPUSH
7582: LD_STRING DH-quest-done-1
7584: PPUSH
7585: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7589: LD_EXP 19
7593: PPUSH
7594: LD_STRING DM-quest-done-1
7596: PPUSH
7597: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7601: LD_EXP 18
7605: PPUSH
7606: LD_STRING DG-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7613: LD_EXP 16
7617: PPUSH
7618: LD_EXP 17
7622: PPUSH
7623: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7627: LD_EXP 16
7631: PPUSH
7632: LD_STRING DH-quest-done-2
7634: PPUSH
7635: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7639: LD_EXP 17
7643: PPUSH
7644: LD_STRING DO-quest-done-2
7646: PPUSH
7647: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7651: LD_EXP 17
7655: PPUSH
7656: LD_STRING DO-quest-done-3
7658: PPUSH
7659: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7663: LD_EXP 18
7667: PPUSH
7668: LD_INT 51
7670: PPUSH
7671: LD_INT 90
7673: PPUSH
7674: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7678: LD_EXP 18
7682: PPUSH
7683: LD_INT 50
7685: PPUSH
7686: LD_INT 89
7688: PPUSH
7689: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7693: LD_EXP 16
7697: PPUSH
7698: LD_EXP 18
7702: PPUSH
7703: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7707: LD_EXP 18
7711: PPUSH
7712: LD_STRING DG-quest-done-4
7714: PPUSH
7715: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7719: LD_EXP 18
7723: PPUSH
7724: LD_EXP 16
7728: PPUSH
7729: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7733: LD_EXP 16
7737: PPUSH
7738: CALL_OW 256
7742: PUSH
7743: LD_INT 1000
7745: LESS
7746: IFFALSE 7838
// begin Say ( Olaf , DO-heal-1 ) ;
7748: LD_EXP 17
7752: PPUSH
7753: LD_STRING DO-heal-1
7755: PPUSH
7756: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7760: LD_EXP 16
7764: PPUSH
7765: LD_INT 51
7767: PPUSH
7768: LD_INT 88
7770: PPUSH
7771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7775: LD_INT 35
7777: PPUSH
7778: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7782: LD_EXP 16
7786: PPUSH
7787: LD_EXP 17
7791: PPUSH
7792: CALL_OW 296
7796: PUSH
7797: LD_INT 4
7799: LESS
7800: PUSH
7801: LD_EXP 16
7805: PPUSH
7806: LD_INT 51
7808: PPUSH
7809: LD_INT 88
7811: PPUSH
7812: CALL_OW 307
7816: OR
7817: IFFALSE 7775
// SetLives ( Heike , 1000 ) ;
7819: LD_EXP 16
7823: PPUSH
7824: LD_INT 1000
7826: PPUSH
7827: CALL_OW 234
// wait ( 0 0$2 ) ;
7831: LD_INT 70
7833: PPUSH
7834: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7838: LD_EXP 16
7842: PPUSH
7843: LD_STRING DH-quest-done-4
7845: PPUSH
7846: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7850: LD_EXP 17
7854: PPUSH
7855: LD_STRING DO-quest-done-4
7857: PPUSH
7858: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_EXP 17
7871: PPUSH
7872: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7876: LD_EXP 16
7880: PPUSH
7881: LD_STRING DH-quest-done-5
7883: PPUSH
7884: CALL_OW 88
// InGameOff ;
7888: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7892: LD_STRING O6_end_cont
7894: PPUSH
7895: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_INT 2
7906: PPUSH
7907: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7911: LD_EXP 19
7915: PPUSH
7916: LD_INT 2
7918: PPUSH
7919: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7923: LD_INT 42
7925: PPUSH
7926: LD_INT 2
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7936: LD_EXP 17
7940: PPUSH
7941: LD_INT 53
7943: PPUSH
7944: LD_INT 89
7946: PPUSH
7947: CALL_OW 118
// lastObjectiveActive := true ;
7951: LD_ADDR_EXP 12
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7959: LD_INT 1
7961: PPUSH
7962: LD_INT 1
7964: PPUSH
7965: CALL_OW 424
// PreparePrison ;
7969: CALL 1164 0 0
// end ;
7973: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7974: LD_INT 22
7976: PUSH
7977: LD_INT 2
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 91
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: IFFALSE 8188
8008: GO 8010
8010: DISABLE
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8015: LD_INT 245
8017: PUSH
8018: LD_INT 210
8020: PUSH
8021: LD_INT 210
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: LD_OWVAR 67
8033: ARRAY
8034: PPUSH
8035: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_INT 22
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 54
8066: PUSH
8067: EMPTY
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: ST_TO_ADDR
// if not tmp then
8080: LD_VAR 0 2
8084: NOT
8085: IFFALSE 8089
// exit ;
8087: GO 8188
// for i in tmp do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_VAR 0 2
8098: PUSH
8099: FOR_IN
8100: IFFALSE 8128
// begin ComExitBuilding ( i ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8111: LD_VAR 0 1
8115: PPUSH
8116: LD_INT 121
8118: PPUSH
8119: LD_INT 22
8121: PPUSH
8122: CALL_OW 174
// end ;
8126: GO 8099
8128: POP
8129: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8130: LD_EXP 23
8134: PPUSH
8135: LD_INT 121
8137: PPUSH
8138: LD_INT 22
8140: PPUSH
8141: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8145: LD_EXP 24
8149: PPUSH
8150: LD_INT 121
8152: PPUSH
8153: LD_INT 22
8155: PPUSH
8156: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8160: LD_EXP 23
8164: PPUSH
8165: LD_EXP 16
8169: PPUSH
8170: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8174: LD_EXP 24
8178: PPUSH
8179: LD_EXP 16
8183: PPUSH
8184: CALL_OW 175
// end ;
8188: PPOPN 2
8190: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8191: LD_INT 22
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 91
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PPUSH
8219: CALL_OW 69
8223: IFFALSE 8405
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
8231: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8232: LD_INT 280
8234: PUSH
8235: LD_INT 245
8237: PUSH
8238: LD_INT 210
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: PUSH
8246: LD_OWVAR 67
8250: ARRAY
8251: PPUSH
8252: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 54
8283: PUSH
8284: EMPTY
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: ST_TO_ADDR
// if not tmp then
8297: LD_VAR 0 2
8301: NOT
8302: IFFALSE 8306
// exit ;
8304: GO 8405
// for i in tmp do
8306: LD_ADDR_VAR 0 1
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: FOR_IN
8317: IFFALSE 8345
// begin ComExitBuilding ( i ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: LD_INT 142
8335: PPUSH
8336: LD_INT 71
8338: PPUSH
8339: CALL_OW 174
// end ;
8343: GO 8316
8345: POP
8346: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8347: LD_EXP 23
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8362: LD_EXP 24
8366: PPUSH
8367: LD_INT 142
8369: PPUSH
8370: LD_INT 71
8372: PPUSH
8373: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8377: LD_EXP 23
8381: PPUSH
8382: LD_EXP 16
8386: PPUSH
8387: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8391: LD_EXP 24
8395: PPUSH
8396: LD_EXP 16
8400: PPUSH
8401: CALL_OW 175
// end ;
8405: PPOPN 2
8407: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8408: LD_INT 22
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 58
8430: PUSH
8431: EMPTY
8432: LIST
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: LD_INT 24
8439: PUSH
8440: LD_INT 1000
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 91
8453: PUSH
8454: LD_EXP 17
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 69
8478: PUSH
8479: LD_EXP 17
8483: PPUSH
8484: CALL_OW 302
8488: AND
8489: IFFALSE 8603
8491: GO 8493
8493: DISABLE
// begin enable ;
8494: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8495: LD_EXP 17
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 58
8522: PUSH
8523: EMPTY
8524: LIST
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 24
8531: PUSH
8532: LD_INT 1000
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 91
8545: PUSH
8546: LD_EXP 17
8550: PUSH
8551: LD_INT 8
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 69
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8579: LD_EXP 17
8583: PPUSH
8584: LD_INT 52
8586: PPUSH
8587: LD_INT 90
8589: PPUSH
8590: CALL_OW 171
// AddComHold ( Olaf ) ;
8594: LD_EXP 17
8598: PPUSH
8599: CALL_OW 200
// end ;
8603: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8604: LD_EXP 12
8608: PUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 302
8616: NOT
8617: AND
8618: PUSH
8619: LD_OWVAR 67
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: AND
8628: PUSH
8629: LD_EXP 13
8633: NOT
8634: AND
8635: IFFALSE 8652
8637: GO 8639
8639: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8640: LD_EXP 16
8644: PPUSH
8645: LD_STRING DH-prison-missing
8647: PPUSH
8648: CALL_OW 88
// end ;
8652: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8653: LD_EXP 12
8657: PUSH
8658: LD_INT 8
8660: PPUSH
8661: CALL_OW 302
8665: NOT
8666: AND
8667: PUSH
8668: LD_OWVAR 67
8672: PUSH
8673: LD_INT 1
8675: GREATER
8676: AND
8677: PUSH
8678: LD_EXP 13
8682: NOT
8683: AND
8684: IFFALSE 8701
8686: GO 8688
8688: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8689: LD_EXP 16
8693: PPUSH
8694: LD_STRING DH-prison-missing
8696: PPUSH
8697: CALL_OW 88
// end ;
8701: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8702: LD_EXP 12
8706: PUSH
8707: LD_INT 3
8709: PPUSH
8710: CALL_OW 302
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 13
8721: NOT
8722: AND
8723: IFFALSE 8740
8725: GO 8727
8727: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8728: LD_EXP 16
8732: PPUSH
8733: LD_STRING DH-prison-missing-a
8735: PPUSH
8736: CALL_OW 88
// end ;
8740: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8741: LD_EXP 12
8745: PUSH
8746: LD_INT 10
8748: PPUSH
8749: CALL_OW 302
8753: NOT
8754: AND
8755: PUSH
8756: LD_EXP 13
8760: NOT
8761: AND
8762: IFFALSE 8779
8764: GO 8766
8766: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8767: LD_EXP 16
8771: PPUSH
8772: LD_STRING DH-prison-missing-a
8774: PPUSH
8775: CALL_OW 88
// end ;
8779: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8780: LD_EXP 13
8784: NOT
8785: PUSH
8786: LD_EXP 12
8790: AND
8791: PUSH
8792: LD_INT 2
8794: PPUSH
8795: LD_EXP 20
8799: PPUSH
8800: CALL_OW 292
8804: AND
8805: IFFALSE 8892
8807: GO 8809
8809: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8810: LD_EXP 20
8814: PPUSH
8815: LD_EXP 16
8819: PPUSH
8820: CALL_OW 119
// DialogueOn ;
8824: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8828: LD_EXP 20
8832: PPUSH
8833: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8837: LD_EXP 20
8841: PPUSH
8842: LD_STRING DK-prison-found
8844: PPUSH
8845: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8849: LD_EXP 16
8853: PPUSH
8854: LD_STRING DH-prison-found
8856: PPUSH
8857: CALL_OW 88
// DialogueOff ;
8861: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8865: LD_EXP 20
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL_OW 235
// prisonFound := true ;
8877: LD_ADDR_EXP 13
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8885: LD_STRING O6_prison_out
8887: PPUSH
8888: CALL_OW 337
// end ;
8892: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8893: LD_EXP 16
8897: PPUSH
8898: CALL_OW 256
8902: PUSH
8903: LD_INT 500
8905: LESS
8906: IFFALSE 8919
8908: GO 8910
8910: DISABLE
// heikeHurt := true ;
8911: LD_ADDR_EXP 14
8915: PUSH
8916: LD_INT 1
8918: ST_TO_ADDR
8919: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8920: LD_INT 22
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 21
8932: PUSH
8933: LD_INT 3
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PPUSH
8944: CALL_OW 69
8948: IFFALSE 9264
8950: GO 8952
8952: DISABLE
8953: LD_INT 0
8955: PPUSH
8956: PPUSH
8957: PPUSH
// begin uc_side := 3 ;
8958: LD_ADDR_OWVAR 20
8962: PUSH
8963: LD_INT 3
8965: ST_TO_ADDR
// uc_nation := 3 ;
8966: LD_ADDR_OWVAR 21
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// tmp := [ ] ;
8974: LD_ADDR_VAR 0 2
8978: PUSH
8979: EMPTY
8980: ST_TO_ADDR
// for i := 1 to 8 do
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_INT 8
8993: PUSH
8994: FOR_TO
8995: IFFALSE 9103
// begin PrepareHuman ( false , 1 , 4 ) ;
8997: LD_INT 0
8999: PPUSH
9000: LD_INT 1
9002: PPUSH
9003: LD_INT 4
9005: PPUSH
9006: CALL_OW 380
// un := CreateHuman ;
9010: LD_ADDR_VAR 0 3
9014: PUSH
9015: CALL_OW 44
9019: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9020: LD_VAR 0 3
9024: PPUSH
9025: LD_INT 4
9027: PPUSH
9028: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 158
9039: PPUSH
9040: LD_INT 80
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 147
9057: PPUSH
9058: LD_INT 75
9060: PPUSH
9061: CALL_OW 111
// wait ( 0 0$1 ) ;
9065: LD_INT 35
9067: PPUSH
9068: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9072: LD_ADDR_VAR 0 2
9076: PUSH
9077: LD_VAR 0 2
9081: PPUSH
9082: LD_VAR 0 2
9086: PUSH
9087: LD_INT 1
9089: PLUS
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: CALL_OW 1
9100: ST_TO_ADDR
// end ;
9101: GO 8994
9103: POP
9104: POP
// repeat wait ( 0 0$1 ) ;
9105: LD_INT 35
9107: PPUSH
9108: CALL_OW 67
// for i in tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: PUSH
9122: FOR_IN
9123: IFFALSE 9244
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9125: LD_ADDR_VAR 0 3
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_INT 3
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 69
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 74
9154: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 250
9168: PPUSH
9169: LD_VAR 0 3
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 251
9182: PPUSH
9183: CALL_OW 428
9187: IFFALSE 9228
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_INT 1
9201: ARRAY
9202: PPUSH
9203: CALL_OW 250
9207: PPUSH
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PPUSH
9217: CALL_OW 251
9221: PPUSH
9222: CALL_OW 114
9226: GO 9242
// ComAttackUnit ( i , Heike ) ;
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_EXP 16
9237: PPUSH
9238: CALL_OW 115
// end ;
9242: GO 9122
9244: POP
9245: POP
// until IsDead ( Heike ) or not tmp ;
9246: LD_EXP 16
9250: PPUSH
9251: CALL_OW 301
9255: PUSH
9256: LD_VAR 0 2
9260: NOT
9261: OR
9262: IFFALSE 9105
// end ;
9264: PPOPN 3
9266: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9267: LD_EXP 12
9271: PUSH
9272: LD_EXP 16
9276: PPUSH
9277: CALL_OW 302
9281: AND
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_INT 21
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 22
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 50
9308: PUSH
9309: EMPTY
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 71
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: AND
9326: IFFALSE 9656
9328: GO 9330
9330: DISABLE
9331: LD_INT 0
9333: PPUSH
// begin if not heikeHurt then
9334: LD_EXP 14
9338: NOT
9339: IFFALSE 9348
// SetAchievement ( ACH_INVINCIBLE ) ;
9341: LD_STRING ACH_INVINCIBLE
9343: PPUSH
9344: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 21
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 50
9375: PUSH
9376: EMPTY
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 69
9388: ST_TO_ADDR
// if prisonFound then
9389: LD_EXP 13
9393: IFFALSE 9407
// AddMedal ( med1 , 1 ) else
9395: LD_STRING med1
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 101
9405: GO 9418
// AddMedal ( med1 , - 1 ) ;
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: NEG
9413: PPUSH
9414: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9418: LD_VAR 0 1
9422: PUSH
9423: LD_INT 3
9425: LESS
9426: PUSH
9427: LD_EXP 13
9431: NOT
9432: AND
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: LD_INT 4
9441: LESS
9442: PUSH
9443: LD_EXP 13
9447: AND
9448: OR
9449: IFFALSE 9464
// AddMedal ( med2 , - 1 ) else
9451: LD_STRING med2
9453: PPUSH
9454: LD_INT 1
9456: NEG
9457: PPUSH
9458: CALL_OW 101
9462: GO 9474
// AddMedal ( med2 , 1 ) ;
9464: LD_STRING med2
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9474: LD_EXP 13
9478: PUSH
9479: LD_EXP 4
9483: AND
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: LD_INT 4
9492: GREATEREQUAL
9493: AND
9494: IFFALSE 9508
// AddMedal ( med3 , 1 ) else
9496: LD_STRING med3
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 101
9506: GO 9519
// AddMedal ( med3 , - 1 ) ;
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: NEG
9514: PPUSH
9515: CALL_OW 101
// GiveMedals ( MAIN ) ;
9519: LD_STRING MAIN
9521: PPUSH
9522: CALL_OW 102
// RewardPeople ( tmp ) ;
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9535: LD_EXP 16
9539: PPUSH
9540: LD_STRING 01_Heike
9542: PPUSH
9543: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9547: LD_EXP 18
9551: PPUSH
9552: CALL_OW 302
9556: PUSH
9557: LD_EXP 18
9561: PUSH
9562: LD_VAR 0 1
9566: IN
9567: AND
9568: IFFALSE 9582
// SaveCharacters ( Givi , 01_Givi ) ;
9570: LD_EXP 18
9574: PPUSH
9575: LD_STRING 01_Givi
9577: PPUSH
9578: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9582: LD_EXP 19
9586: PPUSH
9587: CALL_OW 302
9591: PUSH
9592: LD_EXP 19
9596: PUSH
9597: LD_VAR 0 1
9601: IN
9602: AND
9603: IFFALSE 9617
// SaveCharacters ( Mike , 01_Mike ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 01_Mike
9612: PPUSH
9613: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9617: LD_EXP 20
9621: PPUSH
9622: CALL_OW 302
9626: PUSH
9627: LD_EXP 20
9631: PUSH
9632: LD_VAR 0 1
9636: IN
9637: AND
9638: IFFALSE 9652
// SaveCharacters ( Kamil , 01_Kamil ) ;
9640: LD_EXP 20
9644: PPUSH
9645: LD_STRING 01_Kamil
9647: PPUSH
9648: CALL_OW 38
// YouWin ;
9652: CALL_OW 103
// end ; end_of_file
9656: PPOPN 1
9658: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9659: LD_VAR 0 1
9663: PUSH
9664: LD_EXP 16
9668: EQUAL
9669: IFFALSE 9678
// YouLost ( Heike ) ;
9671: LD_STRING Heike
9673: PPUSH
9674: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9678: LD_VAR 0 1
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: IN
9712: IFFALSE 9818
// begin if un in russianPatrol then
9714: LD_VAR 0 1
9718: PUSH
9719: LD_EXP 21
9723: IN
9724: IFFALSE 9742
// russianPatrol := russianPatrol diff un ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 1
9740: DIFF
9741: ST_TO_ADDR
// if un in russianForestPatrol then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_EXP 22
9751: IN
9752: IFFALSE 9770
// russianForestPatrol := russianForestPatrol diff un ;
9754: LD_ADDR_EXP 22
9758: PUSH
9759: LD_EXP 22
9763: PUSH
9764: LD_VAR 0 1
9768: DIFF
9769: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9770: LD_ADDR_EXP 5
9774: PUSH
9775: LD_EXP 5
9779: PPUSH
9780: LD_EXP 5
9784: PUSH
9785: LD_INT 1
9787: PLUS
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 250
9798: PUSH
9799: LD_VAR 0 1
9803: PPUSH
9804: CALL_OW 251
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 1
9817: ST_TO_ADDR
// end ; end ;
9818: PPOPN 1
9820: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 16
9830: EQUAL
9831: IFFALSE 9840
// YouLost ( Heike ) ;
9833: LD_STRING Heike
9835: PPUSH
9836: CALL_OW 104
// end ;
9840: PPOPN 1
9842: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 2
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 5
9859: EQUAL
9860: AND
9861: IFFALSE 9870
// YouLost ( FriendlyFire ) ;
9863: LD_STRING FriendlyFire
9865: PPUSH
9866: CALL_OW 104
// end ;
9870: PPOPN 2
9872: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9873: LD_EXP 17
9877: PPUSH
9878: CALL_OW 256
9882: PUSH
9883: LD_INT 250
9885: LESS
9886: IFFALSE 9898
9888: GO 9890
9890: DISABLE
// YouLost ( Olaf ) ; end_of_file
9891: LD_STRING Olaf
9893: PPUSH
9894: CALL_OW 104
9898: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9899: GO 9901
9901: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9902: LD_STRING initStreamRollete();
9904: PPUSH
9905: CALL_OW 559
// InitStreamMode ;
9909: CALL 9918 0 0
// DefineStreamItems ( ) ;
9913: CALL 10358 0 0
// end ;
9917: END
// function InitStreamMode ; begin
9918: LD_INT 0
9920: PPUSH
// streamModeActive := false ;
9921: LD_ADDR_EXP 26
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// normalCounter := 36 ;
9929: LD_ADDR_EXP 27
9933: PUSH
9934: LD_INT 36
9936: ST_TO_ADDR
// hardcoreCounter := 16 ;
9937: LD_ADDR_EXP 28
9941: PUSH
9942: LD_INT 16
9944: ST_TO_ADDR
// sRocket := false ;
9945: LD_ADDR_EXP 31
9949: PUSH
9950: LD_INT 0
9952: ST_TO_ADDR
// sSpeed := false ;
9953: LD_ADDR_EXP 30
9957: PUSH
9958: LD_INT 0
9960: ST_TO_ADDR
// sEngine := false ;
9961: LD_ADDR_EXP 32
9965: PUSH
9966: LD_INT 0
9968: ST_TO_ADDR
// sSpec := false ;
9969: LD_ADDR_EXP 29
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// sLevel := false ;
9977: LD_ADDR_EXP 33
9981: PUSH
9982: LD_INT 0
9984: ST_TO_ADDR
// sArmoury := false ;
9985: LD_ADDR_EXP 34
9989: PUSH
9990: LD_INT 0
9992: ST_TO_ADDR
// sRadar := false ;
9993: LD_ADDR_EXP 35
9997: PUSH
9998: LD_INT 0
10000: ST_TO_ADDR
// sBunker := false ;
10001: LD_ADDR_EXP 36
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// sHack := false ;
10009: LD_ADDR_EXP 37
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// sFire := false ;
10017: LD_ADDR_EXP 38
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// sRefresh := false ;
10025: LD_ADDR_EXP 39
10029: PUSH
10030: LD_INT 0
10032: ST_TO_ADDR
// sExp := false ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// sDepot := false ;
10041: LD_ADDR_EXP 41
10045: PUSH
10046: LD_INT 0
10048: ST_TO_ADDR
// sFlag := false ;
10049: LD_ADDR_EXP 42
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// sKamikadze := false ;
10057: LD_ADDR_EXP 50
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// sTroll := false ;
10065: LD_ADDR_EXP 51
10069: PUSH
10070: LD_INT 0
10072: ST_TO_ADDR
// sSlow := false ;
10073: LD_ADDR_EXP 52
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// sLack := false ;
10081: LD_ADDR_EXP 53
10085: PUSH
10086: LD_INT 0
10088: ST_TO_ADDR
// sTank := false ;
10089: LD_ADDR_EXP 55
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// sRemote := false ;
10097: LD_ADDR_EXP 56
10101: PUSH
10102: LD_INT 0
10104: ST_TO_ADDR
// sPowell := false ;
10105: LD_ADDR_EXP 57
10109: PUSH
10110: LD_INT 0
10112: ST_TO_ADDR
// sTeleport := false ;
10113: LD_ADDR_EXP 60
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// sOilTower := false ;
10121: LD_ADDR_EXP 62
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// sShovel := false ;
10129: LD_ADDR_EXP 63
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// sSheik := false ;
10137: LD_ADDR_EXP 64
10141: PUSH
10142: LD_INT 0
10144: ST_TO_ADDR
// sEarthquake := false ;
10145: LD_ADDR_EXP 66
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// sAI := false ;
10153: LD_ADDR_EXP 67
10157: PUSH
10158: LD_INT 0
10160: ST_TO_ADDR
// sCargo := false ;
10161: LD_ADDR_EXP 70
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// sDLaser := false ;
10169: LD_ADDR_EXP 71
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// sExchange := false ;
10177: LD_ADDR_EXP 72
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// sFac := false ;
10185: LD_ADDR_EXP 73
10189: PUSH
10190: LD_INT 0
10192: ST_TO_ADDR
// sPower := false ;
10193: LD_ADDR_EXP 74
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// sRandom := false ;
10201: LD_ADDR_EXP 75
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// sShield := false ;
10209: LD_ADDR_EXP 76
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// sTime := false ;
10217: LD_ADDR_EXP 77
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// sTools := false ;
10225: LD_ADDR_EXP 78
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// sSold := false ;
10233: LD_ADDR_EXP 43
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// sDiff := false ;
10241: LD_ADDR_EXP 44
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// sFog := false ;
10249: LD_ADDR_EXP 47
10253: PUSH
10254: LD_INT 0
10256: ST_TO_ADDR
// sReset := false ;
10257: LD_ADDR_EXP 48
10261: PUSH
10262: LD_INT 0
10264: ST_TO_ADDR
// sSun := false ;
10265: LD_ADDR_EXP 49
10269: PUSH
10270: LD_INT 0
10272: ST_TO_ADDR
// sTiger := false ;
10273: LD_ADDR_EXP 45
10277: PUSH
10278: LD_INT 0
10280: ST_TO_ADDR
// sBomb := false ;
10281: LD_ADDR_EXP 46
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// sWound := false ;
10289: LD_ADDR_EXP 54
10293: PUSH
10294: LD_INT 0
10296: ST_TO_ADDR
// sBetray := false ;
10297: LD_ADDR_EXP 58
10301: PUSH
10302: LD_INT 0
10304: ST_TO_ADDR
// sContamin := false ;
10305: LD_ADDR_EXP 59
10309: PUSH
10310: LD_INT 0
10312: ST_TO_ADDR
// sOil := false ;
10313: LD_ADDR_EXP 61
10317: PUSH
10318: LD_INT 0
10320: ST_TO_ADDR
// sStu := false ;
10321: LD_ADDR_EXP 65
10325: PUSH
10326: LD_INT 0
10328: ST_TO_ADDR
// sBazooka := false ;
10329: LD_ADDR_EXP 68
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// sMortar := false ;
10337: LD_ADDR_EXP 69
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// sRanger := false ;
10345: LD_ADDR_EXP 79
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// end ;
10353: LD_VAR 0 1
10357: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10358: LD_INT 0
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
// result := [ ] ;
10365: LD_ADDR_VAR 0 1
10369: PUSH
10370: EMPTY
10371: ST_TO_ADDR
// if campaign_id = 1 then
10372: LD_OWVAR 69
10376: PUSH
10377: LD_INT 1
10379: EQUAL
10380: IFFALSE 13318
// begin case mission_number of 1 :
10382: LD_OWVAR 70
10386: PUSH
10387: LD_INT 1
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10459
10395: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10396: LD_ADDR_VAR 0 1
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: LD_INT 4
10406: PUSH
10407: LD_INT 11
10409: PUSH
10410: LD_INT 12
10412: PUSH
10413: LD_INT 15
10415: PUSH
10416: LD_INT 16
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 26
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 101
10441: PUSH
10442: LD_INT 102
10444: PUSH
10445: LD_INT 106
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: ST_TO_ADDR
10457: GO 13316
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10539
10467: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10468: LD_ADDR_VAR 0 1
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: LD_INT 4
10478: PUSH
10479: LD_INT 11
10481: PUSH
10482: LD_INT 12
10484: PUSH
10485: LD_INT 15
10487: PUSH
10488: LD_INT 16
10490: PUSH
10491: LD_INT 22
10493: PUSH
10494: LD_INT 23
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 101
10513: PUSH
10514: LD_INT 102
10516: PUSH
10517: LD_INT 105
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 108
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: ST_TO_ADDR
10537: GO 13316
10539: LD_INT 3
10541: DOUBLE
10542: EQUAL
10543: IFTRUE 10547
10545: GO 10623
10547: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: LD_INT 5
10561: PUSH
10562: LD_INT 11
10564: PUSH
10565: LD_INT 12
10567: PUSH
10568: LD_INT 15
10570: PUSH
10571: LD_INT 16
10573: PUSH
10574: LD_INT 22
10576: PUSH
10577: LD_INT 26
10579: PUSH
10580: LD_INT 36
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 105
10603: PUSH
10604: LD_INT 106
10606: PUSH
10607: LD_INT 108
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: ST_TO_ADDR
10621: GO 13316
10623: LD_INT 4
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10715
10631: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10632: LD_ADDR_VAR 0 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 4
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: LD_INT 8
10648: PUSH
10649: LD_INT 11
10651: PUSH
10652: LD_INT 12
10654: PUSH
10655: LD_INT 15
10657: PUSH
10658: LD_INT 16
10660: PUSH
10661: LD_INT 22
10663: PUSH
10664: LD_INT 23
10666: PUSH
10667: LD_INT 26
10669: PUSH
10670: LD_INT 36
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 101
10689: PUSH
10690: LD_INT 102
10692: PUSH
10693: LD_INT 105
10695: PUSH
10696: LD_INT 106
10698: PUSH
10699: LD_INT 108
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: ST_TO_ADDR
10713: GO 13316
10715: LD_INT 5
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10823
10723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: LD_INT 5
10737: PUSH
10738: LD_INT 6
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 11
10746: PUSH
10747: LD_INT 12
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_INT 23
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 26
10767: PUSH
10768: LD_INT 36
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 105
10795: PUSH
10796: LD_INT 106
10798: PUSH
10799: LD_INT 108
10801: PUSH
10802: LD_INT 109
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: ST_TO_ADDR
10821: GO 13316
10823: LD_INT 6
10825: DOUBLE
10826: EQUAL
10827: IFTRUE 10831
10829: GO 10951
10831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 2
10839: PUSH
10840: LD_INT 4
10842: PUSH
10843: LD_INT 5
10845: PUSH
10846: LD_INT 6
10848: PUSH
10849: LD_INT 8
10851: PUSH
10852: LD_INT 11
10854: PUSH
10855: LD_INT 12
10857: PUSH
10858: LD_INT 15
10860: PUSH
10861: LD_INT 16
10863: PUSH
10864: LD_INT 20
10866: PUSH
10867: LD_INT 21
10869: PUSH
10870: LD_INT 22
10872: PUSH
10873: LD_INT 23
10875: PUSH
10876: LD_INT 25
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 30
10884: PUSH
10885: LD_INT 31
10887: PUSH
10888: LD_INT 32
10890: PUSH
10891: LD_INT 36
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 101
10917: PUSH
10918: LD_INT 102
10920: PUSH
10921: LD_INT 105
10923: PUSH
10924: LD_INT 106
10926: PUSH
10927: LD_INT 108
10929: PUSH
10930: LD_INT 109
10932: PUSH
10933: LD_INT 112
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: ST_TO_ADDR
10949: GO 13316
10951: LD_INT 7
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10959
10957: GO 11059
10959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: LD_INT 4
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: LD_INT 7
10976: PUSH
10977: LD_INT 11
10979: PUSH
10980: LD_INT 12
10982: PUSH
10983: LD_INT 15
10985: PUSH
10986: LD_INT 16
10988: PUSH
10989: LD_INT 20
10991: PUSH
10992: LD_INT 21
10994: PUSH
10995: LD_INT 22
10997: PUSH
10998: LD_INT 23
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 26
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 101
11025: PUSH
11026: LD_INT 102
11028: PUSH
11029: LD_INT 103
11031: PUSH
11032: LD_INT 105
11034: PUSH
11035: LD_INT 106
11037: PUSH
11038: LD_INT 108
11040: PUSH
11041: LD_INT 112
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: ST_TO_ADDR
11057: GO 13316
11059: LD_INT 8
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11195
11067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11068: LD_ADDR_VAR 0 1
11072: PUSH
11073: LD_INT 2
11075: PUSH
11076: LD_INT 4
11078: PUSH
11079: LD_INT 5
11081: PUSH
11082: LD_INT 6
11084: PUSH
11085: LD_INT 7
11087: PUSH
11088: LD_INT 8
11090: PUSH
11091: LD_INT 11
11093: PUSH
11094: LD_INT 12
11096: PUSH
11097: LD_INT 15
11099: PUSH
11100: LD_INT 16
11102: PUSH
11103: LD_INT 20
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 22
11111: PUSH
11112: LD_INT 23
11114: PUSH
11115: LD_INT 25
11117: PUSH
11118: LD_INT 26
11120: PUSH
11121: LD_INT 30
11123: PUSH
11124: LD_INT 31
11126: PUSH
11127: LD_INT 32
11129: PUSH
11130: LD_INT 36
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 101
11157: PUSH
11158: LD_INT 102
11160: PUSH
11161: LD_INT 103
11163: PUSH
11164: LD_INT 105
11166: PUSH
11167: LD_INT 106
11169: PUSH
11170: LD_INT 108
11172: PUSH
11173: LD_INT 109
11175: PUSH
11176: LD_INT 112
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: ST_TO_ADDR
11193: GO 13316
11195: LD_INT 9
11197: DOUBLE
11198: EQUAL
11199: IFTRUE 11203
11201: GO 11339
11203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: LD_INT 4
11214: PUSH
11215: LD_INT 5
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: LD_INT 7
11223: PUSH
11224: LD_INT 8
11226: PUSH
11227: LD_INT 11
11229: PUSH
11230: LD_INT 12
11232: PUSH
11233: LD_INT 15
11235: PUSH
11236: LD_INT 16
11238: PUSH
11239: LD_INT 20
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 23
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 26
11256: PUSH
11257: LD_INT 28
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: LD_INT 31
11265: PUSH
11266: LD_INT 32
11268: PUSH
11269: LD_INT 36
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 101
11297: PUSH
11298: LD_INT 102
11300: PUSH
11301: LD_INT 103
11303: PUSH
11304: LD_INT 105
11306: PUSH
11307: LD_INT 106
11309: PUSH
11310: LD_INT 108
11312: PUSH
11313: LD_INT 109
11315: PUSH
11316: LD_INT 112
11318: PUSH
11319: LD_INT 114
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: ST_TO_ADDR
11337: GO 13316
11339: LD_INT 10
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11531
11347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: LD_INT 2
11355: PUSH
11356: LD_INT 4
11358: PUSH
11359: LD_INT 5
11361: PUSH
11362: LD_INT 6
11364: PUSH
11365: LD_INT 7
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: LD_INT 9
11373: PUSH
11374: LD_INT 10
11376: PUSH
11377: LD_INT 11
11379: PUSH
11380: LD_INT 12
11382: PUSH
11383: LD_INT 13
11385: PUSH
11386: LD_INT 14
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 17
11397: PUSH
11398: LD_INT 18
11400: PUSH
11401: LD_INT 19
11403: PUSH
11404: LD_INT 20
11406: PUSH
11407: LD_INT 21
11409: PUSH
11410: LD_INT 22
11412: PUSH
11413: LD_INT 23
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 26
11424: PUSH
11425: LD_INT 28
11427: PUSH
11428: LD_INT 30
11430: PUSH
11431: LD_INT 31
11433: PUSH
11434: LD_INT 32
11436: PUSH
11437: LD_INT 36
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 101
11473: PUSH
11474: LD_INT 102
11476: PUSH
11477: LD_INT 103
11479: PUSH
11480: LD_INT 104
11482: PUSH
11483: LD_INT 105
11485: PUSH
11486: LD_INT 106
11488: PUSH
11489: LD_INT 107
11491: PUSH
11492: LD_INT 108
11494: PUSH
11495: LD_INT 109
11497: PUSH
11498: LD_INT 110
11500: PUSH
11501: LD_INT 111
11503: PUSH
11504: LD_INT 112
11506: PUSH
11507: LD_INT 114
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: ST_TO_ADDR
11529: GO 13316
11531: LD_INT 11
11533: DOUBLE
11534: EQUAL
11535: IFTRUE 11539
11537: GO 11731
11539: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11540: LD_ADDR_VAR 0 1
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 6
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 8
11565: PUSH
11566: LD_INT 9
11568: PUSH
11569: LD_INT 10
11571: PUSH
11572: LD_INT 11
11574: PUSH
11575: LD_INT 12
11577: PUSH
11578: LD_INT 13
11580: PUSH
11581: LD_INT 14
11583: PUSH
11584: LD_INT 15
11586: PUSH
11587: LD_INT 16
11589: PUSH
11590: LD_INT 17
11592: PUSH
11593: LD_INT 18
11595: PUSH
11596: LD_INT 19
11598: PUSH
11599: LD_INT 20
11601: PUSH
11602: LD_INT 21
11604: PUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 23
11610: PUSH
11611: LD_INT 24
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 26
11619: PUSH
11620: LD_INT 28
11622: PUSH
11623: LD_INT 30
11625: PUSH
11626: LD_INT 31
11628: PUSH
11629: LD_INT 32
11631: PUSH
11632: LD_INT 34
11634: PUSH
11635: LD_INT 36
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 101
11673: PUSH
11674: LD_INT 102
11676: PUSH
11677: LD_INT 103
11679: PUSH
11680: LD_INT 104
11682: PUSH
11683: LD_INT 105
11685: PUSH
11686: LD_INT 106
11688: PUSH
11689: LD_INT 107
11691: PUSH
11692: LD_INT 108
11694: PUSH
11695: LD_INT 109
11697: PUSH
11698: LD_INT 110
11700: PUSH
11701: LD_INT 111
11703: PUSH
11704: LD_INT 112
11706: PUSH
11707: LD_INT 114
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: ST_TO_ADDR
11729: GO 13316
11731: LD_INT 12
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11947
11739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11740: LD_ADDR_VAR 0 1
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 3
11753: PUSH
11754: LD_INT 4
11756: PUSH
11757: LD_INT 5
11759: PUSH
11760: LD_INT 6
11762: PUSH
11763: LD_INT 7
11765: PUSH
11766: LD_INT 8
11768: PUSH
11769: LD_INT 9
11771: PUSH
11772: LD_INT 10
11774: PUSH
11775: LD_INT 11
11777: PUSH
11778: LD_INT 12
11780: PUSH
11781: LD_INT 13
11783: PUSH
11784: LD_INT 14
11786: PUSH
11787: LD_INT 15
11789: PUSH
11790: LD_INT 16
11792: PUSH
11793: LD_INT 17
11795: PUSH
11796: LD_INT 18
11798: PUSH
11799: LD_INT 19
11801: PUSH
11802: LD_INT 20
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_INT 23
11813: PUSH
11814: LD_INT 24
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 26
11822: PUSH
11823: LD_INT 27
11825: PUSH
11826: LD_INT 28
11828: PUSH
11829: LD_INT 30
11831: PUSH
11832: LD_INT 31
11834: PUSH
11835: LD_INT 32
11837: PUSH
11838: LD_INT 33
11840: PUSH
11841: LD_INT 34
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 101
11885: PUSH
11886: LD_INT 102
11888: PUSH
11889: LD_INT 103
11891: PUSH
11892: LD_INT 104
11894: PUSH
11895: LD_INT 105
11897: PUSH
11898: LD_INT 106
11900: PUSH
11901: LD_INT 107
11903: PUSH
11904: LD_INT 108
11906: PUSH
11907: LD_INT 109
11909: PUSH
11910: LD_INT 110
11912: PUSH
11913: LD_INT 111
11915: PUSH
11916: LD_INT 112
11918: PUSH
11919: LD_INT 113
11921: PUSH
11922: LD_INT 114
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: ST_TO_ADDR
11945: GO 13316
11947: LD_INT 13
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 12151
11955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11956: LD_ADDR_VAR 0 1
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 3
11969: PUSH
11970: LD_INT 4
11972: PUSH
11973: LD_INT 5
11975: PUSH
11976: LD_INT 8
11978: PUSH
11979: LD_INT 9
11981: PUSH
11982: LD_INT 10
11984: PUSH
11985: LD_INT 11
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: LD_INT 14
11993: PUSH
11994: LD_INT 15
11996: PUSH
11997: LD_INT 16
11999: PUSH
12000: LD_INT 17
12002: PUSH
12003: LD_INT 18
12005: PUSH
12006: LD_INT 19
12008: PUSH
12009: LD_INT 20
12011: PUSH
12012: LD_INT 21
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_INT 23
12020: PUSH
12021: LD_INT 24
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 26
12029: PUSH
12030: LD_INT 27
12032: PUSH
12033: LD_INT 28
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: LD_INT 33
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: LD_INT 36
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 101
12089: PUSH
12090: LD_INT 102
12092: PUSH
12093: LD_INT 103
12095: PUSH
12096: LD_INT 104
12098: PUSH
12099: LD_INT 105
12101: PUSH
12102: LD_INT 106
12104: PUSH
12105: LD_INT 107
12107: PUSH
12108: LD_INT 108
12110: PUSH
12111: LD_INT 109
12113: PUSH
12114: LD_INT 110
12116: PUSH
12117: LD_INT 111
12119: PUSH
12120: LD_INT 112
12122: PUSH
12123: LD_INT 113
12125: PUSH
12126: LD_INT 114
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: ST_TO_ADDR
12149: GO 13316
12151: LD_INT 14
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12371
12159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 3
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: LD_INT 6
12182: PUSH
12183: LD_INT 7
12185: PUSH
12186: LD_INT 8
12188: PUSH
12189: LD_INT 9
12191: PUSH
12192: LD_INT 10
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 13
12203: PUSH
12204: LD_INT 14
12206: PUSH
12207: LD_INT 15
12209: PUSH
12210: LD_INT 16
12212: PUSH
12213: LD_INT 17
12215: PUSH
12216: LD_INT 18
12218: PUSH
12219: LD_INT 19
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_INT 23
12233: PUSH
12234: LD_INT 24
12236: PUSH
12237: LD_INT 25
12239: PUSH
12240: LD_INT 26
12242: PUSH
12243: LD_INT 27
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 29
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 31
12257: PUSH
12258: LD_INT 32
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 34
12266: PUSH
12267: LD_INT 36
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 101
12309: PUSH
12310: LD_INT 102
12312: PUSH
12313: LD_INT 103
12315: PUSH
12316: LD_INT 104
12318: PUSH
12319: LD_INT 105
12321: PUSH
12322: LD_INT 106
12324: PUSH
12325: LD_INT 107
12327: PUSH
12328: LD_INT 108
12330: PUSH
12331: LD_INT 109
12333: PUSH
12334: LD_INT 110
12336: PUSH
12337: LD_INT 111
12339: PUSH
12340: LD_INT 112
12342: PUSH
12343: LD_INT 113
12345: PUSH
12346: LD_INT 114
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: ST_TO_ADDR
12369: GO 13316
12371: LD_INT 15
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12591
12379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12380: LD_ADDR_VAR 0 1
12384: PUSH
12385: LD_INT 1
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: LD_INT 5
12399: PUSH
12400: LD_INT 6
12402: PUSH
12403: LD_INT 7
12405: PUSH
12406: LD_INT 8
12408: PUSH
12409: LD_INT 9
12411: PUSH
12412: LD_INT 10
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 12
12420: PUSH
12421: LD_INT 13
12423: PUSH
12424: LD_INT 14
12426: PUSH
12427: LD_INT 15
12429: PUSH
12430: LD_INT 16
12432: PUSH
12433: LD_INT 17
12435: PUSH
12436: LD_INT 18
12438: PUSH
12439: LD_INT 19
12441: PUSH
12442: LD_INT 20
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_INT 23
12453: PUSH
12454: LD_INT 24
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 26
12462: PUSH
12463: LD_INT 27
12465: PUSH
12466: LD_INT 28
12468: PUSH
12469: LD_INT 29
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 31
12477: PUSH
12478: LD_INT 32
12480: PUSH
12481: LD_INT 33
12483: PUSH
12484: LD_INT 34
12486: PUSH
12487: LD_INT 36
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 101
12529: PUSH
12530: LD_INT 102
12532: PUSH
12533: LD_INT 103
12535: PUSH
12536: LD_INT 104
12538: PUSH
12539: LD_INT 105
12541: PUSH
12542: LD_INT 106
12544: PUSH
12545: LD_INT 107
12547: PUSH
12548: LD_INT 108
12550: PUSH
12551: LD_INT 109
12553: PUSH
12554: LD_INT 110
12556: PUSH
12557: LD_INT 111
12559: PUSH
12560: LD_INT 112
12562: PUSH
12563: LD_INT 113
12565: PUSH
12566: LD_INT 114
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: ST_TO_ADDR
12589: GO 13316
12591: LD_INT 16
12593: DOUBLE
12594: EQUAL
12595: IFTRUE 12599
12597: GO 12723
12599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12600: LD_ADDR_VAR 0 1
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: LD_INT 7
12616: PUSH
12617: LD_INT 11
12619: PUSH
12620: LD_INT 12
12622: PUSH
12623: LD_INT 15
12625: PUSH
12626: LD_INT 16
12628: PUSH
12629: LD_INT 20
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_INT 23
12640: PUSH
12641: LD_INT 25
12643: PUSH
12644: LD_INT 26
12646: PUSH
12647: LD_INT 30
12649: PUSH
12650: LD_INT 31
12652: PUSH
12653: LD_INT 32
12655: PUSH
12656: LD_INT 33
12658: PUSH
12659: LD_INT 34
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 101
12685: PUSH
12686: LD_INT 102
12688: PUSH
12689: LD_INT 103
12691: PUSH
12692: LD_INT 106
12694: PUSH
12695: LD_INT 108
12697: PUSH
12698: LD_INT 112
12700: PUSH
12701: LD_INT 113
12703: PUSH
12704: LD_INT 114
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
12721: GO 13316
12723: LD_INT 17
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12943
12731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12732: LD_ADDR_VAR 0 1
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: LD_INT 4
12748: PUSH
12749: LD_INT 5
12751: PUSH
12752: LD_INT 6
12754: PUSH
12755: LD_INT 7
12757: PUSH
12758: LD_INT 8
12760: PUSH
12761: LD_INT 9
12763: PUSH
12764: LD_INT 10
12766: PUSH
12767: LD_INT 11
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: LD_INT 13
12775: PUSH
12776: LD_INT 14
12778: PUSH
12779: LD_INT 15
12781: PUSH
12782: LD_INT 16
12784: PUSH
12785: LD_INT 17
12787: PUSH
12788: LD_INT 18
12790: PUSH
12791: LD_INT 19
12793: PUSH
12794: LD_INT 20
12796: PUSH
12797: LD_INT 21
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 23
12805: PUSH
12806: LD_INT 24
12808: PUSH
12809: LD_INT 25
12811: PUSH
12812: LD_INT 26
12814: PUSH
12815: LD_INT 27
12817: PUSH
12818: LD_INT 28
12820: PUSH
12821: LD_INT 29
12823: PUSH
12824: LD_INT 30
12826: PUSH
12827: LD_INT 31
12829: PUSH
12830: LD_INT 32
12832: PUSH
12833: LD_INT 33
12835: PUSH
12836: LD_INT 34
12838: PUSH
12839: LD_INT 36
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 101
12881: PUSH
12882: LD_INT 102
12884: PUSH
12885: LD_INT 103
12887: PUSH
12888: LD_INT 104
12890: PUSH
12891: LD_INT 105
12893: PUSH
12894: LD_INT 106
12896: PUSH
12897: LD_INT 107
12899: PUSH
12900: LD_INT 108
12902: PUSH
12903: LD_INT 109
12905: PUSH
12906: LD_INT 110
12908: PUSH
12909: LD_INT 111
12911: PUSH
12912: LD_INT 112
12914: PUSH
12915: LD_INT 113
12917: PUSH
12918: LD_INT 114
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: ST_TO_ADDR
12941: GO 13316
12943: LD_INT 18
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 13087
12951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: LD_INT 4
12962: PUSH
12963: LD_INT 5
12965: PUSH
12966: LD_INT 7
12968: PUSH
12969: LD_INT 11
12971: PUSH
12972: LD_INT 12
12974: PUSH
12975: LD_INT 15
12977: PUSH
12978: LD_INT 16
12980: PUSH
12981: LD_INT 20
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 23
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 31
13004: PUSH
13005: LD_INT 32
13007: PUSH
13008: LD_INT 33
13010: PUSH
13011: LD_INT 34
13013: PUSH
13014: LD_INT 35
13016: PUSH
13017: LD_INT 36
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 103
13051: PUSH
13052: LD_INT 106
13054: PUSH
13055: LD_INT 108
13057: PUSH
13058: LD_INT 112
13060: PUSH
13061: LD_INT 113
13063: PUSH
13064: LD_INT 114
13066: PUSH
13067: LD_INT 115
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: ST_TO_ADDR
13085: GO 13316
13087: LD_INT 19
13089: DOUBLE
13090: EQUAL
13091: IFTRUE 13095
13093: GO 13315
13095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: LD_INT 3
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 6
13118: PUSH
13119: LD_INT 7
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: LD_INT 9
13127: PUSH
13128: LD_INT 10
13130: PUSH
13131: LD_INT 11
13133: PUSH
13134: LD_INT 12
13136: PUSH
13137: LD_INT 13
13139: PUSH
13140: LD_INT 14
13142: PUSH
13143: LD_INT 15
13145: PUSH
13146: LD_INT 16
13148: PUSH
13149: LD_INT 17
13151: PUSH
13152: LD_INT 18
13154: PUSH
13155: LD_INT 19
13157: PUSH
13158: LD_INT 20
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 22
13166: PUSH
13167: LD_INT 23
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 25
13175: PUSH
13176: LD_INT 26
13178: PUSH
13179: LD_INT 27
13181: PUSH
13182: LD_INT 28
13184: PUSH
13185: LD_INT 29
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 31
13193: PUSH
13194: LD_INT 32
13196: PUSH
13197: LD_INT 33
13199: PUSH
13200: LD_INT 34
13202: PUSH
13203: LD_INT 35
13205: PUSH
13206: LD_INT 36
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 101
13249: PUSH
13250: LD_INT 102
13252: PUSH
13253: LD_INT 103
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 105
13261: PUSH
13262: LD_INT 106
13264: PUSH
13265: LD_INT 107
13267: PUSH
13268: LD_INT 108
13270: PUSH
13271: LD_INT 109
13273: PUSH
13274: LD_INT 110
13276: PUSH
13277: LD_INT 111
13279: PUSH
13280: LD_INT 112
13282: PUSH
13283: LD_INT 113
13285: PUSH
13286: LD_INT 114
13288: PUSH
13289: LD_INT 115
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: ST_TO_ADDR
13313: GO 13316
13315: POP
// end else
13316: GO 13535
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13318: LD_ADDR_VAR 0 1
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: LD_INT 5
13337: PUSH
13338: LD_INT 6
13340: PUSH
13341: LD_INT 7
13343: PUSH
13344: LD_INT 8
13346: PUSH
13347: LD_INT 9
13349: PUSH
13350: LD_INT 10
13352: PUSH
13353: LD_INT 11
13355: PUSH
13356: LD_INT 12
13358: PUSH
13359: LD_INT 13
13361: PUSH
13362: LD_INT 14
13364: PUSH
13365: LD_INT 15
13367: PUSH
13368: LD_INT 16
13370: PUSH
13371: LD_INT 17
13373: PUSH
13374: LD_INT 18
13376: PUSH
13377: LD_INT 19
13379: PUSH
13380: LD_INT 20
13382: PUSH
13383: LD_INT 21
13385: PUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 23
13391: PUSH
13392: LD_INT 24
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 26
13400: PUSH
13401: LD_INT 27
13403: PUSH
13404: LD_INT 28
13406: PUSH
13407: LD_INT 29
13409: PUSH
13410: LD_INT 30
13412: PUSH
13413: LD_INT 31
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: LD_INT 33
13421: PUSH
13422: LD_INT 34
13424: PUSH
13425: LD_INT 35
13427: PUSH
13428: LD_INT 36
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 104
13480: PUSH
13481: LD_INT 105
13483: PUSH
13484: LD_INT 106
13486: PUSH
13487: LD_INT 107
13489: PUSH
13490: LD_INT 108
13492: PUSH
13493: LD_INT 109
13495: PUSH
13496: LD_INT 110
13498: PUSH
13499: LD_INT 111
13501: PUSH
13502: LD_INT 112
13504: PUSH
13505: LD_INT 113
13507: PUSH
13508: LD_INT 114
13510: PUSH
13511: LD_INT 115
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: ST_TO_ADDR
// if result then
13535: LD_VAR 0 1
13539: IFFALSE 13828
// begin normal :=  ;
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_STRING 
13548: ST_TO_ADDR
// hardcore :=  ;
13549: LD_ADDR_VAR 0 4
13553: PUSH
13554: LD_STRING 
13556: ST_TO_ADDR
// for i = 1 to normalCounter do
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_EXP 27
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13674
// begin tmp := 0 ;
13575: LD_ADDR_VAR 0 2
13579: PUSH
13580: LD_STRING 0
13582: ST_TO_ADDR
// if result [ 1 ] then
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: IFFALSE 13656
// if result [ 1 ] [ 1 ] = i then
13593: LD_VAR 0 1
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PUSH
13606: LD_VAR 0 5
13610: EQUAL
13611: IFFALSE 13656
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
// tmp := 1 ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_STRING 1
13655: ST_TO_ADDR
// end ; normal := normal & tmp ;
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_VAR 0 2
13670: STR
13671: ST_TO_ADDR
// end ;
13672: GO 13572
13674: POP
13675: POP
// for i = 1 to hardcoreCounter do
13676: LD_ADDR_VAR 0 5
13680: PUSH
13681: DOUBLE
13682: LD_INT 1
13684: DEC
13685: ST_TO_ADDR
13686: LD_EXP 28
13690: PUSH
13691: FOR_TO
13692: IFFALSE 13797
// begin tmp := 0 ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_STRING 0
13701: ST_TO_ADDR
// if result [ 2 ] then
13702: LD_VAR 0 1
13706: PUSH
13707: LD_INT 2
13709: ARRAY
13710: IFFALSE 13779
// if result [ 2 ] [ 1 ] = 100 + i then
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 2
13719: ARRAY
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PUSH
13725: LD_INT 100
13727: PUSH
13728: LD_VAR 0 5
13732: PLUS
13733: EQUAL
13734: IFFALSE 13779
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13736: LD_ADDR_VAR 0 1
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: LD_VAR 0 1
13753: PUSH
13754: LD_INT 2
13756: ARRAY
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// tmp := 1 ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_STRING 1
13778: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13779: LD_ADDR_VAR 0 4
13783: PUSH
13784: LD_VAR 0 4
13788: PUSH
13789: LD_VAR 0 2
13793: STR
13794: ST_TO_ADDR
// end ;
13795: GO 13691
13797: POP
13798: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13799: LD_STRING getStreamItemsFromMission("
13801: PUSH
13802: LD_VAR 0 3
13806: STR
13807: PUSH
13808: LD_STRING ","
13810: STR
13811: PUSH
13812: LD_VAR 0 4
13816: STR
13817: PUSH
13818: LD_STRING ")
13820: STR
13821: PPUSH
13822: CALL_OW 559
// end else
13826: GO 13835
// ToLua ( getStreamItemsFromMission("","") ) ;
13828: LD_STRING getStreamItemsFromMission("","")
13830: PPUSH
13831: CALL_OW 559
// end ;
13835: LD_VAR 0 1
13839: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 100
13847: EQUAL
13848: IFFALSE 14797
// begin if not StreamModeActive then
13850: LD_EXP 26
13854: NOT
13855: IFFALSE 13865
// StreamModeActive := true ;
13857: LD_ADDR_EXP 26
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// if p3 = 0 then
13865: LD_VAR 0 3
13869: PUSH
13870: LD_INT 0
13872: EQUAL
13873: IFFALSE 13879
// InitStreamMode ;
13875: CALL 9918 0 0
// if p3 = 1 then
13879: LD_VAR 0 3
13883: PUSH
13884: LD_INT 1
13886: EQUAL
13887: IFFALSE 13897
// sRocket := true ;
13889: LD_ADDR_EXP 31
13893: PUSH
13894: LD_INT 1
13896: ST_TO_ADDR
// if p3 = 2 then
13897: LD_VAR 0 3
13901: PUSH
13902: LD_INT 2
13904: EQUAL
13905: IFFALSE 13915
// sSpeed := true ;
13907: LD_ADDR_EXP 30
13911: PUSH
13912: LD_INT 1
13914: ST_TO_ADDR
// if p3 = 3 then
13915: LD_VAR 0 3
13919: PUSH
13920: LD_INT 3
13922: EQUAL
13923: IFFALSE 13933
// sEngine := true ;
13925: LD_ADDR_EXP 32
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// if p3 = 4 then
13933: LD_VAR 0 3
13937: PUSH
13938: LD_INT 4
13940: EQUAL
13941: IFFALSE 13951
// sSpec := true ;
13943: LD_ADDR_EXP 29
13947: PUSH
13948: LD_INT 1
13950: ST_TO_ADDR
// if p3 = 5 then
13951: LD_VAR 0 3
13955: PUSH
13956: LD_INT 5
13958: EQUAL
13959: IFFALSE 13969
// sLevel := true ;
13961: LD_ADDR_EXP 33
13965: PUSH
13966: LD_INT 1
13968: ST_TO_ADDR
// if p3 = 6 then
13969: LD_VAR 0 3
13973: PUSH
13974: LD_INT 6
13976: EQUAL
13977: IFFALSE 13987
// sArmoury := true ;
13979: LD_ADDR_EXP 34
13983: PUSH
13984: LD_INT 1
13986: ST_TO_ADDR
// if p3 = 7 then
13987: LD_VAR 0 3
13991: PUSH
13992: LD_INT 7
13994: EQUAL
13995: IFFALSE 14005
// sRadar := true ;
13997: LD_ADDR_EXP 35
14001: PUSH
14002: LD_INT 1
14004: ST_TO_ADDR
// if p3 = 8 then
14005: LD_VAR 0 3
14009: PUSH
14010: LD_INT 8
14012: EQUAL
14013: IFFALSE 14023
// sBunker := true ;
14015: LD_ADDR_EXP 36
14019: PUSH
14020: LD_INT 1
14022: ST_TO_ADDR
// if p3 = 9 then
14023: LD_VAR 0 3
14027: PUSH
14028: LD_INT 9
14030: EQUAL
14031: IFFALSE 14041
// sHack := true ;
14033: LD_ADDR_EXP 37
14037: PUSH
14038: LD_INT 1
14040: ST_TO_ADDR
// if p3 = 10 then
14041: LD_VAR 0 3
14045: PUSH
14046: LD_INT 10
14048: EQUAL
14049: IFFALSE 14059
// sFire := true ;
14051: LD_ADDR_EXP 38
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// if p3 = 11 then
14059: LD_VAR 0 3
14063: PUSH
14064: LD_INT 11
14066: EQUAL
14067: IFFALSE 14077
// sRefresh := true ;
14069: LD_ADDR_EXP 39
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// if p3 = 12 then
14077: LD_VAR 0 3
14081: PUSH
14082: LD_INT 12
14084: EQUAL
14085: IFFALSE 14095
// sExp := true ;
14087: LD_ADDR_EXP 40
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// if p3 = 13 then
14095: LD_VAR 0 3
14099: PUSH
14100: LD_INT 13
14102: EQUAL
14103: IFFALSE 14113
// sDepot := true ;
14105: LD_ADDR_EXP 41
14109: PUSH
14110: LD_INT 1
14112: ST_TO_ADDR
// if p3 = 14 then
14113: LD_VAR 0 3
14117: PUSH
14118: LD_INT 14
14120: EQUAL
14121: IFFALSE 14131
// sFlag := true ;
14123: LD_ADDR_EXP 42
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// if p3 = 15 then
14131: LD_VAR 0 3
14135: PUSH
14136: LD_INT 15
14138: EQUAL
14139: IFFALSE 14149
// sKamikadze := true ;
14141: LD_ADDR_EXP 50
14145: PUSH
14146: LD_INT 1
14148: ST_TO_ADDR
// if p3 = 16 then
14149: LD_VAR 0 3
14153: PUSH
14154: LD_INT 16
14156: EQUAL
14157: IFFALSE 14167
// sTroll := true ;
14159: LD_ADDR_EXP 51
14163: PUSH
14164: LD_INT 1
14166: ST_TO_ADDR
// if p3 = 17 then
14167: LD_VAR 0 3
14171: PUSH
14172: LD_INT 17
14174: EQUAL
14175: IFFALSE 14185
// sSlow := true ;
14177: LD_ADDR_EXP 52
14181: PUSH
14182: LD_INT 1
14184: ST_TO_ADDR
// if p3 = 18 then
14185: LD_VAR 0 3
14189: PUSH
14190: LD_INT 18
14192: EQUAL
14193: IFFALSE 14203
// sLack := true ;
14195: LD_ADDR_EXP 53
14199: PUSH
14200: LD_INT 1
14202: ST_TO_ADDR
// if p3 = 19 then
14203: LD_VAR 0 3
14207: PUSH
14208: LD_INT 19
14210: EQUAL
14211: IFFALSE 14221
// sTank := true ;
14213: LD_ADDR_EXP 55
14217: PUSH
14218: LD_INT 1
14220: ST_TO_ADDR
// if p3 = 20 then
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 20
14228: EQUAL
14229: IFFALSE 14239
// sRemote := true ;
14231: LD_ADDR_EXP 56
14235: PUSH
14236: LD_INT 1
14238: ST_TO_ADDR
// if p3 = 21 then
14239: LD_VAR 0 3
14243: PUSH
14244: LD_INT 21
14246: EQUAL
14247: IFFALSE 14257
// sPowell := true ;
14249: LD_ADDR_EXP 57
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// if p3 = 22 then
14257: LD_VAR 0 3
14261: PUSH
14262: LD_INT 22
14264: EQUAL
14265: IFFALSE 14275
// sTeleport := true ;
14267: LD_ADDR_EXP 60
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// if p3 = 23 then
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 23
14282: EQUAL
14283: IFFALSE 14293
// sOilTower := true ;
14285: LD_ADDR_EXP 62
14289: PUSH
14290: LD_INT 1
14292: ST_TO_ADDR
// if p3 = 24 then
14293: LD_VAR 0 3
14297: PUSH
14298: LD_INT 24
14300: EQUAL
14301: IFFALSE 14311
// sShovel := true ;
14303: LD_ADDR_EXP 63
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// if p3 = 25 then
14311: LD_VAR 0 3
14315: PUSH
14316: LD_INT 25
14318: EQUAL
14319: IFFALSE 14329
// sSheik := true ;
14321: LD_ADDR_EXP 64
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// if p3 = 26 then
14329: LD_VAR 0 3
14333: PUSH
14334: LD_INT 26
14336: EQUAL
14337: IFFALSE 14347
// sEarthquake := true ;
14339: LD_ADDR_EXP 66
14343: PUSH
14344: LD_INT 1
14346: ST_TO_ADDR
// if p3 = 27 then
14347: LD_VAR 0 3
14351: PUSH
14352: LD_INT 27
14354: EQUAL
14355: IFFALSE 14365
// sAI := true ;
14357: LD_ADDR_EXP 67
14361: PUSH
14362: LD_INT 1
14364: ST_TO_ADDR
// if p3 = 28 then
14365: LD_VAR 0 3
14369: PUSH
14370: LD_INT 28
14372: EQUAL
14373: IFFALSE 14383
// sCargo := true ;
14375: LD_ADDR_EXP 70
14379: PUSH
14380: LD_INT 1
14382: ST_TO_ADDR
// if p3 = 29 then
14383: LD_VAR 0 3
14387: PUSH
14388: LD_INT 29
14390: EQUAL
14391: IFFALSE 14401
// sDLaser := true ;
14393: LD_ADDR_EXP 71
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// if p3 = 30 then
14401: LD_VAR 0 3
14405: PUSH
14406: LD_INT 30
14408: EQUAL
14409: IFFALSE 14419
// sExchange := true ;
14411: LD_ADDR_EXP 72
14415: PUSH
14416: LD_INT 1
14418: ST_TO_ADDR
// if p3 = 31 then
14419: LD_VAR 0 3
14423: PUSH
14424: LD_INT 31
14426: EQUAL
14427: IFFALSE 14437
// sFac := true ;
14429: LD_ADDR_EXP 73
14433: PUSH
14434: LD_INT 1
14436: ST_TO_ADDR
// if p3 = 32 then
14437: LD_VAR 0 3
14441: PUSH
14442: LD_INT 32
14444: EQUAL
14445: IFFALSE 14455
// sPower := true ;
14447: LD_ADDR_EXP 74
14451: PUSH
14452: LD_INT 1
14454: ST_TO_ADDR
// if p3 = 33 then
14455: LD_VAR 0 3
14459: PUSH
14460: LD_INT 33
14462: EQUAL
14463: IFFALSE 14473
// sRandom := true ;
14465: LD_ADDR_EXP 75
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// if p3 = 34 then
14473: LD_VAR 0 3
14477: PUSH
14478: LD_INT 34
14480: EQUAL
14481: IFFALSE 14491
// sShield := true ;
14483: LD_ADDR_EXP 76
14487: PUSH
14488: LD_INT 1
14490: ST_TO_ADDR
// if p3 = 35 then
14491: LD_VAR 0 3
14495: PUSH
14496: LD_INT 35
14498: EQUAL
14499: IFFALSE 14509
// sTime := true ;
14501: LD_ADDR_EXP 77
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// if p3 = 36 then
14509: LD_VAR 0 3
14513: PUSH
14514: LD_INT 36
14516: EQUAL
14517: IFFALSE 14527
// sTools := true ;
14519: LD_ADDR_EXP 78
14523: PUSH
14524: LD_INT 1
14526: ST_TO_ADDR
// if p3 = 101 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 101
14534: EQUAL
14535: IFFALSE 14545
// sSold := true ;
14537: LD_ADDR_EXP 43
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// if p3 = 102 then
14545: LD_VAR 0 3
14549: PUSH
14550: LD_INT 102
14552: EQUAL
14553: IFFALSE 14563
// sDiff := true ;
14555: LD_ADDR_EXP 44
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// if p3 = 103 then
14563: LD_VAR 0 3
14567: PUSH
14568: LD_INT 103
14570: EQUAL
14571: IFFALSE 14581
// sFog := true ;
14573: LD_ADDR_EXP 47
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// if p3 = 104 then
14581: LD_VAR 0 3
14585: PUSH
14586: LD_INT 104
14588: EQUAL
14589: IFFALSE 14599
// sReset := true ;
14591: LD_ADDR_EXP 48
14595: PUSH
14596: LD_INT 1
14598: ST_TO_ADDR
// if p3 = 105 then
14599: LD_VAR 0 3
14603: PUSH
14604: LD_INT 105
14606: EQUAL
14607: IFFALSE 14617
// sSun := true ;
14609: LD_ADDR_EXP 49
14613: PUSH
14614: LD_INT 1
14616: ST_TO_ADDR
// if p3 = 106 then
14617: LD_VAR 0 3
14621: PUSH
14622: LD_INT 106
14624: EQUAL
14625: IFFALSE 14635
// sTiger := true ;
14627: LD_ADDR_EXP 45
14631: PUSH
14632: LD_INT 1
14634: ST_TO_ADDR
// if p3 = 107 then
14635: LD_VAR 0 3
14639: PUSH
14640: LD_INT 107
14642: EQUAL
14643: IFFALSE 14653
// sBomb := true ;
14645: LD_ADDR_EXP 46
14649: PUSH
14650: LD_INT 1
14652: ST_TO_ADDR
// if p3 = 108 then
14653: LD_VAR 0 3
14657: PUSH
14658: LD_INT 108
14660: EQUAL
14661: IFFALSE 14671
// sWound := true ;
14663: LD_ADDR_EXP 54
14667: PUSH
14668: LD_INT 1
14670: ST_TO_ADDR
// if p3 = 109 then
14671: LD_VAR 0 3
14675: PUSH
14676: LD_INT 109
14678: EQUAL
14679: IFFALSE 14689
// sBetray := true ;
14681: LD_ADDR_EXP 58
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// if p3 = 110 then
14689: LD_VAR 0 3
14693: PUSH
14694: LD_INT 110
14696: EQUAL
14697: IFFALSE 14707
// sContamin := true ;
14699: LD_ADDR_EXP 59
14703: PUSH
14704: LD_INT 1
14706: ST_TO_ADDR
// if p3 = 111 then
14707: LD_VAR 0 3
14711: PUSH
14712: LD_INT 111
14714: EQUAL
14715: IFFALSE 14725
// sOil := true ;
14717: LD_ADDR_EXP 61
14721: PUSH
14722: LD_INT 1
14724: ST_TO_ADDR
// if p3 = 112 then
14725: LD_VAR 0 3
14729: PUSH
14730: LD_INT 112
14732: EQUAL
14733: IFFALSE 14743
// sStu := true ;
14735: LD_ADDR_EXP 65
14739: PUSH
14740: LD_INT 1
14742: ST_TO_ADDR
// if p3 = 113 then
14743: LD_VAR 0 3
14747: PUSH
14748: LD_INT 113
14750: EQUAL
14751: IFFALSE 14761
// sBazooka := true ;
14753: LD_ADDR_EXP 68
14757: PUSH
14758: LD_INT 1
14760: ST_TO_ADDR
// if p3 = 114 then
14761: LD_VAR 0 3
14765: PUSH
14766: LD_INT 114
14768: EQUAL
14769: IFFALSE 14779
// sMortar := true ;
14771: LD_ADDR_EXP 69
14775: PUSH
14776: LD_INT 1
14778: ST_TO_ADDR
// if p3 = 115 then
14779: LD_VAR 0 3
14783: PUSH
14784: LD_INT 115
14786: EQUAL
14787: IFFALSE 14797
// sRanger := true ;
14789: LD_ADDR_EXP 79
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// end ; end ;
14797: PPOPN 6
14799: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14800: LD_EXP 26
14804: PUSH
14805: LD_EXP 31
14809: AND
14810: IFFALSE 14934
14812: GO 14814
14814: DISABLE
14815: LD_INT 0
14817: PPUSH
14818: PPUSH
// begin enable ;
14819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: LD_INT 22
14827: PUSH
14828: LD_OWVAR 2
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 2
14839: PUSH
14840: LD_INT 34
14842: PUSH
14843: LD_INT 7
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 34
14852: PUSH
14853: LD_INT 45
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 34
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 34
14872: PUSH
14873: LD_INT 47
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 2
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14934
// for i in tmp do
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_VAR 0 2
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14932
// begin SetLives ( i , 0 ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 234
// end ;
14930: GO 14915
14932: POP
14933: POP
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14937: LD_EXP 26
14941: PUSH
14942: LD_EXP 32
14946: AND
14947: IFFALSE 15031
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
// begin enable ;
14956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_OWVAR 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 32
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// if not tmp then
14993: LD_VAR 0 2
14997: NOT
14998: IFFALSE 15002
// exit ;
15000: GO 15031
// for i in tmp do
15002: LD_ADDR_VAR 0 1
15006: PUSH
15007: LD_VAR 0 2
15011: PUSH
15012: FOR_IN
15013: IFFALSE 15029
// begin SetLives ( i , 0 ) ;
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_INT 0
15022: PPUSH
15023: CALL_OW 234
// end ;
15027: GO 15012
15029: POP
15030: POP
// end ;
15031: PPOPN 2
15033: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15034: LD_EXP 26
15038: PUSH
15039: LD_EXP 29
15043: AND
15044: IFFALSE 15137
15046: GO 15048
15048: DISABLE
15049: LD_INT 0
15051: PPUSH
// begin enable ;
15052: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15053: LD_ADDR_VAR 0 1
15057: PUSH
15058: LD_INT 22
15060: PUSH
15061: LD_OWVAR 2
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 25
15075: PUSH
15076: LD_INT 5
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 25
15085: PUSH
15086: LD_INT 9
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 25
15095: PUSH
15096: LD_INT 8
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: FOR_IN
15119: IFFALSE 15135
// begin SetClass ( i , 1 ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 336
// end ;
15133: GO 15118
15135: POP
15136: POP
// end ;
15137: PPOPN 1
15139: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15140: LD_EXP 26
15144: PUSH
15145: LD_EXP 30
15149: AND
15150: PUSH
15151: LD_OWVAR 65
15155: PUSH
15156: LD_INT 7
15158: LESS
15159: AND
15160: IFFALSE 15174
15162: GO 15164
15164: DISABLE
// begin enable ;
15165: ENABLE
// game_speed := 7 ;
15166: LD_ADDR_OWVAR 65
15170: PUSH
15171: LD_INT 7
15173: ST_TO_ADDR
// end ;
15174: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15175: LD_EXP 26
15179: PUSH
15180: LD_EXP 33
15184: AND
15185: IFFALSE 15387
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 81
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15387
// if tmp > 5 then
15240: LD_VAR 0 3
15244: PUSH
15245: LD_INT 5
15247: GREATER
15248: IFFALSE 15260
// k := 5 else
15250: LD_ADDR_VAR 0 2
15254: PUSH
15255: LD_INT 5
15257: ST_TO_ADDR
15258: GO 15270
// k := tmp ;
15260: LD_ADDR_VAR 0 2
15264: PUSH
15265: LD_VAR 0 3
15269: ST_TO_ADDR
// for i := 1 to k do
15270: LD_ADDR_VAR 0 1
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15385
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15288: LD_VAR 0 3
15292: PUSH
15293: LD_VAR 0 1
15297: ARRAY
15298: PPUSH
15299: LD_VAR 0 1
15303: PUSH
15304: LD_INT 4
15306: MOD
15307: PUSH
15308: LD_INT 1
15310: PLUS
15311: PPUSH
15312: CALL_OW 259
15316: PUSH
15317: LD_INT 10
15319: LESS
15320: IFFALSE 15383
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15322: LD_VAR 0 3
15326: PUSH
15327: LD_VAR 0 1
15331: ARRAY
15332: PPUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 4
15340: MOD
15341: PUSH
15342: LD_INT 1
15344: PLUS
15345: PPUSH
15346: LD_VAR 0 3
15350: PUSH
15351: LD_VAR 0 1
15355: ARRAY
15356: PPUSH
15357: LD_VAR 0 1
15361: PUSH
15362: LD_INT 4
15364: MOD
15365: PUSH
15366: LD_INT 1
15368: PLUS
15369: PPUSH
15370: CALL_OW 259
15374: PUSH
15375: LD_INT 1
15377: PLUS
15378: PPUSH
15379: CALL_OW 237
15383: GO 15285
15385: POP
15386: POP
// end ;
15387: PPOPN 3
15389: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15390: LD_EXP 26
15394: PUSH
15395: LD_EXP 34
15399: AND
15400: IFFALSE 15420
15402: GO 15404
15404: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15405: LD_INT 4
15407: PPUSH
15408: LD_OWVAR 2
15412: PPUSH
15413: LD_INT 0
15415: PPUSH
15416: CALL_OW 324
15420: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15421: LD_EXP 26
15425: PUSH
15426: LD_EXP 63
15430: AND
15431: IFFALSE 15451
15433: GO 15435
15435: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15436: LD_INT 19
15438: PPUSH
15439: LD_OWVAR 2
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 324
15451: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15452: LD_EXP 26
15456: PUSH
15457: LD_EXP 35
15461: AND
15462: IFFALSE 15564
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// begin enable ;
15471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_OWVAR 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: LD_INT 34
15494: PUSH
15495: LD_INT 11
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 34
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: ST_TO_ADDR
// if not tmp then
15526: LD_VAR 0 2
15530: NOT
15531: IFFALSE 15535
// exit ;
15533: GO 15564
// for i in tmp do
15535: LD_ADDR_VAR 0 1
15539: PUSH
15540: LD_VAR 0 2
15544: PUSH
15545: FOR_IN
15546: IFFALSE 15562
// begin SetLives ( i , 0 ) ;
15548: LD_VAR 0 1
15552: PPUSH
15553: LD_INT 0
15555: PPUSH
15556: CALL_OW 234
// end ;
15560: GO 15545
15562: POP
15563: POP
// end ;
15564: PPOPN 2
15566: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15567: LD_EXP 26
15571: PUSH
15572: LD_EXP 36
15576: AND
15577: IFFALSE 15597
15579: GO 15581
15581: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15582: LD_INT 32
15584: PPUSH
15585: LD_OWVAR 2
15589: PPUSH
15590: LD_INT 0
15592: PPUSH
15593: CALL_OW 324
15597: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15598: LD_EXP 26
15602: PUSH
15603: LD_EXP 37
15607: AND
15608: IFFALSE 15789
15610: GO 15612
15612: DISABLE
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_OWVAR 2
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 33
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: ST_TO_ADDR
// if not tmp then
15654: LD_VAR 0 2
15658: NOT
15659: IFFALSE 15663
// exit ;
15661: GO 15789
// side := 0 ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_INT 0
15670: ST_TO_ADDR
// for i := 1 to 8 do
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: DOUBLE
15677: LD_INT 1
15679: DEC
15680: ST_TO_ADDR
15681: LD_INT 8
15683: PUSH
15684: FOR_TO
15685: IFFALSE 15733
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15687: LD_OWVAR 2
15691: PUSH
15692: LD_VAR 0 1
15696: NONEQUAL
15697: PUSH
15698: LD_OWVAR 2
15702: PPUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 81
15712: PUSH
15713: LD_INT 2
15715: EQUAL
15716: AND
15717: IFFALSE 15731
// begin side := i ;
15719: LD_ADDR_VAR 0 3
15723: PUSH
15724: LD_VAR 0 1
15728: ST_TO_ADDR
// break ;
15729: GO 15733
// end ;
15731: GO 15684
15733: POP
15734: POP
// if not side then
15735: LD_VAR 0 3
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15789
// for i := 1 to tmp do
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: DOUBLE
15750: LD_INT 1
15752: DEC
15753: ST_TO_ADDR
15754: LD_VAR 0 2
15758: PUSH
15759: FOR_TO
15760: IFFALSE 15787
// if Prob ( 60 ) then
15762: LD_INT 60
15764: PPUSH
15765: CALL_OW 13
15769: IFFALSE 15785
// SetSide ( i , side ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: CALL_OW 235
15785: GO 15759
15787: POP
15788: POP
// end ;
15789: PPOPN 3
15791: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15792: LD_EXP 26
15796: PUSH
15797: LD_EXP 39
15801: AND
15802: IFFALSE 15921
15804: GO 15806
15806: DISABLE
15807: LD_INT 0
15809: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15810: LD_ADDR_VAR 0 1
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_OWVAR 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 3
15839: PUSH
15840: LD_INT 23
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: PPUSH
15859: CALL_OW 69
15863: PUSH
15864: FOR_IN
15865: IFFALSE 15919
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 257
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 3
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: IN
15895: IFFALSE 15917
// SetClass ( un , rand ( 1 , 4 ) ) ;
15897: LD_VAR 0 1
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: LD_INT 4
15907: PPUSH
15908: CALL_OW 12
15912: PPUSH
15913: CALL_OW 336
15917: GO 15864
15919: POP
15920: POP
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15924: LD_EXP 26
15928: PUSH
15929: LD_EXP 38
15933: AND
15934: IFFALSE 16013
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 100
16008: PPUSH
16009: CALL_OW 234
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16016: LD_EXP 26
16020: PUSH
16021: LD_EXP 40
16025: AND
16026: IFFALSE 16124
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16034: LD_ADDR_VAR 0 1
16038: PUSH
16039: LD_INT 22
16041: PUSH
16042: LD_OWVAR 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 21
16053: PUSH
16054: LD_INT 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if not tmp then
16070: LD_VAR 0 1
16074: NOT
16075: IFFALSE 16079
// exit ;
16077: GO 16124
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16079: LD_VAR 0 1
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 12
16096: ARRAY
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: LD_INT 4
16103: PPUSH
16104: CALL_OW 12
16108: PPUSH
16109: LD_INT 3000
16111: PPUSH
16112: LD_INT 9000
16114: PPUSH
16115: CALL_OW 12
16119: PPUSH
16120: CALL_OW 492
// end ;
16124: PPOPN 1
16126: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16127: LD_EXP 26
16131: PUSH
16132: LD_EXP 41
16136: AND
16137: IFFALSE 16157
16139: GO 16141
16141: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16142: LD_INT 1
16144: PPUSH
16145: LD_OWVAR 2
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: CALL_OW 324
16157: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16158: LD_EXP 26
16162: PUSH
16163: LD_EXP 42
16167: AND
16168: IFFALSE 16251
16170: GO 16172
16172: DISABLE
16173: LD_INT 0
16175: PPUSH
16176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 21
16196: PUSH
16197: LD_INT 3
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 2
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16251
// for i in tmp do
16222: LD_ADDR_VAR 0 1
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: FOR_IN
16233: IFFALSE 16249
// SetBLevel ( i , 10 ) ;
16235: LD_VAR 0 1
16239: PPUSH
16240: LD_INT 10
16242: PPUSH
16243: CALL_OW 241
16247: GO 16232
16249: POP
16250: POP
// end ;
16251: PPOPN 2
16253: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16254: LD_EXP 26
16258: PUSH
16259: LD_EXP 43
16263: AND
16264: IFFALSE 16375
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
16273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_OWVAR 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 25
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: ST_TO_ADDR
// if not tmp then
16310: LD_VAR 0 3
16314: NOT
16315: IFFALSE 16319
// exit ;
16317: GO 16375
// un := tmp [ rand ( 1 , tmp ) ] ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_VAR 0 3
16328: PUSH
16329: LD_INT 1
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 12
16341: ARRAY
16342: ST_TO_ADDR
// if Crawls ( un ) then
16343: LD_VAR 0 2
16347: PPUSH
16348: CALL_OW 318
16352: IFFALSE 16363
// ComWalk ( un ) ;
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16363: LD_VAR 0 2
16367: PPUSH
16368: LD_INT 5
16370: PPUSH
16371: CALL_OW 336
// end ;
16375: PPOPN 3
16377: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16378: LD_EXP 26
16382: PUSH
16383: LD_EXP 44
16387: AND
16388: PUSH
16389: LD_OWVAR 67
16393: PUSH
16394: LD_INT 3
16396: LESS
16397: AND
16398: IFFALSE 16417
16400: GO 16402
16402: DISABLE
// Difficulty := Difficulty + 1 ;
16403: LD_ADDR_OWVAR 67
16407: PUSH
16408: LD_OWVAR 67
16412: PUSH
16413: LD_INT 1
16415: PLUS
16416: ST_TO_ADDR
16417: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16418: LD_EXP 26
16422: PUSH
16423: LD_EXP 45
16427: AND
16428: IFFALSE 16531
16430: GO 16432
16432: DISABLE
16433: LD_INT 0
16435: PPUSH
// begin for i := 1 to 5 do
16436: LD_ADDR_VAR 0 1
16440: PUSH
16441: DOUBLE
16442: LD_INT 1
16444: DEC
16445: ST_TO_ADDR
16446: LD_INT 5
16448: PUSH
16449: FOR_TO
16450: IFFALSE 16529
// begin uc_nation := nation_nature ;
16452: LD_ADDR_OWVAR 21
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// uc_side := 0 ;
16460: LD_ADDR_OWVAR 20
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16468: LD_ADDR_OWVAR 29
16472: PUSH
16473: LD_INT 12
16475: PUSH
16476: LD_INT 12
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: ST_TO_ADDR
// hc_agressivity := 20 ;
16483: LD_ADDR_OWVAR 35
16487: PUSH
16488: LD_INT 20
16490: ST_TO_ADDR
// hc_class := class_tiger ;
16491: LD_ADDR_OWVAR 28
16495: PUSH
16496: LD_INT 14
16498: ST_TO_ADDR
// hc_gallery :=  ;
16499: LD_ADDR_OWVAR 33
16503: PUSH
16504: LD_STRING 
16506: ST_TO_ADDR
// hc_name :=  ;
16507: LD_ADDR_OWVAR 26
16511: PUSH
16512: LD_STRING 
16514: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16515: CALL_OW 44
16519: PPUSH
16520: LD_INT 0
16522: PPUSH
16523: CALL_OW 51
// end ;
16527: GO 16449
16529: POP
16530: POP
// end ;
16531: PPOPN 1
16533: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16534: LD_EXP 26
16538: PUSH
16539: LD_EXP 46
16543: AND
16544: IFFALSE 16553
16546: GO 16548
16548: DISABLE
// StreamSibBomb ;
16549: CALL 16554 0 0
16553: END
// export function StreamSibBomb ; var i , x , y ; begin
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
// result := false ;
16560: LD_ADDR_VAR 0 1
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// for i := 1 to 16 do
16568: LD_ADDR_VAR 0 2
16572: PUSH
16573: DOUBLE
16574: LD_INT 1
16576: DEC
16577: ST_TO_ADDR
16578: LD_INT 16
16580: PUSH
16581: FOR_TO
16582: IFFALSE 16781
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16584: LD_ADDR_VAR 0 3
16588: PUSH
16589: LD_INT 10
16591: PUSH
16592: LD_INT 20
16594: PUSH
16595: LD_INT 30
16597: PUSH
16598: LD_INT 40
16600: PUSH
16601: LD_INT 50
16603: PUSH
16604: LD_INT 60
16606: PUSH
16607: LD_INT 70
16609: PUSH
16610: LD_INT 80
16612: PUSH
16613: LD_INT 90
16615: PUSH
16616: LD_INT 100
16618: PUSH
16619: LD_INT 110
16621: PUSH
16622: LD_INT 120
16624: PUSH
16625: LD_INT 130
16627: PUSH
16628: LD_INT 140
16630: PUSH
16631: LD_INT 150
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 1
16653: PPUSH
16654: LD_INT 15
16656: PPUSH
16657: CALL_OW 12
16661: ARRAY
16662: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16663: LD_ADDR_VAR 0 4
16667: PUSH
16668: LD_INT 10
16670: PUSH
16671: LD_INT 20
16673: PUSH
16674: LD_INT 30
16676: PUSH
16677: LD_INT 40
16679: PUSH
16680: LD_INT 50
16682: PUSH
16683: LD_INT 60
16685: PUSH
16686: LD_INT 70
16688: PUSH
16689: LD_INT 80
16691: PUSH
16692: LD_INT 90
16694: PUSH
16695: LD_INT 100
16697: PUSH
16698: LD_INT 110
16700: PUSH
16701: LD_INT 120
16703: PUSH
16704: LD_INT 130
16706: PUSH
16707: LD_INT 140
16709: PUSH
16710: LD_INT 150
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 15
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: ST_TO_ADDR
// if ValidHex ( x , y ) then
16742: LD_VAR 0 3
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: CALL_OW 488
16756: IFFALSE 16779
// begin result := [ x , y ] ;
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: LD_VAR 0 3
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: ST_TO_ADDR
// break ;
16777: GO 16781
// end ; end ;
16779: GO 16581
16781: POP
16782: POP
// if result then
16783: LD_VAR 0 1
16787: IFFALSE 16847
// begin ToLua ( playSibBomb() ) ;
16789: LD_STRING playSibBomb()
16791: PPUSH
16792: CALL_OW 559
// wait ( 0 0$14 ) ;
16796: LD_INT 490
16798: PPUSH
16799: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16803: LD_VAR 0 1
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 1
16816: PUSH
16817: LD_INT 2
16819: ARRAY
16820: PPUSH
16821: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: LD_VAR 0 1
16838: PUSH
16839: LD_INT 2
16841: ARRAY
16842: PPUSH
16843: CALL_OW 429
// end ; end ;
16847: LD_VAR 0 1
16851: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16852: LD_EXP 26
16856: PUSH
16857: LD_EXP 48
16861: AND
16862: IFFALSE 16874
16864: GO 16866
16866: DISABLE
// YouLost (  ) ;
16867: LD_STRING 
16869: PPUSH
16870: CALL_OW 104
16874: END
// every 0 0$1 trigger StreamModeActive and sFog do
16875: LD_EXP 26
16879: PUSH
16880: LD_EXP 47
16884: AND
16885: IFFALSE 16899
16887: GO 16889
16889: DISABLE
// FogOff ( your_side ) ;
16890: LD_OWVAR 2
16894: PPUSH
16895: CALL_OW 344
16899: END
// every 0 0$1 trigger StreamModeActive and sSun do
16900: LD_EXP 26
16904: PUSH
16905: LD_EXP 49
16909: AND
16910: IFFALSE 16938
16912: GO 16914
16914: DISABLE
// begin solar_recharge_percent := 0 ;
16915: LD_ADDR_OWVAR 79
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16923: LD_INT 10500
16925: PPUSH
16926: CALL_OW 67
// solar_recharge_percent := 100 ;
16930: LD_ADDR_OWVAR 79
16934: PUSH
16935: LD_INT 100
16937: ST_TO_ADDR
// end ;
16938: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16939: LD_EXP 26
16943: PUSH
16944: LD_EXP 50
16948: AND
16949: IFFALSE 17188
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
16958: PPUSH
// begin tmp := [ ] ;
16959: LD_ADDR_VAR 0 3
16963: PUSH
16964: EMPTY
16965: ST_TO_ADDR
// for i := 1 to 6 do
16966: LD_ADDR_VAR 0 1
16970: PUSH
16971: DOUBLE
16972: LD_INT 1
16974: DEC
16975: ST_TO_ADDR
16976: LD_INT 6
16978: PUSH
16979: FOR_TO
16980: IFFALSE 17085
// begin uc_nation := nation_nature ;
16982: LD_ADDR_OWVAR 21
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// uc_side := 0 ;
16990: LD_ADDR_OWVAR 20
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16998: LD_ADDR_OWVAR 29
17002: PUSH
17003: LD_INT 12
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: ST_TO_ADDR
// hc_agressivity := 20 ;
17013: LD_ADDR_OWVAR 35
17017: PUSH
17018: LD_INT 20
17020: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17021: LD_ADDR_OWVAR 28
17025: PUSH
17026: LD_INT 17
17028: ST_TO_ADDR
// hc_gallery :=  ;
17029: LD_ADDR_OWVAR 33
17033: PUSH
17034: LD_STRING 
17036: ST_TO_ADDR
// hc_name :=  ;
17037: LD_ADDR_OWVAR 26
17041: PUSH
17042: LD_STRING 
17044: ST_TO_ADDR
// un := CreateHuman ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: CALL_OW 44
17054: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 51
// tmp := tmp ^ un ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_VAR 0 3
17076: PUSH
17077: LD_VAR 0 2
17081: ADD
17082: ST_TO_ADDR
// end ;
17083: GO 16979
17085: POP
17086: POP
// repeat wait ( 0 0$1 ) ;
17087: LD_INT 35
17089: PPUSH
17090: CALL_OW 67
// for un in tmp do
17094: LD_ADDR_VAR 0 2
17098: PUSH
17099: LD_VAR 0 3
17103: PUSH
17104: FOR_IN
17105: IFFALSE 17179
// begin if IsDead ( un ) then
17107: LD_VAR 0 2
17111: PPUSH
17112: CALL_OW 301
17116: IFFALSE 17136
// begin tmp := tmp diff un ;
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_VAR 0 3
17127: PUSH
17128: LD_VAR 0 2
17132: DIFF
17133: ST_TO_ADDR
// continue ;
17134: GO 17104
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17136: LD_VAR 0 2
17140: PPUSH
17141: LD_INT 3
17143: PUSH
17144: LD_INT 22
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 115
// end ;
17177: GO 17104
17179: POP
17180: POP
// until not tmp ;
17181: LD_VAR 0 3
17185: NOT
17186: IFFALSE 17087
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17191: LD_EXP 26
17195: PUSH
17196: LD_EXP 51
17200: AND
17201: IFFALSE 17255
17203: GO 17205
17205: DISABLE
// begin ToLua ( displayTroll(); ) ;
17206: LD_STRING displayTroll();
17208: PPUSH
17209: CALL_OW 559
// wait ( 3 3$00 ) ;
17213: LD_INT 6300
17215: PPUSH
17216: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17220: LD_STRING hideTroll();
17222: PPUSH
17223: CALL_OW 559
// wait ( 1 1$00 ) ;
17227: LD_INT 2100
17229: PPUSH
17230: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17234: LD_STRING displayTroll();
17236: PPUSH
17237: CALL_OW 559
// wait ( 1 1$00 ) ;
17241: LD_INT 2100
17243: PPUSH
17244: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17248: LD_STRING hideTroll();
17250: PPUSH
17251: CALL_OW 559
// end ;
17255: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17256: LD_EXP 26
17260: PUSH
17261: LD_EXP 52
17265: AND
17266: IFFALSE 17329
17268: GO 17270
17270: DISABLE
17271: LD_INT 0
17273: PPUSH
// begin p := 0 ;
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: LD_INT 0
17281: ST_TO_ADDR
// repeat game_speed := 1 ;
17282: LD_ADDR_OWVAR 65
17286: PUSH
17287: LD_INT 1
17289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17290: LD_INT 35
17292: PPUSH
17293: CALL_OW 67
// p := p + 1 ;
17297: LD_ADDR_VAR 0 1
17301: PUSH
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 1
17309: PLUS
17310: ST_TO_ADDR
// until p >= 60 ;
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 60
17318: GREATEREQUAL
17319: IFFALSE 17282
// game_speed := 4 ;
17321: LD_ADDR_OWVAR 65
17325: PUSH
17326: LD_INT 4
17328: ST_TO_ADDR
// end ;
17329: PPOPN 1
17331: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17332: LD_EXP 26
17336: PUSH
17337: LD_EXP 53
17341: AND
17342: IFFALSE 17488
17344: GO 17346
17346: DISABLE
17347: LD_INT 0
17349: PPUSH
17350: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 30
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: ST_TO_ADDR
// if not depot then
17405: LD_VAR 0 1
17409: NOT
17410: IFFALSE 17414
// exit ;
17412: GO 17488
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17414: LD_ADDR_VAR 0 2
17418: PUSH
17419: LD_VAR 0 1
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 12
17436: ARRAY
17437: PPUSH
17438: CALL_OW 274
17442: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: LD_INT 0
17453: PPUSH
17454: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17458: LD_VAR 0 2
17462: PPUSH
17463: LD_INT 2
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17473: LD_VAR 0 2
17477: PPUSH
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 0
17483: PPUSH
17484: CALL_OW 277
// end ;
17488: PPOPN 2
17490: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17491: LD_EXP 26
17495: PUSH
17496: LD_EXP 54
17500: AND
17501: IFFALSE 17598
17503: GO 17505
17505: DISABLE
17506: LD_INT 0
17508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17509: LD_ADDR_VAR 0 1
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_OWVAR 2
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 23
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PPUSH
17558: CALL_OW 69
17562: ST_TO_ADDR
// if not tmp then
17563: LD_VAR 0 1
17567: NOT
17568: IFFALSE 17572
// exit ;
17570: GO 17598
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 12
17589: ARRAY
17590: PPUSH
17591: LD_INT 200
17593: PPUSH
17594: CALL_OW 234
// end ;
17598: PPOPN 1
17600: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17601: LD_EXP 26
17605: PUSH
17606: LD_EXP 55
17610: AND
17611: IFFALSE 17690
17613: GO 17615
17615: DISABLE
17616: LD_INT 0
17618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17619: LD_ADDR_VAR 0 1
17623: PUSH
17624: LD_INT 22
17626: PUSH
17627: LD_OWVAR 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 21
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: ST_TO_ADDR
// if not tmp then
17655: LD_VAR 0 1
17659: NOT
17660: IFFALSE 17664
// exit ;
17662: GO 17690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 1
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 12
17681: ARRAY
17682: PPUSH
17683: LD_INT 60
17685: PPUSH
17686: CALL_OW 234
// end ;
17690: PPOPN 1
17692: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17693: LD_EXP 26
17697: PUSH
17698: LD_EXP 56
17702: AND
17703: IFFALSE 17802
17705: GO 17707
17707: DISABLE
17708: LD_INT 0
17710: PPUSH
17711: PPUSH
// begin enable ;
17712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_OWVAR 2
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 61
17732: PUSH
17733: EMPTY
17734: LIST
17735: PUSH
17736: LD_INT 33
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: PPUSH
17751: CALL_OW 69
17755: ST_TO_ADDR
// if not tmp then
17756: LD_VAR 0 1
17760: NOT
17761: IFFALSE 17765
// exit ;
17763: GO 17802
// for i in tmp do
17765: LD_ADDR_VAR 0 2
17769: PUSH
17770: LD_VAR 0 1
17774: PUSH
17775: FOR_IN
17776: IFFALSE 17800
// if IsControledBy ( i ) then
17778: LD_VAR 0 2
17782: PPUSH
17783: CALL_OW 312
17787: IFFALSE 17798
// ComUnlink ( i ) ;
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 136
17798: GO 17775
17800: POP
17801: POP
// end ;
17802: PPOPN 2
17804: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17805: LD_EXP 26
17809: PUSH
17810: LD_EXP 57
17814: AND
17815: IFFALSE 17955
17817: GO 17819
17819: DISABLE
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
// begin ToLua ( displayPowell(); ) ;
17824: LD_STRING displayPowell();
17826: PPUSH
17827: CALL_OW 559
// uc_side := 0 ;
17831: LD_ADDR_OWVAR 20
17835: PUSH
17836: LD_INT 0
17838: ST_TO_ADDR
// uc_nation := 2 ;
17839: LD_ADDR_OWVAR 21
17843: PUSH
17844: LD_INT 2
17846: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17847: LD_ADDR_OWVAR 37
17851: PUSH
17852: LD_INT 14
17854: ST_TO_ADDR
// vc_engine := engine_siberite ;
17855: LD_ADDR_OWVAR 39
17859: PUSH
17860: LD_INT 3
17862: ST_TO_ADDR
// vc_control := control_apeman ;
17863: LD_ADDR_OWVAR 38
17867: PUSH
17868: LD_INT 5
17870: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17871: LD_ADDR_OWVAR 40
17875: PUSH
17876: LD_INT 29
17878: ST_TO_ADDR
// un := CreateVehicle ;
17879: LD_ADDR_VAR 0 2
17883: PUSH
17884: CALL_OW 45
17888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17901: LD_INT 35
17903: PPUSH
17904: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17908: LD_VAR 0 2
17912: PPUSH
17913: LD_INT 22
17915: PUSH
17916: LD_OWVAR 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: PPUSH
17930: LD_VAR 0 2
17934: PPUSH
17935: CALL_OW 74
17939: PPUSH
17940: CALL_OW 115
// until IsDead ( un ) ;
17944: LD_VAR 0 2
17948: PPUSH
17949: CALL_OW 301
17953: IFFALSE 17901
// end ;
17955: PPOPN 2
17957: END
// every 0 0$1 trigger StreamModeActive and sStu do
17958: LD_EXP 26
17962: PUSH
17963: LD_EXP 65
17967: AND
17968: IFFALSE 17984
17970: GO 17972
17972: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17973: LD_STRING displayStucuk();
17975: PPUSH
17976: CALL_OW 559
// ResetFog ;
17980: CALL_OW 335
// end ;
17984: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17985: LD_EXP 26
17989: PUSH
17990: LD_EXP 58
17994: AND
17995: IFFALSE 18136
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
18003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18004: LD_ADDR_VAR 0 2
18008: PUSH
18009: LD_INT 22
18011: PUSH
18012: LD_OWVAR 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 21
18023: PUSH
18024: LD_INT 1
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 69
18039: ST_TO_ADDR
// if not tmp then
18040: LD_VAR 0 2
18044: NOT
18045: IFFALSE 18049
// exit ;
18047: GO 18136
// un := tmp [ rand ( 1 , tmp ) ] ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_VAR 0 2
18058: PUSH
18059: LD_INT 1
18061: PPUSH
18062: LD_VAR 0 2
18066: PPUSH
18067: CALL_OW 12
18071: ARRAY
18072: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18073: LD_VAR 0 1
18077: PPUSH
18078: LD_INT 0
18080: PPUSH
18081: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18085: LD_VAR 0 1
18089: PPUSH
18090: LD_OWVAR 3
18094: PUSH
18095: LD_VAR 0 1
18099: DIFF
18100: PPUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 74
18110: PPUSH
18111: CALL_OW 115
// wait ( 0 0$20 ) ;
18115: LD_INT 700
18117: PPUSH
18118: CALL_OW 67
// SetSide ( un , your_side ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: LD_OWVAR 2
18131: PPUSH
18132: CALL_OW 235
// end ;
18136: PPOPN 2
18138: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18139: LD_EXP 26
18143: PUSH
18144: LD_EXP 59
18148: AND
18149: IFFALSE 18255
18151: GO 18153
18153: DISABLE
18154: LD_INT 0
18156: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18157: LD_ADDR_VAR 0 1
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_OWVAR 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: LD_INT 30
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: ST_TO_ADDR
// if not depot then
18211: LD_VAR 0 1
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18255
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18220: LD_VAR 0 1
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: CALL_OW 250
18233: PPUSH
18234: LD_VAR 0 1
18238: PUSH
18239: LD_INT 1
18241: ARRAY
18242: PPUSH
18243: CALL_OW 251
18247: PPUSH
18248: LD_INT 70
18250: PPUSH
18251: CALL_OW 495
// end ;
18255: PPOPN 1
18257: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18258: LD_EXP 26
18262: PUSH
18263: LD_EXP 60
18267: AND
18268: IFFALSE 18479
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18280: LD_ADDR_VAR 0 5
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_OWVAR 2
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 21
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PPUSH
18311: CALL_OW 69
18315: ST_TO_ADDR
// if not tmp then
18316: LD_VAR 0 5
18320: NOT
18321: IFFALSE 18325
// exit ;
18323: GO 18479
// for i in tmp do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_VAR 0 5
18334: PUSH
18335: FOR_IN
18336: IFFALSE 18477
// begin d := rand ( 0 , 5 ) ;
18338: LD_ADDR_VAR 0 4
18342: PUSH
18343: LD_INT 0
18345: PPUSH
18346: LD_INT 5
18348: PPUSH
18349: CALL_OW 12
18353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18354: LD_ADDR_VAR 0 2
18358: PUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 250
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_INT 3
18376: PPUSH
18377: LD_INT 12
18379: PPUSH
18380: CALL_OW 12
18384: PPUSH
18385: CALL_OW 272
18389: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 251
18404: PPUSH
18405: LD_VAR 0 4
18409: PPUSH
18410: LD_INT 3
18412: PPUSH
18413: LD_INT 12
18415: PPUSH
18416: CALL_OW 12
18420: PPUSH
18421: CALL_OW 273
18425: ST_TO_ADDR
// if ValidHex ( x , y ) then
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: CALL_OW 488
18440: IFFALSE 18475
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_VAR 0 2
18451: PPUSH
18452: LD_VAR 0 3
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_INT 6
18462: PPUSH
18463: CALL_OW 12
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 483
// end ;
18475: GO 18335
18477: POP
18478: POP
// end ;
18479: PPOPN 5
18481: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18482: LD_EXP 26
18486: PUSH
18487: LD_EXP 61
18491: AND
18492: IFFALSE 18586
18494: GO 18496
18496: DISABLE
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_INT 22
18508: PUSH
18509: LD_OWVAR 2
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 32
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: ST_TO_ADDR
// if not tmp then
18548: LD_VAR 0 2
18552: NOT
18553: IFFALSE 18557
// exit ;
18555: GO 18586
// for i in tmp do
18557: LD_ADDR_VAR 0 1
18561: PUSH
18562: LD_VAR 0 2
18566: PUSH
18567: FOR_IN
18568: IFFALSE 18584
// SetFuel ( i , 0 ) ;
18570: LD_VAR 0 1
18574: PPUSH
18575: LD_INT 0
18577: PPUSH
18578: CALL_OW 240
18582: GO 18567
18584: POP
18585: POP
// end ;
18586: PPOPN 2
18588: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18589: LD_EXP 26
18593: PUSH
18594: LD_EXP 62
18598: AND
18599: IFFALSE 18665
18601: GO 18603
18603: DISABLE
18604: LD_INT 0
18606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18607: LD_ADDR_VAR 0 1
18611: PUSH
18612: LD_INT 22
18614: PUSH
18615: LD_OWVAR 2
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 29
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: ST_TO_ADDR
// if not tmp then
18643: LD_VAR 0 1
18647: NOT
18648: IFFALSE 18652
// exit ;
18650: GO 18665
// DestroyUnit ( tmp [ 1 ] ) ;
18652: LD_VAR 0 1
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: CALL_OW 65
// end ;
18665: PPOPN 1
18667: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18668: LD_EXP 26
18672: PUSH
18673: LD_EXP 64
18677: AND
18678: IFFALSE 18807
18680: GO 18682
18682: DISABLE
18683: LD_INT 0
18685: PPUSH
// begin uc_side := 0 ;
18686: LD_ADDR_OWVAR 20
18690: PUSH
18691: LD_INT 0
18693: ST_TO_ADDR
// uc_nation := nation_arabian ;
18694: LD_ADDR_OWVAR 21
18698: PUSH
18699: LD_INT 2
18701: ST_TO_ADDR
// hc_gallery :=  ;
18702: LD_ADDR_OWVAR 33
18706: PUSH
18707: LD_STRING 
18709: ST_TO_ADDR
// hc_name :=  ;
18710: LD_ADDR_OWVAR 26
18714: PUSH
18715: LD_STRING 
18717: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18718: LD_INT 1
18720: PPUSH
18721: LD_INT 11
18723: PPUSH
18724: LD_INT 10
18726: PPUSH
18727: CALL_OW 380
// un := CreateHuman ;
18731: LD_ADDR_VAR 0 1
18735: PUSH
18736: CALL_OW 44
18740: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18741: LD_VAR 0 1
18745: PPUSH
18746: LD_INT 1
18748: PPUSH
18749: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18753: LD_INT 35
18755: PPUSH
18756: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18760: LD_VAR 0 1
18764: PPUSH
18765: LD_INT 22
18767: PUSH
18768: LD_OWVAR 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 74
18791: PPUSH
18792: CALL_OW 115
// until IsDead ( un ) ;
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 301
18805: IFFALSE 18753
// end ;
18807: PPOPN 1
18809: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18810: LD_EXP 26
18814: PUSH
18815: LD_EXP 66
18819: AND
18820: IFFALSE 18832
18822: GO 18824
18824: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18825: LD_STRING earthquake(getX(game), 0, 32)
18827: PPUSH
18828: CALL_OW 559
18832: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18833: LD_EXP 26
18837: PUSH
18838: LD_EXP 67
18842: AND
18843: IFFALSE 18934
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
// begin enable ;
18851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18852: LD_ADDR_VAR 0 1
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_OWVAR 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 21
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 33
18881: PUSH
18882: LD_INT 3
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: PPUSH
18894: CALL_OW 69
18898: ST_TO_ADDR
// if not tmp then
18899: LD_VAR 0 1
18903: NOT
18904: IFFALSE 18908
// exit ;
18906: GO 18934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: PPUSH
18916: LD_VAR 0 1
18920: PPUSH
18921: CALL_OW 12
18925: ARRAY
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 234
// end ;
18934: PPOPN 1
18936: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18937: LD_EXP 26
18941: PUSH
18942: LD_EXP 68
18946: AND
18947: IFFALSE 19088
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
18955: PPUSH
18956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_INT 22
18964: PUSH
18965: LD_OWVAR 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 25
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: ST_TO_ADDR
// if not tmp then
18993: LD_VAR 0 3
18997: NOT
18998: IFFALSE 19002
// exit ;
19000: GO 19088
// un := tmp [ rand ( 1 , tmp ) ] ;
19002: LD_ADDR_VAR 0 2
19006: PUSH
19007: LD_VAR 0 3
19011: PUSH
19012: LD_INT 1
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 12
19024: ARRAY
19025: ST_TO_ADDR
// if Crawls ( un ) then
19026: LD_VAR 0 2
19030: PPUSH
19031: CALL_OW 318
19035: IFFALSE 19046
// ComWalk ( un ) ;
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19046: LD_VAR 0 2
19050: PPUSH
19051: LD_INT 9
19053: PPUSH
19054: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19058: LD_INT 28
19060: PPUSH
19061: LD_OWVAR 2
19065: PPUSH
19066: LD_INT 2
19068: PPUSH
19069: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19073: LD_INT 29
19075: PPUSH
19076: LD_OWVAR 2
19080: PPUSH
19081: LD_INT 2
19083: PPUSH
19084: CALL_OW 322
// end ;
19088: PPOPN 3
19090: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19091: LD_EXP 26
19095: PUSH
19096: LD_EXP 69
19100: AND
19101: IFFALSE 19212
19103: GO 19105
19105: DISABLE
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19111: LD_ADDR_VAR 0 3
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 25
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: ST_TO_ADDR
// if not tmp then
19147: LD_VAR 0 3
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19212
// un := tmp [ rand ( 1 , tmp ) ] ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: CALL_OW 12
19178: ARRAY
19179: ST_TO_ADDR
// if Crawls ( un ) then
19180: LD_VAR 0 2
19184: PPUSH
19185: CALL_OW 318
19189: IFFALSE 19200
// ComWalk ( un ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19200: LD_VAR 0 2
19204: PPUSH
19205: LD_INT 8
19207: PPUSH
19208: CALL_OW 336
// end ;
19212: PPOPN 3
19214: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19215: LD_EXP 26
19219: PUSH
19220: LD_EXP 70
19224: AND
19225: IFFALSE 19369
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: LD_INT 34
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 34
19276: PUSH
19277: LD_INT 51
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 34
19286: PUSH
19287: LD_INT 32
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 2
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19369
// for i in tmp do
19319: LD_ADDR_VAR 0 1
19323: PUSH
19324: LD_VAR 0 2
19328: PUSH
19329: FOR_IN
19330: IFFALSE 19367
// if GetCargo ( i , mat_artifact ) = 0 then
19332: LD_VAR 0 1
19336: PPUSH
19337: LD_INT 4
19339: PPUSH
19340: CALL_OW 289
19344: PUSH
19345: LD_INT 0
19347: EQUAL
19348: IFFALSE 19365
// SetCargo ( i , mat_siberit , 100 ) ;
19350: LD_VAR 0 1
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: LD_INT 100
19360: PPUSH
19361: CALL_OW 290
19365: GO 19329
19367: POP
19368: POP
// end ;
19369: PPOPN 2
19371: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19372: LD_EXP 26
19376: PUSH
19377: LD_EXP 71
19381: AND
19382: IFFALSE 19565
19384: GO 19386
19386: DISABLE
19387: LD_INT 0
19389: PPUSH
19390: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_OWVAR 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: ST_TO_ADDR
// if not tmp then
19413: LD_VAR 0 2
19417: NOT
19418: IFFALSE 19422
// exit ;
19420: GO 19565
// for i := 1 to 2 do
19422: LD_ADDR_VAR 0 1
19426: PUSH
19427: DOUBLE
19428: LD_INT 1
19430: DEC
19431: ST_TO_ADDR
19432: LD_INT 2
19434: PUSH
19435: FOR_TO
19436: IFFALSE 19563
// begin uc_side := your_side ;
19438: LD_ADDR_OWVAR 20
19442: PUSH
19443: LD_OWVAR 2
19447: ST_TO_ADDR
// uc_nation := nation_american ;
19448: LD_ADDR_OWVAR 21
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// vc_chassis := us_morphling ;
19456: LD_ADDR_OWVAR 37
19460: PUSH
19461: LD_INT 5
19463: ST_TO_ADDR
// vc_engine := engine_siberite ;
19464: LD_ADDR_OWVAR 39
19468: PUSH
19469: LD_INT 3
19471: ST_TO_ADDR
// vc_control := control_computer ;
19472: LD_ADDR_OWVAR 38
19476: PUSH
19477: LD_INT 3
19479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19480: LD_ADDR_OWVAR 40
19484: PUSH
19485: LD_INT 10
19487: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19488: LD_VAR 0 2
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: PPUSH
19497: CALL_OW 310
19501: NOT
19502: IFFALSE 19549
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19504: CALL_OW 45
19508: PPUSH
19509: LD_VAR 0 2
19513: PUSH
19514: LD_INT 1
19516: ARRAY
19517: PPUSH
19518: CALL_OW 250
19522: PPUSH
19523: LD_VAR 0 2
19527: PUSH
19528: LD_INT 1
19530: ARRAY
19531: PPUSH
19532: CALL_OW 251
19536: PPUSH
19537: LD_INT 12
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 50
19547: GO 19561
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19549: CALL_OW 45
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 51
// end ;
19561: GO 19435
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19568: LD_EXP 26
19572: PUSH
19573: LD_EXP 72
19577: AND
19578: IFFALSE 19800
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19591: LD_ADDR_VAR 0 6
19595: PUSH
19596: LD_INT 22
19598: PUSH
19599: LD_OWVAR 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 21
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_INT 23
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 6
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 19800
// s1 := rand ( 1 , 4 ) ;
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_INT 4
19664: PPUSH
19665: CALL_OW 12
19669: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19670: LD_ADDR_VAR 0 4
19674: PUSH
19675: LD_VAR 0 6
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: LD_VAR 0 2
19688: PPUSH
19689: CALL_OW 259
19693: ST_TO_ADDR
// if s1 = 1 then
19694: LD_VAR 0 2
19698: PUSH
19699: LD_INT 1
19701: EQUAL
19702: IFFALSE 19722
// s2 := rand ( 2 , 4 ) else
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_INT 2
19711: PPUSH
19712: LD_INT 4
19714: PPUSH
19715: CALL_OW 12
19719: ST_TO_ADDR
19720: GO 19730
// s2 := 1 ;
19722: LD_ADDR_VAR 0 3
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19730: LD_ADDR_VAR 0 5
19734: PUSH
19735: LD_VAR 0 6
19739: PUSH
19740: LD_INT 1
19742: ARRAY
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 259
19753: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19754: LD_VAR 0 6
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: LD_VAR 0 2
19767: PPUSH
19768: LD_VAR 0 5
19772: PPUSH
19773: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19777: LD_VAR 0 6
19781: PUSH
19782: LD_INT 1
19784: ARRAY
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: LD_VAR 0 4
19795: PPUSH
19796: CALL_OW 237
// end ;
19800: PPOPN 6
19802: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19803: LD_EXP 26
19807: PUSH
19808: LD_EXP 73
19812: AND
19813: IFFALSE 19892
19815: GO 19817
19817: DISABLE
19818: LD_INT 0
19820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19821: LD_ADDR_VAR 0 1
19825: PUSH
19826: LD_INT 22
19828: PUSH
19829: LD_OWVAR 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PPUSH
19852: CALL_OW 69
19856: ST_TO_ADDR
// if not tmp then
19857: LD_VAR 0 1
19861: NOT
19862: IFFALSE 19866
// exit ;
19864: GO 19892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19866: LD_VAR 0 1
19870: PUSH
19871: LD_INT 1
19873: PPUSH
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 12
19883: ARRAY
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 234
// end ;
19892: PPOPN 1
19894: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19895: LD_EXP 26
19899: PUSH
19900: LD_EXP 74
19904: AND
19905: IFFALSE 20017
19907: GO 19909
19909: DISABLE
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19914: LD_ADDR_VAR 0 2
19918: PUSH
19919: LD_INT 22
19921: PUSH
19922: LD_OWVAR 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 27
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: LD_INT 26
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 30
19956: PUSH
19957: LD_INT 28
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: ST_TO_ADDR
// if not tmp then
19979: LD_VAR 0 2
19983: NOT
19984: IFFALSE 19988
// exit ;
19986: GO 20017
// for i in tmp do
19988: LD_ADDR_VAR 0 1
19992: PUSH
19993: LD_VAR 0 2
19997: PUSH
19998: FOR_IN
19999: IFFALSE 20015
// SetLives ( i , 1 ) ;
20001: LD_VAR 0 1
20005: PPUSH
20006: LD_INT 1
20008: PPUSH
20009: CALL_OW 234
20013: GO 19998
20015: POP
20016: POP
// end ;
20017: PPOPN 2
20019: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20020: LD_EXP 26
20024: PUSH
20025: LD_EXP 75
20029: AND
20030: IFFALSE 20304
20032: GO 20034
20034: DISABLE
20035: LD_INT 0
20037: PPUSH
20038: PPUSH
20039: PPUSH
// begin i := rand ( 1 , 7 ) ;
20040: LD_ADDR_VAR 0 1
20044: PUSH
20045: LD_INT 1
20047: PPUSH
20048: LD_INT 7
20050: PPUSH
20051: CALL_OW 12
20055: ST_TO_ADDR
// case i of 1 :
20056: LD_VAR 0 1
20060: PUSH
20061: LD_INT 1
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20079
20069: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20070: LD_STRING earthquake(getX(game), 0, 32)
20072: PPUSH
20073: CALL_OW 559
20077: GO 20304
20079: LD_INT 2
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20101
20087: POP
// begin ToLua ( displayStucuk(); ) ;
20088: LD_STRING displayStucuk();
20090: PPUSH
20091: CALL_OW 559
// ResetFog ;
20095: CALL_OW 335
// end ; 3 :
20099: GO 20304
20101: LD_INT 3
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20213
20109: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20110: LD_ADDR_VAR 0 2
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_OWVAR 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 25
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PPUSH
20141: CALL_OW 69
20145: ST_TO_ADDR
// if not tmp then
20146: LD_VAR 0 2
20150: NOT
20151: IFFALSE 20155
// exit ;
20153: GO 20304
// un := tmp [ rand ( 1 , tmp ) ] ;
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_VAR 0 2
20164: PUSH
20165: LD_INT 1
20167: PPUSH
20168: LD_VAR 0 2
20172: PPUSH
20173: CALL_OW 12
20177: ARRAY
20178: ST_TO_ADDR
// if Crawls ( un ) then
20179: LD_VAR 0 3
20183: PPUSH
20184: CALL_OW 318
20188: IFFALSE 20199
// ComWalk ( un ) ;
20190: LD_VAR 0 3
20194: PPUSH
20195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20199: LD_VAR 0 3
20203: PPUSH
20204: LD_INT 8
20206: PPUSH
20207: CALL_OW 336
// end ; 4 :
20211: GO 20304
20213: LD_INT 4
20215: DOUBLE
20216: EQUAL
20217: IFTRUE 20221
20219: GO 20282
20221: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 30
20241: PUSH
20242: LD_INT 29
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 69
20257: ST_TO_ADDR
// if not tmp then
20258: LD_VAR 0 2
20262: NOT
20263: IFFALSE 20267
// exit ;
20265: GO 20304
// DestroyUnit ( tmp [ 1 ] ) ;
20267: LD_VAR 0 2
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: CALL_OW 65
// end ; 5 .. 7 :
20280: GO 20304
20282: LD_INT 5
20284: DOUBLE
20285: GREATEREQUAL
20286: IFFALSE 20294
20288: LD_INT 7
20290: DOUBLE
20291: LESSEQUAL
20292: IFTRUE 20296
20294: GO 20303
20296: POP
// StreamSibBomb ; end ;
20297: CALL 16554 0 0
20301: GO 20304
20303: POP
// end ;
20304: PPOPN 3
20306: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20307: LD_EXP 26
20311: PUSH
20312: LD_EXP 76
20316: AND
20317: IFFALSE 20473
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
20326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 81
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 21
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 21
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// if not tmp then
20381: LD_VAR 0 2
20385: NOT
20386: IFFALSE 20390
// exit ;
20388: GO 20473
// p := 0 ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20398: LD_INT 35
20400: PPUSH
20401: CALL_OW 67
// p := p + 1 ;
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 1
20417: PLUS
20418: ST_TO_ADDR
// for i in tmp do
20419: LD_ADDR_VAR 0 1
20423: PUSH
20424: LD_VAR 0 2
20428: PUSH
20429: FOR_IN
20430: IFFALSE 20461
// if GetLives ( i ) < 1000 then
20432: LD_VAR 0 1
20436: PPUSH
20437: CALL_OW 256
20441: PUSH
20442: LD_INT 1000
20444: LESS
20445: IFFALSE 20459
// SetLives ( i , 1000 ) ;
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_INT 1000
20454: PPUSH
20455: CALL_OW 234
20459: GO 20429
20461: POP
20462: POP
// until p > 20 ;
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 20
20470: GREATER
20471: IFFALSE 20398
// end ;
20473: PPOPN 3
20475: END
// every 0 0$1 trigger StreamModeActive and sTime do
20476: LD_EXP 26
20480: PUSH
20481: LD_EXP 77
20485: AND
20486: IFFALSE 20521
20488: GO 20490
20490: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20491: LD_INT 28
20493: PPUSH
20494: LD_OWVAR 2
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20506: LD_INT 30
20508: PPUSH
20509: LD_OWVAR 2
20513: PPUSH
20514: LD_INT 2
20516: PPUSH
20517: CALL_OW 322
// end ;
20521: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20522: LD_EXP 26
20526: PUSH
20527: LD_EXP 78
20531: AND
20532: IFFALSE 20653
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20541: LD_ADDR_VAR 0 2
20545: PUSH
20546: LD_INT 22
20548: PUSH
20549: LD_OWVAR 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 21
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 23
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: PPUSH
20590: CALL_OW 69
20594: ST_TO_ADDR
// if not tmp then
20595: LD_VAR 0 2
20599: NOT
20600: IFFALSE 20604
// exit ;
20602: GO 20653
// for i in tmp do
20604: LD_ADDR_VAR 0 1
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: FOR_IN
20615: IFFALSE 20651
// begin if Crawls ( i ) then
20617: LD_VAR 0 1
20621: PPUSH
20622: CALL_OW 318
20626: IFFALSE 20637
// ComWalk ( i ) ;
20628: LD_VAR 0 1
20632: PPUSH
20633: CALL_OW 138
// SetClass ( i , 2 ) ;
20637: LD_VAR 0 1
20641: PPUSH
20642: LD_INT 2
20644: PPUSH
20645: CALL_OW 336
// end ;
20649: GO 20614
20651: POP
20652: POP
// end ;
20653: PPOPN 2
20655: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20656: LD_EXP 26
20660: PUSH
20661: LD_EXP 79
20665: AND
20666: IFFALSE 20947
20668: GO 20670
20670: DISABLE
20671: LD_INT 0
20673: PPUSH
20674: PPUSH
20675: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20676: LD_OWVAR 2
20680: PPUSH
20681: LD_INT 9
20683: PPUSH
20684: LD_INT 1
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20694: LD_INT 9
20696: PPUSH
20697: LD_OWVAR 2
20701: PPUSH
20702: CALL_OW 343
// uc_side := 9 ;
20706: LD_ADDR_OWVAR 20
20710: PUSH
20711: LD_INT 9
20713: ST_TO_ADDR
// uc_nation := 2 ;
20714: LD_ADDR_OWVAR 21
20718: PUSH
20719: LD_INT 2
20721: ST_TO_ADDR
// hc_name := Dark Warrior ;
20722: LD_ADDR_OWVAR 26
20726: PUSH
20727: LD_STRING Dark Warrior
20729: ST_TO_ADDR
// hc_gallery :=  ;
20730: LD_ADDR_OWVAR 33
20734: PUSH
20735: LD_STRING 
20737: ST_TO_ADDR
// hc_noskilllimit := true ;
20738: LD_ADDR_OWVAR 76
20742: PUSH
20743: LD_INT 1
20745: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20746: LD_ADDR_OWVAR 31
20750: PUSH
20751: LD_INT 30
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 30
20759: PUSH
20760: LD_INT 30
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: ST_TO_ADDR
// un := CreateHuman ;
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: CALL_OW 44
20778: ST_TO_ADDR
// hc_noskilllimit := false ;
20779: LD_ADDR_OWVAR 76
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 51
// p := 0 ;
20799: LD_ADDR_VAR 0 2
20803: PUSH
20804: LD_INT 0
20806: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20807: LD_INT 35
20809: PPUSH
20810: CALL_OW 67
// p := p + 1 ;
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_VAR 0 2
20823: PUSH
20824: LD_INT 1
20826: PLUS
20827: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20828: LD_VAR 0 3
20832: PPUSH
20833: CALL_OW 256
20837: PUSH
20838: LD_INT 1000
20840: LESS
20841: IFFALSE 20855
// SetLives ( un , 1000 ) ;
20843: LD_VAR 0 3
20847: PPUSH
20848: LD_INT 1000
20850: PPUSH
20851: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20855: LD_VAR 0 3
20859: PPUSH
20860: LD_INT 81
20862: PUSH
20863: LD_OWVAR 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 91
20874: PUSH
20875: LD_VAR 0 3
20879: PUSH
20880: LD_INT 30
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: PPUSH
20897: LD_VAR 0 3
20901: PPUSH
20902: CALL_OW 74
20906: PPUSH
20907: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20911: LD_VAR 0 2
20915: PUSH
20916: LD_INT 60
20918: GREATER
20919: PUSH
20920: LD_VAR 0 3
20924: PPUSH
20925: CALL_OW 301
20929: OR
20930: IFFALSE 20807
// if un then
20932: LD_VAR 0 3
20936: IFFALSE 20947
// RemoveUnit ( un ) ;
20938: LD_VAR 0 3
20942: PPUSH
20943: CALL_OW 64
// end ; end_of_file end_of_file
20947: PPOPN 3
20949: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20956: LD_VAR 0 1
20960: PPUSH
20961: CALL_OW 264
20965: PUSH
20966: LD_EXP 84
20970: EQUAL
20971: IFFALSE 21043
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20973: LD_INT 68
20975: PPUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 255
20985: PPUSH
20986: CALL_OW 321
20990: PUSH
20991: LD_INT 2
20993: EQUAL
20994: IFFALSE 21006
// eff := 70 else
20996: LD_ADDR_VAR 0 4
21000: PUSH
21001: LD_INT 70
21003: ST_TO_ADDR
21004: GO 21014
// eff := 30 ;
21006: LD_ADDR_VAR 0 4
21010: PUSH
21011: LD_INT 30
21013: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 250
21023: PPUSH
21024: LD_VAR 0 1
21028: PPUSH
21029: CALL_OW 251
21033: PPUSH
21034: LD_VAR 0 4
21038: PPUSH
21039: CALL_OW 495
// end ; end ;
21043: LD_VAR 0 2
21047: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21048: LD_INT 0
21050: PPUSH
// end ;
21051: LD_VAR 0 4
21055: RET
// export function SOS_Command ( cmd ) ; begin
21056: LD_INT 0
21058: PPUSH
// end ;
21059: LD_VAR 0 2
21063: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21064: LD_VAR 0 1
21068: PUSH
21069: LD_INT 255
21071: EQUAL
21072: PUSH
21073: LD_VAR 0 2
21077: PPUSH
21078: CALL_OW 264
21082: PUSH
21083: LD_INT 14
21085: PUSH
21086: LD_INT 53
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: IN
21093: AND
21094: PUSH
21095: LD_VAR 0 4
21099: PPUSH
21100: LD_VAR 0 5
21104: PPUSH
21105: CALL_OW 488
21109: AND
21110: IFFALSE 21134
// CutTreeXYR ( unit , x , y , 12 ) ;
21112: LD_VAR 0 2
21116: PPUSH
21117: LD_VAR 0 4
21121: PPUSH
21122: LD_VAR 0 5
21126: PPUSH
21127: LD_INT 12
21129: PPUSH
21130: CALL 21137 0 4
// end ;
21134: PPOPN 5
21136: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21148: LD_VAR 0 1
21152: NOT
21153: PUSH
21154: LD_VAR 0 2
21158: PPUSH
21159: LD_VAR 0 3
21163: PPUSH
21164: CALL_OW 488
21168: NOT
21169: OR
21170: PUSH
21171: LD_VAR 0 4
21175: NOT
21176: OR
21177: IFFALSE 21181
// exit ;
21179: GO 21521
// list := [ ] ;
21181: LD_ADDR_VAR 0 13
21185: PUSH
21186: EMPTY
21187: ST_TO_ADDR
// if x - r < 0 then
21188: LD_VAR 0 2
21192: PUSH
21193: LD_VAR 0 4
21197: MINUS
21198: PUSH
21199: LD_INT 0
21201: LESS
21202: IFFALSE 21214
// min_x := 0 else
21204: LD_ADDR_VAR 0 7
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
21212: GO 21230
// min_x := x - r ;
21214: LD_ADDR_VAR 0 7
21218: PUSH
21219: LD_VAR 0 2
21223: PUSH
21224: LD_VAR 0 4
21228: MINUS
21229: ST_TO_ADDR
// if y - r < 0 then
21230: LD_VAR 0 3
21234: PUSH
21235: LD_VAR 0 4
21239: MINUS
21240: PUSH
21241: LD_INT 0
21243: LESS
21244: IFFALSE 21256
// min_y := 0 else
21246: LD_ADDR_VAR 0 8
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
21254: GO 21272
// min_y := y - r ;
21256: LD_ADDR_VAR 0 8
21260: PUSH
21261: LD_VAR 0 3
21265: PUSH
21266: LD_VAR 0 4
21270: MINUS
21271: ST_TO_ADDR
// max_x := x + r ;
21272: LD_ADDR_VAR 0 9
21276: PUSH
21277: LD_VAR 0 2
21281: PUSH
21282: LD_VAR 0 4
21286: PLUS
21287: ST_TO_ADDR
// max_y := y + r ;
21288: LD_ADDR_VAR 0 10
21292: PUSH
21293: LD_VAR 0 3
21297: PUSH
21298: LD_VAR 0 4
21302: PLUS
21303: ST_TO_ADDR
// for _x = min_x to max_x do
21304: LD_ADDR_VAR 0 11
21308: PUSH
21309: DOUBLE
21310: LD_VAR 0 7
21314: DEC
21315: ST_TO_ADDR
21316: LD_VAR 0 9
21320: PUSH
21321: FOR_TO
21322: IFFALSE 21439
// for _y = min_y to max_y do
21324: LD_ADDR_VAR 0 12
21328: PUSH
21329: DOUBLE
21330: LD_VAR 0 8
21334: DEC
21335: ST_TO_ADDR
21336: LD_VAR 0 10
21340: PUSH
21341: FOR_TO
21342: IFFALSE 21435
// begin if not ValidHex ( _x , _y ) then
21344: LD_VAR 0 11
21348: PPUSH
21349: LD_VAR 0 12
21353: PPUSH
21354: CALL_OW 488
21358: NOT
21359: IFFALSE 21363
// continue ;
21361: GO 21341
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21363: LD_VAR 0 11
21367: PPUSH
21368: LD_VAR 0 12
21372: PPUSH
21373: CALL_OW 351
21377: PUSH
21378: LD_VAR 0 11
21382: PPUSH
21383: LD_VAR 0 12
21387: PPUSH
21388: CALL_OW 554
21392: AND
21393: IFFALSE 21433
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21395: LD_ADDR_VAR 0 13
21399: PUSH
21400: LD_VAR 0 13
21404: PPUSH
21405: LD_VAR 0 13
21409: PUSH
21410: LD_INT 1
21412: PLUS
21413: PPUSH
21414: LD_VAR 0 11
21418: PUSH
21419: LD_VAR 0 12
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PPUSH
21428: CALL_OW 2
21432: ST_TO_ADDR
// end ;
21433: GO 21341
21435: POP
21436: POP
21437: GO 21321
21439: POP
21440: POP
// if not list then
21441: LD_VAR 0 13
21445: NOT
21446: IFFALSE 21450
// exit ;
21448: GO 21521
// for i in list do
21450: LD_ADDR_VAR 0 6
21454: PUSH
21455: LD_VAR 0 13
21459: PUSH
21460: FOR_IN
21461: IFFALSE 21519
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21463: LD_VAR 0 1
21467: PPUSH
21468: LD_STRING M
21470: PUSH
21471: LD_VAR 0 6
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: PUSH
21480: LD_VAR 0 6
21484: PUSH
21485: LD_INT 2
21487: ARRAY
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: PPUSH
21513: CALL_OW 447
21517: GO 21460
21519: POP
21520: POP
// end ; end_of_file
21521: LD_VAR 0 5
21525: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21526: GO 21528
21528: DISABLE
// begin ru_radar := 98 ;
21529: LD_ADDR_EXP 80
21533: PUSH
21534: LD_INT 98
21536: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21537: LD_ADDR_EXP 81
21541: PUSH
21542: LD_INT 89
21544: ST_TO_ADDR
// us_hack := 99 ;
21545: LD_ADDR_EXP 82
21549: PUSH
21550: LD_INT 99
21552: ST_TO_ADDR
// us_artillery := 97 ;
21553: LD_ADDR_EXP 83
21557: PUSH
21558: LD_INT 97
21560: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21561: LD_ADDR_EXP 84
21565: PUSH
21566: LD_INT 91
21568: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21569: LD_ADDR_EXP 85
21573: PUSH
21574: LD_INT 92
21576: ST_TO_ADDR
// tech_Artillery := 80 ;
21577: LD_ADDR_EXP 86
21581: PUSH
21582: LD_INT 80
21584: ST_TO_ADDR
// tech_RadMat := 81 ;
21585: LD_ADDR_EXP 87
21589: PUSH
21590: LD_INT 81
21592: ST_TO_ADDR
// tech_BasicTools := 82 ;
21593: LD_ADDR_EXP 88
21597: PUSH
21598: LD_INT 82
21600: ST_TO_ADDR
// tech_Cargo := 83 ;
21601: LD_ADDR_EXP 89
21605: PUSH
21606: LD_INT 83
21608: ST_TO_ADDR
// tech_Track := 84 ;
21609: LD_ADDR_EXP 90
21613: PUSH
21614: LD_INT 84
21616: ST_TO_ADDR
// tech_Crane := 85 ;
21617: LD_ADDR_EXP 91
21621: PUSH
21622: LD_INT 85
21624: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21625: LD_ADDR_EXP 92
21629: PUSH
21630: LD_INT 86
21632: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21633: LD_ADDR_EXP 93
21637: PUSH
21638: LD_INT 87
21640: ST_TO_ADDR
// end ;
21641: END
