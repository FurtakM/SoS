// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 9
  34: PPUSH
  35: LD_INT 8
  37: PPUSH
  38: CALL 71 0 9
// InitVariables ;
  42: CALL 55 0 0
// PrepareHeike ;
  46: CALL 749 0 0
// Action ;
  50: CALL 814 0 0
// end ;
  54: END
// export missionStarted ; function InitVariables ; begin
  55: LD_INT 0
  57: PPUSH
// missionStarted := false ;
  58: LD_ADDR_EXP 1
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// end ; end_of_file
  66: LD_VAR 0 1
  70: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
  71: LD_INT 0
  73: PPUSH
  74: PPUSH
  75: PPUSH
// uc_side = 0 ;
  76: LD_ADDR_OWVAR 20
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// uc_nation = 0 ;
  84: LD_ADDR_OWVAR 21
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// InitHc ;
  92: CALL_OW 19
// InitVc ;
  96: CALL_OW 20
// if mastodonts then
 100: LD_VAR 0 6
 104: IFFALSE 171
// for i = 1 to mastodonts do
 106: LD_ADDR_VAR 0 11
 110: PUSH
 111: DOUBLE
 112: LD_INT 1
 114: DEC
 115: ST_TO_ADDR
 116: LD_VAR 0 6
 120: PUSH
 121: FOR_TO
 122: IFFALSE 169
// begin vc_chassis := 31 ;
 124: LD_ADDR_OWVAR 37
 128: PUSH
 129: LD_INT 31
 131: ST_TO_ADDR
// vc_control := control_rider ;
 132: LD_ADDR_OWVAR 38
 136: PUSH
 137: LD_INT 4
 139: ST_TO_ADDR
// animal := CreateVehicle ;
 140: LD_ADDR_VAR 0 12
 144: PUSH
 145: CALL_OW 45
 149: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 150: LD_VAR 0 12
 154: PPUSH
 155: LD_VAR 0 8
 159: PPUSH
 160: LD_INT 0
 162: PPUSH
 163: CALL_OW 49
// end ;
 167: GO 121
 169: POP
 170: POP
// if horses then
 171: LD_VAR 0 5
 175: IFFALSE 242
// for i = 1 to horses do
 177: LD_ADDR_VAR 0 11
 181: PUSH
 182: DOUBLE
 183: LD_INT 1
 185: DEC
 186: ST_TO_ADDR
 187: LD_VAR 0 5
 191: PUSH
 192: FOR_TO
 193: IFFALSE 240
// begin hc_class := 21 ;
 195: LD_ADDR_OWVAR 28
 199: PUSH
 200: LD_INT 21
 202: ST_TO_ADDR
// hc_gallery :=  ;
 203: LD_ADDR_OWVAR 33
 207: PUSH
 208: LD_STRING 
 210: ST_TO_ADDR
// animal := CreateHuman ;
 211: LD_ADDR_VAR 0 12
 215: PUSH
 216: CALL_OW 44
 220: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 221: LD_VAR 0 12
 225: PPUSH
 226: LD_VAR 0 8
 230: PPUSH
 231: LD_INT 0
 233: PPUSH
 234: CALL_OW 49
// end ;
 238: GO 192
 240: POP
 241: POP
// if birds then
 242: LD_VAR 0 1
 246: IFFALSE 313
// for i = 1 to birds do
 248: LD_ADDR_VAR 0 11
 252: PUSH
 253: DOUBLE
 254: LD_INT 1
 256: DEC
 257: ST_TO_ADDR
 258: LD_VAR 0 1
 262: PUSH
 263: FOR_TO
 264: IFFALSE 311
// begin hc_class = 18 ;
 266: LD_ADDR_OWVAR 28
 270: PUSH
 271: LD_INT 18
 273: ST_TO_ADDR
// hc_gallery =  ;
 274: LD_ADDR_OWVAR 33
 278: PUSH
 279: LD_STRING 
 281: ST_TO_ADDR
// animal := CreateHuman ;
 282: LD_ADDR_VAR 0 12
 286: PUSH
 287: CALL_OW 44
 291: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 292: LD_VAR 0 12
 296: PPUSH
 297: LD_VAR 0 8
 301: PPUSH
 302: LD_INT 0
 304: PPUSH
 305: CALL_OW 49
// end ;
 309: GO 263
 311: POP
 312: POP
// if tigers then
 313: LD_VAR 0 2
 317: IFFALSE 401
// for i = 1 to tigers do
 319: LD_ADDR_VAR 0 11
 323: PUSH
 324: DOUBLE
 325: LD_INT 1
 327: DEC
 328: ST_TO_ADDR
 329: LD_VAR 0 2
 333: PUSH
 334: FOR_TO
 335: IFFALSE 399
// begin hc_class = class_tiger ;
 337: LD_ADDR_OWVAR 28
 341: PUSH
 342: LD_INT 14
 344: ST_TO_ADDR
// hc_gallery =  ;
 345: LD_ADDR_OWVAR 33
 349: PUSH
 350: LD_STRING 
 352: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 353: LD_ADDR_OWVAR 35
 357: PUSH
 358: LD_INT 7
 360: NEG
 361: PPUSH
 362: LD_INT 7
 364: PPUSH
 365: CALL_OW 12
 369: ST_TO_ADDR
// animal := CreateHuman ;
 370: LD_ADDR_VAR 0 12
 374: PUSH
 375: CALL_OW 44
 379: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 380: LD_VAR 0 12
 384: PPUSH
 385: LD_VAR 0 8
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 49
// end ;
 397: GO 334
 399: POP
 400: POP
// if apemans then
 401: LD_VAR 0 3
 405: IFFALSE 528
// for i = 1 to apemans do
 407: LD_ADDR_VAR 0 11
 411: PUSH
 412: DOUBLE
 413: LD_INT 1
 415: DEC
 416: ST_TO_ADDR
 417: LD_VAR 0 3
 421: PUSH
 422: FOR_TO
 423: IFFALSE 526
// begin hc_class = class_apeman ;
 425: LD_ADDR_OWVAR 28
 429: PUSH
 430: LD_INT 12
 432: ST_TO_ADDR
// hc_gallery =  ;
 433: LD_ADDR_OWVAR 33
 437: PUSH
 438: LD_STRING 
 440: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 441: LD_ADDR_OWVAR 35
 445: PUSH
 446: LD_INT 5
 448: NEG
 449: PPUSH
 450: LD_INT 5
 452: PPUSH
 453: CALL_OW 12
 457: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 458: LD_ADDR_OWVAR 31
 462: PUSH
 463: LD_INT 1
 465: PPUSH
 466: LD_INT 3
 468: PPUSH
 469: CALL_OW 12
 473: PUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_INT 3
 479: PPUSH
 480: CALL_OW 12
 484: PUSH
 485: LD_INT 0
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: ST_TO_ADDR
// animal := CreateHuman ;
 497: LD_ADDR_VAR 0 12
 501: PUSH
 502: CALL_OW 44
 506: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 507: LD_VAR 0 12
 511: PPUSH
 512: LD_VAR 0 8
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 422
 526: POP
 527: POP
// if enchidnas then
 528: LD_VAR 0 4
 532: IFFALSE 599
// for i = 1 to enchidnas do
 534: LD_ADDR_VAR 0 11
 538: PUSH
 539: DOUBLE
 540: LD_INT 1
 542: DEC
 543: ST_TO_ADDR
 544: LD_VAR 0 4
 548: PUSH
 549: FOR_TO
 550: IFFALSE 597
// begin hc_class = 13 ;
 552: LD_ADDR_OWVAR 28
 556: PUSH
 557: LD_INT 13
 559: ST_TO_ADDR
// hc_gallery =  ;
 560: LD_ADDR_OWVAR 33
 564: PUSH
 565: LD_STRING 
 567: ST_TO_ADDR
// animal := CreateHuman ;
 568: LD_ADDR_VAR 0 12
 572: PUSH
 573: CALL_OW 44
 577: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 578: LD_VAR 0 12
 582: PPUSH
 583: LD_VAR 0 8
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL_OW 49
// end ;
 595: GO 549
 597: POP
 598: POP
// if fishes then
 599: LD_VAR 0 7
 603: IFFALSE 670
// for i = 1 to fishes do
 605: LD_ADDR_VAR 0 11
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_VAR 0 7
 619: PUSH
 620: FOR_TO
 621: IFFALSE 668
// begin hc_class = 20 ;
 623: LD_ADDR_OWVAR 28
 627: PUSH
 628: LD_INT 20
 630: ST_TO_ADDR
// hc_gallery =  ;
 631: LD_ADDR_OWVAR 33
 635: PUSH
 636: LD_STRING 
 638: ST_TO_ADDR
// animal := CreateHuman ;
 639: LD_ADDR_VAR 0 12
 643: PUSH
 644: CALL_OW 44
 648: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 649: LD_VAR 0 12
 653: PPUSH
 654: LD_VAR 0 9
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 620
 668: POP
 669: POP
// end ;
 670: LD_VAR 0 10
 674: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 675: LD_INT 0
 677: PPUSH
 678: PPUSH
 679: PPUSH
// if not observer or not unit then
 680: LD_VAR 0 1
 684: NOT
 685: PUSH
 686: LD_VAR 0 2
 690: NOT
 691: OR
 692: IFFALSE 696
// exit ;
 694: GO 744
// if not See ( GetSide ( observer ) , unit ) then
 696: LD_VAR 0 1
 700: PPUSH
 701: CALL_OW 255
 705: PPUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: CALL_OW 292
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 744
// result := GetDistUnits ( observer , unit ) < 12 ;
 720: LD_ADDR_VAR 0 3
 724: PUSH
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_VAR 0 2
 734: PPUSH
 735: CALL_OW 296
 739: PUSH
 740: LD_INT 12
 742: LESS
 743: ST_TO_ADDR
// end ; end_of_file
 744: LD_VAR 0 3
 748: RET
// export Heike ; export function PrepareHeike ; begin
 749: LD_INT 0
 751: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 752: LD_INT 66
 754: PPUSH
 755: LD_INT 26
 757: PPUSH
 758: CALL_OW 86
// uc_side := 2 ;
 762: LD_ADDR_OWVAR 20
 766: PUSH
 767: LD_INT 2
 769: ST_TO_ADDR
// uc_nation := 2 ;
 770: LD_ADDR_OWVAR 21
 774: PUSH
 775: LD_INT 2
 777: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 778: LD_ADDR_EXP 2
 782: PUSH
 783: LD_STRING Heike
 785: PPUSH
 786: CALL_OW 25
 790: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 791: LD_EXP 2
 795: PPUSH
 796: LD_INT 66
 798: PPUSH
 799: LD_INT 26
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 48
// end ; end_of_file end_of_file end_of_file
 809: LD_VAR 0 1
 813: RET
// export function Action ; begin
 814: LD_INT 0
 816: PPUSH
// InGameOn ;
 817: CALL_OW 8
// wait ( 0 0$4 ) ;
 821: LD_INT 140
 823: PPUSH
 824: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_STRING DH-start-1
 835: PPUSH
 836: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
 840: LD_EXP 2
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 29
 850: PPUSH
 851: CALL_OW 111
// wait ( 0 0$4 ) ;
 855: LD_INT 140
 857: PPUSH
 858: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
 862: LD_EXP 2
 866: PPUSH
 867: LD_INT 71
 869: PPUSH
 870: LD_INT 33
 872: PPUSH
 873: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
 877: LD_EXP 2
 881: PPUSH
 882: LD_INT 71
 884: PPUSH
 885: LD_INT 34
 887: PPUSH
 888: CALL_OW 178
// wait ( 0 0$4 ) ;
 892: LD_INT 140
 894: PPUSH
 895: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
 899: LD_EXP 2
 903: PPUSH
 904: LD_STRING DH-start-2
 906: PPUSH
 907: CALL_OW 88
// wait ( 0 0$4 ) ;
 911: LD_INT 140
 913: PPUSH
 914: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
 918: LD_EXP 2
 922: PPUSH
 923: LD_INT 65
 925: PPUSH
 926: LD_INT 26
 928: PPUSH
 929: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_STRING DH-start-3
 940: PPUSH
 941: CALL_OW 88
// InGameOff ;
 945: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
 949: LD_STRING O1_cont
 951: PPUSH
 952: CALL_OW 337
// SaveForQuickRestart ;
 956: CALL_OW 22
// missionStarted := true ;
 960: LD_ADDR_EXP 1
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// end ;
 968: LD_VAR 0 1
 972: RET
