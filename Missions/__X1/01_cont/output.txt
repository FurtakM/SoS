// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5338
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5338
// if meetJohnny then
5306: LD_EXP 3
5310: IFFALSE 5326
// Say ( Heike , DH-dogtag-found ) else
5312: LD_EXP 16
5316: PPUSH
5317: LD_STRING DH-dogtag-found
5319: PPUSH
5320: CALL_OW 88
5324: GO 5338
// Say ( Heike , DH-dogtag-found-no-american ) ;
5326: LD_EXP 16
5330: PPUSH
5331: LD_STRING DH-dogtag-found-no-american
5333: PPUSH
5334: CALL_OW 88
// end ;
5338: PPOPN 1
5340: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5341: LD_EXP 8
5345: NOT
5346: PUSH
5347: LD_EXP 7
5351: NOT
5352: AND
5353: PUSH
5354: LD_INT 5
5356: PPUSH
5357: LD_EXP 16
5361: PPUSH
5362: CALL_OW 292
5366: AND
5367: PUSH
5368: LD_EXP 16
5372: PPUSH
5373: LD_EXP 17
5377: PPUSH
5378: CALL_OW 296
5382: PUSH
5383: LD_INT 8
5385: LESS
5386: AND
5387: IFFALSE 5779
5389: GO 5391
5391: DISABLE
// begin olafSpotted := true ;
5392: LD_ADDR_EXP 8
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if HasTask ( Olaf ) then
5400: LD_EXP 17
5404: PPUSH
5405: CALL_OW 314
5409: IFFALSE 5420
// ComStop ( Olaf ) ;
5411: LD_EXP 17
5415: PPUSH
5416: CALL_OW 141
// InGameOn ;
5420: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 296
5438: PUSH
5439: LD_INT 8
5441: GREATER
5442: IFFALSE 5458
// ComMoveUnit ( Olaf , Heike ) ;
5444: LD_EXP 17
5448: PPUSH
5449: LD_EXP 16
5453: PPUSH
5454: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5458: LD_INT 35
5460: PPUSH
5461: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_EXP 16
5474: PPUSH
5475: CALL_OW 296
5479: PUSH
5480: LD_INT 8
5482: LESSEQUAL
5483: IFFALSE 5458
// ComTurnUnit ( Heike , Olaf ) ;
5485: LD_EXP 16
5489: PPUSH
5490: LD_EXP 17
5494: PPUSH
5495: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5499: LD_EXP 17
5503: PPUSH
5504: LD_EXP 16
5508: PPUSH
5509: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5513: LD_INT 18
5515: PPUSH
5516: CALL_OW 67
// DialogueOn ;
5520: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5524: LD_EXP 17
5528: PPUSH
5529: LD_STRING DO-olaf-1
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5536: LD_EXP 16
5540: PPUSH
5541: LD_STRING DH-olaf-1
5543: PPUSH
5544: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5548: LD_EXP 17
5552: PPUSH
5553: LD_STRING DO-olaf-2
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5560: LD_EXP 16
5564: PPUSH
5565: LD_STRING DH-olaf-2
5567: PPUSH
5568: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5572: LD_EXP 17
5576: PPUSH
5577: LD_STRING DO-olaf-3
5579: PPUSH
5580: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5584: LD_EXP 17
5588: PPUSH
5589: LD_STRING DO-olaf-4
5591: PPUSH
5592: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5596: LD_EXP 16
5600: PPUSH
5601: LD_STRING DH-olaf-4
5603: PPUSH
5604: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5608: LD_EXP 17
5612: PPUSH
5613: LD_STRING DO-olaf-5
5615: PPUSH
5616: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5620: LD_EXP 16
5624: PPUSH
5625: LD_STRING DH-olaf-5
5627: PPUSH
5628: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-6
5639: PPUSH
5640: CALL_OW 88
// if russianSpotted or johnnySaved then
5644: LD_EXP 9
5648: PUSH
5649: LD_EXP 4
5653: OR
5654: IFFALSE 5682
// begin Say ( Heike , DH-olaf-6a ) ;
5656: LD_EXP 16
5660: PPUSH
5661: LD_STRING DH-olaf-6a
5663: PPUSH
5664: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING DO-olaf-7a
5675: PPUSH
5676: CALL_OW 88
// end else
5680: GO 5706
// begin Say ( Heike , DH-olaf-6b ) ;
5682: LD_EXP 16
5686: PPUSH
5687: LD_STRING DH-olaf-6b
5689: PPUSH
5690: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5694: LD_EXP 17
5698: PPUSH
5699: LD_STRING DO-olaf-7b
5701: PPUSH
5702: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_STRING DO-olaf-8
5713: PPUSH
5714: CALL_OW 88
// DialogueOff ;
5718: CALL_OW 7
// InGameOff ;
5722: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5726: LD_STRING O3_camp_cont
5728: PPUSH
5729: CALL_OW 337
// if not johnnySaved then
5733: LD_EXP 4
5737: NOT
5738: IFFALSE 5749
// KillUnit ( Johnny ) ;
5740: LD_EXP 25
5744: PPUSH
5745: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5749: LD_EXP 17
5753: PPUSH
5754: LD_INT 52
5756: PPUSH
5757: LD_INT 90
5759: PPUSH
5760: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5764: LD_EXP 17
5768: PPUSH
5769: LD_INT 53
5771: PPUSH
5772: LD_INT 89
5774: PPUSH
5775: CALL_OW 178
// end ;
5779: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5780: LD_EXP 8
5784: NOT
5785: PUSH
5786: LD_EXP 16
5790: PPUSH
5791: LD_EXP 18
5795: PPUSH
5796: CALL_OW 296
5800: PUSH
5801: LD_INT 36
5803: LESS
5804: AND
5805: IFFALSE 5825
5807: GO 5809
5809: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5810: LD_EXP 17
5814: PPUSH
5815: LD_INT 39
5817: PPUSH
5818: LD_INT 71
5820: PPUSH
5821: CALL_OW 111
5825: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5826: LD_EXP 7
5830: NOT
5831: PUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_EXP 19
5839: PPUSH
5840: CALL_OW 292
5844: PUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_EXP 18
5852: PPUSH
5853: CALL_OW 292
5857: OR
5858: AND
5859: IFFALSE 7180
5861: GO 5863
5863: DISABLE
5864: LD_INT 0
5866: PPUSH
5867: PPUSH
5868: PPUSH
// begin if not johnnySaved then
5869: LD_EXP 4
5873: NOT
5874: IFFALSE 5885
// KillUnit ( Johnny ) ;
5876: LD_EXP 25
5880: PPUSH
5881: CALL_OW 66
// mercenariesSpotted := true ;
5885: LD_ADDR_EXP 7
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5893: LD_STRING O4_camp_cont
5895: PPUSH
5896: CALL_OW 337
// InGameOn ;
5900: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5904: LD_INT 53
5906: PPUSH
5907: LD_INT 89
5909: PPUSH
5910: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5914: LD_INT 53
5916: PPUSH
5917: LD_INT 89
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: LD_INT 8
5925: NEG
5926: PPUSH
5927: CALL_OW 330
// if olafSpotted then
5931: LD_EXP 8
5935: IFFALSE 6053
// begin AddComTurnUnit ( Olaf , Heike ) ;
5937: LD_EXP 17
5941: PPUSH
5942: LD_EXP 16
5946: PPUSH
5947: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5951: LD_EXP 16
5955: PPUSH
5956: LD_INT 51
5958: PPUSH
5959: LD_INT 86
5961: PPUSH
5962: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5966: LD_EXP 16
5970: PPUSH
5971: LD_EXP 17
5975: PPUSH
5976: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-1
5987: PPUSH
5988: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1
6034: PPUSH
6035: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6039: LD_EXP 17
6043: PPUSH
6044: LD_STRING DO-camp-2
6046: PPUSH
6047: CALL_OW 88
// end else
6051: GO 6448
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6053: LD_EXP 16
6057: PPUSH
6058: LD_INT 51
6060: PPUSH
6061: LD_INT 86
6063: PPUSH
6064: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6068: LD_EXP 16
6072: PPUSH
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6082: LD_EXP 18
6086: PUSH
6087: LD_EXP 19
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: LD_EXP 16
6100: PPUSH
6101: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6105: LD_EXP 18
6109: PPUSH
6110: LD_STRING DG-camp-1a
6112: PPUSH
6113: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6117: LD_EXP 16
6121: PPUSH
6122: LD_STRING DH-camp-1a
6124: PPUSH
6125: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6129: LD_INT 1
6131: PPUSH
6132: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_EXP 17
6145: PPUSH
6146: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_STRING DM-camp-1a
6157: PPUSH
6158: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6162: LD_EXP 17
6166: PPUSH
6167: LD_INT 52
6169: PPUSH
6170: LD_INT 90
6172: PPUSH
6173: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6177: LD_EXP 19
6181: PPUSH
6182: LD_EXP 16
6186: PPUSH
6187: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6191: LD_EXP 18
6195: PPUSH
6196: LD_STRING DG-camp-2a
6198: PPUSH
6199: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6203: LD_EXP 16
6207: PPUSH
6208: LD_STRING DH-camp-2a
6210: PPUSH
6211: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6215: LD_EXP 19
6219: PPUSH
6220: LD_STRING DM-camp-2a
6222: PPUSH
6223: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6234: LD_EXP 17
6238: PPUSH
6239: LD_EXP 16
6243: PPUSH
6244: CALL_OW 296
6248: PUSH
6249: LD_INT 10
6251: LESS
6252: IFFALSE 6227
// AddComTurnUnit ( Olaf , Heike ) ;
6254: LD_EXP 17
6258: PPUSH
6259: LD_EXP 16
6263: PPUSH
6264: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6268: LD_EXP 19
6272: PPUSH
6273: LD_EXP 16
6277: PPUSH
6278: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6282: LD_EXP 17
6286: PPUSH
6287: LD_STRING DO-camp-2a
6289: PPUSH
6290: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6294: LD_EXP 16
6298: PPUSH
6299: LD_EXP 17
6303: PPUSH
6304: CALL_OW 119
// if russianSpotted then
6308: LD_EXP 9
6312: IFFALSE 6352
// begin Say ( Heike , DH-camp-2aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-2aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-2aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6338: LD_EXP 19
6342: PPUSH
6343: LD_STRING DM-camp-2aa
6345: PPUSH
6346: CALL_OW 88
// end else
6350: GO 6376
// begin Say ( Heike , DH-camp-2ab ) ;
6352: LD_EXP 16
6356: PPUSH
6357: LD_STRING DH-camp-2ab
6359: PPUSH
6360: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6364: LD_EXP 19
6368: PPUSH
6369: LD_STRING DM-camp-2ab
6371: PPUSH
6372: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6376: LD_EXP 16
6380: PPUSH
6381: LD_STRING DH-camp-3a
6383: PPUSH
6384: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6388: LD_EXP 17
6392: PPUSH
6393: LD_STRING DO-camp-3a
6395: PPUSH
6396: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6400: LD_EXP 18
6404: PPUSH
6405: LD_STRING DG-camp-3a
6407: PPUSH
6408: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6412: LD_EXP 16
6416: PPUSH
6417: LD_STRING DH-camp-4aa
6419: PPUSH
6420: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6424: LD_EXP 19
6428: PPUSH
6429: LD_STRING DM-camp-4aa
6431: PPUSH
6432: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6436: LD_EXP 17
6440: PPUSH
6441: LD_STRING DO-camp-4a
6443: PPUSH
6444: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6448: LD_EXP 17
6452: PPUSH
6453: LD_STRING DO-camp-3
6455: PPUSH
6456: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6460: LD_EXP 17
6464: PPUSH
6465: LD_STRING DO-camp-4
6467: PPUSH
6468: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6472: LD_EXP 18
6476: PPUSH
6477: LD_EXP 17
6481: PPUSH
6482: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6486: LD_EXP 18
6490: PPUSH
6491: LD_STRING DG-camp-4
6493: PPUSH
6494: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6498: LD_EXP 16
6502: PPUSH
6503: LD_EXP 18
6507: PPUSH
6508: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6512: LD_EXP 16
6516: PPUSH
6517: LD_STRING DH-camp-4
6519: PPUSH
6520: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6524: LD_EXP 19
6528: PUSH
6529: LD_EXP 17
6533: PUSH
6534: LD_EXP 18
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PPUSH
6544: LD_EXP 16
6548: PPUSH
6549: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6553: LD_EXP 18
6557: PPUSH
6558: LD_STRING DG-camp-5
6560: PPUSH
6561: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6565: LD_EXP 18
6569: PPUSH
6570: LD_STRING DG-camp-6
6572: PPUSH
6573: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6577: LD_EXP 16
6581: PPUSH
6582: LD_STRING DH-camp-6
6584: PPUSH
6585: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6589: LD_EXP 18
6593: PPUSH
6594: LD_STRING DG-camp-7
6596: PPUSH
6597: CALL_OW 88
// if DogTagFound then
6601: LD_EXP 6
6605: IFFALSE 6645
// begin Say ( Heike , DH-quest-1a ) ;
6607: LD_EXP 16
6611: PPUSH
6612: LD_STRING DH-quest-1a
6614: PPUSH
6615: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6619: LD_EXP 18
6623: PPUSH
6624: LD_STRING DG-quest-1a
6626: PPUSH
6627: CALL_OW 88
// mercenariesQuestDone := true ;
6631: LD_ADDR_EXP 11
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// InGameOff ;
6639: CALL_OW 9
// end else
6643: GO 6811
// begin Say ( Heike , DH-camp-7 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_STRING DH-camp-7
6652: PPUSH
6653: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6657: LD_EXP 16
6661: PPUSH
6662: CALL_OW 256
6666: PUSH
6667: LD_INT 1000
6669: LESS
6670: IFFALSE 6762
// begin Say ( Olaf , DO-heal-1 ) ;
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING DO-heal-1
6679: PPUSH
6680: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 51
6691: PPUSH
6692: LD_INT 88
6694: PPUSH
6695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6699: LD_INT 35
6701: PPUSH
6702: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6706: LD_EXP 16
6710: PPUSH
6711: LD_EXP 17
6715: PPUSH
6716: CALL_OW 296
6720: PUSH
6721: LD_INT 4
6723: LESS
6724: PUSH
6725: LD_EXP 16
6729: PPUSH
6730: LD_INT 51
6732: PPUSH
6733: LD_INT 88
6735: PPUSH
6736: CALL_OW 307
6740: OR
6741: IFFALSE 6699
// SetLives ( Heike , 1000 ) ;
6743: LD_EXP 16
6747: PPUSH
6748: LD_INT 1000
6750: PPUSH
6751: CALL_OW 234
// wait ( 0 0$2 ) ;
6755: LD_INT 70
6757: PPUSH
6758: CALL_OW 67
// end ; InGameOff ;
6762: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6766: LD_EXP 17
6770: PUSH
6771: LD_EXP 18
6775: PUSH
6776: LD_EXP 19
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: PPUSH
6786: LD_INT 53
6788: PPUSH
6789: LD_INT 89
6791: PPUSH
6792: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6796: LD_STRING O5_proof_cont
6798: PPUSH
6799: CALL_OW 337
// mercenariesQuestReady := true ;
6803: LD_ADDR_EXP 10
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6811: LD_EXP 10
6815: NOT
6816: IFFALSE 6820
// exit ;
6818: GO 7180
// wait ( 0 0$35 ) ;
6820: LD_INT 1225
6822: PPUSH
6823: CALL_OW 67
// driver := PreparePatrolTank ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: CALL 2821 0 0
6836: ST_TO_ADDR
// if not driver then
6837: LD_VAR 0 2
6841: NOT
6842: IFFALSE 6846
// exit ;
6844: GO 7180
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6846: LD_INT 2
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: LD_INT 2
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: CALL_OW 310
6876: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_INT 500
6884: PPUSH
6885: CALL_OW 234
// SetLives ( driver , 450 ) ;
6889: LD_VAR 0 2
6893: PPUSH
6894: LD_INT 450
6896: PPUSH
6897: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6901: LD_VAR 0 2
6905: PPUSH
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6923: LD_VAR 0 3
6927: PPUSH
6928: LD_INT 59
6930: PPUSH
6931: LD_INT 60
6933: PPUSH
6934: CALL_OW 307
6938: IFFALSE 6916
// if not See ( 1 , Heike ) then
6940: LD_INT 1
6942: PPUSH
6943: LD_EXP 16
6947: PPUSH
6948: CALL_OW 292
6952: NOT
6953: IFFALSE 7077
// begin if Difficulty < 3 then
6955: LD_OWVAR 67
6959: PUSH
6960: LD_INT 3
6962: LESS
6963: IFFALSE 6981
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6965: LD_INT 59
6967: PPUSH
6968: LD_INT 60
6970: PPUSH
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 6
6976: PPUSH
6977: CALL_OW 330
// ComExitVehicle ( driver ) ;
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 121
// wait ( 0 0$1 ) ;
6990: LD_INT 35
6992: PPUSH
6993: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_INT 58
7004: PPUSH
7005: LD_INT 54
7007: PPUSH
7008: CALL_OW 171
// wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_INT 57
7026: PPUSH
7027: LD_INT 53
7029: PPUSH
7030: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7034: LD_VAR 0 2
7038: PPUSH
7039: LD_INT 350
7041: PPUSH
7042: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7046: LD_VAR 0 2
7050: PPUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_INT 107
7067: PPUSH
7068: LD_INT 118
7070: PPUSH
7071: CALL_OW 171
// end else
7075: GO 7092
// begin ComMoveXY ( driver , 107 , 118 ) ;
7077: LD_VAR 0 2
7081: PPUSH
7082: LD_INT 107
7084: PPUSH
7085: LD_INT 118
7087: PPUSH
7088: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7099: LD_VAR 0 3
7103: PPUSH
7104: LD_INT 107
7106: PPUSH
7107: LD_INT 118
7109: PPUSH
7110: CALL_OW 307
7114: PUSH
7115: LD_VAR 0 2
7119: PPUSH
7120: CALL_OW 301
7124: OR
7125: IFFALSE 7092
// if IsDead ( driver [ 1 ] ) then
7127: LD_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: CALL_OW 301
7140: IFFALSE 7144
// exit ;
7142: GO 7180
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7144: LD_ADDR_VAR 0 1
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: PUSH
7164: FOR_IN
7165: IFFALSE 7178
// RemoveUnit ( i ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 64
7176: GO 7164
7178: POP
7179: POP
// end ;
7180: PPOPN 3
7182: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7183: LD_INT 10
7185: PPUSH
7186: LD_INT 22
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 21
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 70
7214: IFFALSE 7288
7216: GO 7218
7218: DISABLE
// begin InGameOn ;
7219: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7223: LD_EXP 17
7227: PUSH
7228: LD_EXP 19
7232: PUSH
7233: LD_EXP 18
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: LD_EXP 16
7247: PPUSH
7248: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7252: LD_EXP 19
7256: PPUSH
7257: LD_STRING DM-quest-1
7259: PPUSH
7260: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7264: LD_EXP 18
7268: PPUSH
7269: LD_STRING DG-quest-1
7271: PPUSH
7272: CALL_OW 88
// InGameOff ;
7276: CALL_OW 9
// mercenariesQuestDone := true ;
7280: LD_ADDR_EXP 11
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// end ;
7288: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7289: LD_EXP 16
7293: PPUSH
7294: LD_INT 10
7296: PPUSH
7297: CALL_OW 308
7301: PUSH
7302: LD_EXP 6
7306: AND
7307: PUSH
7308: LD_EXP 10
7312: AND
7313: PUSH
7314: LD_INT 10
7316: PPUSH
7317: LD_INT 22
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 70
7345: NOT
7346: AND
7347: IFFALSE 7519
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin InGameOn ;
7355: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7359: LD_EXP 17
7363: PUSH
7364: LD_EXP 19
7368: PUSH
7369: LD_EXP 18
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PPUSH
7379: LD_EXP 16
7383: PPUSH
7384: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7388: LD_EXP 16
7392: PPUSH
7393: LD_INT 54
7395: PPUSH
7396: LD_INT 86
7398: PPUSH
7399: CALL_OW 111
// p := p + 1 ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 1
7415: PLUS
7416: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// p := p + 1 ;
7424: LD_ADDR_VAR 0 1
7428: PUSH
7429: LD_VAR 0 1
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7438: LD_EXP 16
7442: PPUSH
7443: LD_EXP 18
7447: PPUSH
7448: CALL_OW 296
7452: PUSH
7453: LD_INT 4
7455: LESS
7456: PUSH
7457: LD_VAR 0 1
7461: PUSH
7462: LD_INT 5
7464: GREATER
7465: OR
7466: IFFALSE 7417
// Say ( Mike , DM-quest-1 ) ;
7468: LD_EXP 19
7472: PPUSH
7473: LD_STRING DM-quest-1
7475: PPUSH
7476: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7480: LD_EXP 18
7484: PPUSH
7485: LD_STRING DG-quest-1
7487: PPUSH
7488: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_INT 55
7499: PPUSH
7500: LD_INT 87
7502: PPUSH
7503: CALL_OW 111
// InGameOff ;
7507: CALL_OW 9
// mercenariesQuestDone := true ;
7511: LD_ADDR_EXP 11
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
// end ;
7519: PPOPN 1
7521: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7522: LD_EXP 16
7526: PUSH
7527: LD_INT 55
7529: PUSH
7530: EMPTY
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: IN
7538: IFFALSE 7578
7540: GO 7542
7542: DISABLE
// begin if Difficulty < 3 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 3
7550: LESS
7551: IFFALSE 7566
// RemoveSeeing ( 59 , 60 , 2 ) ;
7553: LD_INT 59
7555: PPUSH
7556: LD_INT 60
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7566: LD_EXP 16
7570: PPUSH
7571: LD_STRING DH-driver
7573: PPUSH
7574: CALL_OW 88
// end ;
7578: END
// every 0 0$1 trigger mercenariesQuestDone do
7579: LD_EXP 11
7583: IFFALSE 8071
7585: GO 7587
7587: DISABLE
// begin if mercenariesQuestReady then
7588: LD_EXP 10
7592: IFFALSE 7601
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7594: LD_STRING O5_proof_cont_out
7596: PPUSH
7597: CALL_OW 337
// InGameOn ;
7601: CALL_OW 8
// if IsInUnit ( Heike ) then
7605: LD_EXP 16
7609: PPUSH
7610: CALL_OW 310
7614: IFFALSE 7625
// ComExitVehicle ( Heike ) ;
7616: LD_EXP 16
7620: PPUSH
7621: CALL_OW 121
// wait ( 3 ) ;
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7632: LD_EXP 16
7636: PPUSH
7637: LD_EXP 18
7641: PPUSH
7642: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7646: LD_EXP 17
7650: PUSH
7651: LD_EXP 19
7655: PUSH
7656: LD_EXP 18
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: LD_EXP 16
7670: PPUSH
7671: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7675: LD_EXP 16
7679: PPUSH
7680: LD_STRING DH-quest-done-1
7682: PPUSH
7683: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7687: LD_EXP 19
7691: PPUSH
7692: LD_STRING DM-quest-done-1
7694: PPUSH
7695: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7699: LD_EXP 18
7703: PPUSH
7704: LD_STRING DG-quest-done-1
7706: PPUSH
7707: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7711: LD_EXP 16
7715: PPUSH
7716: LD_EXP 17
7720: PPUSH
7721: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7725: LD_EXP 16
7729: PPUSH
7730: LD_STRING DH-quest-done-2
7732: PPUSH
7733: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7737: LD_EXP 17
7741: PPUSH
7742: LD_STRING DO-quest-done-2
7744: PPUSH
7745: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7749: LD_EXP 17
7753: PPUSH
7754: LD_STRING DO-quest-done-3
7756: PPUSH
7757: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7761: LD_EXP 18
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: LD_INT 90
7771: PPUSH
7772: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7776: LD_EXP 18
7780: PPUSH
7781: LD_INT 50
7783: PPUSH
7784: LD_INT 89
7786: PPUSH
7787: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7791: LD_EXP 16
7795: PPUSH
7796: LD_EXP 18
7800: PPUSH
7801: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7805: LD_EXP 18
7809: PPUSH
7810: LD_STRING DG-quest-done-4
7812: PPUSH
7813: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7817: LD_EXP 18
7821: PPUSH
7822: LD_EXP 16
7826: PPUSH
7827: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7831: LD_EXP 16
7835: PPUSH
7836: CALL_OW 256
7840: PUSH
7841: LD_INT 1000
7843: LESS
7844: IFFALSE 7936
// begin Say ( Olaf , DO-heal-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING DO-heal-1
7853: PPUSH
7854: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 51
7865: PPUSH
7866: LD_INT 88
7868: PPUSH
7869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7873: LD_INT 35
7875: PPUSH
7876: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7880: LD_EXP 16
7884: PPUSH
7885: LD_EXP 17
7889: PPUSH
7890: CALL_OW 296
7894: PUSH
7895: LD_INT 4
7897: LESS
7898: PUSH
7899: LD_EXP 16
7903: PPUSH
7904: LD_INT 51
7906: PPUSH
7907: LD_INT 88
7909: PPUSH
7910: CALL_OW 307
7914: OR
7915: IFFALSE 7873
// SetLives ( Heike , 1000 ) ;
7917: LD_EXP 16
7921: PPUSH
7922: LD_INT 1000
7924: PPUSH
7925: CALL_OW 234
// wait ( 0 0$2 ) ;
7929: LD_INT 70
7931: PPUSH
7932: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7936: LD_EXP 16
7940: PPUSH
7941: LD_STRING DH-quest-done-4
7943: PPUSH
7944: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7948: LD_EXP 17
7952: PPUSH
7953: LD_STRING DO-quest-done-4
7955: PPUSH
7956: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7960: LD_EXP 16
7964: PPUSH
7965: LD_EXP 17
7969: PPUSH
7970: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7974: LD_EXP 16
7978: PPUSH
7979: LD_STRING DH-quest-done-5
7981: PPUSH
7982: CALL_OW 88
// InGameOff ;
7986: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7990: LD_STRING O6_end_cont
7992: PPUSH
7993: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7997: LD_EXP 18
8001: PPUSH
8002: LD_INT 2
8004: PPUSH
8005: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8009: LD_EXP 19
8013: PPUSH
8014: LD_INT 2
8016: PPUSH
8017: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8021: LD_INT 42
8023: PPUSH
8024: LD_INT 2
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8034: LD_EXP 17
8038: PPUSH
8039: LD_INT 53
8041: PPUSH
8042: LD_INT 89
8044: PPUSH
8045: CALL_OW 118
// lastObjectiveActive := true ;
8049: LD_ADDR_EXP 12
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8057: LD_INT 1
8059: PPUSH
8060: LD_INT 1
8062: PPUSH
8063: CALL_OW 424
// PreparePrison ;
8067: CALL 1164 0 0
// end ;
8071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8072: LD_INT 22
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 91
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 4
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 69
8104: IFFALSE 8262
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8113: LD_INT 245
8115: PUSH
8116: LD_INT 210
8118: PUSH
8119: LD_INT 210
8121: PUSH
8122: LD_INT 175
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: LD_OWVAR 67
8135: ARRAY
8136: PPUSH
8137: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 54
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: ST_TO_ADDR
// if not tmp then
8182: LD_VAR 0 2
8186: NOT
8187: IFFALSE 8191
// exit ;
8189: GO 8262
// for i in tmp do
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: LD_VAR 0 2
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8230
// begin ComExitBuilding ( i ) ;
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 121
8220: PPUSH
8221: LD_INT 22
8223: PPUSH
8224: CALL_OW 174
// end ;
8228: GO 8201
8230: POP
8231: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8232: LD_EXP 23
8236: PPUSH
8237: LD_INT 121
8239: PPUSH
8240: LD_INT 22
8242: PPUSH
8243: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8247: LD_EXP 24
8251: PPUSH
8252: LD_INT 121
8254: PPUSH
8255: LD_INT 22
8257: PPUSH
8258: CALL_OW 114
// end ;
8262: PPOPN 2
8264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8265: LD_INT 22
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 91
8277: PUSH
8278: LD_INT 8
8280: PUSH
8281: LD_INT 4
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: IFFALSE 8455
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
8305: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8306: LD_INT 315
8308: PUSH
8309: LD_INT 280
8311: PUSH
8312: LD_INT 245
8314: PUSH
8315: LD_INT 210
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_OWVAR 67
8328: ARRAY
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 54
8361: PUSH
8362: EMPTY
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 69
8374: ST_TO_ADDR
// if not tmp then
8375: LD_VAR 0 2
8379: NOT
8380: IFFALSE 8384
// exit ;
8382: GO 8455
// for i in tmp do
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_VAR 0 2
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8423
// begin ComExitBuilding ( i ) ;
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8406: LD_VAR 0 1
8410: PPUSH
8411: LD_INT 142
8413: PPUSH
8414: LD_INT 71
8416: PPUSH
8417: CALL_OW 174
// end ;
8421: GO 8394
8423: POP
8424: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8425: LD_EXP 23
8429: PPUSH
8430: LD_INT 142
8432: PPUSH
8433: LD_INT 71
8435: PPUSH
8436: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8440: LD_EXP 24
8444: PPUSH
8445: LD_INT 142
8447: PPUSH
8448: LD_INT 71
8450: PPUSH
8451: CALL_OW 114
// end ;
8455: PPOPN 2
8457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8458: LD_INT 22
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 58
8480: PUSH
8481: EMPTY
8482: LIST
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 24
8489: PUSH
8490: LD_INT 1000
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 91
8503: PUSH
8504: LD_EXP 17
8508: PUSH
8509: LD_INT 8
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 69
8528: PUSH
8529: LD_EXP 17
8533: PPUSH
8534: CALL_OW 302
8538: AND
8539: IFFALSE 8653
8541: GO 8543
8543: DISABLE
// begin enable ;
8544: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8545: LD_EXP 17
8549: PPUSH
8550: LD_INT 22
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 21
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 58
8572: PUSH
8573: EMPTY
8574: LIST
8575: PUSH
8576: LD_INT 3
8578: PUSH
8579: LD_INT 24
8581: PUSH
8582: LD_INT 1000
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_INT 91
8595: PUSH
8596: LD_EXP 17
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: PUSH
8621: LD_INT 1
8623: ARRAY
8624: PPUSH
8625: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8629: LD_EXP 17
8633: PPUSH
8634: LD_INT 52
8636: PPUSH
8637: LD_INT 90
8639: PPUSH
8640: CALL_OW 171
// AddComHold ( Olaf ) ;
8644: LD_EXP 17
8648: PPUSH
8649: CALL_OW 200
// end ;
8653: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 2
8661: PPUSH
8662: CALL_OW 302
8666: NOT
8667: AND
8668: PUSH
8669: LD_OWVAR 67
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: AND
8678: PUSH
8679: LD_EXP 13
8683: NOT
8684: AND
8685: IFFALSE 8702
8687: GO 8689
8689: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8690: LD_EXP 16
8694: PPUSH
8695: LD_STRING DH-prison-missing
8697: PPUSH
8698: CALL_OW 88
// end ;
8702: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8703: LD_EXP 12
8707: PUSH
8708: LD_INT 8
8710: PPUSH
8711: CALL_OW 302
8715: NOT
8716: AND
8717: PUSH
8718: LD_OWVAR 67
8722: PUSH
8723: LD_INT 1
8725: GREATER
8726: AND
8727: PUSH
8728: LD_EXP 13
8732: NOT
8733: AND
8734: IFFALSE 8751
8736: GO 8738
8738: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8739: LD_EXP 16
8743: PPUSH
8744: LD_STRING DH-prison-missing
8746: PPUSH
8747: CALL_OW 88
// end ;
8751: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8752: LD_EXP 12
8756: PUSH
8757: LD_INT 3
8759: PPUSH
8760: CALL_OW 302
8764: NOT
8765: AND
8766: PUSH
8767: LD_EXP 13
8771: NOT
8772: AND
8773: IFFALSE 8790
8775: GO 8777
8777: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8778: LD_EXP 16
8782: PPUSH
8783: LD_STRING DH-prison-missing-a
8785: PPUSH
8786: CALL_OW 88
// end ;
8790: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8791: LD_EXP 12
8795: PUSH
8796: LD_INT 10
8798: PPUSH
8799: CALL_OW 302
8803: NOT
8804: AND
8805: PUSH
8806: LD_EXP 13
8810: NOT
8811: AND
8812: IFFALSE 8829
8814: GO 8816
8816: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8817: LD_EXP 16
8821: PPUSH
8822: LD_STRING DH-prison-missing-a
8824: PPUSH
8825: CALL_OW 88
// end ;
8829: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8830: LD_EXP 13
8834: NOT
8835: PUSH
8836: LD_EXP 12
8840: AND
8841: PUSH
8842: LD_INT 2
8844: PPUSH
8845: LD_EXP 20
8849: PPUSH
8850: CALL_OW 292
8854: AND
8855: IFFALSE 9000
8857: GO 8859
8859: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_EXP 16
8869: PPUSH
8870: CALL_OW 119
// DialogueOn ;
8874: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8878: LD_EXP 20
8882: PPUSH
8883: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8887: LD_EXP 20
8891: PPUSH
8892: LD_STRING DK-prison-found
8894: PPUSH
8895: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8899: LD_EXP 16
8903: PPUSH
8904: LD_STRING DH-prison-found
8906: PPUSH
8907: CALL_OW 88
// DialogueOff ;
8911: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8915: LD_EXP 20
8919: PPUSH
8920: LD_INT 2
8922: PPUSH
8923: CALL_OW 235
// prisonFound := true ;
8927: LD_ADDR_EXP 13
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8935: LD_STRING O6_prison_out
8937: PPUSH
8938: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
8942: LD_EXP 23
8946: PPUSH
8947: LD_EXP 16
8951: PPUSH
8952: CALL_OW 250
8956: PPUSH
8957: LD_EXP 16
8961: PPUSH
8962: CALL_OW 251
8966: PPUSH
8967: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
8971: LD_EXP 24
8975: PPUSH
8976: LD_EXP 16
8980: PPUSH
8981: CALL_OW 250
8985: PPUSH
8986: LD_EXP 16
8990: PPUSH
8991: CALL_OW 251
8995: PPUSH
8996: CALL_OW 114
// end ;
9000: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9001: LD_EXP 16
9005: PPUSH
9006: CALL_OW 256
9010: PUSH
9011: LD_INT 500
9013: LESS
9014: IFFALSE 9027
9016: GO 9018
9018: DISABLE
// heikeHurt := true ;
9019: LD_ADDR_EXP 14
9023: PUSH
9024: LD_INT 1
9026: ST_TO_ADDR
9027: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9028: LD_INT 22
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 21
9040: PUSH
9041: LD_INT 3
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 69
9056: IFFALSE 9372
9058: GO 9060
9060: DISABLE
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
// begin uc_side := 3 ;
9066: LD_ADDR_OWVAR 20
9070: PUSH
9071: LD_INT 3
9073: ST_TO_ADDR
// uc_nation := 3 ;
9074: LD_ADDR_OWVAR 21
9078: PUSH
9079: LD_INT 3
9081: ST_TO_ADDR
// tmp := [ ] ;
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: EMPTY
9088: ST_TO_ADDR
// for i := 1 to 5 do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 5
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9211
// begin PrepareHuman ( false , 1 , 4 ) ;
9105: LD_INT 0
9107: PPUSH
9108: LD_INT 1
9110: PPUSH
9111: LD_INT 4
9113: PPUSH
9114: CALL_OW 380
// un := CreateHuman ;
9118: LD_ADDR_VAR 0 3
9122: PUSH
9123: CALL_OW 44
9127: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 4
9135: PPUSH
9136: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9140: LD_VAR 0 3
9144: PPUSH
9145: LD_INT 158
9147: PPUSH
9148: LD_INT 80
9150: PPUSH
9151: LD_INT 0
9153: PPUSH
9154: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 147
9165: PPUSH
9166: LD_INT 75
9168: PPUSH
9169: CALL_OW 111
// wait ( 0 0$1 ) ;
9173: LD_INT 35
9175: PPUSH
9176: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: PLUS
9198: PPUSH
9199: LD_VAR 0 3
9203: PPUSH
9204: CALL_OW 1
9208: ST_TO_ADDR
// end ;
9209: GO 9102
9211: POP
9212: POP
// repeat wait ( 0 0$1 ) ;
9213: LD_INT 35
9215: PPUSH
9216: CALL_OW 67
// for i in tmp do
9220: LD_ADDR_VAR 0 1
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9352
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9233: LD_ADDR_VAR 0 3
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 74
9262: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 250
9276: PPUSH
9277: LD_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 251
9290: PPUSH
9291: CALL_OW 428
9295: IFFALSE 9336
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_VAR 0 3
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: CALL_OW 250
9315: PPUSH
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: CALL_OW 251
9329: PPUSH
9330: CALL_OW 114
9334: GO 9350
// ComAttackUnit ( i , Heike ) ;
9336: LD_VAR 0 1
9340: PPUSH
9341: LD_EXP 16
9345: PPUSH
9346: CALL_OW 115
// end ;
9350: GO 9230
9352: POP
9353: POP
// until IsDead ( Heike ) or not tmp ;
9354: LD_EXP 16
9358: PPUSH
9359: CALL_OW 301
9363: PUSH
9364: LD_VAR 0 2
9368: NOT
9369: OR
9370: IFFALSE 9213
// end ;
9372: PPOPN 3
9374: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9375: LD_EXP 12
9379: PUSH
9380: LD_EXP 16
9384: PPUSH
9385: CALL_OW 302
9389: AND
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 21
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 22
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 50
9416: PUSH
9417: EMPTY
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 71
9429: PUSH
9430: LD_INT 0
9432: EQUAL
9433: AND
9434: IFFALSE 9858
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
// begin if not heikeHurt then
9442: LD_EXP 14
9446: NOT
9447: IFFALSE 9456
// SetAchievement ( ACH_INVINCIBLE ) ;
9449: LD_STRING ACH_INVINCIBLE
9451: PPUSH
9452: CALL_OW 543
// if tick <= 6 6$00 then
9456: LD_OWVAR 1
9460: PUSH
9461: LD_INT 12600
9463: LESSEQUAL
9464: IFFALSE 9473
// SetAchievement ( ACH_HSPEED_1 ) ;
9466: LD_STRING ACH_HSPEED_1
9468: PPUSH
9469: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9473: LD_STRING enableBioCharacter(BIO_GIVI)
9475: PPUSH
9476: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9480: LD_STRING enableBioCharacter(BIO_MIKE)
9482: PPUSH
9483: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9487: LD_STRING enableBioCharacter(BIO_OLAF)
9489: PPUSH
9490: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 50
9521: PUSH
9522: EMPTY
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// if Kamil in tmp then
9535: LD_EXP 20
9539: PUSH
9540: LD_VAR 0 1
9544: IN
9545: IFFALSE 9554
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9547: LD_STRING enableBioCharacter(BIO_KAMI)
9549: PPUSH
9550: CALL_OW 559
// if prisonFound then
9554: LD_EXP 13
9558: IFFALSE 9597
// begin if not IsOk ( Kamil ) then
9560: LD_EXP 20
9564: PPUSH
9565: CALL_OW 302
9569: NOT
9570: IFFALSE 9585
// AddMedal ( med1 , - 2 ) else
9572: LD_STRING med1
9574: PPUSH
9575: LD_INT 2
9577: NEG
9578: PPUSH
9579: CALL_OW 101
9583: GO 9595
// AddMedal ( med1 , 1 ) ;
9585: LD_STRING med1
9587: PPUSH
9588: LD_INT 1
9590: PPUSH
9591: CALL_OW 101
// end else
9595: GO 9608
// AddMedal ( med1 , - 1 ) ;
9597: LD_STRING med1
9599: PPUSH
9600: LD_INT 1
9602: NEG
9603: PPUSH
9604: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 3
9615: LESS
9616: PUSH
9617: LD_EXP 13
9621: NOT
9622: AND
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: LD_INT 4
9631: LESS
9632: PUSH
9633: LD_EXP 13
9637: AND
9638: OR
9639: IFFALSE 9654
// AddMedal ( med2 , - 1 ) else
9641: LD_STRING med2
9643: PPUSH
9644: LD_INT 1
9646: NEG
9647: PPUSH
9648: CALL_OW 101
9652: GO 9664
// AddMedal ( med2 , 1 ) ;
9654: LD_STRING med2
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9664: LD_EXP 13
9668: PUSH
9669: LD_EXP 4
9673: AND
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: LD_INT 4
9682: GREATEREQUAL
9683: AND
9684: IFFALSE 9698
// AddMedal ( med3 , 1 ) else
9686: LD_STRING med3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 101
9696: GO 9709
// AddMedal ( med3 , - 1 ) ;
9698: LD_STRING med3
9700: PPUSH
9701: LD_INT 1
9703: NEG
9704: PPUSH
9705: CALL_OW 101
// GiveMedals ( MAIN ) ;
9709: LD_STRING MAIN
9711: PPUSH
9712: CALL_OW 102
// RewardPeople ( tmp ) ;
9716: LD_VAR 0 1
9720: PPUSH
9721: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9725: LD_EXP 4
9729: PPUSH
9730: LD_STRING 01_JohnnySaved
9732: PPUSH
9733: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9737: LD_EXP 16
9741: PPUSH
9742: LD_STRING 01_Heike
9744: PPUSH
9745: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9749: LD_EXP 18
9753: PPUSH
9754: CALL_OW 302
9758: PUSH
9759: LD_EXP 18
9763: PUSH
9764: LD_VAR 0 1
9768: IN
9769: AND
9770: IFFALSE 9784
// SaveCharacters ( Givi , 01_Givi ) ;
9772: LD_EXP 18
9776: PPUSH
9777: LD_STRING 01_Givi
9779: PPUSH
9780: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9784: LD_EXP 19
9788: PPUSH
9789: CALL_OW 302
9793: PUSH
9794: LD_EXP 19
9798: PUSH
9799: LD_VAR 0 1
9803: IN
9804: AND
9805: IFFALSE 9819
// SaveCharacters ( Mike , 01_Mike ) ;
9807: LD_EXP 19
9811: PPUSH
9812: LD_STRING 01_Mike
9814: PPUSH
9815: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9819: LD_EXP 20
9823: PPUSH
9824: CALL_OW 302
9828: PUSH
9829: LD_EXP 20
9833: PUSH
9834: LD_VAR 0 1
9838: IN
9839: AND
9840: IFFALSE 9854
// SaveCharacters ( Kamil , 01_Kamil ) ;
9842: LD_EXP 20
9846: PPUSH
9847: LD_STRING 01_Kamil
9849: PPUSH
9850: CALL_OW 38
// YouWin ;
9854: CALL_OW 103
// end ; end_of_file
9858: PPOPN 1
9860: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9861: LD_VAR 0 1
9865: PUSH
9866: LD_EXP 16
9870: EQUAL
9871: IFFALSE 9880
// YouLost ( Heike ) ;
9873: LD_STRING Heike
9875: PPUSH
9876: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 25
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PPUSH
9909: CALL_OW 69
9913: IN
9914: IFFALSE 10020
// begin if un in russianPatrol then
9916: LD_VAR 0 1
9920: PUSH
9921: LD_EXP 21
9925: IN
9926: IFFALSE 9944
// russianPatrol := russianPatrol diff un ;
9928: LD_ADDR_EXP 21
9932: PUSH
9933: LD_EXP 21
9937: PUSH
9938: LD_VAR 0 1
9942: DIFF
9943: ST_TO_ADDR
// if un in russianForestPatrol then
9944: LD_VAR 0 1
9948: PUSH
9949: LD_EXP 22
9953: IN
9954: IFFALSE 9972
// russianForestPatrol := russianForestPatrol diff un ;
9956: LD_ADDR_EXP 22
9960: PUSH
9961: LD_EXP 22
9965: PUSH
9966: LD_VAR 0 1
9970: DIFF
9971: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9972: LD_ADDR_EXP 5
9976: PUSH
9977: LD_EXP 5
9981: PPUSH
9982: LD_EXP 5
9986: PUSH
9987: LD_INT 1
9989: PLUS
9990: PPUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 250
10000: PUSH
10001: LD_VAR 0 1
10005: PPUSH
10006: CALL_OW 251
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 1
10019: ST_TO_ADDR
// end ; end ;
10020: PPOPN 1
10022: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10023: LD_VAR 0 1
10027: PUSH
10028: LD_EXP 16
10032: EQUAL
10033: IFFALSE 10042
// YouLost ( Heike ) ;
10035: LD_STRING Heike
10037: PPUSH
10038: CALL_OW 104
// if un = Olaf then
10042: LD_VAR 0 1
10046: PUSH
10047: LD_EXP 17
10051: EQUAL
10052: IFFALSE 10061
// YouLost ( Olaf ) ;
10054: LD_STRING Olaf
10056: PPUSH
10057: CALL_OW 104
// end ;
10061: PPOPN 1
10063: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 2
10071: EQUAL
10072: PUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 5
10080: EQUAL
10081: AND
10082: IFFALSE 10091
// YouLost ( FriendlyFire ) ;
10084: LD_STRING FriendlyFire
10086: PPUSH
10087: CALL_OW 104
// end ; end_of_file
10091: PPOPN 2
10093: END
// export globalGameSaveCounter ; every 0 0$1 do
10094: GO 10096
10096: DISABLE
// begin enable ;
10097: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10098: LD_STRING updateTimer(
10100: PUSH
10101: LD_OWVAR 1
10105: STR
10106: PUSH
10107: LD_STRING );
10109: STR
10110: PPUSH
10111: CALL_OW 559
// end ;
10115: END
// every 0 0$1 do
10116: GO 10118
10118: DISABLE
// begin globalGameSaveCounter := 0 ;
10119: LD_ADDR_EXP 26
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10127: LD_STRING setGameSaveCounter(0)
10129: PPUSH
10130: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10134: LD_STRING initStreamRollete();
10136: PPUSH
10137: CALL_OW 559
// InitStreamMode ;
10141: CALL 11467 0 0
// DefineStreamItems ( false ) ;
10145: LD_INT 0
10147: PPUSH
10148: CALL 11931 0 1
// end ;
10152: END
// export function SOS_MapStart ( ) ; begin
10153: LD_INT 0
10155: PPUSH
// if streamModeActive then
10156: LD_EXP 27
10160: IFFALSE 10169
// DefineStreamItems ( true ) ;
10162: LD_INT 1
10164: PPUSH
10165: CALL 11931 0 1
// UpdateLuaVariables ( ) ;
10169: CALL 10186 0 0
// UpdateFactoryWaypoints ( ) ;
10173: CALL 24800 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10177: CALL 25057 0 0
// end ;
10181: LD_VAR 0 1
10185: RET
// function UpdateLuaVariables ( ) ; begin
10186: LD_INT 0
10188: PPUSH
// if globalGameSaveCounter then
10189: LD_EXP 26
10193: IFFALSE 10227
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10195: LD_ADDR_EXP 26
10199: PUSH
10200: LD_EXP 26
10204: PPUSH
10205: CALL 69853 0 1
10209: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10210: LD_STRING setGameSaveCounter(
10212: PUSH
10213: LD_EXP 26
10217: STR
10218: PUSH
10219: LD_STRING )
10221: STR
10222: PPUSH
10223: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10227: LD_STRING setGameDifficulty(
10229: PUSH
10230: LD_OWVAR 67
10234: STR
10235: PUSH
10236: LD_STRING )
10238: STR
10239: PPUSH
10240: CALL_OW 559
// end ;
10244: LD_VAR 0 1
10248: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10249: LD_INT 0
10251: PPUSH
// if p2 = stream_mode then
10252: LD_VAR 0 2
10256: PUSH
10257: LD_INT 100
10259: EQUAL
10260: IFFALSE 11263
// begin if not StreamModeActive then
10262: LD_EXP 27
10266: NOT
10267: IFFALSE 10277
// StreamModeActive := true ;
10269: LD_ADDR_EXP 27
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// if p3 = 0 then
10277: LD_VAR 0 3
10281: PUSH
10282: LD_INT 0
10284: EQUAL
10285: IFFALSE 10291
// InitStreamMode ;
10287: CALL 11467 0 0
// if p3 = 1 then
10291: LD_VAR 0 3
10295: PUSH
10296: LD_INT 1
10298: EQUAL
10299: IFFALSE 10309
// sRocket := true ;
10301: LD_ADDR_EXP 32
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
// if p3 = 2 then
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 2
10316: EQUAL
10317: IFFALSE 10327
// sSpeed := true ;
10319: LD_ADDR_EXP 31
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// if p3 = 3 then
10327: LD_VAR 0 3
10331: PUSH
10332: LD_INT 3
10334: EQUAL
10335: IFFALSE 10345
// sEngine := true ;
10337: LD_ADDR_EXP 33
10341: PUSH
10342: LD_INT 1
10344: ST_TO_ADDR
// if p3 = 4 then
10345: LD_VAR 0 3
10349: PUSH
10350: LD_INT 4
10352: EQUAL
10353: IFFALSE 10363
// sSpec := true ;
10355: LD_ADDR_EXP 30
10359: PUSH
10360: LD_INT 1
10362: ST_TO_ADDR
// if p3 = 5 then
10363: LD_VAR 0 3
10367: PUSH
10368: LD_INT 5
10370: EQUAL
10371: IFFALSE 10381
// sLevel := true ;
10373: LD_ADDR_EXP 34
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// if p3 = 6 then
10381: LD_VAR 0 3
10385: PUSH
10386: LD_INT 6
10388: EQUAL
10389: IFFALSE 10399
// sArmoury := true ;
10391: LD_ADDR_EXP 35
10395: PUSH
10396: LD_INT 1
10398: ST_TO_ADDR
// if p3 = 7 then
10399: LD_VAR 0 3
10403: PUSH
10404: LD_INT 7
10406: EQUAL
10407: IFFALSE 10417
// sRadar := true ;
10409: LD_ADDR_EXP 36
10413: PUSH
10414: LD_INT 1
10416: ST_TO_ADDR
// if p3 = 8 then
10417: LD_VAR 0 3
10421: PUSH
10422: LD_INT 8
10424: EQUAL
10425: IFFALSE 10435
// sBunker := true ;
10427: LD_ADDR_EXP 37
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// if p3 = 9 then
10435: LD_VAR 0 3
10439: PUSH
10440: LD_INT 9
10442: EQUAL
10443: IFFALSE 10453
// sHack := true ;
10445: LD_ADDR_EXP 38
10449: PUSH
10450: LD_INT 1
10452: ST_TO_ADDR
// if p3 = 10 then
10453: LD_VAR 0 3
10457: PUSH
10458: LD_INT 10
10460: EQUAL
10461: IFFALSE 10471
// sFire := true ;
10463: LD_ADDR_EXP 39
10467: PUSH
10468: LD_INT 1
10470: ST_TO_ADDR
// if p3 = 11 then
10471: LD_VAR 0 3
10475: PUSH
10476: LD_INT 11
10478: EQUAL
10479: IFFALSE 10489
// sRefresh := true ;
10481: LD_ADDR_EXP 40
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
// if p3 = 12 then
10489: LD_VAR 0 3
10493: PUSH
10494: LD_INT 12
10496: EQUAL
10497: IFFALSE 10507
// sExp := true ;
10499: LD_ADDR_EXP 41
10503: PUSH
10504: LD_INT 1
10506: ST_TO_ADDR
// if p3 = 13 then
10507: LD_VAR 0 3
10511: PUSH
10512: LD_INT 13
10514: EQUAL
10515: IFFALSE 10525
// sDepot := true ;
10517: LD_ADDR_EXP 42
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// if p3 = 14 then
10525: LD_VAR 0 3
10529: PUSH
10530: LD_INT 14
10532: EQUAL
10533: IFFALSE 10543
// sFlag := true ;
10535: LD_ADDR_EXP 43
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// if p3 = 15 then
10543: LD_VAR 0 3
10547: PUSH
10548: LD_INT 15
10550: EQUAL
10551: IFFALSE 10561
// sKamikadze := true ;
10553: LD_ADDR_EXP 51
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// if p3 = 16 then
10561: LD_VAR 0 3
10565: PUSH
10566: LD_INT 16
10568: EQUAL
10569: IFFALSE 10579
// sTroll := true ;
10571: LD_ADDR_EXP 52
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// if p3 = 17 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 17
10586: EQUAL
10587: IFFALSE 10597
// sSlow := true ;
10589: LD_ADDR_EXP 53
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if p3 = 18 then
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 18
10604: EQUAL
10605: IFFALSE 10615
// sLack := true ;
10607: LD_ADDR_EXP 54
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// if p3 = 19 then
10615: LD_VAR 0 3
10619: PUSH
10620: LD_INT 19
10622: EQUAL
10623: IFFALSE 10633
// sTank := true ;
10625: LD_ADDR_EXP 56
10629: PUSH
10630: LD_INT 1
10632: ST_TO_ADDR
// if p3 = 20 then
10633: LD_VAR 0 3
10637: PUSH
10638: LD_INT 20
10640: EQUAL
10641: IFFALSE 10651
// sRemote := true ;
10643: LD_ADDR_EXP 57
10647: PUSH
10648: LD_INT 1
10650: ST_TO_ADDR
// if p3 = 21 then
10651: LD_VAR 0 3
10655: PUSH
10656: LD_INT 21
10658: EQUAL
10659: IFFALSE 10669
// sPowell := true ;
10661: LD_ADDR_EXP 58
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// if p3 = 22 then
10669: LD_VAR 0 3
10673: PUSH
10674: LD_INT 22
10676: EQUAL
10677: IFFALSE 10687
// sTeleport := true ;
10679: LD_ADDR_EXP 61
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// if p3 = 23 then
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 23
10694: EQUAL
10695: IFFALSE 10705
// sOilTower := true ;
10697: LD_ADDR_EXP 63
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// if p3 = 24 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_INT 24
10712: EQUAL
10713: IFFALSE 10723
// sShovel := true ;
10715: LD_ADDR_EXP 64
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// if p3 = 25 then
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 25
10730: EQUAL
10731: IFFALSE 10741
// sSheik := true ;
10733: LD_ADDR_EXP 65
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// if p3 = 26 then
10741: LD_VAR 0 3
10745: PUSH
10746: LD_INT 26
10748: EQUAL
10749: IFFALSE 10759
// sEarthquake := true ;
10751: LD_ADDR_EXP 67
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// if p3 = 27 then
10759: LD_VAR 0 3
10763: PUSH
10764: LD_INT 27
10766: EQUAL
10767: IFFALSE 10777
// sAI := true ;
10769: LD_ADDR_EXP 68
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
// if p3 = 28 then
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 28
10784: EQUAL
10785: IFFALSE 10795
// sCargo := true ;
10787: LD_ADDR_EXP 71
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// if p3 = 29 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 29
10802: EQUAL
10803: IFFALSE 10813
// sDLaser := true ;
10805: LD_ADDR_EXP 72
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// if p3 = 30 then
10813: LD_VAR 0 3
10817: PUSH
10818: LD_INT 30
10820: EQUAL
10821: IFFALSE 10831
// sExchange := true ;
10823: LD_ADDR_EXP 73
10827: PUSH
10828: LD_INT 1
10830: ST_TO_ADDR
// if p3 = 31 then
10831: LD_VAR 0 3
10835: PUSH
10836: LD_INT 31
10838: EQUAL
10839: IFFALSE 10849
// sFac := true ;
10841: LD_ADDR_EXP 74
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// if p3 = 32 then
10849: LD_VAR 0 3
10853: PUSH
10854: LD_INT 32
10856: EQUAL
10857: IFFALSE 10867
// sPower := true ;
10859: LD_ADDR_EXP 75
10863: PUSH
10864: LD_INT 1
10866: ST_TO_ADDR
// if p3 = 33 then
10867: LD_VAR 0 3
10871: PUSH
10872: LD_INT 33
10874: EQUAL
10875: IFFALSE 10885
// sRandom := true ;
10877: LD_ADDR_EXP 76
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if p3 = 34 then
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 34
10892: EQUAL
10893: IFFALSE 10903
// sShield := true ;
10895: LD_ADDR_EXP 77
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// if p3 = 35 then
10903: LD_VAR 0 3
10907: PUSH
10908: LD_INT 35
10910: EQUAL
10911: IFFALSE 10921
// sTime := true ;
10913: LD_ADDR_EXP 78
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// if p3 = 36 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 36
10928: EQUAL
10929: IFFALSE 10939
// sTools := true ;
10931: LD_ADDR_EXP 79
10935: PUSH
10936: LD_INT 1
10938: ST_TO_ADDR
// if p3 = 101 then
10939: LD_VAR 0 3
10943: PUSH
10944: LD_INT 101
10946: EQUAL
10947: IFFALSE 10957
// sSold := true ;
10949: LD_ADDR_EXP 44
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// if p3 = 102 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 102
10964: EQUAL
10965: IFFALSE 10975
// sDiff := true ;
10967: LD_ADDR_EXP 45
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// if p3 = 103 then
10975: LD_VAR 0 3
10979: PUSH
10980: LD_INT 103
10982: EQUAL
10983: IFFALSE 10993
// sFog := true ;
10985: LD_ADDR_EXP 48
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// if p3 = 104 then
10993: LD_VAR 0 3
10997: PUSH
10998: LD_INT 104
11000: EQUAL
11001: IFFALSE 11011
// sReset := true ;
11003: LD_ADDR_EXP 49
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// if p3 = 105 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_INT 105
11018: EQUAL
11019: IFFALSE 11029
// sSun := true ;
11021: LD_ADDR_EXP 50
11025: PUSH
11026: LD_INT 1
11028: ST_TO_ADDR
// if p3 = 106 then
11029: LD_VAR 0 3
11033: PUSH
11034: LD_INT 106
11036: EQUAL
11037: IFFALSE 11047
// sTiger := true ;
11039: LD_ADDR_EXP 46
11043: PUSH
11044: LD_INT 1
11046: ST_TO_ADDR
// if p3 = 107 then
11047: LD_VAR 0 3
11051: PUSH
11052: LD_INT 107
11054: EQUAL
11055: IFFALSE 11065
// sBomb := true ;
11057: LD_ADDR_EXP 47
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// if p3 = 108 then
11065: LD_VAR 0 3
11069: PUSH
11070: LD_INT 108
11072: EQUAL
11073: IFFALSE 11083
// sWound := true ;
11075: LD_ADDR_EXP 55
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if p3 = 109 then
11083: LD_VAR 0 3
11087: PUSH
11088: LD_INT 109
11090: EQUAL
11091: IFFALSE 11101
// sBetray := true ;
11093: LD_ADDR_EXP 59
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// if p3 = 110 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_INT 110
11108: EQUAL
11109: IFFALSE 11119
// sContamin := true ;
11111: LD_ADDR_EXP 60
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// if p3 = 111 then
11119: LD_VAR 0 3
11123: PUSH
11124: LD_INT 111
11126: EQUAL
11127: IFFALSE 11137
// sOil := true ;
11129: LD_ADDR_EXP 62
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// if p3 = 112 then
11137: LD_VAR 0 3
11141: PUSH
11142: LD_INT 112
11144: EQUAL
11145: IFFALSE 11155
// sStu := true ;
11147: LD_ADDR_EXP 66
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// if p3 = 113 then
11155: LD_VAR 0 3
11159: PUSH
11160: LD_INT 113
11162: EQUAL
11163: IFFALSE 11173
// sBazooka := true ;
11165: LD_ADDR_EXP 69
11169: PUSH
11170: LD_INT 1
11172: ST_TO_ADDR
// if p3 = 114 then
11173: LD_VAR 0 3
11177: PUSH
11178: LD_INT 114
11180: EQUAL
11181: IFFALSE 11191
// sMortar := true ;
11183: LD_ADDR_EXP 70
11187: PUSH
11188: LD_INT 1
11190: ST_TO_ADDR
// if p3 = 115 then
11191: LD_VAR 0 3
11195: PUSH
11196: LD_INT 115
11198: EQUAL
11199: IFFALSE 11209
// sRanger := true ;
11201: LD_ADDR_EXP 80
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// if p3 = 116 then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 116
11216: EQUAL
11217: IFFALSE 11227
// sComputer := true ;
11219: LD_ADDR_EXP 81
11223: PUSH
11224: LD_INT 1
11226: ST_TO_ADDR
// if p3 = 117 then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_INT 117
11234: EQUAL
11235: IFFALSE 11245
// s30 := true ;
11237: LD_ADDR_EXP 82
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
// if p3 = 118 then
11245: LD_VAR 0 3
11249: PUSH
11250: LD_INT 118
11252: EQUAL
11253: IFFALSE 11263
// s60 := true ;
11255: LD_ADDR_EXP 83
11259: PUSH
11260: LD_INT 1
11262: ST_TO_ADDR
// end ; if p2 = hack_mode then
11263: LD_VAR 0 2
11267: PUSH
11268: LD_INT 101
11270: EQUAL
11271: IFFALSE 11399
// begin case p3 of 1 :
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 1
11280: DOUBLE
11281: EQUAL
11282: IFTRUE 11286
11284: GO 11293
11286: POP
// hHackUnlimitedResources ; 2 :
11287: CALL 23546 0 0
11291: GO 11399
11293: LD_INT 2
11295: DOUBLE
11296: EQUAL
11297: IFTRUE 11301
11299: GO 11308
11301: POP
// hHackSetLevel10 ; 3 :
11302: CALL 23679 0 0
11306: GO 11399
11308: LD_INT 3
11310: DOUBLE
11311: EQUAL
11312: IFTRUE 11316
11314: GO 11323
11316: POP
// hHackSetLevel10YourUnits ; 4 :
11317: CALL 23764 0 0
11321: GO 11399
11323: LD_INT 4
11325: DOUBLE
11326: EQUAL
11327: IFTRUE 11331
11329: GO 11338
11331: POP
// hHackInvincible ; 5 :
11332: CALL 24212 0 0
11336: GO 11399
11338: LD_INT 5
11340: DOUBLE
11341: EQUAL
11342: IFTRUE 11346
11344: GO 11353
11346: POP
// hHackInvisible ; 6 :
11347: CALL 24323 0 0
11351: GO 11399
11353: LD_INT 6
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11368
11361: POP
// hHackChangeYourSide ; 7 :
11362: CALL 24380 0 0
11366: GO 11399
11368: LD_INT 7
11370: DOUBLE
11371: EQUAL
11372: IFTRUE 11376
11374: GO 11383
11376: POP
// hHackChangeUnitSide ; 8 :
11377: CALL 24422 0 0
11381: GO 11399
11383: LD_INT 8
11385: DOUBLE
11386: EQUAL
11387: IFTRUE 11391
11389: GO 11398
11391: POP
// hHackFog ; end ;
11392: CALL 24523 0 0
11396: GO 11399
11398: POP
// end ; if p2 = game_save_mode then
11399: LD_VAR 0 2
11403: PUSH
11404: LD_INT 102
11406: EQUAL
11407: IFFALSE 11462
// begin if p3 = 1 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 1
11416: EQUAL
11417: IFFALSE 11429
// globalGameSaveCounter := p4 ;
11419: LD_ADDR_EXP 26
11423: PUSH
11424: LD_VAR 0 4
11428: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 2
11436: EQUAL
11437: PUSH
11438: LD_EXP 26
11442: AND
11443: IFFALSE 11462
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11445: LD_STRING setGameSaveCounter(
11447: PUSH
11448: LD_EXP 26
11452: STR
11453: PUSH
11454: LD_STRING )
11456: STR
11457: PPUSH
11458: CALL_OW 559
// end ; end ;
11462: LD_VAR 0 7
11466: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11467: LD_INT 0
11469: PPUSH
// streamModeActive := false ;
11470: LD_ADDR_EXP 27
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// normalCounter := 36 ;
11478: LD_ADDR_EXP 28
11482: PUSH
11483: LD_INT 36
11485: ST_TO_ADDR
// hardcoreCounter := 18 ;
11486: LD_ADDR_EXP 29
11490: PUSH
11491: LD_INT 18
11493: ST_TO_ADDR
// sRocket := false ;
11494: LD_ADDR_EXP 32
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// sSpeed := false ;
11502: LD_ADDR_EXP 31
11506: PUSH
11507: LD_INT 0
11509: ST_TO_ADDR
// sEngine := false ;
11510: LD_ADDR_EXP 33
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// sSpec := false ;
11518: LD_ADDR_EXP 30
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// sLevel := false ;
11526: LD_ADDR_EXP 34
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// sArmoury := false ;
11534: LD_ADDR_EXP 35
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// sRadar := false ;
11542: LD_ADDR_EXP 36
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// sBunker := false ;
11550: LD_ADDR_EXP 37
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// sHack := false ;
11558: LD_ADDR_EXP 38
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// sFire := false ;
11566: LD_ADDR_EXP 39
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// sRefresh := false ;
11574: LD_ADDR_EXP 40
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// sExp := false ;
11582: LD_ADDR_EXP 41
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// sDepot := false ;
11590: LD_ADDR_EXP 42
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// sFlag := false ;
11598: LD_ADDR_EXP 43
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// sKamikadze := false ;
11606: LD_ADDR_EXP 51
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// sTroll := false ;
11614: LD_ADDR_EXP 52
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// sSlow := false ;
11622: LD_ADDR_EXP 53
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// sLack := false ;
11630: LD_ADDR_EXP 54
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// sTank := false ;
11638: LD_ADDR_EXP 56
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// sRemote := false ;
11646: LD_ADDR_EXP 57
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// sPowell := false ;
11654: LD_ADDR_EXP 58
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// sTeleport := false ;
11662: LD_ADDR_EXP 61
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sOilTower := false ;
11670: LD_ADDR_EXP 63
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// sShovel := false ;
11678: LD_ADDR_EXP 64
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// sSheik := false ;
11686: LD_ADDR_EXP 65
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// sEarthquake := false ;
11694: LD_ADDR_EXP 67
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// sAI := false ;
11702: LD_ADDR_EXP 68
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// sCargo := false ;
11710: LD_ADDR_EXP 71
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// sDLaser := false ;
11718: LD_ADDR_EXP 72
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
// sExchange := false ;
11726: LD_ADDR_EXP 73
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// sFac := false ;
11734: LD_ADDR_EXP 74
11738: PUSH
11739: LD_INT 0
11741: ST_TO_ADDR
// sPower := false ;
11742: LD_ADDR_EXP 75
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// sRandom := false ;
11750: LD_ADDR_EXP 76
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// sShield := false ;
11758: LD_ADDR_EXP 77
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// sTime := false ;
11766: LD_ADDR_EXP 78
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// sTools := false ;
11774: LD_ADDR_EXP 79
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// sSold := false ;
11782: LD_ADDR_EXP 44
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// sDiff := false ;
11790: LD_ADDR_EXP 45
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// sFog := false ;
11798: LD_ADDR_EXP 48
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// sReset := false ;
11806: LD_ADDR_EXP 49
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// sSun := false ;
11814: LD_ADDR_EXP 50
11818: PUSH
11819: LD_INT 0
11821: ST_TO_ADDR
// sTiger := false ;
11822: LD_ADDR_EXP 46
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// sBomb := false ;
11830: LD_ADDR_EXP 47
11834: PUSH
11835: LD_INT 0
11837: ST_TO_ADDR
// sWound := false ;
11838: LD_ADDR_EXP 55
11842: PUSH
11843: LD_INT 0
11845: ST_TO_ADDR
// sBetray := false ;
11846: LD_ADDR_EXP 59
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// sContamin := false ;
11854: LD_ADDR_EXP 60
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// sOil := false ;
11862: LD_ADDR_EXP 62
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// sStu := false ;
11870: LD_ADDR_EXP 66
11874: PUSH
11875: LD_INT 0
11877: ST_TO_ADDR
// sBazooka := false ;
11878: LD_ADDR_EXP 69
11882: PUSH
11883: LD_INT 0
11885: ST_TO_ADDR
// sMortar := false ;
11886: LD_ADDR_EXP 70
11890: PUSH
11891: LD_INT 0
11893: ST_TO_ADDR
// sRanger := false ;
11894: LD_ADDR_EXP 80
11898: PUSH
11899: LD_INT 0
11901: ST_TO_ADDR
// sComputer := false ;
11902: LD_ADDR_EXP 81
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// s30 := false ;
11910: LD_ADDR_EXP 82
11914: PUSH
11915: LD_INT 0
11917: ST_TO_ADDR
// s60 := false ;
11918: LD_ADDR_EXP 83
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// end ;
11926: LD_VAR 0 1
11930: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11931: LD_INT 0
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
// result := [ ] ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: EMPTY
11946: ST_TO_ADDR
// if campaign_id = 1 then
11947: LD_OWVAR 69
11951: PUSH
11952: LD_INT 1
11954: EQUAL
11955: IFFALSE 15121
// begin case mission_number of 1 :
11957: LD_OWVAR 70
11961: PUSH
11962: LD_INT 1
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12046
11970: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11971: LD_ADDR_VAR 0 2
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: LD_INT 11
11984: PUSH
11985: LD_INT 12
11987: PUSH
11988: LD_INT 15
11990: PUSH
11991: LD_INT 16
11993: PUSH
11994: LD_INT 22
11996: PUSH
11997: LD_INT 23
11999: PUSH
12000: LD_INT 26
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 101
12016: PUSH
12017: LD_INT 102
12019: PUSH
12020: LD_INT 106
12022: PUSH
12023: LD_INT 116
12025: PUSH
12026: LD_INT 117
12028: PUSH
12029: LD_INT 118
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: ST_TO_ADDR
12044: GO 15119
12046: LD_INT 2
12048: DOUBLE
12049: EQUAL
12050: IFTRUE 12054
12052: GO 12138
12054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 4
12065: PUSH
12066: LD_INT 11
12068: PUSH
12069: LD_INT 12
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 22
12080: PUSH
12081: LD_INT 23
12083: PUSH
12084: LD_INT 26
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 101
12100: PUSH
12101: LD_INT 102
12103: PUSH
12104: LD_INT 105
12106: PUSH
12107: LD_INT 106
12109: PUSH
12110: LD_INT 108
12112: PUSH
12113: LD_INT 116
12115: PUSH
12116: LD_INT 117
12118: PUSH
12119: LD_INT 118
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: ST_TO_ADDR
12136: GO 15119
12138: LD_INT 3
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12234
12146: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12147: LD_ADDR_VAR 0 2
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 4
12157: PUSH
12158: LD_INT 5
12160: PUSH
12161: LD_INT 11
12163: PUSH
12164: LD_INT 12
12166: PUSH
12167: LD_INT 15
12169: PUSH
12170: LD_INT 16
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_INT 26
12178: PUSH
12179: LD_INT 36
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 101
12196: PUSH
12197: LD_INT 102
12199: PUSH
12200: LD_INT 105
12202: PUSH
12203: LD_INT 106
12205: PUSH
12206: LD_INT 108
12208: PUSH
12209: LD_INT 116
12211: PUSH
12212: LD_INT 117
12214: PUSH
12215: LD_INT 118
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: ST_TO_ADDR
12232: GO 15119
12234: LD_INT 4
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12338
12242: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12243: LD_ADDR_VAR 0 2
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 4
12253: PUSH
12254: LD_INT 5
12256: PUSH
12257: LD_INT 8
12259: PUSH
12260: LD_INT 11
12262: PUSH
12263: LD_INT 12
12265: PUSH
12266: LD_INT 15
12268: PUSH
12269: LD_INT 16
12271: PUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 23
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 36
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 101
12300: PUSH
12301: LD_INT 102
12303: PUSH
12304: LD_INT 105
12306: PUSH
12307: LD_INT 106
12309: PUSH
12310: LD_INT 108
12312: PUSH
12313: LD_INT 116
12315: PUSH
12316: LD_INT 117
12318: PUSH
12319: LD_INT 118
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: ST_TO_ADDR
12336: GO 15119
12338: LD_INT 5
12340: DOUBLE
12341: EQUAL
12342: IFTRUE 12346
12344: GO 12458
12346: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12347: LD_ADDR_VAR 0 2
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 4
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: LD_INT 6
12363: PUSH
12364: LD_INT 8
12366: PUSH
12367: LD_INT 11
12369: PUSH
12370: LD_INT 12
12372: PUSH
12373: LD_INT 15
12375: PUSH
12376: LD_INT 16
12378: PUSH
12379: LD_INT 22
12381: PUSH
12382: LD_INT 23
12384: PUSH
12385: LD_INT 25
12387: PUSH
12388: LD_INT 26
12390: PUSH
12391: LD_INT 36
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 101
12412: PUSH
12413: LD_INT 102
12415: PUSH
12416: LD_INT 105
12418: PUSH
12419: LD_INT 106
12421: PUSH
12422: LD_INT 108
12424: PUSH
12425: LD_INT 109
12427: PUSH
12428: LD_INT 112
12430: PUSH
12431: LD_INT 116
12433: PUSH
12434: LD_INT 117
12436: PUSH
12437: LD_INT 118
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: ST_TO_ADDR
12456: GO 15119
12458: LD_INT 6
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12598
12466: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: LD_INT 5
12480: PUSH
12481: LD_INT 6
12483: PUSH
12484: LD_INT 8
12486: PUSH
12487: LD_INT 11
12489: PUSH
12490: LD_INT 12
12492: PUSH
12493: LD_INT 15
12495: PUSH
12496: LD_INT 16
12498: PUSH
12499: LD_INT 20
12501: PUSH
12502: LD_INT 21
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_INT 23
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 26
12516: PUSH
12517: LD_INT 30
12519: PUSH
12520: LD_INT 31
12522: PUSH
12523: LD_INT 32
12525: PUSH
12526: LD_INT 36
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 101
12552: PUSH
12553: LD_INT 102
12555: PUSH
12556: LD_INT 105
12558: PUSH
12559: LD_INT 106
12561: PUSH
12562: LD_INT 108
12564: PUSH
12565: LD_INT 109
12567: PUSH
12568: LD_INT 112
12570: PUSH
12571: LD_INT 116
12573: PUSH
12574: LD_INT 117
12576: PUSH
12577: LD_INT 118
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: ST_TO_ADDR
12596: GO 15119
12598: LD_INT 7
12600: DOUBLE
12601: EQUAL
12602: IFTRUE 12606
12604: GO 12718
12606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: LD_INT 5
12620: PUSH
12621: LD_INT 7
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: LD_INT 12
12629: PUSH
12630: LD_INT 15
12632: PUSH
12633: LD_INT 16
12635: PUSH
12636: LD_INT 20
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_INT 23
12647: PUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 26
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 101
12672: PUSH
12673: LD_INT 102
12675: PUSH
12676: LD_INT 103
12678: PUSH
12679: LD_INT 105
12681: PUSH
12682: LD_INT 106
12684: PUSH
12685: LD_INT 108
12687: PUSH
12688: LD_INT 112
12690: PUSH
12691: LD_INT 116
12693: PUSH
12694: LD_INT 117
12696: PUSH
12697: LD_INT 118
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: ST_TO_ADDR
12716: GO 15119
12718: LD_INT 8
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12866
12726: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12727: LD_ADDR_VAR 0 2
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: LD_INT 4
12737: PUSH
12738: LD_INT 5
12740: PUSH
12741: LD_INT 6
12743: PUSH
12744: LD_INT 7
12746: PUSH
12747: LD_INT 8
12749: PUSH
12750: LD_INT 11
12752: PUSH
12753: LD_INT 12
12755: PUSH
12756: LD_INT 15
12758: PUSH
12759: LD_INT 16
12761: PUSH
12762: LD_INT 20
12764: PUSH
12765: LD_INT 21
12767: PUSH
12768: LD_INT 22
12770: PUSH
12771: LD_INT 23
12773: PUSH
12774: LD_INT 25
12776: PUSH
12777: LD_INT 26
12779: PUSH
12780: LD_INT 30
12782: PUSH
12783: LD_INT 31
12785: PUSH
12786: LD_INT 32
12788: PUSH
12789: LD_INT 36
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 101
12816: PUSH
12817: LD_INT 102
12819: PUSH
12820: LD_INT 103
12822: PUSH
12823: LD_INT 105
12825: PUSH
12826: LD_INT 106
12828: PUSH
12829: LD_INT 108
12831: PUSH
12832: LD_INT 109
12834: PUSH
12835: LD_INT 112
12837: PUSH
12838: LD_INT 116
12840: PUSH
12841: LD_INT 117
12843: PUSH
12844: LD_INT 118
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: ST_TO_ADDR
12864: GO 15119
12866: LD_INT 9
12868: DOUBLE
12869: EQUAL
12870: IFTRUE 12874
12872: GO 13022
12874: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12875: LD_ADDR_VAR 0 2
12879: PUSH
12880: LD_INT 2
12882: PUSH
12883: LD_INT 4
12885: PUSH
12886: LD_INT 5
12888: PUSH
12889: LD_INT 6
12891: PUSH
12892: LD_INT 7
12894: PUSH
12895: LD_INT 8
12897: PUSH
12898: LD_INT 11
12900: PUSH
12901: LD_INT 12
12903: PUSH
12904: LD_INT 15
12906: PUSH
12907: LD_INT 16
12909: PUSH
12910: LD_INT 20
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 22
12918: PUSH
12919: LD_INT 23
12921: PUSH
12922: LD_INT 25
12924: PUSH
12925: LD_INT 26
12927: PUSH
12928: LD_INT 28
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: LD_INT 31
12936: PUSH
12937: LD_INT 32
12939: PUSH
12940: LD_INT 36
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 101
12968: PUSH
12969: LD_INT 102
12971: PUSH
12972: LD_INT 103
12974: PUSH
12975: LD_INT 105
12977: PUSH
12978: LD_INT 106
12980: PUSH
12981: LD_INT 108
12983: PUSH
12984: LD_INT 109
12986: PUSH
12987: LD_INT 112
12989: PUSH
12990: LD_INT 114
12992: PUSH
12993: LD_INT 116
12995: PUSH
12996: LD_INT 117
12998: PUSH
12999: LD_INT 118
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: ST_TO_ADDR
13020: GO 15119
13022: LD_INT 10
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13226
13030: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13031: LD_ADDR_VAR 0 2
13035: PUSH
13036: LD_INT 2
13038: PUSH
13039: LD_INT 4
13041: PUSH
13042: LD_INT 5
13044: PUSH
13045: LD_INT 6
13047: PUSH
13048: LD_INT 7
13050: PUSH
13051: LD_INT 8
13053: PUSH
13054: LD_INT 9
13056: PUSH
13057: LD_INT 10
13059: PUSH
13060: LD_INT 11
13062: PUSH
13063: LD_INT 12
13065: PUSH
13066: LD_INT 13
13068: PUSH
13069: LD_INT 14
13071: PUSH
13072: LD_INT 15
13074: PUSH
13075: LD_INT 16
13077: PUSH
13078: LD_INT 17
13080: PUSH
13081: LD_INT 18
13083: PUSH
13084: LD_INT 19
13086: PUSH
13087: LD_INT 20
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 23
13098: PUSH
13099: LD_INT 24
13101: PUSH
13102: LD_INT 25
13104: PUSH
13105: LD_INT 26
13107: PUSH
13108: LD_INT 28
13110: PUSH
13111: LD_INT 30
13113: PUSH
13114: LD_INT 31
13116: PUSH
13117: LD_INT 32
13119: PUSH
13120: LD_INT 36
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 101
13156: PUSH
13157: LD_INT 102
13159: PUSH
13160: LD_INT 103
13162: PUSH
13163: LD_INT 104
13165: PUSH
13166: LD_INT 105
13168: PUSH
13169: LD_INT 106
13171: PUSH
13172: LD_INT 107
13174: PUSH
13175: LD_INT 108
13177: PUSH
13178: LD_INT 109
13180: PUSH
13181: LD_INT 110
13183: PUSH
13184: LD_INT 111
13186: PUSH
13187: LD_INT 112
13189: PUSH
13190: LD_INT 114
13192: PUSH
13193: LD_INT 116
13195: PUSH
13196: LD_INT 117
13198: PUSH
13199: LD_INT 118
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: ST_TO_ADDR
13224: GO 15119
13226: LD_INT 11
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13438
13234: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13235: LD_ADDR_VAR 0 2
13239: PUSH
13240: LD_INT 2
13242: PUSH
13243: LD_INT 3
13245: PUSH
13246: LD_INT 4
13248: PUSH
13249: LD_INT 5
13251: PUSH
13252: LD_INT 6
13254: PUSH
13255: LD_INT 7
13257: PUSH
13258: LD_INT 8
13260: PUSH
13261: LD_INT 9
13263: PUSH
13264: LD_INT 10
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 13
13275: PUSH
13276: LD_INT 14
13278: PUSH
13279: LD_INT 15
13281: PUSH
13282: LD_INT 16
13284: PUSH
13285: LD_INT 17
13287: PUSH
13288: LD_INT 18
13290: PUSH
13291: LD_INT 19
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 21
13299: PUSH
13300: LD_INT 22
13302: PUSH
13303: LD_INT 23
13305: PUSH
13306: LD_INT 24
13308: PUSH
13309: LD_INT 25
13311: PUSH
13312: LD_INT 26
13314: PUSH
13315: LD_INT 28
13317: PUSH
13318: LD_INT 30
13320: PUSH
13321: LD_INT 31
13323: PUSH
13324: LD_INT 32
13326: PUSH
13327: LD_INT 34
13329: PUSH
13330: LD_INT 36
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 101
13368: PUSH
13369: LD_INT 102
13371: PUSH
13372: LD_INT 103
13374: PUSH
13375: LD_INT 104
13377: PUSH
13378: LD_INT 105
13380: PUSH
13381: LD_INT 106
13383: PUSH
13384: LD_INT 107
13386: PUSH
13387: LD_INT 108
13389: PUSH
13390: LD_INT 109
13392: PUSH
13393: LD_INT 110
13395: PUSH
13396: LD_INT 111
13398: PUSH
13399: LD_INT 112
13401: PUSH
13402: LD_INT 114
13404: PUSH
13405: LD_INT 116
13407: PUSH
13408: LD_INT 117
13410: PUSH
13411: LD_INT 118
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: ST_TO_ADDR
13436: GO 15119
13438: LD_INT 12
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13666
13446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13447: LD_ADDR_VAR 0 2
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 3
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: LD_INT 5
13466: PUSH
13467: LD_INT 6
13469: PUSH
13470: LD_INT 7
13472: PUSH
13473: LD_INT 8
13475: PUSH
13476: LD_INT 9
13478: PUSH
13479: LD_INT 10
13481: PUSH
13482: LD_INT 11
13484: PUSH
13485: LD_INT 12
13487: PUSH
13488: LD_INT 13
13490: PUSH
13491: LD_INT 14
13493: PUSH
13494: LD_INT 15
13496: PUSH
13497: LD_INT 16
13499: PUSH
13500: LD_INT 17
13502: PUSH
13503: LD_INT 18
13505: PUSH
13506: LD_INT 19
13508: PUSH
13509: LD_INT 20
13511: PUSH
13512: LD_INT 21
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_INT 23
13520: PUSH
13521: LD_INT 24
13523: PUSH
13524: LD_INT 25
13526: PUSH
13527: LD_INT 26
13529: PUSH
13530: LD_INT 27
13532: PUSH
13533: LD_INT 28
13535: PUSH
13536: LD_INT 30
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: LD_INT 33
13547: PUSH
13548: LD_INT 34
13550: PUSH
13551: LD_INT 36
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 101
13592: PUSH
13593: LD_INT 102
13595: PUSH
13596: LD_INT 103
13598: PUSH
13599: LD_INT 104
13601: PUSH
13602: LD_INT 105
13604: PUSH
13605: LD_INT 106
13607: PUSH
13608: LD_INT 107
13610: PUSH
13611: LD_INT 108
13613: PUSH
13614: LD_INT 109
13616: PUSH
13617: LD_INT 110
13619: PUSH
13620: LD_INT 111
13622: PUSH
13623: LD_INT 112
13625: PUSH
13626: LD_INT 113
13628: PUSH
13629: LD_INT 114
13631: PUSH
13632: LD_INT 116
13634: PUSH
13635: LD_INT 117
13637: PUSH
13638: LD_INT 118
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: ST_TO_ADDR
13664: GO 15119
13666: LD_INT 13
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13882
13674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_INT 1
13682: PUSH
13683: LD_INT 2
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: LD_INT 4
13691: PUSH
13692: LD_INT 5
13694: PUSH
13695: LD_INT 8
13697: PUSH
13698: LD_INT 9
13700: PUSH
13701: LD_INT 10
13703: PUSH
13704: LD_INT 11
13706: PUSH
13707: LD_INT 12
13709: PUSH
13710: LD_INT 14
13712: PUSH
13713: LD_INT 15
13715: PUSH
13716: LD_INT 16
13718: PUSH
13719: LD_INT 17
13721: PUSH
13722: LD_INT 18
13724: PUSH
13725: LD_INT 19
13727: PUSH
13728: LD_INT 20
13730: PUSH
13731: LD_INT 21
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_INT 23
13739: PUSH
13740: LD_INT 24
13742: PUSH
13743: LD_INT 25
13745: PUSH
13746: LD_INT 26
13748: PUSH
13749: LD_INT 27
13751: PUSH
13752: LD_INT 28
13754: PUSH
13755: LD_INT 30
13757: PUSH
13758: LD_INT 31
13760: PUSH
13761: LD_INT 32
13763: PUSH
13764: LD_INT 33
13766: PUSH
13767: LD_INT 34
13769: PUSH
13770: LD_INT 36
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 101
13808: PUSH
13809: LD_INT 102
13811: PUSH
13812: LD_INT 103
13814: PUSH
13815: LD_INT 104
13817: PUSH
13818: LD_INT 105
13820: PUSH
13821: LD_INT 106
13823: PUSH
13824: LD_INT 107
13826: PUSH
13827: LD_INT 108
13829: PUSH
13830: LD_INT 109
13832: PUSH
13833: LD_INT 110
13835: PUSH
13836: LD_INT 111
13838: PUSH
13839: LD_INT 112
13841: PUSH
13842: LD_INT 113
13844: PUSH
13845: LD_INT 114
13847: PUSH
13848: LD_INT 116
13850: PUSH
13851: LD_INT 117
13853: PUSH
13854: LD_INT 118
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: ST_TO_ADDR
13880: GO 15119
13882: LD_INT 14
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 14114
13890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: LD_INT 3
13904: PUSH
13905: LD_INT 4
13907: PUSH
13908: LD_INT 5
13910: PUSH
13911: LD_INT 6
13913: PUSH
13914: LD_INT 7
13916: PUSH
13917: LD_INT 8
13919: PUSH
13920: LD_INT 9
13922: PUSH
13923: LD_INT 10
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 13
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 17
13946: PUSH
13947: LD_INT 18
13949: PUSH
13950: LD_INT 19
13952: PUSH
13953: LD_INT 20
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: LD_INT 24
13967: PUSH
13968: LD_INT 25
13970: PUSH
13971: LD_INT 26
13973: PUSH
13974: LD_INT 27
13976: PUSH
13977: LD_INT 28
13979: PUSH
13980: LD_INT 29
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 31
13988: PUSH
13989: LD_INT 32
13991: PUSH
13992: LD_INT 33
13994: PUSH
13995: LD_INT 34
13997: PUSH
13998: LD_INT 36
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 101
14040: PUSH
14041: LD_INT 102
14043: PUSH
14044: LD_INT 103
14046: PUSH
14047: LD_INT 104
14049: PUSH
14050: LD_INT 105
14052: PUSH
14053: LD_INT 106
14055: PUSH
14056: LD_INT 107
14058: PUSH
14059: LD_INT 108
14061: PUSH
14062: LD_INT 109
14064: PUSH
14065: LD_INT 110
14067: PUSH
14068: LD_INT 111
14070: PUSH
14071: LD_INT 112
14073: PUSH
14074: LD_INT 113
14076: PUSH
14077: LD_INT 114
14079: PUSH
14080: LD_INT 116
14082: PUSH
14083: LD_INT 117
14085: PUSH
14086: LD_INT 118
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 15119
14114: LD_INT 15
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14346
14122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14123: LD_ADDR_VAR 0 2
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: LD_INT 2
14133: PUSH
14134: LD_INT 3
14136: PUSH
14137: LD_INT 4
14139: PUSH
14140: LD_INT 5
14142: PUSH
14143: LD_INT 6
14145: PUSH
14146: LD_INT 7
14148: PUSH
14149: LD_INT 8
14151: PUSH
14152: LD_INT 9
14154: PUSH
14155: LD_INT 10
14157: PUSH
14158: LD_INT 11
14160: PUSH
14161: LD_INT 12
14163: PUSH
14164: LD_INT 13
14166: PUSH
14167: LD_INT 14
14169: PUSH
14170: LD_INT 15
14172: PUSH
14173: LD_INT 16
14175: PUSH
14176: LD_INT 17
14178: PUSH
14179: LD_INT 18
14181: PUSH
14182: LD_INT 19
14184: PUSH
14185: LD_INT 20
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 22
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 24
14199: PUSH
14200: LD_INT 25
14202: PUSH
14203: LD_INT 26
14205: PUSH
14206: LD_INT 27
14208: PUSH
14209: LD_INT 28
14211: PUSH
14212: LD_INT 29
14214: PUSH
14215: LD_INT 30
14217: PUSH
14218: LD_INT 31
14220: PUSH
14221: LD_INT 32
14223: PUSH
14224: LD_INT 33
14226: PUSH
14227: LD_INT 34
14229: PUSH
14230: LD_INT 36
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 101
14272: PUSH
14273: LD_INT 102
14275: PUSH
14276: LD_INT 103
14278: PUSH
14279: LD_INT 104
14281: PUSH
14282: LD_INT 105
14284: PUSH
14285: LD_INT 106
14287: PUSH
14288: LD_INT 107
14290: PUSH
14291: LD_INT 108
14293: PUSH
14294: LD_INT 109
14296: PUSH
14297: LD_INT 110
14299: PUSH
14300: LD_INT 111
14302: PUSH
14303: LD_INT 112
14305: PUSH
14306: LD_INT 113
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 15119
14346: LD_INT 16
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14490
14354: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: LD_INT 4
14365: PUSH
14366: LD_INT 5
14368: PUSH
14369: LD_INT 7
14371: PUSH
14372: LD_INT 11
14374: PUSH
14375: LD_INT 12
14377: PUSH
14378: LD_INT 15
14380: PUSH
14381: LD_INT 16
14383: PUSH
14384: LD_INT 20
14386: PUSH
14387: LD_INT 21
14389: PUSH
14390: LD_INT 22
14392: PUSH
14393: LD_INT 23
14395: PUSH
14396: LD_INT 25
14398: PUSH
14399: LD_INT 26
14401: PUSH
14402: LD_INT 30
14404: PUSH
14405: LD_INT 31
14407: PUSH
14408: LD_INT 32
14410: PUSH
14411: LD_INT 33
14413: PUSH
14414: LD_INT 34
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 101
14440: PUSH
14441: LD_INT 102
14443: PUSH
14444: LD_INT 103
14446: PUSH
14447: LD_INT 106
14449: PUSH
14450: LD_INT 108
14452: PUSH
14453: LD_INT 112
14455: PUSH
14456: LD_INT 113
14458: PUSH
14459: LD_INT 114
14461: PUSH
14462: LD_INT 116
14464: PUSH
14465: LD_INT 117
14467: PUSH
14468: LD_INT 118
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: ST_TO_ADDR
14488: GO 15119
14490: LD_INT 17
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14722
14498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_INT 1
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: LD_INT 4
14515: PUSH
14516: LD_INT 5
14518: PUSH
14519: LD_INT 6
14521: PUSH
14522: LD_INT 7
14524: PUSH
14525: LD_INT 8
14527: PUSH
14528: LD_INT 9
14530: PUSH
14531: LD_INT 10
14533: PUSH
14534: LD_INT 11
14536: PUSH
14537: LD_INT 12
14539: PUSH
14540: LD_INT 13
14542: PUSH
14543: LD_INT 14
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 17
14554: PUSH
14555: LD_INT 18
14557: PUSH
14558: LD_INT 19
14560: PUSH
14561: LD_INT 20
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 23
14572: PUSH
14573: LD_INT 24
14575: PUSH
14576: LD_INT 25
14578: PUSH
14579: LD_INT 26
14581: PUSH
14582: LD_INT 27
14584: PUSH
14585: LD_INT 28
14587: PUSH
14588: LD_INT 29
14590: PUSH
14591: LD_INT 30
14593: PUSH
14594: LD_INT 31
14596: PUSH
14597: LD_INT 32
14599: PUSH
14600: LD_INT 33
14602: PUSH
14603: LD_INT 34
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 101
14648: PUSH
14649: LD_INT 102
14651: PUSH
14652: LD_INT 103
14654: PUSH
14655: LD_INT 104
14657: PUSH
14658: LD_INT 105
14660: PUSH
14661: LD_INT 106
14663: PUSH
14664: LD_INT 107
14666: PUSH
14667: LD_INT 108
14669: PUSH
14670: LD_INT 109
14672: PUSH
14673: LD_INT 110
14675: PUSH
14676: LD_INT 111
14678: PUSH
14679: LD_INT 112
14681: PUSH
14682: LD_INT 113
14684: PUSH
14685: LD_INT 114
14687: PUSH
14688: LD_INT 116
14690: PUSH
14691: LD_INT 117
14693: PUSH
14694: LD_INT 118
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: ST_TO_ADDR
14720: GO 15119
14722: LD_INT 18
14724: DOUBLE
14725: EQUAL
14726: IFTRUE 14730
14728: GO 14878
14730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14731: LD_ADDR_VAR 0 2
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: LD_INT 4
14741: PUSH
14742: LD_INT 5
14744: PUSH
14745: LD_INT 7
14747: PUSH
14748: LD_INT 11
14750: PUSH
14751: LD_INT 12
14753: PUSH
14754: LD_INT 15
14756: PUSH
14757: LD_INT 16
14759: PUSH
14760: LD_INT 20
14762: PUSH
14763: LD_INT 21
14765: PUSH
14766: LD_INT 22
14768: PUSH
14769: LD_INT 23
14771: PUSH
14772: LD_INT 25
14774: PUSH
14775: LD_INT 26
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 31
14783: PUSH
14784: LD_INT 32
14786: PUSH
14787: LD_INT 33
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 35
14795: PUSH
14796: LD_INT 36
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 101
14824: PUSH
14825: LD_INT 102
14827: PUSH
14828: LD_INT 103
14830: PUSH
14831: LD_INT 106
14833: PUSH
14834: LD_INT 108
14836: PUSH
14837: LD_INT 112
14839: PUSH
14840: LD_INT 113
14842: PUSH
14843: LD_INT 114
14845: PUSH
14846: LD_INT 115
14848: PUSH
14849: LD_INT 116
14851: PUSH
14852: LD_INT 117
14854: PUSH
14855: LD_INT 118
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 15119
14878: LD_INT 19
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15118
14886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: LD_INT 2
14897: PUSH
14898: LD_INT 3
14900: PUSH
14901: LD_INT 4
14903: PUSH
14904: LD_INT 5
14906: PUSH
14907: LD_INT 6
14909: PUSH
14910: LD_INT 7
14912: PUSH
14913: LD_INT 8
14915: PUSH
14916: LD_INT 9
14918: PUSH
14919: LD_INT 10
14921: PUSH
14922: LD_INT 11
14924: PUSH
14925: LD_INT 12
14927: PUSH
14928: LD_INT 13
14930: PUSH
14931: LD_INT 14
14933: PUSH
14934: LD_INT 15
14936: PUSH
14937: LD_INT 16
14939: PUSH
14940: LD_INT 17
14942: PUSH
14943: LD_INT 18
14945: PUSH
14946: LD_INT 19
14948: PUSH
14949: LD_INT 20
14951: PUSH
14952: LD_INT 21
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 23
14960: PUSH
14961: LD_INT 24
14963: PUSH
14964: LD_INT 25
14966: PUSH
14967: LD_INT 26
14969: PUSH
14970: LD_INT 27
14972: PUSH
14973: LD_INT 28
14975: PUSH
14976: LD_INT 29
14978: PUSH
14979: LD_INT 30
14981: PUSH
14982: LD_INT 31
14984: PUSH
14985: LD_INT 32
14987: PUSH
14988: LD_INT 33
14990: PUSH
14991: LD_INT 34
14993: PUSH
14994: LD_INT 35
14996: PUSH
14997: LD_INT 36
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 101
15040: PUSH
15041: LD_INT 102
15043: PUSH
15044: LD_INT 103
15046: PUSH
15047: LD_INT 104
15049: PUSH
15050: LD_INT 105
15052: PUSH
15053: LD_INT 106
15055: PUSH
15056: LD_INT 107
15058: PUSH
15059: LD_INT 108
15061: PUSH
15062: LD_INT 109
15064: PUSH
15065: LD_INT 110
15067: PUSH
15068: LD_INT 111
15070: PUSH
15071: LD_INT 112
15073: PUSH
15074: LD_INT 113
15076: PUSH
15077: LD_INT 114
15079: PUSH
15080: LD_INT 115
15082: PUSH
15083: LD_INT 116
15085: PUSH
15086: LD_INT 117
15088: PUSH
15089: LD_INT 118
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: ST_TO_ADDR
15116: GO 15119
15118: POP
// end else
15119: GO 15350
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: LD_INT 2
15131: PUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 4
15137: PUSH
15138: LD_INT 5
15140: PUSH
15141: LD_INT 6
15143: PUSH
15144: LD_INT 7
15146: PUSH
15147: LD_INT 8
15149: PUSH
15150: LD_INT 9
15152: PUSH
15153: LD_INT 10
15155: PUSH
15156: LD_INT 11
15158: PUSH
15159: LD_INT 12
15161: PUSH
15162: LD_INT 13
15164: PUSH
15165: LD_INT 14
15167: PUSH
15168: LD_INT 15
15170: PUSH
15171: LD_INT 16
15173: PUSH
15174: LD_INT 17
15176: PUSH
15177: LD_INT 18
15179: PUSH
15180: LD_INT 19
15182: PUSH
15183: LD_INT 20
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 23
15194: PUSH
15195: LD_INT 24
15197: PUSH
15198: LD_INT 25
15200: PUSH
15201: LD_INT 26
15203: PUSH
15204: LD_INT 27
15206: PUSH
15207: LD_INT 28
15209: PUSH
15210: LD_INT 29
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 31
15218: PUSH
15219: LD_INT 32
15221: PUSH
15222: LD_INT 33
15224: PUSH
15225: LD_INT 34
15227: PUSH
15228: LD_INT 35
15230: PUSH
15231: LD_INT 36
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 101
15274: PUSH
15275: LD_INT 102
15277: PUSH
15278: LD_INT 103
15280: PUSH
15281: LD_INT 104
15283: PUSH
15284: LD_INT 105
15286: PUSH
15287: LD_INT 106
15289: PUSH
15290: LD_INT 107
15292: PUSH
15293: LD_INT 108
15295: PUSH
15296: LD_INT 109
15298: PUSH
15299: LD_INT 110
15301: PUSH
15302: LD_INT 111
15304: PUSH
15305: LD_INT 112
15307: PUSH
15308: LD_INT 113
15310: PUSH
15311: LD_INT 114
15313: PUSH
15314: LD_INT 115
15316: PUSH
15317: LD_INT 116
15319: PUSH
15320: LD_INT 117
15322: PUSH
15323: LD_INT 118
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: ST_TO_ADDR
// if result then
15350: LD_VAR 0 2
15354: IFFALSE 16140
// begin normal :=  ;
15356: LD_ADDR_VAR 0 5
15360: PUSH
15361: LD_STRING 
15363: ST_TO_ADDR
// hardcore :=  ;
15364: LD_ADDR_VAR 0 6
15368: PUSH
15369: LD_STRING 
15371: ST_TO_ADDR
// active :=  ;
15372: LD_ADDR_VAR 0 7
15376: PUSH
15377: LD_STRING 
15379: ST_TO_ADDR
// for i = 1 to normalCounter do
15380: LD_ADDR_VAR 0 8
15384: PUSH
15385: DOUBLE
15386: LD_INT 1
15388: DEC
15389: ST_TO_ADDR
15390: LD_EXP 28
15394: PUSH
15395: FOR_TO
15396: IFFALSE 15497
// begin tmp := 0 ;
15398: LD_ADDR_VAR 0 3
15402: PUSH
15403: LD_STRING 0
15405: ST_TO_ADDR
// if result [ 1 ] then
15406: LD_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: ARRAY
15414: IFFALSE 15479
// if result [ 1 ] [ 1 ] = i then
15416: LD_VAR 0 2
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PUSH
15425: LD_INT 1
15427: ARRAY
15428: PUSH
15429: LD_VAR 0 8
15433: EQUAL
15434: IFFALSE 15479
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15436: LD_ADDR_VAR 0 2
15440: PUSH
15441: LD_VAR 0 2
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: LD_VAR 0 2
15453: PUSH
15454: LD_INT 1
15456: ARRAY
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 3
15465: PPUSH
15466: CALL_OW 1
15470: ST_TO_ADDR
// tmp := 1 ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_STRING 1
15478: ST_TO_ADDR
// end ; normal := normal & tmp ;
15479: LD_ADDR_VAR 0 5
15483: PUSH
15484: LD_VAR 0 5
15488: PUSH
15489: LD_VAR 0 3
15493: STR
15494: ST_TO_ADDR
// end ;
15495: GO 15395
15497: POP
15498: POP
// for i = 1 to hardcoreCounter do
15499: LD_ADDR_VAR 0 8
15503: PUSH
15504: DOUBLE
15505: LD_INT 1
15507: DEC
15508: ST_TO_ADDR
15509: LD_EXP 29
15513: PUSH
15514: FOR_TO
15515: IFFALSE 15620
// begin tmp := 0 ;
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_STRING 0
15524: ST_TO_ADDR
// if result [ 2 ] then
15525: LD_VAR 0 2
15529: PUSH
15530: LD_INT 2
15532: ARRAY
15533: IFFALSE 15602
// if result [ 2 ] [ 1 ] = 100 + i then
15535: LD_VAR 0 2
15539: PUSH
15540: LD_INT 2
15542: ARRAY
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: PUSH
15548: LD_INT 100
15550: PUSH
15551: LD_VAR 0 8
15555: PLUS
15556: EQUAL
15557: IFFALSE 15602
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_INT 2
15571: PPUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: PPUSH
15581: LD_INT 1
15583: PPUSH
15584: CALL_OW 3
15588: PPUSH
15589: CALL_OW 1
15593: ST_TO_ADDR
// tmp := 1 ;
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: LD_STRING 1
15601: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15602: LD_ADDR_VAR 0 6
15606: PUSH
15607: LD_VAR 0 6
15611: PUSH
15612: LD_VAR 0 3
15616: STR
15617: ST_TO_ADDR
// end ;
15618: GO 15514
15620: POP
15621: POP
// if isGameLoad then
15622: LD_VAR 0 1
15626: IFFALSE 16101
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15628: LD_ADDR_VAR 0 4
15632: PUSH
15633: LD_EXP 32
15637: PUSH
15638: LD_EXP 31
15642: PUSH
15643: LD_EXP 33
15647: PUSH
15648: LD_EXP 30
15652: PUSH
15653: LD_EXP 34
15657: PUSH
15658: LD_EXP 35
15662: PUSH
15663: LD_EXP 36
15667: PUSH
15668: LD_EXP 37
15672: PUSH
15673: LD_EXP 38
15677: PUSH
15678: LD_EXP 39
15682: PUSH
15683: LD_EXP 40
15687: PUSH
15688: LD_EXP 41
15692: PUSH
15693: LD_EXP 42
15697: PUSH
15698: LD_EXP 43
15702: PUSH
15703: LD_EXP 51
15707: PUSH
15708: LD_EXP 52
15712: PUSH
15713: LD_EXP 53
15717: PUSH
15718: LD_EXP 54
15722: PUSH
15723: LD_EXP 56
15727: PUSH
15728: LD_EXP 57
15732: PUSH
15733: LD_EXP 58
15737: PUSH
15738: LD_EXP 61
15742: PUSH
15743: LD_EXP 63
15747: PUSH
15748: LD_EXP 64
15752: PUSH
15753: LD_EXP 65
15757: PUSH
15758: LD_EXP 67
15762: PUSH
15763: LD_EXP 68
15767: PUSH
15768: LD_EXP 71
15772: PUSH
15773: LD_EXP 72
15777: PUSH
15778: LD_EXP 73
15782: PUSH
15783: LD_EXP 74
15787: PUSH
15788: LD_EXP 75
15792: PUSH
15793: LD_EXP 76
15797: PUSH
15798: LD_EXP 77
15802: PUSH
15803: LD_EXP 78
15807: PUSH
15808: LD_EXP 79
15812: PUSH
15813: LD_EXP 44
15817: PUSH
15818: LD_EXP 45
15822: PUSH
15823: LD_EXP 48
15827: PUSH
15828: LD_EXP 49
15832: PUSH
15833: LD_EXP 50
15837: PUSH
15838: LD_EXP 46
15842: PUSH
15843: LD_EXP 47
15847: PUSH
15848: LD_EXP 55
15852: PUSH
15853: LD_EXP 59
15857: PUSH
15858: LD_EXP 60
15862: PUSH
15863: LD_EXP 62
15867: PUSH
15868: LD_EXP 66
15872: PUSH
15873: LD_EXP 69
15877: PUSH
15878: LD_EXP 70
15882: PUSH
15883: LD_EXP 80
15887: PUSH
15888: LD_EXP 81
15892: PUSH
15893: LD_EXP 82
15897: PUSH
15898: LD_EXP 83
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: ST_TO_ADDR
// tmp :=  ;
15959: LD_ADDR_VAR 0 3
15963: PUSH
15964: LD_STRING 
15966: ST_TO_ADDR
// for i = 1 to normalCounter do
15967: LD_ADDR_VAR 0 8
15971: PUSH
15972: DOUBLE
15973: LD_INT 1
15975: DEC
15976: ST_TO_ADDR
15977: LD_EXP 28
15981: PUSH
15982: FOR_TO
15983: IFFALSE 16019
// begin if flags [ i ] then
15985: LD_VAR 0 4
15989: PUSH
15990: LD_VAR 0 8
15994: ARRAY
15995: IFFALSE 16017
// tmp := tmp & i & ; ;
15997: LD_ADDR_VAR 0 3
16001: PUSH
16002: LD_VAR 0 3
16006: PUSH
16007: LD_VAR 0 8
16011: STR
16012: PUSH
16013: LD_STRING ;
16015: STR
16016: ST_TO_ADDR
// end ;
16017: GO 15982
16019: POP
16020: POP
// for i = 1 to hardcoreCounter do
16021: LD_ADDR_VAR 0 8
16025: PUSH
16026: DOUBLE
16027: LD_INT 1
16029: DEC
16030: ST_TO_ADDR
16031: LD_EXP 29
16035: PUSH
16036: FOR_TO
16037: IFFALSE 16083
// begin if flags [ normalCounter + i ] then
16039: LD_VAR 0 4
16043: PUSH
16044: LD_EXP 28
16048: PUSH
16049: LD_VAR 0 8
16053: PLUS
16054: ARRAY
16055: IFFALSE 16081
// tmp := tmp & ( 100 + i ) & ; ;
16057: LD_ADDR_VAR 0 3
16061: PUSH
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 100
16069: PUSH
16070: LD_VAR 0 8
16074: PLUS
16075: STR
16076: PUSH
16077: LD_STRING ;
16079: STR
16080: ST_TO_ADDR
// end ;
16081: GO 16036
16083: POP
16084: POP
// if tmp then
16085: LD_VAR 0 3
16089: IFFALSE 16101
// active := tmp ;
16091: LD_ADDR_VAR 0 7
16095: PUSH
16096: LD_VAR 0 3
16100: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16101: LD_STRING getStreamItemsFromMission("
16103: PUSH
16104: LD_VAR 0 5
16108: STR
16109: PUSH
16110: LD_STRING ","
16112: STR
16113: PUSH
16114: LD_VAR 0 6
16118: STR
16119: PUSH
16120: LD_STRING ","
16122: STR
16123: PUSH
16124: LD_VAR 0 7
16128: STR
16129: PUSH
16130: LD_STRING ")
16132: STR
16133: PPUSH
16134: CALL_OW 559
// end else
16138: GO 16147
// ToLua ( getStreamItemsFromMission("","","") ) ;
16140: LD_STRING getStreamItemsFromMission("","","")
16142: PPUSH
16143: CALL_OW 559
// end ;
16147: LD_VAR 0 2
16151: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16152: LD_EXP 27
16156: PUSH
16157: LD_EXP 32
16161: AND
16162: IFFALSE 16286
16164: GO 16166
16166: DISABLE
16167: LD_INT 0
16169: PPUSH
16170: PPUSH
// begin enable ;
16171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16172: LD_ADDR_VAR 0 2
16176: PUSH
16177: LD_INT 22
16179: PUSH
16180: LD_OWVAR 2
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: LD_INT 34
16194: PUSH
16195: LD_INT 7
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 34
16204: PUSH
16205: LD_INT 45
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 34
16214: PUSH
16215: LD_INT 28
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 34
16224: PUSH
16225: LD_INT 47
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: ST_TO_ADDR
// if not tmp then
16248: LD_VAR 0 2
16252: NOT
16253: IFFALSE 16257
// exit ;
16255: GO 16286
// for i in tmp do
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: LD_VAR 0 2
16266: PUSH
16267: FOR_IN
16268: IFFALSE 16284
// begin SetLives ( i , 0 ) ;
16270: LD_VAR 0 1
16274: PPUSH
16275: LD_INT 0
16277: PPUSH
16278: CALL_OW 234
// end ;
16282: GO 16267
16284: POP
16285: POP
// end ;
16286: PPOPN 2
16288: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16289: LD_EXP 27
16293: PUSH
16294: LD_EXP 33
16298: AND
16299: IFFALSE 16383
16301: GO 16303
16303: DISABLE
16304: LD_INT 0
16306: PPUSH
16307: PPUSH
// begin enable ;
16308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16309: LD_ADDR_VAR 0 2
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: LD_OWVAR 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 32
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PPUSH
16340: CALL_OW 69
16344: ST_TO_ADDR
// if not tmp then
16345: LD_VAR 0 2
16349: NOT
16350: IFFALSE 16354
// exit ;
16352: GO 16383
// for i in tmp do
16354: LD_ADDR_VAR 0 1
16358: PUSH
16359: LD_VAR 0 2
16363: PUSH
16364: FOR_IN
16365: IFFALSE 16381
// begin SetLives ( i , 0 ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_INT 0
16374: PPUSH
16375: CALL_OW 234
// end ;
16379: GO 16364
16381: POP
16382: POP
// end ;
16383: PPOPN 2
16385: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16386: LD_EXP 27
16390: PUSH
16391: LD_EXP 30
16395: AND
16396: IFFALSE 16489
16398: GO 16400
16400: DISABLE
16401: LD_INT 0
16403: PPUSH
// begin enable ;
16404: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_OWVAR 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 25
16427: PUSH
16428: LD_INT 5
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 25
16437: PUSH
16438: LD_INT 9
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 25
16447: PUSH
16448: LD_INT 8
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PPUSH
16465: CALL_OW 69
16469: PUSH
16470: FOR_IN
16471: IFFALSE 16487
// begin SetClass ( i , 1 ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_INT 1
16480: PPUSH
16481: CALL_OW 336
// end ;
16485: GO 16470
16487: POP
16488: POP
// end ;
16489: PPOPN 1
16491: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16492: LD_EXP 27
16496: PUSH
16497: LD_EXP 31
16501: AND
16502: PUSH
16503: LD_OWVAR 65
16507: PUSH
16508: LD_INT 7
16510: LESS
16511: AND
16512: IFFALSE 16526
16514: GO 16516
16516: DISABLE
// begin enable ;
16517: ENABLE
// game_speed := 7 ;
16518: LD_ADDR_OWVAR 65
16522: PUSH
16523: LD_INT 7
16525: ST_TO_ADDR
// end ;
16526: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16527: LD_EXP 27
16531: PUSH
16532: LD_EXP 34
16536: AND
16537: IFFALSE 16739
16539: GO 16541
16541: DISABLE
16542: LD_INT 0
16544: PPUSH
16545: PPUSH
16546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_INT 81
16554: PUSH
16555: LD_OWVAR 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 21
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: ST_TO_ADDR
// if not tmp then
16583: LD_VAR 0 3
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16739
// if tmp > 5 then
16592: LD_VAR 0 3
16596: PUSH
16597: LD_INT 5
16599: GREATER
16600: IFFALSE 16612
// k := 5 else
16602: LD_ADDR_VAR 0 2
16606: PUSH
16607: LD_INT 5
16609: ST_TO_ADDR
16610: GO 16622
// k := tmp ;
16612: LD_ADDR_VAR 0 2
16616: PUSH
16617: LD_VAR 0 3
16621: ST_TO_ADDR
// for i := 1 to k do
16622: LD_ADDR_VAR 0 1
16626: PUSH
16627: DOUBLE
16628: LD_INT 1
16630: DEC
16631: ST_TO_ADDR
16632: LD_VAR 0 2
16636: PUSH
16637: FOR_TO
16638: IFFALSE 16737
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16640: LD_VAR 0 3
16644: PUSH
16645: LD_VAR 0 1
16649: ARRAY
16650: PPUSH
16651: LD_VAR 0 1
16655: PUSH
16656: LD_INT 4
16658: MOD
16659: PUSH
16660: LD_INT 1
16662: PLUS
16663: PPUSH
16664: CALL_OW 259
16668: PUSH
16669: LD_INT 10
16671: LESS
16672: IFFALSE 16735
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16674: LD_VAR 0 3
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: LD_VAR 0 1
16689: PUSH
16690: LD_INT 4
16692: MOD
16693: PUSH
16694: LD_INT 1
16696: PLUS
16697: PPUSH
16698: LD_VAR 0 3
16702: PUSH
16703: LD_VAR 0 1
16707: ARRAY
16708: PPUSH
16709: LD_VAR 0 1
16713: PUSH
16714: LD_INT 4
16716: MOD
16717: PUSH
16718: LD_INT 1
16720: PLUS
16721: PPUSH
16722: CALL_OW 259
16726: PUSH
16727: LD_INT 1
16729: PLUS
16730: PPUSH
16731: CALL_OW 237
16735: GO 16637
16737: POP
16738: POP
// end ;
16739: PPOPN 3
16741: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16742: LD_EXP 27
16746: PUSH
16747: LD_EXP 35
16751: AND
16752: IFFALSE 16772
16754: GO 16756
16756: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16757: LD_INT 4
16759: PPUSH
16760: LD_OWVAR 2
16764: PPUSH
16765: LD_INT 0
16767: PPUSH
16768: CALL_OW 324
16772: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16773: LD_EXP 27
16777: PUSH
16778: LD_EXP 64
16782: AND
16783: IFFALSE 16803
16785: GO 16787
16787: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16788: LD_INT 19
16790: PPUSH
16791: LD_OWVAR 2
16795: PPUSH
16796: LD_INT 0
16798: PPUSH
16799: CALL_OW 324
16803: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16804: LD_EXP 27
16808: PUSH
16809: LD_EXP 36
16813: AND
16814: IFFALSE 16916
16816: GO 16818
16818: DISABLE
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
// begin enable ;
16823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 34
16846: PUSH
16847: LD_INT 11
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 34
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 69
16877: ST_TO_ADDR
// if not tmp then
16878: LD_VAR 0 2
16882: NOT
16883: IFFALSE 16887
// exit ;
16885: GO 16916
// for i in tmp do
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_VAR 0 2
16896: PUSH
16897: FOR_IN
16898: IFFALSE 16914
// begin SetLives ( i , 0 ) ;
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 234
// end ;
16912: GO 16897
16914: POP
16915: POP
// end ;
16916: PPOPN 2
16918: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16919: LD_EXP 27
16923: PUSH
16924: LD_EXP 37
16928: AND
16929: IFFALSE 16949
16931: GO 16933
16933: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16934: LD_INT 32
16936: PPUSH
16937: LD_OWVAR 2
16941: PPUSH
16942: LD_INT 0
16944: PPUSH
16945: CALL_OW 324
16949: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16950: LD_EXP 27
16954: PUSH
16955: LD_EXP 38
16959: AND
16960: IFFALSE 17141
16962: GO 16964
16964: DISABLE
16965: LD_INT 0
16967: PPUSH
16968: PPUSH
16969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16970: LD_ADDR_VAR 0 2
16974: PUSH
16975: LD_INT 22
16977: PUSH
16978: LD_OWVAR 2
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 33
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 69
17005: ST_TO_ADDR
// if not tmp then
17006: LD_VAR 0 2
17010: NOT
17011: IFFALSE 17015
// exit ;
17013: GO 17141
// side := 0 ;
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: LD_INT 0
17022: ST_TO_ADDR
// for i := 1 to 8 do
17023: LD_ADDR_VAR 0 1
17027: PUSH
17028: DOUBLE
17029: LD_INT 1
17031: DEC
17032: ST_TO_ADDR
17033: LD_INT 8
17035: PUSH
17036: FOR_TO
17037: IFFALSE 17085
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17039: LD_OWVAR 2
17043: PUSH
17044: LD_VAR 0 1
17048: NONEQUAL
17049: PUSH
17050: LD_OWVAR 2
17054: PPUSH
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 81
17064: PUSH
17065: LD_INT 2
17067: EQUAL
17068: AND
17069: IFFALSE 17083
// begin side := i ;
17071: LD_ADDR_VAR 0 3
17075: PUSH
17076: LD_VAR 0 1
17080: ST_TO_ADDR
// break ;
17081: GO 17085
// end ;
17083: GO 17036
17085: POP
17086: POP
// if not side then
17087: LD_VAR 0 3
17091: NOT
17092: IFFALSE 17096
// exit ;
17094: GO 17141
// for i := 1 to tmp do
17096: LD_ADDR_VAR 0 1
17100: PUSH
17101: DOUBLE
17102: LD_INT 1
17104: DEC
17105: ST_TO_ADDR
17106: LD_VAR 0 2
17110: PUSH
17111: FOR_TO
17112: IFFALSE 17139
// if Prob ( 60 ) then
17114: LD_INT 60
17116: PPUSH
17117: CALL_OW 13
17121: IFFALSE 17137
// SetSide ( i , side ) ;
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 235
17137: GO 17111
17139: POP
17140: POP
// end ;
17141: PPOPN 3
17143: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17144: LD_EXP 27
17148: PUSH
17149: LD_EXP 40
17153: AND
17154: IFFALSE 17273
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17162: LD_ADDR_VAR 0 1
17166: PUSH
17167: LD_INT 22
17169: PUSH
17170: LD_OWVAR 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 21
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: LD_INT 23
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 69
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17271
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 257
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: LD_INT 4
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: IN
17247: IFFALSE 17269
// SetClass ( un , rand ( 1 , 4 ) ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 1
17256: PPUSH
17257: LD_INT 4
17259: PPUSH
17260: CALL_OW 12
17264: PPUSH
17265: CALL_OW 336
17269: GO 17216
17271: POP
17272: POP
// end ;
17273: PPOPN 1
17275: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17276: LD_EXP 27
17280: PUSH
17281: LD_EXP 39
17285: AND
17286: IFFALSE 17365
17288: GO 17290
17290: DISABLE
17291: LD_INT 0
17293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17294: LD_ADDR_VAR 0 1
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_OWVAR 2
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 21
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 69
17329: ST_TO_ADDR
// if not tmp then
17330: LD_VAR 0 1
17334: NOT
17335: IFFALSE 17339
// exit ;
17337: GO 17365
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 1
17346: PPUSH
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 12
17356: ARRAY
17357: PPUSH
17358: LD_INT 100
17360: PPUSH
17361: CALL_OW 234
// end ;
17365: PPOPN 1
17367: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17368: LD_EXP 27
17372: PUSH
17373: LD_EXP 41
17377: AND
17378: IFFALSE 17476
17380: GO 17382
17382: DISABLE
17383: LD_INT 0
17385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: LD_INT 22
17393: PUSH
17394: LD_OWVAR 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 21
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: ST_TO_ADDR
// if not tmp then
17422: LD_VAR 0 1
17426: NOT
17427: IFFALSE 17431
// exit ;
17429: GO 17476
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17431: LD_VAR 0 1
17435: PUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: CALL_OW 12
17448: ARRAY
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: LD_INT 4
17455: PPUSH
17456: CALL_OW 12
17460: PPUSH
17461: LD_INT 3000
17463: PPUSH
17464: LD_INT 9000
17466: PPUSH
17467: CALL_OW 12
17471: PPUSH
17472: CALL_OW 492
// end ;
17476: PPOPN 1
17478: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17479: LD_EXP 27
17483: PUSH
17484: LD_EXP 42
17488: AND
17489: IFFALSE 17509
17491: GO 17493
17493: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17494: LD_INT 1
17496: PPUSH
17497: LD_OWVAR 2
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: CALL_OW 324
17509: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17510: LD_EXP 27
17514: PUSH
17515: LD_EXP 43
17519: AND
17520: IFFALSE 17603
17522: GO 17524
17524: DISABLE
17525: LD_INT 0
17527: PPUSH
17528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17529: LD_ADDR_VAR 0 2
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 21
17548: PUSH
17549: LD_INT 3
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: ST_TO_ADDR
// if not tmp then
17565: LD_VAR 0 2
17569: NOT
17570: IFFALSE 17574
// exit ;
17572: GO 17603
// for i in tmp do
17574: LD_ADDR_VAR 0 1
17578: PUSH
17579: LD_VAR 0 2
17583: PUSH
17584: FOR_IN
17585: IFFALSE 17601
// SetBLevel ( i , 10 ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_INT 10
17594: PPUSH
17595: CALL_OW 241
17599: GO 17584
17601: POP
17602: POP
// end ;
17603: PPOPN 2
17605: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17606: LD_EXP 27
17610: PUSH
17611: LD_EXP 44
17615: AND
17616: IFFALSE 17727
17618: GO 17620
17620: DISABLE
17621: LD_INT 0
17623: PPUSH
17624: PPUSH
17625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17626: LD_ADDR_VAR 0 3
17630: PUSH
17631: LD_INT 22
17633: PUSH
17634: LD_OWVAR 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 25
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: ST_TO_ADDR
// if not tmp then
17662: LD_VAR 0 3
17666: NOT
17667: IFFALSE 17671
// exit ;
17669: GO 17727
// un := tmp [ rand ( 1 , tmp ) ] ;
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_VAR 0 3
17680: PUSH
17681: LD_INT 1
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: CALL_OW 12
17693: ARRAY
17694: ST_TO_ADDR
// if Crawls ( un ) then
17695: LD_VAR 0 2
17699: PPUSH
17700: CALL_OW 318
17704: IFFALSE 17715
// ComWalk ( un ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17715: LD_VAR 0 2
17719: PPUSH
17720: LD_INT 5
17722: PPUSH
17723: CALL_OW 336
// end ;
17727: PPOPN 3
17729: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17730: LD_EXP 27
17734: PUSH
17735: LD_EXP 45
17739: AND
17740: PUSH
17741: LD_OWVAR 67
17745: PUSH
17746: LD_INT 4
17748: LESS
17749: AND
17750: IFFALSE 17769
17752: GO 17754
17754: DISABLE
// begin Difficulty := Difficulty + 1 ;
17755: LD_ADDR_OWVAR 67
17759: PUSH
17760: LD_OWVAR 67
17764: PUSH
17765: LD_INT 1
17767: PLUS
17768: ST_TO_ADDR
// end ;
17769: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17770: LD_EXP 27
17774: PUSH
17775: LD_EXP 46
17779: AND
17780: IFFALSE 17883
17782: GO 17784
17784: DISABLE
17785: LD_INT 0
17787: PPUSH
// begin for i := 1 to 5 do
17788: LD_ADDR_VAR 0 1
17792: PUSH
17793: DOUBLE
17794: LD_INT 1
17796: DEC
17797: ST_TO_ADDR
17798: LD_INT 5
17800: PUSH
17801: FOR_TO
17802: IFFALSE 17881
// begin uc_nation := nation_nature ;
17804: LD_ADDR_OWVAR 21
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// uc_side := 0 ;
17812: LD_ADDR_OWVAR 20
17816: PUSH
17817: LD_INT 0
17819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17820: LD_ADDR_OWVAR 29
17824: PUSH
17825: LD_INT 12
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: ST_TO_ADDR
// hc_agressivity := 20 ;
17835: LD_ADDR_OWVAR 35
17839: PUSH
17840: LD_INT 20
17842: ST_TO_ADDR
// hc_class := class_tiger ;
17843: LD_ADDR_OWVAR 28
17847: PUSH
17848: LD_INT 14
17850: ST_TO_ADDR
// hc_gallery :=  ;
17851: LD_ADDR_OWVAR 33
17855: PUSH
17856: LD_STRING 
17858: ST_TO_ADDR
// hc_name :=  ;
17859: LD_ADDR_OWVAR 26
17863: PUSH
17864: LD_STRING 
17866: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17867: CALL_OW 44
17871: PPUSH
17872: LD_INT 0
17874: PPUSH
17875: CALL_OW 51
// end ;
17879: GO 17801
17881: POP
17882: POP
// end ;
17883: PPOPN 1
17885: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17886: LD_EXP 27
17890: PUSH
17891: LD_EXP 47
17895: AND
17896: IFFALSE 17905
17898: GO 17900
17900: DISABLE
// StreamSibBomb ;
17901: CALL 17906 0 0
17905: END
// export function StreamSibBomb ; var i , x , y ; begin
17906: LD_INT 0
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
// result := false ;
17912: LD_ADDR_VAR 0 1
17916: PUSH
17917: LD_INT 0
17919: ST_TO_ADDR
// for i := 1 to 16 do
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: DOUBLE
17926: LD_INT 1
17928: DEC
17929: ST_TO_ADDR
17930: LD_INT 16
17932: PUSH
17933: FOR_TO
17934: IFFALSE 18133
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17936: LD_ADDR_VAR 0 3
17940: PUSH
17941: LD_INT 10
17943: PUSH
17944: LD_INT 20
17946: PUSH
17947: LD_INT 30
17949: PUSH
17950: LD_INT 40
17952: PUSH
17953: LD_INT 50
17955: PUSH
17956: LD_INT 60
17958: PUSH
17959: LD_INT 70
17961: PUSH
17962: LD_INT 80
17964: PUSH
17965: LD_INT 90
17967: PUSH
17968: LD_INT 100
17970: PUSH
17971: LD_INT 110
17973: PUSH
17974: LD_INT 120
17976: PUSH
17977: LD_INT 130
17979: PUSH
17980: LD_INT 140
17982: PUSH
17983: LD_INT 150
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PPUSH
18006: LD_INT 15
18008: PPUSH
18009: CALL_OW 12
18013: ARRAY
18014: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18015: LD_ADDR_VAR 0 4
18019: PUSH
18020: LD_INT 10
18022: PUSH
18023: LD_INT 20
18025: PUSH
18026: LD_INT 30
18028: PUSH
18029: LD_INT 40
18031: PUSH
18032: LD_INT 50
18034: PUSH
18035: LD_INT 60
18037: PUSH
18038: LD_INT 70
18040: PUSH
18041: LD_INT 80
18043: PUSH
18044: LD_INT 90
18046: PUSH
18047: LD_INT 100
18049: PUSH
18050: LD_INT 110
18052: PUSH
18053: LD_INT 120
18055: PUSH
18056: LD_INT 130
18058: PUSH
18059: LD_INT 140
18061: PUSH
18062: LD_INT 150
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: PPUSH
18085: LD_INT 15
18087: PPUSH
18088: CALL_OW 12
18092: ARRAY
18093: ST_TO_ADDR
// if ValidHex ( x , y ) then
18094: LD_VAR 0 3
18098: PPUSH
18099: LD_VAR 0 4
18103: PPUSH
18104: CALL_OW 488
18108: IFFALSE 18131
// begin result := [ x , y ] ;
18110: LD_ADDR_VAR 0 1
18114: PUSH
18115: LD_VAR 0 3
18119: PUSH
18120: LD_VAR 0 4
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: ST_TO_ADDR
// break ;
18129: GO 18133
// end ; end ;
18131: GO 17933
18133: POP
18134: POP
// if result then
18135: LD_VAR 0 1
18139: IFFALSE 18199
// begin ToLua ( playSibBomb() ) ;
18141: LD_STRING playSibBomb()
18143: PPUSH
18144: CALL_OW 559
// wait ( 0 0$14 ) ;
18148: LD_INT 490
18150: PPUSH
18151: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18155: LD_VAR 0 1
18159: PUSH
18160: LD_INT 1
18162: ARRAY
18163: PPUSH
18164: LD_VAR 0 1
18168: PUSH
18169: LD_INT 2
18171: ARRAY
18172: PPUSH
18173: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 1
18184: ARRAY
18185: PPUSH
18186: LD_VAR 0 1
18190: PUSH
18191: LD_INT 2
18193: ARRAY
18194: PPUSH
18195: CALL_OW 429
// end ; end ;
18199: LD_VAR 0 1
18203: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18204: LD_EXP 27
18208: PUSH
18209: LD_EXP 49
18213: AND
18214: IFFALSE 18226
18216: GO 18218
18218: DISABLE
// YouLost (  ) ;
18219: LD_STRING 
18221: PPUSH
18222: CALL_OW 104
18226: END
// every 0 0$1 trigger StreamModeActive and sFog do
18227: LD_EXP 27
18231: PUSH
18232: LD_EXP 48
18236: AND
18237: IFFALSE 18251
18239: GO 18241
18241: DISABLE
// FogOff ( your_side ) ;
18242: LD_OWVAR 2
18246: PPUSH
18247: CALL_OW 344
18251: END
// every 0 0$1 trigger StreamModeActive and sSun do
18252: LD_EXP 27
18256: PUSH
18257: LD_EXP 50
18261: AND
18262: IFFALSE 18290
18264: GO 18266
18266: DISABLE
// begin solar_recharge_percent := 0 ;
18267: LD_ADDR_OWVAR 79
18271: PUSH
18272: LD_INT 0
18274: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18275: LD_INT 10500
18277: PPUSH
18278: CALL_OW 67
// solar_recharge_percent := 100 ;
18282: LD_ADDR_OWVAR 79
18286: PUSH
18287: LD_INT 100
18289: ST_TO_ADDR
// end ;
18290: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18291: LD_EXP 27
18295: PUSH
18296: LD_EXP 51
18300: AND
18301: IFFALSE 18540
18303: GO 18305
18305: DISABLE
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
// begin tmp := [ ] ;
18311: LD_ADDR_VAR 0 3
18315: PUSH
18316: EMPTY
18317: ST_TO_ADDR
// for i := 1 to 6 do
18318: LD_ADDR_VAR 0 1
18322: PUSH
18323: DOUBLE
18324: LD_INT 1
18326: DEC
18327: ST_TO_ADDR
18328: LD_INT 6
18330: PUSH
18331: FOR_TO
18332: IFFALSE 18437
// begin uc_nation := nation_nature ;
18334: LD_ADDR_OWVAR 21
18338: PUSH
18339: LD_INT 0
18341: ST_TO_ADDR
// uc_side := 0 ;
18342: LD_ADDR_OWVAR 20
18346: PUSH
18347: LD_INT 0
18349: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18350: LD_ADDR_OWVAR 29
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: LD_INT 12
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: ST_TO_ADDR
// hc_agressivity := 20 ;
18365: LD_ADDR_OWVAR 35
18369: PUSH
18370: LD_INT 20
18372: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18373: LD_ADDR_OWVAR 28
18377: PUSH
18378: LD_INT 17
18380: ST_TO_ADDR
// hc_gallery :=  ;
18381: LD_ADDR_OWVAR 33
18385: PUSH
18386: LD_STRING 
18388: ST_TO_ADDR
// hc_name :=  ;
18389: LD_ADDR_OWVAR 26
18393: PUSH
18394: LD_STRING 
18396: ST_TO_ADDR
// un := CreateHuman ;
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: CALL_OW 44
18406: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18407: LD_VAR 0 2
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: CALL_OW 51
// tmp := tmp ^ un ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_VAR 0 3
18428: PUSH
18429: LD_VAR 0 2
18433: ADD
18434: ST_TO_ADDR
// end ;
18435: GO 18331
18437: POP
18438: POP
// repeat wait ( 0 0$1 ) ;
18439: LD_INT 35
18441: PPUSH
18442: CALL_OW 67
// for un in tmp do
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_VAR 0 3
18455: PUSH
18456: FOR_IN
18457: IFFALSE 18531
// begin if IsDead ( un ) then
18459: LD_VAR 0 2
18463: PPUSH
18464: CALL_OW 301
18468: IFFALSE 18488
// begin tmp := tmp diff un ;
18470: LD_ADDR_VAR 0 3
18474: PUSH
18475: LD_VAR 0 3
18479: PUSH
18480: LD_VAR 0 2
18484: DIFF
18485: ST_TO_ADDR
// continue ;
18486: GO 18456
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18488: LD_VAR 0 2
18492: PPUSH
18493: LD_INT 3
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PPUSH
18515: LD_VAR 0 2
18519: PPUSH
18520: CALL_OW 74
18524: PPUSH
18525: CALL_OW 115
// end ;
18529: GO 18456
18531: POP
18532: POP
// until not tmp ;
18533: LD_VAR 0 3
18537: NOT
18538: IFFALSE 18439
// end ;
18540: PPOPN 3
18542: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18543: LD_EXP 27
18547: PUSH
18548: LD_EXP 52
18552: AND
18553: IFFALSE 18607
18555: GO 18557
18557: DISABLE
// begin ToLua ( displayTroll(); ) ;
18558: LD_STRING displayTroll();
18560: PPUSH
18561: CALL_OW 559
// wait ( 3 3$00 ) ;
18565: LD_INT 6300
18567: PPUSH
18568: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18572: LD_STRING hideTroll();
18574: PPUSH
18575: CALL_OW 559
// wait ( 1 1$00 ) ;
18579: LD_INT 2100
18581: PPUSH
18582: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18586: LD_STRING displayTroll();
18588: PPUSH
18589: CALL_OW 559
// wait ( 1 1$00 ) ;
18593: LD_INT 2100
18595: PPUSH
18596: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18600: LD_STRING hideTroll();
18602: PPUSH
18603: CALL_OW 559
// end ;
18607: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18608: LD_EXP 27
18612: PUSH
18613: LD_EXP 53
18617: AND
18618: IFFALSE 18681
18620: GO 18622
18622: DISABLE
18623: LD_INT 0
18625: PPUSH
// begin p := 0 ;
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: LD_INT 0
18633: ST_TO_ADDR
// repeat game_speed := 1 ;
18634: LD_ADDR_OWVAR 65
18638: PUSH
18639: LD_INT 1
18641: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18642: LD_INT 35
18644: PPUSH
18645: CALL_OW 67
// p := p + 1 ;
18649: LD_ADDR_VAR 0 1
18653: PUSH
18654: LD_VAR 0 1
18658: PUSH
18659: LD_INT 1
18661: PLUS
18662: ST_TO_ADDR
// until p >= 60 ;
18663: LD_VAR 0 1
18667: PUSH
18668: LD_INT 60
18670: GREATEREQUAL
18671: IFFALSE 18634
// game_speed := 4 ;
18673: LD_ADDR_OWVAR 65
18677: PUSH
18678: LD_INT 4
18680: ST_TO_ADDR
// end ;
18681: PPOPN 1
18683: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18684: LD_EXP 27
18688: PUSH
18689: LD_EXP 54
18693: AND
18694: IFFALSE 18840
18696: GO 18698
18698: DISABLE
18699: LD_INT 0
18701: PPUSH
18702: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_OWVAR 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: LD_INT 30
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 30
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: ST_TO_ADDR
// if not depot then
18757: LD_VAR 0 1
18761: NOT
18762: IFFALSE 18766
// exit ;
18764: GO 18840
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18766: LD_ADDR_VAR 0 2
18770: PUSH
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 12
18788: ARRAY
18789: PPUSH
18790: CALL_OW 274
18794: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18795: LD_VAR 0 2
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: LD_INT 0
18805: PPUSH
18806: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18810: LD_VAR 0 2
18814: PPUSH
18815: LD_INT 2
18817: PPUSH
18818: LD_INT 0
18820: PPUSH
18821: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18825: LD_VAR 0 2
18829: PPUSH
18830: LD_INT 3
18832: PPUSH
18833: LD_INT 0
18835: PPUSH
18836: CALL_OW 277
// end ;
18840: PPOPN 2
18842: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18843: LD_EXP 27
18847: PUSH
18848: LD_EXP 55
18852: AND
18853: IFFALSE 18950
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 21
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 3
18890: PUSH
18891: LD_INT 23
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: PPUSH
18910: CALL_OW 69
18914: ST_TO_ADDR
// if not tmp then
18915: LD_VAR 0 1
18919: NOT
18920: IFFALSE 18924
// exit ;
18922: GO 18950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18924: LD_VAR 0 1
18928: PUSH
18929: LD_INT 1
18931: PPUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 12
18941: ARRAY
18942: PPUSH
18943: LD_INT 200
18945: PPUSH
18946: CALL_OW 234
// end ;
18950: PPOPN 1
18952: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18953: LD_EXP 27
18957: PUSH
18958: LD_EXP 56
18962: AND
18963: IFFALSE 19042
18965: GO 18967
18967: DISABLE
18968: LD_INT 0
18970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: LD_INT 22
18978: PUSH
18979: LD_OWVAR 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 21
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PPUSH
19002: CALL_OW 69
19006: ST_TO_ADDR
// if not tmp then
19007: LD_VAR 0 1
19011: NOT
19012: IFFALSE 19016
// exit ;
19014: GO 19042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19016: LD_VAR 0 1
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL_OW 12
19033: ARRAY
19034: PPUSH
19035: LD_INT 60
19037: PPUSH
19038: CALL_OW 234
// end ;
19042: PPOPN 1
19044: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19045: LD_EXP 27
19049: PUSH
19050: LD_EXP 57
19054: AND
19055: IFFALSE 19154
19057: GO 19059
19059: DISABLE
19060: LD_INT 0
19062: PPUSH
19063: PPUSH
// begin enable ;
19064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19065: LD_ADDR_VAR 0 1
19069: PUSH
19070: LD_INT 22
19072: PUSH
19073: LD_OWVAR 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 61
19084: PUSH
19085: EMPTY
19086: LIST
19087: PUSH
19088: LD_INT 33
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: PPUSH
19103: CALL_OW 69
19107: ST_TO_ADDR
// if not tmp then
19108: LD_VAR 0 1
19112: NOT
19113: IFFALSE 19117
// exit ;
19115: GO 19154
// for i in tmp do
19117: LD_ADDR_VAR 0 2
19121: PUSH
19122: LD_VAR 0 1
19126: PUSH
19127: FOR_IN
19128: IFFALSE 19152
// if IsControledBy ( i ) then
19130: LD_VAR 0 2
19134: PPUSH
19135: CALL_OW 312
19139: IFFALSE 19150
// ComUnlink ( i ) ;
19141: LD_VAR 0 2
19145: PPUSH
19146: CALL_OW 136
19150: GO 19127
19152: POP
19153: POP
// end ;
19154: PPOPN 2
19156: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19157: LD_EXP 27
19161: PUSH
19162: LD_EXP 58
19166: AND
19167: IFFALSE 19307
19169: GO 19171
19171: DISABLE
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
// begin ToLua ( displayPowell(); ) ;
19176: LD_STRING displayPowell();
19178: PPUSH
19179: CALL_OW 559
// uc_side := 0 ;
19183: LD_ADDR_OWVAR 20
19187: PUSH
19188: LD_INT 0
19190: ST_TO_ADDR
// uc_nation := 2 ;
19191: LD_ADDR_OWVAR 21
19195: PUSH
19196: LD_INT 2
19198: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19199: LD_ADDR_OWVAR 37
19203: PUSH
19204: LD_INT 14
19206: ST_TO_ADDR
// vc_engine := engine_siberite ;
19207: LD_ADDR_OWVAR 39
19211: PUSH
19212: LD_INT 3
19214: ST_TO_ADDR
// vc_control := control_apeman ;
19215: LD_ADDR_OWVAR 38
19219: PUSH
19220: LD_INT 5
19222: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19223: LD_ADDR_OWVAR 40
19227: PUSH
19228: LD_INT 29
19230: ST_TO_ADDR
// un := CreateVehicle ;
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: CALL_OW 45
19240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19253: LD_INT 35
19255: PPUSH
19256: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 22
19267: PUSH
19268: LD_OWVAR 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: PPUSH
19282: LD_VAR 0 2
19286: PPUSH
19287: CALL_OW 74
19291: PPUSH
19292: CALL_OW 115
// until IsDead ( un ) ;
19296: LD_VAR 0 2
19300: PPUSH
19301: CALL_OW 301
19305: IFFALSE 19253
// end ;
19307: PPOPN 2
19309: END
// every 0 0$1 trigger StreamModeActive and sStu do
19310: LD_EXP 27
19314: PUSH
19315: LD_EXP 66
19319: AND
19320: IFFALSE 19336
19322: GO 19324
19324: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19325: LD_STRING displayStucuk();
19327: PPUSH
19328: CALL_OW 559
// ResetFog ;
19332: CALL_OW 335
// end ;
19336: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19337: LD_EXP 27
19341: PUSH
19342: LD_EXP 59
19346: AND
19347: IFFALSE 19488
19349: GO 19351
19351: DISABLE
19352: LD_INT 0
19354: PPUSH
19355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19356: LD_ADDR_VAR 0 2
19360: PUSH
19361: LD_INT 22
19363: PUSH
19364: LD_OWVAR 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 21
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: ST_TO_ADDR
// if not tmp then
19392: LD_VAR 0 2
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19488
// un := tmp [ rand ( 1 , tmp ) ] ;
19401: LD_ADDR_VAR 0 1
19405: PUSH
19406: LD_VAR 0 2
19410: PUSH
19411: LD_INT 1
19413: PPUSH
19414: LD_VAR 0 2
19418: PPUSH
19419: CALL_OW 12
19423: ARRAY
19424: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19425: LD_VAR 0 1
19429: PPUSH
19430: LD_INT 0
19432: PPUSH
19433: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_OWVAR 3
19446: PUSH
19447: LD_VAR 0 1
19451: DIFF
19452: PPUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 74
19462: PPUSH
19463: CALL_OW 115
// wait ( 0 0$20 ) ;
19467: LD_INT 700
19469: PPUSH
19470: CALL_OW 67
// SetSide ( un , your_side ) ;
19474: LD_VAR 0 1
19478: PPUSH
19479: LD_OWVAR 2
19483: PPUSH
19484: CALL_OW 235
// end ;
19488: PPOPN 2
19490: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19491: LD_EXP 27
19495: PUSH
19496: LD_EXP 60
19500: AND
19501: IFFALSE 19607
19503: GO 19505
19505: DISABLE
19506: LD_INT 0
19508: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19509: LD_ADDR_VAR 0 1
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_OWVAR 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 30
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: ST_TO_ADDR
// if not depot then
19563: LD_VAR 0 1
19567: NOT
19568: IFFALSE 19572
// exit ;
19570: GO 19607
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19572: LD_VAR 0 1
19576: PUSH
19577: LD_INT 1
19579: ARRAY
19580: PPUSH
19581: CALL_OW 250
19585: PPUSH
19586: LD_VAR 0 1
19590: PUSH
19591: LD_INT 1
19593: ARRAY
19594: PPUSH
19595: CALL_OW 251
19599: PPUSH
19600: LD_INT 70
19602: PPUSH
19603: CALL_OW 495
// end ;
19607: PPOPN 1
19609: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19610: LD_EXP 27
19614: PUSH
19615: LD_EXP 61
19619: AND
19620: IFFALSE 19831
19622: GO 19624
19624: DISABLE
19625: LD_INT 0
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
19631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19632: LD_ADDR_VAR 0 5
19636: PUSH
19637: LD_INT 22
19639: PUSH
19640: LD_OWVAR 2
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 21
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PPUSH
19663: CALL_OW 69
19667: ST_TO_ADDR
// if not tmp then
19668: LD_VAR 0 5
19672: NOT
19673: IFFALSE 19677
// exit ;
19675: GO 19831
// for i in tmp do
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_VAR 0 5
19686: PUSH
19687: FOR_IN
19688: IFFALSE 19829
// begin d := rand ( 0 , 5 ) ;
19690: LD_ADDR_VAR 0 4
19694: PUSH
19695: LD_INT 0
19697: PPUSH
19698: LD_INT 5
19700: PPUSH
19701: CALL_OW 12
19705: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19706: LD_ADDR_VAR 0 2
19710: PUSH
19711: LD_VAR 0 1
19715: PPUSH
19716: CALL_OW 250
19720: PPUSH
19721: LD_VAR 0 4
19725: PPUSH
19726: LD_INT 3
19728: PPUSH
19729: LD_INT 12
19731: PPUSH
19732: CALL_OW 12
19736: PPUSH
19737: CALL_OW 272
19741: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 251
19756: PPUSH
19757: LD_VAR 0 4
19761: PPUSH
19762: LD_INT 3
19764: PPUSH
19765: LD_INT 12
19767: PPUSH
19768: CALL_OW 12
19772: PPUSH
19773: CALL_OW 273
19777: ST_TO_ADDR
// if ValidHex ( x , y ) then
19778: LD_VAR 0 2
19782: PPUSH
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 488
19792: IFFALSE 19827
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_VAR 0 2
19803: PPUSH
19804: LD_VAR 0 3
19808: PPUSH
19809: LD_INT 3
19811: PPUSH
19812: LD_INT 6
19814: PPUSH
19815: CALL_OW 12
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 483
// end ;
19827: GO 19687
19829: POP
19830: POP
// end ;
19831: PPOPN 5
19833: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19834: LD_EXP 27
19838: PUSH
19839: LD_EXP 62
19843: AND
19844: IFFALSE 19938
19846: GO 19848
19848: DISABLE
19849: LD_INT 0
19851: PPUSH
19852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19853: LD_ADDR_VAR 0 2
19857: PUSH
19858: LD_INT 22
19860: PUSH
19861: LD_OWVAR 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 32
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 21
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PPUSH
19895: CALL_OW 69
19899: ST_TO_ADDR
// if not tmp then
19900: LD_VAR 0 2
19904: NOT
19905: IFFALSE 19909
// exit ;
19907: GO 19938
// for i in tmp do
19909: LD_ADDR_VAR 0 1
19913: PUSH
19914: LD_VAR 0 2
19918: PUSH
19919: FOR_IN
19920: IFFALSE 19936
// SetFuel ( i , 0 ) ;
19922: LD_VAR 0 1
19926: PPUSH
19927: LD_INT 0
19929: PPUSH
19930: CALL_OW 240
19934: GO 19919
19936: POP
19937: POP
// end ;
19938: PPOPN 2
19940: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19941: LD_EXP 27
19945: PUSH
19946: LD_EXP 63
19950: AND
19951: IFFALSE 20017
19953: GO 19955
19955: DISABLE
19956: LD_INT 0
19958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19959: LD_ADDR_VAR 0 1
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_OWVAR 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 30
19978: PUSH
19979: LD_INT 29
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 69
19994: ST_TO_ADDR
// if not tmp then
19995: LD_VAR 0 1
19999: NOT
20000: IFFALSE 20004
// exit ;
20002: GO 20017
// DestroyUnit ( tmp [ 1 ] ) ;
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 1
20011: ARRAY
20012: PPUSH
20013: CALL_OW 65
// end ;
20017: PPOPN 1
20019: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20020: LD_EXP 27
20024: PUSH
20025: LD_EXP 65
20029: AND
20030: IFFALSE 20159
20032: GO 20034
20034: DISABLE
20035: LD_INT 0
20037: PPUSH
// begin uc_side := 0 ;
20038: LD_ADDR_OWVAR 20
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// uc_nation := nation_arabian ;
20046: LD_ADDR_OWVAR 21
20050: PUSH
20051: LD_INT 2
20053: ST_TO_ADDR
// hc_gallery :=  ;
20054: LD_ADDR_OWVAR 33
20058: PUSH
20059: LD_STRING 
20061: ST_TO_ADDR
// hc_name :=  ;
20062: LD_ADDR_OWVAR 26
20066: PUSH
20067: LD_STRING 
20069: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20070: LD_INT 1
20072: PPUSH
20073: LD_INT 11
20075: PPUSH
20076: LD_INT 10
20078: PPUSH
20079: CALL_OW 380
// un := CreateHuman ;
20083: LD_ADDR_VAR 0 1
20087: PUSH
20088: CALL_OW 44
20092: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_INT 1
20100: PPUSH
20101: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20105: LD_INT 35
20107: PPUSH
20108: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20112: LD_VAR 0 1
20116: PPUSH
20117: LD_INT 22
20119: PUSH
20120: LD_OWVAR 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PPUSH
20129: CALL_OW 69
20133: PPUSH
20134: LD_VAR 0 1
20138: PPUSH
20139: CALL_OW 74
20143: PPUSH
20144: CALL_OW 115
// until IsDead ( un ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: CALL_OW 301
20157: IFFALSE 20105
// end ;
20159: PPOPN 1
20161: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20162: LD_EXP 27
20166: PUSH
20167: LD_EXP 67
20171: AND
20172: IFFALSE 20184
20174: GO 20176
20176: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20177: LD_STRING earthquake(getX(game), 0, 32)
20179: PPUSH
20180: CALL_OW 559
20184: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20185: LD_EXP 27
20189: PUSH
20190: LD_EXP 68
20194: AND
20195: IFFALSE 20286
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
// begin enable ;
20203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_OWVAR 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 21
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 33
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: PPUSH
20246: CALL_OW 69
20250: ST_TO_ADDR
// if not tmp then
20251: LD_VAR 0 1
20255: NOT
20256: IFFALSE 20260
// exit ;
20258: GO 20286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20260: LD_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 12
20277: ARRAY
20278: PPUSH
20279: LD_INT 1
20281: PPUSH
20282: CALL_OW 234
// end ;
20286: PPOPN 1
20288: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20289: LD_EXP 27
20293: PUSH
20294: LD_EXP 69
20298: AND
20299: IFFALSE 20440
20301: GO 20303
20303: DISABLE
20304: LD_INT 0
20306: PPUSH
20307: PPUSH
20308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20309: LD_ADDR_VAR 0 3
20313: PUSH
20314: LD_INT 22
20316: PUSH
20317: LD_OWVAR 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 25
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PPUSH
20340: CALL_OW 69
20344: ST_TO_ADDR
// if not tmp then
20345: LD_VAR 0 3
20349: NOT
20350: IFFALSE 20354
// exit ;
20352: GO 20440
// un := tmp [ rand ( 1 , tmp ) ] ;
20354: LD_ADDR_VAR 0 2
20358: PUSH
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 1
20366: PPUSH
20367: LD_VAR 0 3
20371: PPUSH
20372: CALL_OW 12
20376: ARRAY
20377: ST_TO_ADDR
// if Crawls ( un ) then
20378: LD_VAR 0 2
20382: PPUSH
20383: CALL_OW 318
20387: IFFALSE 20398
// ComWalk ( un ) ;
20389: LD_VAR 0 2
20393: PPUSH
20394: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20398: LD_VAR 0 2
20402: PPUSH
20403: LD_INT 9
20405: PPUSH
20406: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20410: LD_INT 28
20412: PPUSH
20413: LD_OWVAR 2
20417: PPUSH
20418: LD_INT 2
20420: PPUSH
20421: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20425: LD_INT 29
20427: PPUSH
20428: LD_OWVAR 2
20432: PPUSH
20433: LD_INT 2
20435: PPUSH
20436: CALL_OW 322
// end ;
20440: PPOPN 3
20442: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20443: LD_EXP 27
20447: PUSH
20448: LD_EXP 70
20452: AND
20453: IFFALSE 20564
20455: GO 20457
20457: DISABLE
20458: LD_INT 0
20460: PPUSH
20461: PPUSH
20462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_INT 22
20470: PUSH
20471: LD_OWVAR 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 25
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: ST_TO_ADDR
// if not tmp then
20499: LD_VAR 0 3
20503: NOT
20504: IFFALSE 20508
// exit ;
20506: GO 20564
// un := tmp [ rand ( 1 , tmp ) ] ;
20508: LD_ADDR_VAR 0 2
20512: PUSH
20513: LD_VAR 0 3
20517: PUSH
20518: LD_INT 1
20520: PPUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: CALL_OW 12
20530: ARRAY
20531: ST_TO_ADDR
// if Crawls ( un ) then
20532: LD_VAR 0 2
20536: PPUSH
20537: CALL_OW 318
20541: IFFALSE 20552
// ComWalk ( un ) ;
20543: LD_VAR 0 2
20547: PPUSH
20548: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20552: LD_VAR 0 2
20556: PPUSH
20557: LD_INT 8
20559: PPUSH
20560: CALL_OW 336
// end ;
20564: PPOPN 3
20566: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20567: LD_EXP 27
20571: PUSH
20572: LD_EXP 71
20576: AND
20577: IFFALSE 20721
20579: GO 20581
20581: DISABLE
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_INT 22
20593: PUSH
20594: LD_OWVAR 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 21
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: PUSH
20616: LD_INT 34
20618: PUSH
20619: LD_INT 12
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 34
20628: PUSH
20629: LD_INT 51
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 34
20638: PUSH
20639: LD_INT 32
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: ST_TO_ADDR
// if not tmp then
20662: LD_VAR 0 2
20666: NOT
20667: IFFALSE 20671
// exit ;
20669: GO 20721
// for i in tmp do
20671: LD_ADDR_VAR 0 1
20675: PUSH
20676: LD_VAR 0 2
20680: PUSH
20681: FOR_IN
20682: IFFALSE 20719
// if GetCargo ( i , mat_artifact ) = 0 then
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_INT 4
20691: PPUSH
20692: CALL_OW 289
20696: PUSH
20697: LD_INT 0
20699: EQUAL
20700: IFFALSE 20717
// SetCargo ( i , mat_siberit , 100 ) ;
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_INT 3
20709: PPUSH
20710: LD_INT 100
20712: PPUSH
20713: CALL_OW 290
20717: GO 20681
20719: POP
20720: POP
// end ;
20721: PPOPN 2
20723: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20724: LD_EXP 27
20728: PUSH
20729: LD_EXP 72
20733: AND
20734: IFFALSE 20917
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PPUSH
20760: CALL_OW 69
20764: ST_TO_ADDR
// if not tmp then
20765: LD_VAR 0 2
20769: NOT
20770: IFFALSE 20774
// exit ;
20772: GO 20917
// for i := 1 to 2 do
20774: LD_ADDR_VAR 0 1
20778: PUSH
20779: DOUBLE
20780: LD_INT 1
20782: DEC
20783: ST_TO_ADDR
20784: LD_INT 2
20786: PUSH
20787: FOR_TO
20788: IFFALSE 20915
// begin uc_side := your_side ;
20790: LD_ADDR_OWVAR 20
20794: PUSH
20795: LD_OWVAR 2
20799: ST_TO_ADDR
// uc_nation := nation_american ;
20800: LD_ADDR_OWVAR 21
20804: PUSH
20805: LD_INT 1
20807: ST_TO_ADDR
// vc_chassis := us_morphling ;
20808: LD_ADDR_OWVAR 37
20812: PUSH
20813: LD_INT 5
20815: ST_TO_ADDR
// vc_engine := engine_siberite ;
20816: LD_ADDR_OWVAR 39
20820: PUSH
20821: LD_INT 3
20823: ST_TO_ADDR
// vc_control := control_computer ;
20824: LD_ADDR_OWVAR 38
20828: PUSH
20829: LD_INT 3
20831: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20832: LD_ADDR_OWVAR 40
20836: PUSH
20837: LD_INT 10
20839: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20840: LD_VAR 0 2
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: PPUSH
20849: CALL_OW 310
20853: NOT
20854: IFFALSE 20901
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20856: CALL_OW 45
20860: PPUSH
20861: LD_VAR 0 2
20865: PUSH
20866: LD_INT 1
20868: ARRAY
20869: PPUSH
20870: CALL_OW 250
20874: PPUSH
20875: LD_VAR 0 2
20879: PUSH
20880: LD_INT 1
20882: ARRAY
20883: PPUSH
20884: CALL_OW 251
20888: PPUSH
20889: LD_INT 12
20891: PPUSH
20892: LD_INT 1
20894: PPUSH
20895: CALL_OW 50
20899: GO 20913
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20901: CALL_OW 45
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 51
// end ;
20913: GO 20787
20915: POP
20916: POP
// end ;
20917: PPOPN 2
20919: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20920: LD_EXP 27
20924: PUSH
20925: LD_EXP 73
20929: AND
20930: IFFALSE 21152
20932: GO 20934
20934: DISABLE
20935: LD_INT 0
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
20942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20943: LD_ADDR_VAR 0 6
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_OWVAR 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 21
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 23
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: ST_TO_ADDR
// if not tmp then
20997: LD_VAR 0 6
21001: NOT
21002: IFFALSE 21006
// exit ;
21004: GO 21152
// s1 := rand ( 1 , 4 ) ;
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: LD_INT 1
21013: PPUSH
21014: LD_INT 4
21016: PPUSH
21017: CALL_OW 12
21021: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21022: LD_ADDR_VAR 0 4
21026: PUSH
21027: LD_VAR 0 6
21031: PUSH
21032: LD_INT 1
21034: ARRAY
21035: PPUSH
21036: LD_VAR 0 2
21040: PPUSH
21041: CALL_OW 259
21045: ST_TO_ADDR
// if s1 = 1 then
21046: LD_VAR 0 2
21050: PUSH
21051: LD_INT 1
21053: EQUAL
21054: IFFALSE 21074
// s2 := rand ( 2 , 4 ) else
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_INT 2
21063: PPUSH
21064: LD_INT 4
21066: PPUSH
21067: CALL_OW 12
21071: ST_TO_ADDR
21072: GO 21082
// s2 := 1 ;
21074: LD_ADDR_VAR 0 3
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21082: LD_ADDR_VAR 0 5
21086: PUSH
21087: LD_VAR 0 6
21091: PUSH
21092: LD_INT 1
21094: ARRAY
21095: PPUSH
21096: LD_VAR 0 3
21100: PPUSH
21101: CALL_OW 259
21105: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21106: LD_VAR 0 6
21110: PUSH
21111: LD_INT 1
21113: ARRAY
21114: PPUSH
21115: LD_VAR 0 2
21119: PPUSH
21120: LD_VAR 0 5
21124: PPUSH
21125: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21129: LD_VAR 0 6
21133: PUSH
21134: LD_INT 1
21136: ARRAY
21137: PPUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: LD_VAR 0 4
21147: PPUSH
21148: CALL_OW 237
// end ;
21152: PPOPN 6
21154: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21155: LD_EXP 27
21159: PUSH
21160: LD_EXP 74
21164: AND
21165: IFFALSE 21244
21167: GO 21169
21169: DISABLE
21170: LD_INT 0
21172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 30
21192: PUSH
21193: LD_INT 3
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: ST_TO_ADDR
// if not tmp then
21209: LD_VAR 0 1
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 12
21235: ARRAY
21236: PPUSH
21237: LD_INT 1
21239: PPUSH
21240: CALL_OW 234
// end ;
21244: PPOPN 1
21246: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21247: LD_EXP 27
21251: PUSH
21252: LD_EXP 75
21256: AND
21257: IFFALSE 21369
21259: GO 21261
21261: DISABLE
21262: LD_INT 0
21264: PPUSH
21265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21266: LD_ADDR_VAR 0 2
21270: PUSH
21271: LD_INT 22
21273: PUSH
21274: LD_OWVAR 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 27
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 26
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 28
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PPUSH
21326: CALL_OW 69
21330: ST_TO_ADDR
// if not tmp then
21331: LD_VAR 0 2
21335: NOT
21336: IFFALSE 21340
// exit ;
21338: GO 21369
// for i in tmp do
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_VAR 0 2
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21367
// SetLives ( i , 1 ) ;
21353: LD_VAR 0 1
21357: PPUSH
21358: LD_INT 1
21360: PPUSH
21361: CALL_OW 234
21365: GO 21350
21367: POP
21368: POP
// end ;
21369: PPOPN 2
21371: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21372: LD_EXP 27
21376: PUSH
21377: LD_EXP 76
21381: AND
21382: IFFALSE 21669
21384: GO 21386
21386: DISABLE
21387: LD_INT 0
21389: PPUSH
21390: PPUSH
21391: PPUSH
// begin i := rand ( 1 , 7 ) ;
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: LD_INT 1
21399: PPUSH
21400: LD_INT 7
21402: PPUSH
21403: CALL_OW 12
21407: ST_TO_ADDR
// case i of 1 :
21408: LD_VAR 0 1
21412: PUSH
21413: LD_INT 1
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21431
21421: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21422: LD_STRING earthquake(getX(game), 0, 32)
21424: PPUSH
21425: CALL_OW 559
21429: GO 21669
21431: LD_INT 2
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21453
21439: POP
// begin ToLua ( displayStucuk(); ) ;
21440: LD_STRING displayStucuk();
21442: PPUSH
21443: CALL_OW 559
// ResetFog ;
21447: CALL_OW 335
// end ; 3 :
21451: GO 21669
21453: LD_INT 3
21455: DOUBLE
21456: EQUAL
21457: IFTRUE 21461
21459: GO 21565
21461: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 22
21469: PUSH
21470: LD_OWVAR 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 25
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: ST_TO_ADDR
// if not tmp then
21498: LD_VAR 0 2
21502: NOT
21503: IFFALSE 21507
// exit ;
21505: GO 21669
// un := tmp [ rand ( 1 , tmp ) ] ;
21507: LD_ADDR_VAR 0 3
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 1
21519: PPUSH
21520: LD_VAR 0 2
21524: PPUSH
21525: CALL_OW 12
21529: ARRAY
21530: ST_TO_ADDR
// if Crawls ( un ) then
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 318
21540: IFFALSE 21551
// ComWalk ( un ) ;
21542: LD_VAR 0 3
21546: PPUSH
21547: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21551: LD_VAR 0 3
21555: PPUSH
21556: LD_INT 8
21558: PPUSH
21559: CALL_OW 336
// end ; 4 :
21563: GO 21669
21565: LD_INT 4
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21573
21571: GO 21647
21573: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_OWVAR 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 30
21593: PUSH
21594: LD_INT 29
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 69
21609: ST_TO_ADDR
// if not tmp then
21610: LD_VAR 0 2
21614: NOT
21615: IFFALSE 21619
// exit ;
21617: GO 21669
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21619: LD_VAR 0 2
21623: PUSH
21624: LD_INT 1
21626: ARRAY
21627: PPUSH
21628: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21632: LD_VAR 0 2
21636: PUSH
21637: LD_INT 1
21639: ARRAY
21640: PPUSH
21641: CALL_OW 65
// end ; 5 .. 7 :
21645: GO 21669
21647: LD_INT 5
21649: DOUBLE
21650: GREATEREQUAL
21651: IFFALSE 21659
21653: LD_INT 7
21655: DOUBLE
21656: LESSEQUAL
21657: IFTRUE 21661
21659: GO 21668
21661: POP
// StreamSibBomb ; end ;
21662: CALL 17906 0 0
21666: GO 21669
21668: POP
// end ;
21669: PPOPN 3
21671: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21672: LD_EXP 27
21676: PUSH
21677: LD_EXP 77
21681: AND
21682: IFFALSE 21838
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 81
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 21
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 21
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PPUSH
21741: CALL_OW 69
21745: ST_TO_ADDR
// if not tmp then
21746: LD_VAR 0 2
21750: NOT
21751: IFFALSE 21755
// exit ;
21753: GO 21838
// p := 0 ;
21755: LD_ADDR_VAR 0 3
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21763: LD_INT 35
21765: PPUSH
21766: CALL_OW 67
// p := p + 1 ;
21770: LD_ADDR_VAR 0 3
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 1
21782: PLUS
21783: ST_TO_ADDR
// for i in tmp do
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_VAR 0 2
21793: PUSH
21794: FOR_IN
21795: IFFALSE 21826
// if GetLives ( i ) < 1000 then
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 256
21806: PUSH
21807: LD_INT 1000
21809: LESS
21810: IFFALSE 21824
// SetLives ( i , 1000 ) ;
21812: LD_VAR 0 1
21816: PPUSH
21817: LD_INT 1000
21819: PPUSH
21820: CALL_OW 234
21824: GO 21794
21826: POP
21827: POP
// until p > 20 ;
21828: LD_VAR 0 3
21832: PUSH
21833: LD_INT 20
21835: GREATER
21836: IFFALSE 21763
// end ;
21838: PPOPN 3
21840: END
// every 0 0$1 trigger StreamModeActive and sTime do
21841: LD_EXP 27
21845: PUSH
21846: LD_EXP 78
21850: AND
21851: IFFALSE 21886
21853: GO 21855
21855: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21856: LD_INT 28
21858: PPUSH
21859: LD_OWVAR 2
21863: PPUSH
21864: LD_INT 2
21866: PPUSH
21867: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21871: LD_INT 30
21873: PPUSH
21874: LD_OWVAR 2
21878: PPUSH
21879: LD_INT 2
21881: PPUSH
21882: CALL_OW 322
// end ;
21886: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21887: LD_EXP 27
21891: PUSH
21892: LD_EXP 79
21896: AND
21897: IFFALSE 22018
21899: GO 21901
21901: DISABLE
21902: LD_INT 0
21904: PPUSH
21905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_OWVAR 2
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 21
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 3
21935: PUSH
21936: LD_INT 23
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: PPUSH
21955: CALL_OW 69
21959: ST_TO_ADDR
// if not tmp then
21960: LD_VAR 0 2
21964: NOT
21965: IFFALSE 21969
// exit ;
21967: GO 22018
// for i in tmp do
21969: LD_ADDR_VAR 0 1
21973: PUSH
21974: LD_VAR 0 2
21978: PUSH
21979: FOR_IN
21980: IFFALSE 22016
// begin if Crawls ( i ) then
21982: LD_VAR 0 1
21986: PPUSH
21987: CALL_OW 318
21991: IFFALSE 22002
// ComWalk ( i ) ;
21993: LD_VAR 0 1
21997: PPUSH
21998: CALL_OW 138
// SetClass ( i , 2 ) ;
22002: LD_VAR 0 1
22006: PPUSH
22007: LD_INT 2
22009: PPUSH
22010: CALL_OW 336
// end ;
22014: GO 21979
22016: POP
22017: POP
// end ;
22018: PPOPN 2
22020: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22021: LD_EXP 27
22025: PUSH
22026: LD_EXP 80
22030: AND
22031: IFFALSE 22319
22033: GO 22035
22035: DISABLE
22036: LD_INT 0
22038: PPUSH
22039: PPUSH
22040: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22041: LD_OWVAR 2
22045: PPUSH
22046: LD_INT 9
22048: PPUSH
22049: LD_INT 1
22051: PPUSH
22052: LD_INT 1
22054: PPUSH
22055: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22059: LD_INT 9
22061: PPUSH
22062: LD_OWVAR 2
22066: PPUSH
22067: CALL_OW 343
// uc_side := 9 ;
22071: LD_ADDR_OWVAR 20
22075: PUSH
22076: LD_INT 9
22078: ST_TO_ADDR
// uc_nation := 2 ;
22079: LD_ADDR_OWVAR 21
22083: PUSH
22084: LD_INT 2
22086: ST_TO_ADDR
// hc_name := Dark Warrior ;
22087: LD_ADDR_OWVAR 26
22091: PUSH
22092: LD_STRING Dark Warrior
22094: ST_TO_ADDR
// hc_gallery :=  ;
22095: LD_ADDR_OWVAR 33
22099: PUSH
22100: LD_STRING 
22102: ST_TO_ADDR
// hc_noskilllimit := true ;
22103: LD_ADDR_OWVAR 76
22107: PUSH
22108: LD_INT 1
22110: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22111: LD_ADDR_OWVAR 31
22115: PUSH
22116: LD_INT 30
22118: PUSH
22119: LD_INT 30
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: ST_TO_ADDR
// un := CreateHuman ;
22134: LD_ADDR_VAR 0 3
22138: PUSH
22139: CALL_OW 44
22143: ST_TO_ADDR
// hc_noskilllimit := false ;
22144: LD_ADDR_OWVAR 76
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22152: LD_VAR 0 3
22156: PPUSH
22157: LD_INT 1
22159: PPUSH
22160: CALL_OW 51
// ToLua ( playRanger() ) ;
22164: LD_STRING playRanger()
22166: PPUSH
22167: CALL_OW 559
// p := 0 ;
22171: LD_ADDR_VAR 0 2
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22179: LD_INT 35
22181: PPUSH
22182: CALL_OW 67
// p := p + 1 ;
22186: LD_ADDR_VAR 0 2
22190: PUSH
22191: LD_VAR 0 2
22195: PUSH
22196: LD_INT 1
22198: PLUS
22199: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 256
22209: PUSH
22210: LD_INT 1000
22212: LESS
22213: IFFALSE 22227
// SetLives ( un , 1000 ) ;
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 1000
22222: PPUSH
22223: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22227: LD_VAR 0 3
22231: PPUSH
22232: LD_INT 81
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 91
22246: PUSH
22247: LD_VAR 0 3
22251: PUSH
22252: LD_INT 30
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL_OW 69
22268: PPUSH
22269: LD_VAR 0 3
22273: PPUSH
22274: CALL_OW 74
22278: PPUSH
22279: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22283: LD_VAR 0 2
22287: PUSH
22288: LD_INT 80
22290: GREATER
22291: PUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: CALL_OW 301
22301: OR
22302: IFFALSE 22179
// if un then
22304: LD_VAR 0 3
22308: IFFALSE 22319
// RemoveUnit ( un ) ;
22310: LD_VAR 0 3
22314: PPUSH
22315: CALL_OW 64
// end ;
22319: PPOPN 3
22321: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22322: LD_EXP 81
22326: IFFALSE 22442
22328: GO 22330
22330: DISABLE
22331: LD_INT 0
22333: PPUSH
22334: PPUSH
22335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_INT 81
22343: PUSH
22344: LD_OWVAR 2
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 21
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PPUSH
22367: CALL_OW 69
22371: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22372: LD_STRING playComputer()
22374: PPUSH
22375: CALL_OW 559
// if not tmp then
22379: LD_VAR 0 2
22383: NOT
22384: IFFALSE 22388
// exit ;
22386: GO 22442
// for i in tmp do
22388: LD_ADDR_VAR 0 1
22392: PUSH
22393: LD_VAR 0 2
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22440
// for j := 1 to 4 do
22401: LD_ADDR_VAR 0 3
22405: PUSH
22406: DOUBLE
22407: LD_INT 1
22409: DEC
22410: ST_TO_ADDR
22411: LD_INT 4
22413: PUSH
22414: FOR_TO
22415: IFFALSE 22436
// SetSkill ( i , j , 10 ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: LD_INT 10
22429: PPUSH
22430: CALL_OW 237
22434: GO 22414
22436: POP
22437: POP
22438: GO 22398
22440: POP
22441: POP
// end ;
22442: PPOPN 3
22444: END
// every 0 0$1 trigger s30 do var i , tmp ;
22445: LD_EXP 82
22449: IFFALSE 22518
22451: GO 22453
22453: DISABLE
22454: LD_INT 0
22456: PPUSH
22457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22458: LD_ADDR_VAR 0 2
22462: PUSH
22463: LD_INT 22
22465: PUSH
22466: LD_OWVAR 2
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PPUSH
22475: CALL_OW 69
22479: ST_TO_ADDR
// if not tmp then
22480: LD_VAR 0 2
22484: NOT
22485: IFFALSE 22489
// exit ;
22487: GO 22518
// for i in tmp do
22489: LD_ADDR_VAR 0 1
22493: PUSH
22494: LD_VAR 0 2
22498: PUSH
22499: FOR_IN
22500: IFFALSE 22516
// SetLives ( i , 300 ) ;
22502: LD_VAR 0 1
22506: PPUSH
22507: LD_INT 300
22509: PPUSH
22510: CALL_OW 234
22514: GO 22499
22516: POP
22517: POP
// end ;
22518: PPOPN 2
22520: END
// every 0 0$1 trigger s60 do var i , tmp ;
22521: LD_EXP 83
22525: IFFALSE 22594
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_OWVAR 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PPUSH
22551: CALL_OW 69
22555: ST_TO_ADDR
// if not tmp then
22556: LD_VAR 0 2
22560: NOT
22561: IFFALSE 22565
// exit ;
22563: GO 22594
// for i in tmp do
22565: LD_ADDR_VAR 0 1
22569: PUSH
22570: LD_VAR 0 2
22574: PUSH
22575: FOR_IN
22576: IFFALSE 22592
// SetLives ( i , 600 ) ;
22578: LD_VAR 0 1
22582: PPUSH
22583: LD_INT 600
22585: PPUSH
22586: CALL_OW 234
22590: GO 22575
22592: POP
22593: POP
// end ;
22594: PPOPN 2
22596: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22597: LD_INT 0
22599: PPUSH
// case cmd of 301 :
22600: LD_VAR 0 1
22604: PUSH
22605: LD_INT 301
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22645
22613: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22614: LD_VAR 0 6
22618: PPUSH
22619: LD_VAR 0 7
22623: PPUSH
22624: LD_VAR 0 8
22628: PPUSH
22629: LD_VAR 0 4
22633: PPUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: CALL 23854 0 5
22643: GO 22766
22645: LD_INT 302
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22690
22653: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22654: LD_VAR 0 6
22658: PPUSH
22659: LD_VAR 0 7
22663: PPUSH
22664: LD_VAR 0 8
22668: PPUSH
22669: LD_VAR 0 9
22673: PPUSH
22674: LD_VAR 0 4
22678: PPUSH
22679: LD_VAR 0 5
22683: PPUSH
22684: CALL 23945 0 6
22688: GO 22766
22690: LD_INT 303
22692: DOUBLE
22693: EQUAL
22694: IFTRUE 22698
22696: GO 22735
22698: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22699: LD_VAR 0 6
22703: PPUSH
22704: LD_VAR 0 7
22708: PPUSH
22709: LD_VAR 0 8
22713: PPUSH
22714: LD_VAR 0 9
22718: PPUSH
22719: LD_VAR 0 4
22723: PPUSH
22724: LD_VAR 0 5
22728: PPUSH
22729: CALL 22771 0 6
22733: GO 22766
22735: LD_INT 304
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22765
22743: POP
// hHackTeleport ( unit , x , y ) ; end ;
22744: LD_VAR 0 2
22748: PPUSH
22749: LD_VAR 0 4
22753: PPUSH
22754: LD_VAR 0 5
22758: PPUSH
22759: CALL 24538 0 3
22763: GO 22766
22765: POP
// end ;
22766: LD_VAR 0 12
22770: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22771: LD_INT 0
22773: PPUSH
22774: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22775: LD_VAR 0 1
22779: PUSH
22780: LD_INT 1
22782: LESS
22783: PUSH
22784: LD_VAR 0 1
22788: PUSH
22789: LD_INT 3
22791: GREATER
22792: OR
22793: PUSH
22794: LD_VAR 0 5
22798: PPUSH
22799: LD_VAR 0 6
22803: PPUSH
22804: CALL_OW 428
22808: OR
22809: IFFALSE 22813
// exit ;
22811: GO 23541
// uc_side := your_side ;
22813: LD_ADDR_OWVAR 20
22817: PUSH
22818: LD_OWVAR 2
22822: ST_TO_ADDR
// uc_nation := nation ;
22823: LD_ADDR_OWVAR 21
22827: PUSH
22828: LD_VAR 0 1
22832: ST_TO_ADDR
// bc_level = 1 ;
22833: LD_ADDR_OWVAR 43
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
// case btype of 1 :
22841: LD_VAR 0 2
22845: PUSH
22846: LD_INT 1
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22865
22854: POP
// bc_type := b_depot ; 2 :
22855: LD_ADDR_OWVAR 42
22859: PUSH
22860: LD_INT 0
22862: ST_TO_ADDR
22863: GO 23485
22865: LD_INT 2
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22884
22873: POP
// bc_type := b_warehouse ; 3 :
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 1
22881: ST_TO_ADDR
22882: GO 23485
22884: LD_INT 3
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 22903
22892: POP
// bc_type := b_lab ; 4 .. 9 :
22893: LD_ADDR_OWVAR 42
22897: PUSH
22898: LD_INT 6
22900: ST_TO_ADDR
22901: GO 23485
22903: LD_INT 4
22905: DOUBLE
22906: GREATEREQUAL
22907: IFFALSE 22915
22909: LD_INT 9
22911: DOUBLE
22912: LESSEQUAL
22913: IFTRUE 22917
22915: GO 22977
22917: POP
// begin bc_type := b_lab_half ;
22918: LD_ADDR_OWVAR 42
22922: PUSH
22923: LD_INT 7
22925: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22926: LD_ADDR_OWVAR 44
22930: PUSH
22931: LD_INT 10
22933: PUSH
22934: LD_INT 11
22936: PUSH
22937: LD_INT 12
22939: PUSH
22940: LD_INT 15
22942: PUSH
22943: LD_INT 14
22945: PUSH
22946: LD_INT 13
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: PUSH
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 3
22964: MINUS
22965: ARRAY
22966: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22967: LD_ADDR_OWVAR 45
22971: PUSH
22972: LD_INT 9
22974: ST_TO_ADDR
// end ; 10 .. 13 :
22975: GO 23485
22977: LD_INT 10
22979: DOUBLE
22980: GREATEREQUAL
22981: IFFALSE 22989
22983: LD_INT 13
22985: DOUBLE
22986: LESSEQUAL
22987: IFTRUE 22991
22989: GO 23068
22991: POP
// begin bc_type := b_lab_full ;
22992: LD_ADDR_OWVAR 42
22996: PUSH
22997: LD_INT 8
22999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23000: LD_ADDR_OWVAR 44
23004: PUSH
23005: LD_INT 10
23007: PUSH
23008: LD_INT 12
23010: PUSH
23011: LD_INT 14
23013: PUSH
23014: LD_INT 13
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 9
23030: MINUS
23031: ARRAY
23032: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23033: LD_ADDR_OWVAR 45
23037: PUSH
23038: LD_INT 11
23040: PUSH
23041: LD_INT 15
23043: PUSH
23044: LD_INT 12
23046: PUSH
23047: LD_INT 15
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: PUSH
23056: LD_VAR 0 2
23060: PUSH
23061: LD_INT 9
23063: MINUS
23064: ARRAY
23065: ST_TO_ADDR
// end ; 14 :
23066: GO 23485
23068: LD_INT 14
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23087
23076: POP
// bc_type := b_workshop ; 15 :
23077: LD_ADDR_OWVAR 42
23081: PUSH
23082: LD_INT 2
23084: ST_TO_ADDR
23085: GO 23485
23087: LD_INT 15
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23106
23095: POP
// bc_type := b_factory ; 16 :
23096: LD_ADDR_OWVAR 42
23100: PUSH
23101: LD_INT 3
23103: ST_TO_ADDR
23104: GO 23485
23106: LD_INT 16
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23125
23114: POP
// bc_type := b_ext_gun ; 17 :
23115: LD_ADDR_OWVAR 42
23119: PUSH
23120: LD_INT 17
23122: ST_TO_ADDR
23123: GO 23485
23125: LD_INT 17
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23161
23133: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23134: LD_ADDR_OWVAR 42
23138: PUSH
23139: LD_INT 19
23141: PUSH
23142: LD_INT 23
23144: PUSH
23145: LD_INT 19
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: PUSH
23153: LD_VAR 0 1
23157: ARRAY
23158: ST_TO_ADDR
23159: GO 23485
23161: LD_INT 18
23163: DOUBLE
23164: EQUAL
23165: IFTRUE 23169
23167: GO 23180
23169: POP
// bc_type := b_ext_radar ; 19 :
23170: LD_ADDR_OWVAR 42
23174: PUSH
23175: LD_INT 20
23177: ST_TO_ADDR
23178: GO 23485
23180: LD_INT 19
23182: DOUBLE
23183: EQUAL
23184: IFTRUE 23188
23186: GO 23199
23188: POP
// bc_type := b_ext_radio ; 20 :
23189: LD_ADDR_OWVAR 42
23193: PUSH
23194: LD_INT 22
23196: ST_TO_ADDR
23197: GO 23485
23199: LD_INT 20
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23218
23207: POP
// bc_type := b_ext_siberium ; 21 :
23208: LD_ADDR_OWVAR 42
23212: PUSH
23213: LD_INT 21
23215: ST_TO_ADDR
23216: GO 23485
23218: LD_INT 21
23220: DOUBLE
23221: EQUAL
23222: IFTRUE 23226
23224: GO 23237
23226: POP
// bc_type := b_ext_computer ; 22 :
23227: LD_ADDR_OWVAR 42
23231: PUSH
23232: LD_INT 24
23234: ST_TO_ADDR
23235: GO 23485
23237: LD_INT 22
23239: DOUBLE
23240: EQUAL
23241: IFTRUE 23245
23243: GO 23256
23245: POP
// bc_type := b_ext_track ; 23 :
23246: LD_ADDR_OWVAR 42
23250: PUSH
23251: LD_INT 16
23253: ST_TO_ADDR
23254: GO 23485
23256: LD_INT 23
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23275
23264: POP
// bc_type := b_ext_laser ; 24 :
23265: LD_ADDR_OWVAR 42
23269: PUSH
23270: LD_INT 25
23272: ST_TO_ADDR
23273: GO 23485
23275: LD_INT 24
23277: DOUBLE
23278: EQUAL
23279: IFTRUE 23283
23281: GO 23294
23283: POP
// bc_type := b_control_tower ; 25 :
23284: LD_ADDR_OWVAR 42
23288: PUSH
23289: LD_INT 36
23291: ST_TO_ADDR
23292: GO 23485
23294: LD_INT 25
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23313
23302: POP
// bc_type := b_breastwork ; 26 :
23303: LD_ADDR_OWVAR 42
23307: PUSH
23308: LD_INT 31
23310: ST_TO_ADDR
23311: GO 23485
23313: LD_INT 26
23315: DOUBLE
23316: EQUAL
23317: IFTRUE 23321
23319: GO 23332
23321: POP
// bc_type := b_bunker ; 27 :
23322: LD_ADDR_OWVAR 42
23326: PUSH
23327: LD_INT 32
23329: ST_TO_ADDR
23330: GO 23485
23332: LD_INT 27
23334: DOUBLE
23335: EQUAL
23336: IFTRUE 23340
23338: GO 23351
23340: POP
// bc_type := b_turret ; 28 :
23341: LD_ADDR_OWVAR 42
23345: PUSH
23346: LD_INT 33
23348: ST_TO_ADDR
23349: GO 23485
23351: LD_INT 28
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23370
23359: POP
// bc_type := b_armoury ; 29 :
23360: LD_ADDR_OWVAR 42
23364: PUSH
23365: LD_INT 4
23367: ST_TO_ADDR
23368: GO 23485
23370: LD_INT 29
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23389
23378: POP
// bc_type := b_barracks ; 30 :
23379: LD_ADDR_OWVAR 42
23383: PUSH
23384: LD_INT 5
23386: ST_TO_ADDR
23387: GO 23485
23389: LD_INT 30
23391: DOUBLE
23392: EQUAL
23393: IFTRUE 23397
23395: GO 23408
23397: POP
// bc_type := b_solar_power ; 31 :
23398: LD_ADDR_OWVAR 42
23402: PUSH
23403: LD_INT 27
23405: ST_TO_ADDR
23406: GO 23485
23408: LD_INT 31
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23427
23416: POP
// bc_type := b_oil_power ; 32 :
23417: LD_ADDR_OWVAR 42
23421: PUSH
23422: LD_INT 26
23424: ST_TO_ADDR
23425: GO 23485
23427: LD_INT 32
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23446
23435: POP
// bc_type := b_siberite_power ; 33 :
23436: LD_ADDR_OWVAR 42
23440: PUSH
23441: LD_INT 28
23443: ST_TO_ADDR
23444: GO 23485
23446: LD_INT 33
23448: DOUBLE
23449: EQUAL
23450: IFTRUE 23454
23452: GO 23465
23454: POP
// bc_type := b_oil_mine ; 34 :
23455: LD_ADDR_OWVAR 42
23459: PUSH
23460: LD_INT 29
23462: ST_TO_ADDR
23463: GO 23485
23465: LD_INT 34
23467: DOUBLE
23468: EQUAL
23469: IFTRUE 23473
23471: GO 23484
23473: POP
// bc_type := b_siberite_mine ; end ;
23474: LD_ADDR_OWVAR 42
23478: PUSH
23479: LD_INT 30
23481: ST_TO_ADDR
23482: GO 23485
23484: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23485: LD_ADDR_VAR 0 8
23489: PUSH
23490: LD_VAR 0 5
23494: PPUSH
23495: LD_VAR 0 6
23499: PPUSH
23500: LD_VAR 0 3
23504: PPUSH
23505: CALL_OW 47
23509: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23510: LD_OWVAR 42
23514: PUSH
23515: LD_INT 32
23517: PUSH
23518: LD_INT 33
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: IN
23525: IFFALSE 23541
// PlaceWeaponTurret ( b , weapon ) ;
23527: LD_VAR 0 8
23531: PPUSH
23532: LD_VAR 0 4
23536: PPUSH
23537: CALL_OW 431
// end ;
23541: LD_VAR 0 7
23545: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23546: LD_INT 0
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23552: LD_ADDR_VAR 0 4
23556: PUSH
23557: LD_INT 22
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 30
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 30
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PPUSH
23601: CALL_OW 69
23605: ST_TO_ADDR
// if not tmp then
23606: LD_VAR 0 4
23610: NOT
23611: IFFALSE 23615
// exit ;
23613: GO 23674
// for i in tmp do
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_VAR 0 4
23624: PUSH
23625: FOR_IN
23626: IFFALSE 23672
// for j = 1 to 3 do
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: DOUBLE
23634: LD_INT 1
23636: DEC
23637: ST_TO_ADDR
23638: LD_INT 3
23640: PUSH
23641: FOR_TO
23642: IFFALSE 23668
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23644: LD_VAR 0 2
23648: PPUSH
23649: CALL_OW 274
23653: PPUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: LD_INT 99999
23661: PPUSH
23662: CALL_OW 277
23666: GO 23641
23668: POP
23669: POP
23670: GO 23625
23672: POP
23673: POP
// end ;
23674: LD_VAR 0 1
23678: RET
// export function hHackSetLevel10 ; var i , j ; begin
23679: LD_INT 0
23681: PPUSH
23682: PPUSH
23683: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23684: LD_ADDR_VAR 0 2
23688: PUSH
23689: LD_INT 21
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PPUSH
23699: CALL_OW 69
23703: PUSH
23704: FOR_IN
23705: IFFALSE 23757
// if IsSelected ( i ) then
23707: LD_VAR 0 2
23711: PPUSH
23712: CALL_OW 306
23716: IFFALSE 23755
// begin for j := 1 to 4 do
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: DOUBLE
23724: LD_INT 1
23726: DEC
23727: ST_TO_ADDR
23728: LD_INT 4
23730: PUSH
23731: FOR_TO
23732: IFFALSE 23753
// SetSkill ( i , j , 10 ) ;
23734: LD_VAR 0 2
23738: PPUSH
23739: LD_VAR 0 3
23743: PPUSH
23744: LD_INT 10
23746: PPUSH
23747: CALL_OW 237
23751: GO 23731
23753: POP
23754: POP
// end ;
23755: GO 23704
23757: POP
23758: POP
// end ;
23759: LD_VAR 0 1
23763: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23764: LD_INT 0
23766: PPUSH
23767: PPUSH
23768: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23769: LD_ADDR_VAR 0 2
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: LD_OWVAR 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 21
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: PUSH
23805: FOR_IN
23806: IFFALSE 23847
// begin for j := 1 to 4 do
23808: LD_ADDR_VAR 0 3
23812: PUSH
23813: DOUBLE
23814: LD_INT 1
23816: DEC
23817: ST_TO_ADDR
23818: LD_INT 4
23820: PUSH
23821: FOR_TO
23822: IFFALSE 23843
// SetSkill ( i , j , 10 ) ;
23824: LD_VAR 0 2
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: LD_INT 10
23836: PPUSH
23837: CALL_OW 237
23841: GO 23821
23843: POP
23844: POP
// end ;
23845: GO 23805
23847: POP
23848: POP
// end ;
23849: LD_VAR 0 1
23853: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23854: LD_INT 0
23856: PPUSH
// uc_side := your_side ;
23857: LD_ADDR_OWVAR 20
23861: PUSH
23862: LD_OWVAR 2
23866: ST_TO_ADDR
// uc_nation := nation ;
23867: LD_ADDR_OWVAR 21
23871: PUSH
23872: LD_VAR 0 1
23876: ST_TO_ADDR
// InitHc ;
23877: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23881: LD_INT 0
23883: PPUSH
23884: LD_VAR 0 2
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23898: LD_VAR 0 4
23902: PPUSH
23903: LD_VAR 0 5
23907: PPUSH
23908: CALL_OW 428
23912: PUSH
23913: LD_INT 0
23915: EQUAL
23916: IFFALSE 23940
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23918: CALL_OW 44
23922: PPUSH
23923: LD_VAR 0 4
23927: PPUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: LD_INT 1
23935: PPUSH
23936: CALL_OW 48
// end ;
23940: LD_VAR 0 6
23944: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23945: LD_INT 0
23947: PPUSH
23948: PPUSH
// uc_side := your_side ;
23949: LD_ADDR_OWVAR 20
23953: PUSH
23954: LD_OWVAR 2
23958: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23959: LD_VAR 0 1
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 5
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: IN
23986: IFFALSE 23998
// uc_nation := nation_american else
23988: LD_ADDR_OWVAR 21
23992: PUSH
23993: LD_INT 1
23995: ST_TO_ADDR
23996: GO 24041
// if chassis in [ 11 , 12 , 13 , 14 ] then
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 11
24005: PUSH
24006: LD_INT 12
24008: PUSH
24009: LD_INT 13
24011: PUSH
24012: LD_INT 14
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: IN
24021: IFFALSE 24033
// uc_nation := nation_arabian else
24023: LD_ADDR_OWVAR 21
24027: PUSH
24028: LD_INT 2
24030: ST_TO_ADDR
24031: GO 24041
// uc_nation := nation_russian ;
24033: LD_ADDR_OWVAR 21
24037: PUSH
24038: LD_INT 3
24040: ST_TO_ADDR
// vc_chassis := chassis ;
24041: LD_ADDR_OWVAR 37
24045: PUSH
24046: LD_VAR 0 1
24050: ST_TO_ADDR
// vc_engine := engine ;
24051: LD_ADDR_OWVAR 39
24055: PUSH
24056: LD_VAR 0 2
24060: ST_TO_ADDR
// vc_control := control ;
24061: LD_ADDR_OWVAR 38
24065: PUSH
24066: LD_VAR 0 3
24070: ST_TO_ADDR
// vc_weapon := weapon ;
24071: LD_ADDR_OWVAR 40
24075: PUSH
24076: LD_VAR 0 4
24080: ST_TO_ADDR
// un := CreateVehicle ;
24081: LD_ADDR_VAR 0 8
24085: PUSH
24086: CALL_OW 45
24090: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24091: LD_VAR 0 8
24095: PPUSH
24096: LD_INT 0
24098: PPUSH
24099: LD_INT 5
24101: PPUSH
24102: CALL_OW 12
24106: PPUSH
24107: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24111: LD_VAR 0 8
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: LD_VAR 0 6
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL_OW 48
// end ;
24133: LD_VAR 0 7
24137: RET
// export hInvincible ; every 1 do
24138: GO 24140
24140: DISABLE
// hInvincible := [ ] ;
24141: LD_ADDR_EXP 84
24145: PUSH
24146: EMPTY
24147: ST_TO_ADDR
24148: END
// every 10 do var i ;
24149: GO 24151
24151: DISABLE
24152: LD_INT 0
24154: PPUSH
// begin enable ;
24155: ENABLE
// if not hInvincible then
24156: LD_EXP 84
24160: NOT
24161: IFFALSE 24165
// exit ;
24163: GO 24209
// for i in hInvincible do
24165: LD_ADDR_VAR 0 1
24169: PUSH
24170: LD_EXP 84
24174: PUSH
24175: FOR_IN
24176: IFFALSE 24207
// if GetLives ( i ) < 1000 then
24178: LD_VAR 0 1
24182: PPUSH
24183: CALL_OW 256
24187: PUSH
24188: LD_INT 1000
24190: LESS
24191: IFFALSE 24205
// SetLives ( i , 1000 ) ;
24193: LD_VAR 0 1
24197: PPUSH
24198: LD_INT 1000
24200: PPUSH
24201: CALL_OW 234
24205: GO 24175
24207: POP
24208: POP
// end ;
24209: PPOPN 1
24211: END
// export function hHackInvincible ; var i ; begin
24212: LD_INT 0
24214: PPUSH
24215: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24216: LD_ADDR_VAR 0 2
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 21
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 21
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: PUSH
24254: FOR_IN
24255: IFFALSE 24316
// if IsSelected ( i ) then
24257: LD_VAR 0 2
24261: PPUSH
24262: CALL_OW 306
24266: IFFALSE 24314
// begin if i in hInvincible then
24268: LD_VAR 0 2
24272: PUSH
24273: LD_EXP 84
24277: IN
24278: IFFALSE 24298
// hInvincible := hInvincible diff i else
24280: LD_ADDR_EXP 84
24284: PUSH
24285: LD_EXP 84
24289: PUSH
24290: LD_VAR 0 2
24294: DIFF
24295: ST_TO_ADDR
24296: GO 24314
// hInvincible := hInvincible union i ;
24298: LD_ADDR_EXP 84
24302: PUSH
24303: LD_EXP 84
24307: PUSH
24308: LD_VAR 0 2
24312: UNION
24313: ST_TO_ADDR
// end ;
24314: GO 24254
24316: POP
24317: POP
// end ;
24318: LD_VAR 0 1
24322: RET
// export function hHackInvisible ; var i , j ; begin
24323: LD_INT 0
24325: PPUSH
24326: PPUSH
24327: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24328: LD_ADDR_VAR 0 2
24332: PUSH
24333: LD_INT 21
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PPUSH
24343: CALL_OW 69
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24373
// if IsSelected ( i ) then
24351: LD_VAR 0 2
24355: PPUSH
24356: CALL_OW 306
24360: IFFALSE 24371
// ComForceInvisible ( i ) ;
24362: LD_VAR 0 2
24366: PPUSH
24367: CALL_OW 496
24371: GO 24348
24373: POP
24374: POP
// end ;
24375: LD_VAR 0 1
24379: RET
// export function hHackChangeYourSide ; begin
24380: LD_INT 0
24382: PPUSH
// if your_side = 8 then
24383: LD_OWVAR 2
24387: PUSH
24388: LD_INT 8
24390: EQUAL
24391: IFFALSE 24403
// your_side := 0 else
24393: LD_ADDR_OWVAR 2
24397: PUSH
24398: LD_INT 0
24400: ST_TO_ADDR
24401: GO 24417
// your_side := your_side + 1 ;
24403: LD_ADDR_OWVAR 2
24407: PUSH
24408: LD_OWVAR 2
24412: PUSH
24413: LD_INT 1
24415: PLUS
24416: ST_TO_ADDR
// end ;
24417: LD_VAR 0 1
24421: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24422: LD_INT 0
24424: PPUSH
24425: PPUSH
24426: PPUSH
// for i in all_units do
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_OWVAR 3
24436: PUSH
24437: FOR_IN
24438: IFFALSE 24516
// if IsSelected ( i ) then
24440: LD_VAR 0 2
24444: PPUSH
24445: CALL_OW 306
24449: IFFALSE 24514
// begin j := GetSide ( i ) ;
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_VAR 0 2
24460: PPUSH
24461: CALL_OW 255
24465: ST_TO_ADDR
// if j = 8 then
24466: LD_VAR 0 3
24470: PUSH
24471: LD_INT 8
24473: EQUAL
24474: IFFALSE 24486
// j := 0 else
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_INT 0
24483: ST_TO_ADDR
24484: GO 24500
// j := j + 1 ;
24486: LD_ADDR_VAR 0 3
24490: PUSH
24491: LD_VAR 0 3
24495: PUSH
24496: LD_INT 1
24498: PLUS
24499: ST_TO_ADDR
// SetSide ( i , j ) ;
24500: LD_VAR 0 2
24504: PPUSH
24505: LD_VAR 0 3
24509: PPUSH
24510: CALL_OW 235
// end ;
24514: GO 24437
24516: POP
24517: POP
// end ;
24518: LD_VAR 0 1
24522: RET
// export function hHackFog ; begin
24523: LD_INT 0
24525: PPUSH
// FogOff ( true ) ;
24526: LD_INT 1
24528: PPUSH
24529: CALL_OW 344
// end ;
24533: LD_VAR 0 1
24537: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24538: LD_INT 0
24540: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24541: LD_VAR 0 1
24545: PPUSH
24546: LD_VAR 0 2
24550: PPUSH
24551: LD_VAR 0 3
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: LD_INT 1
24561: PPUSH
24562: CALL_OW 483
// CenterOnXY ( x , y ) ;
24566: LD_VAR 0 2
24570: PPUSH
24571: LD_VAR 0 3
24575: PPUSH
24576: CALL_OW 84
// end ;
24580: LD_VAR 0 4
24584: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24589: LD_VAR 0 1
24593: NOT
24594: PUSH
24595: LD_VAR 0 2
24599: PPUSH
24600: LD_VAR 0 3
24604: PPUSH
24605: CALL_OW 488
24609: NOT
24610: OR
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 266
24621: PUSH
24622: LD_INT 3
24624: NONEQUAL
24625: PUSH
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL_OW 247
24635: PUSH
24636: LD_INT 1
24638: EQUAL
24639: NOT
24640: AND
24641: OR
24642: IFFALSE 24646
// exit ;
24644: GO 24795
// if GetType ( factory ) = unit_human then
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 247
24655: PUSH
24656: LD_INT 1
24658: EQUAL
24659: IFFALSE 24676
// factory := IsInUnit ( factory ) ;
24661: LD_ADDR_VAR 0 1
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 310
24675: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 266
24685: PUSH
24686: LD_INT 3
24688: NONEQUAL
24689: IFFALSE 24693
// exit ;
24691: GO 24795
// if HexInfo ( x , y ) = factory then
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: CALL_OW 428
24707: PUSH
24708: LD_VAR 0 1
24712: EQUAL
24713: IFFALSE 24740
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24715: LD_ADDR_EXP 85
24719: PUSH
24720: LD_EXP 85
24724: PPUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 1
24737: ST_TO_ADDR
24738: GO 24791
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24740: LD_ADDR_EXP 85
24744: PUSH
24745: LD_EXP 85
24749: PPUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_VAR 0 1
24759: PPUSH
24760: CALL_OW 255
24764: PUSH
24765: LD_VAR 0 1
24769: PUSH
24770: LD_VAR 0 2
24774: PUSH
24775: LD_VAR 0 3
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: PPUSH
24786: CALL_OW 1
24790: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24791: CALL 24800 0 0
// end ;
24795: LD_VAR 0 4
24799: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24800: LD_INT 0
24802: PPUSH
24803: PPUSH
24804: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24805: LD_STRING resetFactoryWaypoint();
24807: PPUSH
24808: CALL_OW 559
// if factoryWaypoints then
24812: LD_EXP 85
24816: IFFALSE 24942
// begin list := PrepareArray ( factoryWaypoints ) ;
24818: LD_ADDR_VAR 0 3
24822: PUSH
24823: LD_EXP 85
24827: PPUSH
24828: CALL 72250 0 1
24832: ST_TO_ADDR
// for i := 1 to list do
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: DOUBLE
24839: LD_INT 1
24841: DEC
24842: ST_TO_ADDR
24843: LD_VAR 0 3
24847: PUSH
24848: FOR_TO
24849: IFFALSE 24940
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24851: LD_STRING setFactoryWaypointXY(
24853: PUSH
24854: LD_VAR 0 3
24858: PUSH
24859: LD_VAR 0 2
24863: ARRAY
24864: PUSH
24865: LD_INT 1
24867: ARRAY
24868: STR
24869: PUSH
24870: LD_STRING ,
24872: STR
24873: PUSH
24874: LD_VAR 0 3
24878: PUSH
24879: LD_VAR 0 2
24883: ARRAY
24884: PUSH
24885: LD_INT 2
24887: ARRAY
24888: STR
24889: PUSH
24890: LD_STRING ,
24892: STR
24893: PUSH
24894: LD_VAR 0 3
24898: PUSH
24899: LD_VAR 0 2
24903: ARRAY
24904: PUSH
24905: LD_INT 3
24907: ARRAY
24908: STR
24909: PUSH
24910: LD_STRING ,
24912: STR
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_VAR 0 2
24923: ARRAY
24924: PUSH
24925: LD_INT 4
24927: ARRAY
24928: STR
24929: PUSH
24930: LD_STRING )
24932: STR
24933: PPUSH
24934: CALL_OW 559
24938: GO 24848
24940: POP
24941: POP
// end ; end ;
24942: LD_VAR 0 1
24946: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24947: LD_INT 0
24949: PPUSH
// if HexInfo ( x , y ) = warehouse then
24950: LD_VAR 0 2
24954: PPUSH
24955: LD_VAR 0 3
24959: PPUSH
24960: CALL_OW 428
24964: PUSH
24965: LD_VAR 0 1
24969: EQUAL
24970: IFFALSE 24997
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24972: LD_ADDR_EXP 86
24976: PUSH
24977: LD_EXP 86
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: LD_INT 0
24989: PPUSH
24990: CALL_OW 1
24994: ST_TO_ADDR
24995: GO 25048
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24997: LD_ADDR_EXP 86
25001: PUSH
25002: LD_EXP 86
25006: PPUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 255
25021: PUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_VAR 0 2
25031: PUSH
25032: LD_VAR 0 3
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 1
25047: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25048: CALL 25057 0 0
// end ;
25052: LD_VAR 0 4
25056: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25057: LD_INT 0
25059: PPUSH
25060: PPUSH
25061: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25062: LD_STRING resetWarehouseGatheringPoints();
25064: PPUSH
25065: CALL_OW 559
// if warehouseGatheringPoints then
25069: LD_EXP 86
25073: IFFALSE 25199
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_EXP 86
25084: PPUSH
25085: CALL 72250 0 1
25089: ST_TO_ADDR
// for i := 1 to list do
25090: LD_ADDR_VAR 0 2
25094: PUSH
25095: DOUBLE
25096: LD_INT 1
25098: DEC
25099: ST_TO_ADDR
25100: LD_VAR 0 3
25104: PUSH
25105: FOR_TO
25106: IFFALSE 25197
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25108: LD_STRING setWarehouseGatheringPointXY(
25110: PUSH
25111: LD_VAR 0 3
25115: PUSH
25116: LD_VAR 0 2
25120: ARRAY
25121: PUSH
25122: LD_INT 1
25124: ARRAY
25125: STR
25126: PUSH
25127: LD_STRING ,
25129: STR
25130: PUSH
25131: LD_VAR 0 3
25135: PUSH
25136: LD_VAR 0 2
25140: ARRAY
25141: PUSH
25142: LD_INT 2
25144: ARRAY
25145: STR
25146: PUSH
25147: LD_STRING ,
25149: STR
25150: PUSH
25151: LD_VAR 0 3
25155: PUSH
25156: LD_VAR 0 2
25160: ARRAY
25161: PUSH
25162: LD_INT 3
25164: ARRAY
25165: STR
25166: PUSH
25167: LD_STRING ,
25169: STR
25170: PUSH
25171: LD_VAR 0 3
25175: PUSH
25176: LD_VAR 0 2
25180: ARRAY
25181: PUSH
25182: LD_INT 4
25184: ARRAY
25185: STR
25186: PUSH
25187: LD_STRING )
25189: STR
25190: PPUSH
25191: CALL_OW 559
25195: GO 25105
25197: POP
25198: POP
// end ; end ;
25199: LD_VAR 0 1
25203: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25204: LD_EXP 86
25208: IFFALSE 25893
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
// begin enable ;
25224: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_EXP 86
25234: PPUSH
25235: CALL 72250 0 1
25239: ST_TO_ADDR
// if not list then
25240: LD_VAR 0 3
25244: NOT
25245: IFFALSE 25249
// exit ;
25247: GO 25893
// for i := 1 to list do
25249: LD_ADDR_VAR 0 1
25253: PUSH
25254: DOUBLE
25255: LD_INT 1
25257: DEC
25258: ST_TO_ADDR
25259: LD_VAR 0 3
25263: PUSH
25264: FOR_TO
25265: IFFALSE 25891
// begin depot := list [ i ] [ 2 ] ;
25267: LD_ADDR_VAR 0 8
25271: PUSH
25272: LD_VAR 0 3
25276: PUSH
25277: LD_VAR 0 1
25281: ARRAY
25282: PUSH
25283: LD_INT 2
25285: ARRAY
25286: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25287: LD_ADDR_VAR 0 5
25291: PUSH
25292: LD_VAR 0 3
25296: PUSH
25297: LD_VAR 0 1
25301: ARRAY
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25307: LD_VAR 0 8
25311: PPUSH
25312: CALL_OW 301
25316: PUSH
25317: LD_VAR 0 5
25321: PUSH
25322: LD_VAR 0 8
25326: PPUSH
25327: CALL_OW 255
25331: NONEQUAL
25332: OR
25333: IFFALSE 25362
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25335: LD_ADDR_EXP 86
25339: PUSH
25340: LD_EXP 86
25344: PPUSH
25345: LD_VAR 0 8
25349: PPUSH
25350: LD_INT 0
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// exit ;
25358: POP
25359: POP
25360: GO 25893
// end ; x := list [ i ] [ 3 ] ;
25362: LD_ADDR_VAR 0 6
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 1
25376: ARRAY
25377: PUSH
25378: LD_INT 3
25380: ARRAY
25381: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25382: LD_ADDR_VAR 0 7
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: PUSH
25398: LD_INT 4
25400: ARRAY
25401: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25402: LD_ADDR_VAR 0 9
25406: PUSH
25407: LD_VAR 0 6
25411: PPUSH
25412: LD_VAR 0 7
25416: PPUSH
25417: LD_INT 16
25419: PPUSH
25420: CALL 70838 0 3
25424: ST_TO_ADDR
// if not cratesNearbyPoint then
25425: LD_VAR 0 9
25429: NOT
25430: IFFALSE 25436
// exit ;
25432: POP
25433: POP
25434: GO 25893
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25436: LD_ADDR_VAR 0 4
25440: PUSH
25441: LD_INT 22
25443: PUSH
25444: LD_VAR 0 5
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 60
25458: PUSH
25459: EMPTY
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 91
25468: PUSH
25469: LD_VAR 0 8
25473: PUSH
25474: LD_INT 6
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 25
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 25
25497: PUSH
25498: LD_INT 16
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 69
25520: PUSH
25521: LD_VAR 0 8
25525: PPUSH
25526: CALL_OW 313
25530: PPUSH
25531: LD_INT 3
25533: PUSH
25534: LD_INT 60
25536: PUSH
25537: EMPTY
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 25
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 25
25559: PUSH
25560: LD_INT 16
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL_OW 72
25580: UNION
25581: ST_TO_ADDR
// if tmp then
25582: LD_VAR 0 4
25586: IFFALSE 25666
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25588: LD_ADDR_VAR 0 4
25592: PUSH
25593: LD_VAR 0 4
25597: PPUSH
25598: LD_INT 3
25600: PPUSH
25601: CALL 68807 0 2
25605: ST_TO_ADDR
// for j in tmp do
25606: LD_ADDR_VAR 0 2
25610: PUSH
25611: LD_VAR 0 4
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25660
// begin if IsInUnit ( j ) then
25619: LD_VAR 0 2
25623: PPUSH
25624: CALL_OW 310
25628: IFFALSE 25639
// ComExit ( j ) ;
25630: LD_VAR 0 2
25634: PPUSH
25635: CALL 68890 0 1
// AddComCollect ( j , x , y ) ;
25639: LD_VAR 0 2
25643: PPUSH
25644: LD_VAR 0 6
25648: PPUSH
25649: LD_VAR 0 7
25653: PPUSH
25654: CALL_OW 177
// end ;
25658: GO 25616
25660: POP
25661: POP
// exit ;
25662: POP
25663: POP
25664: GO 25893
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25666: LD_ADDR_VAR 0 4
25670: PUSH
25671: LD_INT 22
25673: PUSH
25674: LD_VAR 0 5
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 91
25685: PUSH
25686: LD_VAR 0 8
25690: PUSH
25691: LD_INT 8
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 34
25704: PUSH
25705: LD_INT 12
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 34
25714: PUSH
25715: LD_INT 51
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 34
25724: PUSH
25725: LD_INT 32
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 34
25734: PUSH
25735: LD_INT 89
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 69
25758: ST_TO_ADDR
// if tmp then
25759: LD_VAR 0 4
25763: IFFALSE 25889
// begin for j in tmp do
25765: LD_ADDR_VAR 0 2
25769: PUSH
25770: LD_VAR 0 4
25774: PUSH
25775: FOR_IN
25776: IFFALSE 25887
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25778: LD_VAR 0 2
25782: PPUSH
25783: CALL_OW 262
25787: PUSH
25788: LD_INT 3
25790: EQUAL
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: CALL_OW 261
25801: PUSH
25802: LD_INT 20
25804: GREATER
25805: OR
25806: PUSH
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 314
25816: NOT
25817: AND
25818: PUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 263
25828: PUSH
25829: LD_INT 1
25831: NONEQUAL
25832: PUSH
25833: LD_VAR 0 2
25837: PPUSH
25838: CALL_OW 311
25842: OR
25843: AND
25844: IFFALSE 25885
// begin ComCollect ( j , x , y ) ;
25846: LD_VAR 0 2
25850: PPUSH
25851: LD_VAR 0 6
25855: PPUSH
25856: LD_VAR 0 7
25860: PPUSH
25861: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25865: LD_VAR 0 2
25869: PPUSH
25870: LD_VAR 0 8
25874: PPUSH
25875: CALL_OW 172
// exit ;
25879: POP
25880: POP
25881: POP
25882: POP
25883: GO 25893
// end ;
25885: GO 25775
25887: POP
25888: POP
// end ; end ;
25889: GO 25264
25891: POP
25892: POP
// end ; end_of_file end_of_file
25893: PPOPN 9
25895: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25896: LD_INT 0
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25902: LD_VAR 0 1
25906: PPUSH
25907: CALL_OW 264
25911: PUSH
25912: LD_INT 91
25914: EQUAL
25915: IFFALSE 25987
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25917: LD_INT 68
25919: PPUSH
25920: LD_VAR 0 1
25924: PPUSH
25925: CALL_OW 255
25929: PPUSH
25930: CALL_OW 321
25934: PUSH
25935: LD_INT 2
25937: EQUAL
25938: IFFALSE 25950
// eff := 70 else
25940: LD_ADDR_VAR 0 4
25944: PUSH
25945: LD_INT 70
25947: ST_TO_ADDR
25948: GO 25958
// eff := 30 ;
25950: LD_ADDR_VAR 0 4
25954: PUSH
25955: LD_INT 30
25957: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 250
25967: PPUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 251
25977: PPUSH
25978: LD_VAR 0 4
25982: PPUSH
25983: CALL_OW 495
// end ; end ;
25987: LD_VAR 0 2
25991: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25992: LD_INT 0
25994: PPUSH
// end ;
25995: LD_VAR 0 4
25999: RET
// export function SOS_Command ( cmd ) ; begin
26000: LD_INT 0
26002: PPUSH
// end ;
26003: LD_VAR 0 2
26007: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26008: LD_INT 0
26010: PPUSH
// end ;
26011: LD_VAR 0 6
26015: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
// if not vehicle or not factory then
26020: LD_VAR 0 1
26024: NOT
26025: PUSH
26026: LD_VAR 0 2
26030: NOT
26031: OR
26032: IFFALSE 26036
// exit ;
26034: GO 26267
// if factoryWaypoints >= factory then
26036: LD_EXP 85
26040: PUSH
26041: LD_VAR 0 2
26045: GREATEREQUAL
26046: IFFALSE 26267
// if factoryWaypoints [ factory ] then
26048: LD_EXP 85
26052: PUSH
26053: LD_VAR 0 2
26057: ARRAY
26058: IFFALSE 26267
// begin if GetControl ( vehicle ) = control_manual then
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 263
26069: PUSH
26070: LD_INT 1
26072: EQUAL
26073: IFFALSE 26154
// begin driver := IsDrivenBy ( vehicle ) ;
26075: LD_ADDR_VAR 0 4
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 311
26089: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26090: LD_VAR 0 4
26094: PPUSH
26095: LD_EXP 85
26099: PUSH
26100: LD_VAR 0 2
26104: ARRAY
26105: PUSH
26106: LD_INT 3
26108: ARRAY
26109: PPUSH
26110: LD_EXP 85
26114: PUSH
26115: LD_VAR 0 2
26119: ARRAY
26120: PUSH
26121: LD_INT 4
26123: ARRAY
26124: PPUSH
26125: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26129: LD_VAR 0 4
26133: PPUSH
26134: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26138: LD_VAR 0 4
26142: PPUSH
26143: LD_VAR 0 2
26147: PPUSH
26148: CALL_OW 180
// end else
26152: GO 26267
// if GetControl ( vehicle ) = control_remote then
26154: LD_VAR 0 1
26158: PPUSH
26159: CALL_OW 263
26163: PUSH
26164: LD_INT 2
26166: EQUAL
26167: IFFALSE 26228
// begin wait ( 0 0$2 ) ;
26169: LD_INT 70
26171: PPUSH
26172: CALL_OW 67
// if Connect ( vehicle ) then
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL 39098 0 1
26185: IFFALSE 26226
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26187: LD_VAR 0 1
26191: PPUSH
26192: LD_EXP 85
26196: PUSH
26197: LD_VAR 0 2
26201: ARRAY
26202: PUSH
26203: LD_INT 3
26205: ARRAY
26206: PPUSH
26207: LD_EXP 85
26211: PUSH
26212: LD_VAR 0 2
26216: ARRAY
26217: PUSH
26218: LD_INT 4
26220: ARRAY
26221: PPUSH
26222: CALL_OW 171
// end else
26226: GO 26267
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26228: LD_VAR 0 1
26232: PPUSH
26233: LD_EXP 85
26237: PUSH
26238: LD_VAR 0 2
26242: ARRAY
26243: PUSH
26244: LD_INT 3
26246: ARRAY
26247: PPUSH
26248: LD_EXP 85
26252: PUSH
26253: LD_VAR 0 2
26257: ARRAY
26258: PUSH
26259: LD_INT 4
26261: ARRAY
26262: PPUSH
26263: CALL_OW 171
// end ; end ;
26267: LD_VAR 0 3
26271: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26272: LD_INT 0
26274: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26275: LD_VAR 0 1
26279: PUSH
26280: LD_INT 250
26282: EQUAL
26283: PUSH
26284: LD_VAR 0 2
26288: PPUSH
26289: CALL_OW 264
26293: PUSH
26294: LD_INT 81
26296: EQUAL
26297: AND
26298: IFFALSE 26319
// MinerPlaceMine ( unit , x , y ) ;
26300: LD_VAR 0 2
26304: PPUSH
26305: LD_VAR 0 4
26309: PPUSH
26310: LD_VAR 0 5
26314: PPUSH
26315: CALL 29309 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26319: LD_VAR 0 1
26323: PUSH
26324: LD_INT 251
26326: EQUAL
26327: PUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: CALL_OW 264
26337: PUSH
26338: LD_INT 81
26340: EQUAL
26341: AND
26342: IFFALSE 26363
// MinerDetonateMine ( unit , x , y ) ;
26344: LD_VAR 0 2
26348: PPUSH
26349: LD_VAR 0 4
26353: PPUSH
26354: LD_VAR 0 5
26358: PPUSH
26359: CALL 29584 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26363: LD_VAR 0 1
26367: PUSH
26368: LD_INT 252
26370: EQUAL
26371: PUSH
26372: LD_VAR 0 2
26376: PPUSH
26377: CALL_OW 264
26381: PUSH
26382: LD_INT 81
26384: EQUAL
26385: AND
26386: IFFALSE 26407
// MinerCreateMinefield ( unit , x , y ) ;
26388: LD_VAR 0 2
26392: PPUSH
26393: LD_VAR 0 4
26397: PPUSH
26398: LD_VAR 0 5
26402: PPUSH
26403: CALL 30001 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26407: LD_VAR 0 1
26411: PUSH
26412: LD_INT 253
26414: EQUAL
26415: PUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 257
26425: PUSH
26426: LD_INT 5
26428: EQUAL
26429: AND
26430: IFFALSE 26451
// ComBinocular ( unit , x , y ) ;
26432: LD_VAR 0 2
26436: PPUSH
26437: LD_VAR 0 4
26441: PPUSH
26442: LD_VAR 0 5
26446: PPUSH
26447: CALL 30370 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26451: LD_VAR 0 1
26455: PUSH
26456: LD_INT 254
26458: EQUAL
26459: PUSH
26460: LD_VAR 0 2
26464: PPUSH
26465: CALL_OW 264
26469: PUSH
26470: LD_INT 99
26472: EQUAL
26473: AND
26474: PUSH
26475: LD_VAR 0 3
26479: PPUSH
26480: CALL_OW 263
26484: PUSH
26485: LD_INT 3
26487: EQUAL
26488: AND
26489: IFFALSE 26505
// HackDestroyVehicle ( unit , selectedUnit ) ;
26491: LD_VAR 0 2
26495: PPUSH
26496: LD_VAR 0 3
26500: PPUSH
26501: CALL 28673 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 255
26512: EQUAL
26513: PUSH
26514: LD_VAR 0 2
26518: PPUSH
26519: CALL_OW 264
26523: PUSH
26524: LD_INT 14
26526: PUSH
26527: LD_INT 53
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: IN
26534: AND
26535: PUSH
26536: LD_VAR 0 4
26540: PPUSH
26541: LD_VAR 0 5
26545: PPUSH
26546: CALL_OW 488
26550: AND
26551: IFFALSE 26575
// CutTreeXYR ( unit , x , y , 12 ) ;
26553: LD_VAR 0 2
26557: PPUSH
26558: LD_VAR 0 4
26562: PPUSH
26563: LD_VAR 0 5
26567: PPUSH
26568: LD_INT 12
26570: PPUSH
26571: CALL 26670 0 4
// if cmd = 256 then
26575: LD_VAR 0 1
26579: PUSH
26580: LD_INT 256
26582: EQUAL
26583: IFFALSE 26604
// SetFactoryWaypoint ( unit , x , y ) ;
26585: LD_VAR 0 2
26589: PPUSH
26590: LD_VAR 0 4
26594: PPUSH
26595: LD_VAR 0 5
26599: PPUSH
26600: CALL 24585 0 3
// if cmd = 257 then
26604: LD_VAR 0 1
26608: PUSH
26609: LD_INT 257
26611: EQUAL
26612: IFFALSE 26633
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26614: LD_VAR 0 2
26618: PPUSH
26619: LD_VAR 0 4
26623: PPUSH
26624: LD_VAR 0 5
26628: PPUSH
26629: CALL 24947 0 3
// if cmd = 258 then
26633: LD_VAR 0 1
26637: PUSH
26638: LD_INT 258
26640: EQUAL
26641: IFFALSE 26665
// BurnTreeXYR ( unit , x , y , 8 ) ;
26643: LD_VAR 0 2
26647: PPUSH
26648: LD_VAR 0 4
26652: PPUSH
26653: LD_VAR 0 5
26657: PPUSH
26658: LD_INT 8
26660: PPUSH
26661: CALL 27064 0 4
// end ;
26665: LD_VAR 0 6
26669: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26681: LD_VAR 0 1
26685: PPUSH
26686: CALL_OW 302
26690: NOT
26691: PUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: LD_VAR 0 3
26701: PPUSH
26702: CALL_OW 488
26706: NOT
26707: OR
26708: PUSH
26709: LD_VAR 0 4
26713: NOT
26714: OR
26715: IFFALSE 26719
// exit ;
26717: GO 27059
// list := [ ] ;
26719: LD_ADDR_VAR 0 13
26723: PUSH
26724: EMPTY
26725: ST_TO_ADDR
// if x - r < 0 then
26726: LD_VAR 0 2
26730: PUSH
26731: LD_VAR 0 4
26735: MINUS
26736: PUSH
26737: LD_INT 0
26739: LESS
26740: IFFALSE 26752
// min_x := 0 else
26742: LD_ADDR_VAR 0 7
26746: PUSH
26747: LD_INT 0
26749: ST_TO_ADDR
26750: GO 26768
// min_x := x - r ;
26752: LD_ADDR_VAR 0 7
26756: PUSH
26757: LD_VAR 0 2
26761: PUSH
26762: LD_VAR 0 4
26766: MINUS
26767: ST_TO_ADDR
// if y - r < 0 then
26768: LD_VAR 0 3
26772: PUSH
26773: LD_VAR 0 4
26777: MINUS
26778: PUSH
26779: LD_INT 0
26781: LESS
26782: IFFALSE 26794
// min_y := 0 else
26784: LD_ADDR_VAR 0 8
26788: PUSH
26789: LD_INT 0
26791: ST_TO_ADDR
26792: GO 26810
// min_y := y - r ;
26794: LD_ADDR_VAR 0 8
26798: PUSH
26799: LD_VAR 0 3
26803: PUSH
26804: LD_VAR 0 4
26808: MINUS
26809: ST_TO_ADDR
// max_x := x + r ;
26810: LD_ADDR_VAR 0 9
26814: PUSH
26815: LD_VAR 0 2
26819: PUSH
26820: LD_VAR 0 4
26824: PLUS
26825: ST_TO_ADDR
// max_y := y + r ;
26826: LD_ADDR_VAR 0 10
26830: PUSH
26831: LD_VAR 0 3
26835: PUSH
26836: LD_VAR 0 4
26840: PLUS
26841: ST_TO_ADDR
// for _x = min_x to max_x do
26842: LD_ADDR_VAR 0 11
26846: PUSH
26847: DOUBLE
26848: LD_VAR 0 7
26852: DEC
26853: ST_TO_ADDR
26854: LD_VAR 0 9
26858: PUSH
26859: FOR_TO
26860: IFFALSE 26977
// for _y = min_y to max_y do
26862: LD_ADDR_VAR 0 12
26866: PUSH
26867: DOUBLE
26868: LD_VAR 0 8
26872: DEC
26873: ST_TO_ADDR
26874: LD_VAR 0 10
26878: PUSH
26879: FOR_TO
26880: IFFALSE 26973
// begin if not ValidHex ( _x , _y ) then
26882: LD_VAR 0 11
26886: PPUSH
26887: LD_VAR 0 12
26891: PPUSH
26892: CALL_OW 488
26896: NOT
26897: IFFALSE 26901
// continue ;
26899: GO 26879
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26901: LD_VAR 0 11
26905: PPUSH
26906: LD_VAR 0 12
26910: PPUSH
26911: CALL_OW 351
26915: PUSH
26916: LD_VAR 0 11
26920: PPUSH
26921: LD_VAR 0 12
26925: PPUSH
26926: CALL_OW 554
26930: AND
26931: IFFALSE 26971
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26933: LD_ADDR_VAR 0 13
26937: PUSH
26938: LD_VAR 0 13
26942: PPUSH
26943: LD_VAR 0 13
26947: PUSH
26948: LD_INT 1
26950: PLUS
26951: PPUSH
26952: LD_VAR 0 11
26956: PUSH
26957: LD_VAR 0 12
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 2
26970: ST_TO_ADDR
// end ;
26971: GO 26879
26973: POP
26974: POP
26975: GO 26859
26977: POP
26978: POP
// if not list then
26979: LD_VAR 0 13
26983: NOT
26984: IFFALSE 26988
// exit ;
26986: GO 27059
// for i in list do
26988: LD_ADDR_VAR 0 6
26992: PUSH
26993: LD_VAR 0 13
26997: PUSH
26998: FOR_IN
26999: IFFALSE 27057
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27001: LD_VAR 0 1
27005: PPUSH
27006: LD_STRING M
27008: PUSH
27009: LD_VAR 0 6
27013: PUSH
27014: LD_INT 1
27016: ARRAY
27017: PUSH
27018: LD_VAR 0 6
27022: PUSH
27023: LD_INT 2
27025: ARRAY
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: PPUSH
27051: CALL_OW 447
27055: GO 26998
27057: POP
27058: POP
// end ;
27059: LD_VAR 0 5
27063: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
27075: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 302
27085: NOT
27086: PUSH
27087: LD_VAR 0 2
27091: PPUSH
27092: LD_VAR 0 3
27096: PPUSH
27097: CALL_OW 488
27101: NOT
27102: OR
27103: PUSH
27104: LD_VAR 0 4
27108: NOT
27109: OR
27110: IFFALSE 27114
// exit ;
27112: GO 27627
// list := [ ] ;
27114: LD_ADDR_VAR 0 13
27118: PUSH
27119: EMPTY
27120: ST_TO_ADDR
// if x - r < 0 then
27121: LD_VAR 0 2
27125: PUSH
27126: LD_VAR 0 4
27130: MINUS
27131: PUSH
27132: LD_INT 0
27134: LESS
27135: IFFALSE 27147
// min_x := 0 else
27137: LD_ADDR_VAR 0 7
27141: PUSH
27142: LD_INT 0
27144: ST_TO_ADDR
27145: GO 27163
// min_x := x - r ;
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: LD_VAR 0 2
27156: PUSH
27157: LD_VAR 0 4
27161: MINUS
27162: ST_TO_ADDR
// if y - r < 0 then
27163: LD_VAR 0 3
27167: PUSH
27168: LD_VAR 0 4
27172: MINUS
27173: PUSH
27174: LD_INT 0
27176: LESS
27177: IFFALSE 27189
// min_y := 0 else
27179: LD_ADDR_VAR 0 8
27183: PUSH
27184: LD_INT 0
27186: ST_TO_ADDR
27187: GO 27205
// min_y := y - r ;
27189: LD_ADDR_VAR 0 8
27193: PUSH
27194: LD_VAR 0 3
27198: PUSH
27199: LD_VAR 0 4
27203: MINUS
27204: ST_TO_ADDR
// max_x := x + r ;
27205: LD_ADDR_VAR 0 9
27209: PUSH
27210: LD_VAR 0 2
27214: PUSH
27215: LD_VAR 0 4
27219: PLUS
27220: ST_TO_ADDR
// max_y := y + r ;
27221: LD_ADDR_VAR 0 10
27225: PUSH
27226: LD_VAR 0 3
27230: PUSH
27231: LD_VAR 0 4
27235: PLUS
27236: ST_TO_ADDR
// for _x = min_x to max_x do
27237: LD_ADDR_VAR 0 11
27241: PUSH
27242: DOUBLE
27243: LD_VAR 0 7
27247: DEC
27248: ST_TO_ADDR
27249: LD_VAR 0 9
27253: PUSH
27254: FOR_TO
27255: IFFALSE 27372
// for _y = min_y to max_y do
27257: LD_ADDR_VAR 0 12
27261: PUSH
27262: DOUBLE
27263: LD_VAR 0 8
27267: DEC
27268: ST_TO_ADDR
27269: LD_VAR 0 10
27273: PUSH
27274: FOR_TO
27275: IFFALSE 27368
// begin if not ValidHex ( _x , _y ) then
27277: LD_VAR 0 11
27281: PPUSH
27282: LD_VAR 0 12
27286: PPUSH
27287: CALL_OW 488
27291: NOT
27292: IFFALSE 27296
// continue ;
27294: GO 27274
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27296: LD_VAR 0 11
27300: PPUSH
27301: LD_VAR 0 12
27305: PPUSH
27306: CALL_OW 351
27310: PUSH
27311: LD_VAR 0 11
27315: PPUSH
27316: LD_VAR 0 12
27320: PPUSH
27321: CALL_OW 554
27325: AND
27326: IFFALSE 27366
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27328: LD_ADDR_VAR 0 13
27332: PUSH
27333: LD_VAR 0 13
27337: PPUSH
27338: LD_VAR 0 13
27342: PUSH
27343: LD_INT 1
27345: PLUS
27346: PPUSH
27347: LD_VAR 0 11
27351: PUSH
27352: LD_VAR 0 12
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 2
27365: ST_TO_ADDR
// end ;
27366: GO 27274
27368: POP
27369: POP
27370: GO 27254
27372: POP
27373: POP
// if not list then
27374: LD_VAR 0 13
27378: NOT
27379: IFFALSE 27383
// exit ;
27381: GO 27627
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27383: LD_ADDR_VAR 0 13
27387: PUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: LD_VAR 0 13
27397: PPUSH
27398: LD_INT 1
27400: PPUSH
27401: LD_INT 1
27403: PPUSH
27404: CALL 36240 0 4
27408: ST_TO_ADDR
// ComStop ( flame ) ;
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 141
// for i in list do
27418: LD_ADDR_VAR 0 6
27422: PUSH
27423: LD_VAR 0 13
27427: PUSH
27428: FOR_IN
27429: IFFALSE 27460
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_VAR 0 6
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: PPUSH
27445: LD_VAR 0 6
27449: PUSH
27450: LD_INT 2
27452: ARRAY
27453: PPUSH
27454: CALL_OW 176
27458: GO 27428
27460: POP
27461: POP
// repeat wait ( 0 0$1 ) ;
27462: LD_INT 35
27464: PPUSH
27465: CALL_OW 67
// task := GetTaskList ( flame ) ;
27469: LD_ADDR_VAR 0 14
27473: PUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 437
27483: ST_TO_ADDR
// if not task then
27484: LD_VAR 0 14
27488: NOT
27489: IFFALSE 27493
// exit ;
27491: GO 27627
// if task [ 1 ] [ 1 ] <> | then
27493: LD_VAR 0 14
27497: PUSH
27498: LD_INT 1
27500: ARRAY
27501: PUSH
27502: LD_INT 1
27504: ARRAY
27505: PUSH
27506: LD_STRING |
27508: NONEQUAL
27509: IFFALSE 27513
// exit ;
27511: GO 27627
// _x := task [ 1 ] [ 2 ] ;
27513: LD_ADDR_VAR 0 11
27517: PUSH
27518: LD_VAR 0 14
27522: PUSH
27523: LD_INT 1
27525: ARRAY
27526: PUSH
27527: LD_INT 2
27529: ARRAY
27530: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27531: LD_ADDR_VAR 0 12
27535: PUSH
27536: LD_VAR 0 14
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PUSH
27545: LD_INT 3
27547: ARRAY
27548: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27549: LD_VAR 0 11
27553: PPUSH
27554: LD_VAR 0 12
27558: PPUSH
27559: CALL_OW 351
27563: NOT
27564: PUSH
27565: LD_VAR 0 11
27569: PPUSH
27570: LD_VAR 0 12
27574: PPUSH
27575: CALL_OW 554
27579: NOT
27580: OR
27581: IFFALSE 27615
// begin task := Delete ( task , 1 ) ;
27583: LD_ADDR_VAR 0 14
27587: PUSH
27588: LD_VAR 0 14
27592: PPUSH
27593: LD_INT 1
27595: PPUSH
27596: CALL_OW 3
27600: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27601: LD_VAR 0 1
27605: PPUSH
27606: LD_VAR 0 14
27610: PPUSH
27611: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 314
27624: NOT
27625: IFFALSE 27462
// end ;
27627: LD_VAR 0 5
27631: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27632: LD_EXP 88
27636: NOT
27637: IFFALSE 27687
27639: GO 27641
27641: DISABLE
// begin initHack := true ;
27642: LD_ADDR_EXP 88
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// hackTanks := [ ] ;
27650: LD_ADDR_EXP 89
27654: PUSH
27655: EMPTY
27656: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27657: LD_ADDR_EXP 90
27661: PUSH
27662: EMPTY
27663: ST_TO_ADDR
// hackLimit := 3 ;
27664: LD_ADDR_EXP 91
27668: PUSH
27669: LD_INT 3
27671: ST_TO_ADDR
// hackDist := 12 ;
27672: LD_ADDR_EXP 92
27676: PUSH
27677: LD_INT 12
27679: ST_TO_ADDR
// hackCounter := [ ] ;
27680: LD_ADDR_EXP 93
27684: PUSH
27685: EMPTY
27686: ST_TO_ADDR
// end ;
27687: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27688: LD_EXP 88
27692: PUSH
27693: LD_INT 34
27695: PUSH
27696: LD_INT 99
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 69
27707: AND
27708: IFFALSE 27961
27710: GO 27712
27712: DISABLE
27713: LD_INT 0
27715: PPUSH
27716: PPUSH
// begin enable ;
27717: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27718: LD_ADDR_VAR 0 1
27722: PUSH
27723: LD_INT 34
27725: PUSH
27726: LD_INT 99
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PPUSH
27733: CALL_OW 69
27737: PUSH
27738: FOR_IN
27739: IFFALSE 27959
// begin if not i in hackTanks then
27741: LD_VAR 0 1
27745: PUSH
27746: LD_EXP 89
27750: IN
27751: NOT
27752: IFFALSE 27835
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27754: LD_ADDR_EXP 89
27758: PUSH
27759: LD_EXP 89
27763: PPUSH
27764: LD_EXP 89
27768: PUSH
27769: LD_INT 1
27771: PLUS
27772: PPUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 1
27782: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27783: LD_ADDR_EXP 90
27787: PUSH
27788: LD_EXP 90
27792: PPUSH
27793: LD_EXP 90
27797: PUSH
27798: LD_INT 1
27800: PLUS
27801: PPUSH
27802: EMPTY
27803: PPUSH
27804: CALL_OW 1
27808: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27809: LD_ADDR_EXP 93
27813: PUSH
27814: LD_EXP 93
27818: PPUSH
27819: LD_EXP 93
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: EMPTY
27829: PPUSH
27830: CALL_OW 1
27834: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 302
27844: NOT
27845: IFFALSE 27858
// begin HackUnlinkAll ( i ) ;
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL 27964 0 1
// continue ;
27856: GO 27738
// end ; HackCheckCapturedStatus ( i ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL 28407 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27867: LD_ADDR_VAR 0 2
27871: PUSH
27872: LD_INT 81
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 255
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 33
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 91
27901: PUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_EXP 92
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 50
27919: PUSH
27920: EMPTY
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not tmp then
27934: LD_VAR 0 2
27938: NOT
27939: IFFALSE 27943
// continue ;
27941: GO 27738
// HackLink ( i , tmp ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL 28100 0 2
// end ;
27957: GO 27738
27959: POP
27960: POP
// end ;
27961: PPOPN 2
27963: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
27968: PPUSH
// if not hack in hackTanks then
27969: LD_VAR 0 1
27973: PUSH
27974: LD_EXP 89
27978: IN
27979: NOT
27980: IFFALSE 27984
// exit ;
27982: GO 28095
// index := GetElementIndex ( hackTanks , hack ) ;
27984: LD_ADDR_VAR 0 4
27988: PUSH
27989: LD_EXP 89
27993: PPUSH
27994: LD_VAR 0 1
27998: PPUSH
27999: CALL 35537 0 2
28003: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28004: LD_EXP 90
28008: PUSH
28009: LD_VAR 0 4
28013: ARRAY
28014: IFFALSE 28095
// begin for i in hackTanksCaptured [ index ] do
28016: LD_ADDR_VAR 0 3
28020: PUSH
28021: LD_EXP 90
28025: PUSH
28026: LD_VAR 0 4
28030: ARRAY
28031: PUSH
28032: FOR_IN
28033: IFFALSE 28059
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28035: LD_VAR 0 3
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: PPUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_INT 2
28051: ARRAY
28052: PPUSH
28053: CALL_OW 235
28057: GO 28032
28059: POP
28060: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28061: LD_ADDR_EXP 90
28065: PUSH
28066: LD_EXP 90
28070: PPUSH
28071: LD_VAR 0 4
28075: PPUSH
28076: EMPTY
28077: PPUSH
28078: CALL_OW 1
28082: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 0
28090: PPUSH
28091: CALL_OW 505
// end ; end ;
28095: LD_VAR 0 2
28099: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
28104: PPUSH
// if not hack in hackTanks or not vehicles then
28105: LD_VAR 0 1
28109: PUSH
28110: LD_EXP 89
28114: IN
28115: NOT
28116: PUSH
28117: LD_VAR 0 2
28121: NOT
28122: OR
28123: IFFALSE 28127
// exit ;
28125: GO 28402
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28127: LD_ADDR_VAR 0 2
28131: PUSH
28132: LD_VAR 0 1
28136: PPUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_INT 1
28144: PPUSH
28145: LD_INT 1
28147: PPUSH
28148: CALL 36187 0 4
28152: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: LD_EXP 89
28162: PPUSH
28163: LD_VAR 0 1
28167: PPUSH
28168: CALL 35537 0 2
28172: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28173: LD_EXP 90
28177: PUSH
28178: LD_VAR 0 5
28182: ARRAY
28183: PUSH
28184: LD_EXP 91
28188: LESS
28189: IFFALSE 28378
// begin for i := 1 to vehicles do
28191: LD_ADDR_VAR 0 4
28195: PUSH
28196: DOUBLE
28197: LD_INT 1
28199: DEC
28200: ST_TO_ADDR
28201: LD_VAR 0 2
28205: PUSH
28206: FOR_TO
28207: IFFALSE 28376
// begin if hackTanksCaptured [ index ] = hackLimit then
28209: LD_EXP 90
28213: PUSH
28214: LD_VAR 0 5
28218: ARRAY
28219: PUSH
28220: LD_EXP 91
28224: EQUAL
28225: IFFALSE 28229
// break ;
28227: GO 28376
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28229: LD_ADDR_EXP 93
28233: PUSH
28234: LD_EXP 93
28238: PPUSH
28239: LD_VAR 0 5
28243: PPUSH
28244: LD_EXP 93
28248: PUSH
28249: LD_VAR 0 5
28253: ARRAY
28254: PUSH
28255: LD_INT 1
28257: PLUS
28258: PPUSH
28259: CALL_OW 1
28263: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28264: LD_ADDR_EXP 90
28268: PUSH
28269: LD_EXP 90
28273: PPUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_EXP 90
28283: PUSH
28284: LD_VAR 0 5
28288: ARRAY
28289: PUSH
28290: LD_INT 1
28292: PLUS
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PPUSH
28298: LD_VAR 0 2
28302: PUSH
28303: LD_VAR 0 4
28307: ARRAY
28308: PUSH
28309: LD_VAR 0 2
28313: PUSH
28314: LD_VAR 0 4
28318: ARRAY
28319: PPUSH
28320: CALL_OW 255
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PPUSH
28329: CALL 35752 0 3
28333: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28334: LD_VAR 0 2
28338: PUSH
28339: LD_VAR 0 4
28343: ARRAY
28344: PPUSH
28345: LD_VAR 0 1
28349: PPUSH
28350: CALL_OW 255
28354: PPUSH
28355: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28359: LD_VAR 0 2
28363: PUSH
28364: LD_VAR 0 4
28368: ARRAY
28369: PPUSH
28370: CALL_OW 141
// end ;
28374: GO 28206
28376: POP
28377: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28378: LD_VAR 0 1
28382: PPUSH
28383: LD_EXP 90
28387: PUSH
28388: LD_VAR 0 5
28392: ARRAY
28393: PUSH
28394: LD_INT 0
28396: PLUS
28397: PPUSH
28398: CALL_OW 505
// end ;
28402: LD_VAR 0 3
28406: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28407: LD_INT 0
28409: PPUSH
28410: PPUSH
28411: PPUSH
28412: PPUSH
// if not hack in hackTanks then
28413: LD_VAR 0 1
28417: PUSH
28418: LD_EXP 89
28422: IN
28423: NOT
28424: IFFALSE 28428
// exit ;
28426: GO 28668
// index := GetElementIndex ( hackTanks , hack ) ;
28428: LD_ADDR_VAR 0 4
28432: PUSH
28433: LD_EXP 89
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL 35537 0 2
28447: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: DOUBLE
28454: LD_EXP 90
28458: PUSH
28459: LD_VAR 0 4
28463: ARRAY
28464: INC
28465: ST_TO_ADDR
28466: LD_INT 1
28468: PUSH
28469: FOR_DOWNTO
28470: IFFALSE 28642
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_EXP 90
28481: PUSH
28482: LD_VAR 0 4
28486: ARRAY
28487: PUSH
28488: LD_VAR 0 3
28492: ARRAY
28493: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28494: LD_VAR 0 5
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: CALL_OW 302
28507: NOT
28508: PUSH
28509: LD_VAR 0 5
28513: PUSH
28514: LD_INT 1
28516: ARRAY
28517: PPUSH
28518: CALL_OW 255
28522: PUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 255
28532: NONEQUAL
28533: OR
28534: IFFALSE 28640
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28536: LD_VAR 0 5
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: CALL_OW 305
28549: PUSH
28550: LD_VAR 0 5
28554: PUSH
28555: LD_INT 1
28557: ARRAY
28558: PPUSH
28559: CALL_OW 255
28563: PUSH
28564: LD_VAR 0 1
28568: PPUSH
28569: CALL_OW 255
28573: EQUAL
28574: AND
28575: IFFALSE 28599
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28577: LD_VAR 0 5
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 5
28590: PUSH
28591: LD_INT 2
28593: ARRAY
28594: PPUSH
28595: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28599: LD_ADDR_EXP 90
28603: PUSH
28604: LD_EXP 90
28608: PPUSH
28609: LD_VAR 0 4
28613: PPUSH
28614: LD_EXP 90
28618: PUSH
28619: LD_VAR 0 4
28623: ARRAY
28624: PPUSH
28625: LD_VAR 0 3
28629: PPUSH
28630: CALL_OW 3
28634: PPUSH
28635: CALL_OW 1
28639: ST_TO_ADDR
// end ; end ;
28640: GO 28469
28642: POP
28643: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_EXP 90
28653: PUSH
28654: LD_VAR 0 4
28658: ARRAY
28659: PUSH
28660: LD_INT 0
28662: PLUS
28663: PPUSH
28664: CALL_OW 505
// end ;
28668: LD_VAR 0 2
28672: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28673: LD_INT 0
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
// if not hack in hackTanks then
28679: LD_VAR 0 1
28683: PUSH
28684: LD_EXP 89
28688: IN
28689: NOT
28690: IFFALSE 28694
// exit ;
28692: GO 28779
// index := GetElementIndex ( hackTanks , hack ) ;
28694: LD_ADDR_VAR 0 5
28698: PUSH
28699: LD_EXP 89
28703: PPUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL 35537 0 2
28713: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28714: LD_ADDR_VAR 0 4
28718: PUSH
28719: DOUBLE
28720: LD_INT 1
28722: DEC
28723: ST_TO_ADDR
28724: LD_EXP 90
28728: PUSH
28729: LD_VAR 0 5
28733: ARRAY
28734: PUSH
28735: FOR_TO
28736: IFFALSE 28777
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28738: LD_EXP 90
28742: PUSH
28743: LD_VAR 0 5
28747: ARRAY
28748: PUSH
28749: LD_VAR 0 4
28753: ARRAY
28754: PUSH
28755: LD_INT 1
28757: ARRAY
28758: PUSH
28759: LD_VAR 0 2
28763: EQUAL
28764: IFFALSE 28775
// KillUnit ( vehicle ) ;
28766: LD_VAR 0 2
28770: PPUSH
28771: CALL_OW 66
28775: GO 28735
28777: POP
28778: POP
// end ;
28779: LD_VAR 0 3
28783: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28784: LD_EXP 94
28788: NOT
28789: IFFALSE 28824
28791: GO 28793
28793: DISABLE
// begin initMiner := true ;
28794: LD_ADDR_EXP 94
28798: PUSH
28799: LD_INT 1
28801: ST_TO_ADDR
// minersList := [ ] ;
28802: LD_ADDR_EXP 95
28806: PUSH
28807: EMPTY
28808: ST_TO_ADDR
// minerMinesList := [ ] ;
28809: LD_ADDR_EXP 96
28813: PUSH
28814: EMPTY
28815: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28816: LD_ADDR_EXP 97
28820: PUSH
28821: LD_INT 5
28823: ST_TO_ADDR
// end ;
28824: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28825: LD_EXP 94
28829: PUSH
28830: LD_INT 34
28832: PUSH
28833: LD_INT 81
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PPUSH
28840: CALL_OW 69
28844: AND
28845: IFFALSE 29306
28847: GO 28849
28849: DISABLE
28850: LD_INT 0
28852: PPUSH
28853: PPUSH
28854: PPUSH
28855: PPUSH
// begin enable ;
28856: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28857: LD_ADDR_VAR 0 1
28861: PUSH
28862: LD_INT 34
28864: PUSH
28865: LD_INT 81
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 69
28876: PUSH
28877: FOR_IN
28878: IFFALSE 28950
// begin if not i in minersList then
28880: LD_VAR 0 1
28884: PUSH
28885: LD_EXP 95
28889: IN
28890: NOT
28891: IFFALSE 28948
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28893: LD_ADDR_EXP 95
28897: PUSH
28898: LD_EXP 95
28902: PPUSH
28903: LD_EXP 95
28907: PUSH
28908: LD_INT 1
28910: PLUS
28911: PPUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 1
28921: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28922: LD_ADDR_EXP 96
28926: PUSH
28927: LD_EXP 96
28931: PPUSH
28932: LD_EXP 96
28936: PUSH
28937: LD_INT 1
28939: PLUS
28940: PPUSH
28941: EMPTY
28942: PPUSH
28943: CALL_OW 1
28947: ST_TO_ADDR
// end end ;
28948: GO 28877
28950: POP
28951: POP
// for i := minerMinesList downto 1 do
28952: LD_ADDR_VAR 0 1
28956: PUSH
28957: DOUBLE
28958: LD_EXP 96
28962: INC
28963: ST_TO_ADDR
28964: LD_INT 1
28966: PUSH
28967: FOR_DOWNTO
28968: IFFALSE 29304
// begin if IsLive ( minersList [ i ] ) then
28970: LD_EXP 95
28974: PUSH
28975: LD_VAR 0 1
28979: ARRAY
28980: PPUSH
28981: CALL_OW 300
28985: IFFALSE 29013
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28987: LD_EXP 95
28991: PUSH
28992: LD_VAR 0 1
28996: ARRAY
28997: PPUSH
28998: LD_EXP 96
29002: PUSH
29003: LD_VAR 0 1
29007: ARRAY
29008: PPUSH
29009: CALL_OW 505
// if not minerMinesList [ i ] then
29013: LD_EXP 96
29017: PUSH
29018: LD_VAR 0 1
29022: ARRAY
29023: NOT
29024: IFFALSE 29028
// continue ;
29026: GO 28967
// for j := minerMinesList [ i ] downto 1 do
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: DOUBLE
29034: LD_EXP 96
29038: PUSH
29039: LD_VAR 0 1
29043: ARRAY
29044: INC
29045: ST_TO_ADDR
29046: LD_INT 1
29048: PUSH
29049: FOR_DOWNTO
29050: IFFALSE 29300
// begin side := GetSide ( minersList [ i ] ) ;
29052: LD_ADDR_VAR 0 3
29056: PUSH
29057: LD_EXP 95
29061: PUSH
29062: LD_VAR 0 1
29066: ARRAY
29067: PPUSH
29068: CALL_OW 255
29072: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29073: LD_ADDR_VAR 0 4
29077: PUSH
29078: LD_EXP 96
29082: PUSH
29083: LD_VAR 0 1
29087: ARRAY
29088: PUSH
29089: LD_VAR 0 2
29093: ARRAY
29094: PUSH
29095: LD_INT 1
29097: ARRAY
29098: PPUSH
29099: LD_EXP 96
29103: PUSH
29104: LD_VAR 0 1
29108: ARRAY
29109: PUSH
29110: LD_VAR 0 2
29114: ARRAY
29115: PUSH
29116: LD_INT 2
29118: ARRAY
29119: PPUSH
29120: CALL_OW 428
29124: ST_TO_ADDR
// if not tmp then
29125: LD_VAR 0 4
29129: NOT
29130: IFFALSE 29134
// continue ;
29132: GO 29049
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29134: LD_VAR 0 4
29138: PUSH
29139: LD_INT 81
29141: PUSH
29142: LD_VAR 0 3
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PPUSH
29151: CALL_OW 69
29155: IN
29156: PUSH
29157: LD_EXP 96
29161: PUSH
29162: LD_VAR 0 1
29166: ARRAY
29167: PUSH
29168: LD_VAR 0 2
29172: ARRAY
29173: PUSH
29174: LD_INT 1
29176: ARRAY
29177: PPUSH
29178: LD_EXP 96
29182: PUSH
29183: LD_VAR 0 1
29187: ARRAY
29188: PUSH
29189: LD_VAR 0 2
29193: ARRAY
29194: PUSH
29195: LD_INT 2
29197: ARRAY
29198: PPUSH
29199: CALL_OW 458
29203: AND
29204: IFFALSE 29298
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29206: LD_EXP 96
29210: PUSH
29211: LD_VAR 0 1
29215: ARRAY
29216: PUSH
29217: LD_VAR 0 2
29221: ARRAY
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: PPUSH
29227: LD_EXP 96
29231: PUSH
29232: LD_VAR 0 1
29236: ARRAY
29237: PUSH
29238: LD_VAR 0 2
29242: ARRAY
29243: PUSH
29244: LD_INT 2
29246: ARRAY
29247: PPUSH
29248: LD_VAR 0 3
29252: PPUSH
29253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29257: LD_ADDR_EXP 96
29261: PUSH
29262: LD_EXP 96
29266: PPUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: LD_EXP 96
29276: PUSH
29277: LD_VAR 0 1
29281: ARRAY
29282: PPUSH
29283: LD_VAR 0 2
29287: PPUSH
29288: CALL_OW 3
29292: PPUSH
29293: CALL_OW 1
29297: ST_TO_ADDR
// end ; end ;
29298: GO 29049
29300: POP
29301: POP
// end ;
29302: GO 28967
29304: POP
29305: POP
// end ;
29306: PPOPN 4
29308: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
// result := false ;
29313: LD_ADDR_VAR 0 4
29317: PUSH
29318: LD_INT 0
29320: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 264
29330: PUSH
29331: LD_INT 81
29333: EQUAL
29334: NOT
29335: IFFALSE 29339
// exit ;
29337: GO 29579
// index := GetElementIndex ( minersList , unit ) ;
29339: LD_ADDR_VAR 0 5
29343: PUSH
29344: LD_EXP 95
29348: PPUSH
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL 35537 0 2
29358: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29359: LD_EXP 96
29363: PUSH
29364: LD_VAR 0 5
29368: ARRAY
29369: PUSH
29370: LD_EXP 97
29374: GREATEREQUAL
29375: IFFALSE 29379
// exit ;
29377: GO 29579
// ComMoveXY ( unit , x , y ) ;
29379: LD_VAR 0 1
29383: PPUSH
29384: LD_VAR 0 2
29388: PPUSH
29389: LD_VAR 0 3
29393: PPUSH
29394: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29398: LD_INT 35
29400: PPUSH
29401: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29405: LD_VAR 0 1
29409: PPUSH
29410: LD_VAR 0 2
29414: PPUSH
29415: LD_VAR 0 3
29419: PPUSH
29420: CALL 67289 0 3
29424: NOT
29425: PUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL_OW 314
29435: AND
29436: IFFALSE 29440
// exit ;
29438: GO 29579
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29440: LD_VAR 0 2
29444: PPUSH
29445: LD_VAR 0 3
29449: PPUSH
29450: CALL_OW 428
29454: PUSH
29455: LD_VAR 0 1
29459: EQUAL
29460: PUSH
29461: LD_VAR 0 1
29465: PPUSH
29466: CALL_OW 314
29470: NOT
29471: AND
29472: IFFALSE 29398
// PlaySoundXY ( x , y , PlantMine ) ;
29474: LD_VAR 0 2
29478: PPUSH
29479: LD_VAR 0 3
29483: PPUSH
29484: LD_STRING PlantMine
29486: PPUSH
29487: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29491: LD_VAR 0 2
29495: PPUSH
29496: LD_VAR 0 3
29500: PPUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 255
29510: PPUSH
29511: LD_INT 0
29513: PPUSH
29514: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29518: LD_ADDR_EXP 96
29522: PUSH
29523: LD_EXP 96
29527: PPUSH
29528: LD_VAR 0 5
29532: PUSH
29533: LD_EXP 96
29537: PUSH
29538: LD_VAR 0 5
29542: ARRAY
29543: PUSH
29544: LD_INT 1
29546: PLUS
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PPUSH
29552: LD_VAR 0 2
29556: PUSH
29557: LD_VAR 0 3
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PPUSH
29566: CALL 35752 0 3
29570: ST_TO_ADDR
// result := true ;
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_INT 1
29578: ST_TO_ADDR
// end ;
29579: LD_VAR 0 4
29583: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
// if not unit in minersList then
29589: LD_VAR 0 1
29593: PUSH
29594: LD_EXP 95
29598: IN
29599: NOT
29600: IFFALSE 29604
// exit ;
29602: GO 29996
// index := GetElementIndex ( minersList , unit ) ;
29604: LD_ADDR_VAR 0 6
29608: PUSH
29609: LD_EXP 95
29613: PPUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL 35537 0 2
29623: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: DOUBLE
29630: LD_EXP 96
29634: PUSH
29635: LD_VAR 0 6
29639: ARRAY
29640: INC
29641: ST_TO_ADDR
29642: LD_INT 1
29644: PUSH
29645: FOR_DOWNTO
29646: IFFALSE 29807
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29648: LD_EXP 96
29652: PUSH
29653: LD_VAR 0 6
29657: ARRAY
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PUSH
29669: LD_VAR 0 2
29673: EQUAL
29674: PUSH
29675: LD_EXP 96
29679: PUSH
29680: LD_VAR 0 6
29684: ARRAY
29685: PUSH
29686: LD_VAR 0 5
29690: ARRAY
29691: PUSH
29692: LD_INT 2
29694: ARRAY
29695: PUSH
29696: LD_VAR 0 3
29700: EQUAL
29701: AND
29702: IFFALSE 29805
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29704: LD_EXP 96
29708: PUSH
29709: LD_VAR 0 6
29713: ARRAY
29714: PUSH
29715: LD_VAR 0 5
29719: ARRAY
29720: PUSH
29721: LD_INT 1
29723: ARRAY
29724: PPUSH
29725: LD_EXP 96
29729: PUSH
29730: LD_VAR 0 6
29734: ARRAY
29735: PUSH
29736: LD_VAR 0 5
29740: ARRAY
29741: PUSH
29742: LD_INT 2
29744: ARRAY
29745: PPUSH
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 255
29755: PPUSH
29756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29760: LD_ADDR_EXP 96
29764: PUSH
29765: LD_EXP 96
29769: PPUSH
29770: LD_VAR 0 6
29774: PPUSH
29775: LD_EXP 96
29779: PUSH
29780: LD_VAR 0 6
29784: ARRAY
29785: PPUSH
29786: LD_VAR 0 5
29790: PPUSH
29791: CALL_OW 3
29795: PPUSH
29796: CALL_OW 1
29800: ST_TO_ADDR
// exit ;
29801: POP
29802: POP
29803: GO 29996
// end ; end ;
29805: GO 29645
29807: POP
29808: POP
// for i := minerMinesList [ index ] downto 1 do
29809: LD_ADDR_VAR 0 5
29813: PUSH
29814: DOUBLE
29815: LD_EXP 96
29819: PUSH
29820: LD_VAR 0 6
29824: ARRAY
29825: INC
29826: ST_TO_ADDR
29827: LD_INT 1
29829: PUSH
29830: FOR_DOWNTO
29831: IFFALSE 29994
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29833: LD_EXP 96
29837: PUSH
29838: LD_VAR 0 6
29842: ARRAY
29843: PUSH
29844: LD_VAR 0 5
29848: ARRAY
29849: PUSH
29850: LD_INT 1
29852: ARRAY
29853: PPUSH
29854: LD_EXP 96
29858: PUSH
29859: LD_VAR 0 6
29863: ARRAY
29864: PUSH
29865: LD_VAR 0 5
29869: ARRAY
29870: PUSH
29871: LD_INT 2
29873: ARRAY
29874: PPUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: LD_VAR 0 3
29884: PPUSH
29885: CALL_OW 298
29889: PUSH
29890: LD_INT 6
29892: LESS
29893: IFFALSE 29992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29895: LD_EXP 96
29899: PUSH
29900: LD_VAR 0 6
29904: ARRAY
29905: PUSH
29906: LD_VAR 0 5
29910: ARRAY
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PPUSH
29916: LD_EXP 96
29920: PUSH
29921: LD_VAR 0 6
29925: ARRAY
29926: PUSH
29927: LD_VAR 0 5
29931: ARRAY
29932: PUSH
29933: LD_INT 2
29935: ARRAY
29936: PPUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 255
29946: PPUSH
29947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29951: LD_ADDR_EXP 96
29955: PUSH
29956: LD_EXP 96
29960: PPUSH
29961: LD_VAR 0 6
29965: PPUSH
29966: LD_EXP 96
29970: PUSH
29971: LD_VAR 0 6
29975: ARRAY
29976: PPUSH
29977: LD_VAR 0 5
29981: PPUSH
29982: CALL_OW 3
29986: PPUSH
29987: CALL_OW 1
29991: ST_TO_ADDR
// end ; end ;
29992: GO 29830
29994: POP
29995: POP
// end ;
29996: LD_VAR 0 4
30000: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30001: LD_INT 0
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 264
30021: PUSH
30022: LD_INT 81
30024: EQUAL
30025: NOT
30026: PUSH
30027: LD_VAR 0 1
30031: PUSH
30032: LD_EXP 95
30036: IN
30037: NOT
30038: OR
30039: IFFALSE 30043
// exit ;
30041: GO 30365
// index := GetElementIndex ( minersList , unit ) ;
30043: LD_ADDR_VAR 0 6
30047: PUSH
30048: LD_EXP 95
30052: PPUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL 35537 0 2
30062: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30063: LD_ADDR_VAR 0 8
30067: PUSH
30068: LD_EXP 97
30072: PUSH
30073: LD_EXP 96
30077: PUSH
30078: LD_VAR 0 6
30082: ARRAY
30083: MINUS
30084: ST_TO_ADDR
// if not minesFreeAmount then
30085: LD_VAR 0 8
30089: NOT
30090: IFFALSE 30094
// exit ;
30092: GO 30365
// tmp := [ ] ;
30094: LD_ADDR_VAR 0 7
30098: PUSH
30099: EMPTY
30100: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30101: LD_ADDR_VAR 0 5
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_VAR 0 8
30115: PUSH
30116: FOR_TO
30117: IFFALSE 30312
// begin _d := rand ( 0 , 5 ) ;
30119: LD_ADDR_VAR 0 11
30123: PUSH
30124: LD_INT 0
30126: PPUSH
30127: LD_INT 5
30129: PPUSH
30130: CALL_OW 12
30134: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30135: LD_ADDR_VAR 0 12
30139: PUSH
30140: LD_INT 2
30142: PPUSH
30143: LD_INT 6
30145: PPUSH
30146: CALL_OW 12
30150: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30151: LD_ADDR_VAR 0 9
30155: PUSH
30156: LD_VAR 0 2
30160: PPUSH
30161: LD_VAR 0 11
30165: PPUSH
30166: LD_VAR 0 12
30170: PPUSH
30171: CALL_OW 272
30175: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30176: LD_ADDR_VAR 0 10
30180: PUSH
30181: LD_VAR 0 3
30185: PPUSH
30186: LD_VAR 0 11
30190: PPUSH
30191: LD_VAR 0 12
30195: PPUSH
30196: CALL_OW 273
30200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30201: LD_VAR 0 9
30205: PPUSH
30206: LD_VAR 0 10
30210: PPUSH
30211: CALL_OW 488
30215: PUSH
30216: LD_VAR 0 9
30220: PUSH
30221: LD_VAR 0 10
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_VAR 0 7
30234: IN
30235: NOT
30236: AND
30237: PUSH
30238: LD_VAR 0 9
30242: PPUSH
30243: LD_VAR 0 10
30247: PPUSH
30248: CALL_OW 458
30252: NOT
30253: AND
30254: IFFALSE 30296
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30256: LD_ADDR_VAR 0 7
30260: PUSH
30261: LD_VAR 0 7
30265: PPUSH
30266: LD_VAR 0 7
30270: PUSH
30271: LD_INT 1
30273: PLUS
30274: PPUSH
30275: LD_VAR 0 9
30279: PUSH
30280: LD_VAR 0 10
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
30294: GO 30310
// i := i - 1 ;
30296: LD_ADDR_VAR 0 5
30300: PUSH
30301: LD_VAR 0 5
30305: PUSH
30306: LD_INT 1
30308: MINUS
30309: ST_TO_ADDR
// end ;
30310: GO 30116
30312: POP
30313: POP
// for i in tmp do
30314: LD_ADDR_VAR 0 5
30318: PUSH
30319: LD_VAR 0 7
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30363
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_VAR 0 5
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: LD_VAR 0 5
30345: PUSH
30346: LD_INT 2
30348: ARRAY
30349: PPUSH
30350: CALL 29309 0 3
30354: NOT
30355: IFFALSE 30361
// exit ;
30357: POP
30358: POP
30359: GO 30365
30361: GO 30324
30363: POP
30364: POP
// end ;
30365: LD_VAR 0 4
30369: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30370: LD_INT 0
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
30378: PPUSH
// if not GetClass ( unit ) = class_sniper then
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 257
30388: PUSH
30389: LD_INT 5
30391: EQUAL
30392: NOT
30393: IFFALSE 30397
// exit ;
30395: GO 30785
// dist := 8 ;
30397: LD_ADDR_VAR 0 5
30401: PUSH
30402: LD_INT 8
30404: ST_TO_ADDR
// viewRange := 12 ;
30405: LD_ADDR_VAR 0 7
30409: PUSH
30410: LD_INT 12
30412: ST_TO_ADDR
// side := GetSide ( unit ) ;
30413: LD_ADDR_VAR 0 6
30417: PUSH
30418: LD_VAR 0 1
30422: PPUSH
30423: CALL_OW 255
30427: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30428: LD_INT 61
30430: PPUSH
30431: LD_VAR 0 6
30435: PPUSH
30436: CALL_OW 321
30440: PUSH
30441: LD_INT 2
30443: EQUAL
30444: IFFALSE 30454
// viewRange := 16 ;
30446: LD_ADDR_VAR 0 7
30450: PUSH
30451: LD_INT 16
30453: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30454: LD_VAR 0 1
30458: PPUSH
30459: LD_VAR 0 2
30463: PPUSH
30464: LD_VAR 0 3
30468: PPUSH
30469: CALL_OW 297
30473: PUSH
30474: LD_VAR 0 5
30478: GREATER
30479: IFFALSE 30558
// begin ComMoveXY ( unit , x , y ) ;
30481: LD_VAR 0 1
30485: PPUSH
30486: LD_VAR 0 2
30490: PPUSH
30491: LD_VAR 0 3
30495: PPUSH
30496: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30500: LD_INT 35
30502: PPUSH
30503: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30507: LD_VAR 0 1
30511: PPUSH
30512: LD_VAR 0 2
30516: PPUSH
30517: LD_VAR 0 3
30521: PPUSH
30522: CALL 67289 0 3
30526: NOT
30527: IFFALSE 30531
// exit ;
30529: GO 30785
// until GetDistUnitXY ( unit , x , y ) < dist ;
30531: LD_VAR 0 1
30535: PPUSH
30536: LD_VAR 0 2
30540: PPUSH
30541: LD_VAR 0 3
30545: PPUSH
30546: CALL_OW 297
30550: PUSH
30551: LD_VAR 0 5
30555: LESS
30556: IFFALSE 30500
// end ; ComTurnXY ( unit , x , y ) ;
30558: LD_VAR 0 1
30562: PPUSH
30563: LD_VAR 0 2
30567: PPUSH
30568: LD_VAR 0 3
30572: PPUSH
30573: CALL_OW 118
// wait ( 5 ) ;
30577: LD_INT 5
30579: PPUSH
30580: CALL_OW 67
// _d := GetDir ( unit ) ;
30584: LD_ADDR_VAR 0 10
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 254
30598: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30599: LD_ADDR_VAR 0 8
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 250
30613: PPUSH
30614: LD_VAR 0 10
30618: PPUSH
30619: LD_VAR 0 5
30623: PPUSH
30624: CALL_OW 272
30628: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30629: LD_ADDR_VAR 0 9
30633: PUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 251
30643: PPUSH
30644: LD_VAR 0 10
30648: PPUSH
30649: LD_VAR 0 5
30653: PPUSH
30654: CALL_OW 273
30658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30659: LD_VAR 0 8
30663: PPUSH
30664: LD_VAR 0 9
30668: PPUSH
30669: CALL_OW 488
30673: NOT
30674: IFFALSE 30678
// exit ;
30676: GO 30785
// ComAnimCustom ( unit , 1 ) ;
30678: LD_VAR 0 1
30682: PPUSH
30683: LD_INT 1
30685: PPUSH
30686: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30690: LD_VAR 0 8
30694: PPUSH
30695: LD_VAR 0 9
30699: PPUSH
30700: LD_VAR 0 6
30704: PPUSH
30705: LD_VAR 0 7
30709: PPUSH
30710: CALL_OW 330
// repeat wait ( 1 ) ;
30714: LD_INT 1
30716: PPUSH
30717: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 316
30730: PUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 314
30740: OR
30741: PUSH
30742: LD_VAR 0 1
30746: PPUSH
30747: CALL_OW 302
30751: NOT
30752: OR
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 301
30763: OR
30764: IFFALSE 30714
// RemoveSeeing ( _x , _y , side ) ;
30766: LD_VAR 0 8
30770: PPUSH
30771: LD_VAR 0 9
30775: PPUSH
30776: LD_VAR 0 6
30780: PPUSH
30781: CALL_OW 331
// end ; end_of_file
30785: LD_VAR 0 4
30789: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30790: LD_INT 0
30792: PPUSH
30793: PPUSH
// if exist_mode then
30794: LD_VAR 0 2
30798: IFFALSE 30823
// unit := CreateCharacter ( prefix & ident ) else
30800: LD_ADDR_VAR 0 5
30804: PUSH
30805: LD_VAR 0 3
30809: PUSH
30810: LD_VAR 0 1
30814: STR
30815: PPUSH
30816: CALL_OW 34
30820: ST_TO_ADDR
30821: GO 30838
// unit := NewCharacter ( ident ) ;
30823: LD_ADDR_VAR 0 5
30827: PUSH
30828: LD_VAR 0 1
30832: PPUSH
30833: CALL_OW 25
30837: ST_TO_ADDR
// result := unit ;
30838: LD_ADDR_VAR 0 4
30842: PUSH
30843: LD_VAR 0 5
30847: ST_TO_ADDR
// end ;
30848: LD_VAR 0 4
30852: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
// if not side or not nation then
30857: LD_VAR 0 1
30861: NOT
30862: PUSH
30863: LD_VAR 0 2
30867: NOT
30868: OR
30869: IFFALSE 30873
// exit ;
30871: GO 31641
// case nation of nation_american :
30873: LD_VAR 0 2
30877: PUSH
30878: LD_INT 1
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 31100
30886: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30887: LD_ADDR_VAR 0 4
30891: PUSH
30892: LD_INT 35
30894: PUSH
30895: LD_INT 45
30897: PUSH
30898: LD_INT 46
30900: PUSH
30901: LD_INT 47
30903: PUSH
30904: LD_INT 82
30906: PUSH
30907: LD_INT 83
30909: PUSH
30910: LD_INT 84
30912: PUSH
30913: LD_INT 85
30915: PUSH
30916: LD_INT 86
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 6
30927: PUSH
30928: LD_INT 15
30930: PUSH
30931: LD_INT 16
30933: PUSH
30934: LD_INT 7
30936: PUSH
30937: LD_INT 12
30939: PUSH
30940: LD_INT 13
30942: PUSH
30943: LD_INT 10
30945: PUSH
30946: LD_INT 14
30948: PUSH
30949: LD_INT 20
30951: PUSH
30952: LD_INT 21
30954: PUSH
30955: LD_INT 22
30957: PUSH
30958: LD_INT 25
30960: PUSH
30961: LD_INT 32
30963: PUSH
30964: LD_INT 27
30966: PUSH
30967: LD_INT 36
30969: PUSH
30970: LD_INT 69
30972: PUSH
30973: LD_INT 39
30975: PUSH
30976: LD_INT 34
30978: PUSH
30979: LD_INT 40
30981: PUSH
30982: LD_INT 48
30984: PUSH
30985: LD_INT 49
30987: PUSH
30988: LD_INT 50
30990: PUSH
30991: LD_INT 51
30993: PUSH
30994: LD_INT 52
30996: PUSH
30997: LD_INT 53
30999: PUSH
31000: LD_INT 54
31002: PUSH
31003: LD_INT 55
31005: PUSH
31006: LD_INT 56
31008: PUSH
31009: LD_INT 57
31011: PUSH
31012: LD_INT 58
31014: PUSH
31015: LD_INT 59
31017: PUSH
31018: LD_INT 60
31020: PUSH
31021: LD_INT 61
31023: PUSH
31024: LD_INT 62
31026: PUSH
31027: LD_INT 80
31029: PUSH
31030: LD_INT 82
31032: PUSH
31033: LD_INT 83
31035: PUSH
31036: LD_INT 84
31038: PUSH
31039: LD_INT 85
31041: PUSH
31042: LD_INT 86
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
31098: GO 31565
31100: LD_INT 2
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31334
31108: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31109: LD_ADDR_VAR 0 4
31113: PUSH
31114: LD_INT 35
31116: PUSH
31117: LD_INT 45
31119: PUSH
31120: LD_INT 46
31122: PUSH
31123: LD_INT 47
31125: PUSH
31126: LD_INT 82
31128: PUSH
31129: LD_INT 83
31131: PUSH
31132: LD_INT 84
31134: PUSH
31135: LD_INT 85
31137: PUSH
31138: LD_INT 87
31140: PUSH
31141: LD_INT 70
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 11
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: LD_INT 6
31161: PUSH
31162: LD_INT 15
31164: PUSH
31165: LD_INT 18
31167: PUSH
31168: LD_INT 7
31170: PUSH
31171: LD_INT 17
31173: PUSH
31174: LD_INT 8
31176: PUSH
31177: LD_INT 20
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 72
31188: PUSH
31189: LD_INT 26
31191: PUSH
31192: LD_INT 69
31194: PUSH
31195: LD_INT 39
31197: PUSH
31198: LD_INT 40
31200: PUSH
31201: LD_INT 41
31203: PUSH
31204: LD_INT 42
31206: PUSH
31207: LD_INT 43
31209: PUSH
31210: LD_INT 48
31212: PUSH
31213: LD_INT 49
31215: PUSH
31216: LD_INT 50
31218: PUSH
31219: LD_INT 51
31221: PUSH
31222: LD_INT 52
31224: PUSH
31225: LD_INT 53
31227: PUSH
31228: LD_INT 54
31230: PUSH
31231: LD_INT 55
31233: PUSH
31234: LD_INT 56
31236: PUSH
31237: LD_INT 60
31239: PUSH
31240: LD_INT 61
31242: PUSH
31243: LD_INT 62
31245: PUSH
31246: LD_INT 66
31248: PUSH
31249: LD_INT 67
31251: PUSH
31252: LD_INT 68
31254: PUSH
31255: LD_INT 81
31257: PUSH
31258: LD_INT 82
31260: PUSH
31261: LD_INT 83
31263: PUSH
31264: LD_INT 84
31266: PUSH
31267: LD_INT 85
31269: PUSH
31270: LD_INT 87
31272: PUSH
31273: LD_INT 88
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31565
31334: LD_INT 3
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31564
31342: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: LD_INT 46
31350: PUSH
31351: LD_INT 47
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 82
31362: PUSH
31363: LD_INT 83
31365: PUSH
31366: LD_INT 84
31368: PUSH
31369: LD_INT 85
31371: PUSH
31372: LD_INT 86
31374: PUSH
31375: LD_INT 11
31377: PUSH
31378: LD_INT 9
31380: PUSH
31381: LD_INT 20
31383: PUSH
31384: LD_INT 19
31386: PUSH
31387: LD_INT 21
31389: PUSH
31390: LD_INT 24
31392: PUSH
31393: LD_INT 22
31395: PUSH
31396: LD_INT 25
31398: PUSH
31399: LD_INT 28
31401: PUSH
31402: LD_INT 29
31404: PUSH
31405: LD_INT 30
31407: PUSH
31408: LD_INT 31
31410: PUSH
31411: LD_INT 37
31413: PUSH
31414: LD_INT 38
31416: PUSH
31417: LD_INT 32
31419: PUSH
31420: LD_INT 27
31422: PUSH
31423: LD_INT 33
31425: PUSH
31426: LD_INT 69
31428: PUSH
31429: LD_INT 39
31431: PUSH
31432: LD_INT 34
31434: PUSH
31435: LD_INT 40
31437: PUSH
31438: LD_INT 71
31440: PUSH
31441: LD_INT 23
31443: PUSH
31444: LD_INT 44
31446: PUSH
31447: LD_INT 48
31449: PUSH
31450: LD_INT 49
31452: PUSH
31453: LD_INT 50
31455: PUSH
31456: LD_INT 51
31458: PUSH
31459: LD_INT 52
31461: PUSH
31462: LD_INT 53
31464: PUSH
31465: LD_INT 54
31467: PUSH
31468: LD_INT 55
31470: PUSH
31471: LD_INT 56
31473: PUSH
31474: LD_INT 57
31476: PUSH
31477: LD_INT 58
31479: PUSH
31480: LD_INT 59
31482: PUSH
31483: LD_INT 63
31485: PUSH
31486: LD_INT 64
31488: PUSH
31489: LD_INT 65
31491: PUSH
31492: LD_INT 82
31494: PUSH
31495: LD_INT 83
31497: PUSH
31498: LD_INT 84
31500: PUSH
31501: LD_INT 85
31503: PUSH
31504: LD_INT 86
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
31562: GO 31565
31564: POP
// if state > - 1 and state < 3 then
31565: LD_VAR 0 3
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: GREATER
31574: PUSH
31575: LD_VAR 0 3
31579: PUSH
31580: LD_INT 3
31582: LESS
31583: AND
31584: IFFALSE 31641
// for i in result do
31586: LD_ADDR_VAR 0 5
31590: PUSH
31591: LD_VAR 0 4
31595: PUSH
31596: FOR_IN
31597: IFFALSE 31639
// if GetTech ( i , side ) <> state then
31599: LD_VAR 0 5
31603: PPUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 321
31613: PUSH
31614: LD_VAR 0 3
31618: NONEQUAL
31619: IFFALSE 31637
// result := result diff i ;
31621: LD_ADDR_VAR 0 4
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: LD_VAR 0 5
31635: DIFF
31636: ST_TO_ADDR
31637: GO 31596
31639: POP
31640: POP
// end ;
31641: LD_VAR 0 4
31645: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31646: LD_INT 0
31648: PPUSH
31649: PPUSH
31650: PPUSH
// result := true ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 1
31658: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31659: LD_ADDR_VAR 0 5
31663: PUSH
31664: LD_VAR 0 2
31668: PPUSH
31669: CALL_OW 480
31673: ST_TO_ADDR
// if not tmp then
31674: LD_VAR 0 5
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31732
// for i in tmp do
31683: LD_ADDR_VAR 0 4
31687: PUSH
31688: LD_VAR 0 5
31692: PUSH
31693: FOR_IN
31694: IFFALSE 31730
// if GetTech ( i , side ) <> state_researched then
31696: LD_VAR 0 4
31700: PPUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 321
31710: PUSH
31711: LD_INT 2
31713: NONEQUAL
31714: IFFALSE 31728
// begin result := false ;
31716: LD_ADDR_VAR 0 3
31720: PUSH
31721: LD_INT 0
31723: ST_TO_ADDR
// exit ;
31724: POP
31725: POP
31726: GO 31732
// end ;
31728: GO 31693
31730: POP
31731: POP
// end ;
31732: LD_VAR 0 3
31736: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31737: LD_INT 0
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31752: LD_VAR 0 1
31756: NOT
31757: PUSH
31758: LD_VAR 0 1
31762: PPUSH
31763: CALL_OW 257
31767: PUSH
31768: LD_INT 9
31770: NONEQUAL
31771: OR
31772: IFFALSE 31776
// exit ;
31774: GO 32349
// side := GetSide ( unit ) ;
31776: LD_ADDR_VAR 0 9
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: CALL_OW 255
31790: ST_TO_ADDR
// tech_space := tech_spacanom ;
31791: LD_ADDR_VAR 0 12
31795: PUSH
31796: LD_INT 29
31798: ST_TO_ADDR
// tech_time := tech_taurad ;
31799: LD_ADDR_VAR 0 13
31803: PUSH
31804: LD_INT 28
31806: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31807: LD_ADDR_VAR 0 11
31811: PUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 310
31821: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31822: LD_VAR 0 11
31826: PPUSH
31827: CALL_OW 247
31831: PUSH
31832: LD_INT 2
31834: EQUAL
31835: IFFALSE 31839
// exit ;
31837: GO 32349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31839: LD_ADDR_VAR 0 8
31843: PUSH
31844: LD_INT 81
31846: PUSH
31847: LD_VAR 0 9
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 21
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PPUSH
31877: CALL_OW 69
31881: ST_TO_ADDR
// if not tmp then
31882: LD_VAR 0 8
31886: NOT
31887: IFFALSE 31891
// exit ;
31889: GO 32349
// if in_unit then
31891: LD_VAR 0 11
31895: IFFALSE 31919
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31897: LD_ADDR_VAR 0 10
31901: PUSH
31902: LD_VAR 0 8
31906: PPUSH
31907: LD_VAR 0 11
31911: PPUSH
31912: CALL_OW 74
31916: ST_TO_ADDR
31917: GO 31939
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31919: LD_ADDR_VAR 0 10
31923: PUSH
31924: LD_VAR 0 8
31928: PPUSH
31929: LD_VAR 0 1
31933: PPUSH
31934: CALL_OW 74
31938: ST_TO_ADDR
// if not enemy then
31939: LD_VAR 0 10
31943: NOT
31944: IFFALSE 31948
// exit ;
31946: GO 32349
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31948: LD_VAR 0 11
31952: PUSH
31953: LD_VAR 0 11
31957: PPUSH
31958: LD_VAR 0 10
31962: PPUSH
31963: CALL_OW 296
31967: PUSH
31968: LD_INT 13
31970: GREATER
31971: AND
31972: PUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: LD_VAR 0 10
31982: PPUSH
31983: CALL_OW 296
31987: PUSH
31988: LD_INT 12
31990: GREATER
31991: OR
31992: IFFALSE 31996
// exit ;
31994: GO 32349
// missile := [ 1 ] ;
31996: LD_ADDR_VAR 0 14
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32007: LD_VAR 0 9
32011: PPUSH
32012: LD_VAR 0 12
32016: PPUSH
32017: CALL_OW 325
32021: IFFALSE 32050
// missile := Replace ( missile , missile + 1 , 2 ) ;
32023: LD_ADDR_VAR 0 14
32027: PUSH
32028: LD_VAR 0 14
32032: PPUSH
32033: LD_VAR 0 14
32037: PUSH
32038: LD_INT 1
32040: PLUS
32041: PPUSH
32042: LD_INT 2
32044: PPUSH
32045: CALL_OW 1
32049: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32050: LD_VAR 0 9
32054: PPUSH
32055: LD_VAR 0 13
32059: PPUSH
32060: CALL_OW 325
32064: PUSH
32065: LD_VAR 0 10
32069: PPUSH
32070: CALL_OW 255
32074: PPUSH
32075: LD_VAR 0 13
32079: PPUSH
32080: CALL_OW 325
32084: NOT
32085: AND
32086: IFFALSE 32115
// missile := Replace ( missile , missile + 1 , 3 ) ;
32088: LD_ADDR_VAR 0 14
32092: PUSH
32093: LD_VAR 0 14
32097: PPUSH
32098: LD_VAR 0 14
32102: PUSH
32103: LD_INT 1
32105: PLUS
32106: PPUSH
32107: LD_INT 3
32109: PPUSH
32110: CALL_OW 1
32114: ST_TO_ADDR
// if missile < 2 then
32115: LD_VAR 0 14
32119: PUSH
32120: LD_INT 2
32122: LESS
32123: IFFALSE 32127
// exit ;
32125: GO 32349
// x := GetX ( enemy ) ;
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: LD_VAR 0 10
32136: PPUSH
32137: CALL_OW 250
32141: ST_TO_ADDR
// y := GetY ( enemy ) ;
32142: LD_ADDR_VAR 0 5
32146: PUSH
32147: LD_VAR 0 10
32151: PPUSH
32152: CALL_OW 251
32156: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32157: LD_ADDR_VAR 0 6
32161: PUSH
32162: LD_VAR 0 4
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PPUSH
32171: LD_INT 1
32173: PPUSH
32174: CALL_OW 12
32178: PLUS
32179: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32180: LD_ADDR_VAR 0 7
32184: PUSH
32185: LD_VAR 0 5
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PPUSH
32194: LD_INT 1
32196: PPUSH
32197: CALL_OW 12
32201: PLUS
32202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32203: LD_VAR 0 6
32207: PPUSH
32208: LD_VAR 0 7
32212: PPUSH
32213: CALL_OW 488
32217: NOT
32218: IFFALSE 32240
// begin _x := x ;
32220: LD_ADDR_VAR 0 6
32224: PUSH
32225: LD_VAR 0 4
32229: ST_TO_ADDR
// _y := y ;
32230: LD_ADDR_VAR 0 7
32234: PUSH
32235: LD_VAR 0 5
32239: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_INT 1
32247: PPUSH
32248: LD_VAR 0 14
32252: PPUSH
32253: CALL_OW 12
32257: ST_TO_ADDR
// case i of 1 :
32258: LD_VAR 0 3
32262: PUSH
32263: LD_INT 1
32265: DOUBLE
32266: EQUAL
32267: IFTRUE 32271
32269: GO 32288
32271: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32272: LD_VAR 0 1
32276: PPUSH
32277: LD_VAR 0 10
32281: PPUSH
32282: CALL_OW 115
32286: GO 32349
32288: LD_INT 2
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32318
32296: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32297: LD_VAR 0 1
32301: PPUSH
32302: LD_VAR 0 6
32306: PPUSH
32307: LD_VAR 0 7
32311: PPUSH
32312: CALL_OW 153
32316: GO 32349
32318: LD_INT 3
32320: DOUBLE
32321: EQUAL
32322: IFTRUE 32326
32324: GO 32348
32326: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32327: LD_VAR 0 1
32331: PPUSH
32332: LD_VAR 0 6
32336: PPUSH
32337: LD_VAR 0 7
32341: PPUSH
32342: CALL_OW 154
32346: GO 32349
32348: POP
// end ;
32349: LD_VAR 0 2
32353: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32354: LD_INT 0
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
// if not unit or not building then
32362: LD_VAR 0 1
32366: NOT
32367: PUSH
32368: LD_VAR 0 2
32372: NOT
32373: OR
32374: IFFALSE 32378
// exit ;
32376: GO 32536
// x := GetX ( building ) ;
32378: LD_ADDR_VAR 0 5
32382: PUSH
32383: LD_VAR 0 2
32387: PPUSH
32388: CALL_OW 250
32392: ST_TO_ADDR
// y := GetY ( building ) ;
32393: LD_ADDR_VAR 0 6
32397: PUSH
32398: LD_VAR 0 2
32402: PPUSH
32403: CALL_OW 251
32407: ST_TO_ADDR
// for i = 0 to 5 do
32408: LD_ADDR_VAR 0 4
32412: PUSH
32413: DOUBLE
32414: LD_INT 0
32416: DEC
32417: ST_TO_ADDR
32418: LD_INT 5
32420: PUSH
32421: FOR_TO
32422: IFFALSE 32534
// begin _x := ShiftX ( x , i , 3 ) ;
32424: LD_ADDR_VAR 0 7
32428: PUSH
32429: LD_VAR 0 5
32433: PPUSH
32434: LD_VAR 0 4
32438: PPUSH
32439: LD_INT 3
32441: PPUSH
32442: CALL_OW 272
32446: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32447: LD_ADDR_VAR 0 8
32451: PUSH
32452: LD_VAR 0 6
32456: PPUSH
32457: LD_VAR 0 4
32461: PPUSH
32462: LD_INT 3
32464: PPUSH
32465: CALL_OW 273
32469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32470: LD_VAR 0 7
32474: PPUSH
32475: LD_VAR 0 8
32479: PPUSH
32480: CALL_OW 488
32484: NOT
32485: IFFALSE 32489
// continue ;
32487: GO 32421
// if HexInfo ( _x , _y ) = 0 then
32489: LD_VAR 0 7
32493: PPUSH
32494: LD_VAR 0 8
32498: PPUSH
32499: CALL_OW 428
32503: PUSH
32504: LD_INT 0
32506: EQUAL
32507: IFFALSE 32532
// begin ComMoveXY ( unit , _x , _y ) ;
32509: LD_VAR 0 1
32513: PPUSH
32514: LD_VAR 0 7
32518: PPUSH
32519: LD_VAR 0 8
32523: PPUSH
32524: CALL_OW 111
// exit ;
32528: POP
32529: POP
32530: GO 32536
// end ; end ;
32532: GO 32421
32534: POP
32535: POP
// end ;
32536: LD_VAR 0 3
32540: RET
// export function ScanBase ( side , base_area ) ; begin
32541: LD_INT 0
32543: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_INT 81
32556: PUSH
32557: LD_VAR 0 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PPUSH
32566: CALL_OW 70
32570: ST_TO_ADDR
// end ;
32571: LD_VAR 0 3
32575: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32576: LD_INT 0
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
// result := false ;
32582: LD_ADDR_VAR 0 2
32586: PUSH
32587: LD_INT 0
32589: ST_TO_ADDR
// side := GetSide ( unit ) ;
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL_OW 255
32604: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32605: LD_ADDR_VAR 0 4
32609: PUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL_OW 248
32619: ST_TO_ADDR
// case nat of 1 :
32620: LD_VAR 0 4
32624: PUSH
32625: LD_INT 1
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32633
32631: GO 32644
32633: POP
// tech := tech_lassight ; 2 :
32634: LD_ADDR_VAR 0 5
32638: PUSH
32639: LD_INT 12
32641: ST_TO_ADDR
32642: GO 32683
32644: LD_INT 2
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32663
32652: POP
// tech := tech_mortar ; 3 :
32653: LD_ADDR_VAR 0 5
32657: PUSH
32658: LD_INT 41
32660: ST_TO_ADDR
32661: GO 32683
32663: LD_INT 3
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32682
32671: POP
// tech := tech_bazooka ; end ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_INT 44
32679: ST_TO_ADDR
32680: GO 32683
32682: POP
// if Researched ( side , tech ) then
32683: LD_VAR 0 3
32687: PPUSH
32688: LD_VAR 0 5
32692: PPUSH
32693: CALL_OW 325
32697: IFFALSE 32724
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32699: LD_ADDR_VAR 0 2
32703: PUSH
32704: LD_INT 5
32706: PUSH
32707: LD_INT 8
32709: PUSH
32710: LD_INT 9
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: PUSH
32718: LD_VAR 0 4
32722: ARRAY
32723: ST_TO_ADDR
// end ;
32724: LD_VAR 0 2
32728: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32729: LD_INT 0
32731: PPUSH
32732: PPUSH
32733: PPUSH
// if not mines then
32734: LD_VAR 0 2
32738: NOT
32739: IFFALSE 32743
// exit ;
32741: GO 32887
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32743: LD_ADDR_VAR 0 5
32747: PUSH
32748: LD_INT 81
32750: PUSH
32751: LD_VAR 0 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 21
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PPUSH
32781: CALL_OW 69
32785: ST_TO_ADDR
// for i in mines do
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_VAR 0 2
32795: PUSH
32796: FOR_IN
32797: IFFALSE 32885
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32799: LD_VAR 0 4
32803: PUSH
32804: LD_INT 1
32806: ARRAY
32807: PPUSH
32808: LD_VAR 0 4
32812: PUSH
32813: LD_INT 2
32815: ARRAY
32816: PPUSH
32817: CALL_OW 458
32821: NOT
32822: IFFALSE 32826
// continue ;
32824: GO 32796
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32826: LD_VAR 0 4
32830: PUSH
32831: LD_INT 1
32833: ARRAY
32834: PPUSH
32835: LD_VAR 0 4
32839: PUSH
32840: LD_INT 2
32842: ARRAY
32843: PPUSH
32844: CALL_OW 428
32848: PUSH
32849: LD_VAR 0 5
32853: IN
32854: IFFALSE 32883
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32856: LD_VAR 0 4
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: PPUSH
32865: LD_VAR 0 4
32869: PUSH
32870: LD_INT 2
32872: ARRAY
32873: PPUSH
32874: LD_VAR 0 1
32878: PPUSH
32879: CALL_OW 456
// end ;
32883: GO 32796
32885: POP
32886: POP
// end ;
32887: LD_VAR 0 3
32891: RET
// export function Count ( array ) ; begin
32892: LD_INT 0
32894: PPUSH
// result := array + 0 ;
32895: LD_ADDR_VAR 0 2
32899: PUSH
32900: LD_VAR 0 1
32904: PUSH
32905: LD_INT 0
32907: PLUS
32908: ST_TO_ADDR
// end ;
32909: LD_VAR 0 2
32913: RET
// export function IsEmpty ( building ) ; begin
32914: LD_INT 0
32916: PPUSH
// if not building then
32917: LD_VAR 0 1
32921: NOT
32922: IFFALSE 32926
// exit ;
32924: GO 32969
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32926: LD_ADDR_VAR 0 2
32930: PUSH
32931: LD_VAR 0 1
32935: PUSH
32936: LD_INT 22
32938: PUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 255
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 58
32955: PUSH
32956: EMPTY
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 69
32967: IN
32968: ST_TO_ADDR
// end ;
32969: LD_VAR 0 2
32973: RET
// export function IsNotFull ( building ) ; var places ; begin
32974: LD_INT 0
32976: PPUSH
32977: PPUSH
// if not building then
32978: LD_VAR 0 1
32982: NOT
32983: IFFALSE 32987
// exit ;
32985: GO 33015
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32987: LD_ADDR_VAR 0 2
32991: PUSH
32992: LD_VAR 0 1
32996: PPUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 62
33002: PUSH
33003: EMPTY
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PPUSH
33010: CALL_OW 72
33014: ST_TO_ADDR
// end ;
33015: LD_VAR 0 2
33019: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33020: LD_INT 0
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
// tmp := [ ] ;
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: EMPTY
33032: ST_TO_ADDR
// list := [ ] ;
33033: LD_ADDR_VAR 0 5
33037: PUSH
33038: EMPTY
33039: ST_TO_ADDR
// for i = 16 to 25 do
33040: LD_ADDR_VAR 0 4
33044: PUSH
33045: DOUBLE
33046: LD_INT 16
33048: DEC
33049: ST_TO_ADDR
33050: LD_INT 25
33052: PUSH
33053: FOR_TO
33054: IFFALSE 33127
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_VAR 0 3
33065: PUSH
33066: LD_INT 22
33068: PUSH
33069: LD_VAR 0 1
33073: PPUSH
33074: CALL_OW 255
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 91
33085: PUSH
33086: LD_VAR 0 1
33090: PUSH
33091: LD_INT 6
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 30
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: PPUSH
33119: CALL_OW 69
33123: ADD
33124: ST_TO_ADDR
33125: GO 33053
33127: POP
33128: POP
// for i = 1 to tmp do
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: DOUBLE
33135: LD_INT 1
33137: DEC
33138: ST_TO_ADDR
33139: LD_VAR 0 3
33143: PUSH
33144: FOR_TO
33145: IFFALSE 33233
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_VAR 0 5
33156: PUSH
33157: LD_VAR 0 3
33161: PUSH
33162: LD_VAR 0 4
33166: ARRAY
33167: PPUSH
33168: CALL_OW 266
33172: PUSH
33173: LD_VAR 0 3
33177: PUSH
33178: LD_VAR 0 4
33182: ARRAY
33183: PPUSH
33184: CALL_OW 250
33188: PUSH
33189: LD_VAR 0 3
33193: PUSH
33194: LD_VAR 0 4
33198: ARRAY
33199: PPUSH
33200: CALL_OW 251
33204: PUSH
33205: LD_VAR 0 3
33209: PUSH
33210: LD_VAR 0 4
33214: ARRAY
33215: PPUSH
33216: CALL_OW 254
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: PUSH
33227: EMPTY
33228: LIST
33229: ADD
33230: ST_TO_ADDR
33231: GO 33144
33233: POP
33234: POP
// result := list ;
33235: LD_ADDR_VAR 0 2
33239: PUSH
33240: LD_VAR 0 5
33244: ST_TO_ADDR
// end ;
33245: LD_VAR 0 2
33249: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
// if not factory then
33259: LD_VAR 0 1
33263: NOT
33264: IFFALSE 33268
// exit ;
33266: GO 33861
// if control = control_apeman then
33268: LD_VAR 0 4
33272: PUSH
33273: LD_INT 5
33275: EQUAL
33276: IFFALSE 33385
// begin tmp := UnitsInside ( factory ) ;
33278: LD_ADDR_VAR 0 8
33282: PUSH
33283: LD_VAR 0 1
33287: PPUSH
33288: CALL_OW 313
33292: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33293: LD_VAR 0 8
33297: PPUSH
33298: LD_INT 25
33300: PUSH
33301: LD_INT 12
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 72
33312: NOT
33313: IFFALSE 33323
// control := control_manual ;
33315: LD_ADDR_VAR 0 4
33319: PUSH
33320: LD_INT 1
33322: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33323: LD_ADDR_VAR 0 8
33327: PUSH
33328: LD_VAR 0 1
33332: PPUSH
33333: CALL 33020 0 1
33337: ST_TO_ADDR
// if tmp then
33338: LD_VAR 0 8
33342: IFFALSE 33385
// begin for i in tmp do
33344: LD_ADDR_VAR 0 7
33348: PUSH
33349: LD_VAR 0 8
33353: PUSH
33354: FOR_IN
33355: IFFALSE 33383
// if i [ 1 ] = b_ext_radio then
33357: LD_VAR 0 7
33361: PUSH
33362: LD_INT 1
33364: ARRAY
33365: PUSH
33366: LD_INT 22
33368: EQUAL
33369: IFFALSE 33381
// begin control := control_remote ;
33371: LD_ADDR_VAR 0 4
33375: PUSH
33376: LD_INT 2
33378: ST_TO_ADDR
// break ;
33379: GO 33383
// end ;
33381: GO 33354
33383: POP
33384: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33385: LD_VAR 0 1
33389: PPUSH
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 3
33399: PPUSH
33400: LD_VAR 0 4
33404: PPUSH
33405: LD_VAR 0 5
33409: PPUSH
33410: CALL_OW 448
33414: IFFALSE 33449
// begin result := [ chassis , engine , control , weapon ] ;
33416: LD_ADDR_VAR 0 6
33420: PUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_VAR 0 3
33430: PUSH
33431: LD_VAR 0 4
33435: PUSH
33436: LD_VAR 0 5
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// exit ;
33447: GO 33861
// end ; _chassis := AvailableChassisList ( factory ) ;
33449: LD_ADDR_VAR 0 9
33453: PUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 475
33463: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33464: LD_ADDR_VAR 0 11
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 476
33478: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33479: LD_ADDR_VAR 0 12
33483: PUSH
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 477
33493: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33494: LD_ADDR_VAR 0 10
33498: PUSH
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 478
33508: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33509: LD_VAR 0 9
33513: NOT
33514: PUSH
33515: LD_VAR 0 11
33519: NOT
33520: OR
33521: PUSH
33522: LD_VAR 0 12
33526: NOT
33527: OR
33528: PUSH
33529: LD_VAR 0 10
33533: NOT
33534: OR
33535: IFFALSE 33570
// begin result := [ chassis , engine , control , weapon ] ;
33537: LD_ADDR_VAR 0 6
33541: PUSH
33542: LD_VAR 0 2
33546: PUSH
33547: LD_VAR 0 3
33551: PUSH
33552: LD_VAR 0 4
33556: PUSH
33557: LD_VAR 0 5
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
// exit ;
33568: GO 33861
// end ; if not chassis in _chassis then
33570: LD_VAR 0 2
33574: PUSH
33575: LD_VAR 0 9
33579: IN
33580: NOT
33581: IFFALSE 33607
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33583: LD_ADDR_VAR 0 2
33587: PUSH
33588: LD_VAR 0 9
33592: PUSH
33593: LD_INT 1
33595: PPUSH
33596: LD_VAR 0 9
33600: PPUSH
33601: CALL_OW 12
33605: ARRAY
33606: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33607: LD_VAR 0 2
33611: PPUSH
33612: LD_VAR 0 3
33616: PPUSH
33617: CALL 33866 0 2
33621: NOT
33622: IFFALSE 33681
// repeat engine := _engine [ 1 ] ;
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_VAR 0 11
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33638: LD_ADDR_VAR 0 11
33642: PUSH
33643: LD_VAR 0 11
33647: PPUSH
33648: LD_INT 1
33650: PPUSH
33651: CALL_OW 3
33655: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33656: LD_VAR 0 2
33660: PPUSH
33661: LD_VAR 0 3
33665: PPUSH
33666: CALL 33866 0 2
33670: PUSH
33671: LD_VAR 0 11
33675: PUSH
33676: EMPTY
33677: EQUAL
33678: OR
33679: IFFALSE 33624
// if not control in _control then
33681: LD_VAR 0 4
33685: PUSH
33686: LD_VAR 0 12
33690: IN
33691: NOT
33692: IFFALSE 33718
// control := _control [ rand ( 1 , _control ) ] ;
33694: LD_ADDR_VAR 0 4
33698: PUSH
33699: LD_VAR 0 12
33703: PUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 12
33711: PPUSH
33712: CALL_OW 12
33716: ARRAY
33717: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33718: LD_VAR 0 2
33722: PPUSH
33723: LD_VAR 0 5
33727: PPUSH
33728: CALL 34086 0 2
33732: NOT
33733: IFFALSE 33792
// repeat weapon := _weapon [ 1 ] ;
33735: LD_ADDR_VAR 0 5
33739: PUSH
33740: LD_VAR 0 10
33744: PUSH
33745: LD_INT 1
33747: ARRAY
33748: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33749: LD_ADDR_VAR 0 10
33753: PUSH
33754: LD_VAR 0 10
33758: PPUSH
33759: LD_INT 1
33761: PPUSH
33762: CALL_OW 3
33766: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33767: LD_VAR 0 2
33771: PPUSH
33772: LD_VAR 0 5
33776: PPUSH
33777: CALL 34086 0 2
33781: PUSH
33782: LD_VAR 0 10
33786: PUSH
33787: EMPTY
33788: EQUAL
33789: OR
33790: IFFALSE 33735
// result := [ ] ;
33792: LD_ADDR_VAR 0 6
33796: PUSH
33797: EMPTY
33798: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_VAR 0 2
33808: PPUSH
33809: LD_VAR 0 3
33813: PPUSH
33814: LD_VAR 0 4
33818: PPUSH
33819: LD_VAR 0 5
33823: PPUSH
33824: CALL_OW 448
33828: IFFALSE 33861
// result := [ chassis , engine , control , weapon ] ;
33830: LD_ADDR_VAR 0 6
33834: PUSH
33835: LD_VAR 0 2
33839: PUSH
33840: LD_VAR 0 3
33844: PUSH
33845: LD_VAR 0 4
33849: PUSH
33850: LD_VAR 0 5
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
// end ;
33861: LD_VAR 0 6
33865: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33866: LD_INT 0
33868: PPUSH
// if not chassis or not engine then
33869: LD_VAR 0 1
33873: NOT
33874: PUSH
33875: LD_VAR 0 2
33879: NOT
33880: OR
33881: IFFALSE 33885
// exit ;
33883: GO 34081
// case engine of engine_solar :
33885: LD_VAR 0 2
33889: PUSH
33890: LD_INT 2
33892: DOUBLE
33893: EQUAL
33894: IFTRUE 33898
33896: GO 33936
33898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33899: LD_ADDR_VAR 0 3
33903: PUSH
33904: LD_INT 11
33906: PUSH
33907: LD_INT 12
33909: PUSH
33910: LD_INT 13
33912: PUSH
33913: LD_INT 14
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
33934: GO 34065
33936: LD_INT 1
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 34006
33944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: LD_INT 11
33952: PUSH
33953: LD_INT 12
33955: PUSH
33956: LD_INT 13
33958: PUSH
33959: LD_INT 14
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 4
33973: PUSH
33974: LD_INT 5
33976: PUSH
33977: LD_INT 21
33979: PUSH
33980: LD_INT 23
33982: PUSH
33983: LD_INT 22
33985: PUSH
33986: LD_INT 24
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
34004: GO 34065
34006: LD_INT 3
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34014
34012: GO 34064
34014: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34015: LD_ADDR_VAR 0 3
34019: PUSH
34020: LD_INT 13
34022: PUSH
34023: LD_INT 14
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: LD_INT 5
34037: PUSH
34038: LD_INT 21
34040: PUSH
34041: LD_INT 22
34043: PUSH
34044: LD_INT 23
34046: PUSH
34047: LD_INT 24
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34065
34064: POP
// result := ( chassis in result ) ;
34065: LD_ADDR_VAR 0 3
34069: PUSH
34070: LD_VAR 0 1
34074: PUSH
34075: LD_VAR 0 3
34079: IN
34080: ST_TO_ADDR
// end ;
34081: LD_VAR 0 3
34085: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34086: LD_INT 0
34088: PPUSH
// if not chassis or not weapon then
34089: LD_VAR 0 1
34093: NOT
34094: PUSH
34095: LD_VAR 0 2
34099: NOT
34100: OR
34101: IFFALSE 34105
// exit ;
34103: GO 35165
// case weapon of us_machine_gun :
34105: LD_VAR 0 2
34109: PUSH
34110: LD_INT 2
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34148
34118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 4
34135: PUSH
34136: LD_INT 5
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
34146: GO 35149
34148: LD_INT 3
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34186
34156: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34157: LD_ADDR_VAR 0 3
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
34184: GO 35149
34186: LD_INT 11
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34224
34194: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34195: LD_ADDR_VAR 0 3
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 4
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
34222: GO 35149
34224: LD_INT 4
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34232
34230: GO 34258
34232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: LD_INT 4
34246: PUSH
34247: LD_INT 5
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: ST_TO_ADDR
34256: GO 35149
34258: LD_INT 5
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34292
34266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34267: LD_ADDR_VAR 0 3
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 4
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 35149
34292: LD_INT 9
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34326
34300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: LD_INT 5
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
34324: GO 35149
34326: LD_INT 7
34328: DOUBLE
34329: EQUAL
34330: IFTRUE 34334
34332: GO 34360
34334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 4
34348: PUSH
34349: LD_INT 5
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
34358: GO 35149
34360: LD_INT 12
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34394
34368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: LD_INT 4
34382: PUSH
34383: LD_INT 5
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: ST_TO_ADDR
34392: GO 35149
34394: LD_INT 13
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34428
34402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 4
34416: PUSH
34417: LD_INT 5
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
34426: GO 35149
34428: LD_INT 14
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34454
34436: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: LD_INT 5
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 35149
34454: LD_INT 6
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34480
34462: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 35149
34480: LD_INT 10
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34506
34488: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 5
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: ST_TO_ADDR
34504: GO 35149
34506: LD_INT 22
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34540
34514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 11
34522: PUSH
34523: LD_INT 12
34525: PUSH
34526: LD_INT 13
34528: PUSH
34529: LD_INT 14
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
34538: GO 35149
34540: LD_INT 23
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34574
34548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_INT 11
34556: PUSH
34557: LD_INT 12
34559: PUSH
34560: LD_INT 13
34562: PUSH
34563: LD_INT 14
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
34572: GO 35149
34574: LD_INT 24
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 34608
34582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_INT 11
34590: PUSH
34591: LD_INT 12
34593: PUSH
34594: LD_INT 13
34596: PUSH
34597: LD_INT 14
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
34606: GO 35149
34608: LD_INT 30
34610: DOUBLE
34611: EQUAL
34612: IFTRUE 34616
34614: GO 34642
34616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34617: LD_ADDR_VAR 0 3
34621: PUSH
34622: LD_INT 11
34624: PUSH
34625: LD_INT 12
34627: PUSH
34628: LD_INT 13
34630: PUSH
34631: LD_INT 14
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
34640: GO 35149
34642: LD_INT 25
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34668
34650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34651: LD_ADDR_VAR 0 3
34655: PUSH
34656: LD_INT 13
34658: PUSH
34659: LD_INT 14
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: ST_TO_ADDR
34666: GO 35149
34668: LD_INT 27
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34676
34674: GO 34694
34676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_INT 13
34684: PUSH
34685: LD_INT 14
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: ST_TO_ADDR
34692: GO 35149
34694: LD_INT 92
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34728
34702: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_INT 11
34710: PUSH
34711: LD_INT 12
34713: PUSH
34714: LD_INT 13
34716: PUSH
34717: LD_INT 14
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
34726: GO 35149
34728: LD_INT 28
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34754
34736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: LD_INT 13
34744: PUSH
34745: LD_INT 14
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: ST_TO_ADDR
34752: GO 35149
34754: LD_INT 29
34756: DOUBLE
34757: EQUAL
34758: IFTRUE 34762
34760: GO 34780
34762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34763: LD_ADDR_VAR 0 3
34767: PUSH
34768: LD_INT 13
34770: PUSH
34771: LD_INT 14
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: ST_TO_ADDR
34778: GO 35149
34780: LD_INT 31
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34806
34788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34789: LD_ADDR_VAR 0 3
34793: PUSH
34794: LD_INT 13
34796: PUSH
34797: LD_INT 14
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: ST_TO_ADDR
34804: GO 35149
34806: LD_INT 26
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34814
34812: GO 34832
34814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34815: LD_ADDR_VAR 0 3
34819: PUSH
34820: LD_INT 13
34822: PUSH
34823: LD_INT 14
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: ST_TO_ADDR
34830: GO 35149
34832: LD_INT 42
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34866
34840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_INT 21
34848: PUSH
34849: LD_INT 22
34851: PUSH
34852: LD_INT 23
34854: PUSH
34855: LD_INT 24
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
34864: GO 35149
34866: LD_INT 43
34868: DOUBLE
34869: EQUAL
34870: IFTRUE 34874
34872: GO 34900
34874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_INT 21
34882: PUSH
34883: LD_INT 22
34885: PUSH
34886: LD_INT 23
34888: PUSH
34889: LD_INT 24
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
34898: GO 35149
34900: LD_INT 44
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34934
34908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34909: LD_ADDR_VAR 0 3
34913: PUSH
34914: LD_INT 21
34916: PUSH
34917: LD_INT 22
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 24
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: ST_TO_ADDR
34932: GO 35149
34934: LD_INT 45
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34942
34940: GO 34968
34942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34943: LD_ADDR_VAR 0 3
34947: PUSH
34948: LD_INT 21
34950: PUSH
34951: LD_INT 22
34953: PUSH
34954: LD_INT 23
34956: PUSH
34957: LD_INT 24
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
34966: GO 35149
34968: LD_INT 49
34970: DOUBLE
34971: EQUAL
34972: IFTRUE 34976
34974: GO 35002
34976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34977: LD_ADDR_VAR 0 3
34981: PUSH
34982: LD_INT 21
34984: PUSH
34985: LD_INT 22
34987: PUSH
34988: LD_INT 23
34990: PUSH
34991: LD_INT 24
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
35000: GO 35149
35002: LD_INT 51
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35010
35008: GO 35036
35010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35011: LD_ADDR_VAR 0 3
35015: PUSH
35016: LD_INT 21
35018: PUSH
35019: LD_INT 22
35021: PUSH
35022: LD_INT 23
35024: PUSH
35025: LD_INT 24
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
35034: GO 35149
35036: LD_INT 52
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35070
35044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 21
35052: PUSH
35053: LD_INT 22
35055: PUSH
35056: LD_INT 23
35058: PUSH
35059: LD_INT 24
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
35068: GO 35149
35070: LD_INT 53
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35078
35076: GO 35096
35078: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35079: LD_ADDR_VAR 0 3
35083: PUSH
35084: LD_INT 23
35086: PUSH
35087: LD_INT 24
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35149
35096: LD_INT 46
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35122
35104: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 23
35112: PUSH
35113: LD_INT 24
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: ST_TO_ADDR
35120: GO 35149
35122: LD_INT 47
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35130
35128: GO 35148
35130: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35131: LD_ADDR_VAR 0 3
35135: PUSH
35136: LD_INT 23
35138: PUSH
35139: LD_INT 24
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: ST_TO_ADDR
35146: GO 35149
35148: POP
// result := ( chassis in result ) ;
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: LD_VAR 0 3
35163: IN
35164: ST_TO_ADDR
// end ;
35165: LD_VAR 0 3
35169: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
// result := array ;
35179: LD_ADDR_VAR 0 5
35183: PUSH
35184: LD_VAR 0 1
35188: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35189: LD_VAR 0 1
35193: NOT
35194: PUSH
35195: LD_VAR 0 2
35199: NOT
35200: OR
35201: PUSH
35202: LD_VAR 0 3
35206: NOT
35207: OR
35208: PUSH
35209: LD_VAR 0 2
35213: PUSH
35214: LD_VAR 0 1
35218: GREATER
35219: OR
35220: PUSH
35221: LD_VAR 0 3
35225: PUSH
35226: LD_VAR 0 1
35230: GREATER
35231: OR
35232: IFFALSE 35236
// exit ;
35234: GO 35532
// if direction then
35236: LD_VAR 0 4
35240: IFFALSE 35304
// begin d := 1 ;
35242: LD_ADDR_VAR 0 9
35246: PUSH
35247: LD_INT 1
35249: ST_TO_ADDR
// if i_from > i_to then
35250: LD_VAR 0 2
35254: PUSH
35255: LD_VAR 0 3
35259: GREATER
35260: IFFALSE 35286
// length := ( array - i_from ) + i_to else
35262: LD_ADDR_VAR 0 11
35266: PUSH
35267: LD_VAR 0 1
35271: PUSH
35272: LD_VAR 0 2
35276: MINUS
35277: PUSH
35278: LD_VAR 0 3
35282: PLUS
35283: ST_TO_ADDR
35284: GO 35302
// length := i_to - i_from ;
35286: LD_ADDR_VAR 0 11
35290: PUSH
35291: LD_VAR 0 3
35295: PUSH
35296: LD_VAR 0 2
35300: MINUS
35301: ST_TO_ADDR
// end else
35302: GO 35365
// begin d := - 1 ;
35304: LD_ADDR_VAR 0 9
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: ST_TO_ADDR
// if i_from > i_to then
35313: LD_VAR 0 2
35317: PUSH
35318: LD_VAR 0 3
35322: GREATER
35323: IFFALSE 35343
// length := i_from - i_to else
35325: LD_ADDR_VAR 0 11
35329: PUSH
35330: LD_VAR 0 2
35334: PUSH
35335: LD_VAR 0 3
35339: MINUS
35340: ST_TO_ADDR
35341: GO 35365
// length := ( array - i_to ) + i_from ;
35343: LD_ADDR_VAR 0 11
35347: PUSH
35348: LD_VAR 0 1
35352: PUSH
35353: LD_VAR 0 3
35357: MINUS
35358: PUSH
35359: LD_VAR 0 2
35363: PLUS
35364: ST_TO_ADDR
// end ; if not length then
35365: LD_VAR 0 11
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 35532
// tmp := array ;
35374: LD_ADDR_VAR 0 10
35378: PUSH
35379: LD_VAR 0 1
35383: ST_TO_ADDR
// for i = 1 to length do
35384: LD_ADDR_VAR 0 6
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 11
35398: PUSH
35399: FOR_TO
35400: IFFALSE 35520
// begin for j = 1 to array do
35402: LD_ADDR_VAR 0 7
35406: PUSH
35407: DOUBLE
35408: LD_INT 1
35410: DEC
35411: ST_TO_ADDR
35412: LD_VAR 0 1
35416: PUSH
35417: FOR_TO
35418: IFFALSE 35506
// begin k := j + d ;
35420: LD_ADDR_VAR 0 8
35424: PUSH
35425: LD_VAR 0 7
35429: PUSH
35430: LD_VAR 0 9
35434: PLUS
35435: ST_TO_ADDR
// if k > array then
35436: LD_VAR 0 8
35440: PUSH
35441: LD_VAR 0 1
35445: GREATER
35446: IFFALSE 35456
// k := 1 ;
35448: LD_ADDR_VAR 0 8
35452: PUSH
35453: LD_INT 1
35455: ST_TO_ADDR
// if not k then
35456: LD_VAR 0 8
35460: NOT
35461: IFFALSE 35473
// k := array ;
35463: LD_ADDR_VAR 0 8
35467: PUSH
35468: LD_VAR 0 1
35472: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35473: LD_ADDR_VAR 0 10
35477: PUSH
35478: LD_VAR 0 10
35482: PPUSH
35483: LD_VAR 0 8
35487: PPUSH
35488: LD_VAR 0 1
35492: PUSH
35493: LD_VAR 0 7
35497: ARRAY
35498: PPUSH
35499: CALL_OW 1
35503: ST_TO_ADDR
// end ;
35504: GO 35417
35506: POP
35507: POP
// array := tmp ;
35508: LD_ADDR_VAR 0 1
35512: PUSH
35513: LD_VAR 0 10
35517: ST_TO_ADDR
// end ;
35518: GO 35399
35520: POP
35521: POP
// result := array ;
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: LD_VAR 0 1
35531: ST_TO_ADDR
// end ;
35532: LD_VAR 0 5
35536: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35537: LD_INT 0
35539: PPUSH
35540: PPUSH
// result := 0 ;
35541: LD_ADDR_VAR 0 3
35545: PUSH
35546: LD_INT 0
35548: ST_TO_ADDR
// if not array or not value in array then
35549: LD_VAR 0 1
35553: NOT
35554: PUSH
35555: LD_VAR 0 2
35559: PUSH
35560: LD_VAR 0 1
35564: IN
35565: NOT
35566: OR
35567: IFFALSE 35571
// exit ;
35569: GO 35625
// for i = 1 to array do
35571: LD_ADDR_VAR 0 4
35575: PUSH
35576: DOUBLE
35577: LD_INT 1
35579: DEC
35580: ST_TO_ADDR
35581: LD_VAR 0 1
35585: PUSH
35586: FOR_TO
35587: IFFALSE 35623
// if value = array [ i ] then
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 1
35598: PUSH
35599: LD_VAR 0 4
35603: ARRAY
35604: EQUAL
35605: IFFALSE 35621
// begin result := i ;
35607: LD_ADDR_VAR 0 3
35611: PUSH
35612: LD_VAR 0 4
35616: ST_TO_ADDR
// exit ;
35617: POP
35618: POP
35619: GO 35625
// end ;
35621: GO 35586
35623: POP
35624: POP
// end ;
35625: LD_VAR 0 3
35629: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35630: LD_INT 0
35632: PPUSH
// vc_chassis := chassis ;
35633: LD_ADDR_OWVAR 37
35637: PUSH
35638: LD_VAR 0 1
35642: ST_TO_ADDR
// vc_engine := engine ;
35643: LD_ADDR_OWVAR 39
35647: PUSH
35648: LD_VAR 0 2
35652: ST_TO_ADDR
// vc_control := control ;
35653: LD_ADDR_OWVAR 38
35657: PUSH
35658: LD_VAR 0 3
35662: ST_TO_ADDR
// vc_weapon := weapon ;
35663: LD_ADDR_OWVAR 40
35667: PUSH
35668: LD_VAR 0 4
35672: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35673: LD_ADDR_OWVAR 41
35677: PUSH
35678: LD_VAR 0 5
35682: ST_TO_ADDR
// end ;
35683: LD_VAR 0 6
35687: RET
// export function WantPlant ( unit ) ; var task ; begin
35688: LD_INT 0
35690: PPUSH
35691: PPUSH
// result := false ;
35692: LD_ADDR_VAR 0 2
35696: PUSH
35697: LD_INT 0
35699: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35700: LD_ADDR_VAR 0 3
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 437
35714: ST_TO_ADDR
// if task then
35715: LD_VAR 0 3
35719: IFFALSE 35747
// if task [ 1 ] [ 1 ] = p then
35721: LD_VAR 0 3
35725: PUSH
35726: LD_INT 1
35728: ARRAY
35729: PUSH
35730: LD_INT 1
35732: ARRAY
35733: PUSH
35734: LD_STRING p
35736: EQUAL
35737: IFFALSE 35747
// result := true ;
35739: LD_ADDR_VAR 0 2
35743: PUSH
35744: LD_INT 1
35746: ST_TO_ADDR
// end ;
35747: LD_VAR 0 2
35751: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35752: LD_INT 0
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
// if pos < 1 then
35758: LD_VAR 0 2
35762: PUSH
35763: LD_INT 1
35765: LESS
35766: IFFALSE 35770
// exit ;
35768: GO 36073
// if pos = 1 then
35770: LD_VAR 0 2
35774: PUSH
35775: LD_INT 1
35777: EQUAL
35778: IFFALSE 35811
// result := Replace ( arr , pos [ 1 ] , value ) else
35780: LD_ADDR_VAR 0 4
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: LD_VAR 0 2
35794: PUSH
35795: LD_INT 1
35797: ARRAY
35798: PPUSH
35799: LD_VAR 0 3
35803: PPUSH
35804: CALL_OW 1
35808: ST_TO_ADDR
35809: GO 36073
// begin tmp := arr ;
35811: LD_ADDR_VAR 0 6
35815: PUSH
35816: LD_VAR 0 1
35820: ST_TO_ADDR
// s_arr := [ tmp ] ;
35821: LD_ADDR_VAR 0 7
35825: PUSH
35826: LD_VAR 0 6
35830: PUSH
35831: EMPTY
35832: LIST
35833: ST_TO_ADDR
// for i = 1 to pos - 1 do
35834: LD_ADDR_VAR 0 5
35838: PUSH
35839: DOUBLE
35840: LD_INT 1
35842: DEC
35843: ST_TO_ADDR
35844: LD_VAR 0 2
35848: PUSH
35849: LD_INT 1
35851: MINUS
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35899
// begin tmp := tmp [ pos [ i ] ] ;
35856: LD_ADDR_VAR 0 6
35860: PUSH
35861: LD_VAR 0 6
35865: PUSH
35866: LD_VAR 0 2
35870: PUSH
35871: LD_VAR 0 5
35875: ARRAY
35876: ARRAY
35877: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35878: LD_ADDR_VAR 0 7
35882: PUSH
35883: LD_VAR 0 7
35887: PUSH
35888: LD_VAR 0 6
35892: PUSH
35893: EMPTY
35894: LIST
35895: ADD
35896: ST_TO_ADDR
// end ;
35897: GO 35853
35899: POP
35900: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35901: LD_ADDR_VAR 0 6
35905: PUSH
35906: LD_VAR 0 6
35910: PPUSH
35911: LD_VAR 0 2
35915: PUSH
35916: LD_VAR 0 2
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 3
35926: PPUSH
35927: CALL_OW 1
35931: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35932: LD_ADDR_VAR 0 7
35936: PUSH
35937: LD_VAR 0 7
35941: PPUSH
35942: LD_VAR 0 7
35946: PPUSH
35947: LD_VAR 0 6
35951: PPUSH
35952: CALL_OW 1
35956: ST_TO_ADDR
// for i = s_arr downto 2 do
35957: LD_ADDR_VAR 0 5
35961: PUSH
35962: DOUBLE
35963: LD_VAR 0 7
35967: INC
35968: ST_TO_ADDR
35969: LD_INT 2
35971: PUSH
35972: FOR_DOWNTO
35973: IFFALSE 36057
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35975: LD_ADDR_VAR 0 6
35979: PUSH
35980: LD_VAR 0 7
35984: PUSH
35985: LD_VAR 0 5
35989: PUSH
35990: LD_INT 1
35992: MINUS
35993: ARRAY
35994: PPUSH
35995: LD_VAR 0 2
35999: PUSH
36000: LD_VAR 0 5
36004: PUSH
36005: LD_INT 1
36007: MINUS
36008: ARRAY
36009: PPUSH
36010: LD_VAR 0 7
36014: PUSH
36015: LD_VAR 0 5
36019: ARRAY
36020: PPUSH
36021: CALL_OW 1
36025: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36026: LD_ADDR_VAR 0 7
36030: PUSH
36031: LD_VAR 0 7
36035: PPUSH
36036: LD_VAR 0 5
36040: PUSH
36041: LD_INT 1
36043: MINUS
36044: PPUSH
36045: LD_VAR 0 6
36049: PPUSH
36050: CALL_OW 1
36054: ST_TO_ADDR
// end ;
36055: GO 35972
36057: POP
36058: POP
// result := s_arr [ 1 ] ;
36059: LD_ADDR_VAR 0 4
36063: PUSH
36064: LD_VAR 0 7
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: ST_TO_ADDR
// end ; end ;
36073: LD_VAR 0 4
36077: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
// if not list then
36082: LD_VAR 0 1
36086: NOT
36087: IFFALSE 36091
// exit ;
36089: GO 36182
// i := list [ pos1 ] ;
36091: LD_ADDR_VAR 0 5
36095: PUSH
36096: LD_VAR 0 1
36100: PUSH
36101: LD_VAR 0 2
36105: ARRAY
36106: ST_TO_ADDR
// if not i then
36107: LD_VAR 0 5
36111: NOT
36112: IFFALSE 36116
// exit ;
36114: GO 36182
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36116: LD_ADDR_VAR 0 1
36120: PUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: LD_VAR 0 2
36130: PPUSH
36131: LD_VAR 0 1
36135: PUSH
36136: LD_VAR 0 3
36140: ARRAY
36141: PPUSH
36142: CALL_OW 1
36146: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36147: LD_ADDR_VAR 0 1
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: LD_VAR 0 3
36161: PPUSH
36162: LD_VAR 0 5
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
// result := list ;
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: LD_VAR 0 1
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 4
36186: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36187: LD_INT 0
36189: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36190: LD_ADDR_VAR 0 5
36194: PUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 250
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 251
36214: PPUSH
36215: LD_VAR 0 2
36219: PPUSH
36220: LD_VAR 0 3
36224: PPUSH
36225: LD_VAR 0 4
36229: PPUSH
36230: CALL 36608 0 5
36234: ST_TO_ADDR
// end ;
36235: LD_VAR 0 5
36239: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36240: LD_INT 0
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
// if not list or not unit then
36246: LD_VAR 0 2
36250: NOT
36251: PUSH
36252: LD_VAR 0 1
36256: NOT
36257: OR
36258: IFFALSE 36262
// exit ;
36260: GO 36603
// result := [ ] ;
36262: LD_ADDR_VAR 0 5
36266: PUSH
36267: EMPTY
36268: ST_TO_ADDR
// for i in list do
36269: LD_ADDR_VAR 0 6
36273: PUSH
36274: LD_VAR 0 2
36278: PUSH
36279: FOR_IN
36280: IFFALSE 36498
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36282: LD_ADDR_VAR 0 8
36286: PUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: LD_VAR 0 6
36296: PUSH
36297: LD_INT 1
36299: ARRAY
36300: PPUSH
36301: LD_VAR 0 6
36305: PUSH
36306: LD_INT 2
36308: ARRAY
36309: PPUSH
36310: CALL_OW 297
36314: ST_TO_ADDR
// if not Count ( result ) then
36315: LD_VAR 0 5
36319: PPUSH
36320: CALL 32892 0 1
36324: NOT
36325: IFFALSE 36358
// begin result := Join ( result , [ i , tmp ] ) ;
36327: LD_ADDR_VAR 0 5
36331: PUSH
36332: LD_VAR 0 5
36336: PPUSH
36337: LD_VAR 0 6
36341: PUSH
36342: LD_VAR 0 8
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PPUSH
36351: CALL 68492 0 2
36355: ST_TO_ADDR
// continue ;
36356: GO 36279
// end ; if result [ result ] [ 2 ] <= tmp then
36358: LD_VAR 0 5
36362: PUSH
36363: LD_VAR 0 5
36367: ARRAY
36368: PUSH
36369: LD_INT 2
36371: ARRAY
36372: PUSH
36373: LD_VAR 0 8
36377: LESSEQUAL
36378: IFFALSE 36411
// result := Join ( result , [ i , tmp ] ) else
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_VAR 0 5
36389: PPUSH
36390: LD_VAR 0 6
36394: PUSH
36395: LD_VAR 0 8
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PPUSH
36404: CALL 68492 0 2
36408: ST_TO_ADDR
36409: GO 36496
// begin for j := 1 to Count ( result ) do
36411: LD_ADDR_VAR 0 7
36415: PUSH
36416: DOUBLE
36417: LD_INT 1
36419: DEC
36420: ST_TO_ADDR
36421: LD_VAR 0 5
36425: PPUSH
36426: CALL 32892 0 1
36430: PUSH
36431: FOR_TO
36432: IFFALSE 36494
// begin if tmp < result [ j ] [ 2 ] then
36434: LD_VAR 0 8
36438: PUSH
36439: LD_VAR 0 5
36443: PUSH
36444: LD_VAR 0 7
36448: ARRAY
36449: PUSH
36450: LD_INT 2
36452: ARRAY
36453: LESS
36454: IFFALSE 36492
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36456: LD_ADDR_VAR 0 5
36460: PUSH
36461: LD_VAR 0 5
36465: PPUSH
36466: LD_VAR 0 7
36470: PPUSH
36471: LD_VAR 0 6
36475: PUSH
36476: LD_VAR 0 8
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PPUSH
36485: CALL_OW 2
36489: ST_TO_ADDR
// break ;
36490: GO 36494
// end ; end ;
36492: GO 36431
36494: POP
36495: POP
// end ; end ;
36496: GO 36279
36498: POP
36499: POP
// if result and not asc then
36500: LD_VAR 0 5
36504: PUSH
36505: LD_VAR 0 3
36509: NOT
36510: AND
36511: IFFALSE 36528
// result := ReverseArray ( result ) ;
36513: LD_ADDR_VAR 0 5
36517: PUSH
36518: LD_VAR 0 5
36522: PPUSH
36523: CALL 63768 0 1
36527: ST_TO_ADDR
// tmp := [ ] ;
36528: LD_ADDR_VAR 0 8
36532: PUSH
36533: EMPTY
36534: ST_TO_ADDR
// if mode then
36535: LD_VAR 0 4
36539: IFFALSE 36603
// begin for i := 1 to result do
36541: LD_ADDR_VAR 0 6
36545: PUSH
36546: DOUBLE
36547: LD_INT 1
36549: DEC
36550: ST_TO_ADDR
36551: LD_VAR 0 5
36555: PUSH
36556: FOR_TO
36557: IFFALSE 36591
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36559: LD_ADDR_VAR 0 8
36563: PUSH
36564: LD_VAR 0 8
36568: PPUSH
36569: LD_VAR 0 5
36573: PUSH
36574: LD_VAR 0 6
36578: ARRAY
36579: PUSH
36580: LD_INT 1
36582: ARRAY
36583: PPUSH
36584: CALL 68492 0 2
36588: ST_TO_ADDR
36589: GO 36556
36591: POP
36592: POP
// result := tmp ;
36593: LD_ADDR_VAR 0 5
36597: PUSH
36598: LD_VAR 0 8
36602: ST_TO_ADDR
// end ; end ;
36603: LD_VAR 0 5
36607: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36608: LD_INT 0
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
// if not list then
36614: LD_VAR 0 3
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 37011
// result := [ ] ;
36623: LD_ADDR_VAR 0 6
36627: PUSH
36628: EMPTY
36629: ST_TO_ADDR
// for i in list do
36630: LD_ADDR_VAR 0 7
36634: PUSH
36635: LD_VAR 0 3
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36843
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36643: LD_ADDR_VAR 0 9
36647: PUSH
36648: LD_VAR 0 7
36652: PPUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: LD_VAR 0 2
36662: PPUSH
36663: CALL_OW 297
36667: ST_TO_ADDR
// if not result then
36668: LD_VAR 0 6
36672: NOT
36673: IFFALSE 36699
// result := [ [ i , tmp ] ] else
36675: LD_ADDR_VAR 0 6
36679: PUSH
36680: LD_VAR 0 7
36684: PUSH
36685: LD_VAR 0 9
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: ST_TO_ADDR
36697: GO 36841
// begin if result [ result ] [ 2 ] < tmp then
36699: LD_VAR 0 6
36703: PUSH
36704: LD_VAR 0 6
36708: ARRAY
36709: PUSH
36710: LD_INT 2
36712: ARRAY
36713: PUSH
36714: LD_VAR 0 9
36718: LESS
36719: IFFALSE 36761
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36721: LD_ADDR_VAR 0 6
36725: PUSH
36726: LD_VAR 0 6
36730: PPUSH
36731: LD_VAR 0 6
36735: PUSH
36736: LD_INT 1
36738: PLUS
36739: PPUSH
36740: LD_VAR 0 7
36744: PUSH
36745: LD_VAR 0 9
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PPUSH
36754: CALL_OW 2
36758: ST_TO_ADDR
36759: GO 36841
// for j = 1 to result do
36761: LD_ADDR_VAR 0 8
36765: PUSH
36766: DOUBLE
36767: LD_INT 1
36769: DEC
36770: ST_TO_ADDR
36771: LD_VAR 0 6
36775: PUSH
36776: FOR_TO
36777: IFFALSE 36839
// begin if tmp < result [ j ] [ 2 ] then
36779: LD_VAR 0 9
36783: PUSH
36784: LD_VAR 0 6
36788: PUSH
36789: LD_VAR 0 8
36793: ARRAY
36794: PUSH
36795: LD_INT 2
36797: ARRAY
36798: LESS
36799: IFFALSE 36837
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36801: LD_ADDR_VAR 0 6
36805: PUSH
36806: LD_VAR 0 6
36810: PPUSH
36811: LD_VAR 0 8
36815: PPUSH
36816: LD_VAR 0 7
36820: PUSH
36821: LD_VAR 0 9
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PPUSH
36830: CALL_OW 2
36834: ST_TO_ADDR
// break ;
36835: GO 36839
// end ; end ;
36837: GO 36776
36839: POP
36840: POP
// end ; end ;
36841: GO 36640
36843: POP
36844: POP
// if result and not asc then
36845: LD_VAR 0 6
36849: PUSH
36850: LD_VAR 0 4
36854: NOT
36855: AND
36856: IFFALSE 36931
// begin tmp := result ;
36858: LD_ADDR_VAR 0 9
36862: PUSH
36863: LD_VAR 0 6
36867: ST_TO_ADDR
// for i = tmp downto 1 do
36868: LD_ADDR_VAR 0 7
36872: PUSH
36873: DOUBLE
36874: LD_VAR 0 9
36878: INC
36879: ST_TO_ADDR
36880: LD_INT 1
36882: PUSH
36883: FOR_DOWNTO
36884: IFFALSE 36929
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36886: LD_ADDR_VAR 0 6
36890: PUSH
36891: LD_VAR 0 6
36895: PPUSH
36896: LD_VAR 0 9
36900: PUSH
36901: LD_VAR 0 7
36905: MINUS
36906: PUSH
36907: LD_INT 1
36909: PLUS
36910: PPUSH
36911: LD_VAR 0 9
36915: PUSH
36916: LD_VAR 0 7
36920: ARRAY
36921: PPUSH
36922: CALL_OW 1
36926: ST_TO_ADDR
36927: GO 36883
36929: POP
36930: POP
// end ; tmp := [ ] ;
36931: LD_ADDR_VAR 0 9
36935: PUSH
36936: EMPTY
36937: ST_TO_ADDR
// if mode then
36938: LD_VAR 0 5
36942: IFFALSE 37011
// begin for i = 1 to result do
36944: LD_ADDR_VAR 0 7
36948: PUSH
36949: DOUBLE
36950: LD_INT 1
36952: DEC
36953: ST_TO_ADDR
36954: LD_VAR 0 6
36958: PUSH
36959: FOR_TO
36960: IFFALSE 36999
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36962: LD_ADDR_VAR 0 9
36966: PUSH
36967: LD_VAR 0 9
36971: PPUSH
36972: LD_VAR 0 7
36976: PPUSH
36977: LD_VAR 0 6
36981: PUSH
36982: LD_VAR 0 7
36986: ARRAY
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: CALL_OW 1
36996: ST_TO_ADDR
36997: GO 36959
36999: POP
37000: POP
// result := tmp ;
37001: LD_ADDR_VAR 0 6
37005: PUSH
37006: LD_VAR 0 9
37010: ST_TO_ADDR
// end ; end ;
37011: LD_VAR 0 6
37015: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37016: LD_INT 0
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37024: LD_ADDR_VAR 0 5
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// if not x or not y then
37046: LD_VAR 0 2
37050: NOT
37051: PUSH
37052: LD_VAR 0 3
37056: NOT
37057: OR
37058: IFFALSE 37062
// exit ;
37060: GO 38712
// if not range then
37062: LD_VAR 0 4
37066: NOT
37067: IFFALSE 37077
// range := 10 ;
37069: LD_ADDR_VAR 0 4
37073: PUSH
37074: LD_INT 10
37076: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37077: LD_ADDR_VAR 0 8
37081: PUSH
37082: LD_INT 81
37084: PUSH
37085: LD_VAR 0 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 92
37096: PUSH
37097: LD_VAR 0 2
37101: PUSH
37102: LD_VAR 0 3
37106: PUSH
37107: LD_VAR 0 4
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: LD_INT 21
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 69
37144: ST_TO_ADDR
// if not tmp then
37145: LD_VAR 0 8
37149: NOT
37150: IFFALSE 37154
// exit ;
37152: GO 38712
// for i in tmp do
37154: LD_ADDR_VAR 0 6
37158: PUSH
37159: LD_VAR 0 8
37163: PUSH
37164: FOR_IN
37165: IFFALSE 38687
// begin points := [ 0 , 0 , 0 ] ;
37167: LD_ADDR_VAR 0 9
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// bpoints := 1 ;
37186: LD_ADDR_VAR 0 10
37190: PUSH
37191: LD_INT 1
37193: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37194: LD_VAR 0 6
37198: PPUSH
37199: CALL_OW 247
37203: PUSH
37204: LD_INT 1
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37212
37210: GO 37790
37212: POP
// begin if GetClass ( i ) = 1 then
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 257
37222: PUSH
37223: LD_INT 1
37225: EQUAL
37226: IFFALSE 37247
// points := [ 10 , 5 , 3 ] ;
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_INT 10
37235: PUSH
37236: LD_INT 5
37238: PUSH
37239: LD_INT 3
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 257
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: LD_INT 3
37262: PUSH
37263: LD_INT 4
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: IN
37271: IFFALSE 37292
// points := [ 3 , 2 , 1 ] ;
37273: LD_ADDR_VAR 0 9
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37292: LD_VAR 0 6
37296: PPUSH
37297: CALL_OW 257
37301: PUSH
37302: LD_INT 5
37304: EQUAL
37305: IFFALSE 37326
// points := [ 130 , 5 , 2 ] ;
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: LD_INT 130
37314: PUSH
37315: LD_INT 5
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37326: LD_VAR 0 6
37330: PPUSH
37331: CALL_OW 257
37335: PUSH
37336: LD_INT 8
37338: EQUAL
37339: IFFALSE 37360
// points := [ 35 , 35 , 30 ] ;
37341: LD_ADDR_VAR 0 9
37345: PUSH
37346: LD_INT 35
37348: PUSH
37349: LD_INT 35
37351: PUSH
37352: LD_INT 30
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37360: LD_VAR 0 6
37364: PPUSH
37365: CALL_OW 257
37369: PUSH
37370: LD_INT 9
37372: EQUAL
37373: IFFALSE 37394
// points := [ 20 , 55 , 40 ] ;
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_INT 20
37382: PUSH
37383: LD_INT 55
37385: PUSH
37386: LD_INT 40
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 257
37403: PUSH
37404: LD_INT 12
37406: PUSH
37407: LD_INT 16
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: IN
37414: IFFALSE 37435
// points := [ 5 , 3 , 2 ] ;
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: LD_INT 5
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37435: LD_VAR 0 6
37439: PPUSH
37440: CALL_OW 257
37444: PUSH
37445: LD_INT 17
37447: EQUAL
37448: IFFALSE 37469
// points := [ 100 , 50 , 75 ] ;
37450: LD_ADDR_VAR 0 9
37454: PUSH
37455: LD_INT 100
37457: PUSH
37458: LD_INT 50
37460: PUSH
37461: LD_INT 75
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37469: LD_VAR 0 6
37473: PPUSH
37474: CALL_OW 257
37478: PUSH
37479: LD_INT 15
37481: EQUAL
37482: IFFALSE 37503
// points := [ 10 , 5 , 3 ] ;
37484: LD_ADDR_VAR 0 9
37488: PUSH
37489: LD_INT 10
37491: PUSH
37492: LD_INT 5
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37503: LD_VAR 0 6
37507: PPUSH
37508: CALL_OW 257
37512: PUSH
37513: LD_INT 14
37515: EQUAL
37516: IFFALSE 37537
// points := [ 10 , 0 , 0 ] ;
37518: LD_ADDR_VAR 0 9
37522: PUSH
37523: LD_INT 10
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37537: LD_VAR 0 6
37541: PPUSH
37542: CALL_OW 257
37546: PUSH
37547: LD_INT 11
37549: EQUAL
37550: IFFALSE 37571
// points := [ 30 , 10 , 5 ] ;
37552: LD_ADDR_VAR 0 9
37556: PUSH
37557: LD_INT 30
37559: PUSH
37560: LD_INT 10
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37571: LD_VAR 0 1
37575: PPUSH
37576: LD_INT 5
37578: PPUSH
37579: CALL_OW 321
37583: PUSH
37584: LD_INT 2
37586: EQUAL
37587: IFFALSE 37604
// bpoints := bpoints * 1.8 ;
37589: LD_ADDR_VAR 0 10
37593: PUSH
37594: LD_VAR 0 10
37598: PUSH
37599: LD_REAL  1.80000000000000E+0000
37602: MUL
37603: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37604: LD_VAR 0 6
37608: PPUSH
37609: CALL_OW 257
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: LD_INT 4
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: IN
37632: PUSH
37633: LD_VAR 0 1
37637: PPUSH
37638: LD_INT 51
37640: PPUSH
37641: CALL_OW 321
37645: PUSH
37646: LD_INT 2
37648: EQUAL
37649: AND
37650: IFFALSE 37667
// bpoints := bpoints * 1.2 ;
37652: LD_ADDR_VAR 0 10
37656: PUSH
37657: LD_VAR 0 10
37661: PUSH
37662: LD_REAL  1.20000000000000E+0000
37665: MUL
37666: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37667: LD_VAR 0 6
37671: PPUSH
37672: CALL_OW 257
37676: PUSH
37677: LD_INT 5
37679: PUSH
37680: LD_INT 7
37682: PUSH
37683: LD_INT 9
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: IN
37691: PUSH
37692: LD_VAR 0 1
37696: PPUSH
37697: LD_INT 52
37699: PPUSH
37700: CALL_OW 321
37704: PUSH
37705: LD_INT 2
37707: EQUAL
37708: AND
37709: IFFALSE 37726
// bpoints := bpoints * 1.5 ;
37711: LD_ADDR_VAR 0 10
37715: PUSH
37716: LD_VAR 0 10
37720: PUSH
37721: LD_REAL  1.50000000000000E+0000
37724: MUL
37725: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37726: LD_VAR 0 1
37730: PPUSH
37731: LD_INT 66
37733: PPUSH
37734: CALL_OW 321
37738: PUSH
37739: LD_INT 2
37741: EQUAL
37742: IFFALSE 37759
// bpoints := bpoints * 1.1 ;
37744: LD_ADDR_VAR 0 10
37748: PUSH
37749: LD_VAR 0 10
37753: PUSH
37754: LD_REAL  1.10000000000000E+0000
37757: MUL
37758: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37759: LD_ADDR_VAR 0 10
37763: PUSH
37764: LD_VAR 0 10
37768: PUSH
37769: LD_VAR 0 6
37773: PPUSH
37774: LD_INT 1
37776: PPUSH
37777: CALL_OW 259
37781: PUSH
37782: LD_REAL  1.15000000000000E+0000
37785: MUL
37786: MUL
37787: ST_TO_ADDR
// end ; unit_vehicle :
37788: GO 38616
37790: LD_INT 2
37792: DOUBLE
37793: EQUAL
37794: IFTRUE 37798
37796: GO 38604
37798: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37799: LD_VAR 0 6
37803: PPUSH
37804: CALL_OW 264
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 42
37814: PUSH
37815: LD_INT 24
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: IN
37823: IFFALSE 37844
// points := [ 25 , 5 , 3 ] ;
37825: LD_ADDR_VAR 0 9
37829: PUSH
37830: LD_INT 25
37832: PUSH
37833: LD_INT 5
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37844: LD_VAR 0 6
37848: PPUSH
37849: CALL_OW 264
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: LD_INT 43
37859: PUSH
37860: LD_INT 25
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: IN
37868: IFFALSE 37889
// points := [ 40 , 15 , 5 ] ;
37870: LD_ADDR_VAR 0 9
37874: PUSH
37875: LD_INT 40
37877: PUSH
37878: LD_INT 15
37880: PUSH
37881: LD_INT 5
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37889: LD_VAR 0 6
37893: PPUSH
37894: CALL_OW 264
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: LD_INT 23
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: IN
37909: IFFALSE 37930
// points := [ 7 , 25 , 8 ] ;
37911: LD_ADDR_VAR 0 9
37915: PUSH
37916: LD_INT 7
37918: PUSH
37919: LD_INT 25
37921: PUSH
37922: LD_INT 8
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37930: LD_VAR 0 6
37934: PPUSH
37935: CALL_OW 264
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: LD_INT 27
37945: PUSH
37946: LD_INT 44
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: IN
37954: IFFALSE 37975
// points := [ 14 , 50 , 16 ] ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_INT 14
37963: PUSH
37964: LD_INT 50
37966: PUSH
37967: LD_INT 16
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37975: LD_VAR 0 6
37979: PPUSH
37980: CALL_OW 264
37984: PUSH
37985: LD_INT 6
37987: PUSH
37988: LD_INT 46
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: IN
37995: IFFALSE 38016
// points := [ 32 , 120 , 70 ] ;
37997: LD_ADDR_VAR 0 9
38001: PUSH
38002: LD_INT 32
38004: PUSH
38005: LD_INT 120
38007: PUSH
38008: LD_INT 70
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38016: LD_VAR 0 6
38020: PPUSH
38021: CALL_OW 264
38025: PUSH
38026: LD_INT 7
38028: PUSH
38029: LD_INT 28
38031: PUSH
38032: LD_INT 45
38034: PUSH
38035: LD_INT 92
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: IN
38044: IFFALSE 38065
// points := [ 35 , 20 , 45 ] ;
38046: LD_ADDR_VAR 0 9
38050: PUSH
38051: LD_INT 35
38053: PUSH
38054: LD_INT 20
38056: PUSH
38057: LD_INT 45
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38065: LD_VAR 0 6
38069: PPUSH
38070: CALL_OW 264
38074: PUSH
38075: LD_INT 47
38077: PUSH
38078: EMPTY
38079: LIST
38080: IN
38081: IFFALSE 38102
// points := [ 67 , 45 , 75 ] ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_INT 67
38090: PUSH
38091: LD_INT 45
38093: PUSH
38094: LD_INT 75
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38102: LD_VAR 0 6
38106: PPUSH
38107: CALL_OW 264
38111: PUSH
38112: LD_INT 26
38114: PUSH
38115: EMPTY
38116: LIST
38117: IN
38118: IFFALSE 38139
// points := [ 120 , 30 , 80 ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_INT 120
38127: PUSH
38128: LD_INT 30
38130: PUSH
38131: LD_INT 80
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 264
38148: PUSH
38149: LD_INT 22
38151: PUSH
38152: EMPTY
38153: LIST
38154: IN
38155: IFFALSE 38176
// points := [ 40 , 1 , 1 ] ;
38157: LD_ADDR_VAR 0 9
38161: PUSH
38162: LD_INT 40
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38176: LD_VAR 0 6
38180: PPUSH
38181: CALL_OW 264
38185: PUSH
38186: LD_INT 29
38188: PUSH
38189: EMPTY
38190: LIST
38191: IN
38192: IFFALSE 38213
// points := [ 70 , 200 , 400 ] ;
38194: LD_ADDR_VAR 0 9
38198: PUSH
38199: LD_INT 70
38201: PUSH
38202: LD_INT 200
38204: PUSH
38205: LD_INT 400
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38213: LD_VAR 0 6
38217: PPUSH
38218: CALL_OW 264
38222: PUSH
38223: LD_INT 14
38225: PUSH
38226: LD_INT 53
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: IN
38233: IFFALSE 38254
// points := [ 40 , 10 , 20 ] ;
38235: LD_ADDR_VAR 0 9
38239: PUSH
38240: LD_INT 40
38242: PUSH
38243: LD_INT 10
38245: PUSH
38246: LD_INT 20
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38254: LD_VAR 0 6
38258: PPUSH
38259: CALL_OW 264
38263: PUSH
38264: LD_INT 9
38266: PUSH
38267: EMPTY
38268: LIST
38269: IN
38270: IFFALSE 38291
// points := [ 5 , 70 , 20 ] ;
38272: LD_ADDR_VAR 0 9
38276: PUSH
38277: LD_INT 5
38279: PUSH
38280: LD_INT 70
38282: PUSH
38283: LD_INT 20
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38291: LD_VAR 0 6
38295: PPUSH
38296: CALL_OW 264
38300: PUSH
38301: LD_INT 10
38303: PUSH
38304: EMPTY
38305: LIST
38306: IN
38307: IFFALSE 38328
// points := [ 35 , 110 , 70 ] ;
38309: LD_ADDR_VAR 0 9
38313: PUSH
38314: LD_INT 35
38316: PUSH
38317: LD_INT 110
38319: PUSH
38320: LD_INT 70
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38328: LD_VAR 0 6
38332: PPUSH
38333: CALL_OW 265
38337: PUSH
38338: LD_INT 25
38340: EQUAL
38341: IFFALSE 38362
// points := [ 80 , 65 , 100 ] ;
38343: LD_ADDR_VAR 0 9
38347: PUSH
38348: LD_INT 80
38350: PUSH
38351: LD_INT 65
38353: PUSH
38354: LD_INT 100
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38362: LD_VAR 0 6
38366: PPUSH
38367: CALL_OW 263
38371: PUSH
38372: LD_INT 1
38374: EQUAL
38375: IFFALSE 38410
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38377: LD_ADDR_VAR 0 10
38381: PUSH
38382: LD_VAR 0 10
38386: PUSH
38387: LD_VAR 0 6
38391: PPUSH
38392: CALL_OW 311
38396: PPUSH
38397: LD_INT 3
38399: PPUSH
38400: CALL_OW 259
38404: PUSH
38405: LD_INT 4
38407: MUL
38408: MUL
38409: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38410: LD_VAR 0 6
38414: PPUSH
38415: CALL_OW 263
38419: PUSH
38420: LD_INT 2
38422: EQUAL
38423: IFFALSE 38474
// begin j := IsControledBy ( i ) ;
38425: LD_ADDR_VAR 0 7
38429: PUSH
38430: LD_VAR 0 6
38434: PPUSH
38435: CALL_OW 312
38439: ST_TO_ADDR
// if j then
38440: LD_VAR 0 7
38444: IFFALSE 38474
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38446: LD_ADDR_VAR 0 10
38450: PUSH
38451: LD_VAR 0 10
38455: PUSH
38456: LD_VAR 0 7
38460: PPUSH
38461: LD_INT 3
38463: PPUSH
38464: CALL_OW 259
38468: PUSH
38469: LD_INT 3
38471: MUL
38472: MUL
38473: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38474: LD_VAR 0 6
38478: PPUSH
38479: CALL_OW 264
38483: PUSH
38484: LD_INT 5
38486: PUSH
38487: LD_INT 6
38489: PUSH
38490: LD_INT 46
38492: PUSH
38493: LD_INT 44
38495: PUSH
38496: LD_INT 47
38498: PUSH
38499: LD_INT 45
38501: PUSH
38502: LD_INT 28
38504: PUSH
38505: LD_INT 7
38507: PUSH
38508: LD_INT 27
38510: PUSH
38511: LD_INT 29
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: IN
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: LD_INT 52
38534: PPUSH
38535: CALL_OW 321
38539: PUSH
38540: LD_INT 2
38542: EQUAL
38543: AND
38544: IFFALSE 38561
// bpoints := bpoints * 1.2 ;
38546: LD_ADDR_VAR 0 10
38550: PUSH
38551: LD_VAR 0 10
38555: PUSH
38556: LD_REAL  1.20000000000000E+0000
38559: MUL
38560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38561: LD_VAR 0 6
38565: PPUSH
38566: CALL_OW 264
38570: PUSH
38571: LD_INT 6
38573: PUSH
38574: LD_INT 46
38576: PUSH
38577: LD_INT 47
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: IN
38585: IFFALSE 38602
// bpoints := bpoints * 1.2 ;
38587: LD_ADDR_VAR 0 10
38591: PUSH
38592: LD_VAR 0 10
38596: PUSH
38597: LD_REAL  1.20000000000000E+0000
38600: MUL
38601: ST_TO_ADDR
// end ; unit_building :
38602: GO 38616
38604: LD_INT 3
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38615
38612: POP
// ; end ;
38613: GO 38616
38615: POP
// for j = 1 to 3 do
38616: LD_ADDR_VAR 0 7
38620: PUSH
38621: DOUBLE
38622: LD_INT 1
38624: DEC
38625: ST_TO_ADDR
38626: LD_INT 3
38628: PUSH
38629: FOR_TO
38630: IFFALSE 38683
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_VAR 0 5
38641: PPUSH
38642: LD_VAR 0 7
38646: PPUSH
38647: LD_VAR 0 5
38651: PUSH
38652: LD_VAR 0 7
38656: ARRAY
38657: PUSH
38658: LD_VAR 0 9
38662: PUSH
38663: LD_VAR 0 7
38667: ARRAY
38668: PUSH
38669: LD_VAR 0 10
38673: MUL
38674: PLUS
38675: PPUSH
38676: CALL_OW 1
38680: ST_TO_ADDR
38681: GO 38629
38683: POP
38684: POP
// end ;
38685: GO 37164
38687: POP
38688: POP
// result := Replace ( result , 4 , tmp ) ;
38689: LD_ADDR_VAR 0 5
38693: PUSH
38694: LD_VAR 0 5
38698: PPUSH
38699: LD_INT 4
38701: PPUSH
38702: LD_VAR 0 8
38706: PPUSH
38707: CALL_OW 1
38711: ST_TO_ADDR
// end ;
38712: LD_VAR 0 5
38716: RET
// export function DangerAtRange ( unit , range ) ; begin
38717: LD_INT 0
38719: PPUSH
// if not unit then
38720: LD_VAR 0 1
38724: NOT
38725: IFFALSE 38729
// exit ;
38727: GO 38774
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL_OW 255
38743: PPUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 250
38753: PPUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL_OW 251
38763: PPUSH
38764: LD_VAR 0 2
38768: PPUSH
38769: CALL 37016 0 4
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 3
38778: RET
// export function DangerInArea ( side , area ) ; begin
38779: LD_INT 0
38781: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38782: LD_ADDR_VAR 0 3
38786: PUSH
38787: LD_VAR 0 2
38791: PPUSH
38792: LD_INT 81
38794: PUSH
38795: LD_VAR 0 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PPUSH
38804: CALL_OW 70
38808: ST_TO_ADDR
// end ;
38809: LD_VAR 0 3
38813: RET
// export function IsExtension ( b ) ; begin
38814: LD_INT 0
38816: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38817: LD_ADDR_VAR 0 2
38821: PUSH
38822: LD_VAR 0 1
38826: PUSH
38827: LD_INT 23
38829: PUSH
38830: LD_INT 20
38832: PUSH
38833: LD_INT 22
38835: PUSH
38836: LD_INT 17
38838: PUSH
38839: LD_INT 24
38841: PUSH
38842: LD_INT 21
38844: PUSH
38845: LD_INT 19
38847: PUSH
38848: LD_INT 16
38850: PUSH
38851: LD_INT 25
38853: PUSH
38854: LD_INT 18
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: IN
38869: ST_TO_ADDR
// end ;
38870: LD_VAR 0 2
38874: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38875: LD_INT 0
38877: PPUSH
38878: PPUSH
38879: PPUSH
// result := [ ] ;
38880: LD_ADDR_VAR 0 4
38884: PUSH
38885: EMPTY
38886: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_VAR 0 2
38896: PPUSH
38897: LD_INT 21
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PPUSH
38907: CALL_OW 70
38911: ST_TO_ADDR
// if not tmp then
38912: LD_VAR 0 5
38916: NOT
38917: IFFALSE 38921
// exit ;
38919: GO 38985
// if checkLink then
38921: LD_VAR 0 3
38925: IFFALSE 38975
// begin for i in tmp do
38927: LD_ADDR_VAR 0 6
38931: PUSH
38932: LD_VAR 0 5
38936: PUSH
38937: FOR_IN
38938: IFFALSE 38973
// if GetBase ( i ) <> base then
38940: LD_VAR 0 6
38944: PPUSH
38945: CALL_OW 274
38949: PUSH
38950: LD_VAR 0 1
38954: NONEQUAL
38955: IFFALSE 38971
// ComLinkToBase ( base , i ) ;
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_VAR 0 6
38966: PPUSH
38967: CALL_OW 169
38971: GO 38937
38973: POP
38974: POP
// end ; result := tmp ;
38975: LD_ADDR_VAR 0 4
38979: PUSH
38980: LD_VAR 0 5
38984: ST_TO_ADDR
// end ;
38985: LD_VAR 0 4
38989: RET
// export function ComComplete ( units , b ) ; var i ; begin
38990: LD_INT 0
38992: PPUSH
38993: PPUSH
// if not units then
38994: LD_VAR 0 1
38998: NOT
38999: IFFALSE 39003
// exit ;
39001: GO 39093
// for i in units do
39003: LD_ADDR_VAR 0 4
39007: PUSH
39008: LD_VAR 0 1
39012: PUSH
39013: FOR_IN
39014: IFFALSE 39091
// if BuildingStatus ( b ) = bs_build then
39016: LD_VAR 0 2
39020: PPUSH
39021: CALL_OW 461
39025: PUSH
39026: LD_INT 1
39028: EQUAL
39029: IFFALSE 39089
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39031: LD_VAR 0 4
39035: PPUSH
39036: LD_STRING h
39038: PUSH
39039: LD_VAR 0 2
39043: PPUSH
39044: CALL_OW 250
39048: PUSH
39049: LD_VAR 0 2
39053: PPUSH
39054: CALL_OW 251
39058: PUSH
39059: LD_VAR 0 2
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: PUSH
39082: EMPTY
39083: LIST
39084: PPUSH
39085: CALL_OW 446
39089: GO 39013
39091: POP
39092: POP
// end ;
39093: LD_VAR 0 3
39097: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39098: LD_INT 0
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39106: LD_VAR 0 1
39110: NOT
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 263
39121: PUSH
39122: LD_INT 2
39124: NONEQUAL
39125: OR
39126: IFFALSE 39130
// exit ;
39128: GO 39446
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39130: LD_ADDR_VAR 0 6
39134: PUSH
39135: LD_INT 22
39137: PUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 255
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 30
39157: PUSH
39158: LD_INT 36
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 34
39167: PUSH
39168: LD_INT 31
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PPUSH
39184: CALL_OW 69
39188: ST_TO_ADDR
// if not tmp then
39189: LD_VAR 0 6
39193: NOT
39194: IFFALSE 39198
// exit ;
39196: GO 39446
// result := [ ] ;
39198: LD_ADDR_VAR 0 2
39202: PUSH
39203: EMPTY
39204: ST_TO_ADDR
// for i in tmp do
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_VAR 0 6
39214: PUSH
39215: FOR_IN
39216: IFFALSE 39287
// begin t := UnitsInside ( i ) ;
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL_OW 313
39232: ST_TO_ADDR
// if t then
39233: LD_VAR 0 4
39237: IFFALSE 39285
// for j in t do
39239: LD_ADDR_VAR 0 7
39243: PUSH
39244: LD_VAR 0 4
39248: PUSH
39249: FOR_IN
39250: IFFALSE 39283
// result := Replace ( result , result + 1 , j ) ;
39252: LD_ADDR_VAR 0 2
39256: PUSH
39257: LD_VAR 0 2
39261: PPUSH
39262: LD_VAR 0 2
39266: PUSH
39267: LD_INT 1
39269: PLUS
39270: PPUSH
39271: LD_VAR 0 7
39275: PPUSH
39276: CALL_OW 1
39280: ST_TO_ADDR
39281: GO 39249
39283: POP
39284: POP
// end ;
39285: GO 39215
39287: POP
39288: POP
// if not result then
39289: LD_VAR 0 2
39293: NOT
39294: IFFALSE 39298
// exit ;
39296: GO 39446
// mech := result [ 1 ] ;
39298: LD_ADDR_VAR 0 5
39302: PUSH
39303: LD_VAR 0 2
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: ST_TO_ADDR
// if result > 1 then
39312: LD_VAR 0 2
39316: PUSH
39317: LD_INT 1
39319: GREATER
39320: IFFALSE 39432
// begin for i = 2 to result do
39322: LD_ADDR_VAR 0 3
39326: PUSH
39327: DOUBLE
39328: LD_INT 2
39330: DEC
39331: ST_TO_ADDR
39332: LD_VAR 0 2
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39430
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39340: LD_ADDR_VAR 0 4
39344: PUSH
39345: LD_VAR 0 2
39349: PUSH
39350: LD_VAR 0 3
39354: ARRAY
39355: PPUSH
39356: LD_INT 3
39358: PPUSH
39359: CALL_OW 259
39363: PUSH
39364: LD_VAR 0 2
39368: PUSH
39369: LD_VAR 0 3
39373: ARRAY
39374: PPUSH
39375: CALL_OW 432
39379: MINUS
39380: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39381: LD_VAR 0 4
39385: PUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: LD_INT 3
39393: PPUSH
39394: CALL_OW 259
39398: PUSH
39399: LD_VAR 0 5
39403: PPUSH
39404: CALL_OW 432
39408: MINUS
39409: GREATEREQUAL
39410: IFFALSE 39428
// mech := result [ i ] ;
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: LD_VAR 0 2
39421: PUSH
39422: LD_VAR 0 3
39426: ARRAY
39427: ST_TO_ADDR
// end ;
39428: GO 39337
39430: POP
39431: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39432: LD_VAR 0 1
39436: PPUSH
39437: LD_VAR 0 5
39441: PPUSH
39442: CALL_OW 135
// end ;
39446: LD_VAR 0 2
39450: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
// result := [ ] ;
39466: LD_ADDR_VAR 0 7
39470: PUSH
39471: EMPTY
39472: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39473: LD_VAR 0 1
39477: PPUSH
39478: CALL_OW 266
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: IN
39493: NOT
39494: IFFALSE 39498
// exit ;
39496: GO 41132
// if name then
39498: LD_VAR 0 3
39502: IFFALSE 39518
// SetBName ( base_dep , name ) ;
39504: LD_VAR 0 1
39508: PPUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: CALL_OW 500
// base := GetBase ( base_dep ) ;
39518: LD_ADDR_VAR 0 15
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 274
39532: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39533: LD_ADDR_VAR 0 16
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 255
39547: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39548: LD_ADDR_VAR 0 17
39552: PUSH
39553: LD_VAR 0 1
39557: PPUSH
39558: CALL_OW 248
39562: ST_TO_ADDR
// if sources then
39563: LD_VAR 0 5
39567: IFFALSE 39614
// for i = 1 to 3 do
39569: LD_ADDR_VAR 0 8
39573: PUSH
39574: DOUBLE
39575: LD_INT 1
39577: DEC
39578: ST_TO_ADDR
39579: LD_INT 3
39581: PUSH
39582: FOR_TO
39583: IFFALSE 39612
// AddResourceType ( base , i , sources [ i ] ) ;
39585: LD_VAR 0 15
39589: PPUSH
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_VAR 0 5
39599: PUSH
39600: LD_VAR 0 8
39604: ARRAY
39605: PPUSH
39606: CALL_OW 276
39610: GO 39582
39612: POP
39613: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39614: LD_ADDR_VAR 0 18
39618: PUSH
39619: LD_VAR 0 15
39623: PPUSH
39624: LD_VAR 0 2
39628: PPUSH
39629: LD_INT 1
39631: PPUSH
39632: CALL 38875 0 3
39636: ST_TO_ADDR
// InitHc ;
39637: CALL_OW 19
// InitUc ;
39641: CALL_OW 18
// uc_side := side ;
39645: LD_ADDR_OWVAR 20
39649: PUSH
39650: LD_VAR 0 16
39654: ST_TO_ADDR
// uc_nation := nation ;
39655: LD_ADDR_OWVAR 21
39659: PUSH
39660: LD_VAR 0 17
39664: ST_TO_ADDR
// if buildings then
39665: LD_VAR 0 18
39669: IFFALSE 40991
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39671: LD_ADDR_VAR 0 19
39675: PUSH
39676: LD_VAR 0 18
39680: PPUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 30
39686: PUSH
39687: LD_INT 29
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 30
39696: PUSH
39697: LD_INT 30
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: PPUSH
39709: CALL_OW 72
39713: ST_TO_ADDR
// if tmp then
39714: LD_VAR 0 19
39718: IFFALSE 39766
// for i in tmp do
39720: LD_ADDR_VAR 0 8
39724: PUSH
39725: LD_VAR 0 19
39729: PUSH
39730: FOR_IN
39731: IFFALSE 39764
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39733: LD_VAR 0 8
39737: PPUSH
39738: CALL_OW 250
39742: PPUSH
39743: LD_VAR 0 8
39747: PPUSH
39748: CALL_OW 251
39752: PPUSH
39753: LD_VAR 0 16
39757: PPUSH
39758: CALL_OW 441
39762: GO 39730
39764: POP
39765: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39766: LD_VAR 0 18
39770: PPUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 30
39776: PUSH
39777: LD_INT 32
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: LD_INT 33
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: PPUSH
39799: CALL_OW 72
39803: IFFALSE 39891
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39805: LD_ADDR_VAR 0 8
39809: PUSH
39810: LD_VAR 0 18
39814: PPUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 30
39820: PUSH
39821: LD_INT 32
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 30
39830: PUSH
39831: LD_INT 33
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: PPUSH
39843: CALL_OW 72
39847: PUSH
39848: FOR_IN
39849: IFFALSE 39889
// begin if not GetBWeapon ( i ) then
39851: LD_VAR 0 8
39855: PPUSH
39856: CALL_OW 269
39860: NOT
39861: IFFALSE 39887
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39863: LD_VAR 0 8
39867: PPUSH
39868: LD_VAR 0 8
39872: PPUSH
39873: LD_VAR 0 2
39877: PPUSH
39878: CALL 41137 0 2
39882: PPUSH
39883: CALL_OW 431
// end ;
39887: GO 39848
39889: POP
39890: POP
// end ; for i = 1 to personel do
39891: LD_ADDR_VAR 0 8
39895: PUSH
39896: DOUBLE
39897: LD_INT 1
39899: DEC
39900: ST_TO_ADDR
39901: LD_VAR 0 6
39905: PUSH
39906: FOR_TO
39907: IFFALSE 40971
// begin if i > 4 then
39909: LD_VAR 0 8
39913: PUSH
39914: LD_INT 4
39916: GREATER
39917: IFFALSE 39921
// break ;
39919: GO 40971
// case i of 1 :
39921: LD_VAR 0 8
39925: PUSH
39926: LD_INT 1
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 40014
39934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39935: LD_ADDR_VAR 0 12
39939: PUSH
39940: LD_VAR 0 18
39944: PPUSH
39945: LD_INT 22
39947: PUSH
39948: LD_VAR 0 16
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 58
39959: PUSH
39960: EMPTY
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 30
39968: PUSH
39969: LD_INT 32
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 30
39978: PUSH
39979: LD_INT 4
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 30
39988: PUSH
39989: LD_INT 5
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 72
40011: ST_TO_ADDR
40012: GO 40236
40014: LD_INT 2
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40084
40022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40023: LD_ADDR_VAR 0 12
40027: PUSH
40028: LD_VAR 0 18
40032: PPUSH
40033: LD_INT 22
40035: PUSH
40036: LD_VAR 0 16
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 72
40081: ST_TO_ADDR
40082: GO 40236
40084: LD_INT 3
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40154
40092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40093: LD_ADDR_VAR 0 12
40097: PUSH
40098: LD_VAR 0 18
40102: PPUSH
40103: LD_INT 22
40105: PUSH
40106: LD_VAR 0 16
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 30
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PPUSH
40147: CALL_OW 72
40151: ST_TO_ADDR
40152: GO 40236
40154: LD_INT 4
40156: DOUBLE
40157: EQUAL
40158: IFTRUE 40162
40160: GO 40235
40162: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40163: LD_ADDR_VAR 0 12
40167: PUSH
40168: LD_VAR 0 18
40172: PPUSH
40173: LD_INT 22
40175: PUSH
40176: LD_VAR 0 16
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: LD_INT 30
40190: PUSH
40191: LD_INT 6
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 30
40200: PUSH
40201: LD_INT 7
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 30
40210: PUSH
40211: LD_INT 8
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 72
40232: ST_TO_ADDR
40233: GO 40236
40235: POP
// if i = 1 then
40236: LD_VAR 0 8
40240: PUSH
40241: LD_INT 1
40243: EQUAL
40244: IFFALSE 40355
// begin tmp := [ ] ;
40246: LD_ADDR_VAR 0 19
40250: PUSH
40251: EMPTY
40252: ST_TO_ADDR
// for j in f do
40253: LD_ADDR_VAR 0 9
40257: PUSH
40258: LD_VAR 0 12
40262: PUSH
40263: FOR_IN
40264: IFFALSE 40337
// if GetBType ( j ) = b_bunker then
40266: LD_VAR 0 9
40270: PPUSH
40271: CALL_OW 266
40275: PUSH
40276: LD_INT 32
40278: EQUAL
40279: IFFALSE 40306
// tmp := Insert ( tmp , 1 , j ) else
40281: LD_ADDR_VAR 0 19
40285: PUSH
40286: LD_VAR 0 19
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: LD_VAR 0 9
40298: PPUSH
40299: CALL_OW 2
40303: ST_TO_ADDR
40304: GO 40335
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40306: LD_ADDR_VAR 0 19
40310: PUSH
40311: LD_VAR 0 19
40315: PPUSH
40316: LD_VAR 0 19
40320: PUSH
40321: LD_INT 1
40323: PLUS
40324: PPUSH
40325: LD_VAR 0 9
40329: PPUSH
40330: CALL_OW 2
40334: ST_TO_ADDR
40335: GO 40263
40337: POP
40338: POP
// if tmp then
40339: LD_VAR 0 19
40343: IFFALSE 40355
// f := tmp ;
40345: LD_ADDR_VAR 0 12
40349: PUSH
40350: LD_VAR 0 19
40354: ST_TO_ADDR
// end ; x := personel [ i ] ;
40355: LD_ADDR_VAR 0 13
40359: PUSH
40360: LD_VAR 0 6
40364: PUSH
40365: LD_VAR 0 8
40369: ARRAY
40370: ST_TO_ADDR
// if x = - 1 then
40371: LD_VAR 0 13
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: EQUAL
40380: IFFALSE 40589
// begin for j in f do
40382: LD_ADDR_VAR 0 9
40386: PUSH
40387: LD_VAR 0 12
40391: PUSH
40392: FOR_IN
40393: IFFALSE 40585
// repeat InitHc ;
40395: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40399: LD_VAR 0 9
40403: PPUSH
40404: CALL_OW 266
40408: PUSH
40409: LD_INT 5
40411: EQUAL
40412: IFFALSE 40482
// begin if UnitsInside ( j ) < 3 then
40414: LD_VAR 0 9
40418: PPUSH
40419: CALL_OW 313
40423: PUSH
40424: LD_INT 3
40426: LESS
40427: IFFALSE 40463
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40429: LD_INT 0
40431: PPUSH
40432: LD_INT 5
40434: PUSH
40435: LD_INT 8
40437: PUSH
40438: LD_INT 9
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: PUSH
40446: LD_VAR 0 17
40450: ARRAY
40451: PPUSH
40452: LD_VAR 0 4
40456: PPUSH
40457: CALL_OW 380
40461: GO 40480
// PrepareHuman ( false , i , skill ) ;
40463: LD_INT 0
40465: PPUSH
40466: LD_VAR 0 8
40470: PPUSH
40471: LD_VAR 0 4
40475: PPUSH
40476: CALL_OW 380
// end else
40480: GO 40499
// PrepareHuman ( false , i , skill ) ;
40482: LD_INT 0
40484: PPUSH
40485: LD_VAR 0 8
40489: PPUSH
40490: LD_VAR 0 4
40494: PPUSH
40495: CALL_OW 380
// un := CreateHuman ;
40499: LD_ADDR_VAR 0 14
40503: PUSH
40504: CALL_OW 44
40508: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40509: LD_ADDR_VAR 0 7
40513: PUSH
40514: LD_VAR 0 7
40518: PPUSH
40519: LD_INT 1
40521: PPUSH
40522: LD_VAR 0 14
40526: PPUSH
40527: CALL_OW 2
40531: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40532: LD_VAR 0 14
40536: PPUSH
40537: LD_VAR 0 9
40541: PPUSH
40542: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40546: LD_VAR 0 9
40550: PPUSH
40551: CALL_OW 313
40555: PUSH
40556: LD_INT 6
40558: EQUAL
40559: PUSH
40560: LD_VAR 0 9
40564: PPUSH
40565: CALL_OW 266
40569: PUSH
40570: LD_INT 32
40572: PUSH
40573: LD_INT 31
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: IN
40580: OR
40581: IFFALSE 40395
40583: GO 40392
40585: POP
40586: POP
// end else
40587: GO 40969
// for j = 1 to x do
40589: LD_ADDR_VAR 0 9
40593: PUSH
40594: DOUBLE
40595: LD_INT 1
40597: DEC
40598: ST_TO_ADDR
40599: LD_VAR 0 13
40603: PUSH
40604: FOR_TO
40605: IFFALSE 40967
// begin InitHc ;
40607: CALL_OW 19
// if not f then
40611: LD_VAR 0 12
40615: NOT
40616: IFFALSE 40705
// begin PrepareHuman ( false , i , skill ) ;
40618: LD_INT 0
40620: PPUSH
40621: LD_VAR 0 8
40625: PPUSH
40626: LD_VAR 0 4
40630: PPUSH
40631: CALL_OW 380
// un := CreateHuman ;
40635: LD_ADDR_VAR 0 14
40639: PUSH
40640: CALL_OW 44
40644: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40645: LD_ADDR_VAR 0 7
40649: PUSH
40650: LD_VAR 0 7
40654: PPUSH
40655: LD_INT 1
40657: PPUSH
40658: LD_VAR 0 14
40662: PPUSH
40663: CALL_OW 2
40667: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40668: LD_VAR 0 14
40672: PPUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 250
40682: PPUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 251
40692: PPUSH
40693: LD_INT 10
40695: PPUSH
40696: LD_INT 0
40698: PPUSH
40699: CALL_OW 50
// continue ;
40703: GO 40604
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40705: LD_VAR 0 12
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PPUSH
40714: CALL_OW 313
40718: PUSH
40719: LD_VAR 0 12
40723: PUSH
40724: LD_INT 1
40726: ARRAY
40727: PPUSH
40728: CALL_OW 266
40732: PUSH
40733: LD_INT 32
40735: PUSH
40736: LD_INT 31
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: IN
40743: AND
40744: PUSH
40745: LD_VAR 0 12
40749: PUSH
40750: LD_INT 1
40752: ARRAY
40753: PPUSH
40754: CALL_OW 313
40758: PUSH
40759: LD_INT 6
40761: EQUAL
40762: OR
40763: IFFALSE 40783
// f := Delete ( f , 1 ) ;
40765: LD_ADDR_VAR 0 12
40769: PUSH
40770: LD_VAR 0 12
40774: PPUSH
40775: LD_INT 1
40777: PPUSH
40778: CALL_OW 3
40782: ST_TO_ADDR
// if not f then
40783: LD_VAR 0 12
40787: NOT
40788: IFFALSE 40806
// begin x := x + 2 ;
40790: LD_ADDR_VAR 0 13
40794: PUSH
40795: LD_VAR 0 13
40799: PUSH
40800: LD_INT 2
40802: PLUS
40803: ST_TO_ADDR
// continue ;
40804: GO 40604
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40806: LD_VAR 0 12
40810: PUSH
40811: LD_INT 1
40813: ARRAY
40814: PPUSH
40815: CALL_OW 266
40819: PUSH
40820: LD_INT 5
40822: EQUAL
40823: IFFALSE 40897
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40825: LD_VAR 0 12
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PPUSH
40834: CALL_OW 313
40838: PUSH
40839: LD_INT 3
40841: LESS
40842: IFFALSE 40878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40844: LD_INT 0
40846: PPUSH
40847: LD_INT 5
40849: PUSH
40850: LD_INT 8
40852: PUSH
40853: LD_INT 9
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: PUSH
40861: LD_VAR 0 17
40865: ARRAY
40866: PPUSH
40867: LD_VAR 0 4
40871: PPUSH
40872: CALL_OW 380
40876: GO 40895
// PrepareHuman ( false , i , skill ) ;
40878: LD_INT 0
40880: PPUSH
40881: LD_VAR 0 8
40885: PPUSH
40886: LD_VAR 0 4
40890: PPUSH
40891: CALL_OW 380
// end else
40895: GO 40914
// PrepareHuman ( false , i , skill ) ;
40897: LD_INT 0
40899: PPUSH
40900: LD_VAR 0 8
40904: PPUSH
40905: LD_VAR 0 4
40909: PPUSH
40910: CALL_OW 380
// un := CreateHuman ;
40914: LD_ADDR_VAR 0 14
40918: PUSH
40919: CALL_OW 44
40923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40924: LD_ADDR_VAR 0 7
40928: PUSH
40929: LD_VAR 0 7
40933: PPUSH
40934: LD_INT 1
40936: PPUSH
40937: LD_VAR 0 14
40941: PPUSH
40942: CALL_OW 2
40946: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40947: LD_VAR 0 14
40951: PPUSH
40952: LD_VAR 0 12
40956: PUSH
40957: LD_INT 1
40959: ARRAY
40960: PPUSH
40961: CALL_OW 52
// end ;
40965: GO 40604
40967: POP
40968: POP
// end ;
40969: GO 39906
40971: POP
40972: POP
// result := result ^ buildings ;
40973: LD_ADDR_VAR 0 7
40977: PUSH
40978: LD_VAR 0 7
40982: PUSH
40983: LD_VAR 0 18
40987: ADD
40988: ST_TO_ADDR
// end else
40989: GO 41132
// begin for i = 1 to personel do
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: DOUBLE
40997: LD_INT 1
40999: DEC
41000: ST_TO_ADDR
41001: LD_VAR 0 6
41005: PUSH
41006: FOR_TO
41007: IFFALSE 41130
// begin if i > 4 then
41009: LD_VAR 0 8
41013: PUSH
41014: LD_INT 4
41016: GREATER
41017: IFFALSE 41021
// break ;
41019: GO 41130
// x := personel [ i ] ;
41021: LD_ADDR_VAR 0 13
41025: PUSH
41026: LD_VAR 0 6
41030: PUSH
41031: LD_VAR 0 8
41035: ARRAY
41036: ST_TO_ADDR
// if x = - 1 then
41037: LD_VAR 0 13
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: EQUAL
41046: IFFALSE 41050
// continue ;
41048: GO 41006
// PrepareHuman ( false , i , skill ) ;
41050: LD_INT 0
41052: PPUSH
41053: LD_VAR 0 8
41057: PPUSH
41058: LD_VAR 0 4
41062: PPUSH
41063: CALL_OW 380
// un := CreateHuman ;
41067: LD_ADDR_VAR 0 14
41071: PUSH
41072: CALL_OW 44
41076: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41077: LD_VAR 0 14
41081: PPUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 250
41091: PPUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 251
41101: PPUSH
41102: LD_INT 10
41104: PPUSH
41105: LD_INT 0
41107: PPUSH
41108: CALL_OW 50
// result := result ^ un ;
41112: LD_ADDR_VAR 0 7
41116: PUSH
41117: LD_VAR 0 7
41121: PUSH
41122: LD_VAR 0 14
41126: ADD
41127: ST_TO_ADDR
// end ;
41128: GO 41006
41130: POP
41131: POP
// end ; end ;
41132: LD_VAR 0 7
41136: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41137: LD_INT 0
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
// result := false ;
41155: LD_ADDR_VAR 0 3
41159: PUSH
41160: LD_INT 0
41162: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41163: LD_VAR 0 1
41167: NOT
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 266
41178: PUSH
41179: LD_INT 32
41181: PUSH
41182: LD_INT 33
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: IN
41189: NOT
41190: OR
41191: IFFALSE 41195
// exit ;
41193: GO 42304
// nat := GetNation ( tower ) ;
41195: LD_ADDR_VAR 0 12
41199: PUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 248
41209: ST_TO_ADDR
// side := GetSide ( tower ) ;
41210: LD_ADDR_VAR 0 16
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 255
41224: ST_TO_ADDR
// x := GetX ( tower ) ;
41225: LD_ADDR_VAR 0 10
41229: PUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 250
41239: ST_TO_ADDR
// y := GetY ( tower ) ;
41240: LD_ADDR_VAR 0 11
41244: PUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 251
41254: ST_TO_ADDR
// if not x or not y then
41255: LD_VAR 0 10
41259: NOT
41260: PUSH
41261: LD_VAR 0 11
41265: NOT
41266: OR
41267: IFFALSE 41271
// exit ;
41269: GO 42304
// weapon := 0 ;
41271: LD_ADDR_VAR 0 18
41275: PUSH
41276: LD_INT 0
41278: ST_TO_ADDR
// fac_list := [ ] ;
41279: LD_ADDR_VAR 0 17
41283: PUSH
41284: EMPTY
41285: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41286: LD_ADDR_VAR 0 6
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 274
41300: PPUSH
41301: LD_VAR 0 2
41305: PPUSH
41306: LD_INT 0
41308: PPUSH
41309: CALL 38875 0 3
41313: PPUSH
41314: LD_INT 30
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PPUSH
41324: CALL_OW 72
41328: ST_TO_ADDR
// if not factories then
41329: LD_VAR 0 6
41333: NOT
41334: IFFALSE 41338
// exit ;
41336: GO 42304
// for i in factories do
41338: LD_ADDR_VAR 0 8
41342: PUSH
41343: LD_VAR 0 6
41347: PUSH
41348: FOR_IN
41349: IFFALSE 41374
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41351: LD_ADDR_VAR 0 17
41355: PUSH
41356: LD_VAR 0 17
41360: PUSH
41361: LD_VAR 0 8
41365: PPUSH
41366: CALL_OW 478
41370: UNION
41371: ST_TO_ADDR
41372: GO 41348
41374: POP
41375: POP
// if not fac_list then
41376: LD_VAR 0 17
41380: NOT
41381: IFFALSE 41385
// exit ;
41383: GO 42304
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41385: LD_ADDR_VAR 0 5
41389: PUSH
41390: LD_INT 4
41392: PUSH
41393: LD_INT 5
41395: PUSH
41396: LD_INT 9
41398: PUSH
41399: LD_INT 10
41401: PUSH
41402: LD_INT 6
41404: PUSH
41405: LD_INT 7
41407: PUSH
41408: LD_INT 11
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 27
41422: PUSH
41423: LD_INT 28
41425: PUSH
41426: LD_INT 26
41428: PUSH
41429: LD_INT 30
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 43
41440: PUSH
41441: LD_INT 44
41443: PUSH
41444: LD_INT 46
41446: PUSH
41447: LD_INT 45
41449: PUSH
41450: LD_INT 47
41452: PUSH
41453: LD_INT 49
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: PUSH
41469: LD_VAR 0 12
41473: ARRAY
41474: ST_TO_ADDR
// list := list isect fac_list ;
41475: LD_ADDR_VAR 0 5
41479: PUSH
41480: LD_VAR 0 5
41484: PUSH
41485: LD_VAR 0 17
41489: ISECT
41490: ST_TO_ADDR
// if not list then
41491: LD_VAR 0 5
41495: NOT
41496: IFFALSE 41500
// exit ;
41498: GO 42304
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41500: LD_VAR 0 12
41504: PUSH
41505: LD_INT 3
41507: EQUAL
41508: PUSH
41509: LD_INT 49
41511: PUSH
41512: LD_VAR 0 5
41516: IN
41517: AND
41518: PUSH
41519: LD_INT 31
41521: PPUSH
41522: LD_VAR 0 16
41526: PPUSH
41527: CALL_OW 321
41531: PUSH
41532: LD_INT 2
41534: EQUAL
41535: AND
41536: IFFALSE 41596
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41538: LD_INT 22
41540: PUSH
41541: LD_VAR 0 16
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 35
41552: PUSH
41553: LD_INT 49
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 91
41562: PUSH
41563: LD_VAR 0 1
41567: PUSH
41568: LD_INT 10
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: PPUSH
41581: CALL_OW 69
41585: NOT
41586: IFFALSE 41596
// weapon := ru_time_lapser ;
41588: LD_ADDR_VAR 0 18
41592: PUSH
41593: LD_INT 49
41595: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41596: LD_VAR 0 12
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: IN
41611: PUSH
41612: LD_INT 11
41614: PUSH
41615: LD_VAR 0 5
41619: IN
41620: PUSH
41621: LD_INT 30
41623: PUSH
41624: LD_VAR 0 5
41628: IN
41629: OR
41630: AND
41631: PUSH
41632: LD_INT 6
41634: PPUSH
41635: LD_VAR 0 16
41639: PPUSH
41640: CALL_OW 321
41644: PUSH
41645: LD_INT 2
41647: EQUAL
41648: AND
41649: IFFALSE 41814
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41651: LD_INT 22
41653: PUSH
41654: LD_VAR 0 16
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 35
41668: PUSH
41669: LD_INT 11
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 35
41678: PUSH
41679: LD_INT 30
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 91
41693: PUSH
41694: LD_VAR 0 1
41698: PUSH
41699: LD_INT 18
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: PPUSH
41712: CALL_OW 69
41716: NOT
41717: PUSH
41718: LD_INT 22
41720: PUSH
41721: LD_VAR 0 16
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 30
41735: PUSH
41736: LD_INT 32
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 30
41745: PUSH
41746: LD_INT 33
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 91
41760: PUSH
41761: LD_VAR 0 1
41765: PUSH
41766: LD_INT 12
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: PPUSH
41782: CALL_OW 69
41786: PUSH
41787: LD_INT 2
41789: GREATER
41790: AND
41791: IFFALSE 41814
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41793: LD_ADDR_VAR 0 18
41797: PUSH
41798: LD_INT 11
41800: PUSH
41801: LD_INT 30
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_VAR 0 12
41812: ARRAY
41813: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41814: LD_VAR 0 18
41818: NOT
41819: PUSH
41820: LD_INT 40
41822: PPUSH
41823: LD_VAR 0 16
41827: PPUSH
41828: CALL_OW 321
41832: PUSH
41833: LD_INT 2
41835: EQUAL
41836: AND
41837: PUSH
41838: LD_INT 7
41840: PUSH
41841: LD_VAR 0 5
41845: IN
41846: PUSH
41847: LD_INT 28
41849: PUSH
41850: LD_VAR 0 5
41854: IN
41855: OR
41856: PUSH
41857: LD_INT 45
41859: PUSH
41860: LD_VAR 0 5
41864: IN
41865: OR
41866: AND
41867: IFFALSE 42121
// begin hex := GetHexInfo ( x , y ) ;
41869: LD_ADDR_VAR 0 4
41873: PUSH
41874: LD_VAR 0 10
41878: PPUSH
41879: LD_VAR 0 11
41883: PPUSH
41884: CALL_OW 546
41888: ST_TO_ADDR
// if hex [ 1 ] then
41889: LD_VAR 0 4
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: IFFALSE 41901
// exit ;
41899: GO 42304
// height := hex [ 2 ] ;
41901: LD_ADDR_VAR 0 15
41905: PUSH
41906: LD_VAR 0 4
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41915: LD_ADDR_VAR 0 14
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: LD_INT 5
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// for i in tmp do
41938: LD_ADDR_VAR 0 8
41942: PUSH
41943: LD_VAR 0 14
41947: PUSH
41948: FOR_IN
41949: IFFALSE 42119
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41951: LD_ADDR_VAR 0 9
41955: PUSH
41956: LD_VAR 0 10
41960: PPUSH
41961: LD_VAR 0 8
41965: PPUSH
41966: LD_INT 5
41968: PPUSH
41969: CALL_OW 272
41973: PUSH
41974: LD_VAR 0 11
41978: PPUSH
41979: LD_VAR 0 8
41983: PPUSH
41984: LD_INT 5
41986: PPUSH
41987: CALL_OW 273
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41996: LD_VAR 0 9
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PPUSH
42005: LD_VAR 0 9
42009: PUSH
42010: LD_INT 2
42012: ARRAY
42013: PPUSH
42014: CALL_OW 488
42018: IFFALSE 42117
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42020: LD_ADDR_VAR 0 4
42024: PUSH
42025: LD_VAR 0 9
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: PPUSH
42034: LD_VAR 0 9
42038: PUSH
42039: LD_INT 2
42041: ARRAY
42042: PPUSH
42043: CALL_OW 546
42047: ST_TO_ADDR
// if hex [ 1 ] then
42048: LD_VAR 0 4
42052: PUSH
42053: LD_INT 1
42055: ARRAY
42056: IFFALSE 42060
// continue ;
42058: GO 41948
// h := hex [ 2 ] ;
42060: LD_ADDR_VAR 0 13
42064: PUSH
42065: LD_VAR 0 4
42069: PUSH
42070: LD_INT 2
42072: ARRAY
42073: ST_TO_ADDR
// if h + 7 < height then
42074: LD_VAR 0 13
42078: PUSH
42079: LD_INT 7
42081: PLUS
42082: PUSH
42083: LD_VAR 0 15
42087: LESS
42088: IFFALSE 42117
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42090: LD_ADDR_VAR 0 18
42094: PUSH
42095: LD_INT 7
42097: PUSH
42098: LD_INT 28
42100: PUSH
42101: LD_INT 45
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: PUSH
42109: LD_VAR 0 12
42113: ARRAY
42114: ST_TO_ADDR
// break ;
42115: GO 42119
// end ; end ; end ;
42117: GO 41948
42119: POP
42120: POP
// end ; if not weapon then
42121: LD_VAR 0 18
42125: NOT
42126: IFFALSE 42186
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42128: LD_ADDR_VAR 0 5
42132: PUSH
42133: LD_VAR 0 5
42137: PUSH
42138: LD_INT 11
42140: PUSH
42141: LD_INT 30
42143: PUSH
42144: LD_INT 49
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: DIFF
42152: ST_TO_ADDR
// if not list then
42153: LD_VAR 0 5
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42304
// weapon := list [ rand ( 1 , list ) ] ;
42162: LD_ADDR_VAR 0 18
42166: PUSH
42167: LD_VAR 0 5
42171: PUSH
42172: LD_INT 1
42174: PPUSH
42175: LD_VAR 0 5
42179: PPUSH
42180: CALL_OW 12
42184: ARRAY
42185: ST_TO_ADDR
// end ; if weapon then
42186: LD_VAR 0 18
42190: IFFALSE 42304
// begin tmp := CostOfWeapon ( weapon ) ;
42192: LD_ADDR_VAR 0 14
42196: PUSH
42197: LD_VAR 0 18
42201: PPUSH
42202: CALL_OW 451
42206: ST_TO_ADDR
// j := GetBase ( tower ) ;
42207: LD_ADDR_VAR 0 9
42211: PUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: CALL_OW 274
42221: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42222: LD_VAR 0 9
42226: PPUSH
42227: LD_INT 1
42229: PPUSH
42230: CALL_OW 275
42234: PUSH
42235: LD_VAR 0 14
42239: PUSH
42240: LD_INT 1
42242: ARRAY
42243: GREATEREQUAL
42244: PUSH
42245: LD_VAR 0 9
42249: PPUSH
42250: LD_INT 2
42252: PPUSH
42253: CALL_OW 275
42257: PUSH
42258: LD_VAR 0 14
42262: PUSH
42263: LD_INT 2
42265: ARRAY
42266: GREATEREQUAL
42267: AND
42268: PUSH
42269: LD_VAR 0 9
42273: PPUSH
42274: LD_INT 3
42276: PPUSH
42277: CALL_OW 275
42281: PUSH
42282: LD_VAR 0 14
42286: PUSH
42287: LD_INT 3
42289: ARRAY
42290: GREATEREQUAL
42291: AND
42292: IFFALSE 42304
// result := weapon ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_VAR 0 18
42303: ST_TO_ADDR
// end ; end ;
42304: LD_VAR 0 3
42308: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42309: LD_INT 0
42311: PPUSH
42312: PPUSH
// result := true ;
42313: LD_ADDR_VAR 0 3
42317: PUSH
42318: LD_INT 1
42320: ST_TO_ADDR
// if array1 = array2 then
42321: LD_VAR 0 1
42325: PUSH
42326: LD_VAR 0 2
42330: EQUAL
42331: IFFALSE 42391
// begin for i = 1 to array1 do
42333: LD_ADDR_VAR 0 4
42337: PUSH
42338: DOUBLE
42339: LD_INT 1
42341: DEC
42342: ST_TO_ADDR
42343: LD_VAR 0 1
42347: PUSH
42348: FOR_TO
42349: IFFALSE 42387
// if array1 [ i ] <> array2 [ i ] then
42351: LD_VAR 0 1
42355: PUSH
42356: LD_VAR 0 4
42360: ARRAY
42361: PUSH
42362: LD_VAR 0 2
42366: PUSH
42367: LD_VAR 0 4
42371: ARRAY
42372: NONEQUAL
42373: IFFALSE 42385
// begin result := false ;
42375: LD_ADDR_VAR 0 3
42379: PUSH
42380: LD_INT 0
42382: ST_TO_ADDR
// break ;
42383: GO 42387
// end ;
42385: GO 42348
42387: POP
42388: POP
// end else
42389: GO 42399
// result := false ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 0
42398: ST_TO_ADDR
// end ;
42399: LD_VAR 0 3
42403: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42404: LD_INT 0
42406: PPUSH
42407: PPUSH
// if not array1 or not array2 then
42408: LD_VAR 0 1
42412: NOT
42413: PUSH
42414: LD_VAR 0 2
42418: NOT
42419: OR
42420: IFFALSE 42424
// exit ;
42422: GO 42488
// result := true ;
42424: LD_ADDR_VAR 0 3
42428: PUSH
42429: LD_INT 1
42431: ST_TO_ADDR
// for i = 1 to array1 do
42432: LD_ADDR_VAR 0 4
42436: PUSH
42437: DOUBLE
42438: LD_INT 1
42440: DEC
42441: ST_TO_ADDR
42442: LD_VAR 0 1
42446: PUSH
42447: FOR_TO
42448: IFFALSE 42486
// if array1 [ i ] <> array2 [ i ] then
42450: LD_VAR 0 1
42454: PUSH
42455: LD_VAR 0 4
42459: ARRAY
42460: PUSH
42461: LD_VAR 0 2
42465: PUSH
42466: LD_VAR 0 4
42470: ARRAY
42471: NONEQUAL
42472: IFFALSE 42484
// begin result := false ;
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_INT 0
42481: ST_TO_ADDR
// break ;
42482: GO 42486
// end ;
42484: GO 42447
42486: POP
42487: POP
// end ;
42488: LD_VAR 0 3
42492: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42493: LD_INT 0
42495: PPUSH
42496: PPUSH
42497: PPUSH
// pom := GetBase ( fac ) ;
42498: LD_ADDR_VAR 0 5
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 274
42512: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42513: LD_ADDR_VAR 0 4
42517: PUSH
42518: LD_VAR 0 2
42522: PUSH
42523: LD_INT 1
42525: ARRAY
42526: PPUSH
42527: LD_VAR 0 2
42531: PUSH
42532: LD_INT 2
42534: ARRAY
42535: PPUSH
42536: LD_VAR 0 2
42540: PUSH
42541: LD_INT 3
42543: ARRAY
42544: PPUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_INT 4
42552: ARRAY
42553: PPUSH
42554: CALL_OW 449
42558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_VAR 0 5
42568: PPUSH
42569: LD_INT 1
42571: PPUSH
42572: CALL_OW 275
42576: PUSH
42577: LD_VAR 0 4
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: GREATEREQUAL
42586: PUSH
42587: LD_VAR 0 5
42591: PPUSH
42592: LD_INT 2
42594: PPUSH
42595: CALL_OW 275
42599: PUSH
42600: LD_VAR 0 4
42604: PUSH
42605: LD_INT 2
42607: ARRAY
42608: GREATEREQUAL
42609: AND
42610: PUSH
42611: LD_VAR 0 5
42615: PPUSH
42616: LD_INT 3
42618: PPUSH
42619: CALL_OW 275
42623: PUSH
42624: LD_VAR 0 4
42628: PUSH
42629: LD_INT 3
42631: ARRAY
42632: GREATEREQUAL
42633: AND
42634: ST_TO_ADDR
// end ;
42635: LD_VAR 0 3
42639: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42640: LD_INT 0
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
// pom := GetBase ( building ) ;
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: CALL_OW 274
42660: ST_TO_ADDR
// if not pom then
42661: LD_VAR 0 3
42665: NOT
42666: IFFALSE 42670
// exit ;
42668: GO 42840
// btype := GetBType ( building ) ;
42670: LD_ADDR_VAR 0 5
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 266
42684: ST_TO_ADDR
// if btype = b_armoury then
42685: LD_VAR 0 5
42689: PUSH
42690: LD_INT 4
42692: EQUAL
42693: IFFALSE 42703
// btype := b_barracks ;
42695: LD_ADDR_VAR 0 5
42699: PUSH
42700: LD_INT 5
42702: ST_TO_ADDR
// if btype = b_depot then
42703: LD_VAR 0 5
42707: PUSH
42708: LD_INT 0
42710: EQUAL
42711: IFFALSE 42721
// btype := b_warehouse ;
42713: LD_ADDR_VAR 0 5
42717: PUSH
42718: LD_INT 1
42720: ST_TO_ADDR
// if btype = b_workshop then
42721: LD_VAR 0 5
42725: PUSH
42726: LD_INT 2
42728: EQUAL
42729: IFFALSE 42739
// btype := b_factory ;
42731: LD_ADDR_VAR 0 5
42735: PUSH
42736: LD_INT 3
42738: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42739: LD_ADDR_VAR 0 4
42743: PUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 248
42758: PPUSH
42759: CALL_OW 450
42763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42764: LD_ADDR_VAR 0 2
42768: PUSH
42769: LD_VAR 0 3
42773: PPUSH
42774: LD_INT 1
42776: PPUSH
42777: CALL_OW 275
42781: PUSH
42782: LD_VAR 0 4
42786: PUSH
42787: LD_INT 1
42789: ARRAY
42790: GREATEREQUAL
42791: PUSH
42792: LD_VAR 0 3
42796: PPUSH
42797: LD_INT 2
42799: PPUSH
42800: CALL_OW 275
42804: PUSH
42805: LD_VAR 0 4
42809: PUSH
42810: LD_INT 2
42812: ARRAY
42813: GREATEREQUAL
42814: AND
42815: PUSH
42816: LD_VAR 0 3
42820: PPUSH
42821: LD_INT 3
42823: PPUSH
42824: CALL_OW 275
42828: PUSH
42829: LD_VAR 0 4
42833: PUSH
42834: LD_INT 3
42836: ARRAY
42837: GREATEREQUAL
42838: AND
42839: ST_TO_ADDR
// end ;
42840: LD_VAR 0 2
42844: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
42849: PPUSH
// pom := GetBase ( building ) ;
42850: LD_ADDR_VAR 0 4
42854: PUSH
42855: LD_VAR 0 1
42859: PPUSH
42860: CALL_OW 274
42864: ST_TO_ADDR
// if not pom then
42865: LD_VAR 0 4
42869: NOT
42870: IFFALSE 42874
// exit ;
42872: GO 42975
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42874: LD_ADDR_VAR 0 5
42878: PUSH
42879: LD_VAR 0 2
42883: PPUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 248
42893: PPUSH
42894: CALL_OW 450
42898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_VAR 0 4
42908: PPUSH
42909: LD_INT 1
42911: PPUSH
42912: CALL_OW 275
42916: PUSH
42917: LD_VAR 0 5
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: GREATEREQUAL
42926: PUSH
42927: LD_VAR 0 4
42931: PPUSH
42932: LD_INT 2
42934: PPUSH
42935: CALL_OW 275
42939: PUSH
42940: LD_VAR 0 5
42944: PUSH
42945: LD_INT 2
42947: ARRAY
42948: GREATEREQUAL
42949: AND
42950: PUSH
42951: LD_VAR 0 4
42955: PPUSH
42956: LD_INT 3
42958: PPUSH
42959: CALL_OW 275
42963: PUSH
42964: LD_VAR 0 5
42968: PUSH
42969: LD_INT 3
42971: ARRAY
42972: GREATEREQUAL
42973: AND
42974: ST_TO_ADDR
// end ;
42975: LD_VAR 0 3
42979: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42980: LD_INT 0
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
42992: PPUSH
// result := false ;
42993: LD_ADDR_VAR 0 8
42997: PUSH
42998: LD_INT 0
43000: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43001: LD_VAR 0 5
43005: NOT
43006: PUSH
43007: LD_VAR 0 1
43011: NOT
43012: OR
43013: PUSH
43014: LD_VAR 0 2
43018: NOT
43019: OR
43020: PUSH
43021: LD_VAR 0 3
43025: NOT
43026: OR
43027: IFFALSE 43031
// exit ;
43029: GO 43845
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43031: LD_ADDR_VAR 0 14
43035: PUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: LD_VAR 0 2
43045: PPUSH
43046: LD_VAR 0 3
43050: PPUSH
43051: LD_VAR 0 4
43055: PPUSH
43056: LD_VAR 0 5
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: CALL_OW 248
43069: PPUSH
43070: LD_INT 0
43072: PPUSH
43073: CALL 45098 0 6
43077: ST_TO_ADDR
// if not hexes then
43078: LD_VAR 0 14
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43845
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43087: LD_ADDR_VAR 0 17
43091: PUSH
43092: LD_VAR 0 5
43096: PPUSH
43097: LD_INT 22
43099: PUSH
43100: LD_VAR 0 13
43104: PPUSH
43105: CALL_OW 255
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 30
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 30
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PPUSH
43146: CALL_OW 72
43150: ST_TO_ADDR
// for i = 1 to hexes do
43151: LD_ADDR_VAR 0 9
43155: PUSH
43156: DOUBLE
43157: LD_INT 1
43159: DEC
43160: ST_TO_ADDR
43161: LD_VAR 0 14
43165: PUSH
43166: FOR_TO
43167: IFFALSE 43843
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43169: LD_ADDR_VAR 0 13
43173: PUSH
43174: LD_VAR 0 14
43178: PUSH
43179: LD_VAR 0 9
43183: ARRAY
43184: PUSH
43185: LD_INT 1
43187: ARRAY
43188: PPUSH
43189: LD_VAR 0 14
43193: PUSH
43194: LD_VAR 0 9
43198: ARRAY
43199: PUSH
43200: LD_INT 2
43202: ARRAY
43203: PPUSH
43204: CALL_OW 428
43208: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43209: LD_VAR 0 14
43213: PUSH
43214: LD_VAR 0 9
43218: ARRAY
43219: PUSH
43220: LD_INT 1
43222: ARRAY
43223: PPUSH
43224: LD_VAR 0 14
43228: PUSH
43229: LD_VAR 0 9
43233: ARRAY
43234: PUSH
43235: LD_INT 2
43237: ARRAY
43238: PPUSH
43239: CALL_OW 351
43243: PUSH
43244: LD_VAR 0 14
43248: PUSH
43249: LD_VAR 0 9
43253: ARRAY
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PPUSH
43259: LD_VAR 0 14
43263: PUSH
43264: LD_VAR 0 9
43268: ARRAY
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PPUSH
43274: CALL_OW 488
43278: NOT
43279: OR
43280: PUSH
43281: LD_VAR 0 13
43285: PPUSH
43286: CALL_OW 247
43290: PUSH
43291: LD_INT 3
43293: EQUAL
43294: OR
43295: IFFALSE 43301
// exit ;
43297: POP
43298: POP
43299: GO 43845
// if not tmp then
43301: LD_VAR 0 13
43305: NOT
43306: IFFALSE 43310
// continue ;
43308: GO 43166
// result := true ;
43310: LD_ADDR_VAR 0 8
43314: PUSH
43315: LD_INT 1
43317: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43318: LD_VAR 0 6
43322: PUSH
43323: LD_VAR 0 13
43327: PPUSH
43328: CALL_OW 247
43332: PUSH
43333: LD_INT 2
43335: EQUAL
43336: AND
43337: PUSH
43338: LD_VAR 0 13
43342: PPUSH
43343: CALL_OW 263
43347: PUSH
43348: LD_INT 1
43350: EQUAL
43351: AND
43352: IFFALSE 43516
// begin if IsDrivenBy ( tmp ) then
43354: LD_VAR 0 13
43358: PPUSH
43359: CALL_OW 311
43363: IFFALSE 43367
// continue ;
43365: GO 43166
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43367: LD_VAR 0 6
43371: PPUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 60
43377: PUSH
43378: EMPTY
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 55
43390: PUSH
43391: EMPTY
43392: LIST
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PPUSH
43402: CALL_OW 72
43406: IFFALSE 43514
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43408: LD_ADDR_VAR 0 18
43412: PUSH
43413: LD_VAR 0 6
43417: PPUSH
43418: LD_INT 3
43420: PUSH
43421: LD_INT 60
43423: PUSH
43424: EMPTY
43425: LIST
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 55
43436: PUSH
43437: EMPTY
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PPUSH
43448: CALL_OW 72
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: ST_TO_ADDR
// if IsInUnit ( driver ) then
43457: LD_VAR 0 18
43461: PPUSH
43462: CALL_OW 310
43466: IFFALSE 43477
// ComExit ( driver ) ;
43468: LD_VAR 0 18
43472: PPUSH
43473: CALL 68890 0 1
// AddComEnterUnit ( driver , tmp ) ;
43477: LD_VAR 0 18
43481: PPUSH
43482: LD_VAR 0 13
43486: PPUSH
43487: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43491: LD_VAR 0 18
43495: PPUSH
43496: LD_VAR 0 7
43500: PPUSH
43501: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43505: LD_VAR 0 18
43509: PPUSH
43510: CALL_OW 181
// end ; continue ;
43514: GO 43166
// end ; if not cleaners or not tmp in cleaners then
43516: LD_VAR 0 6
43520: NOT
43521: PUSH
43522: LD_VAR 0 13
43526: PUSH
43527: LD_VAR 0 6
43531: IN
43532: NOT
43533: OR
43534: IFFALSE 43841
// begin if dep then
43536: LD_VAR 0 17
43540: IFFALSE 43676
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43542: LD_ADDR_VAR 0 16
43546: PUSH
43547: LD_VAR 0 17
43551: PUSH
43552: LD_INT 1
43554: ARRAY
43555: PPUSH
43556: CALL_OW 250
43560: PPUSH
43561: LD_VAR 0 17
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: PPUSH
43570: CALL_OW 254
43574: PPUSH
43575: LD_INT 5
43577: PPUSH
43578: CALL_OW 272
43582: PUSH
43583: LD_VAR 0 17
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: PPUSH
43592: CALL_OW 251
43596: PPUSH
43597: LD_VAR 0 17
43601: PUSH
43602: LD_INT 1
43604: ARRAY
43605: PPUSH
43606: CALL_OW 254
43610: PPUSH
43611: LD_INT 5
43613: PPUSH
43614: CALL_OW 273
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43623: LD_VAR 0 16
43627: PUSH
43628: LD_INT 1
43630: ARRAY
43631: PPUSH
43632: LD_VAR 0 16
43636: PUSH
43637: LD_INT 2
43639: ARRAY
43640: PPUSH
43641: CALL_OW 488
43645: IFFALSE 43676
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43647: LD_VAR 0 13
43651: PPUSH
43652: LD_VAR 0 16
43656: PUSH
43657: LD_INT 1
43659: ARRAY
43660: PPUSH
43661: LD_VAR 0 16
43665: PUSH
43666: LD_INT 2
43668: ARRAY
43669: PPUSH
43670: CALL_OW 111
// continue ;
43674: GO 43166
// end ; end ; r := GetDir ( tmp ) ;
43676: LD_ADDR_VAR 0 15
43680: PUSH
43681: LD_VAR 0 13
43685: PPUSH
43686: CALL_OW 254
43690: ST_TO_ADDR
// if r = 5 then
43691: LD_VAR 0 15
43695: PUSH
43696: LD_INT 5
43698: EQUAL
43699: IFFALSE 43709
// r := 0 ;
43701: LD_ADDR_VAR 0 15
43705: PUSH
43706: LD_INT 0
43708: ST_TO_ADDR
// for j = r to 5 do
43709: LD_ADDR_VAR 0 10
43713: PUSH
43714: DOUBLE
43715: LD_VAR 0 15
43719: DEC
43720: ST_TO_ADDR
43721: LD_INT 5
43723: PUSH
43724: FOR_TO
43725: IFFALSE 43839
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43727: LD_ADDR_VAR 0 11
43731: PUSH
43732: LD_VAR 0 13
43736: PPUSH
43737: CALL_OW 250
43741: PPUSH
43742: LD_VAR 0 10
43746: PPUSH
43747: LD_INT 2
43749: PPUSH
43750: CALL_OW 272
43754: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43755: LD_ADDR_VAR 0 12
43759: PUSH
43760: LD_VAR 0 13
43764: PPUSH
43765: CALL_OW 251
43769: PPUSH
43770: LD_VAR 0 10
43774: PPUSH
43775: LD_INT 2
43777: PPUSH
43778: CALL_OW 273
43782: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43783: LD_VAR 0 11
43787: PPUSH
43788: LD_VAR 0 12
43792: PPUSH
43793: CALL_OW 488
43797: PUSH
43798: LD_VAR 0 11
43802: PPUSH
43803: LD_VAR 0 12
43807: PPUSH
43808: CALL_OW 428
43812: NOT
43813: AND
43814: IFFALSE 43837
// begin ComMoveXY ( tmp , _x , _y ) ;
43816: LD_VAR 0 13
43820: PPUSH
43821: LD_VAR 0 11
43825: PPUSH
43826: LD_VAR 0 12
43830: PPUSH
43831: CALL_OW 111
// break ;
43835: GO 43839
// end ; end ;
43837: GO 43724
43839: POP
43840: POP
// end ; end ;
43841: GO 43166
43843: POP
43844: POP
// end ;
43845: LD_VAR 0 8
43849: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43850: LD_INT 0
43852: PPUSH
// result := true ;
43853: LD_ADDR_VAR 0 3
43857: PUSH
43858: LD_INT 1
43860: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43861: LD_VAR 0 2
43865: PUSH
43866: LD_INT 24
43868: DOUBLE
43869: EQUAL
43870: IFTRUE 43880
43872: LD_INT 33
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43905
43880: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_INT 32
43888: PPUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 321
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: ST_TO_ADDR
43903: GO 44221
43905: LD_INT 20
43907: DOUBLE
43908: EQUAL
43909: IFTRUE 43913
43911: GO 43938
43913: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43914: LD_ADDR_VAR 0 3
43918: PUSH
43919: LD_INT 6
43921: PPUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 321
43931: PUSH
43932: LD_INT 2
43934: EQUAL
43935: ST_TO_ADDR
43936: GO 44221
43938: LD_INT 22
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43952
43944: LD_INT 36
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 43977
43952: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 15
43960: PPUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: ST_TO_ADDR
43975: GO 44221
43977: LD_INT 30
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43985
43983: GO 44010
43985: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43986: LD_ADDR_VAR 0 3
43990: PUSH
43991: LD_INT 20
43993: PPUSH
43994: LD_VAR 0 1
43998: PPUSH
43999: CALL_OW 321
44003: PUSH
44004: LD_INT 2
44006: EQUAL
44007: ST_TO_ADDR
44008: GO 44221
44010: LD_INT 28
44012: DOUBLE
44013: EQUAL
44014: IFTRUE 44024
44016: LD_INT 21
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44049
44024: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_INT 21
44032: PPUSH
44033: LD_VAR 0 1
44037: PPUSH
44038: CALL_OW 321
44042: PUSH
44043: LD_INT 2
44045: EQUAL
44046: ST_TO_ADDR
44047: GO 44221
44049: LD_INT 16
44051: DOUBLE
44052: EQUAL
44053: IFTRUE 44057
44055: GO 44082
44057: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44058: LD_ADDR_VAR 0 3
44062: PUSH
44063: LD_INT 84
44065: PPUSH
44066: LD_VAR 0 1
44070: PPUSH
44071: CALL_OW 321
44075: PUSH
44076: LD_INT 2
44078: EQUAL
44079: ST_TO_ADDR
44080: GO 44221
44082: LD_INT 19
44084: DOUBLE
44085: EQUAL
44086: IFTRUE 44096
44088: LD_INT 23
44090: DOUBLE
44091: EQUAL
44092: IFTRUE 44096
44094: GO 44121
44096: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44097: LD_ADDR_VAR 0 3
44101: PUSH
44102: LD_INT 83
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 321
44114: PUSH
44115: LD_INT 2
44117: EQUAL
44118: ST_TO_ADDR
44119: GO 44221
44121: LD_INT 17
44123: DOUBLE
44124: EQUAL
44125: IFTRUE 44129
44127: GO 44154
44129: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_INT 39
44137: PPUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: CALL_OW 321
44147: PUSH
44148: LD_INT 2
44150: EQUAL
44151: ST_TO_ADDR
44152: GO 44221
44154: LD_INT 18
44156: DOUBLE
44157: EQUAL
44158: IFTRUE 44162
44160: GO 44187
44162: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_INT 40
44170: PPUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 321
44180: PUSH
44181: LD_INT 2
44183: EQUAL
44184: ST_TO_ADDR
44185: GO 44221
44187: LD_INT 27
44189: DOUBLE
44190: EQUAL
44191: IFTRUE 44195
44193: GO 44220
44195: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_INT 35
44203: PPUSH
44204: LD_VAR 0 1
44208: PPUSH
44209: CALL_OW 321
44213: PUSH
44214: LD_INT 2
44216: EQUAL
44217: ST_TO_ADDR
44218: GO 44221
44220: POP
// end ;
44221: LD_VAR 0 3
44225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44226: LD_INT 0
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
// result := false ;
44239: LD_ADDR_VAR 0 6
44243: PUSH
44244: LD_INT 0
44246: ST_TO_ADDR
// if btype = b_depot then
44247: LD_VAR 0 2
44251: PUSH
44252: LD_INT 0
44254: EQUAL
44255: IFFALSE 44267
// begin result := true ;
44257: LD_ADDR_VAR 0 6
44261: PUSH
44262: LD_INT 1
44264: ST_TO_ADDR
// exit ;
44265: GO 45093
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44267: LD_VAR 0 1
44271: NOT
44272: PUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 266
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: IN
44293: NOT
44294: OR
44295: PUSH
44296: LD_VAR 0 2
44300: NOT
44301: OR
44302: PUSH
44303: LD_VAR 0 5
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 4
44322: PUSH
44323: LD_INT 5
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: IN
44334: NOT
44335: OR
44336: PUSH
44337: LD_VAR 0 3
44341: PPUSH
44342: LD_VAR 0 4
44346: PPUSH
44347: CALL_OW 488
44351: NOT
44352: OR
44353: IFFALSE 44357
// exit ;
44355: GO 45093
// side := GetSide ( depot ) ;
44357: LD_ADDR_VAR 0 9
44361: PUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 255
44371: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44372: LD_VAR 0 9
44376: PPUSH
44377: LD_VAR 0 2
44381: PPUSH
44382: CALL 43850 0 2
44386: NOT
44387: IFFALSE 44391
// exit ;
44389: GO 45093
// pom := GetBase ( depot ) ;
44391: LD_ADDR_VAR 0 10
44395: PUSH
44396: LD_VAR 0 1
44400: PPUSH
44401: CALL_OW 274
44405: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44406: LD_ADDR_VAR 0 11
44410: PUSH
44411: LD_VAR 0 2
44415: PPUSH
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 248
44425: PPUSH
44426: CALL_OW 450
44430: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44431: LD_VAR 0 10
44435: PPUSH
44436: LD_INT 1
44438: PPUSH
44439: CALL_OW 275
44443: PUSH
44444: LD_VAR 0 11
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: GREATEREQUAL
44453: PUSH
44454: LD_VAR 0 10
44458: PPUSH
44459: LD_INT 2
44461: PPUSH
44462: CALL_OW 275
44466: PUSH
44467: LD_VAR 0 11
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: GREATEREQUAL
44476: AND
44477: PUSH
44478: LD_VAR 0 10
44482: PPUSH
44483: LD_INT 3
44485: PPUSH
44486: CALL_OW 275
44490: PUSH
44491: LD_VAR 0 11
44495: PUSH
44496: LD_INT 3
44498: ARRAY
44499: GREATEREQUAL
44500: AND
44501: NOT
44502: IFFALSE 44506
// exit ;
44504: GO 45093
// if GetBType ( depot ) = b_depot then
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 266
44515: PUSH
44516: LD_INT 0
44518: EQUAL
44519: IFFALSE 44531
// dist := 28 else
44521: LD_ADDR_VAR 0 14
44525: PUSH
44526: LD_INT 28
44528: ST_TO_ADDR
44529: GO 44539
// dist := 36 ;
44531: LD_ADDR_VAR 0 14
44535: PUSH
44536: LD_INT 36
44538: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44539: LD_VAR 0 1
44543: PPUSH
44544: LD_VAR 0 3
44548: PPUSH
44549: LD_VAR 0 4
44553: PPUSH
44554: CALL_OW 297
44558: PUSH
44559: LD_VAR 0 14
44563: GREATER
44564: IFFALSE 44568
// exit ;
44566: GO 45093
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44568: LD_ADDR_VAR 0 12
44572: PUSH
44573: LD_VAR 0 2
44577: PPUSH
44578: LD_VAR 0 3
44582: PPUSH
44583: LD_VAR 0 4
44587: PPUSH
44588: LD_VAR 0 5
44592: PPUSH
44593: LD_VAR 0 1
44597: PPUSH
44598: CALL_OW 248
44602: PPUSH
44603: LD_INT 0
44605: PPUSH
44606: CALL 45098 0 6
44610: ST_TO_ADDR
// if not hexes then
44611: LD_VAR 0 12
44615: NOT
44616: IFFALSE 44620
// exit ;
44618: GO 45093
// hex := GetHexInfo ( x , y ) ;
44620: LD_ADDR_VAR 0 15
44624: PUSH
44625: LD_VAR 0 3
44629: PPUSH
44630: LD_VAR 0 4
44634: PPUSH
44635: CALL_OW 546
44639: ST_TO_ADDR
// if hex [ 1 ] then
44640: LD_VAR 0 15
44644: PUSH
44645: LD_INT 1
44647: ARRAY
44648: IFFALSE 44652
// exit ;
44650: GO 45093
// height := hex [ 2 ] ;
44652: LD_ADDR_VAR 0 13
44656: PUSH
44657: LD_VAR 0 15
44661: PUSH
44662: LD_INT 2
44664: ARRAY
44665: ST_TO_ADDR
// for i = 1 to hexes do
44666: LD_ADDR_VAR 0 7
44670: PUSH
44671: DOUBLE
44672: LD_INT 1
44674: DEC
44675: ST_TO_ADDR
44676: LD_VAR 0 12
44680: PUSH
44681: FOR_TO
44682: IFFALSE 45012
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44684: LD_VAR 0 12
44688: PUSH
44689: LD_VAR 0 7
44693: ARRAY
44694: PUSH
44695: LD_INT 1
44697: ARRAY
44698: PPUSH
44699: LD_VAR 0 12
44703: PUSH
44704: LD_VAR 0 7
44708: ARRAY
44709: PUSH
44710: LD_INT 2
44712: ARRAY
44713: PPUSH
44714: CALL_OW 488
44718: NOT
44719: PUSH
44720: LD_VAR 0 12
44724: PUSH
44725: LD_VAR 0 7
44729: ARRAY
44730: PUSH
44731: LD_INT 1
44733: ARRAY
44734: PPUSH
44735: LD_VAR 0 12
44739: PUSH
44740: LD_VAR 0 7
44744: ARRAY
44745: PUSH
44746: LD_INT 2
44748: ARRAY
44749: PPUSH
44750: CALL_OW 428
44754: PUSH
44755: LD_INT 0
44757: GREATER
44758: OR
44759: PUSH
44760: LD_VAR 0 12
44764: PUSH
44765: LD_VAR 0 7
44769: ARRAY
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: PPUSH
44775: LD_VAR 0 12
44779: PUSH
44780: LD_VAR 0 7
44784: ARRAY
44785: PUSH
44786: LD_INT 2
44788: ARRAY
44789: PPUSH
44790: CALL_OW 351
44794: OR
44795: IFFALSE 44801
// exit ;
44797: POP
44798: POP
44799: GO 45093
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44801: LD_ADDR_VAR 0 8
44805: PUSH
44806: LD_VAR 0 12
44810: PUSH
44811: LD_VAR 0 7
44815: ARRAY
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PPUSH
44821: LD_VAR 0 12
44825: PUSH
44826: LD_VAR 0 7
44830: ARRAY
44831: PUSH
44832: LD_INT 2
44834: ARRAY
44835: PPUSH
44836: CALL_OW 546
44840: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44841: LD_VAR 0 8
44845: PUSH
44846: LD_INT 1
44848: ARRAY
44849: PUSH
44850: LD_VAR 0 8
44854: PUSH
44855: LD_INT 2
44857: ARRAY
44858: PUSH
44859: LD_VAR 0 13
44863: PUSH
44864: LD_INT 2
44866: PLUS
44867: GREATER
44868: OR
44869: PUSH
44870: LD_VAR 0 8
44874: PUSH
44875: LD_INT 2
44877: ARRAY
44878: PUSH
44879: LD_VAR 0 13
44883: PUSH
44884: LD_INT 2
44886: MINUS
44887: LESS
44888: OR
44889: PUSH
44890: LD_VAR 0 8
44894: PUSH
44895: LD_INT 3
44897: ARRAY
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 8
44904: PUSH
44905: LD_INT 9
44907: PUSH
44908: LD_INT 10
44910: PUSH
44911: LD_INT 11
44913: PUSH
44914: LD_INT 12
44916: PUSH
44917: LD_INT 13
44919: PUSH
44920: LD_INT 16
44922: PUSH
44923: LD_INT 17
44925: PUSH
44926: LD_INT 18
44928: PUSH
44929: LD_INT 19
44931: PUSH
44932: LD_INT 20
44934: PUSH
44935: LD_INT 21
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: IN
44953: NOT
44954: OR
44955: PUSH
44956: LD_VAR 0 8
44960: PUSH
44961: LD_INT 5
44963: ARRAY
44964: NOT
44965: OR
44966: PUSH
44967: LD_VAR 0 8
44971: PUSH
44972: LD_INT 6
44974: ARRAY
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 7
44984: PUSH
44985: LD_INT 9
44987: PUSH
44988: LD_INT 10
44990: PUSH
44991: LD_INT 11
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: IN
45002: NOT
45003: OR
45004: IFFALSE 45010
// exit ;
45006: POP
45007: POP
45008: GO 45093
// end ;
45010: GO 44681
45012: POP
45013: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45014: LD_VAR 0 9
45018: PPUSH
45019: LD_VAR 0 3
45023: PPUSH
45024: LD_VAR 0 4
45028: PPUSH
45029: LD_INT 20
45031: PPUSH
45032: CALL 37016 0 4
45036: PUSH
45037: LD_INT 4
45039: ARRAY
45040: IFFALSE 45044
// exit ;
45042: GO 45093
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45044: LD_VAR 0 2
45048: PUSH
45049: LD_INT 29
45051: PUSH
45052: LD_INT 30
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: IN
45059: PUSH
45060: LD_VAR 0 3
45064: PPUSH
45065: LD_VAR 0 4
45069: PPUSH
45070: LD_VAR 0 9
45074: PPUSH
45075: CALL_OW 440
45079: NOT
45080: AND
45081: IFFALSE 45085
// exit ;
45083: GO 45093
// result := true ;
45085: LD_ADDR_VAR 0 6
45089: PUSH
45090: LD_INT 1
45092: ST_TO_ADDR
// end ;
45093: LD_VAR 0 6
45097: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45098: LD_INT 0
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
// result = [ ] ;
45158: LD_ADDR_VAR 0 7
45162: PUSH
45163: EMPTY
45164: ST_TO_ADDR
// temp_list = [ ] ;
45165: LD_ADDR_VAR 0 9
45169: PUSH
45170: EMPTY
45171: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45172: LD_VAR 0 4
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: LD_INT 4
45191: PUSH
45192: LD_INT 5
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: IN
45203: NOT
45204: PUSH
45205: LD_VAR 0 1
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: IN
45220: PUSH
45221: LD_VAR 0 5
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: IN
45240: NOT
45241: AND
45242: OR
45243: IFFALSE 45247
// exit ;
45245: GO 63638
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45247: LD_VAR 0 1
45251: PUSH
45252: LD_INT 6
45254: PUSH
45255: LD_INT 7
45257: PUSH
45258: LD_INT 8
45260: PUSH
45261: LD_INT 13
45263: PUSH
45264: LD_INT 12
45266: PUSH
45267: LD_INT 15
45269: PUSH
45270: LD_INT 11
45272: PUSH
45273: LD_INT 14
45275: PUSH
45276: LD_INT 10
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: IN
45290: IFFALSE 45300
// btype = b_lab ;
45292: LD_ADDR_VAR 0 1
45296: PUSH
45297: LD_INT 6
45299: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45300: LD_VAR 0 6
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: IN
45319: NOT
45320: PUSH
45321: LD_VAR 0 1
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 6
45340: PUSH
45341: LD_INT 36
45343: PUSH
45344: LD_INT 4
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: LD_INT 31
45352: PUSH
45353: LD_INT 32
45355: PUSH
45356: LD_INT 33
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: IN
45372: NOT
45373: PUSH
45374: LD_VAR 0 6
45378: PUSH
45379: LD_INT 1
45381: EQUAL
45382: AND
45383: OR
45384: PUSH
45385: LD_VAR 0 1
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: IN
45400: NOT
45401: PUSH
45402: LD_VAR 0 6
45406: PUSH
45407: LD_INT 2
45409: EQUAL
45410: AND
45411: OR
45412: IFFALSE 45422
// mode = 0 ;
45414: LD_ADDR_VAR 0 6
45418: PUSH
45419: LD_INT 0
45421: ST_TO_ADDR
// case mode of 0 :
45422: LD_VAR 0 6
45426: PUSH
45427: LD_INT 0
45429: DOUBLE
45430: EQUAL
45431: IFTRUE 45435
45433: GO 56888
45435: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45436: LD_ADDR_VAR 0 11
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45629: LD_ADDR_VAR 0 12
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45825: LD_ADDR_VAR 0 13
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 3
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46024: LD_ADDR_VAR 0 14
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46220: LD_ADDR_VAR 0 15
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46413: LD_ADDR_VAR 0 16
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46606: LD_ADDR_VAR 0 17
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46836: LD_ADDR_VAR 0 18
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47066: LD_ADDR_VAR 0 19
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47296: LD_ADDR_VAR 0 20
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47526: LD_ADDR_VAR 0 21
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 22
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47986: LD_ADDR_VAR 0 23
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 3
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48266: LD_ADDR_VAR 0 24
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48542: LD_ADDR_VAR 0 25
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48816: LD_ADDR_VAR 0 26
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 3
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49092: LD_ADDR_VAR 0 27
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49372: LD_ADDR_VAR 0 28
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49654: LD_ADDR_VAR 0 29
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49933: LD_ADDR_VAR 0 30
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50211: LD_ADDR_VAR 0 31
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50489: LD_ADDR_VAR 0 32
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50767: LD_ADDR_VAR 0 33
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51046: LD_ADDR_VAR 0 34
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51326: LD_ADDR_VAR 0 35
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51438: LD_ADDR_VAR 0 36
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51550: LD_ADDR_VAR 0 37
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51662: LD_ADDR_VAR 0 38
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51774: LD_ADDR_VAR 0 39
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51886: LD_ADDR_VAR 0 40
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51998: LD_ADDR_VAR 0 41
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52348: LD_ADDR_VAR 0 42
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52698: LD_ADDR_VAR 0 43
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53046: LD_ADDR_VAR 0 44
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53396: LD_ADDR_VAR 0 45
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53746: LD_ADDR_VAR 0 46
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54094: LD_ADDR_VAR 0 47
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54245: LD_ADDR_VAR 0 48
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54392: LD_ADDR_VAR 0 49
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54536: LD_ADDR_VAR 0 50
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54680: LD_ADDR_VAR 0 51
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54827: LD_ADDR_VAR 0 52
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54978: LD_ADDR_VAR 0 53
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55208: LD_ADDR_VAR 0 54
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55438: LD_ADDR_VAR 0 55
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55668: LD_ADDR_VAR 0 56
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55898: LD_ADDR_VAR 0 57
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56128: LD_ADDR_VAR 0 58
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56358: LD_ADDR_VAR 0 59
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56446: LD_ADDR_VAR 0 60
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56534: LD_ADDR_VAR 0 61
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56622: LD_ADDR_VAR 0 62
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56710: LD_ADDR_VAR 0 63
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56798: LD_ADDR_VAR 0 64
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// end ; 1 :
56886: GO 62783
56888: LD_INT 1
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56896
56894: GO 59519
56896: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56897: LD_ADDR_VAR 0 11
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56941: LD_ADDR_VAR 0 12
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56982: LD_ADDR_VAR 0 13
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57022: LD_ADDR_VAR 0 14
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57063: LD_ADDR_VAR 0 15
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57107: LD_ADDR_VAR 0 16
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: NEG
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57153: LD_ADDR_VAR 0 17
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57197: LD_ADDR_VAR 0 18
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57238: LD_ADDR_VAR 0 19
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57278: LD_ADDR_VAR 0 20
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57319: LD_ADDR_VAR 0 21
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57363: LD_ADDR_VAR 0 22
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57409: LD_ADDR_VAR 0 23
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 4
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57453: LD_ADDR_VAR 0 24
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57494: LD_ADDR_VAR 0 25
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 4
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57534: LD_ADDR_VAR 0 26
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 4
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57575: LD_ADDR_VAR 0 27
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57619: LD_ADDR_VAR 0 28
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: LD_INT 4
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57665: LD_ADDR_VAR 0 29
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 4
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 5
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 5
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 6
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 6
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 5
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57820: LD_ADDR_VAR 0 30
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 5
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 5
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 6
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 6
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57963: LD_ADDR_VAR 0 31
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 4
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 5
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 5
58040: PUSH
58041: LD_INT 5
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: LD_INT 5
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 6
58060: PUSH
58061: LD_INT 5
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 6
58070: PUSH
58071: LD_INT 6
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 5
58080: PUSH
58081: LD_INT 6
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58102: LD_ADDR_VAR 0 32
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 5
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 4
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 6
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 6
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 5
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58245: LD_ADDR_VAR 0 33
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 5
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 5
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 5
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 6
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 6
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58400: LD_ADDR_VAR 0 34
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 5
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 6
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 6
58527: NEG
58528: PUSH
58529: LD_INT 5
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 6
58539: NEG
58540: PUSH
58541: LD_INT 6
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58563: LD_ADDR_VAR 0 41
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58607: LD_ADDR_VAR 0 42
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58648: LD_ADDR_VAR 0 43
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58688: LD_ADDR_VAR 0 44
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58729: LD_ADDR_VAR 0 45
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58773: LD_ADDR_VAR 0 46
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58819: LD_ADDR_VAR 0 47
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58852: LD_ADDR_VAR 0 48
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58883: LD_ADDR_VAR 0 49
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58912: LD_ADDR_VAR 0 50
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58941: LD_ADDR_VAR 0 51
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58972: LD_ADDR_VAR 0 52
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59005: LD_ADDR_VAR 0 53
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59049: LD_ADDR_VAR 0 54
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59090: LD_ADDR_VAR 0 55
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59130: LD_ADDR_VAR 0 56
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59171: LD_ADDR_VAR 0 57
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59215: LD_ADDR_VAR 0 58
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59261: LD_ADDR_VAR 0 59
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59305: LD_ADDR_VAR 0 60
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59346: LD_ADDR_VAR 0 61
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59386: LD_ADDR_VAR 0 62
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59427: LD_ADDR_VAR 0 63
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59471: LD_ADDR_VAR 0 64
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// end ; 2 :
59517: GO 62783
59519: LD_INT 2
59521: DOUBLE
59522: EQUAL
59523: IFTRUE 59527
59525: GO 62782
59527: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59528: LD_ADDR_VAR 0 29
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 5
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 4
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 5
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 4
59867: NEG
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 4
59890: NEG
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: NEG
59926: PUSH
59927: LD_INT 5
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 5
59973: NEG
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 5
59985: NEG
59986: PUSH
59987: LD_INT 5
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 5
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 5
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60066: LD_ADDR_VAR 0 30
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: LD_INT 4
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 5
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: LD_INT 5
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 5
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 4
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 5
60312: NEG
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 5
60335: NEG
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 4
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 4
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 5
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 4
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 4
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 5
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 5
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60613: LD_ADDR_VAR 0 31
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 5
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 5
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: NEG
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 4
60792: NEG
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 4
60827: NEG
60828: PUSH
60829: LD_INT 5
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: NEG
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 5
60887: NEG
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 5
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 5
60911: NEG
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 4
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 3
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 4
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 5
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61163: LD_ADDR_VAR 0 32
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: NEG
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 4
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 5
61226: NEG
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 5
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 5
61249: NEG
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 4
61344: NEG
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 4
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 4
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 5
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 4
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 3
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 4
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 5
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 5
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 4
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 4
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 3
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 5
61595: PUSH
61596: LD_INT 4
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 5
61605: PUSH
61606: LD_INT 5
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 5
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 3
61655: PUSH
61656: LD_INT 5
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61710: LD_ADDR_VAR 0 33
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: LD_INT 4
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 4
61729: NEG
61730: PUSH
61731: LD_INT 5
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 5
61777: NEG
61778: PUSH
61779: LD_INT 4
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 5
61789: NEG
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 3
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 4
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 5
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 5
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 4
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 4
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: LD_INT 4
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 4
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 5
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 4
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: LD_INT 5
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 3
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62248: LD_ADDR_VAR 0 34
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 4
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 5
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 4
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 4
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 5
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 4
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 4
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 4
62450: PUSH
62451: LD_INT 4
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 5
62470: PUSH
62471: LD_INT 4
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 5
62480: PUSH
62481: LD_INT 5
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: LD_INT 5
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 5
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: LD_INT 5
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 4
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 4
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 5
62689: NEG
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 5
62700: NEG
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// end ; end ;
62780: GO 62783
62782: POP
// case btype of b_depot , b_warehouse :
62783: LD_VAR 0 1
62787: PUSH
62788: LD_INT 0
62790: DOUBLE
62791: EQUAL
62792: IFTRUE 62802
62794: LD_INT 1
62796: DOUBLE
62797: EQUAL
62798: IFTRUE 62802
62800: GO 63003
62802: POP
// case nation of nation_american :
62803: LD_VAR 0 5
62807: PUSH
62808: LD_INT 1
62810: DOUBLE
62811: EQUAL
62812: IFTRUE 62816
62814: GO 62872
62816: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62817: LD_ADDR_VAR 0 9
62821: PUSH
62822: LD_VAR 0 11
62826: PUSH
62827: LD_VAR 0 12
62831: PUSH
62832: LD_VAR 0 13
62836: PUSH
62837: LD_VAR 0 14
62841: PUSH
62842: LD_VAR 0 15
62846: PUSH
62847: LD_VAR 0 16
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_VAR 0 4
62864: PUSH
62865: LD_INT 1
62867: PLUS
62868: ARRAY
62869: ST_TO_ADDR
62870: GO 63001
62872: LD_INT 2
62874: DOUBLE
62875: EQUAL
62876: IFTRUE 62880
62878: GO 62936
62880: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62881: LD_ADDR_VAR 0 9
62885: PUSH
62886: LD_VAR 0 17
62890: PUSH
62891: LD_VAR 0 18
62895: PUSH
62896: LD_VAR 0 19
62900: PUSH
62901: LD_VAR 0 20
62905: PUSH
62906: LD_VAR 0 21
62910: PUSH
62911: LD_VAR 0 22
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: PUSH
62924: LD_VAR 0 4
62928: PUSH
62929: LD_INT 1
62931: PLUS
62932: ARRAY
62933: ST_TO_ADDR
62934: GO 63001
62936: LD_INT 3
62938: DOUBLE
62939: EQUAL
62940: IFTRUE 62944
62942: GO 63000
62944: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62945: LD_ADDR_VAR 0 9
62949: PUSH
62950: LD_VAR 0 23
62954: PUSH
62955: LD_VAR 0 24
62959: PUSH
62960: LD_VAR 0 25
62964: PUSH
62965: LD_VAR 0 26
62969: PUSH
62970: LD_VAR 0 27
62974: PUSH
62975: LD_VAR 0 28
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: PUSH
62988: LD_VAR 0 4
62992: PUSH
62993: LD_INT 1
62995: PLUS
62996: ARRAY
62997: ST_TO_ADDR
62998: GO 63001
63000: POP
63001: GO 63556
63003: LD_INT 2
63005: DOUBLE
63006: EQUAL
63007: IFTRUE 63017
63009: LD_INT 3
63011: DOUBLE
63012: EQUAL
63013: IFTRUE 63017
63015: GO 63073
63017: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63018: LD_ADDR_VAR 0 9
63022: PUSH
63023: LD_VAR 0 29
63027: PUSH
63028: LD_VAR 0 30
63032: PUSH
63033: LD_VAR 0 31
63037: PUSH
63038: LD_VAR 0 32
63042: PUSH
63043: LD_VAR 0 33
63047: PUSH
63048: LD_VAR 0 34
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: PUSH
63061: LD_VAR 0 4
63065: PUSH
63066: LD_INT 1
63068: PLUS
63069: ARRAY
63070: ST_TO_ADDR
63071: GO 63556
63073: LD_INT 16
63075: DOUBLE
63076: EQUAL
63077: IFTRUE 63135
63079: LD_INT 17
63081: DOUBLE
63082: EQUAL
63083: IFTRUE 63135
63085: LD_INT 18
63087: DOUBLE
63088: EQUAL
63089: IFTRUE 63135
63091: LD_INT 19
63093: DOUBLE
63094: EQUAL
63095: IFTRUE 63135
63097: LD_INT 22
63099: DOUBLE
63100: EQUAL
63101: IFTRUE 63135
63103: LD_INT 20
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63135
63109: LD_INT 21
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63135
63115: LD_INT 23
63117: DOUBLE
63118: EQUAL
63119: IFTRUE 63135
63121: LD_INT 24
63123: DOUBLE
63124: EQUAL
63125: IFTRUE 63135
63127: LD_INT 25
63129: DOUBLE
63130: EQUAL
63131: IFTRUE 63135
63133: GO 63191
63135: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63136: LD_ADDR_VAR 0 9
63140: PUSH
63141: LD_VAR 0 35
63145: PUSH
63146: LD_VAR 0 36
63150: PUSH
63151: LD_VAR 0 37
63155: PUSH
63156: LD_VAR 0 38
63160: PUSH
63161: LD_VAR 0 39
63165: PUSH
63166: LD_VAR 0 40
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: PUSH
63179: LD_VAR 0 4
63183: PUSH
63184: LD_INT 1
63186: PLUS
63187: ARRAY
63188: ST_TO_ADDR
63189: GO 63556
63191: LD_INT 6
63193: DOUBLE
63194: EQUAL
63195: IFTRUE 63247
63197: LD_INT 7
63199: DOUBLE
63200: EQUAL
63201: IFTRUE 63247
63203: LD_INT 8
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63247
63209: LD_INT 13
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63247
63215: LD_INT 12
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63247
63221: LD_INT 15
63223: DOUBLE
63224: EQUAL
63225: IFTRUE 63247
63227: LD_INT 11
63229: DOUBLE
63230: EQUAL
63231: IFTRUE 63247
63233: LD_INT 14
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63247
63239: LD_INT 10
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63247
63245: GO 63303
63247: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63248: LD_ADDR_VAR 0 9
63252: PUSH
63253: LD_VAR 0 41
63257: PUSH
63258: LD_VAR 0 42
63262: PUSH
63263: LD_VAR 0 43
63267: PUSH
63268: LD_VAR 0 44
63272: PUSH
63273: LD_VAR 0 45
63277: PUSH
63278: LD_VAR 0 46
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 4
63295: PUSH
63296: LD_INT 1
63298: PLUS
63299: ARRAY
63300: ST_TO_ADDR
63301: GO 63556
63303: LD_INT 36
63305: DOUBLE
63306: EQUAL
63307: IFTRUE 63311
63309: GO 63367
63311: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63312: LD_ADDR_VAR 0 9
63316: PUSH
63317: LD_VAR 0 47
63321: PUSH
63322: LD_VAR 0 48
63326: PUSH
63327: LD_VAR 0 49
63331: PUSH
63332: LD_VAR 0 50
63336: PUSH
63337: LD_VAR 0 51
63341: PUSH
63342: LD_VAR 0 52
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: PUSH
63355: LD_VAR 0 4
63359: PUSH
63360: LD_INT 1
63362: PLUS
63363: ARRAY
63364: ST_TO_ADDR
63365: GO 63556
63367: LD_INT 4
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63393
63373: LD_INT 5
63375: DOUBLE
63376: EQUAL
63377: IFTRUE 63393
63379: LD_INT 34
63381: DOUBLE
63382: EQUAL
63383: IFTRUE 63393
63385: LD_INT 37
63387: DOUBLE
63388: EQUAL
63389: IFTRUE 63393
63391: GO 63449
63393: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63394: LD_ADDR_VAR 0 9
63398: PUSH
63399: LD_VAR 0 53
63403: PUSH
63404: LD_VAR 0 54
63408: PUSH
63409: LD_VAR 0 55
63413: PUSH
63414: LD_VAR 0 56
63418: PUSH
63419: LD_VAR 0 57
63423: PUSH
63424: LD_VAR 0 58
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: PUSH
63437: LD_VAR 0 4
63441: PUSH
63442: LD_INT 1
63444: PLUS
63445: ARRAY
63446: ST_TO_ADDR
63447: GO 63556
63449: LD_INT 31
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63499
63455: LD_INT 32
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63499
63461: LD_INT 33
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63499
63467: LD_INT 27
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63499
63473: LD_INT 26
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63499
63479: LD_INT 28
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63499
63485: LD_INT 29
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63499
63491: LD_INT 30
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63499
63497: GO 63555
63499: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63500: LD_ADDR_VAR 0 9
63504: PUSH
63505: LD_VAR 0 59
63509: PUSH
63510: LD_VAR 0 60
63514: PUSH
63515: LD_VAR 0 61
63519: PUSH
63520: LD_VAR 0 62
63524: PUSH
63525: LD_VAR 0 63
63529: PUSH
63530: LD_VAR 0 64
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: PUSH
63543: LD_VAR 0 4
63547: PUSH
63548: LD_INT 1
63550: PLUS
63551: ARRAY
63552: ST_TO_ADDR
63553: GO 63556
63555: POP
// temp_list2 = [ ] ;
63556: LD_ADDR_VAR 0 10
63560: PUSH
63561: EMPTY
63562: ST_TO_ADDR
// for i in temp_list do
63563: LD_ADDR_VAR 0 8
63567: PUSH
63568: LD_VAR 0 9
63572: PUSH
63573: FOR_IN
63574: IFFALSE 63626
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63576: LD_ADDR_VAR 0 10
63580: PUSH
63581: LD_VAR 0 10
63585: PUSH
63586: LD_VAR 0 8
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: PUSH
63595: LD_VAR 0 2
63599: PLUS
63600: PUSH
63601: LD_VAR 0 8
63605: PUSH
63606: LD_INT 2
63608: ARRAY
63609: PUSH
63610: LD_VAR 0 3
63614: PLUS
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: ADD
63623: ST_TO_ADDR
63624: GO 63573
63626: POP
63627: POP
// result = temp_list2 ;
63628: LD_ADDR_VAR 0 7
63632: PUSH
63633: LD_VAR 0 10
63637: ST_TO_ADDR
// end ;
63638: LD_VAR 0 7
63642: RET
// export function EnemyInRange ( unit , dist ) ; begin
63643: LD_INT 0
63645: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63646: LD_ADDR_VAR 0 3
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: CALL_OW 255
63660: PPUSH
63661: LD_VAR 0 1
63665: PPUSH
63666: CALL_OW 250
63670: PPUSH
63671: LD_VAR 0 1
63675: PPUSH
63676: CALL_OW 251
63680: PPUSH
63681: LD_VAR 0 2
63685: PPUSH
63686: CALL 37016 0 4
63690: PUSH
63691: LD_INT 4
63693: ARRAY
63694: ST_TO_ADDR
// end ;
63695: LD_VAR 0 3
63699: RET
// export function PlayerSeeMe ( unit ) ; begin
63700: LD_INT 0
63702: PPUSH
// result := See ( your_side , unit ) ;
63703: LD_ADDR_VAR 0 2
63707: PUSH
63708: LD_OWVAR 2
63712: PPUSH
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 292
63722: ST_TO_ADDR
// end ;
63723: LD_VAR 0 2
63727: RET
// export function ReverseDir ( unit ) ; begin
63728: LD_INT 0
63730: PPUSH
// if not unit then
63731: LD_VAR 0 1
63735: NOT
63736: IFFALSE 63740
// exit ;
63738: GO 63763
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63740: LD_ADDR_VAR 0 2
63744: PUSH
63745: LD_VAR 0 1
63749: PPUSH
63750: CALL_OW 254
63754: PUSH
63755: LD_INT 3
63757: PLUS
63758: PUSH
63759: LD_INT 6
63761: MOD
63762: ST_TO_ADDR
// end ;
63763: LD_VAR 0 2
63767: RET
// export function ReverseArray ( array ) ; var i ; begin
63768: LD_INT 0
63770: PPUSH
63771: PPUSH
// if not array then
63772: LD_VAR 0 1
63776: NOT
63777: IFFALSE 63781
// exit ;
63779: GO 63836
// result := [ ] ;
63781: LD_ADDR_VAR 0 2
63785: PUSH
63786: EMPTY
63787: ST_TO_ADDR
// for i := array downto 1 do
63788: LD_ADDR_VAR 0 3
63792: PUSH
63793: DOUBLE
63794: LD_VAR 0 1
63798: INC
63799: ST_TO_ADDR
63800: LD_INT 1
63802: PUSH
63803: FOR_DOWNTO
63804: IFFALSE 63834
// result := Join ( result , array [ i ] ) ;
63806: LD_ADDR_VAR 0 2
63810: PUSH
63811: LD_VAR 0 2
63815: PPUSH
63816: LD_VAR 0 1
63820: PUSH
63821: LD_VAR 0 3
63825: ARRAY
63826: PPUSH
63827: CALL 68492 0 2
63831: ST_TO_ADDR
63832: GO 63803
63834: POP
63835: POP
// end ;
63836: LD_VAR 0 2
63840: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63841: LD_INT 0
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
63848: PPUSH
// if not unit or not hexes then
63849: LD_VAR 0 1
63853: NOT
63854: PUSH
63855: LD_VAR 0 2
63859: NOT
63860: OR
63861: IFFALSE 63865
// exit ;
63863: GO 63988
// dist := 9999 ;
63865: LD_ADDR_VAR 0 5
63869: PUSH
63870: LD_INT 9999
63872: ST_TO_ADDR
// for i = 1 to hexes do
63873: LD_ADDR_VAR 0 4
63877: PUSH
63878: DOUBLE
63879: LD_INT 1
63881: DEC
63882: ST_TO_ADDR
63883: LD_VAR 0 2
63887: PUSH
63888: FOR_TO
63889: IFFALSE 63976
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63891: LD_ADDR_VAR 0 6
63895: PUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: LD_VAR 0 2
63905: PUSH
63906: LD_VAR 0 4
63910: ARRAY
63911: PUSH
63912: LD_INT 1
63914: ARRAY
63915: PPUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 4
63925: ARRAY
63926: PUSH
63927: LD_INT 2
63929: ARRAY
63930: PPUSH
63931: CALL_OW 297
63935: ST_TO_ADDR
// if tdist < dist then
63936: LD_VAR 0 6
63940: PUSH
63941: LD_VAR 0 5
63945: LESS
63946: IFFALSE 63974
// begin hex := hexes [ i ] ;
63948: LD_ADDR_VAR 0 8
63952: PUSH
63953: LD_VAR 0 2
63957: PUSH
63958: LD_VAR 0 4
63962: ARRAY
63963: ST_TO_ADDR
// dist := tdist ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_VAR 0 6
63973: ST_TO_ADDR
// end ; end ;
63974: GO 63888
63976: POP
63977: POP
// result := hex ;
63978: LD_ADDR_VAR 0 3
63982: PUSH
63983: LD_VAR 0 8
63987: ST_TO_ADDR
// end ;
63988: LD_VAR 0 3
63992: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63997: LD_VAR 0 1
64001: NOT
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_INT 21
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 23
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PPUSH
64032: CALL_OW 69
64036: IN
64037: NOT
64038: OR
64039: IFFALSE 64043
// exit ;
64041: GO 64090
// for i = 1 to 3 do
64043: LD_ADDR_VAR 0 3
64047: PUSH
64048: DOUBLE
64049: LD_INT 1
64051: DEC
64052: ST_TO_ADDR
64053: LD_INT 3
64055: PUSH
64056: FOR_TO
64057: IFFALSE 64088
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64059: LD_VAR 0 1
64063: PPUSH
64064: CALL_OW 250
64068: PPUSH
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 251
64078: PPUSH
64079: LD_INT 1
64081: PPUSH
64082: CALL_OW 453
64086: GO 64056
64088: POP
64089: POP
// end ;
64090: LD_VAR 0 2
64094: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64095: LD_INT 0
64097: PPUSH
64098: PPUSH
64099: PPUSH
64100: PPUSH
64101: PPUSH
64102: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64103: LD_VAR 0 1
64107: NOT
64108: PUSH
64109: LD_VAR 0 2
64113: NOT
64114: OR
64115: PUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: CALL_OW 314
64125: OR
64126: IFFALSE 64130
// exit ;
64128: GO 64597
// if GetLives ( i ) < 250 then
64130: LD_VAR 0 4
64134: PPUSH
64135: CALL_OW 256
64139: PUSH
64140: LD_INT 250
64142: LESS
64143: IFFALSE 64156
// begin ComAutodestruct ( i ) ;
64145: LD_VAR 0 4
64149: PPUSH
64150: CALL 63993 0 1
// exit ;
64154: GO 64597
// end ; x := GetX ( enemy_unit ) ;
64156: LD_ADDR_VAR 0 7
64160: PUSH
64161: LD_VAR 0 2
64165: PPUSH
64166: CALL_OW 250
64170: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64171: LD_ADDR_VAR 0 8
64175: PUSH
64176: LD_VAR 0 2
64180: PPUSH
64181: CALL_OW 251
64185: ST_TO_ADDR
// if not x or not y then
64186: LD_VAR 0 7
64190: NOT
64191: PUSH
64192: LD_VAR 0 8
64196: NOT
64197: OR
64198: IFFALSE 64202
// exit ;
64200: GO 64597
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64202: LD_ADDR_VAR 0 6
64206: PUSH
64207: LD_VAR 0 7
64211: PPUSH
64212: LD_INT 0
64214: PPUSH
64215: LD_INT 4
64217: PPUSH
64218: CALL_OW 272
64222: PUSH
64223: LD_VAR 0 8
64227: PPUSH
64228: LD_INT 0
64230: PPUSH
64231: LD_INT 4
64233: PPUSH
64234: CALL_OW 273
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_VAR 0 7
64247: PPUSH
64248: LD_INT 1
64250: PPUSH
64251: LD_INT 4
64253: PPUSH
64254: CALL_OW 272
64258: PUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_INT 1
64266: PPUSH
64267: LD_INT 4
64269: PPUSH
64270: CALL_OW 273
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_VAR 0 7
64283: PPUSH
64284: LD_INT 2
64286: PPUSH
64287: LD_INT 4
64289: PPUSH
64290: CALL_OW 272
64294: PUSH
64295: LD_VAR 0 8
64299: PPUSH
64300: LD_INT 2
64302: PPUSH
64303: LD_INT 4
64305: PPUSH
64306: CALL_OW 273
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_VAR 0 7
64319: PPUSH
64320: LD_INT 3
64322: PPUSH
64323: LD_INT 4
64325: PPUSH
64326: CALL_OW 272
64330: PUSH
64331: LD_VAR 0 8
64335: PPUSH
64336: LD_INT 3
64338: PPUSH
64339: LD_INT 4
64341: PPUSH
64342: CALL_OW 273
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_VAR 0 7
64355: PPUSH
64356: LD_INT 4
64358: PPUSH
64359: LD_INT 4
64361: PPUSH
64362: CALL_OW 272
64366: PUSH
64367: LD_VAR 0 8
64371: PPUSH
64372: LD_INT 4
64374: PPUSH
64375: LD_INT 4
64377: PPUSH
64378: CALL_OW 273
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_VAR 0 7
64391: PPUSH
64392: LD_INT 5
64394: PPUSH
64395: LD_INT 4
64397: PPUSH
64398: CALL_OW 272
64402: PUSH
64403: LD_VAR 0 8
64407: PPUSH
64408: LD_INT 5
64410: PPUSH
64411: LD_INT 4
64413: PPUSH
64414: CALL_OW 273
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// for i = tmp downto 1 do
64431: LD_ADDR_VAR 0 4
64435: PUSH
64436: DOUBLE
64437: LD_VAR 0 6
64441: INC
64442: ST_TO_ADDR
64443: LD_INT 1
64445: PUSH
64446: FOR_DOWNTO
64447: IFFALSE 64548
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64449: LD_VAR 0 6
64453: PUSH
64454: LD_VAR 0 4
64458: ARRAY
64459: PUSH
64460: LD_INT 1
64462: ARRAY
64463: PPUSH
64464: LD_VAR 0 6
64468: PUSH
64469: LD_VAR 0 4
64473: ARRAY
64474: PUSH
64475: LD_INT 2
64477: ARRAY
64478: PPUSH
64479: CALL_OW 488
64483: NOT
64484: PUSH
64485: LD_VAR 0 6
64489: PUSH
64490: LD_VAR 0 4
64494: ARRAY
64495: PUSH
64496: LD_INT 1
64498: ARRAY
64499: PPUSH
64500: LD_VAR 0 6
64504: PUSH
64505: LD_VAR 0 4
64509: ARRAY
64510: PUSH
64511: LD_INT 2
64513: ARRAY
64514: PPUSH
64515: CALL_OW 428
64519: PUSH
64520: LD_INT 0
64522: NONEQUAL
64523: OR
64524: IFFALSE 64546
// tmp := Delete ( tmp , i ) ;
64526: LD_ADDR_VAR 0 6
64530: PUSH
64531: LD_VAR 0 6
64535: PPUSH
64536: LD_VAR 0 4
64540: PPUSH
64541: CALL_OW 3
64545: ST_TO_ADDR
64546: GO 64446
64548: POP
64549: POP
// j := GetClosestHex ( unit , tmp ) ;
64550: LD_ADDR_VAR 0 5
64554: PUSH
64555: LD_VAR 0 1
64559: PPUSH
64560: LD_VAR 0 6
64564: PPUSH
64565: CALL 63841 0 2
64569: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64570: LD_VAR 0 1
64574: PPUSH
64575: LD_VAR 0 5
64579: PUSH
64580: LD_INT 1
64582: ARRAY
64583: PPUSH
64584: LD_VAR 0 5
64588: PUSH
64589: LD_INT 2
64591: ARRAY
64592: PPUSH
64593: CALL_OW 111
// end ;
64597: LD_VAR 0 3
64601: RET
// export function PrepareApemanSoldier ( ) ; begin
64602: LD_INT 0
64604: PPUSH
// uc_nation := 0 ;
64605: LD_ADDR_OWVAR 21
64609: PUSH
64610: LD_INT 0
64612: ST_TO_ADDR
// hc_sex := sex_male ;
64613: LD_ADDR_OWVAR 27
64617: PUSH
64618: LD_INT 1
64620: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64621: LD_ADDR_OWVAR 28
64625: PUSH
64626: LD_INT 15
64628: ST_TO_ADDR
// hc_gallery :=  ;
64629: LD_ADDR_OWVAR 33
64633: PUSH
64634: LD_STRING 
64636: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64637: LD_ADDR_OWVAR 31
64641: PUSH
64642: LD_INT 0
64644: PPUSH
64645: LD_INT 3
64647: PPUSH
64648: CALL_OW 12
64652: PUSH
64653: LD_INT 0
64655: PPUSH
64656: LD_INT 3
64658: PPUSH
64659: CALL_OW 12
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// end ;
64676: LD_VAR 0 1
64680: RET
// export function PrepareApemanEngineer ( ) ; begin
64681: LD_INT 0
64683: PPUSH
// uc_nation := 0 ;
64684: LD_ADDR_OWVAR 21
64688: PUSH
64689: LD_INT 0
64691: ST_TO_ADDR
// hc_sex := sex_male ;
64692: LD_ADDR_OWVAR 27
64696: PUSH
64697: LD_INT 1
64699: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64700: LD_ADDR_OWVAR 28
64704: PUSH
64705: LD_INT 16
64707: ST_TO_ADDR
// hc_gallery :=  ;
64708: LD_ADDR_OWVAR 33
64712: PUSH
64713: LD_STRING 
64715: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64716: LD_ADDR_OWVAR 31
64720: PUSH
64721: LD_INT 0
64723: PPUSH
64724: LD_INT 3
64726: PPUSH
64727: CALL_OW 12
64731: PUSH
64732: LD_INT 0
64734: PPUSH
64735: LD_INT 3
64737: PPUSH
64738: CALL_OW 12
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: ST_TO_ADDR
// end ;
64755: LD_VAR 0 1
64759: RET
// export function PrepareApeman ( agressivity ) ; begin
64760: LD_INT 0
64762: PPUSH
// uc_side := 0 ;
64763: LD_ADDR_OWVAR 20
64767: PUSH
64768: LD_INT 0
64770: ST_TO_ADDR
// uc_nation := 0 ;
64771: LD_ADDR_OWVAR 21
64775: PUSH
64776: LD_INT 0
64778: ST_TO_ADDR
// hc_sex := sex_male ;
64779: LD_ADDR_OWVAR 27
64783: PUSH
64784: LD_INT 1
64786: ST_TO_ADDR
// hc_class := class_apeman ;
64787: LD_ADDR_OWVAR 28
64791: PUSH
64792: LD_INT 12
64794: ST_TO_ADDR
// hc_gallery :=  ;
64795: LD_ADDR_OWVAR 33
64799: PUSH
64800: LD_STRING 
64802: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64803: LD_ADDR_OWVAR 35
64807: PUSH
64808: LD_VAR 0 1
64812: NEG
64813: PPUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 12
64823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64824: LD_ADDR_OWVAR 31
64828: PUSH
64829: LD_INT 0
64831: PPUSH
64832: LD_INT 3
64834: PPUSH
64835: CALL_OW 12
64839: PUSH
64840: LD_INT 0
64842: PPUSH
64843: LD_INT 3
64845: PPUSH
64846: CALL_OW 12
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: ST_TO_ADDR
// end ;
64863: LD_VAR 0 2
64867: RET
// export function PrepareTiger ( agressivity ) ; begin
64868: LD_INT 0
64870: PPUSH
// uc_side := 0 ;
64871: LD_ADDR_OWVAR 20
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// uc_nation := 0 ;
64879: LD_ADDR_OWVAR 21
64883: PUSH
64884: LD_INT 0
64886: ST_TO_ADDR
// hc_class := class_tiger ;
64887: LD_ADDR_OWVAR 28
64891: PUSH
64892: LD_INT 14
64894: ST_TO_ADDR
// hc_gallery :=  ;
64895: LD_ADDR_OWVAR 33
64899: PUSH
64900: LD_STRING 
64902: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64903: LD_ADDR_OWVAR 35
64907: PUSH
64908: LD_VAR 0 1
64912: NEG
64913: PPUSH
64914: LD_VAR 0 1
64918: PPUSH
64919: CALL_OW 12
64923: ST_TO_ADDR
// end ;
64924: LD_VAR 0 2
64928: RET
// export function PrepareEnchidna ( ) ; begin
64929: LD_INT 0
64931: PPUSH
// uc_side := 0 ;
64932: LD_ADDR_OWVAR 20
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// uc_nation := 0 ;
64940: LD_ADDR_OWVAR 21
64944: PUSH
64945: LD_INT 0
64947: ST_TO_ADDR
// hc_class := class_baggie ;
64948: LD_ADDR_OWVAR 28
64952: PUSH
64953: LD_INT 13
64955: ST_TO_ADDR
// hc_gallery :=  ;
64956: LD_ADDR_OWVAR 33
64960: PUSH
64961: LD_STRING 
64963: ST_TO_ADDR
// end ;
64964: LD_VAR 0 1
64968: RET
// export function PrepareFrog ( ) ; begin
64969: LD_INT 0
64971: PPUSH
// uc_side := 0 ;
64972: LD_ADDR_OWVAR 20
64976: PUSH
64977: LD_INT 0
64979: ST_TO_ADDR
// uc_nation := 0 ;
64980: LD_ADDR_OWVAR 21
64984: PUSH
64985: LD_INT 0
64987: ST_TO_ADDR
// hc_class := class_frog ;
64988: LD_ADDR_OWVAR 28
64992: PUSH
64993: LD_INT 19
64995: ST_TO_ADDR
// hc_gallery :=  ;
64996: LD_ADDR_OWVAR 33
65000: PUSH
65001: LD_STRING 
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 1
65008: RET
// export function PrepareFish ( ) ; begin
65009: LD_INT 0
65011: PPUSH
// uc_side := 0 ;
65012: LD_ADDR_OWVAR 20
65016: PUSH
65017: LD_INT 0
65019: ST_TO_ADDR
// uc_nation := 0 ;
65020: LD_ADDR_OWVAR 21
65024: PUSH
65025: LD_INT 0
65027: ST_TO_ADDR
// hc_class := class_fish ;
65028: LD_ADDR_OWVAR 28
65032: PUSH
65033: LD_INT 20
65035: ST_TO_ADDR
// hc_gallery :=  ;
65036: LD_ADDR_OWVAR 33
65040: PUSH
65041: LD_STRING 
65043: ST_TO_ADDR
// end ;
65044: LD_VAR 0 1
65048: RET
// export function PrepareBird ( ) ; begin
65049: LD_INT 0
65051: PPUSH
// uc_side := 0 ;
65052: LD_ADDR_OWVAR 20
65056: PUSH
65057: LD_INT 0
65059: ST_TO_ADDR
// uc_nation := 0 ;
65060: LD_ADDR_OWVAR 21
65064: PUSH
65065: LD_INT 0
65067: ST_TO_ADDR
// hc_class := class_phororhacos ;
65068: LD_ADDR_OWVAR 28
65072: PUSH
65073: LD_INT 18
65075: ST_TO_ADDR
// hc_gallery :=  ;
65076: LD_ADDR_OWVAR 33
65080: PUSH
65081: LD_STRING 
65083: ST_TO_ADDR
// end ;
65084: LD_VAR 0 1
65088: RET
// export function PrepareHorse ( ) ; begin
65089: LD_INT 0
65091: PPUSH
// uc_side := 0 ;
65092: LD_ADDR_OWVAR 20
65096: PUSH
65097: LD_INT 0
65099: ST_TO_ADDR
// uc_nation := 0 ;
65100: LD_ADDR_OWVAR 21
65104: PUSH
65105: LD_INT 0
65107: ST_TO_ADDR
// hc_class := class_horse ;
65108: LD_ADDR_OWVAR 28
65112: PUSH
65113: LD_INT 21
65115: ST_TO_ADDR
// hc_gallery :=  ;
65116: LD_ADDR_OWVAR 33
65120: PUSH
65121: LD_STRING 
65123: ST_TO_ADDR
// end ;
65124: LD_VAR 0 1
65128: RET
// export function PrepareMastodont ( ) ; begin
65129: LD_INT 0
65131: PPUSH
// uc_side := 0 ;
65132: LD_ADDR_OWVAR 20
65136: PUSH
65137: LD_INT 0
65139: ST_TO_ADDR
// uc_nation := 0 ;
65140: LD_ADDR_OWVAR 21
65144: PUSH
65145: LD_INT 0
65147: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65148: LD_ADDR_OWVAR 37
65152: PUSH
65153: LD_INT 31
65155: ST_TO_ADDR
// vc_control := control_rider ;
65156: LD_ADDR_OWVAR 38
65160: PUSH
65161: LD_INT 4
65163: ST_TO_ADDR
// end ;
65164: LD_VAR 0 1
65168: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65169: LD_INT 0
65171: PPUSH
65172: PPUSH
65173: PPUSH
// uc_side = 0 ;
65174: LD_ADDR_OWVAR 20
65178: PUSH
65179: LD_INT 0
65181: ST_TO_ADDR
// uc_nation = 0 ;
65182: LD_ADDR_OWVAR 21
65186: PUSH
65187: LD_INT 0
65189: ST_TO_ADDR
// InitHc_All ( ) ;
65190: CALL_OW 584
// InitVc ;
65194: CALL_OW 20
// if mastodonts then
65198: LD_VAR 0 6
65202: IFFALSE 65269
// for i = 1 to mastodonts do
65204: LD_ADDR_VAR 0 11
65208: PUSH
65209: DOUBLE
65210: LD_INT 1
65212: DEC
65213: ST_TO_ADDR
65214: LD_VAR 0 6
65218: PUSH
65219: FOR_TO
65220: IFFALSE 65267
// begin vc_chassis := 31 ;
65222: LD_ADDR_OWVAR 37
65226: PUSH
65227: LD_INT 31
65229: ST_TO_ADDR
// vc_control := control_rider ;
65230: LD_ADDR_OWVAR 38
65234: PUSH
65235: LD_INT 4
65237: ST_TO_ADDR
// animal := CreateVehicle ;
65238: LD_ADDR_VAR 0 12
65242: PUSH
65243: CALL_OW 45
65247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65248: LD_VAR 0 12
65252: PPUSH
65253: LD_VAR 0 8
65257: PPUSH
65258: LD_INT 0
65260: PPUSH
65261: CALL 67397 0 3
// end ;
65265: GO 65219
65267: POP
65268: POP
// if horses then
65269: LD_VAR 0 5
65273: IFFALSE 65340
// for i = 1 to horses do
65275: LD_ADDR_VAR 0 11
65279: PUSH
65280: DOUBLE
65281: LD_INT 1
65283: DEC
65284: ST_TO_ADDR
65285: LD_VAR 0 5
65289: PUSH
65290: FOR_TO
65291: IFFALSE 65338
// begin hc_class := 21 ;
65293: LD_ADDR_OWVAR 28
65297: PUSH
65298: LD_INT 21
65300: ST_TO_ADDR
// hc_gallery :=  ;
65301: LD_ADDR_OWVAR 33
65305: PUSH
65306: LD_STRING 
65308: ST_TO_ADDR
// animal := CreateHuman ;
65309: LD_ADDR_VAR 0 12
65313: PUSH
65314: CALL_OW 44
65318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65319: LD_VAR 0 12
65323: PPUSH
65324: LD_VAR 0 8
65328: PPUSH
65329: LD_INT 0
65331: PPUSH
65332: CALL 67397 0 3
// end ;
65336: GO 65290
65338: POP
65339: POP
// if birds then
65340: LD_VAR 0 1
65344: IFFALSE 65411
// for i = 1 to birds do
65346: LD_ADDR_VAR 0 11
65350: PUSH
65351: DOUBLE
65352: LD_INT 1
65354: DEC
65355: ST_TO_ADDR
65356: LD_VAR 0 1
65360: PUSH
65361: FOR_TO
65362: IFFALSE 65409
// begin hc_class := 18 ;
65364: LD_ADDR_OWVAR 28
65368: PUSH
65369: LD_INT 18
65371: ST_TO_ADDR
// hc_gallery =  ;
65372: LD_ADDR_OWVAR 33
65376: PUSH
65377: LD_STRING 
65379: ST_TO_ADDR
// animal := CreateHuman ;
65380: LD_ADDR_VAR 0 12
65384: PUSH
65385: CALL_OW 44
65389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65390: LD_VAR 0 12
65394: PPUSH
65395: LD_VAR 0 8
65399: PPUSH
65400: LD_INT 0
65402: PPUSH
65403: CALL 67397 0 3
// end ;
65407: GO 65361
65409: POP
65410: POP
// if tigers then
65411: LD_VAR 0 2
65415: IFFALSE 65499
// for i = 1 to tigers do
65417: LD_ADDR_VAR 0 11
65421: PUSH
65422: DOUBLE
65423: LD_INT 1
65425: DEC
65426: ST_TO_ADDR
65427: LD_VAR 0 2
65431: PUSH
65432: FOR_TO
65433: IFFALSE 65497
// begin hc_class = class_tiger ;
65435: LD_ADDR_OWVAR 28
65439: PUSH
65440: LD_INT 14
65442: ST_TO_ADDR
// hc_gallery =  ;
65443: LD_ADDR_OWVAR 33
65447: PUSH
65448: LD_STRING 
65450: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65451: LD_ADDR_OWVAR 35
65455: PUSH
65456: LD_INT 7
65458: NEG
65459: PPUSH
65460: LD_INT 7
65462: PPUSH
65463: CALL_OW 12
65467: ST_TO_ADDR
// animal := CreateHuman ;
65468: LD_ADDR_VAR 0 12
65472: PUSH
65473: CALL_OW 44
65477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65478: LD_VAR 0 12
65482: PPUSH
65483: LD_VAR 0 8
65487: PPUSH
65488: LD_INT 0
65490: PPUSH
65491: CALL 67397 0 3
// end ;
65495: GO 65432
65497: POP
65498: POP
// if apemans then
65499: LD_VAR 0 3
65503: IFFALSE 65626
// for i = 1 to apemans do
65505: LD_ADDR_VAR 0 11
65509: PUSH
65510: DOUBLE
65511: LD_INT 1
65513: DEC
65514: ST_TO_ADDR
65515: LD_VAR 0 3
65519: PUSH
65520: FOR_TO
65521: IFFALSE 65624
// begin hc_class = class_apeman ;
65523: LD_ADDR_OWVAR 28
65527: PUSH
65528: LD_INT 12
65530: ST_TO_ADDR
// hc_gallery =  ;
65531: LD_ADDR_OWVAR 33
65535: PUSH
65536: LD_STRING 
65538: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65539: LD_ADDR_OWVAR 35
65543: PUSH
65544: LD_INT 2
65546: NEG
65547: PPUSH
65548: LD_INT 2
65550: PPUSH
65551: CALL_OW 12
65555: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65556: LD_ADDR_OWVAR 31
65560: PUSH
65561: LD_INT 1
65563: PPUSH
65564: LD_INT 3
65566: PPUSH
65567: CALL_OW 12
65571: PUSH
65572: LD_INT 1
65574: PPUSH
65575: LD_INT 3
65577: PPUSH
65578: CALL_OW 12
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// animal := CreateHuman ;
65595: LD_ADDR_VAR 0 12
65599: PUSH
65600: CALL_OW 44
65604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65605: LD_VAR 0 12
65609: PPUSH
65610: LD_VAR 0 8
65614: PPUSH
65615: LD_INT 0
65617: PPUSH
65618: CALL 67397 0 3
// end ;
65622: GO 65520
65624: POP
65625: POP
// if enchidnas then
65626: LD_VAR 0 4
65630: IFFALSE 65697
// for i = 1 to enchidnas do
65632: LD_ADDR_VAR 0 11
65636: PUSH
65637: DOUBLE
65638: LD_INT 1
65640: DEC
65641: ST_TO_ADDR
65642: LD_VAR 0 4
65646: PUSH
65647: FOR_TO
65648: IFFALSE 65695
// begin hc_class = 13 ;
65650: LD_ADDR_OWVAR 28
65654: PUSH
65655: LD_INT 13
65657: ST_TO_ADDR
// hc_gallery =  ;
65658: LD_ADDR_OWVAR 33
65662: PUSH
65663: LD_STRING 
65665: ST_TO_ADDR
// animal := CreateHuman ;
65666: LD_ADDR_VAR 0 12
65670: PUSH
65671: CALL_OW 44
65675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65676: LD_VAR 0 12
65680: PPUSH
65681: LD_VAR 0 8
65685: PPUSH
65686: LD_INT 0
65688: PPUSH
65689: CALL 67397 0 3
// end ;
65693: GO 65647
65695: POP
65696: POP
// if fishes then
65697: LD_VAR 0 7
65701: IFFALSE 65768
// for i = 1 to fishes do
65703: LD_ADDR_VAR 0 11
65707: PUSH
65708: DOUBLE
65709: LD_INT 1
65711: DEC
65712: ST_TO_ADDR
65713: LD_VAR 0 7
65717: PUSH
65718: FOR_TO
65719: IFFALSE 65766
// begin hc_class = 20 ;
65721: LD_ADDR_OWVAR 28
65725: PUSH
65726: LD_INT 20
65728: ST_TO_ADDR
// hc_gallery =  ;
65729: LD_ADDR_OWVAR 33
65733: PUSH
65734: LD_STRING 
65736: ST_TO_ADDR
// animal := CreateHuman ;
65737: LD_ADDR_VAR 0 12
65741: PUSH
65742: CALL_OW 44
65746: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65747: LD_VAR 0 12
65751: PPUSH
65752: LD_VAR 0 9
65756: PPUSH
65757: LD_INT 0
65759: PPUSH
65760: CALL 67397 0 3
// end ;
65764: GO 65718
65766: POP
65767: POP
// end ;
65768: LD_VAR 0 10
65772: RET
// export function WantHeal ( sci , unit ) ; begin
65773: LD_INT 0
65775: PPUSH
// if GetTaskList ( sci ) > 0 then
65776: LD_VAR 0 1
65780: PPUSH
65781: CALL_OW 437
65785: PUSH
65786: LD_INT 0
65788: GREATER
65789: IFFALSE 65859
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65791: LD_VAR 0 1
65795: PPUSH
65796: CALL_OW 437
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: LD_STRING l
65811: EQUAL
65812: PUSH
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 437
65822: PUSH
65823: LD_INT 1
65825: ARRAY
65826: PUSH
65827: LD_INT 4
65829: ARRAY
65830: PUSH
65831: LD_VAR 0 2
65835: EQUAL
65836: AND
65837: IFFALSE 65849
// result := true else
65839: LD_ADDR_VAR 0 3
65843: PUSH
65844: LD_INT 1
65846: ST_TO_ADDR
65847: GO 65857
// result := false ;
65849: LD_ADDR_VAR 0 3
65853: PUSH
65854: LD_INT 0
65856: ST_TO_ADDR
// end else
65857: GO 65867
// result := false ;
65859: LD_ADDR_VAR 0 3
65863: PUSH
65864: LD_INT 0
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 3
65871: RET
// export function HealTarget ( sci ) ; begin
65872: LD_INT 0
65874: PPUSH
// if not sci then
65875: LD_VAR 0 1
65879: NOT
65880: IFFALSE 65884
// exit ;
65882: GO 65949
// result := 0 ;
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: LD_INT 0
65891: ST_TO_ADDR
// if GetTaskList ( sci ) then
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 437
65901: IFFALSE 65949
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65903: LD_VAR 0 1
65907: PPUSH
65908: CALL_OW 437
65912: PUSH
65913: LD_INT 1
65915: ARRAY
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: PUSH
65921: LD_STRING l
65923: EQUAL
65924: IFFALSE 65949
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65926: LD_ADDR_VAR 0 2
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: CALL_OW 437
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: PUSH
65945: LD_INT 4
65947: ARRAY
65948: ST_TO_ADDR
// end ;
65949: LD_VAR 0 2
65953: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65954: LD_INT 0
65956: PPUSH
65957: PPUSH
65958: PPUSH
65959: PPUSH
// if not base_units then
65960: LD_VAR 0 1
65964: NOT
65965: IFFALSE 65969
// exit ;
65967: GO 66056
// result := false ;
65969: LD_ADDR_VAR 0 2
65973: PUSH
65974: LD_INT 0
65976: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65977: LD_ADDR_VAR 0 5
65981: PUSH
65982: LD_VAR 0 1
65986: PPUSH
65987: LD_INT 21
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PPUSH
65997: CALL_OW 72
66001: ST_TO_ADDR
// if not tmp then
66002: LD_VAR 0 5
66006: NOT
66007: IFFALSE 66011
// exit ;
66009: GO 66056
// for i in tmp do
66011: LD_ADDR_VAR 0 3
66015: PUSH
66016: LD_VAR 0 5
66020: PUSH
66021: FOR_IN
66022: IFFALSE 66054
// begin result := EnemyInRange ( i , 22 ) ;
66024: LD_ADDR_VAR 0 2
66028: PUSH
66029: LD_VAR 0 3
66033: PPUSH
66034: LD_INT 22
66036: PPUSH
66037: CALL 63643 0 2
66041: ST_TO_ADDR
// if result then
66042: LD_VAR 0 2
66046: IFFALSE 66052
// exit ;
66048: POP
66049: POP
66050: GO 66056
// end ;
66052: GO 66021
66054: POP
66055: POP
// end ;
66056: LD_VAR 0 2
66060: RET
// export function FilterByTag ( units , tag ) ; begin
66061: LD_INT 0
66063: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66064: LD_ADDR_VAR 0 3
66068: PUSH
66069: LD_VAR 0 1
66073: PPUSH
66074: LD_INT 120
66076: PUSH
66077: LD_VAR 0 2
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PPUSH
66086: CALL_OW 72
66090: ST_TO_ADDR
// end ;
66091: LD_VAR 0 3
66095: RET
// export function IsDriver ( un ) ; begin
66096: LD_INT 0
66098: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66099: LD_ADDR_VAR 0 2
66103: PUSH
66104: LD_VAR 0 1
66108: PUSH
66109: LD_INT 55
66111: PUSH
66112: EMPTY
66113: LIST
66114: PPUSH
66115: CALL_OW 69
66119: IN
66120: ST_TO_ADDR
// end ;
66121: LD_VAR 0 2
66125: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66126: LD_INT 0
66128: PPUSH
66129: PPUSH
// list := [ ] ;
66130: LD_ADDR_VAR 0 5
66134: PUSH
66135: EMPTY
66136: ST_TO_ADDR
// case d of 0 :
66137: LD_VAR 0 3
66141: PUSH
66142: LD_INT 0
66144: DOUBLE
66145: EQUAL
66146: IFTRUE 66150
66148: GO 66283
66150: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66151: LD_ADDR_VAR 0 5
66155: PUSH
66156: LD_VAR 0 1
66160: PUSH
66161: LD_INT 4
66163: MINUS
66164: PUSH
66165: LD_VAR 0 2
66169: PUSH
66170: LD_INT 4
66172: MINUS
66173: PUSH
66174: LD_INT 2
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: PUSH
66182: LD_VAR 0 1
66186: PUSH
66187: LD_INT 3
66189: MINUS
66190: PUSH
66191: LD_VAR 0 2
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 4
66211: PLUS
66212: PUSH
66213: LD_VAR 0 2
66217: PUSH
66218: LD_INT 4
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: LD_INT 3
66233: PLUS
66234: PUSH
66235: LD_VAR 0 2
66239: PUSH
66240: LD_INT 3
66242: PLUS
66243: PUSH
66244: LD_INT 5
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_VAR 0 1
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 4
66264: PLUS
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// end ; 1 :
66281: GO 66981
66283: LD_INT 1
66285: DOUBLE
66286: EQUAL
66287: IFTRUE 66291
66289: GO 66424
66291: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66292: LD_ADDR_VAR 0 5
66296: PUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_VAR 0 2
66306: PUSH
66307: LD_INT 4
66309: MINUS
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: LIST
66318: PUSH
66319: LD_VAR 0 1
66323: PUSH
66324: LD_INT 3
66326: MINUS
66327: PUSH
66328: LD_VAR 0 2
66332: PUSH
66333: LD_INT 3
66335: MINUS
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: LD_INT 4
66352: MINUS
66353: PUSH
66354: LD_VAR 0 2
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_VAR 0 1
66371: PUSH
66372: LD_VAR 0 2
66376: PUSH
66377: LD_INT 3
66379: PLUS
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_INT 4
66396: PLUS
66397: PUSH
66398: LD_VAR 0 2
66402: PUSH
66403: LD_INT 4
66405: PLUS
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// end ; 2 :
66422: GO 66981
66424: LD_INT 2
66426: DOUBLE
66427: EQUAL
66428: IFTRUE 66432
66430: GO 66561
66432: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66433: LD_ADDR_VAR 0 5
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: LD_VAR 0 2
66447: PUSH
66448: LD_INT 3
66450: MINUS
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 4
66467: PLUS
66468: PUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_INT 4
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: LD_VAR 0 2
66491: PUSH
66492: LD_INT 4
66494: PLUS
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 1
66508: PUSH
66509: LD_INT 3
66511: MINUS
66512: PUSH
66513: LD_VAR 0 2
66517: PUSH
66518: LD_INT 1
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PUSH
66526: LD_VAR 0 1
66530: PUSH
66531: LD_INT 4
66533: MINUS
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 4
66542: MINUS
66543: PUSH
66544: LD_INT 2
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// end ; 3 :
66559: GO 66981
66561: LD_INT 3
66563: DOUBLE
66564: EQUAL
66565: IFTRUE 66569
66567: GO 66702
66569: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66570: LD_ADDR_VAR 0 5
66574: PUSH
66575: LD_VAR 0 1
66579: PUSH
66580: LD_INT 3
66582: PLUS
66583: PUSH
66584: LD_VAR 0 2
66588: PUSH
66589: LD_INT 4
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: PUSH
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 4
66604: PLUS
66605: PUSH
66606: LD_VAR 0 2
66610: PUSH
66611: LD_INT 4
66613: PLUS
66614: PUSH
66615: LD_INT 5
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: LIST
66622: PUSH
66623: LD_VAR 0 1
66627: PUSH
66628: LD_INT 4
66630: MINUS
66631: PUSH
66632: LD_VAR 0 2
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: LD_VAR 0 1
66649: PUSH
66650: LD_VAR 0 2
66654: PUSH
66655: LD_INT 4
66657: MINUS
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PUSH
66667: LD_VAR 0 1
66671: PUSH
66672: LD_INT 3
66674: MINUS
66675: PUSH
66676: LD_VAR 0 2
66680: PUSH
66681: LD_INT 3
66683: MINUS
66684: PUSH
66685: LD_INT 2
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: ST_TO_ADDR
// end ; 4 :
66700: GO 66981
66702: LD_INT 4
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66710
66708: GO 66843
66710: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66711: LD_ADDR_VAR 0 5
66715: PUSH
66716: LD_VAR 0 1
66720: PUSH
66721: LD_VAR 0 2
66725: PUSH
66726: LD_INT 4
66728: PLUS
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_INT 3
66745: PLUS
66746: PUSH
66747: LD_VAR 0 2
66751: PUSH
66752: LD_INT 3
66754: PLUS
66755: PUSH
66756: LD_INT 5
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: LD_VAR 0 1
66768: PUSH
66769: LD_INT 4
66771: PLUS
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: LD_INT 4
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_VAR 0 2
66795: PUSH
66796: LD_INT 3
66798: MINUS
66799: PUSH
66800: LD_INT 3
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: LD_VAR 0 1
66812: PUSH
66813: LD_INT 4
66815: MINUS
66816: PUSH
66817: LD_VAR 0 2
66821: PUSH
66822: LD_INT 4
66824: MINUS
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: ST_TO_ADDR
// end ; 5 :
66841: GO 66981
66843: LD_INT 5
66845: DOUBLE
66846: EQUAL
66847: IFTRUE 66851
66849: GO 66980
66851: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66852: LD_ADDR_VAR 0 5
66856: PUSH
66857: LD_VAR 0 1
66861: PUSH
66862: LD_INT 4
66864: MINUS
66865: PUSH
66866: LD_VAR 0 2
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: PUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_VAR 0 2
66888: PUSH
66889: LD_INT 4
66891: MINUS
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: PUSH
66901: LD_VAR 0 1
66905: PUSH
66906: LD_INT 4
66908: PLUS
66909: PUSH
66910: LD_VAR 0 2
66914: PUSH
66915: LD_INT 4
66917: PLUS
66918: PUSH
66919: LD_INT 5
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: PUSH
66927: LD_VAR 0 1
66931: PUSH
66932: LD_INT 3
66934: PLUS
66935: PUSH
66936: LD_VAR 0 2
66940: PUSH
66941: LD_INT 4
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_INT 3
66961: PLUS
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: ST_TO_ADDR
// end ; end ;
66978: GO 66981
66980: POP
// result := list ;
66981: LD_ADDR_VAR 0 4
66985: PUSH
66986: LD_VAR 0 5
66990: ST_TO_ADDR
// end ;
66991: LD_VAR 0 4
66995: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66996: LD_INT 0
66998: PPUSH
66999: PPUSH
67000: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67001: LD_VAR 0 1
67005: NOT
67006: PUSH
67007: LD_VAR 0 2
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: IN
67030: NOT
67031: OR
67032: IFFALSE 67036
// exit ;
67034: GO 67119
// tmp := [ ] ;
67036: LD_ADDR_VAR 0 5
67040: PUSH
67041: EMPTY
67042: ST_TO_ADDR
// for i in units do
67043: LD_ADDR_VAR 0 4
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: FOR_IN
67054: IFFALSE 67088
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67056: LD_ADDR_VAR 0 5
67060: PUSH
67061: LD_VAR 0 5
67065: PPUSH
67066: LD_VAR 0 4
67070: PPUSH
67071: LD_VAR 0 2
67075: PPUSH
67076: CALL_OW 259
67080: PPUSH
67081: CALL 68492 0 2
67085: ST_TO_ADDR
67086: GO 67053
67088: POP
67089: POP
// if not tmp then
67090: LD_VAR 0 5
67094: NOT
67095: IFFALSE 67099
// exit ;
67097: GO 67119
// result := SortListByListDesc ( units , tmp ) ;
67099: LD_ADDR_VAR 0 3
67103: PUSH
67104: LD_VAR 0 1
67108: PPUSH
67109: LD_VAR 0 5
67113: PPUSH
67114: CALL_OW 77
67118: ST_TO_ADDR
// end ;
67119: LD_VAR 0 3
67123: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67124: LD_INT 0
67126: PPUSH
67127: PPUSH
67128: PPUSH
// result := false ;
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: LD_INT 0
67136: ST_TO_ADDR
// if not building then
67137: LD_VAR 0 2
67141: NOT
67142: IFFALSE 67146
// exit ;
67144: GO 67284
// x := GetX ( building ) ;
67146: LD_ADDR_VAR 0 4
67150: PUSH
67151: LD_VAR 0 2
67155: PPUSH
67156: CALL_OW 250
67160: ST_TO_ADDR
// y := GetY ( building ) ;
67161: LD_ADDR_VAR 0 5
67165: PUSH
67166: LD_VAR 0 2
67170: PPUSH
67171: CALL_OW 251
67175: ST_TO_ADDR
// if not x or not y then
67176: LD_VAR 0 4
67180: NOT
67181: PUSH
67182: LD_VAR 0 5
67186: NOT
67187: OR
67188: IFFALSE 67192
// exit ;
67190: GO 67284
// if GetTaskList ( unit ) then
67192: LD_VAR 0 1
67196: PPUSH
67197: CALL_OW 437
67201: IFFALSE 67284
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67203: LD_STRING e
67205: PUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: CALL_OW 437
67215: PUSH
67216: LD_INT 1
67218: ARRAY
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: EQUAL
67224: PUSH
67225: LD_VAR 0 4
67229: PUSH
67230: LD_VAR 0 1
67234: PPUSH
67235: CALL_OW 437
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PUSH
67244: LD_INT 2
67246: ARRAY
67247: EQUAL
67248: AND
67249: PUSH
67250: LD_VAR 0 5
67254: PUSH
67255: LD_VAR 0 1
67259: PPUSH
67260: CALL_OW 437
67264: PUSH
67265: LD_INT 1
67267: ARRAY
67268: PUSH
67269: LD_INT 3
67271: ARRAY
67272: EQUAL
67273: AND
67274: IFFALSE 67284
// result := true end ;
67276: LD_ADDR_VAR 0 3
67280: PUSH
67281: LD_INT 1
67283: ST_TO_ADDR
// end ;
67284: LD_VAR 0 3
67288: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67289: LD_INT 0
67291: PPUSH
// result := false ;
67292: LD_ADDR_VAR 0 4
67296: PUSH
67297: LD_INT 0
67299: ST_TO_ADDR
// if GetTaskList ( unit ) then
67300: LD_VAR 0 1
67304: PPUSH
67305: CALL_OW 437
67309: IFFALSE 67392
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67311: LD_STRING M
67313: PUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 437
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PUSH
67328: LD_INT 1
67330: ARRAY
67331: EQUAL
67332: PUSH
67333: LD_VAR 0 2
67337: PUSH
67338: LD_VAR 0 1
67342: PPUSH
67343: CALL_OW 437
67347: PUSH
67348: LD_INT 1
67350: ARRAY
67351: PUSH
67352: LD_INT 2
67354: ARRAY
67355: EQUAL
67356: AND
67357: PUSH
67358: LD_VAR 0 3
67362: PUSH
67363: LD_VAR 0 1
67367: PPUSH
67368: CALL_OW 437
67372: PUSH
67373: LD_INT 1
67375: ARRAY
67376: PUSH
67377: LD_INT 3
67379: ARRAY
67380: EQUAL
67381: AND
67382: IFFALSE 67392
// result := true ;
67384: LD_ADDR_VAR 0 4
67388: PUSH
67389: LD_INT 1
67391: ST_TO_ADDR
// end ; end ;
67392: LD_VAR 0 4
67396: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67397: LD_INT 0
67399: PPUSH
67400: PPUSH
67401: PPUSH
67402: PPUSH
// if not unit or not area then
67403: LD_VAR 0 1
67407: NOT
67408: PUSH
67409: LD_VAR 0 2
67413: NOT
67414: OR
67415: IFFALSE 67419
// exit ;
67417: GO 67595
// tmp := AreaToList ( area , i ) ;
67419: LD_ADDR_VAR 0 6
67423: PUSH
67424: LD_VAR 0 2
67428: PPUSH
67429: LD_VAR 0 5
67433: PPUSH
67434: CALL_OW 517
67438: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67439: LD_ADDR_VAR 0 5
67443: PUSH
67444: DOUBLE
67445: LD_INT 1
67447: DEC
67448: ST_TO_ADDR
67449: LD_VAR 0 6
67453: PUSH
67454: LD_INT 1
67456: ARRAY
67457: PUSH
67458: FOR_TO
67459: IFFALSE 67593
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67461: LD_ADDR_VAR 0 7
67465: PUSH
67466: LD_VAR 0 6
67470: PUSH
67471: LD_INT 1
67473: ARRAY
67474: PUSH
67475: LD_VAR 0 5
67479: ARRAY
67480: PUSH
67481: LD_VAR 0 6
67485: PUSH
67486: LD_INT 2
67488: ARRAY
67489: PUSH
67490: LD_VAR 0 5
67494: ARRAY
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67500: LD_INT 92
67502: PUSH
67503: LD_VAR 0 7
67507: PUSH
67508: LD_INT 1
67510: ARRAY
67511: PUSH
67512: LD_VAR 0 7
67516: PUSH
67517: LD_INT 2
67519: ARRAY
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: PPUSH
67530: CALL_OW 69
67534: PUSH
67535: LD_INT 0
67537: EQUAL
67538: IFFALSE 67591
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67540: LD_VAR 0 1
67544: PPUSH
67545: LD_VAR 0 7
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PPUSH
67554: LD_VAR 0 7
67558: PUSH
67559: LD_INT 2
67561: ARRAY
67562: PPUSH
67563: LD_VAR 0 3
67567: PPUSH
67568: CALL_OW 48
// result := IsPlaced ( unit ) ;
67572: LD_ADDR_VAR 0 4
67576: PUSH
67577: LD_VAR 0 1
67581: PPUSH
67582: CALL_OW 305
67586: ST_TO_ADDR
// exit ;
67587: POP
67588: POP
67589: GO 67595
// end ; end ;
67591: GO 67458
67593: POP
67594: POP
// end ;
67595: LD_VAR 0 4
67599: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67600: LD_INT 0
67602: PPUSH
67603: PPUSH
67604: PPUSH
// if not side or side > 8 then
67605: LD_VAR 0 1
67609: NOT
67610: PUSH
67611: LD_VAR 0 1
67615: PUSH
67616: LD_INT 8
67618: GREATER
67619: OR
67620: IFFALSE 67624
// exit ;
67622: GO 67811
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67624: LD_ADDR_VAR 0 4
67628: PUSH
67629: LD_INT 22
67631: PUSH
67632: LD_VAR 0 1
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 21
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PPUSH
67655: CALL_OW 69
67659: ST_TO_ADDR
// if not tmp then
67660: LD_VAR 0 4
67664: NOT
67665: IFFALSE 67669
// exit ;
67667: GO 67811
// enable_addtolog := true ;
67669: LD_ADDR_OWVAR 81
67673: PUSH
67674: LD_INT 1
67676: ST_TO_ADDR
// AddToLog ( [ ) ;
67677: LD_STRING [
67679: PPUSH
67680: CALL_OW 561
// for i in tmp do
67684: LD_ADDR_VAR 0 3
67688: PUSH
67689: LD_VAR 0 4
67693: PUSH
67694: FOR_IN
67695: IFFALSE 67802
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67697: LD_STRING [
67699: PUSH
67700: LD_VAR 0 3
67704: PPUSH
67705: CALL_OW 266
67709: STR
67710: PUSH
67711: LD_STRING , 
67713: STR
67714: PUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: CALL_OW 250
67724: STR
67725: PUSH
67726: LD_STRING , 
67728: STR
67729: PUSH
67730: LD_VAR 0 3
67734: PPUSH
67735: CALL_OW 251
67739: STR
67740: PUSH
67741: LD_STRING , 
67743: STR
67744: PUSH
67745: LD_VAR 0 3
67749: PPUSH
67750: CALL_OW 254
67754: STR
67755: PUSH
67756: LD_STRING , 
67758: STR
67759: PUSH
67760: LD_VAR 0 3
67764: PPUSH
67765: LD_INT 1
67767: PPUSH
67768: CALL_OW 268
67772: STR
67773: PUSH
67774: LD_STRING , 
67776: STR
67777: PUSH
67778: LD_VAR 0 3
67782: PPUSH
67783: LD_INT 2
67785: PPUSH
67786: CALL_OW 268
67790: STR
67791: PUSH
67792: LD_STRING ],
67794: STR
67795: PPUSH
67796: CALL_OW 561
// end ;
67800: GO 67694
67802: POP
67803: POP
// AddToLog ( ]; ) ;
67804: LD_STRING ];
67806: PPUSH
67807: CALL_OW 561
// end ;
67811: LD_VAR 0 2
67815: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67816: LD_INT 0
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
67822: PPUSH
// if not area or not rate or not max then
67823: LD_VAR 0 1
67827: NOT
67828: PUSH
67829: LD_VAR 0 2
67833: NOT
67834: OR
67835: PUSH
67836: LD_VAR 0 4
67840: NOT
67841: OR
67842: IFFALSE 67846
// exit ;
67844: GO 68035
// while 1 do
67846: LD_INT 1
67848: IFFALSE 68035
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67850: LD_ADDR_VAR 0 9
67854: PUSH
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_INT 1
67862: PPUSH
67863: CALL_OW 287
67867: PUSH
67868: LD_INT 10
67870: MUL
67871: ST_TO_ADDR
// r := rate / 10 ;
67872: LD_ADDR_VAR 0 7
67876: PUSH
67877: LD_VAR 0 2
67881: PUSH
67882: LD_INT 10
67884: DIVREAL
67885: ST_TO_ADDR
// time := 1 1$00 ;
67886: LD_ADDR_VAR 0 8
67890: PUSH
67891: LD_INT 2100
67893: ST_TO_ADDR
// if amount < min then
67894: LD_VAR 0 9
67898: PUSH
67899: LD_VAR 0 3
67903: LESS
67904: IFFALSE 67922
// r := r * 2 else
67906: LD_ADDR_VAR 0 7
67910: PUSH
67911: LD_VAR 0 7
67915: PUSH
67916: LD_INT 2
67918: MUL
67919: ST_TO_ADDR
67920: GO 67948
// if amount > max then
67922: LD_VAR 0 9
67926: PUSH
67927: LD_VAR 0 4
67931: GREATER
67932: IFFALSE 67948
// r := r / 2 ;
67934: LD_ADDR_VAR 0 7
67938: PUSH
67939: LD_VAR 0 7
67943: PUSH
67944: LD_INT 2
67946: DIVREAL
67947: ST_TO_ADDR
// time := time / r ;
67948: LD_ADDR_VAR 0 8
67952: PUSH
67953: LD_VAR 0 8
67957: PUSH
67958: LD_VAR 0 7
67962: DIVREAL
67963: ST_TO_ADDR
// if time < 0 then
67964: LD_VAR 0 8
67968: PUSH
67969: LD_INT 0
67971: LESS
67972: IFFALSE 67989
// time := time * - 1 ;
67974: LD_ADDR_VAR 0 8
67978: PUSH
67979: LD_VAR 0 8
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: MUL
67988: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67989: LD_VAR 0 8
67993: PUSH
67994: LD_INT 35
67996: PPUSH
67997: LD_INT 875
67999: PPUSH
68000: CALL_OW 12
68004: PLUS
68005: PPUSH
68006: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68010: LD_INT 1
68012: PPUSH
68013: LD_INT 5
68015: PPUSH
68016: CALL_OW 12
68020: PPUSH
68021: LD_VAR 0 1
68025: PPUSH
68026: LD_INT 1
68028: PPUSH
68029: CALL_OW 55
// end ;
68033: GO 67846
// end ;
68035: LD_VAR 0 5
68039: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68040: LD_INT 0
68042: PPUSH
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
68047: PPUSH
68048: PPUSH
68049: PPUSH
// if not turrets or not factories then
68050: LD_VAR 0 1
68054: NOT
68055: PUSH
68056: LD_VAR 0 2
68060: NOT
68061: OR
68062: IFFALSE 68066
// exit ;
68064: GO 68373
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68066: LD_ADDR_VAR 0 10
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: LD_INT 6
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: LD_INT 5
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 24
68108: PUSH
68109: LD_INT 25
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 23
68118: PUSH
68119: LD_INT 27
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 42
68132: PUSH
68133: LD_INT 43
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 44
68142: PUSH
68143: LD_INT 46
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 45
68152: PUSH
68153: LD_INT 47
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: ST_TO_ADDR
// result := [ ] ;
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: EMPTY
68176: ST_TO_ADDR
// for i in turrets do
68177: LD_ADDR_VAR 0 4
68181: PUSH
68182: LD_VAR 0 1
68186: PUSH
68187: FOR_IN
68188: IFFALSE 68371
// begin nat := GetNation ( i ) ;
68190: LD_ADDR_VAR 0 7
68194: PUSH
68195: LD_VAR 0 4
68199: PPUSH
68200: CALL_OW 248
68204: ST_TO_ADDR
// weapon := 0 ;
68205: LD_ADDR_VAR 0 8
68209: PUSH
68210: LD_INT 0
68212: ST_TO_ADDR
// if not nat then
68213: LD_VAR 0 7
68217: NOT
68218: IFFALSE 68222
// continue ;
68220: GO 68187
// for j in list [ nat ] do
68222: LD_ADDR_VAR 0 5
68226: PUSH
68227: LD_VAR 0 10
68231: PUSH
68232: LD_VAR 0 7
68236: ARRAY
68237: PUSH
68238: FOR_IN
68239: IFFALSE 68280
// if GetBWeapon ( i ) = j [ 1 ] then
68241: LD_VAR 0 4
68245: PPUSH
68246: CALL_OW 269
68250: PUSH
68251: LD_VAR 0 5
68255: PUSH
68256: LD_INT 1
68258: ARRAY
68259: EQUAL
68260: IFFALSE 68278
// begin weapon := j [ 2 ] ;
68262: LD_ADDR_VAR 0 8
68266: PUSH
68267: LD_VAR 0 5
68271: PUSH
68272: LD_INT 2
68274: ARRAY
68275: ST_TO_ADDR
// break ;
68276: GO 68280
// end ;
68278: GO 68238
68280: POP
68281: POP
// if not weapon then
68282: LD_VAR 0 8
68286: NOT
68287: IFFALSE 68291
// continue ;
68289: GO 68187
// for k in factories do
68291: LD_ADDR_VAR 0 6
68295: PUSH
68296: LD_VAR 0 2
68300: PUSH
68301: FOR_IN
68302: IFFALSE 68367
// begin weapons := AvailableWeaponList ( k ) ;
68304: LD_ADDR_VAR 0 9
68308: PUSH
68309: LD_VAR 0 6
68313: PPUSH
68314: CALL_OW 478
68318: ST_TO_ADDR
// if not weapons then
68319: LD_VAR 0 9
68323: NOT
68324: IFFALSE 68328
// continue ;
68326: GO 68301
// if weapon in weapons then
68328: LD_VAR 0 8
68332: PUSH
68333: LD_VAR 0 9
68337: IN
68338: IFFALSE 68365
// begin result := [ i , weapon ] ;
68340: LD_ADDR_VAR 0 3
68344: PUSH
68345: LD_VAR 0 4
68349: PUSH
68350: LD_VAR 0 8
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// exit ;
68359: POP
68360: POP
68361: POP
68362: POP
68363: GO 68373
// end ; end ;
68365: GO 68301
68367: POP
68368: POP
// end ;
68369: GO 68187
68371: POP
68372: POP
// end ;
68373: LD_VAR 0 3
68377: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68378: LD_INT 0
68380: PPUSH
// if not side or side > 8 then
68381: LD_VAR 0 3
68385: NOT
68386: PUSH
68387: LD_VAR 0 3
68391: PUSH
68392: LD_INT 8
68394: GREATER
68395: OR
68396: IFFALSE 68400
// exit ;
68398: GO 68459
// if not range then
68400: LD_VAR 0 4
68404: NOT
68405: IFFALSE 68416
// range := - 12 ;
68407: LD_ADDR_VAR 0 4
68411: PUSH
68412: LD_INT 12
68414: NEG
68415: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68416: LD_VAR 0 1
68420: PPUSH
68421: LD_VAR 0 2
68425: PPUSH
68426: LD_VAR 0 3
68430: PPUSH
68431: LD_VAR 0 4
68435: PPUSH
68436: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68440: LD_VAR 0 1
68444: PPUSH
68445: LD_VAR 0 2
68449: PPUSH
68450: LD_VAR 0 3
68454: PPUSH
68455: CALL_OW 331
// end ;
68459: LD_VAR 0 5
68463: RET
// export function Video ( mode ) ; begin
68464: LD_INT 0
68466: PPUSH
// ingame_video = mode ;
68467: LD_ADDR_OWVAR 52
68471: PUSH
68472: LD_VAR 0 1
68476: ST_TO_ADDR
// interface_hidden = mode ;
68477: LD_ADDR_OWVAR 54
68481: PUSH
68482: LD_VAR 0 1
68486: ST_TO_ADDR
// end ;
68487: LD_VAR 0 2
68491: RET
// export function Join ( array , element ) ; begin
68492: LD_INT 0
68494: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68495: LD_ADDR_VAR 0 3
68499: PUSH
68500: LD_VAR 0 1
68504: PPUSH
68505: LD_VAR 0 1
68509: PUSH
68510: LD_INT 1
68512: PLUS
68513: PPUSH
68514: LD_VAR 0 2
68518: PPUSH
68519: CALL_OW 1
68523: ST_TO_ADDR
// end ;
68524: LD_VAR 0 3
68528: RET
// export function JoinUnion ( array , element ) ; begin
68529: LD_INT 0
68531: PPUSH
// result := array union element ;
68532: LD_ADDR_VAR 0 3
68536: PUSH
68537: LD_VAR 0 1
68541: PUSH
68542: LD_VAR 0 2
68546: UNION
68547: ST_TO_ADDR
// end ;
68548: LD_VAR 0 3
68552: RET
// export function GetBehemoths ( side ) ; begin
68553: LD_INT 0
68555: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68556: LD_ADDR_VAR 0 2
68560: PUSH
68561: LD_INT 22
68563: PUSH
68564: LD_VAR 0 1
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 31
68575: PUSH
68576: LD_INT 25
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PPUSH
68587: CALL_OW 69
68591: ST_TO_ADDR
// end ;
68592: LD_VAR 0 2
68596: RET
// export function Shuffle ( array ) ; var i , index ; begin
68597: LD_INT 0
68599: PPUSH
68600: PPUSH
68601: PPUSH
// result := [ ] ;
68602: LD_ADDR_VAR 0 2
68606: PUSH
68607: EMPTY
68608: ST_TO_ADDR
// if not array then
68609: LD_VAR 0 1
68613: NOT
68614: IFFALSE 68618
// exit ;
68616: GO 68717
// Randomize ;
68618: CALL_OW 10
// for i = array downto 1 do
68622: LD_ADDR_VAR 0 3
68626: PUSH
68627: DOUBLE
68628: LD_VAR 0 1
68632: INC
68633: ST_TO_ADDR
68634: LD_INT 1
68636: PUSH
68637: FOR_DOWNTO
68638: IFFALSE 68715
// begin index := rand ( 1 , array ) ;
68640: LD_ADDR_VAR 0 4
68644: PUSH
68645: LD_INT 1
68647: PPUSH
68648: LD_VAR 0 1
68652: PPUSH
68653: CALL_OW 12
68657: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68658: LD_ADDR_VAR 0 2
68662: PUSH
68663: LD_VAR 0 2
68667: PPUSH
68668: LD_VAR 0 2
68672: PUSH
68673: LD_INT 1
68675: PLUS
68676: PPUSH
68677: LD_VAR 0 1
68681: PUSH
68682: LD_VAR 0 4
68686: ARRAY
68687: PPUSH
68688: CALL_OW 2
68692: ST_TO_ADDR
// array := Delete ( array , index ) ;
68693: LD_ADDR_VAR 0 1
68697: PUSH
68698: LD_VAR 0 1
68702: PPUSH
68703: LD_VAR 0 4
68707: PPUSH
68708: CALL_OW 3
68712: ST_TO_ADDR
// end ;
68713: GO 68637
68715: POP
68716: POP
// end ;
68717: LD_VAR 0 2
68721: RET
// export function GetBaseMaterials ( base ) ; begin
68722: LD_INT 0
68724: PPUSH
// result := [ 0 , 0 , 0 ] ;
68725: LD_ADDR_VAR 0 2
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: ST_TO_ADDR
// if not base then
68744: LD_VAR 0 1
68748: NOT
68749: IFFALSE 68753
// exit ;
68751: GO 68802
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68753: LD_ADDR_VAR 0 2
68757: PUSH
68758: LD_VAR 0 1
68762: PPUSH
68763: LD_INT 1
68765: PPUSH
68766: CALL_OW 275
68770: PUSH
68771: LD_VAR 0 1
68775: PPUSH
68776: LD_INT 2
68778: PPUSH
68779: CALL_OW 275
68783: PUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: LD_INT 3
68791: PPUSH
68792: CALL_OW 275
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 2
68806: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
// result := array ;
68811: LD_ADDR_VAR 0 3
68815: PUSH
68816: LD_VAR 0 1
68820: ST_TO_ADDR
// if size >= result then
68821: LD_VAR 0 2
68825: PUSH
68826: LD_VAR 0 3
68830: GREATEREQUAL
68831: IFFALSE 68835
// exit ;
68833: GO 68885
// if size then
68835: LD_VAR 0 2
68839: IFFALSE 68885
// for i := array downto size do
68841: LD_ADDR_VAR 0 4
68845: PUSH
68846: DOUBLE
68847: LD_VAR 0 1
68851: INC
68852: ST_TO_ADDR
68853: LD_VAR 0 2
68857: PUSH
68858: FOR_DOWNTO
68859: IFFALSE 68883
// result := Delete ( result , result ) ;
68861: LD_ADDR_VAR 0 3
68865: PUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: LD_VAR 0 3
68875: PPUSH
68876: CALL_OW 3
68880: ST_TO_ADDR
68881: GO 68858
68883: POP
68884: POP
// end ;
68885: LD_VAR 0 3
68889: RET
// export function ComExit ( unit ) ; var tmp ; begin
68890: LD_INT 0
68892: PPUSH
68893: PPUSH
// if not IsInUnit ( unit ) then
68894: LD_VAR 0 1
68898: PPUSH
68899: CALL_OW 310
68903: NOT
68904: IFFALSE 68908
// exit ;
68906: GO 68968
// tmp := IsInUnit ( unit ) ;
68908: LD_ADDR_VAR 0 3
68912: PUSH
68913: LD_VAR 0 1
68917: PPUSH
68918: CALL_OW 310
68922: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68923: LD_VAR 0 3
68927: PPUSH
68928: CALL_OW 247
68932: PUSH
68933: LD_INT 2
68935: EQUAL
68936: IFFALSE 68949
// ComExitVehicle ( unit ) else
68938: LD_VAR 0 1
68942: PPUSH
68943: CALL_OW 121
68947: GO 68958
// ComExitBuilding ( unit ) ;
68949: LD_VAR 0 1
68953: PPUSH
68954: CALL_OW 122
// result := tmp ;
68958: LD_ADDR_VAR 0 2
68962: PUSH
68963: LD_VAR 0 3
68967: ST_TO_ADDR
// end ;
68968: LD_VAR 0 2
68972: RET
// export function ComExitAll ( units ) ; var i ; begin
68973: LD_INT 0
68975: PPUSH
68976: PPUSH
// if not units then
68977: LD_VAR 0 1
68981: NOT
68982: IFFALSE 68986
// exit ;
68984: GO 69012
// for i in units do
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_VAR 0 1
68995: PUSH
68996: FOR_IN
68997: IFFALSE 69010
// ComExit ( i ) ;
68999: LD_VAR 0 3
69003: PPUSH
69004: CALL 68890 0 1
69008: GO 68996
69010: POP
69011: POP
// end ;
69012: LD_VAR 0 2
69016: RET
// export function ResetHc ; begin
69017: LD_INT 0
69019: PPUSH
// InitHc ;
69020: CALL_OW 19
// hc_importance := 0 ;
69024: LD_ADDR_OWVAR 32
69028: PUSH
69029: LD_INT 0
69031: ST_TO_ADDR
// end ;
69032: LD_VAR 0 1
69036: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69037: LD_INT 0
69039: PPUSH
69040: PPUSH
69041: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69042: LD_ADDR_VAR 0 6
69046: PUSH
69047: LD_VAR 0 1
69051: PUSH
69052: LD_VAR 0 3
69056: PLUS
69057: PUSH
69058: LD_INT 2
69060: DIV
69061: ST_TO_ADDR
// if _x < 0 then
69062: LD_VAR 0 6
69066: PUSH
69067: LD_INT 0
69069: LESS
69070: IFFALSE 69087
// _x := _x * - 1 ;
69072: LD_ADDR_VAR 0 6
69076: PUSH
69077: LD_VAR 0 6
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: MUL
69086: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69087: LD_ADDR_VAR 0 7
69091: PUSH
69092: LD_VAR 0 2
69096: PUSH
69097: LD_VAR 0 4
69101: PLUS
69102: PUSH
69103: LD_INT 2
69105: DIV
69106: ST_TO_ADDR
// if _y < 0 then
69107: LD_VAR 0 7
69111: PUSH
69112: LD_INT 0
69114: LESS
69115: IFFALSE 69132
// _y := _y * - 1 ;
69117: LD_ADDR_VAR 0 7
69121: PUSH
69122: LD_VAR 0 7
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: MUL
69131: ST_TO_ADDR
// result := [ _x , _y ] ;
69132: LD_ADDR_VAR 0 5
69136: PUSH
69137: LD_VAR 0 6
69141: PUSH
69142: LD_VAR 0 7
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: ST_TO_ADDR
// end ;
69151: LD_VAR 0 5
69155: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69156: LD_INT 0
69158: PPUSH
69159: PPUSH
69160: PPUSH
69161: PPUSH
// task := GetTaskList ( unit ) ;
69162: LD_ADDR_VAR 0 7
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 437
69176: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69177: LD_VAR 0 7
69181: NOT
69182: PUSH
69183: LD_VAR 0 1
69187: PPUSH
69188: LD_VAR 0 2
69192: PPUSH
69193: CALL_OW 308
69197: NOT
69198: AND
69199: IFFALSE 69203
// exit ;
69201: GO 69321
// if IsInArea ( unit , area ) then
69203: LD_VAR 0 1
69207: PPUSH
69208: LD_VAR 0 2
69212: PPUSH
69213: CALL_OW 308
69217: IFFALSE 69235
// begin ComMoveToArea ( unit , goAway ) ;
69219: LD_VAR 0 1
69223: PPUSH
69224: LD_VAR 0 3
69228: PPUSH
69229: CALL_OW 113
// exit ;
69233: GO 69321
// end ; if task [ 1 ] [ 1 ] <> M then
69235: LD_VAR 0 7
69239: PUSH
69240: LD_INT 1
69242: ARRAY
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PUSH
69248: LD_STRING M
69250: NONEQUAL
69251: IFFALSE 69255
// exit ;
69253: GO 69321
// x := task [ 1 ] [ 2 ] ;
69255: LD_ADDR_VAR 0 5
69259: PUSH
69260: LD_VAR 0 7
69264: PUSH
69265: LD_INT 1
69267: ARRAY
69268: PUSH
69269: LD_INT 2
69271: ARRAY
69272: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69273: LD_ADDR_VAR 0 6
69277: PUSH
69278: LD_VAR 0 7
69282: PUSH
69283: LD_INT 1
69285: ARRAY
69286: PUSH
69287: LD_INT 3
69289: ARRAY
69290: ST_TO_ADDR
// if InArea ( x , y , area ) then
69291: LD_VAR 0 5
69295: PPUSH
69296: LD_VAR 0 6
69300: PPUSH
69301: LD_VAR 0 2
69305: PPUSH
69306: CALL_OW 309
69310: IFFALSE 69321
// ComStop ( unit ) ;
69312: LD_VAR 0 1
69316: PPUSH
69317: CALL_OW 141
// end ;
69321: LD_VAR 0 4
69325: RET
// export function Abs ( value ) ; begin
69326: LD_INT 0
69328: PPUSH
// result := value ;
69329: LD_ADDR_VAR 0 2
69333: PUSH
69334: LD_VAR 0 1
69338: ST_TO_ADDR
// if value < 0 then
69339: LD_VAR 0 1
69343: PUSH
69344: LD_INT 0
69346: LESS
69347: IFFALSE 69364
// result := value * - 1 ;
69349: LD_ADDR_VAR 0 2
69353: PUSH
69354: LD_VAR 0 1
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: MUL
69363: ST_TO_ADDR
// end ;
69364: LD_VAR 0 2
69368: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
69378: PPUSH
// if not unit or not building then
69379: LD_VAR 0 1
69383: NOT
69384: PUSH
69385: LD_VAR 0 2
69389: NOT
69390: OR
69391: IFFALSE 69395
// exit ;
69393: GO 69621
// x := GetX ( building ) ;
69395: LD_ADDR_VAR 0 4
69399: PUSH
69400: LD_VAR 0 2
69404: PPUSH
69405: CALL_OW 250
69409: ST_TO_ADDR
// y := GetY ( building ) ;
69410: LD_ADDR_VAR 0 6
69414: PUSH
69415: LD_VAR 0 2
69419: PPUSH
69420: CALL_OW 251
69424: ST_TO_ADDR
// d := GetDir ( building ) ;
69425: LD_ADDR_VAR 0 8
69429: PUSH
69430: LD_VAR 0 2
69434: PPUSH
69435: CALL_OW 254
69439: ST_TO_ADDR
// r := 4 ;
69440: LD_ADDR_VAR 0 9
69444: PUSH
69445: LD_INT 4
69447: ST_TO_ADDR
// for i := 1 to 5 do
69448: LD_ADDR_VAR 0 10
69452: PUSH
69453: DOUBLE
69454: LD_INT 1
69456: DEC
69457: ST_TO_ADDR
69458: LD_INT 5
69460: PUSH
69461: FOR_TO
69462: IFFALSE 69619
// begin _x := ShiftX ( x , d , r + i ) ;
69464: LD_ADDR_VAR 0 5
69468: PUSH
69469: LD_VAR 0 4
69473: PPUSH
69474: LD_VAR 0 8
69478: PPUSH
69479: LD_VAR 0 9
69483: PUSH
69484: LD_VAR 0 10
69488: PLUS
69489: PPUSH
69490: CALL_OW 272
69494: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69495: LD_ADDR_VAR 0 7
69499: PUSH
69500: LD_VAR 0 6
69504: PPUSH
69505: LD_VAR 0 8
69509: PPUSH
69510: LD_VAR 0 9
69514: PUSH
69515: LD_VAR 0 10
69519: PLUS
69520: PPUSH
69521: CALL_OW 273
69525: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69526: LD_VAR 0 5
69530: PPUSH
69531: LD_VAR 0 7
69535: PPUSH
69536: CALL_OW 488
69540: PUSH
69541: LD_VAR 0 5
69545: PPUSH
69546: LD_VAR 0 7
69550: PPUSH
69551: CALL_OW 428
69555: PPUSH
69556: CALL_OW 247
69560: PUSH
69561: LD_INT 3
69563: PUSH
69564: LD_INT 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: IN
69571: NOT
69572: AND
69573: IFFALSE 69617
// begin ComMoveXY ( unit , _x , _y ) ;
69575: LD_VAR 0 1
69579: PPUSH
69580: LD_VAR 0 5
69584: PPUSH
69585: LD_VAR 0 7
69589: PPUSH
69590: CALL_OW 111
// result := [ _x , _y ] ;
69594: LD_ADDR_VAR 0 3
69598: PUSH
69599: LD_VAR 0 5
69603: PUSH
69604: LD_VAR 0 7
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: ST_TO_ADDR
// exit ;
69613: POP
69614: POP
69615: GO 69621
// end ; end ;
69617: GO 69461
69619: POP
69620: POP
// end ;
69621: LD_VAR 0 3
69625: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69626: LD_INT 0
69628: PPUSH
69629: PPUSH
69630: PPUSH
// result := 0 ;
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_INT 0
69638: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69639: LD_VAR 0 1
69643: PUSH
69644: LD_INT 0
69646: LESS
69647: PUSH
69648: LD_VAR 0 1
69652: PUSH
69653: LD_INT 8
69655: GREATER
69656: OR
69657: PUSH
69658: LD_VAR 0 2
69662: PUSH
69663: LD_INT 0
69665: LESS
69666: OR
69667: PUSH
69668: LD_VAR 0 2
69672: PUSH
69673: LD_INT 8
69675: GREATER
69676: OR
69677: IFFALSE 69681
// exit ;
69679: GO 69756
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69681: LD_ADDR_VAR 0 4
69685: PUSH
69686: LD_INT 22
69688: PUSH
69689: LD_VAR 0 2
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PPUSH
69698: CALL_OW 69
69702: PUSH
69703: FOR_IN
69704: IFFALSE 69754
// begin un := UnitShoot ( i ) ;
69706: LD_ADDR_VAR 0 5
69710: PUSH
69711: LD_VAR 0 4
69715: PPUSH
69716: CALL_OW 504
69720: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69721: LD_VAR 0 5
69725: PPUSH
69726: CALL_OW 255
69730: PUSH
69731: LD_VAR 0 1
69735: EQUAL
69736: IFFALSE 69752
// begin result := un ;
69738: LD_ADDR_VAR 0 3
69742: PUSH
69743: LD_VAR 0 5
69747: ST_TO_ADDR
// exit ;
69748: POP
69749: POP
69750: GO 69756
// end ; end ;
69752: GO 69703
69754: POP
69755: POP
// end ;
69756: LD_VAR 0 3
69760: RET
// export function GetCargoBay ( units ) ; begin
69761: LD_INT 0
69763: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69764: LD_ADDR_VAR 0 2
69768: PUSH
69769: LD_VAR 0 1
69773: PPUSH
69774: LD_INT 2
69776: PUSH
69777: LD_INT 34
69779: PUSH
69780: LD_INT 12
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 34
69789: PUSH
69790: LD_INT 51
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 34
69799: PUSH
69800: LD_INT 32
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 34
69809: PUSH
69810: LD_INT 89
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: PPUSH
69824: CALL_OW 72
69828: ST_TO_ADDR
// end ;
69829: LD_VAR 0 2
69833: RET
// export function Negate ( value ) ; begin
69834: LD_INT 0
69836: PPUSH
// result := not value ;
69837: LD_ADDR_VAR 0 2
69841: PUSH
69842: LD_VAR 0 1
69846: NOT
69847: ST_TO_ADDR
// end ;
69848: LD_VAR 0 2
69852: RET
// export function Inc ( value ) ; begin
69853: LD_INT 0
69855: PPUSH
// result := value + 1 ;
69856: LD_ADDR_VAR 0 2
69860: PUSH
69861: LD_VAR 0 1
69865: PUSH
69866: LD_INT 1
69868: PLUS
69869: ST_TO_ADDR
// end ;
69870: LD_VAR 0 2
69874: RET
// export function Dec ( value ) ; begin
69875: LD_INT 0
69877: PPUSH
// result := value - 1 ;
69878: LD_ADDR_VAR 0 2
69882: PUSH
69883: LD_VAR 0 1
69887: PUSH
69888: LD_INT 1
69890: MINUS
69891: ST_TO_ADDR
// end ;
69892: LD_VAR 0 2
69896: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69897: LD_INT 0
69899: PPUSH
69900: PPUSH
69901: PPUSH
69902: PPUSH
69903: PPUSH
69904: PPUSH
69905: PPUSH
69906: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69907: LD_VAR 0 1
69911: PPUSH
69912: LD_VAR 0 2
69916: PPUSH
69917: CALL_OW 488
69921: NOT
69922: PUSH
69923: LD_VAR 0 3
69927: PPUSH
69928: LD_VAR 0 4
69932: PPUSH
69933: CALL_OW 488
69937: NOT
69938: OR
69939: IFFALSE 69952
// begin result := - 1 ;
69941: LD_ADDR_VAR 0 5
69945: PUSH
69946: LD_INT 1
69948: NEG
69949: ST_TO_ADDR
// exit ;
69950: GO 70187
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69952: LD_ADDR_VAR 0 12
69956: PUSH
69957: LD_VAR 0 1
69961: PPUSH
69962: LD_VAR 0 2
69966: PPUSH
69967: LD_VAR 0 3
69971: PPUSH
69972: LD_VAR 0 4
69976: PPUSH
69977: CALL 69037 0 4
69981: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69982: LD_ADDR_VAR 0 11
69986: PUSH
69987: LD_VAR 0 1
69991: PPUSH
69992: LD_VAR 0 2
69996: PPUSH
69997: LD_VAR 0 12
70001: PUSH
70002: LD_INT 1
70004: ARRAY
70005: PPUSH
70006: LD_VAR 0 12
70010: PUSH
70011: LD_INT 2
70013: ARRAY
70014: PPUSH
70015: CALL_OW 298
70019: ST_TO_ADDR
// distance := 9999 ;
70020: LD_ADDR_VAR 0 10
70024: PUSH
70025: LD_INT 9999
70027: ST_TO_ADDR
// for i := 0 to 5 do
70028: LD_ADDR_VAR 0 6
70032: PUSH
70033: DOUBLE
70034: LD_INT 0
70036: DEC
70037: ST_TO_ADDR
70038: LD_INT 5
70040: PUSH
70041: FOR_TO
70042: IFFALSE 70185
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70044: LD_ADDR_VAR 0 7
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: LD_VAR 0 6
70058: PPUSH
70059: LD_VAR 0 11
70063: PPUSH
70064: CALL_OW 272
70068: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70069: LD_ADDR_VAR 0 8
70073: PUSH
70074: LD_VAR 0 2
70078: PPUSH
70079: LD_VAR 0 6
70083: PPUSH
70084: LD_VAR 0 11
70088: PPUSH
70089: CALL_OW 273
70093: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70094: LD_VAR 0 7
70098: PPUSH
70099: LD_VAR 0 8
70103: PPUSH
70104: CALL_OW 488
70108: NOT
70109: IFFALSE 70113
// continue ;
70111: GO 70041
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70113: LD_ADDR_VAR 0 9
70117: PUSH
70118: LD_VAR 0 12
70122: PUSH
70123: LD_INT 1
70125: ARRAY
70126: PPUSH
70127: LD_VAR 0 12
70131: PUSH
70132: LD_INT 2
70134: ARRAY
70135: PPUSH
70136: LD_VAR 0 7
70140: PPUSH
70141: LD_VAR 0 8
70145: PPUSH
70146: CALL_OW 298
70150: ST_TO_ADDR
// if tmp < distance then
70151: LD_VAR 0 9
70155: PUSH
70156: LD_VAR 0 10
70160: LESS
70161: IFFALSE 70183
// begin result := i ;
70163: LD_ADDR_VAR 0 5
70167: PUSH
70168: LD_VAR 0 6
70172: ST_TO_ADDR
// distance := tmp ;
70173: LD_ADDR_VAR 0 10
70177: PUSH
70178: LD_VAR 0 9
70182: ST_TO_ADDR
// end ; end ;
70183: GO 70041
70185: POP
70186: POP
// end ;
70187: LD_VAR 0 5
70191: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70192: LD_INT 0
70194: PPUSH
70195: PPUSH
// if not driver or not IsInUnit ( driver ) then
70196: LD_VAR 0 1
70200: NOT
70201: PUSH
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL_OW 310
70211: NOT
70212: OR
70213: IFFALSE 70217
// exit ;
70215: GO 70307
// vehicle := IsInUnit ( driver ) ;
70217: LD_ADDR_VAR 0 3
70221: PUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: CALL_OW 310
70231: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70232: LD_VAR 0 1
70236: PPUSH
70237: LD_STRING \
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: PUSH
70267: LD_STRING E
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_VAR 0 3
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PPUSH
70303: CALL_OW 446
// end ;
70307: LD_VAR 0 2
70311: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70312: LD_INT 0
70314: PPUSH
70315: PPUSH
// if not driver or not IsInUnit ( driver ) then
70316: LD_VAR 0 1
70320: NOT
70321: PUSH
70322: LD_VAR 0 1
70326: PPUSH
70327: CALL_OW 310
70331: NOT
70332: OR
70333: IFFALSE 70337
// exit ;
70335: GO 70427
// vehicle := IsInUnit ( driver ) ;
70337: LD_ADDR_VAR 0 3
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: CALL_OW 310
70351: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_STRING \
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: PUSH
70387: LD_STRING E
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_VAR 0 3
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PPUSH
70423: CALL_OW 447
// end ;
70427: LD_VAR 0 2
70431: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70432: LD_INT 0
70434: PPUSH
70435: PPUSH
70436: PPUSH
// tmp := [ ] ;
70437: LD_ADDR_VAR 0 5
70441: PUSH
70442: EMPTY
70443: ST_TO_ADDR
// for i in units do
70444: LD_ADDR_VAR 0 4
70448: PUSH
70449: LD_VAR 0 1
70453: PUSH
70454: FOR_IN
70455: IFFALSE 70493
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70457: LD_ADDR_VAR 0 5
70461: PUSH
70462: LD_VAR 0 5
70466: PPUSH
70467: LD_VAR 0 5
70471: PUSH
70472: LD_INT 1
70474: PLUS
70475: PPUSH
70476: LD_VAR 0 4
70480: PPUSH
70481: CALL_OW 256
70485: PPUSH
70486: CALL_OW 2
70490: ST_TO_ADDR
70491: GO 70454
70493: POP
70494: POP
// if not tmp then
70495: LD_VAR 0 5
70499: NOT
70500: IFFALSE 70504
// exit ;
70502: GO 70552
// if asc then
70504: LD_VAR 0 2
70508: IFFALSE 70532
// result := SortListByListAsc ( units , tmp ) else
70510: LD_ADDR_VAR 0 3
70514: PUSH
70515: LD_VAR 0 1
70519: PPUSH
70520: LD_VAR 0 5
70524: PPUSH
70525: CALL_OW 76
70529: ST_TO_ADDR
70530: GO 70552
// result := SortListByListDesc ( units , tmp ) ;
70532: LD_ADDR_VAR 0 3
70536: PUSH
70537: LD_VAR 0 1
70541: PPUSH
70542: LD_VAR 0 5
70546: PPUSH
70547: CALL_OW 77
70551: ST_TO_ADDR
// end ;
70552: LD_VAR 0 3
70556: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70557: LD_INT 0
70559: PPUSH
70560: PPUSH
// task := GetTaskList ( mech ) ;
70561: LD_ADDR_VAR 0 4
70565: PUSH
70566: LD_VAR 0 1
70570: PPUSH
70571: CALL_OW 437
70575: ST_TO_ADDR
// if not task then
70576: LD_VAR 0 4
70580: NOT
70581: IFFALSE 70585
// exit ;
70583: GO 70627
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70585: LD_ADDR_VAR 0 3
70589: PUSH
70590: LD_VAR 0 4
70594: PUSH
70595: LD_INT 1
70597: ARRAY
70598: PUSH
70599: LD_INT 1
70601: ARRAY
70602: PUSH
70603: LD_STRING r
70605: EQUAL
70606: PUSH
70607: LD_VAR 0 4
70611: PUSH
70612: LD_INT 1
70614: ARRAY
70615: PUSH
70616: LD_INT 4
70618: ARRAY
70619: PUSH
70620: LD_VAR 0 2
70624: EQUAL
70625: AND
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 3
70631: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70632: LD_INT 0
70634: PPUSH
// SetDir ( unit , d ) ;
70635: LD_VAR 0 1
70639: PPUSH
70640: LD_VAR 0 4
70644: PPUSH
70645: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70649: LD_VAR 0 1
70653: PPUSH
70654: LD_VAR 0 2
70658: PPUSH
70659: LD_VAR 0 3
70663: PPUSH
70664: LD_VAR 0 5
70668: PPUSH
70669: CALL_OW 48
// end ;
70673: LD_VAR 0 6
70677: RET
// export function ToNaturalNumber ( number ) ; begin
70678: LD_INT 0
70680: PPUSH
// result := number div 1 ;
70681: LD_ADDR_VAR 0 2
70685: PUSH
70686: LD_VAR 0 1
70690: PUSH
70691: LD_INT 1
70693: DIV
70694: ST_TO_ADDR
// if number < 0 then
70695: LD_VAR 0 1
70699: PUSH
70700: LD_INT 0
70702: LESS
70703: IFFALSE 70713
// result := 0 ;
70705: LD_ADDR_VAR 0 2
70709: PUSH
70710: LD_INT 0
70712: ST_TO_ADDR
// end ;
70713: LD_VAR 0 2
70717: RET
// export function SortByClass ( units , class ) ; var un ; begin
70718: LD_INT 0
70720: PPUSH
70721: PPUSH
// if not units or not class then
70722: LD_VAR 0 1
70726: NOT
70727: PUSH
70728: LD_VAR 0 2
70732: NOT
70733: OR
70734: IFFALSE 70738
// exit ;
70736: GO 70833
// result := [ ] ;
70738: LD_ADDR_VAR 0 3
70742: PUSH
70743: EMPTY
70744: ST_TO_ADDR
// for un in units do
70745: LD_ADDR_VAR 0 4
70749: PUSH
70750: LD_VAR 0 1
70754: PUSH
70755: FOR_IN
70756: IFFALSE 70831
// if GetClass ( un ) = class then
70758: LD_VAR 0 4
70762: PPUSH
70763: CALL_OW 257
70767: PUSH
70768: LD_VAR 0 2
70772: EQUAL
70773: IFFALSE 70800
// result := Insert ( result , 1 , un ) else
70775: LD_ADDR_VAR 0 3
70779: PUSH
70780: LD_VAR 0 3
70784: PPUSH
70785: LD_INT 1
70787: PPUSH
70788: LD_VAR 0 4
70792: PPUSH
70793: CALL_OW 2
70797: ST_TO_ADDR
70798: GO 70829
// result := Replace ( result , result + 1 , un ) ;
70800: LD_ADDR_VAR 0 3
70804: PUSH
70805: LD_VAR 0 3
70809: PPUSH
70810: LD_VAR 0 3
70814: PUSH
70815: LD_INT 1
70817: PLUS
70818: PPUSH
70819: LD_VAR 0 4
70823: PPUSH
70824: CALL_OW 1
70828: ST_TO_ADDR
70829: GO 70755
70831: POP
70832: POP
// end ;
70833: LD_VAR 0 3
70837: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70838: LD_INT 0
70840: PPUSH
70841: PPUSH
70842: PPUSH
70843: PPUSH
70844: PPUSH
70845: PPUSH
70846: PPUSH
// result := [ ] ;
70847: LD_ADDR_VAR 0 4
70851: PUSH
70852: EMPTY
70853: ST_TO_ADDR
// if x - r < 0 then
70854: LD_VAR 0 1
70858: PUSH
70859: LD_VAR 0 3
70863: MINUS
70864: PUSH
70865: LD_INT 0
70867: LESS
70868: IFFALSE 70880
// min_x := 0 else
70870: LD_ADDR_VAR 0 8
70874: PUSH
70875: LD_INT 0
70877: ST_TO_ADDR
70878: GO 70896
// min_x := x - r ;
70880: LD_ADDR_VAR 0 8
70884: PUSH
70885: LD_VAR 0 1
70889: PUSH
70890: LD_VAR 0 3
70894: MINUS
70895: ST_TO_ADDR
// if y - r < 0 then
70896: LD_VAR 0 2
70900: PUSH
70901: LD_VAR 0 3
70905: MINUS
70906: PUSH
70907: LD_INT 0
70909: LESS
70910: IFFALSE 70922
// min_y := 0 else
70912: LD_ADDR_VAR 0 7
70916: PUSH
70917: LD_INT 0
70919: ST_TO_ADDR
70920: GO 70938
// min_y := y - r ;
70922: LD_ADDR_VAR 0 7
70926: PUSH
70927: LD_VAR 0 2
70931: PUSH
70932: LD_VAR 0 3
70936: MINUS
70937: ST_TO_ADDR
// max_x := x + r ;
70938: LD_ADDR_VAR 0 9
70942: PUSH
70943: LD_VAR 0 1
70947: PUSH
70948: LD_VAR 0 3
70952: PLUS
70953: ST_TO_ADDR
// max_y := y + r ;
70954: LD_ADDR_VAR 0 10
70958: PUSH
70959: LD_VAR 0 2
70963: PUSH
70964: LD_VAR 0 3
70968: PLUS
70969: ST_TO_ADDR
// for _x = min_x to max_x do
70970: LD_ADDR_VAR 0 5
70974: PUSH
70975: DOUBLE
70976: LD_VAR 0 8
70980: DEC
70981: ST_TO_ADDR
70982: LD_VAR 0 9
70986: PUSH
70987: FOR_TO
70988: IFFALSE 71089
// for _y = min_y to max_y do
70990: LD_ADDR_VAR 0 6
70994: PUSH
70995: DOUBLE
70996: LD_VAR 0 7
71000: DEC
71001: ST_TO_ADDR
71002: LD_VAR 0 10
71006: PUSH
71007: FOR_TO
71008: IFFALSE 71085
// begin if not ValidHex ( _x , _y ) then
71010: LD_VAR 0 5
71014: PPUSH
71015: LD_VAR 0 6
71019: PPUSH
71020: CALL_OW 488
71024: NOT
71025: IFFALSE 71029
// continue ;
71027: GO 71007
// if GetResourceTypeXY ( _x , _y ) then
71029: LD_VAR 0 5
71033: PPUSH
71034: LD_VAR 0 6
71038: PPUSH
71039: CALL_OW 283
71043: IFFALSE 71083
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71045: LD_ADDR_VAR 0 4
71049: PUSH
71050: LD_VAR 0 4
71054: PPUSH
71055: LD_VAR 0 4
71059: PUSH
71060: LD_INT 1
71062: PLUS
71063: PPUSH
71064: LD_VAR 0 5
71068: PUSH
71069: LD_VAR 0 6
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PPUSH
71078: CALL_OW 1
71082: ST_TO_ADDR
// end ;
71083: GO 71007
71085: POP
71086: POP
71087: GO 70987
71089: POP
71090: POP
// end ;
71091: LD_VAR 0 4
71095: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71096: LD_INT 0
71098: PPUSH
71099: PPUSH
71100: PPUSH
71101: PPUSH
71102: PPUSH
71103: PPUSH
71104: PPUSH
71105: PPUSH
// if not units then
71106: LD_VAR 0 1
71110: NOT
71111: IFFALSE 71115
// exit ;
71113: GO 71639
// result := UnitFilter ( units , [ f_ok ] ) ;
71115: LD_ADDR_VAR 0 3
71119: PUSH
71120: LD_VAR 0 1
71124: PPUSH
71125: LD_INT 50
71127: PUSH
71128: EMPTY
71129: LIST
71130: PPUSH
71131: CALL_OW 72
71135: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71136: LD_ADDR_VAR 0 8
71140: PUSH
71141: LD_VAR 0 1
71145: PUSH
71146: LD_INT 1
71148: ARRAY
71149: PPUSH
71150: CALL_OW 255
71154: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71155: LD_ADDR_VAR 0 10
71159: PUSH
71160: LD_INT 29
71162: PUSH
71163: LD_INT 91
71165: PUSH
71166: LD_INT 49
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: ST_TO_ADDR
// if not result then
71174: LD_VAR 0 3
71178: NOT
71179: IFFALSE 71183
// exit ;
71181: GO 71639
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71183: LD_ADDR_VAR 0 5
71187: PUSH
71188: LD_INT 81
71190: PUSH
71191: LD_VAR 0 8
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PPUSH
71200: CALL_OW 69
71204: ST_TO_ADDR
// for i in result do
71205: LD_ADDR_VAR 0 4
71209: PUSH
71210: LD_VAR 0 3
71214: PUSH
71215: FOR_IN
71216: IFFALSE 71637
// begin tag := GetTag ( i ) + 1 ;
71218: LD_ADDR_VAR 0 9
71222: PUSH
71223: LD_VAR 0 4
71227: PPUSH
71228: CALL_OW 110
71232: PUSH
71233: LD_INT 1
71235: PLUS
71236: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71237: LD_ADDR_VAR 0 7
71241: PUSH
71242: LD_VAR 0 4
71246: PPUSH
71247: CALL_OW 250
71251: PPUSH
71252: LD_VAR 0 4
71256: PPUSH
71257: CALL_OW 251
71261: PPUSH
71262: LD_INT 6
71264: PPUSH
71265: CALL 70838 0 3
71269: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71270: LD_VAR 0 4
71274: PPUSH
71275: CALL_OW 247
71279: PUSH
71280: LD_INT 2
71282: EQUAL
71283: PUSH
71284: LD_VAR 0 7
71288: AND
71289: PUSH
71290: LD_VAR 0 4
71294: PPUSH
71295: CALL_OW 264
71299: PUSH
71300: LD_VAR 0 10
71304: IN
71305: NOT
71306: AND
71307: IFFALSE 71346
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 7
71318: PUSH
71319: LD_INT 1
71321: ARRAY
71322: PUSH
71323: LD_INT 1
71325: ARRAY
71326: PPUSH
71327: LD_VAR 0 7
71331: PUSH
71332: LD_INT 1
71334: ARRAY
71335: PUSH
71336: LD_INT 2
71338: ARRAY
71339: PPUSH
71340: CALL_OW 116
71344: GO 71635
// if path > tag then
71346: LD_VAR 0 2
71350: PUSH
71351: LD_VAR 0 9
71355: GREATER
71356: IFFALSE 71564
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71358: LD_ADDR_VAR 0 6
71362: PUSH
71363: LD_VAR 0 5
71367: PPUSH
71368: LD_INT 91
71370: PUSH
71371: LD_VAR 0 4
71375: PUSH
71376: LD_INT 8
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: LIST
71383: PPUSH
71384: CALL_OW 72
71388: ST_TO_ADDR
// if nearEnemy then
71389: LD_VAR 0 6
71393: IFFALSE 71462
// begin if GetWeapon ( i ) = ru_time_lapser then
71395: LD_VAR 0 4
71399: PPUSH
71400: CALL_OW 264
71404: PUSH
71405: LD_INT 49
71407: EQUAL
71408: IFFALSE 71436
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71410: LD_VAR 0 4
71414: PPUSH
71415: LD_VAR 0 6
71419: PPUSH
71420: LD_VAR 0 4
71424: PPUSH
71425: CALL_OW 74
71429: PPUSH
71430: CALL_OW 112
71434: GO 71460
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71436: LD_VAR 0 4
71440: PPUSH
71441: LD_VAR 0 6
71445: PPUSH
71446: LD_VAR 0 4
71450: PPUSH
71451: CALL_OW 74
71455: PPUSH
71456: CALL 72564 0 2
// end else
71460: GO 71562
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71462: LD_VAR 0 4
71466: PPUSH
71467: LD_VAR 0 2
71471: PUSH
71472: LD_VAR 0 9
71476: ARRAY
71477: PUSH
71478: LD_INT 1
71480: ARRAY
71481: PPUSH
71482: LD_VAR 0 2
71486: PUSH
71487: LD_VAR 0 9
71491: ARRAY
71492: PUSH
71493: LD_INT 2
71495: ARRAY
71496: PPUSH
71497: CALL_OW 297
71501: PUSH
71502: LD_INT 6
71504: GREATER
71505: IFFALSE 71548
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71507: LD_VAR 0 4
71511: PPUSH
71512: LD_VAR 0 2
71516: PUSH
71517: LD_VAR 0 9
71521: ARRAY
71522: PUSH
71523: LD_INT 1
71525: ARRAY
71526: PPUSH
71527: LD_VAR 0 2
71531: PUSH
71532: LD_VAR 0 9
71536: ARRAY
71537: PUSH
71538: LD_INT 2
71540: ARRAY
71541: PPUSH
71542: CALL_OW 114
71546: GO 71562
// SetTag ( i , tag ) ;
71548: LD_VAR 0 4
71552: PPUSH
71553: LD_VAR 0 9
71557: PPUSH
71558: CALL_OW 109
// end else
71562: GO 71635
// if enemy then
71564: LD_VAR 0 5
71568: IFFALSE 71635
// begin if GetWeapon ( i ) = ru_time_lapser then
71570: LD_VAR 0 4
71574: PPUSH
71575: CALL_OW 264
71579: PUSH
71580: LD_INT 49
71582: EQUAL
71583: IFFALSE 71611
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71585: LD_VAR 0 4
71589: PPUSH
71590: LD_VAR 0 5
71594: PPUSH
71595: LD_VAR 0 4
71599: PPUSH
71600: CALL_OW 74
71604: PPUSH
71605: CALL_OW 112
71609: GO 71635
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71611: LD_VAR 0 4
71615: PPUSH
71616: LD_VAR 0 5
71620: PPUSH
71621: LD_VAR 0 4
71625: PPUSH
71626: CALL_OW 74
71630: PPUSH
71631: CALL 72564 0 2
// end ; end ;
71635: GO 71215
71637: POP
71638: POP
// end ;
71639: LD_VAR 0 3
71643: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71644: LD_INT 0
71646: PPUSH
71647: PPUSH
71648: PPUSH
// if not unit or IsInUnit ( unit ) then
71649: LD_VAR 0 1
71653: NOT
71654: PUSH
71655: LD_VAR 0 1
71659: PPUSH
71660: CALL_OW 310
71664: OR
71665: IFFALSE 71669
// exit ;
71667: GO 71760
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71669: LD_ADDR_VAR 0 4
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: CALL_OW 250
71683: PPUSH
71684: LD_VAR 0 2
71688: PPUSH
71689: LD_INT 1
71691: PPUSH
71692: CALL_OW 272
71696: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71697: LD_ADDR_VAR 0 5
71701: PUSH
71702: LD_VAR 0 1
71706: PPUSH
71707: CALL_OW 251
71711: PPUSH
71712: LD_VAR 0 2
71716: PPUSH
71717: LD_INT 1
71719: PPUSH
71720: CALL_OW 273
71724: ST_TO_ADDR
// if ValidHex ( x , y ) then
71725: LD_VAR 0 4
71729: PPUSH
71730: LD_VAR 0 5
71734: PPUSH
71735: CALL_OW 488
71739: IFFALSE 71760
// ComTurnXY ( unit , x , y ) ;
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 4
71750: PPUSH
71751: LD_VAR 0 5
71755: PPUSH
71756: CALL_OW 118
// end ;
71760: LD_VAR 0 3
71764: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71765: LD_INT 0
71767: PPUSH
71768: PPUSH
// result := false ;
71769: LD_ADDR_VAR 0 3
71773: PUSH
71774: LD_INT 0
71776: ST_TO_ADDR
// if not units then
71777: LD_VAR 0 2
71781: NOT
71782: IFFALSE 71786
// exit ;
71784: GO 71831
// for i in units do
71786: LD_ADDR_VAR 0 4
71790: PUSH
71791: LD_VAR 0 2
71795: PUSH
71796: FOR_IN
71797: IFFALSE 71829
// if See ( side , i ) then
71799: LD_VAR 0 1
71803: PPUSH
71804: LD_VAR 0 4
71808: PPUSH
71809: CALL_OW 292
71813: IFFALSE 71827
// begin result := true ;
71815: LD_ADDR_VAR 0 3
71819: PUSH
71820: LD_INT 1
71822: ST_TO_ADDR
// exit ;
71823: POP
71824: POP
71825: GO 71831
// end ;
71827: GO 71796
71829: POP
71830: POP
// end ;
71831: LD_VAR 0 3
71835: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71836: LD_INT 0
71838: PPUSH
71839: PPUSH
71840: PPUSH
71841: PPUSH
// if not unit or not points then
71842: LD_VAR 0 1
71846: NOT
71847: PUSH
71848: LD_VAR 0 2
71852: NOT
71853: OR
71854: IFFALSE 71858
// exit ;
71856: GO 71948
// dist := 99999 ;
71858: LD_ADDR_VAR 0 5
71862: PUSH
71863: LD_INT 99999
71865: ST_TO_ADDR
// for i in points do
71866: LD_ADDR_VAR 0 4
71870: PUSH
71871: LD_VAR 0 2
71875: PUSH
71876: FOR_IN
71877: IFFALSE 71946
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71879: LD_ADDR_VAR 0 6
71883: PUSH
71884: LD_VAR 0 1
71888: PPUSH
71889: LD_VAR 0 4
71893: PUSH
71894: LD_INT 1
71896: ARRAY
71897: PPUSH
71898: LD_VAR 0 4
71902: PUSH
71903: LD_INT 2
71905: ARRAY
71906: PPUSH
71907: CALL_OW 297
71911: ST_TO_ADDR
// if tmpDist < dist then
71912: LD_VAR 0 6
71916: PUSH
71917: LD_VAR 0 5
71921: LESS
71922: IFFALSE 71944
// begin result := i ;
71924: LD_ADDR_VAR 0 3
71928: PUSH
71929: LD_VAR 0 4
71933: ST_TO_ADDR
// dist := tmpDist ;
71934: LD_ADDR_VAR 0 5
71938: PUSH
71939: LD_VAR 0 6
71943: ST_TO_ADDR
// end ; end ;
71944: GO 71876
71946: POP
71947: POP
// end ;
71948: LD_VAR 0 3
71952: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71953: LD_INT 0
71955: PPUSH
// uc_side := side ;
71956: LD_ADDR_OWVAR 20
71960: PUSH
71961: LD_VAR 0 1
71965: ST_TO_ADDR
// uc_nation := 3 ;
71966: LD_ADDR_OWVAR 21
71970: PUSH
71971: LD_INT 3
71973: ST_TO_ADDR
// vc_chassis := 25 ;
71974: LD_ADDR_OWVAR 37
71978: PUSH
71979: LD_INT 25
71981: ST_TO_ADDR
// vc_engine := engine_siberite ;
71982: LD_ADDR_OWVAR 39
71986: PUSH
71987: LD_INT 3
71989: ST_TO_ADDR
// vc_control := control_computer ;
71990: LD_ADDR_OWVAR 38
71994: PUSH
71995: LD_INT 3
71997: ST_TO_ADDR
// vc_weapon := 59 ;
71998: LD_ADDR_OWVAR 40
72002: PUSH
72003: LD_INT 59
72005: ST_TO_ADDR
// result := CreateVehicle ;
72006: LD_ADDR_VAR 0 5
72010: PUSH
72011: CALL_OW 45
72015: ST_TO_ADDR
// SetDir ( result , d ) ;
72016: LD_VAR 0 5
72020: PPUSH
72021: LD_VAR 0 4
72025: PPUSH
72026: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72030: LD_VAR 0 5
72034: PPUSH
72035: LD_VAR 0 2
72039: PPUSH
72040: LD_VAR 0 3
72044: PPUSH
72045: LD_INT 0
72047: PPUSH
72048: CALL_OW 48
// end ;
72052: LD_VAR 0 5
72056: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72057: LD_INT 0
72059: PPUSH
72060: PPUSH
72061: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72062: LD_ADDR_VAR 0 2
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72085: LD_VAR 0 1
72089: NOT
72090: PUSH
72091: LD_VAR 0 1
72095: PPUSH
72096: CALL_OW 264
72100: PUSH
72101: LD_INT 12
72103: PUSH
72104: LD_INT 51
72106: PUSH
72107: LD_INT 32
72109: PUSH
72110: LD_INT 89
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: IN
72119: NOT
72120: OR
72121: IFFALSE 72125
// exit ;
72123: GO 72223
// for i := 1 to 3 do
72125: LD_ADDR_VAR 0 3
72129: PUSH
72130: DOUBLE
72131: LD_INT 1
72133: DEC
72134: ST_TO_ADDR
72135: LD_INT 3
72137: PUSH
72138: FOR_TO
72139: IFFALSE 72221
// begin tmp := GetCargo ( cargo , i ) ;
72141: LD_ADDR_VAR 0 4
72145: PUSH
72146: LD_VAR 0 1
72150: PPUSH
72151: LD_VAR 0 3
72155: PPUSH
72156: CALL_OW 289
72160: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72161: LD_ADDR_VAR 0 2
72165: PUSH
72166: LD_VAR 0 2
72170: PPUSH
72171: LD_VAR 0 3
72175: PPUSH
72176: LD_VAR 0 4
72180: PPUSH
72181: CALL_OW 1
72185: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72186: LD_ADDR_VAR 0 2
72190: PUSH
72191: LD_VAR 0 2
72195: PPUSH
72196: LD_INT 4
72198: PPUSH
72199: LD_VAR 0 2
72203: PUSH
72204: LD_INT 4
72206: ARRAY
72207: PUSH
72208: LD_VAR 0 4
72212: PLUS
72213: PPUSH
72214: CALL_OW 1
72218: ST_TO_ADDR
// end ;
72219: GO 72138
72221: POP
72222: POP
// end ;
72223: LD_VAR 0 2
72227: RET
// export function Length ( array ) ; begin
72228: LD_INT 0
72230: PPUSH
// result := array + 0 ;
72231: LD_ADDR_VAR 0 2
72235: PUSH
72236: LD_VAR 0 1
72240: PUSH
72241: LD_INT 0
72243: PLUS
72244: ST_TO_ADDR
// end ;
72245: LD_VAR 0 2
72249: RET
// export function PrepareArray ( array ) ; begin
72250: LD_INT 0
72252: PPUSH
// result := array diff 0 ;
72253: LD_ADDR_VAR 0 2
72257: PUSH
72258: LD_VAR 0 1
72262: PUSH
72263: LD_INT 0
72265: DIFF
72266: ST_TO_ADDR
// if not result [ 1 ] then
72267: LD_VAR 0 2
72271: PUSH
72272: LD_INT 1
72274: ARRAY
72275: NOT
72276: IFFALSE 72296
// result := Delete ( result , 1 ) ;
72278: LD_ADDR_VAR 0 2
72282: PUSH
72283: LD_VAR 0 2
72287: PPUSH
72288: LD_INT 1
72290: PPUSH
72291: CALL_OW 3
72295: ST_TO_ADDR
// end ;
72296: LD_VAR 0 2
72300: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72301: LD_INT 0
72303: PPUSH
72304: PPUSH
72305: PPUSH
72306: PPUSH
// sibRocketRange := 25 ;
72307: LD_ADDR_VAR 0 6
72311: PUSH
72312: LD_INT 25
72314: ST_TO_ADDR
// result := false ;
72315: LD_ADDR_VAR 0 4
72319: PUSH
72320: LD_INT 0
72322: ST_TO_ADDR
// for i := 0 to 5 do
72323: LD_ADDR_VAR 0 5
72327: PUSH
72328: DOUBLE
72329: LD_INT 0
72331: DEC
72332: ST_TO_ADDR
72333: LD_INT 5
72335: PUSH
72336: FOR_TO
72337: IFFALSE 72404
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72339: LD_VAR 0 1
72343: PPUSH
72344: LD_VAR 0 5
72348: PPUSH
72349: LD_VAR 0 6
72353: PPUSH
72354: CALL_OW 272
72358: PPUSH
72359: LD_VAR 0 2
72363: PPUSH
72364: LD_VAR 0 5
72368: PPUSH
72369: LD_VAR 0 6
72373: PPUSH
72374: CALL_OW 273
72378: PPUSH
72379: LD_VAR 0 3
72383: PPUSH
72384: CALL_OW 309
72388: IFFALSE 72402
// begin result := true ;
72390: LD_ADDR_VAR 0 4
72394: PUSH
72395: LD_INT 1
72397: ST_TO_ADDR
// exit ;
72398: POP
72399: POP
72400: GO 72406
// end ;
72402: GO 72336
72404: POP
72405: POP
// end ;
72406: LD_VAR 0 4
72410: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72411: LD_INT 0
72413: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72414: LD_VAR 0 1
72418: PPUSH
72419: LD_VAR 0 2
72423: PPUSH
72424: LD_INT 0
72426: PPUSH
72427: LD_INT 0
72429: PPUSH
72430: LD_INT 1
72432: PPUSH
72433: LD_INT 0
72435: PPUSH
72436: CALL_OW 587
// end ;
72440: LD_VAR 0 3
72444: RET
// export function CenterOnNow ( unit ) ; begin
72445: LD_INT 0
72447: PPUSH
// result := IsInUnit ( unit ) ;
72448: LD_ADDR_VAR 0 2
72452: PUSH
72453: LD_VAR 0 1
72457: PPUSH
72458: CALL_OW 310
72462: ST_TO_ADDR
// if not result then
72463: LD_VAR 0 2
72467: NOT
72468: IFFALSE 72480
// result := unit ;
72470: LD_ADDR_VAR 0 2
72474: PUSH
72475: LD_VAR 0 1
72479: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: CALL_OW 87
// end ;
72489: LD_VAR 0 2
72493: RET
// export function ComMoveHex ( unit , hex ) ; begin
72494: LD_INT 0
72496: PPUSH
// if not hex then
72497: LD_VAR 0 2
72501: NOT
72502: IFFALSE 72506
// exit ;
72504: GO 72559
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72506: LD_VAR 0 2
72510: PUSH
72511: LD_INT 1
72513: ARRAY
72514: PPUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_INT 2
72522: ARRAY
72523: PPUSH
72524: CALL_OW 428
72528: IFFALSE 72532
// exit ;
72530: GO 72559
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72532: LD_VAR 0 1
72536: PPUSH
72537: LD_VAR 0 2
72541: PUSH
72542: LD_INT 1
72544: ARRAY
72545: PPUSH
72546: LD_VAR 0 2
72550: PUSH
72551: LD_INT 2
72553: ARRAY
72554: PPUSH
72555: CALL_OW 111
// end ;
72559: LD_VAR 0 3
72563: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72564: LD_INT 0
72566: PPUSH
72567: PPUSH
72568: PPUSH
// if not unit or not enemy then
72569: LD_VAR 0 1
72573: NOT
72574: PUSH
72575: LD_VAR 0 2
72579: NOT
72580: OR
72581: IFFALSE 72585
// exit ;
72583: GO 72709
// x := GetX ( enemy ) ;
72585: LD_ADDR_VAR 0 4
72589: PUSH
72590: LD_VAR 0 2
72594: PPUSH
72595: CALL_OW 250
72599: ST_TO_ADDR
// y := GetY ( enemy ) ;
72600: LD_ADDR_VAR 0 5
72604: PUSH
72605: LD_VAR 0 2
72609: PPUSH
72610: CALL_OW 251
72614: ST_TO_ADDR
// if ValidHex ( x , y ) then
72615: LD_VAR 0 4
72619: PPUSH
72620: LD_VAR 0 5
72624: PPUSH
72625: CALL_OW 488
72629: IFFALSE 72709
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72631: LD_VAR 0 2
72635: PPUSH
72636: CALL_OW 247
72640: PUSH
72641: LD_INT 3
72643: PUSH
72644: LD_INT 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: IN
72651: PUSH
72652: LD_VAR 0 1
72656: PPUSH
72657: CALL_OW 255
72661: PPUSH
72662: LD_VAR 0 2
72666: PPUSH
72667: CALL_OW 292
72671: AND
72672: IFFALSE 72690
// ComAttackUnit ( unit , enemy ) else
72674: LD_VAR 0 1
72678: PPUSH
72679: LD_VAR 0 2
72683: PPUSH
72684: CALL_OW 115
72688: GO 72709
// ComAgressiveMove ( unit , x , y ) ;
72690: LD_VAR 0 1
72694: PPUSH
72695: LD_VAR 0 4
72699: PPUSH
72700: LD_VAR 0 5
72704: PPUSH
72705: CALL_OW 114
// end ;
72709: LD_VAR 0 3
72713: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72714: LD_INT 0
72716: PPUSH
72717: PPUSH
72718: PPUSH
// list := AreaToList ( area , 0 ) ;
72719: LD_ADDR_VAR 0 5
72723: PUSH
72724: LD_VAR 0 1
72728: PPUSH
72729: LD_INT 0
72731: PPUSH
72732: CALL_OW 517
72736: ST_TO_ADDR
// if not list then
72737: LD_VAR 0 5
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72876
// if all then
72746: LD_VAR 0 2
72750: IFFALSE 72838
// begin for i := 1 to list [ 1 ] do
72752: LD_ADDR_VAR 0 4
72756: PUSH
72757: DOUBLE
72758: LD_INT 1
72760: DEC
72761: ST_TO_ADDR
72762: LD_VAR 0 5
72766: PUSH
72767: LD_INT 1
72769: ARRAY
72770: PUSH
72771: FOR_TO
72772: IFFALSE 72834
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72774: LD_ADDR_VAR 0 3
72778: PUSH
72779: LD_VAR 0 3
72783: PPUSH
72784: LD_VAR 0 3
72788: PUSH
72789: LD_INT 1
72791: PLUS
72792: PPUSH
72793: LD_VAR 0 5
72797: PUSH
72798: LD_INT 1
72800: ARRAY
72801: PUSH
72802: LD_VAR 0 4
72806: ARRAY
72807: PUSH
72808: LD_VAR 0 5
72812: PUSH
72813: LD_INT 2
72815: ARRAY
72816: PUSH
72817: LD_VAR 0 4
72821: ARRAY
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PPUSH
72827: CALL_OW 1
72831: ST_TO_ADDR
72832: GO 72771
72834: POP
72835: POP
// exit ;
72836: GO 72876
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72838: LD_ADDR_VAR 0 3
72842: PUSH
72843: LD_VAR 0 5
72847: PUSH
72848: LD_INT 1
72850: ARRAY
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PUSH
72856: LD_VAR 0 5
72860: PUSH
72861: LD_INT 2
72863: ARRAY
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: ST_TO_ADDR
// end ;
72876: LD_VAR 0 3
72880: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72881: LD_INT 0
72883: PPUSH
72884: PPUSH
// list := AreaToList ( area , 0 ) ;
72885: LD_ADDR_VAR 0 4
72889: PUSH
72890: LD_VAR 0 1
72894: PPUSH
72895: LD_INT 0
72897: PPUSH
72898: CALL_OW 517
72902: ST_TO_ADDR
// if not list then
72903: LD_VAR 0 4
72907: NOT
72908: IFFALSE 72912
// exit ;
72910: GO 72953
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72912: LD_ADDR_VAR 0 3
72916: PUSH
72917: LD_VAR 0 4
72921: PUSH
72922: LD_INT 1
72924: ARRAY
72925: PUSH
72926: LD_INT 1
72928: ARRAY
72929: PUSH
72930: LD_VAR 0 4
72934: PUSH
72935: LD_INT 2
72937: ARRAY
72938: PUSH
72939: LD_INT 1
72941: ARRAY
72942: PUSH
72943: LD_VAR 0 2
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: LIST
72952: ST_TO_ADDR
// end ;
72953: LD_VAR 0 3
72957: RET
// export function First ( array ) ; begin
72958: LD_INT 0
72960: PPUSH
// if not array then
72961: LD_VAR 0 1
72965: NOT
72966: IFFALSE 72970
// exit ;
72968: GO 72984
// result := array [ 1 ] ;
72970: LD_ADDR_VAR 0 2
72974: PUSH
72975: LD_VAR 0 1
72979: PUSH
72980: LD_INT 1
72982: ARRAY
72983: ST_TO_ADDR
// end ;
72984: LD_VAR 0 2
72988: RET
// export function Last ( array ) ; begin
72989: LD_INT 0
72991: PPUSH
// if not array then
72992: LD_VAR 0 1
72996: NOT
72997: IFFALSE 73001
// exit ;
72999: GO 73017
// result := array [ array ] ;
73001: LD_ADDR_VAR 0 2
73005: PUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_VAR 0 1
73015: ARRAY
73016: ST_TO_ADDR
// end ; end_of_file
73017: LD_VAR 0 2
73021: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 200
73029: DOUBLE
73030: GREATEREQUAL
73031: IFFALSE 73039
73033: LD_INT 299
73035: DOUBLE
73036: LESSEQUAL
73037: IFTRUE 73041
73039: GO 73073
73041: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73042: LD_VAR 0 1
73046: PPUSH
73047: LD_VAR 0 2
73051: PPUSH
73052: LD_VAR 0 3
73056: PPUSH
73057: LD_VAR 0 4
73061: PPUSH
73062: LD_VAR 0 5
73066: PPUSH
73067: CALL 26272 0 5
73071: GO 73150
73073: LD_INT 300
73075: DOUBLE
73076: GREATEREQUAL
73077: IFFALSE 73085
73079: LD_INT 399
73081: DOUBLE
73082: LESSEQUAL
73083: IFTRUE 73087
73085: GO 73149
73087: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73088: LD_VAR 0 1
73092: PPUSH
73093: LD_VAR 0 2
73097: PPUSH
73098: LD_VAR 0 3
73102: PPUSH
73103: LD_VAR 0 4
73107: PPUSH
73108: LD_VAR 0 5
73112: PPUSH
73113: LD_VAR 0 6
73117: PPUSH
73118: LD_VAR 0 7
73122: PPUSH
73123: LD_VAR 0 8
73127: PPUSH
73128: LD_VAR 0 9
73132: PPUSH
73133: LD_VAR 0 10
73137: PPUSH
73138: LD_VAR 0 11
73142: PPUSH
73143: CALL 22597 0 11
73147: GO 73150
73149: POP
// end ;
73150: PPOPN 11
73152: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73153: LD_VAR 0 1
73157: PPUSH
73158: LD_VAR 0 2
73162: PPUSH
73163: LD_VAR 0 3
73167: PPUSH
73168: LD_VAR 0 4
73172: PPUSH
73173: LD_VAR 0 5
73177: PPUSH
73178: CALL 26008 0 5
// end ; end_of_file
73182: PPOPN 5
73184: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73185: LD_VAR 0 1
73189: PPUSH
73190: LD_VAR 0 2
73194: PPUSH
73195: LD_VAR 0 3
73199: PPUSH
73200: LD_VAR 0 4
73204: PPUSH
73205: LD_VAR 0 5
73209: PPUSH
73210: LD_VAR 0 6
73214: PPUSH
73215: CALL 10249 0 6
// end ;
73219: PPOPN 6
73221: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73222: LD_INT 0
73224: PPUSH
// begin if not units then
73225: LD_VAR 0 1
73229: NOT
73230: IFFALSE 73234
// exit ;
73232: GO 73234
// end ;
73234: PPOPN 7
73236: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73237: CALL 10153 0 0
// end ;
73241: PPOPN 1
73243: END
