// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 2 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 0
  22: PPUSH
  23: LD_INT 0
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 2
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 6
  40: PPUSH
  41: CALL 210 0 10
// InitVariables ;
  45: CALL 66 0 0
// PrepareRussian ;
  49: CALL 1454 0 0
// PrepareArabian ;
  53: CALL 1024 0 0
// PrepareHeike ;
  57: CALL 959 0 0
// Action ;
  61: CALL 2991 0 0
// end ;
  65: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// missionStarted := false ;
  77: LD_ADDR_EXP 1
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// meetJohnny := false ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// johnnySaved := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// dogTag := [ ] ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: EMPTY
 107: ST_TO_ADDR
// dogTagFound := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// mercenariesSpotted := false ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// olafSpotted := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// russianSpotted := false ;
 132: LD_ADDR_EXP 9
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// mercenariesQuestReady := false ;
 140: LD_ADDR_EXP 10
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// mercenariesQuestDone := false ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// lastObjectiveActive := false ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// prisonFound := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// heikeHurt := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// animalCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// end ;
 188: LD_VAR 0 1
 192: RET
// every 0 0$1 trigger debug do
 193: LD_EXP 2
 197: IFFALSE 209
 199: GO 201
 201: DISABLE
// FogOff ( 2 ) ; end_of_file
 202: LD_INT 2
 204: PPUSH
 205: CALL_OW 344
 209: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
 214: PPUSH
// uc_side = 0 ;
 215: LD_ADDR_OWVAR 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// uc_nation = 0 ;
 223: LD_ADDR_OWVAR 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// InitHc ;
 231: CALL_OW 19
// InitVc ;
 235: CALL_OW 20
// if mastodonts then
 239: LD_VAR 0 6
 243: IFFALSE 310
// for i = 1 to mastodonts do
 245: LD_ADDR_VAR 0 12
 249: PUSH
 250: DOUBLE
 251: LD_INT 1
 253: DEC
 254: ST_TO_ADDR
 255: LD_VAR 0 6
 259: PUSH
 260: FOR_TO
 261: IFFALSE 308
// begin vc_chassis := 31 ;
 263: LD_ADDR_OWVAR 37
 267: PUSH
 268: LD_INT 31
 270: ST_TO_ADDR
// vc_control := control_rider ;
 271: LD_ADDR_OWVAR 38
 275: PUSH
 276: LD_INT 4
 278: ST_TO_ADDR
// animal := CreateVehicle ;
 279: LD_ADDR_VAR 0 13
 283: PUSH
 284: CALL_OW 45
 288: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 289: LD_VAR 0 13
 293: PPUSH
 294: LD_VAR 0 9
 298: PPUSH
 299: LD_INT 0
 301: PPUSH
 302: CALL_OW 49
// end ;
 306: GO 260
 308: POP
 309: POP
// if horses then
 310: LD_VAR 0 5
 314: IFFALSE 381
// for i = 1 to horses do
 316: LD_ADDR_VAR 0 12
 320: PUSH
 321: DOUBLE
 322: LD_INT 1
 324: DEC
 325: ST_TO_ADDR
 326: LD_VAR 0 5
 330: PUSH
 331: FOR_TO
 332: IFFALSE 379
// begin hc_class := 21 ;
 334: LD_ADDR_OWVAR 28
 338: PUSH
 339: LD_INT 21
 341: ST_TO_ADDR
// hc_gallery :=  ;
 342: LD_ADDR_OWVAR 33
 346: PUSH
 347: LD_STRING 
 349: ST_TO_ADDR
// animal := CreateHuman ;
 350: LD_ADDR_VAR 0 13
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 360: LD_VAR 0 13
 364: PPUSH
 365: LD_VAR 0 9
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// end ;
 377: GO 331
 379: POP
 380: POP
// if birds then
 381: LD_VAR 0 1
 385: IFFALSE 452
// for i = 1 to birds do
 387: LD_ADDR_VAR 0 12
 391: PUSH
 392: DOUBLE
 393: LD_INT 1
 395: DEC
 396: ST_TO_ADDR
 397: LD_VAR 0 1
 401: PUSH
 402: FOR_TO
 403: IFFALSE 450
// begin hc_class = 18 ;
 405: LD_ADDR_OWVAR 28
 409: PUSH
 410: LD_INT 18
 412: ST_TO_ADDR
// hc_gallery =  ;
 413: LD_ADDR_OWVAR 33
 417: PUSH
 418: LD_STRING 
 420: ST_TO_ADDR
// animal := CreateHuman ;
 421: LD_ADDR_VAR 0 13
 425: PUSH
 426: CALL_OW 44
 430: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 431: LD_VAR 0 13
 435: PPUSH
 436: LD_VAR 0 9
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 402
 450: POP
 451: POP
// if tigers then
 452: LD_VAR 0 2
 456: IFFALSE 540
// for i = 1 to tigers do
 458: LD_ADDR_VAR 0 12
 462: PUSH
 463: DOUBLE
 464: LD_INT 1
 466: DEC
 467: ST_TO_ADDR
 468: LD_VAR 0 2
 472: PUSH
 473: FOR_TO
 474: IFFALSE 538
// begin hc_class = class_tiger ;
 476: LD_ADDR_OWVAR 28
 480: PUSH
 481: LD_INT 14
 483: ST_TO_ADDR
// hc_gallery =  ;
 484: LD_ADDR_OWVAR 33
 488: PUSH
 489: LD_STRING 
 491: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 492: LD_ADDR_OWVAR 35
 496: PUSH
 497: LD_INT 7
 499: NEG
 500: PPUSH
 501: LD_INT 7
 503: PPUSH
 504: CALL_OW 12
 508: ST_TO_ADDR
// animal := CreateHuman ;
 509: LD_ADDR_VAR 0 13
 513: PUSH
 514: CALL_OW 44
 518: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 519: LD_VAR 0 13
 523: PPUSH
 524: LD_VAR 0 9
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// end ;
 536: GO 473
 538: POP
 539: POP
// if apemans then
 540: LD_VAR 0 3
 544: IFFALSE 667
// for i = 1 to apemans do
 546: LD_ADDR_VAR 0 12
 550: PUSH
 551: DOUBLE
 552: LD_INT 1
 554: DEC
 555: ST_TO_ADDR
 556: LD_VAR 0 3
 560: PUSH
 561: FOR_TO
 562: IFFALSE 665
// begin hc_class = class_apeman ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 12
 571: ST_TO_ADDR
// hc_gallery =  ;
 572: LD_ADDR_OWVAR 33
 576: PUSH
 577: LD_STRING 
 579: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 580: LD_ADDR_OWVAR 35
 584: PUSH
 585: LD_INT 5
 587: NEG
 588: PPUSH
 589: LD_INT 5
 591: PPUSH
 592: CALL_OW 12
 596: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 597: LD_ADDR_OWVAR 31
 601: PUSH
 602: LD_INT 1
 604: PPUSH
 605: LD_INT 3
 607: PPUSH
 608: CALL_OW 12
 612: PUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 12
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// animal := CreateHuman ;
 636: LD_ADDR_VAR 0 13
 640: PUSH
 641: CALL_OW 44
 645: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 646: LD_VAR 0 13
 650: PPUSH
 651: LD_VAR 0 9
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 49
// end ;
 663: GO 561
 665: POP
 666: POP
// if enchidnas then
 667: LD_VAR 0 4
 671: IFFALSE 738
// for i = 1 to enchidnas do
 673: LD_ADDR_VAR 0 12
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 4
 687: PUSH
 688: FOR_TO
 689: IFFALSE 736
// begin hc_class = 13 ;
 691: LD_ADDR_OWVAR 28
 695: PUSH
 696: LD_INT 13
 698: ST_TO_ADDR
// hc_gallery =  ;
 699: LD_ADDR_OWVAR 33
 703: PUSH
 704: LD_STRING 
 706: ST_TO_ADDR
// animal := CreateHuman ;
 707: LD_ADDR_VAR 0 13
 711: PUSH
 712: CALL_OW 44
 716: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 717: LD_VAR 0 13
 721: PPUSH
 722: LD_VAR 0 9
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// end ;
 734: GO 688
 736: POP
 737: POP
// if fishes then
 738: LD_VAR 0 7
 742: IFFALSE 809
// for i = 1 to fishes do
 744: LD_ADDR_VAR 0 12
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 7
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin hc_class = class_fish ;
 762: LD_ADDR_OWVAR 28
 766: PUSH
 767: LD_INT 20
 769: ST_TO_ADDR
// hc_gallery =  ;
 770: LD_ADDR_OWVAR 33
 774: PUSH
 775: LD_STRING 
 777: ST_TO_ADDR
// animal := CreateHuman ;
 778: LD_ADDR_VAR 0 13
 782: PUSH
 783: CALL_OW 44
 787: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 788: LD_VAR 0 13
 792: PPUSH
 793: LD_VAR 0 10
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 759
 807: POP
 808: POP
// if frogs then
 809: LD_VAR 0 8
 813: IFFALSE 880
// for i := 1 to frogs do
 815: LD_ADDR_VAR 0 12
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 8
 829: PUSH
 830: FOR_TO
 831: IFFALSE 878
// begin hc_class := class_frog ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 19
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// animal := CreateHuman ;
 849: LD_ADDR_VAR 0 13
 853: PUSH
 854: CALL_OW 44
 858: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 859: LD_VAR 0 13
 863: PPUSH
 864: LD_VAR 0 10
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ;
 876: GO 830
 878: POP
 879: POP
// end ;
 880: LD_VAR 0 11
 884: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// if not observer or not unit then
 890: LD_VAR 0 1
 894: NOT
 895: PUSH
 896: LD_VAR 0 2
 900: NOT
 901: OR
 902: IFFALSE 906
// exit ;
 904: GO 954
// if not See ( GetSide ( observer ) , unit ) then
 906: LD_VAR 0 1
 910: PPUSH
 911: CALL_OW 255
 915: PPUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: CALL_OW 292
 925: NOT
 926: IFFALSE 930
// exit ;
 928: GO 954
// result := GetDistUnits ( observer , unit ) < 12 ;
 930: LD_ADDR_VAR 0 3
 934: PUSH
 935: LD_VAR 0 1
 939: PPUSH
 940: LD_VAR 0 2
 944: PPUSH
 945: CALL_OW 296
 949: PUSH
 950: LD_INT 12
 952: LESS
 953: ST_TO_ADDR
// end ; end_of_file
 954: LD_VAR 0 3
 958: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 959: LD_INT 0
 961: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 962: LD_INT 66
 964: PPUSH
 965: LD_INT 26
 967: PPUSH
 968: CALL_OW 86
// uc_side := 2 ;
 972: LD_ADDR_OWVAR 20
 976: PUSH
 977: LD_INT 2
 979: ST_TO_ADDR
// uc_nation := 2 ;
 980: LD_ADDR_OWVAR 21
 984: PUSH
 985: LD_INT 2
 987: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 988: LD_ADDR_EXP 16
 992: PUSH
 993: LD_STRING Heike
 995: PPUSH
 996: CALL_OW 25
1000: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
1001: LD_EXP 16
1005: PPUSH
1006: LD_INT 66
1008: PPUSH
1009: LD_INT 26
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 48
// end ;
1019: LD_VAR 0 1
1023: RET
// export function PrepareArabian ; begin
1024: LD_INT 0
1026: PPUSH
// uc_side := 5 ;
1027: LD_ADDR_OWVAR 20
1031: PUSH
1032: LD_INT 5
1034: ST_TO_ADDR
// uc_nation := 2 ;
1035: LD_ADDR_OWVAR 21
1039: PUSH
1040: LD_INT 2
1042: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_STRING Olaf
1050: PPUSH
1051: CALL_OW 25
1055: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1056: LD_EXP 17
1060: PPUSH
1061: LD_INT 39
1063: PPUSH
1064: LD_INT 52
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_STRING Givi
1081: PPUSH
1082: CALL_OW 25
1086: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1087: LD_EXP 18
1091: PPUSH
1092: LD_INT 55
1094: PPUSH
1095: LD_INT 90
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1105: LD_EXP 18
1109: PPUSH
1110: LD_INT 53
1112: PPUSH
1113: LD_INT 89
1115: PPUSH
1116: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1120: LD_ADDR_EXP 19
1124: PUSH
1125: LD_STRING Mike
1127: PPUSH
1128: CALL_OW 25
1132: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1133: LD_EXP 19
1137: PPUSH
1138: LD_INT 53
1140: PPUSH
1141: LD_INT 87
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1151: LD_EXP 19
1155: PPUSH
1156: LD_INT 53
1158: PPUSH
1159: LD_INT 89
1161: PPUSH
1162: CALL_OW 118
// end ;
1166: LD_VAR 0 1
1170: RET
// export function PreparePrison ; begin
1171: LD_INT 0
1173: PPUSH
// uc_side := 5 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 5
1181: ST_TO_ADDR
// uc_nation := 2 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 2
1189: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1190: LD_ADDR_EXP 20
1194: PUSH
1195: LD_STRING Kamil
1197: PPUSH
1198: CALL_OW 25
1202: ST_TO_ADDR
// if Difficulty > 1 then
1203: LD_OWVAR 67
1207: PUSH
1208: LD_INT 1
1210: GREATER
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PUSH
2916: LD_OWVAR 67
2920: ARRAY
2921: ST_TO_ADDR
// veh := CreateVehicle ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: CALL_OW 45
2931: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 31
2951: PPUSH
2952: LD_INT 58
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 52
// result := un ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_VAR 0 3
2985: ST_TO_ADDR
// end ; end_of_file
2986: LD_VAR 0 1
2990: RET
// export function Action ; begin
2991: LD_INT 0
2993: PPUSH
// InGameOn ;
2994: CALL_OW 8
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3005: LD_EXP 16
3009: PPUSH
3010: LD_STRING DH-start-1
3012: PPUSH
3013: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3017: LD_EXP 16
3021: PPUSH
3022: LD_INT 71
3024: PPUSH
3025: LD_INT 29
3027: PPUSH
3028: CALL_OW 111
// wait ( 0 0$4 ) ;
3032: LD_INT 140
3034: PPUSH
3035: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3039: LD_EXP 16
3043: PPUSH
3044: LD_INT 71
3046: PPUSH
3047: LD_INT 33
3049: PPUSH
3050: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3054: LD_EXP 16
3058: PPUSH
3059: LD_INT 71
3061: PPUSH
3062: LD_INT 34
3064: PPUSH
3065: CALL_OW 178
// wait ( 0 0$4 ) ;
3069: LD_INT 140
3071: PPUSH
3072: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3076: LD_EXP 16
3080: PPUSH
3081: LD_STRING DH-start-2
3083: PPUSH
3084: CALL_OW 88
// wait ( 0 0$4 ) ;
3088: LD_INT 140
3090: PPUSH
3091: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3095: LD_EXP 16
3099: PPUSH
3100: LD_INT 65
3102: PPUSH
3103: LD_INT 26
3105: PPUSH
3106: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3110: LD_EXP 16
3114: PPUSH
3115: LD_STRING DH-start-3
3117: PPUSH
3118: CALL_OW 88
// InGameOff ;
3122: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3126: LD_STRING O1_cont
3128: PPUSH
3129: CALL_OW 337
// SaveForQuickRestart ;
3133: CALL_OW 22
// missionStarted := true ;
3137: LD_ADDR_EXP 1
3141: PUSH
3142: LD_INT 1
3144: ST_TO_ADDR
// PrepareJohnny ;
3145: CALL 2748 0 0
// end ;
3149: LD_VAR 0 1
3153: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3154: LD_EXP 8
3158: NOT
3159: PUSH
3160: LD_EXP 7
3164: NOT
3165: AND
3166: PUSH
3167: LD_INT 2
3169: PPUSH
3170: LD_EXP 25
3174: PPUSH
3175: CALL_OW 292
3179: AND
3180: PUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: CALL_OW 292
3193: NOT
3194: AND
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 69
3210: PPUSH
3211: LD_EXP 16
3215: PPUSH
3216: CALL_OW 74
3220: PUSH
3221: LD_EXP 25
3225: EQUAL
3226: AND
3227: PUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 2
3233: PPUSH
3234: CALL_OW 81
3238: PUSH
3239: LD_INT 0
3241: EQUAL
3242: AND
3243: IFFALSE 4174
3245: GO 3247
3247: DISABLE
// begin InGameOn ;
3248: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3252: LD_EXP 16
3256: PPUSH
3257: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3261: LD_EXP 25
3265: PPUSH
3266: LD_STRING DJ-ambush-1
3268: PPUSH
3269: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3273: LD_INT 10
3275: PPUSH
3276: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3280: LD_EXP 16
3284: PPUSH
3285: LD_EXP 25
3289: PPUSH
3290: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3294: LD_EXP 16
3298: PPUSH
3299: LD_STRING DH-ambush-1
3301: PPUSH
3302: CALL_OW 88
// wait ( 0 0$1 ) ;
3306: LD_INT 35
3308: PPUSH
3309: CALL_OW 67
// ComWalk ( Johnny ) ;
3313: LD_EXP 25
3317: PPUSH
3318: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3322: LD_EXP 25
3326: PPUSH
3327: LD_EXP 16
3331: PPUSH
3332: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3336: LD_INT 35
3338: PPUSH
3339: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3343: LD_EXP 25
3347: PPUSH
3348: LD_EXP 16
3352: PPUSH
3353: CALL_OW 296
3357: PUSH
3358: LD_INT 4
3360: LESS
3361: IFFALSE 3336
// ComTurnUnit ( Johnny , Heike ) ;
3363: LD_EXP 25
3367: PPUSH
3368: LD_EXP 16
3372: PPUSH
3373: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3377: LD_EXP 25
3381: PPUSH
3382: LD_STRING DJ-ambush-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3389: LD_EXP 16
3393: PPUSH
3394: LD_STRING DH-ambush-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3401: LD_EXP 25
3405: PPUSH
3406: LD_STRING DJ-ambush-3
3408: PPUSH
3409: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3413: LD_EXP 16
3417: PPUSH
3418: LD_STRING DH-ambush-3
3420: PPUSH
3421: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3425: LD_EXP 25
3429: PPUSH
3430: LD_STRING DJ-ambush-4
3432: PPUSH
3433: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3437: LD_EXP 16
3441: PPUSH
3442: LD_INT 39
3444: PPUSH
3445: LD_INT 22
3447: PPUSH
3448: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3452: LD_EXP 16
3456: PPUSH
3457: LD_STRING DH-ambush-4
3459: PPUSH
3460: CALL_OW 88
// PrepareRussianPatrol ;
3464: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3468: LD_INT 39
3470: PPUSH
3471: LD_INT 22
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 12
3479: NEG
3480: PPUSH
3481: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3485: LD_INT 39
3487: PPUSH
3488: LD_INT 22
3490: PPUSH
3491: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3495: LD_EXP 21
3499: PPUSH
3500: LD_INT 39
3502: PPUSH
3503: LD_INT 23
3505: PPUSH
3506: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3510: LD_EXP 16
3514: PUSH
3515: LD_EXP 25
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_INT 39
3526: PPUSH
3527: LD_INT 7
3529: PPUSH
3530: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3534: LD_EXP 16
3538: PUSH
3539: LD_EXP 25
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: LD_EXP 21
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3561: LD_EXP 21
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: LD_STRING DR-ambush-5
3572: PPUSH
3573: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3577: LD_EXP 21
3581: PUSH
3582: LD_INT 2
3584: ARRAY
3585: PPUSH
3586: LD_STRING DR1-ambush-5
3588: PPUSH
3589: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3600: LD_EXP 16
3604: PPUSH
3605: LD_INT 39
3607: PPUSH
3608: LD_INT 7
3610: PPUSH
3611: CALL_OW 297
3615: PUSH
3616: LD_INT 6
3618: LESS
3619: IFFALSE 3593
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3621: LD_EXP 16
3625: PPUSH
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_EXP 16
3648: PPUSH
3649: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3653: LD_EXP 25
3657: PPUSH
3658: LD_STRING DJ-ambush-6
3660: PPUSH
3661: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3665: LD_EXP 16
3669: PPUSH
3670: LD_STRING DH-ambush-6
3672: PPUSH
3673: CALL_OW 88
// InGameOff ;
3677: CALL_OW 9
// meetJohnny := true ;
3681: LD_ADDR_EXP 3
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
// ComFree ( Johnny ) ;
3689: LD_EXP 25
3693: PPUSH
3694: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3698: LD_STRING O2_ambush_cont
3700: PPUSH
3701: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3705: LD_EXP 21
3709: PUSH
3710: LD_EXP 21
3714: ARRAY
3715: PPUSH
3716: LD_INT 29
3718: PPUSH
3719: LD_INT 15
3721: PPUSH
3722: CALL_OW 111
// wait ( 0 0$2 ) ;
3726: LD_INT 70
3728: PPUSH
3729: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3733: LD_INT 3
3735: PPUSH
3736: LD_EXP 16
3740: PPUSH
3741: CALL_OW 292
3745: NOT
3746: PUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_EXP 25
3754: PPUSH
3755: CALL_OW 292
3759: NOT
3760: AND
3761: IFFALSE 3782
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3763: LD_EXP 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_INT 58
3774: PPUSH
3775: LD_INT 32
3777: PPUSH
3778: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3782: LD_INT 1750
3784: PUSH
3785: LD_INT 1400
3787: PUSH
3788: LD_INT 1225
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3806: LD_EXP 21
3810: PPUSH
3811: LD_INT 43
3813: PPUSH
3814: LD_INT 13
3816: PPUSH
3817: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3821: LD_INT 35
3823: PPUSH
3824: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3828: LD_EXP 21
3832: NOT
3833: PUSH
3834: LD_EXP 25
3838: PPUSH
3839: CALL_OW 302
3843: NOT
3844: OR
3845: IFFALSE 3821
// RemoveSeeing ( 39 , 22 , 2 ) ;
3847: LD_INT 39
3849: PPUSH
3850: LD_INT 22
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 81
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3878
// exit ;
3876: GO 4174
// if not IsOk ( Johnny ) then
3878: LD_EXP 25
3882: PPUSH
3883: CALL_OW 302
3887: NOT
3888: IFFALSE 3899
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3890: LD_STRING O2_ambush_out_cont
3892: PPUSH
3893: CALL_OW 337
// exit ;
3897: GO 4174
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3899: LD_EXP 16
3903: PPUSH
3904: LD_EXP 25
3908: PPUSH
3909: CALL_OW 296
3913: PUSH
3914: LD_INT 10
3916: GREATER
3917: IFFALSE 3960
// begin ComMoveUnit ( Johnny , Heike ) ;
3919: LD_EXP 25
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3933: LD_INT 35
3935: PPUSH
3936: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3940: LD_EXP 25
3944: PPUSH
3945: LD_EXP 16
3949: PPUSH
3950: CALL_OW 296
3954: PUSH
3955: LD_INT 6
3957: LESS
3958: IFFALSE 3933
// end ; CenterNowOnUnits ( Heike ) ;
3960: LD_EXP 16
3964: PPUSH
3965: CALL_OW 87
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 25
3982: PPUSH
3983: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3987: LD_EXP 25
3991: PPUSH
3992: LD_EXP 16
3996: PPUSH
3997: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4001: LD_EXP 25
4005: PPUSH
4006: LD_STRING DJ-thanks-1
4008: PPUSH
4009: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_STRING DH-thanks-1
4020: PPUSH
4021: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4025: LD_EXP 25
4029: PPUSH
4030: LD_STRING DJ-thanks-2
4032: PPUSH
4033: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4037: LD_EXP 25
4041: PPUSH
4042: LD_INT 4
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 111
// wait ( 0 0$1 ) ;
4052: LD_INT 35
4054: PPUSH
4055: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4059: LD_EXP 16
4063: PPUSH
4064: LD_STRING DH-thanks-2
4066: PPUSH
4067: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4071: LD_INT 35
4073: PPUSH
4074: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4078: LD_INT 2
4080: PPUSH
4081: LD_EXP 25
4085: PPUSH
4086: CALL_OW 292
4090: NOT
4091: IFFALSE 4071
// Say ( Heike , DH-thanks-2a ) ;
4093: LD_EXP 16
4097: PPUSH
4098: LD_STRING DH-thanks-2a
4100: PPUSH
4101: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4105: LD_EXP 25
4109: PPUSH
4110: CALL_OW 64
// InGameOff ;
4114: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4118: LD_STRING O2_ambush_out_cont
4120: PPUSH
4121: CALL_OW 337
// johnnySaved := true ;
4125: LD_ADDR_EXP 4
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 600
4143: PPUSH
4144: CALL_OW 492
// if IsOk ( Olaf ) then
4148: LD_EXP 17
4152: PPUSH
4153: CALL_OW 302
4157: IFFALSE 4174
// ComMoveXY ( Olaf , 44 , 25 ) ;
4159: LD_EXP 17
4163: PPUSH
4164: LD_INT 44
4166: PPUSH
4167: LD_INT 25
4169: PPUSH
4170: CALL_OW 111
// end ;
4174: END
// every 0 0$1 trigger russianPatrol do var i ;
4175: LD_EXP 21
4179: IFFALSE 4247
4181: GO 4183
4183: DISABLE
4184: LD_INT 0
4186: PPUSH
// begin enable ;
4187: ENABLE
// for i in russianPatrol do
4188: LD_ADDR_VAR 0 1
4192: PUSH
4193: LD_EXP 21
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4245
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4201: LD_VAR 0 1
4205: PPUSH
4206: CALL_OW 256
4210: PUSH
4211: LD_INT 1000
4213: LESS
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 314
4224: NOT
4225: AND
4226: IFFALSE 4243
// ComAgressiveMove ( i , 42 , 12 ) ;
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_INT 42
4235: PPUSH
4236: LD_INT 12
4238: PPUSH
4239: CALL_OW 114
4243: GO 4198
4245: POP
4246: POP
// end ;
4247: PPOPN 1
4249: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4250: LD_INT 1
4252: PPUSH
4253: LD_INT 2
4255: PPUSH
4256: CALL_OW 81
4260: PUSH
4261: LD_INT 2
4263: EQUAL
4264: PUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 302
4274: AND
4275: IFFALSE 4292
4277: GO 4279
4279: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4280: LD_EXP 25
4284: PPUSH
4285: LD_STRING DJ-fire-1
4287: PPUSH
4288: CALL_OW 88
4292: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4293: LD_EXP 7
4297: NOT
4298: PUSH
4299: LD_EXP 23
4303: PPUSH
4304: LD_INT 101
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 72
4318: AND
4319: IFFALSE 4439
4321: GO 4323
4323: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4324: LD_EXP 16
4328: PPUSH
4329: CALL_OW 87
// DialogueOn ;
4333: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4337: LD_EXP 16
4341: PPUSH
4342: LD_STRING DH-see-enemy-patrol-1
4344: PPUSH
4345: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4349: LD_EXP 23
4353: PPUSH
4354: LD_INT 26
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 72
4368: PUSH
4369: LD_INT 1
4371: ARRAY
4372: PPUSH
4373: LD_STRING DR-see-enemy-patrol-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4384: LD_EXP 23
4388: PPUSH
4389: LD_INT 66
4391: PPUSH
4392: LD_INT 22
4394: PPUSH
4395: CALL_OW 114
// wait ( 0 0$10 ) ;
4399: LD_INT 350
4401: PPUSH
4402: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4406: LD_EXP 23
4410: PPUSH
4411: LD_INT 175
4413: PPUSH
4414: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4418: LD_EXP 23
4422: PPUSH
4423: LD_INT 9
4425: PPUSH
4426: CALL_OW 173
// AddComFree ( russianForces ) ;
4430: LD_EXP 23
4434: PPUSH
4435: CALL_OW 199
// end ;
4439: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4440: LD_EXP 23
4444: PPUSH
4445: LD_INT 3
4447: PUSH
4448: LD_INT 24
4450: PUSH
4451: LD_INT 960
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 72
4466: IFFALSE 4719
4468: GO 4470
4470: DISABLE
4471: LD_INT 0
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
// begin enable ;
4477: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 69
4497: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_EXP 23
4507: PPUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 24
4516: PUSH
4517: LD_INT 960
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 24
4526: PUSH
4527: LD_INT 500
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 72
4547: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_EXP 23
4557: PPUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 24
4563: PUSH
4564: LD_INT 500
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 72
4579: ST_TO_ADDR
// if not tmp then
4580: LD_VAR 0 2
4584: NOT
4585: IFFALSE 4589
// exit ;
4587: GO 4719
// for i in tmp2 do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_VAR 0 3
4598: PUSH
4599: FOR_IN
4600: IFFALSE 4658
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4602: LD_VAR 0 1
4606: PPUSH
4607: LD_VAR 0 2
4611: PPUSH
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 74
4621: PPUSH
4622: CALL_OW 296
4626: PUSH
4627: LD_INT 10
4629: LESS
4630: IFFALSE 4656
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 1
4646: PPUSH
4647: CALL_OW 74
4651: PPUSH
4652: CALL_OW 115
4656: GO 4599
4658: POP
4659: POP
// if tmp3 then
4660: LD_VAR 0 4
4664: IFFALSE 4719
// for i in tmp do
4666: LD_ADDR_VAR 0 1
4670: PUSH
4671: LD_VAR 0 2
4675: PUSH
4676: FOR_IN
4677: IFFALSE 4717
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 119
4686: PPUSH
4687: LD_INT 21
4689: PPUSH
4690: CALL_OW 297
4694: PUSH
4695: LD_INT 10
4697: GREATER
4698: IFFALSE 4715
// ComMoveXY ( i , 119 , 21 ) ;
4700: LD_VAR 0 1
4704: PPUSH
4705: LD_INT 119
4707: PPUSH
4708: LD_INT 21
4710: PPUSH
4711: CALL_OW 111
4715: GO 4676
4717: POP
4718: POP
// end ;
4719: PPOPN 4
4721: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4722: LD_EXP 1
4726: PUSH
4727: LD_EXP 16
4731: PPUSH
4732: LD_INT 25
4734: PUSH
4735: LD_INT 14
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PPUSH
4742: CALL_OW 69
4746: PPUSH
4747: LD_EXP 16
4751: PPUSH
4752: CALL_OW 74
4756: PPUSH
4757: CALL_OW 296
4761: PUSH
4762: LD_INT 6
4764: LESS
4765: AND
4766: IFFALSE 4797
4768: GO 4770
4770: DISABLE
// begin animalCounter := animalCounter + 1 ;
4771: LD_ADDR_EXP 15
4775: PUSH
4776: LD_EXP 15
4780: PUSH
4781: LD_INT 1
4783: PLUS
4784: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4785: LD_EXP 16
4789: PPUSH
4790: LD_STRING DH-tiger-1
4792: PPUSH
4793: CALL_OW 88
// end ;
4797: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4798: LD_EXP 1
4802: PUSH
4803: LD_EXP 16
4807: PPUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 12
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PPUSH
4818: CALL_OW 69
4822: PPUSH
4823: LD_EXP 16
4827: PPUSH
4828: CALL_OW 74
4832: PPUSH
4833: CALL_OW 296
4837: PUSH
4838: LD_INT 6
4840: LESS
4841: AND
4842: IFFALSE 4873
4844: GO 4846
4846: DISABLE
// begin animalCounter := animalCounter + 1 ;
4847: LD_ADDR_EXP 15
4851: PUSH
4852: LD_EXP 15
4856: PUSH
4857: LD_INT 1
4859: PLUS
4860: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4861: LD_EXP 16
4865: PPUSH
4866: LD_STRING DH-ape-1
4868: PPUSH
4869: CALL_OW 88
// end ;
4873: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4874: LD_EXP 1
4878: PUSH
4879: LD_EXP 16
4883: PPUSH
4884: LD_INT 25
4886: PUSH
4887: LD_INT 18
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PPUSH
4894: CALL_OW 69
4898: PPUSH
4899: LD_EXP 16
4903: PPUSH
4904: CALL_OW 74
4908: PPUSH
4909: CALL_OW 296
4913: PUSH
4914: LD_INT 6
4916: LESS
4917: AND
4918: IFFALSE 4949
4920: GO 4922
4922: DISABLE
// begin animalCounter := animalCounter + 1 ;
4923: LD_ADDR_EXP 15
4927: PUSH
4928: LD_EXP 15
4932: PUSH
4933: LD_INT 1
4935: PLUS
4936: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_STRING DH-bird-1
4944: PPUSH
4945: CALL_OW 88
// end ;
4949: END
// every 0 0$2 trigger animalCounter = 3 do
4950: LD_EXP 15
4954: PUSH
4955: LD_INT 3
4957: EQUAL
4958: IFFALSE 4970
4960: GO 4962
4962: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4963: LD_STRING ACH_ZOOLIGST
4965: PPUSH
4966: CALL_OW 543
4970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4971: LD_INT 22
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 101
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 69
4999: IFFALSE 5012
5001: GO 5003
5003: DISABLE
// russianSpotted := true ;
5004: LD_ADDR_EXP 9
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
5012: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5013: LD_EXP 16
5017: PPUSH
5018: LD_INT 22
5020: PUSH
5021: LD_INT 3
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PPUSH
5042: CALL_OW 69
5046: PPUSH
5047: LD_EXP 16
5051: PPUSH
5052: CALL_OW 74
5056: PPUSH
5057: CALL_OW 296
5061: PUSH
5062: LD_INT 8
5064: LESS
5065: IFFALSE 5082
5067: GO 5069
5069: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5070: LD_EXP 16
5074: PPUSH
5075: LD_STRING DH-enemy-base
5077: PPUSH
5078: CALL_OW 88
5082: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5083: LD_EXP 25
5087: PPUSH
5088: CALL_OW 305
5092: NOT
5093: PUSH
5094: LD_EXP 6
5098: NOT
5099: AND
5100: PUSH
5101: LD_EXP 5
5105: AND
5106: PUSH
5107: LD_EXP 12
5111: NOT
5112: AND
5113: PUSH
5114: LD_EXP 11
5118: NOT
5119: AND
5120: IFFALSE 5278
5122: GO 5124
5124: DISABLE
5125: LD_INT 0
5127: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5128: LD_INT 35
5130: PPUSH
5131: CALL_OW 67
// for i in dogTag do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_EXP 5
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5195
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5148: LD_EXP 16
5152: PPUSH
5153: LD_VAR 0 1
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PPUSH
5162: LD_VAR 0 1
5166: PUSH
5167: LD_INT 2
5169: ARRAY
5170: PPUSH
5171: CALL_OW 297
5175: PUSH
5176: LD_INT 3
5178: LESS
5179: IFFALSE 5193
// begin dogTagFound := i ;
5181: LD_ADDR_EXP 6
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// break ;
5191: GO 5195
// end ;
5193: GO 5145
5195: POP
5196: POP
// until dogTagFound ;
5197: LD_EXP 6
5201: IFFALSE 5128
// CenterNowOnUnits ( Heike ) ;
5203: LD_EXP 16
5207: PPUSH
5208: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5212: LD_EXP 16
5216: PPUSH
5217: LD_EXP 6
5221: PUSH
5222: LD_INT 1
5224: ARRAY
5225: PPUSH
5226: LD_EXP 6
5230: PUSH
5231: LD_INT 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5239: LD_STRING ACH_DOGTAG
5241: PPUSH
5242: CALL_OW 543
// if mercenariesQuestReady then
5246: LD_EXP 10
5250: IFFALSE 5266
// Say ( Heike , DH-dogtag-found-quest ) else
5252: LD_EXP 16
5256: PPUSH
5257: LD_STRING DH-dogtag-found-quest
5259: PPUSH
5260: CALL_OW 88
5264: GO 5278
// Say ( Heike , DH-dogtag-found ) ;
5266: LD_EXP 16
5270: PPUSH
5271: LD_STRING DH-dogtag-found
5273: PPUSH
5274: CALL_OW 88
// end ;
5278: PPOPN 1
5280: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5281: LD_EXP 8
5285: NOT
5286: PUSH
5287: LD_EXP 7
5291: NOT
5292: AND
5293: PUSH
5294: LD_INT 5
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 292
5306: AND
5307: PUSH
5308: LD_EXP 16
5312: PPUSH
5313: LD_EXP 17
5317: PPUSH
5318: CALL_OW 296
5322: PUSH
5323: LD_INT 8
5325: LESS
5326: AND
5327: IFFALSE 5688
5329: GO 5331
5331: DISABLE
// begin olafSpotted := true ;
5332: LD_ADDR_EXP 8
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if HasTask ( Olaf ) then
5340: LD_EXP 17
5344: PPUSH
5345: CALL_OW 314
5349: IFFALSE 5360
// ComStop ( Olaf ) ;
5351: LD_EXP 17
5355: PPUSH
5356: CALL_OW 141
// InGameOn ;
5360: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5364: LD_EXP 17
5368: PPUSH
5369: LD_EXP 16
5373: PPUSH
5374: CALL_OW 296
5378: PUSH
5379: LD_INT 8
5381: GREATER
5382: IFFALSE 5398
// ComMoveUnit ( Olaf , Heike ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_EXP 16
5393: PPUSH
5394: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5398: LD_INT 35
5400: PPUSH
5401: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5405: LD_EXP 17
5409: PPUSH
5410: LD_EXP 16
5414: PPUSH
5415: CALL_OW 296
5419: PUSH
5420: LD_INT 8
5422: LESSEQUAL
5423: IFFALSE 5398
// ComTurnUnit ( Heike , Olaf ) ;
5425: LD_EXP 16
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5439: LD_EXP 17
5443: PPUSH
5444: LD_EXP 16
5448: PPUSH
5449: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5453: LD_EXP 17
5457: PPUSH
5458: LD_STRING DO-olaf-1
5460: PPUSH
5461: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_STRING DH-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5477: LD_EXP 17
5481: PPUSH
5482: LD_STRING DO-olaf-2
5484: PPUSH
5485: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5489: LD_EXP 16
5493: PPUSH
5494: LD_STRING DH-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5501: LD_EXP 17
5505: PPUSH
5506: LD_STRING DO-olaf-3
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-4
5520: PPUSH
5521: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5525: LD_EXP 16
5529: PPUSH
5530: LD_STRING DH-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5537: LD_EXP 17
5541: PPUSH
5542: LD_STRING DO-olaf-5
5544: PPUSH
5545: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5549: LD_EXP 16
5553: PPUSH
5554: LD_STRING DH-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5561: LD_EXP 17
5565: PPUSH
5566: LD_STRING DO-olaf-6
5568: PPUSH
5569: CALL_OW 88
// if russianSpotted or johnnySaved then
5573: LD_EXP 9
5577: PUSH
5578: LD_EXP 4
5582: OR
5583: IFFALSE 5611
// begin Say ( Heike , DH-olaf-6a ) ;
5585: LD_EXP 16
5589: PPUSH
5590: LD_STRING DH-olaf-6a
5592: PPUSH
5593: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5597: LD_EXP 17
5601: PPUSH
5602: LD_STRING DO-olaf-7a
5604: PPUSH
5605: CALL_OW 88
// end else
5609: GO 5635
// begin Say ( Heike , DH-olaf-6b ) ;
5611: LD_EXP 16
5615: PPUSH
5616: LD_STRING DH-olaf-6b
5618: PPUSH
5619: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5623: LD_EXP 17
5627: PPUSH
5628: LD_STRING DO-olaf-7b
5630: PPUSH
5631: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-8
5642: PPUSH
5643: CALL_OW 88
// InGameOff ;
5647: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5651: LD_STRING O3_camp_cont
5653: PPUSH
5654: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5658: LD_EXP 17
5662: PPUSH
5663: LD_INT 52
5665: PPUSH
5666: LD_INT 90
5668: PPUSH
5669: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5673: LD_EXP 17
5677: PPUSH
5678: LD_INT 53
5680: PPUSH
5681: LD_INT 89
5683: PPUSH
5684: CALL_OW 178
// end ;
5688: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5689: LD_EXP 8
5693: NOT
5694: PUSH
5695: LD_EXP 16
5699: PPUSH
5700: LD_EXP 18
5704: PPUSH
5705: CALL_OW 296
5709: PUSH
5710: LD_INT 36
5712: LESS
5713: AND
5714: IFFALSE 5734
5716: GO 5718
5718: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5719: LD_EXP 17
5723: PPUSH
5724: LD_INT 39
5726: PPUSH
5727: LD_INT 71
5729: PPUSH
5730: CALL_OW 111
5734: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5735: LD_EXP 7
5739: NOT
5740: PUSH
5741: LD_INT 2
5743: PPUSH
5744: LD_EXP 19
5748: PPUSH
5749: CALL_OW 292
5753: PUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 18
5761: PPUSH
5762: CALL_OW 292
5766: OR
5767: AND
5768: IFFALSE 7089
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
5776: PPUSH
5777: PPUSH
// begin if not johnnySaved then
5778: LD_EXP 4
5782: NOT
5783: IFFALSE 5794
// KillUnit ( Johnny ) ;
5785: LD_EXP 25
5789: PPUSH
5790: CALL_OW 66
// mercenariesSpotted := true ;
5794: LD_ADDR_EXP 7
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5802: LD_STRING O4_camp_cont
5804: PPUSH
5805: CALL_OW 337
// InGameOn ;
5809: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5813: LD_INT 53
5815: PPUSH
5816: LD_INT 89
5818: PPUSH
5819: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5823: LD_INT 53
5825: PPUSH
5826: LD_INT 89
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: LD_INT 8
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// if olafSpotted then
5840: LD_EXP 8
5844: IFFALSE 5962
// begin AddComTurnUnit ( Olaf , Heike ) ;
5846: LD_EXP 17
5850: PPUSH
5851: LD_EXP 16
5855: PPUSH
5856: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5860: LD_EXP 16
5864: PPUSH
5865: LD_INT 51
5867: PPUSH
5868: LD_INT 86
5870: PPUSH
5871: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5875: LD_EXP 16
5879: PPUSH
5880: LD_EXP 17
5884: PPUSH
5885: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5889: LD_EXP 17
5893: PPUSH
5894: LD_STRING DO-camp-1
5896: PPUSH
5897: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5901: LD_EXP 18
5905: PUSH
5906: LD_EXP 19
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PPUSH
5915: LD_EXP 16
5919: PPUSH
5920: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5924: LD_EXP 18
5928: PPUSH
5929: LD_STRING DG-camp-1
5931: PPUSH
5932: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5936: LD_EXP 16
5940: PPUSH
5941: LD_STRING DH-camp-1
5943: PPUSH
5944: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5948: LD_EXP 17
5952: PPUSH
5953: LD_STRING DO-camp-2
5955: PPUSH
5956: CALL_OW 88
// end else
5960: GO 6357
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5962: LD_EXP 16
5966: PPUSH
5967: LD_INT 51
5969: PPUSH
5970: LD_INT 86
5972: PPUSH
5973: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5977: LD_EXP 16
5981: PPUSH
5982: LD_EXP 18
5986: PPUSH
5987: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5991: LD_EXP 18
5995: PUSH
5996: LD_EXP 19
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: LD_EXP 16
6009: PPUSH
6010: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6014: LD_EXP 18
6018: PPUSH
6019: LD_STRING DG-camp-1a
6021: PPUSH
6022: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6026: LD_EXP 16
6030: PPUSH
6031: LD_STRING DH-camp-1a
6033: PPUSH
6034: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6038: LD_INT 1
6040: PPUSH
6041: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6045: LD_EXP 19
6049: PPUSH
6050: LD_EXP 17
6054: PPUSH
6055: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6059: LD_EXP 19
6063: PPUSH
6064: LD_STRING DM-camp-1a
6066: PPUSH
6067: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6071: LD_EXP 17
6075: PPUSH
6076: LD_INT 52
6078: PPUSH
6079: LD_INT 90
6081: PPUSH
6082: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6086: LD_EXP 19
6090: PPUSH
6091: LD_EXP 16
6095: PPUSH
6096: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6100: LD_EXP 18
6104: PPUSH
6105: LD_STRING DG-camp-2a
6107: PPUSH
6108: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6112: LD_EXP 16
6116: PPUSH
6117: LD_STRING DH-camp-2a
6119: PPUSH
6120: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6124: LD_EXP 19
6128: PPUSH
6129: LD_STRING DM-camp-2a
6131: PPUSH
6132: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6136: LD_INT 35
6138: PPUSH
6139: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6143: LD_EXP 17
6147: PPUSH
6148: LD_EXP 16
6152: PPUSH
6153: CALL_OW 296
6157: PUSH
6158: LD_INT 10
6160: LESS
6161: IFFALSE 6136
// AddComTurnUnit ( Olaf , Heike ) ;
6163: LD_EXP 17
6167: PPUSH
6168: LD_EXP 16
6172: PPUSH
6173: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6177: LD_EXP 19
6181: PPUSH
6182: LD_EXP 16
6186: PPUSH
6187: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6191: LD_EXP 17
6195: PPUSH
6196: LD_STRING DO-camp-2a
6198: PPUSH
6199: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6203: LD_EXP 16
6207: PPUSH
6208: LD_EXP 17
6212: PPUSH
6213: CALL_OW 119
// if russianSpotted then
6217: LD_EXP 9
6221: IFFALSE 6261
// begin Say ( Heike , DH-camp-2aa ) ;
6223: LD_EXP 16
6227: PPUSH
6228: LD_STRING DH-camp-2aa
6230: PPUSH
6231: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6235: LD_EXP 18
6239: PPUSH
6240: LD_STRING DG-camp-2aa
6242: PPUSH
6243: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6247: LD_EXP 19
6251: PPUSH
6252: LD_STRING DM-camp-2aa
6254: PPUSH
6255: CALL_OW 88
// end else
6259: GO 6285
// begin Say ( Heike , DH-camp-2ab ) ;
6261: LD_EXP 16
6265: PPUSH
6266: LD_STRING DH-camp-2ab
6268: PPUSH
6269: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6273: LD_EXP 19
6277: PPUSH
6278: LD_STRING DM-camp-2ab
6280: PPUSH
6281: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6285: LD_EXP 16
6289: PPUSH
6290: LD_STRING DH-camp-3a
6292: PPUSH
6293: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6297: LD_EXP 17
6301: PPUSH
6302: LD_STRING DO-camp-3a
6304: PPUSH
6305: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6309: LD_EXP 18
6313: PPUSH
6314: LD_STRING DG-camp-3a
6316: PPUSH
6317: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6321: LD_EXP 16
6325: PPUSH
6326: LD_STRING DH-camp-4aa
6328: PPUSH
6329: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6333: LD_EXP 19
6337: PPUSH
6338: LD_STRING DM-camp-4aa
6340: PPUSH
6341: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6345: LD_EXP 17
6349: PPUSH
6350: LD_STRING DO-camp-4a
6352: PPUSH
6353: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6357: LD_EXP 17
6361: PPUSH
6362: LD_STRING DO-camp-3
6364: PPUSH
6365: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6369: LD_EXP 17
6373: PPUSH
6374: LD_STRING DO-camp-4
6376: PPUSH
6377: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6381: LD_EXP 18
6385: PPUSH
6386: LD_EXP 17
6390: PPUSH
6391: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6395: LD_EXP 18
6399: PPUSH
6400: LD_STRING DG-camp-4
6402: PPUSH
6403: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6407: LD_EXP 16
6411: PPUSH
6412: LD_EXP 18
6416: PPUSH
6417: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6421: LD_EXP 16
6425: PPUSH
6426: LD_STRING DH-camp-4
6428: PPUSH
6429: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6433: LD_EXP 19
6437: PUSH
6438: LD_EXP 17
6442: PUSH
6443: LD_EXP 18
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PPUSH
6453: LD_EXP 16
6457: PPUSH
6458: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6462: LD_EXP 18
6466: PPUSH
6467: LD_STRING DG-camp-5
6469: PPUSH
6470: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6474: LD_EXP 18
6478: PPUSH
6479: LD_STRING DG-camp-6
6481: PPUSH
6482: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6486: LD_EXP 16
6490: PPUSH
6491: LD_STRING DH-camp-6
6493: PPUSH
6494: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6498: LD_EXP 18
6502: PPUSH
6503: LD_STRING DG-camp-7
6505: PPUSH
6506: CALL_OW 88
// if DogTagFound then
6510: LD_EXP 6
6514: IFFALSE 6554
// begin Say ( Heike , DH-quest-1a ) ;
6516: LD_EXP 16
6520: PPUSH
6521: LD_STRING DH-quest-1a
6523: PPUSH
6524: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6528: LD_EXP 18
6532: PPUSH
6533: LD_STRING DG-quest-1a
6535: PPUSH
6536: CALL_OW 88
// mercenariesQuestDone := true ;
6540: LD_ADDR_EXP 11
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// InGameOff ;
6548: CALL_OW 9
// end else
6552: GO 6720
// begin Say ( Heike , DH-camp-7 ) ;
6554: LD_EXP 16
6558: PPUSH
6559: LD_STRING DH-camp-7
6561: PPUSH
6562: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6566: LD_EXP 16
6570: PPUSH
6571: CALL_OW 256
6575: PUSH
6576: LD_INT 1000
6578: LESS
6579: IFFALSE 6671
// begin Say ( Olaf , DO-heal-1 ) ;
6581: LD_EXP 17
6585: PPUSH
6586: LD_STRING DO-heal-1
6588: PPUSH
6589: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6593: LD_EXP 16
6597: PPUSH
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 88
6603: PPUSH
6604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6608: LD_INT 35
6610: PPUSH
6611: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6615: LD_EXP 16
6619: PPUSH
6620: LD_EXP 17
6624: PPUSH
6625: CALL_OW 296
6629: PUSH
6630: LD_INT 4
6632: LESS
6633: PUSH
6634: LD_EXP 16
6638: PPUSH
6639: LD_INT 51
6641: PPUSH
6642: LD_INT 88
6644: PPUSH
6645: CALL_OW 307
6649: OR
6650: IFFALSE 6608
// SetLives ( Heike , 1000 ) ;
6652: LD_EXP 16
6656: PPUSH
6657: LD_INT 1000
6659: PPUSH
6660: CALL_OW 234
// wait ( 0 0$2 ) ;
6664: LD_INT 70
6666: PPUSH
6667: CALL_OW 67
// end ; InGameOff ;
6671: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6675: LD_EXP 17
6679: PUSH
6680: LD_EXP 18
6684: PUSH
6685: LD_EXP 19
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: PPUSH
6695: LD_INT 53
6697: PPUSH
6698: LD_INT 89
6700: PPUSH
6701: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6705: LD_STRING O5_proof_cont
6707: PPUSH
6708: CALL_OW 337
// mercenariesQuestReady := true ;
6712: LD_ADDR_EXP 10
6716: PUSH
6717: LD_INT 1
6719: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6720: LD_EXP 10
6724: NOT
6725: IFFALSE 6729
// exit ;
6727: GO 7089
// wait ( 0 0$35 ) ;
6729: LD_INT 1225
6731: PPUSH
6732: CALL_OW 67
// driver := PreparePatrolTank ;
6736: LD_ADDR_VAR 0 2
6740: PUSH
6741: CALL 2821 0 0
6745: ST_TO_ADDR
// if not driver then
6746: LD_VAR 0 2
6750: NOT
6751: IFFALSE 6755
// exit ;
6753: GO 7089
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6755: LD_INT 2
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: LD_VAR 0 2
6780: PPUSH
6781: CALL_OW 310
6785: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6786: LD_VAR 0 3
6790: PPUSH
6791: LD_INT 500
6793: PPUSH
6794: CALL_OW 234
// SetLives ( driver , 450 ) ;
6798: LD_VAR 0 2
6802: PPUSH
6803: LD_INT 450
6805: PPUSH
6806: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6810: LD_VAR 0 2
6814: PPUSH
6815: LD_INT 59
6817: PPUSH
6818: LD_INT 60
6820: PPUSH
6821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6825: LD_INT 35
6827: PPUSH
6828: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6832: LD_VAR 0 3
6836: PPUSH
6837: LD_INT 59
6839: PPUSH
6840: LD_INT 60
6842: PPUSH
6843: CALL_OW 307
6847: IFFALSE 6825
// if not See ( 1 , Heike ) then
6849: LD_INT 1
6851: PPUSH
6852: LD_EXP 16
6856: PPUSH
6857: CALL_OW 292
6861: NOT
6862: IFFALSE 6986
// begin if Difficulty < 3 then
6864: LD_OWVAR 67
6868: PUSH
6869: LD_INT 3
6871: LESS
6872: IFFALSE 6890
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6874: LD_INT 59
6876: PPUSH
6877: LD_INT 60
6879: PPUSH
6880: LD_INT 2
6882: PPUSH
6883: LD_INT 6
6885: PPUSH
6886: CALL_OW 330
// ComExitVehicle ( driver ) ;
6890: LD_VAR 0 2
6894: PPUSH
6895: CALL_OW 121
// wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6906: LD_VAR 0 2
6910: PPUSH
6911: LD_INT 58
6913: PPUSH
6914: LD_INT 54
6916: PPUSH
6917: CALL_OW 171
// wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_INT 57
6935: PPUSH
6936: LD_INT 53
6938: PPUSH
6939: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6943: LD_VAR 0 2
6947: PPUSH
6948: LD_INT 350
6950: PPUSH
6951: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6955: LD_VAR 0 2
6959: PPUSH
6960: LD_VAR 0 3
6964: PPUSH
6965: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 107
6976: PPUSH
6977: LD_INT 118
6979: PPUSH
6980: CALL_OW 171
// end else
6984: GO 7001
// begin ComMoveXY ( driver , 107 , 118 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 107
6993: PPUSH
6994: LD_INT 118
6996: PPUSH
6997: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7001: LD_INT 35
7003: PPUSH
7004: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7008: LD_VAR 0 3
7012: PPUSH
7013: LD_INT 107
7015: PPUSH
7016: LD_INT 118
7018: PPUSH
7019: CALL_OW 307
7023: PUSH
7024: LD_VAR 0 2
7028: PPUSH
7029: CALL_OW 301
7033: OR
7034: IFFALSE 7001
// if IsDead ( driver [ 1 ] ) then
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: CALL_OW 301
7049: IFFALSE 7053
// exit ;
7051: GO 7089
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7053: LD_ADDR_VAR 0 1
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: PUSH
7073: FOR_IN
7074: IFFALSE 7087
// RemoveUnit ( i ) ;
7076: LD_VAR 0 1
7080: PPUSH
7081: CALL_OW 64
7085: GO 7073
7087: POP
7088: POP
// end ;
7089: PPOPN 3
7091: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7092: LD_INT 10
7094: PPUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 21
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PPUSH
7119: CALL_OW 70
7123: IFFALSE 7197
7125: GO 7127
7127: DISABLE
// begin InGameOn ;
7128: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7132: LD_EXP 17
7136: PUSH
7137: LD_EXP 19
7141: PUSH
7142: LD_EXP 18
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: PPUSH
7152: LD_EXP 16
7156: PPUSH
7157: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7161: LD_EXP 19
7165: PPUSH
7166: LD_STRING DM-quest-1
7168: PPUSH
7169: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7173: LD_EXP 18
7177: PPUSH
7178: LD_STRING DG-quest-1
7180: PPUSH
7181: CALL_OW 88
// InGameOff ;
7185: CALL_OW 9
// mercenariesQuestDone := true ;
7189: LD_ADDR_EXP 11
7193: PUSH
7194: LD_INT 1
7196: ST_TO_ADDR
// end ;
7197: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7198: LD_EXP 16
7202: PPUSH
7203: LD_INT 10
7205: PPUSH
7206: CALL_OW 308
7210: PUSH
7211: LD_EXP 6
7215: AND
7216: PUSH
7217: LD_EXP 10
7221: AND
7222: PUSH
7223: LD_INT 10
7225: PPUSH
7226: LD_INT 22
7228: PUSH
7229: LD_INT 2
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 21
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 70
7254: NOT
7255: AND
7256: IFFALSE 7428
7258: GO 7260
7260: DISABLE
7261: LD_INT 0
7263: PPUSH
// begin InGameOn ;
7264: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7268: LD_EXP 17
7272: PUSH
7273: LD_EXP 19
7277: PUSH
7278: LD_EXP 18
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: PPUSH
7288: LD_EXP 16
7292: PPUSH
7293: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7297: LD_EXP 16
7301: PPUSH
7302: LD_INT 54
7304: PPUSH
7305: LD_INT 86
7307: PPUSH
7308: CALL_OW 111
// p := p + 1 ;
7312: LD_ADDR_VAR 0 1
7316: PUSH
7317: LD_VAR 0 1
7321: PUSH
7322: LD_INT 1
7324: PLUS
7325: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7326: LD_INT 35
7328: PPUSH
7329: CALL_OW 67
// p := p + 1 ;
7333: LD_ADDR_VAR 0 1
7337: PUSH
7338: LD_VAR 0 1
7342: PUSH
7343: LD_INT 1
7345: PLUS
7346: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7347: LD_EXP 16
7351: PPUSH
7352: LD_EXP 18
7356: PPUSH
7357: CALL_OW 296
7361: PUSH
7362: LD_INT 4
7364: LESS
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: LD_INT 5
7373: GREATER
7374: OR
7375: IFFALSE 7326
// Say ( Mike , DM-quest-1 ) ;
7377: LD_EXP 19
7381: PPUSH
7382: LD_STRING DM-quest-1
7384: PPUSH
7385: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7389: LD_EXP 18
7393: PPUSH
7394: LD_STRING DG-quest-1
7396: PPUSH
7397: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7401: LD_EXP 16
7405: PPUSH
7406: LD_INT 55
7408: PPUSH
7409: LD_INT 87
7411: PPUSH
7412: CALL_OW 111
// InGameOff ;
7416: CALL_OW 9
// mercenariesQuestDone := true ;
7420: LD_ADDR_EXP 11
7424: PUSH
7425: LD_INT 1
7427: ST_TO_ADDR
// end ;
7428: PPOPN 1
7430: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7431: LD_EXP 16
7435: PUSH
7436: LD_INT 55
7438: PUSH
7439: EMPTY
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: IN
7447: IFFALSE 7487
7449: GO 7451
7451: DISABLE
// begin if Difficulty < 3 then
7452: LD_OWVAR 67
7456: PUSH
7457: LD_INT 3
7459: LESS
7460: IFFALSE 7475
// RemoveSeeing ( 59 , 60 , 2 ) ;
7462: LD_INT 59
7464: PPUSH
7465: LD_INT 60
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7475: LD_EXP 16
7479: PPUSH
7480: LD_STRING DH-driver
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger mercenariesQuestDone do
7488: LD_EXP 11
7492: IFFALSE 7980
7494: GO 7496
7496: DISABLE
// begin if mercenariesQuestReady then
7497: LD_EXP 10
7501: IFFALSE 7510
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7503: LD_STRING O5_proof_cont_out
7505: PPUSH
7506: CALL_OW 337
// InGameOn ;
7510: CALL_OW 8
// if IsInUnit ( Heike ) then
7514: LD_EXP 16
7518: PPUSH
7519: CALL_OW 310
7523: IFFALSE 7534
// ComExitVehicle ( Heike ) ;
7525: LD_EXP 16
7529: PPUSH
7530: CALL_OW 121
// wait ( 3 ) ;
7534: LD_INT 3
7536: PPUSH
7537: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7541: LD_EXP 16
7545: PPUSH
7546: LD_EXP 18
7550: PPUSH
7551: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7555: LD_EXP 17
7559: PUSH
7560: LD_EXP 19
7564: PUSH
7565: LD_EXP 18
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: LD_EXP 16
7579: PPUSH
7580: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7584: LD_EXP 16
7588: PPUSH
7589: LD_STRING DH-quest-done-1
7591: PPUSH
7592: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7596: LD_EXP 19
7600: PPUSH
7601: LD_STRING DM-quest-done-1
7603: PPUSH
7604: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7608: LD_EXP 18
7612: PPUSH
7613: LD_STRING DG-quest-done-1
7615: PPUSH
7616: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7620: LD_EXP 16
7624: PPUSH
7625: LD_EXP 17
7629: PPUSH
7630: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7634: LD_EXP 16
7638: PPUSH
7639: LD_STRING DH-quest-done-2
7641: PPUSH
7642: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7646: LD_EXP 17
7650: PPUSH
7651: LD_STRING DO-quest-done-2
7653: PPUSH
7654: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7658: LD_EXP 17
7662: PPUSH
7663: LD_STRING DO-quest-done-3
7665: PPUSH
7666: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7670: LD_EXP 18
7674: PPUSH
7675: LD_INT 51
7677: PPUSH
7678: LD_INT 90
7680: PPUSH
7681: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7685: LD_EXP 18
7689: PPUSH
7690: LD_INT 50
7692: PPUSH
7693: LD_INT 89
7695: PPUSH
7696: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7700: LD_EXP 16
7704: PPUSH
7705: LD_EXP 18
7709: PPUSH
7710: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7714: LD_EXP 18
7718: PPUSH
7719: LD_STRING DG-quest-done-4
7721: PPUSH
7722: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7726: LD_EXP 18
7730: PPUSH
7731: LD_EXP 16
7735: PPUSH
7736: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7740: LD_EXP 16
7744: PPUSH
7745: CALL_OW 256
7749: PUSH
7750: LD_INT 1000
7752: LESS
7753: IFFALSE 7845
// begin Say ( Olaf , DO-heal-1 ) ;
7755: LD_EXP 17
7759: PPUSH
7760: LD_STRING DO-heal-1
7762: PPUSH
7763: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7767: LD_EXP 16
7771: PPUSH
7772: LD_INT 51
7774: PPUSH
7775: LD_INT 88
7777: PPUSH
7778: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7782: LD_INT 35
7784: PPUSH
7785: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7789: LD_EXP 16
7793: PPUSH
7794: LD_EXP 17
7798: PPUSH
7799: CALL_OW 296
7803: PUSH
7804: LD_INT 4
7806: LESS
7807: PUSH
7808: LD_EXP 16
7812: PPUSH
7813: LD_INT 51
7815: PPUSH
7816: LD_INT 88
7818: PPUSH
7819: CALL_OW 307
7823: OR
7824: IFFALSE 7782
// SetLives ( Heike , 1000 ) ;
7826: LD_EXP 16
7830: PPUSH
7831: LD_INT 1000
7833: PPUSH
7834: CALL_OW 234
// wait ( 0 0$2 ) ;
7838: LD_INT 70
7840: PPUSH
7841: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7845: LD_EXP 16
7849: PPUSH
7850: LD_STRING DH-quest-done-4
7852: PPUSH
7853: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7857: LD_EXP 17
7861: PPUSH
7862: LD_STRING DO-quest-done-4
7864: PPUSH
7865: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7869: LD_EXP 16
7873: PPUSH
7874: LD_EXP 17
7878: PPUSH
7879: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7883: LD_EXP 16
7887: PPUSH
7888: LD_STRING DH-quest-done-5
7890: PPUSH
7891: CALL_OW 88
// InGameOff ;
7895: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7899: LD_STRING O6_end_cont
7901: PPUSH
7902: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7906: LD_EXP 18
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7918: LD_EXP 19
7922: PPUSH
7923: LD_INT 2
7925: PPUSH
7926: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7930: LD_INT 42
7932: PPUSH
7933: LD_INT 2
7935: PPUSH
7936: LD_INT 2
7938: PPUSH
7939: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_INT 53
7950: PPUSH
7951: LD_INT 89
7953: PPUSH
7954: CALL_OW 118
// lastObjectiveActive := true ;
7958: LD_ADDR_EXP 12
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7966: LD_INT 1
7968: PPUSH
7969: LD_INT 1
7971: PPUSH
7972: CALL_OW 424
// PreparePrison ;
7976: CALL 1171 0 0
// end ;
7980: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7981: LD_INT 22
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: LD_INT 4
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PPUSH
8009: CALL_OW 69
8013: IFFALSE 8195
8015: GO 8017
8017: DISABLE
8018: LD_INT 0
8020: PPUSH
8021: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8022: LD_INT 245
8024: PUSH
8025: LD_INT 210
8027: PUSH
8028: LD_INT 210
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: PUSH
8036: LD_OWVAR 67
8040: ARRAY
8041: PPUSH
8042: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: LD_INT 22
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 54
8073: PUSH
8074: EMPTY
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: PPUSH
8082: CALL_OW 69
8086: ST_TO_ADDR
// if not tmp then
8087: LD_VAR 0 2
8091: NOT
8092: IFFALSE 8096
// exit ;
8094: GO 8195
// for i in tmp do
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 2
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8135
// begin ComExitBuilding ( i ) ;
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_INT 121
8125: PPUSH
8126: LD_INT 22
8128: PPUSH
8129: CALL_OW 174
// end ;
8133: GO 8106
8135: POP
8136: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8137: LD_EXP 23
8141: PPUSH
8142: LD_INT 121
8144: PPUSH
8145: LD_INT 22
8147: PPUSH
8148: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8152: LD_EXP 24
8156: PPUSH
8157: LD_INT 121
8159: PPUSH
8160: LD_INT 22
8162: PPUSH
8163: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8167: LD_EXP 23
8171: PPUSH
8172: LD_EXP 16
8176: PPUSH
8177: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8181: LD_EXP 24
8185: PPUSH
8186: LD_EXP 16
8190: PPUSH
8191: CALL_OW 175
// end ;
8195: PPOPN 2
8197: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8198: LD_INT 22
8200: PUSH
8201: LD_INT 2
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 91
8210: PUSH
8211: LD_INT 8
8213: PUSH
8214: LD_INT 4
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: IFFALSE 8412
8232: GO 8234
8234: DISABLE
8235: LD_INT 0
8237: PPUSH
8238: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8239: LD_INT 280
8241: PUSH
8242: LD_INT 245
8244: PUSH
8245: LD_INT 210
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: LD_OWVAR 67
8257: ARRAY
8258: PPUSH
8259: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_INT 22
8270: PUSH
8271: LD_INT 3
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 25
8280: PUSH
8281: LD_INT 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 54
8290: PUSH
8291: EMPTY
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 69
8303: ST_TO_ADDR
// if not tmp then
8304: LD_VAR 0 2
8308: NOT
8309: IFFALSE 8313
// exit ;
8311: GO 8412
// for i in tmp do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: LD_VAR 0 2
8322: PUSH
8323: FOR_IN
8324: IFFALSE 8352
// begin ComExitBuilding ( i ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 142
8342: PPUSH
8343: LD_INT 71
8345: PPUSH
8346: CALL_OW 174
// end ;
8350: GO 8323
8352: POP
8353: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8354: LD_EXP 23
8358: PPUSH
8359: LD_INT 142
8361: PPUSH
8362: LD_INT 71
8364: PPUSH
8365: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8369: LD_EXP 24
8373: PPUSH
8374: LD_INT 142
8376: PPUSH
8377: LD_INT 71
8379: PPUSH
8380: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8384: LD_EXP 23
8388: PPUSH
8389: LD_EXP 16
8393: PPUSH
8394: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8398: LD_EXP 24
8402: PPUSH
8403: LD_EXP 16
8407: PPUSH
8408: CALL_OW 175
// end ;
8412: PPOPN 2
8414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8415: LD_INT 22
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 21
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 58
8437: PUSH
8438: EMPTY
8439: LIST
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 24
8446: PUSH
8447: LD_INT 1000
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 91
8460: PUSH
8461: LD_EXP 17
8465: PUSH
8466: LD_INT 8
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PPUSH
8481: CALL_OW 69
8485: PUSH
8486: LD_EXP 17
8490: PPUSH
8491: CALL_OW 302
8495: AND
8496: IFFALSE 8610
8498: GO 8500
8500: DISABLE
// begin enable ;
8501: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8502: LD_EXP 17
8506: PPUSH
8507: LD_INT 22
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 21
8519: PUSH
8520: LD_INT 2
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 58
8529: PUSH
8530: EMPTY
8531: LIST
8532: PUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 24
8538: PUSH
8539: LD_INT 1000
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 91
8552: PUSH
8553: LD_EXP 17
8557: PUSH
8558: LD_INT 8
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL_OW 69
8577: PUSH
8578: LD_INT 1
8580: ARRAY
8581: PPUSH
8582: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8586: LD_EXP 17
8590: PPUSH
8591: LD_INT 52
8593: PPUSH
8594: LD_INT 90
8596: PPUSH
8597: CALL_OW 171
// AddComHold ( Olaf ) ;
8601: LD_EXP 17
8605: PPUSH
8606: CALL_OW 200
// end ;
8610: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8611: LD_EXP 12
8615: PUSH
8616: LD_INT 2
8618: PPUSH
8619: CALL_OW 302
8623: NOT
8624: AND
8625: PUSH
8626: LD_OWVAR 67
8630: PUSH
8631: LD_INT 1
8633: EQUAL
8634: AND
8635: PUSH
8636: LD_EXP 13
8640: NOT
8641: AND
8642: IFFALSE 8659
8644: GO 8646
8646: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8647: LD_EXP 16
8651: PPUSH
8652: LD_STRING DH-prison-missing
8654: PPUSH
8655: CALL_OW 88
// end ;
8659: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8660: LD_EXP 12
8664: PUSH
8665: LD_INT 8
8667: PPUSH
8668: CALL_OW 302
8672: NOT
8673: AND
8674: PUSH
8675: LD_OWVAR 67
8679: PUSH
8680: LD_INT 1
8682: GREATER
8683: AND
8684: PUSH
8685: LD_EXP 13
8689: NOT
8690: AND
8691: IFFALSE 8708
8693: GO 8695
8695: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8696: LD_EXP 16
8700: PPUSH
8701: LD_STRING DH-prison-missing
8703: PPUSH
8704: CALL_OW 88
// end ;
8708: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8709: LD_EXP 12
8713: PUSH
8714: LD_INT 3
8716: PPUSH
8717: CALL_OW 302
8721: NOT
8722: AND
8723: PUSH
8724: LD_EXP 13
8728: NOT
8729: AND
8730: IFFALSE 8747
8732: GO 8734
8734: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8735: LD_EXP 16
8739: PPUSH
8740: LD_STRING DH-prison-missing-a
8742: PPUSH
8743: CALL_OW 88
// end ;
8747: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8748: LD_EXP 12
8752: PUSH
8753: LD_INT 10
8755: PPUSH
8756: CALL_OW 302
8760: NOT
8761: AND
8762: PUSH
8763: LD_EXP 13
8767: NOT
8768: AND
8769: IFFALSE 8786
8771: GO 8773
8773: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8774: LD_EXP 16
8778: PPUSH
8779: LD_STRING DH-prison-missing-a
8781: PPUSH
8782: CALL_OW 88
// end ;
8786: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8787: LD_EXP 13
8791: NOT
8792: PUSH
8793: LD_EXP 12
8797: AND
8798: PUSH
8799: LD_INT 2
8801: PPUSH
8802: LD_EXP 20
8806: PPUSH
8807: CALL_OW 292
8811: AND
8812: IFFALSE 8899
8814: GO 8816
8816: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8817: LD_EXP 20
8821: PPUSH
8822: LD_EXP 16
8826: PPUSH
8827: CALL_OW 119
// DialogueOn ;
8831: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8835: LD_EXP 20
8839: PPUSH
8840: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8844: LD_EXP 20
8848: PPUSH
8849: LD_STRING DK-prison-found
8851: PPUSH
8852: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8856: LD_EXP 16
8860: PPUSH
8861: LD_STRING DH-prison-found
8863: PPUSH
8864: CALL_OW 88
// DialogueOff ;
8868: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8872: LD_EXP 20
8876: PPUSH
8877: LD_INT 2
8879: PPUSH
8880: CALL_OW 235
// prisonFound := true ;
8884: LD_ADDR_EXP 13
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8892: LD_STRING O6_prison_out
8894: PPUSH
8895: CALL_OW 337
// end ;
8899: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8900: LD_EXP 16
8904: PPUSH
8905: CALL_OW 256
8909: PUSH
8910: LD_INT 500
8912: LESS
8913: IFFALSE 8926
8915: GO 8917
8917: DISABLE
// heikeHurt := true ;
8918: LD_ADDR_EXP 14
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
8926: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8927: LD_INT 22
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 69
8955: IFFALSE 9271
8957: GO 8959
8959: DISABLE
8960: LD_INT 0
8962: PPUSH
8963: PPUSH
8964: PPUSH
// begin uc_side := 3 ;
8965: LD_ADDR_OWVAR 20
8969: PUSH
8970: LD_INT 3
8972: ST_TO_ADDR
// uc_nation := 3 ;
8973: LD_ADDR_OWVAR 21
8977: PUSH
8978: LD_INT 3
8980: ST_TO_ADDR
// tmp := [ ] ;
8981: LD_ADDR_VAR 0 2
8985: PUSH
8986: EMPTY
8987: ST_TO_ADDR
// for i := 1 to 8 do
8988: LD_ADDR_VAR 0 1
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_INT 8
9000: PUSH
9001: FOR_TO
9002: IFFALSE 9110
// begin PrepareHuman ( false , 1 , 4 ) ;
9004: LD_INT 0
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 380
// un := CreateHuman ;
9017: LD_ADDR_VAR 0 3
9021: PUSH
9022: CALL_OW 44
9026: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_INT 4
9034: PPUSH
9035: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9039: LD_VAR 0 3
9043: PPUSH
9044: LD_INT 158
9046: PPUSH
9047: LD_INT 80
9049: PPUSH
9050: LD_INT 0
9052: PPUSH
9053: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9057: LD_VAR 0 3
9061: PPUSH
9062: LD_INT 147
9064: PPUSH
9065: LD_INT 75
9067: PPUSH
9068: CALL_OW 111
// wait ( 0 0$1 ) ;
9072: LD_INT 35
9074: PPUSH
9075: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_VAR 0 2
9088: PPUSH
9089: LD_VAR 0 2
9093: PUSH
9094: LD_INT 1
9096: PLUS
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// end ;
9108: GO 9001
9110: POP
9111: POP
// repeat wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// for i in tmp do
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_VAR 0 2
9128: PUSH
9129: FOR_IN
9130: IFFALSE 9251
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_INT 22
9139: PUSH
9140: LD_INT 3
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 69
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 74
9161: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9162: LD_VAR 0 3
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: CALL_OW 250
9175: PPUSH
9176: LD_VAR 0 3
9180: PUSH
9181: LD_INT 1
9183: ARRAY
9184: PPUSH
9185: CALL_OW 251
9189: PPUSH
9190: CALL_OW 428
9194: IFFALSE 9235
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_VAR 0 3
9205: PUSH
9206: LD_INT 1
9208: ARRAY
9209: PPUSH
9210: CALL_OW 250
9214: PPUSH
9215: LD_VAR 0 3
9219: PUSH
9220: LD_INT 1
9222: ARRAY
9223: PPUSH
9224: CALL_OW 251
9228: PPUSH
9229: CALL_OW 114
9233: GO 9249
// ComAttackUnit ( i , Heike ) ;
9235: LD_VAR 0 1
9239: PPUSH
9240: LD_EXP 16
9244: PPUSH
9245: CALL_OW 115
// end ;
9249: GO 9129
9251: POP
9252: POP
// until IsDead ( Heike ) or not tmp ;
9253: LD_EXP 16
9257: PPUSH
9258: CALL_OW 301
9262: PUSH
9263: LD_VAR 0 2
9267: NOT
9268: OR
9269: IFFALSE 9112
// end ;
9271: PPOPN 3
9273: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9274: LD_EXP 12
9278: PUSH
9279: LD_EXP 16
9283: PPUSH
9284: CALL_OW 302
9288: AND
9289: PUSH
9290: LD_INT 1
9292: PPUSH
9293: LD_INT 21
9295: PUSH
9296: LD_INT 1
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 22
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 50
9315: PUSH
9316: EMPTY
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 71
9328: PUSH
9329: LD_INT 0
9331: EQUAL
9332: AND
9333: IFFALSE 9663
9335: GO 9337
9337: DISABLE
9338: LD_INT 0
9340: PPUSH
// begin if not heikeHurt then
9341: LD_EXP 14
9345: NOT
9346: IFFALSE 9355
// SetAchievement ( ACH_INVINCIBLE ) ;
9348: LD_STRING ACH_INVINCIBLE
9350: PPUSH
9351: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9355: LD_ADDR_VAR 0 1
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 21
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 50
9382: PUSH
9383: EMPTY
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PPUSH
9391: CALL_OW 69
9395: ST_TO_ADDR
// if prisonFound then
9396: LD_EXP 13
9400: IFFALSE 9414
// AddMedal ( med1 , 1 ) else
9402: LD_STRING med1
9404: PPUSH
9405: LD_INT 1
9407: PPUSH
9408: CALL_OW 101
9412: GO 9425
// AddMedal ( med1 , - 1 ) ;
9414: LD_STRING med1
9416: PPUSH
9417: LD_INT 1
9419: NEG
9420: PPUSH
9421: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9425: LD_VAR 0 1
9429: PUSH
9430: LD_INT 3
9432: LESS
9433: PUSH
9434: LD_EXP 13
9438: NOT
9439: AND
9440: PUSH
9441: LD_VAR 0 1
9445: PUSH
9446: LD_INT 4
9448: LESS
9449: PUSH
9450: LD_EXP 13
9454: AND
9455: OR
9456: IFFALSE 9471
// AddMedal ( med2 , - 1 ) else
9458: LD_STRING med2
9460: PPUSH
9461: LD_INT 1
9463: NEG
9464: PPUSH
9465: CALL_OW 101
9469: GO 9481
// AddMedal ( med2 , 1 ) ;
9471: LD_STRING med2
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9481: LD_EXP 13
9485: PUSH
9486: LD_EXP 4
9490: AND
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 4
9499: GREATEREQUAL
9500: AND
9501: IFFALSE 9515
// AddMedal ( med3 , 1 ) else
9503: LD_STRING med3
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: CALL_OW 101
9513: GO 9526
// AddMedal ( med3 , - 1 ) ;
9515: LD_STRING med3
9517: PPUSH
9518: LD_INT 1
9520: NEG
9521: PPUSH
9522: CALL_OW 101
// GiveMedals ( MAIN ) ;
9526: LD_STRING MAIN
9528: PPUSH
9529: CALL_OW 102
// RewardPeople ( tmp ) ;
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9542: LD_EXP 16
9546: PPUSH
9547: LD_STRING 01_Heike
9549: PPUSH
9550: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9554: LD_EXP 18
9558: PPUSH
9559: CALL_OW 302
9563: PUSH
9564: LD_EXP 18
9568: PUSH
9569: LD_VAR 0 1
9573: IN
9574: AND
9575: IFFALSE 9589
// SaveCharacters ( Givi , 01_Givi ) ;
9577: LD_EXP 18
9581: PPUSH
9582: LD_STRING 01_Givi
9584: PPUSH
9585: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9589: LD_EXP 19
9593: PPUSH
9594: CALL_OW 302
9598: PUSH
9599: LD_EXP 19
9603: PUSH
9604: LD_VAR 0 1
9608: IN
9609: AND
9610: IFFALSE 9624
// SaveCharacters ( Mike , 01_Mike ) ;
9612: LD_EXP 19
9616: PPUSH
9617: LD_STRING 01_Mike
9619: PPUSH
9620: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9624: LD_EXP 20
9628: PPUSH
9629: CALL_OW 302
9633: PUSH
9634: LD_EXP 20
9638: PUSH
9639: LD_VAR 0 1
9643: IN
9644: AND
9645: IFFALSE 9659
// SaveCharacters ( Kamil , 01_Kamil ) ;
9647: LD_EXP 20
9651: PPUSH
9652: LD_STRING 01_Kamil
9654: PPUSH
9655: CALL_OW 38
// YouWin ;
9659: CALL_OW 103
// end ; end_of_file
9663: PPOPN 1
9665: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9666: LD_VAR 0 1
9670: PUSH
9671: LD_EXP 16
9675: EQUAL
9676: IFFALSE 9685
// YouLost ( Heike ) ;
9678: LD_STRING Heike
9680: PPUSH
9681: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9685: LD_VAR 0 1
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 25
9702: PUSH
9703: LD_INT 1
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: IN
9719: IFFALSE 9825
// begin if un in russianPatrol then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_EXP 21
9730: IN
9731: IFFALSE 9749
// russianPatrol := russianPatrol diff un ;
9733: LD_ADDR_EXP 21
9737: PUSH
9738: LD_EXP 21
9742: PUSH
9743: LD_VAR 0 1
9747: DIFF
9748: ST_TO_ADDR
// if un in russianForestPatrol then
9749: LD_VAR 0 1
9753: PUSH
9754: LD_EXP 22
9758: IN
9759: IFFALSE 9777
// russianForestPatrol := russianForestPatrol diff un ;
9761: LD_ADDR_EXP 22
9765: PUSH
9766: LD_EXP 22
9770: PUSH
9771: LD_VAR 0 1
9775: DIFF
9776: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9777: LD_ADDR_EXP 5
9781: PUSH
9782: LD_EXP 5
9786: PPUSH
9787: LD_EXP 5
9791: PUSH
9792: LD_INT 1
9794: PLUS
9795: PPUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 250
9805: PUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL_OW 251
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PPUSH
9820: CALL_OW 1
9824: ST_TO_ADDR
// end ; end ;
9825: PPOPN 1
9827: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9828: LD_VAR 0 1
9832: PUSH
9833: LD_EXP 16
9837: EQUAL
9838: IFFALSE 9847
// YouLost ( Heike ) ;
9840: LD_STRING Heike
9842: PPUSH
9843: CALL_OW 104
// end ;
9847: PPOPN 1
9849: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9850: LD_VAR 0 1
9854: PUSH
9855: LD_INT 2
9857: EQUAL
9858: PUSH
9859: LD_VAR 0 2
9863: PUSH
9864: LD_INT 5
9866: EQUAL
9867: AND
9868: IFFALSE 9877
// YouLost ( FriendlyFire ) ;
9870: LD_STRING FriendlyFire
9872: PPUSH
9873: CALL_OW 104
// end ;
9877: PPOPN 2
9879: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9880: LD_EXP 17
9884: PPUSH
9885: CALL_OW 256
9889: PUSH
9890: LD_INT 250
9892: LESS
9893: IFFALSE 9905
9895: GO 9897
9897: DISABLE
// YouLost ( Olaf ) ; end_of_file
9898: LD_STRING Olaf
9900: PPUSH
9901: CALL_OW 104
9905: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9906: GO 9908
9908: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9909: LD_STRING initStreamRollete();
9911: PPUSH
9912: CALL_OW 559
// InitStreamMode ;
9916: CALL 9925 0 0
// DefineStreamItems ( ) ;
9920: CALL 10365 0 0
// end ;
9924: END
// function InitStreamMode ; begin
9925: LD_INT 0
9927: PPUSH
// streamModeActive := false ;
9928: LD_ADDR_EXP 26
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// normalCounter := 36 ;
9936: LD_ADDR_EXP 27
9940: PUSH
9941: LD_INT 36
9943: ST_TO_ADDR
// hardcoreCounter := 16 ;
9944: LD_ADDR_EXP 28
9948: PUSH
9949: LD_INT 16
9951: ST_TO_ADDR
// sRocket := false ;
9952: LD_ADDR_EXP 31
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// sSpeed := false ;
9960: LD_ADDR_EXP 30
9964: PUSH
9965: LD_INT 0
9967: ST_TO_ADDR
// sEngine := false ;
9968: LD_ADDR_EXP 32
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// sSpec := false ;
9976: LD_ADDR_EXP 29
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// sLevel := false ;
9984: LD_ADDR_EXP 33
9988: PUSH
9989: LD_INT 0
9991: ST_TO_ADDR
// sArmoury := false ;
9992: LD_ADDR_EXP 34
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// sRadar := false ;
10000: LD_ADDR_EXP 35
10004: PUSH
10005: LD_INT 0
10007: ST_TO_ADDR
// sBunker := false ;
10008: LD_ADDR_EXP 36
10012: PUSH
10013: LD_INT 0
10015: ST_TO_ADDR
// sHack := false ;
10016: LD_ADDR_EXP 37
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sFire := false ;
10024: LD_ADDR_EXP 38
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// sRefresh := false ;
10032: LD_ADDR_EXP 39
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// sExp := false ;
10040: LD_ADDR_EXP 40
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// sDepot := false ;
10048: LD_ADDR_EXP 41
10052: PUSH
10053: LD_INT 0
10055: ST_TO_ADDR
// sFlag := false ;
10056: LD_ADDR_EXP 42
10060: PUSH
10061: LD_INT 0
10063: ST_TO_ADDR
// sKamikadze := false ;
10064: LD_ADDR_EXP 50
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// sTroll := false ;
10072: LD_ADDR_EXP 51
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// sSlow := false ;
10080: LD_ADDR_EXP 52
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// sLack := false ;
10088: LD_ADDR_EXP 53
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// sTank := false ;
10096: LD_ADDR_EXP 55
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// sRemote := false ;
10104: LD_ADDR_EXP 56
10108: PUSH
10109: LD_INT 0
10111: ST_TO_ADDR
// sPowell := false ;
10112: LD_ADDR_EXP 57
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// sTeleport := false ;
10120: LD_ADDR_EXP 60
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// sOilTower := false ;
10128: LD_ADDR_EXP 62
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// sShovel := false ;
10136: LD_ADDR_EXP 63
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// sSheik := false ;
10144: LD_ADDR_EXP 64
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// sEarthquake := false ;
10152: LD_ADDR_EXP 66
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// sAI := false ;
10160: LD_ADDR_EXP 67
10164: PUSH
10165: LD_INT 0
10167: ST_TO_ADDR
// sCargo := false ;
10168: LD_ADDR_EXP 70
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// sDLaser := false ;
10176: LD_ADDR_EXP 71
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// sExchange := false ;
10184: LD_ADDR_EXP 72
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// sFac := false ;
10192: LD_ADDR_EXP 73
10196: PUSH
10197: LD_INT 0
10199: ST_TO_ADDR
// sPower := false ;
10200: LD_ADDR_EXP 74
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// sRandom := false ;
10208: LD_ADDR_EXP 75
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// sShield := false ;
10216: LD_ADDR_EXP 76
10220: PUSH
10221: LD_INT 0
10223: ST_TO_ADDR
// sTime := false ;
10224: LD_ADDR_EXP 77
10228: PUSH
10229: LD_INT 0
10231: ST_TO_ADDR
// sTools := false ;
10232: LD_ADDR_EXP 78
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// sSold := false ;
10240: LD_ADDR_EXP 43
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// sDiff := false ;
10248: LD_ADDR_EXP 44
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// sFog := false ;
10256: LD_ADDR_EXP 47
10260: PUSH
10261: LD_INT 0
10263: ST_TO_ADDR
// sReset := false ;
10264: LD_ADDR_EXP 48
10268: PUSH
10269: LD_INT 0
10271: ST_TO_ADDR
// sSun := false ;
10272: LD_ADDR_EXP 49
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// sTiger := false ;
10280: LD_ADDR_EXP 45
10284: PUSH
10285: LD_INT 0
10287: ST_TO_ADDR
// sBomb := false ;
10288: LD_ADDR_EXP 46
10292: PUSH
10293: LD_INT 0
10295: ST_TO_ADDR
// sWound := false ;
10296: LD_ADDR_EXP 54
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// sBetray := false ;
10304: LD_ADDR_EXP 58
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// sContamin := false ;
10312: LD_ADDR_EXP 59
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// sOil := false ;
10320: LD_ADDR_EXP 61
10324: PUSH
10325: LD_INT 0
10327: ST_TO_ADDR
// sStu := false ;
10328: LD_ADDR_EXP 65
10332: PUSH
10333: LD_INT 0
10335: ST_TO_ADDR
// sBazooka := false ;
10336: LD_ADDR_EXP 68
10340: PUSH
10341: LD_INT 0
10343: ST_TO_ADDR
// sMortar := false ;
10344: LD_ADDR_EXP 69
10348: PUSH
10349: LD_INT 0
10351: ST_TO_ADDR
// sRanger := false ;
10352: LD_ADDR_EXP 79
10356: PUSH
10357: LD_INT 0
10359: ST_TO_ADDR
// end ;
10360: LD_VAR 0 1
10364: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
// result := [ ] ;
10372: LD_ADDR_VAR 0 1
10376: PUSH
10377: EMPTY
10378: ST_TO_ADDR
// if campaign_id = 1 then
10379: LD_OWVAR 69
10383: PUSH
10384: LD_INT 1
10386: EQUAL
10387: IFFALSE 13325
// begin case mission_number of 1 :
10389: LD_OWVAR 70
10393: PUSH
10394: LD_INT 1
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 10466
10402: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10403: LD_ADDR_VAR 0 1
10407: PUSH
10408: LD_INT 2
10410: PUSH
10411: LD_INT 4
10413: PUSH
10414: LD_INT 11
10416: PUSH
10417: LD_INT 12
10419: PUSH
10420: LD_INT 15
10422: PUSH
10423: LD_INT 16
10425: PUSH
10426: LD_INT 22
10428: PUSH
10429: LD_INT 23
10431: PUSH
10432: LD_INT 26
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 101
10448: PUSH
10449: LD_INT 102
10451: PUSH
10452: LD_INT 106
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: ST_TO_ADDR
10464: GO 13323
10466: LD_INT 2
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10546
10474: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10475: LD_ADDR_VAR 0 1
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 11
10488: PUSH
10489: LD_INT 12
10491: PUSH
10492: LD_INT 15
10494: PUSH
10495: LD_INT 16
10497: PUSH
10498: LD_INT 22
10500: PUSH
10501: LD_INT 23
10503: PUSH
10504: LD_INT 26
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 101
10520: PUSH
10521: LD_INT 102
10523: PUSH
10524: LD_INT 105
10526: PUSH
10527: LD_INT 106
10529: PUSH
10530: LD_INT 108
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: ST_TO_ADDR
10544: GO 13323
10546: LD_INT 3
10548: DOUBLE
10549: EQUAL
10550: IFTRUE 10554
10552: GO 10630
10554: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 4
10565: PUSH
10566: LD_INT 5
10568: PUSH
10569: LD_INT 11
10571: PUSH
10572: LD_INT 12
10574: PUSH
10575: LD_INT 15
10577: PUSH
10578: LD_INT 16
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_INT 26
10586: PUSH
10587: LD_INT 36
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 101
10604: PUSH
10605: LD_INT 102
10607: PUSH
10608: LD_INT 105
10610: PUSH
10611: LD_INT 106
10613: PUSH
10614: LD_INT 108
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: ST_TO_ADDR
10628: GO 13323
10630: LD_INT 4
10632: DOUBLE
10633: EQUAL
10634: IFTRUE 10638
10636: GO 10722
10638: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10639: LD_ADDR_VAR 0 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 4
10649: PUSH
10650: LD_INT 5
10652: PUSH
10653: LD_INT 8
10655: PUSH
10656: LD_INT 11
10658: PUSH
10659: LD_INT 12
10661: PUSH
10662: LD_INT 15
10664: PUSH
10665: LD_INT 16
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 23
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 36
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 101
10696: PUSH
10697: LD_INT 102
10699: PUSH
10700: LD_INT 105
10702: PUSH
10703: LD_INT 106
10705: PUSH
10706: LD_INT 108
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: ST_TO_ADDR
10720: GO 13323
10722: LD_INT 5
10724: DOUBLE
10725: EQUAL
10726: IFTRUE 10730
10728: GO 10830
10730: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10731: LD_ADDR_VAR 0 1
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 4
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: LD_INT 6
10747: PUSH
10748: LD_INT 8
10750: PUSH
10751: LD_INT 11
10753: PUSH
10754: LD_INT 12
10756: PUSH
10757: LD_INT 15
10759: PUSH
10760: LD_INT 16
10762: PUSH
10763: LD_INT 22
10765: PUSH
10766: LD_INT 23
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 26
10774: PUSH
10775: LD_INT 36
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 101
10796: PUSH
10797: LD_INT 102
10799: PUSH
10800: LD_INT 105
10802: PUSH
10803: LD_INT 106
10805: PUSH
10806: LD_INT 108
10808: PUSH
10809: LD_INT 109
10811: PUSH
10812: LD_INT 112
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: ST_TO_ADDR
10828: GO 13323
10830: LD_INT 6
10832: DOUBLE
10833: EQUAL
10834: IFTRUE 10838
10836: GO 10958
10838: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10839: LD_ADDR_VAR 0 1
10843: PUSH
10844: LD_INT 2
10846: PUSH
10847: LD_INT 4
10849: PUSH
10850: LD_INT 5
10852: PUSH
10853: LD_INT 6
10855: PUSH
10856: LD_INT 8
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 15
10867: PUSH
10868: LD_INT 16
10870: PUSH
10871: LD_INT 20
10873: PUSH
10874: LD_INT 21
10876: PUSH
10877: LD_INT 22
10879: PUSH
10880: LD_INT 23
10882: PUSH
10883: LD_INT 25
10885: PUSH
10886: LD_INT 26
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: LD_INT 31
10894: PUSH
10895: LD_INT 32
10897: PUSH
10898: LD_INT 36
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 101
10924: PUSH
10925: LD_INT 102
10927: PUSH
10928: LD_INT 105
10930: PUSH
10931: LD_INT 106
10933: PUSH
10934: LD_INT 108
10936: PUSH
10937: LD_INT 109
10939: PUSH
10940: LD_INT 112
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: ST_TO_ADDR
10956: GO 13323
10958: LD_INT 7
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 11066
10966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 4
10977: PUSH
10978: LD_INT 5
10980: PUSH
10981: LD_INT 7
10983: PUSH
10984: LD_INT 11
10986: PUSH
10987: LD_INT 12
10989: PUSH
10990: LD_INT 15
10992: PUSH
10993: LD_INT 16
10995: PUSH
10996: LD_INT 20
10998: PUSH
10999: LD_INT 21
11001: PUSH
11002: LD_INT 22
11004: PUSH
11005: LD_INT 23
11007: PUSH
11008: LD_INT 25
11010: PUSH
11011: LD_INT 26
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 101
11032: PUSH
11033: LD_INT 102
11035: PUSH
11036: LD_INT 103
11038: PUSH
11039: LD_INT 105
11041: PUSH
11042: LD_INT 106
11044: PUSH
11045: LD_INT 108
11047: PUSH
11048: LD_INT 112
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: ST_TO_ADDR
11064: GO 13323
11066: LD_INT 8
11068: DOUBLE
11069: EQUAL
11070: IFTRUE 11074
11072: GO 11202
11074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11075: LD_ADDR_VAR 0 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 4
11085: PUSH
11086: LD_INT 5
11088: PUSH
11089: LD_INT 6
11091: PUSH
11092: LD_INT 7
11094: PUSH
11095: LD_INT 8
11097: PUSH
11098: LD_INT 11
11100: PUSH
11101: LD_INT 12
11103: PUSH
11104: LD_INT 15
11106: PUSH
11107: LD_INT 16
11109: PUSH
11110: LD_INT 20
11112: PUSH
11113: LD_INT 21
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 23
11121: PUSH
11122: LD_INT 25
11124: PUSH
11125: LD_INT 26
11127: PUSH
11128: LD_INT 30
11130: PUSH
11131: LD_INT 31
11133: PUSH
11134: LD_INT 32
11136: PUSH
11137: LD_INT 36
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 101
11164: PUSH
11165: LD_INT 102
11167: PUSH
11168: LD_INT 103
11170: PUSH
11171: LD_INT 105
11173: PUSH
11174: LD_INT 106
11176: PUSH
11177: LD_INT 108
11179: PUSH
11180: LD_INT 109
11182: PUSH
11183: LD_INT 112
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: ST_TO_ADDR
11200: GO 13323
11202: LD_INT 9
11204: DOUBLE
11205: EQUAL
11206: IFTRUE 11210
11208: GO 11346
11210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11211: LD_ADDR_VAR 0 1
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: LD_INT 4
11221: PUSH
11222: LD_INT 5
11224: PUSH
11225: LD_INT 6
11227: PUSH
11228: LD_INT 7
11230: PUSH
11231: LD_INT 8
11233: PUSH
11234: LD_INT 11
11236: PUSH
11237: LD_INT 12
11239: PUSH
11240: LD_INT 15
11242: PUSH
11243: LD_INT 16
11245: PUSH
11246: LD_INT 20
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 23
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 26
11263: PUSH
11264: LD_INT 28
11266: PUSH
11267: LD_INT 30
11269: PUSH
11270: LD_INT 31
11272: PUSH
11273: LD_INT 32
11275: PUSH
11276: LD_INT 36
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 101
11304: PUSH
11305: LD_INT 102
11307: PUSH
11308: LD_INT 103
11310: PUSH
11311: LD_INT 105
11313: PUSH
11314: LD_INT 106
11316: PUSH
11317: LD_INT 108
11319: PUSH
11320: LD_INT 109
11322: PUSH
11323: LD_INT 112
11325: PUSH
11326: LD_INT 114
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: ST_TO_ADDR
11344: GO 13323
11346: LD_INT 10
11348: DOUBLE
11349: EQUAL
11350: IFTRUE 11354
11352: GO 11538
11354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11355: LD_ADDR_VAR 0 1
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 4
11365: PUSH
11366: LD_INT 5
11368: PUSH
11369: LD_INT 6
11371: PUSH
11372: LD_INT 7
11374: PUSH
11375: LD_INT 8
11377: PUSH
11378: LD_INT 9
11380: PUSH
11381: LD_INT 10
11383: PUSH
11384: LD_INT 11
11386: PUSH
11387: LD_INT 12
11389: PUSH
11390: LD_INT 13
11392: PUSH
11393: LD_INT 14
11395: PUSH
11396: LD_INT 15
11398: PUSH
11399: LD_INT 16
11401: PUSH
11402: LD_INT 17
11404: PUSH
11405: LD_INT 18
11407: PUSH
11408: LD_INT 19
11410: PUSH
11411: LD_INT 20
11413: PUSH
11414: LD_INT 21
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 23
11422: PUSH
11423: LD_INT 24
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 26
11431: PUSH
11432: LD_INT 28
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 36
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 101
11480: PUSH
11481: LD_INT 102
11483: PUSH
11484: LD_INT 103
11486: PUSH
11487: LD_INT 104
11489: PUSH
11490: LD_INT 105
11492: PUSH
11493: LD_INT 106
11495: PUSH
11496: LD_INT 107
11498: PUSH
11499: LD_INT 108
11501: PUSH
11502: LD_INT 109
11504: PUSH
11505: LD_INT 110
11507: PUSH
11508: LD_INT 111
11510: PUSH
11511: LD_INT 112
11513: PUSH
11514: LD_INT 114
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: ST_TO_ADDR
11536: GO 13323
11538: LD_INT 11
11540: DOUBLE
11541: EQUAL
11542: IFTRUE 11546
11544: GO 11738
11546: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11547: LD_ADDR_VAR 0 1
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: LD_INT 4
11560: PUSH
11561: LD_INT 5
11563: PUSH
11564: LD_INT 6
11566: PUSH
11567: LD_INT 7
11569: PUSH
11570: LD_INT 8
11572: PUSH
11573: LD_INT 9
11575: PUSH
11576: LD_INT 10
11578: PUSH
11579: LD_INT 11
11581: PUSH
11582: LD_INT 12
11584: PUSH
11585: LD_INT 13
11587: PUSH
11588: LD_INT 14
11590: PUSH
11591: LD_INT 15
11593: PUSH
11594: LD_INT 16
11596: PUSH
11597: LD_INT 17
11599: PUSH
11600: LD_INT 18
11602: PUSH
11603: LD_INT 19
11605: PUSH
11606: LD_INT 20
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 23
11617: PUSH
11618: LD_INT 24
11620: PUSH
11621: LD_INT 25
11623: PUSH
11624: LD_INT 26
11626: PUSH
11627: LD_INT 28
11629: PUSH
11630: LD_INT 30
11632: PUSH
11633: LD_INT 31
11635: PUSH
11636: LD_INT 32
11638: PUSH
11639: LD_INT 34
11641: PUSH
11642: LD_INT 36
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 101
11680: PUSH
11681: LD_INT 102
11683: PUSH
11684: LD_INT 103
11686: PUSH
11687: LD_INT 104
11689: PUSH
11690: LD_INT 105
11692: PUSH
11693: LD_INT 106
11695: PUSH
11696: LD_INT 107
11698: PUSH
11699: LD_INT 108
11701: PUSH
11702: LD_INT 109
11704: PUSH
11705: LD_INT 110
11707: PUSH
11708: LD_INT 111
11710: PUSH
11711: LD_INT 112
11713: PUSH
11714: LD_INT 114
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: ST_TO_ADDR
11736: GO 13323
11738: LD_INT 12
11740: DOUBLE
11741: EQUAL
11742: IFTRUE 11746
11744: GO 11954
11746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11747: LD_ADDR_VAR 0 1
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: LD_INT 4
11763: PUSH
11764: LD_INT 5
11766: PUSH
11767: LD_INT 6
11769: PUSH
11770: LD_INT 7
11772: PUSH
11773: LD_INT 8
11775: PUSH
11776: LD_INT 9
11778: PUSH
11779: LD_INT 10
11781: PUSH
11782: LD_INT 11
11784: PUSH
11785: LD_INT 12
11787: PUSH
11788: LD_INT 13
11790: PUSH
11791: LD_INT 14
11793: PUSH
11794: LD_INT 15
11796: PUSH
11797: LD_INT 16
11799: PUSH
11800: LD_INT 17
11802: PUSH
11803: LD_INT 18
11805: PUSH
11806: LD_INT 19
11808: PUSH
11809: LD_INT 20
11811: PUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 23
11820: PUSH
11821: LD_INT 24
11823: PUSH
11824: LD_INT 25
11826: PUSH
11827: LD_INT 26
11829: PUSH
11830: LD_INT 27
11832: PUSH
11833: LD_INT 28
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 31
11841: PUSH
11842: LD_INT 32
11844: PUSH
11845: LD_INT 33
11847: PUSH
11848: LD_INT 34
11850: PUSH
11851: LD_INT 36
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 101
11892: PUSH
11893: LD_INT 102
11895: PUSH
11896: LD_INT 103
11898: PUSH
11899: LD_INT 104
11901: PUSH
11902: LD_INT 105
11904: PUSH
11905: LD_INT 106
11907: PUSH
11908: LD_INT 107
11910: PUSH
11911: LD_INT 108
11913: PUSH
11914: LD_INT 109
11916: PUSH
11917: LD_INT 110
11919: PUSH
11920: LD_INT 111
11922: PUSH
11923: LD_INT 112
11925: PUSH
11926: LD_INT 113
11928: PUSH
11929: LD_INT 114
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: ST_TO_ADDR
11952: GO 13323
11954: LD_INT 13
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 12158
11962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11963: LD_ADDR_VAR 0 1
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: LD_INT 3
11976: PUSH
11977: LD_INT 4
11979: PUSH
11980: LD_INT 5
11982: PUSH
11983: LD_INT 8
11985: PUSH
11986: LD_INT 9
11988: PUSH
11989: LD_INT 10
11991: PUSH
11992: LD_INT 11
11994: PUSH
11995: LD_INT 12
11997: PUSH
11998: LD_INT 14
12000: PUSH
12001: LD_INT 15
12003: PUSH
12004: LD_INT 16
12006: PUSH
12007: LD_INT 17
12009: PUSH
12010: LD_INT 18
12012: PUSH
12013: LD_INT 19
12015: PUSH
12016: LD_INT 20
12018: PUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 23
12027: PUSH
12028: LD_INT 24
12030: PUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 26
12036: PUSH
12037: LD_INT 27
12039: PUSH
12040: LD_INT 28
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 31
12048: PUSH
12049: LD_INT 32
12051: PUSH
12052: LD_INT 33
12054: PUSH
12055: LD_INT 34
12057: PUSH
12058: LD_INT 36
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 101
12096: PUSH
12097: LD_INT 102
12099: PUSH
12100: LD_INT 103
12102: PUSH
12103: LD_INT 104
12105: PUSH
12106: LD_INT 105
12108: PUSH
12109: LD_INT 106
12111: PUSH
12112: LD_INT 107
12114: PUSH
12115: LD_INT 108
12117: PUSH
12118: LD_INT 109
12120: PUSH
12121: LD_INT 110
12123: PUSH
12124: LD_INT 111
12126: PUSH
12127: LD_INT 112
12129: PUSH
12130: LD_INT 113
12132: PUSH
12133: LD_INT 114
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: ST_TO_ADDR
12156: GO 13323
12158: LD_INT 14
12160: DOUBLE
12161: EQUAL
12162: IFTRUE 12166
12164: GO 12378
12166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: LD_INT 1
12174: PUSH
12175: LD_INT 2
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: LD_INT 4
12183: PUSH
12184: LD_INT 5
12186: PUSH
12187: LD_INT 6
12189: PUSH
12190: LD_INT 7
12192: PUSH
12193: LD_INT 8
12195: PUSH
12196: LD_INT 9
12198: PUSH
12199: LD_INT 10
12201: PUSH
12202: LD_INT 11
12204: PUSH
12205: LD_INT 12
12207: PUSH
12208: LD_INT 13
12210: PUSH
12211: LD_INT 14
12213: PUSH
12214: LD_INT 15
12216: PUSH
12217: LD_INT 16
12219: PUSH
12220: LD_INT 17
12222: PUSH
12223: LD_INT 18
12225: PUSH
12226: LD_INT 19
12228: PUSH
12229: LD_INT 20
12231: PUSH
12232: LD_INT 21
12234: PUSH
12235: LD_INT 22
12237: PUSH
12238: LD_INT 23
12240: PUSH
12241: LD_INT 24
12243: PUSH
12244: LD_INT 25
12246: PUSH
12247: LD_INT 26
12249: PUSH
12250: LD_INT 27
12252: PUSH
12253: LD_INT 28
12255: PUSH
12256: LD_INT 29
12258: PUSH
12259: LD_INT 30
12261: PUSH
12262: LD_INT 31
12264: PUSH
12265: LD_INT 32
12267: PUSH
12268: LD_INT 33
12270: PUSH
12271: LD_INT 34
12273: PUSH
12274: LD_INT 36
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 101
12316: PUSH
12317: LD_INT 102
12319: PUSH
12320: LD_INT 103
12322: PUSH
12323: LD_INT 104
12325: PUSH
12326: LD_INT 105
12328: PUSH
12329: LD_INT 106
12331: PUSH
12332: LD_INT 107
12334: PUSH
12335: LD_INT 108
12337: PUSH
12338: LD_INT 109
12340: PUSH
12341: LD_INT 110
12343: PUSH
12344: LD_INT 111
12346: PUSH
12347: LD_INT 112
12349: PUSH
12350: LD_INT 113
12352: PUSH
12353: LD_INT 114
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: ST_TO_ADDR
12376: GO 13323
12378: LD_INT 15
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12598
12386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12387: LD_ADDR_VAR 0 1
12391: PUSH
12392: LD_INT 1
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: LD_INT 4
12403: PUSH
12404: LD_INT 5
12406: PUSH
12407: LD_INT 6
12409: PUSH
12410: LD_INT 7
12412: PUSH
12413: LD_INT 8
12415: PUSH
12416: LD_INT 9
12418: PUSH
12419: LD_INT 10
12421: PUSH
12422: LD_INT 11
12424: PUSH
12425: LD_INT 12
12427: PUSH
12428: LD_INT 13
12430: PUSH
12431: LD_INT 14
12433: PUSH
12434: LD_INT 15
12436: PUSH
12437: LD_INT 16
12439: PUSH
12440: LD_INT 17
12442: PUSH
12443: LD_INT 18
12445: PUSH
12446: LD_INT 19
12448: PUSH
12449: LD_INT 20
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 23
12460: PUSH
12461: LD_INT 24
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 26
12469: PUSH
12470: LD_INT 27
12472: PUSH
12473: LD_INT 28
12475: PUSH
12476: LD_INT 29
12478: PUSH
12479: LD_INT 30
12481: PUSH
12482: LD_INT 31
12484: PUSH
12485: LD_INT 32
12487: PUSH
12488: LD_INT 33
12490: PUSH
12491: LD_INT 34
12493: PUSH
12494: LD_INT 36
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 101
12536: PUSH
12537: LD_INT 102
12539: PUSH
12540: LD_INT 103
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 105
12548: PUSH
12549: LD_INT 106
12551: PUSH
12552: LD_INT 107
12554: PUSH
12555: LD_INT 108
12557: PUSH
12558: LD_INT 109
12560: PUSH
12561: LD_INT 110
12563: PUSH
12564: LD_INT 111
12566: PUSH
12567: LD_INT 112
12569: PUSH
12570: LD_INT 113
12572: PUSH
12573: LD_INT 114
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: ST_TO_ADDR
12596: GO 13323
12598: LD_INT 16
12600: DOUBLE
12601: EQUAL
12602: IFTRUE 12606
12604: GO 12730
12606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: LD_INT 5
12620: PUSH
12621: LD_INT 7
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: LD_INT 12
12629: PUSH
12630: LD_INT 15
12632: PUSH
12633: LD_INT 16
12635: PUSH
12636: LD_INT 20
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_INT 23
12647: PUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 26
12653: PUSH
12654: LD_INT 30
12656: PUSH
12657: LD_INT 31
12659: PUSH
12660: LD_INT 32
12662: PUSH
12663: LD_INT 33
12665: PUSH
12666: LD_INT 34
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 101
12692: PUSH
12693: LD_INT 102
12695: PUSH
12696: LD_INT 103
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 108
12704: PUSH
12705: LD_INT 112
12707: PUSH
12708: LD_INT 113
12710: PUSH
12711: LD_INT 114
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
12728: GO 13323
12730: LD_INT 17
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12950
12738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 3
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 5
12758: PUSH
12759: LD_INT 6
12761: PUSH
12762: LD_INT 7
12764: PUSH
12765: LD_INT 8
12767: PUSH
12768: LD_INT 9
12770: PUSH
12771: LD_INT 10
12773: PUSH
12774: LD_INT 11
12776: PUSH
12777: LD_INT 12
12779: PUSH
12780: LD_INT 13
12782: PUSH
12783: LD_INT 14
12785: PUSH
12786: LD_INT 15
12788: PUSH
12789: LD_INT 16
12791: PUSH
12792: LD_INT 17
12794: PUSH
12795: LD_INT 18
12797: PUSH
12798: LD_INT 19
12800: PUSH
12801: LD_INT 20
12803: PUSH
12804: LD_INT 21
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_INT 23
12812: PUSH
12813: LD_INT 24
12815: PUSH
12816: LD_INT 25
12818: PUSH
12819: LD_INT 26
12821: PUSH
12822: LD_INT 27
12824: PUSH
12825: LD_INT 28
12827: PUSH
12828: LD_INT 29
12830: PUSH
12831: LD_INT 30
12833: PUSH
12834: LD_INT 31
12836: PUSH
12837: LD_INT 32
12839: PUSH
12840: LD_INT 33
12842: PUSH
12843: LD_INT 34
12845: PUSH
12846: LD_INT 36
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 101
12888: PUSH
12889: LD_INT 102
12891: PUSH
12892: LD_INT 103
12894: PUSH
12895: LD_INT 104
12897: PUSH
12898: LD_INT 105
12900: PUSH
12901: LD_INT 106
12903: PUSH
12904: LD_INT 107
12906: PUSH
12907: LD_INT 108
12909: PUSH
12910: LD_INT 109
12912: PUSH
12913: LD_INT 110
12915: PUSH
12916: LD_INT 111
12918: PUSH
12919: LD_INT 112
12921: PUSH
12922: LD_INT 113
12924: PUSH
12925: LD_INT 114
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: ST_TO_ADDR
12948: GO 13323
12950: LD_INT 18
12952: DOUBLE
12953: EQUAL
12954: IFTRUE 12958
12956: GO 13094
12958: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12959: LD_ADDR_VAR 0 1
12963: PUSH
12964: LD_INT 2
12966: PUSH
12967: LD_INT 4
12969: PUSH
12970: LD_INT 5
12972: PUSH
12973: LD_INT 7
12975: PUSH
12976: LD_INT 11
12978: PUSH
12979: LD_INT 12
12981: PUSH
12982: LD_INT 15
12984: PUSH
12985: LD_INT 16
12987: PUSH
12988: LD_INT 20
12990: PUSH
12991: LD_INT 21
12993: PUSH
12994: LD_INT 22
12996: PUSH
12997: LD_INT 23
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 26
13005: PUSH
13006: LD_INT 30
13008: PUSH
13009: LD_INT 31
13011: PUSH
13012: LD_INT 32
13014: PUSH
13015: LD_INT 33
13017: PUSH
13018: LD_INT 34
13020: PUSH
13021: LD_INT 35
13023: PUSH
13024: LD_INT 36
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 101
13052: PUSH
13053: LD_INT 102
13055: PUSH
13056: LD_INT 103
13058: PUSH
13059: LD_INT 106
13061: PUSH
13062: LD_INT 108
13064: PUSH
13065: LD_INT 112
13067: PUSH
13068: LD_INT 113
13070: PUSH
13071: LD_INT 114
13073: PUSH
13074: LD_INT 115
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: ST_TO_ADDR
13092: GO 13323
13094: LD_INT 19
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13322
13102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13103: LD_ADDR_VAR 0 1
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 3
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 6
13125: PUSH
13126: LD_INT 7
13128: PUSH
13129: LD_INT 8
13131: PUSH
13132: LD_INT 9
13134: PUSH
13135: LD_INT 10
13137: PUSH
13138: LD_INT 11
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: LD_INT 13
13146: PUSH
13147: LD_INT 14
13149: PUSH
13150: LD_INT 15
13152: PUSH
13153: LD_INT 16
13155: PUSH
13156: LD_INT 17
13158: PUSH
13159: LD_INT 18
13161: PUSH
13162: LD_INT 19
13164: PUSH
13165: LD_INT 20
13167: PUSH
13168: LD_INT 21
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_INT 23
13176: PUSH
13177: LD_INT 24
13179: PUSH
13180: LD_INT 25
13182: PUSH
13183: LD_INT 26
13185: PUSH
13186: LD_INT 27
13188: PUSH
13189: LD_INT 28
13191: PUSH
13192: LD_INT 29
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 31
13200: PUSH
13201: LD_INT 32
13203: PUSH
13204: LD_INT 33
13206: PUSH
13207: LD_INT 34
13209: PUSH
13210: LD_INT 35
13212: PUSH
13213: LD_INT 36
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 101
13256: PUSH
13257: LD_INT 102
13259: PUSH
13260: LD_INT 103
13262: PUSH
13263: LD_INT 104
13265: PUSH
13266: LD_INT 105
13268: PUSH
13269: LD_INT 106
13271: PUSH
13272: LD_INT 107
13274: PUSH
13275: LD_INT 108
13277: PUSH
13278: LD_INT 109
13280: PUSH
13281: LD_INT 110
13283: PUSH
13284: LD_INT 111
13286: PUSH
13287: LD_INT 112
13289: PUSH
13290: LD_INT 113
13292: PUSH
13293: LD_INT 114
13295: PUSH
13296: LD_INT 115
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 13323
13322: POP
// end else
13323: GO 13542
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: LD_INT 3
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: LD_INT 6
13347: PUSH
13348: LD_INT 7
13350: PUSH
13351: LD_INT 8
13353: PUSH
13354: LD_INT 9
13356: PUSH
13357: LD_INT 10
13359: PUSH
13360: LD_INT 11
13362: PUSH
13363: LD_INT 12
13365: PUSH
13366: LD_INT 13
13368: PUSH
13369: LD_INT 14
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 17
13380: PUSH
13381: LD_INT 18
13383: PUSH
13384: LD_INT 19
13386: PUSH
13387: LD_INT 20
13389: PUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 23
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 26
13407: PUSH
13408: LD_INT 27
13410: PUSH
13411: LD_INT 28
13413: PUSH
13414: LD_INT 29
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 31
13422: PUSH
13423: LD_INT 32
13425: PUSH
13426: LD_INT 33
13428: PUSH
13429: LD_INT 34
13431: PUSH
13432: LD_INT 35
13434: PUSH
13435: LD_INT 36
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 101
13478: PUSH
13479: LD_INT 102
13481: PUSH
13482: LD_INT 103
13484: PUSH
13485: LD_INT 104
13487: PUSH
13488: LD_INT 105
13490: PUSH
13491: LD_INT 106
13493: PUSH
13494: LD_INT 107
13496: PUSH
13497: LD_INT 108
13499: PUSH
13500: LD_INT 109
13502: PUSH
13503: LD_INT 110
13505: PUSH
13506: LD_INT 111
13508: PUSH
13509: LD_INT 112
13511: PUSH
13512: LD_INT 113
13514: PUSH
13515: LD_INT 114
13517: PUSH
13518: LD_INT 115
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: ST_TO_ADDR
// if result then
13542: LD_VAR 0 1
13546: IFFALSE 13835
// begin normal :=  ;
13548: LD_ADDR_VAR 0 3
13552: PUSH
13553: LD_STRING 
13555: ST_TO_ADDR
// hardcore :=  ;
13556: LD_ADDR_VAR 0 4
13560: PUSH
13561: LD_STRING 
13563: ST_TO_ADDR
// for i = 1 to normalCounter do
13564: LD_ADDR_VAR 0 5
13568: PUSH
13569: DOUBLE
13570: LD_INT 1
13572: DEC
13573: ST_TO_ADDR
13574: LD_EXP 27
13578: PUSH
13579: FOR_TO
13580: IFFALSE 13681
// begin tmp := 0 ;
13582: LD_ADDR_VAR 0 2
13586: PUSH
13587: LD_STRING 0
13589: ST_TO_ADDR
// if result [ 1 ] then
13590: LD_VAR 0 1
13594: PUSH
13595: LD_INT 1
13597: ARRAY
13598: IFFALSE 13663
// if result [ 1 ] [ 1 ] = i then
13600: LD_VAR 0 1
13604: PUSH
13605: LD_INT 1
13607: ARRAY
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PUSH
13613: LD_VAR 0 5
13617: EQUAL
13618: IFFALSE 13663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13620: LD_ADDR_VAR 0 1
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 3
13649: PPUSH
13650: CALL_OW 1
13654: ST_TO_ADDR
// tmp := 1 ;
13655: LD_ADDR_VAR 0 2
13659: PUSH
13660: LD_STRING 1
13662: ST_TO_ADDR
// end ; normal := normal & tmp ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_VAR 0 3
13672: PUSH
13673: LD_VAR 0 2
13677: STR
13678: ST_TO_ADDR
// end ;
13679: GO 13579
13681: POP
13682: POP
// for i = 1 to hardcoreCounter do
13683: LD_ADDR_VAR 0 5
13687: PUSH
13688: DOUBLE
13689: LD_INT 1
13691: DEC
13692: ST_TO_ADDR
13693: LD_EXP 28
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13804
// begin tmp := 0 ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_STRING 0
13708: ST_TO_ADDR
// if result [ 2 ] then
13709: LD_VAR 0 1
13713: PUSH
13714: LD_INT 2
13716: ARRAY
13717: IFFALSE 13786
// if result [ 2 ] [ 1 ] = 100 + i then
13719: LD_VAR 0 1
13723: PUSH
13724: LD_INT 2
13726: ARRAY
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PUSH
13732: LD_INT 100
13734: PUSH
13735: LD_VAR 0 5
13739: PLUS
13740: EQUAL
13741: IFFALSE 13786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13743: LD_ADDR_VAR 0 1
13747: PUSH
13748: LD_VAR 0 1
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: LD_VAR 0 1
13760: PUSH
13761: LD_INT 2
13763: ARRAY
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 3
13772: PPUSH
13773: CALL_OW 1
13777: ST_TO_ADDR
// tmp := 1 ;
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: LD_STRING 1
13785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13786: LD_ADDR_VAR 0 4
13790: PUSH
13791: LD_VAR 0 4
13795: PUSH
13796: LD_VAR 0 2
13800: STR
13801: ST_TO_ADDR
// end ;
13802: GO 13698
13804: POP
13805: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13806: LD_STRING getStreamItemsFromMission("
13808: PUSH
13809: LD_VAR 0 3
13813: STR
13814: PUSH
13815: LD_STRING ","
13817: STR
13818: PUSH
13819: LD_VAR 0 4
13823: STR
13824: PUSH
13825: LD_STRING ")
13827: STR
13828: PPUSH
13829: CALL_OW 559
// end else
13833: GO 13842
// ToLua ( getStreamItemsFromMission("","") ) ;
13835: LD_STRING getStreamItemsFromMission("","")
13837: PPUSH
13838: CALL_OW 559
// end ;
13842: LD_VAR 0 1
13846: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13847: LD_VAR 0 2
13851: PUSH
13852: LD_INT 100
13854: EQUAL
13855: IFFALSE 14804
// begin if not StreamModeActive then
13857: LD_EXP 26
13861: NOT
13862: IFFALSE 13872
// StreamModeActive := true ;
13864: LD_ADDR_EXP 26
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// if p3 = 0 then
13872: LD_VAR 0 3
13876: PUSH
13877: LD_INT 0
13879: EQUAL
13880: IFFALSE 13886
// InitStreamMode ;
13882: CALL 9925 0 0
// if p3 = 1 then
13886: LD_VAR 0 3
13890: PUSH
13891: LD_INT 1
13893: EQUAL
13894: IFFALSE 13904
// sRocket := true ;
13896: LD_ADDR_EXP 31
13900: PUSH
13901: LD_INT 1
13903: ST_TO_ADDR
// if p3 = 2 then
13904: LD_VAR 0 3
13908: PUSH
13909: LD_INT 2
13911: EQUAL
13912: IFFALSE 13922
// sSpeed := true ;
13914: LD_ADDR_EXP 30
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// if p3 = 3 then
13922: LD_VAR 0 3
13926: PUSH
13927: LD_INT 3
13929: EQUAL
13930: IFFALSE 13940
// sEngine := true ;
13932: LD_ADDR_EXP 32
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// if p3 = 4 then
13940: LD_VAR 0 3
13944: PUSH
13945: LD_INT 4
13947: EQUAL
13948: IFFALSE 13958
// sSpec := true ;
13950: LD_ADDR_EXP 29
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// if p3 = 5 then
13958: LD_VAR 0 3
13962: PUSH
13963: LD_INT 5
13965: EQUAL
13966: IFFALSE 13976
// sLevel := true ;
13968: LD_ADDR_EXP 33
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// if p3 = 6 then
13976: LD_VAR 0 3
13980: PUSH
13981: LD_INT 6
13983: EQUAL
13984: IFFALSE 13994
// sArmoury := true ;
13986: LD_ADDR_EXP 34
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// if p3 = 7 then
13994: LD_VAR 0 3
13998: PUSH
13999: LD_INT 7
14001: EQUAL
14002: IFFALSE 14012
// sRadar := true ;
14004: LD_ADDR_EXP 35
14008: PUSH
14009: LD_INT 1
14011: ST_TO_ADDR
// if p3 = 8 then
14012: LD_VAR 0 3
14016: PUSH
14017: LD_INT 8
14019: EQUAL
14020: IFFALSE 14030
// sBunker := true ;
14022: LD_ADDR_EXP 36
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
// if p3 = 9 then
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 9
14037: EQUAL
14038: IFFALSE 14048
// sHack := true ;
14040: LD_ADDR_EXP 37
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
// if p3 = 10 then
14048: LD_VAR 0 3
14052: PUSH
14053: LD_INT 10
14055: EQUAL
14056: IFFALSE 14066
// sFire := true ;
14058: LD_ADDR_EXP 38
14062: PUSH
14063: LD_INT 1
14065: ST_TO_ADDR
// if p3 = 11 then
14066: LD_VAR 0 3
14070: PUSH
14071: LD_INT 11
14073: EQUAL
14074: IFFALSE 14084
// sRefresh := true ;
14076: LD_ADDR_EXP 39
14080: PUSH
14081: LD_INT 1
14083: ST_TO_ADDR
// if p3 = 12 then
14084: LD_VAR 0 3
14088: PUSH
14089: LD_INT 12
14091: EQUAL
14092: IFFALSE 14102
// sExp := true ;
14094: LD_ADDR_EXP 40
14098: PUSH
14099: LD_INT 1
14101: ST_TO_ADDR
// if p3 = 13 then
14102: LD_VAR 0 3
14106: PUSH
14107: LD_INT 13
14109: EQUAL
14110: IFFALSE 14120
// sDepot := true ;
14112: LD_ADDR_EXP 41
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// if p3 = 14 then
14120: LD_VAR 0 3
14124: PUSH
14125: LD_INT 14
14127: EQUAL
14128: IFFALSE 14138
// sFlag := true ;
14130: LD_ADDR_EXP 42
14134: PUSH
14135: LD_INT 1
14137: ST_TO_ADDR
// if p3 = 15 then
14138: LD_VAR 0 3
14142: PUSH
14143: LD_INT 15
14145: EQUAL
14146: IFFALSE 14156
// sKamikadze := true ;
14148: LD_ADDR_EXP 50
14152: PUSH
14153: LD_INT 1
14155: ST_TO_ADDR
// if p3 = 16 then
14156: LD_VAR 0 3
14160: PUSH
14161: LD_INT 16
14163: EQUAL
14164: IFFALSE 14174
// sTroll := true ;
14166: LD_ADDR_EXP 51
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// if p3 = 17 then
14174: LD_VAR 0 3
14178: PUSH
14179: LD_INT 17
14181: EQUAL
14182: IFFALSE 14192
// sSlow := true ;
14184: LD_ADDR_EXP 52
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// if p3 = 18 then
14192: LD_VAR 0 3
14196: PUSH
14197: LD_INT 18
14199: EQUAL
14200: IFFALSE 14210
// sLack := true ;
14202: LD_ADDR_EXP 53
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// if p3 = 19 then
14210: LD_VAR 0 3
14214: PUSH
14215: LD_INT 19
14217: EQUAL
14218: IFFALSE 14228
// sTank := true ;
14220: LD_ADDR_EXP 55
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// if p3 = 20 then
14228: LD_VAR 0 3
14232: PUSH
14233: LD_INT 20
14235: EQUAL
14236: IFFALSE 14246
// sRemote := true ;
14238: LD_ADDR_EXP 56
14242: PUSH
14243: LD_INT 1
14245: ST_TO_ADDR
// if p3 = 21 then
14246: LD_VAR 0 3
14250: PUSH
14251: LD_INT 21
14253: EQUAL
14254: IFFALSE 14264
// sPowell := true ;
14256: LD_ADDR_EXP 57
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// if p3 = 22 then
14264: LD_VAR 0 3
14268: PUSH
14269: LD_INT 22
14271: EQUAL
14272: IFFALSE 14282
// sTeleport := true ;
14274: LD_ADDR_EXP 60
14278: PUSH
14279: LD_INT 1
14281: ST_TO_ADDR
// if p3 = 23 then
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 23
14289: EQUAL
14290: IFFALSE 14300
// sOilTower := true ;
14292: LD_ADDR_EXP 62
14296: PUSH
14297: LD_INT 1
14299: ST_TO_ADDR
// if p3 = 24 then
14300: LD_VAR 0 3
14304: PUSH
14305: LD_INT 24
14307: EQUAL
14308: IFFALSE 14318
// sShovel := true ;
14310: LD_ADDR_EXP 63
14314: PUSH
14315: LD_INT 1
14317: ST_TO_ADDR
// if p3 = 25 then
14318: LD_VAR 0 3
14322: PUSH
14323: LD_INT 25
14325: EQUAL
14326: IFFALSE 14336
// sSheik := true ;
14328: LD_ADDR_EXP 64
14332: PUSH
14333: LD_INT 1
14335: ST_TO_ADDR
// if p3 = 26 then
14336: LD_VAR 0 3
14340: PUSH
14341: LD_INT 26
14343: EQUAL
14344: IFFALSE 14354
// sEarthquake := true ;
14346: LD_ADDR_EXP 66
14350: PUSH
14351: LD_INT 1
14353: ST_TO_ADDR
// if p3 = 27 then
14354: LD_VAR 0 3
14358: PUSH
14359: LD_INT 27
14361: EQUAL
14362: IFFALSE 14372
// sAI := true ;
14364: LD_ADDR_EXP 67
14368: PUSH
14369: LD_INT 1
14371: ST_TO_ADDR
// if p3 = 28 then
14372: LD_VAR 0 3
14376: PUSH
14377: LD_INT 28
14379: EQUAL
14380: IFFALSE 14390
// sCargo := true ;
14382: LD_ADDR_EXP 70
14386: PUSH
14387: LD_INT 1
14389: ST_TO_ADDR
// if p3 = 29 then
14390: LD_VAR 0 3
14394: PUSH
14395: LD_INT 29
14397: EQUAL
14398: IFFALSE 14408
// sDLaser := true ;
14400: LD_ADDR_EXP 71
14404: PUSH
14405: LD_INT 1
14407: ST_TO_ADDR
// if p3 = 30 then
14408: LD_VAR 0 3
14412: PUSH
14413: LD_INT 30
14415: EQUAL
14416: IFFALSE 14426
// sExchange := true ;
14418: LD_ADDR_EXP 72
14422: PUSH
14423: LD_INT 1
14425: ST_TO_ADDR
// if p3 = 31 then
14426: LD_VAR 0 3
14430: PUSH
14431: LD_INT 31
14433: EQUAL
14434: IFFALSE 14444
// sFac := true ;
14436: LD_ADDR_EXP 73
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// if p3 = 32 then
14444: LD_VAR 0 3
14448: PUSH
14449: LD_INT 32
14451: EQUAL
14452: IFFALSE 14462
// sPower := true ;
14454: LD_ADDR_EXP 74
14458: PUSH
14459: LD_INT 1
14461: ST_TO_ADDR
// if p3 = 33 then
14462: LD_VAR 0 3
14466: PUSH
14467: LD_INT 33
14469: EQUAL
14470: IFFALSE 14480
// sRandom := true ;
14472: LD_ADDR_EXP 75
14476: PUSH
14477: LD_INT 1
14479: ST_TO_ADDR
// if p3 = 34 then
14480: LD_VAR 0 3
14484: PUSH
14485: LD_INT 34
14487: EQUAL
14488: IFFALSE 14498
// sShield := true ;
14490: LD_ADDR_EXP 76
14494: PUSH
14495: LD_INT 1
14497: ST_TO_ADDR
// if p3 = 35 then
14498: LD_VAR 0 3
14502: PUSH
14503: LD_INT 35
14505: EQUAL
14506: IFFALSE 14516
// sTime := true ;
14508: LD_ADDR_EXP 77
14512: PUSH
14513: LD_INT 1
14515: ST_TO_ADDR
// if p3 = 36 then
14516: LD_VAR 0 3
14520: PUSH
14521: LD_INT 36
14523: EQUAL
14524: IFFALSE 14534
// sTools := true ;
14526: LD_ADDR_EXP 78
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// if p3 = 101 then
14534: LD_VAR 0 3
14538: PUSH
14539: LD_INT 101
14541: EQUAL
14542: IFFALSE 14552
// sSold := true ;
14544: LD_ADDR_EXP 43
14548: PUSH
14549: LD_INT 1
14551: ST_TO_ADDR
// if p3 = 102 then
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 102
14559: EQUAL
14560: IFFALSE 14570
// sDiff := true ;
14562: LD_ADDR_EXP 44
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// if p3 = 103 then
14570: LD_VAR 0 3
14574: PUSH
14575: LD_INT 103
14577: EQUAL
14578: IFFALSE 14588
// sFog := true ;
14580: LD_ADDR_EXP 47
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// if p3 = 104 then
14588: LD_VAR 0 3
14592: PUSH
14593: LD_INT 104
14595: EQUAL
14596: IFFALSE 14606
// sReset := true ;
14598: LD_ADDR_EXP 48
14602: PUSH
14603: LD_INT 1
14605: ST_TO_ADDR
// if p3 = 105 then
14606: LD_VAR 0 3
14610: PUSH
14611: LD_INT 105
14613: EQUAL
14614: IFFALSE 14624
// sSun := true ;
14616: LD_ADDR_EXP 49
14620: PUSH
14621: LD_INT 1
14623: ST_TO_ADDR
// if p3 = 106 then
14624: LD_VAR 0 3
14628: PUSH
14629: LD_INT 106
14631: EQUAL
14632: IFFALSE 14642
// sTiger := true ;
14634: LD_ADDR_EXP 45
14638: PUSH
14639: LD_INT 1
14641: ST_TO_ADDR
// if p3 = 107 then
14642: LD_VAR 0 3
14646: PUSH
14647: LD_INT 107
14649: EQUAL
14650: IFFALSE 14660
// sBomb := true ;
14652: LD_ADDR_EXP 46
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// if p3 = 108 then
14660: LD_VAR 0 3
14664: PUSH
14665: LD_INT 108
14667: EQUAL
14668: IFFALSE 14678
// sWound := true ;
14670: LD_ADDR_EXP 54
14674: PUSH
14675: LD_INT 1
14677: ST_TO_ADDR
// if p3 = 109 then
14678: LD_VAR 0 3
14682: PUSH
14683: LD_INT 109
14685: EQUAL
14686: IFFALSE 14696
// sBetray := true ;
14688: LD_ADDR_EXP 58
14692: PUSH
14693: LD_INT 1
14695: ST_TO_ADDR
// if p3 = 110 then
14696: LD_VAR 0 3
14700: PUSH
14701: LD_INT 110
14703: EQUAL
14704: IFFALSE 14714
// sContamin := true ;
14706: LD_ADDR_EXP 59
14710: PUSH
14711: LD_INT 1
14713: ST_TO_ADDR
// if p3 = 111 then
14714: LD_VAR 0 3
14718: PUSH
14719: LD_INT 111
14721: EQUAL
14722: IFFALSE 14732
// sOil := true ;
14724: LD_ADDR_EXP 61
14728: PUSH
14729: LD_INT 1
14731: ST_TO_ADDR
// if p3 = 112 then
14732: LD_VAR 0 3
14736: PUSH
14737: LD_INT 112
14739: EQUAL
14740: IFFALSE 14750
// sStu := true ;
14742: LD_ADDR_EXP 65
14746: PUSH
14747: LD_INT 1
14749: ST_TO_ADDR
// if p3 = 113 then
14750: LD_VAR 0 3
14754: PUSH
14755: LD_INT 113
14757: EQUAL
14758: IFFALSE 14768
// sBazooka := true ;
14760: LD_ADDR_EXP 68
14764: PUSH
14765: LD_INT 1
14767: ST_TO_ADDR
// if p3 = 114 then
14768: LD_VAR 0 3
14772: PUSH
14773: LD_INT 114
14775: EQUAL
14776: IFFALSE 14786
// sMortar := true ;
14778: LD_ADDR_EXP 69
14782: PUSH
14783: LD_INT 1
14785: ST_TO_ADDR
// if p3 = 115 then
14786: LD_VAR 0 3
14790: PUSH
14791: LD_INT 115
14793: EQUAL
14794: IFFALSE 14804
// sRanger := true ;
14796: LD_ADDR_EXP 79
14800: PUSH
14801: LD_INT 1
14803: ST_TO_ADDR
// end ; end ;
14804: PPOPN 6
14806: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14807: LD_EXP 26
14811: PUSH
14812: LD_EXP 31
14816: AND
14817: IFFALSE 14941
14819: GO 14821
14821: DISABLE
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
// begin enable ;
14826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14827: LD_ADDR_VAR 0 2
14831: PUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 34
14849: PUSH
14850: LD_INT 7
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 34
14859: PUSH
14860: LD_INT 45
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 34
14869: PUSH
14870: LD_INT 28
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 34
14879: PUSH
14880: LD_INT 47
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: ST_TO_ADDR
// if not tmp then
14903: LD_VAR 0 2
14907: NOT
14908: IFFALSE 14912
// exit ;
14910: GO 14941
// for i in tmp do
14912: LD_ADDR_VAR 0 1
14916: PUSH
14917: LD_VAR 0 2
14921: PUSH
14922: FOR_IN
14923: IFFALSE 14939
// begin SetLives ( i , 0 ) ;
14925: LD_VAR 0 1
14929: PPUSH
14930: LD_INT 0
14932: PPUSH
14933: CALL_OW 234
// end ;
14937: GO 14922
14939: POP
14940: POP
// end ;
14941: PPOPN 2
14943: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14944: LD_EXP 26
14948: PUSH
14949: LD_EXP 32
14953: AND
14954: IFFALSE 15038
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin enable ;
14963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 32
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: ST_TO_ADDR
// if not tmp then
15000: LD_VAR 0 2
15004: NOT
15005: IFFALSE 15009
// exit ;
15007: GO 15038
// for i in tmp do
15009: LD_ADDR_VAR 0 1
15013: PUSH
15014: LD_VAR 0 2
15018: PUSH
15019: FOR_IN
15020: IFFALSE 15036
// begin SetLives ( i , 0 ) ;
15022: LD_VAR 0 1
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 234
// end ;
15034: GO 15019
15036: POP
15037: POP
// end ;
15038: PPOPN 2
15040: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15041: LD_EXP 26
15045: PUSH
15046: LD_EXP 29
15050: AND
15051: IFFALSE 15144
15053: GO 15055
15055: DISABLE
15056: LD_INT 0
15058: PPUSH
// begin enable ;
15059: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_OWVAR 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: LD_INT 25
15082: PUSH
15083: LD_INT 5
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 9
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 25
15102: PUSH
15103: LD_INT 8
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 69
15124: PUSH
15125: FOR_IN
15126: IFFALSE 15142
// begin SetClass ( i , 1 ) ;
15128: LD_VAR 0 1
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: CALL_OW 336
// end ;
15140: GO 15125
15142: POP
15143: POP
// end ;
15144: PPOPN 1
15146: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15147: LD_EXP 26
15151: PUSH
15152: LD_EXP 30
15156: AND
15157: PUSH
15158: LD_OWVAR 65
15162: PUSH
15163: LD_INT 7
15165: LESS
15166: AND
15167: IFFALSE 15181
15169: GO 15171
15171: DISABLE
// begin enable ;
15172: ENABLE
// game_speed := 7 ;
15173: LD_ADDR_OWVAR 65
15177: PUSH
15178: LD_INT 7
15180: ST_TO_ADDR
// end ;
15181: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15182: LD_EXP 26
15186: PUSH
15187: LD_EXP 33
15191: AND
15192: IFFALSE 15394
15194: GO 15196
15196: DISABLE
15197: LD_INT 0
15199: PPUSH
15200: PPUSH
15201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: LD_INT 81
15209: PUSH
15210: LD_OWVAR 2
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 21
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PPUSH
15233: CALL_OW 69
15237: ST_TO_ADDR
// if not tmp then
15238: LD_VAR 0 3
15242: NOT
15243: IFFALSE 15247
// exit ;
15245: GO 15394
// if tmp > 5 then
15247: LD_VAR 0 3
15251: PUSH
15252: LD_INT 5
15254: GREATER
15255: IFFALSE 15267
// k := 5 else
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: LD_INT 5
15264: ST_TO_ADDR
15265: GO 15277
// k := tmp ;
15267: LD_ADDR_VAR 0 2
15271: PUSH
15272: LD_VAR 0 3
15276: ST_TO_ADDR
// for i := 1 to k do
15277: LD_ADDR_VAR 0 1
15281: PUSH
15282: DOUBLE
15283: LD_INT 1
15285: DEC
15286: ST_TO_ADDR
15287: LD_VAR 0 2
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15392
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15295: LD_VAR 0 3
15299: PUSH
15300: LD_VAR 0 1
15304: ARRAY
15305: PPUSH
15306: LD_VAR 0 1
15310: PUSH
15311: LD_INT 4
15313: MOD
15314: PUSH
15315: LD_INT 1
15317: PLUS
15318: PPUSH
15319: CALL_OW 259
15323: PUSH
15324: LD_INT 10
15326: LESS
15327: IFFALSE 15390
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15329: LD_VAR 0 3
15333: PUSH
15334: LD_VAR 0 1
15338: ARRAY
15339: PPUSH
15340: LD_VAR 0 1
15344: PUSH
15345: LD_INT 4
15347: MOD
15348: PUSH
15349: LD_INT 1
15351: PLUS
15352: PPUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 1
15362: ARRAY
15363: PPUSH
15364: LD_VAR 0 1
15368: PUSH
15369: LD_INT 4
15371: MOD
15372: PUSH
15373: LD_INT 1
15375: PLUS
15376: PPUSH
15377: CALL_OW 259
15381: PUSH
15382: LD_INT 1
15384: PLUS
15385: PPUSH
15386: CALL_OW 237
15390: GO 15292
15392: POP
15393: POP
// end ;
15394: PPOPN 3
15396: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15397: LD_EXP 26
15401: PUSH
15402: LD_EXP 34
15406: AND
15407: IFFALSE 15427
15409: GO 15411
15411: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15412: LD_INT 4
15414: PPUSH
15415: LD_OWVAR 2
15419: PPUSH
15420: LD_INT 0
15422: PPUSH
15423: CALL_OW 324
15427: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15428: LD_EXP 26
15432: PUSH
15433: LD_EXP 63
15437: AND
15438: IFFALSE 15458
15440: GO 15442
15442: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15443: LD_INT 19
15445: PPUSH
15446: LD_OWVAR 2
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 324
15458: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15459: LD_EXP 26
15463: PUSH
15464: LD_EXP 35
15468: AND
15469: IFFALSE 15571
15471: GO 15473
15473: DISABLE
15474: LD_INT 0
15476: PPUSH
15477: PPUSH
// begin enable ;
15478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: LD_INT 22
15486: PUSH
15487: LD_OWVAR 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 2
15498: PUSH
15499: LD_INT 34
15501: PUSH
15502: LD_INT 11
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 34
15511: PUSH
15512: LD_INT 30
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: ST_TO_ADDR
// if not tmp then
15533: LD_VAR 0 2
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 15571
// for i in tmp do
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_VAR 0 2
15551: PUSH
15552: FOR_IN
15553: IFFALSE 15569
// begin SetLives ( i , 0 ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: LD_INT 0
15562: PPUSH
15563: CALL_OW 234
// end ;
15567: GO 15552
15569: POP
15570: POP
// end ;
15571: PPOPN 2
15573: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15574: LD_EXP 26
15578: PUSH
15579: LD_EXP 36
15583: AND
15584: IFFALSE 15604
15586: GO 15588
15588: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15589: LD_INT 32
15591: PPUSH
15592: LD_OWVAR 2
15596: PPUSH
15597: LD_INT 0
15599: PPUSH
15600: CALL_OW 324
15604: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15605: LD_EXP 26
15609: PUSH
15610: LD_EXP 37
15614: AND
15615: IFFALSE 15796
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_OWVAR 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 33
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PPUSH
15656: CALL_OW 69
15660: ST_TO_ADDR
// if not tmp then
15661: LD_VAR 0 2
15665: NOT
15666: IFFALSE 15670
// exit ;
15668: GO 15796
// side := 0 ;
15670: LD_ADDR_VAR 0 3
15674: PUSH
15675: LD_INT 0
15677: ST_TO_ADDR
// for i := 1 to 8 do
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_INT 8
15690: PUSH
15691: FOR_TO
15692: IFFALSE 15740
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15694: LD_OWVAR 2
15698: PUSH
15699: LD_VAR 0 1
15703: NONEQUAL
15704: PUSH
15705: LD_OWVAR 2
15709: PPUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 81
15719: PUSH
15720: LD_INT 2
15722: EQUAL
15723: AND
15724: IFFALSE 15738
// begin side := i ;
15726: LD_ADDR_VAR 0 3
15730: PUSH
15731: LD_VAR 0 1
15735: ST_TO_ADDR
// break ;
15736: GO 15740
// end ;
15738: GO 15691
15740: POP
15741: POP
// if not side then
15742: LD_VAR 0 3
15746: NOT
15747: IFFALSE 15751
// exit ;
15749: GO 15796
// for i := 1 to tmp do
15751: LD_ADDR_VAR 0 1
15755: PUSH
15756: DOUBLE
15757: LD_INT 1
15759: DEC
15760: ST_TO_ADDR
15761: LD_VAR 0 2
15765: PUSH
15766: FOR_TO
15767: IFFALSE 15794
// if Prob ( 60 ) then
15769: LD_INT 60
15771: PPUSH
15772: CALL_OW 13
15776: IFFALSE 15792
// SetSide ( i , side ) ;
15778: LD_VAR 0 1
15782: PPUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: CALL_OW 235
15792: GO 15766
15794: POP
15795: POP
// end ;
15796: PPOPN 3
15798: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15799: LD_EXP 26
15803: PUSH
15804: LD_EXP 39
15808: AND
15809: IFFALSE 15928
15811: GO 15813
15813: DISABLE
15814: LD_INT 0
15816: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15817: LD_ADDR_VAR 0 1
15821: PUSH
15822: LD_INT 22
15824: PUSH
15825: LD_OWVAR 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 21
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 23
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: PUSH
15871: FOR_IN
15872: IFFALSE 15926
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 257
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 3
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: IN
15902: IFFALSE 15924
// SetClass ( un , rand ( 1 , 4 ) ) ;
15904: LD_VAR 0 1
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: LD_INT 4
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 336
15924: GO 15871
15926: POP
15927: POP
// end ;
15928: PPOPN 1
15930: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15931: LD_EXP 26
15935: PUSH
15936: LD_EXP 38
15940: AND
15941: IFFALSE 16020
15943: GO 15945
15945: DISABLE
15946: LD_INT 0
15948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15949: LD_ADDR_VAR 0 1
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_OWVAR 2
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 21
15968: PUSH
15969: LD_INT 3
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: ST_TO_ADDR
// if not tmp then
15985: LD_VAR 0 1
15989: NOT
15990: IFFALSE 15994
// exit ;
15992: GO 16020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15994: LD_VAR 0 1
15998: PUSH
15999: LD_INT 1
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 12
16011: ARRAY
16012: PPUSH
16013: LD_INT 100
16015: PPUSH
16016: CALL_OW 234
// end ;
16020: PPOPN 1
16022: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16023: LD_EXP 26
16027: PUSH
16028: LD_EXP 40
16032: AND
16033: IFFALSE 16131
16035: GO 16037
16037: DISABLE
16038: LD_INT 0
16040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16041: LD_ADDR_VAR 0 1
16045: PUSH
16046: LD_INT 22
16048: PUSH
16049: LD_OWVAR 2
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 1
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 69
16076: ST_TO_ADDR
// if not tmp then
16077: LD_VAR 0 1
16081: NOT
16082: IFFALSE 16086
// exit ;
16084: GO 16131
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16086: LD_VAR 0 1
16090: PUSH
16091: LD_INT 1
16093: PPUSH
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 12
16103: ARRAY
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: LD_INT 4
16110: PPUSH
16111: CALL_OW 12
16115: PPUSH
16116: LD_INT 3000
16118: PPUSH
16119: LD_INT 9000
16121: PPUSH
16122: CALL_OW 12
16126: PPUSH
16127: CALL_OW 492
// end ;
16131: PPOPN 1
16133: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16134: LD_EXP 26
16138: PUSH
16139: LD_EXP 41
16143: AND
16144: IFFALSE 16164
16146: GO 16148
16148: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16149: LD_INT 1
16151: PPUSH
16152: LD_OWVAR 2
16156: PPUSH
16157: LD_INT 0
16159: PPUSH
16160: CALL_OW 324
16164: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16165: LD_EXP 26
16169: PUSH
16170: LD_EXP 42
16174: AND
16175: IFFALSE 16258
16177: GO 16179
16179: DISABLE
16180: LD_INT 0
16182: PPUSH
16183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16184: LD_ADDR_VAR 0 2
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_OWVAR 2
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 21
16203: PUSH
16204: LD_INT 3
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL_OW 69
16219: ST_TO_ADDR
// if not tmp then
16220: LD_VAR 0 2
16224: NOT
16225: IFFALSE 16229
// exit ;
16227: GO 16258
// for i in tmp do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_VAR 0 2
16238: PUSH
16239: FOR_IN
16240: IFFALSE 16256
// SetBLevel ( i , 10 ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: LD_INT 10
16249: PPUSH
16250: CALL_OW 241
16254: GO 16239
16256: POP
16257: POP
// end ;
16258: PPOPN 2
16260: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16261: LD_EXP 26
16265: PUSH
16266: LD_EXP 43
16270: AND
16271: IFFALSE 16382
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
16279: PPUSH
16280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16281: LD_ADDR_VAR 0 3
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_OWVAR 2
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 25
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: ST_TO_ADDR
// if not tmp then
16317: LD_VAR 0 3
16321: NOT
16322: IFFALSE 16326
// exit ;
16324: GO 16382
// un := tmp [ rand ( 1 , tmp ) ] ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_VAR 0 3
16335: PUSH
16336: LD_INT 1
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL_OW 12
16348: ARRAY
16349: ST_TO_ADDR
// if Crawls ( un ) then
16350: LD_VAR 0 2
16354: PPUSH
16355: CALL_OW 318
16359: IFFALSE 16370
// ComWalk ( un ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16370: LD_VAR 0 2
16374: PPUSH
16375: LD_INT 5
16377: PPUSH
16378: CALL_OW 336
// end ;
16382: PPOPN 3
16384: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16385: LD_EXP 26
16389: PUSH
16390: LD_EXP 44
16394: AND
16395: PUSH
16396: LD_OWVAR 67
16400: PUSH
16401: LD_INT 3
16403: LESS
16404: AND
16405: IFFALSE 16424
16407: GO 16409
16409: DISABLE
// Difficulty := Difficulty + 1 ;
16410: LD_ADDR_OWVAR 67
16414: PUSH
16415: LD_OWVAR 67
16419: PUSH
16420: LD_INT 1
16422: PLUS
16423: ST_TO_ADDR
16424: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16425: LD_EXP 26
16429: PUSH
16430: LD_EXP 45
16434: AND
16435: IFFALSE 16538
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
// begin for i := 1 to 5 do
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: DOUBLE
16449: LD_INT 1
16451: DEC
16452: ST_TO_ADDR
16453: LD_INT 5
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16536
// begin uc_nation := nation_nature ;
16459: LD_ADDR_OWVAR 21
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// uc_side := 0 ;
16467: LD_ADDR_OWVAR 20
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16475: LD_ADDR_OWVAR 29
16479: PUSH
16480: LD_INT 12
16482: PUSH
16483: LD_INT 12
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: ST_TO_ADDR
// hc_agressivity := 20 ;
16490: LD_ADDR_OWVAR 35
16494: PUSH
16495: LD_INT 20
16497: ST_TO_ADDR
// hc_class := class_tiger ;
16498: LD_ADDR_OWVAR 28
16502: PUSH
16503: LD_INT 14
16505: ST_TO_ADDR
// hc_gallery :=  ;
16506: LD_ADDR_OWVAR 33
16510: PUSH
16511: LD_STRING 
16513: ST_TO_ADDR
// hc_name :=  ;
16514: LD_ADDR_OWVAR 26
16518: PUSH
16519: LD_STRING 
16521: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16522: CALL_OW 44
16526: PPUSH
16527: LD_INT 0
16529: PPUSH
16530: CALL_OW 51
// end ;
16534: GO 16456
16536: POP
16537: POP
// end ;
16538: PPOPN 1
16540: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16541: LD_EXP 26
16545: PUSH
16546: LD_EXP 46
16550: AND
16551: IFFALSE 16560
16553: GO 16555
16555: DISABLE
// StreamSibBomb ;
16556: CALL 16561 0 0
16560: END
// export function StreamSibBomb ; var i , x , y ; begin
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
16566: PPUSH
// result := false ;
16567: LD_ADDR_VAR 0 1
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// for i := 1 to 16 do
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: DOUBLE
16581: LD_INT 1
16583: DEC
16584: ST_TO_ADDR
16585: LD_INT 16
16587: PUSH
16588: FOR_TO
16589: IFFALSE 16788
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_INT 10
16598: PUSH
16599: LD_INT 20
16601: PUSH
16602: LD_INT 30
16604: PUSH
16605: LD_INT 40
16607: PUSH
16608: LD_INT 50
16610: PUSH
16611: LD_INT 60
16613: PUSH
16614: LD_INT 70
16616: PUSH
16617: LD_INT 80
16619: PUSH
16620: LD_INT 90
16622: PUSH
16623: LD_INT 100
16625: PUSH
16626: LD_INT 110
16628: PUSH
16629: LD_INT 120
16631: PUSH
16632: LD_INT 130
16634: PUSH
16635: LD_INT 140
16637: PUSH
16638: LD_INT 150
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: PPUSH
16661: LD_INT 15
16663: PPUSH
16664: CALL_OW 12
16668: ARRAY
16669: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16670: LD_ADDR_VAR 0 4
16674: PUSH
16675: LD_INT 10
16677: PUSH
16678: LD_INT 20
16680: PUSH
16681: LD_INT 30
16683: PUSH
16684: LD_INT 40
16686: PUSH
16687: LD_INT 50
16689: PUSH
16690: LD_INT 60
16692: PUSH
16693: LD_INT 70
16695: PUSH
16696: LD_INT 80
16698: PUSH
16699: LD_INT 90
16701: PUSH
16702: LD_INT 100
16704: PUSH
16705: LD_INT 110
16707: PUSH
16708: LD_INT 120
16710: PUSH
16711: LD_INT 130
16713: PUSH
16714: LD_INT 140
16716: PUSH
16717: LD_INT 150
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PPUSH
16740: LD_INT 15
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: ST_TO_ADDR
// if ValidHex ( x , y ) then
16749: LD_VAR 0 3
16753: PPUSH
16754: LD_VAR 0 4
16758: PPUSH
16759: CALL_OW 488
16763: IFFALSE 16786
// begin result := [ x , y ] ;
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_VAR 0 3
16774: PUSH
16775: LD_VAR 0 4
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: ST_TO_ADDR
// break ;
16784: GO 16788
// end ; end ;
16786: GO 16588
16788: POP
16789: POP
// if result then
16790: LD_VAR 0 1
16794: IFFALSE 16854
// begin ToLua ( playSibBomb() ) ;
16796: LD_STRING playSibBomb()
16798: PPUSH
16799: CALL_OW 559
// wait ( 0 0$14 ) ;
16803: LD_INT 490
16805: PPUSH
16806: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16810: LD_VAR 0 1
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 2
16826: ARRAY
16827: PPUSH
16828: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16832: LD_VAR 0 1
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PPUSH
16841: LD_VAR 0 1
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 429
// end ; end ;
16854: LD_VAR 0 1
16858: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16859: LD_EXP 26
16863: PUSH
16864: LD_EXP 48
16868: AND
16869: IFFALSE 16881
16871: GO 16873
16873: DISABLE
// YouLost (  ) ;
16874: LD_STRING 
16876: PPUSH
16877: CALL_OW 104
16881: END
// every 0 0$1 trigger StreamModeActive and sFog do
16882: LD_EXP 26
16886: PUSH
16887: LD_EXP 47
16891: AND
16892: IFFALSE 16906
16894: GO 16896
16896: DISABLE
// FogOff ( your_side ) ;
16897: LD_OWVAR 2
16901: PPUSH
16902: CALL_OW 344
16906: END
// every 0 0$1 trigger StreamModeActive and sSun do
16907: LD_EXP 26
16911: PUSH
16912: LD_EXP 49
16916: AND
16917: IFFALSE 16945
16919: GO 16921
16921: DISABLE
// begin solar_recharge_percent := 0 ;
16922: LD_ADDR_OWVAR 79
16926: PUSH
16927: LD_INT 0
16929: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16930: LD_INT 10500
16932: PPUSH
16933: CALL_OW 67
// solar_recharge_percent := 100 ;
16937: LD_ADDR_OWVAR 79
16941: PUSH
16942: LD_INT 100
16944: ST_TO_ADDR
// end ;
16945: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16946: LD_EXP 26
16950: PUSH
16951: LD_EXP 50
16955: AND
16956: IFFALSE 17195
16958: GO 16960
16960: DISABLE
16961: LD_INT 0
16963: PPUSH
16964: PPUSH
16965: PPUSH
// begin tmp := [ ] ;
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: EMPTY
16972: ST_TO_ADDR
// for i := 1 to 6 do
16973: LD_ADDR_VAR 0 1
16977: PUSH
16978: DOUBLE
16979: LD_INT 1
16981: DEC
16982: ST_TO_ADDR
16983: LD_INT 6
16985: PUSH
16986: FOR_TO
16987: IFFALSE 17092
// begin uc_nation := nation_nature ;
16989: LD_ADDR_OWVAR 21
16993: PUSH
16994: LD_INT 0
16996: ST_TO_ADDR
// uc_side := 0 ;
16997: LD_ADDR_OWVAR 20
17001: PUSH
17002: LD_INT 0
17004: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17005: LD_ADDR_OWVAR 29
17009: PUSH
17010: LD_INT 12
17012: PUSH
17013: LD_INT 12
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: ST_TO_ADDR
// hc_agressivity := 20 ;
17020: LD_ADDR_OWVAR 35
17024: PUSH
17025: LD_INT 20
17027: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17028: LD_ADDR_OWVAR 28
17032: PUSH
17033: LD_INT 17
17035: ST_TO_ADDR
// hc_gallery :=  ;
17036: LD_ADDR_OWVAR 33
17040: PUSH
17041: LD_STRING 
17043: ST_TO_ADDR
// hc_name :=  ;
17044: LD_ADDR_OWVAR 26
17048: PUSH
17049: LD_STRING 
17051: ST_TO_ADDR
// un := CreateHuman ;
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: CALL_OW 44
17061: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17062: LD_VAR 0 2
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 51
// tmp := tmp ^ un ;
17074: LD_ADDR_VAR 0 3
17078: PUSH
17079: LD_VAR 0 3
17083: PUSH
17084: LD_VAR 0 2
17088: ADD
17089: ST_TO_ADDR
// end ;
17090: GO 16986
17092: POP
17093: POP
// repeat wait ( 0 0$1 ) ;
17094: LD_INT 35
17096: PPUSH
17097: CALL_OW 67
// for un in tmp do
17101: LD_ADDR_VAR 0 2
17105: PUSH
17106: LD_VAR 0 3
17110: PUSH
17111: FOR_IN
17112: IFFALSE 17186
// begin if IsDead ( un ) then
17114: LD_VAR 0 2
17118: PPUSH
17119: CALL_OW 301
17123: IFFALSE 17143
// begin tmp := tmp diff un ;
17125: LD_ADDR_VAR 0 3
17129: PUSH
17130: LD_VAR 0 3
17134: PUSH
17135: LD_VAR 0 2
17139: DIFF
17140: ST_TO_ADDR
// continue ;
17141: GO 17111
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17143: LD_VAR 0 2
17147: PPUSH
17148: LD_INT 3
17150: PUSH
17151: LD_INT 22
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: PPUSH
17170: LD_VAR 0 2
17174: PPUSH
17175: CALL_OW 74
17179: PPUSH
17180: CALL_OW 115
// end ;
17184: GO 17111
17186: POP
17187: POP
// until not tmp ;
17188: LD_VAR 0 3
17192: NOT
17193: IFFALSE 17094
// end ;
17195: PPOPN 3
17197: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17198: LD_EXP 26
17202: PUSH
17203: LD_EXP 51
17207: AND
17208: IFFALSE 17262
17210: GO 17212
17212: DISABLE
// begin ToLua ( displayTroll(); ) ;
17213: LD_STRING displayTroll();
17215: PPUSH
17216: CALL_OW 559
// wait ( 3 3$00 ) ;
17220: LD_INT 6300
17222: PPUSH
17223: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17227: LD_STRING hideTroll();
17229: PPUSH
17230: CALL_OW 559
// wait ( 1 1$00 ) ;
17234: LD_INT 2100
17236: PPUSH
17237: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17241: LD_STRING displayTroll();
17243: PPUSH
17244: CALL_OW 559
// wait ( 1 1$00 ) ;
17248: LD_INT 2100
17250: PPUSH
17251: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17255: LD_STRING hideTroll();
17257: PPUSH
17258: CALL_OW 559
// end ;
17262: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17263: LD_EXP 26
17267: PUSH
17268: LD_EXP 52
17272: AND
17273: IFFALSE 17336
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
// begin p := 0 ;
17281: LD_ADDR_VAR 0 1
17285: PUSH
17286: LD_INT 0
17288: ST_TO_ADDR
// repeat game_speed := 1 ;
17289: LD_ADDR_OWVAR 65
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17297: LD_INT 35
17299: PPUSH
17300: CALL_OW 67
// p := p + 1 ;
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_VAR 0 1
17313: PUSH
17314: LD_INT 1
17316: PLUS
17317: ST_TO_ADDR
// until p >= 60 ;
17318: LD_VAR 0 1
17322: PUSH
17323: LD_INT 60
17325: GREATEREQUAL
17326: IFFALSE 17289
// game_speed := 4 ;
17328: LD_ADDR_OWVAR 65
17332: PUSH
17333: LD_INT 4
17335: ST_TO_ADDR
// end ;
17336: PPOPN 1
17338: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17339: LD_EXP 26
17343: PUSH
17344: LD_EXP 53
17348: AND
17349: IFFALSE 17495
17351: GO 17353
17353: DISABLE
17354: LD_INT 0
17356: PPUSH
17357: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_INT 22
17365: PUSH
17366: LD_OWVAR 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 30
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 30
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PPUSH
17407: CALL_OW 69
17411: ST_TO_ADDR
// if not depot then
17412: LD_VAR 0 1
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17495
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 1
17433: PPUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 12
17443: ARRAY
17444: PPUSH
17445: CALL_OW 274
17449: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17450: LD_VAR 0 2
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 0
17460: PPUSH
17461: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17465: LD_VAR 0 2
17469: PPUSH
17470: LD_INT 2
17472: PPUSH
17473: LD_INT 0
17475: PPUSH
17476: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17480: LD_VAR 0 2
17484: PPUSH
17485: LD_INT 3
17487: PPUSH
17488: LD_INT 0
17490: PPUSH
17491: CALL_OW 277
// end ;
17495: PPOPN 2
17497: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17498: LD_EXP 26
17502: PUSH
17503: LD_EXP 54
17507: AND
17508: IFFALSE 17605
17510: GO 17512
17512: DISABLE
17513: LD_INT 0
17515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17516: LD_ADDR_VAR 0 1
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 21
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: LD_INT 23
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 69
17569: ST_TO_ADDR
// if not tmp then
17570: LD_VAR 0 1
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17579: LD_VAR 0 1
17583: PUSH
17584: LD_INT 1
17586: PPUSH
17587: LD_VAR 0 1
17591: PPUSH
17592: CALL_OW 12
17596: ARRAY
17597: PPUSH
17598: LD_INT 200
17600: PPUSH
17601: CALL_OW 234
// end ;
17605: PPOPN 1
17607: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17608: LD_EXP 26
17612: PUSH
17613: LD_EXP 55
17617: AND
17618: IFFALSE 17697
17620: GO 17622
17622: DISABLE
17623: LD_INT 0
17625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17626: LD_ADDR_VAR 0 1
17630: PUSH
17631: LD_INT 22
17633: PUSH
17634: LD_OWVAR 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: ST_TO_ADDR
// if not tmp then
17662: LD_VAR 0 1
17666: NOT
17667: IFFALSE 17671
// exit ;
17669: GO 17697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17671: LD_VAR 0 1
17675: PUSH
17676: LD_INT 1
17678: PPUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 12
17688: ARRAY
17689: PPUSH
17690: LD_INT 60
17692: PPUSH
17693: CALL_OW 234
// end ;
17697: PPOPN 1
17699: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17700: LD_EXP 26
17704: PUSH
17705: LD_EXP 56
17709: AND
17710: IFFALSE 17809
17712: GO 17714
17714: DISABLE
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
// begin enable ;
17719: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17720: LD_ADDR_VAR 0 1
17724: PUSH
17725: LD_INT 22
17727: PUSH
17728: LD_OWVAR 2
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 61
17739: PUSH
17740: EMPTY
17741: LIST
17742: PUSH
17743: LD_INT 33
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: ST_TO_ADDR
// if not tmp then
17763: LD_VAR 0 1
17767: NOT
17768: IFFALSE 17772
// exit ;
17770: GO 17809
// for i in tmp do
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: LD_VAR 0 1
17781: PUSH
17782: FOR_IN
17783: IFFALSE 17807
// if IsControledBy ( i ) then
17785: LD_VAR 0 2
17789: PPUSH
17790: CALL_OW 312
17794: IFFALSE 17805
// ComUnlink ( i ) ;
17796: LD_VAR 0 2
17800: PPUSH
17801: CALL_OW 136
17805: GO 17782
17807: POP
17808: POP
// end ;
17809: PPOPN 2
17811: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17812: LD_EXP 26
17816: PUSH
17817: LD_EXP 57
17821: AND
17822: IFFALSE 17962
17824: GO 17826
17826: DISABLE
17827: LD_INT 0
17829: PPUSH
17830: PPUSH
// begin ToLua ( displayPowell(); ) ;
17831: LD_STRING displayPowell();
17833: PPUSH
17834: CALL_OW 559
// uc_side := 0 ;
17838: LD_ADDR_OWVAR 20
17842: PUSH
17843: LD_INT 0
17845: ST_TO_ADDR
// uc_nation := 2 ;
17846: LD_ADDR_OWVAR 21
17850: PUSH
17851: LD_INT 2
17853: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17854: LD_ADDR_OWVAR 37
17858: PUSH
17859: LD_INT 14
17861: ST_TO_ADDR
// vc_engine := engine_siberite ;
17862: LD_ADDR_OWVAR 39
17866: PUSH
17867: LD_INT 3
17869: ST_TO_ADDR
// vc_control := control_apeman ;
17870: LD_ADDR_OWVAR 38
17874: PUSH
17875: LD_INT 5
17877: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17878: LD_ADDR_OWVAR 40
17882: PUSH
17883: LD_INT 29
17885: ST_TO_ADDR
// un := CreateVehicle ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: CALL_OW 45
17895: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17896: LD_VAR 0 2
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17908: LD_INT 35
17910: PPUSH
17911: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17915: LD_VAR 0 2
17919: PPUSH
17920: LD_INT 22
17922: PUSH
17923: LD_OWVAR 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL_OW 69
17936: PPUSH
17937: LD_VAR 0 2
17941: PPUSH
17942: CALL_OW 74
17946: PPUSH
17947: CALL_OW 115
// until IsDead ( un ) ;
17951: LD_VAR 0 2
17955: PPUSH
17956: CALL_OW 301
17960: IFFALSE 17908
// end ;
17962: PPOPN 2
17964: END
// every 0 0$1 trigger StreamModeActive and sStu do
17965: LD_EXP 26
17969: PUSH
17970: LD_EXP 65
17974: AND
17975: IFFALSE 17991
17977: GO 17979
17979: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17980: LD_STRING displayStucuk();
17982: PPUSH
17983: CALL_OW 559
// ResetFog ;
17987: CALL_OW 335
// end ;
17991: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17992: LD_EXP 26
17996: PUSH
17997: LD_EXP 58
18001: AND
18002: IFFALSE 18143
18004: GO 18006
18006: DISABLE
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18011: LD_ADDR_VAR 0 2
18015: PUSH
18016: LD_INT 22
18018: PUSH
18019: LD_OWVAR 2
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 21
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: ST_TO_ADDR
// if not tmp then
18047: LD_VAR 0 2
18051: NOT
18052: IFFALSE 18056
// exit ;
18054: GO 18143
// un := tmp [ rand ( 1 , tmp ) ] ;
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: LD_VAR 0 2
18065: PUSH
18066: LD_INT 1
18068: PPUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: CALL_OW 12
18078: ARRAY
18079: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18080: LD_VAR 0 1
18084: PPUSH
18085: LD_INT 0
18087: PPUSH
18088: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18092: LD_VAR 0 1
18096: PPUSH
18097: LD_OWVAR 3
18101: PUSH
18102: LD_VAR 0 1
18106: DIFF
18107: PPUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 74
18117: PPUSH
18118: CALL_OW 115
// wait ( 0 0$20 ) ;
18122: LD_INT 700
18124: PPUSH
18125: CALL_OW 67
// SetSide ( un , your_side ) ;
18129: LD_VAR 0 1
18133: PPUSH
18134: LD_OWVAR 2
18138: PPUSH
18139: CALL_OW 235
// end ;
18143: PPOPN 2
18145: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18146: LD_EXP 26
18150: PUSH
18151: LD_EXP 59
18155: AND
18156: IFFALSE 18262
18158: GO 18160
18160: DISABLE
18161: LD_INT 0
18163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18164: LD_ADDR_VAR 0 1
18168: PUSH
18169: LD_INT 22
18171: PUSH
18172: LD_OWVAR 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 30
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: ST_TO_ADDR
// if not depot then
18218: LD_VAR 0 1
18222: NOT
18223: IFFALSE 18227
// exit ;
18225: GO 18262
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18227: LD_VAR 0 1
18231: PUSH
18232: LD_INT 1
18234: ARRAY
18235: PPUSH
18236: CALL_OW 250
18240: PPUSH
18241: LD_VAR 0 1
18245: PUSH
18246: LD_INT 1
18248: ARRAY
18249: PPUSH
18250: CALL_OW 251
18254: PPUSH
18255: LD_INT 70
18257: PPUSH
18258: CALL_OW 495
// end ;
18262: PPOPN 1
18264: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18265: LD_EXP 26
18269: PUSH
18270: LD_EXP 60
18274: AND
18275: IFFALSE 18486
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18287: LD_ADDR_VAR 0 5
18291: PUSH
18292: LD_INT 22
18294: PUSH
18295: LD_OWVAR 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 21
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PPUSH
18318: CALL_OW 69
18322: ST_TO_ADDR
// if not tmp then
18323: LD_VAR 0 5
18327: NOT
18328: IFFALSE 18332
// exit ;
18330: GO 18486
// for i in tmp do
18332: LD_ADDR_VAR 0 1
18336: PUSH
18337: LD_VAR 0 5
18341: PUSH
18342: FOR_IN
18343: IFFALSE 18484
// begin d := rand ( 0 , 5 ) ;
18345: LD_ADDR_VAR 0 4
18349: PUSH
18350: LD_INT 0
18352: PPUSH
18353: LD_INT 5
18355: PPUSH
18356: CALL_OW 12
18360: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18361: LD_ADDR_VAR 0 2
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 250
18375: PPUSH
18376: LD_VAR 0 4
18380: PPUSH
18381: LD_INT 3
18383: PPUSH
18384: LD_INT 12
18386: PPUSH
18387: CALL_OW 12
18391: PPUSH
18392: CALL_OW 272
18396: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18397: LD_ADDR_VAR 0 3
18401: PUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 251
18411: PPUSH
18412: LD_VAR 0 4
18416: PPUSH
18417: LD_INT 3
18419: PPUSH
18420: LD_INT 12
18422: PPUSH
18423: CALL_OW 12
18427: PPUSH
18428: CALL_OW 273
18432: ST_TO_ADDR
// if ValidHex ( x , y ) then
18433: LD_VAR 0 2
18437: PPUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: CALL_OW 488
18447: IFFALSE 18482
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18449: LD_VAR 0 1
18453: PPUSH
18454: LD_VAR 0 2
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 3
18466: PPUSH
18467: LD_INT 6
18469: PPUSH
18470: CALL_OW 12
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 483
// end ;
18482: GO 18342
18484: POP
18485: POP
// end ;
18486: PPOPN 5
18488: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18489: LD_EXP 26
18493: PUSH
18494: LD_EXP 61
18498: AND
18499: IFFALSE 18593
18501: GO 18503
18503: DISABLE
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18508: LD_ADDR_VAR 0 2
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_OWVAR 2
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 32
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 21
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 69
18554: ST_TO_ADDR
// if not tmp then
18555: LD_VAR 0 2
18559: NOT
18560: IFFALSE 18564
// exit ;
18562: GO 18593
// for i in tmp do
18564: LD_ADDR_VAR 0 1
18568: PUSH
18569: LD_VAR 0 2
18573: PUSH
18574: FOR_IN
18575: IFFALSE 18591
// SetFuel ( i , 0 ) ;
18577: LD_VAR 0 1
18581: PPUSH
18582: LD_INT 0
18584: PPUSH
18585: CALL_OW 240
18589: GO 18574
18591: POP
18592: POP
// end ;
18593: PPOPN 2
18595: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18596: LD_EXP 26
18600: PUSH
18601: LD_EXP 62
18605: AND
18606: IFFALSE 18672
18608: GO 18610
18610: DISABLE
18611: LD_INT 0
18613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18614: LD_ADDR_VAR 0 1
18618: PUSH
18619: LD_INT 22
18621: PUSH
18622: LD_OWVAR 2
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 29
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PPUSH
18645: CALL_OW 69
18649: ST_TO_ADDR
// if not tmp then
18650: LD_VAR 0 1
18654: NOT
18655: IFFALSE 18659
// exit ;
18657: GO 18672
// DestroyUnit ( tmp [ 1 ] ) ;
18659: LD_VAR 0 1
18663: PUSH
18664: LD_INT 1
18666: ARRAY
18667: PPUSH
18668: CALL_OW 65
// end ;
18672: PPOPN 1
18674: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18675: LD_EXP 26
18679: PUSH
18680: LD_EXP 64
18684: AND
18685: IFFALSE 18814
18687: GO 18689
18689: DISABLE
18690: LD_INT 0
18692: PPUSH
// begin uc_side := 0 ;
18693: LD_ADDR_OWVAR 20
18697: PUSH
18698: LD_INT 0
18700: ST_TO_ADDR
// uc_nation := nation_arabian ;
18701: LD_ADDR_OWVAR 21
18705: PUSH
18706: LD_INT 2
18708: ST_TO_ADDR
// hc_gallery :=  ;
18709: LD_ADDR_OWVAR 33
18713: PUSH
18714: LD_STRING 
18716: ST_TO_ADDR
// hc_name :=  ;
18717: LD_ADDR_OWVAR 26
18721: PUSH
18722: LD_STRING 
18724: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18725: LD_INT 1
18727: PPUSH
18728: LD_INT 11
18730: PPUSH
18731: LD_INT 10
18733: PPUSH
18734: CALL_OW 380
// un := CreateHuman ;
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: CALL_OW 44
18747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18748: LD_VAR 0 1
18752: PPUSH
18753: LD_INT 1
18755: PPUSH
18756: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18760: LD_INT 35
18762: PPUSH
18763: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18767: LD_VAR 0 1
18771: PPUSH
18772: LD_INT 22
18774: PUSH
18775: LD_OWVAR 2
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PPUSH
18784: CALL_OW 69
18788: PPUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 74
18798: PPUSH
18799: CALL_OW 115
// until IsDead ( un ) ;
18803: LD_VAR 0 1
18807: PPUSH
18808: CALL_OW 301
18812: IFFALSE 18760
// end ;
18814: PPOPN 1
18816: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18817: LD_EXP 26
18821: PUSH
18822: LD_EXP 66
18826: AND
18827: IFFALSE 18839
18829: GO 18831
18831: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18832: LD_STRING earthquake(getX(game), 0, 32)
18834: PPUSH
18835: CALL_OW 559
18839: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18840: LD_EXP 26
18844: PUSH
18845: LD_EXP 67
18849: AND
18850: IFFALSE 18941
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
// begin enable ;
18858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18859: LD_ADDR_VAR 0 1
18863: PUSH
18864: LD_INT 22
18866: PUSH
18867: LD_OWVAR 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 21
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 33
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: ST_TO_ADDR
// if not tmp then
18906: LD_VAR 0 1
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 18941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18915: LD_VAR 0 1
18919: PUSH
18920: LD_INT 1
18922: PPUSH
18923: LD_VAR 0 1
18927: PPUSH
18928: CALL_OW 12
18932: ARRAY
18933: PPUSH
18934: LD_INT 1
18936: PPUSH
18937: CALL_OW 234
// end ;
18941: PPOPN 1
18943: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18944: LD_EXP 26
18948: PUSH
18949: LD_EXP 68
18953: AND
18954: IFFALSE 19095
18956: GO 18958
18958: DISABLE
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_OWVAR 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 25
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL_OW 69
18999: ST_TO_ADDR
// if not tmp then
19000: LD_VAR 0 3
19004: NOT
19005: IFFALSE 19009
// exit ;
19007: GO 19095
// un := tmp [ rand ( 1 , tmp ) ] ;
19009: LD_ADDR_VAR 0 2
19013: PUSH
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 1
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: ST_TO_ADDR
// if Crawls ( un ) then
19033: LD_VAR 0 2
19037: PPUSH
19038: CALL_OW 318
19042: IFFALSE 19053
// ComWalk ( un ) ;
19044: LD_VAR 0 2
19048: PPUSH
19049: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19053: LD_VAR 0 2
19057: PPUSH
19058: LD_INT 9
19060: PPUSH
19061: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19065: LD_INT 28
19067: PPUSH
19068: LD_OWVAR 2
19072: PPUSH
19073: LD_INT 2
19075: PPUSH
19076: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19080: LD_INT 29
19082: PPUSH
19083: LD_OWVAR 2
19087: PPUSH
19088: LD_INT 2
19090: PPUSH
19091: CALL_OW 322
// end ;
19095: PPOPN 3
19097: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19098: LD_EXP 26
19102: PUSH
19103: LD_EXP 69
19107: AND
19108: IFFALSE 19219
19110: GO 19112
19112: DISABLE
19113: LD_INT 0
19115: PPUSH
19116: PPUSH
19117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19118: LD_ADDR_VAR 0 3
19122: PUSH
19123: LD_INT 22
19125: PUSH
19126: LD_OWVAR 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 25
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 69
19153: ST_TO_ADDR
// if not tmp then
19154: LD_VAR 0 3
19158: NOT
19159: IFFALSE 19163
// exit ;
19161: GO 19219
// un := tmp [ rand ( 1 , tmp ) ] ;
19163: LD_ADDR_VAR 0 2
19167: PUSH
19168: LD_VAR 0 3
19172: PUSH
19173: LD_INT 1
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 12
19185: ARRAY
19186: ST_TO_ADDR
// if Crawls ( un ) then
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL_OW 318
19196: IFFALSE 19207
// ComWalk ( un ) ;
19198: LD_VAR 0 2
19202: PPUSH
19203: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19207: LD_VAR 0 2
19211: PPUSH
19212: LD_INT 8
19214: PPUSH
19215: CALL_OW 336
// end ;
19219: PPOPN 3
19221: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19222: LD_EXP 26
19226: PUSH
19227: LD_EXP 70
19231: AND
19232: IFFALSE 19376
19234: GO 19236
19236: DISABLE
19237: LD_INT 0
19239: PPUSH
19240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19241: LD_ADDR_VAR 0 2
19245: PUSH
19246: LD_INT 22
19248: PUSH
19249: LD_OWVAR 2
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 34
19273: PUSH
19274: LD_INT 12
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 34
19283: PUSH
19284: LD_INT 51
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 34
19293: PUSH
19294: LD_INT 32
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: PPUSH
19312: CALL_OW 69
19316: ST_TO_ADDR
// if not tmp then
19317: LD_VAR 0 2
19321: NOT
19322: IFFALSE 19326
// exit ;
19324: GO 19376
// for i in tmp do
19326: LD_ADDR_VAR 0 1
19330: PUSH
19331: LD_VAR 0 2
19335: PUSH
19336: FOR_IN
19337: IFFALSE 19374
// if GetCargo ( i , mat_artifact ) = 0 then
19339: LD_VAR 0 1
19343: PPUSH
19344: LD_INT 4
19346: PPUSH
19347: CALL_OW 289
19351: PUSH
19352: LD_INT 0
19354: EQUAL
19355: IFFALSE 19372
// SetCargo ( i , mat_siberit , 100 ) ;
19357: LD_VAR 0 1
19361: PPUSH
19362: LD_INT 3
19364: PPUSH
19365: LD_INT 100
19367: PPUSH
19368: CALL_OW 290
19372: GO 19336
19374: POP
19375: POP
// end ;
19376: PPOPN 2
19378: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19379: LD_EXP 26
19383: PUSH
19384: LD_EXP 71
19388: AND
19389: IFFALSE 19572
19391: GO 19393
19393: DISABLE
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_OWVAR 2
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 69
19419: ST_TO_ADDR
// if not tmp then
19420: LD_VAR 0 2
19424: NOT
19425: IFFALSE 19429
// exit ;
19427: GO 19572
// for i := 1 to 2 do
19429: LD_ADDR_VAR 0 1
19433: PUSH
19434: DOUBLE
19435: LD_INT 1
19437: DEC
19438: ST_TO_ADDR
19439: LD_INT 2
19441: PUSH
19442: FOR_TO
19443: IFFALSE 19570
// begin uc_side := your_side ;
19445: LD_ADDR_OWVAR 20
19449: PUSH
19450: LD_OWVAR 2
19454: ST_TO_ADDR
// uc_nation := nation_american ;
19455: LD_ADDR_OWVAR 21
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// vc_chassis := us_morphling ;
19463: LD_ADDR_OWVAR 37
19467: PUSH
19468: LD_INT 5
19470: ST_TO_ADDR
// vc_engine := engine_siberite ;
19471: LD_ADDR_OWVAR 39
19475: PUSH
19476: LD_INT 3
19478: ST_TO_ADDR
// vc_control := control_computer ;
19479: LD_ADDR_OWVAR 38
19483: PUSH
19484: LD_INT 3
19486: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19487: LD_ADDR_OWVAR 40
19491: PUSH
19492: LD_INT 10
19494: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19495: LD_VAR 0 2
19499: PUSH
19500: LD_INT 1
19502: ARRAY
19503: PPUSH
19504: CALL_OW 310
19508: NOT
19509: IFFALSE 19556
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19511: CALL_OW 45
19515: PPUSH
19516: LD_VAR 0 2
19520: PUSH
19521: LD_INT 1
19523: ARRAY
19524: PPUSH
19525: CALL_OW 250
19529: PPUSH
19530: LD_VAR 0 2
19534: PUSH
19535: LD_INT 1
19537: ARRAY
19538: PPUSH
19539: CALL_OW 251
19543: PPUSH
19544: LD_INT 12
19546: PPUSH
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 50
19554: GO 19568
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19556: CALL_OW 45
19560: PPUSH
19561: LD_INT 1
19563: PPUSH
19564: CALL_OW 51
// end ;
19568: GO 19442
19570: POP
19571: POP
// end ;
19572: PPOPN 2
19574: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19575: LD_EXP 26
19579: PUSH
19580: LD_EXP 72
19584: AND
19585: IFFALSE 19807
19587: GO 19589
19589: DISABLE
19590: LD_INT 0
19592: PPUSH
19593: PPUSH
19594: PPUSH
19595: PPUSH
19596: PPUSH
19597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19598: LD_ADDR_VAR 0 6
19602: PUSH
19603: LD_INT 22
19605: PUSH
19606: LD_OWVAR 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 21
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 3
19627: PUSH
19628: LD_INT 23
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: ST_TO_ADDR
// if not tmp then
19652: LD_VAR 0 6
19656: NOT
19657: IFFALSE 19661
// exit ;
19659: GO 19807
// s1 := rand ( 1 , 4 ) ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_INT 1
19668: PPUSH
19669: LD_INT 4
19671: PPUSH
19672: CALL_OW 12
19676: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19677: LD_ADDR_VAR 0 4
19681: PUSH
19682: LD_VAR 0 6
19686: PUSH
19687: LD_INT 1
19689: ARRAY
19690: PPUSH
19691: LD_VAR 0 2
19695: PPUSH
19696: CALL_OW 259
19700: ST_TO_ADDR
// if s1 = 1 then
19701: LD_VAR 0 2
19705: PUSH
19706: LD_INT 1
19708: EQUAL
19709: IFFALSE 19729
// s2 := rand ( 2 , 4 ) else
19711: LD_ADDR_VAR 0 3
19715: PUSH
19716: LD_INT 2
19718: PPUSH
19719: LD_INT 4
19721: PPUSH
19722: CALL_OW 12
19726: ST_TO_ADDR
19727: GO 19737
// s2 := 1 ;
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: LD_INT 1
19736: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19737: LD_ADDR_VAR 0 5
19741: PUSH
19742: LD_VAR 0 6
19746: PUSH
19747: LD_INT 1
19749: ARRAY
19750: PPUSH
19751: LD_VAR 0 3
19755: PPUSH
19756: CALL_OW 259
19760: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19761: LD_VAR 0 6
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: LD_VAR 0 2
19774: PPUSH
19775: LD_VAR 0 5
19779: PPUSH
19780: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19784: LD_VAR 0 6
19788: PUSH
19789: LD_INT 1
19791: ARRAY
19792: PPUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 237
// end ;
19807: PPOPN 6
19809: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19810: LD_EXP 26
19814: PUSH
19815: LD_EXP 73
19819: AND
19820: IFFALSE 19899
19822: GO 19824
19824: DISABLE
19825: LD_INT 0
19827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19828: LD_ADDR_VAR 0 1
19832: PUSH
19833: LD_INT 22
19835: PUSH
19836: LD_OWVAR 2
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 3
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PPUSH
19859: CALL_OW 69
19863: ST_TO_ADDR
// if not tmp then
19864: LD_VAR 0 1
19868: NOT
19869: IFFALSE 19873
// exit ;
19871: GO 19899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19873: LD_VAR 0 1
19877: PUSH
19878: LD_INT 1
19880: PPUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 12
19890: ARRAY
19891: PPUSH
19892: LD_INT 1
19894: PPUSH
19895: CALL_OW 234
// end ;
19899: PPOPN 1
19901: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19902: LD_EXP 26
19906: PUSH
19907: LD_EXP 74
19911: AND
19912: IFFALSE 20024
19914: GO 19916
19916: DISABLE
19917: LD_INT 0
19919: PPUSH
19920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_OWVAR 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: LD_INT 30
19943: PUSH
19944: LD_INT 27
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 30
19953: PUSH
19954: LD_INT 26
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 30
19963: PUSH
19964: LD_INT 28
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PPUSH
19981: CALL_OW 69
19985: ST_TO_ADDR
// if not tmp then
19986: LD_VAR 0 2
19990: NOT
19991: IFFALSE 19995
// exit ;
19993: GO 20024
// for i in tmp do
19995: LD_ADDR_VAR 0 1
19999: PUSH
20000: LD_VAR 0 2
20004: PUSH
20005: FOR_IN
20006: IFFALSE 20022
// SetLives ( i , 1 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 1
20015: PPUSH
20016: CALL_OW 234
20020: GO 20005
20022: POP
20023: POP
// end ;
20024: PPOPN 2
20026: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20027: LD_EXP 26
20031: PUSH
20032: LD_EXP 75
20036: AND
20037: IFFALSE 20311
20039: GO 20041
20041: DISABLE
20042: LD_INT 0
20044: PPUSH
20045: PPUSH
20046: PPUSH
// begin i := rand ( 1 , 7 ) ;
20047: LD_ADDR_VAR 0 1
20051: PUSH
20052: LD_INT 1
20054: PPUSH
20055: LD_INT 7
20057: PPUSH
20058: CALL_OW 12
20062: ST_TO_ADDR
// case i of 1 :
20063: LD_VAR 0 1
20067: PUSH
20068: LD_INT 1
20070: DOUBLE
20071: EQUAL
20072: IFTRUE 20076
20074: GO 20086
20076: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20077: LD_STRING earthquake(getX(game), 0, 32)
20079: PPUSH
20080: CALL_OW 559
20084: GO 20311
20086: LD_INT 2
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20108
20094: POP
// begin ToLua ( displayStucuk(); ) ;
20095: LD_STRING displayStucuk();
20097: PPUSH
20098: CALL_OW 559
// ResetFog ;
20102: CALL_OW 335
// end ; 3 :
20106: GO 20311
20108: LD_INT 3
20110: DOUBLE
20111: EQUAL
20112: IFTRUE 20116
20114: GO 20220
20116: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20117: LD_ADDR_VAR 0 2
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_OWVAR 2
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 25
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: ST_TO_ADDR
// if not tmp then
20153: LD_VAR 0 2
20157: NOT
20158: IFFALSE 20162
// exit ;
20160: GO 20311
// un := tmp [ rand ( 1 , tmp ) ] ;
20162: LD_ADDR_VAR 0 3
20166: PUSH
20167: LD_VAR 0 2
20171: PUSH
20172: LD_INT 1
20174: PPUSH
20175: LD_VAR 0 2
20179: PPUSH
20180: CALL_OW 12
20184: ARRAY
20185: ST_TO_ADDR
// if Crawls ( un ) then
20186: LD_VAR 0 3
20190: PPUSH
20191: CALL_OW 318
20195: IFFALSE 20206
// ComWalk ( un ) ;
20197: LD_VAR 0 3
20201: PPUSH
20202: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20206: LD_VAR 0 3
20210: PPUSH
20211: LD_INT 8
20213: PPUSH
20214: CALL_OW 336
// end ; 4 :
20218: GO 20311
20220: LD_INT 4
20222: DOUBLE
20223: EQUAL
20224: IFTRUE 20228
20226: GO 20289
20228: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_INT 22
20236: PUSH
20237: LD_OWVAR 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 30
20248: PUSH
20249: LD_INT 29
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PPUSH
20260: CALL_OW 69
20264: ST_TO_ADDR
// if not tmp then
20265: LD_VAR 0 2
20269: NOT
20270: IFFALSE 20274
// exit ;
20272: GO 20311
// DestroyUnit ( tmp [ 1 ] ) ;
20274: LD_VAR 0 2
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PPUSH
20283: CALL_OW 65
// end ; 5 .. 7 :
20287: GO 20311
20289: LD_INT 5
20291: DOUBLE
20292: GREATEREQUAL
20293: IFFALSE 20301
20295: LD_INT 7
20297: DOUBLE
20298: LESSEQUAL
20299: IFTRUE 20303
20301: GO 20310
20303: POP
// StreamSibBomb ; end ;
20304: CALL 16561 0 0
20308: GO 20311
20310: POP
// end ;
20311: PPOPN 3
20313: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20314: LD_EXP 26
20318: PUSH
20319: LD_EXP 76
20323: AND
20324: IFFALSE 20480
20326: GO 20328
20328: DISABLE
20329: LD_INT 0
20331: PPUSH
20332: PPUSH
20333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20334: LD_ADDR_VAR 0 2
20338: PUSH
20339: LD_INT 81
20341: PUSH
20342: LD_OWVAR 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 21
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 21
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 69
20387: ST_TO_ADDR
// if not tmp then
20388: LD_VAR 0 2
20392: NOT
20393: IFFALSE 20397
// exit ;
20395: GO 20480
// p := 0 ;
20397: LD_ADDR_VAR 0 3
20401: PUSH
20402: LD_INT 0
20404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20405: LD_INT 35
20407: PPUSH
20408: CALL_OW 67
// p := p + 1 ;
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 1
20424: PLUS
20425: ST_TO_ADDR
// for i in tmp do
20426: LD_ADDR_VAR 0 1
20430: PUSH
20431: LD_VAR 0 2
20435: PUSH
20436: FOR_IN
20437: IFFALSE 20468
// if GetLives ( i ) < 1000 then
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 256
20448: PUSH
20449: LD_INT 1000
20451: LESS
20452: IFFALSE 20466
// SetLives ( i , 1000 ) ;
20454: LD_VAR 0 1
20458: PPUSH
20459: LD_INT 1000
20461: PPUSH
20462: CALL_OW 234
20466: GO 20436
20468: POP
20469: POP
// until p > 20 ;
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 20
20477: GREATER
20478: IFFALSE 20405
// end ;
20480: PPOPN 3
20482: END
// every 0 0$1 trigger StreamModeActive and sTime do
20483: LD_EXP 26
20487: PUSH
20488: LD_EXP 77
20492: AND
20493: IFFALSE 20528
20495: GO 20497
20497: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20498: LD_INT 28
20500: PPUSH
20501: LD_OWVAR 2
20505: PPUSH
20506: LD_INT 2
20508: PPUSH
20509: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20513: LD_INT 30
20515: PPUSH
20516: LD_OWVAR 2
20520: PPUSH
20521: LD_INT 2
20523: PPUSH
20524: CALL_OW 322
// end ;
20528: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20529: LD_EXP 26
20533: PUSH
20534: LD_EXP 78
20538: AND
20539: IFFALSE 20660
20541: GO 20543
20543: DISABLE
20544: LD_INT 0
20546: PPUSH
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20548: LD_ADDR_VAR 0 2
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 3
20577: PUSH
20578: LD_INT 23
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 69
20601: ST_TO_ADDR
// if not tmp then
20602: LD_VAR 0 2
20606: NOT
20607: IFFALSE 20611
// exit ;
20609: GO 20660
// for i in tmp do
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_VAR 0 2
20620: PUSH
20621: FOR_IN
20622: IFFALSE 20658
// begin if Crawls ( i ) then
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 318
20633: IFFALSE 20644
// ComWalk ( i ) ;
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL_OW 138
// SetClass ( i , 2 ) ;
20644: LD_VAR 0 1
20648: PPUSH
20649: LD_INT 2
20651: PPUSH
20652: CALL_OW 336
// end ;
20656: GO 20621
20658: POP
20659: POP
// end ;
20660: PPOPN 2
20662: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20663: LD_EXP 26
20667: PUSH
20668: LD_EXP 79
20672: AND
20673: IFFALSE 20954
20675: GO 20677
20677: DISABLE
20678: LD_INT 0
20680: PPUSH
20681: PPUSH
20682: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20683: LD_OWVAR 2
20687: PPUSH
20688: LD_INT 9
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: LD_INT 1
20696: PPUSH
20697: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20701: LD_INT 9
20703: PPUSH
20704: LD_OWVAR 2
20708: PPUSH
20709: CALL_OW 343
// uc_side := 9 ;
20713: LD_ADDR_OWVAR 20
20717: PUSH
20718: LD_INT 9
20720: ST_TO_ADDR
// uc_nation := 2 ;
20721: LD_ADDR_OWVAR 21
20725: PUSH
20726: LD_INT 2
20728: ST_TO_ADDR
// hc_name := Dark Warrior ;
20729: LD_ADDR_OWVAR 26
20733: PUSH
20734: LD_STRING Dark Warrior
20736: ST_TO_ADDR
// hc_gallery :=  ;
20737: LD_ADDR_OWVAR 33
20741: PUSH
20742: LD_STRING 
20744: ST_TO_ADDR
// hc_noskilllimit := true ;
20745: LD_ADDR_OWVAR 76
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20753: LD_ADDR_OWVAR 31
20757: PUSH
20758: LD_INT 30
20760: PUSH
20761: LD_INT 30
20763: PUSH
20764: LD_INT 30
20766: PUSH
20767: LD_INT 30
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: ST_TO_ADDR
// un := CreateHuman ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: CALL_OW 44
20785: ST_TO_ADDR
// hc_noskilllimit := false ;
20786: LD_ADDR_OWVAR 76
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20794: LD_VAR 0 3
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 51
// p := 0 ;
20806: LD_ADDR_VAR 0 2
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20814: LD_INT 35
20816: PPUSH
20817: CALL_OW 67
// p := p + 1 ;
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: LD_INT 1
20833: PLUS
20834: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20835: LD_VAR 0 3
20839: PPUSH
20840: CALL_OW 256
20844: PUSH
20845: LD_INT 1000
20847: LESS
20848: IFFALSE 20862
// SetLives ( un , 1000 ) ;
20850: LD_VAR 0 3
20854: PPUSH
20855: LD_INT 1000
20857: PPUSH
20858: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 81
20869: PUSH
20870: LD_OWVAR 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 91
20881: PUSH
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 30
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 69
20903: PPUSH
20904: LD_VAR 0 3
20908: PPUSH
20909: CALL_OW 74
20913: PPUSH
20914: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20918: LD_VAR 0 2
20922: PUSH
20923: LD_INT 60
20925: GREATER
20926: PUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: CALL_OW 301
20936: OR
20937: IFFALSE 20814
// if un then
20939: LD_VAR 0 3
20943: IFFALSE 20954
// RemoveUnit ( un ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: CALL_OW 64
// end ; end_of_file end_of_file
20954: PPOPN 3
20956: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 264
20972: PUSH
20973: LD_EXP 84
20977: EQUAL
20978: IFFALSE 21050
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20980: LD_INT 68
20982: PPUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 255
20992: PPUSH
20993: CALL_OW 321
20997: PUSH
20998: LD_INT 2
21000: EQUAL
21001: IFFALSE 21013
// eff := 70 else
21003: LD_ADDR_VAR 0 4
21007: PUSH
21008: LD_INT 70
21010: ST_TO_ADDR
21011: GO 21021
// eff := 30 ;
21013: LD_ADDR_VAR 0 4
21017: PUSH
21018: LD_INT 30
21020: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21021: LD_VAR 0 1
21025: PPUSH
21026: CALL_OW 250
21030: PPUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 251
21040: PPUSH
21041: LD_VAR 0 4
21045: PPUSH
21046: CALL_OW 495
// end ; end ;
21050: LD_VAR 0 2
21054: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21055: LD_INT 0
21057: PPUSH
// end ;
21058: LD_VAR 0 4
21062: RET
// export function SOS_Command ( cmd ) ; begin
21063: LD_INT 0
21065: PPUSH
// end ;
21066: LD_VAR 0 2
21070: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21071: LD_VAR 0 1
21075: PUSH
21076: LD_INT 255
21078: EQUAL
21079: PUSH
21080: LD_VAR 0 2
21084: PPUSH
21085: CALL_OW 264
21089: PUSH
21090: LD_INT 14
21092: PUSH
21093: LD_INT 53
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: IN
21100: AND
21101: PUSH
21102: LD_VAR 0 4
21106: PPUSH
21107: LD_VAR 0 5
21111: PPUSH
21112: CALL_OW 488
21116: AND
21117: IFFALSE 21141
// CutTreeXYR ( unit , x , y , 12 ) ;
21119: LD_VAR 0 2
21123: PPUSH
21124: LD_VAR 0 4
21128: PPUSH
21129: LD_VAR 0 5
21133: PPUSH
21134: LD_INT 12
21136: PPUSH
21137: CALL 21144 0 4
// end ;
21141: PPOPN 5
21143: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21144: LD_INT 0
21146: PPUSH
21147: PPUSH
21148: PPUSH
21149: PPUSH
21150: PPUSH
21151: PPUSH
21152: PPUSH
21153: PPUSH
21154: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21155: LD_VAR 0 1
21159: NOT
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: LD_VAR 0 3
21170: PPUSH
21171: CALL_OW 488
21175: NOT
21176: OR
21177: PUSH
21178: LD_VAR 0 4
21182: NOT
21183: OR
21184: IFFALSE 21188
// exit ;
21186: GO 21528
// list := [ ] ;
21188: LD_ADDR_VAR 0 13
21192: PUSH
21193: EMPTY
21194: ST_TO_ADDR
// if x - r < 0 then
21195: LD_VAR 0 2
21199: PUSH
21200: LD_VAR 0 4
21204: MINUS
21205: PUSH
21206: LD_INT 0
21208: LESS
21209: IFFALSE 21221
// min_x := 0 else
21211: LD_ADDR_VAR 0 7
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
21219: GO 21237
// min_x := x - r ;
21221: LD_ADDR_VAR 0 7
21225: PUSH
21226: LD_VAR 0 2
21230: PUSH
21231: LD_VAR 0 4
21235: MINUS
21236: ST_TO_ADDR
// if y - r < 0 then
21237: LD_VAR 0 3
21241: PUSH
21242: LD_VAR 0 4
21246: MINUS
21247: PUSH
21248: LD_INT 0
21250: LESS
21251: IFFALSE 21263
// min_y := 0 else
21253: LD_ADDR_VAR 0 8
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
21261: GO 21279
// min_y := y - r ;
21263: LD_ADDR_VAR 0 8
21267: PUSH
21268: LD_VAR 0 3
21272: PUSH
21273: LD_VAR 0 4
21277: MINUS
21278: ST_TO_ADDR
// max_x := x + r ;
21279: LD_ADDR_VAR 0 9
21283: PUSH
21284: LD_VAR 0 2
21288: PUSH
21289: LD_VAR 0 4
21293: PLUS
21294: ST_TO_ADDR
// max_y := y + r ;
21295: LD_ADDR_VAR 0 10
21299: PUSH
21300: LD_VAR 0 3
21304: PUSH
21305: LD_VAR 0 4
21309: PLUS
21310: ST_TO_ADDR
// for _x = min_x to max_x do
21311: LD_ADDR_VAR 0 11
21315: PUSH
21316: DOUBLE
21317: LD_VAR 0 7
21321: DEC
21322: ST_TO_ADDR
21323: LD_VAR 0 9
21327: PUSH
21328: FOR_TO
21329: IFFALSE 21446
// for _y = min_y to max_y do
21331: LD_ADDR_VAR 0 12
21335: PUSH
21336: DOUBLE
21337: LD_VAR 0 8
21341: DEC
21342: ST_TO_ADDR
21343: LD_VAR 0 10
21347: PUSH
21348: FOR_TO
21349: IFFALSE 21442
// begin if not ValidHex ( _x , _y ) then
21351: LD_VAR 0 11
21355: PPUSH
21356: LD_VAR 0 12
21360: PPUSH
21361: CALL_OW 488
21365: NOT
21366: IFFALSE 21370
// continue ;
21368: GO 21348
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21370: LD_VAR 0 11
21374: PPUSH
21375: LD_VAR 0 12
21379: PPUSH
21380: CALL_OW 351
21384: PUSH
21385: LD_VAR 0 11
21389: PPUSH
21390: LD_VAR 0 12
21394: PPUSH
21395: CALL_OW 554
21399: AND
21400: IFFALSE 21440
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21402: LD_ADDR_VAR 0 13
21406: PUSH
21407: LD_VAR 0 13
21411: PPUSH
21412: LD_VAR 0 13
21416: PUSH
21417: LD_INT 1
21419: PLUS
21420: PPUSH
21421: LD_VAR 0 11
21425: PUSH
21426: LD_VAR 0 12
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PPUSH
21435: CALL_OW 2
21439: ST_TO_ADDR
// end ;
21440: GO 21348
21442: POP
21443: POP
21444: GO 21328
21446: POP
21447: POP
// if not list then
21448: LD_VAR 0 13
21452: NOT
21453: IFFALSE 21457
// exit ;
21455: GO 21528
// for i in list do
21457: LD_ADDR_VAR 0 6
21461: PUSH
21462: LD_VAR 0 13
21466: PUSH
21467: FOR_IN
21468: IFFALSE 21526
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21470: LD_VAR 0 1
21474: PPUSH
21475: LD_STRING M
21477: PUSH
21478: LD_VAR 0 6
21482: PUSH
21483: LD_INT 1
21485: ARRAY
21486: PUSH
21487: LD_VAR 0 6
21491: PUSH
21492: LD_INT 2
21494: ARRAY
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: PPUSH
21520: CALL_OW 447
21524: GO 21467
21526: POP
21527: POP
// end ; end_of_file
21528: LD_VAR 0 5
21532: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21533: GO 21535
21535: DISABLE
// begin ru_radar := 98 ;
21536: LD_ADDR_EXP 80
21540: PUSH
21541: LD_INT 98
21543: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21544: LD_ADDR_EXP 81
21548: PUSH
21549: LD_INT 89
21551: ST_TO_ADDR
// us_hack := 99 ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 99
21559: ST_TO_ADDR
// us_artillery := 97 ;
21560: LD_ADDR_EXP 83
21564: PUSH
21565: LD_INT 97
21567: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21568: LD_ADDR_EXP 84
21572: PUSH
21573: LD_INT 91
21575: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21576: LD_ADDR_EXP 85
21580: PUSH
21581: LD_INT 92
21583: ST_TO_ADDR
// tech_Artillery := 80 ;
21584: LD_ADDR_EXP 86
21588: PUSH
21589: LD_INT 80
21591: ST_TO_ADDR
// tech_RadMat := 81 ;
21592: LD_ADDR_EXP 87
21596: PUSH
21597: LD_INT 81
21599: ST_TO_ADDR
// tech_BasicTools := 82 ;
21600: LD_ADDR_EXP 88
21604: PUSH
21605: LD_INT 82
21607: ST_TO_ADDR
// tech_Cargo := 83 ;
21608: LD_ADDR_EXP 89
21612: PUSH
21613: LD_INT 83
21615: ST_TO_ADDR
// tech_Track := 84 ;
21616: LD_ADDR_EXP 90
21620: PUSH
21621: LD_INT 84
21623: ST_TO_ADDR
// tech_Crane := 85 ;
21624: LD_ADDR_EXP 91
21628: PUSH
21629: LD_INT 85
21631: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21632: LD_ADDR_EXP 92
21636: PUSH
21637: LD_INT 86
21639: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21640: LD_ADDR_EXP 93
21644: PUSH
21645: LD_INT 87
21647: ST_TO_ADDR
// end ;
21648: END
