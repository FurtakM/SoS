// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5681
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5446: LD_EXP 17
5450: PPUSH
5451: LD_STRING DO-olaf-1
5453: PPUSH
5454: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5458: LD_EXP 16
5462: PPUSH
5463: LD_STRING DH-olaf-1
5465: PPUSH
5466: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING DO-olaf-2
5477: PPUSH
5478: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5482: LD_EXP 16
5486: PPUSH
5487: LD_STRING DH-olaf-2
5489: PPUSH
5490: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5494: LD_EXP 17
5498: PPUSH
5499: LD_STRING DO-olaf-3
5501: PPUSH
5502: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5506: LD_EXP 17
5510: PPUSH
5511: LD_STRING DO-olaf-4
5513: PPUSH
5514: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5518: LD_EXP 16
5522: PPUSH
5523: LD_STRING DH-olaf-4
5525: PPUSH
5526: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5530: LD_EXP 17
5534: PPUSH
5535: LD_STRING DO-olaf-5
5537: PPUSH
5538: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5542: LD_EXP 16
5546: PPUSH
5547: LD_STRING DH-olaf-5
5549: PPUSH
5550: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5554: LD_EXP 17
5558: PPUSH
5559: LD_STRING DO-olaf-6
5561: PPUSH
5562: CALL_OW 88
// if russianSpotted or johnnySaved then
5566: LD_EXP 9
5570: PUSH
5571: LD_EXP 4
5575: OR
5576: IFFALSE 5604
// begin Say ( Heike , DH-olaf-6a ) ;
5578: LD_EXP 16
5582: PPUSH
5583: LD_STRING DH-olaf-6a
5585: PPUSH
5586: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5590: LD_EXP 17
5594: PPUSH
5595: LD_STRING DO-olaf-7a
5597: PPUSH
5598: CALL_OW 88
// end else
5602: GO 5628
// begin Say ( Heike , DH-olaf-6b ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING DH-olaf-6b
5611: PPUSH
5612: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5616: LD_EXP 17
5620: PPUSH
5621: LD_STRING DO-olaf-7b
5623: PPUSH
5624: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5628: LD_EXP 17
5632: PPUSH
5633: LD_STRING DO-olaf-8
5635: PPUSH
5636: CALL_OW 88
// InGameOff ;
5640: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5644: LD_STRING O3_camp_cont
5646: PPUSH
5647: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5651: LD_EXP 17
5655: PPUSH
5656: LD_INT 52
5658: PPUSH
5659: LD_INT 90
5661: PPUSH
5662: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 53
5673: PPUSH
5674: LD_INT 89
5676: PPUSH
5677: CALL_OW 178
// end ;
5681: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5682: LD_EXP 8
5686: NOT
5687: PUSH
5688: LD_EXP 16
5692: PPUSH
5693: LD_EXP 18
5697: PPUSH
5698: CALL_OW 296
5702: PUSH
5703: LD_INT 36
5705: LESS
5706: AND
5707: IFFALSE 5727
5709: GO 5711
5711: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5712: LD_EXP 17
5716: PPUSH
5717: LD_INT 39
5719: PPUSH
5720: LD_INT 71
5722: PPUSH
5723: CALL_OW 111
5727: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5728: LD_EXP 7
5732: NOT
5733: PUSH
5734: LD_INT 2
5736: PPUSH
5737: LD_EXP 19
5741: PPUSH
5742: CALL_OW 292
5746: PUSH
5747: LD_INT 2
5749: PPUSH
5750: LD_EXP 18
5754: PPUSH
5755: CALL_OW 292
5759: OR
5760: AND
5761: IFFALSE 7082
5763: GO 5765
5765: DISABLE
5766: LD_INT 0
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin if not johnnySaved then
5771: LD_EXP 4
5775: NOT
5776: IFFALSE 5787
// KillUnit ( Johnny ) ;
5778: LD_EXP 25
5782: PPUSH
5783: CALL_OW 66
// mercenariesSpotted := true ;
5787: LD_ADDR_EXP 7
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5795: LD_STRING O4_camp_cont
5797: PPUSH
5798: CALL_OW 337
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5806: LD_INT 53
5808: PPUSH
5809: LD_INT 89
5811: PPUSH
5812: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5816: LD_INT 53
5818: PPUSH
5819: LD_INT 89
5821: PPUSH
5822: LD_INT 2
5824: PPUSH
5825: LD_INT 8
5827: NEG
5828: PPUSH
5829: CALL_OW 330
// if olafSpotted then
5833: LD_EXP 8
5837: IFFALSE 5955
// begin AddComTurnUnit ( Olaf , Heike ) ;
5839: LD_EXP 17
5843: PPUSH
5844: LD_EXP 16
5848: PPUSH
5849: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5853: LD_EXP 16
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 86
5863: PPUSH
5864: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5868: LD_EXP 16
5872: PPUSH
5873: LD_EXP 17
5877: PPUSH
5878: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5882: LD_EXP 17
5886: PPUSH
5887: LD_STRING DO-camp-1
5889: PPUSH
5890: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5894: LD_EXP 18
5898: PUSH
5899: LD_EXP 19
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: LD_EXP 16
5912: PPUSH
5913: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5917: LD_EXP 18
5921: PPUSH
5922: LD_STRING DG-camp-1
5924: PPUSH
5925: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5929: LD_EXP 16
5933: PPUSH
5934: LD_STRING DH-camp-1
5936: PPUSH
5937: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5941: LD_EXP 17
5945: PPUSH
5946: LD_STRING DO-camp-2
5948: PPUSH
5949: CALL_OW 88
// end else
5953: GO 6350
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5955: LD_EXP 16
5959: PPUSH
5960: LD_INT 51
5962: PPUSH
5963: LD_INT 86
5965: PPUSH
5966: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5970: LD_EXP 16
5974: PPUSH
5975: LD_EXP 18
5979: PPUSH
5980: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5984: LD_EXP 18
5988: PUSH
5989: LD_EXP 19
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: LD_EXP 16
6002: PPUSH
6003: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6007: LD_EXP 18
6011: PPUSH
6012: LD_STRING DG-camp-1a
6014: PPUSH
6015: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING DH-camp-1a
6026: PPUSH
6027: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6038: LD_EXP 19
6042: PPUSH
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6052: LD_EXP 19
6056: PPUSH
6057: LD_STRING DM-camp-1a
6059: PPUSH
6060: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6064: LD_EXP 17
6068: PPUSH
6069: LD_INT 52
6071: PPUSH
6072: LD_INT 90
6074: PPUSH
6075: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6079: LD_EXP 19
6083: PPUSH
6084: LD_EXP 16
6088: PPUSH
6089: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING DG-camp-2a
6100: PPUSH
6101: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6105: LD_EXP 16
6109: PPUSH
6110: LD_STRING DH-camp-2a
6112: PPUSH
6113: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6117: LD_EXP 19
6121: PPUSH
6122: LD_STRING DM-camp-2a
6124: PPUSH
6125: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6129: LD_INT 35
6131: PPUSH
6132: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6136: LD_EXP 17
6140: PPUSH
6141: LD_EXP 16
6145: PPUSH
6146: CALL_OW 296
6150: PUSH
6151: LD_INT 10
6153: LESS
6154: IFFALSE 6129
// AddComTurnUnit ( Olaf , Heike ) ;
6156: LD_EXP 17
6160: PPUSH
6161: LD_EXP 16
6165: PPUSH
6166: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6170: LD_EXP 19
6174: PPUSH
6175: LD_EXP 16
6179: PPUSH
6180: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6184: LD_EXP 17
6188: PPUSH
6189: LD_STRING DO-camp-2a
6191: PPUSH
6192: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6196: LD_EXP 16
6200: PPUSH
6201: LD_EXP 17
6205: PPUSH
6206: CALL_OW 119
// if russianSpotted then
6210: LD_EXP 9
6214: IFFALSE 6254
// begin Say ( Heike , DH-camp-2aa ) ;
6216: LD_EXP 16
6220: PPUSH
6221: LD_STRING DH-camp-2aa
6223: PPUSH
6224: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6228: LD_EXP 18
6232: PPUSH
6233: LD_STRING DG-camp-2aa
6235: PPUSH
6236: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6240: LD_EXP 19
6244: PPUSH
6245: LD_STRING DM-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// end else
6252: GO 6278
// begin Say ( Heike , DH-camp-2ab ) ;
6254: LD_EXP 16
6258: PPUSH
6259: LD_STRING DH-camp-2ab
6261: PPUSH
6262: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6266: LD_EXP 19
6270: PPUSH
6271: LD_STRING DM-camp-2ab
6273: PPUSH
6274: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-3a
6285: PPUSH
6286: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6290: LD_EXP 17
6294: PPUSH
6295: LD_STRING DO-camp-3a
6297: PPUSH
6298: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6302: LD_EXP 18
6306: PPUSH
6307: LD_STRING DG-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-4aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6326: LD_EXP 19
6330: PPUSH
6331: LD_STRING DM-camp-4aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_STRING DO-camp-4a
6345: PPUSH
6346: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6350: LD_EXP 17
6354: PPUSH
6355: LD_STRING DO-camp-3
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4
6369: PPUSH
6370: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_EXP 17
6383: PPUSH
6384: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6388: LD_EXP 18
6392: PPUSH
6393: LD_STRING DG-camp-4
6395: PPUSH
6396: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6400: LD_EXP 16
6404: PPUSH
6405: LD_EXP 18
6409: PPUSH
6410: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6414: LD_EXP 16
6418: PPUSH
6419: LD_STRING DH-camp-4
6421: PPUSH
6422: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6426: LD_EXP 19
6430: PUSH
6431: LD_EXP 17
6435: PUSH
6436: LD_EXP 18
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: PPUSH
6446: LD_EXP 16
6450: PPUSH
6451: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6455: LD_EXP 18
6459: PPUSH
6460: LD_STRING DG-camp-5
6462: PPUSH
6463: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6467: LD_EXP 18
6471: PPUSH
6472: LD_STRING DG-camp-6
6474: PPUSH
6475: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6479: LD_EXP 16
6483: PPUSH
6484: LD_STRING DH-camp-6
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-7
6498: PPUSH
6499: CALL_OW 88
// if DogTagFound then
6503: LD_EXP 6
6507: IFFALSE 6547
// begin Say ( Heike , DH-quest-1a ) ;
6509: LD_EXP 16
6513: PPUSH
6514: LD_STRING DH-quest-1a
6516: PPUSH
6517: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6521: LD_EXP 18
6525: PPUSH
6526: LD_STRING DG-quest-1a
6528: PPUSH
6529: CALL_OW 88
// mercenariesQuestDone := true ;
6533: LD_ADDR_EXP 11
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// InGameOff ;
6541: CALL_OW 9
// end else
6545: GO 6713
// begin Say ( Heike , DH-camp-7 ) ;
6547: LD_EXP 16
6551: PPUSH
6552: LD_STRING DH-camp-7
6554: PPUSH
6555: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6559: LD_EXP 16
6563: PPUSH
6564: CALL_OW 256
6568: PUSH
6569: LD_INT 1000
6571: LESS
6572: IFFALSE 6664
// begin Say ( Olaf , DO-heal-1 ) ;
6574: LD_EXP 17
6578: PPUSH
6579: LD_STRING DO-heal-1
6581: PPUSH
6582: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_INT 51
6593: PPUSH
6594: LD_INT 88
6596: PPUSH
6597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6601: LD_INT 35
6603: PPUSH
6604: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6608: LD_EXP 16
6612: PPUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 296
6622: PUSH
6623: LD_INT 4
6625: LESS
6626: PUSH
6627: LD_EXP 16
6631: PPUSH
6632: LD_INT 51
6634: PPUSH
6635: LD_INT 88
6637: PPUSH
6638: CALL_OW 307
6642: OR
6643: IFFALSE 6601
// SetLives ( Heike , 1000 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_INT 1000
6652: PPUSH
6653: CALL_OW 234
// wait ( 0 0$2 ) ;
6657: LD_INT 70
6659: PPUSH
6660: CALL_OW 67
// end ; InGameOff ;
6664: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6668: LD_EXP 17
6672: PUSH
6673: LD_EXP 18
6677: PUSH
6678: LD_EXP 19
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: PPUSH
6688: LD_INT 53
6690: PPUSH
6691: LD_INT 89
6693: PPUSH
6694: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6698: LD_STRING O5_proof_cont
6700: PPUSH
6701: CALL_OW 337
// mercenariesQuestReady := true ;
6705: LD_ADDR_EXP 10
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6713: LD_EXP 10
6717: NOT
6718: IFFALSE 6722
// exit ;
6720: GO 7082
// wait ( 0 0$35 ) ;
6722: LD_INT 1225
6724: PPUSH
6725: CALL_OW 67
// driver := PreparePatrolTank ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL 2814 0 0
6738: ST_TO_ADDR
// if not driver then
6739: LD_VAR 0 2
6743: NOT
6744: IFFALSE 6748
// exit ;
6746: GO 7082
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_INT 1
6753: PPUSH
6754: LD_INT 2
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 310
6778: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6779: LD_VAR 0 3
6783: PPUSH
6784: LD_INT 500
6786: PPUSH
6787: CALL_OW 234
// SetLives ( driver , 450 ) ;
6791: LD_VAR 0 2
6795: PPUSH
6796: LD_INT 450
6798: PPUSH
6799: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 59
6810: PPUSH
6811: LD_INT 60
6813: PPUSH
6814: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 59
6832: PPUSH
6833: LD_INT 60
6835: PPUSH
6836: CALL_OW 307
6840: IFFALSE 6818
// if not See ( 1 , Heike ) then
6842: LD_INT 1
6844: PPUSH
6845: LD_EXP 16
6849: PPUSH
6850: CALL_OW 292
6854: NOT
6855: IFFALSE 6979
// begin if Difficulty < 3 then
6857: LD_OWVAR 67
6861: PUSH
6862: LD_INT 3
6864: LESS
6865: IFFALSE 6883
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6867: LD_INT 59
6869: PPUSH
6870: LD_INT 60
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 6
6878: PPUSH
6879: CALL_OW 330
// ComExitVehicle ( driver ) ;
6883: LD_VAR 0 2
6887: PPUSH
6888: CALL_OW 121
// wait ( 0 0$1 ) ;
6892: LD_INT 35
6894: PPUSH
6895: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6899: LD_VAR 0 2
6903: PPUSH
6904: LD_INT 58
6906: PPUSH
6907: LD_INT 54
6909: PPUSH
6910: CALL_OW 171
// wait ( 0 0$1 ) ;
6914: LD_INT 35
6916: PPUSH
6917: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6921: LD_VAR 0 2
6925: PPUSH
6926: LD_INT 57
6928: PPUSH
6929: LD_INT 53
6931: PPUSH
6932: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_INT 350
6943: PPUSH
6944: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6962: LD_VAR 0 2
6966: PPUSH
6967: LD_INT 107
6969: PPUSH
6970: LD_INT 118
6972: PPUSH
6973: CALL_OW 171
// end else
6977: GO 6994
// begin ComMoveXY ( driver , 107 , 118 ) ;
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_INT 107
6986: PPUSH
6987: LD_INT 118
6989: PPUSH
6990: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6994: LD_INT 35
6996: PPUSH
6997: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 307
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 301
7026: OR
7027: IFFALSE 6994
// if IsDead ( driver [ 1 ] ) then
7029: LD_VAR 0 2
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 301
7042: IFFALSE 7046
// exit ;
7044: GO 7082
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7046: LD_ADDR_VAR 0 1
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: PUSH
7066: FOR_IN
7067: IFFALSE 7080
// RemoveUnit ( i ) ;
7069: LD_VAR 0 1
7073: PPUSH
7074: CALL_OW 64
7078: GO 7066
7080: POP
7081: POP
// end ;
7082: PPOPN 3
7084: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7085: LD_INT 10
7087: PPUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 2
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 21
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 70
7116: IFFALSE 7190
7118: GO 7120
7120: DISABLE
// begin InGameOn ;
7121: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7125: LD_EXP 17
7129: PUSH
7130: LD_EXP 19
7134: PUSH
7135: LD_EXP 18
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PPUSH
7145: LD_EXP 16
7149: PPUSH
7150: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7154: LD_EXP 19
7158: PPUSH
7159: LD_STRING DM-quest-1
7161: PPUSH
7162: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7166: LD_EXP 18
7170: PPUSH
7171: LD_STRING DG-quest-1
7173: PPUSH
7174: CALL_OW 88
// InGameOff ;
7178: CALL_OW 9
// mercenariesQuestDone := true ;
7182: LD_ADDR_EXP 11
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// end ;
7190: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7191: LD_EXP 16
7195: PPUSH
7196: LD_INT 10
7198: PPUSH
7199: CALL_OW 308
7203: PUSH
7204: LD_EXP 6
7208: AND
7209: PUSH
7210: LD_EXP 10
7214: AND
7215: PUSH
7216: LD_INT 10
7218: PPUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 70
7247: NOT
7248: AND
7249: IFFALSE 7421
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
// begin InGameOn ;
7257: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7261: LD_EXP 17
7265: PUSH
7266: LD_EXP 19
7270: PUSH
7271: LD_EXP 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: LD_EXP 16
7285: PPUSH
7286: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7290: LD_EXP 16
7294: PPUSH
7295: LD_INT 54
7297: PPUSH
7298: LD_INT 86
7300: PPUSH
7301: CALL_OW 111
// p := p + 1 ;
7305: LD_ADDR_VAR 0 1
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: LD_INT 1
7317: PLUS
7318: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7319: LD_INT 35
7321: PPUSH
7322: CALL_OW 67
// p := p + 1 ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 1
7335: PUSH
7336: LD_INT 1
7338: PLUS
7339: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7340: LD_EXP 16
7344: PPUSH
7345: LD_EXP 18
7349: PPUSH
7350: CALL_OW 296
7354: PUSH
7355: LD_INT 4
7357: LESS
7358: PUSH
7359: LD_VAR 0 1
7363: PUSH
7364: LD_INT 5
7366: GREATER
7367: OR
7368: IFFALSE 7319
// Say ( Mike , DM-quest-1 ) ;
7370: LD_EXP 19
7374: PPUSH
7375: LD_STRING DM-quest-1
7377: PPUSH
7378: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7382: LD_EXP 18
7386: PPUSH
7387: LD_STRING DG-quest-1
7389: PPUSH
7390: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7394: LD_EXP 16
7398: PPUSH
7399: LD_INT 55
7401: PPUSH
7402: LD_INT 87
7404: PPUSH
7405: CALL_OW 111
// InGameOff ;
7409: CALL_OW 9
// mercenariesQuestDone := true ;
7413: LD_ADDR_EXP 11
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// end ;
7421: PPOPN 1
7423: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7424: LD_EXP 16
7428: PUSH
7429: LD_INT 55
7431: PUSH
7432: EMPTY
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: IN
7440: IFFALSE 7480
7442: GO 7444
7444: DISABLE
// begin if Difficulty < 3 then
7445: LD_OWVAR 67
7449: PUSH
7450: LD_INT 3
7452: LESS
7453: IFFALSE 7468
// RemoveSeeing ( 59 , 60 , 2 ) ;
7455: LD_INT 59
7457: PPUSH
7458: LD_INT 60
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7468: LD_EXP 16
7472: PPUSH
7473: LD_STRING DH-driver
7475: PPUSH
7476: CALL_OW 88
// end ;
7480: END
// every 0 0$1 trigger mercenariesQuestDone do
7481: LD_EXP 11
7485: IFFALSE 7973
7487: GO 7489
7489: DISABLE
// begin if mercenariesQuestReady then
7490: LD_EXP 10
7494: IFFALSE 7503
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7496: LD_STRING O5_proof_cont_out
7498: PPUSH
7499: CALL_OW 337
// InGameOn ;
7503: CALL_OW 8
// if IsInUnit ( Heike ) then
7507: LD_EXP 16
7511: PPUSH
7512: CALL_OW 310
7516: IFFALSE 7527
// ComExitVehicle ( Heike ) ;
7518: LD_EXP 16
7522: PPUSH
7523: CALL_OW 121
// wait ( 3 ) ;
7527: LD_INT 3
7529: PPUSH
7530: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7534: LD_EXP 16
7538: PPUSH
7539: LD_EXP 18
7543: PPUSH
7544: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7548: LD_EXP 17
7552: PUSH
7553: LD_EXP 19
7557: PUSH
7558: LD_EXP 18
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PPUSH
7568: LD_EXP 16
7572: PPUSH
7573: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7577: LD_EXP 16
7581: PPUSH
7582: LD_STRING DH-quest-done-1
7584: PPUSH
7585: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7589: LD_EXP 19
7593: PPUSH
7594: LD_STRING DM-quest-done-1
7596: PPUSH
7597: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7601: LD_EXP 18
7605: PPUSH
7606: LD_STRING DG-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7613: LD_EXP 16
7617: PPUSH
7618: LD_EXP 17
7622: PPUSH
7623: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7627: LD_EXP 16
7631: PPUSH
7632: LD_STRING DH-quest-done-2
7634: PPUSH
7635: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7639: LD_EXP 17
7643: PPUSH
7644: LD_STRING DO-quest-done-2
7646: PPUSH
7647: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7651: LD_EXP 17
7655: PPUSH
7656: LD_STRING DO-quest-done-3
7658: PPUSH
7659: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7663: LD_EXP 18
7667: PPUSH
7668: LD_INT 51
7670: PPUSH
7671: LD_INT 90
7673: PPUSH
7674: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7678: LD_EXP 18
7682: PPUSH
7683: LD_INT 50
7685: PPUSH
7686: LD_INT 89
7688: PPUSH
7689: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7693: LD_EXP 16
7697: PPUSH
7698: LD_EXP 18
7702: PPUSH
7703: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7707: LD_EXP 18
7711: PPUSH
7712: LD_STRING DG-quest-done-4
7714: PPUSH
7715: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7719: LD_EXP 18
7723: PPUSH
7724: LD_EXP 16
7728: PPUSH
7729: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7733: LD_EXP 16
7737: PPUSH
7738: CALL_OW 256
7742: PUSH
7743: LD_INT 1000
7745: LESS
7746: IFFALSE 7838
// begin Say ( Olaf , DO-heal-1 ) ;
7748: LD_EXP 17
7752: PPUSH
7753: LD_STRING DO-heal-1
7755: PPUSH
7756: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7760: LD_EXP 16
7764: PPUSH
7765: LD_INT 51
7767: PPUSH
7768: LD_INT 88
7770: PPUSH
7771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7775: LD_INT 35
7777: PPUSH
7778: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7782: LD_EXP 16
7786: PPUSH
7787: LD_EXP 17
7791: PPUSH
7792: CALL_OW 296
7796: PUSH
7797: LD_INT 4
7799: LESS
7800: PUSH
7801: LD_EXP 16
7805: PPUSH
7806: LD_INT 51
7808: PPUSH
7809: LD_INT 88
7811: PPUSH
7812: CALL_OW 307
7816: OR
7817: IFFALSE 7775
// SetLives ( Heike , 1000 ) ;
7819: LD_EXP 16
7823: PPUSH
7824: LD_INT 1000
7826: PPUSH
7827: CALL_OW 234
// wait ( 0 0$2 ) ;
7831: LD_INT 70
7833: PPUSH
7834: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7838: LD_EXP 16
7842: PPUSH
7843: LD_STRING DH-quest-done-4
7845: PPUSH
7846: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7850: LD_EXP 17
7854: PPUSH
7855: LD_STRING DO-quest-done-4
7857: PPUSH
7858: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_EXP 17
7871: PPUSH
7872: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7876: LD_EXP 16
7880: PPUSH
7881: LD_STRING DH-quest-done-5
7883: PPUSH
7884: CALL_OW 88
// InGameOff ;
7888: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7892: LD_STRING O6_end_cont
7894: PPUSH
7895: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_INT 2
7906: PPUSH
7907: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7911: LD_EXP 19
7915: PPUSH
7916: LD_INT 2
7918: PPUSH
7919: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7923: LD_INT 42
7925: PPUSH
7926: LD_INT 2
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7936: LD_EXP 17
7940: PPUSH
7941: LD_INT 53
7943: PPUSH
7944: LD_INT 89
7946: PPUSH
7947: CALL_OW 118
// lastObjectiveActive := true ;
7951: LD_ADDR_EXP 12
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7959: LD_INT 1
7961: PPUSH
7962: LD_INT 1
7964: PPUSH
7965: CALL_OW 424
// PreparePrison ;
7969: CALL 1164 0 0
// end ;
7973: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7974: LD_INT 22
7976: PUSH
7977: LD_INT 2
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 91
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: IFFALSE 8188
8008: GO 8010
8010: DISABLE
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8015: LD_INT 245
8017: PUSH
8018: LD_INT 210
8020: PUSH
8021: LD_INT 210
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: LD_OWVAR 67
8033: ARRAY
8034: PPUSH
8035: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_INT 22
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 54
8066: PUSH
8067: EMPTY
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: ST_TO_ADDR
// if not tmp then
8080: LD_VAR 0 2
8084: NOT
8085: IFFALSE 8089
// exit ;
8087: GO 8188
// for i in tmp do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_VAR 0 2
8098: PUSH
8099: FOR_IN
8100: IFFALSE 8128
// begin ComExitBuilding ( i ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8111: LD_VAR 0 1
8115: PPUSH
8116: LD_INT 121
8118: PPUSH
8119: LD_INT 22
8121: PPUSH
8122: CALL_OW 174
// end ;
8126: GO 8099
8128: POP
8129: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8130: LD_EXP 23
8134: PPUSH
8135: LD_INT 121
8137: PPUSH
8138: LD_INT 22
8140: PPUSH
8141: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8145: LD_EXP 24
8149: PPUSH
8150: LD_INT 121
8152: PPUSH
8153: LD_INT 22
8155: PPUSH
8156: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8160: LD_EXP 23
8164: PPUSH
8165: LD_EXP 16
8169: PPUSH
8170: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8174: LD_EXP 24
8178: PPUSH
8179: LD_EXP 16
8183: PPUSH
8184: CALL_OW 175
// end ;
8188: PPOPN 2
8190: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8191: LD_INT 22
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 91
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PPUSH
8219: CALL_OW 69
8223: IFFALSE 8405
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
8231: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8232: LD_INT 280
8234: PUSH
8235: LD_INT 245
8237: PUSH
8238: LD_INT 210
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: PUSH
8246: LD_OWVAR 67
8250: ARRAY
8251: PPUSH
8252: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 54
8283: PUSH
8284: EMPTY
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: ST_TO_ADDR
// if not tmp then
8297: LD_VAR 0 2
8301: NOT
8302: IFFALSE 8306
// exit ;
8304: GO 8405
// for i in tmp do
8306: LD_ADDR_VAR 0 1
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: FOR_IN
8317: IFFALSE 8345
// begin ComExitBuilding ( i ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: LD_INT 142
8335: PPUSH
8336: LD_INT 71
8338: PPUSH
8339: CALL_OW 174
// end ;
8343: GO 8316
8345: POP
8346: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8347: LD_EXP 23
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8362: LD_EXP 24
8366: PPUSH
8367: LD_INT 142
8369: PPUSH
8370: LD_INT 71
8372: PPUSH
8373: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8377: LD_EXP 23
8381: PPUSH
8382: LD_EXP 16
8386: PPUSH
8387: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8391: LD_EXP 24
8395: PPUSH
8396: LD_EXP 16
8400: PPUSH
8401: CALL_OW 175
// end ;
8405: PPOPN 2
8407: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8408: LD_INT 22
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 58
8430: PUSH
8431: EMPTY
8432: LIST
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: LD_INT 24
8439: PUSH
8440: LD_INT 1000
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 91
8453: PUSH
8454: LD_EXP 17
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 69
8478: PUSH
8479: LD_EXP 17
8483: PPUSH
8484: CALL_OW 302
8488: AND
8489: IFFALSE 8603
8491: GO 8493
8493: DISABLE
// begin enable ;
8494: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8495: LD_EXP 17
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 58
8522: PUSH
8523: EMPTY
8524: LIST
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 24
8531: PUSH
8532: LD_INT 1000
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 91
8545: PUSH
8546: LD_EXP 17
8550: PUSH
8551: LD_INT 8
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 69
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8579: LD_EXP 17
8583: PPUSH
8584: LD_INT 52
8586: PPUSH
8587: LD_INT 90
8589: PPUSH
8590: CALL_OW 171
// AddComHold ( Olaf ) ;
8594: LD_EXP 17
8598: PPUSH
8599: CALL_OW 200
// end ;
8603: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8604: LD_EXP 12
8608: PUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 302
8616: NOT
8617: AND
8618: PUSH
8619: LD_OWVAR 67
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: AND
8628: PUSH
8629: LD_EXP 13
8633: NOT
8634: AND
8635: IFFALSE 8652
8637: GO 8639
8639: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8640: LD_EXP 16
8644: PPUSH
8645: LD_STRING DH-prison-missing
8647: PPUSH
8648: CALL_OW 88
// end ;
8652: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8653: LD_EXP 12
8657: PUSH
8658: LD_INT 8
8660: PPUSH
8661: CALL_OW 302
8665: NOT
8666: AND
8667: PUSH
8668: LD_OWVAR 67
8672: PUSH
8673: LD_INT 1
8675: GREATER
8676: AND
8677: PUSH
8678: LD_EXP 13
8682: NOT
8683: AND
8684: IFFALSE 8701
8686: GO 8688
8688: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8689: LD_EXP 16
8693: PPUSH
8694: LD_STRING DH-prison-missing
8696: PPUSH
8697: CALL_OW 88
// end ;
8701: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8702: LD_EXP 12
8706: PUSH
8707: LD_INT 3
8709: PPUSH
8710: CALL_OW 302
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 13
8721: NOT
8722: AND
8723: IFFALSE 8740
8725: GO 8727
8727: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8728: LD_EXP 16
8732: PPUSH
8733: LD_STRING DH-prison-missing-a
8735: PPUSH
8736: CALL_OW 88
// end ;
8740: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8741: LD_EXP 12
8745: PUSH
8746: LD_INT 10
8748: PPUSH
8749: CALL_OW 302
8753: NOT
8754: AND
8755: PUSH
8756: LD_EXP 13
8760: NOT
8761: AND
8762: IFFALSE 8779
8764: GO 8766
8766: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8767: LD_EXP 16
8771: PPUSH
8772: LD_STRING DH-prison-missing-a
8774: PPUSH
8775: CALL_OW 88
// end ;
8779: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8780: LD_EXP 13
8784: NOT
8785: PUSH
8786: LD_EXP 12
8790: AND
8791: PUSH
8792: LD_INT 2
8794: PPUSH
8795: LD_EXP 20
8799: PPUSH
8800: CALL_OW 292
8804: AND
8805: IFFALSE 8892
8807: GO 8809
8809: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8810: LD_EXP 20
8814: PPUSH
8815: LD_EXP 16
8819: PPUSH
8820: CALL_OW 119
// DialogueOn ;
8824: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8828: LD_EXP 20
8832: PPUSH
8833: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8837: LD_EXP 20
8841: PPUSH
8842: LD_STRING DK-prison-found
8844: PPUSH
8845: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8849: LD_EXP 16
8853: PPUSH
8854: LD_STRING DH-prison-found
8856: PPUSH
8857: CALL_OW 88
// DialogueOff ;
8861: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8865: LD_EXP 20
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL_OW 235
// prisonFound := true ;
8877: LD_ADDR_EXP 13
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8885: LD_STRING O6_prison_out
8887: PPUSH
8888: CALL_OW 337
// end ;
8892: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8893: LD_EXP 16
8897: PPUSH
8898: CALL_OW 256
8902: PUSH
8903: LD_INT 500
8905: LESS
8906: IFFALSE 8919
8908: GO 8910
8910: DISABLE
// heikeHurt := true ;
8911: LD_ADDR_EXP 14
8915: PUSH
8916: LD_INT 1
8918: ST_TO_ADDR
8919: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8920: LD_INT 22
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 21
8932: PUSH
8933: LD_INT 3
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PPUSH
8944: CALL_OW 69
8948: IFFALSE 9264
8950: GO 8952
8952: DISABLE
8953: LD_INT 0
8955: PPUSH
8956: PPUSH
8957: PPUSH
// begin uc_side := 3 ;
8958: LD_ADDR_OWVAR 20
8962: PUSH
8963: LD_INT 3
8965: ST_TO_ADDR
// uc_nation := 3 ;
8966: LD_ADDR_OWVAR 21
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// tmp := [ ] ;
8974: LD_ADDR_VAR 0 2
8978: PUSH
8979: EMPTY
8980: ST_TO_ADDR
// for i := 1 to 8 do
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_INT 8
8993: PUSH
8994: FOR_TO
8995: IFFALSE 9103
// begin PrepareHuman ( false , 1 , 4 ) ;
8997: LD_INT 0
8999: PPUSH
9000: LD_INT 1
9002: PPUSH
9003: LD_INT 4
9005: PPUSH
9006: CALL_OW 380
// un := CreateHuman ;
9010: LD_ADDR_VAR 0 3
9014: PUSH
9015: CALL_OW 44
9019: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9020: LD_VAR 0 3
9024: PPUSH
9025: LD_INT 4
9027: PPUSH
9028: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 158
9039: PPUSH
9040: LD_INT 80
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 147
9057: PPUSH
9058: LD_INT 75
9060: PPUSH
9061: CALL_OW 111
// wait ( 0 0$1 ) ;
9065: LD_INT 35
9067: PPUSH
9068: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9072: LD_ADDR_VAR 0 2
9076: PUSH
9077: LD_VAR 0 2
9081: PPUSH
9082: LD_VAR 0 2
9086: PUSH
9087: LD_INT 1
9089: PLUS
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: CALL_OW 1
9100: ST_TO_ADDR
// end ;
9101: GO 8994
9103: POP
9104: POP
// repeat wait ( 0 0$1 ) ;
9105: LD_INT 35
9107: PPUSH
9108: CALL_OW 67
// for i in tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: PUSH
9122: FOR_IN
9123: IFFALSE 9244
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9125: LD_ADDR_VAR 0 3
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_INT 3
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 69
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 74
9154: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 250
9168: PPUSH
9169: LD_VAR 0 3
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 251
9182: PPUSH
9183: CALL_OW 428
9187: IFFALSE 9228
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_INT 1
9201: ARRAY
9202: PPUSH
9203: CALL_OW 250
9207: PPUSH
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PPUSH
9217: CALL_OW 251
9221: PPUSH
9222: CALL_OW 114
9226: GO 9242
// ComAttackUnit ( i , Heike ) ;
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_EXP 16
9237: PPUSH
9238: CALL_OW 115
// end ;
9242: GO 9122
9244: POP
9245: POP
// until IsDead ( Heike ) or not tmp ;
9246: LD_EXP 16
9250: PPUSH
9251: CALL_OW 301
9255: PUSH
9256: LD_VAR 0 2
9260: NOT
9261: OR
9262: IFFALSE 9105
// end ;
9264: PPOPN 3
9266: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9267: LD_EXP 12
9271: PUSH
9272: LD_EXP 16
9276: PPUSH
9277: CALL_OW 302
9281: AND
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_INT 21
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 22
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 50
9308: PUSH
9309: EMPTY
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 71
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: AND
9326: IFFALSE 9656
9328: GO 9330
9330: DISABLE
9331: LD_INT 0
9333: PPUSH
// begin if not heikeHurt then
9334: LD_EXP 14
9338: NOT
9339: IFFALSE 9348
// SetAchievement ( ACH_INVINCIBLE ) ;
9341: LD_STRING ACH_INVINCIBLE
9343: PPUSH
9344: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 21
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 50
9375: PUSH
9376: EMPTY
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 69
9388: ST_TO_ADDR
// if prisonFound then
9389: LD_EXP 13
9393: IFFALSE 9407
// AddMedal ( med1 , 1 ) else
9395: LD_STRING med1
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 101
9405: GO 9418
// AddMedal ( med1 , - 1 ) ;
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: NEG
9413: PPUSH
9414: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9418: LD_VAR 0 1
9422: PUSH
9423: LD_INT 3
9425: LESS
9426: PUSH
9427: LD_EXP 13
9431: NOT
9432: AND
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: LD_INT 4
9441: LESS
9442: PUSH
9443: LD_EXP 13
9447: AND
9448: OR
9449: IFFALSE 9464
// AddMedal ( med2 , - 1 ) else
9451: LD_STRING med2
9453: PPUSH
9454: LD_INT 1
9456: NEG
9457: PPUSH
9458: CALL_OW 101
9462: GO 9474
// AddMedal ( med2 , 1 ) ;
9464: LD_STRING med2
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9474: LD_EXP 13
9478: PUSH
9479: LD_EXP 4
9483: AND
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: LD_INT 4
9492: GREATEREQUAL
9493: AND
9494: IFFALSE 9508
// AddMedal ( med3 , 1 ) else
9496: LD_STRING med3
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 101
9506: GO 9519
// AddMedal ( med3 , - 1 ) ;
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: NEG
9514: PPUSH
9515: CALL_OW 101
// GiveMedals ( MAIN ) ;
9519: LD_STRING MAIN
9521: PPUSH
9522: CALL_OW 102
// RewardPeople ( tmp ) ;
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9535: LD_EXP 16
9539: PPUSH
9540: LD_STRING 01_Heike
9542: PPUSH
9543: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9547: LD_EXP 18
9551: PPUSH
9552: CALL_OW 302
9556: PUSH
9557: LD_EXP 18
9561: PUSH
9562: LD_VAR 0 1
9566: IN
9567: AND
9568: IFFALSE 9582
// SaveCharacters ( Givi , 01_Givi ) ;
9570: LD_EXP 18
9574: PPUSH
9575: LD_STRING 01_Givi
9577: PPUSH
9578: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9582: LD_EXP 19
9586: PPUSH
9587: CALL_OW 302
9591: PUSH
9592: LD_EXP 19
9596: PUSH
9597: LD_VAR 0 1
9601: IN
9602: AND
9603: IFFALSE 9617
// SaveCharacters ( Mike , 01_Mike ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 01_Mike
9612: PPUSH
9613: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9617: LD_EXP 20
9621: PPUSH
9622: CALL_OW 302
9626: PUSH
9627: LD_EXP 20
9631: PUSH
9632: LD_VAR 0 1
9636: IN
9637: AND
9638: IFFALSE 9652
// SaveCharacters ( Kamil , 01_Kamil ) ;
9640: LD_EXP 20
9644: PPUSH
9645: LD_STRING 01_Kamil
9647: PPUSH
9648: CALL_OW 38
// YouWin ;
9652: CALL_OW 103
// end ; end_of_file
9656: PPOPN 1
9658: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9659: LD_VAR 0 1
9663: PUSH
9664: LD_EXP 16
9668: EQUAL
9669: IFFALSE 9678
// YouLost ( Heike ) ;
9671: LD_STRING Heike
9673: PPUSH
9674: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9678: LD_VAR 0 1
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: IN
9712: IFFALSE 9818
// begin if un in russianPatrol then
9714: LD_VAR 0 1
9718: PUSH
9719: LD_EXP 21
9723: IN
9724: IFFALSE 9742
// russianPatrol := russianPatrol diff un ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 1
9740: DIFF
9741: ST_TO_ADDR
// if un in russianForestPatrol then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_EXP 22
9751: IN
9752: IFFALSE 9770
// russianForestPatrol := russianForestPatrol diff un ;
9754: LD_ADDR_EXP 22
9758: PUSH
9759: LD_EXP 22
9763: PUSH
9764: LD_VAR 0 1
9768: DIFF
9769: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9770: LD_ADDR_EXP 5
9774: PUSH
9775: LD_EXP 5
9779: PPUSH
9780: LD_EXP 5
9784: PUSH
9785: LD_INT 1
9787: PLUS
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 250
9798: PUSH
9799: LD_VAR 0 1
9803: PPUSH
9804: CALL_OW 251
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 1
9817: ST_TO_ADDR
// end ; end ;
9818: PPOPN 1
9820: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 16
9830: EQUAL
9831: IFFALSE 9840
// YouLost ( Heike ) ;
9833: LD_STRING Heike
9835: PPUSH
9836: CALL_OW 104
// end ;
9840: PPOPN 1
9842: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 2
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 5
9859: EQUAL
9860: AND
9861: IFFALSE 9870
// YouLost ( FriendlyFire ) ;
9863: LD_STRING FriendlyFire
9865: PPUSH
9866: CALL_OW 104
// end ;
9870: PPOPN 2
9872: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9873: LD_EXP 17
9877: PPUSH
9878: CALL_OW 256
9882: PUSH
9883: LD_INT 250
9885: LESS
9886: IFFALSE 9898
9888: GO 9890
9890: DISABLE
// YouLost ( Olaf ) ; end_of_file
9891: LD_STRING Olaf
9893: PPUSH
9894: CALL_OW 104
9898: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9899: LD_VAR 0 2
9903: PUSH
9904: LD_INT 100
9906: EQUAL
9907: IFFALSE 10856
// begin if not StreamModeActive then
9909: LD_EXP 26
9913: NOT
9914: IFFALSE 9924
// StreamModeActive := true ;
9916: LD_ADDR_EXP 26
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// if p3 = 0 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 0
9931: EQUAL
9932: IFFALSE 9938
// InitStreamMode ;
9934: CALL 11089 0 0
// if p3 = 1 then
9938: LD_VAR 0 3
9942: PUSH
9943: LD_INT 1
9945: EQUAL
9946: IFFALSE 9956
// sRocket := true ;
9948: LD_ADDR_EXP 31
9952: PUSH
9953: LD_INT 1
9955: ST_TO_ADDR
// if p3 = 2 then
9956: LD_VAR 0 3
9960: PUSH
9961: LD_INT 2
9963: EQUAL
9964: IFFALSE 9974
// sSpeed := true ;
9966: LD_ADDR_EXP 30
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// if p3 = 3 then
9974: LD_VAR 0 3
9978: PUSH
9979: LD_INT 3
9981: EQUAL
9982: IFFALSE 9992
// sEngine := true ;
9984: LD_ADDR_EXP 32
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if p3 = 4 then
9992: LD_VAR 0 3
9996: PUSH
9997: LD_INT 4
9999: EQUAL
10000: IFFALSE 10010
// sSpec := true ;
10002: LD_ADDR_EXP 29
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if p3 = 5 then
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 5
10017: EQUAL
10018: IFFALSE 10028
// sLevel := true ;
10020: LD_ADDR_EXP 33
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// if p3 = 6 then
10028: LD_VAR 0 3
10032: PUSH
10033: LD_INT 6
10035: EQUAL
10036: IFFALSE 10046
// sArmoury := true ;
10038: LD_ADDR_EXP 34
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
// if p3 = 7 then
10046: LD_VAR 0 3
10050: PUSH
10051: LD_INT 7
10053: EQUAL
10054: IFFALSE 10064
// sRadar := true ;
10056: LD_ADDR_EXP 35
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// if p3 = 8 then
10064: LD_VAR 0 3
10068: PUSH
10069: LD_INT 8
10071: EQUAL
10072: IFFALSE 10082
// sBunker := true ;
10074: LD_ADDR_EXP 36
10078: PUSH
10079: LD_INT 1
10081: ST_TO_ADDR
// if p3 = 9 then
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 9
10089: EQUAL
10090: IFFALSE 10100
// sHack := true ;
10092: LD_ADDR_EXP 37
10096: PUSH
10097: LD_INT 1
10099: ST_TO_ADDR
// if p3 = 10 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 10
10107: EQUAL
10108: IFFALSE 10118
// sFire := true ;
10110: LD_ADDR_EXP 38
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// if p3 = 11 then
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 11
10125: EQUAL
10126: IFFALSE 10136
// sRefresh := true ;
10128: LD_ADDR_EXP 39
10132: PUSH
10133: LD_INT 1
10135: ST_TO_ADDR
// if p3 = 12 then
10136: LD_VAR 0 3
10140: PUSH
10141: LD_INT 12
10143: EQUAL
10144: IFFALSE 10154
// sExp := true ;
10146: LD_ADDR_EXP 40
10150: PUSH
10151: LD_INT 1
10153: ST_TO_ADDR
// if p3 = 13 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 13
10161: EQUAL
10162: IFFALSE 10172
// sDepot := true ;
10164: LD_ADDR_EXP 41
10168: PUSH
10169: LD_INT 1
10171: ST_TO_ADDR
// if p3 = 14 then
10172: LD_VAR 0 3
10176: PUSH
10177: LD_INT 14
10179: EQUAL
10180: IFFALSE 10190
// sFlag := true ;
10182: LD_ADDR_EXP 42
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// if p3 = 15 then
10190: LD_VAR 0 3
10194: PUSH
10195: LD_INT 15
10197: EQUAL
10198: IFFALSE 10208
// sKamikadze := true ;
10200: LD_ADDR_EXP 50
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// if p3 = 16 then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 16
10215: EQUAL
10216: IFFALSE 10226
// sTroll := true ;
10218: LD_ADDR_EXP 51
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// if p3 = 17 then
10226: LD_VAR 0 3
10230: PUSH
10231: LD_INT 17
10233: EQUAL
10234: IFFALSE 10244
// sSlow := true ;
10236: LD_ADDR_EXP 52
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// if p3 = 18 then
10244: LD_VAR 0 3
10248: PUSH
10249: LD_INT 18
10251: EQUAL
10252: IFFALSE 10262
// sLack := true ;
10254: LD_ADDR_EXP 53
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// if p3 = 19 then
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 19
10269: EQUAL
10270: IFFALSE 10280
// sTank := true ;
10272: LD_ADDR_EXP 55
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// if p3 = 20 then
10280: LD_VAR 0 3
10284: PUSH
10285: LD_INT 20
10287: EQUAL
10288: IFFALSE 10298
// sRemote := true ;
10290: LD_ADDR_EXP 56
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// if p3 = 21 then
10298: LD_VAR 0 3
10302: PUSH
10303: LD_INT 21
10305: EQUAL
10306: IFFALSE 10316
// sPowell := true ;
10308: LD_ADDR_EXP 57
10312: PUSH
10313: LD_INT 1
10315: ST_TO_ADDR
// if p3 = 22 then
10316: LD_VAR 0 3
10320: PUSH
10321: LD_INT 22
10323: EQUAL
10324: IFFALSE 10334
// sTeleport := true ;
10326: LD_ADDR_EXP 60
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// if p3 = 23 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_INT 23
10341: EQUAL
10342: IFFALSE 10352
// sOilTower := true ;
10344: LD_ADDR_EXP 62
10348: PUSH
10349: LD_INT 1
10351: ST_TO_ADDR
// if p3 = 24 then
10352: LD_VAR 0 3
10356: PUSH
10357: LD_INT 24
10359: EQUAL
10360: IFFALSE 10370
// sShovel := true ;
10362: LD_ADDR_EXP 63
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// if p3 = 25 then
10370: LD_VAR 0 3
10374: PUSH
10375: LD_INT 25
10377: EQUAL
10378: IFFALSE 10388
// sSheik := true ;
10380: LD_ADDR_EXP 64
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// if p3 = 26 then
10388: LD_VAR 0 3
10392: PUSH
10393: LD_INT 26
10395: EQUAL
10396: IFFALSE 10406
// sEarthquake := true ;
10398: LD_ADDR_EXP 66
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
// if p3 = 27 then
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 27
10413: EQUAL
10414: IFFALSE 10424
// sAI := true ;
10416: LD_ADDR_EXP 67
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// if p3 = 28 then
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 28
10431: EQUAL
10432: IFFALSE 10442
// sCargo := true ;
10434: LD_ADDR_EXP 70
10438: PUSH
10439: LD_INT 1
10441: ST_TO_ADDR
// if p3 = 29 then
10442: LD_VAR 0 3
10446: PUSH
10447: LD_INT 29
10449: EQUAL
10450: IFFALSE 10460
// sDLaser := true ;
10452: LD_ADDR_EXP 71
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// if p3 = 30 then
10460: LD_VAR 0 3
10464: PUSH
10465: LD_INT 30
10467: EQUAL
10468: IFFALSE 10478
// sExchange := true ;
10470: LD_ADDR_EXP 72
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
// if p3 = 31 then
10478: LD_VAR 0 3
10482: PUSH
10483: LD_INT 31
10485: EQUAL
10486: IFFALSE 10496
// sFac := true ;
10488: LD_ADDR_EXP 73
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// if p3 = 32 then
10496: LD_VAR 0 3
10500: PUSH
10501: LD_INT 32
10503: EQUAL
10504: IFFALSE 10514
// sPower := true ;
10506: LD_ADDR_EXP 74
10510: PUSH
10511: LD_INT 1
10513: ST_TO_ADDR
// if p3 = 33 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 33
10521: EQUAL
10522: IFFALSE 10532
// sRandom := true ;
10524: LD_ADDR_EXP 75
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 34 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 34
10539: EQUAL
10540: IFFALSE 10550
// sShield := true ;
10542: LD_ADDR_EXP 76
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 35 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 35
10557: EQUAL
10558: IFFALSE 10568
// sTime := true ;
10560: LD_ADDR_EXP 77
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 36 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 36
10575: EQUAL
10576: IFFALSE 10586
// sTools := true ;
10578: LD_ADDR_EXP 78
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 101 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 101
10593: EQUAL
10594: IFFALSE 10604
// sSold := true ;
10596: LD_ADDR_EXP 43
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 102 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 102
10611: EQUAL
10612: IFFALSE 10622
// sDiff := true ;
10614: LD_ADDR_EXP 44
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 103 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 103
10629: EQUAL
10630: IFFALSE 10640
// sFog := true ;
10632: LD_ADDR_EXP 47
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 104 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 104
10647: EQUAL
10648: IFFALSE 10658
// sReset := true ;
10650: LD_ADDR_EXP 48
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 105 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 105
10665: EQUAL
10666: IFFALSE 10676
// sSun := true ;
10668: LD_ADDR_EXP 49
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 106 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 106
10683: EQUAL
10684: IFFALSE 10694
// sTiger := true ;
10686: LD_ADDR_EXP 45
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 107 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 107
10701: EQUAL
10702: IFFALSE 10712
// sBomb := true ;
10704: LD_ADDR_EXP 46
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// if p3 = 108 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 108
10719: EQUAL
10720: IFFALSE 10730
// sWound := true ;
10722: LD_ADDR_EXP 54
10726: PUSH
10727: LD_INT 1
10729: ST_TO_ADDR
// if p3 = 109 then
10730: LD_VAR 0 3
10734: PUSH
10735: LD_INT 109
10737: EQUAL
10738: IFFALSE 10748
// sBetray := true ;
10740: LD_ADDR_EXP 58
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// if p3 = 110 then
10748: LD_VAR 0 3
10752: PUSH
10753: LD_INT 110
10755: EQUAL
10756: IFFALSE 10766
// sContamin := true ;
10758: LD_ADDR_EXP 59
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// if p3 = 111 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 111
10773: EQUAL
10774: IFFALSE 10784
// sOil := true ;
10776: LD_ADDR_EXP 61
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// if p3 = 112 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 112
10791: EQUAL
10792: IFFALSE 10802
// sStu := true ;
10794: LD_ADDR_EXP 65
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// if p3 = 113 then
10802: LD_VAR 0 3
10806: PUSH
10807: LD_INT 113
10809: EQUAL
10810: IFFALSE 10820
// sBazooka := true ;
10812: LD_ADDR_EXP 68
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// if p3 = 114 then
10820: LD_VAR 0 3
10824: PUSH
10825: LD_INT 114
10827: EQUAL
10828: IFFALSE 10838
// sMortar := true ;
10830: LD_ADDR_EXP 69
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// if p3 = 115 then
10838: LD_VAR 0 3
10842: PUSH
10843: LD_INT 115
10845: EQUAL
10846: IFFALSE 10856
// sRanger := true ;
10848: LD_ADDR_EXP 79
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// end ; if p2 = 101 then
10856: LD_VAR 0 2
10860: PUSH
10861: LD_INT 101
10863: EQUAL
10864: IFFALSE 11067
// begin case p3 of 1 :
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 1
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10886
10879: POP
// hHackUnlimitedResources ; 2 :
10880: CALL 21161 0 0
10884: GO 11067
10886: LD_INT 2
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10901
10894: POP
// hHackSetLevel10 ; 3 :
10895: CALL 21294 0 0
10899: GO 11067
10901: LD_INT 3
10903: DOUBLE
10904: EQUAL
10905: IFTRUE 10909
10907: GO 10916
10909: POP
// hHackSetLevel10YourUnits ; 4 :
10910: CALL 21379 0 0
10914: GO 11067
10916: LD_INT 4
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 10946
10924: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
10925: LD_VAR 0 4
10929: PPUSH
10930: LD_VAR 0 5
10934: PPUSH
10935: LD_VAR 0 6
10939: PPUSH
10940: CALL 21469 0 3
10944: GO 11067
10946: LD_INT 5
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 10961
10954: POP
// hHackSpawnVehicle ; 6 :
10955: CALL 21530 0 0
10959: GO 11067
10961: LD_INT 6
10963: DOUBLE
10964: EQUAL
10965: IFTRUE 10969
10967: GO 10976
10969: POP
// hHackInvincible ; 7 :
10970: CALL 22076 0 0
10974: GO 11067
10976: LD_INT 7
10978: DOUBLE
10979: EQUAL
10980: IFTRUE 10984
10982: GO 10991
10984: POP
// hHackInvisible ; 8 :
10985: CALL 22187 0 0
10989: GO 11067
10991: LD_INT 8
10993: DOUBLE
10994: EQUAL
10995: IFTRUE 10999
10997: GO 11006
10999: POP
// hHackChangeYourSide ; 9 :
11000: CALL 22244 0 0
11004: GO 11067
11006: LD_INT 9
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11021
11014: POP
// hHackChangeUnitSide ; 10 :
11015: CALL 22286 0 0
11019: GO 11067
11021: LD_INT 10
11023: DOUBLE
11024: EQUAL
11025: IFTRUE 11029
11027: GO 11036
11029: POP
// hHackFog ; 11 :
11030: CALL 22387 0 0
11034: GO 11067
11036: LD_INT 11
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11051
11044: POP
// hHackApeman ; 12 :
11045: CALL 22402 0 0
11049: GO 11067
11051: LD_INT 12
11053: DOUBLE
11054: EQUAL
11055: IFTRUE 11059
11057: GO 11066
11059: POP
// hHackBoom ; end ;
11060: CALL 22487 0 0
11064: GO 11067
11066: POP
// end ; end ;
11067: PPOPN 6
11069: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11070: GO 11072
11072: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11073: LD_STRING initStreamRollete();
11075: PPUSH
11076: CALL_OW 559
// InitStreamMode ;
11080: CALL 11089 0 0
// DefineStreamItems ( ) ;
11084: CALL 11529 0 0
// end ;
11088: END
// function InitStreamMode ; begin
11089: LD_INT 0
11091: PPUSH
// streamModeActive := false ;
11092: LD_ADDR_EXP 26
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// normalCounter := 36 ;
11100: LD_ADDR_EXP 27
11104: PUSH
11105: LD_INT 36
11107: ST_TO_ADDR
// hardcoreCounter := 16 ;
11108: LD_ADDR_EXP 28
11112: PUSH
11113: LD_INT 16
11115: ST_TO_ADDR
// sRocket := false ;
11116: LD_ADDR_EXP 31
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sSpeed := false ;
11124: LD_ADDR_EXP 30
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sEngine := false ;
11132: LD_ADDR_EXP 32
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sSpec := false ;
11140: LD_ADDR_EXP 29
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sLevel := false ;
11148: LD_ADDR_EXP 33
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sArmoury := false ;
11156: LD_ADDR_EXP 34
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sRadar := false ;
11164: LD_ADDR_EXP 35
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sBunker := false ;
11172: LD_ADDR_EXP 36
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sHack := false ;
11180: LD_ADDR_EXP 37
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sFire := false ;
11188: LD_ADDR_EXP 38
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sRefresh := false ;
11196: LD_ADDR_EXP 39
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// sExp := false ;
11204: LD_ADDR_EXP 40
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// sDepot := false ;
11212: LD_ADDR_EXP 41
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// sFlag := false ;
11220: LD_ADDR_EXP 42
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// sKamikadze := false ;
11228: LD_ADDR_EXP 50
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
// sTroll := false ;
11236: LD_ADDR_EXP 51
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// sSlow := false ;
11244: LD_ADDR_EXP 52
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// sLack := false ;
11252: LD_ADDR_EXP 53
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// sTank := false ;
11260: LD_ADDR_EXP 55
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// sRemote := false ;
11268: LD_ADDR_EXP 56
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// sPowell := false ;
11276: LD_ADDR_EXP 57
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// sTeleport := false ;
11284: LD_ADDR_EXP 60
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// sOilTower := false ;
11292: LD_ADDR_EXP 62
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// sShovel := false ;
11300: LD_ADDR_EXP 63
11304: PUSH
11305: LD_INT 0
11307: ST_TO_ADDR
// sSheik := false ;
11308: LD_ADDR_EXP 64
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// sEarthquake := false ;
11316: LD_ADDR_EXP 66
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// sAI := false ;
11324: LD_ADDR_EXP 67
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// sCargo := false ;
11332: LD_ADDR_EXP 70
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// sDLaser := false ;
11340: LD_ADDR_EXP 71
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// sExchange := false ;
11348: LD_ADDR_EXP 72
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// sFac := false ;
11356: LD_ADDR_EXP 73
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// sPower := false ;
11364: LD_ADDR_EXP 74
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// sRandom := false ;
11372: LD_ADDR_EXP 75
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// sShield := false ;
11380: LD_ADDR_EXP 76
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// sTime := false ;
11388: LD_ADDR_EXP 77
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// sTools := false ;
11396: LD_ADDR_EXP 78
11400: PUSH
11401: LD_INT 0
11403: ST_TO_ADDR
// sSold := false ;
11404: LD_ADDR_EXP 43
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// sDiff := false ;
11412: LD_ADDR_EXP 44
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// sFog := false ;
11420: LD_ADDR_EXP 47
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// sReset := false ;
11428: LD_ADDR_EXP 48
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// sSun := false ;
11436: LD_ADDR_EXP 49
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// sTiger := false ;
11444: LD_ADDR_EXP 45
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// sBomb := false ;
11452: LD_ADDR_EXP 46
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// sWound := false ;
11460: LD_ADDR_EXP 54
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// sBetray := false ;
11468: LD_ADDR_EXP 58
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// sContamin := false ;
11476: LD_ADDR_EXP 59
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// sOil := false ;
11484: LD_ADDR_EXP 61
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// sStu := false ;
11492: LD_ADDR_EXP 65
11496: PUSH
11497: LD_INT 0
11499: ST_TO_ADDR
// sBazooka := false ;
11500: LD_ADDR_EXP 68
11504: PUSH
11505: LD_INT 0
11507: ST_TO_ADDR
// sMortar := false ;
11508: LD_ADDR_EXP 69
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// sRanger := false ;
11516: LD_ADDR_EXP 79
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// end ;
11524: LD_VAR 0 1
11528: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
11533: PPUSH
11534: PPUSH
11535: PPUSH
// result := [ ] ;
11536: LD_ADDR_VAR 0 1
11540: PUSH
11541: EMPTY
11542: ST_TO_ADDR
// if campaign_id = 1 then
11543: LD_OWVAR 69
11547: PUSH
11548: LD_INT 1
11550: EQUAL
11551: IFFALSE 14489
// begin case mission_number of 1 :
11553: LD_OWVAR 70
11557: PUSH
11558: LD_INT 1
11560: DOUBLE
11561: EQUAL
11562: IFTRUE 11566
11564: GO 11630
11566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11567: LD_ADDR_VAR 0 1
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: LD_INT 4
11577: PUSH
11578: LD_INT 11
11580: PUSH
11581: LD_INT 12
11583: PUSH
11584: LD_INT 15
11586: PUSH
11587: LD_INT 16
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 23
11595: PUSH
11596: LD_INT 26
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 101
11612: PUSH
11613: LD_INT 102
11615: PUSH
11616: LD_INT 106
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: ST_TO_ADDR
11628: GO 14487
11630: LD_INT 2
11632: DOUBLE
11633: EQUAL
11634: IFTRUE 11638
11636: GO 11710
11638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11639: LD_ADDR_VAR 0 1
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: LD_INT 4
11649: PUSH
11650: LD_INT 11
11652: PUSH
11653: LD_INT 12
11655: PUSH
11656: LD_INT 15
11658: PUSH
11659: LD_INT 16
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_INT 23
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 101
11684: PUSH
11685: LD_INT 102
11687: PUSH
11688: LD_INT 105
11690: PUSH
11691: LD_INT 106
11693: PUSH
11694: LD_INT 108
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: ST_TO_ADDR
11708: GO 14487
11710: LD_INT 3
11712: DOUBLE
11713: EQUAL
11714: IFTRUE 11718
11716: GO 11794
11718: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11719: LD_ADDR_VAR 0 1
11723: PUSH
11724: LD_INT 2
11726: PUSH
11727: LD_INT 4
11729: PUSH
11730: LD_INT 5
11732: PUSH
11733: LD_INT 11
11735: PUSH
11736: LD_INT 12
11738: PUSH
11739: LD_INT 15
11741: PUSH
11742: LD_INT 16
11744: PUSH
11745: LD_INT 22
11747: PUSH
11748: LD_INT 26
11750: PUSH
11751: LD_INT 36
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 101
11768: PUSH
11769: LD_INT 102
11771: PUSH
11772: LD_INT 105
11774: PUSH
11775: LD_INT 106
11777: PUSH
11778: LD_INT 108
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: ST_TO_ADDR
11792: GO 14487
11794: LD_INT 4
11796: DOUBLE
11797: EQUAL
11798: IFTRUE 11802
11800: GO 11886
11802: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11803: LD_ADDR_VAR 0 1
11807: PUSH
11808: LD_INT 2
11810: PUSH
11811: LD_INT 4
11813: PUSH
11814: LD_INT 5
11816: PUSH
11817: LD_INT 8
11819: PUSH
11820: LD_INT 11
11822: PUSH
11823: LD_INT 12
11825: PUSH
11826: LD_INT 15
11828: PUSH
11829: LD_INT 16
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: LD_INT 26
11840: PUSH
11841: LD_INT 36
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 101
11860: PUSH
11861: LD_INT 102
11863: PUSH
11864: LD_INT 105
11866: PUSH
11867: LD_INT 106
11869: PUSH
11870: LD_INT 108
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: ST_TO_ADDR
11884: GO 14487
11886: LD_INT 5
11888: DOUBLE
11889: EQUAL
11890: IFTRUE 11894
11892: GO 11994
11894: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11895: LD_ADDR_VAR 0 1
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 4
11905: PUSH
11906: LD_INT 5
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: LD_INT 8
11914: PUSH
11915: LD_INT 11
11917: PUSH
11918: LD_INT 12
11920: PUSH
11921: LD_INT 15
11923: PUSH
11924: LD_INT 16
11926: PUSH
11927: LD_INT 22
11929: PUSH
11930: LD_INT 23
11932: PUSH
11933: LD_INT 25
11935: PUSH
11936: LD_INT 26
11938: PUSH
11939: LD_INT 36
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 101
11960: PUSH
11961: LD_INT 102
11963: PUSH
11964: LD_INT 105
11966: PUSH
11967: LD_INT 106
11969: PUSH
11970: LD_INT 108
11972: PUSH
11973: LD_INT 109
11975: PUSH
11976: LD_INT 112
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: ST_TO_ADDR
11992: GO 14487
11994: LD_INT 6
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12122
12002: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12003: LD_ADDR_VAR 0 1
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 4
12013: PUSH
12014: LD_INT 5
12016: PUSH
12017: LD_INT 6
12019: PUSH
12020: LD_INT 8
12022: PUSH
12023: LD_INT 11
12025: PUSH
12026: LD_INT 12
12028: PUSH
12029: LD_INT 15
12031: PUSH
12032: LD_INT 16
12034: PUSH
12035: LD_INT 20
12037: PUSH
12038: LD_INT 21
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_INT 23
12046: PUSH
12047: LD_INT 25
12049: PUSH
12050: LD_INT 26
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 31
12058: PUSH
12059: LD_INT 32
12061: PUSH
12062: LD_INT 36
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 101
12088: PUSH
12089: LD_INT 102
12091: PUSH
12092: LD_INT 105
12094: PUSH
12095: LD_INT 106
12097: PUSH
12098: LD_INT 108
12100: PUSH
12101: LD_INT 109
12103: PUSH
12104: LD_INT 112
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: ST_TO_ADDR
12120: GO 14487
12122: LD_INT 7
12124: DOUBLE
12125: EQUAL
12126: IFTRUE 12130
12128: GO 12230
12130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12131: LD_ADDR_VAR 0 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 4
12141: PUSH
12142: LD_INT 5
12144: PUSH
12145: LD_INT 7
12147: PUSH
12148: LD_INT 11
12150: PUSH
12151: LD_INT 12
12153: PUSH
12154: LD_INT 15
12156: PUSH
12157: LD_INT 16
12159: PUSH
12160: LD_INT 20
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 23
12171: PUSH
12172: LD_INT 25
12174: PUSH
12175: LD_INT 26
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 101
12196: PUSH
12197: LD_INT 102
12199: PUSH
12200: LD_INT 103
12202: PUSH
12203: LD_INT 105
12205: PUSH
12206: LD_INT 106
12208: PUSH
12209: LD_INT 108
12211: PUSH
12212: LD_INT 112
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 14487
12230: LD_INT 8
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12366
12238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12239: LD_ADDR_VAR 0 1
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 4
12249: PUSH
12250: LD_INT 5
12252: PUSH
12253: LD_INT 6
12255: PUSH
12256: LD_INT 7
12258: PUSH
12259: LD_INT 8
12261: PUSH
12262: LD_INT 11
12264: PUSH
12265: LD_INT 12
12267: PUSH
12268: LD_INT 15
12270: PUSH
12271: LD_INT 16
12273: PUSH
12274: LD_INT 20
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 22
12282: PUSH
12283: LD_INT 23
12285: PUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 26
12291: PUSH
12292: LD_INT 30
12294: PUSH
12295: LD_INT 31
12297: PUSH
12298: LD_INT 32
12300: PUSH
12301: LD_INT 36
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 101
12328: PUSH
12329: LD_INT 102
12331: PUSH
12332: LD_INT 103
12334: PUSH
12335: LD_INT 105
12337: PUSH
12338: LD_INT 106
12340: PUSH
12341: LD_INT 108
12343: PUSH
12344: LD_INT 109
12346: PUSH
12347: LD_INT 112
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: ST_TO_ADDR
12364: GO 14487
12366: LD_INT 9
12368: DOUBLE
12369: EQUAL
12370: IFTRUE 12374
12372: GO 12510
12374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12375: LD_ADDR_VAR 0 1
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: LD_INT 5
12388: PUSH
12389: LD_INT 6
12391: PUSH
12392: LD_INT 7
12394: PUSH
12395: LD_INT 8
12397: PUSH
12398: LD_INT 11
12400: PUSH
12401: LD_INT 12
12403: PUSH
12404: LD_INT 15
12406: PUSH
12407: LD_INT 16
12409: PUSH
12410: LD_INT 20
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_INT 23
12421: PUSH
12422: LD_INT 25
12424: PUSH
12425: LD_INT 26
12427: PUSH
12428: LD_INT 28
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_INT 31
12436: PUSH
12437: LD_INT 32
12439: PUSH
12440: LD_INT 36
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 101
12468: PUSH
12469: LD_INT 102
12471: PUSH
12472: LD_INT 103
12474: PUSH
12475: LD_INT 105
12477: PUSH
12478: LD_INT 106
12480: PUSH
12481: LD_INT 108
12483: PUSH
12484: LD_INT 109
12486: PUSH
12487: LD_INT 112
12489: PUSH
12490: LD_INT 114
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: ST_TO_ADDR
12508: GO 14487
12510: LD_INT 10
12512: DOUBLE
12513: EQUAL
12514: IFTRUE 12518
12516: GO 12702
12518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12519: LD_ADDR_VAR 0 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 4
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: LD_INT 6
12535: PUSH
12536: LD_INT 7
12538: PUSH
12539: LD_INT 8
12541: PUSH
12542: LD_INT 9
12544: PUSH
12545: LD_INT 10
12547: PUSH
12548: LD_INT 11
12550: PUSH
12551: LD_INT 12
12553: PUSH
12554: LD_INT 13
12556: PUSH
12557: LD_INT 14
12559: PUSH
12560: LD_INT 15
12562: PUSH
12563: LD_INT 16
12565: PUSH
12566: LD_INT 17
12568: PUSH
12569: LD_INT 18
12571: PUSH
12572: LD_INT 19
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 24
12589: PUSH
12590: LD_INT 25
12592: PUSH
12593: LD_INT 26
12595: PUSH
12596: LD_INT 28
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 31
12604: PUSH
12605: LD_INT 32
12607: PUSH
12608: LD_INT 36
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 101
12644: PUSH
12645: LD_INT 102
12647: PUSH
12648: LD_INT 103
12650: PUSH
12651: LD_INT 104
12653: PUSH
12654: LD_INT 105
12656: PUSH
12657: LD_INT 106
12659: PUSH
12660: LD_INT 107
12662: PUSH
12663: LD_INT 108
12665: PUSH
12666: LD_INT 109
12668: PUSH
12669: LD_INT 110
12671: PUSH
12672: LD_INT 111
12674: PUSH
12675: LD_INT 112
12677: PUSH
12678: LD_INT 114
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: ST_TO_ADDR
12700: GO 14487
12702: LD_INT 11
12704: DOUBLE
12705: EQUAL
12706: IFTRUE 12710
12708: GO 12902
12710: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12711: LD_ADDR_VAR 0 1
12715: PUSH
12716: LD_INT 2
12718: PUSH
12719: LD_INT 3
12721: PUSH
12722: LD_INT 4
12724: PUSH
12725: LD_INT 5
12727: PUSH
12728: LD_INT 6
12730: PUSH
12731: LD_INT 7
12733: PUSH
12734: LD_INT 8
12736: PUSH
12737: LD_INT 9
12739: PUSH
12740: LD_INT 10
12742: PUSH
12743: LD_INT 11
12745: PUSH
12746: LD_INT 12
12748: PUSH
12749: LD_INT 13
12751: PUSH
12752: LD_INT 14
12754: PUSH
12755: LD_INT 15
12757: PUSH
12758: LD_INT 16
12760: PUSH
12761: LD_INT 17
12763: PUSH
12764: LD_INT 18
12766: PUSH
12767: LD_INT 19
12769: PUSH
12770: LD_INT 20
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 22
12778: PUSH
12779: LD_INT 23
12781: PUSH
12782: LD_INT 24
12784: PUSH
12785: LD_INT 25
12787: PUSH
12788: LD_INT 26
12790: PUSH
12791: LD_INT 28
12793: PUSH
12794: LD_INT 30
12796: PUSH
12797: LD_INT 31
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 34
12805: PUSH
12806: LD_INT 36
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 101
12844: PUSH
12845: LD_INT 102
12847: PUSH
12848: LD_INT 103
12850: PUSH
12851: LD_INT 104
12853: PUSH
12854: LD_INT 105
12856: PUSH
12857: LD_INT 106
12859: PUSH
12860: LD_INT 107
12862: PUSH
12863: LD_INT 108
12865: PUSH
12866: LD_INT 109
12868: PUSH
12869: LD_INT 110
12871: PUSH
12872: LD_INT 111
12874: PUSH
12875: LD_INT 112
12877: PUSH
12878: LD_INT 114
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: ST_TO_ADDR
12900: GO 14487
12902: LD_INT 12
12904: DOUBLE
12905: EQUAL
12906: IFTRUE 12910
12908: GO 13118
12910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12911: LD_ADDR_VAR 0 1
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: LD_INT 4
12927: PUSH
12928: LD_INT 5
12930: PUSH
12931: LD_INT 6
12933: PUSH
12934: LD_INT 7
12936: PUSH
12937: LD_INT 8
12939: PUSH
12940: LD_INT 9
12942: PUSH
12943: LD_INT 10
12945: PUSH
12946: LD_INT 11
12948: PUSH
12949: LD_INT 12
12951: PUSH
12952: LD_INT 13
12954: PUSH
12955: LD_INT 14
12957: PUSH
12958: LD_INT 15
12960: PUSH
12961: LD_INT 16
12963: PUSH
12964: LD_INT 17
12966: PUSH
12967: LD_INT 18
12969: PUSH
12970: LD_INT 19
12972: PUSH
12973: LD_INT 20
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 22
12981: PUSH
12982: LD_INT 23
12984: PUSH
12985: LD_INT 24
12987: PUSH
12988: LD_INT 25
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: LD_INT 27
12996: PUSH
12997: LD_INT 28
12999: PUSH
13000: LD_INT 30
13002: PUSH
13003: LD_INT 31
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: LD_INT 33
13011: PUSH
13012: LD_INT 34
13014: PUSH
13015: LD_INT 36
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 101
13056: PUSH
13057: LD_INT 102
13059: PUSH
13060: LD_INT 103
13062: PUSH
13063: LD_INT 104
13065: PUSH
13066: LD_INT 105
13068: PUSH
13069: LD_INT 106
13071: PUSH
13072: LD_INT 107
13074: PUSH
13075: LD_INT 108
13077: PUSH
13078: LD_INT 109
13080: PUSH
13081: LD_INT 110
13083: PUSH
13084: LD_INT 111
13086: PUSH
13087: LD_INT 112
13089: PUSH
13090: LD_INT 113
13092: PUSH
13093: LD_INT 114
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: ST_TO_ADDR
13116: GO 14487
13118: LD_INT 13
13120: DOUBLE
13121: EQUAL
13122: IFTRUE 13126
13124: GO 13322
13126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: LD_INT 3
13140: PUSH
13141: LD_INT 4
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: LD_INT 8
13149: PUSH
13150: LD_INT 9
13152: PUSH
13153: LD_INT 10
13155: PUSH
13156: LD_INT 11
13158: PUSH
13159: LD_INT 12
13161: PUSH
13162: LD_INT 14
13164: PUSH
13165: LD_INT 15
13167: PUSH
13168: LD_INT 16
13170: PUSH
13171: LD_INT 17
13173: PUSH
13174: LD_INT 18
13176: PUSH
13177: LD_INT 19
13179: PUSH
13180: LD_INT 20
13182: PUSH
13183: LD_INT 21
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_INT 23
13191: PUSH
13192: LD_INT 24
13194: PUSH
13195: LD_INT 25
13197: PUSH
13198: LD_INT 26
13200: PUSH
13201: LD_INT 27
13203: PUSH
13204: LD_INT 28
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: LD_INT 32
13215: PUSH
13216: LD_INT 33
13218: PUSH
13219: LD_INT 34
13221: PUSH
13222: LD_INT 36
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 101
13260: PUSH
13261: LD_INT 102
13263: PUSH
13264: LD_INT 103
13266: PUSH
13267: LD_INT 104
13269: PUSH
13270: LD_INT 105
13272: PUSH
13273: LD_INT 106
13275: PUSH
13276: LD_INT 107
13278: PUSH
13279: LD_INT 108
13281: PUSH
13282: LD_INT 109
13284: PUSH
13285: LD_INT 110
13287: PUSH
13288: LD_INT 111
13290: PUSH
13291: LD_INT 112
13293: PUSH
13294: LD_INT 113
13296: PUSH
13297: LD_INT 114
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 14487
13322: LD_INT 14
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13542
13330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13331: LD_ADDR_VAR 0 1
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: LD_INT 3
13344: PUSH
13345: LD_INT 4
13347: PUSH
13348: LD_INT 5
13350: PUSH
13351: LD_INT 6
13353: PUSH
13354: LD_INT 7
13356: PUSH
13357: LD_INT 8
13359: PUSH
13360: LD_INT 9
13362: PUSH
13363: LD_INT 10
13365: PUSH
13366: LD_INT 11
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: LD_INT 13
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 17
13386: PUSH
13387: LD_INT 18
13389: PUSH
13390: LD_INT 19
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 24
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 27
13416: PUSH
13417: LD_INT 28
13419: PUSH
13420: LD_INT 29
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: LD_INT 31
13428: PUSH
13429: LD_INT 32
13431: PUSH
13432: LD_INT 33
13434: PUSH
13435: LD_INT 34
13437: PUSH
13438: LD_INT 36
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 101
13480: PUSH
13481: LD_INT 102
13483: PUSH
13484: LD_INT 103
13486: PUSH
13487: LD_INT 104
13489: PUSH
13490: LD_INT 105
13492: PUSH
13493: LD_INT 106
13495: PUSH
13496: LD_INT 107
13498: PUSH
13499: LD_INT 108
13501: PUSH
13502: LD_INT 109
13504: PUSH
13505: LD_INT 110
13507: PUSH
13508: LD_INT 111
13510: PUSH
13511: LD_INT 112
13513: PUSH
13514: LD_INT 113
13516: PUSH
13517: LD_INT 114
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: ST_TO_ADDR
13540: GO 14487
13542: LD_INT 15
13544: DOUBLE
13545: EQUAL
13546: IFTRUE 13550
13548: GO 13762
13550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13551: LD_ADDR_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: PUSH
13559: LD_INT 2
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: LD_INT 4
13567: PUSH
13568: LD_INT 5
13570: PUSH
13571: LD_INT 6
13573: PUSH
13574: LD_INT 7
13576: PUSH
13577: LD_INT 8
13579: PUSH
13580: LD_INT 9
13582: PUSH
13583: LD_INT 10
13585: PUSH
13586: LD_INT 11
13588: PUSH
13589: LD_INT 12
13591: PUSH
13592: LD_INT 13
13594: PUSH
13595: LD_INT 14
13597: PUSH
13598: LD_INT 15
13600: PUSH
13601: LD_INT 16
13603: PUSH
13604: LD_INT 17
13606: PUSH
13607: LD_INT 18
13609: PUSH
13610: LD_INT 19
13612: PUSH
13613: LD_INT 20
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 22
13621: PUSH
13622: LD_INT 23
13624: PUSH
13625: LD_INT 24
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 26
13633: PUSH
13634: LD_INT 27
13636: PUSH
13637: LD_INT 28
13639: PUSH
13640: LD_INT 29
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 31
13648: PUSH
13649: LD_INT 32
13651: PUSH
13652: LD_INT 33
13654: PUSH
13655: LD_INT 34
13657: PUSH
13658: LD_INT 36
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 101
13700: PUSH
13701: LD_INT 102
13703: PUSH
13704: LD_INT 103
13706: PUSH
13707: LD_INT 104
13709: PUSH
13710: LD_INT 105
13712: PUSH
13713: LD_INT 106
13715: PUSH
13716: LD_INT 107
13718: PUSH
13719: LD_INT 108
13721: PUSH
13722: LD_INT 109
13724: PUSH
13725: LD_INT 110
13727: PUSH
13728: LD_INT 111
13730: PUSH
13731: LD_INT 112
13733: PUSH
13734: LD_INT 113
13736: PUSH
13737: LD_INT 114
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: ST_TO_ADDR
13760: GO 14487
13762: LD_INT 16
13764: DOUBLE
13765: EQUAL
13766: IFTRUE 13770
13768: GO 13894
13770: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 4
13781: PUSH
13782: LD_INT 5
13784: PUSH
13785: LD_INT 7
13787: PUSH
13788: LD_INT 11
13790: PUSH
13791: LD_INT 12
13793: PUSH
13794: LD_INT 15
13796: PUSH
13797: LD_INT 16
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_INT 23
13811: PUSH
13812: LD_INT 25
13814: PUSH
13815: LD_INT 26
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: LD_INT 31
13823: PUSH
13824: LD_INT 32
13826: PUSH
13827: LD_INT 33
13829: PUSH
13830: LD_INT 34
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 101
13856: PUSH
13857: LD_INT 102
13859: PUSH
13860: LD_INT 103
13862: PUSH
13863: LD_INT 106
13865: PUSH
13866: LD_INT 108
13868: PUSH
13869: LD_INT 112
13871: PUSH
13872: LD_INT 113
13874: PUSH
13875: LD_INT 114
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 14487
13894: LD_INT 17
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 14114
13902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13903: LD_ADDR_VAR 0 1
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: LD_INT 6
13925: PUSH
13926: LD_INT 7
13928: PUSH
13929: LD_INT 8
13931: PUSH
13932: LD_INT 9
13934: PUSH
13935: LD_INT 10
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 13
13946: PUSH
13947: LD_INT 14
13949: PUSH
13950: LD_INT 15
13952: PUSH
13953: LD_INT 16
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 18
13961: PUSH
13962: LD_INT 19
13964: PUSH
13965: LD_INT 20
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 23
13976: PUSH
13977: LD_INT 24
13979: PUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 26
13985: PUSH
13986: LD_INT 27
13988: PUSH
13989: LD_INT 28
13991: PUSH
13992: LD_INT 29
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 31
14000: PUSH
14001: LD_INT 32
14003: PUSH
14004: LD_INT 33
14006: PUSH
14007: LD_INT 34
14009: PUSH
14010: LD_INT 36
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 101
14052: PUSH
14053: LD_INT 102
14055: PUSH
14056: LD_INT 103
14058: PUSH
14059: LD_INT 104
14061: PUSH
14062: LD_INT 105
14064: PUSH
14065: LD_INT 106
14067: PUSH
14068: LD_INT 107
14070: PUSH
14071: LD_INT 108
14073: PUSH
14074: LD_INT 109
14076: PUSH
14077: LD_INT 110
14079: PUSH
14080: LD_INT 111
14082: PUSH
14083: LD_INT 112
14085: PUSH
14086: LD_INT 113
14088: PUSH
14089: LD_INT 114
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 14487
14114: LD_INT 18
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14258
14122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14123: LD_ADDR_VAR 0 1
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 4
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: LD_INT 11
14142: PUSH
14143: LD_INT 12
14145: PUSH
14146: LD_INT 15
14148: PUSH
14149: LD_INT 16
14151: PUSH
14152: LD_INT 20
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: LD_INT 23
14163: PUSH
14164: LD_INT 25
14166: PUSH
14167: LD_INT 26
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 31
14175: PUSH
14176: LD_INT 32
14178: PUSH
14179: LD_INT 33
14181: PUSH
14182: LD_INT 34
14184: PUSH
14185: LD_INT 35
14187: PUSH
14188: LD_INT 36
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 101
14216: PUSH
14217: LD_INT 102
14219: PUSH
14220: LD_INT 103
14222: PUSH
14223: LD_INT 106
14225: PUSH
14226: LD_INT 108
14228: PUSH
14229: LD_INT 112
14231: PUSH
14232: LD_INT 113
14234: PUSH
14235: LD_INT 114
14237: PUSH
14238: LD_INT 115
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14487
14258: LD_INT 19
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14486
14266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 4
14283: PUSH
14284: LD_INT 5
14286: PUSH
14287: LD_INT 6
14289: PUSH
14290: LD_INT 7
14292: PUSH
14293: LD_INT 8
14295: PUSH
14296: LD_INT 9
14298: PUSH
14299: LD_INT 10
14301: PUSH
14302: LD_INT 11
14304: PUSH
14305: LD_INT 12
14307: PUSH
14308: LD_INT 13
14310: PUSH
14311: LD_INT 14
14313: PUSH
14314: LD_INT 15
14316: PUSH
14317: LD_INT 16
14319: PUSH
14320: LD_INT 17
14322: PUSH
14323: LD_INT 18
14325: PUSH
14326: LD_INT 19
14328: PUSH
14329: LD_INT 20
14331: PUSH
14332: LD_INT 21
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 23
14340: PUSH
14341: LD_INT 24
14343: PUSH
14344: LD_INT 25
14346: PUSH
14347: LD_INT 26
14349: PUSH
14350: LD_INT 27
14352: PUSH
14353: LD_INT 28
14355: PUSH
14356: LD_INT 29
14358: PUSH
14359: LD_INT 30
14361: PUSH
14362: LD_INT 31
14364: PUSH
14365: LD_INT 32
14367: PUSH
14368: LD_INT 33
14370: PUSH
14371: LD_INT 34
14373: PUSH
14374: LD_INT 35
14376: PUSH
14377: LD_INT 36
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 113
14456: PUSH
14457: LD_INT 114
14459: PUSH
14460: LD_INT 115
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: ST_TO_ADDR
14484: GO 14487
14486: POP
// end else
14487: GO 14706
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: LD_INT 4
14505: PUSH
14506: LD_INT 5
14508: PUSH
14509: LD_INT 6
14511: PUSH
14512: LD_INT 7
14514: PUSH
14515: LD_INT 8
14517: PUSH
14518: LD_INT 9
14520: PUSH
14521: LD_INT 10
14523: PUSH
14524: LD_INT 11
14526: PUSH
14527: LD_INT 12
14529: PUSH
14530: LD_INT 13
14532: PUSH
14533: LD_INT 14
14535: PUSH
14536: LD_INT 15
14538: PUSH
14539: LD_INT 16
14541: PUSH
14542: LD_INT 17
14544: PUSH
14545: LD_INT 18
14547: PUSH
14548: LD_INT 19
14550: PUSH
14551: LD_INT 20
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 22
14559: PUSH
14560: LD_INT 23
14562: PUSH
14563: LD_INT 24
14565: PUSH
14566: LD_INT 25
14568: PUSH
14569: LD_INT 26
14571: PUSH
14572: LD_INT 27
14574: PUSH
14575: LD_INT 28
14577: PUSH
14578: LD_INT 29
14580: PUSH
14581: LD_INT 30
14583: PUSH
14584: LD_INT 31
14586: PUSH
14587: LD_INT 32
14589: PUSH
14590: LD_INT 33
14592: PUSH
14593: LD_INT 34
14595: PUSH
14596: LD_INT 35
14598: PUSH
14599: LD_INT 36
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 101
14642: PUSH
14643: LD_INT 102
14645: PUSH
14646: LD_INT 103
14648: PUSH
14649: LD_INT 104
14651: PUSH
14652: LD_INT 105
14654: PUSH
14655: LD_INT 106
14657: PUSH
14658: LD_INT 107
14660: PUSH
14661: LD_INT 108
14663: PUSH
14664: LD_INT 109
14666: PUSH
14667: LD_INT 110
14669: PUSH
14670: LD_INT 111
14672: PUSH
14673: LD_INT 112
14675: PUSH
14676: LD_INT 113
14678: PUSH
14679: LD_INT 114
14681: PUSH
14682: LD_INT 115
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: ST_TO_ADDR
// if result then
14706: LD_VAR 0 1
14710: IFFALSE 14999
// begin normal :=  ;
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_STRING 
14719: ST_TO_ADDR
// hardcore :=  ;
14720: LD_ADDR_VAR 0 4
14724: PUSH
14725: LD_STRING 
14727: ST_TO_ADDR
// for i = 1 to normalCounter do
14728: LD_ADDR_VAR 0 5
14732: PUSH
14733: DOUBLE
14734: LD_INT 1
14736: DEC
14737: ST_TO_ADDR
14738: LD_EXP 27
14742: PUSH
14743: FOR_TO
14744: IFFALSE 14845
// begin tmp := 0 ;
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: LD_STRING 0
14753: ST_TO_ADDR
// if result [ 1 ] then
14754: LD_VAR 0 1
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: IFFALSE 14827
// if result [ 1 ] [ 1 ] = i then
14764: LD_VAR 0 1
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PUSH
14777: LD_VAR 0 5
14781: EQUAL
14782: IFFALSE 14827
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14784: LD_ADDR_VAR 0 1
14788: PUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: LD_VAR 0 1
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 3
14813: PPUSH
14814: CALL_OW 1
14818: ST_TO_ADDR
// tmp := 1 ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_STRING 1
14826: ST_TO_ADDR
// end ; normal := normal & tmp ;
14827: LD_ADDR_VAR 0 3
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_VAR 0 2
14841: STR
14842: ST_TO_ADDR
// end ;
14843: GO 14743
14845: POP
14846: POP
// for i = 1 to hardcoreCounter do
14847: LD_ADDR_VAR 0 5
14851: PUSH
14852: DOUBLE
14853: LD_INT 1
14855: DEC
14856: ST_TO_ADDR
14857: LD_EXP 28
14861: PUSH
14862: FOR_TO
14863: IFFALSE 14968
// begin tmp := 0 ;
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: LD_STRING 0
14872: ST_TO_ADDR
// if result [ 2 ] then
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 2
14880: ARRAY
14881: IFFALSE 14950
// if result [ 2 ] [ 1 ] = 100 + i then
14883: LD_VAR 0 1
14887: PUSH
14888: LD_INT 2
14890: ARRAY
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PUSH
14896: LD_INT 100
14898: PUSH
14899: LD_VAR 0 5
14903: PLUS
14904: EQUAL
14905: IFFALSE 14950
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: LD_INT 2
14919: PPUSH
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: PPUSH
14929: LD_INT 1
14931: PPUSH
14932: CALL_OW 3
14936: PPUSH
14937: CALL_OW 1
14941: ST_TO_ADDR
// tmp := 1 ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_STRING 1
14949: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14950: LD_ADDR_VAR 0 4
14954: PUSH
14955: LD_VAR 0 4
14959: PUSH
14960: LD_VAR 0 2
14964: STR
14965: ST_TO_ADDR
// end ;
14966: GO 14862
14968: POP
14969: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14970: LD_STRING getStreamItemsFromMission("
14972: PUSH
14973: LD_VAR 0 3
14977: STR
14978: PUSH
14979: LD_STRING ","
14981: STR
14982: PUSH
14983: LD_VAR 0 4
14987: STR
14988: PUSH
14989: LD_STRING ")
14991: STR
14992: PPUSH
14993: CALL_OW 559
// end else
14997: GO 15006
// ToLua ( getStreamItemsFromMission("","") ) ;
14999: LD_STRING getStreamItemsFromMission("","")
15001: PPUSH
15002: CALL_OW 559
// end ;
15006: LD_VAR 0 1
15010: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15011: LD_EXP 26
15015: PUSH
15016: LD_EXP 31
15020: AND
15021: IFFALSE 15145
15023: GO 15025
15025: DISABLE
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
// begin enable ;
15030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15031: LD_ADDR_VAR 0 2
15035: PUSH
15036: LD_INT 22
15038: PUSH
15039: LD_OWVAR 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: LD_INT 34
15053: PUSH
15054: LD_INT 7
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 34
15063: PUSH
15064: LD_INT 45
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 34
15073: PUSH
15074: LD_INT 28
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 34
15083: PUSH
15084: LD_INT 47
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 69
15106: ST_TO_ADDR
// if not tmp then
15107: LD_VAR 0 2
15111: NOT
15112: IFFALSE 15116
// exit ;
15114: GO 15145
// for i in tmp do
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: LD_VAR 0 2
15125: PUSH
15126: FOR_IN
15127: IFFALSE 15143
// begin SetLives ( i , 0 ) ;
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_INT 0
15136: PPUSH
15137: CALL_OW 234
// end ;
15141: GO 15126
15143: POP
15144: POP
// end ;
15145: PPOPN 2
15147: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15148: LD_EXP 26
15152: PUSH
15153: LD_EXP 32
15157: AND
15158: IFFALSE 15242
15160: GO 15162
15162: DISABLE
15163: LD_INT 0
15165: PPUSH
15166: PPUSH
// begin enable ;
15167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_INT 22
15175: PUSH
15176: LD_OWVAR 2
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 32
15187: PUSH
15188: LD_INT 3
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: ST_TO_ADDR
// if not tmp then
15204: LD_VAR 0 2
15208: NOT
15209: IFFALSE 15213
// exit ;
15211: GO 15242
// for i in tmp do
15213: LD_ADDR_VAR 0 1
15217: PUSH
15218: LD_VAR 0 2
15222: PUSH
15223: FOR_IN
15224: IFFALSE 15240
// begin SetLives ( i , 0 ) ;
15226: LD_VAR 0 1
15230: PPUSH
15231: LD_INT 0
15233: PPUSH
15234: CALL_OW 234
// end ;
15238: GO 15223
15240: POP
15241: POP
// end ;
15242: PPOPN 2
15244: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15245: LD_EXP 26
15249: PUSH
15250: LD_EXP 29
15254: AND
15255: IFFALSE 15348
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
// begin enable ;
15263: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15264: LD_ADDR_VAR 0 1
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_OWVAR 2
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: LD_INT 25
15286: PUSH
15287: LD_INT 5
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 9
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PPUSH
15324: CALL_OW 69
15328: PUSH
15329: FOR_IN
15330: IFFALSE 15346
// begin SetClass ( i , 1 ) ;
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 336
// end ;
15344: GO 15329
15346: POP
15347: POP
// end ;
15348: PPOPN 1
15350: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15351: LD_EXP 26
15355: PUSH
15356: LD_EXP 30
15360: AND
15361: PUSH
15362: LD_OWVAR 65
15366: PUSH
15367: LD_INT 7
15369: LESS
15370: AND
15371: IFFALSE 15385
15373: GO 15375
15375: DISABLE
// begin enable ;
15376: ENABLE
// game_speed := 7 ;
15377: LD_ADDR_OWVAR 65
15381: PUSH
15382: LD_INT 7
15384: ST_TO_ADDR
// end ;
15385: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15386: LD_EXP 26
15390: PUSH
15391: LD_EXP 33
15395: AND
15396: IFFALSE 15598
15398: GO 15400
15400: DISABLE
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15406: LD_ADDR_VAR 0 3
15410: PUSH
15411: LD_INT 81
15413: PUSH
15414: LD_OWVAR 2
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 21
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: ST_TO_ADDR
// if not tmp then
15442: LD_VAR 0 3
15446: NOT
15447: IFFALSE 15451
// exit ;
15449: GO 15598
// if tmp > 5 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 5
15458: GREATER
15459: IFFALSE 15471
// k := 5 else
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 5
15468: ST_TO_ADDR
15469: GO 15481
// k := tmp ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_VAR 0 3
15480: ST_TO_ADDR
// for i := 1 to k do
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_VAR 0 2
15495: PUSH
15496: FOR_TO
15497: IFFALSE 15596
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15499: LD_VAR 0 3
15503: PUSH
15504: LD_VAR 0 1
15508: ARRAY
15509: PPUSH
15510: LD_VAR 0 1
15514: PUSH
15515: LD_INT 4
15517: MOD
15518: PUSH
15519: LD_INT 1
15521: PLUS
15522: PPUSH
15523: CALL_OW 259
15527: PUSH
15528: LD_INT 10
15530: LESS
15531: IFFALSE 15594
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15533: LD_VAR 0 3
15537: PUSH
15538: LD_VAR 0 1
15542: ARRAY
15543: PPUSH
15544: LD_VAR 0 1
15548: PUSH
15549: LD_INT 4
15551: MOD
15552: PUSH
15553: LD_INT 1
15555: PLUS
15556: PPUSH
15557: LD_VAR 0 3
15561: PUSH
15562: LD_VAR 0 1
15566: ARRAY
15567: PPUSH
15568: LD_VAR 0 1
15572: PUSH
15573: LD_INT 4
15575: MOD
15576: PUSH
15577: LD_INT 1
15579: PLUS
15580: PPUSH
15581: CALL_OW 259
15585: PUSH
15586: LD_INT 1
15588: PLUS
15589: PPUSH
15590: CALL_OW 237
15594: GO 15496
15596: POP
15597: POP
// end ;
15598: PPOPN 3
15600: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15601: LD_EXP 26
15605: PUSH
15606: LD_EXP 34
15610: AND
15611: IFFALSE 15631
15613: GO 15615
15615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15616: LD_INT 4
15618: PPUSH
15619: LD_OWVAR 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 324
15631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15632: LD_EXP 26
15636: PUSH
15637: LD_EXP 63
15641: AND
15642: IFFALSE 15662
15644: GO 15646
15646: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15647: LD_INT 19
15649: PPUSH
15650: LD_OWVAR 2
15654: PPUSH
15655: LD_INT 0
15657: PPUSH
15658: CALL_OW 324
15662: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15663: LD_EXP 26
15667: PUSH
15668: LD_EXP 35
15672: AND
15673: IFFALSE 15775
15675: GO 15677
15677: DISABLE
15678: LD_INT 0
15680: PPUSH
15681: PPUSH
// begin enable ;
15682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_OWVAR 2
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: LD_INT 34
15705: PUSH
15706: LD_INT 11
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 34
15715: PUSH
15716: LD_INT 30
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: ST_TO_ADDR
// if not tmp then
15737: LD_VAR 0 2
15741: NOT
15742: IFFALSE 15746
// exit ;
15744: GO 15775
// for i in tmp do
15746: LD_ADDR_VAR 0 1
15750: PUSH
15751: LD_VAR 0 2
15755: PUSH
15756: FOR_IN
15757: IFFALSE 15773
// begin SetLives ( i , 0 ) ;
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_INT 0
15766: PPUSH
15767: CALL_OW 234
// end ;
15771: GO 15756
15773: POP
15774: POP
// end ;
15775: PPOPN 2
15777: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15778: LD_EXP 26
15782: PUSH
15783: LD_EXP 36
15787: AND
15788: IFFALSE 15808
15790: GO 15792
15792: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15793: LD_INT 32
15795: PPUSH
15796: LD_OWVAR 2
15800: PPUSH
15801: LD_INT 0
15803: PPUSH
15804: CALL_OW 324
15808: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15809: LD_EXP 26
15813: PUSH
15814: LD_EXP 37
15818: AND
15819: IFFALSE 16000
15821: GO 15823
15823: DISABLE
15824: LD_INT 0
15826: PPUSH
15827: PPUSH
15828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15829: LD_ADDR_VAR 0 2
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_OWVAR 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 33
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 69
15864: ST_TO_ADDR
// if not tmp then
15865: LD_VAR 0 2
15869: NOT
15870: IFFALSE 15874
// exit ;
15872: GO 16000
// side := 0 ;
15874: LD_ADDR_VAR 0 3
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// for i := 1 to 8 do
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: DOUBLE
15888: LD_INT 1
15890: DEC
15891: ST_TO_ADDR
15892: LD_INT 8
15894: PUSH
15895: FOR_TO
15896: IFFALSE 15944
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15898: LD_OWVAR 2
15902: PUSH
15903: LD_VAR 0 1
15907: NONEQUAL
15908: PUSH
15909: LD_OWVAR 2
15913: PPUSH
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 81
15923: PUSH
15924: LD_INT 2
15926: EQUAL
15927: AND
15928: IFFALSE 15942
// begin side := i ;
15930: LD_ADDR_VAR 0 3
15934: PUSH
15935: LD_VAR 0 1
15939: ST_TO_ADDR
// break ;
15940: GO 15944
// end ;
15942: GO 15895
15944: POP
15945: POP
// if not side then
15946: LD_VAR 0 3
15950: NOT
15951: IFFALSE 15955
// exit ;
15953: GO 16000
// for i := 1 to tmp do
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: DOUBLE
15961: LD_INT 1
15963: DEC
15964: ST_TO_ADDR
15965: LD_VAR 0 2
15969: PUSH
15970: FOR_TO
15971: IFFALSE 15998
// if Prob ( 60 ) then
15973: LD_INT 60
15975: PPUSH
15976: CALL_OW 13
15980: IFFALSE 15996
// SetSide ( i , side ) ;
15982: LD_VAR 0 1
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: CALL_OW 235
15996: GO 15970
15998: POP
15999: POP
// end ;
16000: PPOPN 3
16002: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16003: LD_EXP 26
16007: PUSH
16008: LD_EXP 39
16012: AND
16013: IFFALSE 16132
16015: GO 16017
16017: DISABLE
16018: LD_INT 0
16020: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_INT 22
16028: PUSH
16029: LD_OWVAR 2
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: LD_INT 23
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL_OW 69
16074: PUSH
16075: FOR_IN
16076: IFFALSE 16130
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 257
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: LD_INT 2
16093: PUSH
16094: LD_INT 3
16096: PUSH
16097: LD_INT 4
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: IN
16106: IFFALSE 16128
// SetClass ( un , rand ( 1 , 4 ) ) ;
16108: LD_VAR 0 1
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: LD_INT 4
16118: PPUSH
16119: CALL_OW 12
16123: PPUSH
16124: CALL_OW 336
16128: GO 16075
16130: POP
16131: POP
// end ;
16132: PPOPN 1
16134: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16135: LD_EXP 26
16139: PUSH
16140: LD_EXP 38
16144: AND
16145: IFFALSE 16224
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 3
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: ST_TO_ADDR
// if not tmp then
16189: LD_VAR 0 1
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: PPUSH
16217: LD_INT 100
16219: PPUSH
16220: CALL_OW 234
// end ;
16224: PPOPN 1
16226: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16227: LD_EXP 26
16231: PUSH
16232: LD_EXP 40
16236: AND
16237: IFFALSE 16335
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16245: LD_ADDR_VAR 0 1
16249: PUSH
16250: LD_INT 22
16252: PUSH
16253: LD_OWVAR 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 21
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: ST_TO_ADDR
// if not tmp then
16281: LD_VAR 0 1
16285: NOT
16286: IFFALSE 16290
// exit ;
16288: GO 16335
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16290: LD_VAR 0 1
16294: PUSH
16295: LD_INT 1
16297: PPUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: LD_INT 4
16314: PPUSH
16315: CALL_OW 12
16319: PPUSH
16320: LD_INT 3000
16322: PPUSH
16323: LD_INT 9000
16325: PPUSH
16326: CALL_OW 12
16330: PPUSH
16331: CALL_OW 492
// end ;
16335: PPOPN 1
16337: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16338: LD_EXP 26
16342: PUSH
16343: LD_EXP 41
16347: AND
16348: IFFALSE 16368
16350: GO 16352
16352: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16353: LD_INT 1
16355: PPUSH
16356: LD_OWVAR 2
16360: PPUSH
16361: LD_INT 0
16363: PPUSH
16364: CALL_OW 324
16368: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16369: LD_EXP 26
16373: PUSH
16374: LD_EXP 42
16378: AND
16379: IFFALSE 16462
16381: GO 16383
16383: DISABLE
16384: LD_INT 0
16386: PPUSH
16387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: LD_INT 22
16395: PUSH
16396: LD_OWVAR 2
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 21
16407: PUSH
16408: LD_INT 3
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 69
16423: ST_TO_ADDR
// if not tmp then
16424: LD_VAR 0 2
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 16462
// for i in tmp do
16433: LD_ADDR_VAR 0 1
16437: PUSH
16438: LD_VAR 0 2
16442: PUSH
16443: FOR_IN
16444: IFFALSE 16460
// SetBLevel ( i , 10 ) ;
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 10
16453: PPUSH
16454: CALL_OW 241
16458: GO 16443
16460: POP
16461: POP
// end ;
16462: PPOPN 2
16464: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16465: LD_EXP 26
16469: PUSH
16470: LD_EXP 43
16474: AND
16475: IFFALSE 16586
16477: GO 16479
16479: DISABLE
16480: LD_INT 0
16482: PPUSH
16483: PPUSH
16484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16485: LD_ADDR_VAR 0 3
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 25
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// if not tmp then
16521: LD_VAR 0 3
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16586
// un := tmp [ rand ( 1 , tmp ) ] ;
16530: LD_ADDR_VAR 0 2
16534: PUSH
16535: LD_VAR 0 3
16539: PUSH
16540: LD_INT 1
16542: PPUSH
16543: LD_VAR 0 3
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: ST_TO_ADDR
// if Crawls ( un ) then
16554: LD_VAR 0 2
16558: PPUSH
16559: CALL_OW 318
16563: IFFALSE 16574
// ComWalk ( un ) ;
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16574: LD_VAR 0 2
16578: PPUSH
16579: LD_INT 5
16581: PPUSH
16582: CALL_OW 336
// end ;
16586: PPOPN 3
16588: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16589: LD_EXP 26
16593: PUSH
16594: LD_EXP 44
16598: AND
16599: PUSH
16600: LD_OWVAR 67
16604: PUSH
16605: LD_INT 3
16607: LESS
16608: AND
16609: IFFALSE 16628
16611: GO 16613
16613: DISABLE
// Difficulty := Difficulty + 1 ;
16614: LD_ADDR_OWVAR 67
16618: PUSH
16619: LD_OWVAR 67
16623: PUSH
16624: LD_INT 1
16626: PLUS
16627: ST_TO_ADDR
16628: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16629: LD_EXP 26
16633: PUSH
16634: LD_EXP 45
16638: AND
16639: IFFALSE 16742
16641: GO 16643
16643: DISABLE
16644: LD_INT 0
16646: PPUSH
// begin for i := 1 to 5 do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: LD_INT 5
16659: PUSH
16660: FOR_TO
16661: IFFALSE 16740
// begin uc_nation := nation_nature ;
16663: LD_ADDR_OWVAR 21
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// uc_side := 0 ;
16671: LD_ADDR_OWVAR 20
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16679: LD_ADDR_OWVAR 29
16683: PUSH
16684: LD_INT 12
16686: PUSH
16687: LD_INT 12
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// hc_agressivity := 20 ;
16694: LD_ADDR_OWVAR 35
16698: PUSH
16699: LD_INT 20
16701: ST_TO_ADDR
// hc_class := class_tiger ;
16702: LD_ADDR_OWVAR 28
16706: PUSH
16707: LD_INT 14
16709: ST_TO_ADDR
// hc_gallery :=  ;
16710: LD_ADDR_OWVAR 33
16714: PUSH
16715: LD_STRING 
16717: ST_TO_ADDR
// hc_name :=  ;
16718: LD_ADDR_OWVAR 26
16722: PUSH
16723: LD_STRING 
16725: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16726: CALL_OW 44
16730: PPUSH
16731: LD_INT 0
16733: PPUSH
16734: CALL_OW 51
// end ;
16738: GO 16660
16740: POP
16741: POP
// end ;
16742: PPOPN 1
16744: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16745: LD_EXP 26
16749: PUSH
16750: LD_EXP 46
16754: AND
16755: IFFALSE 16764
16757: GO 16759
16759: DISABLE
// StreamSibBomb ;
16760: CALL 16765 0 0
16764: END
// export function StreamSibBomb ; var i , x , y ; begin
16765: LD_INT 0
16767: PPUSH
16768: PPUSH
16769: PPUSH
16770: PPUSH
// result := false ;
16771: LD_ADDR_VAR 0 1
16775: PUSH
16776: LD_INT 0
16778: ST_TO_ADDR
// for i := 1 to 16 do
16779: LD_ADDR_VAR 0 2
16783: PUSH
16784: DOUBLE
16785: LD_INT 1
16787: DEC
16788: ST_TO_ADDR
16789: LD_INT 16
16791: PUSH
16792: FOR_TO
16793: IFFALSE 16992
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16795: LD_ADDR_VAR 0 3
16799: PUSH
16800: LD_INT 10
16802: PUSH
16803: LD_INT 20
16805: PUSH
16806: LD_INT 30
16808: PUSH
16809: LD_INT 40
16811: PUSH
16812: LD_INT 50
16814: PUSH
16815: LD_INT 60
16817: PUSH
16818: LD_INT 70
16820: PUSH
16821: LD_INT 80
16823: PUSH
16824: LD_INT 90
16826: PUSH
16827: LD_INT 100
16829: PUSH
16830: LD_INT 110
16832: PUSH
16833: LD_INT 120
16835: PUSH
16836: LD_INT 130
16838: PUSH
16839: LD_INT 140
16841: PUSH
16842: LD_INT 150
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: PPUSH
16865: LD_INT 15
16867: PPUSH
16868: CALL_OW 12
16872: ARRAY
16873: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16874: LD_ADDR_VAR 0 4
16878: PUSH
16879: LD_INT 10
16881: PUSH
16882: LD_INT 20
16884: PUSH
16885: LD_INT 30
16887: PUSH
16888: LD_INT 40
16890: PUSH
16891: LD_INT 50
16893: PUSH
16894: LD_INT 60
16896: PUSH
16897: LD_INT 70
16899: PUSH
16900: LD_INT 80
16902: PUSH
16903: LD_INT 90
16905: PUSH
16906: LD_INT 100
16908: PUSH
16909: LD_INT 110
16911: PUSH
16912: LD_INT 120
16914: PUSH
16915: LD_INT 130
16917: PUSH
16918: LD_INT 140
16920: PUSH
16921: LD_INT 150
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 15
16946: PPUSH
16947: CALL_OW 12
16951: ARRAY
16952: ST_TO_ADDR
// if ValidHex ( x , y ) then
16953: LD_VAR 0 3
16957: PPUSH
16958: LD_VAR 0 4
16962: PPUSH
16963: CALL_OW 488
16967: IFFALSE 16990
// begin result := [ x , y ] ;
16969: LD_ADDR_VAR 0 1
16973: PUSH
16974: LD_VAR 0 3
16978: PUSH
16979: LD_VAR 0 4
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: ST_TO_ADDR
// break ;
16988: GO 16992
// end ; end ;
16990: GO 16792
16992: POP
16993: POP
// if result then
16994: LD_VAR 0 1
16998: IFFALSE 17058
// begin ToLua ( playSibBomb() ) ;
17000: LD_STRING playSibBomb()
17002: PPUSH
17003: CALL_OW 559
// wait ( 0 0$14 ) ;
17007: LD_INT 490
17009: PPUSH
17010: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17014: LD_VAR 0 1
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_VAR 0 1
17027: PUSH
17028: LD_INT 2
17030: ARRAY
17031: PPUSH
17032: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17036: LD_VAR 0 1
17040: PUSH
17041: LD_INT 1
17043: ARRAY
17044: PPUSH
17045: LD_VAR 0 1
17049: PUSH
17050: LD_INT 2
17052: ARRAY
17053: PPUSH
17054: CALL_OW 429
// end ; end ;
17058: LD_VAR 0 1
17062: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17063: LD_EXP 26
17067: PUSH
17068: LD_EXP 48
17072: AND
17073: IFFALSE 17085
17075: GO 17077
17077: DISABLE
// YouLost (  ) ;
17078: LD_STRING 
17080: PPUSH
17081: CALL_OW 104
17085: END
// every 0 0$1 trigger StreamModeActive and sFog do
17086: LD_EXP 26
17090: PUSH
17091: LD_EXP 47
17095: AND
17096: IFFALSE 17110
17098: GO 17100
17100: DISABLE
// FogOff ( your_side ) ;
17101: LD_OWVAR 2
17105: PPUSH
17106: CALL_OW 344
17110: END
// every 0 0$1 trigger StreamModeActive and sSun do
17111: LD_EXP 26
17115: PUSH
17116: LD_EXP 49
17120: AND
17121: IFFALSE 17149
17123: GO 17125
17125: DISABLE
// begin solar_recharge_percent := 0 ;
17126: LD_ADDR_OWVAR 79
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17134: LD_INT 10500
17136: PPUSH
17137: CALL_OW 67
// solar_recharge_percent := 100 ;
17141: LD_ADDR_OWVAR 79
17145: PUSH
17146: LD_INT 100
17148: ST_TO_ADDR
// end ;
17149: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17150: LD_EXP 26
17154: PUSH
17155: LD_EXP 50
17159: AND
17160: IFFALSE 17399
17162: GO 17164
17164: DISABLE
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
17169: PPUSH
// begin tmp := [ ] ;
17170: LD_ADDR_VAR 0 3
17174: PUSH
17175: EMPTY
17176: ST_TO_ADDR
// for i := 1 to 6 do
17177: LD_ADDR_VAR 0 1
17181: PUSH
17182: DOUBLE
17183: LD_INT 1
17185: DEC
17186: ST_TO_ADDR
17187: LD_INT 6
17189: PUSH
17190: FOR_TO
17191: IFFALSE 17296
// begin uc_nation := nation_nature ;
17193: LD_ADDR_OWVAR 21
17197: PUSH
17198: LD_INT 0
17200: ST_TO_ADDR
// uc_side := 0 ;
17201: LD_ADDR_OWVAR 20
17205: PUSH
17206: LD_INT 0
17208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17209: LD_ADDR_OWVAR 29
17213: PUSH
17214: LD_INT 12
17216: PUSH
17217: LD_INT 12
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: ST_TO_ADDR
// hc_agressivity := 20 ;
17224: LD_ADDR_OWVAR 35
17228: PUSH
17229: LD_INT 20
17231: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17232: LD_ADDR_OWVAR 28
17236: PUSH
17237: LD_INT 17
17239: ST_TO_ADDR
// hc_gallery :=  ;
17240: LD_ADDR_OWVAR 33
17244: PUSH
17245: LD_STRING 
17247: ST_TO_ADDR
// hc_name :=  ;
17248: LD_ADDR_OWVAR 26
17252: PUSH
17253: LD_STRING 
17255: ST_TO_ADDR
// un := CreateHuman ;
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: CALL_OW 44
17265: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17266: LD_VAR 0 2
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: CALL_OW 51
// tmp := tmp ^ un ;
17278: LD_ADDR_VAR 0 3
17282: PUSH
17283: LD_VAR 0 3
17287: PUSH
17288: LD_VAR 0 2
17292: ADD
17293: ST_TO_ADDR
// end ;
17294: GO 17190
17296: POP
17297: POP
// repeat wait ( 0 0$1 ) ;
17298: LD_INT 35
17300: PPUSH
17301: CALL_OW 67
// for un in tmp do
17305: LD_ADDR_VAR 0 2
17309: PUSH
17310: LD_VAR 0 3
17314: PUSH
17315: FOR_IN
17316: IFFALSE 17390
// begin if IsDead ( un ) then
17318: LD_VAR 0 2
17322: PPUSH
17323: CALL_OW 301
17327: IFFALSE 17347
// begin tmp := tmp diff un ;
17329: LD_ADDR_VAR 0 3
17333: PUSH
17334: LD_VAR 0 3
17338: PUSH
17339: LD_VAR 0 2
17343: DIFF
17344: ST_TO_ADDR
// continue ;
17345: GO 17315
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 22
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: PPUSH
17374: LD_VAR 0 2
17378: PPUSH
17379: CALL_OW 74
17383: PPUSH
17384: CALL_OW 115
// end ;
17388: GO 17315
17390: POP
17391: POP
// until not tmp ;
17392: LD_VAR 0 3
17396: NOT
17397: IFFALSE 17298
// end ;
17399: PPOPN 3
17401: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17402: LD_EXP 26
17406: PUSH
17407: LD_EXP 51
17411: AND
17412: IFFALSE 17466
17414: GO 17416
17416: DISABLE
// begin ToLua ( displayTroll(); ) ;
17417: LD_STRING displayTroll();
17419: PPUSH
17420: CALL_OW 559
// wait ( 3 3$00 ) ;
17424: LD_INT 6300
17426: PPUSH
17427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17431: LD_STRING hideTroll();
17433: PPUSH
17434: CALL_OW 559
// wait ( 1 1$00 ) ;
17438: LD_INT 2100
17440: PPUSH
17441: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17445: LD_STRING displayTroll();
17447: PPUSH
17448: CALL_OW 559
// wait ( 1 1$00 ) ;
17452: LD_INT 2100
17454: PPUSH
17455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17459: LD_STRING hideTroll();
17461: PPUSH
17462: CALL_OW 559
// end ;
17466: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17467: LD_EXP 26
17471: PUSH
17472: LD_EXP 52
17476: AND
17477: IFFALSE 17540
17479: GO 17481
17481: DISABLE
17482: LD_INT 0
17484: PPUSH
// begin p := 0 ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// repeat game_speed := 1 ;
17493: LD_ADDR_OWVAR 65
17497: PUSH
17498: LD_INT 1
17500: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17501: LD_INT 35
17503: PPUSH
17504: CALL_OW 67
// p := p + 1 ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_VAR 0 1
17517: PUSH
17518: LD_INT 1
17520: PLUS
17521: ST_TO_ADDR
// until p >= 60 ;
17522: LD_VAR 0 1
17526: PUSH
17527: LD_INT 60
17529: GREATEREQUAL
17530: IFFALSE 17493
// game_speed := 4 ;
17532: LD_ADDR_OWVAR 65
17536: PUSH
17537: LD_INT 4
17539: ST_TO_ADDR
// end ;
17540: PPOPN 1
17542: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17543: LD_EXP 26
17547: PUSH
17548: LD_EXP 53
17552: AND
17553: IFFALSE 17699
17555: GO 17557
17557: DISABLE
17558: LD_INT 0
17560: PPUSH
17561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17562: LD_ADDR_VAR 0 1
17566: PUSH
17567: LD_INT 22
17569: PUSH
17570: LD_OWVAR 2
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 30
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 30
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: ST_TO_ADDR
// if not depot then
17616: LD_VAR 0 1
17620: NOT
17621: IFFALSE 17625
// exit ;
17623: GO 17699
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17625: LD_ADDR_VAR 0 2
17629: PUSH
17630: LD_VAR 0 1
17634: PUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 12
17647: ARRAY
17648: PPUSH
17649: CALL_OW 274
17653: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17654: LD_VAR 0 2
17658: PPUSH
17659: LD_INT 1
17661: PPUSH
17662: LD_INT 0
17664: PPUSH
17665: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17669: LD_VAR 0 2
17673: PPUSH
17674: LD_INT 2
17676: PPUSH
17677: LD_INT 0
17679: PPUSH
17680: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17684: LD_VAR 0 2
17688: PPUSH
17689: LD_INT 3
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 277
// end ;
17699: PPOPN 2
17701: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17702: LD_EXP 26
17706: PUSH
17707: LD_EXP 54
17711: AND
17712: IFFALSE 17809
17714: GO 17716
17716: DISABLE
17717: LD_INT 0
17719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17720: LD_ADDR_VAR 0 1
17724: PUSH
17725: LD_INT 22
17727: PUSH
17728: LD_OWVAR 2
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: LD_INT 23
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: PPUSH
17769: CALL_OW 69
17773: ST_TO_ADDR
// if not tmp then
17774: LD_VAR 0 1
17778: NOT
17779: IFFALSE 17783
// exit ;
17781: GO 17809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17783: LD_VAR 0 1
17787: PUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL_OW 12
17800: ARRAY
17801: PPUSH
17802: LD_INT 200
17804: PPUSH
17805: CALL_OW 234
// end ;
17809: PPOPN 1
17811: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17812: LD_EXP 26
17816: PUSH
17817: LD_EXP 55
17821: AND
17822: IFFALSE 17901
17824: GO 17826
17826: DISABLE
17827: LD_INT 0
17829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17830: LD_ADDR_VAR 0 1
17834: PUSH
17835: LD_INT 22
17837: PUSH
17838: LD_OWVAR 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 1
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 17901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17875: LD_VAR 0 1
17879: PUSH
17880: LD_INT 1
17882: PPUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 12
17892: ARRAY
17893: PPUSH
17894: LD_INT 60
17896: PPUSH
17897: CALL_OW 234
// end ;
17901: PPOPN 1
17903: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17904: LD_EXP 26
17908: PUSH
17909: LD_EXP 56
17913: AND
17914: IFFALSE 18013
17916: GO 17918
17918: DISABLE
17919: LD_INT 0
17921: PPUSH
17922: PPUSH
// begin enable ;
17923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17924: LD_ADDR_VAR 0 1
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_OWVAR 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 61
17943: PUSH
17944: EMPTY
17945: LIST
17946: PUSH
17947: LD_INT 33
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: ST_TO_ADDR
// if not tmp then
17967: LD_VAR 0 1
17971: NOT
17972: IFFALSE 17976
// exit ;
17974: GO 18013
// for i in tmp do
17976: LD_ADDR_VAR 0 2
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: FOR_IN
17987: IFFALSE 18011
// if IsControledBy ( i ) then
17989: LD_VAR 0 2
17993: PPUSH
17994: CALL_OW 312
17998: IFFALSE 18009
// ComUnlink ( i ) ;
18000: LD_VAR 0 2
18004: PPUSH
18005: CALL_OW 136
18009: GO 17986
18011: POP
18012: POP
// end ;
18013: PPOPN 2
18015: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18016: LD_EXP 26
18020: PUSH
18021: LD_EXP 57
18025: AND
18026: IFFALSE 18166
18028: GO 18030
18030: DISABLE
18031: LD_INT 0
18033: PPUSH
18034: PPUSH
// begin ToLua ( displayPowell(); ) ;
18035: LD_STRING displayPowell();
18037: PPUSH
18038: CALL_OW 559
// uc_side := 0 ;
18042: LD_ADDR_OWVAR 20
18046: PUSH
18047: LD_INT 0
18049: ST_TO_ADDR
// uc_nation := 2 ;
18050: LD_ADDR_OWVAR 21
18054: PUSH
18055: LD_INT 2
18057: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18058: LD_ADDR_OWVAR 37
18062: PUSH
18063: LD_INT 14
18065: ST_TO_ADDR
// vc_engine := engine_siberite ;
18066: LD_ADDR_OWVAR 39
18070: PUSH
18071: LD_INT 3
18073: ST_TO_ADDR
// vc_control := control_apeman ;
18074: LD_ADDR_OWVAR 38
18078: PUSH
18079: LD_INT 5
18081: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18082: LD_ADDR_OWVAR 40
18086: PUSH
18087: LD_INT 29
18089: ST_TO_ADDR
// un := CreateVehicle ;
18090: LD_ADDR_VAR 0 2
18094: PUSH
18095: CALL_OW 45
18099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18100: LD_VAR 0 2
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18112: LD_INT 35
18114: PPUSH
18115: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18119: LD_VAR 0 2
18123: PPUSH
18124: LD_INT 22
18126: PUSH
18127: LD_OWVAR 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PPUSH
18136: CALL_OW 69
18140: PPUSH
18141: LD_VAR 0 2
18145: PPUSH
18146: CALL_OW 74
18150: PPUSH
18151: CALL_OW 115
// until IsDead ( un ) ;
18155: LD_VAR 0 2
18159: PPUSH
18160: CALL_OW 301
18164: IFFALSE 18112
// end ;
18166: PPOPN 2
18168: END
// every 0 0$1 trigger StreamModeActive and sStu do
18169: LD_EXP 26
18173: PUSH
18174: LD_EXP 65
18178: AND
18179: IFFALSE 18195
18181: GO 18183
18183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18184: LD_STRING displayStucuk();
18186: PPUSH
18187: CALL_OW 559
// ResetFog ;
18191: CALL_OW 335
// end ;
18195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18196: LD_EXP 26
18200: PUSH
18201: LD_EXP 58
18205: AND
18206: IFFALSE 18347
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_INT 22
18222: PUSH
18223: LD_OWVAR 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: ST_TO_ADDR
// if not tmp then
18251: LD_VAR 0 2
18255: NOT
18256: IFFALSE 18260
// exit ;
18258: GO 18347
// un := tmp [ rand ( 1 , tmp ) ] ;
18260: LD_ADDR_VAR 0 1
18264: PUSH
18265: LD_VAR 0 2
18269: PUSH
18270: LD_INT 1
18272: PPUSH
18273: LD_VAR 0 2
18277: PPUSH
18278: CALL_OW 12
18282: ARRAY
18283: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18284: LD_VAR 0 1
18288: PPUSH
18289: LD_INT 0
18291: PPUSH
18292: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18296: LD_VAR 0 1
18300: PPUSH
18301: LD_OWVAR 3
18305: PUSH
18306: LD_VAR 0 1
18310: DIFF
18311: PPUSH
18312: LD_VAR 0 1
18316: PPUSH
18317: CALL_OW 74
18321: PPUSH
18322: CALL_OW 115
// wait ( 0 0$20 ) ;
18326: LD_INT 700
18328: PPUSH
18329: CALL_OW 67
// SetSide ( un , your_side ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_OWVAR 2
18342: PPUSH
18343: CALL_OW 235
// end ;
18347: PPOPN 2
18349: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18350: LD_EXP 26
18354: PUSH
18355: LD_EXP 59
18359: AND
18360: IFFALSE 18466
18362: GO 18364
18364: DISABLE
18365: LD_INT 0
18367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18368: LD_ADDR_VAR 0 1
18372: PUSH
18373: LD_INT 22
18375: PUSH
18376: LD_OWVAR 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not depot then
18422: LD_VAR 0 1
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18466
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18431: LD_VAR 0 1
18435: PUSH
18436: LD_INT 1
18438: ARRAY
18439: PPUSH
18440: CALL_OW 250
18444: PPUSH
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 1
18452: ARRAY
18453: PPUSH
18454: CALL_OW 251
18458: PPUSH
18459: LD_INT 70
18461: PPUSH
18462: CALL_OW 495
// end ;
18466: PPOPN 1
18468: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18469: LD_EXP 26
18473: PUSH
18474: LD_EXP 60
18478: AND
18479: IFFALSE 18690
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18491: LD_ADDR_VAR 0 5
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_OWVAR 2
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: ST_TO_ADDR
// if not tmp then
18527: LD_VAR 0 5
18531: NOT
18532: IFFALSE 18536
// exit ;
18534: GO 18690
// for i in tmp do
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_VAR 0 5
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18688
// begin d := rand ( 0 , 5 ) ;
18549: LD_ADDR_VAR 0 4
18553: PUSH
18554: LD_INT 0
18556: PPUSH
18557: LD_INT 5
18559: PPUSH
18560: CALL_OW 12
18564: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL_OW 250
18579: PPUSH
18580: LD_VAR 0 4
18584: PPUSH
18585: LD_INT 3
18587: PPUSH
18588: LD_INT 12
18590: PPUSH
18591: CALL_OW 12
18595: PPUSH
18596: CALL_OW 272
18600: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 251
18615: PPUSH
18616: LD_VAR 0 4
18620: PPUSH
18621: LD_INT 3
18623: PPUSH
18624: LD_INT 12
18626: PPUSH
18627: CALL_OW 12
18631: PPUSH
18632: CALL_OW 273
18636: ST_TO_ADDR
// if ValidHex ( x , y ) then
18637: LD_VAR 0 2
18641: PPUSH
18642: LD_VAR 0 3
18646: PPUSH
18647: CALL_OW 488
18651: IFFALSE 18686
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_INT 3
18670: PPUSH
18671: LD_INT 6
18673: PPUSH
18674: CALL_OW 12
18678: PPUSH
18679: LD_INT 1
18681: PPUSH
18682: CALL_OW 483
// end ;
18686: GO 18546
18688: POP
18689: POP
// end ;
18690: PPOPN 5
18692: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18693: LD_EXP 26
18697: PUSH
18698: LD_EXP 61
18702: AND
18703: IFFALSE 18797
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
18711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18712: LD_ADDR_VAR 0 2
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_OWVAR 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 32
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: ST_TO_ADDR
// if not tmp then
18759: LD_VAR 0 2
18763: NOT
18764: IFFALSE 18768
// exit ;
18766: GO 18797
// for i in tmp do
18768: LD_ADDR_VAR 0 1
18772: PUSH
18773: LD_VAR 0 2
18777: PUSH
18778: FOR_IN
18779: IFFALSE 18795
// SetFuel ( i , 0 ) ;
18781: LD_VAR 0 1
18785: PPUSH
18786: LD_INT 0
18788: PPUSH
18789: CALL_OW 240
18793: GO 18778
18795: POP
18796: POP
// end ;
18797: PPOPN 2
18799: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18800: LD_EXP 26
18804: PUSH
18805: LD_EXP 62
18809: AND
18810: IFFALSE 18876
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18818: LD_ADDR_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 30
18837: PUSH
18838: LD_INT 29
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: ST_TO_ADDR
// if not tmp then
18854: LD_VAR 0 1
18858: NOT
18859: IFFALSE 18863
// exit ;
18861: GO 18876
// DestroyUnit ( tmp [ 1 ] ) ;
18863: LD_VAR 0 1
18867: PUSH
18868: LD_INT 1
18870: ARRAY
18871: PPUSH
18872: CALL_OW 65
// end ;
18876: PPOPN 1
18878: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18879: LD_EXP 26
18883: PUSH
18884: LD_EXP 64
18888: AND
18889: IFFALSE 19018
18891: GO 18893
18893: DISABLE
18894: LD_INT 0
18896: PPUSH
// begin uc_side := 0 ;
18897: LD_ADDR_OWVAR 20
18901: PUSH
18902: LD_INT 0
18904: ST_TO_ADDR
// uc_nation := nation_arabian ;
18905: LD_ADDR_OWVAR 21
18909: PUSH
18910: LD_INT 2
18912: ST_TO_ADDR
// hc_gallery :=  ;
18913: LD_ADDR_OWVAR 33
18917: PUSH
18918: LD_STRING 
18920: ST_TO_ADDR
// hc_name :=  ;
18921: LD_ADDR_OWVAR 26
18925: PUSH
18926: LD_STRING 
18928: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18929: LD_INT 1
18931: PPUSH
18932: LD_INT 11
18934: PPUSH
18935: LD_INT 10
18937: PPUSH
18938: CALL_OW 380
// un := CreateHuman ;
18942: LD_ADDR_VAR 0 1
18946: PUSH
18947: CALL_OW 44
18951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18952: LD_VAR 0 1
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18964: LD_INT 35
18966: PPUSH
18967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_INT 22
18978: PUSH
18979: LD_OWVAR 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: PPUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 74
19002: PPUSH
19003: CALL_OW 115
// until IsDead ( un ) ;
19007: LD_VAR 0 1
19011: PPUSH
19012: CALL_OW 301
19016: IFFALSE 18964
// end ;
19018: PPOPN 1
19020: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19021: LD_EXP 26
19025: PUSH
19026: LD_EXP 66
19030: AND
19031: IFFALSE 19043
19033: GO 19035
19035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19036: LD_STRING earthquake(getX(game), 0, 32)
19038: PPUSH
19039: CALL_OW 559
19043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19044: LD_EXP 26
19048: PUSH
19049: LD_EXP 67
19053: AND
19054: IFFALSE 19145
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
// begin enable ;
19062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19063: LD_ADDR_VAR 0 1
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_OWVAR 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 33
19092: PUSH
19093: LD_INT 3
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: ST_TO_ADDR
// if not tmp then
19110: LD_VAR 0 1
19114: NOT
19115: IFFALSE 19119
// exit ;
19117: GO 19145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 12
19136: ARRAY
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 234
// end ;
19145: PPOPN 1
19147: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19148: LD_EXP 26
19152: PUSH
19153: LD_EXP 68
19157: AND
19158: IFFALSE 19299
19160: GO 19162
19162: DISABLE
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: LD_INT 22
19175: PUSH
19176: LD_OWVAR 2
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 25
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PPUSH
19199: CALL_OW 69
19203: ST_TO_ADDR
// if not tmp then
19204: LD_VAR 0 3
19208: NOT
19209: IFFALSE 19213
// exit ;
19211: GO 19299
// un := tmp [ rand ( 1 , tmp ) ] ;
19213: LD_ADDR_VAR 0 2
19217: PUSH
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 1
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: CALL_OW 12
19235: ARRAY
19236: ST_TO_ADDR
// if Crawls ( un ) then
19237: LD_VAR 0 2
19241: PPUSH
19242: CALL_OW 318
19246: IFFALSE 19257
// ComWalk ( un ) ;
19248: LD_VAR 0 2
19252: PPUSH
19253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19257: LD_VAR 0 2
19261: PPUSH
19262: LD_INT 9
19264: PPUSH
19265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19269: LD_INT 28
19271: PPUSH
19272: LD_OWVAR 2
19276: PPUSH
19277: LD_INT 2
19279: PPUSH
19280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19284: LD_INT 29
19286: PPUSH
19287: LD_OWVAR 2
19291: PPUSH
19292: LD_INT 2
19294: PPUSH
19295: CALL_OW 322
// end ;
19299: PPOPN 3
19301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19302: LD_EXP 26
19306: PUSH
19307: LD_EXP 69
19311: AND
19312: IFFALSE 19423
19314: GO 19316
19316: DISABLE
19317: LD_INT 0
19319: PPUSH
19320: PPUSH
19321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19322: LD_ADDR_VAR 0 3
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_OWVAR 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 25
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: CALL_OW 69
19357: ST_TO_ADDR
// if not tmp then
19358: LD_VAR 0 3
19362: NOT
19363: IFFALSE 19367
// exit ;
19365: GO 19423
// un := tmp [ rand ( 1 , tmp ) ] ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 1
19379: PPUSH
19380: LD_VAR 0 3
19384: PPUSH
19385: CALL_OW 12
19389: ARRAY
19390: ST_TO_ADDR
// if Crawls ( un ) then
19391: LD_VAR 0 2
19395: PPUSH
19396: CALL_OW 318
19400: IFFALSE 19411
// ComWalk ( un ) ;
19402: LD_VAR 0 2
19406: PPUSH
19407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19411: LD_VAR 0 2
19415: PPUSH
19416: LD_INT 8
19418: PPUSH
19419: CALL_OW 336
// end ;
19423: PPOPN 3
19425: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19426: LD_EXP 26
19430: PUSH
19431: LD_EXP 70
19435: AND
19436: IFFALSE 19580
19438: GO 19440
19440: DISABLE
19441: LD_INT 0
19443: PPUSH
19444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19445: LD_ADDR_VAR 0 2
19449: PUSH
19450: LD_INT 22
19452: PUSH
19453: LD_OWVAR 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 21
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: LD_INT 34
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 34
19487: PUSH
19488: LD_INT 51
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 34
19497: PUSH
19498: LD_INT 32
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: ST_TO_ADDR
// if not tmp then
19521: LD_VAR 0 2
19525: NOT
19526: IFFALSE 19530
// exit ;
19528: GO 19580
// for i in tmp do
19530: LD_ADDR_VAR 0 1
19534: PUSH
19535: LD_VAR 0 2
19539: PUSH
19540: FOR_IN
19541: IFFALSE 19578
// if GetCargo ( i , mat_artifact ) = 0 then
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 4
19550: PPUSH
19551: CALL_OW 289
19555: PUSH
19556: LD_INT 0
19558: EQUAL
19559: IFFALSE 19576
// SetCargo ( i , mat_siberit , 100 ) ;
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_INT 3
19568: PPUSH
19569: LD_INT 100
19571: PPUSH
19572: CALL_OW 290
19576: GO 19540
19578: POP
19579: POP
// end ;
19580: PPOPN 2
19582: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19583: LD_EXP 26
19587: PUSH
19588: LD_EXP 71
19592: AND
19593: IFFALSE 19776
19595: GO 19597
19597: DISABLE
19598: LD_INT 0
19600: PPUSH
19601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19602: LD_ADDR_VAR 0 2
19606: PUSH
19607: LD_INT 22
19609: PUSH
19610: LD_OWVAR 2
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 69
19623: ST_TO_ADDR
// if not tmp then
19624: LD_VAR 0 2
19628: NOT
19629: IFFALSE 19633
// exit ;
19631: GO 19776
// for i := 1 to 2 do
19633: LD_ADDR_VAR 0 1
19637: PUSH
19638: DOUBLE
19639: LD_INT 1
19641: DEC
19642: ST_TO_ADDR
19643: LD_INT 2
19645: PUSH
19646: FOR_TO
19647: IFFALSE 19774
// begin uc_side := your_side ;
19649: LD_ADDR_OWVAR 20
19653: PUSH
19654: LD_OWVAR 2
19658: ST_TO_ADDR
// uc_nation := nation_american ;
19659: LD_ADDR_OWVAR 21
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// vc_chassis := us_morphling ;
19667: LD_ADDR_OWVAR 37
19671: PUSH
19672: LD_INT 5
19674: ST_TO_ADDR
// vc_engine := engine_siberite ;
19675: LD_ADDR_OWVAR 39
19679: PUSH
19680: LD_INT 3
19682: ST_TO_ADDR
// vc_control := control_computer ;
19683: LD_ADDR_OWVAR 38
19687: PUSH
19688: LD_INT 3
19690: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19691: LD_ADDR_OWVAR 40
19695: PUSH
19696: LD_INT 10
19698: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19699: LD_VAR 0 2
19703: PUSH
19704: LD_INT 1
19706: ARRAY
19707: PPUSH
19708: CALL_OW 310
19712: NOT
19713: IFFALSE 19760
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19715: CALL_OW 45
19719: PPUSH
19720: LD_VAR 0 2
19724: PUSH
19725: LD_INT 1
19727: ARRAY
19728: PPUSH
19729: CALL_OW 250
19733: PPUSH
19734: LD_VAR 0 2
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: CALL_OW 251
19747: PPUSH
19748: LD_INT 12
19750: PPUSH
19751: LD_INT 1
19753: PPUSH
19754: CALL_OW 50
19758: GO 19772
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19760: CALL_OW 45
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 51
// end ;
19772: GO 19646
19774: POP
19775: POP
// end ;
19776: PPOPN 2
19778: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19779: LD_EXP 26
19783: PUSH
19784: LD_EXP 72
19788: AND
19789: IFFALSE 20011
19791: GO 19793
19793: DISABLE
19794: LD_INT 0
19796: PPUSH
19797: PPUSH
19798: PPUSH
19799: PPUSH
19800: PPUSH
19801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19802: LD_ADDR_VAR 0 6
19806: PUSH
19807: LD_INT 22
19809: PUSH
19810: LD_OWVAR 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 21
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 3
19831: PUSH
19832: LD_INT 23
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// if not tmp then
19856: LD_VAR 0 6
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 20011
// s1 := rand ( 1 , 4 ) ;
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_INT 1
19872: PPUSH
19873: LD_INT 4
19875: PPUSH
19876: CALL_OW 12
19880: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19881: LD_ADDR_VAR 0 4
19885: PUSH
19886: LD_VAR 0 6
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: PPUSH
19895: LD_VAR 0 2
19899: PPUSH
19900: CALL_OW 259
19904: ST_TO_ADDR
// if s1 = 1 then
19905: LD_VAR 0 2
19909: PUSH
19910: LD_INT 1
19912: EQUAL
19913: IFFALSE 19933
// s2 := rand ( 2 , 4 ) else
19915: LD_ADDR_VAR 0 3
19919: PUSH
19920: LD_INT 2
19922: PPUSH
19923: LD_INT 4
19925: PPUSH
19926: CALL_OW 12
19930: ST_TO_ADDR
19931: GO 19941
// s2 := 1 ;
19933: LD_ADDR_VAR 0 3
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19941: LD_ADDR_VAR 0 5
19945: PUSH
19946: LD_VAR 0 6
19950: PUSH
19951: LD_INT 1
19953: ARRAY
19954: PPUSH
19955: LD_VAR 0 3
19959: PPUSH
19960: CALL_OW 259
19964: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19965: LD_VAR 0 6
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PPUSH
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 5
19983: PPUSH
19984: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19988: LD_VAR 0 6
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PPUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: LD_VAR 0 4
20006: PPUSH
20007: CALL_OW 237
// end ;
20011: PPOPN 6
20013: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20014: LD_EXP 26
20018: PUSH
20019: LD_EXP 73
20023: AND
20024: IFFALSE 20103
20026: GO 20028
20028: DISABLE
20029: LD_INT 0
20031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20032: LD_ADDR_VAR 0 1
20036: PUSH
20037: LD_INT 22
20039: PUSH
20040: LD_OWVAR 2
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: ST_TO_ADDR
// if not tmp then
20068: LD_VAR 0 1
20072: NOT
20073: IFFALSE 20077
// exit ;
20075: GO 20103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20077: LD_VAR 0 1
20081: PUSH
20082: LD_INT 1
20084: PPUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: CALL_OW 12
20094: ARRAY
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 234
// end ;
20103: PPOPN 1
20105: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20106: LD_EXP 26
20110: PUSH
20111: LD_EXP 74
20115: AND
20116: IFFALSE 20228
20118: GO 20120
20120: DISABLE
20121: LD_INT 0
20123: PPUSH
20124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20125: LD_ADDR_VAR 0 2
20129: PUSH
20130: LD_INT 22
20132: PUSH
20133: LD_OWVAR 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: LD_INT 30
20147: PUSH
20148: LD_INT 27
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 26
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 28
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: ST_TO_ADDR
// if not tmp then
20190: LD_VAR 0 2
20194: NOT
20195: IFFALSE 20199
// exit ;
20197: GO 20228
// for i in tmp do
20199: LD_ADDR_VAR 0 1
20203: PUSH
20204: LD_VAR 0 2
20208: PUSH
20209: FOR_IN
20210: IFFALSE 20226
// SetLives ( i , 1 ) ;
20212: LD_VAR 0 1
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: CALL_OW 234
20224: GO 20209
20226: POP
20227: POP
// end ;
20228: PPOPN 2
20230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20231: LD_EXP 26
20235: PUSH
20236: LD_EXP 75
20240: AND
20241: IFFALSE 20515
20243: GO 20245
20245: DISABLE
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
20250: PPUSH
// begin i := rand ( 1 , 7 ) ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: LD_INT 1
20258: PPUSH
20259: LD_INT 7
20261: PPUSH
20262: CALL_OW 12
20266: ST_TO_ADDR
// case i of 1 :
20267: LD_VAR 0 1
20271: PUSH
20272: LD_INT 1
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20290
20280: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20281: LD_STRING earthquake(getX(game), 0, 32)
20283: PPUSH
20284: CALL_OW 559
20288: GO 20515
20290: LD_INT 2
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20312
20298: POP
// begin ToLua ( displayStucuk(); ) ;
20299: LD_STRING displayStucuk();
20301: PPUSH
20302: CALL_OW 559
// ResetFog ;
20306: CALL_OW 335
// end ; 3 :
20310: GO 20515
20312: LD_INT 3
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20424
20320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_INT 22
20328: PUSH
20329: LD_OWVAR 2
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 25
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PPUSH
20352: CALL_OW 69
20356: ST_TO_ADDR
// if not tmp then
20357: LD_VAR 0 2
20361: NOT
20362: IFFALSE 20366
// exit ;
20364: GO 20515
// un := tmp [ rand ( 1 , tmp ) ] ;
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_VAR 0 2
20375: PUSH
20376: LD_INT 1
20378: PPUSH
20379: LD_VAR 0 2
20383: PPUSH
20384: CALL_OW 12
20388: ARRAY
20389: ST_TO_ADDR
// if Crawls ( un ) then
20390: LD_VAR 0 3
20394: PPUSH
20395: CALL_OW 318
20399: IFFALSE 20410
// ComWalk ( un ) ;
20401: LD_VAR 0 3
20405: PPUSH
20406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20410: LD_VAR 0 3
20414: PPUSH
20415: LD_INT 8
20417: PPUSH
20418: CALL_OW 336
// end ; 4 :
20422: GO 20515
20424: LD_INT 4
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20493
20432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20433: LD_ADDR_VAR 0 2
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_OWVAR 2
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 30
20452: PUSH
20453: LD_INT 29
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PPUSH
20464: CALL_OW 69
20468: ST_TO_ADDR
// if not tmp then
20469: LD_VAR 0 2
20473: NOT
20474: IFFALSE 20478
// exit ;
20476: GO 20515
// DestroyUnit ( tmp [ 1 ] ) ;
20478: LD_VAR 0 2
20482: PUSH
20483: LD_INT 1
20485: ARRAY
20486: PPUSH
20487: CALL_OW 65
// end ; 5 .. 7 :
20491: GO 20515
20493: LD_INT 5
20495: DOUBLE
20496: GREATEREQUAL
20497: IFFALSE 20505
20499: LD_INT 7
20501: DOUBLE
20502: LESSEQUAL
20503: IFTRUE 20507
20505: GO 20514
20507: POP
// StreamSibBomb ; end ;
20508: CALL 16765 0 0
20512: GO 20515
20514: POP
// end ;
20515: PPOPN 3
20517: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20518: LD_EXP 26
20522: PUSH
20523: LD_EXP 76
20527: AND
20528: IFFALSE 20684
20530: GO 20532
20532: DISABLE
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
20537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20538: LD_ADDR_VAR 0 2
20542: PUSH
20543: LD_INT 81
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 21
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 21
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: ST_TO_ADDR
// if not tmp then
20592: LD_VAR 0 2
20596: NOT
20597: IFFALSE 20601
// exit ;
20599: GO 20684
// p := 0 ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20609: LD_INT 35
20611: PPUSH
20612: CALL_OW 67
// p := p + 1 ;
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 1
20628: PLUS
20629: ST_TO_ADDR
// for i in tmp do
20630: LD_ADDR_VAR 0 1
20634: PUSH
20635: LD_VAR 0 2
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20672
// if GetLives ( i ) < 1000 then
20643: LD_VAR 0 1
20647: PPUSH
20648: CALL_OW 256
20652: PUSH
20653: LD_INT 1000
20655: LESS
20656: IFFALSE 20670
// SetLives ( i , 1000 ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_INT 1000
20665: PPUSH
20666: CALL_OW 234
20670: GO 20640
20672: POP
20673: POP
// until p > 20 ;
20674: LD_VAR 0 3
20678: PUSH
20679: LD_INT 20
20681: GREATER
20682: IFFALSE 20609
// end ;
20684: PPOPN 3
20686: END
// every 0 0$1 trigger StreamModeActive and sTime do
20687: LD_EXP 26
20691: PUSH
20692: LD_EXP 77
20696: AND
20697: IFFALSE 20732
20699: GO 20701
20701: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20702: LD_INT 28
20704: PPUSH
20705: LD_OWVAR 2
20709: PPUSH
20710: LD_INT 2
20712: PPUSH
20713: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20717: LD_INT 30
20719: PPUSH
20720: LD_OWVAR 2
20724: PPUSH
20725: LD_INT 2
20727: PPUSH
20728: CALL_OW 322
// end ;
20732: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20733: LD_EXP 26
20737: PUSH
20738: LD_EXP 78
20742: AND
20743: IFFALSE 20864
20745: GO 20747
20747: DISABLE
20748: LD_INT 0
20750: PPUSH
20751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_INT 22
20759: PUSH
20760: LD_OWVAR 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 21
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: LD_INT 23
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: PPUSH
20801: CALL_OW 69
20805: ST_TO_ADDR
// if not tmp then
20806: LD_VAR 0 2
20810: NOT
20811: IFFALSE 20815
// exit ;
20813: GO 20864
// for i in tmp do
20815: LD_ADDR_VAR 0 1
20819: PUSH
20820: LD_VAR 0 2
20824: PUSH
20825: FOR_IN
20826: IFFALSE 20862
// begin if Crawls ( i ) then
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 318
20837: IFFALSE 20848
// ComWalk ( i ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 138
// SetClass ( i , 2 ) ;
20848: LD_VAR 0 1
20852: PPUSH
20853: LD_INT 2
20855: PPUSH
20856: CALL_OW 336
// end ;
20860: GO 20825
20862: POP
20863: POP
// end ;
20864: PPOPN 2
20866: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20867: LD_EXP 26
20871: PUSH
20872: LD_EXP 79
20876: AND
20877: IFFALSE 21158
20879: GO 20881
20881: DISABLE
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
20886: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20887: LD_OWVAR 2
20891: PPUSH
20892: LD_INT 9
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20905: LD_INT 9
20907: PPUSH
20908: LD_OWVAR 2
20912: PPUSH
20913: CALL_OW 343
// uc_side := 9 ;
20917: LD_ADDR_OWVAR 20
20921: PUSH
20922: LD_INT 9
20924: ST_TO_ADDR
// uc_nation := 2 ;
20925: LD_ADDR_OWVAR 21
20929: PUSH
20930: LD_INT 2
20932: ST_TO_ADDR
// hc_name := Dark Warrior ;
20933: LD_ADDR_OWVAR 26
20937: PUSH
20938: LD_STRING Dark Warrior
20940: ST_TO_ADDR
// hc_gallery :=  ;
20941: LD_ADDR_OWVAR 33
20945: PUSH
20946: LD_STRING 
20948: ST_TO_ADDR
// hc_noskilllimit := true ;
20949: LD_ADDR_OWVAR 76
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20957: LD_ADDR_OWVAR 31
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: LD_INT 30
20967: PUSH
20968: LD_INT 30
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: ST_TO_ADDR
// un := CreateHuman ;
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: CALL_OW 44
20989: ST_TO_ADDR
// hc_noskilllimit := false ;
20990: LD_ADDR_OWVAR 76
20994: PUSH
20995: LD_INT 0
20997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20998: LD_VAR 0 3
21002: PPUSH
21003: LD_INT 1
21005: PPUSH
21006: CALL_OW 51
// p := 0 ;
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_INT 0
21017: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21018: LD_INT 35
21020: PPUSH
21021: CALL_OW 67
// p := p + 1 ;
21025: LD_ADDR_VAR 0 2
21029: PUSH
21030: LD_VAR 0 2
21034: PUSH
21035: LD_INT 1
21037: PLUS
21038: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21039: LD_VAR 0 3
21043: PPUSH
21044: CALL_OW 256
21048: PUSH
21049: LD_INT 1000
21051: LESS
21052: IFFALSE 21066
// SetLives ( un , 1000 ) ;
21054: LD_VAR 0 3
21058: PPUSH
21059: LD_INT 1000
21061: PPUSH
21062: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_INT 81
21073: PUSH
21074: LD_OWVAR 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 91
21085: PUSH
21086: LD_VAR 0 3
21090: PUSH
21091: LD_INT 30
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PPUSH
21103: CALL_OW 69
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: CALL_OW 74
21117: PPUSH
21118: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21122: LD_VAR 0 2
21126: PUSH
21127: LD_INT 60
21129: GREATER
21130: PUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: CALL_OW 301
21140: OR
21141: IFFALSE 21018
// if un then
21143: LD_VAR 0 3
21147: IFFALSE 21158
// RemoveUnit ( un ) ;
21149: LD_VAR 0 3
21153: PPUSH
21154: CALL_OW 64
// end ;
21158: PPOPN 3
21160: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
21165: PPUSH
21166: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21167: LD_ADDR_VAR 0 4
21171: PUSH
21172: LD_INT 22
21174: PUSH
21175: LD_OWVAR 2
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 2
21186: PUSH
21187: LD_INT 30
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 30
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 4
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21289
// for i in tmp do
21230: LD_ADDR_VAR 0 2
21234: PUSH
21235: LD_VAR 0 4
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21287
// for j = 1 to 3 do
21243: LD_ADDR_VAR 0 3
21247: PUSH
21248: DOUBLE
21249: LD_INT 1
21251: DEC
21252: ST_TO_ADDR
21253: LD_INT 3
21255: PUSH
21256: FOR_TO
21257: IFFALSE 21283
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21259: LD_VAR 0 2
21263: PPUSH
21264: CALL_OW 274
21268: PPUSH
21269: LD_VAR 0 3
21273: PPUSH
21274: LD_INT 99999
21276: PPUSH
21277: CALL_OW 277
21281: GO 21256
21283: POP
21284: POP
21285: GO 21240
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 1
21293: RET
// export function hHackSetLevel10 ; var i , j ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21299: LD_ADDR_VAR 0 2
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21372
// if IsSelected ( i ) then
21322: LD_VAR 0 2
21326: PPUSH
21327: CALL_OW 306
21331: IFFALSE 21370
// begin for j := 1 to 4 do
21333: LD_ADDR_VAR 0 3
21337: PUSH
21338: DOUBLE
21339: LD_INT 1
21341: DEC
21342: ST_TO_ADDR
21343: LD_INT 4
21345: PUSH
21346: FOR_TO
21347: IFFALSE 21368
// SetSkill ( i , j , 10 ) ;
21349: LD_VAR 0 2
21353: PPUSH
21354: LD_VAR 0 3
21358: PPUSH
21359: LD_INT 10
21361: PPUSH
21362: CALL_OW 237
21366: GO 21346
21368: POP
21369: POP
// end ;
21370: GO 21319
21372: POP
21373: POP
// end ;
21374: LD_VAR 0 1
21378: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: LD_INT 22
21391: PUSH
21392: LD_OWVAR 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 21
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: PUSH
21420: FOR_IN
21421: IFFALSE 21462
// begin for j := 1 to 4 do
21423: LD_ADDR_VAR 0 3
21427: PUSH
21428: DOUBLE
21429: LD_INT 1
21431: DEC
21432: ST_TO_ADDR
21433: LD_INT 4
21435: PUSH
21436: FOR_TO
21437: IFFALSE 21458
// SetSkill ( i , j , 10 ) ;
21439: LD_VAR 0 2
21443: PPUSH
21444: LD_VAR 0 3
21448: PPUSH
21449: LD_INT 10
21451: PPUSH
21452: CALL_OW 237
21456: GO 21436
21458: POP
21459: POP
// end ;
21460: GO 21420
21462: POP
21463: POP
// end ;
21464: LD_VAR 0 1
21468: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
21469: LD_INT 0
21471: PPUSH
// uc_side := your_side ;
21472: LD_ADDR_OWVAR 20
21476: PUSH
21477: LD_OWVAR 2
21481: ST_TO_ADDR
// uc_nation := nation ;
21482: LD_ADDR_OWVAR 21
21486: PUSH
21487: LD_VAR 0 1
21491: ST_TO_ADDR
// InitHc ;
21492: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21496: LD_INT 0
21498: PPUSH
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21513: CALL_OW 44
21517: PPUSH
21518: LD_INT 1
21520: PPUSH
21521: CALL_OW 51
// end ;
21525: LD_VAR 0 4
21529: RET
// export function hHackSpawnVehicle ; begin
21530: LD_INT 0
21532: PPUSH
// uc_side := your_side ;
21533: LD_ADDR_OWVAR 20
21537: PUSH
21538: LD_OWVAR 2
21542: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21543: LD_ADDR_OWVAR 21
21547: PUSH
21548: LD_INT 1
21550: PPUSH
21551: LD_INT 3
21553: PPUSH
21554: CALL_OW 12
21558: ST_TO_ADDR
// InitVc ;
21559: CALL_OW 20
// case uc_nation of 1 :
21563: LD_OWVAR 21
21567: PUSH
21568: LD_INT 1
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21720
21576: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
21577: LD_ADDR_OWVAR 37
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 3
21590: PUSH
21591: LD_INT 4
21593: PUSH
21594: LD_INT 5
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 1
21606: PPUSH
21607: LD_INT 5
21609: PPUSH
21610: CALL_OW 12
21614: ARRAY
21615: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21616: LD_ADDR_OWVAR 39
21620: PUSH
21621: LD_INT 1
21623: PPUSH
21624: LD_INT 3
21626: PPUSH
21627: CALL_OW 12
21631: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
21632: LD_ADDR_OWVAR 38
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 3
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PPUSH
21654: LD_INT 3
21656: PPUSH
21657: CALL_OW 12
21661: ARRAY
21662: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
21663: LD_ADDR_OWVAR 40
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 4
21673: PUSH
21674: LD_INT 5
21676: PUSH
21677: LD_INT 3
21679: PUSH
21680: LD_INT 7
21682: PUSH
21683: LD_INT 8
21685: PUSH
21686: LD_INT 9
21688: PUSH
21689: LD_INT 10
21691: PUSH
21692: LD_INT 6
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: PPUSH
21709: LD_INT 9
21711: PPUSH
21712: CALL_OW 12
21716: ARRAY
21717: ST_TO_ADDR
// end ; 2 :
21718: GO 21985
21720: LD_INT 2
21722: DOUBLE
21723: EQUAL
21724: IFTRUE 21728
21726: GO 21852
21728: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
21729: LD_ADDR_OWVAR 37
21733: PUSH
21734: LD_INT 11
21736: PUSH
21737: LD_INT 12
21739: PUSH
21740: LD_INT 13
21742: PUSH
21743: LD_INT 14
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_INT 4
21757: PPUSH
21758: CALL_OW 12
21762: ARRAY
21763: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21764: LD_ADDR_OWVAR 39
21768: PUSH
21769: LD_INT 1
21771: PPUSH
21772: LD_INT 3
21774: PPUSH
21775: CALL_OW 12
21779: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
21780: LD_ADDR_OWVAR 38
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: LD_INT 5
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PPUSH
21802: LD_INT 3
21804: PPUSH
21805: CALL_OW 12
21809: ARRAY
21810: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
21811: LD_ADDR_OWVAR 40
21815: PUSH
21816: LD_INT 24
21818: PUSH
21819: LD_INT 26
21821: PUSH
21822: LD_INT 27
21824: PUSH
21825: LD_INT 28
21827: PUSH
21828: LD_INT 29
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: PPUSH
21841: LD_INT 5
21843: PPUSH
21844: CALL_OW 12
21848: ARRAY
21849: ST_TO_ADDR
// end ; 3 :
21850: GO 21985
21852: LD_INT 3
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21984
21860: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
21861: LD_ADDR_OWVAR 37
21865: PUSH
21866: LD_INT 21
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 22
21874: PUSH
21875: LD_INT 24
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: PPUSH
21887: LD_INT 4
21889: PPUSH
21890: CALL_OW 12
21894: ARRAY
21895: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21896: LD_ADDR_OWVAR 39
21900: PUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_INT 3
21906: PPUSH
21907: CALL_OW 12
21911: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
21912: LD_ADDR_OWVAR 38
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PPUSH
21930: LD_INT 2
21932: PPUSH
21933: CALL_OW 12
21937: ARRAY
21938: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
21939: LD_ADDR_OWVAR 40
21943: PUSH
21944: LD_INT 42
21946: PUSH
21947: LD_INT 43
21949: PUSH
21950: LD_INT 44
21952: PUSH
21953: LD_INT 46
21955: PUSH
21956: LD_INT 48
21958: PUSH
21959: LD_INT 47
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PPUSH
21973: LD_INT 6
21975: PPUSH
21976: CALL_OW 12
21980: ARRAY
21981: ST_TO_ADDR
// end ; end ;
21982: GO 21985
21984: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21985: CALL_OW 45
21989: PPUSH
21990: LD_INT 1
21992: PPUSH
21993: CALL_OW 51
// end ;
21997: LD_VAR 0 1
22001: RET
// export hInvincible ; every 1 do
22002: GO 22004
22004: DISABLE
// hInvincible := [ ] ;
22005: LD_ADDR_EXP 80
22009: PUSH
22010: EMPTY
22011: ST_TO_ADDR
22012: END
// every 10 do var i ;
22013: GO 22015
22015: DISABLE
22016: LD_INT 0
22018: PPUSH
// begin enable ;
22019: ENABLE
// if not hInvincible then
22020: LD_EXP 80
22024: NOT
22025: IFFALSE 22029
// exit ;
22027: GO 22073
// for i in hInvincible do
22029: LD_ADDR_VAR 0 1
22033: PUSH
22034: LD_EXP 80
22038: PUSH
22039: FOR_IN
22040: IFFALSE 22071
// if GetLives ( i ) < 1000 then
22042: LD_VAR 0 1
22046: PPUSH
22047: CALL_OW 256
22051: PUSH
22052: LD_INT 1000
22054: LESS
22055: IFFALSE 22069
// SetLives ( i , 1000 ) ;
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_INT 1000
22064: PPUSH
22065: CALL_OW 234
22069: GO 22039
22071: POP
22072: POP
// end ;
22073: PPOPN 1
22075: END
// export function hHackInvincible ; var i ; begin
22076: LD_INT 0
22078: PPUSH
22079: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22080: LD_ADDR_VAR 0 2
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 21
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 69
22117: PUSH
22118: FOR_IN
22119: IFFALSE 22180
// if IsSelected ( i ) then
22121: LD_VAR 0 2
22125: PPUSH
22126: CALL_OW 306
22130: IFFALSE 22178
// begin if i in hInvincible then
22132: LD_VAR 0 2
22136: PUSH
22137: LD_EXP 80
22141: IN
22142: IFFALSE 22162
// hInvincible := hInvincible diff i else
22144: LD_ADDR_EXP 80
22148: PUSH
22149: LD_EXP 80
22153: PUSH
22154: LD_VAR 0 2
22158: DIFF
22159: ST_TO_ADDR
22160: GO 22178
// hInvincible := hInvincible union i ;
22162: LD_ADDR_EXP 80
22166: PUSH
22167: LD_EXP 80
22171: PUSH
22172: LD_VAR 0 2
22176: UNION
22177: ST_TO_ADDR
// end ;
22178: GO 22118
22180: POP
22181: POP
// end ;
22182: LD_VAR 0 1
22186: RET
// export function hHackInvisible ; var i , j ; begin
22187: LD_INT 0
22189: PPUSH
22190: PPUSH
22191: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 21
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL_OW 69
22211: PUSH
22212: FOR_IN
22213: IFFALSE 22237
// if IsSelected ( i ) then
22215: LD_VAR 0 2
22219: PPUSH
22220: CALL_OW 306
22224: IFFALSE 22235
// ComForceInvisible ( i ) ;
22226: LD_VAR 0 2
22230: PPUSH
22231: CALL_OW 496
22235: GO 22212
22237: POP
22238: POP
// end ;
22239: LD_VAR 0 1
22243: RET
// export function hHackChangeYourSide ; begin
22244: LD_INT 0
22246: PPUSH
// if your_side = 8 then
22247: LD_OWVAR 2
22251: PUSH
22252: LD_INT 8
22254: EQUAL
22255: IFFALSE 22267
// your_side := 0 else
22257: LD_ADDR_OWVAR 2
22261: PUSH
22262: LD_INT 0
22264: ST_TO_ADDR
22265: GO 22281
// your_side := your_side + 1 ;
22267: LD_ADDR_OWVAR 2
22271: PUSH
22272: LD_OWVAR 2
22276: PUSH
22277: LD_INT 1
22279: PLUS
22280: ST_TO_ADDR
// end ;
22281: LD_VAR 0 1
22285: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
// for i in all_units do
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_OWVAR 3
22300: PUSH
22301: FOR_IN
22302: IFFALSE 22380
// if IsSelected ( i ) then
22304: LD_VAR 0 2
22308: PPUSH
22309: CALL_OW 306
22313: IFFALSE 22378
// begin j := GetSide ( i ) ;
22315: LD_ADDR_VAR 0 3
22319: PUSH
22320: LD_VAR 0 2
22324: PPUSH
22325: CALL_OW 255
22329: ST_TO_ADDR
// if j = 8 then
22330: LD_VAR 0 3
22334: PUSH
22335: LD_INT 8
22337: EQUAL
22338: IFFALSE 22350
// j := 0 else
22340: LD_ADDR_VAR 0 3
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
22348: GO 22364
// j := j + 1 ;
22350: LD_ADDR_VAR 0 3
22354: PUSH
22355: LD_VAR 0 3
22359: PUSH
22360: LD_INT 1
22362: PLUS
22363: ST_TO_ADDR
// SetSide ( i , j ) ;
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: CALL_OW 235
// end ;
22378: GO 22301
22380: POP
22381: POP
// end ;
22382: LD_VAR 0 1
22386: RET
// export function hHackFog ; begin
22387: LD_INT 0
22389: PPUSH
// FogOff ( true ) ;
22390: LD_INT 1
22392: PPUSH
22393: CALL_OW 344
// end ;
22397: LD_VAR 0 1
22401: RET
// export function hHackApeman ; begin
22402: LD_INT 0
22404: PPUSH
// uc_side := your_side ;
22405: LD_ADDR_OWVAR 20
22409: PUSH
22410: LD_OWVAR 2
22414: ST_TO_ADDR
// uc_nation := 0 ;
22415: LD_ADDR_OWVAR 21
22419: PUSH
22420: LD_INT 0
22422: ST_TO_ADDR
// hc_name :=  ;
22423: LD_ADDR_OWVAR 26
22427: PUSH
22428: LD_STRING 
22430: ST_TO_ADDR
// hc_gallery :=  ;
22431: LD_ADDR_OWVAR 33
22435: PUSH
22436: LD_STRING 
22438: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
22439: LD_ADDR_OWVAR 31
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: ST_TO_ADDR
// hc_class := class_apeman ;
22462: LD_ADDR_OWVAR 28
22466: PUSH
22467: LD_INT 12
22469: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22470: CALL_OW 44
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL_OW 51
// end ;
22482: LD_VAR 0 1
22486: RET
// export function hHackBoom ; begin
22487: LD_INT 0
22489: PPUSH
// uc_side := your_side ;
22490: LD_ADDR_OWVAR 20
22494: PUSH
22495: LD_OWVAR 2
22499: ST_TO_ADDR
// uc_nation := 1 ;
22500: LD_ADDR_OWVAR 21
22504: PUSH
22505: LD_INT 1
22507: ST_TO_ADDR
// vc_chassis := us_morphling ;
22508: LD_ADDR_OWVAR 37
22512: PUSH
22513: LD_INT 5
22515: ST_TO_ADDR
// vc_engine := engine_siberite ;
22516: LD_ADDR_OWVAR 39
22520: PUSH
22521: LD_INT 3
22523: ST_TO_ADDR
// vc_control := control_computer ;
22524: LD_ADDR_OWVAR 38
22528: PUSH
22529: LD_INT 3
22531: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
22532: LD_ADDR_OWVAR 40
22536: PUSH
22537: LD_INT 8
22539: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22540: CALL_OW 45
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 51
// end ; end_of_file end_of_file
22552: LD_VAR 0 1
22556: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 264
22572: PUSH
22573: LD_EXP 91
22577: EQUAL
22578: IFFALSE 22650
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22580: LD_INT 68
22582: PPUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 255
22592: PPUSH
22593: CALL_OW 321
22597: PUSH
22598: LD_INT 2
22600: EQUAL
22601: IFFALSE 22613
// eff := 70 else
22603: LD_ADDR_VAR 0 4
22607: PUSH
22608: LD_INT 70
22610: ST_TO_ADDR
22611: GO 22621
// eff := 30 ;
22613: LD_ADDR_VAR 0 4
22617: PUSH
22618: LD_INT 30
22620: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22621: LD_VAR 0 1
22625: PPUSH
22626: CALL_OW 250
22630: PPUSH
22631: LD_VAR 0 1
22635: PPUSH
22636: CALL_OW 251
22640: PPUSH
22641: LD_VAR 0 4
22645: PPUSH
22646: CALL_OW 495
// end ; end ;
22650: LD_VAR 0 2
22654: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22655: LD_INT 0
22657: PPUSH
// end ;
22658: LD_VAR 0 4
22662: RET
// export function SOS_Command ( cmd ) ; begin
22663: LD_INT 0
22665: PPUSH
// end ;
22666: LD_VAR 0 2
22670: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_INT 254
22678: EQUAL
22679: PUSH
22680: LD_VAR 0 2
22684: PPUSH
22685: CALL_OW 264
22689: PUSH
22690: LD_EXP 89
22694: EQUAL
22695: AND
22696: PUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: CALL_OW 263
22706: PUSH
22707: LD_INT 3
22709: EQUAL
22710: AND
22711: IFFALSE 22727
// HackDestroyVehicle ( unit , selectedUnit ) ;
22713: LD_VAR 0 2
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: CALL 24234 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_INT 255
22734: EQUAL
22735: PUSH
22736: LD_VAR 0 2
22740: PPUSH
22741: CALL_OW 264
22745: PUSH
22746: LD_INT 14
22748: PUSH
22749: LD_INT 53
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: IN
22756: AND
22757: PUSH
22758: LD_VAR 0 4
22762: PPUSH
22763: LD_VAR 0 5
22767: PPUSH
22768: CALL_OW 488
22772: AND
22773: IFFALSE 22797
// CutTreeXYR ( unit , x , y , 12 ) ;
22775: LD_VAR 0 2
22779: PPUSH
22780: LD_VAR 0 4
22784: PPUSH
22785: LD_VAR 0 5
22789: PPUSH
22790: LD_INT 12
22792: PPUSH
22793: CALL 22800 0 4
// end ;
22797: PPOPN 5
22799: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
22810: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22811: LD_VAR 0 1
22815: NOT
22816: PUSH
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_VAR 0 3
22826: PPUSH
22827: CALL_OW 488
22831: NOT
22832: OR
22833: PUSH
22834: LD_VAR 0 4
22838: NOT
22839: OR
22840: IFFALSE 22844
// exit ;
22842: GO 23184
// list := [ ] ;
22844: LD_ADDR_VAR 0 13
22848: PUSH
22849: EMPTY
22850: ST_TO_ADDR
// if x - r < 0 then
22851: LD_VAR 0 2
22855: PUSH
22856: LD_VAR 0 4
22860: MINUS
22861: PUSH
22862: LD_INT 0
22864: LESS
22865: IFFALSE 22877
// min_x := 0 else
22867: LD_ADDR_VAR 0 7
22871: PUSH
22872: LD_INT 0
22874: ST_TO_ADDR
22875: GO 22893
// min_x := x - r ;
22877: LD_ADDR_VAR 0 7
22881: PUSH
22882: LD_VAR 0 2
22886: PUSH
22887: LD_VAR 0 4
22891: MINUS
22892: ST_TO_ADDR
// if y - r < 0 then
22893: LD_VAR 0 3
22897: PUSH
22898: LD_VAR 0 4
22902: MINUS
22903: PUSH
22904: LD_INT 0
22906: LESS
22907: IFFALSE 22919
// min_y := 0 else
22909: LD_ADDR_VAR 0 8
22913: PUSH
22914: LD_INT 0
22916: ST_TO_ADDR
22917: GO 22935
// min_y := y - r ;
22919: LD_ADDR_VAR 0 8
22923: PUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_VAR 0 4
22933: MINUS
22934: ST_TO_ADDR
// max_x := x + r ;
22935: LD_ADDR_VAR 0 9
22939: PUSH
22940: LD_VAR 0 2
22944: PUSH
22945: LD_VAR 0 4
22949: PLUS
22950: ST_TO_ADDR
// max_y := y + r ;
22951: LD_ADDR_VAR 0 10
22955: PUSH
22956: LD_VAR 0 3
22960: PUSH
22961: LD_VAR 0 4
22965: PLUS
22966: ST_TO_ADDR
// for _x = min_x to max_x do
22967: LD_ADDR_VAR 0 11
22971: PUSH
22972: DOUBLE
22973: LD_VAR 0 7
22977: DEC
22978: ST_TO_ADDR
22979: LD_VAR 0 9
22983: PUSH
22984: FOR_TO
22985: IFFALSE 23102
// for _y = min_y to max_y do
22987: LD_ADDR_VAR 0 12
22991: PUSH
22992: DOUBLE
22993: LD_VAR 0 8
22997: DEC
22998: ST_TO_ADDR
22999: LD_VAR 0 10
23003: PUSH
23004: FOR_TO
23005: IFFALSE 23098
// begin if not ValidHex ( _x , _y ) then
23007: LD_VAR 0 11
23011: PPUSH
23012: LD_VAR 0 12
23016: PPUSH
23017: CALL_OW 488
23021: NOT
23022: IFFALSE 23026
// continue ;
23024: GO 23004
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23026: LD_VAR 0 11
23030: PPUSH
23031: LD_VAR 0 12
23035: PPUSH
23036: CALL_OW 351
23040: PUSH
23041: LD_VAR 0 11
23045: PPUSH
23046: LD_VAR 0 12
23050: PPUSH
23051: CALL_OW 554
23055: AND
23056: IFFALSE 23096
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23058: LD_ADDR_VAR 0 13
23062: PUSH
23063: LD_VAR 0 13
23067: PPUSH
23068: LD_VAR 0 13
23072: PUSH
23073: LD_INT 1
23075: PLUS
23076: PPUSH
23077: LD_VAR 0 11
23081: PUSH
23082: LD_VAR 0 12
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 2
23095: ST_TO_ADDR
// end ;
23096: GO 23004
23098: POP
23099: POP
23100: GO 22984
23102: POP
23103: POP
// if not list then
23104: LD_VAR 0 13
23108: NOT
23109: IFFALSE 23113
// exit ;
23111: GO 23184
// for i in list do
23113: LD_ADDR_VAR 0 6
23117: PUSH
23118: LD_VAR 0 13
23122: PUSH
23123: FOR_IN
23124: IFFALSE 23182
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23126: LD_VAR 0 1
23130: PPUSH
23131: LD_STRING M
23133: PUSH
23134: LD_VAR 0 6
23138: PUSH
23139: LD_INT 1
23141: ARRAY
23142: PUSH
23143: LD_VAR 0 6
23147: PUSH
23148: LD_INT 2
23150: ARRAY
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: PPUSH
23176: CALL_OW 447
23180: GO 23123
23182: POP
23183: POP
// end ;
23184: LD_VAR 0 5
23188: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23189: LD_EXP 81
23193: NOT
23194: IFFALSE 23244
23196: GO 23198
23198: DISABLE
// begin initHack := true ;
23199: LD_ADDR_EXP 81
23203: PUSH
23204: LD_INT 1
23206: ST_TO_ADDR
// hackTanks := [ ] ;
23207: LD_ADDR_EXP 82
23211: PUSH
23212: EMPTY
23213: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23214: LD_ADDR_EXP 83
23218: PUSH
23219: EMPTY
23220: ST_TO_ADDR
// hackLimit := 3 ;
23221: LD_ADDR_EXP 84
23225: PUSH
23226: LD_INT 3
23228: ST_TO_ADDR
// hackDist := 12 ;
23229: LD_ADDR_EXP 85
23233: PUSH
23234: LD_INT 12
23236: ST_TO_ADDR
// hackCounter := [ ] ;
23237: LD_ADDR_EXP 86
23241: PUSH
23242: EMPTY
23243: ST_TO_ADDR
// end ;
23244: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23245: LD_EXP 81
23249: PUSH
23250: LD_INT 34
23252: PUSH
23253: LD_EXP 89
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PPUSH
23262: CALL_OW 69
23266: AND
23267: IFFALSE 23522
23269: GO 23271
23271: DISABLE
23272: LD_INT 0
23274: PPUSH
23275: PPUSH
// begin enable ;
23276: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23277: LD_ADDR_VAR 0 1
23281: PUSH
23282: LD_INT 34
23284: PUSH
23285: LD_EXP 89
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PPUSH
23294: CALL_OW 69
23298: PUSH
23299: FOR_IN
23300: IFFALSE 23520
// begin if not i in hackTanks then
23302: LD_VAR 0 1
23306: PUSH
23307: LD_EXP 82
23311: IN
23312: NOT
23313: IFFALSE 23396
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23315: LD_ADDR_EXP 82
23319: PUSH
23320: LD_EXP 82
23324: PPUSH
23325: LD_EXP 82
23329: PUSH
23330: LD_INT 1
23332: PLUS
23333: PPUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 1
23343: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23344: LD_ADDR_EXP 83
23348: PUSH
23349: LD_EXP 83
23353: PPUSH
23354: LD_EXP 83
23358: PUSH
23359: LD_INT 1
23361: PLUS
23362: PPUSH
23363: EMPTY
23364: PPUSH
23365: CALL_OW 1
23369: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23370: LD_ADDR_EXP 86
23374: PUSH
23375: LD_EXP 86
23379: PPUSH
23380: LD_EXP 86
23384: PUSH
23385: LD_INT 1
23387: PLUS
23388: PPUSH
23389: EMPTY
23390: PPUSH
23391: CALL_OW 1
23395: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 302
23405: NOT
23406: IFFALSE 23419
// begin HackUnlinkAll ( i ) ;
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL 23525 0 1
// continue ;
23417: GO 23299
// end ; HackCheckCapturedStatus ( i ) ;
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL 23968 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23428: LD_ADDR_VAR 0 2
23432: PUSH
23433: LD_INT 81
23435: PUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 255
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 33
23452: PUSH
23453: LD_INT 3
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 91
23462: PUSH
23463: LD_VAR 0 1
23467: PUSH
23468: LD_EXP 85
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 50
23480: PUSH
23481: EMPTY
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// if not tmp then
23495: LD_VAR 0 2
23499: NOT
23500: IFFALSE 23504
// continue ;
23502: GO 23299
// HackLink ( i , tmp ) ;
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_VAR 0 2
23513: PPUSH
23514: CALL 23661 0 2
// end ;
23518: GO 23299
23520: POP
23521: POP
// end ;
23522: PPOPN 2
23524: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
// if not hack in hackTanks then
23530: LD_VAR 0 1
23534: PUSH
23535: LD_EXP 82
23539: IN
23540: NOT
23541: IFFALSE 23545
// exit ;
23543: GO 23656
// index := GetElementIndex ( hackTanks , hack ) ;
23545: LD_ADDR_VAR 0 4
23549: PUSH
23550: LD_EXP 82
23554: PPUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL 29212 0 2
23564: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23565: LD_EXP 83
23569: PUSH
23570: LD_VAR 0 4
23574: ARRAY
23575: IFFALSE 23656
// begin for i in hackTanksCaptured [ index ] do
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_EXP 83
23586: PUSH
23587: LD_VAR 0 4
23591: ARRAY
23592: PUSH
23593: FOR_IN
23594: IFFALSE 23620
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23596: LD_VAR 0 3
23600: PUSH
23601: LD_INT 1
23603: ARRAY
23604: PPUSH
23605: LD_VAR 0 3
23609: PUSH
23610: LD_INT 2
23612: ARRAY
23613: PPUSH
23614: CALL_OW 235
23618: GO 23593
23620: POP
23621: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23622: LD_ADDR_EXP 83
23626: PUSH
23627: LD_EXP 83
23631: PPUSH
23632: LD_VAR 0 4
23636: PPUSH
23637: EMPTY
23638: PPUSH
23639: CALL_OW 1
23643: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23644: LD_VAR 0 1
23648: PPUSH
23649: LD_INT 0
23651: PPUSH
23652: CALL_OW 505
// end ; end ;
23656: LD_VAR 0 2
23660: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23661: LD_INT 0
23663: PPUSH
23664: PPUSH
23665: PPUSH
// if not hack in hackTanks or not vehicles then
23666: LD_VAR 0 1
23670: PUSH
23671: LD_EXP 82
23675: IN
23676: NOT
23677: PUSH
23678: LD_VAR 0 2
23682: NOT
23683: OR
23684: IFFALSE 23688
// exit ;
23686: GO 23963
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_VAR 0 1
23697: PPUSH
23698: LD_VAR 0 2
23702: PPUSH
23703: LD_INT 1
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: CALL 29862 0 4
23713: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23714: LD_ADDR_VAR 0 5
23718: PUSH
23719: LD_EXP 82
23723: PPUSH
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL 29212 0 2
23733: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23734: LD_EXP 83
23738: PUSH
23739: LD_VAR 0 5
23743: ARRAY
23744: PUSH
23745: LD_EXP 84
23749: LESS
23750: IFFALSE 23939
// begin for i := 1 to vehicles do
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: DOUBLE
23758: LD_INT 1
23760: DEC
23761: ST_TO_ADDR
23762: LD_VAR 0 2
23766: PUSH
23767: FOR_TO
23768: IFFALSE 23937
// begin if hackTanksCaptured [ index ] = hackLimit then
23770: LD_EXP 83
23774: PUSH
23775: LD_VAR 0 5
23779: ARRAY
23780: PUSH
23781: LD_EXP 84
23785: EQUAL
23786: IFFALSE 23790
// break ;
23788: GO 23937
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23790: LD_ADDR_EXP 86
23794: PUSH
23795: LD_EXP 86
23799: PPUSH
23800: LD_VAR 0 5
23804: PPUSH
23805: LD_EXP 86
23809: PUSH
23810: LD_VAR 0 5
23814: ARRAY
23815: PUSH
23816: LD_INT 1
23818: PLUS
23819: PPUSH
23820: CALL_OW 1
23824: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23825: LD_ADDR_EXP 83
23829: PUSH
23830: LD_EXP 83
23834: PPUSH
23835: LD_VAR 0 5
23839: PUSH
23840: LD_EXP 83
23844: PUSH
23845: LD_VAR 0 5
23849: ARRAY
23850: PUSH
23851: LD_INT 1
23853: PLUS
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: LD_VAR 0 2
23863: PUSH
23864: LD_VAR 0 4
23868: ARRAY
23869: PUSH
23870: LD_VAR 0 2
23874: PUSH
23875: LD_VAR 0 4
23879: ARRAY
23880: PPUSH
23881: CALL_OW 255
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL 29427 0 3
23894: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23895: LD_VAR 0 2
23899: PUSH
23900: LD_VAR 0 4
23904: ARRAY
23905: PPUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 255
23915: PPUSH
23916: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23920: LD_VAR 0 2
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 141
// end ;
23935: GO 23767
23937: POP
23938: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23939: LD_VAR 0 1
23943: PPUSH
23944: LD_EXP 83
23948: PUSH
23949: LD_VAR 0 5
23953: ARRAY
23954: PUSH
23955: LD_INT 0
23957: PLUS
23958: PPUSH
23959: CALL_OW 505
// end ;
23963: LD_VAR 0 3
23967: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23968: LD_INT 0
23970: PPUSH
23971: PPUSH
23972: PPUSH
23973: PPUSH
// if not hack in hackTanks then
23974: LD_VAR 0 1
23978: PUSH
23979: LD_EXP 82
23983: IN
23984: NOT
23985: IFFALSE 23989
// exit ;
23987: GO 24229
// index := GetElementIndex ( hackTanks , hack ) ;
23989: LD_ADDR_VAR 0 4
23993: PUSH
23994: LD_EXP 82
23998: PPUSH
23999: LD_VAR 0 1
24003: PPUSH
24004: CALL 29212 0 2
24008: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24009: LD_ADDR_VAR 0 3
24013: PUSH
24014: DOUBLE
24015: LD_EXP 83
24019: PUSH
24020: LD_VAR 0 4
24024: ARRAY
24025: INC
24026: ST_TO_ADDR
24027: LD_INT 1
24029: PUSH
24030: FOR_DOWNTO
24031: IFFALSE 24203
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24033: LD_ADDR_VAR 0 5
24037: PUSH
24038: LD_EXP 83
24042: PUSH
24043: LD_VAR 0 4
24047: ARRAY
24048: PUSH
24049: LD_VAR 0 3
24053: ARRAY
24054: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24055: LD_VAR 0 5
24059: PUSH
24060: LD_INT 1
24062: ARRAY
24063: PPUSH
24064: CALL_OW 302
24068: NOT
24069: PUSH
24070: LD_VAR 0 5
24074: PUSH
24075: LD_INT 1
24077: ARRAY
24078: PPUSH
24079: CALL_OW 255
24083: PUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 255
24093: NONEQUAL
24094: OR
24095: IFFALSE 24201
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24097: LD_VAR 0 5
24101: PUSH
24102: LD_INT 1
24104: ARRAY
24105: PPUSH
24106: CALL_OW 305
24110: PUSH
24111: LD_VAR 0 5
24115: PUSH
24116: LD_INT 1
24118: ARRAY
24119: PPUSH
24120: CALL_OW 255
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 255
24134: EQUAL
24135: AND
24136: IFFALSE 24160
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24138: LD_VAR 0 5
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 5
24151: PUSH
24152: LD_INT 2
24154: ARRAY
24155: PPUSH
24156: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24160: LD_ADDR_EXP 83
24164: PUSH
24165: LD_EXP 83
24169: PPUSH
24170: LD_VAR 0 4
24174: PPUSH
24175: LD_EXP 83
24179: PUSH
24180: LD_VAR 0 4
24184: ARRAY
24185: PPUSH
24186: LD_VAR 0 3
24190: PPUSH
24191: CALL_OW 3
24195: PPUSH
24196: CALL_OW 1
24200: ST_TO_ADDR
// end ; end ;
24201: GO 24030
24203: POP
24204: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24205: LD_VAR 0 1
24209: PPUSH
24210: LD_EXP 83
24214: PUSH
24215: LD_VAR 0 4
24219: ARRAY
24220: PUSH
24221: LD_INT 0
24223: PLUS
24224: PPUSH
24225: CALL_OW 505
// end ;
24229: LD_VAR 0 2
24233: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24234: LD_INT 0
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
// if not hack in hackTanks then
24240: LD_VAR 0 1
24244: PUSH
24245: LD_EXP 82
24249: IN
24250: NOT
24251: IFFALSE 24255
// exit ;
24253: GO 24340
// index := GetElementIndex ( hackTanks , hack ) ;
24255: LD_ADDR_VAR 0 5
24259: PUSH
24260: LD_EXP 82
24264: PPUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL 29212 0 2
24274: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24275: LD_ADDR_VAR 0 4
24279: PUSH
24280: DOUBLE
24281: LD_INT 1
24283: DEC
24284: ST_TO_ADDR
24285: LD_EXP 83
24289: PUSH
24290: LD_VAR 0 5
24294: ARRAY
24295: PUSH
24296: FOR_TO
24297: IFFALSE 24338
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24299: LD_EXP 83
24303: PUSH
24304: LD_VAR 0 5
24308: ARRAY
24309: PUSH
24310: LD_VAR 0 4
24314: ARRAY
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: PUSH
24320: LD_VAR 0 2
24324: EQUAL
24325: IFFALSE 24336
// KillUnit ( vehicle ) ;
24327: LD_VAR 0 2
24331: PPUSH
24332: CALL_OW 66
24336: GO 24296
24338: POP
24339: POP
// end ; end_of_file
24340: LD_VAR 0 3
24344: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24345: LD_INT 0
24347: PPUSH
// ar_crane := 88 ;
24348: LD_ADDR_EXP 93
24352: PUSH
24353: LD_INT 88
24355: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24356: LD_ADDR_EXP 88
24360: PUSH
24361: LD_INT 89
24363: ST_TO_ADDR
// us_hack := 99 ;
24364: LD_ADDR_EXP 89
24368: PUSH
24369: LD_INT 99
24371: ST_TO_ADDR
// us_artillery := 97 ;
24372: LD_ADDR_EXP 90
24376: PUSH
24377: LD_INT 97
24379: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24380: LD_ADDR_EXP 91
24384: PUSH
24385: LD_INT 91
24387: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24388: LD_ADDR_EXP 92
24392: PUSH
24393: LD_INT 92
24395: ST_TO_ADDR
// ru_radar := 98 ;
24396: LD_ADDR_EXP 87
24400: PUSH
24401: LD_INT 98
24403: ST_TO_ADDR
// tech_Artillery := 80 ;
24404: LD_ADDR_EXP 94
24408: PUSH
24409: LD_INT 80
24411: ST_TO_ADDR
// tech_RadMat := 81 ;
24412: LD_ADDR_EXP 95
24416: PUSH
24417: LD_INT 81
24419: ST_TO_ADDR
// tech_BasicTools := 82 ;
24420: LD_ADDR_EXP 96
24424: PUSH
24425: LD_INT 82
24427: ST_TO_ADDR
// tech_Cargo := 83 ;
24428: LD_ADDR_EXP 97
24432: PUSH
24433: LD_INT 83
24435: ST_TO_ADDR
// tech_Track := 84 ;
24436: LD_ADDR_EXP 98
24440: PUSH
24441: LD_INT 84
24443: ST_TO_ADDR
// tech_Crane := 85 ;
24444: LD_ADDR_EXP 99
24448: PUSH
24449: LD_INT 85
24451: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24452: LD_ADDR_EXP 100
24456: PUSH
24457: LD_INT 86
24459: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24460: LD_ADDR_EXP 101
24464: PUSH
24465: LD_INT 87
24467: ST_TO_ADDR
// end ;
24468: LD_VAR 0 1
24472: RET
// every 1 do
24473: GO 24475
24475: DISABLE
// InitGlobalVariables ; end_of_file
24476: CALL 24345 0 0
24480: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
// if exist_mode then
24485: LD_VAR 0 2
24489: IFFALSE 24514
// unit := CreateCharacter ( prefix & ident ) else
24491: LD_ADDR_VAR 0 5
24495: PUSH
24496: LD_VAR 0 3
24500: PUSH
24501: LD_VAR 0 1
24505: STR
24506: PPUSH
24507: CALL_OW 34
24511: ST_TO_ADDR
24512: GO 24529
// unit := NewCharacter ( ident ) ;
24514: LD_ADDR_VAR 0 5
24518: PUSH
24519: LD_VAR 0 1
24523: PPUSH
24524: CALL_OW 25
24528: ST_TO_ADDR
// result := unit ;
24529: LD_ADDR_VAR 0 4
24533: PUSH
24534: LD_VAR 0 5
24538: ST_TO_ADDR
// end ;
24539: LD_VAR 0 4
24543: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24544: LD_INT 0
24546: PPUSH
24547: PPUSH
// if not side or not nation then
24548: LD_VAR 0 1
24552: NOT
24553: PUSH
24554: LD_VAR 0 2
24558: NOT
24559: OR
24560: IFFALSE 24564
// exit ;
24562: GO 25328
// case nation of nation_american :
24564: LD_VAR 0 2
24568: PUSH
24569: LD_INT 1
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24791
24577: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24578: LD_ADDR_VAR 0 4
24582: PUSH
24583: LD_INT 35
24585: PUSH
24586: LD_INT 45
24588: PUSH
24589: LD_INT 46
24591: PUSH
24592: LD_INT 47
24594: PUSH
24595: LD_INT 82
24597: PUSH
24598: LD_INT 83
24600: PUSH
24601: LD_INT 84
24603: PUSH
24604: LD_INT 85
24606: PUSH
24607: LD_INT 86
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 6
24618: PUSH
24619: LD_INT 15
24621: PUSH
24622: LD_INT 16
24624: PUSH
24625: LD_INT 7
24627: PUSH
24628: LD_INT 12
24630: PUSH
24631: LD_INT 13
24633: PUSH
24634: LD_INT 10
24636: PUSH
24637: LD_INT 14
24639: PUSH
24640: LD_INT 20
24642: PUSH
24643: LD_INT 21
24645: PUSH
24646: LD_INT 22
24648: PUSH
24649: LD_INT 25
24651: PUSH
24652: LD_INT 32
24654: PUSH
24655: LD_INT 27
24657: PUSH
24658: LD_INT 36
24660: PUSH
24661: LD_INT 69
24663: PUSH
24664: LD_INT 39
24666: PUSH
24667: LD_INT 34
24669: PUSH
24670: LD_INT 40
24672: PUSH
24673: LD_INT 48
24675: PUSH
24676: LD_INT 49
24678: PUSH
24679: LD_INT 50
24681: PUSH
24682: LD_INT 51
24684: PUSH
24685: LD_INT 52
24687: PUSH
24688: LD_INT 53
24690: PUSH
24691: LD_INT 54
24693: PUSH
24694: LD_INT 55
24696: PUSH
24697: LD_INT 56
24699: PUSH
24700: LD_INT 57
24702: PUSH
24703: LD_INT 58
24705: PUSH
24706: LD_INT 59
24708: PUSH
24709: LD_INT 60
24711: PUSH
24712: LD_INT 61
24714: PUSH
24715: LD_INT 62
24717: PUSH
24718: LD_INT 80
24720: PUSH
24721: LD_INT 82
24723: PUSH
24724: LD_INT 83
24726: PUSH
24727: LD_INT 84
24729: PUSH
24730: LD_INT 85
24732: PUSH
24733: LD_INT 86
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: ST_TO_ADDR
24789: GO 25252
24791: LD_INT 2
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 25021
24799: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24800: LD_ADDR_VAR 0 4
24804: PUSH
24805: LD_INT 35
24807: PUSH
24808: LD_INT 45
24810: PUSH
24811: LD_INT 46
24813: PUSH
24814: LD_INT 47
24816: PUSH
24817: LD_INT 82
24819: PUSH
24820: LD_INT 83
24822: PUSH
24823: LD_INT 84
24825: PUSH
24826: LD_INT 85
24828: PUSH
24829: LD_INT 87
24831: PUSH
24832: LD_INT 70
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 11
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: LD_INT 4
24846: PUSH
24847: LD_INT 5
24849: PUSH
24850: LD_INT 6
24852: PUSH
24853: LD_INT 15
24855: PUSH
24856: LD_INT 18
24858: PUSH
24859: LD_INT 7
24861: PUSH
24862: LD_INT 17
24864: PUSH
24865: LD_INT 8
24867: PUSH
24868: LD_INT 20
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 22
24876: PUSH
24877: LD_INT 72
24879: PUSH
24880: LD_INT 26
24882: PUSH
24883: LD_INT 69
24885: PUSH
24886: LD_INT 39
24888: PUSH
24889: LD_INT 40
24891: PUSH
24892: LD_INT 41
24894: PUSH
24895: LD_INT 42
24897: PUSH
24898: LD_INT 43
24900: PUSH
24901: LD_INT 48
24903: PUSH
24904: LD_INT 49
24906: PUSH
24907: LD_INT 50
24909: PUSH
24910: LD_INT 51
24912: PUSH
24913: LD_INT 52
24915: PUSH
24916: LD_INT 53
24918: PUSH
24919: LD_INT 54
24921: PUSH
24922: LD_INT 55
24924: PUSH
24925: LD_INT 56
24927: PUSH
24928: LD_INT 60
24930: PUSH
24931: LD_INT 61
24933: PUSH
24934: LD_INT 62
24936: PUSH
24937: LD_INT 66
24939: PUSH
24940: LD_INT 67
24942: PUSH
24943: LD_INT 68
24945: PUSH
24946: LD_INT 81
24948: PUSH
24949: LD_INT 82
24951: PUSH
24952: LD_INT 83
24954: PUSH
24955: LD_INT 84
24957: PUSH
24958: LD_INT 85
24960: PUSH
24961: LD_INT 87
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25252
25021: LD_INT 3
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25251
25029: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25030: LD_ADDR_VAR 0 4
25034: PUSH
25035: LD_INT 46
25037: PUSH
25038: LD_INT 47
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 82
25049: PUSH
25050: LD_INT 83
25052: PUSH
25053: LD_INT 84
25055: PUSH
25056: LD_INT 85
25058: PUSH
25059: LD_INT 86
25061: PUSH
25062: LD_INT 11
25064: PUSH
25065: LD_INT 9
25067: PUSH
25068: LD_INT 20
25070: PUSH
25071: LD_INT 19
25073: PUSH
25074: LD_INT 21
25076: PUSH
25077: LD_INT 24
25079: PUSH
25080: LD_INT 22
25082: PUSH
25083: LD_INT 25
25085: PUSH
25086: LD_INT 28
25088: PUSH
25089: LD_INT 29
25091: PUSH
25092: LD_INT 30
25094: PUSH
25095: LD_INT 31
25097: PUSH
25098: LD_INT 37
25100: PUSH
25101: LD_INT 38
25103: PUSH
25104: LD_INT 32
25106: PUSH
25107: LD_INT 27
25109: PUSH
25110: LD_INT 33
25112: PUSH
25113: LD_INT 69
25115: PUSH
25116: LD_INT 39
25118: PUSH
25119: LD_INT 34
25121: PUSH
25122: LD_INT 40
25124: PUSH
25125: LD_INT 71
25127: PUSH
25128: LD_INT 23
25130: PUSH
25131: LD_INT 44
25133: PUSH
25134: LD_INT 48
25136: PUSH
25137: LD_INT 49
25139: PUSH
25140: LD_INT 50
25142: PUSH
25143: LD_INT 51
25145: PUSH
25146: LD_INT 52
25148: PUSH
25149: LD_INT 53
25151: PUSH
25152: LD_INT 54
25154: PUSH
25155: LD_INT 55
25157: PUSH
25158: LD_INT 56
25160: PUSH
25161: LD_INT 57
25163: PUSH
25164: LD_INT 58
25166: PUSH
25167: LD_INT 59
25169: PUSH
25170: LD_INT 63
25172: PUSH
25173: LD_INT 64
25175: PUSH
25176: LD_INT 65
25178: PUSH
25179: LD_INT 82
25181: PUSH
25182: LD_INT 83
25184: PUSH
25185: LD_INT 84
25187: PUSH
25188: LD_INT 85
25190: PUSH
25191: LD_INT 86
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: ST_TO_ADDR
25249: GO 25252
25251: POP
// if state > - 1 and state < 3 then
25252: LD_VAR 0 3
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: GREATER
25261: PUSH
25262: LD_VAR 0 3
25266: PUSH
25267: LD_INT 3
25269: LESS
25270: AND
25271: IFFALSE 25328
// for i in result do
25273: LD_ADDR_VAR 0 5
25277: PUSH
25278: LD_VAR 0 4
25282: PUSH
25283: FOR_IN
25284: IFFALSE 25326
// if GetTech ( i , side ) <> state then
25286: LD_VAR 0 5
25290: PPUSH
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 321
25300: PUSH
25301: LD_VAR 0 3
25305: NONEQUAL
25306: IFFALSE 25324
// result := result diff i ;
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_VAR 0 4
25317: PUSH
25318: LD_VAR 0 5
25322: DIFF
25323: ST_TO_ADDR
25324: GO 25283
25326: POP
25327: POP
// end ;
25328: LD_VAR 0 4
25332: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
25337: PPUSH
// result := true ;
25338: LD_ADDR_VAR 0 3
25342: PUSH
25343: LD_INT 1
25345: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25346: LD_ADDR_VAR 0 5
25350: PUSH
25351: LD_VAR 0 2
25355: PPUSH
25356: CALL_OW 480
25360: ST_TO_ADDR
// if not tmp then
25361: LD_VAR 0 5
25365: NOT
25366: IFFALSE 25370
// exit ;
25368: GO 25419
// for i in tmp do
25370: LD_ADDR_VAR 0 4
25374: PUSH
25375: LD_VAR 0 5
25379: PUSH
25380: FOR_IN
25381: IFFALSE 25417
// if GetTech ( i , side ) <> state_researched then
25383: LD_VAR 0 4
25387: PPUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 321
25397: PUSH
25398: LD_INT 2
25400: NONEQUAL
25401: IFFALSE 25415
// begin result := false ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 0
25410: ST_TO_ADDR
// exit ;
25411: POP
25412: POP
25413: GO 25419
// end ;
25415: GO 25380
25417: POP
25418: POP
// end ;
25419: LD_VAR 0 3
25423: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25424: LD_INT 0
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
25431: PPUSH
25432: PPUSH
25433: PPUSH
25434: PPUSH
25435: PPUSH
25436: PPUSH
25437: PPUSH
25438: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25439: LD_VAR 0 1
25443: NOT
25444: PUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 257
25454: PUSH
25455: LD_INT 9
25457: NONEQUAL
25458: OR
25459: IFFALSE 25463
// exit ;
25461: GO 26036
// side := GetSide ( unit ) ;
25463: LD_ADDR_VAR 0 9
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 255
25477: ST_TO_ADDR
// tech_space := tech_spacanom ;
25478: LD_ADDR_VAR 0 12
25482: PUSH
25483: LD_INT 29
25485: ST_TO_ADDR
// tech_time := tech_taurad ;
25486: LD_ADDR_VAR 0 13
25490: PUSH
25491: LD_INT 28
25493: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25494: LD_ADDR_VAR 0 11
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 310
25508: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25509: LD_VAR 0 11
25513: PPUSH
25514: CALL_OW 247
25518: PUSH
25519: LD_INT 2
25521: EQUAL
25522: IFFALSE 25526
// exit ;
25524: GO 26036
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25526: LD_ADDR_VAR 0 8
25530: PUSH
25531: LD_INT 81
25533: PUSH
25534: LD_VAR 0 9
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 3
25545: PUSH
25546: LD_INT 21
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PPUSH
25564: CALL_OW 69
25568: ST_TO_ADDR
// if not tmp then
25569: LD_VAR 0 8
25573: NOT
25574: IFFALSE 25578
// exit ;
25576: GO 26036
// if in_unit then
25578: LD_VAR 0 11
25582: IFFALSE 25606
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25584: LD_ADDR_VAR 0 10
25588: PUSH
25589: LD_VAR 0 8
25593: PPUSH
25594: LD_VAR 0 11
25598: PPUSH
25599: CALL_OW 74
25603: ST_TO_ADDR
25604: GO 25626
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25606: LD_ADDR_VAR 0 10
25610: PUSH
25611: LD_VAR 0 8
25615: PPUSH
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 74
25625: ST_TO_ADDR
// if not enemy then
25626: LD_VAR 0 10
25630: NOT
25631: IFFALSE 25635
// exit ;
25633: GO 26036
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25635: LD_VAR 0 11
25639: PUSH
25640: LD_VAR 0 11
25644: PPUSH
25645: LD_VAR 0 10
25649: PPUSH
25650: CALL_OW 296
25654: PUSH
25655: LD_INT 13
25657: GREATER
25658: AND
25659: PUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_VAR 0 10
25669: PPUSH
25670: CALL_OW 296
25674: PUSH
25675: LD_INT 12
25677: GREATER
25678: OR
25679: IFFALSE 25683
// exit ;
25681: GO 26036
// missile := [ 1 ] ;
25683: LD_ADDR_VAR 0 14
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25694: LD_VAR 0 9
25698: PPUSH
25699: LD_VAR 0 12
25703: PPUSH
25704: CALL_OW 325
25708: IFFALSE 25737
// missile := Insert ( missile , missile + 1 , 2 ) ;
25710: LD_ADDR_VAR 0 14
25714: PUSH
25715: LD_VAR 0 14
25719: PPUSH
25720: LD_VAR 0 14
25724: PUSH
25725: LD_INT 1
25727: PLUS
25728: PPUSH
25729: LD_INT 2
25731: PPUSH
25732: CALL_OW 2
25736: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25737: LD_VAR 0 9
25741: PPUSH
25742: LD_VAR 0 13
25746: PPUSH
25747: CALL_OW 325
25751: PUSH
25752: LD_VAR 0 10
25756: PPUSH
25757: CALL_OW 255
25761: PPUSH
25762: LD_VAR 0 13
25766: PPUSH
25767: CALL_OW 325
25771: NOT
25772: AND
25773: IFFALSE 25802
// missile := Insert ( missile , missile + 1 , 3 ) ;
25775: LD_ADDR_VAR 0 14
25779: PUSH
25780: LD_VAR 0 14
25784: PPUSH
25785: LD_VAR 0 14
25789: PUSH
25790: LD_INT 1
25792: PLUS
25793: PPUSH
25794: LD_INT 3
25796: PPUSH
25797: CALL_OW 2
25801: ST_TO_ADDR
// if missile < 2 then
25802: LD_VAR 0 14
25806: PUSH
25807: LD_INT 2
25809: LESS
25810: IFFALSE 25814
// exit ;
25812: GO 26036
// x := GetX ( enemy ) ;
25814: LD_ADDR_VAR 0 4
25818: PUSH
25819: LD_VAR 0 10
25823: PPUSH
25824: CALL_OW 250
25828: ST_TO_ADDR
// y := GetY ( enemy ) ;
25829: LD_ADDR_VAR 0 5
25833: PUSH
25834: LD_VAR 0 10
25838: PPUSH
25839: CALL_OW 251
25843: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25844: LD_ADDR_VAR 0 6
25848: PUSH
25849: LD_VAR 0 4
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PPUSH
25858: LD_INT 1
25860: PPUSH
25861: CALL_OW 12
25865: PLUS
25866: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: LD_VAR 0 5
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: CALL_OW 12
25888: PLUS
25889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25890: LD_VAR 0 6
25894: PPUSH
25895: LD_VAR 0 7
25899: PPUSH
25900: CALL_OW 488
25904: NOT
25905: IFFALSE 25927
// begin _x := x ;
25907: LD_ADDR_VAR 0 6
25911: PUSH
25912: LD_VAR 0 4
25916: ST_TO_ADDR
// _y := y ;
25917: LD_ADDR_VAR 0 7
25921: PUSH
25922: LD_VAR 0 5
25926: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25927: LD_ADDR_VAR 0 3
25931: PUSH
25932: LD_INT 1
25934: PPUSH
25935: LD_VAR 0 14
25939: PPUSH
25940: CALL_OW 12
25944: ST_TO_ADDR
// case i of 1 :
25945: LD_VAR 0 3
25949: PUSH
25950: LD_INT 1
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 25975
25958: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25959: LD_VAR 0 1
25963: PPUSH
25964: LD_VAR 0 10
25968: PPUSH
25969: CALL_OW 115
25973: GO 26036
25975: LD_INT 2
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 26005
25983: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25984: LD_VAR 0 1
25988: PPUSH
25989: LD_VAR 0 6
25993: PPUSH
25994: LD_VAR 0 7
25998: PPUSH
25999: CALL_OW 153
26003: GO 26036
26005: LD_INT 3
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26035
26013: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26014: LD_VAR 0 1
26018: PPUSH
26019: LD_VAR 0 6
26023: PPUSH
26024: LD_VAR 0 7
26028: PPUSH
26029: CALL_OW 154
26033: GO 26036
26035: POP
// end ;
26036: LD_VAR 0 2
26040: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26041: LD_INT 0
26043: PPUSH
26044: PPUSH
26045: PPUSH
26046: PPUSH
26047: PPUSH
26048: PPUSH
// if not unit or not building then
26049: LD_VAR 0 1
26053: NOT
26054: PUSH
26055: LD_VAR 0 2
26059: NOT
26060: OR
26061: IFFALSE 26065
// exit ;
26063: GO 26223
// x := GetX ( building ) ;
26065: LD_ADDR_VAR 0 5
26069: PUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: CALL_OW 250
26079: ST_TO_ADDR
// y := GetY ( building ) ;
26080: LD_ADDR_VAR 0 6
26084: PUSH
26085: LD_VAR 0 2
26089: PPUSH
26090: CALL_OW 251
26094: ST_TO_ADDR
// for i = 0 to 5 do
26095: LD_ADDR_VAR 0 4
26099: PUSH
26100: DOUBLE
26101: LD_INT 0
26103: DEC
26104: ST_TO_ADDR
26105: LD_INT 5
26107: PUSH
26108: FOR_TO
26109: IFFALSE 26221
// begin _x := ShiftX ( x , i , 3 ) ;
26111: LD_ADDR_VAR 0 7
26115: PUSH
26116: LD_VAR 0 5
26120: PPUSH
26121: LD_VAR 0 4
26125: PPUSH
26126: LD_INT 3
26128: PPUSH
26129: CALL_OW 272
26133: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26134: LD_ADDR_VAR 0 8
26138: PUSH
26139: LD_VAR 0 6
26143: PPUSH
26144: LD_VAR 0 4
26148: PPUSH
26149: LD_INT 3
26151: PPUSH
26152: CALL_OW 273
26156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26157: LD_VAR 0 7
26161: PPUSH
26162: LD_VAR 0 8
26166: PPUSH
26167: CALL_OW 488
26171: NOT
26172: IFFALSE 26176
// continue ;
26174: GO 26108
// if HexInfo ( _x , _y ) = 0 then
26176: LD_VAR 0 7
26180: PPUSH
26181: LD_VAR 0 8
26185: PPUSH
26186: CALL_OW 428
26190: PUSH
26191: LD_INT 0
26193: EQUAL
26194: IFFALSE 26219
// begin ComMoveXY ( unit , _x , _y ) ;
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_VAR 0 7
26205: PPUSH
26206: LD_VAR 0 8
26210: PPUSH
26211: CALL_OW 111
// exit ;
26215: POP
26216: POP
26217: GO 26223
// end ; end ;
26219: GO 26108
26221: POP
26222: POP
// end ;
26223: LD_VAR 0 3
26227: RET
// export function ScanBase ( side , base_area ) ; begin
26228: LD_INT 0
26230: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 2
26240: PPUSH
26241: LD_INT 81
26243: PUSH
26244: LD_VAR 0 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 70
26257: ST_TO_ADDR
// end ;
26258: LD_VAR 0 3
26262: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26263: LD_INT 0
26265: PPUSH
26266: PPUSH
26267: PPUSH
26268: PPUSH
// result := false ;
26269: LD_ADDR_VAR 0 2
26273: PUSH
26274: LD_INT 0
26276: ST_TO_ADDR
// side := GetSide ( unit ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 255
26291: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26292: LD_ADDR_VAR 0 4
26296: PUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 248
26306: ST_TO_ADDR
// case nat of 1 :
26307: LD_VAR 0 4
26311: PUSH
26312: LD_INT 1
26314: DOUBLE
26315: EQUAL
26316: IFTRUE 26320
26318: GO 26331
26320: POP
// tech := tech_lassight ; 2 :
26321: LD_ADDR_VAR 0 5
26325: PUSH
26326: LD_INT 12
26328: ST_TO_ADDR
26329: GO 26370
26331: LD_INT 2
26333: DOUBLE
26334: EQUAL
26335: IFTRUE 26339
26337: GO 26350
26339: POP
// tech := tech_mortar ; 3 :
26340: LD_ADDR_VAR 0 5
26344: PUSH
26345: LD_INT 41
26347: ST_TO_ADDR
26348: GO 26370
26350: LD_INT 3
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26369
26358: POP
// tech := tech_bazooka ; end ;
26359: LD_ADDR_VAR 0 5
26363: PUSH
26364: LD_INT 44
26366: ST_TO_ADDR
26367: GO 26370
26369: POP
// if Researched ( side , tech ) then
26370: LD_VAR 0 3
26374: PPUSH
26375: LD_VAR 0 5
26379: PPUSH
26380: CALL_OW 325
26384: IFFALSE 26411
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26386: LD_ADDR_VAR 0 2
26390: PUSH
26391: LD_INT 5
26393: PUSH
26394: LD_INT 8
26396: PUSH
26397: LD_INT 9
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: LD_VAR 0 4
26409: ARRAY
26410: ST_TO_ADDR
// end ;
26411: LD_VAR 0 2
26415: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26416: LD_INT 0
26418: PPUSH
26419: PPUSH
26420: PPUSH
// if not mines then
26421: LD_VAR 0 2
26425: NOT
26426: IFFALSE 26430
// exit ;
26428: GO 26574
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26430: LD_ADDR_VAR 0 5
26434: PUSH
26435: LD_INT 81
26437: PUSH
26438: LD_VAR 0 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 3
26449: PUSH
26450: LD_INT 21
26452: PUSH
26453: LD_INT 3
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// for i in mines do
26473: LD_ADDR_VAR 0 4
26477: PUSH
26478: LD_VAR 0 2
26482: PUSH
26483: FOR_IN
26484: IFFALSE 26572
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26486: LD_VAR 0 4
26490: PUSH
26491: LD_INT 1
26493: ARRAY
26494: PPUSH
26495: LD_VAR 0 4
26499: PUSH
26500: LD_INT 2
26502: ARRAY
26503: PPUSH
26504: CALL_OW 458
26508: NOT
26509: IFFALSE 26513
// continue ;
26511: GO 26483
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26513: LD_VAR 0 4
26517: PUSH
26518: LD_INT 1
26520: ARRAY
26521: PPUSH
26522: LD_VAR 0 4
26526: PUSH
26527: LD_INT 2
26529: ARRAY
26530: PPUSH
26531: CALL_OW 428
26535: PUSH
26536: LD_VAR 0 5
26540: IN
26541: IFFALSE 26570
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26543: LD_VAR 0 4
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PPUSH
26552: LD_VAR 0 4
26556: PUSH
26557: LD_INT 2
26559: ARRAY
26560: PPUSH
26561: LD_VAR 0 1
26565: PPUSH
26566: CALL_OW 456
// end ;
26570: GO 26483
26572: POP
26573: POP
// end ;
26574: LD_VAR 0 3
26578: RET
// export function Count ( array ) ; var i ; begin
26579: LD_INT 0
26581: PPUSH
26582: PPUSH
// result := 0 ;
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_INT 0
26590: ST_TO_ADDR
// for i in array do
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_VAR 0 1
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26626
// if i then
26604: LD_VAR 0 3
26608: IFFALSE 26624
// result := result + 1 ;
26610: LD_ADDR_VAR 0 2
26614: PUSH
26615: LD_VAR 0 2
26619: PUSH
26620: LD_INT 1
26622: PLUS
26623: ST_TO_ADDR
26624: GO 26601
26626: POP
26627: POP
// end ;
26628: LD_VAR 0 2
26632: RET
// export function IsEmpty ( building ) ; begin
26633: LD_INT 0
26635: PPUSH
// if not building then
26636: LD_VAR 0 1
26640: NOT
26641: IFFALSE 26645
// exit ;
26643: GO 26688
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26645: LD_ADDR_VAR 0 2
26649: PUSH
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 22
26657: PUSH
26658: LD_VAR 0 1
26662: PPUSH
26663: CALL_OW 255
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 58
26674: PUSH
26675: EMPTY
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 69
26686: IN
26687: ST_TO_ADDR
// end ;
26688: LD_VAR 0 2
26692: RET
// export function IsNotFull ( building ) ; begin
26693: LD_INT 0
26695: PPUSH
// if not building then
26696: LD_VAR 0 1
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26724
// result := UnitsInside ( building ) < 6 ;
26705: LD_ADDR_VAR 0 2
26709: PUSH
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 313
26719: PUSH
26720: LD_INT 6
26722: LESS
26723: ST_TO_ADDR
// end ;
26724: LD_VAR 0 2
26728: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26729: LD_INT 0
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
// tmp := [ ] ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: EMPTY
26741: ST_TO_ADDR
// list := [ ] ;
26742: LD_ADDR_VAR 0 5
26746: PUSH
26747: EMPTY
26748: ST_TO_ADDR
// for i = 16 to 25 do
26749: LD_ADDR_VAR 0 4
26753: PUSH
26754: DOUBLE
26755: LD_INT 16
26757: DEC
26758: ST_TO_ADDR
26759: LD_INT 25
26761: PUSH
26762: FOR_TO
26763: IFFALSE 26836
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: LD_INT 22
26777: PUSH
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL_OW 255
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 91
26794: PUSH
26795: LD_VAR 0 1
26799: PUSH
26800: LD_INT 6
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 30
26810: PUSH
26811: LD_VAR 0 4
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: ADD
26833: ST_TO_ADDR
26834: GO 26762
26836: POP
26837: POP
// for i = 1 to tmp do
26838: LD_ADDR_VAR 0 4
26842: PUSH
26843: DOUBLE
26844: LD_INT 1
26846: DEC
26847: ST_TO_ADDR
26848: LD_VAR 0 3
26852: PUSH
26853: FOR_TO
26854: IFFALSE 26942
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26856: LD_ADDR_VAR 0 5
26860: PUSH
26861: LD_VAR 0 5
26865: PUSH
26866: LD_VAR 0 3
26870: PUSH
26871: LD_VAR 0 4
26875: ARRAY
26876: PPUSH
26877: CALL_OW 266
26881: PUSH
26882: LD_VAR 0 3
26886: PUSH
26887: LD_VAR 0 4
26891: ARRAY
26892: PPUSH
26893: CALL_OW 250
26897: PUSH
26898: LD_VAR 0 3
26902: PUSH
26903: LD_VAR 0 4
26907: ARRAY
26908: PPUSH
26909: CALL_OW 251
26913: PUSH
26914: LD_VAR 0 3
26918: PUSH
26919: LD_VAR 0 4
26923: ARRAY
26924: PPUSH
26925: CALL_OW 254
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: ADD
26939: ST_TO_ADDR
26940: GO 26853
26942: POP
26943: POP
// result := list ;
26944: LD_ADDR_VAR 0 2
26948: PUSH
26949: LD_VAR 0 5
26953: ST_TO_ADDR
// end ;
26954: LD_VAR 0 2
26958: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
// if not factory then
26968: LD_VAR 0 1
26972: NOT
26973: IFFALSE 26977
// exit ;
26975: GO 27570
// if control = control_apeman then
26977: LD_VAR 0 4
26981: PUSH
26982: LD_INT 5
26984: EQUAL
26985: IFFALSE 27094
// begin tmp := UnitsInside ( factory ) ;
26987: LD_ADDR_VAR 0 8
26991: PUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 313
27001: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27002: LD_VAR 0 8
27006: PPUSH
27007: LD_INT 25
27009: PUSH
27010: LD_INT 12
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 72
27021: NOT
27022: IFFALSE 27032
// control := control_manual ;
27024: LD_ADDR_VAR 0 4
27028: PUSH
27029: LD_INT 1
27031: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27032: LD_ADDR_VAR 0 8
27036: PUSH
27037: LD_VAR 0 1
27041: PPUSH
27042: CALL 26729 0 1
27046: ST_TO_ADDR
// if tmp then
27047: LD_VAR 0 8
27051: IFFALSE 27094
// begin for i in tmp do
27053: LD_ADDR_VAR 0 7
27057: PUSH
27058: LD_VAR 0 8
27062: PUSH
27063: FOR_IN
27064: IFFALSE 27092
// if i [ 1 ] = b_ext_radio then
27066: LD_VAR 0 7
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PUSH
27075: LD_INT 22
27077: EQUAL
27078: IFFALSE 27090
// begin control := control_remote ;
27080: LD_ADDR_VAR 0 4
27084: PUSH
27085: LD_INT 2
27087: ST_TO_ADDR
// break ;
27088: GO 27092
// end ;
27090: GO 27063
27092: POP
27093: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27094: LD_VAR 0 1
27098: PPUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: LD_VAR 0 3
27108: PPUSH
27109: LD_VAR 0 4
27113: PPUSH
27114: LD_VAR 0 5
27118: PPUSH
27119: CALL_OW 448
27123: IFFALSE 27158
// begin result := [ chassis , engine , control , weapon ] ;
27125: LD_ADDR_VAR 0 6
27129: PUSH
27130: LD_VAR 0 2
27134: PUSH
27135: LD_VAR 0 3
27139: PUSH
27140: LD_VAR 0 4
27144: PUSH
27145: LD_VAR 0 5
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// exit ;
27156: GO 27570
// end ; _chassis := AvailableChassisList ( factory ) ;
27158: LD_ADDR_VAR 0 9
27162: PUSH
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 475
27172: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27173: LD_ADDR_VAR 0 11
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 476
27187: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27188: LD_ADDR_VAR 0 12
27192: PUSH
27193: LD_VAR 0 1
27197: PPUSH
27198: CALL_OW 477
27202: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27203: LD_ADDR_VAR 0 10
27207: PUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL_OW 478
27217: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27218: LD_VAR 0 9
27222: NOT
27223: PUSH
27224: LD_VAR 0 11
27228: NOT
27229: OR
27230: PUSH
27231: LD_VAR 0 12
27235: NOT
27236: OR
27237: PUSH
27238: LD_VAR 0 10
27242: NOT
27243: OR
27244: IFFALSE 27279
// begin result := [ chassis , engine , control , weapon ] ;
27246: LD_ADDR_VAR 0 6
27250: PUSH
27251: LD_VAR 0 2
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: LD_VAR 0 4
27265: PUSH
27266: LD_VAR 0 5
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
// exit ;
27277: GO 27570
// end ; if not chassis in _chassis then
27279: LD_VAR 0 2
27283: PUSH
27284: LD_VAR 0 9
27288: IN
27289: NOT
27290: IFFALSE 27316
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27292: LD_ADDR_VAR 0 2
27296: PUSH
27297: LD_VAR 0 9
27301: PUSH
27302: LD_INT 1
27304: PPUSH
27305: LD_VAR 0 9
27309: PPUSH
27310: CALL_OW 12
27314: ARRAY
27315: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_VAR 0 3
27325: PPUSH
27326: CALL 27575 0 2
27330: NOT
27331: IFFALSE 27390
// repeat engine := _engine [ 1 ] ;
27333: LD_ADDR_VAR 0 3
27337: PUSH
27338: LD_VAR 0 11
27342: PUSH
27343: LD_INT 1
27345: ARRAY
27346: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27347: LD_ADDR_VAR 0 11
27351: PUSH
27352: LD_VAR 0 11
27356: PPUSH
27357: LD_INT 1
27359: PPUSH
27360: CALL_OW 3
27364: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27365: LD_VAR 0 2
27369: PPUSH
27370: LD_VAR 0 3
27374: PPUSH
27375: CALL 27575 0 2
27379: PUSH
27380: LD_VAR 0 11
27384: PUSH
27385: EMPTY
27386: EQUAL
27387: OR
27388: IFFALSE 27333
// if not control in _control then
27390: LD_VAR 0 4
27394: PUSH
27395: LD_VAR 0 12
27399: IN
27400: NOT
27401: IFFALSE 27427
// control := _control [ rand ( 1 , _control ) ] ;
27403: LD_ADDR_VAR 0 4
27407: PUSH
27408: LD_VAR 0 12
27412: PUSH
27413: LD_INT 1
27415: PPUSH
27416: LD_VAR 0 12
27420: PPUSH
27421: CALL_OW 12
27425: ARRAY
27426: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27427: LD_VAR 0 2
27431: PPUSH
27432: LD_VAR 0 5
27436: PPUSH
27437: CALL 27795 0 2
27441: NOT
27442: IFFALSE 27501
// repeat weapon := _weapon [ 1 ] ;
27444: LD_ADDR_VAR 0 5
27448: PUSH
27449: LD_VAR 0 10
27453: PUSH
27454: LD_INT 1
27456: ARRAY
27457: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27458: LD_ADDR_VAR 0 10
27462: PUSH
27463: LD_VAR 0 10
27467: PPUSH
27468: LD_INT 1
27470: PPUSH
27471: CALL_OW 3
27475: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_VAR 0 5
27485: PPUSH
27486: CALL 27795 0 2
27490: PUSH
27491: LD_VAR 0 10
27495: PUSH
27496: EMPTY
27497: EQUAL
27498: OR
27499: IFFALSE 27444
// result := [ ] ;
27501: LD_ADDR_VAR 0 6
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 3
27522: PPUSH
27523: LD_VAR 0 4
27527: PPUSH
27528: LD_VAR 0 5
27532: PPUSH
27533: CALL_OW 448
27537: IFFALSE 27570
// result := [ chassis , engine , control , weapon ] ;
27539: LD_ADDR_VAR 0 6
27543: PUSH
27544: LD_VAR 0 2
27548: PUSH
27549: LD_VAR 0 3
27553: PUSH
27554: LD_VAR 0 4
27558: PUSH
27559: LD_VAR 0 5
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// end ;
27570: LD_VAR 0 6
27574: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27575: LD_INT 0
27577: PPUSH
// if not chassis or not engine then
27578: LD_VAR 0 1
27582: NOT
27583: PUSH
27584: LD_VAR 0 2
27588: NOT
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 27790
// case engine of engine_solar :
27594: LD_VAR 0 2
27598: PUSH
27599: LD_INT 2
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27645
27607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27608: LD_ADDR_VAR 0 3
27612: PUSH
27613: LD_INT 11
27615: PUSH
27616: LD_INT 12
27618: PUSH
27619: LD_INT 13
27621: PUSH
27622: LD_INT 14
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
27643: GO 27774
27645: LD_INT 1
27647: DOUBLE
27648: EQUAL
27649: IFTRUE 27653
27651: GO 27715
27653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_INT 11
27661: PUSH
27662: LD_INT 12
27664: PUSH
27665: LD_INT 13
27667: PUSH
27668: LD_INT 14
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: LD_INT 5
27685: PUSH
27686: LD_INT 21
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 22
27694: PUSH
27695: LD_INT 24
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
27713: GO 27774
27715: LD_INT 3
27717: DOUBLE
27718: EQUAL
27719: IFTRUE 27723
27721: GO 27773
27723: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27724: LD_ADDR_VAR 0 3
27728: PUSH
27729: LD_INT 13
27731: PUSH
27732: LD_INT 14
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: LD_INT 4
27743: PUSH
27744: LD_INT 5
27746: PUSH
27747: LD_INT 21
27749: PUSH
27750: LD_INT 22
27752: PUSH
27753: LD_INT 23
27755: PUSH
27756: LD_INT 24
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 27774
27773: POP
// result := ( chassis in result ) ;
27774: LD_ADDR_VAR 0 3
27778: PUSH
27779: LD_VAR 0 1
27783: PUSH
27784: LD_VAR 0 3
27788: IN
27789: ST_TO_ADDR
// end ;
27790: LD_VAR 0 3
27794: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27795: LD_INT 0
27797: PPUSH
// if not chassis or not weapon then
27798: LD_VAR 0 1
27802: NOT
27803: PUSH
27804: LD_VAR 0 2
27808: NOT
27809: OR
27810: IFFALSE 27814
// exit ;
27812: GO 28840
// case weapon of us_machine_gun :
27814: LD_VAR 0 2
27818: PUSH
27819: LD_INT 2
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27857
27827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: LD_INT 3
27841: PUSH
27842: LD_INT 4
27844: PUSH
27845: LD_INT 5
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: ST_TO_ADDR
27855: GO 28824
27857: LD_INT 3
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27895
27865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: LD_INT 4
27882: PUSH
27883: LD_INT 5
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: ST_TO_ADDR
27893: GO 28824
27895: LD_INT 11
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 27933
27903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27904: LD_ADDR_VAR 0 3
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: LD_INT 3
27917: PUSH
27918: LD_INT 4
27920: PUSH
27921: LD_INT 5
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
27931: GO 28824
27933: LD_INT 4
27935: DOUBLE
27936: EQUAL
27937: IFTRUE 27941
27939: GO 27967
27941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: LD_INT 4
27955: PUSH
27956: LD_INT 5
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: ST_TO_ADDR
27965: GO 28824
27967: LD_INT 5
27969: DOUBLE
27970: EQUAL
27971: IFTRUE 27975
27973: GO 28001
27975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27976: LD_ADDR_VAR 0 3
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 4
27989: PUSH
27990: LD_INT 5
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: ST_TO_ADDR
27999: GO 28824
28001: LD_INT 9
28003: DOUBLE
28004: EQUAL
28005: IFTRUE 28009
28007: GO 28035
28009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28010: LD_ADDR_VAR 0 3
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: LD_INT 4
28023: PUSH
28024: LD_INT 5
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
28033: GO 28824
28035: LD_INT 7
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28069
28043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: LD_INT 4
28057: PUSH
28058: LD_INT 5
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
28067: GO 28824
28069: LD_INT 12
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28103
28077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28078: LD_ADDR_VAR 0 3
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: LD_INT 4
28091: PUSH
28092: LD_INT 5
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28824
28103: LD_INT 13
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28137
28111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: LD_INT 4
28125: PUSH
28126: LD_INT 5
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: ST_TO_ADDR
28135: GO 28824
28137: LD_INT 14
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28163
28145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 4
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: ST_TO_ADDR
28161: GO 28824
28163: LD_INT 6
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28189
28171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_INT 4
28179: PUSH
28180: LD_INT 5
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 28824
28189: LD_INT 10
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28215
28197: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 4
28205: PUSH
28206: LD_INT 5
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: ST_TO_ADDR
28213: GO 28824
28215: LD_INT 22
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28249
28223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_INT 11
28231: PUSH
28232: LD_INT 12
28234: PUSH
28235: LD_INT 13
28237: PUSH
28238: LD_INT 14
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: ST_TO_ADDR
28247: GO 28824
28249: LD_INT 23
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28283
28257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 11
28265: PUSH
28266: LD_INT 12
28268: PUSH
28269: LD_INT 13
28271: PUSH
28272: LD_INT 14
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: ST_TO_ADDR
28281: GO 28824
28283: LD_INT 24
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28317
28291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_INT 11
28299: PUSH
28300: LD_INT 12
28302: PUSH
28303: LD_INT 13
28305: PUSH
28306: LD_INT 14
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 28824
28317: LD_INT 30
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28351
28325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 11
28333: PUSH
28334: LD_INT 12
28336: PUSH
28337: LD_INT 13
28339: PUSH
28340: LD_INT 14
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
28349: GO 28824
28351: LD_INT 25
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28377
28359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_INT 13
28367: PUSH
28368: LD_INT 14
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: ST_TO_ADDR
28375: GO 28824
28377: LD_INT 27
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28403
28385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_INT 13
28393: PUSH
28394: LD_INT 14
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: ST_TO_ADDR
28401: GO 28824
28403: LD_INT 28
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28429
28411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_INT 13
28419: PUSH
28420: LD_INT 14
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: ST_TO_ADDR
28427: GO 28824
28429: LD_INT 29
28431: DOUBLE
28432: EQUAL
28433: IFTRUE 28437
28435: GO 28455
28437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 13
28445: PUSH
28446: LD_INT 14
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: ST_TO_ADDR
28453: GO 28824
28455: LD_INT 31
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28481
28463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_INT 13
28471: PUSH
28472: LD_INT 14
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: ST_TO_ADDR
28479: GO 28824
28481: LD_INT 26
28483: DOUBLE
28484: EQUAL
28485: IFTRUE 28489
28487: GO 28507
28489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_INT 13
28497: PUSH
28498: LD_INT 14
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: ST_TO_ADDR
28505: GO 28824
28507: LD_INT 42
28509: DOUBLE
28510: EQUAL
28511: IFTRUE 28515
28513: GO 28541
28515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_INT 21
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_INT 23
28529: PUSH
28530: LD_INT 24
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: ST_TO_ADDR
28539: GO 28824
28541: LD_INT 43
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28575
28549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 21
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_INT 23
28563: PUSH
28564: LD_INT 24
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 28824
28575: LD_INT 44
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28609
28583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 21
28591: PUSH
28592: LD_INT 22
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 24
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
28607: GO 28824
28609: LD_INT 45
28611: DOUBLE
28612: EQUAL
28613: IFTRUE 28617
28615: GO 28643
28617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28618: LD_ADDR_VAR 0 3
28622: PUSH
28623: LD_INT 21
28625: PUSH
28626: LD_INT 22
28628: PUSH
28629: LD_INT 23
28631: PUSH
28632: LD_INT 24
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
28641: GO 28824
28643: LD_INT 49
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28677
28651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_INT 21
28659: PUSH
28660: LD_INT 22
28662: PUSH
28663: LD_INT 23
28665: PUSH
28666: LD_INT 24
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
28675: GO 28824
28677: LD_INT 51
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28711
28685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 22
28696: PUSH
28697: LD_INT 23
28699: PUSH
28700: LD_INT 24
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 28824
28711: LD_INT 52
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28745
28719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_INT 21
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_INT 23
28733: PUSH
28734: LD_INT 24
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: ST_TO_ADDR
28743: GO 28824
28745: LD_INT 53
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28771
28753: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_INT 23
28761: PUSH
28762: LD_INT 24
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: ST_TO_ADDR
28769: GO 28824
28771: LD_INT 46
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28797
28779: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 23
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: ST_TO_ADDR
28795: GO 28824
28797: LD_INT 47
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28823
28805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 23
28813: PUSH
28814: LD_INT 24
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: ST_TO_ADDR
28821: GO 28824
28823: POP
// result := ( chassis in result ) ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_VAR 0 1
28833: PUSH
28834: LD_VAR 0 3
28838: IN
28839: ST_TO_ADDR
// end ;
28840: LD_VAR 0 3
28844: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28845: LD_INT 0
28847: PPUSH
28848: PPUSH
28849: PPUSH
28850: PPUSH
28851: PPUSH
28852: PPUSH
28853: PPUSH
// result := array ;
28854: LD_ADDR_VAR 0 5
28858: PUSH
28859: LD_VAR 0 1
28863: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28864: LD_VAR 0 1
28868: NOT
28869: PUSH
28870: LD_VAR 0 2
28874: NOT
28875: OR
28876: PUSH
28877: LD_VAR 0 3
28881: NOT
28882: OR
28883: PUSH
28884: LD_VAR 0 2
28888: PUSH
28889: LD_VAR 0 1
28893: GREATER
28894: OR
28895: PUSH
28896: LD_VAR 0 3
28900: PUSH
28901: LD_VAR 0 1
28905: GREATER
28906: OR
28907: IFFALSE 28911
// exit ;
28909: GO 29207
// if direction then
28911: LD_VAR 0 4
28915: IFFALSE 28979
// begin d := 1 ;
28917: LD_ADDR_VAR 0 9
28921: PUSH
28922: LD_INT 1
28924: ST_TO_ADDR
// if i_from > i_to then
28925: LD_VAR 0 2
28929: PUSH
28930: LD_VAR 0 3
28934: GREATER
28935: IFFALSE 28961
// length := ( array - i_from ) + i_to else
28937: LD_ADDR_VAR 0 11
28941: PUSH
28942: LD_VAR 0 1
28946: PUSH
28947: LD_VAR 0 2
28951: MINUS
28952: PUSH
28953: LD_VAR 0 3
28957: PLUS
28958: ST_TO_ADDR
28959: GO 28977
// length := i_to - i_from ;
28961: LD_ADDR_VAR 0 11
28965: PUSH
28966: LD_VAR 0 3
28970: PUSH
28971: LD_VAR 0 2
28975: MINUS
28976: ST_TO_ADDR
// end else
28977: GO 29040
// begin d := - 1 ;
28979: LD_ADDR_VAR 0 9
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: ST_TO_ADDR
// if i_from > i_to then
28988: LD_VAR 0 2
28992: PUSH
28993: LD_VAR 0 3
28997: GREATER
28998: IFFALSE 29018
// length := i_from - i_to else
29000: LD_ADDR_VAR 0 11
29004: PUSH
29005: LD_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: MINUS
29015: ST_TO_ADDR
29016: GO 29040
// length := ( array - i_to ) + i_from ;
29018: LD_ADDR_VAR 0 11
29022: PUSH
29023: LD_VAR 0 1
29027: PUSH
29028: LD_VAR 0 3
29032: MINUS
29033: PUSH
29034: LD_VAR 0 2
29038: PLUS
29039: ST_TO_ADDR
// end ; if not length then
29040: LD_VAR 0 11
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29207
// tmp := array ;
29049: LD_ADDR_VAR 0 10
29053: PUSH
29054: LD_VAR 0 1
29058: ST_TO_ADDR
// for i = 1 to length do
29059: LD_ADDR_VAR 0 6
29063: PUSH
29064: DOUBLE
29065: LD_INT 1
29067: DEC
29068: ST_TO_ADDR
29069: LD_VAR 0 11
29073: PUSH
29074: FOR_TO
29075: IFFALSE 29195
// begin for j = 1 to array do
29077: LD_ADDR_VAR 0 7
29081: PUSH
29082: DOUBLE
29083: LD_INT 1
29085: DEC
29086: ST_TO_ADDR
29087: LD_VAR 0 1
29091: PUSH
29092: FOR_TO
29093: IFFALSE 29181
// begin k := j + d ;
29095: LD_ADDR_VAR 0 8
29099: PUSH
29100: LD_VAR 0 7
29104: PUSH
29105: LD_VAR 0 9
29109: PLUS
29110: ST_TO_ADDR
// if k > array then
29111: LD_VAR 0 8
29115: PUSH
29116: LD_VAR 0 1
29120: GREATER
29121: IFFALSE 29131
// k := 1 ;
29123: LD_ADDR_VAR 0 8
29127: PUSH
29128: LD_INT 1
29130: ST_TO_ADDR
// if not k then
29131: LD_VAR 0 8
29135: NOT
29136: IFFALSE 29148
// k := array ;
29138: LD_ADDR_VAR 0 8
29142: PUSH
29143: LD_VAR 0 1
29147: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29148: LD_ADDR_VAR 0 10
29152: PUSH
29153: LD_VAR 0 10
29157: PPUSH
29158: LD_VAR 0 8
29162: PPUSH
29163: LD_VAR 0 1
29167: PUSH
29168: LD_VAR 0 7
29172: ARRAY
29173: PPUSH
29174: CALL_OW 1
29178: ST_TO_ADDR
// end ;
29179: GO 29092
29181: POP
29182: POP
// array := tmp ;
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_VAR 0 10
29192: ST_TO_ADDR
// end ;
29193: GO 29074
29195: POP
29196: POP
// result := array ;
29197: LD_ADDR_VAR 0 5
29201: PUSH
29202: LD_VAR 0 1
29206: ST_TO_ADDR
// end ;
29207: LD_VAR 0 5
29211: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29212: LD_INT 0
29214: PPUSH
29215: PPUSH
// result := 0 ;
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 0
29223: ST_TO_ADDR
// if not array or not value in array then
29224: LD_VAR 0 1
29228: NOT
29229: PUSH
29230: LD_VAR 0 2
29234: PUSH
29235: LD_VAR 0 1
29239: IN
29240: NOT
29241: OR
29242: IFFALSE 29246
// exit ;
29244: GO 29300
// for i = 1 to array do
29246: LD_ADDR_VAR 0 4
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_VAR 0 1
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29298
// if value = array [ i ] then
29264: LD_VAR 0 2
29268: PUSH
29269: LD_VAR 0 1
29273: PUSH
29274: LD_VAR 0 4
29278: ARRAY
29279: EQUAL
29280: IFFALSE 29296
// begin result := i ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_VAR 0 4
29291: ST_TO_ADDR
// exit ;
29292: POP
29293: POP
29294: GO 29300
// end ;
29296: GO 29261
29298: POP
29299: POP
// end ;
29300: LD_VAR 0 3
29304: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29305: LD_INT 0
29307: PPUSH
// vc_chassis := chassis ;
29308: LD_ADDR_OWVAR 37
29312: PUSH
29313: LD_VAR 0 1
29317: ST_TO_ADDR
// vc_engine := engine ;
29318: LD_ADDR_OWVAR 39
29322: PUSH
29323: LD_VAR 0 2
29327: ST_TO_ADDR
// vc_control := control ;
29328: LD_ADDR_OWVAR 38
29332: PUSH
29333: LD_VAR 0 3
29337: ST_TO_ADDR
// vc_weapon := weapon ;
29338: LD_ADDR_OWVAR 40
29342: PUSH
29343: LD_VAR 0 4
29347: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29348: LD_ADDR_OWVAR 41
29352: PUSH
29353: LD_VAR 0 5
29357: ST_TO_ADDR
// end ;
29358: LD_VAR 0 6
29362: RET
// export function WantPlant ( unit ) ; var task ; begin
29363: LD_INT 0
29365: PPUSH
29366: PPUSH
// result := false ;
29367: LD_ADDR_VAR 0 2
29371: PUSH
29372: LD_INT 0
29374: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 437
29389: ST_TO_ADDR
// if task then
29390: LD_VAR 0 3
29394: IFFALSE 29422
// if task [ 1 ] [ 1 ] = p then
29396: LD_VAR 0 3
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PUSH
29405: LD_INT 1
29407: ARRAY
29408: PUSH
29409: LD_STRING p
29411: EQUAL
29412: IFFALSE 29422
// result := true ;
29414: LD_ADDR_VAR 0 2
29418: PUSH
29419: LD_INT 1
29421: ST_TO_ADDR
// end ;
29422: LD_VAR 0 2
29426: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
29431: PPUSH
29432: PPUSH
// if pos < 1 then
29433: LD_VAR 0 2
29437: PUSH
29438: LD_INT 1
29440: LESS
29441: IFFALSE 29445
// exit ;
29443: GO 29748
// if pos = 1 then
29445: LD_VAR 0 2
29449: PUSH
29450: LD_INT 1
29452: EQUAL
29453: IFFALSE 29486
// result := Replace ( arr , pos [ 1 ] , value ) else
29455: LD_ADDR_VAR 0 4
29459: PUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: LD_VAR 0 2
29469: PUSH
29470: LD_INT 1
29472: ARRAY
29473: PPUSH
29474: LD_VAR 0 3
29478: PPUSH
29479: CALL_OW 1
29483: ST_TO_ADDR
29484: GO 29748
// begin tmp := arr ;
29486: LD_ADDR_VAR 0 6
29490: PUSH
29491: LD_VAR 0 1
29495: ST_TO_ADDR
// s_arr := [ tmp ] ;
29496: LD_ADDR_VAR 0 7
29500: PUSH
29501: LD_VAR 0 6
29505: PUSH
29506: EMPTY
29507: LIST
29508: ST_TO_ADDR
// for i = 1 to pos - 1 do
29509: LD_ADDR_VAR 0 5
29513: PUSH
29514: DOUBLE
29515: LD_INT 1
29517: DEC
29518: ST_TO_ADDR
29519: LD_VAR 0 2
29523: PUSH
29524: LD_INT 1
29526: MINUS
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29574
// begin tmp := tmp [ pos [ i ] ] ;
29531: LD_ADDR_VAR 0 6
29535: PUSH
29536: LD_VAR 0 6
29540: PUSH
29541: LD_VAR 0 2
29545: PUSH
29546: LD_VAR 0 5
29550: ARRAY
29551: ARRAY
29552: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29553: LD_ADDR_VAR 0 7
29557: PUSH
29558: LD_VAR 0 7
29562: PUSH
29563: LD_VAR 0 6
29567: PUSH
29568: EMPTY
29569: LIST
29570: ADD
29571: ST_TO_ADDR
// end ;
29572: GO 29528
29574: POP
29575: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29576: LD_ADDR_VAR 0 6
29580: PUSH
29581: LD_VAR 0 6
29585: PPUSH
29586: LD_VAR 0 2
29590: PUSH
29591: LD_VAR 0 2
29595: ARRAY
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 1
29606: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29607: LD_ADDR_VAR 0 7
29611: PUSH
29612: LD_VAR 0 7
29616: PPUSH
29617: LD_VAR 0 7
29621: PPUSH
29622: LD_VAR 0 6
29626: PPUSH
29627: CALL_OW 1
29631: ST_TO_ADDR
// for i = s_arr downto 2 do
29632: LD_ADDR_VAR 0 5
29636: PUSH
29637: DOUBLE
29638: LD_VAR 0 7
29642: INC
29643: ST_TO_ADDR
29644: LD_INT 2
29646: PUSH
29647: FOR_DOWNTO
29648: IFFALSE 29732
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29650: LD_ADDR_VAR 0 6
29654: PUSH
29655: LD_VAR 0 7
29659: PUSH
29660: LD_VAR 0 5
29664: PUSH
29665: LD_INT 1
29667: MINUS
29668: ARRAY
29669: PPUSH
29670: LD_VAR 0 2
29674: PUSH
29675: LD_VAR 0 5
29679: PUSH
29680: LD_INT 1
29682: MINUS
29683: ARRAY
29684: PPUSH
29685: LD_VAR 0 7
29689: PUSH
29690: LD_VAR 0 5
29694: ARRAY
29695: PPUSH
29696: CALL_OW 1
29700: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: LD_VAR 0 7
29710: PPUSH
29711: LD_VAR 0 5
29715: PUSH
29716: LD_INT 1
29718: MINUS
29719: PPUSH
29720: LD_VAR 0 6
29724: PPUSH
29725: CALL_OW 1
29729: ST_TO_ADDR
// end ;
29730: GO 29647
29732: POP
29733: POP
// result := s_arr [ 1 ] ;
29734: LD_ADDR_VAR 0 4
29738: PUSH
29739: LD_VAR 0 7
29743: PUSH
29744: LD_INT 1
29746: ARRAY
29747: ST_TO_ADDR
// end ; end ;
29748: LD_VAR 0 4
29752: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29753: LD_INT 0
29755: PPUSH
29756: PPUSH
// if not list then
29757: LD_VAR 0 1
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29857
// i := list [ pos1 ] ;
29766: LD_ADDR_VAR 0 5
29770: PUSH
29771: LD_VAR 0 1
29775: PUSH
29776: LD_VAR 0 2
29780: ARRAY
29781: ST_TO_ADDR
// if not i then
29782: LD_VAR 0 5
29786: NOT
29787: IFFALSE 29791
// exit ;
29789: GO 29857
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: LD_VAR 0 1
29810: PUSH
29811: LD_VAR 0 3
29815: ARRAY
29816: PPUSH
29817: CALL_OW 1
29821: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29822: LD_ADDR_VAR 0 1
29826: PUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: LD_VAR 0 3
29836: PPUSH
29837: LD_VAR 0 5
29841: PPUSH
29842: CALL_OW 1
29846: ST_TO_ADDR
// result := list ;
29847: LD_ADDR_VAR 0 4
29851: PUSH
29852: LD_VAR 0 1
29856: ST_TO_ADDR
// end ;
29857: LD_VAR 0 4
29861: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29862: LD_INT 0
29864: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29865: LD_ADDR_VAR 0 5
29869: PUSH
29870: LD_VAR 0 1
29874: PPUSH
29875: CALL_OW 250
29879: PPUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 251
29889: PPUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_VAR 0 3
29899: PPUSH
29900: LD_VAR 0 4
29904: PPUSH
29905: CALL 29915 0 5
29909: ST_TO_ADDR
// end ;
29910: LD_VAR 0 5
29914: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29915: LD_INT 0
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
// if not list then
29921: LD_VAR 0 3
29925: NOT
29926: IFFALSE 29930
// exit ;
29928: GO 30318
// result := [ ] ;
29930: LD_ADDR_VAR 0 6
29934: PUSH
29935: EMPTY
29936: ST_TO_ADDR
// for i in list do
29937: LD_ADDR_VAR 0 7
29941: PUSH
29942: LD_VAR 0 3
29946: PUSH
29947: FOR_IN
29948: IFFALSE 30150
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29950: LD_ADDR_VAR 0 9
29954: PUSH
29955: LD_VAR 0 7
29959: PPUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: LD_VAR 0 2
29969: PPUSH
29970: CALL_OW 297
29974: ST_TO_ADDR
// if not result then
29975: LD_VAR 0 6
29979: NOT
29980: IFFALSE 30006
// result := [ [ i , tmp ] ] else
29982: LD_ADDR_VAR 0 6
29986: PUSH
29987: LD_VAR 0 7
29991: PUSH
29992: LD_VAR 0 9
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: ST_TO_ADDR
30004: GO 30148
// begin if result [ result ] [ 2 ] < tmp then
30006: LD_VAR 0 6
30010: PUSH
30011: LD_VAR 0 6
30015: ARRAY
30016: PUSH
30017: LD_INT 2
30019: ARRAY
30020: PUSH
30021: LD_VAR 0 9
30025: LESS
30026: IFFALSE 30068
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30028: LD_ADDR_VAR 0 6
30032: PUSH
30033: LD_VAR 0 6
30037: PPUSH
30038: LD_VAR 0 6
30042: PUSH
30043: LD_INT 1
30045: PLUS
30046: PPUSH
30047: LD_VAR 0 7
30051: PUSH
30052: LD_VAR 0 9
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PPUSH
30061: CALL_OW 2
30065: ST_TO_ADDR
30066: GO 30148
// for j = 1 to result do
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: DOUBLE
30074: LD_INT 1
30076: DEC
30077: ST_TO_ADDR
30078: LD_VAR 0 6
30082: PUSH
30083: FOR_TO
30084: IFFALSE 30146
// begin if tmp < result [ j ] [ 2 ] then
30086: LD_VAR 0 9
30090: PUSH
30091: LD_VAR 0 6
30095: PUSH
30096: LD_VAR 0 8
30100: ARRAY
30101: PUSH
30102: LD_INT 2
30104: ARRAY
30105: LESS
30106: IFFALSE 30144
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30108: LD_ADDR_VAR 0 6
30112: PUSH
30113: LD_VAR 0 6
30117: PPUSH
30118: LD_VAR 0 8
30122: PPUSH
30123: LD_VAR 0 7
30127: PUSH
30128: LD_VAR 0 9
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 2
30141: ST_TO_ADDR
// break ;
30142: GO 30146
// end ; end ;
30144: GO 30083
30146: POP
30147: POP
// end ; end ;
30148: GO 29947
30150: POP
30151: POP
// if result and not asc then
30152: LD_VAR 0 6
30156: PUSH
30157: LD_VAR 0 4
30161: NOT
30162: AND
30163: IFFALSE 30238
// begin tmp := result ;
30165: LD_ADDR_VAR 0 9
30169: PUSH
30170: LD_VAR 0 6
30174: ST_TO_ADDR
// for i = tmp downto 1 do
30175: LD_ADDR_VAR 0 7
30179: PUSH
30180: DOUBLE
30181: LD_VAR 0 9
30185: INC
30186: ST_TO_ADDR
30187: LD_INT 1
30189: PUSH
30190: FOR_DOWNTO
30191: IFFALSE 30236
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30193: LD_ADDR_VAR 0 6
30197: PUSH
30198: LD_VAR 0 6
30202: PPUSH
30203: LD_VAR 0 9
30207: PUSH
30208: LD_VAR 0 7
30212: MINUS
30213: PUSH
30214: LD_INT 1
30216: PLUS
30217: PPUSH
30218: LD_VAR 0 9
30222: PUSH
30223: LD_VAR 0 7
30227: ARRAY
30228: PPUSH
30229: CALL_OW 1
30233: ST_TO_ADDR
30234: GO 30190
30236: POP
30237: POP
// end ; tmp := [ ] ;
30238: LD_ADDR_VAR 0 9
30242: PUSH
30243: EMPTY
30244: ST_TO_ADDR
// if mode then
30245: LD_VAR 0 5
30249: IFFALSE 30318
// begin for i = 1 to result do
30251: LD_ADDR_VAR 0 7
30255: PUSH
30256: DOUBLE
30257: LD_INT 1
30259: DEC
30260: ST_TO_ADDR
30261: LD_VAR 0 6
30265: PUSH
30266: FOR_TO
30267: IFFALSE 30306
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30269: LD_ADDR_VAR 0 9
30273: PUSH
30274: LD_VAR 0 9
30278: PPUSH
30279: LD_VAR 0 7
30283: PPUSH
30284: LD_VAR 0 6
30288: PUSH
30289: LD_VAR 0 7
30293: ARRAY
30294: PUSH
30295: LD_INT 1
30297: ARRAY
30298: PPUSH
30299: CALL_OW 1
30303: ST_TO_ADDR
30304: GO 30266
30306: POP
30307: POP
// result := tmp ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 9
30317: ST_TO_ADDR
// end ; end ;
30318: LD_VAR 0 6
30322: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30323: LD_INT 0
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: EMPTY
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
// if not x or not y then
30353: LD_VAR 0 2
30357: NOT
30358: PUSH
30359: LD_VAR 0 3
30363: NOT
30364: OR
30365: IFFALSE 30369
// exit ;
30367: GO 32015
// if not range then
30369: LD_VAR 0 4
30373: NOT
30374: IFFALSE 30384
// range := 10 ;
30376: LD_ADDR_VAR 0 4
30380: PUSH
30381: LD_INT 10
30383: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30384: LD_ADDR_VAR 0 8
30388: PUSH
30389: LD_INT 81
30391: PUSH
30392: LD_VAR 0 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 92
30403: PUSH
30404: LD_VAR 0 2
30408: PUSH
30409: LD_VAR 0 3
30413: PUSH
30414: LD_VAR 0 4
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: LD_INT 21
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: PPUSH
30447: CALL_OW 69
30451: ST_TO_ADDR
// if not tmp then
30452: LD_VAR 0 8
30456: NOT
30457: IFFALSE 30461
// exit ;
30459: GO 32015
// for i in tmp do
30461: LD_ADDR_VAR 0 6
30465: PUSH
30466: LD_VAR 0 8
30470: PUSH
30471: FOR_IN
30472: IFFALSE 31990
// begin points := [ 0 , 0 , 0 ] ;
30474: LD_ADDR_VAR 0 9
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
// bpoints := 1 ;
30493: LD_ADDR_VAR 0 10
30497: PUSH
30498: LD_INT 1
30500: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30501: LD_VAR 0 6
30505: PPUSH
30506: CALL_OW 247
30510: PUSH
30511: LD_INT 1
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 31097
30519: POP
// begin if GetClass ( i ) = 1 then
30520: LD_VAR 0 6
30524: PPUSH
30525: CALL_OW 257
30529: PUSH
30530: LD_INT 1
30532: EQUAL
30533: IFFALSE 30554
// points := [ 10 , 5 , 3 ] ;
30535: LD_ADDR_VAR 0 9
30539: PUSH
30540: LD_INT 10
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30554: LD_VAR 0 6
30558: PPUSH
30559: CALL_OW 257
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: IN
30578: IFFALSE 30599
// points := [ 3 , 2 , 1 ] ;
30580: LD_ADDR_VAR 0 9
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30599: LD_VAR 0 6
30603: PPUSH
30604: CALL_OW 257
30608: PUSH
30609: LD_INT 5
30611: EQUAL
30612: IFFALSE 30633
// points := [ 130 , 5 , 2 ] ;
30614: LD_ADDR_VAR 0 9
30618: PUSH
30619: LD_INT 130
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30633: LD_VAR 0 6
30637: PPUSH
30638: CALL_OW 257
30642: PUSH
30643: LD_INT 8
30645: EQUAL
30646: IFFALSE 30667
// points := [ 35 , 35 , 30 ] ;
30648: LD_ADDR_VAR 0 9
30652: PUSH
30653: LD_INT 35
30655: PUSH
30656: LD_INT 35
30658: PUSH
30659: LD_INT 30
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30667: LD_VAR 0 6
30671: PPUSH
30672: CALL_OW 257
30676: PUSH
30677: LD_INT 9
30679: EQUAL
30680: IFFALSE 30701
// points := [ 20 , 55 , 40 ] ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_INT 20
30689: PUSH
30690: LD_INT 55
30692: PUSH
30693: LD_INT 40
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30701: LD_VAR 0 6
30705: PPUSH
30706: CALL_OW 257
30710: PUSH
30711: LD_INT 12
30713: PUSH
30714: LD_INT 16
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: IN
30721: IFFALSE 30742
// points := [ 5 , 3 , 2 ] ;
30723: LD_ADDR_VAR 0 9
30727: PUSH
30728: LD_INT 5
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30742: LD_VAR 0 6
30746: PPUSH
30747: CALL_OW 257
30751: PUSH
30752: LD_INT 17
30754: EQUAL
30755: IFFALSE 30776
// points := [ 100 , 50 , 75 ] ;
30757: LD_ADDR_VAR 0 9
30761: PUSH
30762: LD_INT 100
30764: PUSH
30765: LD_INT 50
30767: PUSH
30768: LD_INT 75
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30776: LD_VAR 0 6
30780: PPUSH
30781: CALL_OW 257
30785: PUSH
30786: LD_INT 15
30788: EQUAL
30789: IFFALSE 30810
// points := [ 10 , 5 , 3 ] ;
30791: LD_ADDR_VAR 0 9
30795: PUSH
30796: LD_INT 10
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30810: LD_VAR 0 6
30814: PPUSH
30815: CALL_OW 257
30819: PUSH
30820: LD_INT 14
30822: EQUAL
30823: IFFALSE 30844
// points := [ 10 , 0 , 0 ] ;
30825: LD_ADDR_VAR 0 9
30829: PUSH
30830: LD_INT 10
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30844: LD_VAR 0 6
30848: PPUSH
30849: CALL_OW 257
30853: PUSH
30854: LD_INT 11
30856: EQUAL
30857: IFFALSE 30878
// points := [ 30 , 10 , 5 ] ;
30859: LD_ADDR_VAR 0 9
30863: PUSH
30864: LD_INT 30
30866: PUSH
30867: LD_INT 10
30869: PUSH
30870: LD_INT 5
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30878: LD_VAR 0 1
30882: PPUSH
30883: LD_INT 5
30885: PPUSH
30886: CALL_OW 321
30890: PUSH
30891: LD_INT 2
30893: EQUAL
30894: IFFALSE 30911
// bpoints := bpoints * 1.8 ;
30896: LD_ADDR_VAR 0 10
30900: PUSH
30901: LD_VAR 0 10
30905: PUSH
30906: LD_REAL  1.80000000000000E+0000
30909: MUL
30910: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30911: LD_VAR 0 6
30915: PPUSH
30916: CALL_OW 257
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 4
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: IN
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: LD_INT 51
30947: PPUSH
30948: CALL_OW 321
30952: PUSH
30953: LD_INT 2
30955: EQUAL
30956: AND
30957: IFFALSE 30974
// bpoints := bpoints * 1.2 ;
30959: LD_ADDR_VAR 0 10
30963: PUSH
30964: LD_VAR 0 10
30968: PUSH
30969: LD_REAL  1.20000000000000E+0000
30972: MUL
30973: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30974: LD_VAR 0 6
30978: PPUSH
30979: CALL_OW 257
30983: PUSH
30984: LD_INT 5
30986: PUSH
30987: LD_INT 7
30989: PUSH
30990: LD_INT 9
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: IN
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_INT 52
31006: PPUSH
31007: CALL_OW 321
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: AND
31016: IFFALSE 31033
// bpoints := bpoints * 1.5 ;
31018: LD_ADDR_VAR 0 10
31022: PUSH
31023: LD_VAR 0 10
31027: PUSH
31028: LD_REAL  1.50000000000000E+0000
31031: MUL
31032: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_INT 66
31040: PPUSH
31041: CALL_OW 321
31045: PUSH
31046: LD_INT 2
31048: EQUAL
31049: IFFALSE 31066
// bpoints := bpoints * 1.1 ;
31051: LD_ADDR_VAR 0 10
31055: PUSH
31056: LD_VAR 0 10
31060: PUSH
31061: LD_REAL  1.10000000000000E+0000
31064: MUL
31065: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31066: LD_ADDR_VAR 0 10
31070: PUSH
31071: LD_VAR 0 10
31075: PUSH
31076: LD_VAR 0 6
31080: PPUSH
31081: LD_INT 1
31083: PPUSH
31084: CALL_OW 259
31088: PUSH
31089: LD_REAL  1.15000000000000E+0000
31092: MUL
31093: MUL
31094: ST_TO_ADDR
// end ; unit_vehicle :
31095: GO 31919
31097: LD_INT 2
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31907
31105: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31106: LD_VAR 0 6
31110: PPUSH
31111: CALL_OW 264
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 42
31121: PUSH
31122: LD_INT 24
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: IN
31130: IFFALSE 31151
// points := [ 25 , 5 , 3 ] ;
31132: LD_ADDR_VAR 0 9
31136: PUSH
31137: LD_INT 25
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31151: LD_VAR 0 6
31155: PPUSH
31156: CALL_OW 264
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 43
31166: PUSH
31167: LD_INT 25
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: IN
31175: IFFALSE 31196
// points := [ 40 , 15 , 5 ] ;
31177: LD_ADDR_VAR 0 9
31181: PUSH
31182: LD_INT 40
31184: PUSH
31185: LD_INT 15
31187: PUSH
31188: LD_INT 5
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31196: LD_VAR 0 6
31200: PPUSH
31201: CALL_OW 264
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 23
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: IN
31216: IFFALSE 31237
// points := [ 7 , 25 , 8 ] ;
31218: LD_ADDR_VAR 0 9
31222: PUSH
31223: LD_INT 7
31225: PUSH
31226: LD_INT 25
31228: PUSH
31229: LD_INT 8
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 264
31246: PUSH
31247: LD_INT 5
31249: PUSH
31250: LD_INT 27
31252: PUSH
31253: LD_INT 44
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: IN
31261: IFFALSE 31282
// points := [ 14 , 50 , 16 ] ;
31263: LD_ADDR_VAR 0 9
31267: PUSH
31268: LD_INT 14
31270: PUSH
31271: LD_INT 50
31273: PUSH
31274: LD_INT 16
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31282: LD_VAR 0 6
31286: PPUSH
31287: CALL_OW 264
31291: PUSH
31292: LD_INT 6
31294: PUSH
31295: LD_INT 46
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: IN
31302: IFFALSE 31323
// points := [ 32 , 120 , 70 ] ;
31304: LD_ADDR_VAR 0 9
31308: PUSH
31309: LD_INT 32
31311: PUSH
31312: LD_INT 120
31314: PUSH
31315: LD_INT 70
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31323: LD_VAR 0 6
31327: PPUSH
31328: CALL_OW 264
31332: PUSH
31333: LD_INT 7
31335: PUSH
31336: LD_INT 28
31338: PUSH
31339: LD_INT 45
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: IN
31347: IFFALSE 31368
// points := [ 35 , 20 , 45 ] ;
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_INT 35
31356: PUSH
31357: LD_INT 20
31359: PUSH
31360: LD_INT 45
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31368: LD_VAR 0 6
31372: PPUSH
31373: CALL_OW 264
31377: PUSH
31378: LD_INT 47
31380: PUSH
31381: EMPTY
31382: LIST
31383: IN
31384: IFFALSE 31405
// points := [ 67 , 45 , 75 ] ;
31386: LD_ADDR_VAR 0 9
31390: PUSH
31391: LD_INT 67
31393: PUSH
31394: LD_INT 45
31396: PUSH
31397: LD_INT 75
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31405: LD_VAR 0 6
31409: PPUSH
31410: CALL_OW 264
31414: PUSH
31415: LD_INT 26
31417: PUSH
31418: EMPTY
31419: LIST
31420: IN
31421: IFFALSE 31442
// points := [ 120 , 30 , 80 ] ;
31423: LD_ADDR_VAR 0 9
31427: PUSH
31428: LD_INT 120
31430: PUSH
31431: LD_INT 30
31433: PUSH
31434: LD_INT 80
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31442: LD_VAR 0 6
31446: PPUSH
31447: CALL_OW 264
31451: PUSH
31452: LD_INT 22
31454: PUSH
31455: EMPTY
31456: LIST
31457: IN
31458: IFFALSE 31479
// points := [ 40 , 1 , 1 ] ;
31460: LD_ADDR_VAR 0 9
31464: PUSH
31465: LD_INT 40
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31479: LD_VAR 0 6
31483: PPUSH
31484: CALL_OW 264
31488: PUSH
31489: LD_INT 29
31491: PUSH
31492: EMPTY
31493: LIST
31494: IN
31495: IFFALSE 31516
// points := [ 70 , 200 , 400 ] ;
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: LD_INT 70
31504: PUSH
31505: LD_INT 200
31507: PUSH
31508: LD_INT 400
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 264
31525: PUSH
31526: LD_INT 14
31528: PUSH
31529: LD_INT 53
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: IN
31536: IFFALSE 31557
// points := [ 40 , 10 , 20 ] ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_INT 40
31545: PUSH
31546: LD_INT 10
31548: PUSH
31549: LD_INT 20
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31557: LD_VAR 0 6
31561: PPUSH
31562: CALL_OW 264
31566: PUSH
31567: LD_INT 9
31569: PUSH
31570: EMPTY
31571: LIST
31572: IN
31573: IFFALSE 31594
// points := [ 5 , 70 , 20 ] ;
31575: LD_ADDR_VAR 0 9
31579: PUSH
31580: LD_INT 5
31582: PUSH
31583: LD_INT 70
31585: PUSH
31586: LD_INT 20
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31594: LD_VAR 0 6
31598: PPUSH
31599: CALL_OW 264
31603: PUSH
31604: LD_INT 10
31606: PUSH
31607: EMPTY
31608: LIST
31609: IN
31610: IFFALSE 31631
// points := [ 35 , 110 , 70 ] ;
31612: LD_ADDR_VAR 0 9
31616: PUSH
31617: LD_INT 35
31619: PUSH
31620: LD_INT 110
31622: PUSH
31623: LD_INT 70
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: LIST
31630: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31631: LD_VAR 0 6
31635: PPUSH
31636: CALL_OW 265
31640: PUSH
31641: LD_INT 25
31643: EQUAL
31644: IFFALSE 31665
// points := [ 80 , 65 , 100 ] ;
31646: LD_ADDR_VAR 0 9
31650: PUSH
31651: LD_INT 80
31653: PUSH
31654: LD_INT 65
31656: PUSH
31657: LD_INT 100
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31665: LD_VAR 0 6
31669: PPUSH
31670: CALL_OW 263
31674: PUSH
31675: LD_INT 1
31677: EQUAL
31678: IFFALSE 31713
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31680: LD_ADDR_VAR 0 10
31684: PUSH
31685: LD_VAR 0 10
31689: PUSH
31690: LD_VAR 0 6
31694: PPUSH
31695: CALL_OW 311
31699: PPUSH
31700: LD_INT 3
31702: PPUSH
31703: CALL_OW 259
31707: PUSH
31708: LD_INT 4
31710: MUL
31711: MUL
31712: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31713: LD_VAR 0 6
31717: PPUSH
31718: CALL_OW 263
31722: PUSH
31723: LD_INT 2
31725: EQUAL
31726: IFFALSE 31777
// begin j := IsControledBy ( i ) ;
31728: LD_ADDR_VAR 0 7
31732: PUSH
31733: LD_VAR 0 6
31737: PPUSH
31738: CALL_OW 312
31742: ST_TO_ADDR
// if j then
31743: LD_VAR 0 7
31747: IFFALSE 31777
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31749: LD_ADDR_VAR 0 10
31753: PUSH
31754: LD_VAR 0 10
31758: PUSH
31759: LD_VAR 0 7
31763: PPUSH
31764: LD_INT 3
31766: PPUSH
31767: CALL_OW 259
31771: PUSH
31772: LD_INT 3
31774: MUL
31775: MUL
31776: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31777: LD_VAR 0 6
31781: PPUSH
31782: CALL_OW 264
31786: PUSH
31787: LD_INT 5
31789: PUSH
31790: LD_INT 6
31792: PUSH
31793: LD_INT 46
31795: PUSH
31796: LD_INT 44
31798: PUSH
31799: LD_INT 47
31801: PUSH
31802: LD_INT 45
31804: PUSH
31805: LD_INT 28
31807: PUSH
31808: LD_INT 7
31810: PUSH
31811: LD_INT 27
31813: PUSH
31814: LD_INT 29
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: IN
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: LD_INT 52
31837: PPUSH
31838: CALL_OW 321
31842: PUSH
31843: LD_INT 2
31845: EQUAL
31846: AND
31847: IFFALSE 31864
// bpoints := bpoints * 1.2 ;
31849: LD_ADDR_VAR 0 10
31853: PUSH
31854: LD_VAR 0 10
31858: PUSH
31859: LD_REAL  1.20000000000000E+0000
31862: MUL
31863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31864: LD_VAR 0 6
31868: PPUSH
31869: CALL_OW 264
31873: PUSH
31874: LD_INT 6
31876: PUSH
31877: LD_INT 46
31879: PUSH
31880: LD_INT 47
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: IN
31888: IFFALSE 31905
// bpoints := bpoints * 1.2 ;
31890: LD_ADDR_VAR 0 10
31894: PUSH
31895: LD_VAR 0 10
31899: PUSH
31900: LD_REAL  1.20000000000000E+0000
31903: MUL
31904: ST_TO_ADDR
// end ; unit_building :
31905: GO 31919
31907: LD_INT 3
31909: DOUBLE
31910: EQUAL
31911: IFTRUE 31915
31913: GO 31918
31915: POP
// ; end ;
31916: GO 31919
31918: POP
// for j = 1 to 3 do
31919: LD_ADDR_VAR 0 7
31923: PUSH
31924: DOUBLE
31925: LD_INT 1
31927: DEC
31928: ST_TO_ADDR
31929: LD_INT 3
31931: PUSH
31932: FOR_TO
31933: IFFALSE 31986
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31935: LD_ADDR_VAR 0 5
31939: PUSH
31940: LD_VAR 0 5
31944: PPUSH
31945: LD_VAR 0 7
31949: PPUSH
31950: LD_VAR 0 5
31954: PUSH
31955: LD_VAR 0 7
31959: ARRAY
31960: PUSH
31961: LD_VAR 0 9
31965: PUSH
31966: LD_VAR 0 7
31970: ARRAY
31971: PUSH
31972: LD_VAR 0 10
31976: MUL
31977: PLUS
31978: PPUSH
31979: CALL_OW 1
31983: ST_TO_ADDR
31984: GO 31932
31986: POP
31987: POP
// end ;
31988: GO 30471
31990: POP
31991: POP
// result := Replace ( result , 4 , tmp ) ;
31992: LD_ADDR_VAR 0 5
31996: PUSH
31997: LD_VAR 0 5
32001: PPUSH
32002: LD_INT 4
32004: PPUSH
32005: LD_VAR 0 8
32009: PPUSH
32010: CALL_OW 1
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 5
32019: RET
// export function DangerAtRange ( unit , range ) ; begin
32020: LD_INT 0
32022: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32023: LD_ADDR_VAR 0 3
32027: PUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 255
32037: PPUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 250
32047: PPUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: CALL_OW 251
32057: PPUSH
32058: LD_VAR 0 2
32062: PPUSH
32063: CALL 30323 0 4
32067: ST_TO_ADDR
// end ;
32068: LD_VAR 0 3
32072: RET
// export function DangerInArea ( side , area ) ; begin
32073: LD_INT 0
32075: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: LD_INT 81
32088: PUSH
32089: LD_VAR 0 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PPUSH
32098: CALL_OW 70
32102: ST_TO_ADDR
// end ;
32103: LD_VAR 0 3
32107: RET
// export function IsExtension ( b ) ; begin
32108: LD_INT 0
32110: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32111: LD_ADDR_VAR 0 2
32115: PUSH
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 23
32123: PUSH
32124: LD_INT 20
32126: PUSH
32127: LD_INT 22
32129: PUSH
32130: LD_INT 17
32132: PUSH
32133: LD_INT 24
32135: PUSH
32136: LD_INT 21
32138: PUSH
32139: LD_INT 19
32141: PUSH
32142: LD_INT 16
32144: PUSH
32145: LD_INT 25
32147: PUSH
32148: LD_INT 18
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: IN
32163: ST_TO_ADDR
// end ;
32164: LD_VAR 0 2
32168: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
32173: PPUSH
// result := [ ] ;
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: EMPTY
32180: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32181: LD_ADDR_VAR 0 4
32185: PUSH
32186: LD_VAR 0 2
32190: PPUSH
32191: LD_INT 21
32193: PUSH
32194: LD_INT 3
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PPUSH
32201: CALL_OW 70
32205: ST_TO_ADDR
// if not tmp then
32206: LD_VAR 0 4
32210: NOT
32211: IFFALSE 32215
// exit ;
32213: GO 32273
// for i in tmp do
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: LD_VAR 0 4
32224: PUSH
32225: FOR_IN
32226: IFFALSE 32261
// if GetBase ( i ) <> base then
32228: LD_VAR 0 5
32232: PPUSH
32233: CALL_OW 274
32237: PUSH
32238: LD_VAR 0 1
32242: NONEQUAL
32243: IFFALSE 32259
// ComLinkToBase ( base , i ) ;
32245: LD_VAR 0 1
32249: PPUSH
32250: LD_VAR 0 5
32254: PPUSH
32255: CALL_OW 169
32259: GO 32225
32261: POP
32262: POP
// result := tmp ;
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: LD_VAR 0 4
32272: ST_TO_ADDR
// end ;
32273: LD_VAR 0 3
32277: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32278: LD_INT 0
32280: PPUSH
32281: PPUSH
// if BuildingStatus ( b ) = bs_build then
32282: LD_VAR 0 2
32286: PPUSH
32287: CALL_OW 461
32291: PUSH
32292: LD_INT 1
32294: EQUAL
32295: IFFALSE 32355
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32297: LD_VAR 0 1
32301: PPUSH
32302: LD_STRING h
32304: PUSH
32305: LD_VAR 0 2
32309: PPUSH
32310: CALL_OW 250
32314: PUSH
32315: LD_VAR 0 2
32319: PPUSH
32320: CALL_OW 251
32324: PUSH
32325: LD_VAR 0 2
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: PPUSH
32351: CALL_OW 446
// end ;
32355: LD_VAR 0 3
32359: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32360: LD_INT 0
32362: PPUSH
32363: PPUSH
32364: PPUSH
32365: PPUSH
32366: PPUSH
32367: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32368: LD_VAR 0 1
32372: NOT
32373: PUSH
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 263
32383: PUSH
32384: LD_INT 2
32386: EQUAL
32387: NOT
32388: OR
32389: IFFALSE 32393
// exit ;
32391: GO 32709
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32393: LD_ADDR_VAR 0 6
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 255
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 30
32420: PUSH
32421: LD_INT 36
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 34
32430: PUSH
32431: LD_INT 31
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PPUSH
32447: CALL_OW 69
32451: ST_TO_ADDR
// if not tmp then
32452: LD_VAR 0 6
32456: NOT
32457: IFFALSE 32461
// exit ;
32459: GO 32709
// result := [ ] ;
32461: LD_ADDR_VAR 0 2
32465: PUSH
32466: EMPTY
32467: ST_TO_ADDR
// for i in tmp do
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_VAR 0 6
32477: PUSH
32478: FOR_IN
32479: IFFALSE 32550
// begin t := UnitsInside ( i ) ;
32481: LD_ADDR_VAR 0 4
32485: PUSH
32486: LD_VAR 0 3
32490: PPUSH
32491: CALL_OW 313
32495: ST_TO_ADDR
// if t then
32496: LD_VAR 0 4
32500: IFFALSE 32548
// for j in t do
32502: LD_ADDR_VAR 0 7
32506: PUSH
32507: LD_VAR 0 4
32511: PUSH
32512: FOR_IN
32513: IFFALSE 32546
// result := Insert ( result , result + 1 , j ) ;
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: LD_VAR 0 2
32529: PUSH
32530: LD_INT 1
32532: PLUS
32533: PPUSH
32534: LD_VAR 0 7
32538: PPUSH
32539: CALL_OW 2
32543: ST_TO_ADDR
32544: GO 32512
32546: POP
32547: POP
// end ;
32548: GO 32478
32550: POP
32551: POP
// if not result then
32552: LD_VAR 0 2
32556: NOT
32557: IFFALSE 32561
// exit ;
32559: GO 32709
// mech := result [ 1 ] ;
32561: LD_ADDR_VAR 0 5
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 1
32573: ARRAY
32574: ST_TO_ADDR
// if result > 1 then
32575: LD_VAR 0 2
32579: PUSH
32580: LD_INT 1
32582: GREATER
32583: IFFALSE 32695
// for i = 2 to result do
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: DOUBLE
32591: LD_INT 2
32593: DEC
32594: ST_TO_ADDR
32595: LD_VAR 0 2
32599: PUSH
32600: FOR_TO
32601: IFFALSE 32693
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_VAR 0 3
32617: ARRAY
32618: PPUSH
32619: LD_INT 3
32621: PPUSH
32622: CALL_OW 259
32626: PUSH
32627: LD_VAR 0 2
32631: PUSH
32632: LD_VAR 0 3
32636: ARRAY
32637: PPUSH
32638: CALL_OW 432
32642: MINUS
32643: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32644: LD_VAR 0 4
32648: PUSH
32649: LD_VAR 0 5
32653: PPUSH
32654: LD_INT 3
32656: PPUSH
32657: CALL_OW 259
32661: PUSH
32662: LD_VAR 0 5
32666: PPUSH
32667: CALL_OW 432
32671: MINUS
32672: GREATEREQUAL
32673: IFFALSE 32691
// mech := result [ i ] ;
32675: LD_ADDR_VAR 0 5
32679: PUSH
32680: LD_VAR 0 2
32684: PUSH
32685: LD_VAR 0 3
32689: ARRAY
32690: ST_TO_ADDR
// end ;
32691: GO 32600
32693: POP
32694: POP
// ComLinkTo ( vehicle , mech ) ;
32695: LD_VAR 0 1
32699: PPUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: CALL_OW 135
// end ;
32709: LD_VAR 0 2
32713: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32714: LD_INT 0
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
// result := [ ] ;
32729: LD_ADDR_VAR 0 7
32733: PUSH
32734: EMPTY
32735: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 266
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: IN
32756: NOT
32757: IFFALSE 32761
// exit ;
32759: GO 34392
// if name then
32761: LD_VAR 0 3
32765: IFFALSE 32781
// SetBName ( base_dep , name ) ;
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: CALL_OW 500
// base := GetBase ( base_dep ) ;
32781: LD_ADDR_VAR 0 15
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 274
32795: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32796: LD_ADDR_VAR 0 16
32800: PUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 255
32810: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32811: LD_ADDR_VAR 0 17
32815: PUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 248
32825: ST_TO_ADDR
// if sources then
32826: LD_VAR 0 5
32830: IFFALSE 32877
// for i = 1 to 3 do
32832: LD_ADDR_VAR 0 8
32836: PUSH
32837: DOUBLE
32838: LD_INT 1
32840: DEC
32841: ST_TO_ADDR
32842: LD_INT 3
32844: PUSH
32845: FOR_TO
32846: IFFALSE 32875
// AddResourceType ( base , i , sources [ i ] ) ;
32848: LD_VAR 0 15
32852: PPUSH
32853: LD_VAR 0 8
32857: PPUSH
32858: LD_VAR 0 5
32862: PUSH
32863: LD_VAR 0 8
32867: ARRAY
32868: PPUSH
32869: CALL_OW 276
32873: GO 32845
32875: POP
32876: POP
// buildings := GetBaseBuildings ( base , area ) ;
32877: LD_ADDR_VAR 0 18
32881: PUSH
32882: LD_VAR 0 15
32886: PPUSH
32887: LD_VAR 0 2
32891: PPUSH
32892: CALL 32169 0 2
32896: ST_TO_ADDR
// InitHc ;
32897: CALL_OW 19
// InitUc ;
32901: CALL_OW 18
// uc_side := side ;
32905: LD_ADDR_OWVAR 20
32909: PUSH
32910: LD_VAR 0 16
32914: ST_TO_ADDR
// uc_nation := nation ;
32915: LD_ADDR_OWVAR 21
32919: PUSH
32920: LD_VAR 0 17
32924: ST_TO_ADDR
// if buildings then
32925: LD_VAR 0 18
32929: IFFALSE 34251
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32931: LD_ADDR_VAR 0 19
32935: PUSH
32936: LD_VAR 0 18
32940: PPUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 30
32946: PUSH
32947: LD_INT 29
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 30
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: PPUSH
32969: CALL_OW 72
32973: ST_TO_ADDR
// if tmp then
32974: LD_VAR 0 19
32978: IFFALSE 33026
// for i in tmp do
32980: LD_ADDR_VAR 0 8
32984: PUSH
32985: LD_VAR 0 19
32989: PUSH
32990: FOR_IN
32991: IFFALSE 33024
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32993: LD_VAR 0 8
32997: PPUSH
32998: CALL_OW 250
33002: PPUSH
33003: LD_VAR 0 8
33007: PPUSH
33008: CALL_OW 251
33012: PPUSH
33013: LD_VAR 0 16
33017: PPUSH
33018: CALL_OW 441
33022: GO 32990
33024: POP
33025: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33026: LD_VAR 0 18
33030: PPUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 30
33036: PUSH
33037: LD_INT 32
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 30
33046: PUSH
33047: LD_INT 33
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 72
33063: IFFALSE 33151
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33065: LD_ADDR_VAR 0 8
33069: PUSH
33070: LD_VAR 0 18
33074: PPUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 30
33080: PUSH
33081: LD_INT 32
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 30
33090: PUSH
33091: LD_INT 33
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 72
33107: PUSH
33108: FOR_IN
33109: IFFALSE 33149
// begin if not GetBWeapon ( i ) then
33111: LD_VAR 0 8
33115: PPUSH
33116: CALL_OW 269
33120: NOT
33121: IFFALSE 33147
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33123: LD_VAR 0 8
33127: PPUSH
33128: LD_VAR 0 8
33132: PPUSH
33133: LD_VAR 0 2
33137: PPUSH
33138: CALL 34397 0 2
33142: PPUSH
33143: CALL_OW 431
// end ;
33147: GO 33108
33149: POP
33150: POP
// end ; for i = 1 to personel do
33151: LD_ADDR_VAR 0 8
33155: PUSH
33156: DOUBLE
33157: LD_INT 1
33159: DEC
33160: ST_TO_ADDR
33161: LD_VAR 0 6
33165: PUSH
33166: FOR_TO
33167: IFFALSE 34231
// begin if i > 4 then
33169: LD_VAR 0 8
33173: PUSH
33174: LD_INT 4
33176: GREATER
33177: IFFALSE 33181
// break ;
33179: GO 34231
// case i of 1 :
33181: LD_VAR 0 8
33185: PUSH
33186: LD_INT 1
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33274
33194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33195: LD_ADDR_VAR 0 12
33199: PUSH
33200: LD_VAR 0 18
33204: PPUSH
33205: LD_INT 22
33207: PUSH
33208: LD_VAR 0 16
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 58
33219: PUSH
33220: EMPTY
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: LD_INT 30
33228: PUSH
33229: LD_INT 32
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 30
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 30
33248: PUSH
33249: LD_INT 5
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: PPUSH
33267: CALL_OW 72
33271: ST_TO_ADDR
33272: GO 33496
33274: LD_INT 2
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33282
33280: GO 33344
33282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33283: LD_ADDR_VAR 0 12
33287: PUSH
33288: LD_VAR 0 18
33292: PPUSH
33293: LD_INT 22
33295: PUSH
33296: LD_VAR 0 16
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 30
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 30
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 72
33341: ST_TO_ADDR
33342: GO 33496
33344: LD_INT 3
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33414
33352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33353: LD_ADDR_VAR 0 12
33357: PUSH
33358: LD_VAR 0 18
33362: PPUSH
33363: LD_INT 22
33365: PUSH
33366: LD_VAR 0 16
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 30
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 30
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PPUSH
33407: CALL_OW 72
33411: ST_TO_ADDR
33412: GO 33496
33414: LD_INT 4
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33495
33422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33423: LD_ADDR_VAR 0 12
33427: PUSH
33428: LD_VAR 0 18
33432: PPUSH
33433: LD_INT 22
33435: PUSH
33436: LD_VAR 0 16
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 30
33450: PUSH
33451: LD_INT 6
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 30
33460: PUSH
33461: LD_INT 7
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 30
33470: PUSH
33471: LD_INT 8
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 72
33492: ST_TO_ADDR
33493: GO 33496
33495: POP
// if i = 1 then
33496: LD_VAR 0 8
33500: PUSH
33501: LD_INT 1
33503: EQUAL
33504: IFFALSE 33615
// begin tmp := [ ] ;
33506: LD_ADDR_VAR 0 19
33510: PUSH
33511: EMPTY
33512: ST_TO_ADDR
// for j in f do
33513: LD_ADDR_VAR 0 9
33517: PUSH
33518: LD_VAR 0 12
33522: PUSH
33523: FOR_IN
33524: IFFALSE 33597
// if GetBType ( j ) = b_bunker then
33526: LD_VAR 0 9
33530: PPUSH
33531: CALL_OW 266
33535: PUSH
33536: LD_INT 32
33538: EQUAL
33539: IFFALSE 33566
// tmp := Insert ( tmp , 1 , j ) else
33541: LD_ADDR_VAR 0 19
33545: PUSH
33546: LD_VAR 0 19
33550: PPUSH
33551: LD_INT 1
33553: PPUSH
33554: LD_VAR 0 9
33558: PPUSH
33559: CALL_OW 2
33563: ST_TO_ADDR
33564: GO 33595
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33566: LD_ADDR_VAR 0 19
33570: PUSH
33571: LD_VAR 0 19
33575: PPUSH
33576: LD_VAR 0 19
33580: PUSH
33581: LD_INT 1
33583: PLUS
33584: PPUSH
33585: LD_VAR 0 9
33589: PPUSH
33590: CALL_OW 2
33594: ST_TO_ADDR
33595: GO 33523
33597: POP
33598: POP
// if tmp then
33599: LD_VAR 0 19
33603: IFFALSE 33615
// f := tmp ;
33605: LD_ADDR_VAR 0 12
33609: PUSH
33610: LD_VAR 0 19
33614: ST_TO_ADDR
// end ; x := personel [ i ] ;
33615: LD_ADDR_VAR 0 13
33619: PUSH
33620: LD_VAR 0 6
33624: PUSH
33625: LD_VAR 0 8
33629: ARRAY
33630: ST_TO_ADDR
// if x = - 1 then
33631: LD_VAR 0 13
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: EQUAL
33640: IFFALSE 33849
// begin for j in f do
33642: LD_ADDR_VAR 0 9
33646: PUSH
33647: LD_VAR 0 12
33651: PUSH
33652: FOR_IN
33653: IFFALSE 33845
// repeat InitHc ;
33655: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33659: LD_VAR 0 9
33663: PPUSH
33664: CALL_OW 266
33668: PUSH
33669: LD_INT 5
33671: EQUAL
33672: IFFALSE 33742
// begin if UnitsInside ( j ) < 3 then
33674: LD_VAR 0 9
33678: PPUSH
33679: CALL_OW 313
33683: PUSH
33684: LD_INT 3
33686: LESS
33687: IFFALSE 33723
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33689: LD_INT 0
33691: PPUSH
33692: LD_INT 5
33694: PUSH
33695: LD_INT 8
33697: PUSH
33698: LD_INT 9
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: LD_VAR 0 17
33710: ARRAY
33711: PPUSH
33712: LD_VAR 0 4
33716: PPUSH
33717: CALL_OW 380
33721: GO 33740
// PrepareHuman ( false , i , skill ) ;
33723: LD_INT 0
33725: PPUSH
33726: LD_VAR 0 8
33730: PPUSH
33731: LD_VAR 0 4
33735: PPUSH
33736: CALL_OW 380
// end else
33740: GO 33759
// PrepareHuman ( false , i , skill ) ;
33742: LD_INT 0
33744: PPUSH
33745: LD_VAR 0 8
33749: PPUSH
33750: LD_VAR 0 4
33754: PPUSH
33755: CALL_OW 380
// un := CreateHuman ;
33759: LD_ADDR_VAR 0 14
33763: PUSH
33764: CALL_OW 44
33768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33769: LD_ADDR_VAR 0 7
33773: PUSH
33774: LD_VAR 0 7
33778: PPUSH
33779: LD_INT 1
33781: PPUSH
33782: LD_VAR 0 14
33786: PPUSH
33787: CALL_OW 2
33791: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33792: LD_VAR 0 14
33796: PPUSH
33797: LD_VAR 0 9
33801: PPUSH
33802: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33806: LD_VAR 0 9
33810: PPUSH
33811: CALL_OW 313
33815: PUSH
33816: LD_INT 6
33818: EQUAL
33819: PUSH
33820: LD_VAR 0 9
33824: PPUSH
33825: CALL_OW 266
33829: PUSH
33830: LD_INT 32
33832: PUSH
33833: LD_INT 31
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: IN
33840: OR
33841: IFFALSE 33655
33843: GO 33652
33845: POP
33846: POP
// end else
33847: GO 34229
// for j = 1 to x do
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: DOUBLE
33855: LD_INT 1
33857: DEC
33858: ST_TO_ADDR
33859: LD_VAR 0 13
33863: PUSH
33864: FOR_TO
33865: IFFALSE 34227
// begin InitHc ;
33867: CALL_OW 19
// if not f then
33871: LD_VAR 0 12
33875: NOT
33876: IFFALSE 33965
// begin PrepareHuman ( false , i , skill ) ;
33878: LD_INT 0
33880: PPUSH
33881: LD_VAR 0 8
33885: PPUSH
33886: LD_VAR 0 4
33890: PPUSH
33891: CALL_OW 380
// un := CreateHuman ;
33895: LD_ADDR_VAR 0 14
33899: PUSH
33900: CALL_OW 44
33904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33905: LD_ADDR_VAR 0 7
33909: PUSH
33910: LD_VAR 0 7
33914: PPUSH
33915: LD_INT 1
33917: PPUSH
33918: LD_VAR 0 14
33922: PPUSH
33923: CALL_OW 2
33927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33928: LD_VAR 0 14
33932: PPUSH
33933: LD_VAR 0 1
33937: PPUSH
33938: CALL_OW 250
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: CALL_OW 251
33952: PPUSH
33953: LD_INT 10
33955: PPUSH
33956: LD_INT 0
33958: PPUSH
33959: CALL_OW 50
// continue ;
33963: GO 33864
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33965: LD_VAR 0 12
33969: PUSH
33970: LD_INT 1
33972: ARRAY
33973: PPUSH
33974: CALL_OW 313
33978: PUSH
33979: LD_VAR 0 12
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: PPUSH
33988: CALL_OW 266
33992: PUSH
33993: LD_INT 32
33995: PUSH
33996: LD_INT 31
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: IN
34003: AND
34004: PUSH
34005: LD_VAR 0 12
34009: PUSH
34010: LD_INT 1
34012: ARRAY
34013: PPUSH
34014: CALL_OW 313
34018: PUSH
34019: LD_INT 6
34021: EQUAL
34022: OR
34023: IFFALSE 34043
// f := Delete ( f , 1 ) ;
34025: LD_ADDR_VAR 0 12
34029: PUSH
34030: LD_VAR 0 12
34034: PPUSH
34035: LD_INT 1
34037: PPUSH
34038: CALL_OW 3
34042: ST_TO_ADDR
// if not f then
34043: LD_VAR 0 12
34047: NOT
34048: IFFALSE 34066
// begin x := x + 2 ;
34050: LD_ADDR_VAR 0 13
34054: PUSH
34055: LD_VAR 0 13
34059: PUSH
34060: LD_INT 2
34062: PLUS
34063: ST_TO_ADDR
// continue ;
34064: GO 33864
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34066: LD_VAR 0 12
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: PPUSH
34075: CALL_OW 266
34079: PUSH
34080: LD_INT 5
34082: EQUAL
34083: IFFALSE 34157
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34085: LD_VAR 0 12
34089: PUSH
34090: LD_INT 1
34092: ARRAY
34093: PPUSH
34094: CALL_OW 313
34098: PUSH
34099: LD_INT 3
34101: LESS
34102: IFFALSE 34138
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34104: LD_INT 0
34106: PPUSH
34107: LD_INT 5
34109: PUSH
34110: LD_INT 8
34112: PUSH
34113: LD_INT 9
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: PUSH
34121: LD_VAR 0 17
34125: ARRAY
34126: PPUSH
34127: LD_VAR 0 4
34131: PPUSH
34132: CALL_OW 380
34136: GO 34155
// PrepareHuman ( false , i , skill ) ;
34138: LD_INT 0
34140: PPUSH
34141: LD_VAR 0 8
34145: PPUSH
34146: LD_VAR 0 4
34150: PPUSH
34151: CALL_OW 380
// end else
34155: GO 34174
// PrepareHuman ( false , i , skill ) ;
34157: LD_INT 0
34159: PPUSH
34160: LD_VAR 0 8
34164: PPUSH
34165: LD_VAR 0 4
34169: PPUSH
34170: CALL_OW 380
// un := CreateHuman ;
34174: LD_ADDR_VAR 0 14
34178: PUSH
34179: CALL_OW 44
34183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34184: LD_ADDR_VAR 0 7
34188: PUSH
34189: LD_VAR 0 7
34193: PPUSH
34194: LD_INT 1
34196: PPUSH
34197: LD_VAR 0 14
34201: PPUSH
34202: CALL_OW 2
34206: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34207: LD_VAR 0 14
34211: PPUSH
34212: LD_VAR 0 12
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PPUSH
34221: CALL_OW 52
// end ;
34225: GO 33864
34227: POP
34228: POP
// end ;
34229: GO 33166
34231: POP
34232: POP
// result := result ^ buildings ;
34233: LD_ADDR_VAR 0 7
34237: PUSH
34238: LD_VAR 0 7
34242: PUSH
34243: LD_VAR 0 18
34247: ADD
34248: ST_TO_ADDR
// end else
34249: GO 34392
// begin for i = 1 to personel do
34251: LD_ADDR_VAR 0 8
34255: PUSH
34256: DOUBLE
34257: LD_INT 1
34259: DEC
34260: ST_TO_ADDR
34261: LD_VAR 0 6
34265: PUSH
34266: FOR_TO
34267: IFFALSE 34390
// begin if i > 4 then
34269: LD_VAR 0 8
34273: PUSH
34274: LD_INT 4
34276: GREATER
34277: IFFALSE 34281
// break ;
34279: GO 34390
// x := personel [ i ] ;
34281: LD_ADDR_VAR 0 13
34285: PUSH
34286: LD_VAR 0 6
34290: PUSH
34291: LD_VAR 0 8
34295: ARRAY
34296: ST_TO_ADDR
// if x = - 1 then
34297: LD_VAR 0 13
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: EQUAL
34306: IFFALSE 34310
// continue ;
34308: GO 34266
// PrepareHuman ( false , i , skill ) ;
34310: LD_INT 0
34312: PPUSH
34313: LD_VAR 0 8
34317: PPUSH
34318: LD_VAR 0 4
34322: PPUSH
34323: CALL_OW 380
// un := CreateHuman ;
34327: LD_ADDR_VAR 0 14
34331: PUSH
34332: CALL_OW 44
34336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34337: LD_VAR 0 14
34341: PPUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 250
34351: PPUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 251
34361: PPUSH
34362: LD_INT 10
34364: PPUSH
34365: LD_INT 0
34367: PPUSH
34368: CALL_OW 50
// result := result ^ un ;
34372: LD_ADDR_VAR 0 7
34376: PUSH
34377: LD_VAR 0 7
34381: PUSH
34382: LD_VAR 0 14
34386: ADD
34387: ST_TO_ADDR
// end ;
34388: GO 34266
34390: POP
34391: POP
// end ; end ;
34392: LD_VAR 0 7
34396: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34397: LD_INT 0
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
// result := false ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_INT 0
34422: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34423: LD_VAR 0 1
34427: NOT
34428: PUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: CALL_OW 266
34438: PUSH
34439: LD_INT 32
34441: PUSH
34442: LD_INT 33
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: IN
34449: NOT
34450: OR
34451: IFFALSE 34455
// exit ;
34453: GO 35591
// nat := GetNation ( tower ) ;
34455: LD_ADDR_VAR 0 12
34459: PUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL_OW 248
34469: ST_TO_ADDR
// side := GetSide ( tower ) ;
34470: LD_ADDR_VAR 0 16
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 255
34484: ST_TO_ADDR
// x := GetX ( tower ) ;
34485: LD_ADDR_VAR 0 10
34489: PUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 250
34499: ST_TO_ADDR
// y := GetY ( tower ) ;
34500: LD_ADDR_VAR 0 11
34504: PUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 251
34514: ST_TO_ADDR
// if not x or not y then
34515: LD_VAR 0 10
34519: NOT
34520: PUSH
34521: LD_VAR 0 11
34525: NOT
34526: OR
34527: IFFALSE 34531
// exit ;
34529: GO 35591
// weapon := 0 ;
34531: LD_ADDR_VAR 0 18
34535: PUSH
34536: LD_INT 0
34538: ST_TO_ADDR
// fac_list := [ ] ;
34539: LD_ADDR_VAR 0 17
34543: PUSH
34544: EMPTY
34545: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34546: LD_ADDR_VAR 0 6
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 274
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: CALL 32169 0 2
34570: PPUSH
34571: LD_INT 30
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PPUSH
34581: CALL_OW 72
34585: ST_TO_ADDR
// if not factories then
34586: LD_VAR 0 6
34590: NOT
34591: IFFALSE 34595
// exit ;
34593: GO 35591
// for i in factories do
34595: LD_ADDR_VAR 0 8
34599: PUSH
34600: LD_VAR 0 6
34604: PUSH
34605: FOR_IN
34606: IFFALSE 34631
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34608: LD_ADDR_VAR 0 17
34612: PUSH
34613: LD_VAR 0 17
34617: PUSH
34618: LD_VAR 0 8
34622: PPUSH
34623: CALL_OW 478
34627: UNION
34628: ST_TO_ADDR
34629: GO 34605
34631: POP
34632: POP
// if not fac_list then
34633: LD_VAR 0 17
34637: NOT
34638: IFFALSE 34642
// exit ;
34640: GO 35591
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34642: LD_ADDR_VAR 0 5
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: LD_INT 5
34652: PUSH
34653: LD_INT 9
34655: PUSH
34656: LD_INT 10
34658: PUSH
34659: LD_INT 6
34661: PUSH
34662: LD_INT 7
34664: PUSH
34665: LD_INT 11
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 27
34679: PUSH
34680: LD_INT 28
34682: PUSH
34683: LD_INT 26
34685: PUSH
34686: LD_INT 30
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 43
34697: PUSH
34698: LD_INT 44
34700: PUSH
34701: LD_INT 46
34703: PUSH
34704: LD_INT 45
34706: PUSH
34707: LD_INT 47
34709: PUSH
34710: LD_INT 49
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: PUSH
34726: LD_VAR 0 12
34730: ARRAY
34731: ST_TO_ADDR
// for i in list do
34732: LD_ADDR_VAR 0 8
34736: PUSH
34737: LD_VAR 0 5
34741: PUSH
34742: FOR_IN
34743: IFFALSE 34776
// if not i in fac_list then
34745: LD_VAR 0 8
34749: PUSH
34750: LD_VAR 0 17
34754: IN
34755: NOT
34756: IFFALSE 34774
// list := list diff i ;
34758: LD_ADDR_VAR 0 5
34762: PUSH
34763: LD_VAR 0 5
34767: PUSH
34768: LD_VAR 0 8
34772: DIFF
34773: ST_TO_ADDR
34774: GO 34742
34776: POP
34777: POP
// if not list then
34778: LD_VAR 0 5
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 35591
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34787: LD_VAR 0 12
34791: PUSH
34792: LD_INT 3
34794: EQUAL
34795: PUSH
34796: LD_INT 49
34798: PUSH
34799: LD_VAR 0 5
34803: IN
34804: AND
34805: PUSH
34806: LD_INT 31
34808: PPUSH
34809: LD_VAR 0 16
34813: PPUSH
34814: CALL_OW 321
34818: PUSH
34819: LD_INT 2
34821: EQUAL
34822: AND
34823: IFFALSE 34883
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34825: LD_INT 22
34827: PUSH
34828: LD_VAR 0 16
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 35
34839: PUSH
34840: LD_INT 49
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 91
34849: PUSH
34850: LD_VAR 0 1
34854: PUSH
34855: LD_INT 10
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL_OW 69
34872: NOT
34873: IFFALSE 34883
// weapon := ru_time_lapser ;
34875: LD_ADDR_VAR 0 18
34879: PUSH
34880: LD_INT 49
34882: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34883: LD_VAR 0 12
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: IN
34898: PUSH
34899: LD_INT 11
34901: PUSH
34902: LD_VAR 0 5
34906: IN
34907: PUSH
34908: LD_INT 30
34910: PUSH
34911: LD_VAR 0 5
34915: IN
34916: OR
34917: AND
34918: PUSH
34919: LD_INT 6
34921: PPUSH
34922: LD_VAR 0 16
34926: PPUSH
34927: CALL_OW 321
34931: PUSH
34932: LD_INT 2
34934: EQUAL
34935: AND
34936: IFFALSE 35101
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34938: LD_INT 22
34940: PUSH
34941: LD_VAR 0 16
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 35
34955: PUSH
34956: LD_INT 11
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 35
34965: PUSH
34966: LD_INT 30
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 91
34980: PUSH
34981: LD_VAR 0 1
34985: PUSH
34986: LD_INT 18
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: PPUSH
34999: CALL_OW 69
35003: NOT
35004: PUSH
35005: LD_INT 22
35007: PUSH
35008: LD_VAR 0 16
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 30
35022: PUSH
35023: LD_INT 32
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 30
35032: PUSH
35033: LD_INT 33
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 91
35047: PUSH
35048: LD_VAR 0 1
35052: PUSH
35053: LD_INT 12
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: PPUSH
35069: CALL_OW 69
35073: PUSH
35074: LD_INT 2
35076: GREATER
35077: AND
35078: IFFALSE 35101
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35080: LD_ADDR_VAR 0 18
35084: PUSH
35085: LD_INT 11
35087: PUSH
35088: LD_INT 30
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_VAR 0 12
35099: ARRAY
35100: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35101: LD_VAR 0 18
35105: NOT
35106: PUSH
35107: LD_INT 40
35109: PPUSH
35110: LD_VAR 0 16
35114: PPUSH
35115: CALL_OW 321
35119: PUSH
35120: LD_INT 2
35122: EQUAL
35123: AND
35124: PUSH
35125: LD_INT 7
35127: PUSH
35128: LD_VAR 0 5
35132: IN
35133: PUSH
35134: LD_INT 28
35136: PUSH
35137: LD_VAR 0 5
35141: IN
35142: OR
35143: PUSH
35144: LD_INT 45
35146: PUSH
35147: LD_VAR 0 5
35151: IN
35152: OR
35153: AND
35154: IFFALSE 35408
// begin hex := GetHexInfo ( x , y ) ;
35156: LD_ADDR_VAR 0 4
35160: PUSH
35161: LD_VAR 0 10
35165: PPUSH
35166: LD_VAR 0 11
35170: PPUSH
35171: CALL_OW 546
35175: ST_TO_ADDR
// if hex [ 1 ] then
35176: LD_VAR 0 4
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: IFFALSE 35188
// exit ;
35186: GO 35591
// height := hex [ 2 ] ;
35188: LD_ADDR_VAR 0 15
35192: PUSH
35193: LD_VAR 0 4
35197: PUSH
35198: LD_INT 2
35200: ARRAY
35201: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35202: LD_ADDR_VAR 0 14
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 3
35215: PUSH
35216: LD_INT 5
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// for i in tmp do
35225: LD_ADDR_VAR 0 8
35229: PUSH
35230: LD_VAR 0 14
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35406
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: LD_VAR 0 10
35247: PPUSH
35248: LD_VAR 0 8
35252: PPUSH
35253: LD_INT 5
35255: PPUSH
35256: CALL_OW 272
35260: PUSH
35261: LD_VAR 0 11
35265: PPUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: LD_INT 5
35273: PPUSH
35274: CALL_OW 273
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35283: LD_VAR 0 9
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: LD_VAR 0 9
35296: PUSH
35297: LD_INT 2
35299: ARRAY
35300: PPUSH
35301: CALL_OW 488
35305: IFFALSE 35404
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: LD_VAR 0 9
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: PPUSH
35321: LD_VAR 0 9
35325: PUSH
35326: LD_INT 2
35328: ARRAY
35329: PPUSH
35330: CALL_OW 546
35334: ST_TO_ADDR
// if hex [ 1 ] then
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 1
35342: ARRAY
35343: IFFALSE 35347
// continue ;
35345: GO 35235
// h := hex [ 2 ] ;
35347: LD_ADDR_VAR 0 13
35351: PUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: ST_TO_ADDR
// if h + 7 < height then
35361: LD_VAR 0 13
35365: PUSH
35366: LD_INT 7
35368: PLUS
35369: PUSH
35370: LD_VAR 0 15
35374: LESS
35375: IFFALSE 35404
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35377: LD_ADDR_VAR 0 18
35381: PUSH
35382: LD_INT 7
35384: PUSH
35385: LD_INT 28
35387: PUSH
35388: LD_INT 45
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: PUSH
35396: LD_VAR 0 12
35400: ARRAY
35401: ST_TO_ADDR
// break ;
35402: GO 35406
// end ; end ; end ;
35404: GO 35235
35406: POP
35407: POP
// end ; if not weapon then
35408: LD_VAR 0 18
35412: NOT
35413: IFFALSE 35473
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35415: LD_ADDR_VAR 0 5
35419: PUSH
35420: LD_VAR 0 5
35424: PUSH
35425: LD_INT 11
35427: PUSH
35428: LD_INT 30
35430: PUSH
35431: LD_INT 49
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: DIFF
35439: ST_TO_ADDR
// if not list then
35440: LD_VAR 0 5
35444: NOT
35445: IFFALSE 35449
// exit ;
35447: GO 35591
// weapon := list [ rand ( 1 , list ) ] ;
35449: LD_ADDR_VAR 0 18
35453: PUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_INT 1
35461: PPUSH
35462: LD_VAR 0 5
35466: PPUSH
35467: CALL_OW 12
35471: ARRAY
35472: ST_TO_ADDR
// end ; if weapon then
35473: LD_VAR 0 18
35477: IFFALSE 35591
// begin tmp := CostOfWeapon ( weapon ) ;
35479: LD_ADDR_VAR 0 14
35483: PUSH
35484: LD_VAR 0 18
35488: PPUSH
35489: CALL_OW 451
35493: ST_TO_ADDR
// j := GetBase ( tower ) ;
35494: LD_ADDR_VAR 0 9
35498: PUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 274
35508: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35509: LD_VAR 0 9
35513: PPUSH
35514: LD_INT 1
35516: PPUSH
35517: CALL_OW 275
35521: PUSH
35522: LD_VAR 0 14
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: GREATEREQUAL
35531: PUSH
35532: LD_VAR 0 9
35536: PPUSH
35537: LD_INT 2
35539: PPUSH
35540: CALL_OW 275
35544: PUSH
35545: LD_VAR 0 14
35549: PUSH
35550: LD_INT 2
35552: ARRAY
35553: GREATEREQUAL
35554: AND
35555: PUSH
35556: LD_VAR 0 9
35560: PPUSH
35561: LD_INT 3
35563: PPUSH
35564: CALL_OW 275
35568: PUSH
35569: LD_VAR 0 14
35573: PUSH
35574: LD_INT 3
35576: ARRAY
35577: GREATEREQUAL
35578: AND
35579: IFFALSE 35591
// result := weapon ;
35581: LD_ADDR_VAR 0 3
35585: PUSH
35586: LD_VAR 0 18
35590: ST_TO_ADDR
// end ; end ;
35591: LD_VAR 0 3
35595: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35596: LD_INT 0
35598: PPUSH
35599: PPUSH
// result := true ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_INT 1
35607: ST_TO_ADDR
// if array1 = array2 then
35608: LD_VAR 0 1
35612: PUSH
35613: LD_VAR 0 2
35617: EQUAL
35618: IFFALSE 35678
// begin for i = 1 to array1 do
35620: LD_ADDR_VAR 0 4
35624: PUSH
35625: DOUBLE
35626: LD_INT 1
35628: DEC
35629: ST_TO_ADDR
35630: LD_VAR 0 1
35634: PUSH
35635: FOR_TO
35636: IFFALSE 35674
// if array1 [ i ] <> array2 [ i ] then
35638: LD_VAR 0 1
35642: PUSH
35643: LD_VAR 0 4
35647: ARRAY
35648: PUSH
35649: LD_VAR 0 2
35653: PUSH
35654: LD_VAR 0 4
35658: ARRAY
35659: NONEQUAL
35660: IFFALSE 35672
// begin result := false ;
35662: LD_ADDR_VAR 0 3
35666: PUSH
35667: LD_INT 0
35669: ST_TO_ADDR
// break ;
35670: GO 35674
// end ;
35672: GO 35635
35674: POP
35675: POP
// end else
35676: GO 35686
// result := false ;
35678: LD_ADDR_VAR 0 3
35682: PUSH
35683: LD_INT 0
35685: ST_TO_ADDR
// end ;
35686: LD_VAR 0 3
35690: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35691: LD_INT 0
35693: PPUSH
35694: PPUSH
35695: PPUSH
// pom := GetBase ( fac ) ;
35696: LD_ADDR_VAR 0 5
35700: PUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: CALL_OW 274
35710: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35711: LD_ADDR_VAR 0 4
35715: PUSH
35716: LD_VAR 0 2
35720: PUSH
35721: LD_INT 1
35723: ARRAY
35724: PPUSH
35725: LD_VAR 0 2
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: LD_VAR 0 2
35738: PUSH
35739: LD_INT 3
35741: ARRAY
35742: PPUSH
35743: LD_VAR 0 2
35747: PUSH
35748: LD_INT 4
35750: ARRAY
35751: PPUSH
35752: CALL_OW 449
35756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_VAR 0 5
35766: PPUSH
35767: LD_INT 1
35769: PPUSH
35770: CALL_OW 275
35774: PUSH
35775: LD_VAR 0 4
35779: PUSH
35780: LD_INT 1
35782: ARRAY
35783: GREATEREQUAL
35784: PUSH
35785: LD_VAR 0 5
35789: PPUSH
35790: LD_INT 2
35792: PPUSH
35793: CALL_OW 275
35797: PUSH
35798: LD_VAR 0 4
35802: PUSH
35803: LD_INT 2
35805: ARRAY
35806: GREATEREQUAL
35807: AND
35808: PUSH
35809: LD_VAR 0 5
35813: PPUSH
35814: LD_INT 3
35816: PPUSH
35817: CALL_OW 275
35821: PUSH
35822: LD_VAR 0 4
35826: PUSH
35827: LD_INT 3
35829: ARRAY
35830: GREATEREQUAL
35831: AND
35832: ST_TO_ADDR
// end ;
35833: LD_VAR 0 3
35837: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35838: LD_INT 0
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
// pom := GetBase ( building ) ;
35844: LD_ADDR_VAR 0 3
35848: PUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 274
35858: ST_TO_ADDR
// if not pom then
35859: LD_VAR 0 3
35863: NOT
35864: IFFALSE 35868
// exit ;
35866: GO 36038
// btype := GetBType ( building ) ;
35868: LD_ADDR_VAR 0 5
35872: PUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 266
35882: ST_TO_ADDR
// if btype = b_armoury then
35883: LD_VAR 0 5
35887: PUSH
35888: LD_INT 4
35890: EQUAL
35891: IFFALSE 35901
// btype := b_barracks ;
35893: LD_ADDR_VAR 0 5
35897: PUSH
35898: LD_INT 5
35900: ST_TO_ADDR
// if btype = b_depot then
35901: LD_VAR 0 5
35905: PUSH
35906: LD_INT 0
35908: EQUAL
35909: IFFALSE 35919
// btype := b_warehouse ;
35911: LD_ADDR_VAR 0 5
35915: PUSH
35916: LD_INT 1
35918: ST_TO_ADDR
// if btype = b_workshop then
35919: LD_VAR 0 5
35923: PUSH
35924: LD_INT 2
35926: EQUAL
35927: IFFALSE 35937
// btype := b_factory ;
35929: LD_ADDR_VAR 0 5
35933: PUSH
35934: LD_INT 3
35936: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35937: LD_ADDR_VAR 0 4
35941: PUSH
35942: LD_VAR 0 5
35946: PPUSH
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 248
35956: PPUSH
35957: CALL_OW 450
35961: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35962: LD_ADDR_VAR 0 2
35966: PUSH
35967: LD_VAR 0 3
35971: PPUSH
35972: LD_INT 1
35974: PPUSH
35975: CALL_OW 275
35979: PUSH
35980: LD_VAR 0 4
35984: PUSH
35985: LD_INT 1
35987: ARRAY
35988: GREATEREQUAL
35989: PUSH
35990: LD_VAR 0 3
35994: PPUSH
35995: LD_INT 2
35997: PPUSH
35998: CALL_OW 275
36002: PUSH
36003: LD_VAR 0 4
36007: PUSH
36008: LD_INT 2
36010: ARRAY
36011: GREATEREQUAL
36012: AND
36013: PUSH
36014: LD_VAR 0 3
36018: PPUSH
36019: LD_INT 3
36021: PPUSH
36022: CALL_OW 275
36026: PUSH
36027: LD_VAR 0 4
36031: PUSH
36032: LD_INT 3
36034: ARRAY
36035: GREATEREQUAL
36036: AND
36037: ST_TO_ADDR
// end ;
36038: LD_VAR 0 2
36042: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36043: LD_INT 0
36045: PPUSH
36046: PPUSH
36047: PPUSH
// pom := GetBase ( building ) ;
36048: LD_ADDR_VAR 0 4
36052: PUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 274
36062: ST_TO_ADDR
// if not pom then
36063: LD_VAR 0 4
36067: NOT
36068: IFFALSE 36072
// exit ;
36070: GO 36173
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36072: LD_ADDR_VAR 0 5
36076: PUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 248
36091: PPUSH
36092: CALL_OW 450
36096: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: LD_VAR 0 4
36106: PPUSH
36107: LD_INT 1
36109: PPUSH
36110: CALL_OW 275
36114: PUSH
36115: LD_VAR 0 5
36119: PUSH
36120: LD_INT 1
36122: ARRAY
36123: GREATEREQUAL
36124: PUSH
36125: LD_VAR 0 4
36129: PPUSH
36130: LD_INT 2
36132: PPUSH
36133: CALL_OW 275
36137: PUSH
36138: LD_VAR 0 5
36142: PUSH
36143: LD_INT 2
36145: ARRAY
36146: GREATEREQUAL
36147: AND
36148: PUSH
36149: LD_VAR 0 4
36153: PPUSH
36154: LD_INT 3
36156: PPUSH
36157: CALL_OW 275
36161: PUSH
36162: LD_VAR 0 5
36166: PUSH
36167: LD_INT 3
36169: ARRAY
36170: GREATEREQUAL
36171: AND
36172: ST_TO_ADDR
// end ;
36173: LD_VAR 0 3
36177: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36178: LD_INT 0
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
// result := false ;
36190: LD_ADDR_VAR 0 6
36194: PUSH
36195: LD_INT 0
36197: ST_TO_ADDR
// if not base or not btype or not x or not y then
36198: LD_VAR 0 1
36202: NOT
36203: PUSH
36204: LD_VAR 0 2
36208: NOT
36209: OR
36210: PUSH
36211: LD_VAR 0 3
36215: NOT
36216: OR
36217: PUSH
36218: LD_VAR 0 4
36222: NOT
36223: OR
36224: IFFALSE 36228
// exit ;
36226: GO 36837
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36228: LD_ADDR_VAR 0 12
36232: PUSH
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_VAR 0 3
36242: PPUSH
36243: LD_VAR 0 4
36247: PPUSH
36248: LD_VAR 0 5
36252: PPUSH
36253: LD_VAR 0 1
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PPUSH
36262: CALL_OW 248
36266: PPUSH
36267: LD_INT 0
36269: PPUSH
36270: CALL 37674 0 6
36274: ST_TO_ADDR
// if not hexes then
36275: LD_VAR 0 12
36279: NOT
36280: IFFALSE 36284
// exit ;
36282: GO 36837
// for i = 1 to hexes do
36284: LD_ADDR_VAR 0 7
36288: PUSH
36289: DOUBLE
36290: LD_INT 1
36292: DEC
36293: ST_TO_ADDR
36294: LD_VAR 0 12
36298: PUSH
36299: FOR_TO
36300: IFFALSE 36835
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36302: LD_ADDR_VAR 0 11
36306: PUSH
36307: LD_VAR 0 12
36311: PUSH
36312: LD_VAR 0 7
36316: ARRAY
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 12
36326: PUSH
36327: LD_VAR 0 7
36331: ARRAY
36332: PUSH
36333: LD_INT 2
36335: ARRAY
36336: PPUSH
36337: CALL_OW 428
36341: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36342: LD_VAR 0 12
36346: PUSH
36347: LD_VAR 0 7
36351: ARRAY
36352: PUSH
36353: LD_INT 1
36355: ARRAY
36356: PPUSH
36357: LD_VAR 0 12
36361: PUSH
36362: LD_VAR 0 7
36366: ARRAY
36367: PUSH
36368: LD_INT 2
36370: ARRAY
36371: PPUSH
36372: CALL_OW 351
36376: PUSH
36377: LD_VAR 0 12
36381: PUSH
36382: LD_VAR 0 7
36386: ARRAY
36387: PUSH
36388: LD_INT 1
36390: ARRAY
36391: PPUSH
36392: LD_VAR 0 12
36396: PUSH
36397: LD_VAR 0 7
36401: ARRAY
36402: PUSH
36403: LD_INT 2
36405: ARRAY
36406: PPUSH
36407: CALL_OW 488
36411: NOT
36412: OR
36413: PUSH
36414: LD_VAR 0 11
36418: PPUSH
36419: CALL_OW 247
36423: PUSH
36424: LD_INT 3
36426: EQUAL
36427: OR
36428: IFFALSE 36434
// exit ;
36430: POP
36431: POP
36432: GO 36837
// if not tmp or not tmp in base then
36434: LD_VAR 0 11
36438: NOT
36439: PUSH
36440: LD_VAR 0 11
36444: PUSH
36445: LD_VAR 0 1
36449: IN
36450: NOT
36451: OR
36452: IFFALSE 36456
// continue ;
36454: GO 36299
// result := true ;
36456: LD_ADDR_VAR 0 6
36460: PUSH
36461: LD_INT 1
36463: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36464: LD_ADDR_VAR 0 15
36468: PUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: LD_INT 22
36476: PUSH
36477: LD_VAR 0 11
36481: PPUSH
36482: CALL_OW 255
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: LD_INT 30
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 30
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PPUSH
36523: CALL_OW 72
36527: ST_TO_ADDR
// if dep then
36528: LD_VAR 0 15
36532: IFFALSE 36668
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36534: LD_ADDR_VAR 0 14
36538: PUSH
36539: LD_VAR 0 15
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PPUSH
36548: CALL_OW 250
36552: PPUSH
36553: LD_VAR 0 15
36557: PUSH
36558: LD_INT 1
36560: ARRAY
36561: PPUSH
36562: CALL_OW 254
36566: PPUSH
36567: LD_INT 5
36569: PPUSH
36570: CALL_OW 272
36574: PUSH
36575: LD_VAR 0 15
36579: PUSH
36580: LD_INT 1
36582: ARRAY
36583: PPUSH
36584: CALL_OW 251
36588: PPUSH
36589: LD_VAR 0 15
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: PPUSH
36598: CALL_OW 254
36602: PPUSH
36603: LD_INT 5
36605: PPUSH
36606: CALL_OW 273
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36615: LD_VAR 0 14
36619: PUSH
36620: LD_INT 1
36622: ARRAY
36623: PPUSH
36624: LD_VAR 0 14
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: PPUSH
36633: CALL_OW 488
36637: IFFALSE 36668
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36639: LD_VAR 0 11
36643: PPUSH
36644: LD_VAR 0 14
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 14
36657: PUSH
36658: LD_INT 2
36660: ARRAY
36661: PPUSH
36662: CALL_OW 111
// continue ;
36666: GO 36299
// end ; end ; r := GetDir ( tmp ) ;
36668: LD_ADDR_VAR 0 13
36672: PUSH
36673: LD_VAR 0 11
36677: PPUSH
36678: CALL_OW 254
36682: ST_TO_ADDR
// if r = 5 then
36683: LD_VAR 0 13
36687: PUSH
36688: LD_INT 5
36690: EQUAL
36691: IFFALSE 36701
// r := 0 ;
36693: LD_ADDR_VAR 0 13
36697: PUSH
36698: LD_INT 0
36700: ST_TO_ADDR
// for j = r to 5 do
36701: LD_ADDR_VAR 0 8
36705: PUSH
36706: DOUBLE
36707: LD_VAR 0 13
36711: DEC
36712: ST_TO_ADDR
36713: LD_INT 5
36715: PUSH
36716: FOR_TO
36717: IFFALSE 36831
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36719: LD_ADDR_VAR 0 9
36723: PUSH
36724: LD_VAR 0 11
36728: PPUSH
36729: CALL_OW 250
36733: PPUSH
36734: LD_VAR 0 8
36738: PPUSH
36739: LD_INT 2
36741: PPUSH
36742: CALL_OW 272
36746: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36747: LD_ADDR_VAR 0 10
36751: PUSH
36752: LD_VAR 0 11
36756: PPUSH
36757: CALL_OW 251
36761: PPUSH
36762: LD_VAR 0 8
36766: PPUSH
36767: LD_INT 2
36769: PPUSH
36770: CALL_OW 273
36774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36775: LD_VAR 0 9
36779: PPUSH
36780: LD_VAR 0 10
36784: PPUSH
36785: CALL_OW 488
36789: PUSH
36790: LD_VAR 0 9
36794: PPUSH
36795: LD_VAR 0 10
36799: PPUSH
36800: CALL_OW 428
36804: NOT
36805: AND
36806: IFFALSE 36829
// begin ComMoveXY ( tmp , _x , _y ) ;
36808: LD_VAR 0 11
36812: PPUSH
36813: LD_VAR 0 9
36817: PPUSH
36818: LD_VAR 0 10
36822: PPUSH
36823: CALL_OW 111
// break ;
36827: GO 36831
// end ; end ;
36829: GO 36716
36831: POP
36832: POP
// end ;
36833: GO 36299
36835: POP
36836: POP
// end ;
36837: LD_VAR 0 6
36841: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36842: LD_INT 0
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
// result := false ;
36854: LD_ADDR_VAR 0 6
36858: PUSH
36859: LD_INT 0
36861: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36862: LD_VAR 0 1
36866: NOT
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 266
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: IN
36888: NOT
36889: OR
36890: PUSH
36891: LD_VAR 0 2
36895: NOT
36896: OR
36897: PUSH
36898: LD_VAR 0 5
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: LD_INT 4
36917: PUSH
36918: LD_INT 5
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: IN
36929: NOT
36930: OR
36931: PUSH
36932: LD_VAR 0 3
36936: PPUSH
36937: LD_VAR 0 4
36941: PPUSH
36942: CALL_OW 488
36946: NOT
36947: OR
36948: IFFALSE 36952
// exit ;
36950: GO 37669
// pom := GetBase ( depot ) ;
36952: LD_ADDR_VAR 0 10
36956: PUSH
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 274
36966: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36967: LD_ADDR_VAR 0 11
36971: PUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 248
36986: PPUSH
36987: CALL_OW 450
36991: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36992: LD_VAR 0 10
36996: PPUSH
36997: LD_INT 1
36999: PPUSH
37000: CALL_OW 275
37004: PUSH
37005: LD_VAR 0 11
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: GREATEREQUAL
37014: PUSH
37015: LD_VAR 0 10
37019: PPUSH
37020: LD_INT 2
37022: PPUSH
37023: CALL_OW 275
37027: PUSH
37028: LD_VAR 0 11
37032: PUSH
37033: LD_INT 2
37035: ARRAY
37036: GREATEREQUAL
37037: AND
37038: PUSH
37039: LD_VAR 0 10
37043: PPUSH
37044: LD_INT 3
37046: PPUSH
37047: CALL_OW 275
37051: PUSH
37052: LD_VAR 0 11
37056: PUSH
37057: LD_INT 3
37059: ARRAY
37060: GREATEREQUAL
37061: AND
37062: NOT
37063: IFFALSE 37067
// exit ;
37065: GO 37669
// if GetBType ( depot ) = b_depot then
37067: LD_VAR 0 1
37071: PPUSH
37072: CALL_OW 266
37076: PUSH
37077: LD_INT 0
37079: EQUAL
37080: IFFALSE 37092
// dist := 28 else
37082: LD_ADDR_VAR 0 14
37086: PUSH
37087: LD_INT 28
37089: ST_TO_ADDR
37090: GO 37100
// dist := 36 ;
37092: LD_ADDR_VAR 0 14
37096: PUSH
37097: LD_INT 36
37099: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37100: LD_VAR 0 1
37104: PPUSH
37105: LD_VAR 0 3
37109: PPUSH
37110: LD_VAR 0 4
37114: PPUSH
37115: CALL_OW 297
37119: PUSH
37120: LD_VAR 0 14
37124: GREATER
37125: IFFALSE 37129
// exit ;
37127: GO 37669
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37129: LD_ADDR_VAR 0 12
37133: PUSH
37134: LD_VAR 0 2
37138: PPUSH
37139: LD_VAR 0 3
37143: PPUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_VAR 0 5
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 248
37163: PPUSH
37164: LD_INT 0
37166: PPUSH
37167: CALL 37674 0 6
37171: ST_TO_ADDR
// if not hexes then
37172: LD_VAR 0 12
37176: NOT
37177: IFFALSE 37181
// exit ;
37179: GO 37669
// hex := GetHexInfo ( x , y ) ;
37181: LD_ADDR_VAR 0 15
37185: PUSH
37186: LD_VAR 0 3
37190: PPUSH
37191: LD_VAR 0 4
37195: PPUSH
37196: CALL_OW 546
37200: ST_TO_ADDR
// if hex [ 1 ] then
37201: LD_VAR 0 15
37205: PUSH
37206: LD_INT 1
37208: ARRAY
37209: IFFALSE 37213
// exit ;
37211: GO 37669
// height := hex [ 2 ] ;
37213: LD_ADDR_VAR 0 13
37217: PUSH
37218: LD_VAR 0 15
37222: PUSH
37223: LD_INT 2
37225: ARRAY
37226: ST_TO_ADDR
// for i = 1 to hexes do
37227: LD_ADDR_VAR 0 7
37231: PUSH
37232: DOUBLE
37233: LD_INT 1
37235: DEC
37236: ST_TO_ADDR
37237: LD_VAR 0 12
37241: PUSH
37242: FOR_TO
37243: IFFALSE 37573
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37245: LD_VAR 0 12
37249: PUSH
37250: LD_VAR 0 7
37254: ARRAY
37255: PUSH
37256: LD_INT 1
37258: ARRAY
37259: PPUSH
37260: LD_VAR 0 12
37264: PUSH
37265: LD_VAR 0 7
37269: ARRAY
37270: PUSH
37271: LD_INT 2
37273: ARRAY
37274: PPUSH
37275: CALL_OW 488
37279: NOT
37280: PUSH
37281: LD_VAR 0 12
37285: PUSH
37286: LD_VAR 0 7
37290: ARRAY
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 12
37300: PUSH
37301: LD_VAR 0 7
37305: ARRAY
37306: PUSH
37307: LD_INT 2
37309: ARRAY
37310: PPUSH
37311: CALL_OW 428
37315: PUSH
37316: LD_INT 0
37318: GREATER
37319: OR
37320: PUSH
37321: LD_VAR 0 12
37325: PUSH
37326: LD_VAR 0 7
37330: ARRAY
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PPUSH
37336: LD_VAR 0 12
37340: PUSH
37341: LD_VAR 0 7
37345: ARRAY
37346: PUSH
37347: LD_INT 2
37349: ARRAY
37350: PPUSH
37351: CALL_OW 351
37355: OR
37356: IFFALSE 37362
// exit ;
37358: POP
37359: POP
37360: GO 37669
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37362: LD_ADDR_VAR 0 8
37366: PUSH
37367: LD_VAR 0 12
37371: PUSH
37372: LD_VAR 0 7
37376: ARRAY
37377: PUSH
37378: LD_INT 1
37380: ARRAY
37381: PPUSH
37382: LD_VAR 0 12
37386: PUSH
37387: LD_VAR 0 7
37391: ARRAY
37392: PUSH
37393: LD_INT 2
37395: ARRAY
37396: PPUSH
37397: CALL_OW 546
37401: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37402: LD_VAR 0 8
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PUSH
37411: LD_VAR 0 8
37415: PUSH
37416: LD_INT 2
37418: ARRAY
37419: PUSH
37420: LD_VAR 0 13
37424: PUSH
37425: LD_INT 2
37427: PLUS
37428: GREATER
37429: OR
37430: PUSH
37431: LD_VAR 0 8
37435: PUSH
37436: LD_INT 2
37438: ARRAY
37439: PUSH
37440: LD_VAR 0 13
37444: PUSH
37445: LD_INT 2
37447: MINUS
37448: LESS
37449: OR
37450: PUSH
37451: LD_VAR 0 8
37455: PUSH
37456: LD_INT 3
37458: ARRAY
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 8
37465: PUSH
37466: LD_INT 9
37468: PUSH
37469: LD_INT 10
37471: PUSH
37472: LD_INT 11
37474: PUSH
37475: LD_INT 12
37477: PUSH
37478: LD_INT 13
37480: PUSH
37481: LD_INT 16
37483: PUSH
37484: LD_INT 17
37486: PUSH
37487: LD_INT 18
37489: PUSH
37490: LD_INT 19
37492: PUSH
37493: LD_INT 20
37495: PUSH
37496: LD_INT 21
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: IN
37514: NOT
37515: OR
37516: PUSH
37517: LD_VAR 0 8
37521: PUSH
37522: LD_INT 5
37524: ARRAY
37525: NOT
37526: OR
37527: PUSH
37528: LD_VAR 0 8
37532: PUSH
37533: LD_INT 6
37535: ARRAY
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 7
37545: PUSH
37546: LD_INT 9
37548: PUSH
37549: LD_INT 10
37551: PUSH
37552: LD_INT 11
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: IN
37563: NOT
37564: OR
37565: IFFALSE 37571
// exit ;
37567: POP
37568: POP
37569: GO 37669
// end ;
37571: GO 37242
37573: POP
37574: POP
// side := GetSide ( depot ) ;
37575: LD_ADDR_VAR 0 9
37579: PUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 255
37589: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37590: LD_VAR 0 9
37594: PPUSH
37595: LD_VAR 0 3
37599: PPUSH
37600: LD_VAR 0 4
37604: PPUSH
37605: LD_INT 20
37607: PPUSH
37608: CALL 30323 0 4
37612: PUSH
37613: LD_INT 4
37615: ARRAY
37616: IFFALSE 37620
// exit ;
37618: GO 37669
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37620: LD_VAR 0 2
37624: PUSH
37625: LD_INT 29
37627: PUSH
37628: LD_INT 30
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: IN
37635: PUSH
37636: LD_VAR 0 3
37640: PPUSH
37641: LD_VAR 0 4
37645: PPUSH
37646: LD_VAR 0 9
37650: PPUSH
37651: CALL_OW 440
37655: NOT
37656: AND
37657: IFFALSE 37661
// exit ;
37659: GO 37669
// result := true ;
37661: LD_ADDR_VAR 0 6
37665: PUSH
37666: LD_INT 1
37668: ST_TO_ADDR
// end ;
37669: LD_VAR 0 6
37673: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
37674: LD_INT 0
37676: PPUSH
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
// result = [ ] ;
37734: LD_ADDR_VAR 0 7
37738: PUSH
37739: EMPTY
37740: ST_TO_ADDR
// temp_list = [ ] ;
37741: LD_ADDR_VAR 0 9
37745: PUSH
37746: EMPTY
37747: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37748: LD_VAR 0 4
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: IN
37779: NOT
37780: PUSH
37781: LD_VAR 0 1
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: IN
37796: PUSH
37797: LD_VAR 0 5
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: IN
37816: NOT
37817: AND
37818: OR
37819: IFFALSE 37823
// exit ;
37821: GO 56214
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37823: LD_VAR 0 1
37827: PUSH
37828: LD_INT 6
37830: PUSH
37831: LD_INT 7
37833: PUSH
37834: LD_INT 8
37836: PUSH
37837: LD_INT 13
37839: PUSH
37840: LD_INT 12
37842: PUSH
37843: LD_INT 15
37845: PUSH
37846: LD_INT 11
37848: PUSH
37849: LD_INT 14
37851: PUSH
37852: LD_INT 10
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: IN
37866: IFFALSE 37876
// btype = b_lab ;
37868: LD_ADDR_VAR 0 1
37872: PUSH
37873: LD_INT 6
37875: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37876: LD_VAR 0 6
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: IN
37895: NOT
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: LD_INT 6
37916: PUSH
37917: LD_INT 36
37919: PUSH
37920: LD_INT 4
37922: PUSH
37923: LD_INT 5
37925: PUSH
37926: LD_INT 31
37928: PUSH
37929: LD_INT 32
37931: PUSH
37932: LD_INT 33
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: IN
37948: NOT
37949: PUSH
37950: LD_VAR 0 6
37954: PUSH
37955: LD_INT 1
37957: EQUAL
37958: AND
37959: OR
37960: PUSH
37961: LD_VAR 0 1
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: IN
37976: NOT
37977: PUSH
37978: LD_VAR 0 6
37982: PUSH
37983: LD_INT 2
37985: EQUAL
37986: AND
37987: OR
37988: IFFALSE 37998
// mode = 0 ;
37990: LD_ADDR_VAR 0 6
37994: PUSH
37995: LD_INT 0
37997: ST_TO_ADDR
// case mode of 0 :
37998: LD_VAR 0 6
38002: PUSH
38003: LD_INT 0
38005: DOUBLE
38006: EQUAL
38007: IFTRUE 38011
38009: GO 49464
38011: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38012: LD_ADDR_VAR 0 11
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 2
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38205: LD_ADDR_VAR 0 12
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38401: LD_ADDR_VAR 0 13
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 3
38572: NEG
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38600: LD_ADDR_VAR 0 14
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38796: LD_ADDR_VAR 0 15
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38989: LD_ADDR_VAR 0 16
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39182: LD_ADDR_VAR 0 17
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39412: LD_ADDR_VAR 0 18
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39642: LD_ADDR_VAR 0 19
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39872: LD_ADDR_VAR 0 20
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40102: LD_ADDR_VAR 0 21
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40332: LD_ADDR_VAR 0 22
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40562: LD_ADDR_VAR 0 23
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40842: LD_ADDR_VAR 0 24
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41118: LD_ADDR_VAR 0 25
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41392: LD_ADDR_VAR 0 26
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41668: LD_ADDR_VAR 0 27
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41948: LD_ADDR_VAR 0 28
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 2
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42230: LD_ADDR_VAR 0 29
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 2
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42509: LD_ADDR_VAR 0 30
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 3
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42787: LD_ADDR_VAR 0 31
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 3
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43065: LD_ADDR_VAR 0 32
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 3
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 3
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43343: LD_ADDR_VAR 0 33
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43622: LD_ADDR_VAR 0 34
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43902: LD_ADDR_VAR 0 35
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44014: LD_ADDR_VAR 0 36
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44126: LD_ADDR_VAR 0 37
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44238: LD_ADDR_VAR 0 38
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44350: LD_ADDR_VAR 0 39
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44462: LD_ADDR_VAR 0 40
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44574: LD_ADDR_VAR 0 41
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 3
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: LD_INT 3
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 3
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44924: LD_ADDR_VAR 0 42
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 3
45233: NEG
45234: PUSH
45235: LD_INT 3
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45274: LD_ADDR_VAR 0 43
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 3
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 3
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: NEG
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45622: LD_ADDR_VAR 0 44
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 3
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: NEG
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45972: LD_ADDR_VAR 0 45
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 3
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46322: LD_ADDR_VAR 0 46
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 3
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46670: LD_ADDR_VAR 0 47
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46821: LD_ADDR_VAR 0 48
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46968: LD_ADDR_VAR 0 49
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47112: LD_ADDR_VAR 0 50
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47256: LD_ADDR_VAR 0 51
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47403: LD_ADDR_VAR 0 52
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47554: LD_ADDR_VAR 0 53
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47784: LD_ADDR_VAR 0 54
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48014: LD_ADDR_VAR 0 55
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48244: LD_ADDR_VAR 0 56
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48474: LD_ADDR_VAR 0 57
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48704: LD_ADDR_VAR 0 58
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48934: LD_ADDR_VAR 0 59
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49022: LD_ADDR_VAR 0 60
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49110: LD_ADDR_VAR 0 61
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49198: LD_ADDR_VAR 0 62
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49286: LD_ADDR_VAR 0 63
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49374: LD_ADDR_VAR 0 64
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// end ; 1 :
49462: GO 55359
49464: LD_INT 1
49466: DOUBLE
49467: EQUAL
49468: IFTRUE 49472
49470: GO 52095
49472: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49473: LD_ADDR_VAR 0 11
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49517: LD_ADDR_VAR 0 12
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49558: LD_ADDR_VAR 0 13
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49598: LD_ADDR_VAR 0 14
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49639: LD_ADDR_VAR 0 15
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49683: LD_ADDR_VAR 0 16
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49729: LD_ADDR_VAR 0 17
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49773: LD_ADDR_VAR 0 18
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49814: LD_ADDR_VAR 0 19
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49854: LD_ADDR_VAR 0 20
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49895: LD_ADDR_VAR 0 21
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49939: LD_ADDR_VAR 0 22
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49985: LD_ADDR_VAR 0 23
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 4
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50029: LD_ADDR_VAR 0 24
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50070: LD_ADDR_VAR 0 25
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: LD_INT 4
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50110: LD_ADDR_VAR 0 26
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 4
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50151: LD_ADDR_VAR 0 27
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 4
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50195: LD_ADDR_VAR 0 28
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: LD_INT 4
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 4
50226: NEG
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50241: LD_ADDR_VAR 0 29
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 4
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 4
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 5
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 5
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 4
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 6
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 6
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 5
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50396: LD_ADDR_VAR 0 30
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 4
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 4
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 5
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 5
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 5
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 6
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 6
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50539: LD_ADDR_VAR 0 31
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 4
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 4
50586: PUSH
50587: LD_INT 4
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 4
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 5
50606: PUSH
50607: LD_INT 4
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 5
50616: PUSH
50617: LD_INT 5
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 4
50626: PUSH
50627: LD_INT 5
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 6
50636: PUSH
50637: LD_INT 5
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 6
50646: PUSH
50647: LD_INT 6
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 5
50656: PUSH
50657: LD_INT 6
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50678: LD_ADDR_VAR 0 32
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 4
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 5
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 5
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 4
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 6
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 6
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 5
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50821: LD_ADDR_VAR 0 33
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 4
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 4
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 4
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 5
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 5
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 5
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 6
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 6
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50976: LD_ADDR_VAR 0 34
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: LD_INT 4
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 4
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: LD_INT 5
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 5
51067: NEG
51068: PUSH
51069: LD_INT 4
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 5
51079: NEG
51080: PUSH
51081: LD_INT 5
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 5
51091: NEG
51092: PUSH
51093: LD_INT 6
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 6
51103: NEG
51104: PUSH
51105: LD_INT 5
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 6
51115: NEG
51116: PUSH
51117: LD_INT 6
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51139: LD_ADDR_VAR 0 41
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51183: LD_ADDR_VAR 0 42
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51224: LD_ADDR_VAR 0 43
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51264: LD_ADDR_VAR 0 44
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51305: LD_ADDR_VAR 0 45
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51349: LD_ADDR_VAR 0 46
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51395: LD_ADDR_VAR 0 47
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 3
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51428: LD_ADDR_VAR 0 48
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51459: LD_ADDR_VAR 0 49
51463: PUSH
51464: LD_INT 3
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51488: LD_ADDR_VAR 0 50
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51517: LD_ADDR_VAR 0 51
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51548: LD_ADDR_VAR 0 52
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51581: LD_ADDR_VAR 0 53
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51625: LD_ADDR_VAR 0 54
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51666: LD_ADDR_VAR 0 55
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51706: LD_ADDR_VAR 0 56
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51747: LD_ADDR_VAR 0 57
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51791: LD_ADDR_VAR 0 58
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51837: LD_ADDR_VAR 0 59
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51881: LD_ADDR_VAR 0 60
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51922: LD_ADDR_VAR 0 61
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51962: LD_ADDR_VAR 0 62
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52003: LD_ADDR_VAR 0 63
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52047: LD_ADDR_VAR 0 64
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// end ; 2 :
52093: GO 55359
52095: LD_INT 2
52097: DOUBLE
52098: EQUAL
52099: IFTRUE 52103
52101: GO 55358
52103: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52104: LD_ADDR_VAR 0 29
52108: PUSH
52109: LD_INT 4
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 4
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 5
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 5
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 4
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 5
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 5
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 5
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 5
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 4
52443: NEG
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 4
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: LD_INT 4
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 4
52501: NEG
52502: PUSH
52503: LD_INT 5
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: LD_INT 4
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 3
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 4
52537: NEG
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 5
52549: NEG
52550: PUSH
52551: LD_INT 4
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: NEG
52562: PUSH
52563: LD_INT 5
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: LD_INT 5
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 5
52585: NEG
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52642: LD_ADDR_VAR 0 30
52646: PUSH
52647: LD_INT 4
52649: PUSH
52650: LD_INT 4
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 5
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: LD_INT 5
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 4
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 5
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 5
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 4
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 4
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 4
52832: NEG
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 4
52843: NEG
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 4
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 5
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 5
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 5
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: LD_INT 4
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 4
52994: NEG
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 4
53006: NEG
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 4
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 4
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 4
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 5
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 4
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 4
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 5
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: LD_INT 5
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53189: LD_ADDR_VAR 0 31
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 4
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 5
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 5
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 4
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 5
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 4
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 4
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 4
53391: NEG
53392: PUSH
53393: LD_INT 4
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: LD_INT 5
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 5
53451: NEG
53452: PUSH
53453: LD_INT 4
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: LD_INT 5
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 5
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 5
53487: NEG
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 4
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 4
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 5
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53739: LD_ADDR_VAR 0 32
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 4
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 4
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 5
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 5
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 5
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: LD_INT 4
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 4
53908: NEG
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 4
53920: NEG
53921: PUSH
53922: LD_INT 4
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 4
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 4
53944: NEG
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 5
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 4
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 5
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 5
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 3
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 4
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 4
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 5
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 5
54181: PUSH
54182: LD_INT 5
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 5
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54286: LD_ADDR_VAR 0 33
54290: PUSH
54291: LD_INT 4
54293: NEG
54294: PUSH
54295: LD_INT 4
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: LD_INT 5
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: LD_INT 4
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 4
54341: NEG
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 5
54353: NEG
54354: PUSH
54355: LD_INT 4
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: LD_INT 5
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 5
54389: NEG
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 4
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 4
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 5
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: LD_INT 3
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 4
54626: PUSH
54627: LD_INT 4
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 4
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 4
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 4
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 4
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 5
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 5
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 5
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54824: LD_ADDR_VAR 0 34
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 5
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 4
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 4
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 5
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 4
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 4
55026: PUSH
55027: LD_INT 4
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: LD_INT 4
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 5
55056: PUSH
55057: LD_INT 5
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: LD_INT 5
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 4
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: LD_INT 5
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 4
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 4
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 4
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 4
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 5
55265: NEG
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 5
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// end ; end ;
55356: GO 55359
55358: POP
// case btype of b_depot , b_warehouse :
55359: LD_VAR 0 1
55363: PUSH
55364: LD_INT 0
55366: DOUBLE
55367: EQUAL
55368: IFTRUE 55378
55370: LD_INT 1
55372: DOUBLE
55373: EQUAL
55374: IFTRUE 55378
55376: GO 55579
55378: POP
// case nation of nation_american :
55379: LD_VAR 0 5
55383: PUSH
55384: LD_INT 1
55386: DOUBLE
55387: EQUAL
55388: IFTRUE 55392
55390: GO 55448
55392: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
55393: LD_ADDR_VAR 0 9
55397: PUSH
55398: LD_VAR 0 11
55402: PUSH
55403: LD_VAR 0 12
55407: PUSH
55408: LD_VAR 0 13
55412: PUSH
55413: LD_VAR 0 14
55417: PUSH
55418: LD_VAR 0 15
55422: PUSH
55423: LD_VAR 0 16
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: PUSH
55436: LD_VAR 0 4
55440: PUSH
55441: LD_INT 1
55443: PLUS
55444: ARRAY
55445: ST_TO_ADDR
55446: GO 55577
55448: LD_INT 2
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55456
55454: GO 55512
55456: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
55457: LD_ADDR_VAR 0 9
55461: PUSH
55462: LD_VAR 0 17
55466: PUSH
55467: LD_VAR 0 18
55471: PUSH
55472: LD_VAR 0 19
55476: PUSH
55477: LD_VAR 0 20
55481: PUSH
55482: LD_VAR 0 21
55486: PUSH
55487: LD_VAR 0 22
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: PUSH
55500: LD_VAR 0 4
55504: PUSH
55505: LD_INT 1
55507: PLUS
55508: ARRAY
55509: ST_TO_ADDR
55510: GO 55577
55512: LD_INT 3
55514: DOUBLE
55515: EQUAL
55516: IFTRUE 55520
55518: GO 55576
55520: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55521: LD_ADDR_VAR 0 9
55525: PUSH
55526: LD_VAR 0 23
55530: PUSH
55531: LD_VAR 0 24
55535: PUSH
55536: LD_VAR 0 25
55540: PUSH
55541: LD_VAR 0 26
55545: PUSH
55546: LD_VAR 0 27
55550: PUSH
55551: LD_VAR 0 28
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: PUSH
55564: LD_VAR 0 4
55568: PUSH
55569: LD_INT 1
55571: PLUS
55572: ARRAY
55573: ST_TO_ADDR
55574: GO 55577
55576: POP
55577: GO 56132
55579: LD_INT 2
55581: DOUBLE
55582: EQUAL
55583: IFTRUE 55593
55585: LD_INT 3
55587: DOUBLE
55588: EQUAL
55589: IFTRUE 55593
55591: GO 55649
55593: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55594: LD_ADDR_VAR 0 9
55598: PUSH
55599: LD_VAR 0 29
55603: PUSH
55604: LD_VAR 0 30
55608: PUSH
55609: LD_VAR 0 31
55613: PUSH
55614: LD_VAR 0 32
55618: PUSH
55619: LD_VAR 0 33
55623: PUSH
55624: LD_VAR 0 34
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: PUSH
55637: LD_VAR 0 4
55641: PUSH
55642: LD_INT 1
55644: PLUS
55645: ARRAY
55646: ST_TO_ADDR
55647: GO 56132
55649: LD_INT 16
55651: DOUBLE
55652: EQUAL
55653: IFTRUE 55711
55655: LD_INT 17
55657: DOUBLE
55658: EQUAL
55659: IFTRUE 55711
55661: LD_INT 18
55663: DOUBLE
55664: EQUAL
55665: IFTRUE 55711
55667: LD_INT 19
55669: DOUBLE
55670: EQUAL
55671: IFTRUE 55711
55673: LD_INT 22
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55711
55679: LD_INT 20
55681: DOUBLE
55682: EQUAL
55683: IFTRUE 55711
55685: LD_INT 21
55687: DOUBLE
55688: EQUAL
55689: IFTRUE 55711
55691: LD_INT 23
55693: DOUBLE
55694: EQUAL
55695: IFTRUE 55711
55697: LD_INT 24
55699: DOUBLE
55700: EQUAL
55701: IFTRUE 55711
55703: LD_INT 25
55705: DOUBLE
55706: EQUAL
55707: IFTRUE 55711
55709: GO 55767
55711: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55712: LD_ADDR_VAR 0 9
55716: PUSH
55717: LD_VAR 0 35
55721: PUSH
55722: LD_VAR 0 36
55726: PUSH
55727: LD_VAR 0 37
55731: PUSH
55732: LD_VAR 0 38
55736: PUSH
55737: LD_VAR 0 39
55741: PUSH
55742: LD_VAR 0 40
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: PUSH
55755: LD_VAR 0 4
55759: PUSH
55760: LD_INT 1
55762: PLUS
55763: ARRAY
55764: ST_TO_ADDR
55765: GO 56132
55767: LD_INT 6
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55823
55773: LD_INT 7
55775: DOUBLE
55776: EQUAL
55777: IFTRUE 55823
55779: LD_INT 8
55781: DOUBLE
55782: EQUAL
55783: IFTRUE 55823
55785: LD_INT 13
55787: DOUBLE
55788: EQUAL
55789: IFTRUE 55823
55791: LD_INT 12
55793: DOUBLE
55794: EQUAL
55795: IFTRUE 55823
55797: LD_INT 15
55799: DOUBLE
55800: EQUAL
55801: IFTRUE 55823
55803: LD_INT 11
55805: DOUBLE
55806: EQUAL
55807: IFTRUE 55823
55809: LD_INT 14
55811: DOUBLE
55812: EQUAL
55813: IFTRUE 55823
55815: LD_INT 10
55817: DOUBLE
55818: EQUAL
55819: IFTRUE 55823
55821: GO 55879
55823: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
55824: LD_ADDR_VAR 0 9
55828: PUSH
55829: LD_VAR 0 41
55833: PUSH
55834: LD_VAR 0 42
55838: PUSH
55839: LD_VAR 0 43
55843: PUSH
55844: LD_VAR 0 44
55848: PUSH
55849: LD_VAR 0 45
55853: PUSH
55854: LD_VAR 0 46
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: LD_VAR 0 4
55871: PUSH
55872: LD_INT 1
55874: PLUS
55875: ARRAY
55876: ST_TO_ADDR
55877: GO 56132
55879: LD_INT 36
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55887
55885: GO 55943
55887: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55888: LD_ADDR_VAR 0 9
55892: PUSH
55893: LD_VAR 0 47
55897: PUSH
55898: LD_VAR 0 48
55902: PUSH
55903: LD_VAR 0 49
55907: PUSH
55908: LD_VAR 0 50
55912: PUSH
55913: LD_VAR 0 51
55917: PUSH
55918: LD_VAR 0 52
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: PUSH
55931: LD_VAR 0 4
55935: PUSH
55936: LD_INT 1
55938: PLUS
55939: ARRAY
55940: ST_TO_ADDR
55941: GO 56132
55943: LD_INT 4
55945: DOUBLE
55946: EQUAL
55947: IFTRUE 55969
55949: LD_INT 5
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55969
55955: LD_INT 34
55957: DOUBLE
55958: EQUAL
55959: IFTRUE 55969
55961: LD_INT 37
55963: DOUBLE
55964: EQUAL
55965: IFTRUE 55969
55967: GO 56025
55969: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55970: LD_ADDR_VAR 0 9
55974: PUSH
55975: LD_VAR 0 53
55979: PUSH
55980: LD_VAR 0 54
55984: PUSH
55985: LD_VAR 0 55
55989: PUSH
55990: LD_VAR 0 56
55994: PUSH
55995: LD_VAR 0 57
55999: PUSH
56000: LD_VAR 0 58
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: PUSH
56013: LD_VAR 0 4
56017: PUSH
56018: LD_INT 1
56020: PLUS
56021: ARRAY
56022: ST_TO_ADDR
56023: GO 56132
56025: LD_INT 31
56027: DOUBLE
56028: EQUAL
56029: IFTRUE 56075
56031: LD_INT 32
56033: DOUBLE
56034: EQUAL
56035: IFTRUE 56075
56037: LD_INT 33
56039: DOUBLE
56040: EQUAL
56041: IFTRUE 56075
56043: LD_INT 27
56045: DOUBLE
56046: EQUAL
56047: IFTRUE 56075
56049: LD_INT 26
56051: DOUBLE
56052: EQUAL
56053: IFTRUE 56075
56055: LD_INT 28
56057: DOUBLE
56058: EQUAL
56059: IFTRUE 56075
56061: LD_INT 29
56063: DOUBLE
56064: EQUAL
56065: IFTRUE 56075
56067: LD_INT 30
56069: DOUBLE
56070: EQUAL
56071: IFTRUE 56075
56073: GO 56131
56075: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
56076: LD_ADDR_VAR 0 9
56080: PUSH
56081: LD_VAR 0 59
56085: PUSH
56086: LD_VAR 0 60
56090: PUSH
56091: LD_VAR 0 61
56095: PUSH
56096: LD_VAR 0 62
56100: PUSH
56101: LD_VAR 0 63
56105: PUSH
56106: LD_VAR 0 64
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: PUSH
56119: LD_VAR 0 4
56123: PUSH
56124: LD_INT 1
56126: PLUS
56127: ARRAY
56128: ST_TO_ADDR
56129: GO 56132
56131: POP
// temp_list2 = [ ] ;
56132: LD_ADDR_VAR 0 10
56136: PUSH
56137: EMPTY
56138: ST_TO_ADDR
// for i in temp_list do
56139: LD_ADDR_VAR 0 8
56143: PUSH
56144: LD_VAR 0 9
56148: PUSH
56149: FOR_IN
56150: IFFALSE 56202
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56152: LD_ADDR_VAR 0 10
56156: PUSH
56157: LD_VAR 0 10
56161: PUSH
56162: LD_VAR 0 8
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: PUSH
56171: LD_VAR 0 2
56175: PLUS
56176: PUSH
56177: LD_VAR 0 8
56181: PUSH
56182: LD_INT 2
56184: ARRAY
56185: PUSH
56186: LD_VAR 0 3
56190: PLUS
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: EMPTY
56197: LIST
56198: ADD
56199: ST_TO_ADDR
56200: GO 56149
56202: POP
56203: POP
// result = temp_list2 ;
56204: LD_ADDR_VAR 0 7
56208: PUSH
56209: LD_VAR 0 10
56213: ST_TO_ADDR
// end ;
56214: LD_VAR 0 7
56218: RET
// export function EnemyInRange ( unit , dist ) ; begin
56219: LD_INT 0
56221: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56222: LD_ADDR_VAR 0 3
56226: PUSH
56227: LD_VAR 0 1
56231: PPUSH
56232: CALL_OW 255
56236: PPUSH
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL_OW 250
56246: PPUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: CALL_OW 251
56256: PPUSH
56257: LD_VAR 0 2
56261: PPUSH
56262: CALL 30323 0 4
56266: PUSH
56267: LD_INT 4
56269: ARRAY
56270: ST_TO_ADDR
// end ;
56271: LD_VAR 0 3
56275: RET
// export function PlayerSeeMe ( unit ) ; begin
56276: LD_INT 0
56278: PPUSH
// result := See ( your_side , unit ) ;
56279: LD_ADDR_VAR 0 2
56283: PUSH
56284: LD_OWVAR 2
56288: PPUSH
56289: LD_VAR 0 1
56293: PPUSH
56294: CALL_OW 292
56298: ST_TO_ADDR
// end ;
56299: LD_VAR 0 2
56303: RET
// export function ReverseDir ( unit ) ; begin
56304: LD_INT 0
56306: PPUSH
// if not unit then
56307: LD_VAR 0 1
56311: NOT
56312: IFFALSE 56316
// exit ;
56314: GO 56339
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56316: LD_ADDR_VAR 0 2
56320: PUSH
56321: LD_VAR 0 1
56325: PPUSH
56326: CALL_OW 254
56330: PUSH
56331: LD_INT 3
56333: PLUS
56334: PUSH
56335: LD_INT 6
56337: MOD
56338: ST_TO_ADDR
// end ;
56339: LD_VAR 0 2
56343: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56344: LD_INT 0
56346: PPUSH
56347: PPUSH
56348: PPUSH
56349: PPUSH
56350: PPUSH
// if not hexes then
56351: LD_VAR 0 2
56355: NOT
56356: IFFALSE 56360
// exit ;
56358: GO 56508
// dist := 9999 ;
56360: LD_ADDR_VAR 0 5
56364: PUSH
56365: LD_INT 9999
56367: ST_TO_ADDR
// for i = 1 to hexes do
56368: LD_ADDR_VAR 0 4
56372: PUSH
56373: DOUBLE
56374: LD_INT 1
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 2
56382: PUSH
56383: FOR_TO
56384: IFFALSE 56496
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56386: LD_VAR 0 1
56390: PPUSH
56391: LD_VAR 0 2
56395: PUSH
56396: LD_VAR 0 4
56400: ARRAY
56401: PUSH
56402: LD_INT 1
56404: ARRAY
56405: PPUSH
56406: LD_VAR 0 2
56410: PUSH
56411: LD_VAR 0 4
56415: ARRAY
56416: PUSH
56417: LD_INT 2
56419: ARRAY
56420: PPUSH
56421: CALL_OW 297
56425: PUSH
56426: LD_VAR 0 5
56430: LESS
56431: IFFALSE 56494
// begin hex := hexes [ i ] ;
56433: LD_ADDR_VAR 0 7
56437: PUSH
56438: LD_VAR 0 2
56442: PUSH
56443: LD_VAR 0 4
56447: ARRAY
56448: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56449: LD_ADDR_VAR 0 5
56453: PUSH
56454: LD_VAR 0 1
56458: PPUSH
56459: LD_VAR 0 2
56463: PUSH
56464: LD_VAR 0 4
56468: ARRAY
56469: PUSH
56470: LD_INT 1
56472: ARRAY
56473: PPUSH
56474: LD_VAR 0 2
56478: PUSH
56479: LD_VAR 0 4
56483: ARRAY
56484: PUSH
56485: LD_INT 2
56487: ARRAY
56488: PPUSH
56489: CALL_OW 297
56493: ST_TO_ADDR
// end ; end ;
56494: GO 56383
56496: POP
56497: POP
// result := hex ;
56498: LD_ADDR_VAR 0 3
56502: PUSH
56503: LD_VAR 0 7
56507: ST_TO_ADDR
// end ;
56508: LD_VAR 0 3
56512: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56513: LD_INT 0
56515: PPUSH
56516: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56517: LD_VAR 0 1
56521: NOT
56522: PUSH
56523: LD_VAR 0 1
56527: PUSH
56528: LD_INT 21
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 23
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PPUSH
56552: CALL_OW 69
56556: IN
56557: NOT
56558: OR
56559: IFFALSE 56563
// exit ;
56561: GO 56610
// for i = 1 to 3 do
56563: LD_ADDR_VAR 0 3
56567: PUSH
56568: DOUBLE
56569: LD_INT 1
56571: DEC
56572: ST_TO_ADDR
56573: LD_INT 3
56575: PUSH
56576: FOR_TO
56577: IFFALSE 56608
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56579: LD_VAR 0 1
56583: PPUSH
56584: CALL_OW 250
56588: PPUSH
56589: LD_VAR 0 1
56593: PPUSH
56594: CALL_OW 251
56598: PPUSH
56599: LD_INT 1
56601: PPUSH
56602: CALL_OW 453
56606: GO 56576
56608: POP
56609: POP
// end ;
56610: LD_VAR 0 2
56614: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56615: LD_INT 0
56617: PPUSH
56618: PPUSH
56619: PPUSH
56620: PPUSH
56621: PPUSH
56622: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56623: LD_VAR 0 1
56627: NOT
56628: PUSH
56629: LD_VAR 0 2
56633: NOT
56634: OR
56635: PUSH
56636: LD_VAR 0 1
56640: PPUSH
56641: CALL_OW 314
56645: OR
56646: IFFALSE 56650
// exit ;
56648: GO 57091
// x := GetX ( enemy_unit ) ;
56650: LD_ADDR_VAR 0 7
56654: PUSH
56655: LD_VAR 0 2
56659: PPUSH
56660: CALL_OW 250
56664: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56665: LD_ADDR_VAR 0 8
56669: PUSH
56670: LD_VAR 0 2
56674: PPUSH
56675: CALL_OW 251
56679: ST_TO_ADDR
// if not x or not y then
56680: LD_VAR 0 7
56684: NOT
56685: PUSH
56686: LD_VAR 0 8
56690: NOT
56691: OR
56692: IFFALSE 56696
// exit ;
56694: GO 57091
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56696: LD_ADDR_VAR 0 6
56700: PUSH
56701: LD_VAR 0 7
56705: PPUSH
56706: LD_INT 0
56708: PPUSH
56709: LD_INT 4
56711: PPUSH
56712: CALL_OW 272
56716: PUSH
56717: LD_VAR 0 8
56721: PPUSH
56722: LD_INT 0
56724: PPUSH
56725: LD_INT 4
56727: PPUSH
56728: CALL_OW 273
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_VAR 0 7
56741: PPUSH
56742: LD_INT 1
56744: PPUSH
56745: LD_INT 4
56747: PPUSH
56748: CALL_OW 272
56752: PUSH
56753: LD_VAR 0 8
56757: PPUSH
56758: LD_INT 1
56760: PPUSH
56761: LD_INT 4
56763: PPUSH
56764: CALL_OW 273
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_VAR 0 7
56777: PPUSH
56778: LD_INT 2
56780: PPUSH
56781: LD_INT 4
56783: PPUSH
56784: CALL_OW 272
56788: PUSH
56789: LD_VAR 0 8
56793: PPUSH
56794: LD_INT 2
56796: PPUSH
56797: LD_INT 4
56799: PPUSH
56800: CALL_OW 273
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_VAR 0 7
56813: PPUSH
56814: LD_INT 3
56816: PPUSH
56817: LD_INT 4
56819: PPUSH
56820: CALL_OW 272
56824: PUSH
56825: LD_VAR 0 8
56829: PPUSH
56830: LD_INT 3
56832: PPUSH
56833: LD_INT 4
56835: PPUSH
56836: CALL_OW 273
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_VAR 0 7
56849: PPUSH
56850: LD_INT 4
56852: PPUSH
56853: LD_INT 4
56855: PPUSH
56856: CALL_OW 272
56860: PUSH
56861: LD_VAR 0 8
56865: PPUSH
56866: LD_INT 4
56868: PPUSH
56869: LD_INT 4
56871: PPUSH
56872: CALL_OW 273
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_VAR 0 7
56885: PPUSH
56886: LD_INT 5
56888: PPUSH
56889: LD_INT 4
56891: PPUSH
56892: CALL_OW 272
56896: PUSH
56897: LD_VAR 0 8
56901: PPUSH
56902: LD_INT 5
56904: PPUSH
56905: LD_INT 4
56907: PPUSH
56908: CALL_OW 273
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// for i = tmp downto 1 do
56925: LD_ADDR_VAR 0 4
56929: PUSH
56930: DOUBLE
56931: LD_VAR 0 6
56935: INC
56936: ST_TO_ADDR
56937: LD_INT 1
56939: PUSH
56940: FOR_DOWNTO
56941: IFFALSE 57042
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56943: LD_VAR 0 6
56947: PUSH
56948: LD_VAR 0 4
56952: ARRAY
56953: PUSH
56954: LD_INT 1
56956: ARRAY
56957: PPUSH
56958: LD_VAR 0 6
56962: PUSH
56963: LD_VAR 0 4
56967: ARRAY
56968: PUSH
56969: LD_INT 2
56971: ARRAY
56972: PPUSH
56973: CALL_OW 488
56977: NOT
56978: PUSH
56979: LD_VAR 0 6
56983: PUSH
56984: LD_VAR 0 4
56988: ARRAY
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PPUSH
56994: LD_VAR 0 6
56998: PUSH
56999: LD_VAR 0 4
57003: ARRAY
57004: PUSH
57005: LD_INT 2
57007: ARRAY
57008: PPUSH
57009: CALL_OW 428
57013: PUSH
57014: LD_INT 0
57016: NONEQUAL
57017: OR
57018: IFFALSE 57040
// tmp := Delete ( tmp , i ) ;
57020: LD_ADDR_VAR 0 6
57024: PUSH
57025: LD_VAR 0 6
57029: PPUSH
57030: LD_VAR 0 4
57034: PPUSH
57035: CALL_OW 3
57039: ST_TO_ADDR
57040: GO 56940
57042: POP
57043: POP
// j := GetClosestHex ( unit , tmp ) ;
57044: LD_ADDR_VAR 0 5
57048: PUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: LD_VAR 0 6
57058: PPUSH
57059: CALL 56344 0 2
57063: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57064: LD_VAR 0 1
57068: PPUSH
57069: LD_VAR 0 5
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: LD_VAR 0 5
57082: PUSH
57083: LD_INT 2
57085: ARRAY
57086: PPUSH
57087: CALL_OW 111
// end ;
57091: LD_VAR 0 3
57095: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57096: LD_INT 0
57098: PPUSH
57099: PPUSH
57100: PPUSH
// uc_side = 0 ;
57101: LD_ADDR_OWVAR 20
57105: PUSH
57106: LD_INT 0
57108: ST_TO_ADDR
// uc_nation = 0 ;
57109: LD_ADDR_OWVAR 21
57113: PUSH
57114: LD_INT 0
57116: ST_TO_ADDR
// InitHc ;
57117: CALL_OW 19
// InitVc ;
57121: CALL_OW 20
// if mastodonts then
57125: LD_VAR 0 6
57129: IFFALSE 57196
// for i = 1 to mastodonts do
57131: LD_ADDR_VAR 0 11
57135: PUSH
57136: DOUBLE
57137: LD_INT 1
57139: DEC
57140: ST_TO_ADDR
57141: LD_VAR 0 6
57145: PUSH
57146: FOR_TO
57147: IFFALSE 57194
// begin vc_chassis := 31 ;
57149: LD_ADDR_OWVAR 37
57153: PUSH
57154: LD_INT 31
57156: ST_TO_ADDR
// vc_control := control_rider ;
57157: LD_ADDR_OWVAR 38
57161: PUSH
57162: LD_INT 4
57164: ST_TO_ADDR
// animal := CreateVehicle ;
57165: LD_ADDR_VAR 0 12
57169: PUSH
57170: CALL_OW 45
57174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57175: LD_VAR 0 12
57179: PPUSH
57180: LD_VAR 0 8
57184: PPUSH
57185: LD_INT 0
57187: PPUSH
57188: CALL 59265 0 3
// end ;
57192: GO 57146
57194: POP
57195: POP
// if horses then
57196: LD_VAR 0 5
57200: IFFALSE 57267
// for i = 1 to horses do
57202: LD_ADDR_VAR 0 11
57206: PUSH
57207: DOUBLE
57208: LD_INT 1
57210: DEC
57211: ST_TO_ADDR
57212: LD_VAR 0 5
57216: PUSH
57217: FOR_TO
57218: IFFALSE 57265
// begin hc_class := 21 ;
57220: LD_ADDR_OWVAR 28
57224: PUSH
57225: LD_INT 21
57227: ST_TO_ADDR
// hc_gallery :=  ;
57228: LD_ADDR_OWVAR 33
57232: PUSH
57233: LD_STRING 
57235: ST_TO_ADDR
// animal := CreateHuman ;
57236: LD_ADDR_VAR 0 12
57240: PUSH
57241: CALL_OW 44
57245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57246: LD_VAR 0 12
57250: PPUSH
57251: LD_VAR 0 8
57255: PPUSH
57256: LD_INT 0
57258: PPUSH
57259: CALL 59265 0 3
// end ;
57263: GO 57217
57265: POP
57266: POP
// if birds then
57267: LD_VAR 0 1
57271: IFFALSE 57338
// for i = 1 to birds do
57273: LD_ADDR_VAR 0 11
57277: PUSH
57278: DOUBLE
57279: LD_INT 1
57281: DEC
57282: ST_TO_ADDR
57283: LD_VAR 0 1
57287: PUSH
57288: FOR_TO
57289: IFFALSE 57336
// begin hc_class = 18 ;
57291: LD_ADDR_OWVAR 28
57295: PUSH
57296: LD_INT 18
57298: ST_TO_ADDR
// hc_gallery =  ;
57299: LD_ADDR_OWVAR 33
57303: PUSH
57304: LD_STRING 
57306: ST_TO_ADDR
// animal := CreateHuman ;
57307: LD_ADDR_VAR 0 12
57311: PUSH
57312: CALL_OW 44
57316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57317: LD_VAR 0 12
57321: PPUSH
57322: LD_VAR 0 8
57326: PPUSH
57327: LD_INT 0
57329: PPUSH
57330: CALL 59265 0 3
// end ;
57334: GO 57288
57336: POP
57337: POP
// if tigers then
57338: LD_VAR 0 2
57342: IFFALSE 57426
// for i = 1 to tigers do
57344: LD_ADDR_VAR 0 11
57348: PUSH
57349: DOUBLE
57350: LD_INT 1
57352: DEC
57353: ST_TO_ADDR
57354: LD_VAR 0 2
57358: PUSH
57359: FOR_TO
57360: IFFALSE 57424
// begin hc_class = class_tiger ;
57362: LD_ADDR_OWVAR 28
57366: PUSH
57367: LD_INT 14
57369: ST_TO_ADDR
// hc_gallery =  ;
57370: LD_ADDR_OWVAR 33
57374: PUSH
57375: LD_STRING 
57377: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57378: LD_ADDR_OWVAR 35
57382: PUSH
57383: LD_INT 7
57385: NEG
57386: PPUSH
57387: LD_INT 7
57389: PPUSH
57390: CALL_OW 12
57394: ST_TO_ADDR
// animal := CreateHuman ;
57395: LD_ADDR_VAR 0 12
57399: PUSH
57400: CALL_OW 44
57404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57405: LD_VAR 0 12
57409: PPUSH
57410: LD_VAR 0 8
57414: PPUSH
57415: LD_INT 0
57417: PPUSH
57418: CALL 59265 0 3
// end ;
57422: GO 57359
57424: POP
57425: POP
// if apemans then
57426: LD_VAR 0 3
57430: IFFALSE 57553
// for i = 1 to apemans do
57432: LD_ADDR_VAR 0 11
57436: PUSH
57437: DOUBLE
57438: LD_INT 1
57440: DEC
57441: ST_TO_ADDR
57442: LD_VAR 0 3
57446: PUSH
57447: FOR_TO
57448: IFFALSE 57551
// begin hc_class = class_apeman ;
57450: LD_ADDR_OWVAR 28
57454: PUSH
57455: LD_INT 12
57457: ST_TO_ADDR
// hc_gallery =  ;
57458: LD_ADDR_OWVAR 33
57462: PUSH
57463: LD_STRING 
57465: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57466: LD_ADDR_OWVAR 35
57470: PUSH
57471: LD_INT 5
57473: NEG
57474: PPUSH
57475: LD_INT 5
57477: PPUSH
57478: CALL_OW 12
57482: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57483: LD_ADDR_OWVAR 31
57487: PUSH
57488: LD_INT 1
57490: PPUSH
57491: LD_INT 3
57493: PPUSH
57494: CALL_OW 12
57498: PUSH
57499: LD_INT 1
57501: PPUSH
57502: LD_INT 3
57504: PPUSH
57505: CALL_OW 12
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// animal := CreateHuman ;
57522: LD_ADDR_VAR 0 12
57526: PUSH
57527: CALL_OW 44
57531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57532: LD_VAR 0 12
57536: PPUSH
57537: LD_VAR 0 8
57541: PPUSH
57542: LD_INT 0
57544: PPUSH
57545: CALL 59265 0 3
// end ;
57549: GO 57447
57551: POP
57552: POP
// if enchidnas then
57553: LD_VAR 0 4
57557: IFFALSE 57624
// for i = 1 to enchidnas do
57559: LD_ADDR_VAR 0 11
57563: PUSH
57564: DOUBLE
57565: LD_INT 1
57567: DEC
57568: ST_TO_ADDR
57569: LD_VAR 0 4
57573: PUSH
57574: FOR_TO
57575: IFFALSE 57622
// begin hc_class = 13 ;
57577: LD_ADDR_OWVAR 28
57581: PUSH
57582: LD_INT 13
57584: ST_TO_ADDR
// hc_gallery =  ;
57585: LD_ADDR_OWVAR 33
57589: PUSH
57590: LD_STRING 
57592: ST_TO_ADDR
// animal := CreateHuman ;
57593: LD_ADDR_VAR 0 12
57597: PUSH
57598: CALL_OW 44
57602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57603: LD_VAR 0 12
57607: PPUSH
57608: LD_VAR 0 8
57612: PPUSH
57613: LD_INT 0
57615: PPUSH
57616: CALL 59265 0 3
// end ;
57620: GO 57574
57622: POP
57623: POP
// if fishes then
57624: LD_VAR 0 7
57628: IFFALSE 57695
// for i = 1 to fishes do
57630: LD_ADDR_VAR 0 11
57634: PUSH
57635: DOUBLE
57636: LD_INT 1
57638: DEC
57639: ST_TO_ADDR
57640: LD_VAR 0 7
57644: PUSH
57645: FOR_TO
57646: IFFALSE 57693
// begin hc_class = 20 ;
57648: LD_ADDR_OWVAR 28
57652: PUSH
57653: LD_INT 20
57655: ST_TO_ADDR
// hc_gallery =  ;
57656: LD_ADDR_OWVAR 33
57660: PUSH
57661: LD_STRING 
57663: ST_TO_ADDR
// animal := CreateHuman ;
57664: LD_ADDR_VAR 0 12
57668: PUSH
57669: CALL_OW 44
57673: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57674: LD_VAR 0 12
57678: PPUSH
57679: LD_VAR 0 9
57683: PPUSH
57684: LD_INT 0
57686: PPUSH
57687: CALL 59265 0 3
// end ;
57691: GO 57645
57693: POP
57694: POP
// end ;
57695: LD_VAR 0 10
57699: RET
// export function WantHeal ( sci , unit ) ; begin
57700: LD_INT 0
57702: PPUSH
// if GetTaskList ( sci ) > 0 then
57703: LD_VAR 0 1
57707: PPUSH
57708: CALL_OW 437
57712: PUSH
57713: LD_INT 0
57715: GREATER
57716: IFFALSE 57786
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57718: LD_VAR 0 1
57722: PPUSH
57723: CALL_OW 437
57727: PUSH
57728: LD_INT 1
57730: ARRAY
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PUSH
57736: LD_STRING l
57738: EQUAL
57739: PUSH
57740: LD_VAR 0 1
57744: PPUSH
57745: CALL_OW 437
57749: PUSH
57750: LD_INT 1
57752: ARRAY
57753: PUSH
57754: LD_INT 4
57756: ARRAY
57757: PUSH
57758: LD_VAR 0 2
57762: EQUAL
57763: AND
57764: IFFALSE 57776
// result := true else
57766: LD_ADDR_VAR 0 3
57770: PUSH
57771: LD_INT 1
57773: ST_TO_ADDR
57774: GO 57784
// result := false ;
57776: LD_ADDR_VAR 0 3
57780: PUSH
57781: LD_INT 0
57783: ST_TO_ADDR
// end else
57784: GO 57794
// result := false ;
57786: LD_ADDR_VAR 0 3
57790: PUSH
57791: LD_INT 0
57793: ST_TO_ADDR
// end ;
57794: LD_VAR 0 3
57798: RET
// export function HealTarget ( sci ) ; begin
57799: LD_INT 0
57801: PPUSH
// if not sci then
57802: LD_VAR 0 1
57806: NOT
57807: IFFALSE 57811
// exit ;
57809: GO 57876
// result := 0 ;
57811: LD_ADDR_VAR 0 2
57815: PUSH
57816: LD_INT 0
57818: ST_TO_ADDR
// if GetTaskList ( sci ) then
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 437
57828: IFFALSE 57876
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 437
57839: PUSH
57840: LD_INT 1
57842: ARRAY
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PUSH
57848: LD_STRING l
57850: EQUAL
57851: IFFALSE 57876
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57853: LD_ADDR_VAR 0 2
57857: PUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 437
57867: PUSH
57868: LD_INT 1
57870: ARRAY
57871: PUSH
57872: LD_INT 4
57874: ARRAY
57875: ST_TO_ADDR
// end ;
57876: LD_VAR 0 2
57880: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57881: LD_INT 0
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
// if not base_units then
57887: LD_VAR 0 1
57891: NOT
57892: IFFALSE 57896
// exit ;
57894: GO 57983
// result := false ;
57896: LD_ADDR_VAR 0 2
57900: PUSH
57901: LD_INT 0
57903: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57904: LD_ADDR_VAR 0 5
57908: PUSH
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_INT 21
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PPUSH
57924: CALL_OW 72
57928: ST_TO_ADDR
// if not tmp then
57929: LD_VAR 0 5
57933: NOT
57934: IFFALSE 57938
// exit ;
57936: GO 57983
// for i in tmp do
57938: LD_ADDR_VAR 0 3
57942: PUSH
57943: LD_VAR 0 5
57947: PUSH
57948: FOR_IN
57949: IFFALSE 57981
// begin result := EnemyInRange ( i , 22 ) ;
57951: LD_ADDR_VAR 0 2
57955: PUSH
57956: LD_VAR 0 3
57960: PPUSH
57961: LD_INT 22
57963: PPUSH
57964: CALL 56219 0 2
57968: ST_TO_ADDR
// if result then
57969: LD_VAR 0 2
57973: IFFALSE 57979
// exit ;
57975: POP
57976: POP
57977: GO 57983
// end ;
57979: GO 57948
57981: POP
57982: POP
// end ;
57983: LD_VAR 0 2
57987: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57988: LD_INT 0
57990: PPUSH
57991: PPUSH
// if not units then
57992: LD_VAR 0 1
57996: NOT
57997: IFFALSE 58001
// exit ;
57999: GO 58071
// result := [ ] ;
58001: LD_ADDR_VAR 0 3
58005: PUSH
58006: EMPTY
58007: ST_TO_ADDR
// for i in units do
58008: LD_ADDR_VAR 0 4
58012: PUSH
58013: LD_VAR 0 1
58017: PUSH
58018: FOR_IN
58019: IFFALSE 58069
// if GetTag ( i ) = tag then
58021: LD_VAR 0 4
58025: PPUSH
58026: CALL_OW 110
58030: PUSH
58031: LD_VAR 0 2
58035: EQUAL
58036: IFFALSE 58067
// result := Insert ( result , result + 1 , i ) ;
58038: LD_ADDR_VAR 0 3
58042: PUSH
58043: LD_VAR 0 3
58047: PPUSH
58048: LD_VAR 0 3
58052: PUSH
58053: LD_INT 1
58055: PLUS
58056: PPUSH
58057: LD_VAR 0 4
58061: PPUSH
58062: CALL_OW 2
58066: ST_TO_ADDR
58067: GO 58018
58069: POP
58070: POP
// end ;
58071: LD_VAR 0 3
58075: RET
// export function IsDriver ( un ) ; begin
58076: LD_INT 0
58078: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58079: LD_ADDR_VAR 0 2
58083: PUSH
58084: LD_VAR 0 1
58088: PUSH
58089: LD_INT 55
58091: PUSH
58092: EMPTY
58093: LIST
58094: PPUSH
58095: CALL_OW 69
58099: IN
58100: ST_TO_ADDR
// end ;
58101: LD_VAR 0 2
58105: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58106: LD_INT 0
58108: PPUSH
58109: PPUSH
// list := [ ] ;
58110: LD_ADDR_VAR 0 5
58114: PUSH
58115: EMPTY
58116: ST_TO_ADDR
// case d of 0 :
58117: LD_VAR 0 3
58121: PUSH
58122: LD_INT 0
58124: DOUBLE
58125: EQUAL
58126: IFTRUE 58130
58128: GO 58263
58130: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58131: LD_ADDR_VAR 0 5
58135: PUSH
58136: LD_VAR 0 1
58140: PUSH
58141: LD_INT 4
58143: MINUS
58144: PUSH
58145: LD_VAR 0 2
58149: PUSH
58150: LD_INT 4
58152: MINUS
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: PUSH
58162: LD_VAR 0 1
58166: PUSH
58167: LD_INT 3
58169: MINUS
58170: PUSH
58171: LD_VAR 0 2
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: PUSH
58184: LD_VAR 0 1
58188: PUSH
58189: LD_INT 4
58191: PLUS
58192: PUSH
58193: LD_VAR 0 2
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: LIST
58205: PUSH
58206: LD_VAR 0 1
58210: PUSH
58211: LD_INT 3
58213: PLUS
58214: PUSH
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 3
58222: PLUS
58223: PUSH
58224: LD_INT 5
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: PUSH
58232: LD_VAR 0 1
58236: PUSH
58237: LD_VAR 0 2
58241: PUSH
58242: LD_INT 4
58244: PLUS
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// end ; 1 :
58261: GO 58961
58263: LD_INT 1
58265: DOUBLE
58266: EQUAL
58267: IFTRUE 58271
58269: GO 58404
58271: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58272: LD_ADDR_VAR 0 5
58276: PUSH
58277: LD_VAR 0 1
58281: PUSH
58282: LD_VAR 0 2
58286: PUSH
58287: LD_INT 4
58289: MINUS
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: PUSH
58299: LD_VAR 0 1
58303: PUSH
58304: LD_INT 3
58306: MINUS
58307: PUSH
58308: LD_VAR 0 2
58312: PUSH
58313: LD_INT 3
58315: MINUS
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: PUSH
58325: LD_VAR 0 1
58329: PUSH
58330: LD_INT 4
58332: MINUS
58333: PUSH
58334: LD_VAR 0 2
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: PUSH
58347: LD_VAR 0 1
58351: PUSH
58352: LD_VAR 0 2
58356: PUSH
58357: LD_INT 3
58359: PLUS
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: PUSH
58369: LD_VAR 0 1
58373: PUSH
58374: LD_INT 4
58376: PLUS
58377: PUSH
58378: LD_VAR 0 2
58382: PUSH
58383: LD_INT 4
58385: PLUS
58386: PUSH
58387: LD_INT 5
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: ST_TO_ADDR
// end ; 2 :
58402: GO 58961
58404: LD_INT 2
58406: DOUBLE
58407: EQUAL
58408: IFTRUE 58412
58410: GO 58541
58412: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58413: LD_ADDR_VAR 0 5
58417: PUSH
58418: LD_VAR 0 1
58422: PUSH
58423: LD_VAR 0 2
58427: PUSH
58428: LD_INT 3
58430: MINUS
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: PUSH
58440: LD_VAR 0 1
58444: PUSH
58445: LD_INT 4
58447: PLUS
58448: PUSH
58449: LD_VAR 0 2
58453: PUSH
58454: LD_INT 4
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: PUSH
58462: LD_VAR 0 1
58466: PUSH
58467: LD_VAR 0 2
58471: PUSH
58472: LD_INT 4
58474: PLUS
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: PUSH
58484: LD_VAR 0 1
58488: PUSH
58489: LD_INT 3
58491: MINUS
58492: PUSH
58493: LD_VAR 0 2
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: PUSH
58506: LD_VAR 0 1
58510: PUSH
58511: LD_INT 4
58513: MINUS
58514: PUSH
58515: LD_VAR 0 2
58519: PUSH
58520: LD_INT 4
58522: MINUS
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// end ; 3 :
58539: GO 58961
58541: LD_INT 3
58543: DOUBLE
58544: EQUAL
58545: IFTRUE 58549
58547: GO 58682
58549: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58550: LD_ADDR_VAR 0 5
58554: PUSH
58555: LD_VAR 0 1
58559: PUSH
58560: LD_INT 3
58562: PLUS
58563: PUSH
58564: LD_VAR 0 2
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 1
58581: PUSH
58582: LD_INT 4
58584: PLUS
58585: PUSH
58586: LD_VAR 0 2
58590: PUSH
58591: LD_INT 4
58593: PLUS
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: PUSH
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 4
58610: MINUS
58611: PUSH
58612: LD_VAR 0 2
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: PUSH
58625: LD_VAR 0 1
58629: PUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_INT 4
58637: MINUS
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: PUSH
58647: LD_VAR 0 1
58651: PUSH
58652: LD_INT 3
58654: MINUS
58655: PUSH
58656: LD_VAR 0 2
58660: PUSH
58661: LD_INT 3
58663: MINUS
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// end ; 4 :
58680: GO 58961
58682: LD_INT 4
58684: DOUBLE
58685: EQUAL
58686: IFTRUE 58690
58688: GO 58823
58690: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58691: LD_ADDR_VAR 0 5
58695: PUSH
58696: LD_VAR 0 1
58700: PUSH
58701: LD_VAR 0 2
58705: PUSH
58706: LD_INT 4
58708: PLUS
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: PUSH
58718: LD_VAR 0 1
58722: PUSH
58723: LD_INT 3
58725: PLUS
58726: PUSH
58727: LD_VAR 0 2
58731: PUSH
58732: LD_INT 3
58734: PLUS
58735: PUSH
58736: LD_INT 5
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: PUSH
58744: LD_VAR 0 1
58748: PUSH
58749: LD_INT 4
58751: PLUS
58752: PUSH
58753: LD_VAR 0 2
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: PUSH
58766: LD_VAR 0 1
58770: PUSH
58771: LD_VAR 0 2
58775: PUSH
58776: LD_INT 3
58778: MINUS
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: LD_INT 4
58795: MINUS
58796: PUSH
58797: LD_VAR 0 2
58801: PUSH
58802: LD_INT 4
58804: MINUS
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// end ; 5 :
58821: GO 58961
58823: LD_INT 5
58825: DOUBLE
58826: EQUAL
58827: IFTRUE 58831
58829: GO 58960
58831: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58832: LD_ADDR_VAR 0 5
58836: PUSH
58837: LD_VAR 0 1
58841: PUSH
58842: LD_INT 4
58844: MINUS
58845: PUSH
58846: LD_VAR 0 2
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: PUSH
58859: LD_VAR 0 1
58863: PUSH
58864: LD_VAR 0 2
58868: PUSH
58869: LD_INT 4
58871: MINUS
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: PUSH
58881: LD_VAR 0 1
58885: PUSH
58886: LD_INT 4
58888: PLUS
58889: PUSH
58890: LD_VAR 0 2
58894: PUSH
58895: LD_INT 4
58897: PLUS
58898: PUSH
58899: LD_INT 5
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: PUSH
58907: LD_VAR 0 1
58911: PUSH
58912: LD_INT 3
58914: PLUS
58915: PUSH
58916: LD_VAR 0 2
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: PUSH
58929: LD_VAR 0 1
58933: PUSH
58934: LD_VAR 0 2
58938: PUSH
58939: LD_INT 3
58941: PLUS
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// end ; end ;
58958: GO 58961
58960: POP
// result := list ;
58961: LD_ADDR_VAR 0 4
58965: PUSH
58966: LD_VAR 0 5
58970: ST_TO_ADDR
// end ;
58971: LD_VAR 0 4
58975: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58976: LD_INT 0
58978: PPUSH
58979: PPUSH
58980: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58981: LD_VAR 0 1
58985: NOT
58986: PUSH
58987: LD_VAR 0 2
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: IN
59010: NOT
59011: OR
59012: IFFALSE 59016
// exit ;
59014: GO 59108
// tmp := [ ] ;
59016: LD_ADDR_VAR 0 5
59020: PUSH
59021: EMPTY
59022: ST_TO_ADDR
// for i in units do
59023: LD_ADDR_VAR 0 4
59027: PUSH
59028: LD_VAR 0 1
59032: PUSH
59033: FOR_IN
59034: IFFALSE 59077
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59036: LD_ADDR_VAR 0 5
59040: PUSH
59041: LD_VAR 0 5
59045: PPUSH
59046: LD_VAR 0 5
59050: PUSH
59051: LD_INT 1
59053: PLUS
59054: PPUSH
59055: LD_VAR 0 4
59059: PPUSH
59060: LD_VAR 0 2
59064: PPUSH
59065: CALL_OW 259
59069: PPUSH
59070: CALL_OW 2
59074: ST_TO_ADDR
59075: GO 59033
59077: POP
59078: POP
// if not tmp then
59079: LD_VAR 0 5
59083: NOT
59084: IFFALSE 59088
// exit ;
59086: GO 59108
// result := SortListByListDesc ( units , tmp ) ;
59088: LD_ADDR_VAR 0 3
59092: PUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: LD_VAR 0 5
59102: PPUSH
59103: CALL_OW 77
59107: ST_TO_ADDR
// end ;
59108: LD_VAR 0 3
59112: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59113: LD_INT 0
59115: PPUSH
59116: PPUSH
59117: PPUSH
// x := GetX ( building ) ;
59118: LD_ADDR_VAR 0 4
59122: PUSH
59123: LD_VAR 0 2
59127: PPUSH
59128: CALL_OW 250
59132: ST_TO_ADDR
// y := GetY ( building ) ;
59133: LD_ADDR_VAR 0 5
59137: PUSH
59138: LD_VAR 0 2
59142: PPUSH
59143: CALL_OW 251
59147: ST_TO_ADDR
// if GetTaskList ( unit ) then
59148: LD_VAR 0 1
59152: PPUSH
59153: CALL_OW 437
59157: IFFALSE 59252
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59159: LD_STRING e
59161: PUSH
59162: LD_VAR 0 1
59166: PPUSH
59167: CALL_OW 437
59171: PUSH
59172: LD_INT 1
59174: ARRAY
59175: PUSH
59176: LD_INT 1
59178: ARRAY
59179: EQUAL
59180: PUSH
59181: LD_VAR 0 4
59185: PUSH
59186: LD_VAR 0 1
59190: PPUSH
59191: CALL_OW 437
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: PUSH
59200: LD_INT 2
59202: ARRAY
59203: EQUAL
59204: AND
59205: PUSH
59206: LD_VAR 0 5
59210: PUSH
59211: LD_VAR 0 1
59215: PPUSH
59216: CALL_OW 437
59220: PUSH
59221: LD_INT 1
59223: ARRAY
59224: PUSH
59225: LD_INT 3
59227: ARRAY
59228: EQUAL
59229: AND
59230: IFFALSE 59242
// result := true else
59232: LD_ADDR_VAR 0 3
59236: PUSH
59237: LD_INT 1
59239: ST_TO_ADDR
59240: GO 59250
// result := false ;
59242: LD_ADDR_VAR 0 3
59246: PUSH
59247: LD_INT 0
59249: ST_TO_ADDR
// end else
59250: GO 59260
// result := false ;
59252: LD_ADDR_VAR 0 3
59256: PUSH
59257: LD_INT 0
59259: ST_TO_ADDR
// end ;
59260: LD_VAR 0 3
59264: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59265: LD_INT 0
59267: PPUSH
59268: PPUSH
59269: PPUSH
59270: PPUSH
// if not unit or not area then
59271: LD_VAR 0 1
59275: NOT
59276: PUSH
59277: LD_VAR 0 2
59281: NOT
59282: OR
59283: IFFALSE 59287
// exit ;
59285: GO 59451
// tmp := AreaToList ( area , i ) ;
59287: LD_ADDR_VAR 0 6
59291: PUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: LD_VAR 0 5
59301: PPUSH
59302: CALL_OW 517
59306: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59307: LD_ADDR_VAR 0 5
59311: PUSH
59312: DOUBLE
59313: LD_INT 1
59315: DEC
59316: ST_TO_ADDR
59317: LD_VAR 0 6
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PUSH
59326: FOR_TO
59327: IFFALSE 59449
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59329: LD_ADDR_VAR 0 7
59333: PUSH
59334: LD_VAR 0 6
59338: PUSH
59339: LD_INT 1
59341: ARRAY
59342: PUSH
59343: LD_VAR 0 5
59347: ARRAY
59348: PUSH
59349: LD_VAR 0 6
59353: PUSH
59354: LD_INT 2
59356: ARRAY
59357: PUSH
59358: LD_VAR 0 5
59362: ARRAY
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59368: LD_VAR 0 7
59372: PUSH
59373: LD_INT 1
59375: ARRAY
59376: PPUSH
59377: LD_VAR 0 7
59381: PUSH
59382: LD_INT 2
59384: ARRAY
59385: PPUSH
59386: CALL_OW 428
59390: PUSH
59391: LD_INT 0
59393: EQUAL
59394: IFFALSE 59447
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59396: LD_VAR 0 1
59400: PPUSH
59401: LD_VAR 0 7
59405: PUSH
59406: LD_INT 1
59408: ARRAY
59409: PPUSH
59410: LD_VAR 0 7
59414: PUSH
59415: LD_INT 2
59417: ARRAY
59418: PPUSH
59419: LD_VAR 0 3
59423: PPUSH
59424: CALL_OW 48
// result := IsPlaced ( unit ) ;
59428: LD_ADDR_VAR 0 4
59432: PUSH
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 305
59442: ST_TO_ADDR
// exit ;
59443: POP
59444: POP
59445: GO 59451
// end ; end ;
59447: GO 59326
59449: POP
59450: POP
// end ;
59451: LD_VAR 0 4
59455: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
// if not side or side > 8 then
59461: LD_VAR 0 1
59465: NOT
59466: PUSH
59467: LD_VAR 0 1
59471: PUSH
59472: LD_INT 8
59474: GREATER
59475: OR
59476: IFFALSE 59480
// exit ;
59478: GO 59667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59480: LD_ADDR_VAR 0 4
59484: PUSH
59485: LD_INT 22
59487: PUSH
59488: LD_VAR 0 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 21
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PPUSH
59511: CALL_OW 69
59515: ST_TO_ADDR
// if not tmp then
59516: LD_VAR 0 4
59520: NOT
59521: IFFALSE 59525
// exit ;
59523: GO 59667
// enable_addtolog := true ;
59525: LD_ADDR_OWVAR 81
59529: PUSH
59530: LD_INT 1
59532: ST_TO_ADDR
// AddToLog ( [ ) ;
59533: LD_STRING [
59535: PPUSH
59536: CALL_OW 561
// for i in tmp do
59540: LD_ADDR_VAR 0 3
59544: PUSH
59545: LD_VAR 0 4
59549: PUSH
59550: FOR_IN
59551: IFFALSE 59658
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59553: LD_STRING [
59555: PUSH
59556: LD_VAR 0 3
59560: PPUSH
59561: CALL_OW 266
59565: STR
59566: PUSH
59567: LD_STRING , 
59569: STR
59570: PUSH
59571: LD_VAR 0 3
59575: PPUSH
59576: CALL_OW 250
59580: STR
59581: PUSH
59582: LD_STRING , 
59584: STR
59585: PUSH
59586: LD_VAR 0 3
59590: PPUSH
59591: CALL_OW 251
59595: STR
59596: PUSH
59597: LD_STRING , 
59599: STR
59600: PUSH
59601: LD_VAR 0 3
59605: PPUSH
59606: CALL_OW 254
59610: STR
59611: PUSH
59612: LD_STRING , 
59614: STR
59615: PUSH
59616: LD_VAR 0 3
59620: PPUSH
59621: LD_INT 1
59623: PPUSH
59624: CALL_OW 268
59628: STR
59629: PUSH
59630: LD_STRING , 
59632: STR
59633: PUSH
59634: LD_VAR 0 3
59638: PPUSH
59639: LD_INT 2
59641: PPUSH
59642: CALL_OW 268
59646: STR
59647: PUSH
59648: LD_STRING ],
59650: STR
59651: PPUSH
59652: CALL_OW 561
// end ;
59656: GO 59550
59658: POP
59659: POP
// AddToLog ( ]; ) ;
59660: LD_STRING ];
59662: PPUSH
59663: CALL_OW 561
// end ;
59667: LD_VAR 0 2
59671: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59672: LD_INT 0
59674: PPUSH
59675: PPUSH
59676: PPUSH
59677: PPUSH
59678: PPUSH
// if not area or not rate or not max then
59679: LD_VAR 0 1
59683: NOT
59684: PUSH
59685: LD_VAR 0 2
59689: NOT
59690: OR
59691: PUSH
59692: LD_VAR 0 4
59696: NOT
59697: OR
59698: IFFALSE 59702
// exit ;
59700: GO 59894
// while 1 do
59702: LD_INT 1
59704: IFFALSE 59894
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59706: LD_ADDR_VAR 0 9
59710: PUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: LD_INT 1
59718: PPUSH
59719: CALL_OW 287
59723: PUSH
59724: LD_INT 10
59726: MUL
59727: ST_TO_ADDR
// r := rate / 10 ;
59728: LD_ADDR_VAR 0 7
59732: PUSH
59733: LD_VAR 0 2
59737: PUSH
59738: LD_INT 10
59740: DIVREAL
59741: ST_TO_ADDR
// time := 1 1$00 ;
59742: LD_ADDR_VAR 0 8
59746: PUSH
59747: LD_INT 2100
59749: ST_TO_ADDR
// if amount < min then
59750: LD_VAR 0 9
59754: PUSH
59755: LD_VAR 0 3
59759: LESS
59760: IFFALSE 59778
// r := r * 2 else
59762: LD_ADDR_VAR 0 7
59766: PUSH
59767: LD_VAR 0 7
59771: PUSH
59772: LD_INT 2
59774: MUL
59775: ST_TO_ADDR
59776: GO 59804
// if amount > max then
59778: LD_VAR 0 9
59782: PUSH
59783: LD_VAR 0 4
59787: GREATER
59788: IFFALSE 59804
// r := r / 2 ;
59790: LD_ADDR_VAR 0 7
59794: PUSH
59795: LD_VAR 0 7
59799: PUSH
59800: LD_INT 2
59802: DIVREAL
59803: ST_TO_ADDR
// time := time / r ;
59804: LD_ADDR_VAR 0 8
59808: PUSH
59809: LD_VAR 0 8
59813: PUSH
59814: LD_VAR 0 7
59818: DIVREAL
59819: ST_TO_ADDR
// if time < 0 then
59820: LD_VAR 0 8
59824: PUSH
59825: LD_INT 0
59827: LESS
59828: IFFALSE 59845
// time := time * - 1 ;
59830: LD_ADDR_VAR 0 8
59834: PUSH
59835: LD_VAR 0 8
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: MUL
59844: ST_TO_ADDR
// wait ( time ) ;
59845: LD_VAR 0 8
59849: PPUSH
59850: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59854: LD_INT 35
59856: PPUSH
59857: LD_INT 875
59859: PPUSH
59860: CALL_OW 12
59864: PPUSH
59865: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59869: LD_INT 1
59871: PPUSH
59872: LD_INT 5
59874: PPUSH
59875: CALL_OW 12
59879: PPUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: LD_INT 1
59887: PPUSH
59888: CALL_OW 55
// end ;
59892: GO 59702
// end ;
59894: LD_VAR 0 5
59898: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
// if not turrets or not factories then
59909: LD_VAR 0 1
59913: NOT
59914: PUSH
59915: LD_VAR 0 2
59919: NOT
59920: OR
59921: IFFALSE 59925
// exit ;
59923: GO 60232
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59925: LD_ADDR_VAR 0 10
59929: PUSH
59930: LD_INT 5
59932: PUSH
59933: LD_INT 6
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 3
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 24
59967: PUSH
59968: LD_INT 25
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 23
59977: PUSH
59978: LD_INT 27
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 42
59991: PUSH
59992: LD_INT 43
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 44
60001: PUSH
60002: LD_INT 46
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 45
60011: PUSH
60012: LD_INT 47
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// result := [ ] ;
60029: LD_ADDR_VAR 0 3
60033: PUSH
60034: EMPTY
60035: ST_TO_ADDR
// for i in turrets do
60036: LD_ADDR_VAR 0 4
60040: PUSH
60041: LD_VAR 0 1
60045: PUSH
60046: FOR_IN
60047: IFFALSE 60230
// begin nat := GetNation ( i ) ;
60049: LD_ADDR_VAR 0 7
60053: PUSH
60054: LD_VAR 0 4
60058: PPUSH
60059: CALL_OW 248
60063: ST_TO_ADDR
// weapon := 0 ;
60064: LD_ADDR_VAR 0 8
60068: PUSH
60069: LD_INT 0
60071: ST_TO_ADDR
// if not nat then
60072: LD_VAR 0 7
60076: NOT
60077: IFFALSE 60081
// continue ;
60079: GO 60046
// for j in list [ nat ] do
60081: LD_ADDR_VAR 0 5
60085: PUSH
60086: LD_VAR 0 10
60090: PUSH
60091: LD_VAR 0 7
60095: ARRAY
60096: PUSH
60097: FOR_IN
60098: IFFALSE 60139
// if GetBWeapon ( i ) = j [ 1 ] then
60100: LD_VAR 0 4
60104: PPUSH
60105: CALL_OW 269
60109: PUSH
60110: LD_VAR 0 5
60114: PUSH
60115: LD_INT 1
60117: ARRAY
60118: EQUAL
60119: IFFALSE 60137
// begin weapon := j [ 2 ] ;
60121: LD_ADDR_VAR 0 8
60125: PUSH
60126: LD_VAR 0 5
60130: PUSH
60131: LD_INT 2
60133: ARRAY
60134: ST_TO_ADDR
// break ;
60135: GO 60139
// end ;
60137: GO 60097
60139: POP
60140: POP
// if not weapon then
60141: LD_VAR 0 8
60145: NOT
60146: IFFALSE 60150
// continue ;
60148: GO 60046
// for k in factories do
60150: LD_ADDR_VAR 0 6
60154: PUSH
60155: LD_VAR 0 2
60159: PUSH
60160: FOR_IN
60161: IFFALSE 60226
// begin weapons := AvailableWeaponList ( k ) ;
60163: LD_ADDR_VAR 0 9
60167: PUSH
60168: LD_VAR 0 6
60172: PPUSH
60173: CALL_OW 478
60177: ST_TO_ADDR
// if not weapons then
60178: LD_VAR 0 9
60182: NOT
60183: IFFALSE 60187
// continue ;
60185: GO 60160
// if weapon in weapons then
60187: LD_VAR 0 8
60191: PUSH
60192: LD_VAR 0 9
60196: IN
60197: IFFALSE 60224
// begin result := [ i , weapon ] ;
60199: LD_ADDR_VAR 0 3
60203: PUSH
60204: LD_VAR 0 4
60208: PUSH
60209: LD_VAR 0 8
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// exit ;
60218: POP
60219: POP
60220: POP
60221: POP
60222: GO 60232
// end ; end ;
60224: GO 60160
60226: POP
60227: POP
// end ;
60228: GO 60046
60230: POP
60231: POP
// end ;
60232: LD_VAR 0 3
60236: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60237: LD_INT 0
60239: PPUSH
// if not side or side > 8 then
60240: LD_VAR 0 3
60244: NOT
60245: PUSH
60246: LD_VAR 0 3
60250: PUSH
60251: LD_INT 8
60253: GREATER
60254: OR
60255: IFFALSE 60259
// exit ;
60257: GO 60318
// if not range then
60259: LD_VAR 0 4
60263: NOT
60264: IFFALSE 60275
// range := - 12 ;
60266: LD_ADDR_VAR 0 4
60270: PUSH
60271: LD_INT 12
60273: NEG
60274: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_VAR 0 2
60284: PPUSH
60285: LD_VAR 0 3
60289: PPUSH
60290: LD_VAR 0 4
60294: PPUSH
60295: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60299: LD_VAR 0 1
60303: PPUSH
60304: LD_VAR 0 2
60308: PPUSH
60309: LD_VAR 0 3
60313: PPUSH
60314: CALL_OW 331
// end ;
60318: LD_VAR 0 5
60322: RET
// export function Video ( mode ) ; begin
60323: LD_INT 0
60325: PPUSH
// ingame_video = mode ;
60326: LD_ADDR_OWVAR 52
60330: PUSH
60331: LD_VAR 0 1
60335: ST_TO_ADDR
// interface_hidden = mode ;
60336: LD_ADDR_OWVAR 54
60340: PUSH
60341: LD_VAR 0 1
60345: ST_TO_ADDR
// end ;
60346: LD_VAR 0 2
60350: RET
// export function Join ( array , element ) ; begin
60351: LD_INT 0
60353: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60354: LD_ADDR_VAR 0 3
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 1
60371: PLUS
60372: PPUSH
60373: LD_VAR 0 2
60377: PPUSH
60378: CALL_OW 1
60382: ST_TO_ADDR
// end ;
60383: LD_VAR 0 3
60387: RET
// export function JoinUnion ( array , element ) ; begin
60388: LD_INT 0
60390: PPUSH
// result := array union element ;
60391: LD_ADDR_VAR 0 3
60395: PUSH
60396: LD_VAR 0 1
60400: PUSH
60401: LD_VAR 0 2
60405: UNION
60406: ST_TO_ADDR
// end ;
60407: LD_VAR 0 3
60411: RET
// export function GetBehemoths ( side ) ; begin
60412: LD_INT 0
60414: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60415: LD_ADDR_VAR 0 2
60419: PUSH
60420: LD_INT 22
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 31
60434: PUSH
60435: LD_INT 25
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PPUSH
60446: CALL_OW 69
60450: ST_TO_ADDR
// end ;
60451: LD_VAR 0 2
60455: RET
// export function Shuffle ( array ) ; var i , index ; begin
60456: LD_INT 0
60458: PPUSH
60459: PPUSH
60460: PPUSH
// result := [ ] ;
60461: LD_ADDR_VAR 0 2
60465: PUSH
60466: EMPTY
60467: ST_TO_ADDR
// if not array then
60468: LD_VAR 0 1
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60576
// Randomize ;
60477: CALL_OW 10
// for i = array downto 1 do
60481: LD_ADDR_VAR 0 3
60485: PUSH
60486: DOUBLE
60487: LD_VAR 0 1
60491: INC
60492: ST_TO_ADDR
60493: LD_INT 1
60495: PUSH
60496: FOR_DOWNTO
60497: IFFALSE 60574
// begin index := rand ( 1 , array ) ;
60499: LD_ADDR_VAR 0 4
60503: PUSH
60504: LD_INT 1
60506: PPUSH
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 12
60516: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60517: LD_ADDR_VAR 0 2
60521: PUSH
60522: LD_VAR 0 2
60526: PPUSH
60527: LD_VAR 0 2
60531: PUSH
60532: LD_INT 1
60534: PLUS
60535: PPUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_VAR 0 4
60545: ARRAY
60546: PPUSH
60547: CALL_OW 2
60551: ST_TO_ADDR
// array := Delete ( array , index ) ;
60552: LD_ADDR_VAR 0 1
60556: PUSH
60557: LD_VAR 0 1
60561: PPUSH
60562: LD_VAR 0 4
60566: PPUSH
60567: CALL_OW 3
60571: ST_TO_ADDR
// end ;
60572: GO 60496
60574: POP
60575: POP
// end ;
60576: LD_VAR 0 2
60580: RET
// export function GetBaseMaterials ( base ) ; begin
60581: LD_INT 0
60583: PPUSH
// result := [ 0 , 0 , 0 ] ;
60584: LD_ADDR_VAR 0 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// if not base then
60603: LD_VAR 0 1
60607: NOT
60608: IFFALSE 60612
// exit ;
60610: GO 60661
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60612: LD_ADDR_VAR 0 2
60616: PUSH
60617: LD_VAR 0 1
60621: PPUSH
60622: LD_INT 1
60624: PPUSH
60625: CALL_OW 275
60629: PUSH
60630: LD_VAR 0 1
60634: PPUSH
60635: LD_INT 2
60637: PPUSH
60638: CALL_OW 275
60642: PUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: LD_INT 3
60650: PPUSH
60651: CALL_OW 275
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: ST_TO_ADDR
// end ;
60661: LD_VAR 0 2
60665: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60666: LD_INT 0
60668: PPUSH
60669: PPUSH
// result := array ;
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: LD_VAR 0 1
60679: ST_TO_ADDR
// if size > 0 then
60680: LD_VAR 0 2
60684: PUSH
60685: LD_INT 0
60687: GREATER
60688: IFFALSE 60734
// for i := array downto size do
60690: LD_ADDR_VAR 0 4
60694: PUSH
60695: DOUBLE
60696: LD_VAR 0 1
60700: INC
60701: ST_TO_ADDR
60702: LD_VAR 0 2
60706: PUSH
60707: FOR_DOWNTO
60708: IFFALSE 60732
// result := Delete ( result , result ) ;
60710: LD_ADDR_VAR 0 3
60714: PUSH
60715: LD_VAR 0 3
60719: PPUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: CALL_OW 3
60729: ST_TO_ADDR
60730: GO 60707
60732: POP
60733: POP
// end ;
60734: LD_VAR 0 3
60738: RET
// export function ComExit ( unit ) ; var tmp ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
// if not IsInUnit ( unit ) then
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 310
60752: NOT
60753: IFFALSE 60757
// exit ;
60755: GO 60817
// tmp := IsInUnit ( unit ) ;
60757: LD_ADDR_VAR 0 3
60761: PUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: CALL_OW 310
60771: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60772: LD_VAR 0 3
60776: PPUSH
60777: CALL_OW 247
60781: PUSH
60782: LD_INT 2
60784: EQUAL
60785: IFFALSE 60798
// ComExitVehicle ( unit ) else
60787: LD_VAR 0 1
60791: PPUSH
60792: CALL_OW 121
60796: GO 60807
// ComExitBuilding ( unit ) ;
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 122
// result := tmp ;
60807: LD_ADDR_VAR 0 2
60811: PUSH
60812: LD_VAR 0 3
60816: ST_TO_ADDR
// end ;
60817: LD_VAR 0 2
60821: RET
// export function ResetHc ; begin
60822: LD_INT 0
60824: PPUSH
// InitHc ;
60825: CALL_OW 19
// hc_importance := 0 ;
60829: LD_ADDR_OWVAR 32
60833: PUSH
60834: LD_INT 0
60836: ST_TO_ADDR
// end ;
60837: LD_VAR 0 1
60841: RET
