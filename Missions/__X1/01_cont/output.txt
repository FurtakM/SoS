// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8231
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8231
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8203: LD_EXP 23
8207: PPUSH
8208: LD_EXP 16
8212: PPUSH
8213: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8217: LD_EXP 24
8221: PPUSH
8222: LD_EXP 16
8226: PPUSH
8227: CALL_OW 175
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8234: LD_INT 22
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 91
8246: PUSH
8247: LD_INT 8
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IFFALSE 8452
8268: GO 8270
8270: DISABLE
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8275: LD_INT 280
8277: PUSH
8278: LD_INT 245
8280: PUSH
8281: LD_INT 210
8283: PUSH
8284: LD_INT 175
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_OWVAR 67
8297: ARRAY
8298: PPUSH
8299: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_INT 22
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 54
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 2
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8452
// for i in tmp do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8392
// begin ComExitBuilding ( i ) ;
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 142
8382: PPUSH
8383: LD_INT 71
8385: PPUSH
8386: CALL_OW 174
// end ;
8390: GO 8363
8392: POP
8393: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_INT 142
8401: PPUSH
8402: LD_INT 71
8404: PPUSH
8405: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8409: LD_EXP 24
8413: PPUSH
8414: LD_INT 142
8416: PPUSH
8417: LD_INT 71
8419: PPUSH
8420: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8424: LD_EXP 23
8428: PPUSH
8429: LD_EXP 16
8433: PPUSH
8434: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8438: LD_EXP 24
8442: PPUSH
8443: LD_EXP 16
8447: PPUSH
8448: CALL_OW 175
// end ;
8452: PPOPN 2
8454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8455: LD_INT 22
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 58
8477: PUSH
8478: EMPTY
8479: LIST
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 24
8486: PUSH
8487: LD_INT 1000
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 91
8500: PUSH
8501: LD_EXP 17
8505: PUSH
8506: LD_INT 8
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: PUSH
8526: LD_EXP 17
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: IFFALSE 8650
8538: GO 8540
8540: DISABLE
// begin enable ;
8541: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8542: LD_EXP 17
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 24
8578: PUSH
8579: LD_INT 1000
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 91
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_INT 8
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 90
8636: PPUSH
8637: CALL_OW 171
// AddComHold ( Olaf ) ;
8641: LD_EXP 17
8645: PPUSH
8646: CALL_OW 200
// end ;
8650: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8651: LD_EXP 12
8655: PUSH
8656: LD_INT 2
8658: PPUSH
8659: CALL_OW 302
8663: NOT
8664: AND
8665: PUSH
8666: LD_OWVAR 67
8670: PUSH
8671: LD_INT 1
8673: EQUAL
8674: AND
8675: PUSH
8676: LD_EXP 13
8680: NOT
8681: AND
8682: IFFALSE 8699
8684: GO 8686
8686: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8687: LD_EXP 16
8691: PPUSH
8692: LD_STRING DH-prison-missing
8694: PPUSH
8695: CALL_OW 88
// end ;
8699: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8700: LD_EXP 12
8704: PUSH
8705: LD_INT 8
8707: PPUSH
8708: CALL_OW 302
8712: NOT
8713: AND
8714: PUSH
8715: LD_OWVAR 67
8719: PUSH
8720: LD_INT 1
8722: GREATER
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 3
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8788: LD_EXP 12
8792: PUSH
8793: LD_INT 10
8795: PPUSH
8796: CALL_OW 302
8800: NOT
8801: AND
8802: PUSH
8803: LD_EXP 13
8807: NOT
8808: AND
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8814: LD_EXP 16
8818: PPUSH
8819: LD_STRING DH-prison-missing-a
8821: PPUSH
8822: CALL_OW 88
// end ;
8826: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8827: LD_EXP 13
8831: NOT
8832: PUSH
8833: LD_EXP 12
8837: AND
8838: PUSH
8839: LD_INT 2
8841: PPUSH
8842: LD_EXP 20
8846: PPUSH
8847: CALL_OW 292
8851: AND
8852: IFFALSE 8939
8854: GO 8856
8856: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8857: LD_EXP 20
8861: PPUSH
8862: LD_EXP 16
8866: PPUSH
8867: CALL_OW 119
// DialogueOn ;
8871: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8875: LD_EXP 20
8879: PPUSH
8880: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8884: LD_EXP 20
8888: PPUSH
8889: LD_STRING DK-prison-found
8891: PPUSH
8892: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8896: LD_EXP 16
8900: PPUSH
8901: LD_STRING DH-prison-found
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8912: LD_EXP 20
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: CALL_OW 235
// prisonFound := true ;
8924: LD_ADDR_EXP 13
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8932: LD_STRING O6_prison_out
8934: PPUSH
8935: CALL_OW 337
// end ;
8939: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8940: LD_EXP 16
8944: PPUSH
8945: CALL_OW 256
8949: PUSH
8950: LD_INT 500
8952: LESS
8953: IFFALSE 8966
8955: GO 8957
8957: DISABLE
// heikeHurt := true ;
8958: LD_ADDR_EXP 14
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
8966: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8967: LD_INT 22
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 21
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: IFFALSE 9311
8997: GO 8999
8999: DISABLE
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
// begin uc_side := 3 ;
9005: LD_ADDR_OWVAR 20
9009: PUSH
9010: LD_INT 3
9012: ST_TO_ADDR
// uc_nation := 3 ;
9013: LD_ADDR_OWVAR 21
9017: PUSH
9018: LD_INT 3
9020: ST_TO_ADDR
// tmp := [ ] ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: EMPTY
9027: ST_TO_ADDR
// for i := 1 to 8 do
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_INT 8
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9150
// begin PrepareHuman ( false , 1 , 4 ) ;
9044: LD_INT 0
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_INT 4
9052: PPUSH
9053: CALL_OW 380
// un := CreateHuman ;
9057: LD_ADDR_VAR 0 3
9061: PUSH
9062: CALL_OW 44
9066: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 4
9074: PPUSH
9075: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_INT 158
9086: PPUSH
9087: LD_INT 80
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_INT 147
9104: PPUSH
9105: LD_INT 75
9107: PPUSH
9108: CALL_OW 111
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 2
9133: PUSH
9134: LD_INT 1
9136: PLUS
9137: PPUSH
9138: LD_VAR 0 3
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9041
9150: POP
9151: POP
// repeat wait ( 0 0$1 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// for i in tmp do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9291
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PPUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 74
9201: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 428
9234: IFFALSE 9275
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: CALL_OW 250
9254: PPUSH
9255: LD_VAR 0 3
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: CALL_OW 251
9268: PPUSH
9269: CALL_OW 114
9273: GO 9289
// ComAttackUnit ( i , Heike ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 115
// end ;
9289: GO 9169
9291: POP
9292: POP
// until IsDead ( Heike ) or not tmp ;
9293: LD_EXP 16
9297: PPUSH
9298: CALL_OW 301
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: IFFALSE 9152
// end ;
9311: PPOPN 3
9313: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9314: LD_EXP 12
9318: PUSH
9319: LD_EXP 16
9323: PPUSH
9324: CALL_OW 302
9328: AND
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: LD_INT 21
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 50
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 71
9368: PUSH
9369: LD_INT 0
9371: EQUAL
9372: AND
9373: IFFALSE 9724
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
// begin if not heikeHurt then
9381: LD_EXP 14
9385: NOT
9386: IFFALSE 9395
// SetAchievement ( ACH_INVINCIBLE ) ;
9388: LD_STRING ACH_INVINCIBLE
9390: PPUSH
9391: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9395: LD_STRING enableBioCharacter(BIO_GIVI)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9402: LD_STRING enableBioCharacter(BIO_MIKE)
9404: PPUSH
9405: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9409: LD_STRING enableBioCharacter(BIO_OLAF)
9411: PPUSH
9412: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if prisonFound then
9457: LD_EXP 13
9461: IFFALSE 9475
// AddMedal ( med1 , 1 ) else
9463: LD_STRING med1
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 101
9473: GO 9486
// AddMedal ( med1 , - 1 ) ;
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9486: LD_VAR 0 1
9490: PUSH
9491: LD_INT 3
9493: LESS
9494: PUSH
9495: LD_EXP 13
9499: NOT
9500: AND
9501: PUSH
9502: LD_VAR 0 1
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: PUSH
9511: LD_EXP 13
9515: AND
9516: OR
9517: IFFALSE 9532
// AddMedal ( med2 , - 1 ) else
9519: LD_STRING med2
9521: PPUSH
9522: LD_INT 1
9524: NEG
9525: PPUSH
9526: CALL_OW 101
9530: GO 9542
// AddMedal ( med2 , 1 ) ;
9532: LD_STRING med2
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9542: LD_EXP 13
9546: PUSH
9547: LD_EXP 4
9551: AND
9552: PUSH
9553: LD_VAR 0 1
9557: PUSH
9558: LD_INT 4
9560: GREATEREQUAL
9561: AND
9562: IFFALSE 9576
// AddMedal ( med3 , 1 ) else
9564: LD_STRING med3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 101
9574: GO 9587
// AddMedal ( med3 , - 1 ) ;
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: NEG
9582: PPUSH
9583: CALL_OW 101
// GiveMedals ( MAIN ) ;
9587: LD_STRING MAIN
9589: PPUSH
9590: CALL_OW 102
// RewardPeople ( tmp ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9603: LD_EXP 16
9607: PPUSH
9608: LD_STRING 01_Heike
9610: PPUSH
9611: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9615: LD_EXP 18
9619: PPUSH
9620: CALL_OW 302
9624: PUSH
9625: LD_EXP 18
9629: PUSH
9630: LD_VAR 0 1
9634: IN
9635: AND
9636: IFFALSE 9650
// SaveCharacters ( Givi , 01_Givi ) ;
9638: LD_EXP 18
9642: PPUSH
9643: LD_STRING 01_Givi
9645: PPUSH
9646: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9650: LD_EXP 19
9654: PPUSH
9655: CALL_OW 302
9659: PUSH
9660: LD_EXP 19
9664: PUSH
9665: LD_VAR 0 1
9669: IN
9670: AND
9671: IFFALSE 9685
// SaveCharacters ( Mike , 01_Mike ) ;
9673: LD_EXP 19
9677: PPUSH
9678: LD_STRING 01_Mike
9680: PPUSH
9681: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9685: LD_EXP 20
9689: PPUSH
9690: CALL_OW 302
9694: PUSH
9695: LD_EXP 20
9699: PUSH
9700: LD_VAR 0 1
9704: IN
9705: AND
9706: IFFALSE 9720
// SaveCharacters ( Kamil , 01_Kamil ) ;
9708: LD_EXP 20
9712: PPUSH
9713: LD_STRING 01_Kamil
9715: PPUSH
9716: CALL_OW 38
// YouWin ;
9720: CALL_OW 103
// end ; end_of_file
9724: PPOPN 1
9726: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9727: LD_VAR 0 1
9731: PUSH
9732: LD_EXP 16
9736: EQUAL
9737: IFFALSE 9746
// YouLost ( Heike ) ;
9739: LD_STRING Heike
9741: PPUSH
9742: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9746: LD_VAR 0 1
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 25
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: IN
9780: IFFALSE 9886
// begin if un in russianPatrol then
9782: LD_VAR 0 1
9786: PUSH
9787: LD_EXP 21
9791: IN
9792: IFFALSE 9810
// russianPatrol := russianPatrol diff un ;
9794: LD_ADDR_EXP 21
9798: PUSH
9799: LD_EXP 21
9803: PUSH
9804: LD_VAR 0 1
9808: DIFF
9809: ST_TO_ADDR
// if un in russianForestPatrol then
9810: LD_VAR 0 1
9814: PUSH
9815: LD_EXP 22
9819: IN
9820: IFFALSE 9838
// russianForestPatrol := russianForestPatrol diff un ;
9822: LD_ADDR_EXP 22
9826: PUSH
9827: LD_EXP 22
9831: PUSH
9832: LD_VAR 0 1
9836: DIFF
9837: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9838: LD_ADDR_EXP 5
9842: PUSH
9843: LD_EXP 5
9847: PPUSH
9848: LD_EXP 5
9852: PUSH
9853: LD_INT 1
9855: PLUS
9856: PPUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 250
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 251
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 1
9885: ST_TO_ADDR
// end ; end ;
9886: PPOPN 1
9888: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9889: LD_VAR 0 1
9893: PUSH
9894: LD_EXP 16
9898: EQUAL
9899: IFFALSE 9908
// YouLost ( Heike ) ;
9901: LD_STRING Heike
9903: PPUSH
9904: CALL_OW 104
// if un = Olaf then
9908: LD_VAR 0 1
9912: PUSH
9913: LD_EXP 17
9917: EQUAL
9918: IFFALSE 9927
// YouLost ( Olaf ) ;
9920: LD_STRING Olaf
9922: PPUSH
9923: CALL_OW 104
// end ;
9927: PPOPN 1
9929: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 2
9943: PUSH
9944: LD_INT 5
9946: EQUAL
9947: AND
9948: IFFALSE 9957
// YouLost ( FriendlyFire ) ;
9950: LD_STRING FriendlyFire
9952: PPUSH
9953: CALL_OW 104
// end ; end_of_file
9957: PPOPN 2
9959: END
// every 0 0$1 do
9960: GO 9962
9962: DISABLE
// begin enable ;
9963: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9964: LD_STRING updateTimer(
9966: PUSH
9967: LD_OWVAR 1
9971: STR
9972: PUSH
9973: LD_STRING );
9975: STR
9976: PPUSH
9977: CALL_OW 559
// end ;
9981: END
// on MapStart ( p ) do begin if streamModeActive then
9982: LD_EXP 26
9986: IFFALSE 9995
// DefineStreamItems ( true ) ;
9988: LD_INT 1
9990: PPUSH
9991: CALL 11643 0 1
// UpdateFactoryWaypoints ( ) ;
9995: CALL 25227 0 0
// end ;
9999: PPOPN 1
10001: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10002: LD_INT 0
10004: PPUSH
// if p2 = 100 then
10005: LD_VAR 0 2
10009: PUSH
10010: LD_INT 100
10012: EQUAL
10013: IFFALSE 11016
// begin if not StreamModeActive then
10015: LD_EXP 26
10019: NOT
10020: IFFALSE 10030
// StreamModeActive := true ;
10022: LD_ADDR_EXP 26
10026: PUSH
10027: LD_INT 1
10029: ST_TO_ADDR
// if p3 = 0 then
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 0
10037: EQUAL
10038: IFFALSE 10044
// InitStreamMode ;
10040: CALL 11179 0 0
// if p3 = 1 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 1
10051: EQUAL
10052: IFFALSE 10062
// sRocket := true ;
10054: LD_ADDR_EXP 31
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 2 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 2
10069: EQUAL
10070: IFFALSE 10080
// sSpeed := true ;
10072: LD_ADDR_EXP 30
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 3 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 3
10087: EQUAL
10088: IFFALSE 10098
// sEngine := true ;
10090: LD_ADDR_EXP 32
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 4 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 4
10105: EQUAL
10106: IFFALSE 10116
// sSpec := true ;
10108: LD_ADDR_EXP 29
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 5 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 5
10123: EQUAL
10124: IFFALSE 10134
// sLevel := true ;
10126: LD_ADDR_EXP 33
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 6 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 6
10141: EQUAL
10142: IFFALSE 10152
// sArmoury := true ;
10144: LD_ADDR_EXP 34
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 7 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 7
10159: EQUAL
10160: IFFALSE 10170
// sRadar := true ;
10162: LD_ADDR_EXP 35
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 8 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 8
10177: EQUAL
10178: IFFALSE 10188
// sBunker := true ;
10180: LD_ADDR_EXP 36
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 9 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 9
10195: EQUAL
10196: IFFALSE 10206
// sHack := true ;
10198: LD_ADDR_EXP 37
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 10 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 10
10213: EQUAL
10214: IFFALSE 10224
// sFire := true ;
10216: LD_ADDR_EXP 38
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 11 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 11
10231: EQUAL
10232: IFFALSE 10242
// sRefresh := true ;
10234: LD_ADDR_EXP 39
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 12 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 12
10249: EQUAL
10250: IFFALSE 10260
// sExp := true ;
10252: LD_ADDR_EXP 40
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 13 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 13
10267: EQUAL
10268: IFFALSE 10278
// sDepot := true ;
10270: LD_ADDR_EXP 41
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 14 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 14
10285: EQUAL
10286: IFFALSE 10296
// sFlag := true ;
10288: LD_ADDR_EXP 42
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 15 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 15
10303: EQUAL
10304: IFFALSE 10314
// sKamikadze := true ;
10306: LD_ADDR_EXP 50
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 16 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 16
10321: EQUAL
10322: IFFALSE 10332
// sTroll := true ;
10324: LD_ADDR_EXP 51
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 17 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 17
10339: EQUAL
10340: IFFALSE 10350
// sSlow := true ;
10342: LD_ADDR_EXP 52
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 18 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 18
10357: EQUAL
10358: IFFALSE 10368
// sLack := true ;
10360: LD_ADDR_EXP 53
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 19 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 19
10375: EQUAL
10376: IFFALSE 10386
// sTank := true ;
10378: LD_ADDR_EXP 55
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 20 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 20
10393: EQUAL
10394: IFFALSE 10404
// sRemote := true ;
10396: LD_ADDR_EXP 56
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 21 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 21
10411: EQUAL
10412: IFFALSE 10422
// sPowell := true ;
10414: LD_ADDR_EXP 57
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 22 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 22
10429: EQUAL
10430: IFFALSE 10440
// sTeleport := true ;
10432: LD_ADDR_EXP 60
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 23 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 23
10447: EQUAL
10448: IFFALSE 10458
// sOilTower := true ;
10450: LD_ADDR_EXP 62
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 24 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 24
10465: EQUAL
10466: IFFALSE 10476
// sShovel := true ;
10468: LD_ADDR_EXP 63
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 25 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 25
10483: EQUAL
10484: IFFALSE 10494
// sSheik := true ;
10486: LD_ADDR_EXP 64
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 26 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 26
10501: EQUAL
10502: IFFALSE 10512
// sEarthquake := true ;
10504: LD_ADDR_EXP 66
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 27 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 27
10519: EQUAL
10520: IFFALSE 10530
// sAI := true ;
10522: LD_ADDR_EXP 67
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 28 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 28
10537: EQUAL
10538: IFFALSE 10548
// sCargo := true ;
10540: LD_ADDR_EXP 70
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 29 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 29
10555: EQUAL
10556: IFFALSE 10566
// sDLaser := true ;
10558: LD_ADDR_EXP 71
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 30 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 30
10573: EQUAL
10574: IFFALSE 10584
// sExchange := true ;
10576: LD_ADDR_EXP 72
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 31 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 31
10591: EQUAL
10592: IFFALSE 10602
// sFac := true ;
10594: LD_ADDR_EXP 73
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 32 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 32
10609: EQUAL
10610: IFFALSE 10620
// sPower := true ;
10612: LD_ADDR_EXP 74
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 33 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 33
10627: EQUAL
10628: IFFALSE 10638
// sRandom := true ;
10630: LD_ADDR_EXP 75
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 34 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 34
10645: EQUAL
10646: IFFALSE 10656
// sShield := true ;
10648: LD_ADDR_EXP 76
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 35 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 35
10663: EQUAL
10664: IFFALSE 10674
// sTime := true ;
10666: LD_ADDR_EXP 77
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 36 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 36
10681: EQUAL
10682: IFFALSE 10692
// sTools := true ;
10684: LD_ADDR_EXP 78
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 101 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 101
10699: EQUAL
10700: IFFALSE 10710
// sSold := true ;
10702: LD_ADDR_EXP 43
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 102 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 102
10717: EQUAL
10718: IFFALSE 10728
// sDiff := true ;
10720: LD_ADDR_EXP 44
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 103 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 103
10735: EQUAL
10736: IFFALSE 10746
// sFog := true ;
10738: LD_ADDR_EXP 47
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 104 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 104
10753: EQUAL
10754: IFFALSE 10764
// sReset := true ;
10756: LD_ADDR_EXP 48
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 105 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 105
10771: EQUAL
10772: IFFALSE 10782
// sSun := true ;
10774: LD_ADDR_EXP 49
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 106 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 106
10789: EQUAL
10790: IFFALSE 10800
// sTiger := true ;
10792: LD_ADDR_EXP 45
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 107 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 107
10807: EQUAL
10808: IFFALSE 10818
// sBomb := true ;
10810: LD_ADDR_EXP 46
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 108 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 108
10825: EQUAL
10826: IFFALSE 10836
// sWound := true ;
10828: LD_ADDR_EXP 54
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 109 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 109
10843: EQUAL
10844: IFFALSE 10854
// sBetray := true ;
10846: LD_ADDR_EXP 58
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 110 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 110
10861: EQUAL
10862: IFFALSE 10872
// sContamin := true ;
10864: LD_ADDR_EXP 59
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 111 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 111
10879: EQUAL
10880: IFFALSE 10890
// sOil := true ;
10882: LD_ADDR_EXP 61
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 112 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 112
10897: EQUAL
10898: IFFALSE 10908
// sStu := true ;
10900: LD_ADDR_EXP 65
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 113 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 113
10915: EQUAL
10916: IFFALSE 10926
// sBazooka := true ;
10918: LD_ADDR_EXP 68
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 114 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 114
10933: EQUAL
10934: IFFALSE 10944
// sMortar := true ;
10936: LD_ADDR_EXP 69
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 115 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 115
10951: EQUAL
10952: IFFALSE 10962
// sRanger := true ;
10954: LD_ADDR_EXP 79
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 116 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 116
10969: EQUAL
10970: IFFALSE 10980
// sComputer := true ;
10972: LD_ADDR_EXP 80
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 117 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 117
10987: EQUAL
10988: IFFALSE 10998
// s30 := true ;
10990: LD_ADDR_EXP 81
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 118 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 118
11005: EQUAL
11006: IFFALSE 11016
// s60 := true ;
11008: LD_ADDR_EXP 82
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// end ; if p2 = 101 then
11016: LD_VAR 0 2
11020: PUSH
11021: LD_INT 101
11023: EQUAL
11024: IFFALSE 11152
// begin case p3 of 1 :
11026: LD_VAR 0 3
11030: PUSH
11031: LD_INT 1
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11046
11039: POP
// hHackUnlimitedResources ; 2 :
11040: CALL 23250 0 0
11044: GO 11152
11046: LD_INT 2
11048: DOUBLE
11049: EQUAL
11050: IFTRUE 11054
11052: GO 11061
11054: POP
// hHackSetLevel10 ; 3 :
11055: CALL 23383 0 0
11059: GO 11152
11061: LD_INT 3
11063: DOUBLE
11064: EQUAL
11065: IFTRUE 11069
11067: GO 11076
11069: POP
// hHackSetLevel10YourUnits ; 4 :
11070: CALL 23468 0 0
11074: GO 11152
11076: LD_INT 4
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11091
11084: POP
// hHackInvincible ; 5 :
11085: CALL 23916 0 0
11089: GO 11152
11091: LD_INT 5
11093: DOUBLE
11094: EQUAL
11095: IFTRUE 11099
11097: GO 11106
11099: POP
// hHackInvisible ; 6 :
11100: CALL 24027 0 0
11104: GO 11152
11106: LD_INT 6
11108: DOUBLE
11109: EQUAL
11110: IFTRUE 11114
11112: GO 11121
11114: POP
// hHackChangeYourSide ; 7 :
11115: CALL 24084 0 0
11119: GO 11152
11121: LD_INT 7
11123: DOUBLE
11124: EQUAL
11125: IFTRUE 11129
11127: GO 11136
11129: POP
// hHackChangeUnitSide ; 8 :
11130: CALL 24126 0 0
11134: GO 11152
11136: LD_INT 8
11138: DOUBLE
11139: EQUAL
11140: IFTRUE 11144
11142: GO 11151
11144: POP
// hHackFog ; end ;
11145: CALL 24227 0 0
11149: GO 11152
11151: POP
// end ; end ;
11152: LD_VAR 0 7
11156: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11157: GO 11159
11159: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11160: LD_STRING initStreamRollete();
11162: PPUSH
11163: CALL_OW 559
// InitStreamMode ;
11167: CALL 11179 0 0
// DefineStreamItems ( false ) ;
11171: LD_INT 0
11173: PPUSH
11174: CALL 11643 0 1
// end ;
11178: END
// function InitStreamMode ; begin
11179: LD_INT 0
11181: PPUSH
// streamModeActive := false ;
11182: LD_ADDR_EXP 26
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// normalCounter := 36 ;
11190: LD_ADDR_EXP 27
11194: PUSH
11195: LD_INT 36
11197: ST_TO_ADDR
// hardcoreCounter := 18 ;
11198: LD_ADDR_EXP 28
11202: PUSH
11203: LD_INT 18
11205: ST_TO_ADDR
// sRocket := false ;
11206: LD_ADDR_EXP 31
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sSpeed := false ;
11214: LD_ADDR_EXP 30
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sEngine := false ;
11222: LD_ADDR_EXP 32
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sSpec := false ;
11230: LD_ADDR_EXP 29
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sLevel := false ;
11238: LD_ADDR_EXP 33
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sArmoury := false ;
11246: LD_ADDR_EXP 34
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sRadar := false ;
11254: LD_ADDR_EXP 35
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sBunker := false ;
11262: LD_ADDR_EXP 36
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sHack := false ;
11270: LD_ADDR_EXP 37
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sFire := false ;
11278: LD_ADDR_EXP 38
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sRefresh := false ;
11286: LD_ADDR_EXP 39
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sExp := false ;
11294: LD_ADDR_EXP 40
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sDepot := false ;
11302: LD_ADDR_EXP 41
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sFlag := false ;
11310: LD_ADDR_EXP 42
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sKamikadze := false ;
11318: LD_ADDR_EXP 50
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sTroll := false ;
11326: LD_ADDR_EXP 51
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sSlow := false ;
11334: LD_ADDR_EXP 52
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sLack := false ;
11342: LD_ADDR_EXP 53
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sTank := false ;
11350: LD_ADDR_EXP 55
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sRemote := false ;
11358: LD_ADDR_EXP 56
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sPowell := false ;
11366: LD_ADDR_EXP 57
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sTeleport := false ;
11374: LD_ADDR_EXP 60
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sOilTower := false ;
11382: LD_ADDR_EXP 62
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sShovel := false ;
11390: LD_ADDR_EXP 63
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sSheik := false ;
11398: LD_ADDR_EXP 64
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sEarthquake := false ;
11406: LD_ADDR_EXP 66
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sAI := false ;
11414: LD_ADDR_EXP 67
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sCargo := false ;
11422: LD_ADDR_EXP 70
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sDLaser := false ;
11430: LD_ADDR_EXP 71
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sExchange := false ;
11438: LD_ADDR_EXP 72
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sFac := false ;
11446: LD_ADDR_EXP 73
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sPower := false ;
11454: LD_ADDR_EXP 74
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sRandom := false ;
11462: LD_ADDR_EXP 75
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// sShield := false ;
11470: LD_ADDR_EXP 76
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// sTime := false ;
11478: LD_ADDR_EXP 77
11482: PUSH
11483: LD_INT 0
11485: ST_TO_ADDR
// sTools := false ;
11486: LD_ADDR_EXP 78
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// sSold := false ;
11494: LD_ADDR_EXP 43
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// sDiff := false ;
11502: LD_ADDR_EXP 44
11506: PUSH
11507: LD_INT 0
11509: ST_TO_ADDR
// sFog := false ;
11510: LD_ADDR_EXP 47
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// sReset := false ;
11518: LD_ADDR_EXP 48
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// sSun := false ;
11526: LD_ADDR_EXP 49
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// sTiger := false ;
11534: LD_ADDR_EXP 45
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// sBomb := false ;
11542: LD_ADDR_EXP 46
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// sWound := false ;
11550: LD_ADDR_EXP 54
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// sBetray := false ;
11558: LD_ADDR_EXP 58
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// sContamin := false ;
11566: LD_ADDR_EXP 59
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// sOil := false ;
11574: LD_ADDR_EXP 61
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// sStu := false ;
11582: LD_ADDR_EXP 65
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// sBazooka := false ;
11590: LD_ADDR_EXP 68
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// sMortar := false ;
11598: LD_ADDR_EXP 69
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// sRanger := false ;
11606: LD_ADDR_EXP 79
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// sComputer := false ;
11614: LD_ADDR_EXP 80
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// s30 := false ;
11622: LD_ADDR_EXP 81
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// s60 := false ;
11630: LD_ADDR_EXP 82
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// end ;
11638: LD_VAR 0 1
11642: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
// result := [ ] ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: EMPTY
11658: ST_TO_ADDR
// if campaign_id = 1 then
11659: LD_OWVAR 69
11663: PUSH
11664: LD_INT 1
11666: EQUAL
11667: IFFALSE 14833
// begin case mission_number of 1 :
11669: LD_OWVAR 70
11673: PUSH
11674: LD_INT 1
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11758
11682: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 4
11693: PUSH
11694: LD_INT 11
11696: PUSH
11697: LD_INT 12
11699: PUSH
11700: LD_INT 15
11702: PUSH
11703: LD_INT 16
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 23
11711: PUSH
11712: LD_INT 26
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 101
11728: PUSH
11729: LD_INT 102
11731: PUSH
11732: LD_INT 106
11734: PUSH
11735: LD_INT 116
11737: PUSH
11738: LD_INT 117
11740: PUSH
11741: LD_INT 118
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: ST_TO_ADDR
11756: GO 14831
11758: LD_INT 2
11760: DOUBLE
11761: EQUAL
11762: IFTRUE 11766
11764: GO 11850
11766: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11767: LD_ADDR_VAR 0 2
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: LD_INT 11
11780: PUSH
11781: LD_INT 12
11783: PUSH
11784: LD_INT 15
11786: PUSH
11787: LD_INT 16
11789: PUSH
11790: LD_INT 22
11792: PUSH
11793: LD_INT 23
11795: PUSH
11796: LD_INT 26
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: LD_INT 101
11812: PUSH
11813: LD_INT 102
11815: PUSH
11816: LD_INT 105
11818: PUSH
11819: LD_INT 106
11821: PUSH
11822: LD_INT 108
11824: PUSH
11825: LD_INT 116
11827: PUSH
11828: LD_INT 117
11830: PUSH
11831: LD_INT 118
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: ST_TO_ADDR
11848: GO 14831
11850: LD_INT 3
11852: DOUBLE
11853: EQUAL
11854: IFTRUE 11858
11856: GO 11946
11858: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 4
11869: PUSH
11870: LD_INT 5
11872: PUSH
11873: LD_INT 11
11875: PUSH
11876: LD_INT 12
11878: PUSH
11879: LD_INT 15
11881: PUSH
11882: LD_INT 16
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_INT 26
11890: PUSH
11891: LD_INT 36
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 101
11908: PUSH
11909: LD_INT 102
11911: PUSH
11912: LD_INT 105
11914: PUSH
11915: LD_INT 106
11917: PUSH
11918: LD_INT 108
11920: PUSH
11921: LD_INT 116
11923: PUSH
11924: LD_INT 117
11926: PUSH
11927: LD_INT 118
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: ST_TO_ADDR
11944: GO 14831
11946: LD_INT 4
11948: DOUBLE
11949: EQUAL
11950: IFTRUE 11954
11952: GO 12050
11954: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11955: LD_ADDR_VAR 0 2
11959: PUSH
11960: LD_INT 2
11962: PUSH
11963: LD_INT 4
11965: PUSH
11966: LD_INT 5
11968: PUSH
11969: LD_INT 8
11971: PUSH
11972: LD_INT 11
11974: PUSH
11975: LD_INT 12
11977: PUSH
11978: LD_INT 15
11980: PUSH
11981: LD_INT 16
11983: PUSH
11984: LD_INT 22
11986: PUSH
11987: LD_INT 23
11989: PUSH
11990: LD_INT 26
11992: PUSH
11993: LD_INT 36
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 101
12012: PUSH
12013: LD_INT 102
12015: PUSH
12016: LD_INT 105
12018: PUSH
12019: LD_INT 106
12021: PUSH
12022: LD_INT 108
12024: PUSH
12025: LD_INT 116
12027: PUSH
12028: LD_INT 117
12030: PUSH
12031: LD_INT 118
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: ST_TO_ADDR
12048: GO 14831
12050: LD_INT 5
12052: DOUBLE
12053: EQUAL
12054: IFTRUE 12058
12056: GO 12170
12058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: LD_INT 4
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: LD_INT 6
12075: PUSH
12076: LD_INT 8
12078: PUSH
12079: LD_INT 11
12081: PUSH
12082: LD_INT 12
12084: PUSH
12085: LD_INT 15
12087: PUSH
12088: LD_INT 16
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_INT 23
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 26
12102: PUSH
12103: LD_INT 36
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 101
12124: PUSH
12125: LD_INT 102
12127: PUSH
12128: LD_INT 105
12130: PUSH
12131: LD_INT 106
12133: PUSH
12134: LD_INT 108
12136: PUSH
12137: LD_INT 109
12139: PUSH
12140: LD_INT 112
12142: PUSH
12143: LD_INT 116
12145: PUSH
12146: LD_INT 117
12148: PUSH
12149: LD_INT 118
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: ST_TO_ADDR
12168: GO 14831
12170: LD_INT 6
12172: DOUBLE
12173: EQUAL
12174: IFTRUE 12178
12176: GO 12310
12178: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: LD_INT 4
12189: PUSH
12190: LD_INT 5
12192: PUSH
12193: LD_INT 6
12195: PUSH
12196: LD_INT 8
12198: PUSH
12199: LD_INT 11
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: LD_INT 15
12207: PUSH
12208: LD_INT 16
12210: PUSH
12211: LD_INT 20
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_INT 23
12222: PUSH
12223: LD_INT 25
12225: PUSH
12226: LD_INT 26
12228: PUSH
12229: LD_INT 30
12231: PUSH
12232: LD_INT 31
12234: PUSH
12235: LD_INT 32
12237: PUSH
12238: LD_INT 36
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 101
12264: PUSH
12265: LD_INT 102
12267: PUSH
12268: LD_INT 105
12270: PUSH
12271: LD_INT 106
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 112
12282: PUSH
12283: LD_INT 116
12285: PUSH
12286: LD_INT 117
12288: PUSH
12289: LD_INT 118
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: ST_TO_ADDR
12308: GO 14831
12310: LD_INT 7
12312: DOUBLE
12313: EQUAL
12314: IFTRUE 12318
12316: GO 12430
12318: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12319: LD_ADDR_VAR 0 2
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: LD_INT 7
12335: PUSH
12336: LD_INT 11
12338: PUSH
12339: LD_INT 12
12341: PUSH
12342: LD_INT 15
12344: PUSH
12345: LD_INT 16
12347: PUSH
12348: LD_INT 20
12350: PUSH
12351: LD_INT 21
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_INT 23
12359: PUSH
12360: LD_INT 25
12362: PUSH
12363: LD_INT 26
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 101
12384: PUSH
12385: LD_INT 102
12387: PUSH
12388: LD_INT 103
12390: PUSH
12391: LD_INT 105
12393: PUSH
12394: LD_INT 106
12396: PUSH
12397: LD_INT 108
12399: PUSH
12400: LD_INT 112
12402: PUSH
12403: LD_INT 116
12405: PUSH
12406: LD_INT 117
12408: PUSH
12409: LD_INT 118
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: ST_TO_ADDR
12428: GO 14831
12430: LD_INT 8
12432: DOUBLE
12433: EQUAL
12434: IFTRUE 12438
12436: GO 12578
12438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 4
12449: PUSH
12450: LD_INT 5
12452: PUSH
12453: LD_INT 6
12455: PUSH
12456: LD_INT 7
12458: PUSH
12459: LD_INT 8
12461: PUSH
12462: LD_INT 11
12464: PUSH
12465: LD_INT 12
12467: PUSH
12468: LD_INT 15
12470: PUSH
12471: LD_INT 16
12473: PUSH
12474: LD_INT 20
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_INT 23
12485: PUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 26
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: LD_INT 31
12497: PUSH
12498: LD_INT 32
12500: PUSH
12501: LD_INT 36
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 101
12528: PUSH
12529: LD_INT 102
12531: PUSH
12532: LD_INT 103
12534: PUSH
12535: LD_INT 105
12537: PUSH
12538: LD_INT 106
12540: PUSH
12541: LD_INT 108
12543: PUSH
12544: LD_INT 109
12546: PUSH
12547: LD_INT 112
12549: PUSH
12550: LD_INT 116
12552: PUSH
12553: LD_INT 117
12555: PUSH
12556: LD_INT 118
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: ST_TO_ADDR
12576: GO 14831
12578: LD_INT 9
12580: DOUBLE
12581: EQUAL
12582: IFTRUE 12586
12584: GO 12734
12586: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12587: LD_ADDR_VAR 0 2
12591: PUSH
12592: LD_INT 2
12594: PUSH
12595: LD_INT 4
12597: PUSH
12598: LD_INT 5
12600: PUSH
12601: LD_INT 6
12603: PUSH
12604: LD_INT 7
12606: PUSH
12607: LD_INT 8
12609: PUSH
12610: LD_INT 11
12612: PUSH
12613: LD_INT 12
12615: PUSH
12616: LD_INT 15
12618: PUSH
12619: LD_INT 16
12621: PUSH
12622: LD_INT 20
12624: PUSH
12625: LD_INT 21
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_INT 23
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 26
12639: PUSH
12640: LD_INT 28
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 31
12648: PUSH
12649: LD_INT 32
12651: PUSH
12652: LD_INT 36
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 101
12680: PUSH
12681: LD_INT 102
12683: PUSH
12684: LD_INT 103
12686: PUSH
12687: LD_INT 105
12689: PUSH
12690: LD_INT 106
12692: PUSH
12693: LD_INT 108
12695: PUSH
12696: LD_INT 109
12698: PUSH
12699: LD_INT 112
12701: PUSH
12702: LD_INT 114
12704: PUSH
12705: LD_INT 116
12707: PUSH
12708: LD_INT 117
12710: PUSH
12711: LD_INT 118
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: ST_TO_ADDR
12732: GO 14831
12734: LD_INT 10
12736: DOUBLE
12737: EQUAL
12738: IFTRUE 12742
12740: GO 12938
12742: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 4
12753: PUSH
12754: LD_INT 5
12756: PUSH
12757: LD_INT 6
12759: PUSH
12760: LD_INT 7
12762: PUSH
12763: LD_INT 8
12765: PUSH
12766: LD_INT 9
12768: PUSH
12769: LD_INT 10
12771: PUSH
12772: LD_INT 11
12774: PUSH
12775: LD_INT 12
12777: PUSH
12778: LD_INT 13
12780: PUSH
12781: LD_INT 14
12783: PUSH
12784: LD_INT 15
12786: PUSH
12787: LD_INT 16
12789: PUSH
12790: LD_INT 17
12792: PUSH
12793: LD_INT 18
12795: PUSH
12796: LD_INT 19
12798: PUSH
12799: LD_INT 20
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 23
12810: PUSH
12811: LD_INT 24
12813: PUSH
12814: LD_INT 25
12816: PUSH
12817: LD_INT 26
12819: PUSH
12820: LD_INT 28
12822: PUSH
12823: LD_INT 30
12825: PUSH
12826: LD_INT 31
12828: PUSH
12829: LD_INT 32
12831: PUSH
12832: LD_INT 36
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 101
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 103
12874: PUSH
12875: LD_INT 104
12877: PUSH
12878: LD_INT 105
12880: PUSH
12881: LD_INT 106
12883: PUSH
12884: LD_INT 107
12886: PUSH
12887: LD_INT 108
12889: PUSH
12890: LD_INT 109
12892: PUSH
12893: LD_INT 110
12895: PUSH
12896: LD_INT 111
12898: PUSH
12899: LD_INT 112
12901: PUSH
12902: LD_INT 114
12904: PUSH
12905: LD_INT 116
12907: PUSH
12908: LD_INT 117
12910: PUSH
12911: LD_INT 118
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
12936: GO 14831
12938: LD_INT 11
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12946
12944: GO 13150
12946: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: LD_INT 4
12960: PUSH
12961: LD_INT 5
12963: PUSH
12964: LD_INT 6
12966: PUSH
12967: LD_INT 7
12969: PUSH
12970: LD_INT 8
12972: PUSH
12973: LD_INT 9
12975: PUSH
12976: LD_INT 10
12978: PUSH
12979: LD_INT 11
12981: PUSH
12982: LD_INT 12
12984: PUSH
12985: LD_INT 13
12987: PUSH
12988: LD_INT 14
12990: PUSH
12991: LD_INT 15
12993: PUSH
12994: LD_INT 16
12996: PUSH
12997: LD_INT 17
12999: PUSH
13000: LD_INT 18
13002: PUSH
13003: LD_INT 19
13005: PUSH
13006: LD_INT 20
13008: PUSH
13009: LD_INT 21
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_INT 23
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 25
13023: PUSH
13024: LD_INT 26
13026: PUSH
13027: LD_INT 28
13029: PUSH
13030: LD_INT 30
13032: PUSH
13033: LD_INT 31
13035: PUSH
13036: LD_INT 32
13038: PUSH
13039: LD_INT 34
13041: PUSH
13042: LD_INT 36
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 101
13080: PUSH
13081: LD_INT 102
13083: PUSH
13084: LD_INT 103
13086: PUSH
13087: LD_INT 104
13089: PUSH
13090: LD_INT 105
13092: PUSH
13093: LD_INT 106
13095: PUSH
13096: LD_INT 107
13098: PUSH
13099: LD_INT 108
13101: PUSH
13102: LD_INT 109
13104: PUSH
13105: LD_INT 110
13107: PUSH
13108: LD_INT 111
13110: PUSH
13111: LD_INT 112
13113: PUSH
13114: LD_INT 114
13116: PUSH
13117: LD_INT 116
13119: PUSH
13120: LD_INT 117
13122: PUSH
13123: LD_INT 118
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: ST_TO_ADDR
13148: GO 14831
13150: LD_INT 12
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13378
13158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13159: LD_ADDR_VAR 0 2
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: LD_INT 3
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: LD_INT 5
13178: PUSH
13179: LD_INT 6
13181: PUSH
13182: LD_INT 7
13184: PUSH
13185: LD_INT 8
13187: PUSH
13188: LD_INT 9
13190: PUSH
13191: LD_INT 10
13193: PUSH
13194: LD_INT 11
13196: PUSH
13197: LD_INT 12
13199: PUSH
13200: LD_INT 13
13202: PUSH
13203: LD_INT 14
13205: PUSH
13206: LD_INT 15
13208: PUSH
13209: LD_INT 16
13211: PUSH
13212: LD_INT 17
13214: PUSH
13215: LD_INT 18
13217: PUSH
13218: LD_INT 19
13220: PUSH
13221: LD_INT 20
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 22
13229: PUSH
13230: LD_INT 23
13232: PUSH
13233: LD_INT 24
13235: PUSH
13236: LD_INT 25
13238: PUSH
13239: LD_INT 26
13241: PUSH
13242: LD_INT 27
13244: PUSH
13245: LD_INT 28
13247: PUSH
13248: LD_INT 30
13250: PUSH
13251: LD_INT 31
13253: PUSH
13254: LD_INT 32
13256: PUSH
13257: LD_INT 33
13259: PUSH
13260: LD_INT 34
13262: PUSH
13263: LD_INT 36
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 101
13304: PUSH
13305: LD_INT 102
13307: PUSH
13308: LD_INT 103
13310: PUSH
13311: LD_INT 104
13313: PUSH
13314: LD_INT 105
13316: PUSH
13317: LD_INT 106
13319: PUSH
13320: LD_INT 107
13322: PUSH
13323: LD_INT 108
13325: PUSH
13326: LD_INT 109
13328: PUSH
13329: LD_INT 110
13331: PUSH
13332: LD_INT 111
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 113
13340: PUSH
13341: LD_INT 114
13343: PUSH
13344: LD_INT 116
13346: PUSH
13347: LD_INT 117
13349: PUSH
13350: LD_INT 118
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 14831
13378: LD_INT 13
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13594
13386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: LD_INT 8
13409: PUSH
13410: LD_INT 9
13412: PUSH
13413: LD_INT 10
13415: PUSH
13416: LD_INT 11
13418: PUSH
13419: LD_INT 12
13421: PUSH
13422: LD_INT 14
13424: PUSH
13425: LD_INT 15
13427: PUSH
13428: LD_INT 16
13430: PUSH
13431: LD_INT 17
13433: PUSH
13434: LD_INT 18
13436: PUSH
13437: LD_INT 19
13439: PUSH
13440: LD_INT 20
13442: PUSH
13443: LD_INT 21
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 23
13451: PUSH
13452: LD_INT 24
13454: PUSH
13455: LD_INT 25
13457: PUSH
13458: LD_INT 26
13460: PUSH
13461: LD_INT 27
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 30
13469: PUSH
13470: LD_INT 31
13472: PUSH
13473: LD_INT 32
13475: PUSH
13476: LD_INT 33
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 36
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 101
13520: PUSH
13521: LD_INT 102
13523: PUSH
13524: LD_INT 103
13526: PUSH
13527: LD_INT 104
13529: PUSH
13530: LD_INT 105
13532: PUSH
13533: LD_INT 106
13535: PUSH
13536: LD_INT 107
13538: PUSH
13539: LD_INT 108
13541: PUSH
13542: LD_INT 109
13544: PUSH
13545: LD_INT 110
13547: PUSH
13548: LD_INT 111
13550: PUSH
13551: LD_INT 112
13553: PUSH
13554: LD_INT 113
13556: PUSH
13557: LD_INT 114
13559: PUSH
13560: LD_INT 116
13562: PUSH
13563: LD_INT 117
13565: PUSH
13566: LD_INT 118
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 14831
13594: LD_INT 14
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13826
13602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: LD_INT 4
13619: PUSH
13620: LD_INT 5
13622: PUSH
13623: LD_INT 6
13625: PUSH
13626: LD_INT 7
13628: PUSH
13629: LD_INT 8
13631: PUSH
13632: LD_INT 9
13634: PUSH
13635: LD_INT 10
13637: PUSH
13638: LD_INT 11
13640: PUSH
13641: LD_INT 12
13643: PUSH
13644: LD_INT 13
13646: PUSH
13647: LD_INT 14
13649: PUSH
13650: LD_INT 15
13652: PUSH
13653: LD_INT 16
13655: PUSH
13656: LD_INT 17
13658: PUSH
13659: LD_INT 18
13661: PUSH
13662: LD_INT 19
13664: PUSH
13665: LD_INT 20
13667: PUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 22
13673: PUSH
13674: LD_INT 23
13676: PUSH
13677: LD_INT 24
13679: PUSH
13680: LD_INT 25
13682: PUSH
13683: LD_INT 26
13685: PUSH
13686: LD_INT 27
13688: PUSH
13689: LD_INT 28
13691: PUSH
13692: LD_INT 29
13694: PUSH
13695: LD_INT 30
13697: PUSH
13698: LD_INT 31
13700: PUSH
13701: LD_INT 32
13703: PUSH
13704: LD_INT 33
13706: PUSH
13707: LD_INT 34
13709: PUSH
13710: LD_INT 36
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 101
13752: PUSH
13753: LD_INT 102
13755: PUSH
13756: LD_INT 103
13758: PUSH
13759: LD_INT 104
13761: PUSH
13762: LD_INT 105
13764: PUSH
13765: LD_INT 106
13767: PUSH
13768: LD_INT 107
13770: PUSH
13771: LD_INT 108
13773: PUSH
13774: LD_INT 109
13776: PUSH
13777: LD_INT 110
13779: PUSH
13780: LD_INT 111
13782: PUSH
13783: LD_INT 112
13785: PUSH
13786: LD_INT 113
13788: PUSH
13789: LD_INT 114
13791: PUSH
13792: LD_INT 116
13794: PUSH
13795: LD_INT 117
13797: PUSH
13798: LD_INT 118
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: ST_TO_ADDR
13824: GO 14831
13826: LD_INT 15
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 14058
13834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13835: LD_ADDR_VAR 0 2
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: LD_INT 4
13851: PUSH
13852: LD_INT 5
13854: PUSH
13855: LD_INT 6
13857: PUSH
13858: LD_INT 7
13860: PUSH
13861: LD_INT 8
13863: PUSH
13864: LD_INT 9
13866: PUSH
13867: LD_INT 10
13869: PUSH
13870: LD_INT 11
13872: PUSH
13873: LD_INT 12
13875: PUSH
13876: LD_INT 13
13878: PUSH
13879: LD_INT 14
13881: PUSH
13882: LD_INT 15
13884: PUSH
13885: LD_INT 16
13887: PUSH
13888: LD_INT 17
13890: PUSH
13891: LD_INT 18
13893: PUSH
13894: LD_INT 19
13896: PUSH
13897: LD_INT 20
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 22
13905: PUSH
13906: LD_INT 23
13908: PUSH
13909: LD_INT 24
13911: PUSH
13912: LD_INT 25
13914: PUSH
13915: LD_INT 26
13917: PUSH
13918: LD_INT 27
13920: PUSH
13921: LD_INT 28
13923: PUSH
13924: LD_INT 29
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 31
13932: PUSH
13933: LD_INT 32
13935: PUSH
13936: LD_INT 33
13938: PUSH
13939: LD_INT 34
13941: PUSH
13942: LD_INT 36
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 101
13984: PUSH
13985: LD_INT 102
13987: PUSH
13988: LD_INT 103
13990: PUSH
13991: LD_INT 104
13993: PUSH
13994: LD_INT 105
13996: PUSH
13997: LD_INT 106
13999: PUSH
14000: LD_INT 107
14002: PUSH
14003: LD_INT 108
14005: PUSH
14006: LD_INT 109
14008: PUSH
14009: LD_INT 110
14011: PUSH
14012: LD_INT 111
14014: PUSH
14015: LD_INT 112
14017: PUSH
14018: LD_INT 113
14020: PUSH
14021: LD_INT 114
14023: PUSH
14024: LD_INT 116
14026: PUSH
14027: LD_INT 117
14029: PUSH
14030: LD_INT 118
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: ST_TO_ADDR
14056: GO 14831
14058: LD_INT 16
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14202
14066: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: LD_INT 4
14077: PUSH
14078: LD_INT 5
14080: PUSH
14081: LD_INT 7
14083: PUSH
14084: LD_INT 11
14086: PUSH
14087: LD_INT 12
14089: PUSH
14090: LD_INT 15
14092: PUSH
14093: LD_INT 16
14095: PUSH
14096: LD_INT 20
14098: PUSH
14099: LD_INT 21
14101: PUSH
14102: LD_INT 22
14104: PUSH
14105: LD_INT 23
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 26
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 31
14119: PUSH
14120: LD_INT 32
14122: PUSH
14123: LD_INT 33
14125: PUSH
14126: LD_INT 34
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 101
14152: PUSH
14153: LD_INT 102
14155: PUSH
14156: LD_INT 103
14158: PUSH
14159: LD_INT 106
14161: PUSH
14162: LD_INT 108
14164: PUSH
14165: LD_INT 112
14167: PUSH
14168: LD_INT 113
14170: PUSH
14171: LD_INT 114
14173: PUSH
14174: LD_INT 116
14176: PUSH
14177: LD_INT 117
14179: PUSH
14180: LD_INT 118
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: ST_TO_ADDR
14200: GO 14831
14202: LD_INT 17
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14434
14210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14211: LD_ADDR_VAR 0 2
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: LD_INT 4
14227: PUSH
14228: LD_INT 5
14230: PUSH
14231: LD_INT 6
14233: PUSH
14234: LD_INT 7
14236: PUSH
14237: LD_INT 8
14239: PUSH
14240: LD_INT 9
14242: PUSH
14243: LD_INT 10
14245: PUSH
14246: LD_INT 11
14248: PUSH
14249: LD_INT 12
14251: PUSH
14252: LD_INT 13
14254: PUSH
14255: LD_INT 14
14257: PUSH
14258: LD_INT 15
14260: PUSH
14261: LD_INT 16
14263: PUSH
14264: LD_INT 17
14266: PUSH
14267: LD_INT 18
14269: PUSH
14270: LD_INT 19
14272: PUSH
14273: LD_INT 20
14275: PUSH
14276: LD_INT 21
14278: PUSH
14279: LD_INT 22
14281: PUSH
14282: LD_INT 23
14284: PUSH
14285: LD_INT 24
14287: PUSH
14288: LD_INT 25
14290: PUSH
14291: LD_INT 26
14293: PUSH
14294: LD_INT 27
14296: PUSH
14297: LD_INT 28
14299: PUSH
14300: LD_INT 29
14302: PUSH
14303: LD_INT 30
14305: PUSH
14306: LD_INT 31
14308: PUSH
14309: LD_INT 32
14311: PUSH
14312: LD_INT 33
14314: PUSH
14315: LD_INT 34
14317: PUSH
14318: LD_INT 36
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 101
14360: PUSH
14361: LD_INT 102
14363: PUSH
14364: LD_INT 103
14366: PUSH
14367: LD_INT 104
14369: PUSH
14370: LD_INT 105
14372: PUSH
14373: LD_INT 106
14375: PUSH
14376: LD_INT 107
14378: PUSH
14379: LD_INT 108
14381: PUSH
14382: LD_INT 109
14384: PUSH
14385: LD_INT 110
14387: PUSH
14388: LD_INT 111
14390: PUSH
14391: LD_INT 112
14393: PUSH
14394: LD_INT 113
14396: PUSH
14397: LD_INT 114
14399: PUSH
14400: LD_INT 116
14402: PUSH
14403: LD_INT 117
14405: PUSH
14406: LD_INT 118
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: ST_TO_ADDR
14432: GO 14831
14434: LD_INT 18
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14590
14442: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14443: LD_ADDR_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 4
14453: PUSH
14454: LD_INT 5
14456: PUSH
14457: LD_INT 7
14459: PUSH
14460: LD_INT 11
14462: PUSH
14463: LD_INT 12
14465: PUSH
14466: LD_INT 15
14468: PUSH
14469: LD_INT 16
14471: PUSH
14472: LD_INT 20
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_INT 23
14483: PUSH
14484: LD_INT 25
14486: PUSH
14487: LD_INT 26
14489: PUSH
14490: LD_INT 30
14492: PUSH
14493: LD_INT 31
14495: PUSH
14496: LD_INT 32
14498: PUSH
14499: LD_INT 33
14501: PUSH
14502: LD_INT 34
14504: PUSH
14505: LD_INT 35
14507: PUSH
14508: LD_INT 36
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 101
14536: PUSH
14537: LD_INT 102
14539: PUSH
14540: LD_INT 103
14542: PUSH
14543: LD_INT 106
14545: PUSH
14546: LD_INT 108
14548: PUSH
14549: LD_INT 112
14551: PUSH
14552: LD_INT 113
14554: PUSH
14555: LD_INT 114
14557: PUSH
14558: LD_INT 115
14560: PUSH
14561: LD_INT 116
14563: PUSH
14564: LD_INT 117
14566: PUSH
14567: LD_INT 118
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: ST_TO_ADDR
14588: GO 14831
14590: LD_INT 19
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14830
14598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 4
14615: PUSH
14616: LD_INT 5
14618: PUSH
14619: LD_INT 6
14621: PUSH
14622: LD_INT 7
14624: PUSH
14625: LD_INT 8
14627: PUSH
14628: LD_INT 9
14630: PUSH
14631: LD_INT 10
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 14
14645: PUSH
14646: LD_INT 15
14648: PUSH
14649: LD_INT 16
14651: PUSH
14652: LD_INT 17
14654: PUSH
14655: LD_INT 18
14657: PUSH
14658: LD_INT 19
14660: PUSH
14661: LD_INT 20
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_INT 23
14672: PUSH
14673: LD_INT 24
14675: PUSH
14676: LD_INT 25
14678: PUSH
14679: LD_INT 26
14681: PUSH
14682: LD_INT 27
14684: PUSH
14685: LD_INT 28
14687: PUSH
14688: LD_INT 29
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 31
14696: PUSH
14697: LD_INT 32
14699: PUSH
14700: LD_INT 33
14702: PUSH
14703: LD_INT 34
14705: PUSH
14706: LD_INT 35
14708: PUSH
14709: LD_INT 36
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 101
14752: PUSH
14753: LD_INT 102
14755: PUSH
14756: LD_INT 103
14758: PUSH
14759: LD_INT 104
14761: PUSH
14762: LD_INT 105
14764: PUSH
14765: LD_INT 106
14767: PUSH
14768: LD_INT 107
14770: PUSH
14771: LD_INT 108
14773: PUSH
14774: LD_INT 109
14776: PUSH
14777: LD_INT 110
14779: PUSH
14780: LD_INT 111
14782: PUSH
14783: LD_INT 112
14785: PUSH
14786: LD_INT 113
14788: PUSH
14789: LD_INT 114
14791: PUSH
14792: LD_INT 115
14794: PUSH
14795: LD_INT 116
14797: PUSH
14798: LD_INT 117
14800: PUSH
14801: LD_INT 118
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: ST_TO_ADDR
14828: GO 14831
14830: POP
// end else
14831: GO 15062
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 4
14849: PUSH
14850: LD_INT 5
14852: PUSH
14853: LD_INT 6
14855: PUSH
14856: LD_INT 7
14858: PUSH
14859: LD_INT 8
14861: PUSH
14862: LD_INT 9
14864: PUSH
14865: LD_INT 10
14867: PUSH
14868: LD_INT 11
14870: PUSH
14871: LD_INT 12
14873: PUSH
14874: LD_INT 13
14876: PUSH
14877: LD_INT 14
14879: PUSH
14880: LD_INT 15
14882: PUSH
14883: LD_INT 16
14885: PUSH
14886: LD_INT 17
14888: PUSH
14889: LD_INT 18
14891: PUSH
14892: LD_INT 19
14894: PUSH
14895: LD_INT 20
14897: PUSH
14898: LD_INT 21
14900: PUSH
14901: LD_INT 22
14903: PUSH
14904: LD_INT 23
14906: PUSH
14907: LD_INT 24
14909: PUSH
14910: LD_INT 25
14912: PUSH
14913: LD_INT 26
14915: PUSH
14916: LD_INT 27
14918: PUSH
14919: LD_INT 28
14921: PUSH
14922: LD_INT 29
14924: PUSH
14925: LD_INT 30
14927: PUSH
14928: LD_INT 31
14930: PUSH
14931: LD_INT 32
14933: PUSH
14934: LD_INT 33
14936: PUSH
14937: LD_INT 34
14939: PUSH
14940: LD_INT 35
14942: PUSH
14943: LD_INT 36
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 101
14986: PUSH
14987: LD_INT 102
14989: PUSH
14990: LD_INT 103
14992: PUSH
14993: LD_INT 104
14995: PUSH
14996: LD_INT 105
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 107
15004: PUSH
15005: LD_INT 108
15007: PUSH
15008: LD_INT 109
15010: PUSH
15011: LD_INT 110
15013: PUSH
15014: LD_INT 111
15016: PUSH
15017: LD_INT 112
15019: PUSH
15020: LD_INT 113
15022: PUSH
15023: LD_INT 114
15025: PUSH
15026: LD_INT 115
15028: PUSH
15029: LD_INT 116
15031: PUSH
15032: LD_INT 117
15034: PUSH
15035: LD_INT 118
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: ST_TO_ADDR
// if result then
15062: LD_VAR 0 2
15066: IFFALSE 15852
// begin normal :=  ;
15068: LD_ADDR_VAR 0 5
15072: PUSH
15073: LD_STRING 
15075: ST_TO_ADDR
// hardcore :=  ;
15076: LD_ADDR_VAR 0 6
15080: PUSH
15081: LD_STRING 
15083: ST_TO_ADDR
// active :=  ;
15084: LD_ADDR_VAR 0 7
15088: PUSH
15089: LD_STRING 
15091: ST_TO_ADDR
// for i = 1 to normalCounter do
15092: LD_ADDR_VAR 0 8
15096: PUSH
15097: DOUBLE
15098: LD_INT 1
15100: DEC
15101: ST_TO_ADDR
15102: LD_EXP 27
15106: PUSH
15107: FOR_TO
15108: IFFALSE 15209
// begin tmp := 0 ;
15110: LD_ADDR_VAR 0 3
15114: PUSH
15115: LD_STRING 0
15117: ST_TO_ADDR
// if result [ 1 ] then
15118: LD_VAR 0 2
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: IFFALSE 15191
// if result [ 1 ] [ 1 ] = i then
15128: LD_VAR 0 2
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PUSH
15137: LD_INT 1
15139: ARRAY
15140: PUSH
15141: LD_VAR 0 8
15145: EQUAL
15146: IFFALSE 15191
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15148: LD_ADDR_VAR 0 2
15152: PUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: LD_VAR 0 2
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 3
15177: PPUSH
15178: CALL_OW 1
15182: ST_TO_ADDR
// tmp := 1 ;
15183: LD_ADDR_VAR 0 3
15187: PUSH
15188: LD_STRING 1
15190: ST_TO_ADDR
// end ; normal := normal & tmp ;
15191: LD_ADDR_VAR 0 5
15195: PUSH
15196: LD_VAR 0 5
15200: PUSH
15201: LD_VAR 0 3
15205: STR
15206: ST_TO_ADDR
// end ;
15207: GO 15107
15209: POP
15210: POP
// for i = 1 to hardcoreCounter do
15211: LD_ADDR_VAR 0 8
15215: PUSH
15216: DOUBLE
15217: LD_INT 1
15219: DEC
15220: ST_TO_ADDR
15221: LD_EXP 28
15225: PUSH
15226: FOR_TO
15227: IFFALSE 15332
// begin tmp := 0 ;
15229: LD_ADDR_VAR 0 3
15233: PUSH
15234: LD_STRING 0
15236: ST_TO_ADDR
// if result [ 2 ] then
15237: LD_VAR 0 2
15241: PUSH
15242: LD_INT 2
15244: ARRAY
15245: IFFALSE 15314
// if result [ 2 ] [ 1 ] = 100 + i then
15247: LD_VAR 0 2
15251: PUSH
15252: LD_INT 2
15254: ARRAY
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: PUSH
15260: LD_INT 100
15262: PUSH
15263: LD_VAR 0 8
15267: PLUS
15268: EQUAL
15269: IFFALSE 15314
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15271: LD_ADDR_VAR 0 2
15275: PUSH
15276: LD_VAR 0 2
15280: PPUSH
15281: LD_INT 2
15283: PPUSH
15284: LD_VAR 0 2
15288: PUSH
15289: LD_INT 2
15291: ARRAY
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 3
15300: PPUSH
15301: CALL_OW 1
15305: ST_TO_ADDR
// tmp := 1 ;
15306: LD_ADDR_VAR 0 3
15310: PUSH
15311: LD_STRING 1
15313: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: LD_VAR 0 6
15323: PUSH
15324: LD_VAR 0 3
15328: STR
15329: ST_TO_ADDR
// end ;
15330: GO 15226
15332: POP
15333: POP
// if isGameLoad then
15334: LD_VAR 0 1
15338: IFFALSE 15813
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15340: LD_ADDR_VAR 0 4
15344: PUSH
15345: LD_EXP 31
15349: PUSH
15350: LD_EXP 30
15354: PUSH
15355: LD_EXP 32
15359: PUSH
15360: LD_EXP 29
15364: PUSH
15365: LD_EXP 33
15369: PUSH
15370: LD_EXP 34
15374: PUSH
15375: LD_EXP 35
15379: PUSH
15380: LD_EXP 36
15384: PUSH
15385: LD_EXP 37
15389: PUSH
15390: LD_EXP 38
15394: PUSH
15395: LD_EXP 39
15399: PUSH
15400: LD_EXP 40
15404: PUSH
15405: LD_EXP 41
15409: PUSH
15410: LD_EXP 42
15414: PUSH
15415: LD_EXP 50
15419: PUSH
15420: LD_EXP 51
15424: PUSH
15425: LD_EXP 52
15429: PUSH
15430: LD_EXP 53
15434: PUSH
15435: LD_EXP 55
15439: PUSH
15440: LD_EXP 56
15444: PUSH
15445: LD_EXP 57
15449: PUSH
15450: LD_EXP 60
15454: PUSH
15455: LD_EXP 62
15459: PUSH
15460: LD_EXP 63
15464: PUSH
15465: LD_EXP 64
15469: PUSH
15470: LD_EXP 66
15474: PUSH
15475: LD_EXP 67
15479: PUSH
15480: LD_EXP 70
15484: PUSH
15485: LD_EXP 71
15489: PUSH
15490: LD_EXP 72
15494: PUSH
15495: LD_EXP 73
15499: PUSH
15500: LD_EXP 74
15504: PUSH
15505: LD_EXP 75
15509: PUSH
15510: LD_EXP 76
15514: PUSH
15515: LD_EXP 77
15519: PUSH
15520: LD_EXP 78
15524: PUSH
15525: LD_EXP 43
15529: PUSH
15530: LD_EXP 44
15534: PUSH
15535: LD_EXP 47
15539: PUSH
15540: LD_EXP 48
15544: PUSH
15545: LD_EXP 49
15549: PUSH
15550: LD_EXP 45
15554: PUSH
15555: LD_EXP 46
15559: PUSH
15560: LD_EXP 54
15564: PUSH
15565: LD_EXP 58
15569: PUSH
15570: LD_EXP 59
15574: PUSH
15575: LD_EXP 61
15579: PUSH
15580: LD_EXP 65
15584: PUSH
15585: LD_EXP 68
15589: PUSH
15590: LD_EXP 69
15594: PUSH
15595: LD_EXP 79
15599: PUSH
15600: LD_EXP 80
15604: PUSH
15605: LD_EXP 81
15609: PUSH
15610: LD_EXP 82
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: ST_TO_ADDR
// tmp :=  ;
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_STRING 
15678: ST_TO_ADDR
// for i = 1 to normalCounter do
15679: LD_ADDR_VAR 0 8
15683: PUSH
15684: DOUBLE
15685: LD_INT 1
15687: DEC
15688: ST_TO_ADDR
15689: LD_EXP 27
15693: PUSH
15694: FOR_TO
15695: IFFALSE 15731
// begin if flags [ i ] then
15697: LD_VAR 0 4
15701: PUSH
15702: LD_VAR 0 8
15706: ARRAY
15707: IFFALSE 15729
// tmp := tmp & i & ; ;
15709: LD_ADDR_VAR 0 3
15713: PUSH
15714: LD_VAR 0 3
15718: PUSH
15719: LD_VAR 0 8
15723: STR
15724: PUSH
15725: LD_STRING ;
15727: STR
15728: ST_TO_ADDR
// end ;
15729: GO 15694
15731: POP
15732: POP
// for i = 1 to hardcoreCounter do
15733: LD_ADDR_VAR 0 8
15737: PUSH
15738: DOUBLE
15739: LD_INT 1
15741: DEC
15742: ST_TO_ADDR
15743: LD_EXP 28
15747: PUSH
15748: FOR_TO
15749: IFFALSE 15795
// begin if flags [ normalCounter + i ] then
15751: LD_VAR 0 4
15755: PUSH
15756: LD_EXP 27
15760: PUSH
15761: LD_VAR 0 8
15765: PLUS
15766: ARRAY
15767: IFFALSE 15793
// tmp := tmp & ( 100 + i ) & ; ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: LD_VAR 0 3
15778: PUSH
15779: LD_INT 100
15781: PUSH
15782: LD_VAR 0 8
15786: PLUS
15787: STR
15788: PUSH
15789: LD_STRING ;
15791: STR
15792: ST_TO_ADDR
// end ;
15793: GO 15748
15795: POP
15796: POP
// if tmp then
15797: LD_VAR 0 3
15801: IFFALSE 15813
// active := tmp ;
15803: LD_ADDR_VAR 0 7
15807: PUSH
15808: LD_VAR 0 3
15812: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15813: LD_STRING getStreamItemsFromMission("
15815: PUSH
15816: LD_VAR 0 5
15820: STR
15821: PUSH
15822: LD_STRING ","
15824: STR
15825: PUSH
15826: LD_VAR 0 6
15830: STR
15831: PUSH
15832: LD_STRING ","
15834: STR
15835: PUSH
15836: LD_VAR 0 7
15840: STR
15841: PUSH
15842: LD_STRING ")
15844: STR
15845: PPUSH
15846: CALL_OW 559
// end else
15850: GO 15859
// ToLua ( getStreamItemsFromMission("","","") ) ;
15852: LD_STRING getStreamItemsFromMission("","","")
15854: PPUSH
15855: CALL_OW 559
// end ;
15859: LD_VAR 0 2
15863: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15864: LD_EXP 26
15868: PUSH
15869: LD_EXP 31
15873: AND
15874: IFFALSE 15998
15876: GO 15878
15878: DISABLE
15879: LD_INT 0
15881: PPUSH
15882: PPUSH
// begin enable ;
15883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15884: LD_ADDR_VAR 0 2
15888: PUSH
15889: LD_INT 22
15891: PUSH
15892: LD_OWVAR 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: LD_INT 34
15906: PUSH
15907: LD_INT 7
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 34
15916: PUSH
15917: LD_INT 45
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 34
15926: PUSH
15927: LD_INT 28
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 34
15936: PUSH
15937: LD_INT 47
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PPUSH
15955: CALL_OW 69
15959: ST_TO_ADDR
// if not tmp then
15960: LD_VAR 0 2
15964: NOT
15965: IFFALSE 15969
// exit ;
15967: GO 15998
// for i in tmp do
15969: LD_ADDR_VAR 0 1
15973: PUSH
15974: LD_VAR 0 2
15978: PUSH
15979: FOR_IN
15980: IFFALSE 15996
// begin SetLives ( i , 0 ) ;
15982: LD_VAR 0 1
15986: PPUSH
15987: LD_INT 0
15989: PPUSH
15990: CALL_OW 234
// end ;
15994: GO 15979
15996: POP
15997: POP
// end ;
15998: PPOPN 2
16000: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16001: LD_EXP 26
16005: PUSH
16006: LD_EXP 32
16010: AND
16011: IFFALSE 16095
16013: GO 16015
16015: DISABLE
16016: LD_INT 0
16018: PPUSH
16019: PPUSH
// begin enable ;
16020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16021: LD_ADDR_VAR 0 2
16025: PUSH
16026: LD_INT 22
16028: PUSH
16029: LD_OWVAR 2
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 32
16040: PUSH
16041: LD_INT 3
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PPUSH
16052: CALL_OW 69
16056: ST_TO_ADDR
// if not tmp then
16057: LD_VAR 0 2
16061: NOT
16062: IFFALSE 16066
// exit ;
16064: GO 16095
// for i in tmp do
16066: LD_ADDR_VAR 0 1
16070: PUSH
16071: LD_VAR 0 2
16075: PUSH
16076: FOR_IN
16077: IFFALSE 16093
// begin SetLives ( i , 0 ) ;
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_INT 0
16086: PPUSH
16087: CALL_OW 234
// end ;
16091: GO 16076
16093: POP
16094: POP
// end ;
16095: PPOPN 2
16097: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16098: LD_EXP 26
16102: PUSH
16103: LD_EXP 29
16107: AND
16108: IFFALSE 16201
16110: GO 16112
16112: DISABLE
16113: LD_INT 0
16115: PPUSH
// begin enable ;
16116: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_OWVAR 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: LD_INT 25
16139: PUSH
16140: LD_INT 5
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 25
16149: PUSH
16150: LD_INT 9
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 25
16159: PUSH
16160: LD_INT 8
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: PUSH
16182: FOR_IN
16183: IFFALSE 16199
// begin SetClass ( i , 1 ) ;
16185: LD_VAR 0 1
16189: PPUSH
16190: LD_INT 1
16192: PPUSH
16193: CALL_OW 336
// end ;
16197: GO 16182
16199: POP
16200: POP
// end ;
16201: PPOPN 1
16203: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16204: LD_EXP 26
16208: PUSH
16209: LD_EXP 30
16213: AND
16214: PUSH
16215: LD_OWVAR 65
16219: PUSH
16220: LD_INT 7
16222: LESS
16223: AND
16224: IFFALSE 16238
16226: GO 16228
16228: DISABLE
// begin enable ;
16229: ENABLE
// game_speed := 7 ;
16230: LD_ADDR_OWVAR 65
16234: PUSH
16235: LD_INT 7
16237: ST_TO_ADDR
// end ;
16238: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16239: LD_EXP 26
16243: PUSH
16244: LD_EXP 33
16248: AND
16249: IFFALSE 16451
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
16258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_INT 81
16266: PUSH
16267: LD_OWVAR 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 69
16294: ST_TO_ADDR
// if not tmp then
16295: LD_VAR 0 3
16299: NOT
16300: IFFALSE 16304
// exit ;
16302: GO 16451
// if tmp > 5 then
16304: LD_VAR 0 3
16308: PUSH
16309: LD_INT 5
16311: GREATER
16312: IFFALSE 16324
// k := 5 else
16314: LD_ADDR_VAR 0 2
16318: PUSH
16319: LD_INT 5
16321: ST_TO_ADDR
16322: GO 16334
// k := tmp ;
16324: LD_ADDR_VAR 0 2
16328: PUSH
16329: LD_VAR 0 3
16333: ST_TO_ADDR
// for i := 1 to k do
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: DOUBLE
16340: LD_INT 1
16342: DEC
16343: ST_TO_ADDR
16344: LD_VAR 0 2
16348: PUSH
16349: FOR_TO
16350: IFFALSE 16449
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_VAR 0 1
16361: ARRAY
16362: PPUSH
16363: LD_VAR 0 1
16367: PUSH
16368: LD_INT 4
16370: MOD
16371: PUSH
16372: LD_INT 1
16374: PLUS
16375: PPUSH
16376: CALL_OW 259
16380: PUSH
16381: LD_INT 10
16383: LESS
16384: IFFALSE 16447
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16386: LD_VAR 0 3
16390: PUSH
16391: LD_VAR 0 1
16395: ARRAY
16396: PPUSH
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 4
16404: MOD
16405: PUSH
16406: LD_INT 1
16408: PLUS
16409: PPUSH
16410: LD_VAR 0 3
16414: PUSH
16415: LD_VAR 0 1
16419: ARRAY
16420: PPUSH
16421: LD_VAR 0 1
16425: PUSH
16426: LD_INT 4
16428: MOD
16429: PUSH
16430: LD_INT 1
16432: PLUS
16433: PPUSH
16434: CALL_OW 259
16438: PUSH
16439: LD_INT 1
16441: PLUS
16442: PPUSH
16443: CALL_OW 237
16447: GO 16349
16449: POP
16450: POP
// end ;
16451: PPOPN 3
16453: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16454: LD_EXP 26
16458: PUSH
16459: LD_EXP 34
16463: AND
16464: IFFALSE 16484
16466: GO 16468
16468: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16469: LD_INT 4
16471: PPUSH
16472: LD_OWVAR 2
16476: PPUSH
16477: LD_INT 0
16479: PPUSH
16480: CALL_OW 324
16484: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16485: LD_EXP 26
16489: PUSH
16490: LD_EXP 63
16494: AND
16495: IFFALSE 16515
16497: GO 16499
16499: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16500: LD_INT 19
16502: PPUSH
16503: LD_OWVAR 2
16507: PPUSH
16508: LD_INT 0
16510: PPUSH
16511: CALL_OW 324
16515: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16516: LD_EXP 26
16520: PUSH
16521: LD_EXP 35
16525: AND
16526: IFFALSE 16628
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
// begin enable ;
16535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16536: LD_ADDR_VAR 0 2
16540: PUSH
16541: LD_INT 22
16543: PUSH
16544: LD_OWVAR 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 34
16558: PUSH
16559: LD_INT 11
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 34
16568: PUSH
16569: LD_INT 30
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: ST_TO_ADDR
// if not tmp then
16590: LD_VAR 0 2
16594: NOT
16595: IFFALSE 16599
// exit ;
16597: GO 16628
// for i in tmp do
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_VAR 0 2
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16626
// begin SetLives ( i , 0 ) ;
16612: LD_VAR 0 1
16616: PPUSH
16617: LD_INT 0
16619: PPUSH
16620: CALL_OW 234
// end ;
16624: GO 16609
16626: POP
16627: POP
// end ;
16628: PPOPN 2
16630: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16631: LD_EXP 26
16635: PUSH
16636: LD_EXP 36
16640: AND
16641: IFFALSE 16661
16643: GO 16645
16645: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16646: LD_INT 32
16648: PPUSH
16649: LD_OWVAR 2
16653: PPUSH
16654: LD_INT 0
16656: PPUSH
16657: CALL_OW 324
16661: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16662: LD_EXP 26
16666: PUSH
16667: LD_EXP 37
16671: AND
16672: IFFALSE 16853
16674: GO 16676
16676: DISABLE
16677: LD_INT 0
16679: PPUSH
16680: PPUSH
16681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16682: LD_ADDR_VAR 0 2
16686: PUSH
16687: LD_INT 22
16689: PUSH
16690: LD_OWVAR 2
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 33
16701: PUSH
16702: LD_INT 3
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PPUSH
16713: CALL_OW 69
16717: ST_TO_ADDR
// if not tmp then
16718: LD_VAR 0 2
16722: NOT
16723: IFFALSE 16727
// exit ;
16725: GO 16853
// side := 0 ;
16727: LD_ADDR_VAR 0 3
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// for i := 1 to 8 do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: DOUBLE
16741: LD_INT 1
16743: DEC
16744: ST_TO_ADDR
16745: LD_INT 8
16747: PUSH
16748: FOR_TO
16749: IFFALSE 16797
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16751: LD_OWVAR 2
16755: PUSH
16756: LD_VAR 0 1
16760: NONEQUAL
16761: PUSH
16762: LD_OWVAR 2
16766: PPUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 81
16776: PUSH
16777: LD_INT 2
16779: EQUAL
16780: AND
16781: IFFALSE 16795
// begin side := i ;
16783: LD_ADDR_VAR 0 3
16787: PUSH
16788: LD_VAR 0 1
16792: ST_TO_ADDR
// break ;
16793: GO 16797
// end ;
16795: GO 16748
16797: POP
16798: POP
// if not side then
16799: LD_VAR 0 3
16803: NOT
16804: IFFALSE 16808
// exit ;
16806: GO 16853
// for i := 1 to tmp do
16808: LD_ADDR_VAR 0 1
16812: PUSH
16813: DOUBLE
16814: LD_INT 1
16816: DEC
16817: ST_TO_ADDR
16818: LD_VAR 0 2
16822: PUSH
16823: FOR_TO
16824: IFFALSE 16851
// if Prob ( 60 ) then
16826: LD_INT 60
16828: PPUSH
16829: CALL_OW 13
16833: IFFALSE 16849
// SetSide ( i , side ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: CALL_OW 235
16849: GO 16823
16851: POP
16852: POP
// end ;
16853: PPOPN 3
16855: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16856: LD_EXP 26
16860: PUSH
16861: LD_EXP 39
16865: AND
16866: IFFALSE 16985
16868: GO 16870
16870: DISABLE
16871: LD_INT 0
16873: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: LD_INT 22
16881: PUSH
16882: LD_OWVAR 2
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 21
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 3
16903: PUSH
16904: LD_INT 23
16906: PUSH
16907: LD_INT 0
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PUSH
16928: FOR_IN
16929: IFFALSE 16983
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 257
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: LD_INT 3
16949: PUSH
16950: LD_INT 4
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: IN
16959: IFFALSE 16981
// SetClass ( un , rand ( 1 , 4 ) ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_INT 1
16968: PPUSH
16969: LD_INT 4
16971: PPUSH
16972: CALL_OW 12
16976: PPUSH
16977: CALL_OW 336
16981: GO 16928
16983: POP
16984: POP
// end ;
16985: PPOPN 1
16987: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16988: LD_EXP 26
16992: PUSH
16993: LD_EXP 38
16997: AND
16998: IFFALSE 17077
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17006: LD_ADDR_VAR 0 1
17010: PUSH
17011: LD_INT 22
17013: PUSH
17014: LD_OWVAR 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 3
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: ST_TO_ADDR
// if not tmp then
17042: LD_VAR 0 1
17046: NOT
17047: IFFALSE 17051
// exit ;
17049: GO 17077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17051: LD_VAR 0 1
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: PPUSH
17070: LD_INT 100
17072: PPUSH
17073: CALL_OW 234
// end ;
17077: PPOPN 1
17079: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17080: LD_EXP 26
17084: PUSH
17085: LD_EXP 40
17089: AND
17090: IFFALSE 17188
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17098: LD_ADDR_VAR 0 1
17102: PUSH
17103: LD_INT 22
17105: PUSH
17106: LD_OWVAR 2
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if not tmp then
17134: LD_VAR 0 1
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17188
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17143: LD_VAR 0 1
17147: PUSH
17148: LD_INT 1
17150: PPUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 12
17160: ARRAY
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: LD_INT 4
17167: PPUSH
17168: CALL_OW 12
17172: PPUSH
17173: LD_INT 3000
17175: PPUSH
17176: LD_INT 9000
17178: PPUSH
17179: CALL_OW 12
17183: PPUSH
17184: CALL_OW 492
// end ;
17188: PPOPN 1
17190: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17191: LD_EXP 26
17195: PUSH
17196: LD_EXP 41
17200: AND
17201: IFFALSE 17221
17203: GO 17205
17205: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17206: LD_INT 1
17208: PPUSH
17209: LD_OWVAR 2
17213: PPUSH
17214: LD_INT 0
17216: PPUSH
17217: CALL_OW 324
17221: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17222: LD_EXP 26
17226: PUSH
17227: LD_EXP 42
17231: AND
17232: IFFALSE 17315
17234: GO 17236
17236: DISABLE
17237: LD_INT 0
17239: PPUSH
17240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17241: LD_ADDR_VAR 0 2
17245: PUSH
17246: LD_INT 22
17248: PUSH
17249: LD_OWVAR 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 21
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// if not tmp then
17277: LD_VAR 0 2
17281: NOT
17282: IFFALSE 17286
// exit ;
17284: GO 17315
// for i in tmp do
17286: LD_ADDR_VAR 0 1
17290: PUSH
17291: LD_VAR 0 2
17295: PUSH
17296: FOR_IN
17297: IFFALSE 17313
// SetBLevel ( i , 10 ) ;
17299: LD_VAR 0 1
17303: PPUSH
17304: LD_INT 10
17306: PPUSH
17307: CALL_OW 241
17311: GO 17296
17313: POP
17314: POP
// end ;
17315: PPOPN 2
17317: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17318: LD_EXP 26
17322: PUSH
17323: LD_EXP 43
17327: AND
17328: IFFALSE 17439
17330: GO 17332
17332: DISABLE
17333: LD_INT 0
17335: PPUSH
17336: PPUSH
17337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17338: LD_ADDR_VAR 0 3
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_OWVAR 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 25
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: ST_TO_ADDR
// if not tmp then
17374: LD_VAR 0 3
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17439
// un := tmp [ rand ( 1 , tmp ) ] ;
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_VAR 0 3
17392: PUSH
17393: LD_INT 1
17395: PPUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: CALL_OW 12
17405: ARRAY
17406: ST_TO_ADDR
// if Crawls ( un ) then
17407: LD_VAR 0 2
17411: PPUSH
17412: CALL_OW 318
17416: IFFALSE 17427
// ComWalk ( un ) ;
17418: LD_VAR 0 2
17422: PPUSH
17423: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17427: LD_VAR 0 2
17431: PPUSH
17432: LD_INT 5
17434: PPUSH
17435: CALL_OW 336
// end ;
17439: PPOPN 3
17441: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17442: LD_EXP 26
17446: PUSH
17447: LD_EXP 44
17451: AND
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 4
17460: LESS
17461: AND
17462: IFFALSE 17481
17464: GO 17466
17466: DISABLE
// begin Difficulty := Difficulty + 1 ;
17467: LD_ADDR_OWVAR 67
17471: PUSH
17472: LD_OWVAR 67
17476: PUSH
17477: LD_INT 1
17479: PLUS
17480: ST_TO_ADDR
// end ;
17481: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17482: LD_EXP 26
17486: PUSH
17487: LD_EXP 45
17491: AND
17492: IFFALSE 17595
17494: GO 17496
17496: DISABLE
17497: LD_INT 0
17499: PPUSH
// begin for i := 1 to 5 do
17500: LD_ADDR_VAR 0 1
17504: PUSH
17505: DOUBLE
17506: LD_INT 1
17508: DEC
17509: ST_TO_ADDR
17510: LD_INT 5
17512: PUSH
17513: FOR_TO
17514: IFFALSE 17593
// begin uc_nation := nation_nature ;
17516: LD_ADDR_OWVAR 21
17520: PUSH
17521: LD_INT 0
17523: ST_TO_ADDR
// uc_side := 0 ;
17524: LD_ADDR_OWVAR 20
17528: PUSH
17529: LD_INT 0
17531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17532: LD_ADDR_OWVAR 29
17536: PUSH
17537: LD_INT 12
17539: PUSH
17540: LD_INT 12
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: ST_TO_ADDR
// hc_agressivity := 20 ;
17547: LD_ADDR_OWVAR 35
17551: PUSH
17552: LD_INT 20
17554: ST_TO_ADDR
// hc_class := class_tiger ;
17555: LD_ADDR_OWVAR 28
17559: PUSH
17560: LD_INT 14
17562: ST_TO_ADDR
// hc_gallery :=  ;
17563: LD_ADDR_OWVAR 33
17567: PUSH
17568: LD_STRING 
17570: ST_TO_ADDR
// hc_name :=  ;
17571: LD_ADDR_OWVAR 26
17575: PUSH
17576: LD_STRING 
17578: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17579: CALL_OW 44
17583: PPUSH
17584: LD_INT 0
17586: PPUSH
17587: CALL_OW 51
// end ;
17591: GO 17513
17593: POP
17594: POP
// end ;
17595: PPOPN 1
17597: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17598: LD_EXP 26
17602: PUSH
17603: LD_EXP 46
17607: AND
17608: IFFALSE 17617
17610: GO 17612
17612: DISABLE
// StreamSibBomb ;
17613: CALL 17618 0 0
17617: END
// export function StreamSibBomb ; var i , x , y ; begin
17618: LD_INT 0
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
// result := false ;
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_INT 0
17631: ST_TO_ADDR
// for i := 1 to 16 do
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: DOUBLE
17638: LD_INT 1
17640: DEC
17641: ST_TO_ADDR
17642: LD_INT 16
17644: PUSH
17645: FOR_TO
17646: IFFALSE 17845
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17648: LD_ADDR_VAR 0 3
17652: PUSH
17653: LD_INT 10
17655: PUSH
17656: LD_INT 20
17658: PUSH
17659: LD_INT 30
17661: PUSH
17662: LD_INT 40
17664: PUSH
17665: LD_INT 50
17667: PUSH
17668: LD_INT 60
17670: PUSH
17671: LD_INT 70
17673: PUSH
17674: LD_INT 80
17676: PUSH
17677: LD_INT 90
17679: PUSH
17680: LD_INT 100
17682: PUSH
17683: LD_INT 110
17685: PUSH
17686: LD_INT 120
17688: PUSH
17689: LD_INT 130
17691: PUSH
17692: LD_INT 140
17694: PUSH
17695: LD_INT 150
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 15
17720: PPUSH
17721: CALL_OW 12
17725: ARRAY
17726: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17727: LD_ADDR_VAR 0 4
17731: PUSH
17732: LD_INT 10
17734: PUSH
17735: LD_INT 20
17737: PUSH
17738: LD_INT 30
17740: PUSH
17741: LD_INT 40
17743: PUSH
17744: LD_INT 50
17746: PUSH
17747: LD_INT 60
17749: PUSH
17750: LD_INT 70
17752: PUSH
17753: LD_INT 80
17755: PUSH
17756: LD_INT 90
17758: PUSH
17759: LD_INT 100
17761: PUSH
17762: LD_INT 110
17764: PUSH
17765: LD_INT 120
17767: PUSH
17768: LD_INT 130
17770: PUSH
17771: LD_INT 140
17773: PUSH
17774: LD_INT 150
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 1
17796: PPUSH
17797: LD_INT 15
17799: PPUSH
17800: CALL_OW 12
17804: ARRAY
17805: ST_TO_ADDR
// if ValidHex ( x , y ) then
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_VAR 0 4
17815: PPUSH
17816: CALL_OW 488
17820: IFFALSE 17843
// begin result := [ x , y ] ;
17822: LD_ADDR_VAR 0 1
17826: PUSH
17827: LD_VAR 0 3
17831: PUSH
17832: LD_VAR 0 4
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: ST_TO_ADDR
// break ;
17841: GO 17845
// end ; end ;
17843: GO 17645
17845: POP
17846: POP
// if result then
17847: LD_VAR 0 1
17851: IFFALSE 17911
// begin ToLua ( playSibBomb() ) ;
17853: LD_STRING playSibBomb()
17855: PPUSH
17856: CALL_OW 559
// wait ( 0 0$14 ) ;
17860: LD_INT 490
17862: PPUSH
17863: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 1
17874: ARRAY
17875: PPUSH
17876: LD_VAR 0 1
17880: PUSH
17881: LD_INT 2
17883: ARRAY
17884: PPUSH
17885: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 1
17896: ARRAY
17897: PPUSH
17898: LD_VAR 0 1
17902: PUSH
17903: LD_INT 2
17905: ARRAY
17906: PPUSH
17907: CALL_OW 429
// end ; end ;
17911: LD_VAR 0 1
17915: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17916: LD_EXP 26
17920: PUSH
17921: LD_EXP 48
17925: AND
17926: IFFALSE 17938
17928: GO 17930
17930: DISABLE
// YouLost (  ) ;
17931: LD_STRING 
17933: PPUSH
17934: CALL_OW 104
17938: END
// every 0 0$1 trigger StreamModeActive and sFog do
17939: LD_EXP 26
17943: PUSH
17944: LD_EXP 47
17948: AND
17949: IFFALSE 17963
17951: GO 17953
17953: DISABLE
// FogOff ( your_side ) ;
17954: LD_OWVAR 2
17958: PPUSH
17959: CALL_OW 344
17963: END
// every 0 0$1 trigger StreamModeActive and sSun do
17964: LD_EXP 26
17968: PUSH
17969: LD_EXP 49
17973: AND
17974: IFFALSE 18002
17976: GO 17978
17978: DISABLE
// begin solar_recharge_percent := 0 ;
17979: LD_ADDR_OWVAR 79
17983: PUSH
17984: LD_INT 0
17986: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17987: LD_INT 10500
17989: PPUSH
17990: CALL_OW 67
// solar_recharge_percent := 100 ;
17994: LD_ADDR_OWVAR 79
17998: PUSH
17999: LD_INT 100
18001: ST_TO_ADDR
// end ;
18002: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18003: LD_EXP 26
18007: PUSH
18008: LD_EXP 50
18012: AND
18013: IFFALSE 18252
18015: GO 18017
18017: DISABLE
18018: LD_INT 0
18020: PPUSH
18021: PPUSH
18022: PPUSH
// begin tmp := [ ] ;
18023: LD_ADDR_VAR 0 3
18027: PUSH
18028: EMPTY
18029: ST_TO_ADDR
// for i := 1 to 6 do
18030: LD_ADDR_VAR 0 1
18034: PUSH
18035: DOUBLE
18036: LD_INT 1
18038: DEC
18039: ST_TO_ADDR
18040: LD_INT 6
18042: PUSH
18043: FOR_TO
18044: IFFALSE 18149
// begin uc_nation := nation_nature ;
18046: LD_ADDR_OWVAR 21
18050: PUSH
18051: LD_INT 0
18053: ST_TO_ADDR
// uc_side := 0 ;
18054: LD_ADDR_OWVAR 20
18058: PUSH
18059: LD_INT 0
18061: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18062: LD_ADDR_OWVAR 29
18066: PUSH
18067: LD_INT 12
18069: PUSH
18070: LD_INT 12
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: ST_TO_ADDR
// hc_agressivity := 20 ;
18077: LD_ADDR_OWVAR 35
18081: PUSH
18082: LD_INT 20
18084: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18085: LD_ADDR_OWVAR 28
18089: PUSH
18090: LD_INT 17
18092: ST_TO_ADDR
// hc_gallery :=  ;
18093: LD_ADDR_OWVAR 33
18097: PUSH
18098: LD_STRING 
18100: ST_TO_ADDR
// hc_name :=  ;
18101: LD_ADDR_OWVAR 26
18105: PUSH
18106: LD_STRING 
18108: ST_TO_ADDR
// un := CreateHuman ;
18109: LD_ADDR_VAR 0 2
18113: PUSH
18114: CALL_OW 44
18118: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18119: LD_VAR 0 2
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: CALL_OW 51
// tmp := tmp ^ un ;
18131: LD_ADDR_VAR 0 3
18135: PUSH
18136: LD_VAR 0 3
18140: PUSH
18141: LD_VAR 0 2
18145: ADD
18146: ST_TO_ADDR
// end ;
18147: GO 18043
18149: POP
18150: POP
// repeat wait ( 0 0$1 ) ;
18151: LD_INT 35
18153: PPUSH
18154: CALL_OW 67
// for un in tmp do
18158: LD_ADDR_VAR 0 2
18162: PUSH
18163: LD_VAR 0 3
18167: PUSH
18168: FOR_IN
18169: IFFALSE 18243
// begin if IsDead ( un ) then
18171: LD_VAR 0 2
18175: PPUSH
18176: CALL_OW 301
18180: IFFALSE 18200
// begin tmp := tmp diff un ;
18182: LD_ADDR_VAR 0 3
18186: PUSH
18187: LD_VAR 0 3
18191: PUSH
18192: LD_VAR 0 2
18196: DIFF
18197: ST_TO_ADDR
// continue ;
18198: GO 18168
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PUSH
18208: LD_INT 22
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: PPUSH
18227: LD_VAR 0 2
18231: PPUSH
18232: CALL_OW 74
18236: PPUSH
18237: CALL_OW 115
// end ;
18241: GO 18168
18243: POP
18244: POP
// until not tmp ;
18245: LD_VAR 0 3
18249: NOT
18250: IFFALSE 18151
// end ;
18252: PPOPN 3
18254: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18255: LD_EXP 26
18259: PUSH
18260: LD_EXP 51
18264: AND
18265: IFFALSE 18319
18267: GO 18269
18269: DISABLE
// begin ToLua ( displayTroll(); ) ;
18270: LD_STRING displayTroll();
18272: PPUSH
18273: CALL_OW 559
// wait ( 3 3$00 ) ;
18277: LD_INT 6300
18279: PPUSH
18280: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18284: LD_STRING hideTroll();
18286: PPUSH
18287: CALL_OW 559
// wait ( 1 1$00 ) ;
18291: LD_INT 2100
18293: PPUSH
18294: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18298: LD_STRING displayTroll();
18300: PPUSH
18301: CALL_OW 559
// wait ( 1 1$00 ) ;
18305: LD_INT 2100
18307: PPUSH
18308: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18312: LD_STRING hideTroll();
18314: PPUSH
18315: CALL_OW 559
// end ;
18319: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18320: LD_EXP 26
18324: PUSH
18325: LD_EXP 52
18329: AND
18330: IFFALSE 18393
18332: GO 18334
18334: DISABLE
18335: LD_INT 0
18337: PPUSH
// begin p := 0 ;
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: LD_INT 0
18345: ST_TO_ADDR
// repeat game_speed := 1 ;
18346: LD_ADDR_OWVAR 65
18350: PUSH
18351: LD_INT 1
18353: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18354: LD_INT 35
18356: PPUSH
18357: CALL_OW 67
// p := p + 1 ;
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: ST_TO_ADDR
// until p >= 60 ;
18375: LD_VAR 0 1
18379: PUSH
18380: LD_INT 60
18382: GREATEREQUAL
18383: IFFALSE 18346
// game_speed := 4 ;
18385: LD_ADDR_OWVAR 65
18389: PUSH
18390: LD_INT 4
18392: ST_TO_ADDR
// end ;
18393: PPOPN 1
18395: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18396: LD_EXP 26
18400: PUSH
18401: LD_EXP 53
18405: AND
18406: IFFALSE 18552
18408: GO 18410
18410: DISABLE
18411: LD_INT 0
18413: PPUSH
18414: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18415: LD_ADDR_VAR 0 1
18419: PUSH
18420: LD_INT 22
18422: PUSH
18423: LD_OWVAR 2
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 30
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: CALL_OW 69
18468: ST_TO_ADDR
// if not depot then
18469: LD_VAR 0 1
18473: NOT
18474: IFFALSE 18478
// exit ;
18476: GO 18552
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18478: LD_ADDR_VAR 0 2
18482: PUSH
18483: LD_VAR 0 1
18487: PUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 12
18500: ARRAY
18501: PPUSH
18502: CALL_OW 274
18506: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18507: LD_VAR 0 2
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: LD_INT 0
18517: PPUSH
18518: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_INT 2
18529: PPUSH
18530: LD_INT 0
18532: PPUSH
18533: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18537: LD_VAR 0 2
18541: PPUSH
18542: LD_INT 3
18544: PPUSH
18545: LD_INT 0
18547: PPUSH
18548: CALL_OW 277
// end ;
18552: PPOPN 2
18554: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18555: LD_EXP 26
18559: PUSH
18560: LD_EXP 54
18564: AND
18565: IFFALSE 18662
18567: GO 18569
18569: DISABLE
18570: LD_INT 0
18572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18573: LD_ADDR_VAR 0 1
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_OWVAR 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 21
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 3
18602: PUSH
18603: LD_INT 23
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: ST_TO_ADDR
// if not tmp then
18627: LD_VAR 0 1
18631: NOT
18632: IFFALSE 18636
// exit ;
18634: GO 18662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18636: LD_VAR 0 1
18640: PUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 12
18653: ARRAY
18654: PPUSH
18655: LD_INT 200
18657: PPUSH
18658: CALL_OW 234
// end ;
18662: PPOPN 1
18664: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18665: LD_EXP 26
18669: PUSH
18670: LD_EXP 55
18674: AND
18675: IFFALSE 18754
18677: GO 18679
18679: DISABLE
18680: LD_INT 0
18682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: LD_INT 22
18690: PUSH
18691: LD_OWVAR 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: ST_TO_ADDR
// if not tmp then
18719: LD_VAR 0 1
18723: NOT
18724: IFFALSE 18728
// exit ;
18726: GO 18754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18728: LD_VAR 0 1
18732: PUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_VAR 0 1
18740: PPUSH
18741: CALL_OW 12
18745: ARRAY
18746: PPUSH
18747: LD_INT 60
18749: PPUSH
18750: CALL_OW 234
// end ;
18754: PPOPN 1
18756: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18757: LD_EXP 26
18761: PUSH
18762: LD_EXP 56
18766: AND
18767: IFFALSE 18866
18769: GO 18771
18771: DISABLE
18772: LD_INT 0
18774: PPUSH
18775: PPUSH
// begin enable ;
18776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: LD_INT 22
18784: PUSH
18785: LD_OWVAR 2
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 61
18796: PUSH
18797: EMPTY
18798: LIST
18799: PUSH
18800: LD_INT 33
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 69
18819: ST_TO_ADDR
// if not tmp then
18820: LD_VAR 0 1
18824: NOT
18825: IFFALSE 18829
// exit ;
18827: GO 18866
// for i in tmp do
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_VAR 0 1
18838: PUSH
18839: FOR_IN
18840: IFFALSE 18864
// if IsControledBy ( i ) then
18842: LD_VAR 0 2
18846: PPUSH
18847: CALL_OW 312
18851: IFFALSE 18862
// ComUnlink ( i ) ;
18853: LD_VAR 0 2
18857: PPUSH
18858: CALL_OW 136
18862: GO 18839
18864: POP
18865: POP
// end ;
18866: PPOPN 2
18868: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18869: LD_EXP 26
18873: PUSH
18874: LD_EXP 57
18878: AND
18879: IFFALSE 19019
18881: GO 18883
18883: DISABLE
18884: LD_INT 0
18886: PPUSH
18887: PPUSH
// begin ToLua ( displayPowell(); ) ;
18888: LD_STRING displayPowell();
18890: PPUSH
18891: CALL_OW 559
// uc_side := 0 ;
18895: LD_ADDR_OWVAR 20
18899: PUSH
18900: LD_INT 0
18902: ST_TO_ADDR
// uc_nation := 2 ;
18903: LD_ADDR_OWVAR 21
18907: PUSH
18908: LD_INT 2
18910: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18911: LD_ADDR_OWVAR 37
18915: PUSH
18916: LD_INT 14
18918: ST_TO_ADDR
// vc_engine := engine_siberite ;
18919: LD_ADDR_OWVAR 39
18923: PUSH
18924: LD_INT 3
18926: ST_TO_ADDR
// vc_control := control_apeman ;
18927: LD_ADDR_OWVAR 38
18931: PUSH
18932: LD_INT 5
18934: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18935: LD_ADDR_OWVAR 40
18939: PUSH
18940: LD_INT 29
18942: ST_TO_ADDR
// un := CreateVehicle ;
18943: LD_ADDR_VAR 0 2
18947: PUSH
18948: CALL_OW 45
18952: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18965: LD_INT 35
18967: PPUSH
18968: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18972: LD_VAR 0 2
18976: PPUSH
18977: LD_INT 22
18979: PUSH
18980: LD_OWVAR 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 69
18993: PPUSH
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 74
19003: PPUSH
19004: CALL_OW 115
// until IsDead ( un ) ;
19008: LD_VAR 0 2
19012: PPUSH
19013: CALL_OW 301
19017: IFFALSE 18965
// end ;
19019: PPOPN 2
19021: END
// every 0 0$1 trigger StreamModeActive and sStu do
19022: LD_EXP 26
19026: PUSH
19027: LD_EXP 65
19031: AND
19032: IFFALSE 19048
19034: GO 19036
19036: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19037: LD_STRING displayStucuk();
19039: PPUSH
19040: CALL_OW 559
// ResetFog ;
19044: CALL_OW 335
// end ;
19048: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19049: LD_EXP 26
19053: PUSH
19054: LD_EXP 58
19058: AND
19059: IFFALSE 19200
19061: GO 19063
19063: DISABLE
19064: LD_INT 0
19066: PPUSH
19067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_INT 22
19075: PUSH
19076: LD_OWVAR 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: ST_TO_ADDR
// if not tmp then
19104: LD_VAR 0 2
19108: NOT
19109: IFFALSE 19113
// exit ;
19111: GO 19200
// un := tmp [ rand ( 1 , tmp ) ] ;
19113: LD_ADDR_VAR 0 1
19117: PUSH
19118: LD_VAR 0 2
19122: PUSH
19123: LD_INT 1
19125: PPUSH
19126: LD_VAR 0 2
19130: PPUSH
19131: CALL_OW 12
19135: ARRAY
19136: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19137: LD_VAR 0 1
19141: PPUSH
19142: LD_INT 0
19144: PPUSH
19145: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_OWVAR 3
19158: PUSH
19159: LD_VAR 0 1
19163: DIFF
19164: PPUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 74
19174: PPUSH
19175: CALL_OW 115
// wait ( 0 0$20 ) ;
19179: LD_INT 700
19181: PPUSH
19182: CALL_OW 67
// SetSide ( un , your_side ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_OWVAR 2
19195: PPUSH
19196: CALL_OW 235
// end ;
19200: PPOPN 2
19202: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19203: LD_EXP 26
19207: PUSH
19208: LD_EXP 59
19212: AND
19213: IFFALSE 19319
19215: GO 19217
19217: DISABLE
19218: LD_INT 0
19220: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19221: LD_ADDR_VAR 0 1
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_OWVAR 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 30
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not depot then
19275: LD_VAR 0 1
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19319
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19284: LD_VAR 0 1
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PPUSH
19293: CALL_OW 250
19297: PPUSH
19298: LD_VAR 0 1
19302: PUSH
19303: LD_INT 1
19305: ARRAY
19306: PPUSH
19307: CALL_OW 251
19311: PPUSH
19312: LD_INT 70
19314: PPUSH
19315: CALL_OW 495
// end ;
19319: PPOPN 1
19321: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19322: LD_EXP 26
19326: PUSH
19327: LD_EXP 60
19331: AND
19332: IFFALSE 19543
19334: GO 19336
19336: DISABLE
19337: LD_INT 0
19339: PPUSH
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19344: LD_ADDR_VAR 0 5
19348: PUSH
19349: LD_INT 22
19351: PUSH
19352: LD_OWVAR 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 21
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PPUSH
19375: CALL_OW 69
19379: ST_TO_ADDR
// if not tmp then
19380: LD_VAR 0 5
19384: NOT
19385: IFFALSE 19389
// exit ;
19387: GO 19543
// for i in tmp do
19389: LD_ADDR_VAR 0 1
19393: PUSH
19394: LD_VAR 0 5
19398: PUSH
19399: FOR_IN
19400: IFFALSE 19541
// begin d := rand ( 0 , 5 ) ;
19402: LD_ADDR_VAR 0 4
19406: PUSH
19407: LD_INT 0
19409: PPUSH
19410: LD_INT 5
19412: PPUSH
19413: CALL_OW 12
19417: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19418: LD_ADDR_VAR 0 2
19422: PUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 250
19432: PPUSH
19433: LD_VAR 0 4
19437: PPUSH
19438: LD_INT 3
19440: PPUSH
19441: LD_INT 12
19443: PPUSH
19444: CALL_OW 12
19448: PPUSH
19449: CALL_OW 272
19453: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19454: LD_ADDR_VAR 0 3
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 251
19468: PPUSH
19469: LD_VAR 0 4
19473: PPUSH
19474: LD_INT 3
19476: PPUSH
19477: LD_INT 12
19479: PPUSH
19480: CALL_OW 12
19484: PPUSH
19485: CALL_OW 273
19489: ST_TO_ADDR
// if ValidHex ( x , y ) then
19490: LD_VAR 0 2
19494: PPUSH
19495: LD_VAR 0 3
19499: PPUSH
19500: CALL_OW 488
19504: IFFALSE 19539
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: LD_VAR 0 2
19515: PPUSH
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_INT 3
19523: PPUSH
19524: LD_INT 6
19526: PPUSH
19527: CALL_OW 12
19531: PPUSH
19532: LD_INT 1
19534: PPUSH
19535: CALL_OW 483
// end ;
19539: GO 19399
19541: POP
19542: POP
// end ;
19543: PPOPN 5
19545: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19546: LD_EXP 26
19550: PUSH
19551: LD_EXP 61
19555: AND
19556: IFFALSE 19650
19558: GO 19560
19560: DISABLE
19561: LD_INT 0
19563: PPUSH
19564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19565: LD_ADDR_VAR 0 2
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_OWVAR 2
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 32
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 21
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PPUSH
19607: CALL_OW 69
19611: ST_TO_ADDR
// if not tmp then
19612: LD_VAR 0 2
19616: NOT
19617: IFFALSE 19621
// exit ;
19619: GO 19650
// for i in tmp do
19621: LD_ADDR_VAR 0 1
19625: PUSH
19626: LD_VAR 0 2
19630: PUSH
19631: FOR_IN
19632: IFFALSE 19648
// SetFuel ( i , 0 ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: LD_INT 0
19641: PPUSH
19642: CALL_OW 240
19646: GO 19631
19648: POP
19649: POP
// end ;
19650: PPOPN 2
19652: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19653: LD_EXP 26
19657: PUSH
19658: LD_EXP 62
19662: AND
19663: IFFALSE 19729
19665: GO 19667
19667: DISABLE
19668: LD_INT 0
19670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_OWVAR 2
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 30
19690: PUSH
19691: LD_INT 29
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PPUSH
19702: CALL_OW 69
19706: ST_TO_ADDR
// if not tmp then
19707: LD_VAR 0 1
19711: NOT
19712: IFFALSE 19716
// exit ;
19714: GO 19729
// DestroyUnit ( tmp [ 1 ] ) ;
19716: LD_VAR 0 1
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PPUSH
19725: CALL_OW 65
// end ;
19729: PPOPN 1
19731: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19732: LD_EXP 26
19736: PUSH
19737: LD_EXP 64
19741: AND
19742: IFFALSE 19871
19744: GO 19746
19746: DISABLE
19747: LD_INT 0
19749: PPUSH
// begin uc_side := 0 ;
19750: LD_ADDR_OWVAR 20
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// uc_nation := nation_arabian ;
19758: LD_ADDR_OWVAR 21
19762: PUSH
19763: LD_INT 2
19765: ST_TO_ADDR
// hc_gallery :=  ;
19766: LD_ADDR_OWVAR 33
19770: PUSH
19771: LD_STRING 
19773: ST_TO_ADDR
// hc_name :=  ;
19774: LD_ADDR_OWVAR 26
19778: PUSH
19779: LD_STRING 
19781: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19782: LD_INT 1
19784: PPUSH
19785: LD_INT 11
19787: PPUSH
19788: LD_INT 10
19790: PPUSH
19791: CALL_OW 380
// un := CreateHuman ;
19795: LD_ADDR_VAR 0 1
19799: PUSH
19800: CALL_OW 44
19804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19805: LD_VAR 0 1
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19817: LD_INT 35
19819: PPUSH
19820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19824: LD_VAR 0 1
19828: PPUSH
19829: LD_INT 22
19831: PUSH
19832: LD_OWVAR 2
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PPUSH
19846: LD_VAR 0 1
19850: PPUSH
19851: CALL_OW 74
19855: PPUSH
19856: CALL_OW 115
// until IsDead ( un ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 301
19869: IFFALSE 19817
// end ;
19871: PPOPN 1
19873: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19874: LD_EXP 26
19878: PUSH
19879: LD_EXP 66
19883: AND
19884: IFFALSE 19896
19886: GO 19888
19888: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19889: LD_STRING earthquake(getX(game), 0, 32)
19891: PPUSH
19892: CALL_OW 559
19896: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19897: LD_EXP 26
19901: PUSH
19902: LD_EXP 67
19906: AND
19907: IFFALSE 19998
19909: GO 19911
19911: DISABLE
19912: LD_INT 0
19914: PPUSH
// begin enable ;
19915: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19916: LD_ADDR_VAR 0 1
19920: PUSH
19921: LD_INT 22
19923: PUSH
19924: LD_OWVAR 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 21
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 33
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: ST_TO_ADDR
// if not tmp then
19963: LD_VAR 0 1
19967: NOT
19968: IFFALSE 19972
// exit ;
19970: GO 19998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19972: LD_VAR 0 1
19976: PUSH
19977: LD_INT 1
19979: PPUSH
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 12
19989: ARRAY
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 234
// end ;
19998: PPOPN 1
20000: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20001: LD_EXP 26
20005: PUSH
20006: LD_EXP 68
20010: AND
20011: IFFALSE 20152
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20021: LD_ADDR_VAR 0 3
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 25
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: ST_TO_ADDR
// if not tmp then
20057: LD_VAR 0 3
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20152
// un := tmp [ rand ( 1 , tmp ) ] ;
20066: LD_ADDR_VAR 0 2
20070: PUSH
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 1
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: CALL_OW 12
20088: ARRAY
20089: ST_TO_ADDR
// if Crawls ( un ) then
20090: LD_VAR 0 2
20094: PPUSH
20095: CALL_OW 318
20099: IFFALSE 20110
// ComWalk ( un ) ;
20101: LD_VAR 0 2
20105: PPUSH
20106: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20110: LD_VAR 0 2
20114: PPUSH
20115: LD_INT 9
20117: PPUSH
20118: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20122: LD_INT 28
20124: PPUSH
20125: LD_OWVAR 2
20129: PPUSH
20130: LD_INT 2
20132: PPUSH
20133: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20137: LD_INT 29
20139: PPUSH
20140: LD_OWVAR 2
20144: PPUSH
20145: LD_INT 2
20147: PPUSH
20148: CALL_OW 322
// end ;
20152: PPOPN 3
20154: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20155: LD_EXP 26
20159: PUSH
20160: LD_EXP 69
20164: AND
20165: IFFALSE 20276
20167: GO 20169
20169: DISABLE
20170: LD_INT 0
20172: PPUSH
20173: PPUSH
20174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_INT 22
20182: PUSH
20183: LD_OWVAR 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 25
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 69
20210: ST_TO_ADDR
// if not tmp then
20211: LD_VAR 0 3
20215: NOT
20216: IFFALSE 20220
// exit ;
20218: GO 20276
// un := tmp [ rand ( 1 , tmp ) ] ;
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 1
20232: PPUSH
20233: LD_VAR 0 3
20237: PPUSH
20238: CALL_OW 12
20242: ARRAY
20243: ST_TO_ADDR
// if Crawls ( un ) then
20244: LD_VAR 0 2
20248: PPUSH
20249: CALL_OW 318
20253: IFFALSE 20264
// ComWalk ( un ) ;
20255: LD_VAR 0 2
20259: PPUSH
20260: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20264: LD_VAR 0 2
20268: PPUSH
20269: LD_INT 8
20271: PPUSH
20272: CALL_OW 336
// end ;
20276: PPOPN 3
20278: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20279: LD_EXP 26
20283: PUSH
20284: LD_EXP 70
20288: AND
20289: IFFALSE 20433
20291: GO 20293
20293: DISABLE
20294: LD_INT 0
20296: PPUSH
20297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: LD_INT 22
20305: PUSH
20306: LD_OWVAR 2
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 21
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 2
20327: PUSH
20328: LD_INT 34
20330: PUSH
20331: LD_INT 12
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 34
20340: PUSH
20341: LD_INT 51
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 34
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 69
20373: ST_TO_ADDR
// if not tmp then
20374: LD_VAR 0 2
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20433
// for i in tmp do
20383: LD_ADDR_VAR 0 1
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: FOR_IN
20394: IFFALSE 20431
// if GetCargo ( i , mat_artifact ) = 0 then
20396: LD_VAR 0 1
20400: PPUSH
20401: LD_INT 4
20403: PPUSH
20404: CALL_OW 289
20408: PUSH
20409: LD_INT 0
20411: EQUAL
20412: IFFALSE 20429
// SetCargo ( i , mat_siberit , 100 ) ;
20414: LD_VAR 0 1
20418: PPUSH
20419: LD_INT 3
20421: PPUSH
20422: LD_INT 100
20424: PPUSH
20425: CALL_OW 290
20429: GO 20393
20431: POP
20432: POP
// end ;
20433: PPOPN 2
20435: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20436: LD_EXP 26
20440: PUSH
20441: LD_EXP 71
20445: AND
20446: IFFALSE 20629
20448: GO 20450
20450: DISABLE
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20455: LD_ADDR_VAR 0 2
20459: PUSH
20460: LD_INT 22
20462: PUSH
20463: LD_OWVAR 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PPUSH
20472: CALL_OW 69
20476: ST_TO_ADDR
// if not tmp then
20477: LD_VAR 0 2
20481: NOT
20482: IFFALSE 20486
// exit ;
20484: GO 20629
// for i := 1 to 2 do
20486: LD_ADDR_VAR 0 1
20490: PUSH
20491: DOUBLE
20492: LD_INT 1
20494: DEC
20495: ST_TO_ADDR
20496: LD_INT 2
20498: PUSH
20499: FOR_TO
20500: IFFALSE 20627
// begin uc_side := your_side ;
20502: LD_ADDR_OWVAR 20
20506: PUSH
20507: LD_OWVAR 2
20511: ST_TO_ADDR
// uc_nation := nation_american ;
20512: LD_ADDR_OWVAR 21
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// vc_chassis := us_morphling ;
20520: LD_ADDR_OWVAR 37
20524: PUSH
20525: LD_INT 5
20527: ST_TO_ADDR
// vc_engine := engine_siberite ;
20528: LD_ADDR_OWVAR 39
20532: PUSH
20533: LD_INT 3
20535: ST_TO_ADDR
// vc_control := control_computer ;
20536: LD_ADDR_OWVAR 38
20540: PUSH
20541: LD_INT 3
20543: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20544: LD_ADDR_OWVAR 40
20548: PUSH
20549: LD_INT 10
20551: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PPUSH
20561: CALL_OW 310
20565: NOT
20566: IFFALSE 20613
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20568: CALL_OW 45
20572: PPUSH
20573: LD_VAR 0 2
20577: PUSH
20578: LD_INT 1
20580: ARRAY
20581: PPUSH
20582: CALL_OW 250
20586: PPUSH
20587: LD_VAR 0 2
20591: PUSH
20592: LD_INT 1
20594: ARRAY
20595: PPUSH
20596: CALL_OW 251
20600: PPUSH
20601: LD_INT 12
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: CALL_OW 50
20611: GO 20625
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20613: CALL_OW 45
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 51
// end ;
20625: GO 20499
20627: POP
20628: POP
// end ;
20629: PPOPN 2
20631: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20632: LD_EXP 26
20636: PUSH
20637: LD_EXP 72
20641: AND
20642: IFFALSE 20864
20644: GO 20646
20646: DISABLE
20647: LD_INT 0
20649: PPUSH
20650: PPUSH
20651: PPUSH
20652: PPUSH
20653: PPUSH
20654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20655: LD_ADDR_VAR 0 6
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_OWVAR 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 21
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 3
20684: PUSH
20685: LD_INT 23
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: PPUSH
20704: CALL_OW 69
20708: ST_TO_ADDR
// if not tmp then
20709: LD_VAR 0 6
20713: NOT
20714: IFFALSE 20718
// exit ;
20716: GO 20864
// s1 := rand ( 1 , 4 ) ;
20718: LD_ADDR_VAR 0 2
20722: PUSH
20723: LD_INT 1
20725: PPUSH
20726: LD_INT 4
20728: PPUSH
20729: CALL_OW 12
20733: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20734: LD_ADDR_VAR 0 4
20738: PUSH
20739: LD_VAR 0 6
20743: PUSH
20744: LD_INT 1
20746: ARRAY
20747: PPUSH
20748: LD_VAR 0 2
20752: PPUSH
20753: CALL_OW 259
20757: ST_TO_ADDR
// if s1 = 1 then
20758: LD_VAR 0 2
20762: PUSH
20763: LD_INT 1
20765: EQUAL
20766: IFFALSE 20786
// s2 := rand ( 2 , 4 ) else
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_INT 2
20775: PPUSH
20776: LD_INT 4
20778: PPUSH
20779: CALL_OW 12
20783: ST_TO_ADDR
20784: GO 20794
// s2 := 1 ;
20786: LD_ADDR_VAR 0 3
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20794: LD_ADDR_VAR 0 5
20798: PUSH
20799: LD_VAR 0 6
20803: PUSH
20804: LD_INT 1
20806: ARRAY
20807: PPUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: CALL_OW 259
20817: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20818: LD_VAR 0 6
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: PPUSH
20827: LD_VAR 0 2
20831: PPUSH
20832: LD_VAR 0 5
20836: PPUSH
20837: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20841: LD_VAR 0 6
20845: PUSH
20846: LD_INT 1
20848: ARRAY
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: LD_VAR 0 4
20859: PPUSH
20860: CALL_OW 237
// end ;
20864: PPOPN 6
20866: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20867: LD_EXP 26
20871: PUSH
20872: LD_EXP 73
20876: AND
20877: IFFALSE 20956
20879: GO 20881
20881: DISABLE
20882: LD_INT 0
20884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20885: LD_ADDR_VAR 0 1
20889: PUSH
20890: LD_INT 22
20892: PUSH
20893: LD_OWVAR 2
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 30
20904: PUSH
20905: LD_INT 3
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: ST_TO_ADDR
// if not tmp then
20921: LD_VAR 0 1
20925: NOT
20926: IFFALSE 20930
// exit ;
20928: GO 20956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20930: LD_VAR 0 1
20934: PUSH
20935: LD_INT 1
20937: PPUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 12
20947: ARRAY
20948: PPUSH
20949: LD_INT 1
20951: PPUSH
20952: CALL_OW 234
// end ;
20956: PPOPN 1
20958: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20959: LD_EXP 26
20963: PUSH
20964: LD_EXP 74
20968: AND
20969: IFFALSE 21081
20971: GO 20973
20973: DISABLE
20974: LD_INT 0
20976: PPUSH
20977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_INT 22
20985: PUSH
20986: LD_OWVAR 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 30
21000: PUSH
21001: LD_INT 27
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 30
21010: PUSH
21011: LD_INT 26
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 30
21020: PUSH
21021: LD_INT 28
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PPUSH
21038: CALL_OW 69
21042: ST_TO_ADDR
// if not tmp then
21043: LD_VAR 0 2
21047: NOT
21048: IFFALSE 21052
// exit ;
21050: GO 21081
// for i in tmp do
21052: LD_ADDR_VAR 0 1
21056: PUSH
21057: LD_VAR 0 2
21061: PUSH
21062: FOR_IN
21063: IFFALSE 21079
// SetLives ( i , 1 ) ;
21065: LD_VAR 0 1
21069: PPUSH
21070: LD_INT 1
21072: PPUSH
21073: CALL_OW 234
21077: GO 21062
21079: POP
21080: POP
// end ;
21081: PPOPN 2
21083: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21084: LD_EXP 26
21088: PUSH
21089: LD_EXP 75
21093: AND
21094: IFFALSE 21381
21096: GO 21098
21098: DISABLE
21099: LD_INT 0
21101: PPUSH
21102: PPUSH
21103: PPUSH
// begin i := rand ( 1 , 7 ) ;
21104: LD_ADDR_VAR 0 1
21108: PUSH
21109: LD_INT 1
21111: PPUSH
21112: LD_INT 7
21114: PPUSH
21115: CALL_OW 12
21119: ST_TO_ADDR
// case i of 1 :
21120: LD_VAR 0 1
21124: PUSH
21125: LD_INT 1
21127: DOUBLE
21128: EQUAL
21129: IFTRUE 21133
21131: GO 21143
21133: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21134: LD_STRING earthquake(getX(game), 0, 32)
21136: PPUSH
21137: CALL_OW 559
21141: GO 21381
21143: LD_INT 2
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21165
21151: POP
// begin ToLua ( displayStucuk(); ) ;
21152: LD_STRING displayStucuk();
21154: PPUSH
21155: CALL_OW 559
// ResetFog ;
21159: CALL_OW 335
// end ; 3 :
21163: GO 21381
21165: LD_INT 3
21167: DOUBLE
21168: EQUAL
21169: IFTRUE 21173
21171: GO 21277
21173: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21174: LD_ADDR_VAR 0 2
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_OWVAR 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 25
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PPUSH
21205: CALL_OW 69
21209: ST_TO_ADDR
// if not tmp then
21210: LD_VAR 0 2
21214: NOT
21215: IFFALSE 21219
// exit ;
21217: GO 21381
// un := tmp [ rand ( 1 , tmp ) ] ;
21219: LD_ADDR_VAR 0 3
21223: PUSH
21224: LD_VAR 0 2
21228: PUSH
21229: LD_INT 1
21231: PPUSH
21232: LD_VAR 0 2
21236: PPUSH
21237: CALL_OW 12
21241: ARRAY
21242: ST_TO_ADDR
// if Crawls ( un ) then
21243: LD_VAR 0 3
21247: PPUSH
21248: CALL_OW 318
21252: IFFALSE 21263
// ComWalk ( un ) ;
21254: LD_VAR 0 3
21258: PPUSH
21259: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_INT 8
21270: PPUSH
21271: CALL_OW 336
// end ; 4 :
21275: GO 21381
21277: LD_INT 4
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21359
21285: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_OWVAR 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 29
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PPUSH
21317: CALL_OW 69
21321: ST_TO_ADDR
// if not tmp then
21322: LD_VAR 0 2
21326: NOT
21327: IFFALSE 21331
// exit ;
21329: GO 21381
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21331: LD_VAR 0 2
21335: PUSH
21336: LD_INT 1
21338: ARRAY
21339: PPUSH
21340: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21344: LD_VAR 0 2
21348: PUSH
21349: LD_INT 1
21351: ARRAY
21352: PPUSH
21353: CALL_OW 65
// end ; 5 .. 7 :
21357: GO 21381
21359: LD_INT 5
21361: DOUBLE
21362: GREATEREQUAL
21363: IFFALSE 21371
21365: LD_INT 7
21367: DOUBLE
21368: LESSEQUAL
21369: IFTRUE 21373
21371: GO 21380
21373: POP
// StreamSibBomb ; end ;
21374: CALL 17618 0 0
21378: GO 21381
21380: POP
// end ;
21381: PPOPN 3
21383: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21384: LD_EXP 26
21388: PUSH
21389: LD_EXP 76
21393: AND
21394: IFFALSE 21550
21396: GO 21398
21398: DISABLE
21399: LD_INT 0
21401: PPUSH
21402: PPUSH
21403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 81
21411: PUSH
21412: LD_OWVAR 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 21
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 21
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PPUSH
21453: CALL_OW 69
21457: ST_TO_ADDR
// if not tmp then
21458: LD_VAR 0 2
21462: NOT
21463: IFFALSE 21467
// exit ;
21465: GO 21550
// p := 0 ;
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21475: LD_INT 35
21477: PPUSH
21478: CALL_OW 67
// p := p + 1 ;
21482: LD_ADDR_VAR 0 3
21486: PUSH
21487: LD_VAR 0 3
21491: PUSH
21492: LD_INT 1
21494: PLUS
21495: ST_TO_ADDR
// for i in tmp do
21496: LD_ADDR_VAR 0 1
21500: PUSH
21501: LD_VAR 0 2
21505: PUSH
21506: FOR_IN
21507: IFFALSE 21538
// if GetLives ( i ) < 1000 then
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 256
21518: PUSH
21519: LD_INT 1000
21521: LESS
21522: IFFALSE 21536
// SetLives ( i , 1000 ) ;
21524: LD_VAR 0 1
21528: PPUSH
21529: LD_INT 1000
21531: PPUSH
21532: CALL_OW 234
21536: GO 21506
21538: POP
21539: POP
// until p > 20 ;
21540: LD_VAR 0 3
21544: PUSH
21545: LD_INT 20
21547: GREATER
21548: IFFALSE 21475
// end ;
21550: PPOPN 3
21552: END
// every 0 0$1 trigger StreamModeActive and sTime do
21553: LD_EXP 26
21557: PUSH
21558: LD_EXP 77
21562: AND
21563: IFFALSE 21598
21565: GO 21567
21567: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21568: LD_INT 28
21570: PPUSH
21571: LD_OWVAR 2
21575: PPUSH
21576: LD_INT 2
21578: PPUSH
21579: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21583: LD_INT 30
21585: PPUSH
21586: LD_OWVAR 2
21590: PPUSH
21591: LD_INT 2
21593: PPUSH
21594: CALL_OW 322
// end ;
21598: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21599: LD_EXP 26
21603: PUSH
21604: LD_EXP 78
21608: AND
21609: IFFALSE 21730
21611: GO 21613
21613: DISABLE
21614: LD_INT 0
21616: PPUSH
21617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 22
21625: PUSH
21626: LD_OWVAR 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 21
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 23
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21730
// for i in tmp do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: LD_VAR 0 2
21690: PUSH
21691: FOR_IN
21692: IFFALSE 21728
// begin if Crawls ( i ) then
21694: LD_VAR 0 1
21698: PPUSH
21699: CALL_OW 318
21703: IFFALSE 21714
// ComWalk ( i ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: CALL_OW 138
// SetClass ( i , 2 ) ;
21714: LD_VAR 0 1
21718: PPUSH
21719: LD_INT 2
21721: PPUSH
21722: CALL_OW 336
// end ;
21726: GO 21691
21728: POP
21729: POP
// end ;
21730: PPOPN 2
21732: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21733: LD_EXP 26
21737: PUSH
21738: LD_EXP 79
21742: AND
21743: IFFALSE 22031
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21753: LD_OWVAR 2
21757: PPUSH
21758: LD_INT 9
21760: PPUSH
21761: LD_INT 1
21763: PPUSH
21764: LD_INT 1
21766: PPUSH
21767: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21771: LD_INT 9
21773: PPUSH
21774: LD_OWVAR 2
21778: PPUSH
21779: CALL_OW 343
// uc_side := 9 ;
21783: LD_ADDR_OWVAR 20
21787: PUSH
21788: LD_INT 9
21790: ST_TO_ADDR
// uc_nation := 2 ;
21791: LD_ADDR_OWVAR 21
21795: PUSH
21796: LD_INT 2
21798: ST_TO_ADDR
// hc_name := Dark Warrior ;
21799: LD_ADDR_OWVAR 26
21803: PUSH
21804: LD_STRING Dark Warrior
21806: ST_TO_ADDR
// hc_gallery :=  ;
21807: LD_ADDR_OWVAR 33
21811: PUSH
21812: LD_STRING 
21814: ST_TO_ADDR
// hc_noskilllimit := true ;
21815: LD_ADDR_OWVAR 76
21819: PUSH
21820: LD_INT 1
21822: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21823: LD_ADDR_OWVAR 31
21827: PUSH
21828: LD_INT 30
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: LD_INT 30
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: ST_TO_ADDR
// un := CreateHuman ;
21846: LD_ADDR_VAR 0 3
21850: PUSH
21851: CALL_OW 44
21855: ST_TO_ADDR
// hc_noskilllimit := false ;
21856: LD_ADDR_OWVAR 76
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21864: LD_VAR 0 3
21868: PPUSH
21869: LD_INT 1
21871: PPUSH
21872: CALL_OW 51
// ToLua ( playRanger() ) ;
21876: LD_STRING playRanger()
21878: PPUSH
21879: CALL_OW 559
// p := 0 ;
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_INT 0
21890: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21891: LD_INT 35
21893: PPUSH
21894: CALL_OW 67
// p := p + 1 ;
21898: LD_ADDR_VAR 0 2
21902: PUSH
21903: LD_VAR 0 2
21907: PUSH
21908: LD_INT 1
21910: PLUS
21911: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21912: LD_VAR 0 3
21916: PPUSH
21917: CALL_OW 256
21921: PUSH
21922: LD_INT 1000
21924: LESS
21925: IFFALSE 21939
// SetLives ( un , 1000 ) ;
21927: LD_VAR 0 3
21931: PPUSH
21932: LD_INT 1000
21934: PPUSH
21935: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21939: LD_VAR 0 3
21943: PPUSH
21944: LD_INT 81
21946: PUSH
21947: LD_OWVAR 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 91
21958: PUSH
21959: LD_VAR 0 3
21963: PUSH
21964: LD_INT 30
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PPUSH
21976: CALL_OW 69
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: CALL_OW 74
21990: PPUSH
21991: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21995: LD_VAR 0 2
21999: PUSH
22000: LD_INT 80
22002: GREATER
22003: PUSH
22004: LD_VAR 0 3
22008: PPUSH
22009: CALL_OW 301
22013: OR
22014: IFFALSE 21891
// if un then
22016: LD_VAR 0 3
22020: IFFALSE 22031
// RemoveUnit ( un ) ;
22022: LD_VAR 0 3
22026: PPUSH
22027: CALL_OW 64
// end ;
22031: PPOPN 3
22033: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22034: LD_EXP 80
22038: IFFALSE 22154
22040: GO 22042
22042: DISABLE
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
22047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_INT 81
22055: PUSH
22056: LD_OWVAR 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 21
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22084: LD_STRING playComputer()
22086: PPUSH
22087: CALL_OW 559
// if not tmp then
22091: LD_VAR 0 2
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22154
// for i in tmp do
22100: LD_ADDR_VAR 0 1
22104: PUSH
22105: LD_VAR 0 2
22109: PUSH
22110: FOR_IN
22111: IFFALSE 22152
// for j := 1 to 4 do
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: DOUBLE
22119: LD_INT 1
22121: DEC
22122: ST_TO_ADDR
22123: LD_INT 4
22125: PUSH
22126: FOR_TO
22127: IFFALSE 22148
// SetSkill ( i , j , 10 ) ;
22129: LD_VAR 0 1
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: LD_INT 10
22141: PPUSH
22142: CALL_OW 237
22146: GO 22126
22148: POP
22149: POP
22150: GO 22110
22152: POP
22153: POP
// end ;
22154: PPOPN 3
22156: END
// every 0 0$1 trigger s30 do var i , tmp ;
22157: LD_EXP 81
22161: IFFALSE 22230
22163: GO 22165
22165: DISABLE
22166: LD_INT 0
22168: PPUSH
22169: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22170: LD_ADDR_VAR 0 2
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_OWVAR 2
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 69
22191: ST_TO_ADDR
// if not tmp then
22192: LD_VAR 0 2
22196: NOT
22197: IFFALSE 22201
// exit ;
22199: GO 22230
// for i in tmp do
22201: LD_ADDR_VAR 0 1
22205: PUSH
22206: LD_VAR 0 2
22210: PUSH
22211: FOR_IN
22212: IFFALSE 22228
// SetLives ( i , 300 ) ;
22214: LD_VAR 0 1
22218: PPUSH
22219: LD_INT 300
22221: PPUSH
22222: CALL_OW 234
22226: GO 22211
22228: POP
22229: POP
// end ;
22230: PPOPN 2
22232: END
// every 0 0$1 trigger s60 do var i , tmp ;
22233: LD_EXP 82
22237: IFFALSE 22306
22239: GO 22241
22241: DISABLE
22242: LD_INT 0
22244: PPUSH
22245: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_OWVAR 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 69
22267: ST_TO_ADDR
// if not tmp then
22268: LD_VAR 0 2
22272: NOT
22273: IFFALSE 22277
// exit ;
22275: GO 22306
// for i in tmp do
22277: LD_ADDR_VAR 0 1
22281: PUSH
22282: LD_VAR 0 2
22286: PUSH
22287: FOR_IN
22288: IFFALSE 22304
// SetLives ( i , 600 ) ;
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_INT 600
22297: PPUSH
22298: CALL_OW 234
22302: GO 22287
22304: POP
22305: POP
// end ;
22306: PPOPN 2
22308: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22309: LD_INT 0
22311: PPUSH
// case cmd of 301 :
22312: LD_VAR 0 1
22316: PUSH
22317: LD_INT 301
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22357
22325: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22326: LD_VAR 0 6
22330: PPUSH
22331: LD_VAR 0 7
22335: PPUSH
22336: LD_VAR 0 8
22340: PPUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_VAR 0 5
22350: PPUSH
22351: CALL 23558 0 5
22355: GO 22478
22357: LD_INT 302
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22402
22365: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22366: LD_VAR 0 6
22370: PPUSH
22371: LD_VAR 0 7
22375: PPUSH
22376: LD_VAR 0 8
22380: PPUSH
22381: LD_VAR 0 9
22385: PPUSH
22386: LD_VAR 0 4
22390: PPUSH
22391: LD_VAR 0 5
22395: PPUSH
22396: CALL 23649 0 6
22400: GO 22478
22402: LD_INT 303
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22447
22410: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22411: LD_VAR 0 6
22415: PPUSH
22416: LD_VAR 0 7
22420: PPUSH
22421: LD_VAR 0 8
22425: PPUSH
22426: LD_VAR 0 9
22430: PPUSH
22431: LD_VAR 0 4
22435: PPUSH
22436: LD_VAR 0 5
22440: PPUSH
22441: CALL 22483 0 6
22445: GO 22478
22447: LD_INT 304
22449: DOUBLE
22450: EQUAL
22451: IFTRUE 22455
22453: GO 22477
22455: POP
// hHackTeleport ( unit , x , y ) ; end ;
22456: LD_VAR 0 2
22460: PPUSH
22461: LD_VAR 0 4
22465: PPUSH
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL 24242 0 3
22475: GO 22478
22477: POP
// end ;
22478: LD_VAR 0 12
22482: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22487: LD_VAR 0 1
22491: PUSH
22492: LD_INT 1
22494: LESS
22495: PUSH
22496: LD_VAR 0 1
22500: PUSH
22501: LD_INT 3
22503: GREATER
22504: OR
22505: PUSH
22506: LD_VAR 0 5
22510: PPUSH
22511: LD_VAR 0 6
22515: PPUSH
22516: CALL_OW 428
22520: OR
22521: IFFALSE 22525
// exit ;
22523: GO 23245
// uc_side := your_side ;
22525: LD_ADDR_OWVAR 20
22529: PUSH
22530: LD_OWVAR 2
22534: ST_TO_ADDR
// uc_nation := nation ;
22535: LD_ADDR_OWVAR 21
22539: PUSH
22540: LD_VAR 0 1
22544: ST_TO_ADDR
// bc_level = 1 ;
22545: LD_ADDR_OWVAR 43
22549: PUSH
22550: LD_INT 1
22552: ST_TO_ADDR
// case btype of 1 :
22553: LD_VAR 0 2
22557: PUSH
22558: LD_INT 1
22560: DOUBLE
22561: EQUAL
22562: IFTRUE 22566
22564: GO 22577
22566: POP
// bc_type := b_depot ; 2 :
22567: LD_ADDR_OWVAR 42
22571: PUSH
22572: LD_INT 0
22574: ST_TO_ADDR
22575: GO 23189
22577: LD_INT 2
22579: DOUBLE
22580: EQUAL
22581: IFTRUE 22585
22583: GO 22596
22585: POP
// bc_type := b_warehouse ; 3 :
22586: LD_ADDR_OWVAR 42
22590: PUSH
22591: LD_INT 1
22593: ST_TO_ADDR
22594: GO 23189
22596: LD_INT 3
22598: DOUBLE
22599: EQUAL
22600: IFTRUE 22604
22602: GO 22615
22604: POP
// bc_type := b_lab ; 4 .. 9 :
22605: LD_ADDR_OWVAR 42
22609: PUSH
22610: LD_INT 6
22612: ST_TO_ADDR
22613: GO 23189
22615: LD_INT 4
22617: DOUBLE
22618: GREATEREQUAL
22619: IFFALSE 22627
22621: LD_INT 9
22623: DOUBLE
22624: LESSEQUAL
22625: IFTRUE 22629
22627: GO 22681
22629: POP
// begin bc_type := b_lab_half ;
22630: LD_ADDR_OWVAR 42
22634: PUSH
22635: LD_INT 7
22637: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22638: LD_ADDR_OWVAR 44
22642: PUSH
22643: LD_INT 10
22645: PUSH
22646: LD_INT 11
22648: PUSH
22649: LD_INT 12
22651: PUSH
22652: LD_INT 15
22654: PUSH
22655: LD_INT 14
22657: PUSH
22658: LD_INT 13
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: PUSH
22669: LD_VAR 0 2
22673: PUSH
22674: LD_INT 3
22676: MINUS
22677: ARRAY
22678: ST_TO_ADDR
// end ; 10 .. 13 :
22679: GO 23189
22681: LD_INT 10
22683: DOUBLE
22684: GREATEREQUAL
22685: IFFALSE 22693
22687: LD_INT 13
22689: DOUBLE
22690: LESSEQUAL
22691: IFTRUE 22695
22693: GO 22772
22695: POP
// begin bc_type := b_lab_full ;
22696: LD_ADDR_OWVAR 42
22700: PUSH
22701: LD_INT 8
22703: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22704: LD_ADDR_OWVAR 44
22708: PUSH
22709: LD_INT 10
22711: PUSH
22712: LD_INT 12
22714: PUSH
22715: LD_INT 14
22717: PUSH
22718: LD_INT 13
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_VAR 0 2
22731: PUSH
22732: LD_INT 9
22734: MINUS
22735: ARRAY
22736: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22737: LD_ADDR_OWVAR 45
22741: PUSH
22742: LD_INT 11
22744: PUSH
22745: LD_INT 15
22747: PUSH
22748: LD_INT 12
22750: PUSH
22751: LD_INT 15
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_VAR 0 2
22764: PUSH
22765: LD_INT 9
22767: MINUS
22768: ARRAY
22769: ST_TO_ADDR
// end ; 14 :
22770: GO 23189
22772: LD_INT 14
22774: DOUBLE
22775: EQUAL
22776: IFTRUE 22780
22778: GO 22791
22780: POP
// bc_type := b_workshop ; 15 :
22781: LD_ADDR_OWVAR 42
22785: PUSH
22786: LD_INT 2
22788: ST_TO_ADDR
22789: GO 23189
22791: LD_INT 15
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 22810
22799: POP
// bc_type := b_factory ; 16 :
22800: LD_ADDR_OWVAR 42
22804: PUSH
22805: LD_INT 3
22807: ST_TO_ADDR
22808: GO 23189
22810: LD_INT 16
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22829
22818: POP
// bc_type := b_ext_gun ; 17 :
22819: LD_ADDR_OWVAR 42
22823: PUSH
22824: LD_INT 17
22826: ST_TO_ADDR
22827: GO 23189
22829: LD_INT 17
22831: DOUBLE
22832: EQUAL
22833: IFTRUE 22837
22835: GO 22865
22837: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22838: LD_ADDR_OWVAR 42
22842: PUSH
22843: LD_INT 19
22845: PUSH
22846: LD_INT 23
22848: PUSH
22849: LD_INT 19
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: LIST
22856: PUSH
22857: LD_VAR 0 1
22861: ARRAY
22862: ST_TO_ADDR
22863: GO 23189
22865: LD_INT 18
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22884
22873: POP
// bc_type := b_ext_radar ; 19 :
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 20
22881: ST_TO_ADDR
22882: GO 23189
22884: LD_INT 19
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 22903
22892: POP
// bc_type := b_ext_radio ; 20 :
22893: LD_ADDR_OWVAR 42
22897: PUSH
22898: LD_INT 22
22900: ST_TO_ADDR
22901: GO 23189
22903: LD_INT 20
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22922
22911: POP
// bc_type := b_ext_siberium ; 21 :
22912: LD_ADDR_OWVAR 42
22916: PUSH
22917: LD_INT 21
22919: ST_TO_ADDR
22920: GO 23189
22922: LD_INT 21
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22941
22930: POP
// bc_type := b_ext_computer ; 22 :
22931: LD_ADDR_OWVAR 42
22935: PUSH
22936: LD_INT 24
22938: ST_TO_ADDR
22939: GO 23189
22941: LD_INT 22
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// bc_type := b_ext_track ; 23 :
22950: LD_ADDR_OWVAR 42
22954: PUSH
22955: LD_INT 16
22957: ST_TO_ADDR
22958: GO 23189
22960: LD_INT 23
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// bc_type := b_ext_laser ; 24 :
22969: LD_ADDR_OWVAR 42
22973: PUSH
22974: LD_INT 25
22976: ST_TO_ADDR
22977: GO 23189
22979: LD_INT 24
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 22998
22987: POP
// bc_type := b_control_tower ; 25 :
22988: LD_ADDR_OWVAR 42
22992: PUSH
22993: LD_INT 36
22995: ST_TO_ADDR
22996: GO 23189
22998: LD_INT 25
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23017
23006: POP
// bc_type := b_breastwork ; 26 :
23007: LD_ADDR_OWVAR 42
23011: PUSH
23012: LD_INT 31
23014: ST_TO_ADDR
23015: GO 23189
23017: LD_INT 26
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// bc_type := b_bunker ; 27 :
23026: LD_ADDR_OWVAR 42
23030: PUSH
23031: LD_INT 32
23033: ST_TO_ADDR
23034: GO 23189
23036: LD_INT 27
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// bc_type := b_turret ; 28 :
23045: LD_ADDR_OWVAR 42
23049: PUSH
23050: LD_INT 33
23052: ST_TO_ADDR
23053: GO 23189
23055: LD_INT 28
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23074
23063: POP
// bc_type := b_armoury ; 29 :
23064: LD_ADDR_OWVAR 42
23068: PUSH
23069: LD_INT 4
23071: ST_TO_ADDR
23072: GO 23189
23074: LD_INT 29
23076: DOUBLE
23077: EQUAL
23078: IFTRUE 23082
23080: GO 23093
23082: POP
// bc_type := b_barracks ; 30 :
23083: LD_ADDR_OWVAR 42
23087: PUSH
23088: LD_INT 5
23090: ST_TO_ADDR
23091: GO 23189
23093: LD_INT 30
23095: DOUBLE
23096: EQUAL
23097: IFTRUE 23101
23099: GO 23112
23101: POP
// bc_type := b_solar_power ; 31 :
23102: LD_ADDR_OWVAR 42
23106: PUSH
23107: LD_INT 27
23109: ST_TO_ADDR
23110: GO 23189
23112: LD_INT 31
23114: DOUBLE
23115: EQUAL
23116: IFTRUE 23120
23118: GO 23131
23120: POP
// bc_type := b_oil_power ; 32 :
23121: LD_ADDR_OWVAR 42
23125: PUSH
23126: LD_INT 26
23128: ST_TO_ADDR
23129: GO 23189
23131: LD_INT 32
23133: DOUBLE
23134: EQUAL
23135: IFTRUE 23139
23137: GO 23150
23139: POP
// bc_type := b_siberite_power ; 33 :
23140: LD_ADDR_OWVAR 42
23144: PUSH
23145: LD_INT 28
23147: ST_TO_ADDR
23148: GO 23189
23150: LD_INT 33
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23169
23158: POP
// bc_type := b_oil_mine ; 34 :
23159: LD_ADDR_OWVAR 42
23163: PUSH
23164: LD_INT 29
23166: ST_TO_ADDR
23167: GO 23189
23169: LD_INT 34
23171: DOUBLE
23172: EQUAL
23173: IFTRUE 23177
23175: GO 23188
23177: POP
// bc_type := b_siberite_mine ; end ;
23178: LD_ADDR_OWVAR 42
23182: PUSH
23183: LD_INT 30
23185: ST_TO_ADDR
23186: GO 23189
23188: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23189: LD_ADDR_VAR 0 8
23193: PUSH
23194: LD_VAR 0 5
23198: PPUSH
23199: LD_VAR 0 6
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: CALL_OW 47
23213: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23214: LD_OWVAR 42
23218: PUSH
23219: LD_INT 32
23221: PUSH
23222: LD_INT 33
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: IN
23229: IFFALSE 23245
// PlaceWeaponTurret ( b , weapon ) ;
23231: LD_VAR 0 8
23235: PPUSH
23236: LD_VAR 0 4
23240: PPUSH
23241: CALL_OW 431
// end ;
23245: LD_VAR 0 7
23249: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23256: LD_ADDR_VAR 0 4
23260: PUSH
23261: LD_INT 22
23263: PUSH
23264: LD_OWVAR 2
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 30
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 30
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PPUSH
23305: CALL_OW 69
23309: ST_TO_ADDR
// if not tmp then
23310: LD_VAR 0 4
23314: NOT
23315: IFFALSE 23319
// exit ;
23317: GO 23378
// for i in tmp do
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_VAR 0 4
23328: PUSH
23329: FOR_IN
23330: IFFALSE 23376
// for j = 1 to 3 do
23332: LD_ADDR_VAR 0 3
23336: PUSH
23337: DOUBLE
23338: LD_INT 1
23340: DEC
23341: ST_TO_ADDR
23342: LD_INT 3
23344: PUSH
23345: FOR_TO
23346: IFFALSE 23372
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23348: LD_VAR 0 2
23352: PPUSH
23353: CALL_OW 274
23357: PPUSH
23358: LD_VAR 0 3
23362: PPUSH
23363: LD_INT 99999
23365: PPUSH
23366: CALL_OW 277
23370: GO 23345
23372: POP
23373: POP
23374: GO 23329
23376: POP
23377: POP
// end ;
23378: LD_VAR 0 1
23382: RET
// export function hHackSetLevel10 ; var i , j ; begin
23383: LD_INT 0
23385: PPUSH
23386: PPUSH
23387: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23388: LD_ADDR_VAR 0 2
23392: PUSH
23393: LD_INT 21
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PPUSH
23403: CALL_OW 69
23407: PUSH
23408: FOR_IN
23409: IFFALSE 23461
// if IsSelected ( i ) then
23411: LD_VAR 0 2
23415: PPUSH
23416: CALL_OW 306
23420: IFFALSE 23459
// begin for j := 1 to 4 do
23422: LD_ADDR_VAR 0 3
23426: PUSH
23427: DOUBLE
23428: LD_INT 1
23430: DEC
23431: ST_TO_ADDR
23432: LD_INT 4
23434: PUSH
23435: FOR_TO
23436: IFFALSE 23457
// SetSkill ( i , j , 10 ) ;
23438: LD_VAR 0 2
23442: PPUSH
23443: LD_VAR 0 3
23447: PPUSH
23448: LD_INT 10
23450: PPUSH
23451: CALL_OW 237
23455: GO 23435
23457: POP
23458: POP
// end ;
23459: GO 23408
23461: POP
23462: POP
// end ;
23463: LD_VAR 0 1
23467: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23468: LD_INT 0
23470: PPUSH
23471: PPUSH
23472: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23473: LD_ADDR_VAR 0 2
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_OWVAR 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PPUSH
23504: CALL_OW 69
23508: PUSH
23509: FOR_IN
23510: IFFALSE 23551
// begin for j := 1 to 4 do
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: DOUBLE
23518: LD_INT 1
23520: DEC
23521: ST_TO_ADDR
23522: LD_INT 4
23524: PUSH
23525: FOR_TO
23526: IFFALSE 23547
// SetSkill ( i , j , 10 ) ;
23528: LD_VAR 0 2
23532: PPUSH
23533: LD_VAR 0 3
23537: PPUSH
23538: LD_INT 10
23540: PPUSH
23541: CALL_OW 237
23545: GO 23525
23547: POP
23548: POP
// end ;
23549: GO 23509
23551: POP
23552: POP
// end ;
23553: LD_VAR 0 1
23557: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23558: LD_INT 0
23560: PPUSH
// uc_side := your_side ;
23561: LD_ADDR_OWVAR 20
23565: PUSH
23566: LD_OWVAR 2
23570: ST_TO_ADDR
// uc_nation := nation ;
23571: LD_ADDR_OWVAR 21
23575: PUSH
23576: LD_VAR 0 1
23580: ST_TO_ADDR
// InitHc ;
23581: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23585: LD_INT 0
23587: PPUSH
23588: LD_VAR 0 2
23592: PPUSH
23593: LD_VAR 0 3
23597: PPUSH
23598: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23602: LD_VAR 0 4
23606: PPUSH
23607: LD_VAR 0 5
23611: PPUSH
23612: CALL_OW 428
23616: PUSH
23617: LD_INT 0
23619: EQUAL
23620: IFFALSE 23644
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23622: CALL_OW 44
23626: PPUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: LD_VAR 0 5
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 48
// end ;
23644: LD_VAR 0 6
23648: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23649: LD_INT 0
23651: PPUSH
23652: PPUSH
// uc_side := your_side ;
23653: LD_ADDR_OWVAR 20
23657: PUSH
23658: LD_OWVAR 2
23662: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23663: LD_VAR 0 1
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: LD_INT 3
23676: PUSH
23677: LD_INT 4
23679: PUSH
23680: LD_INT 5
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: IN
23690: IFFALSE 23702
// uc_nation := nation_american else
23692: LD_ADDR_OWVAR 21
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
23700: GO 23745
// if chassis in [ 11 , 12 , 13 , 14 ] then
23702: LD_VAR 0 1
23706: PUSH
23707: LD_INT 11
23709: PUSH
23710: LD_INT 12
23712: PUSH
23713: LD_INT 13
23715: PUSH
23716: LD_INT 14
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: IN
23725: IFFALSE 23737
// uc_nation := nation_arabian else
23727: LD_ADDR_OWVAR 21
23731: PUSH
23732: LD_INT 2
23734: ST_TO_ADDR
23735: GO 23745
// uc_nation := nation_russian ;
23737: LD_ADDR_OWVAR 21
23741: PUSH
23742: LD_INT 3
23744: ST_TO_ADDR
// vc_chassis := chassis ;
23745: LD_ADDR_OWVAR 37
23749: PUSH
23750: LD_VAR 0 1
23754: ST_TO_ADDR
// vc_engine := engine ;
23755: LD_ADDR_OWVAR 39
23759: PUSH
23760: LD_VAR 0 2
23764: ST_TO_ADDR
// vc_control := control ;
23765: LD_ADDR_OWVAR 38
23769: PUSH
23770: LD_VAR 0 3
23774: ST_TO_ADDR
// vc_weapon := weapon ;
23775: LD_ADDR_OWVAR 40
23779: PUSH
23780: LD_VAR 0 4
23784: ST_TO_ADDR
// un := CreateVehicle ;
23785: LD_ADDR_VAR 0 8
23789: PUSH
23790: CALL_OW 45
23794: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23795: LD_VAR 0 8
23799: PPUSH
23800: LD_INT 0
23802: PPUSH
23803: LD_INT 5
23805: PPUSH
23806: CALL_OW 12
23810: PPUSH
23811: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23815: LD_VAR 0 8
23819: PPUSH
23820: LD_VAR 0 5
23824: PPUSH
23825: LD_VAR 0 6
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: CALL_OW 48
// end ;
23837: LD_VAR 0 7
23841: RET
// export hInvincible ; every 1 do
23842: GO 23844
23844: DISABLE
// hInvincible := [ ] ;
23845: LD_ADDR_EXP 83
23849: PUSH
23850: EMPTY
23851: ST_TO_ADDR
23852: END
// every 10 do var i ;
23853: GO 23855
23855: DISABLE
23856: LD_INT 0
23858: PPUSH
// begin enable ;
23859: ENABLE
// if not hInvincible then
23860: LD_EXP 83
23864: NOT
23865: IFFALSE 23869
// exit ;
23867: GO 23913
// for i in hInvincible do
23869: LD_ADDR_VAR 0 1
23873: PUSH
23874: LD_EXP 83
23878: PUSH
23879: FOR_IN
23880: IFFALSE 23911
// if GetLives ( i ) < 1000 then
23882: LD_VAR 0 1
23886: PPUSH
23887: CALL_OW 256
23891: PUSH
23892: LD_INT 1000
23894: LESS
23895: IFFALSE 23909
// SetLives ( i , 1000 ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_INT 1000
23904: PPUSH
23905: CALL_OW 234
23909: GO 23879
23911: POP
23912: POP
// end ;
23913: PPOPN 1
23915: END
// export function hHackInvincible ; var i ; begin
23916: LD_INT 0
23918: PPUSH
23919: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23920: LD_ADDR_VAR 0 2
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 21
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 21
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 69
23957: PUSH
23958: FOR_IN
23959: IFFALSE 24020
// if IsSelected ( i ) then
23961: LD_VAR 0 2
23965: PPUSH
23966: CALL_OW 306
23970: IFFALSE 24018
// begin if i in hInvincible then
23972: LD_VAR 0 2
23976: PUSH
23977: LD_EXP 83
23981: IN
23982: IFFALSE 24002
// hInvincible := hInvincible diff i else
23984: LD_ADDR_EXP 83
23988: PUSH
23989: LD_EXP 83
23993: PUSH
23994: LD_VAR 0 2
23998: DIFF
23999: ST_TO_ADDR
24000: GO 24018
// hInvincible := hInvincible union i ;
24002: LD_ADDR_EXP 83
24006: PUSH
24007: LD_EXP 83
24011: PUSH
24012: LD_VAR 0 2
24016: UNION
24017: ST_TO_ADDR
// end ;
24018: GO 23958
24020: POP
24021: POP
// end ;
24022: LD_VAR 0 1
24026: RET
// export function hHackInvisible ; var i , j ; begin
24027: LD_INT 0
24029: PPUSH
24030: PPUSH
24031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 21
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 69
24051: PUSH
24052: FOR_IN
24053: IFFALSE 24077
// if IsSelected ( i ) then
24055: LD_VAR 0 2
24059: PPUSH
24060: CALL_OW 306
24064: IFFALSE 24075
// ComForceInvisible ( i ) ;
24066: LD_VAR 0 2
24070: PPUSH
24071: CALL_OW 496
24075: GO 24052
24077: POP
24078: POP
// end ;
24079: LD_VAR 0 1
24083: RET
// export function hHackChangeYourSide ; begin
24084: LD_INT 0
24086: PPUSH
// if your_side = 8 then
24087: LD_OWVAR 2
24091: PUSH
24092: LD_INT 8
24094: EQUAL
24095: IFFALSE 24107
// your_side := 0 else
24097: LD_ADDR_OWVAR 2
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
24105: GO 24121
// your_side := your_side + 1 ;
24107: LD_ADDR_OWVAR 2
24111: PUSH
24112: LD_OWVAR 2
24116: PUSH
24117: LD_INT 1
24119: PLUS
24120: ST_TO_ADDR
// end ;
24121: LD_VAR 0 1
24125: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24126: LD_INT 0
24128: PPUSH
24129: PPUSH
24130: PPUSH
// for i in all_units do
24131: LD_ADDR_VAR 0 2
24135: PUSH
24136: LD_OWVAR 3
24140: PUSH
24141: FOR_IN
24142: IFFALSE 24220
// if IsSelected ( i ) then
24144: LD_VAR 0 2
24148: PPUSH
24149: CALL_OW 306
24153: IFFALSE 24218
// begin j := GetSide ( i ) ;
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_VAR 0 2
24164: PPUSH
24165: CALL_OW 255
24169: ST_TO_ADDR
// if j = 8 then
24170: LD_VAR 0 3
24174: PUSH
24175: LD_INT 8
24177: EQUAL
24178: IFFALSE 24190
// j := 0 else
24180: LD_ADDR_VAR 0 3
24184: PUSH
24185: LD_INT 0
24187: ST_TO_ADDR
24188: GO 24204
// j := j + 1 ;
24190: LD_ADDR_VAR 0 3
24194: PUSH
24195: LD_VAR 0 3
24199: PUSH
24200: LD_INT 1
24202: PLUS
24203: ST_TO_ADDR
// SetSide ( i , j ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_VAR 0 3
24213: PPUSH
24214: CALL_OW 235
// end ;
24218: GO 24141
24220: POP
24221: POP
// end ;
24222: LD_VAR 0 1
24226: RET
// export function hHackFog ; begin
24227: LD_INT 0
24229: PPUSH
// FogOff ( true ) ;
24230: LD_INT 1
24232: PPUSH
24233: CALL_OW 344
// end ;
24237: LD_VAR 0 1
24241: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24242: LD_INT 0
24244: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_VAR 0 2
24254: PPUSH
24255: LD_VAR 0 3
24259: PPUSH
24260: LD_INT 1
24262: PPUSH
24263: LD_INT 1
24265: PPUSH
24266: CALL_OW 483
// CenterOnXY ( x , y ) ;
24270: LD_VAR 0 2
24274: PPUSH
24275: LD_VAR 0 3
24279: PPUSH
24280: CALL_OW 84
// end ; end_of_file end_of_file
24284: LD_VAR 0 4
24288: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24289: LD_INT 0
24291: PPUSH
24292: PPUSH
24293: PPUSH
24294: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 264
24304: PUSH
24305: LD_EXP 99
24309: EQUAL
24310: IFFALSE 24382
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24312: LD_INT 68
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 255
24324: PPUSH
24325: CALL_OW 321
24329: PUSH
24330: LD_INT 2
24332: EQUAL
24333: IFFALSE 24345
// eff := 70 else
24335: LD_ADDR_VAR 0 4
24339: PUSH
24340: LD_INT 70
24342: ST_TO_ADDR
24343: GO 24353
// eff := 30 ;
24345: LD_ADDR_VAR 0 4
24349: PUSH
24350: LD_INT 30
24352: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24353: LD_VAR 0 1
24357: PPUSH
24358: CALL_OW 250
24362: PPUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 251
24372: PPUSH
24373: LD_VAR 0 4
24377: PPUSH
24378: CALL_OW 495
// end ; end ;
24382: LD_VAR 0 2
24386: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24387: LD_INT 0
24389: PPUSH
// end ;
24390: LD_VAR 0 4
24394: RET
// export function SOS_Command ( cmd ) ; begin
24395: LD_INT 0
24397: PPUSH
// end ;
24398: LD_VAR 0 2
24402: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24403: LD_INT 0
24405: PPUSH
// end ;
24406: LD_VAR 0 6
24410: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
// if not vehicle or not factory then
24415: LD_VAR 0 1
24419: NOT
24420: PUSH
24421: LD_VAR 0 2
24425: NOT
24426: OR
24427: IFFALSE 24431
// exit ;
24429: GO 24662
// if factoryWaypoints >= factory then
24431: LD_EXP 84
24435: PUSH
24436: LD_VAR 0 2
24440: GREATEREQUAL
24441: IFFALSE 24662
// if factoryWaypoints [ factory ] then
24443: LD_EXP 84
24447: PUSH
24448: LD_VAR 0 2
24452: ARRAY
24453: IFFALSE 24662
// begin if GetControl ( vehicle ) = control_manual then
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 263
24464: PUSH
24465: LD_INT 1
24467: EQUAL
24468: IFFALSE 24549
// begin driver := IsDrivenBy ( vehicle ) ;
24470: LD_ADDR_VAR 0 4
24474: PUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 311
24484: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24485: LD_VAR 0 4
24489: PPUSH
24490: LD_EXP 84
24494: PUSH
24495: LD_VAR 0 2
24499: ARRAY
24500: PUSH
24501: LD_INT 1
24503: ARRAY
24504: PPUSH
24505: LD_EXP 84
24509: PUSH
24510: LD_VAR 0 2
24514: ARRAY
24515: PUSH
24516: LD_INT 2
24518: ARRAY
24519: PPUSH
24520: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24524: LD_VAR 0 4
24528: PPUSH
24529: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24533: LD_VAR 0 4
24537: PPUSH
24538: LD_VAR 0 2
24542: PPUSH
24543: CALL_OW 180
// end else
24547: GO 24662
// if GetControl ( vehicle ) = control_remote then
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 263
24558: PUSH
24559: LD_INT 2
24561: EQUAL
24562: IFFALSE 24623
// begin wait ( 0 0$2 ) ;
24564: LD_INT 70
24566: PPUSH
24567: CALL_OW 67
// if Connect ( vehicle ) then
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL 37054 0 1
24580: IFFALSE 24621
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24582: LD_VAR 0 1
24586: PPUSH
24587: LD_EXP 84
24591: PUSH
24592: LD_VAR 0 2
24596: ARRAY
24597: PUSH
24598: LD_INT 1
24600: ARRAY
24601: PPUSH
24602: LD_EXP 84
24606: PUSH
24607: LD_VAR 0 2
24611: ARRAY
24612: PUSH
24613: LD_INT 2
24615: ARRAY
24616: PPUSH
24617: CALL_OW 171
// end else
24621: GO 24662
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24623: LD_VAR 0 1
24627: PPUSH
24628: LD_EXP 84
24632: PUSH
24633: LD_VAR 0 2
24637: ARRAY
24638: PUSH
24639: LD_INT 1
24641: ARRAY
24642: PPUSH
24643: LD_EXP 84
24647: PUSH
24648: LD_VAR 0 2
24652: ARRAY
24653: PUSH
24654: LD_INT 2
24656: ARRAY
24657: PPUSH
24658: CALL_OW 171
// end ; end ;
24662: LD_VAR 0 3
24666: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24667: LD_INT 0
24669: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24670: LD_VAR 0 1
24674: PUSH
24675: LD_INT 250
24677: EQUAL
24678: PUSH
24679: LD_VAR 0 2
24683: PPUSH
24684: CALL_OW 264
24688: PUSH
24689: LD_EXP 102
24693: EQUAL
24694: AND
24695: IFFALSE 24716
// MinerPlaceMine ( unit , x , y ) ;
24697: LD_VAR 0 2
24701: PPUSH
24702: LD_VAR 0 4
24706: PPUSH
24707: LD_VAR 0 5
24711: PPUSH
24712: CALL 27444 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24716: LD_VAR 0 1
24720: PUSH
24721: LD_INT 251
24723: EQUAL
24724: PUSH
24725: LD_VAR 0 2
24729: PPUSH
24730: CALL_OW 264
24734: PUSH
24735: LD_EXP 102
24739: EQUAL
24740: AND
24741: IFFALSE 24762
// MinerDetonateMine ( unit , x , y ) ;
24743: LD_VAR 0 2
24747: PPUSH
24748: LD_VAR 0 4
24752: PPUSH
24753: LD_VAR 0 5
24757: PPUSH
24758: CALL 27721 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24762: LD_VAR 0 1
24766: PUSH
24767: LD_INT 252
24769: EQUAL
24770: PUSH
24771: LD_VAR 0 2
24775: PPUSH
24776: CALL_OW 264
24780: PUSH
24781: LD_EXP 102
24785: EQUAL
24786: AND
24787: IFFALSE 24808
// MinerCreateMinefield ( unit , x , y ) ;
24789: LD_VAR 0 2
24793: PPUSH
24794: LD_VAR 0 4
24798: PPUSH
24799: LD_VAR 0 5
24803: PPUSH
24804: CALL 28138 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24808: LD_VAR 0 1
24812: PUSH
24813: LD_INT 253
24815: EQUAL
24816: PUSH
24817: LD_VAR 0 2
24821: PPUSH
24822: CALL_OW 257
24826: PUSH
24827: LD_INT 5
24829: EQUAL
24830: AND
24831: IFFALSE 24852
// ComBinocular ( unit , x , y ) ;
24833: LD_VAR 0 2
24837: PPUSH
24838: LD_VAR 0 4
24842: PPUSH
24843: LD_VAR 0 5
24847: PPUSH
24848: CALL 28509 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24852: LD_VAR 0 1
24856: PUSH
24857: LD_INT 254
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 2
24865: PPUSH
24866: CALL_OW 264
24870: PUSH
24871: LD_EXP 97
24875: EQUAL
24876: AND
24877: PUSH
24878: LD_VAR 0 3
24882: PPUSH
24883: CALL_OW 263
24887: PUSH
24888: LD_INT 3
24890: EQUAL
24891: AND
24892: IFFALSE 24908
// HackDestroyVehicle ( unit , selectedUnit ) ;
24894: LD_VAR 0 2
24898: PPUSH
24899: LD_VAR 0 3
24903: PPUSH
24904: CALL 26804 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 255
24915: EQUAL
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: CALL_OW 264
24926: PUSH
24927: LD_INT 14
24929: PUSH
24930: LD_INT 53
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: IN
24937: AND
24938: PUSH
24939: LD_VAR 0 4
24943: PPUSH
24944: LD_VAR 0 5
24948: PPUSH
24949: CALL_OW 488
24953: AND
24954: IFFALSE 24978
// CutTreeXYR ( unit , x , y , 12 ) ;
24956: LD_VAR 0 2
24960: PPUSH
24961: LD_VAR 0 4
24965: PPUSH
24966: LD_VAR 0 5
24970: PPUSH
24971: LD_INT 12
24973: PPUSH
24974: CALL 25370 0 4
// if cmd = 256 then
24978: LD_VAR 0 1
24982: PUSH
24983: LD_INT 256
24985: EQUAL
24986: IFFALSE 25007
// SetFactoryWaypoint ( unit , x , y ) ;
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 4
24997: PPUSH
24998: LD_VAR 0 5
25002: PPUSH
25003: CALL 25012 0 3
// end ;
25007: LD_VAR 0 6
25011: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25016: LD_VAR 0 1
25020: NOT
25021: PUSH
25022: LD_VAR 0 2
25026: PPUSH
25027: LD_VAR 0 3
25031: PPUSH
25032: CALL_OW 488
25036: NOT
25037: OR
25038: PUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 266
25048: PUSH
25049: LD_INT 3
25051: NONEQUAL
25052: PUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL_OW 247
25062: PUSH
25063: LD_INT 1
25065: EQUAL
25066: NOT
25067: AND
25068: OR
25069: IFFALSE 25073
// exit ;
25071: GO 25222
// if GetType ( factory ) = unit_human then
25073: LD_VAR 0 1
25077: PPUSH
25078: CALL_OW 247
25082: PUSH
25083: LD_INT 1
25085: EQUAL
25086: IFFALSE 25103
// factory := IsInUnit ( factory ) ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PPUSH
25098: CALL_OW 310
25102: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25103: LD_VAR 0 1
25107: PPUSH
25108: CALL_OW 266
25112: PUSH
25113: LD_INT 3
25115: NONEQUAL
25116: IFFALSE 25120
// exit ;
25118: GO 25222
// if HexInfo ( x , y ) = factory then
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: CALL_OW 428
25134: PUSH
25135: LD_VAR 0 1
25139: EQUAL
25140: IFFALSE 25167
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25142: LD_ADDR_EXP 84
25146: PUSH
25147: LD_EXP 84
25151: PPUSH
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_INT 0
25159: PPUSH
25160: CALL_OW 1
25164: ST_TO_ADDR
25165: GO 25218
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25167: LD_ADDR_EXP 84
25171: PUSH
25172: LD_EXP 84
25176: PPUSH
25177: LD_VAR 0 1
25181: PPUSH
25182: LD_VAR 0 1
25186: PPUSH
25187: CALL_OW 255
25191: PUSH
25192: LD_VAR 0 1
25196: PUSH
25197: LD_VAR 0 2
25201: PUSH
25202: LD_VAR 0 3
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 1
25217: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25218: CALL 25227 0 0
// end ;
25222: LD_VAR 0 4
25226: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25227: LD_INT 0
25229: PPUSH
25230: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25231: LD_STRING resetFactoryWaypoint();
25233: PPUSH
25234: CALL_OW 559
// if factoryWaypoints then
25238: LD_EXP 84
25242: IFFALSE 25365
// begin for i := 1 to factoryWaypoints do
25244: LD_ADDR_VAR 0 2
25248: PUSH
25249: DOUBLE
25250: LD_INT 1
25252: DEC
25253: ST_TO_ADDR
25254: LD_EXP 84
25258: PUSH
25259: FOR_TO
25260: IFFALSE 25363
// if factoryWaypoints [ i ] then
25262: LD_EXP 84
25266: PUSH
25267: LD_VAR 0 2
25271: ARRAY
25272: IFFALSE 25361
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25274: LD_STRING setFactoryWaypointXY(
25276: PUSH
25277: LD_EXP 84
25281: PUSH
25282: LD_VAR 0 2
25286: ARRAY
25287: PUSH
25288: LD_INT 1
25290: ARRAY
25291: STR
25292: PUSH
25293: LD_STRING ,
25295: STR
25296: PUSH
25297: LD_EXP 84
25301: PUSH
25302: LD_VAR 0 2
25306: ARRAY
25307: PUSH
25308: LD_INT 2
25310: ARRAY
25311: STR
25312: PUSH
25313: LD_STRING ,
25315: STR
25316: PUSH
25317: LD_EXP 84
25321: PUSH
25322: LD_VAR 0 2
25326: ARRAY
25327: PUSH
25328: LD_INT 3
25330: ARRAY
25331: STR
25332: PUSH
25333: LD_STRING ,
25335: STR
25336: PUSH
25337: LD_EXP 84
25341: PUSH
25342: LD_VAR 0 2
25346: ARRAY
25347: PUSH
25348: LD_INT 4
25350: ARRAY
25351: STR
25352: PUSH
25353: LD_STRING )
25355: STR
25356: PPUSH
25357: CALL_OW 559
25361: GO 25259
25363: POP
25364: POP
// end ; end ;
25365: LD_VAR 0 1
25369: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25370: LD_INT 0
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25381: LD_VAR 0 1
25385: NOT
25386: PUSH
25387: LD_VAR 0 2
25391: PPUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 488
25401: NOT
25402: OR
25403: PUSH
25404: LD_VAR 0 4
25408: NOT
25409: OR
25410: IFFALSE 25414
// exit ;
25412: GO 25754
// list := [ ] ;
25414: LD_ADDR_VAR 0 13
25418: PUSH
25419: EMPTY
25420: ST_TO_ADDR
// if x - r < 0 then
25421: LD_VAR 0 2
25425: PUSH
25426: LD_VAR 0 4
25430: MINUS
25431: PUSH
25432: LD_INT 0
25434: LESS
25435: IFFALSE 25447
// min_x := 0 else
25437: LD_ADDR_VAR 0 7
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
25445: GO 25463
// min_x := x - r ;
25447: LD_ADDR_VAR 0 7
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: LD_VAR 0 4
25461: MINUS
25462: ST_TO_ADDR
// if y - r < 0 then
25463: LD_VAR 0 3
25467: PUSH
25468: LD_VAR 0 4
25472: MINUS
25473: PUSH
25474: LD_INT 0
25476: LESS
25477: IFFALSE 25489
// min_y := 0 else
25479: LD_ADDR_VAR 0 8
25483: PUSH
25484: LD_INT 0
25486: ST_TO_ADDR
25487: GO 25505
// min_y := y - r ;
25489: LD_ADDR_VAR 0 8
25493: PUSH
25494: LD_VAR 0 3
25498: PUSH
25499: LD_VAR 0 4
25503: MINUS
25504: ST_TO_ADDR
// max_x := x + r ;
25505: LD_ADDR_VAR 0 9
25509: PUSH
25510: LD_VAR 0 2
25514: PUSH
25515: LD_VAR 0 4
25519: PLUS
25520: ST_TO_ADDR
// max_y := y + r ;
25521: LD_ADDR_VAR 0 10
25525: PUSH
25526: LD_VAR 0 3
25530: PUSH
25531: LD_VAR 0 4
25535: PLUS
25536: ST_TO_ADDR
// for _x = min_x to max_x do
25537: LD_ADDR_VAR 0 11
25541: PUSH
25542: DOUBLE
25543: LD_VAR 0 7
25547: DEC
25548: ST_TO_ADDR
25549: LD_VAR 0 9
25553: PUSH
25554: FOR_TO
25555: IFFALSE 25672
// for _y = min_y to max_y do
25557: LD_ADDR_VAR 0 12
25561: PUSH
25562: DOUBLE
25563: LD_VAR 0 8
25567: DEC
25568: ST_TO_ADDR
25569: LD_VAR 0 10
25573: PUSH
25574: FOR_TO
25575: IFFALSE 25668
// begin if not ValidHex ( _x , _y ) then
25577: LD_VAR 0 11
25581: PPUSH
25582: LD_VAR 0 12
25586: PPUSH
25587: CALL_OW 488
25591: NOT
25592: IFFALSE 25596
// continue ;
25594: GO 25574
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25596: LD_VAR 0 11
25600: PPUSH
25601: LD_VAR 0 12
25605: PPUSH
25606: CALL_OW 351
25610: PUSH
25611: LD_VAR 0 11
25615: PPUSH
25616: LD_VAR 0 12
25620: PPUSH
25621: CALL_OW 554
25625: AND
25626: IFFALSE 25666
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25628: LD_ADDR_VAR 0 13
25632: PUSH
25633: LD_VAR 0 13
25637: PPUSH
25638: LD_VAR 0 13
25642: PUSH
25643: LD_INT 1
25645: PLUS
25646: PPUSH
25647: LD_VAR 0 11
25651: PUSH
25652: LD_VAR 0 12
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 2
25665: ST_TO_ADDR
// end ;
25666: GO 25574
25668: POP
25669: POP
25670: GO 25554
25672: POP
25673: POP
// if not list then
25674: LD_VAR 0 13
25678: NOT
25679: IFFALSE 25683
// exit ;
25681: GO 25754
// for i in list do
25683: LD_ADDR_VAR 0 6
25687: PUSH
25688: LD_VAR 0 13
25692: PUSH
25693: FOR_IN
25694: IFFALSE 25752
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_STRING M
25703: PUSH
25704: LD_VAR 0 6
25708: PUSH
25709: LD_INT 1
25711: ARRAY
25712: PUSH
25713: LD_VAR 0 6
25717: PUSH
25718: LD_INT 2
25720: ARRAY
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: PPUSH
25746: CALL_OW 447
25750: GO 25693
25752: POP
25753: POP
// end ;
25754: LD_VAR 0 5
25758: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25759: LD_EXP 85
25763: NOT
25764: IFFALSE 25814
25766: GO 25768
25768: DISABLE
// begin initHack := true ;
25769: LD_ADDR_EXP 85
25773: PUSH
25774: LD_INT 1
25776: ST_TO_ADDR
// hackTanks := [ ] ;
25777: LD_ADDR_EXP 86
25781: PUSH
25782: EMPTY
25783: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25784: LD_ADDR_EXP 87
25788: PUSH
25789: EMPTY
25790: ST_TO_ADDR
// hackLimit := 3 ;
25791: LD_ADDR_EXP 88
25795: PUSH
25796: LD_INT 3
25798: ST_TO_ADDR
// hackDist := 12 ;
25799: LD_ADDR_EXP 89
25803: PUSH
25804: LD_INT 12
25806: ST_TO_ADDR
// hackCounter := [ ] ;
25807: LD_ADDR_EXP 90
25811: PUSH
25812: EMPTY
25813: ST_TO_ADDR
// end ;
25814: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25815: LD_EXP 85
25819: PUSH
25820: LD_INT 34
25822: PUSH
25823: LD_EXP 97
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: AND
25837: IFFALSE 26092
25839: GO 25841
25841: DISABLE
25842: LD_INT 0
25844: PPUSH
25845: PPUSH
// begin enable ;
25846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25847: LD_ADDR_VAR 0 1
25851: PUSH
25852: LD_INT 34
25854: PUSH
25855: LD_EXP 97
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PPUSH
25864: CALL_OW 69
25868: PUSH
25869: FOR_IN
25870: IFFALSE 26090
// begin if not i in hackTanks then
25872: LD_VAR 0 1
25876: PUSH
25877: LD_EXP 86
25881: IN
25882: NOT
25883: IFFALSE 25966
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25885: LD_ADDR_EXP 86
25889: PUSH
25890: LD_EXP 86
25894: PPUSH
25895: LD_EXP 86
25899: PUSH
25900: LD_INT 1
25902: PLUS
25903: PPUSH
25904: LD_VAR 0 1
25908: PPUSH
25909: CALL_OW 1
25913: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25914: LD_ADDR_EXP 87
25918: PUSH
25919: LD_EXP 87
25923: PPUSH
25924: LD_EXP 87
25928: PUSH
25929: LD_INT 1
25931: PLUS
25932: PPUSH
25933: EMPTY
25934: PPUSH
25935: CALL_OW 1
25939: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25940: LD_ADDR_EXP 90
25944: PUSH
25945: LD_EXP 90
25949: PPUSH
25950: LD_EXP 90
25954: PUSH
25955: LD_INT 1
25957: PLUS
25958: PPUSH
25959: EMPTY
25960: PPUSH
25961: CALL_OW 1
25965: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 302
25975: NOT
25976: IFFALSE 25989
// begin HackUnlinkAll ( i ) ;
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL 26095 0 1
// continue ;
25987: GO 25869
// end ; HackCheckCapturedStatus ( i ) ;
25989: LD_VAR 0 1
25993: PPUSH
25994: CALL 26538 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25998: LD_ADDR_VAR 0 2
26002: PUSH
26003: LD_INT 81
26005: PUSH
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 255
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 33
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 91
26032: PUSH
26033: LD_VAR 0 1
26037: PUSH
26038: LD_EXP 89
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 50
26050: PUSH
26051: EMPTY
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: PPUSH
26060: CALL_OW 69
26064: ST_TO_ADDR
// if not tmp then
26065: LD_VAR 0 2
26069: NOT
26070: IFFALSE 26074
// continue ;
26072: GO 25869
// HackLink ( i , tmp ) ;
26074: LD_VAR 0 1
26078: PPUSH
26079: LD_VAR 0 2
26083: PPUSH
26084: CALL 26231 0 2
// end ;
26088: GO 25869
26090: POP
26091: POP
// end ;
26092: PPOPN 2
26094: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26095: LD_INT 0
26097: PPUSH
26098: PPUSH
26099: PPUSH
// if not hack in hackTanks then
26100: LD_VAR 0 1
26104: PUSH
26105: LD_EXP 86
26109: IN
26110: NOT
26111: IFFALSE 26115
// exit ;
26113: GO 26226
// index := GetElementIndex ( hackTanks , hack ) ;
26115: LD_ADDR_VAR 0 4
26119: PUSH
26120: LD_EXP 86
26124: PPUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL 33868 0 2
26134: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26135: LD_EXP 87
26139: PUSH
26140: LD_VAR 0 4
26144: ARRAY
26145: IFFALSE 26226
// begin for i in hackTanksCaptured [ index ] do
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: LD_EXP 87
26156: PUSH
26157: LD_VAR 0 4
26161: ARRAY
26162: PUSH
26163: FOR_IN
26164: IFFALSE 26190
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26166: LD_VAR 0 3
26170: PUSH
26171: LD_INT 1
26173: ARRAY
26174: PPUSH
26175: LD_VAR 0 3
26179: PUSH
26180: LD_INT 2
26182: ARRAY
26183: PPUSH
26184: CALL_OW 235
26188: GO 26163
26190: POP
26191: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26192: LD_ADDR_EXP 87
26196: PUSH
26197: LD_EXP 87
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: EMPTY
26208: PPUSH
26209: CALL_OW 1
26213: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL_OW 505
// end ; end ;
26226: LD_VAR 0 2
26230: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26231: LD_INT 0
26233: PPUSH
26234: PPUSH
26235: PPUSH
// if not hack in hackTanks or not vehicles then
26236: LD_VAR 0 1
26240: PUSH
26241: LD_EXP 86
26245: IN
26246: NOT
26247: PUSH
26248: LD_VAR 0 2
26252: NOT
26253: OR
26254: IFFALSE 26258
// exit ;
26256: GO 26533
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26258: LD_ADDR_VAR 0 2
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: LD_VAR 0 2
26272: PPUSH
26273: LD_INT 1
26275: PPUSH
26276: LD_INT 1
26278: PPUSH
26279: CALL 34518 0 4
26283: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26284: LD_ADDR_VAR 0 5
26288: PUSH
26289: LD_EXP 86
26293: PPUSH
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL 33868 0 2
26303: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26304: LD_EXP 87
26308: PUSH
26309: LD_VAR 0 5
26313: ARRAY
26314: PUSH
26315: LD_EXP 88
26319: LESS
26320: IFFALSE 26509
// begin for i := 1 to vehicles do
26322: LD_ADDR_VAR 0 4
26326: PUSH
26327: DOUBLE
26328: LD_INT 1
26330: DEC
26331: ST_TO_ADDR
26332: LD_VAR 0 2
26336: PUSH
26337: FOR_TO
26338: IFFALSE 26507
// begin if hackTanksCaptured [ index ] = hackLimit then
26340: LD_EXP 87
26344: PUSH
26345: LD_VAR 0 5
26349: ARRAY
26350: PUSH
26351: LD_EXP 88
26355: EQUAL
26356: IFFALSE 26360
// break ;
26358: GO 26507
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26360: LD_ADDR_EXP 90
26364: PUSH
26365: LD_EXP 90
26369: PPUSH
26370: LD_VAR 0 5
26374: PPUSH
26375: LD_EXP 90
26379: PUSH
26380: LD_VAR 0 5
26384: ARRAY
26385: PUSH
26386: LD_INT 1
26388: PLUS
26389: PPUSH
26390: CALL_OW 1
26394: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26395: LD_ADDR_EXP 87
26399: PUSH
26400: LD_EXP 87
26404: PPUSH
26405: LD_VAR 0 5
26409: PUSH
26410: LD_EXP 87
26414: PUSH
26415: LD_VAR 0 5
26419: ARRAY
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PPUSH
26429: LD_VAR 0 2
26433: PUSH
26434: LD_VAR 0 4
26438: ARRAY
26439: PUSH
26440: LD_VAR 0 2
26444: PUSH
26445: LD_VAR 0 4
26449: ARRAY
26450: PPUSH
26451: CALL_OW 255
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL 34083 0 3
26464: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26465: LD_VAR 0 2
26469: PUSH
26470: LD_VAR 0 4
26474: ARRAY
26475: PPUSH
26476: LD_VAR 0 1
26480: PPUSH
26481: CALL_OW 255
26485: PPUSH
26486: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26490: LD_VAR 0 2
26494: PUSH
26495: LD_VAR 0 4
26499: ARRAY
26500: PPUSH
26501: CALL_OW 141
// end ;
26505: GO 26337
26507: POP
26508: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_EXP 87
26518: PUSH
26519: LD_VAR 0 5
26523: ARRAY
26524: PUSH
26525: LD_INT 0
26527: PLUS
26528: PPUSH
26529: CALL_OW 505
// end ;
26533: LD_VAR 0 3
26537: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
26543: PPUSH
// if not hack in hackTanks then
26544: LD_VAR 0 1
26548: PUSH
26549: LD_EXP 86
26553: IN
26554: NOT
26555: IFFALSE 26559
// exit ;
26557: GO 26799
// index := GetElementIndex ( hackTanks , hack ) ;
26559: LD_ADDR_VAR 0 4
26563: PUSH
26564: LD_EXP 86
26568: PPUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL 33868 0 2
26578: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: DOUBLE
26585: LD_EXP 87
26589: PUSH
26590: LD_VAR 0 4
26594: ARRAY
26595: INC
26596: ST_TO_ADDR
26597: LD_INT 1
26599: PUSH
26600: FOR_DOWNTO
26601: IFFALSE 26773
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26603: LD_ADDR_VAR 0 5
26607: PUSH
26608: LD_EXP 87
26612: PUSH
26613: LD_VAR 0 4
26617: ARRAY
26618: PUSH
26619: LD_VAR 0 3
26623: ARRAY
26624: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26625: LD_VAR 0 5
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: PPUSH
26634: CALL_OW 302
26638: NOT
26639: PUSH
26640: LD_VAR 0 5
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: CALL_OW 255
26653: PUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 255
26663: NONEQUAL
26664: OR
26665: IFFALSE 26771
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26667: LD_VAR 0 5
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: CALL_OW 305
26680: PUSH
26681: LD_VAR 0 5
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: PPUSH
26690: CALL_OW 255
26694: PUSH
26695: LD_VAR 0 1
26699: PPUSH
26700: CALL_OW 255
26704: EQUAL
26705: AND
26706: IFFALSE 26730
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26708: LD_VAR 0 5
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 5
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26730: LD_ADDR_EXP 87
26734: PUSH
26735: LD_EXP 87
26739: PPUSH
26740: LD_VAR 0 4
26744: PPUSH
26745: LD_EXP 87
26749: PUSH
26750: LD_VAR 0 4
26754: ARRAY
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 3
26765: PPUSH
26766: CALL_OW 1
26770: ST_TO_ADDR
// end ; end ;
26771: GO 26600
26773: POP
26774: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26775: LD_VAR 0 1
26779: PPUSH
26780: LD_EXP 87
26784: PUSH
26785: LD_VAR 0 4
26789: ARRAY
26790: PUSH
26791: LD_INT 0
26793: PLUS
26794: PPUSH
26795: CALL_OW 505
// end ;
26799: LD_VAR 0 2
26803: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
// if not hack in hackTanks then
26810: LD_VAR 0 1
26814: PUSH
26815: LD_EXP 86
26819: IN
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26910
// index := GetElementIndex ( hackTanks , hack ) ;
26825: LD_ADDR_VAR 0 5
26829: PUSH
26830: LD_EXP 86
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL 33868 0 2
26844: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26845: LD_ADDR_VAR 0 4
26849: PUSH
26850: DOUBLE
26851: LD_INT 1
26853: DEC
26854: ST_TO_ADDR
26855: LD_EXP 87
26859: PUSH
26860: LD_VAR 0 5
26864: ARRAY
26865: PUSH
26866: FOR_TO
26867: IFFALSE 26908
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26869: LD_EXP 87
26873: PUSH
26874: LD_VAR 0 5
26878: ARRAY
26879: PUSH
26880: LD_VAR 0 4
26884: ARRAY
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PUSH
26890: LD_VAR 0 2
26894: EQUAL
26895: IFFALSE 26906
// KillUnit ( vehicle ) ;
26897: LD_VAR 0 2
26901: PPUSH
26902: CALL_OW 66
26906: GO 26866
26908: POP
26909: POP
// end ;
26910: LD_VAR 0 3
26914: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26915: LD_EXP 91
26919: NOT
26920: IFFALSE 26955
26922: GO 26924
26924: DISABLE
// begin initMiner := true ;
26925: LD_ADDR_EXP 91
26929: PUSH
26930: LD_INT 1
26932: ST_TO_ADDR
// minersList := [ ] ;
26933: LD_ADDR_EXP 92
26937: PUSH
26938: EMPTY
26939: ST_TO_ADDR
// minerMinesList := [ ] ;
26940: LD_ADDR_EXP 93
26944: PUSH
26945: EMPTY
26946: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26947: LD_ADDR_EXP 94
26951: PUSH
26952: LD_INT 5
26954: ST_TO_ADDR
// end ;
26955: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26956: LD_EXP 91
26960: PUSH
26961: LD_INT 34
26963: PUSH
26964: LD_EXP 102
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PPUSH
26973: CALL_OW 69
26977: AND
26978: IFFALSE 27441
26980: GO 26982
26982: DISABLE
26983: LD_INT 0
26985: PPUSH
26986: PPUSH
26987: PPUSH
26988: PPUSH
// begin enable ;
26989: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26990: LD_ADDR_VAR 0 1
26994: PUSH
26995: LD_INT 34
26997: PUSH
26998: LD_EXP 102
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PPUSH
27007: CALL_OW 69
27011: PUSH
27012: FOR_IN
27013: IFFALSE 27085
// begin if not i in minersList then
27015: LD_VAR 0 1
27019: PUSH
27020: LD_EXP 92
27024: IN
27025: NOT
27026: IFFALSE 27083
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27028: LD_ADDR_EXP 92
27032: PUSH
27033: LD_EXP 92
27037: PPUSH
27038: LD_EXP 92
27042: PUSH
27043: LD_INT 1
27045: PLUS
27046: PPUSH
27047: LD_VAR 0 1
27051: PPUSH
27052: CALL_OW 1
27056: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27057: LD_ADDR_EXP 93
27061: PUSH
27062: LD_EXP 93
27066: PPUSH
27067: LD_EXP 93
27071: PUSH
27072: LD_INT 1
27074: PLUS
27075: PPUSH
27076: EMPTY
27077: PPUSH
27078: CALL_OW 1
27082: ST_TO_ADDR
// end end ;
27083: GO 27012
27085: POP
27086: POP
// for i := minerMinesList downto 1 do
27087: LD_ADDR_VAR 0 1
27091: PUSH
27092: DOUBLE
27093: LD_EXP 93
27097: INC
27098: ST_TO_ADDR
27099: LD_INT 1
27101: PUSH
27102: FOR_DOWNTO
27103: IFFALSE 27439
// begin if IsLive ( minersList [ i ] ) then
27105: LD_EXP 92
27109: PUSH
27110: LD_VAR 0 1
27114: ARRAY
27115: PPUSH
27116: CALL_OW 300
27120: IFFALSE 27148
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27122: LD_EXP 92
27126: PUSH
27127: LD_VAR 0 1
27131: ARRAY
27132: PPUSH
27133: LD_EXP 93
27137: PUSH
27138: LD_VAR 0 1
27142: ARRAY
27143: PPUSH
27144: CALL_OW 505
// if not minerMinesList [ i ] then
27148: LD_EXP 93
27152: PUSH
27153: LD_VAR 0 1
27157: ARRAY
27158: NOT
27159: IFFALSE 27163
// continue ;
27161: GO 27102
// for j := minerMinesList [ i ] downto 1 do
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: DOUBLE
27169: LD_EXP 93
27173: PUSH
27174: LD_VAR 0 1
27178: ARRAY
27179: INC
27180: ST_TO_ADDR
27181: LD_INT 1
27183: PUSH
27184: FOR_DOWNTO
27185: IFFALSE 27435
// begin side := GetSide ( minersList [ i ] ) ;
27187: LD_ADDR_VAR 0 3
27191: PUSH
27192: LD_EXP 92
27196: PUSH
27197: LD_VAR 0 1
27201: ARRAY
27202: PPUSH
27203: CALL_OW 255
27207: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27208: LD_ADDR_VAR 0 4
27212: PUSH
27213: LD_EXP 93
27217: PUSH
27218: LD_VAR 0 1
27222: ARRAY
27223: PUSH
27224: LD_VAR 0 2
27228: ARRAY
27229: PUSH
27230: LD_INT 1
27232: ARRAY
27233: PPUSH
27234: LD_EXP 93
27238: PUSH
27239: LD_VAR 0 1
27243: ARRAY
27244: PUSH
27245: LD_VAR 0 2
27249: ARRAY
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: PPUSH
27255: CALL_OW 428
27259: ST_TO_ADDR
// if not tmp then
27260: LD_VAR 0 4
27264: NOT
27265: IFFALSE 27269
// continue ;
27267: GO 27184
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27269: LD_VAR 0 4
27273: PUSH
27274: LD_INT 81
27276: PUSH
27277: LD_VAR 0 3
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 69
27290: IN
27291: PUSH
27292: LD_EXP 93
27296: PUSH
27297: LD_VAR 0 1
27301: ARRAY
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: PUSH
27309: LD_INT 1
27311: ARRAY
27312: PPUSH
27313: LD_EXP 93
27317: PUSH
27318: LD_VAR 0 1
27322: ARRAY
27323: PUSH
27324: LD_VAR 0 2
27328: ARRAY
27329: PUSH
27330: LD_INT 2
27332: ARRAY
27333: PPUSH
27334: CALL_OW 458
27338: AND
27339: IFFALSE 27433
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27341: LD_EXP 93
27345: PUSH
27346: LD_VAR 0 1
27350: ARRAY
27351: PUSH
27352: LD_VAR 0 2
27356: ARRAY
27357: PUSH
27358: LD_INT 1
27360: ARRAY
27361: PPUSH
27362: LD_EXP 93
27366: PUSH
27367: LD_VAR 0 1
27371: ARRAY
27372: PUSH
27373: LD_VAR 0 2
27377: ARRAY
27378: PUSH
27379: LD_INT 2
27381: ARRAY
27382: PPUSH
27383: LD_VAR 0 3
27387: PPUSH
27388: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27392: LD_ADDR_EXP 93
27396: PUSH
27397: LD_EXP 93
27401: PPUSH
27402: LD_VAR 0 1
27406: PPUSH
27407: LD_EXP 93
27411: PUSH
27412: LD_VAR 0 1
27416: ARRAY
27417: PPUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: CALL_OW 3
27427: PPUSH
27428: CALL_OW 1
27432: ST_TO_ADDR
// end ; end ;
27433: GO 27184
27435: POP
27436: POP
// end ;
27437: GO 27102
27439: POP
27440: POP
// end ;
27441: PPOPN 4
27443: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
// result := false ;
27448: LD_ADDR_VAR 0 4
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27456: LD_VAR 0 1
27460: PPUSH
27461: CALL_OW 264
27465: PUSH
27466: LD_EXP 102
27470: EQUAL
27471: NOT
27472: IFFALSE 27476
// exit ;
27474: GO 27716
// index := GetElementIndex ( minersList , unit ) ;
27476: LD_ADDR_VAR 0 5
27480: PUSH
27481: LD_EXP 92
27485: PPUSH
27486: LD_VAR 0 1
27490: PPUSH
27491: CALL 33868 0 2
27495: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27496: LD_EXP 93
27500: PUSH
27501: LD_VAR 0 5
27505: ARRAY
27506: PUSH
27507: LD_EXP 94
27511: GREATEREQUAL
27512: IFFALSE 27516
// exit ;
27514: GO 27716
// ComMoveXY ( unit , x , y ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_VAR 0 2
27525: PPUSH
27526: LD_VAR 0 3
27530: PPUSH
27531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27535: LD_INT 35
27537: PPUSH
27538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_VAR 0 2
27551: PPUSH
27552: LD_VAR 0 3
27556: PPUSH
27557: CALL 64640 0 3
27561: NOT
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 314
27572: AND
27573: IFFALSE 27577
// exit ;
27575: GO 27716
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27577: LD_VAR 0 2
27581: PPUSH
27582: LD_VAR 0 3
27586: PPUSH
27587: CALL_OW 428
27591: PUSH
27592: LD_VAR 0 1
27596: EQUAL
27597: PUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 314
27607: NOT
27608: AND
27609: IFFALSE 27535
// PlaySoundXY ( x , y , PlantMine ) ;
27611: LD_VAR 0 2
27615: PPUSH
27616: LD_VAR 0 3
27620: PPUSH
27621: LD_STRING PlantMine
27623: PPUSH
27624: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27628: LD_VAR 0 2
27632: PPUSH
27633: LD_VAR 0 3
27637: PPUSH
27638: LD_VAR 0 1
27642: PPUSH
27643: CALL_OW 255
27647: PPUSH
27648: LD_INT 0
27650: PPUSH
27651: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27655: LD_ADDR_EXP 93
27659: PUSH
27660: LD_EXP 93
27664: PPUSH
27665: LD_VAR 0 5
27669: PUSH
27670: LD_EXP 93
27674: PUSH
27675: LD_VAR 0 5
27679: ARRAY
27680: PUSH
27681: LD_INT 1
27683: PLUS
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_VAR 0 3
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL 34083 0 3
27707: ST_TO_ADDR
// result := true ;
27708: LD_ADDR_VAR 0 4
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// end ;
27716: LD_VAR 0 4
27720: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
27725: PPUSH
// if not unit in minersList then
27726: LD_VAR 0 1
27730: PUSH
27731: LD_EXP 92
27735: IN
27736: NOT
27737: IFFALSE 27741
// exit ;
27739: GO 28133
// index := GetElementIndex ( minersList , unit ) ;
27741: LD_ADDR_VAR 0 6
27745: PUSH
27746: LD_EXP 92
27750: PPUSH
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL 33868 0 2
27760: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27761: LD_ADDR_VAR 0 5
27765: PUSH
27766: DOUBLE
27767: LD_EXP 93
27771: PUSH
27772: LD_VAR 0 6
27776: ARRAY
27777: INC
27778: ST_TO_ADDR
27779: LD_INT 1
27781: PUSH
27782: FOR_DOWNTO
27783: IFFALSE 27944
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27785: LD_EXP 93
27789: PUSH
27790: LD_VAR 0 6
27794: ARRAY
27795: PUSH
27796: LD_VAR 0 5
27800: ARRAY
27801: PUSH
27802: LD_INT 1
27804: ARRAY
27805: PUSH
27806: LD_VAR 0 2
27810: EQUAL
27811: PUSH
27812: LD_EXP 93
27816: PUSH
27817: LD_VAR 0 6
27821: ARRAY
27822: PUSH
27823: LD_VAR 0 5
27827: ARRAY
27828: PUSH
27829: LD_INT 2
27831: ARRAY
27832: PUSH
27833: LD_VAR 0 3
27837: EQUAL
27838: AND
27839: IFFALSE 27942
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27841: LD_EXP 93
27845: PUSH
27846: LD_VAR 0 6
27850: ARRAY
27851: PUSH
27852: LD_VAR 0 5
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PPUSH
27862: LD_EXP 93
27866: PUSH
27867: LD_VAR 0 6
27871: ARRAY
27872: PUSH
27873: LD_VAR 0 5
27877: ARRAY
27878: PUSH
27879: LD_INT 2
27881: ARRAY
27882: PPUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 255
27892: PPUSH
27893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27897: LD_ADDR_EXP 93
27901: PUSH
27902: LD_EXP 93
27906: PPUSH
27907: LD_VAR 0 6
27911: PPUSH
27912: LD_EXP 93
27916: PUSH
27917: LD_VAR 0 6
27921: ARRAY
27922: PPUSH
27923: LD_VAR 0 5
27927: PPUSH
27928: CALL_OW 3
27932: PPUSH
27933: CALL_OW 1
27937: ST_TO_ADDR
// exit ;
27938: POP
27939: POP
27940: GO 28133
// end ; end ;
27942: GO 27782
27944: POP
27945: POP
// for i := minerMinesList [ index ] downto 1 do
27946: LD_ADDR_VAR 0 5
27950: PUSH
27951: DOUBLE
27952: LD_EXP 93
27956: PUSH
27957: LD_VAR 0 6
27961: ARRAY
27962: INC
27963: ST_TO_ADDR
27964: LD_INT 1
27966: PUSH
27967: FOR_DOWNTO
27968: IFFALSE 28131
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27970: LD_EXP 93
27974: PUSH
27975: LD_VAR 0 6
27979: ARRAY
27980: PUSH
27981: LD_VAR 0 5
27985: ARRAY
27986: PUSH
27987: LD_INT 1
27989: ARRAY
27990: PPUSH
27991: LD_EXP 93
27995: PUSH
27996: LD_VAR 0 6
28000: ARRAY
28001: PUSH
28002: LD_VAR 0 5
28006: ARRAY
28007: PUSH
28008: LD_INT 2
28010: ARRAY
28011: PPUSH
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 298
28026: PUSH
28027: LD_INT 6
28029: LESS
28030: IFFALSE 28129
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28032: LD_EXP 93
28036: PUSH
28037: LD_VAR 0 6
28041: ARRAY
28042: PUSH
28043: LD_VAR 0 5
28047: ARRAY
28048: PUSH
28049: LD_INT 1
28051: ARRAY
28052: PPUSH
28053: LD_EXP 93
28057: PUSH
28058: LD_VAR 0 6
28062: ARRAY
28063: PUSH
28064: LD_VAR 0 5
28068: ARRAY
28069: PUSH
28070: LD_INT 2
28072: ARRAY
28073: PPUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 255
28083: PPUSH
28084: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28088: LD_ADDR_EXP 93
28092: PUSH
28093: LD_EXP 93
28097: PPUSH
28098: LD_VAR 0 6
28102: PPUSH
28103: LD_EXP 93
28107: PUSH
28108: LD_VAR 0 6
28112: ARRAY
28113: PPUSH
28114: LD_VAR 0 5
28118: PPUSH
28119: CALL_OW 3
28123: PPUSH
28124: CALL_OW 1
28128: ST_TO_ADDR
// end ; end ;
28129: GO 27967
28131: POP
28132: POP
// end ;
28133: LD_VAR 0 4
28137: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
28145: PPUSH
28146: PPUSH
28147: PPUSH
28148: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 264
28158: PUSH
28159: LD_EXP 102
28163: EQUAL
28164: NOT
28165: PUSH
28166: LD_VAR 0 1
28170: PUSH
28171: LD_EXP 92
28175: IN
28176: NOT
28177: OR
28178: IFFALSE 28182
// exit ;
28180: GO 28504
// index := GetElementIndex ( minersList , unit ) ;
28182: LD_ADDR_VAR 0 6
28186: PUSH
28187: LD_EXP 92
28191: PPUSH
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL 33868 0 2
28201: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28202: LD_ADDR_VAR 0 8
28206: PUSH
28207: LD_EXP 94
28211: PUSH
28212: LD_EXP 93
28216: PUSH
28217: LD_VAR 0 6
28221: ARRAY
28222: MINUS
28223: ST_TO_ADDR
// if not minesFreeAmount then
28224: LD_VAR 0 8
28228: NOT
28229: IFFALSE 28233
// exit ;
28231: GO 28504
// tmp := [ ] ;
28233: LD_ADDR_VAR 0 7
28237: PUSH
28238: EMPTY
28239: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28240: LD_ADDR_VAR 0 5
28244: PUSH
28245: DOUBLE
28246: LD_INT 1
28248: DEC
28249: ST_TO_ADDR
28250: LD_VAR 0 8
28254: PUSH
28255: FOR_TO
28256: IFFALSE 28451
// begin _d := rand ( 0 , 5 ) ;
28258: LD_ADDR_VAR 0 11
28262: PUSH
28263: LD_INT 0
28265: PPUSH
28266: LD_INT 5
28268: PPUSH
28269: CALL_OW 12
28273: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28274: LD_ADDR_VAR 0 12
28278: PUSH
28279: LD_INT 2
28281: PPUSH
28282: LD_INT 6
28284: PPUSH
28285: CALL_OW 12
28289: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28290: LD_ADDR_VAR 0 9
28294: PUSH
28295: LD_VAR 0 2
28299: PPUSH
28300: LD_VAR 0 11
28304: PPUSH
28305: LD_VAR 0 12
28309: PPUSH
28310: CALL_OW 272
28314: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28315: LD_ADDR_VAR 0 10
28319: PUSH
28320: LD_VAR 0 3
28324: PPUSH
28325: LD_VAR 0 11
28329: PPUSH
28330: LD_VAR 0 12
28334: PPUSH
28335: CALL_OW 273
28339: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28340: LD_VAR 0 9
28344: PPUSH
28345: LD_VAR 0 10
28349: PPUSH
28350: CALL_OW 488
28354: PUSH
28355: LD_VAR 0 9
28359: PUSH
28360: LD_VAR 0 10
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_VAR 0 7
28373: IN
28374: NOT
28375: AND
28376: PUSH
28377: LD_VAR 0 9
28381: PPUSH
28382: LD_VAR 0 10
28386: PPUSH
28387: CALL_OW 458
28391: NOT
28392: AND
28393: IFFALSE 28435
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28395: LD_ADDR_VAR 0 7
28399: PUSH
28400: LD_VAR 0 7
28404: PPUSH
28405: LD_VAR 0 7
28409: PUSH
28410: LD_INT 1
28412: PLUS
28413: PPUSH
28414: LD_VAR 0 9
28418: PUSH
28419: LD_VAR 0 10
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PPUSH
28428: CALL_OW 1
28432: ST_TO_ADDR
28433: GO 28449
// i := i - 1 ;
28435: LD_ADDR_VAR 0 5
28439: PUSH
28440: LD_VAR 0 5
28444: PUSH
28445: LD_INT 1
28447: MINUS
28448: ST_TO_ADDR
// end ;
28449: GO 28255
28451: POP
28452: POP
// for i in tmp do
28453: LD_ADDR_VAR 0 5
28457: PUSH
28458: LD_VAR 0 7
28462: PUSH
28463: FOR_IN
28464: IFFALSE 28502
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28466: LD_VAR 0 1
28470: PPUSH
28471: LD_VAR 0 5
28475: PUSH
28476: LD_INT 1
28478: ARRAY
28479: PPUSH
28480: LD_VAR 0 5
28484: PUSH
28485: LD_INT 2
28487: ARRAY
28488: PPUSH
28489: CALL 27444 0 3
28493: NOT
28494: IFFALSE 28500
// exit ;
28496: POP
28497: POP
28498: GO 28504
28500: GO 28463
28502: POP
28503: POP
// end ;
28504: LD_VAR 0 4
28508: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
// if not GetClass ( unit ) = class_sniper then
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 257
28527: PUSH
28528: LD_INT 5
28530: EQUAL
28531: NOT
28532: IFFALSE 28536
// exit ;
28534: GO 28924
// dist := 8 ;
28536: LD_ADDR_VAR 0 5
28540: PUSH
28541: LD_INT 8
28543: ST_TO_ADDR
// viewRange := 12 ;
28544: LD_ADDR_VAR 0 7
28548: PUSH
28549: LD_INT 12
28551: ST_TO_ADDR
// side := GetSide ( unit ) ;
28552: LD_ADDR_VAR 0 6
28556: PUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 255
28566: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28567: LD_INT 61
28569: PPUSH
28570: LD_VAR 0 6
28574: PPUSH
28575: CALL_OW 321
28579: PUSH
28580: LD_INT 2
28582: EQUAL
28583: IFFALSE 28593
// viewRange := 16 ;
28585: LD_ADDR_VAR 0 7
28589: PUSH
28590: LD_INT 16
28592: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28593: LD_VAR 0 1
28597: PPUSH
28598: LD_VAR 0 2
28602: PPUSH
28603: LD_VAR 0 3
28607: PPUSH
28608: CALL_OW 297
28612: PUSH
28613: LD_VAR 0 5
28617: GREATER
28618: IFFALSE 28697
// begin ComMoveXY ( unit , x , y ) ;
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_VAR 0 2
28629: PPUSH
28630: LD_VAR 0 3
28634: PPUSH
28635: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28639: LD_INT 35
28641: PPUSH
28642: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL 64640 0 3
28665: NOT
28666: IFFALSE 28670
// exit ;
28668: GO 28924
// until GetDistUnitXY ( unit , x , y ) < dist ;
28670: LD_VAR 0 1
28674: PPUSH
28675: LD_VAR 0 2
28679: PPUSH
28680: LD_VAR 0 3
28684: PPUSH
28685: CALL_OW 297
28689: PUSH
28690: LD_VAR 0 5
28694: LESS
28695: IFFALSE 28639
// end ; ComTurnXY ( unit , x , y ) ;
28697: LD_VAR 0 1
28701: PPUSH
28702: LD_VAR 0 2
28706: PPUSH
28707: LD_VAR 0 3
28711: PPUSH
28712: CALL_OW 118
// wait ( 5 ) ;
28716: LD_INT 5
28718: PPUSH
28719: CALL_OW 67
// _d := GetDir ( unit ) ;
28723: LD_ADDR_VAR 0 10
28727: PUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 254
28737: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28738: LD_ADDR_VAR 0 8
28742: PUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL_OW 250
28752: PPUSH
28753: LD_VAR 0 10
28757: PPUSH
28758: LD_VAR 0 5
28762: PPUSH
28763: CALL_OW 272
28767: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28768: LD_ADDR_VAR 0 9
28772: PUSH
28773: LD_VAR 0 1
28777: PPUSH
28778: CALL_OW 251
28782: PPUSH
28783: LD_VAR 0 10
28787: PPUSH
28788: LD_VAR 0 5
28792: PPUSH
28793: CALL_OW 273
28797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28798: LD_VAR 0 8
28802: PPUSH
28803: LD_VAR 0 9
28807: PPUSH
28808: CALL_OW 488
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 28924
// ComAnimCustom ( unit , 1 ) ;
28817: LD_VAR 0 1
28821: PPUSH
28822: LD_INT 1
28824: PPUSH
28825: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28829: LD_VAR 0 8
28833: PPUSH
28834: LD_VAR 0 9
28838: PPUSH
28839: LD_VAR 0 6
28843: PPUSH
28844: LD_VAR 0 7
28848: PPUSH
28849: CALL_OW 330
// repeat wait ( 1 ) ;
28853: LD_INT 1
28855: PPUSH
28856: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 316
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 314
28879: OR
28880: PUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 302
28890: NOT
28891: OR
28892: PUSH
28893: LD_VAR 0 1
28897: PPUSH
28898: CALL_OW 301
28902: OR
28903: IFFALSE 28853
// RemoveSeeing ( _x , _y , side ) ;
28905: LD_VAR 0 8
28909: PPUSH
28910: LD_VAR 0 9
28914: PPUSH
28915: LD_VAR 0 6
28919: PPUSH
28920: CALL_OW 331
// end ; end_of_file
28924: LD_VAR 0 4
28928: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
28929: LD_INT 0
28931: PPUSH
// ar_miner := 81 ;
28932: LD_ADDR_EXP 102
28936: PUSH
28937: LD_INT 81
28939: ST_TO_ADDR
// ar_crane := 88 ;
28940: LD_ADDR_EXP 101
28944: PUSH
28945: LD_INT 88
28947: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28948: LD_ADDR_EXP 96
28952: PUSH
28953: LD_INT 89
28955: ST_TO_ADDR
// us_hack := 99 ;
28956: LD_ADDR_EXP 97
28960: PUSH
28961: LD_INT 99
28963: ST_TO_ADDR
// us_artillery := 97 ;
28964: LD_ADDR_EXP 98
28968: PUSH
28969: LD_INT 97
28971: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28972: LD_ADDR_EXP 99
28976: PUSH
28977: LD_INT 91
28979: ST_TO_ADDR
// ar_mortar := 92 ;
28980: LD_ADDR_EXP 100
28984: PUSH
28985: LD_INT 92
28987: ST_TO_ADDR
// ru_radar := 98 ;
28988: LD_ADDR_EXP 95
28992: PUSH
28993: LD_INT 98
28995: ST_TO_ADDR
// tech_Artillery := 80 ;
28996: LD_ADDR_EXP 103
29000: PUSH
29001: LD_INT 80
29003: ST_TO_ADDR
// tech_RadMat := 81 ;
29004: LD_ADDR_EXP 104
29008: PUSH
29009: LD_INT 81
29011: ST_TO_ADDR
// tech_BasicTools := 82 ;
29012: LD_ADDR_EXP 105
29016: PUSH
29017: LD_INT 82
29019: ST_TO_ADDR
// tech_Cargo := 83 ;
29020: LD_ADDR_EXP 106
29024: PUSH
29025: LD_INT 83
29027: ST_TO_ADDR
// tech_Track := 84 ;
29028: LD_ADDR_EXP 107
29032: PUSH
29033: LD_INT 84
29035: ST_TO_ADDR
// tech_Crane := 85 ;
29036: LD_ADDR_EXP 108
29040: PUSH
29041: LD_INT 85
29043: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29044: LD_ADDR_EXP 109
29048: PUSH
29049: LD_INT 86
29051: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29052: LD_ADDR_EXP 110
29056: PUSH
29057: LD_INT 87
29059: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29060: LD_ADDR_EXP 111
29064: PUSH
29065: LD_INT 88
29067: ST_TO_ADDR
// class_mastodont := 31 ;
29068: LD_ADDR_EXP 112
29072: PUSH
29073: LD_INT 31
29075: ST_TO_ADDR
// class_horse := 21 ;
29076: LD_ADDR_EXP 113
29080: PUSH
29081: LD_INT 21
29083: ST_TO_ADDR
// end ;
29084: LD_VAR 0 1
29088: RET
// every 1 do
29089: GO 29091
29091: DISABLE
// InitGlobalVariables ; end_of_file
29092: CALL 28929 0 0
29096: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
// if exist_mode then
29101: LD_VAR 0 2
29105: IFFALSE 29130
// unit := CreateCharacter ( prefix & ident ) else
29107: LD_ADDR_VAR 0 5
29111: PUSH
29112: LD_VAR 0 3
29116: PUSH
29117: LD_VAR 0 1
29121: STR
29122: PPUSH
29123: CALL_OW 34
29127: ST_TO_ADDR
29128: GO 29145
// unit := NewCharacter ( ident ) ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 1
29139: PPUSH
29140: CALL_OW 25
29144: ST_TO_ADDR
// result := unit ;
29145: LD_ADDR_VAR 0 4
29149: PUSH
29150: LD_VAR 0 5
29154: ST_TO_ADDR
// end ;
29155: LD_VAR 0 4
29159: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29160: LD_INT 0
29162: PPUSH
29163: PPUSH
// if not side or not nation then
29164: LD_VAR 0 1
29168: NOT
29169: PUSH
29170: LD_VAR 0 2
29174: NOT
29175: OR
29176: IFFALSE 29180
// exit ;
29178: GO 29948
// case nation of nation_american :
29180: LD_VAR 0 2
29184: PUSH
29185: LD_INT 1
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29407
29193: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29194: LD_ADDR_VAR 0 4
29198: PUSH
29199: LD_INT 35
29201: PUSH
29202: LD_INT 45
29204: PUSH
29205: LD_INT 46
29207: PUSH
29208: LD_INT 47
29210: PUSH
29211: LD_INT 82
29213: PUSH
29214: LD_INT 83
29216: PUSH
29217: LD_INT 84
29219: PUSH
29220: LD_INT 85
29222: PUSH
29223: LD_INT 86
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 6
29234: PUSH
29235: LD_INT 15
29237: PUSH
29238: LD_INT 16
29240: PUSH
29241: LD_INT 7
29243: PUSH
29244: LD_INT 12
29246: PUSH
29247: LD_INT 13
29249: PUSH
29250: LD_INT 10
29252: PUSH
29253: LD_INT 14
29255: PUSH
29256: LD_INT 20
29258: PUSH
29259: LD_INT 21
29261: PUSH
29262: LD_INT 22
29264: PUSH
29265: LD_INT 25
29267: PUSH
29268: LD_INT 32
29270: PUSH
29271: LD_INT 27
29273: PUSH
29274: LD_INT 36
29276: PUSH
29277: LD_INT 69
29279: PUSH
29280: LD_INT 39
29282: PUSH
29283: LD_INT 34
29285: PUSH
29286: LD_INT 40
29288: PUSH
29289: LD_INT 48
29291: PUSH
29292: LD_INT 49
29294: PUSH
29295: LD_INT 50
29297: PUSH
29298: LD_INT 51
29300: PUSH
29301: LD_INT 52
29303: PUSH
29304: LD_INT 53
29306: PUSH
29307: LD_INT 54
29309: PUSH
29310: LD_INT 55
29312: PUSH
29313: LD_INT 56
29315: PUSH
29316: LD_INT 57
29318: PUSH
29319: LD_INT 58
29321: PUSH
29322: LD_INT 59
29324: PUSH
29325: LD_INT 60
29327: PUSH
29328: LD_INT 61
29330: PUSH
29331: LD_INT 62
29333: PUSH
29334: LD_INT 80
29336: PUSH
29337: LD_INT 82
29339: PUSH
29340: LD_INT 83
29342: PUSH
29343: LD_INT 84
29345: PUSH
29346: LD_INT 85
29348: PUSH
29349: LD_INT 86
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
29405: GO 29872
29407: LD_INT 2
29409: DOUBLE
29410: EQUAL
29411: IFTRUE 29415
29413: GO 29641
29415: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29416: LD_ADDR_VAR 0 4
29420: PUSH
29421: LD_INT 35
29423: PUSH
29424: LD_INT 45
29426: PUSH
29427: LD_INT 46
29429: PUSH
29430: LD_INT 47
29432: PUSH
29433: LD_INT 82
29435: PUSH
29436: LD_INT 83
29438: PUSH
29439: LD_INT 84
29441: PUSH
29442: LD_INT 85
29444: PUSH
29445: LD_INT 87
29447: PUSH
29448: LD_INT 70
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 11
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: LD_INT 5
29465: PUSH
29466: LD_INT 6
29468: PUSH
29469: LD_INT 15
29471: PUSH
29472: LD_INT 18
29474: PUSH
29475: LD_INT 7
29477: PUSH
29478: LD_INT 17
29480: PUSH
29481: LD_INT 8
29483: PUSH
29484: LD_INT 20
29486: PUSH
29487: LD_INT 21
29489: PUSH
29490: LD_INT 22
29492: PUSH
29493: LD_INT 72
29495: PUSH
29496: LD_INT 26
29498: PUSH
29499: LD_INT 69
29501: PUSH
29502: LD_INT 39
29504: PUSH
29505: LD_INT 40
29507: PUSH
29508: LD_INT 41
29510: PUSH
29511: LD_INT 42
29513: PUSH
29514: LD_INT 43
29516: PUSH
29517: LD_INT 48
29519: PUSH
29520: LD_INT 49
29522: PUSH
29523: LD_INT 50
29525: PUSH
29526: LD_INT 51
29528: PUSH
29529: LD_INT 52
29531: PUSH
29532: LD_INT 53
29534: PUSH
29535: LD_INT 54
29537: PUSH
29538: LD_INT 55
29540: PUSH
29541: LD_INT 56
29543: PUSH
29544: LD_INT 60
29546: PUSH
29547: LD_INT 61
29549: PUSH
29550: LD_INT 62
29552: PUSH
29553: LD_INT 66
29555: PUSH
29556: LD_INT 67
29558: PUSH
29559: LD_INT 68
29561: PUSH
29562: LD_INT 81
29564: PUSH
29565: LD_INT 82
29567: PUSH
29568: LD_INT 83
29570: PUSH
29571: LD_INT 84
29573: PUSH
29574: LD_INT 85
29576: PUSH
29577: LD_INT 87
29579: PUSH
29580: LD_INT 88
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: ST_TO_ADDR
29639: GO 29872
29641: LD_INT 3
29643: DOUBLE
29644: EQUAL
29645: IFTRUE 29649
29647: GO 29871
29649: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29650: LD_ADDR_VAR 0 4
29654: PUSH
29655: LD_INT 46
29657: PUSH
29658: LD_INT 47
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 82
29669: PUSH
29670: LD_INT 83
29672: PUSH
29673: LD_INT 84
29675: PUSH
29676: LD_INT 85
29678: PUSH
29679: LD_INT 86
29681: PUSH
29682: LD_INT 11
29684: PUSH
29685: LD_INT 9
29687: PUSH
29688: LD_INT 20
29690: PUSH
29691: LD_INT 19
29693: PUSH
29694: LD_INT 21
29696: PUSH
29697: LD_INT 24
29699: PUSH
29700: LD_INT 22
29702: PUSH
29703: LD_INT 25
29705: PUSH
29706: LD_INT 28
29708: PUSH
29709: LD_INT 29
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 31
29717: PUSH
29718: LD_INT 37
29720: PUSH
29721: LD_INT 38
29723: PUSH
29724: LD_INT 32
29726: PUSH
29727: LD_INT 27
29729: PUSH
29730: LD_INT 33
29732: PUSH
29733: LD_INT 69
29735: PUSH
29736: LD_INT 39
29738: PUSH
29739: LD_INT 34
29741: PUSH
29742: LD_INT 40
29744: PUSH
29745: LD_INT 71
29747: PUSH
29748: LD_INT 23
29750: PUSH
29751: LD_INT 44
29753: PUSH
29754: LD_INT 48
29756: PUSH
29757: LD_INT 49
29759: PUSH
29760: LD_INT 50
29762: PUSH
29763: LD_INT 51
29765: PUSH
29766: LD_INT 52
29768: PUSH
29769: LD_INT 53
29771: PUSH
29772: LD_INT 54
29774: PUSH
29775: LD_INT 55
29777: PUSH
29778: LD_INT 56
29780: PUSH
29781: LD_INT 57
29783: PUSH
29784: LD_INT 58
29786: PUSH
29787: LD_INT 59
29789: PUSH
29790: LD_INT 63
29792: PUSH
29793: LD_INT 64
29795: PUSH
29796: LD_INT 65
29798: PUSH
29799: LD_INT 82
29801: PUSH
29802: LD_INT 83
29804: PUSH
29805: LD_INT 84
29807: PUSH
29808: LD_INT 85
29810: PUSH
29811: LD_INT 86
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: ST_TO_ADDR
29869: GO 29872
29871: POP
// if state > - 1 and state < 3 then
29872: LD_VAR 0 3
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: GREATER
29881: PUSH
29882: LD_VAR 0 3
29886: PUSH
29887: LD_INT 3
29889: LESS
29890: AND
29891: IFFALSE 29948
// for i in result do
29893: LD_ADDR_VAR 0 5
29897: PUSH
29898: LD_VAR 0 4
29902: PUSH
29903: FOR_IN
29904: IFFALSE 29946
// if GetTech ( i , side ) <> state then
29906: LD_VAR 0 5
29910: PPUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 321
29920: PUSH
29921: LD_VAR 0 3
29925: NONEQUAL
29926: IFFALSE 29944
// result := result diff i ;
29928: LD_ADDR_VAR 0 4
29932: PUSH
29933: LD_VAR 0 4
29937: PUSH
29938: LD_VAR 0 5
29942: DIFF
29943: ST_TO_ADDR
29944: GO 29903
29946: POP
29947: POP
// end ;
29948: LD_VAR 0 4
29952: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// result := true ;
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: LD_INT 1
29965: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29966: LD_ADDR_VAR 0 5
29970: PUSH
29971: LD_VAR 0 2
29975: PPUSH
29976: CALL_OW 480
29980: ST_TO_ADDR
// if not tmp then
29981: LD_VAR 0 5
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30039
// for i in tmp do
29990: LD_ADDR_VAR 0 4
29994: PUSH
29995: LD_VAR 0 5
29999: PUSH
30000: FOR_IN
30001: IFFALSE 30037
// if GetTech ( i , side ) <> state_researched then
30003: LD_VAR 0 4
30007: PPUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: CALL_OW 321
30017: PUSH
30018: LD_INT 2
30020: NONEQUAL
30021: IFFALSE 30035
// begin result := false ;
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 0
30030: ST_TO_ADDR
// exit ;
30031: POP
30032: POP
30033: GO 30039
// end ;
30035: GO 30000
30037: POP
30038: POP
// end ;
30039: LD_VAR 0 3
30043: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30044: LD_INT 0
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30059: LD_VAR 0 1
30063: NOT
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 257
30074: PUSH
30075: LD_INT 9
30077: NONEQUAL
30078: OR
30079: IFFALSE 30083
// exit ;
30081: GO 30656
// side := GetSide ( unit ) ;
30083: LD_ADDR_VAR 0 9
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 255
30097: ST_TO_ADDR
// tech_space := tech_spacanom ;
30098: LD_ADDR_VAR 0 12
30102: PUSH
30103: LD_INT 29
30105: ST_TO_ADDR
// tech_time := tech_taurad ;
30106: LD_ADDR_VAR 0 13
30110: PUSH
30111: LD_INT 28
30113: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30114: LD_ADDR_VAR 0 11
30118: PUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 310
30128: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30129: LD_VAR 0 11
30133: PPUSH
30134: CALL_OW 247
30138: PUSH
30139: LD_INT 2
30141: EQUAL
30142: IFFALSE 30146
// exit ;
30144: GO 30656
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30146: LD_ADDR_VAR 0 8
30150: PUSH
30151: LD_INT 81
30153: PUSH
30154: LD_VAR 0 9
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: LD_INT 21
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 69
30188: ST_TO_ADDR
// if not tmp then
30189: LD_VAR 0 8
30193: NOT
30194: IFFALSE 30198
// exit ;
30196: GO 30656
// if in_unit then
30198: LD_VAR 0 11
30202: IFFALSE 30226
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30204: LD_ADDR_VAR 0 10
30208: PUSH
30209: LD_VAR 0 8
30213: PPUSH
30214: LD_VAR 0 11
30218: PPUSH
30219: CALL_OW 74
30223: ST_TO_ADDR
30224: GO 30246
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30226: LD_ADDR_VAR 0 10
30230: PUSH
30231: LD_VAR 0 8
30235: PPUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 74
30245: ST_TO_ADDR
// if not enemy then
30246: LD_VAR 0 10
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30656
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30255: LD_VAR 0 11
30259: PUSH
30260: LD_VAR 0 11
30264: PPUSH
30265: LD_VAR 0 10
30269: PPUSH
30270: CALL_OW 296
30274: PUSH
30275: LD_INT 13
30277: GREATER
30278: AND
30279: PUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: LD_VAR 0 10
30289: PPUSH
30290: CALL_OW 296
30294: PUSH
30295: LD_INT 12
30297: GREATER
30298: OR
30299: IFFALSE 30303
// exit ;
30301: GO 30656
// missile := [ 1 ] ;
30303: LD_ADDR_VAR 0 14
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30314: LD_VAR 0 9
30318: PPUSH
30319: LD_VAR 0 12
30323: PPUSH
30324: CALL_OW 325
30328: IFFALSE 30357
// missile := Insert ( missile , missile + 1 , 2 ) ;
30330: LD_ADDR_VAR 0 14
30334: PUSH
30335: LD_VAR 0 14
30339: PPUSH
30340: LD_VAR 0 14
30344: PUSH
30345: LD_INT 1
30347: PLUS
30348: PPUSH
30349: LD_INT 2
30351: PPUSH
30352: CALL_OW 2
30356: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30357: LD_VAR 0 9
30361: PPUSH
30362: LD_VAR 0 13
30366: PPUSH
30367: CALL_OW 325
30371: PUSH
30372: LD_VAR 0 10
30376: PPUSH
30377: CALL_OW 255
30381: PPUSH
30382: LD_VAR 0 13
30386: PPUSH
30387: CALL_OW 325
30391: NOT
30392: AND
30393: IFFALSE 30422
// missile := Insert ( missile , missile + 1 , 3 ) ;
30395: LD_ADDR_VAR 0 14
30399: PUSH
30400: LD_VAR 0 14
30404: PPUSH
30405: LD_VAR 0 14
30409: PUSH
30410: LD_INT 1
30412: PLUS
30413: PPUSH
30414: LD_INT 3
30416: PPUSH
30417: CALL_OW 2
30421: ST_TO_ADDR
// if missile < 2 then
30422: LD_VAR 0 14
30426: PUSH
30427: LD_INT 2
30429: LESS
30430: IFFALSE 30434
// exit ;
30432: GO 30656
// x := GetX ( enemy ) ;
30434: LD_ADDR_VAR 0 4
30438: PUSH
30439: LD_VAR 0 10
30443: PPUSH
30444: CALL_OW 250
30448: ST_TO_ADDR
// y := GetY ( enemy ) ;
30449: LD_ADDR_VAR 0 5
30453: PUSH
30454: LD_VAR 0 10
30458: PPUSH
30459: CALL_OW 251
30463: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30464: LD_ADDR_VAR 0 6
30468: PUSH
30469: LD_VAR 0 4
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PPUSH
30478: LD_INT 1
30480: PPUSH
30481: CALL_OW 12
30485: PLUS
30486: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30487: LD_ADDR_VAR 0 7
30491: PUSH
30492: LD_VAR 0 5
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PPUSH
30501: LD_INT 1
30503: PPUSH
30504: CALL_OW 12
30508: PLUS
30509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30510: LD_VAR 0 6
30514: PPUSH
30515: LD_VAR 0 7
30519: PPUSH
30520: CALL_OW 488
30524: NOT
30525: IFFALSE 30547
// begin _x := x ;
30527: LD_ADDR_VAR 0 6
30531: PUSH
30532: LD_VAR 0 4
30536: ST_TO_ADDR
// _y := y ;
30537: LD_ADDR_VAR 0 7
30541: PUSH
30542: LD_VAR 0 5
30546: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30547: LD_ADDR_VAR 0 3
30551: PUSH
30552: LD_INT 1
30554: PPUSH
30555: LD_VAR 0 14
30559: PPUSH
30560: CALL_OW 12
30564: ST_TO_ADDR
// case i of 1 :
30565: LD_VAR 0 3
30569: PUSH
30570: LD_INT 1
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30595
30578: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30579: LD_VAR 0 1
30583: PPUSH
30584: LD_VAR 0 10
30588: PPUSH
30589: CALL_OW 115
30593: GO 30656
30595: LD_INT 2
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30625
30603: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30604: LD_VAR 0 1
30608: PPUSH
30609: LD_VAR 0 6
30613: PPUSH
30614: LD_VAR 0 7
30618: PPUSH
30619: CALL_OW 153
30623: GO 30656
30625: LD_INT 3
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30655
30633: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30634: LD_VAR 0 1
30638: PPUSH
30639: LD_VAR 0 6
30643: PPUSH
30644: LD_VAR 0 7
30648: PPUSH
30649: CALL_OW 154
30653: GO 30656
30655: POP
// end ;
30656: LD_VAR 0 2
30660: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30661: LD_INT 0
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
// if not unit or not building then
30669: LD_VAR 0 1
30673: NOT
30674: PUSH
30675: LD_VAR 0 2
30679: NOT
30680: OR
30681: IFFALSE 30685
// exit ;
30683: GO 30843
// x := GetX ( building ) ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 2
30694: PPUSH
30695: CALL_OW 250
30699: ST_TO_ADDR
// y := GetY ( building ) ;
30700: LD_ADDR_VAR 0 6
30704: PUSH
30705: LD_VAR 0 2
30709: PPUSH
30710: CALL_OW 251
30714: ST_TO_ADDR
// for i = 0 to 5 do
30715: LD_ADDR_VAR 0 4
30719: PUSH
30720: DOUBLE
30721: LD_INT 0
30723: DEC
30724: ST_TO_ADDR
30725: LD_INT 5
30727: PUSH
30728: FOR_TO
30729: IFFALSE 30841
// begin _x := ShiftX ( x , i , 3 ) ;
30731: LD_ADDR_VAR 0 7
30735: PUSH
30736: LD_VAR 0 5
30740: PPUSH
30741: LD_VAR 0 4
30745: PPUSH
30746: LD_INT 3
30748: PPUSH
30749: CALL_OW 272
30753: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30754: LD_ADDR_VAR 0 8
30758: PUSH
30759: LD_VAR 0 6
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: LD_INT 3
30771: PPUSH
30772: CALL_OW 273
30776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30777: LD_VAR 0 7
30781: PPUSH
30782: LD_VAR 0 8
30786: PPUSH
30787: CALL_OW 488
30791: NOT
30792: IFFALSE 30796
// continue ;
30794: GO 30728
// if HexInfo ( _x , _y ) = 0 then
30796: LD_VAR 0 7
30800: PPUSH
30801: LD_VAR 0 8
30805: PPUSH
30806: CALL_OW 428
30810: PUSH
30811: LD_INT 0
30813: EQUAL
30814: IFFALSE 30839
// begin ComMoveXY ( unit , _x , _y ) ;
30816: LD_VAR 0 1
30820: PPUSH
30821: LD_VAR 0 7
30825: PPUSH
30826: LD_VAR 0 8
30830: PPUSH
30831: CALL_OW 111
// exit ;
30835: POP
30836: POP
30837: GO 30843
// end ; end ;
30839: GO 30728
30841: POP
30842: POP
// end ;
30843: LD_VAR 0 3
30847: RET
// export function ScanBase ( side , base_area ) ; begin
30848: LD_INT 0
30850: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_VAR 0 2
30860: PPUSH
30861: LD_INT 81
30863: PUSH
30864: LD_VAR 0 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PPUSH
30873: CALL_OW 70
30877: ST_TO_ADDR
// end ;
30878: LD_VAR 0 3
30882: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30883: LD_INT 0
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
// result := false ;
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_INT 0
30896: ST_TO_ADDR
// side := GetSide ( unit ) ;
30897: LD_ADDR_VAR 0 3
30901: PUSH
30902: LD_VAR 0 1
30906: PPUSH
30907: CALL_OW 255
30911: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30912: LD_ADDR_VAR 0 4
30916: PUSH
30917: LD_VAR 0 1
30921: PPUSH
30922: CALL_OW 248
30926: ST_TO_ADDR
// case nat of 1 :
30927: LD_VAR 0 4
30931: PUSH
30932: LD_INT 1
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30951
30940: POP
// tech := tech_lassight ; 2 :
30941: LD_ADDR_VAR 0 5
30945: PUSH
30946: LD_INT 12
30948: ST_TO_ADDR
30949: GO 30990
30951: LD_INT 2
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// tech := tech_mortar ; 3 :
30960: LD_ADDR_VAR 0 5
30964: PUSH
30965: LD_INT 41
30967: ST_TO_ADDR
30968: GO 30990
30970: LD_INT 3
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 30989
30978: POP
// tech := tech_bazooka ; end ;
30979: LD_ADDR_VAR 0 5
30983: PUSH
30984: LD_INT 44
30986: ST_TO_ADDR
30987: GO 30990
30989: POP
// if Researched ( side , tech ) then
30990: LD_VAR 0 3
30994: PPUSH
30995: LD_VAR 0 5
30999: PPUSH
31000: CALL_OW 325
31004: IFFALSE 31031
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31006: LD_ADDR_VAR 0 2
31010: PUSH
31011: LD_INT 5
31013: PUSH
31014: LD_INT 8
31016: PUSH
31017: LD_INT 9
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: PUSH
31025: LD_VAR 0 4
31029: ARRAY
31030: ST_TO_ADDR
// end ;
31031: LD_VAR 0 2
31035: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
// if not mines then
31041: LD_VAR 0 2
31045: NOT
31046: IFFALSE 31050
// exit ;
31048: GO 31194
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_INT 81
31057: PUSH
31058: LD_VAR 0 1
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 21
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PPUSH
31088: CALL_OW 69
31092: ST_TO_ADDR
// for i in mines do
31093: LD_ADDR_VAR 0 4
31097: PUSH
31098: LD_VAR 0 2
31102: PUSH
31103: FOR_IN
31104: IFFALSE 31192
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31106: LD_VAR 0 4
31110: PUSH
31111: LD_INT 1
31113: ARRAY
31114: PPUSH
31115: LD_VAR 0 4
31119: PUSH
31120: LD_INT 2
31122: ARRAY
31123: PPUSH
31124: CALL_OW 458
31128: NOT
31129: IFFALSE 31133
// continue ;
31131: GO 31103
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31133: LD_VAR 0 4
31137: PUSH
31138: LD_INT 1
31140: ARRAY
31141: PPUSH
31142: LD_VAR 0 4
31146: PUSH
31147: LD_INT 2
31149: ARRAY
31150: PPUSH
31151: CALL_OW 428
31155: PUSH
31156: LD_VAR 0 5
31160: IN
31161: IFFALSE 31190
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31163: LD_VAR 0 4
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PPUSH
31172: LD_VAR 0 4
31176: PUSH
31177: LD_INT 2
31179: ARRAY
31180: PPUSH
31181: LD_VAR 0 1
31185: PPUSH
31186: CALL_OW 456
// end ;
31190: GO 31103
31192: POP
31193: POP
// end ;
31194: LD_VAR 0 3
31198: RET
// export function Count ( array ) ; var i ; begin
31199: LD_INT 0
31201: PPUSH
31202: PPUSH
// result := 0 ;
31203: LD_ADDR_VAR 0 2
31207: PUSH
31208: LD_INT 0
31210: ST_TO_ADDR
// for i in array do
31211: LD_ADDR_VAR 0 3
31215: PUSH
31216: LD_VAR 0 1
31220: PUSH
31221: FOR_IN
31222: IFFALSE 31246
// if i then
31224: LD_VAR 0 3
31228: IFFALSE 31244
// result := result + 1 ;
31230: LD_ADDR_VAR 0 2
31234: PUSH
31235: LD_VAR 0 2
31239: PUSH
31240: LD_INT 1
31242: PLUS
31243: ST_TO_ADDR
31244: GO 31221
31246: POP
31247: POP
// end ;
31248: LD_VAR 0 2
31252: RET
// export function IsEmpty ( building ) ; begin
31253: LD_INT 0
31255: PPUSH
// if not building then
31256: LD_VAR 0 1
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 31308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31265: LD_ADDR_VAR 0 2
31269: PUSH
31270: LD_VAR 0 1
31274: PUSH
31275: LD_INT 22
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 255
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 58
31294: PUSH
31295: EMPTY
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PPUSH
31302: CALL_OW 69
31306: IN
31307: ST_TO_ADDR
// end ;
31308: LD_VAR 0 2
31312: RET
// export function IsNotFull ( building ) ; begin
31313: LD_INT 0
31315: PPUSH
// if not building then
31316: LD_VAR 0 1
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31344
// result := UnitsInside ( building ) < 6 ;
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: LD_VAR 0 1
31334: PPUSH
31335: CALL_OW 313
31339: PUSH
31340: LD_INT 6
31342: LESS
31343: ST_TO_ADDR
// end ;
31344: LD_VAR 0 2
31348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31349: LD_INT 0
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
// tmp := [ ] ;
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: EMPTY
31361: ST_TO_ADDR
// list := [ ] ;
31362: LD_ADDR_VAR 0 5
31366: PUSH
31367: EMPTY
31368: ST_TO_ADDR
// for i = 16 to 25 do
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: DOUBLE
31375: LD_INT 16
31377: DEC
31378: ST_TO_ADDR
31379: LD_INT 25
31381: PUSH
31382: FOR_TO
31383: IFFALSE 31456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31385: LD_ADDR_VAR 0 3
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: LD_INT 22
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 255
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 91
31414: PUSH
31415: LD_VAR 0 1
31419: PUSH
31420: LD_INT 6
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 30
31430: PUSH
31431: LD_VAR 0 4
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: EMPTY
31446: LIST
31447: PPUSH
31448: CALL_OW 69
31452: ADD
31453: ST_TO_ADDR
31454: GO 31382
31456: POP
31457: POP
// for i = 1 to tmp do
31458: LD_ADDR_VAR 0 4
31462: PUSH
31463: DOUBLE
31464: LD_INT 1
31466: DEC
31467: ST_TO_ADDR
31468: LD_VAR 0 3
31472: PUSH
31473: FOR_TO
31474: IFFALSE 31562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_VAR 0 5
31485: PUSH
31486: LD_VAR 0 3
31490: PUSH
31491: LD_VAR 0 4
31495: ARRAY
31496: PPUSH
31497: CALL_OW 266
31501: PUSH
31502: LD_VAR 0 3
31506: PUSH
31507: LD_VAR 0 4
31511: ARRAY
31512: PPUSH
31513: CALL_OW 250
31517: PUSH
31518: LD_VAR 0 3
31522: PUSH
31523: LD_VAR 0 4
31527: ARRAY
31528: PPUSH
31529: CALL_OW 251
31533: PUSH
31534: LD_VAR 0 3
31538: PUSH
31539: LD_VAR 0 4
31543: ARRAY
31544: PPUSH
31545: CALL_OW 254
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: ADD
31559: ST_TO_ADDR
31560: GO 31473
31562: POP
31563: POP
// result := list ;
31564: LD_ADDR_VAR 0 2
31568: PUSH
31569: LD_VAR 0 5
31573: ST_TO_ADDR
// end ;
31574: LD_VAR 0 2
31578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31579: LD_INT 0
31581: PPUSH
31582: PPUSH
31583: PPUSH
31584: PPUSH
31585: PPUSH
31586: PPUSH
31587: PPUSH
// if not factory then
31588: LD_VAR 0 1
31592: NOT
31593: IFFALSE 31597
// exit ;
31595: GO 32190
// if control = control_apeman then
31597: LD_VAR 0 4
31601: PUSH
31602: LD_INT 5
31604: EQUAL
31605: IFFALSE 31714
// begin tmp := UnitsInside ( factory ) ;
31607: LD_ADDR_VAR 0 8
31611: PUSH
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 313
31621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31622: LD_VAR 0 8
31626: PPUSH
31627: LD_INT 25
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PPUSH
31637: CALL_OW 72
31641: NOT
31642: IFFALSE 31652
// control := control_manual ;
31644: LD_ADDR_VAR 0 4
31648: PUSH
31649: LD_INT 1
31651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31652: LD_ADDR_VAR 0 8
31656: PUSH
31657: LD_VAR 0 1
31661: PPUSH
31662: CALL 31349 0 1
31666: ST_TO_ADDR
// if tmp then
31667: LD_VAR 0 8
31671: IFFALSE 31714
// begin for i in tmp do
31673: LD_ADDR_VAR 0 7
31677: PUSH
31678: LD_VAR 0 8
31682: PUSH
31683: FOR_IN
31684: IFFALSE 31712
// if i [ 1 ] = b_ext_radio then
31686: LD_VAR 0 7
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: PUSH
31695: LD_INT 22
31697: EQUAL
31698: IFFALSE 31710
// begin control := control_remote ;
31700: LD_ADDR_VAR 0 4
31704: PUSH
31705: LD_INT 2
31707: ST_TO_ADDR
// break ;
31708: GO 31712
// end ;
31710: GO 31683
31712: POP
31713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31714: LD_VAR 0 1
31718: PPUSH
31719: LD_VAR 0 2
31723: PPUSH
31724: LD_VAR 0 3
31728: PPUSH
31729: LD_VAR 0 4
31733: PPUSH
31734: LD_VAR 0 5
31738: PPUSH
31739: CALL_OW 448
31743: IFFALSE 31778
// begin result := [ chassis , engine , control , weapon ] ;
31745: LD_ADDR_VAR 0 6
31749: PUSH
31750: LD_VAR 0 2
31754: PUSH
31755: LD_VAR 0 3
31759: PUSH
31760: LD_VAR 0 4
31764: PUSH
31765: LD_VAR 0 5
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
// exit ;
31776: GO 32190
// end ; _chassis := AvailableChassisList ( factory ) ;
31778: LD_ADDR_VAR 0 9
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 475
31792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31793: LD_ADDR_VAR 0 11
31797: PUSH
31798: LD_VAR 0 1
31802: PPUSH
31803: CALL_OW 476
31807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31808: LD_ADDR_VAR 0 12
31812: PUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 477
31822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31823: LD_ADDR_VAR 0 10
31827: PUSH
31828: LD_VAR 0 1
31832: PPUSH
31833: CALL_OW 478
31837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31838: LD_VAR 0 9
31842: NOT
31843: PUSH
31844: LD_VAR 0 11
31848: NOT
31849: OR
31850: PUSH
31851: LD_VAR 0 12
31855: NOT
31856: OR
31857: PUSH
31858: LD_VAR 0 10
31862: NOT
31863: OR
31864: IFFALSE 31899
// begin result := [ chassis , engine , control , weapon ] ;
31866: LD_ADDR_VAR 0 6
31870: PUSH
31871: LD_VAR 0 2
31875: PUSH
31876: LD_VAR 0 3
31880: PUSH
31881: LD_VAR 0 4
31885: PUSH
31886: LD_VAR 0 5
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// exit ;
31897: GO 32190
// end ; if not chassis in _chassis then
31899: LD_VAR 0 2
31903: PUSH
31904: LD_VAR 0 9
31908: IN
31909: NOT
31910: IFFALSE 31936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31912: LD_ADDR_VAR 0 2
31916: PUSH
31917: LD_VAR 0 9
31921: PUSH
31922: LD_INT 1
31924: PPUSH
31925: LD_VAR 0 9
31929: PPUSH
31930: CALL_OW 12
31934: ARRAY
31935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: CALL 32195 0 2
31950: NOT
31951: IFFALSE 32010
// repeat engine := _engine [ 1 ] ;
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_VAR 0 11
31962: PUSH
31963: LD_INT 1
31965: ARRAY
31966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31967: LD_ADDR_VAR 0 11
31971: PUSH
31972: LD_VAR 0 11
31976: PPUSH
31977: LD_INT 1
31979: PPUSH
31980: CALL_OW 3
31984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31985: LD_VAR 0 2
31989: PPUSH
31990: LD_VAR 0 3
31994: PPUSH
31995: CALL 32195 0 2
31999: PUSH
32000: LD_VAR 0 11
32004: PUSH
32005: EMPTY
32006: EQUAL
32007: OR
32008: IFFALSE 31953
// if not control in _control then
32010: LD_VAR 0 4
32014: PUSH
32015: LD_VAR 0 12
32019: IN
32020: NOT
32021: IFFALSE 32047
// control := _control [ rand ( 1 , _control ) ] ;
32023: LD_ADDR_VAR 0 4
32027: PUSH
32028: LD_VAR 0 12
32032: PUSH
32033: LD_INT 1
32035: PPUSH
32036: LD_VAR 0 12
32040: PPUSH
32041: CALL_OW 12
32045: ARRAY
32046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32047: LD_VAR 0 2
32051: PPUSH
32052: LD_VAR 0 5
32056: PPUSH
32057: CALL 32415 0 2
32061: NOT
32062: IFFALSE 32121
// repeat weapon := _weapon [ 1 ] ;
32064: LD_ADDR_VAR 0 5
32068: PUSH
32069: LD_VAR 0 10
32073: PUSH
32074: LD_INT 1
32076: ARRAY
32077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32078: LD_ADDR_VAR 0 10
32082: PUSH
32083: LD_VAR 0 10
32087: PPUSH
32088: LD_INT 1
32090: PPUSH
32091: CALL_OW 3
32095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32096: LD_VAR 0 2
32100: PPUSH
32101: LD_VAR 0 5
32105: PPUSH
32106: CALL 32415 0 2
32110: PUSH
32111: LD_VAR 0 10
32115: PUSH
32116: EMPTY
32117: EQUAL
32118: OR
32119: IFFALSE 32064
// result := [ ] ;
32121: LD_ADDR_VAR 0 6
32125: PUSH
32126: EMPTY
32127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32128: LD_VAR 0 1
32132: PPUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: LD_VAR 0 3
32142: PPUSH
32143: LD_VAR 0 4
32147: PPUSH
32148: LD_VAR 0 5
32152: PPUSH
32153: CALL_OW 448
32157: IFFALSE 32190
// result := [ chassis , engine , control , weapon ] ;
32159: LD_ADDR_VAR 0 6
32163: PUSH
32164: LD_VAR 0 2
32168: PUSH
32169: LD_VAR 0 3
32173: PUSH
32174: LD_VAR 0 4
32178: PUSH
32179: LD_VAR 0 5
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// end ;
32190: LD_VAR 0 6
32194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32195: LD_INT 0
32197: PPUSH
// if not chassis or not engine then
32198: LD_VAR 0 1
32202: NOT
32203: PUSH
32204: LD_VAR 0 2
32208: NOT
32209: OR
32210: IFFALSE 32214
// exit ;
32212: GO 32410
// case engine of engine_solar :
32214: LD_VAR 0 2
32218: PUSH
32219: LD_INT 2
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32265
32227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32228: LD_ADDR_VAR 0 3
32232: PUSH
32233: LD_INT 11
32235: PUSH
32236: LD_INT 12
32238: PUSH
32239: LD_INT 13
32241: PUSH
32242: LD_INT 14
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 32394
32265: LD_INT 1
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32335
32273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 11
32281: PUSH
32282: LD_INT 12
32284: PUSH
32285: LD_INT 13
32287: PUSH
32288: LD_INT 14
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: LD_INT 5
32305: PUSH
32306: LD_INT 21
32308: PUSH
32309: LD_INT 23
32311: PUSH
32312: LD_INT 22
32314: PUSH
32315: LD_INT 24
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
32333: GO 32394
32335: LD_INT 3
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32393
32343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 13
32351: PUSH
32352: LD_INT 14
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: LD_INT 21
32369: PUSH
32370: LD_INT 22
32372: PUSH
32373: LD_INT 23
32375: PUSH
32376: LD_INT 24
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 32394
32393: POP
// result := ( chassis in result ) ;
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_VAR 0 1
32403: PUSH
32404: LD_VAR 0 3
32408: IN
32409: ST_TO_ADDR
// end ;
32410: LD_VAR 0 3
32414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32415: LD_INT 0
32417: PPUSH
// if not chassis or not weapon then
32418: LD_VAR 0 1
32422: NOT
32423: PUSH
32424: LD_VAR 0 2
32428: NOT
32429: OR
32430: IFFALSE 32434
// exit ;
32432: GO 33496
// case weapon of us_machine_gun :
32434: LD_VAR 0 2
32438: PUSH
32439: LD_INT 2
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32477
32447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: LD_INT 4
32464: PUSH
32465: LD_INT 5
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: ST_TO_ADDR
32475: GO 33480
32477: LD_INT 3
32479: DOUBLE
32480: EQUAL
32481: IFTRUE 32485
32483: GO 32515
32485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32486: LD_ADDR_VAR 0 3
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: LD_INT 5
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: ST_TO_ADDR
32513: GO 33480
32515: LD_INT 11
32517: DOUBLE
32518: EQUAL
32519: IFTRUE 32523
32521: GO 32553
32523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32524: LD_ADDR_VAR 0 3
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: LD_INT 4
32540: PUSH
32541: LD_INT 5
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
32551: GO 33480
32553: LD_INT 4
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32587
32561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32562: LD_ADDR_VAR 0 3
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: LD_INT 5
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
32585: GO 33480
32587: LD_INT 5
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32621
32595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 4
32609: PUSH
32610: LD_INT 5
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
32619: GO 33480
32621: LD_INT 9
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32655
32629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32630: LD_ADDR_VAR 0 3
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: LD_INT 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 33480
32655: LD_INT 7
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32689
32663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
32687: GO 33480
32689: LD_INT 12
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32723
32697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 4
32711: PUSH
32712: LD_INT 5
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 33480
32723: LD_INT 13
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32757
32731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 4
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
32755: GO 33480
32757: LD_INT 14
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32783
32765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 4
32773: PUSH
32774: LD_INT 5
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: ST_TO_ADDR
32781: GO 33480
32783: LD_INT 6
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32809
32791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: LD_INT 5
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: ST_TO_ADDR
32807: GO 33480
32809: LD_INT 10
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32835
32817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 4
32825: PUSH
32826: LD_INT 5
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 33480
32835: LD_INT 22
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32869
32843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32844: LD_ADDR_VAR 0 3
32848: PUSH
32849: LD_INT 11
32851: PUSH
32852: LD_INT 12
32854: PUSH
32855: LD_INT 13
32857: PUSH
32858: LD_INT 14
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
32867: GO 33480
32869: LD_INT 23
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32903
32877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: LD_INT 11
32885: PUSH
32886: LD_INT 12
32888: PUSH
32889: LD_INT 13
32891: PUSH
32892: LD_INT 14
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
32901: GO 33480
32903: LD_INT 24
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32937
32911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_INT 11
32919: PUSH
32920: LD_INT 12
32922: PUSH
32923: LD_INT 13
32925: PUSH
32926: LD_INT 14
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
32935: GO 33480
32937: LD_INT 30
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32971
32945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 11
32953: PUSH
32954: LD_INT 12
32956: PUSH
32957: LD_INT 13
32959: PUSH
32960: LD_INT 14
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: ST_TO_ADDR
32969: GO 33480
32971: LD_INT 25
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 32997
32979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32980: LD_ADDR_VAR 0 3
32984: PUSH
32985: LD_INT 13
32987: PUSH
32988: LD_INT 14
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: ST_TO_ADDR
32995: GO 33480
32997: LD_INT 27
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33023
33005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_INT 13
33013: PUSH
33014: LD_INT 14
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: ST_TO_ADDR
33021: GO 33480
33023: LD_EXP 100
33027: DOUBLE
33028: EQUAL
33029: IFTRUE 33033
33031: GO 33059
33033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: LD_INT 11
33041: PUSH
33042: LD_INT 12
33044: PUSH
33045: LD_INT 13
33047: PUSH
33048: LD_INT 14
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: ST_TO_ADDR
33057: GO 33480
33059: LD_INT 28
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33085
33067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_INT 13
33075: PUSH
33076: LD_INT 14
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: ST_TO_ADDR
33083: GO 33480
33085: LD_INT 29
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33093
33091: GO 33111
33093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 13
33101: PUSH
33102: LD_INT 14
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: ST_TO_ADDR
33109: GO 33480
33111: LD_INT 31
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33137
33119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33120: LD_ADDR_VAR 0 3
33124: PUSH
33125: LD_INT 13
33127: PUSH
33128: LD_INT 14
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: ST_TO_ADDR
33135: GO 33480
33137: LD_INT 26
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33163
33145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_INT 13
33153: PUSH
33154: LD_INT 14
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: ST_TO_ADDR
33161: GO 33480
33163: LD_INT 42
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33197
33171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 22
33182: PUSH
33183: LD_INT 23
33185: PUSH
33186: LD_INT 24
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
33195: GO 33480
33197: LD_INT 43
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33231
33205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_INT 23
33219: PUSH
33220: LD_INT 24
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
33229: GO 33480
33231: LD_INT 44
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33239
33237: GO 33265
33239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_INT 21
33247: PUSH
33248: LD_INT 22
33250: PUSH
33251: LD_INT 23
33253: PUSH
33254: LD_INT 24
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: ST_TO_ADDR
33263: GO 33480
33265: LD_INT 45
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33273
33271: GO 33299
33273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_INT 21
33281: PUSH
33282: LD_INT 22
33284: PUSH
33285: LD_INT 23
33287: PUSH
33288: LD_INT 24
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: ST_TO_ADDR
33297: GO 33480
33299: LD_INT 49
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33333
33307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_INT 21
33315: PUSH
33316: LD_INT 22
33318: PUSH
33319: LD_INT 23
33321: PUSH
33322: LD_INT 24
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: ST_TO_ADDR
33331: GO 33480
33333: LD_INT 51
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33367
33341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33342: LD_ADDR_VAR 0 3
33346: PUSH
33347: LD_INT 21
33349: PUSH
33350: LD_INT 22
33352: PUSH
33353: LD_INT 23
33355: PUSH
33356: LD_INT 24
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
33365: GO 33480
33367: LD_INT 52
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33401
33375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: LD_INT 21
33383: PUSH
33384: LD_INT 22
33386: PUSH
33387: LD_INT 23
33389: PUSH
33390: LD_INT 24
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
33399: GO 33480
33401: LD_INT 53
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33427
33409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_INT 23
33417: PUSH
33418: LD_INT 24
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: ST_TO_ADDR
33425: GO 33480
33427: LD_INT 46
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33435
33433: GO 33453
33435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33436: LD_ADDR_VAR 0 3
33440: PUSH
33441: LD_INT 23
33443: PUSH
33444: LD_INT 24
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: ST_TO_ADDR
33451: GO 33480
33453: LD_INT 47
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33479
33461: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33462: LD_ADDR_VAR 0 3
33466: PUSH
33467: LD_INT 23
33469: PUSH
33470: LD_INT 24
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: ST_TO_ADDR
33477: GO 33480
33479: POP
// result := ( chassis in result ) ;
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_VAR 0 1
33489: PUSH
33490: LD_VAR 0 3
33494: IN
33495: ST_TO_ADDR
// end ;
33496: LD_VAR 0 3
33500: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33501: LD_INT 0
33503: PPUSH
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
// result := array ;
33510: LD_ADDR_VAR 0 5
33514: PUSH
33515: LD_VAR 0 1
33519: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33520: LD_VAR 0 1
33524: NOT
33525: PUSH
33526: LD_VAR 0 2
33530: NOT
33531: OR
33532: PUSH
33533: LD_VAR 0 3
33537: NOT
33538: OR
33539: PUSH
33540: LD_VAR 0 2
33544: PUSH
33545: LD_VAR 0 1
33549: GREATER
33550: OR
33551: PUSH
33552: LD_VAR 0 3
33556: PUSH
33557: LD_VAR 0 1
33561: GREATER
33562: OR
33563: IFFALSE 33567
// exit ;
33565: GO 33863
// if direction then
33567: LD_VAR 0 4
33571: IFFALSE 33635
// begin d := 1 ;
33573: LD_ADDR_VAR 0 9
33577: PUSH
33578: LD_INT 1
33580: ST_TO_ADDR
// if i_from > i_to then
33581: LD_VAR 0 2
33585: PUSH
33586: LD_VAR 0 3
33590: GREATER
33591: IFFALSE 33617
// length := ( array - i_from ) + i_to else
33593: LD_ADDR_VAR 0 11
33597: PUSH
33598: LD_VAR 0 1
33602: PUSH
33603: LD_VAR 0 2
33607: MINUS
33608: PUSH
33609: LD_VAR 0 3
33613: PLUS
33614: ST_TO_ADDR
33615: GO 33633
// length := i_to - i_from ;
33617: LD_ADDR_VAR 0 11
33621: PUSH
33622: LD_VAR 0 3
33626: PUSH
33627: LD_VAR 0 2
33631: MINUS
33632: ST_TO_ADDR
// end else
33633: GO 33696
// begin d := - 1 ;
33635: LD_ADDR_VAR 0 9
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: ST_TO_ADDR
// if i_from > i_to then
33644: LD_VAR 0 2
33648: PUSH
33649: LD_VAR 0 3
33653: GREATER
33654: IFFALSE 33674
// length := i_from - i_to else
33656: LD_ADDR_VAR 0 11
33660: PUSH
33661: LD_VAR 0 2
33665: PUSH
33666: LD_VAR 0 3
33670: MINUS
33671: ST_TO_ADDR
33672: GO 33696
// length := ( array - i_to ) + i_from ;
33674: LD_ADDR_VAR 0 11
33678: PUSH
33679: LD_VAR 0 1
33683: PUSH
33684: LD_VAR 0 3
33688: MINUS
33689: PUSH
33690: LD_VAR 0 2
33694: PLUS
33695: ST_TO_ADDR
// end ; if not length then
33696: LD_VAR 0 11
33700: NOT
33701: IFFALSE 33705
// exit ;
33703: GO 33863
// tmp := array ;
33705: LD_ADDR_VAR 0 10
33709: PUSH
33710: LD_VAR 0 1
33714: ST_TO_ADDR
// for i = 1 to length do
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: DOUBLE
33721: LD_INT 1
33723: DEC
33724: ST_TO_ADDR
33725: LD_VAR 0 11
33729: PUSH
33730: FOR_TO
33731: IFFALSE 33851
// begin for j = 1 to array do
33733: LD_ADDR_VAR 0 7
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_VAR 0 1
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33837
// begin k := j + d ;
33751: LD_ADDR_VAR 0 8
33755: PUSH
33756: LD_VAR 0 7
33760: PUSH
33761: LD_VAR 0 9
33765: PLUS
33766: ST_TO_ADDR
// if k > array then
33767: LD_VAR 0 8
33771: PUSH
33772: LD_VAR 0 1
33776: GREATER
33777: IFFALSE 33787
// k := 1 ;
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_INT 1
33786: ST_TO_ADDR
// if not k then
33787: LD_VAR 0 8
33791: NOT
33792: IFFALSE 33804
// k := array ;
33794: LD_ADDR_VAR 0 8
33798: PUSH
33799: LD_VAR 0 1
33803: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33804: LD_ADDR_VAR 0 10
33808: PUSH
33809: LD_VAR 0 10
33813: PPUSH
33814: LD_VAR 0 8
33818: PPUSH
33819: LD_VAR 0 1
33823: PUSH
33824: LD_VAR 0 7
33828: ARRAY
33829: PPUSH
33830: CALL_OW 1
33834: ST_TO_ADDR
// end ;
33835: GO 33748
33837: POP
33838: POP
// array := tmp ;
33839: LD_ADDR_VAR 0 1
33843: PUSH
33844: LD_VAR 0 10
33848: ST_TO_ADDR
// end ;
33849: GO 33730
33851: POP
33852: POP
// result := array ;
33853: LD_ADDR_VAR 0 5
33857: PUSH
33858: LD_VAR 0 1
33862: ST_TO_ADDR
// end ;
33863: LD_VAR 0 5
33867: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33868: LD_INT 0
33870: PPUSH
33871: PPUSH
// result := 0 ;
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 0
33879: ST_TO_ADDR
// if not array or not value in array then
33880: LD_VAR 0 1
33884: NOT
33885: PUSH
33886: LD_VAR 0 2
33890: PUSH
33891: LD_VAR 0 1
33895: IN
33896: NOT
33897: OR
33898: IFFALSE 33902
// exit ;
33900: GO 33956
// for i = 1 to array do
33902: LD_ADDR_VAR 0 4
33906: PUSH
33907: DOUBLE
33908: LD_INT 1
33910: DEC
33911: ST_TO_ADDR
33912: LD_VAR 0 1
33916: PUSH
33917: FOR_TO
33918: IFFALSE 33954
// if value = array [ i ] then
33920: LD_VAR 0 2
33924: PUSH
33925: LD_VAR 0 1
33929: PUSH
33930: LD_VAR 0 4
33934: ARRAY
33935: EQUAL
33936: IFFALSE 33952
// begin result := i ;
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_VAR 0 4
33947: ST_TO_ADDR
// exit ;
33948: POP
33949: POP
33950: GO 33956
// end ;
33952: GO 33917
33954: POP
33955: POP
// end ;
33956: LD_VAR 0 3
33960: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33961: LD_INT 0
33963: PPUSH
// vc_chassis := chassis ;
33964: LD_ADDR_OWVAR 37
33968: PUSH
33969: LD_VAR 0 1
33973: ST_TO_ADDR
// vc_engine := engine ;
33974: LD_ADDR_OWVAR 39
33978: PUSH
33979: LD_VAR 0 2
33983: ST_TO_ADDR
// vc_control := control ;
33984: LD_ADDR_OWVAR 38
33988: PUSH
33989: LD_VAR 0 3
33993: ST_TO_ADDR
// vc_weapon := weapon ;
33994: LD_ADDR_OWVAR 40
33998: PUSH
33999: LD_VAR 0 4
34003: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34004: LD_ADDR_OWVAR 41
34008: PUSH
34009: LD_VAR 0 5
34013: ST_TO_ADDR
// end ;
34014: LD_VAR 0 6
34018: RET
// export function WantPlant ( unit ) ; var task ; begin
34019: LD_INT 0
34021: PPUSH
34022: PPUSH
// result := false ;
34023: LD_ADDR_VAR 0 2
34027: PUSH
34028: LD_INT 0
34030: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34031: LD_ADDR_VAR 0 3
34035: PUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 437
34045: ST_TO_ADDR
// if task then
34046: LD_VAR 0 3
34050: IFFALSE 34078
// if task [ 1 ] [ 1 ] = p then
34052: LD_VAR 0 3
34056: PUSH
34057: LD_INT 1
34059: ARRAY
34060: PUSH
34061: LD_INT 1
34063: ARRAY
34064: PUSH
34065: LD_STRING p
34067: EQUAL
34068: IFFALSE 34078
// result := true ;
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_INT 1
34077: ST_TO_ADDR
// end ;
34078: LD_VAR 0 2
34082: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34083: LD_INT 0
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
// if pos < 1 then
34089: LD_VAR 0 2
34093: PUSH
34094: LD_INT 1
34096: LESS
34097: IFFALSE 34101
// exit ;
34099: GO 34404
// if pos = 1 then
34101: LD_VAR 0 2
34105: PUSH
34106: LD_INT 1
34108: EQUAL
34109: IFFALSE 34142
// result := Replace ( arr , pos [ 1 ] , value ) else
34111: LD_ADDR_VAR 0 4
34115: PUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_VAR 0 2
34125: PUSH
34126: LD_INT 1
34128: ARRAY
34129: PPUSH
34130: LD_VAR 0 3
34134: PPUSH
34135: CALL_OW 1
34139: ST_TO_ADDR
34140: GO 34404
// begin tmp := arr ;
34142: LD_ADDR_VAR 0 6
34146: PUSH
34147: LD_VAR 0 1
34151: ST_TO_ADDR
// s_arr := [ tmp ] ;
34152: LD_ADDR_VAR 0 7
34156: PUSH
34157: LD_VAR 0 6
34161: PUSH
34162: EMPTY
34163: LIST
34164: ST_TO_ADDR
// for i = 1 to pos - 1 do
34165: LD_ADDR_VAR 0 5
34169: PUSH
34170: DOUBLE
34171: LD_INT 1
34173: DEC
34174: ST_TO_ADDR
34175: LD_VAR 0 2
34179: PUSH
34180: LD_INT 1
34182: MINUS
34183: PUSH
34184: FOR_TO
34185: IFFALSE 34230
// begin tmp := tmp [ pos [ i ] ] ;
34187: LD_ADDR_VAR 0 6
34191: PUSH
34192: LD_VAR 0 6
34196: PUSH
34197: LD_VAR 0 2
34201: PUSH
34202: LD_VAR 0 5
34206: ARRAY
34207: ARRAY
34208: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34209: LD_ADDR_VAR 0 7
34213: PUSH
34214: LD_VAR 0 7
34218: PUSH
34219: LD_VAR 0 6
34223: PUSH
34224: EMPTY
34225: LIST
34226: ADD
34227: ST_TO_ADDR
// end ;
34228: GO 34184
34230: POP
34231: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34232: LD_ADDR_VAR 0 6
34236: PUSH
34237: LD_VAR 0 6
34241: PPUSH
34242: LD_VAR 0 2
34246: PUSH
34247: LD_VAR 0 2
34251: ARRAY
34252: PPUSH
34253: LD_VAR 0 3
34257: PPUSH
34258: CALL_OW 1
34262: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34263: LD_ADDR_VAR 0 7
34267: PUSH
34268: LD_VAR 0 7
34272: PPUSH
34273: LD_VAR 0 7
34277: PPUSH
34278: LD_VAR 0 6
34282: PPUSH
34283: CALL_OW 1
34287: ST_TO_ADDR
// for i = s_arr downto 2 do
34288: LD_ADDR_VAR 0 5
34292: PUSH
34293: DOUBLE
34294: LD_VAR 0 7
34298: INC
34299: ST_TO_ADDR
34300: LD_INT 2
34302: PUSH
34303: FOR_DOWNTO
34304: IFFALSE 34388
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34306: LD_ADDR_VAR 0 6
34310: PUSH
34311: LD_VAR 0 7
34315: PUSH
34316: LD_VAR 0 5
34320: PUSH
34321: LD_INT 1
34323: MINUS
34324: ARRAY
34325: PPUSH
34326: LD_VAR 0 2
34330: PUSH
34331: LD_VAR 0 5
34335: PUSH
34336: LD_INT 1
34338: MINUS
34339: ARRAY
34340: PPUSH
34341: LD_VAR 0 7
34345: PUSH
34346: LD_VAR 0 5
34350: ARRAY
34351: PPUSH
34352: CALL_OW 1
34356: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34357: LD_ADDR_VAR 0 7
34361: PUSH
34362: LD_VAR 0 7
34366: PPUSH
34367: LD_VAR 0 5
34371: PUSH
34372: LD_INT 1
34374: MINUS
34375: PPUSH
34376: LD_VAR 0 6
34380: PPUSH
34381: CALL_OW 1
34385: ST_TO_ADDR
// end ;
34386: GO 34303
34388: POP
34389: POP
// result := s_arr [ 1 ] ;
34390: LD_ADDR_VAR 0 4
34394: PUSH
34395: LD_VAR 0 7
34399: PUSH
34400: LD_INT 1
34402: ARRAY
34403: ST_TO_ADDR
// end ; end ;
34404: LD_VAR 0 4
34408: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
// if not list then
34413: LD_VAR 0 1
34417: NOT
34418: IFFALSE 34422
// exit ;
34420: GO 34513
// i := list [ pos1 ] ;
34422: LD_ADDR_VAR 0 5
34426: PUSH
34427: LD_VAR 0 1
34431: PUSH
34432: LD_VAR 0 2
34436: ARRAY
34437: ST_TO_ADDR
// if not i then
34438: LD_VAR 0 5
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 34513
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34447: LD_ADDR_VAR 0 1
34451: PUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 1
34466: PUSH
34467: LD_VAR 0 3
34471: ARRAY
34472: PPUSH
34473: CALL_OW 1
34477: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34478: LD_ADDR_VAR 0 1
34482: PUSH
34483: LD_VAR 0 1
34487: PPUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: LD_VAR 0 5
34497: PPUSH
34498: CALL_OW 1
34502: ST_TO_ADDR
// result := list ;
34503: LD_ADDR_VAR 0 4
34507: PUSH
34508: LD_VAR 0 1
34512: ST_TO_ADDR
// end ;
34513: LD_VAR 0 4
34517: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34518: LD_INT 0
34520: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34521: LD_ADDR_VAR 0 5
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 250
34535: PPUSH
34536: LD_VAR 0 1
34540: PPUSH
34541: CALL_OW 251
34545: PPUSH
34546: LD_VAR 0 2
34550: PPUSH
34551: LD_VAR 0 3
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: CALL 34571 0 5
34565: ST_TO_ADDR
// end ;
34566: LD_VAR 0 5
34570: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
// if not list then
34577: LD_VAR 0 3
34581: NOT
34582: IFFALSE 34586
// exit ;
34584: GO 34974
// result := [ ] ;
34586: LD_ADDR_VAR 0 6
34590: PUSH
34591: EMPTY
34592: ST_TO_ADDR
// for i in list do
34593: LD_ADDR_VAR 0 7
34597: PUSH
34598: LD_VAR 0 3
34602: PUSH
34603: FOR_IN
34604: IFFALSE 34806
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34606: LD_ADDR_VAR 0 9
34610: PUSH
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: LD_VAR 0 2
34625: PPUSH
34626: CALL_OW 297
34630: ST_TO_ADDR
// if not result then
34631: LD_VAR 0 6
34635: NOT
34636: IFFALSE 34662
// result := [ [ i , tmp ] ] else
34638: LD_ADDR_VAR 0 6
34642: PUSH
34643: LD_VAR 0 7
34647: PUSH
34648: LD_VAR 0 9
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: ST_TO_ADDR
34660: GO 34804
// begin if result [ result ] [ 2 ] < tmp then
34662: LD_VAR 0 6
34666: PUSH
34667: LD_VAR 0 6
34671: ARRAY
34672: PUSH
34673: LD_INT 2
34675: ARRAY
34676: PUSH
34677: LD_VAR 0 9
34681: LESS
34682: IFFALSE 34724
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34684: LD_ADDR_VAR 0 6
34688: PUSH
34689: LD_VAR 0 6
34693: PPUSH
34694: LD_VAR 0 6
34698: PUSH
34699: LD_INT 1
34701: PLUS
34702: PPUSH
34703: LD_VAR 0 7
34707: PUSH
34708: LD_VAR 0 9
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PPUSH
34717: CALL_OW 2
34721: ST_TO_ADDR
34722: GO 34804
// for j = 1 to result do
34724: LD_ADDR_VAR 0 8
34728: PUSH
34729: DOUBLE
34730: LD_INT 1
34732: DEC
34733: ST_TO_ADDR
34734: LD_VAR 0 6
34738: PUSH
34739: FOR_TO
34740: IFFALSE 34802
// begin if tmp < result [ j ] [ 2 ] then
34742: LD_VAR 0 9
34746: PUSH
34747: LD_VAR 0 6
34751: PUSH
34752: LD_VAR 0 8
34756: ARRAY
34757: PUSH
34758: LD_INT 2
34760: ARRAY
34761: LESS
34762: IFFALSE 34800
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34764: LD_ADDR_VAR 0 6
34768: PUSH
34769: LD_VAR 0 6
34773: PPUSH
34774: LD_VAR 0 8
34778: PPUSH
34779: LD_VAR 0 7
34783: PUSH
34784: LD_VAR 0 9
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PPUSH
34793: CALL_OW 2
34797: ST_TO_ADDR
// break ;
34798: GO 34802
// end ; end ;
34800: GO 34739
34802: POP
34803: POP
// end ; end ;
34804: GO 34603
34806: POP
34807: POP
// if result and not asc then
34808: LD_VAR 0 6
34812: PUSH
34813: LD_VAR 0 4
34817: NOT
34818: AND
34819: IFFALSE 34894
// begin tmp := result ;
34821: LD_ADDR_VAR 0 9
34825: PUSH
34826: LD_VAR 0 6
34830: ST_TO_ADDR
// for i = tmp downto 1 do
34831: LD_ADDR_VAR 0 7
34835: PUSH
34836: DOUBLE
34837: LD_VAR 0 9
34841: INC
34842: ST_TO_ADDR
34843: LD_INT 1
34845: PUSH
34846: FOR_DOWNTO
34847: IFFALSE 34892
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34849: LD_ADDR_VAR 0 6
34853: PUSH
34854: LD_VAR 0 6
34858: PPUSH
34859: LD_VAR 0 9
34863: PUSH
34864: LD_VAR 0 7
34868: MINUS
34869: PUSH
34870: LD_INT 1
34872: PLUS
34873: PPUSH
34874: LD_VAR 0 9
34878: PUSH
34879: LD_VAR 0 7
34883: ARRAY
34884: PPUSH
34885: CALL_OW 1
34889: ST_TO_ADDR
34890: GO 34846
34892: POP
34893: POP
// end ; tmp := [ ] ;
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: EMPTY
34900: ST_TO_ADDR
// if mode then
34901: LD_VAR 0 5
34905: IFFALSE 34974
// begin for i = 1 to result do
34907: LD_ADDR_VAR 0 7
34911: PUSH
34912: DOUBLE
34913: LD_INT 1
34915: DEC
34916: ST_TO_ADDR
34917: LD_VAR 0 6
34921: PUSH
34922: FOR_TO
34923: IFFALSE 34962
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_VAR 0 9
34934: PPUSH
34935: LD_VAR 0 7
34939: PPUSH
34940: LD_VAR 0 6
34944: PUSH
34945: LD_VAR 0 7
34949: ARRAY
34950: PUSH
34951: LD_INT 1
34953: ARRAY
34954: PPUSH
34955: CALL_OW 1
34959: ST_TO_ADDR
34960: GO 34922
34962: POP
34963: POP
// result := tmp ;
34964: LD_ADDR_VAR 0 6
34968: PUSH
34969: LD_VAR 0 9
34973: ST_TO_ADDR
// end ; end ;
34974: LD_VAR 0 6
34978: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34987: LD_ADDR_VAR 0 5
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: ST_TO_ADDR
// if not x or not y then
35009: LD_VAR 0 2
35013: NOT
35014: PUSH
35015: LD_VAR 0 3
35019: NOT
35020: OR
35021: IFFALSE 35025
// exit ;
35023: GO 36677
// if not range then
35025: LD_VAR 0 4
35029: NOT
35030: IFFALSE 35040
// range := 10 ;
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_INT 10
35039: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35040: LD_ADDR_VAR 0 8
35044: PUSH
35045: LD_INT 81
35047: PUSH
35048: LD_VAR 0 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 92
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_VAR 0 3
35069: PUSH
35070: LD_VAR 0 4
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 21
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: PPUSH
35103: CALL_OW 69
35107: ST_TO_ADDR
// if not tmp then
35108: LD_VAR 0 8
35112: NOT
35113: IFFALSE 35117
// exit ;
35115: GO 36677
// for i in tmp do
35117: LD_ADDR_VAR 0 6
35121: PUSH
35122: LD_VAR 0 8
35126: PUSH
35127: FOR_IN
35128: IFFALSE 36652
// begin points := [ 0 , 0 , 0 ] ;
35130: LD_ADDR_VAR 0 9
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: ST_TO_ADDR
// bpoints := 1 ;
35149: LD_ADDR_VAR 0 10
35153: PUSH
35154: LD_INT 1
35156: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 247
35166: PUSH
35167: LD_INT 1
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35175
35173: GO 35753
35175: POP
// begin if GetClass ( i ) = 1 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 1
35188: EQUAL
35189: IFFALSE 35210
// points := [ 10 , 5 , 3 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 10
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 4
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: IN
35234: IFFALSE 35255
// points := [ 3 , 2 , 1 ] ;
35236: LD_ADDR_VAR 0 9
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35255: LD_VAR 0 6
35259: PPUSH
35260: CALL_OW 257
35264: PUSH
35265: LD_INT 5
35267: EQUAL
35268: IFFALSE 35289
// points := [ 130 , 5 , 2 ] ;
35270: LD_ADDR_VAR 0 9
35274: PUSH
35275: LD_INT 130
35277: PUSH
35278: LD_INT 5
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35289: LD_VAR 0 6
35293: PPUSH
35294: CALL_OW 257
35298: PUSH
35299: LD_INT 8
35301: EQUAL
35302: IFFALSE 35323
// points := [ 35 , 35 , 30 ] ;
35304: LD_ADDR_VAR 0 9
35308: PUSH
35309: LD_INT 35
35311: PUSH
35312: LD_INT 35
35314: PUSH
35315: LD_INT 30
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35323: LD_VAR 0 6
35327: PPUSH
35328: CALL_OW 257
35332: PUSH
35333: LD_INT 9
35335: EQUAL
35336: IFFALSE 35357
// points := [ 20 , 55 , 40 ] ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 20
35345: PUSH
35346: LD_INT 55
35348: PUSH
35349: LD_INT 40
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 257
35366: PUSH
35367: LD_INT 12
35369: PUSH
35370: LD_INT 16
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: IN
35377: IFFALSE 35398
// points := [ 5 , 3 , 2 ] ;
35379: LD_ADDR_VAR 0 9
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: LD_INT 3
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35398: LD_VAR 0 6
35402: PPUSH
35403: CALL_OW 257
35407: PUSH
35408: LD_INT 17
35410: EQUAL
35411: IFFALSE 35432
// points := [ 100 , 50 , 75 ] ;
35413: LD_ADDR_VAR 0 9
35417: PUSH
35418: LD_INT 100
35420: PUSH
35421: LD_INT 50
35423: PUSH
35424: LD_INT 75
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35432: LD_VAR 0 6
35436: PPUSH
35437: CALL_OW 257
35441: PUSH
35442: LD_INT 15
35444: EQUAL
35445: IFFALSE 35466
// points := [ 10 , 5 , 3 ] ;
35447: LD_ADDR_VAR 0 9
35451: PUSH
35452: LD_INT 10
35454: PUSH
35455: LD_INT 5
35457: PUSH
35458: LD_INT 3
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35466: LD_VAR 0 6
35470: PPUSH
35471: CALL_OW 257
35475: PUSH
35476: LD_INT 14
35478: EQUAL
35479: IFFALSE 35500
// points := [ 10 , 0 , 0 ] ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_INT 10
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35500: LD_VAR 0 6
35504: PPUSH
35505: CALL_OW 257
35509: PUSH
35510: LD_INT 11
35512: EQUAL
35513: IFFALSE 35534
// points := [ 30 , 10 , 5 ] ;
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_INT 30
35522: PUSH
35523: LD_INT 10
35525: PUSH
35526: LD_INT 5
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35534: LD_VAR 0 1
35538: PPUSH
35539: LD_INT 5
35541: PPUSH
35542: CALL_OW 321
35546: PUSH
35547: LD_INT 2
35549: EQUAL
35550: IFFALSE 35567
// bpoints := bpoints * 1.8 ;
35552: LD_ADDR_VAR 0 10
35556: PUSH
35557: LD_VAR 0 10
35561: PUSH
35562: LD_REAL  1.80000000000000E+0000
35565: MUL
35566: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35567: LD_VAR 0 6
35571: PPUSH
35572: CALL_OW 257
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: IN
35595: PUSH
35596: LD_VAR 0 1
35600: PPUSH
35601: LD_INT 51
35603: PPUSH
35604: CALL_OW 321
35608: PUSH
35609: LD_INT 2
35611: EQUAL
35612: AND
35613: IFFALSE 35630
// bpoints := bpoints * 1.2 ;
35615: LD_ADDR_VAR 0 10
35619: PUSH
35620: LD_VAR 0 10
35624: PUSH
35625: LD_REAL  1.20000000000000E+0000
35628: MUL
35629: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35630: LD_VAR 0 6
35634: PPUSH
35635: CALL_OW 257
35639: PUSH
35640: LD_INT 5
35642: PUSH
35643: LD_INT 7
35645: PUSH
35646: LD_INT 9
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: IN
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_INT 52
35662: PPUSH
35663: CALL_OW 321
35667: PUSH
35668: LD_INT 2
35670: EQUAL
35671: AND
35672: IFFALSE 35689
// bpoints := bpoints * 1.5 ;
35674: LD_ADDR_VAR 0 10
35678: PUSH
35679: LD_VAR 0 10
35683: PUSH
35684: LD_REAL  1.50000000000000E+0000
35687: MUL
35688: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35689: LD_VAR 0 1
35693: PPUSH
35694: LD_INT 66
35696: PPUSH
35697: CALL_OW 321
35701: PUSH
35702: LD_INT 2
35704: EQUAL
35705: IFFALSE 35722
// bpoints := bpoints * 1.1 ;
35707: LD_ADDR_VAR 0 10
35711: PUSH
35712: LD_VAR 0 10
35716: PUSH
35717: LD_REAL  1.10000000000000E+0000
35720: MUL
35721: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35722: LD_ADDR_VAR 0 10
35726: PUSH
35727: LD_VAR 0 10
35731: PUSH
35732: LD_VAR 0 6
35736: PPUSH
35737: LD_INT 1
35739: PPUSH
35740: CALL_OW 259
35744: PUSH
35745: LD_REAL  1.15000000000000E+0000
35748: MUL
35749: MUL
35750: ST_TO_ADDR
// end ; unit_vehicle :
35751: GO 36581
35753: LD_INT 2
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 36569
35761: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 264
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 42
35777: PUSH
35778: LD_INT 24
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: IN
35786: IFFALSE 35807
// points := [ 25 , 5 , 3 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 25
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 264
35816: PUSH
35817: LD_INT 4
35819: PUSH
35820: LD_INT 43
35822: PUSH
35823: LD_INT 25
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: IN
35831: IFFALSE 35852
// points := [ 40 , 15 , 5 ] ;
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_INT 40
35840: PUSH
35841: LD_INT 15
35843: PUSH
35844: LD_INT 5
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35852: LD_VAR 0 6
35856: PPUSH
35857: CALL_OW 264
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: LD_INT 23
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: IN
35872: IFFALSE 35893
// points := [ 7 , 25 , 8 ] ;
35874: LD_ADDR_VAR 0 9
35878: PUSH
35879: LD_INT 7
35881: PUSH
35882: LD_INT 25
35884: PUSH
35885: LD_INT 8
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35893: LD_VAR 0 6
35897: PPUSH
35898: CALL_OW 264
35902: PUSH
35903: LD_INT 5
35905: PUSH
35906: LD_INT 27
35908: PUSH
35909: LD_INT 44
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: IN
35917: IFFALSE 35938
// points := [ 14 , 50 , 16 ] ;
35919: LD_ADDR_VAR 0 9
35923: PUSH
35924: LD_INT 14
35926: PUSH
35927: LD_INT 50
35929: PUSH
35930: LD_INT 16
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35938: LD_VAR 0 6
35942: PPUSH
35943: CALL_OW 264
35947: PUSH
35948: LD_INT 6
35950: PUSH
35951: LD_INT 46
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: IN
35958: IFFALSE 35979
// points := [ 32 , 120 , 70 ] ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_INT 32
35967: PUSH
35968: LD_INT 120
35970: PUSH
35971: LD_INT 70
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 264
35988: PUSH
35989: LD_INT 7
35991: PUSH
35992: LD_INT 28
35994: PUSH
35995: LD_INT 45
35997: PUSH
35998: LD_EXP 100
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: IN
36009: IFFALSE 36030
// points := [ 35 , 20 , 45 ] ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_INT 35
36018: PUSH
36019: LD_INT 20
36021: PUSH
36022: LD_INT 45
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 264
36039: PUSH
36040: LD_INT 47
36042: PUSH
36043: EMPTY
36044: LIST
36045: IN
36046: IFFALSE 36067
// points := [ 67 , 45 , 75 ] ;
36048: LD_ADDR_VAR 0 9
36052: PUSH
36053: LD_INT 67
36055: PUSH
36056: LD_INT 45
36058: PUSH
36059: LD_INT 75
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36067: LD_VAR 0 6
36071: PPUSH
36072: CALL_OW 264
36076: PUSH
36077: LD_INT 26
36079: PUSH
36080: EMPTY
36081: LIST
36082: IN
36083: IFFALSE 36104
// points := [ 120 , 30 , 80 ] ;
36085: LD_ADDR_VAR 0 9
36089: PUSH
36090: LD_INT 120
36092: PUSH
36093: LD_INT 30
36095: PUSH
36096: LD_INT 80
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36104: LD_VAR 0 6
36108: PPUSH
36109: CALL_OW 264
36113: PUSH
36114: LD_INT 22
36116: PUSH
36117: EMPTY
36118: LIST
36119: IN
36120: IFFALSE 36141
// points := [ 40 , 1 , 1 ] ;
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_INT 40
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36141: LD_VAR 0 6
36145: PPUSH
36146: CALL_OW 264
36150: PUSH
36151: LD_INT 29
36153: PUSH
36154: EMPTY
36155: LIST
36156: IN
36157: IFFALSE 36178
// points := [ 70 , 200 , 400 ] ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_INT 70
36166: PUSH
36167: LD_INT 200
36169: PUSH
36170: LD_INT 400
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 264
36187: PUSH
36188: LD_INT 14
36190: PUSH
36191: LD_INT 53
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: IN
36198: IFFALSE 36219
// points := [ 40 , 10 , 20 ] ;
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: LD_INT 40
36207: PUSH
36208: LD_INT 10
36210: PUSH
36211: LD_INT 20
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36219: LD_VAR 0 6
36223: PPUSH
36224: CALL_OW 264
36228: PUSH
36229: LD_INT 9
36231: PUSH
36232: EMPTY
36233: LIST
36234: IN
36235: IFFALSE 36256
// points := [ 5 , 70 , 20 ] ;
36237: LD_ADDR_VAR 0 9
36241: PUSH
36242: LD_INT 5
36244: PUSH
36245: LD_INT 70
36247: PUSH
36248: LD_INT 20
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36256: LD_VAR 0 6
36260: PPUSH
36261: CALL_OW 264
36265: PUSH
36266: LD_INT 10
36268: PUSH
36269: EMPTY
36270: LIST
36271: IN
36272: IFFALSE 36293
// points := [ 35 , 110 , 70 ] ;
36274: LD_ADDR_VAR 0 9
36278: PUSH
36279: LD_INT 35
36281: PUSH
36282: LD_INT 110
36284: PUSH
36285: LD_INT 70
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36293: LD_VAR 0 6
36297: PPUSH
36298: CALL_OW 265
36302: PUSH
36303: LD_INT 25
36305: EQUAL
36306: IFFALSE 36327
// points := [ 80 , 65 , 100 ] ;
36308: LD_ADDR_VAR 0 9
36312: PUSH
36313: LD_INT 80
36315: PUSH
36316: LD_INT 65
36318: PUSH
36319: LD_INT 100
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36327: LD_VAR 0 6
36331: PPUSH
36332: CALL_OW 263
36336: PUSH
36337: LD_INT 1
36339: EQUAL
36340: IFFALSE 36375
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36342: LD_ADDR_VAR 0 10
36346: PUSH
36347: LD_VAR 0 10
36351: PUSH
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 311
36361: PPUSH
36362: LD_INT 3
36364: PPUSH
36365: CALL_OW 259
36369: PUSH
36370: LD_INT 4
36372: MUL
36373: MUL
36374: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36375: LD_VAR 0 6
36379: PPUSH
36380: CALL_OW 263
36384: PUSH
36385: LD_INT 2
36387: EQUAL
36388: IFFALSE 36439
// begin j := IsControledBy ( i ) ;
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: LD_VAR 0 6
36399: PPUSH
36400: CALL_OW 312
36404: ST_TO_ADDR
// if j then
36405: LD_VAR 0 7
36409: IFFALSE 36439
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36411: LD_ADDR_VAR 0 10
36415: PUSH
36416: LD_VAR 0 10
36420: PUSH
36421: LD_VAR 0 7
36425: PPUSH
36426: LD_INT 3
36428: PPUSH
36429: CALL_OW 259
36433: PUSH
36434: LD_INT 3
36436: MUL
36437: MUL
36438: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36439: LD_VAR 0 6
36443: PPUSH
36444: CALL_OW 264
36448: PUSH
36449: LD_INT 5
36451: PUSH
36452: LD_INT 6
36454: PUSH
36455: LD_INT 46
36457: PUSH
36458: LD_INT 44
36460: PUSH
36461: LD_INT 47
36463: PUSH
36464: LD_INT 45
36466: PUSH
36467: LD_INT 28
36469: PUSH
36470: LD_INT 7
36472: PUSH
36473: LD_INT 27
36475: PUSH
36476: LD_INT 29
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: IN
36491: PUSH
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_INT 52
36499: PPUSH
36500: CALL_OW 321
36504: PUSH
36505: LD_INT 2
36507: EQUAL
36508: AND
36509: IFFALSE 36526
// bpoints := bpoints * 1.2 ;
36511: LD_ADDR_VAR 0 10
36515: PUSH
36516: LD_VAR 0 10
36520: PUSH
36521: LD_REAL  1.20000000000000E+0000
36524: MUL
36525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 6
36538: PUSH
36539: LD_INT 46
36541: PUSH
36542: LD_INT 47
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: IN
36550: IFFALSE 36567
// bpoints := bpoints * 1.2 ;
36552: LD_ADDR_VAR 0 10
36556: PUSH
36557: LD_VAR 0 10
36561: PUSH
36562: LD_REAL  1.20000000000000E+0000
36565: MUL
36566: ST_TO_ADDR
// end ; unit_building :
36567: GO 36581
36569: LD_INT 3
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36580
36577: POP
// ; end ;
36578: GO 36581
36580: POP
// for j = 1 to 3 do
36581: LD_ADDR_VAR 0 7
36585: PUSH
36586: DOUBLE
36587: LD_INT 1
36589: DEC
36590: ST_TO_ADDR
36591: LD_INT 3
36593: PUSH
36594: FOR_TO
36595: IFFALSE 36648
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36597: LD_ADDR_VAR 0 5
36601: PUSH
36602: LD_VAR 0 5
36606: PPUSH
36607: LD_VAR 0 7
36611: PPUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_VAR 0 7
36621: ARRAY
36622: PUSH
36623: LD_VAR 0 9
36627: PUSH
36628: LD_VAR 0 7
36632: ARRAY
36633: PUSH
36634: LD_VAR 0 10
36638: MUL
36639: PLUS
36640: PPUSH
36641: CALL_OW 1
36645: ST_TO_ADDR
36646: GO 36594
36648: POP
36649: POP
// end ;
36650: GO 35127
36652: POP
36653: POP
// result := Replace ( result , 4 , tmp ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: LD_INT 4
36666: PPUSH
36667: LD_VAR 0 8
36671: PPUSH
36672: CALL_OW 1
36676: ST_TO_ADDR
// end ;
36677: LD_VAR 0 5
36681: RET
// export function DangerAtRange ( unit , range ) ; begin
36682: LD_INT 0
36684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36685: LD_ADDR_VAR 0 3
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 255
36699: PPUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 250
36709: PPUSH
36710: LD_VAR 0 1
36714: PPUSH
36715: CALL_OW 251
36719: PPUSH
36720: LD_VAR 0 2
36724: PPUSH
36725: CALL 34979 0 4
36729: ST_TO_ADDR
// end ;
36730: LD_VAR 0 3
36734: RET
// export function DangerInArea ( side , area ) ; begin
36735: LD_INT 0
36737: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36738: LD_ADDR_VAR 0 3
36742: PUSH
36743: LD_VAR 0 2
36747: PPUSH
36748: LD_INT 81
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PPUSH
36760: CALL_OW 70
36764: ST_TO_ADDR
// end ;
36765: LD_VAR 0 3
36769: RET
// export function IsExtension ( b ) ; begin
36770: LD_INT 0
36772: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36773: LD_ADDR_VAR 0 2
36777: PUSH
36778: LD_VAR 0 1
36782: PUSH
36783: LD_INT 23
36785: PUSH
36786: LD_INT 20
36788: PUSH
36789: LD_INT 22
36791: PUSH
36792: LD_INT 17
36794: PUSH
36795: LD_INT 24
36797: PUSH
36798: LD_INT 21
36800: PUSH
36801: LD_INT 19
36803: PUSH
36804: LD_INT 16
36806: PUSH
36807: LD_INT 25
36809: PUSH
36810: LD_INT 18
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: IN
36825: ST_TO_ADDR
// end ;
36826: LD_VAR 0 2
36830: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36831: LD_INT 0
36833: PPUSH
36834: PPUSH
36835: PPUSH
// result := [ ] ;
36836: LD_ADDR_VAR 0 4
36840: PUSH
36841: EMPTY
36842: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36843: LD_ADDR_VAR 0 5
36847: PUSH
36848: LD_VAR 0 2
36852: PPUSH
36853: LD_INT 21
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PPUSH
36863: CALL_OW 70
36867: ST_TO_ADDR
// if not tmp then
36868: LD_VAR 0 5
36872: NOT
36873: IFFALSE 36877
// exit ;
36875: GO 36941
// if checkLink then
36877: LD_VAR 0 3
36881: IFFALSE 36931
// begin for i in tmp do
36883: LD_ADDR_VAR 0 6
36887: PUSH
36888: LD_VAR 0 5
36892: PUSH
36893: FOR_IN
36894: IFFALSE 36929
// if GetBase ( i ) <> base then
36896: LD_VAR 0 6
36900: PPUSH
36901: CALL_OW 274
36905: PUSH
36906: LD_VAR 0 1
36910: NONEQUAL
36911: IFFALSE 36927
// ComLinkToBase ( base , i ) ;
36913: LD_VAR 0 1
36917: PPUSH
36918: LD_VAR 0 6
36922: PPUSH
36923: CALL_OW 169
36927: GO 36893
36929: POP
36930: POP
// end ; result := tmp ;
36931: LD_ADDR_VAR 0 4
36935: PUSH
36936: LD_VAR 0 5
36940: ST_TO_ADDR
// end ;
36941: LD_VAR 0 4
36945: RET
// export function ComComplete ( units , b ) ; var i ; begin
36946: LD_INT 0
36948: PPUSH
36949: PPUSH
// if not units then
36950: LD_VAR 0 1
36954: NOT
36955: IFFALSE 36959
// exit ;
36957: GO 37049
// for i in units do
36959: LD_ADDR_VAR 0 4
36963: PUSH
36964: LD_VAR 0 1
36968: PUSH
36969: FOR_IN
36970: IFFALSE 37047
// if BuildingStatus ( b ) = bs_build then
36972: LD_VAR 0 2
36976: PPUSH
36977: CALL_OW 461
36981: PUSH
36982: LD_INT 1
36984: EQUAL
36985: IFFALSE 37045
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36987: LD_VAR 0 4
36991: PPUSH
36992: LD_STRING h
36994: PUSH
36995: LD_VAR 0 2
36999: PPUSH
37000: CALL_OW 250
37004: PUSH
37005: LD_VAR 0 2
37009: PPUSH
37010: CALL_OW 251
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: PPUSH
37041: CALL_OW 446
37045: GO 36969
37047: POP
37048: POP
// end ;
37049: LD_VAR 0 3
37053: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37054: LD_INT 0
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37062: LD_VAR 0 1
37066: NOT
37067: PUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: CALL_OW 263
37077: PUSH
37078: LD_INT 2
37080: NONEQUAL
37081: OR
37082: IFFALSE 37086
// exit ;
37084: GO 37402
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37086: LD_ADDR_VAR 0 6
37090: PUSH
37091: LD_INT 22
37093: PUSH
37094: LD_VAR 0 1
37098: PPUSH
37099: CALL_OW 255
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 30
37113: PUSH
37114: LD_INT 36
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 34
37123: PUSH
37124: LD_INT 31
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 69
37144: ST_TO_ADDR
// if not tmp then
37145: LD_VAR 0 6
37149: NOT
37150: IFFALSE 37154
// exit ;
37152: GO 37402
// result := [ ] ;
37154: LD_ADDR_VAR 0 2
37158: PUSH
37159: EMPTY
37160: ST_TO_ADDR
// for i in tmp do
37161: LD_ADDR_VAR 0 3
37165: PUSH
37166: LD_VAR 0 6
37170: PUSH
37171: FOR_IN
37172: IFFALSE 37243
// begin t := UnitsInside ( i ) ;
37174: LD_ADDR_VAR 0 4
37178: PUSH
37179: LD_VAR 0 3
37183: PPUSH
37184: CALL_OW 313
37188: ST_TO_ADDR
// if t then
37189: LD_VAR 0 4
37193: IFFALSE 37241
// for j in t do
37195: LD_ADDR_VAR 0 7
37199: PUSH
37200: LD_VAR 0 4
37204: PUSH
37205: FOR_IN
37206: IFFALSE 37239
// result := Replace ( result , result + 1 , j ) ;
37208: LD_ADDR_VAR 0 2
37212: PUSH
37213: LD_VAR 0 2
37217: PPUSH
37218: LD_VAR 0 2
37222: PUSH
37223: LD_INT 1
37225: PLUS
37226: PPUSH
37227: LD_VAR 0 7
37231: PPUSH
37232: CALL_OW 1
37236: ST_TO_ADDR
37237: GO 37205
37239: POP
37240: POP
// end ;
37241: GO 37171
37243: POP
37244: POP
// if not result then
37245: LD_VAR 0 2
37249: NOT
37250: IFFALSE 37254
// exit ;
37252: GO 37402
// mech := result [ 1 ] ;
37254: LD_ADDR_VAR 0 5
37258: PUSH
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: ST_TO_ADDR
// if result > 1 then
37268: LD_VAR 0 2
37272: PUSH
37273: LD_INT 1
37275: GREATER
37276: IFFALSE 37388
// begin for i = 2 to result do
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: DOUBLE
37284: LD_INT 2
37286: DEC
37287: ST_TO_ADDR
37288: LD_VAR 0 2
37292: PUSH
37293: FOR_TO
37294: IFFALSE 37386
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37296: LD_ADDR_VAR 0 4
37300: PUSH
37301: LD_VAR 0 2
37305: PUSH
37306: LD_VAR 0 3
37310: ARRAY
37311: PPUSH
37312: LD_INT 3
37314: PPUSH
37315: CALL_OW 259
37319: PUSH
37320: LD_VAR 0 2
37324: PUSH
37325: LD_VAR 0 3
37329: ARRAY
37330: PPUSH
37331: CALL_OW 432
37335: MINUS
37336: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37337: LD_VAR 0 4
37341: PUSH
37342: LD_VAR 0 5
37346: PPUSH
37347: LD_INT 3
37349: PPUSH
37350: CALL_OW 259
37354: PUSH
37355: LD_VAR 0 5
37359: PPUSH
37360: CALL_OW 432
37364: MINUS
37365: GREATEREQUAL
37366: IFFALSE 37384
// mech := result [ i ] ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_VAR 0 2
37377: PUSH
37378: LD_VAR 0 3
37382: ARRAY
37383: ST_TO_ADDR
// end ;
37384: GO 37293
37386: POP
37387: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37388: LD_VAR 0 1
37392: PPUSH
37393: LD_VAR 0 5
37397: PPUSH
37398: CALL_OW 135
// end ;
37402: LD_VAR 0 2
37406: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37407: LD_INT 0
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
// result := [ ] ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: EMPTY
37428: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 266
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: IN
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 39088
// if name then
37454: LD_VAR 0 3
37458: IFFALSE 37474
// SetBName ( base_dep , name ) ;
37460: LD_VAR 0 1
37464: PPUSH
37465: LD_VAR 0 3
37469: PPUSH
37470: CALL_OW 500
// base := GetBase ( base_dep ) ;
37474: LD_ADDR_VAR 0 15
37478: PUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 274
37488: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37489: LD_ADDR_VAR 0 16
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 255
37503: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37504: LD_ADDR_VAR 0 17
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 248
37518: ST_TO_ADDR
// if sources then
37519: LD_VAR 0 5
37523: IFFALSE 37570
// for i = 1 to 3 do
37525: LD_ADDR_VAR 0 8
37529: PUSH
37530: DOUBLE
37531: LD_INT 1
37533: DEC
37534: ST_TO_ADDR
37535: LD_INT 3
37537: PUSH
37538: FOR_TO
37539: IFFALSE 37568
// AddResourceType ( base , i , sources [ i ] ) ;
37541: LD_VAR 0 15
37545: PPUSH
37546: LD_VAR 0 8
37550: PPUSH
37551: LD_VAR 0 5
37555: PUSH
37556: LD_VAR 0 8
37560: ARRAY
37561: PPUSH
37562: CALL_OW 276
37566: GO 37538
37568: POP
37569: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37570: LD_ADDR_VAR 0 18
37574: PUSH
37575: LD_VAR 0 15
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: LD_INT 1
37587: PPUSH
37588: CALL 36831 0 3
37592: ST_TO_ADDR
// InitHc ;
37593: CALL_OW 19
// InitUc ;
37597: CALL_OW 18
// uc_side := side ;
37601: LD_ADDR_OWVAR 20
37605: PUSH
37606: LD_VAR 0 16
37610: ST_TO_ADDR
// uc_nation := nation ;
37611: LD_ADDR_OWVAR 21
37615: PUSH
37616: LD_VAR 0 17
37620: ST_TO_ADDR
// if buildings then
37621: LD_VAR 0 18
37625: IFFALSE 38947
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37627: LD_ADDR_VAR 0 19
37631: PUSH
37632: LD_VAR 0 18
37636: PPUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 30
37642: PUSH
37643: LD_INT 29
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 30
37652: PUSH
37653: LD_INT 30
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: PPUSH
37665: CALL_OW 72
37669: ST_TO_ADDR
// if tmp then
37670: LD_VAR 0 19
37674: IFFALSE 37722
// for i in tmp do
37676: LD_ADDR_VAR 0 8
37680: PUSH
37681: LD_VAR 0 19
37685: PUSH
37686: FOR_IN
37687: IFFALSE 37720
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37689: LD_VAR 0 8
37693: PPUSH
37694: CALL_OW 250
37698: PPUSH
37699: LD_VAR 0 8
37703: PPUSH
37704: CALL_OW 251
37708: PPUSH
37709: LD_VAR 0 16
37713: PPUSH
37714: CALL_OW 441
37718: GO 37686
37720: POP
37721: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37722: LD_VAR 0 18
37726: PPUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 30
37732: PUSH
37733: LD_INT 32
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 30
37742: PUSH
37743: LD_INT 33
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 72
37759: IFFALSE 37847
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37761: LD_ADDR_VAR 0 8
37765: PUSH
37766: LD_VAR 0 18
37770: PPUSH
37771: LD_INT 2
37773: PUSH
37774: LD_INT 30
37776: PUSH
37777: LD_INT 32
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 30
37786: PUSH
37787: LD_INT 33
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: PPUSH
37799: CALL_OW 72
37803: PUSH
37804: FOR_IN
37805: IFFALSE 37845
// begin if not GetBWeapon ( i ) then
37807: LD_VAR 0 8
37811: PPUSH
37812: CALL_OW 269
37816: NOT
37817: IFFALSE 37843
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37819: LD_VAR 0 8
37823: PPUSH
37824: LD_VAR 0 8
37828: PPUSH
37829: LD_VAR 0 2
37833: PPUSH
37834: CALL 39093 0 2
37838: PPUSH
37839: CALL_OW 431
// end ;
37843: GO 37804
37845: POP
37846: POP
// end ; for i = 1 to personel do
37847: LD_ADDR_VAR 0 8
37851: PUSH
37852: DOUBLE
37853: LD_INT 1
37855: DEC
37856: ST_TO_ADDR
37857: LD_VAR 0 6
37861: PUSH
37862: FOR_TO
37863: IFFALSE 38927
// begin if i > 4 then
37865: LD_VAR 0 8
37869: PUSH
37870: LD_INT 4
37872: GREATER
37873: IFFALSE 37877
// break ;
37875: GO 38927
// case i of 1 :
37877: LD_VAR 0 8
37881: PUSH
37882: LD_INT 1
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37970
37890: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37891: LD_ADDR_VAR 0 12
37895: PUSH
37896: LD_VAR 0 18
37900: PPUSH
37901: LD_INT 22
37903: PUSH
37904: LD_VAR 0 16
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 58
37915: PUSH
37916: EMPTY
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 30
37924: PUSH
37925: LD_INT 32
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 30
37934: PUSH
37935: LD_INT 4
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 30
37944: PUSH
37945: LD_INT 5
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: PPUSH
37963: CALL_OW 72
37967: ST_TO_ADDR
37968: GO 38192
37970: LD_INT 2
37972: DOUBLE
37973: EQUAL
37974: IFTRUE 37978
37976: GO 38040
37978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37979: LD_ADDR_VAR 0 12
37983: PUSH
37984: LD_VAR 0 18
37988: PPUSH
37989: LD_INT 22
37991: PUSH
37992: LD_VAR 0 16
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 30
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 30
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PPUSH
38033: CALL_OW 72
38037: ST_TO_ADDR
38038: GO 38192
38040: LD_INT 3
38042: DOUBLE
38043: EQUAL
38044: IFTRUE 38048
38046: GO 38110
38048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38049: LD_ADDR_VAR 0 12
38053: PUSH
38054: LD_VAR 0 18
38058: PPUSH
38059: LD_INT 22
38061: PUSH
38062: LD_VAR 0 16
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: LD_INT 30
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 30
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PPUSH
38103: CALL_OW 72
38107: ST_TO_ADDR
38108: GO 38192
38110: LD_INT 4
38112: DOUBLE
38113: EQUAL
38114: IFTRUE 38118
38116: GO 38191
38118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38119: LD_ADDR_VAR 0 12
38123: PUSH
38124: LD_VAR 0 18
38128: PPUSH
38129: LD_INT 22
38131: PUSH
38132: LD_VAR 0 16
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 30
38146: PUSH
38147: LD_INT 6
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 30
38156: PUSH
38157: LD_INT 7
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 30
38166: PUSH
38167: LD_INT 8
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PPUSH
38184: CALL_OW 72
38188: ST_TO_ADDR
38189: GO 38192
38191: POP
// if i = 1 then
38192: LD_VAR 0 8
38196: PUSH
38197: LD_INT 1
38199: EQUAL
38200: IFFALSE 38311
// begin tmp := [ ] ;
38202: LD_ADDR_VAR 0 19
38206: PUSH
38207: EMPTY
38208: ST_TO_ADDR
// for j in f do
38209: LD_ADDR_VAR 0 9
38213: PUSH
38214: LD_VAR 0 12
38218: PUSH
38219: FOR_IN
38220: IFFALSE 38293
// if GetBType ( j ) = b_bunker then
38222: LD_VAR 0 9
38226: PPUSH
38227: CALL_OW 266
38231: PUSH
38232: LD_INT 32
38234: EQUAL
38235: IFFALSE 38262
// tmp := Insert ( tmp , 1 , j ) else
38237: LD_ADDR_VAR 0 19
38241: PUSH
38242: LD_VAR 0 19
38246: PPUSH
38247: LD_INT 1
38249: PPUSH
38250: LD_VAR 0 9
38254: PPUSH
38255: CALL_OW 2
38259: ST_TO_ADDR
38260: GO 38291
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38262: LD_ADDR_VAR 0 19
38266: PUSH
38267: LD_VAR 0 19
38271: PPUSH
38272: LD_VAR 0 19
38276: PUSH
38277: LD_INT 1
38279: PLUS
38280: PPUSH
38281: LD_VAR 0 9
38285: PPUSH
38286: CALL_OW 2
38290: ST_TO_ADDR
38291: GO 38219
38293: POP
38294: POP
// if tmp then
38295: LD_VAR 0 19
38299: IFFALSE 38311
// f := tmp ;
38301: LD_ADDR_VAR 0 12
38305: PUSH
38306: LD_VAR 0 19
38310: ST_TO_ADDR
// end ; x := personel [ i ] ;
38311: LD_ADDR_VAR 0 13
38315: PUSH
38316: LD_VAR 0 6
38320: PUSH
38321: LD_VAR 0 8
38325: ARRAY
38326: ST_TO_ADDR
// if x = - 1 then
38327: LD_VAR 0 13
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: EQUAL
38336: IFFALSE 38545
// begin for j in f do
38338: LD_ADDR_VAR 0 9
38342: PUSH
38343: LD_VAR 0 12
38347: PUSH
38348: FOR_IN
38349: IFFALSE 38541
// repeat InitHc ;
38351: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38355: LD_VAR 0 9
38359: PPUSH
38360: CALL_OW 266
38364: PUSH
38365: LD_INT 5
38367: EQUAL
38368: IFFALSE 38438
// begin if UnitsInside ( j ) < 3 then
38370: LD_VAR 0 9
38374: PPUSH
38375: CALL_OW 313
38379: PUSH
38380: LD_INT 3
38382: LESS
38383: IFFALSE 38419
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38385: LD_INT 0
38387: PPUSH
38388: LD_INT 5
38390: PUSH
38391: LD_INT 8
38393: PUSH
38394: LD_INT 9
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: LD_VAR 0 17
38406: ARRAY
38407: PPUSH
38408: LD_VAR 0 4
38412: PPUSH
38413: CALL_OW 380
38417: GO 38436
// PrepareHuman ( false , i , skill ) ;
38419: LD_INT 0
38421: PPUSH
38422: LD_VAR 0 8
38426: PPUSH
38427: LD_VAR 0 4
38431: PPUSH
38432: CALL_OW 380
// end else
38436: GO 38455
// PrepareHuman ( false , i , skill ) ;
38438: LD_INT 0
38440: PPUSH
38441: LD_VAR 0 8
38445: PPUSH
38446: LD_VAR 0 4
38450: PPUSH
38451: CALL_OW 380
// un := CreateHuman ;
38455: LD_ADDR_VAR 0 14
38459: PUSH
38460: CALL_OW 44
38464: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38465: LD_ADDR_VAR 0 7
38469: PUSH
38470: LD_VAR 0 7
38474: PPUSH
38475: LD_INT 1
38477: PPUSH
38478: LD_VAR 0 14
38482: PPUSH
38483: CALL_OW 2
38487: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38488: LD_VAR 0 14
38492: PPUSH
38493: LD_VAR 0 9
38497: PPUSH
38498: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38502: LD_VAR 0 9
38506: PPUSH
38507: CALL_OW 313
38511: PUSH
38512: LD_INT 6
38514: EQUAL
38515: PUSH
38516: LD_VAR 0 9
38520: PPUSH
38521: CALL_OW 266
38525: PUSH
38526: LD_INT 32
38528: PUSH
38529: LD_INT 31
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: IN
38536: OR
38537: IFFALSE 38351
38539: GO 38348
38541: POP
38542: POP
// end else
38543: GO 38925
// for j = 1 to x do
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: DOUBLE
38551: LD_INT 1
38553: DEC
38554: ST_TO_ADDR
38555: LD_VAR 0 13
38559: PUSH
38560: FOR_TO
38561: IFFALSE 38923
// begin InitHc ;
38563: CALL_OW 19
// if not f then
38567: LD_VAR 0 12
38571: NOT
38572: IFFALSE 38661
// begin PrepareHuman ( false , i , skill ) ;
38574: LD_INT 0
38576: PPUSH
38577: LD_VAR 0 8
38581: PPUSH
38582: LD_VAR 0 4
38586: PPUSH
38587: CALL_OW 380
// un := CreateHuman ;
38591: LD_ADDR_VAR 0 14
38595: PUSH
38596: CALL_OW 44
38600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38601: LD_ADDR_VAR 0 7
38605: PUSH
38606: LD_VAR 0 7
38610: PPUSH
38611: LD_INT 1
38613: PPUSH
38614: LD_VAR 0 14
38618: PPUSH
38619: CALL_OW 2
38623: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38624: LD_VAR 0 14
38628: PPUSH
38629: LD_VAR 0 1
38633: PPUSH
38634: CALL_OW 250
38638: PPUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 251
38648: PPUSH
38649: LD_INT 10
38651: PPUSH
38652: LD_INT 0
38654: PPUSH
38655: CALL_OW 50
// continue ;
38659: GO 38560
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38661: LD_VAR 0 12
38665: PUSH
38666: LD_INT 1
38668: ARRAY
38669: PPUSH
38670: CALL_OW 313
38674: PUSH
38675: LD_VAR 0 12
38679: PUSH
38680: LD_INT 1
38682: ARRAY
38683: PPUSH
38684: CALL_OW 266
38688: PUSH
38689: LD_INT 32
38691: PUSH
38692: LD_INT 31
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: IN
38699: AND
38700: PUSH
38701: LD_VAR 0 12
38705: PUSH
38706: LD_INT 1
38708: ARRAY
38709: PPUSH
38710: CALL_OW 313
38714: PUSH
38715: LD_INT 6
38717: EQUAL
38718: OR
38719: IFFALSE 38739
// f := Delete ( f , 1 ) ;
38721: LD_ADDR_VAR 0 12
38725: PUSH
38726: LD_VAR 0 12
38730: PPUSH
38731: LD_INT 1
38733: PPUSH
38734: CALL_OW 3
38738: ST_TO_ADDR
// if not f then
38739: LD_VAR 0 12
38743: NOT
38744: IFFALSE 38762
// begin x := x + 2 ;
38746: LD_ADDR_VAR 0 13
38750: PUSH
38751: LD_VAR 0 13
38755: PUSH
38756: LD_INT 2
38758: PLUS
38759: ST_TO_ADDR
// continue ;
38760: GO 38560
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38762: LD_VAR 0 12
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: PPUSH
38771: CALL_OW 266
38775: PUSH
38776: LD_INT 5
38778: EQUAL
38779: IFFALSE 38853
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38781: LD_VAR 0 12
38785: PUSH
38786: LD_INT 1
38788: ARRAY
38789: PPUSH
38790: CALL_OW 313
38794: PUSH
38795: LD_INT 3
38797: LESS
38798: IFFALSE 38834
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38800: LD_INT 0
38802: PPUSH
38803: LD_INT 5
38805: PUSH
38806: LD_INT 8
38808: PUSH
38809: LD_INT 9
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: PUSH
38817: LD_VAR 0 17
38821: ARRAY
38822: PPUSH
38823: LD_VAR 0 4
38827: PPUSH
38828: CALL_OW 380
38832: GO 38851
// PrepareHuman ( false , i , skill ) ;
38834: LD_INT 0
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: LD_VAR 0 4
38846: PPUSH
38847: CALL_OW 380
// end else
38851: GO 38870
// PrepareHuman ( false , i , skill ) ;
38853: LD_INT 0
38855: PPUSH
38856: LD_VAR 0 8
38860: PPUSH
38861: LD_VAR 0 4
38865: PPUSH
38866: CALL_OW 380
// un := CreateHuman ;
38870: LD_ADDR_VAR 0 14
38874: PUSH
38875: CALL_OW 44
38879: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38880: LD_ADDR_VAR 0 7
38884: PUSH
38885: LD_VAR 0 7
38889: PPUSH
38890: LD_INT 1
38892: PPUSH
38893: LD_VAR 0 14
38897: PPUSH
38898: CALL_OW 2
38902: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38903: LD_VAR 0 14
38907: PPUSH
38908: LD_VAR 0 12
38912: PUSH
38913: LD_INT 1
38915: ARRAY
38916: PPUSH
38917: CALL_OW 52
// end ;
38921: GO 38560
38923: POP
38924: POP
// end ;
38925: GO 37862
38927: POP
38928: POP
// result := result ^ buildings ;
38929: LD_ADDR_VAR 0 7
38933: PUSH
38934: LD_VAR 0 7
38938: PUSH
38939: LD_VAR 0 18
38943: ADD
38944: ST_TO_ADDR
// end else
38945: GO 39088
// begin for i = 1 to personel do
38947: LD_ADDR_VAR 0 8
38951: PUSH
38952: DOUBLE
38953: LD_INT 1
38955: DEC
38956: ST_TO_ADDR
38957: LD_VAR 0 6
38961: PUSH
38962: FOR_TO
38963: IFFALSE 39086
// begin if i > 4 then
38965: LD_VAR 0 8
38969: PUSH
38970: LD_INT 4
38972: GREATER
38973: IFFALSE 38977
// break ;
38975: GO 39086
// x := personel [ i ] ;
38977: LD_ADDR_VAR 0 13
38981: PUSH
38982: LD_VAR 0 6
38986: PUSH
38987: LD_VAR 0 8
38991: ARRAY
38992: ST_TO_ADDR
// if x = - 1 then
38993: LD_VAR 0 13
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: EQUAL
39002: IFFALSE 39006
// continue ;
39004: GO 38962
// PrepareHuman ( false , i , skill ) ;
39006: LD_INT 0
39008: PPUSH
39009: LD_VAR 0 8
39013: PPUSH
39014: LD_VAR 0 4
39018: PPUSH
39019: CALL_OW 380
// un := CreateHuman ;
39023: LD_ADDR_VAR 0 14
39027: PUSH
39028: CALL_OW 44
39032: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39033: LD_VAR 0 14
39037: PPUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 250
39047: PPUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 251
39057: PPUSH
39058: LD_INT 10
39060: PPUSH
39061: LD_INT 0
39063: PPUSH
39064: CALL_OW 50
// result := result ^ un ;
39068: LD_ADDR_VAR 0 7
39072: PUSH
39073: LD_VAR 0 7
39077: PUSH
39078: LD_VAR 0 14
39082: ADD
39083: ST_TO_ADDR
// end ;
39084: GO 38962
39086: POP
39087: POP
// end ; end ;
39088: LD_VAR 0 7
39092: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39093: LD_INT 0
39095: PPUSH
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
// result := false ;
39111: LD_ADDR_VAR 0 3
39115: PUSH
39116: LD_INT 0
39118: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39119: LD_VAR 0 1
39123: NOT
39124: PUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: CALL_OW 266
39134: PUSH
39135: LD_INT 32
39137: PUSH
39138: LD_INT 33
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: IN
39145: NOT
39146: OR
39147: IFFALSE 39151
// exit ;
39149: GO 40260
// nat := GetNation ( tower ) ;
39151: LD_ADDR_VAR 0 12
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 248
39165: ST_TO_ADDR
// side := GetSide ( tower ) ;
39166: LD_ADDR_VAR 0 16
39170: PUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: CALL_OW 255
39180: ST_TO_ADDR
// x := GetX ( tower ) ;
39181: LD_ADDR_VAR 0 10
39185: PUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 250
39195: ST_TO_ADDR
// y := GetY ( tower ) ;
39196: LD_ADDR_VAR 0 11
39200: PUSH
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL_OW 251
39210: ST_TO_ADDR
// if not x or not y then
39211: LD_VAR 0 10
39215: NOT
39216: PUSH
39217: LD_VAR 0 11
39221: NOT
39222: OR
39223: IFFALSE 39227
// exit ;
39225: GO 40260
// weapon := 0 ;
39227: LD_ADDR_VAR 0 18
39231: PUSH
39232: LD_INT 0
39234: ST_TO_ADDR
// fac_list := [ ] ;
39235: LD_ADDR_VAR 0 17
39239: PUSH
39240: EMPTY
39241: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39242: LD_ADDR_VAR 0 6
39246: PUSH
39247: LD_VAR 0 1
39251: PPUSH
39252: CALL_OW 274
39256: PPUSH
39257: LD_VAR 0 2
39261: PPUSH
39262: LD_INT 0
39264: PPUSH
39265: CALL 36831 0 3
39269: PPUSH
39270: LD_INT 30
39272: PUSH
39273: LD_INT 3
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PPUSH
39280: CALL_OW 72
39284: ST_TO_ADDR
// if not factories then
39285: LD_VAR 0 6
39289: NOT
39290: IFFALSE 39294
// exit ;
39292: GO 40260
// for i in factories do
39294: LD_ADDR_VAR 0 8
39298: PUSH
39299: LD_VAR 0 6
39303: PUSH
39304: FOR_IN
39305: IFFALSE 39330
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39307: LD_ADDR_VAR 0 17
39311: PUSH
39312: LD_VAR 0 17
39316: PUSH
39317: LD_VAR 0 8
39321: PPUSH
39322: CALL_OW 478
39326: UNION
39327: ST_TO_ADDR
39328: GO 39304
39330: POP
39331: POP
// if not fac_list then
39332: LD_VAR 0 17
39336: NOT
39337: IFFALSE 39341
// exit ;
39339: GO 40260
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39341: LD_ADDR_VAR 0 5
39345: PUSH
39346: LD_INT 4
39348: PUSH
39349: LD_INT 5
39351: PUSH
39352: LD_INT 9
39354: PUSH
39355: LD_INT 10
39357: PUSH
39358: LD_INT 6
39360: PUSH
39361: LD_INT 7
39363: PUSH
39364: LD_INT 11
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 27
39378: PUSH
39379: LD_INT 28
39381: PUSH
39382: LD_INT 26
39384: PUSH
39385: LD_INT 30
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 43
39396: PUSH
39397: LD_INT 44
39399: PUSH
39400: LD_INT 46
39402: PUSH
39403: LD_INT 45
39405: PUSH
39406: LD_INT 47
39408: PUSH
39409: LD_INT 49
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: PUSH
39425: LD_VAR 0 12
39429: ARRAY
39430: ST_TO_ADDR
// list := list isect fac_list ;
39431: LD_ADDR_VAR 0 5
39435: PUSH
39436: LD_VAR 0 5
39440: PUSH
39441: LD_VAR 0 17
39445: ISECT
39446: ST_TO_ADDR
// if not list then
39447: LD_VAR 0 5
39451: NOT
39452: IFFALSE 39456
// exit ;
39454: GO 40260
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39456: LD_VAR 0 12
39460: PUSH
39461: LD_INT 3
39463: EQUAL
39464: PUSH
39465: LD_INT 49
39467: PUSH
39468: LD_VAR 0 5
39472: IN
39473: AND
39474: PUSH
39475: LD_INT 31
39477: PPUSH
39478: LD_VAR 0 16
39482: PPUSH
39483: CALL_OW 321
39487: PUSH
39488: LD_INT 2
39490: EQUAL
39491: AND
39492: IFFALSE 39552
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39494: LD_INT 22
39496: PUSH
39497: LD_VAR 0 16
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 35
39508: PUSH
39509: LD_INT 49
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 91
39518: PUSH
39519: LD_VAR 0 1
39523: PUSH
39524: LD_INT 10
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: PPUSH
39537: CALL_OW 69
39541: NOT
39542: IFFALSE 39552
// weapon := ru_time_lapser ;
39544: LD_ADDR_VAR 0 18
39548: PUSH
39549: LD_INT 49
39551: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39552: LD_VAR 0 12
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: IN
39567: PUSH
39568: LD_INT 11
39570: PUSH
39571: LD_VAR 0 5
39575: IN
39576: PUSH
39577: LD_INT 30
39579: PUSH
39580: LD_VAR 0 5
39584: IN
39585: OR
39586: AND
39587: PUSH
39588: LD_INT 6
39590: PPUSH
39591: LD_VAR 0 16
39595: PPUSH
39596: CALL_OW 321
39600: PUSH
39601: LD_INT 2
39603: EQUAL
39604: AND
39605: IFFALSE 39770
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39607: LD_INT 22
39609: PUSH
39610: LD_VAR 0 16
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 35
39624: PUSH
39625: LD_INT 11
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 35
39634: PUSH
39635: LD_INT 30
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 91
39649: PUSH
39650: LD_VAR 0 1
39654: PUSH
39655: LD_INT 18
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: PPUSH
39668: CALL_OW 69
39672: NOT
39673: PUSH
39674: LD_INT 22
39676: PUSH
39677: LD_VAR 0 16
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: LD_INT 30
39691: PUSH
39692: LD_INT 32
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 30
39701: PUSH
39702: LD_INT 33
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 91
39716: PUSH
39717: LD_VAR 0 1
39721: PUSH
39722: LD_INT 12
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: PUSH
39735: EMPTY
39736: LIST
39737: PPUSH
39738: CALL_OW 69
39742: PUSH
39743: LD_INT 2
39745: GREATER
39746: AND
39747: IFFALSE 39770
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39749: LD_ADDR_VAR 0 18
39753: PUSH
39754: LD_INT 11
39756: PUSH
39757: LD_INT 30
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_VAR 0 12
39768: ARRAY
39769: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39770: LD_VAR 0 18
39774: NOT
39775: PUSH
39776: LD_INT 40
39778: PPUSH
39779: LD_VAR 0 16
39783: PPUSH
39784: CALL_OW 321
39788: PUSH
39789: LD_INT 2
39791: EQUAL
39792: AND
39793: PUSH
39794: LD_INT 7
39796: PUSH
39797: LD_VAR 0 5
39801: IN
39802: PUSH
39803: LD_INT 28
39805: PUSH
39806: LD_VAR 0 5
39810: IN
39811: OR
39812: PUSH
39813: LD_INT 45
39815: PUSH
39816: LD_VAR 0 5
39820: IN
39821: OR
39822: AND
39823: IFFALSE 40077
// begin hex := GetHexInfo ( x , y ) ;
39825: LD_ADDR_VAR 0 4
39829: PUSH
39830: LD_VAR 0 10
39834: PPUSH
39835: LD_VAR 0 11
39839: PPUSH
39840: CALL_OW 546
39844: ST_TO_ADDR
// if hex [ 1 ] then
39845: LD_VAR 0 4
39849: PUSH
39850: LD_INT 1
39852: ARRAY
39853: IFFALSE 39857
// exit ;
39855: GO 40260
// height := hex [ 2 ] ;
39857: LD_ADDR_VAR 0 15
39861: PUSH
39862: LD_VAR 0 4
39866: PUSH
39867: LD_INT 2
39869: ARRAY
39870: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39871: LD_ADDR_VAR 0 14
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: LD_INT 5
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
// for i in tmp do
39894: LD_ADDR_VAR 0 8
39898: PUSH
39899: LD_VAR 0 14
39903: PUSH
39904: FOR_IN
39905: IFFALSE 40075
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39907: LD_ADDR_VAR 0 9
39911: PUSH
39912: LD_VAR 0 10
39916: PPUSH
39917: LD_VAR 0 8
39921: PPUSH
39922: LD_INT 5
39924: PPUSH
39925: CALL_OW 272
39929: PUSH
39930: LD_VAR 0 11
39934: PPUSH
39935: LD_VAR 0 8
39939: PPUSH
39940: LD_INT 5
39942: PPUSH
39943: CALL_OW 273
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39952: LD_VAR 0 9
39956: PUSH
39957: LD_INT 1
39959: ARRAY
39960: PPUSH
39961: LD_VAR 0 9
39965: PUSH
39966: LD_INT 2
39968: ARRAY
39969: PPUSH
39970: CALL_OW 488
39974: IFFALSE 40073
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39976: LD_ADDR_VAR 0 4
39980: PUSH
39981: LD_VAR 0 9
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 9
39994: PUSH
39995: LD_INT 2
39997: ARRAY
39998: PPUSH
39999: CALL_OW 546
40003: ST_TO_ADDR
// if hex [ 1 ] then
40004: LD_VAR 0 4
40008: PUSH
40009: LD_INT 1
40011: ARRAY
40012: IFFALSE 40016
// continue ;
40014: GO 39904
// h := hex [ 2 ] ;
40016: LD_ADDR_VAR 0 13
40020: PUSH
40021: LD_VAR 0 4
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: ST_TO_ADDR
// if h + 7 < height then
40030: LD_VAR 0 13
40034: PUSH
40035: LD_INT 7
40037: PLUS
40038: PUSH
40039: LD_VAR 0 15
40043: LESS
40044: IFFALSE 40073
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40046: LD_ADDR_VAR 0 18
40050: PUSH
40051: LD_INT 7
40053: PUSH
40054: LD_INT 28
40056: PUSH
40057: LD_INT 45
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: PUSH
40065: LD_VAR 0 12
40069: ARRAY
40070: ST_TO_ADDR
// break ;
40071: GO 40075
// end ; end ; end ;
40073: GO 39904
40075: POP
40076: POP
// end ; if not weapon then
40077: LD_VAR 0 18
40081: NOT
40082: IFFALSE 40142
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40084: LD_ADDR_VAR 0 5
40088: PUSH
40089: LD_VAR 0 5
40093: PUSH
40094: LD_INT 11
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 49
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: DIFF
40108: ST_TO_ADDR
// if not list then
40109: LD_VAR 0 5
40113: NOT
40114: IFFALSE 40118
// exit ;
40116: GO 40260
// weapon := list [ rand ( 1 , list ) ] ;
40118: LD_ADDR_VAR 0 18
40122: PUSH
40123: LD_VAR 0 5
40127: PUSH
40128: LD_INT 1
40130: PPUSH
40131: LD_VAR 0 5
40135: PPUSH
40136: CALL_OW 12
40140: ARRAY
40141: ST_TO_ADDR
// end ; if weapon then
40142: LD_VAR 0 18
40146: IFFALSE 40260
// begin tmp := CostOfWeapon ( weapon ) ;
40148: LD_ADDR_VAR 0 14
40152: PUSH
40153: LD_VAR 0 18
40157: PPUSH
40158: CALL_OW 451
40162: ST_TO_ADDR
// j := GetBase ( tower ) ;
40163: LD_ADDR_VAR 0 9
40167: PUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 274
40177: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40178: LD_VAR 0 9
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL_OW 275
40190: PUSH
40191: LD_VAR 0 14
40195: PUSH
40196: LD_INT 1
40198: ARRAY
40199: GREATEREQUAL
40200: PUSH
40201: LD_VAR 0 9
40205: PPUSH
40206: LD_INT 2
40208: PPUSH
40209: CALL_OW 275
40213: PUSH
40214: LD_VAR 0 14
40218: PUSH
40219: LD_INT 2
40221: ARRAY
40222: GREATEREQUAL
40223: AND
40224: PUSH
40225: LD_VAR 0 9
40229: PPUSH
40230: LD_INT 3
40232: PPUSH
40233: CALL_OW 275
40237: PUSH
40238: LD_VAR 0 14
40242: PUSH
40243: LD_INT 3
40245: ARRAY
40246: GREATEREQUAL
40247: AND
40248: IFFALSE 40260
// result := weapon ;
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: LD_VAR 0 18
40259: ST_TO_ADDR
// end ; end ;
40260: LD_VAR 0 3
40264: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40265: LD_INT 0
40267: PPUSH
40268: PPUSH
// result := true ;
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 1
40276: ST_TO_ADDR
// if array1 = array2 then
40277: LD_VAR 0 1
40281: PUSH
40282: LD_VAR 0 2
40286: EQUAL
40287: IFFALSE 40347
// begin for i = 1 to array1 do
40289: LD_ADDR_VAR 0 4
40293: PUSH
40294: DOUBLE
40295: LD_INT 1
40297: DEC
40298: ST_TO_ADDR
40299: LD_VAR 0 1
40303: PUSH
40304: FOR_TO
40305: IFFALSE 40343
// if array1 [ i ] <> array2 [ i ] then
40307: LD_VAR 0 1
40311: PUSH
40312: LD_VAR 0 4
40316: ARRAY
40317: PUSH
40318: LD_VAR 0 2
40322: PUSH
40323: LD_VAR 0 4
40327: ARRAY
40328: NONEQUAL
40329: IFFALSE 40341
// begin result := false ;
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: LD_INT 0
40338: ST_TO_ADDR
// break ;
40339: GO 40343
// end ;
40341: GO 40304
40343: POP
40344: POP
// end else
40345: GO 40355
// result := false ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 0
40354: ST_TO_ADDR
// end ;
40355: LD_VAR 0 3
40359: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40360: LD_INT 0
40362: PPUSH
40363: PPUSH
// if not array1 or not array2 then
40364: LD_VAR 0 1
40368: NOT
40369: PUSH
40370: LD_VAR 0 2
40374: NOT
40375: OR
40376: IFFALSE 40380
// exit ;
40378: GO 40444
// result := true ;
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 1
40387: ST_TO_ADDR
// for i = 1 to array1 do
40388: LD_ADDR_VAR 0 4
40392: PUSH
40393: DOUBLE
40394: LD_INT 1
40396: DEC
40397: ST_TO_ADDR
40398: LD_VAR 0 1
40402: PUSH
40403: FOR_TO
40404: IFFALSE 40442
// if array1 [ i ] <> array2 [ i ] then
40406: LD_VAR 0 1
40410: PUSH
40411: LD_VAR 0 4
40415: ARRAY
40416: PUSH
40417: LD_VAR 0 2
40421: PUSH
40422: LD_VAR 0 4
40426: ARRAY
40427: NONEQUAL
40428: IFFALSE 40440
// begin result := false ;
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_INT 0
40437: ST_TO_ADDR
// break ;
40438: GO 40442
// end ;
40440: GO 40403
40442: POP
40443: POP
// end ;
40444: LD_VAR 0 3
40448: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
40453: PPUSH
// pom := GetBase ( fac ) ;
40454: LD_ADDR_VAR 0 5
40458: PUSH
40459: LD_VAR 0 1
40463: PPUSH
40464: CALL_OW 274
40468: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40469: LD_ADDR_VAR 0 4
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_INT 1
40481: ARRAY
40482: PPUSH
40483: LD_VAR 0 2
40487: PUSH
40488: LD_INT 2
40490: ARRAY
40491: PPUSH
40492: LD_VAR 0 2
40496: PUSH
40497: LD_INT 3
40499: ARRAY
40500: PPUSH
40501: LD_VAR 0 2
40505: PUSH
40506: LD_INT 4
40508: ARRAY
40509: PPUSH
40510: CALL_OW 449
40514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 5
40524: PPUSH
40525: LD_INT 1
40527: PPUSH
40528: CALL_OW 275
40532: PUSH
40533: LD_VAR 0 4
40537: PUSH
40538: LD_INT 1
40540: ARRAY
40541: GREATEREQUAL
40542: PUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: LD_INT 2
40550: PPUSH
40551: CALL_OW 275
40555: PUSH
40556: LD_VAR 0 4
40560: PUSH
40561: LD_INT 2
40563: ARRAY
40564: GREATEREQUAL
40565: AND
40566: PUSH
40567: LD_VAR 0 5
40571: PPUSH
40572: LD_INT 3
40574: PPUSH
40575: CALL_OW 275
40579: PUSH
40580: LD_VAR 0 4
40584: PUSH
40585: LD_INT 3
40587: ARRAY
40588: GREATEREQUAL
40589: AND
40590: ST_TO_ADDR
// end ;
40591: LD_VAR 0 3
40595: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40596: LD_INT 0
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
// pom := GetBase ( building ) ;
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 274
40616: ST_TO_ADDR
// if not pom then
40617: LD_VAR 0 3
40621: NOT
40622: IFFALSE 40626
// exit ;
40624: GO 40796
// btype := GetBType ( building ) ;
40626: LD_ADDR_VAR 0 5
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: CALL_OW 266
40640: ST_TO_ADDR
// if btype = b_armoury then
40641: LD_VAR 0 5
40645: PUSH
40646: LD_INT 4
40648: EQUAL
40649: IFFALSE 40659
// btype := b_barracks ;
40651: LD_ADDR_VAR 0 5
40655: PUSH
40656: LD_INT 5
40658: ST_TO_ADDR
// if btype = b_depot then
40659: LD_VAR 0 5
40663: PUSH
40664: LD_INT 0
40666: EQUAL
40667: IFFALSE 40677
// btype := b_warehouse ;
40669: LD_ADDR_VAR 0 5
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// if btype = b_workshop then
40677: LD_VAR 0 5
40681: PUSH
40682: LD_INT 2
40684: EQUAL
40685: IFFALSE 40695
// btype := b_factory ;
40687: LD_ADDR_VAR 0 5
40691: PUSH
40692: LD_INT 3
40694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40695: LD_ADDR_VAR 0 4
40699: PUSH
40700: LD_VAR 0 5
40704: PPUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 248
40714: PPUSH
40715: CALL_OW 450
40719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40720: LD_ADDR_VAR 0 2
40724: PUSH
40725: LD_VAR 0 3
40729: PPUSH
40730: LD_INT 1
40732: PPUSH
40733: CALL_OW 275
40737: PUSH
40738: LD_VAR 0 4
40742: PUSH
40743: LD_INT 1
40745: ARRAY
40746: GREATEREQUAL
40747: PUSH
40748: LD_VAR 0 3
40752: PPUSH
40753: LD_INT 2
40755: PPUSH
40756: CALL_OW 275
40760: PUSH
40761: LD_VAR 0 4
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: GREATEREQUAL
40770: AND
40771: PUSH
40772: LD_VAR 0 3
40776: PPUSH
40777: LD_INT 3
40779: PPUSH
40780: CALL_OW 275
40784: PUSH
40785: LD_VAR 0 4
40789: PUSH
40790: LD_INT 3
40792: ARRAY
40793: GREATEREQUAL
40794: AND
40795: ST_TO_ADDR
// end ;
40796: LD_VAR 0 2
40800: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40801: LD_INT 0
40803: PPUSH
40804: PPUSH
40805: PPUSH
// pom := GetBase ( building ) ;
40806: LD_ADDR_VAR 0 4
40810: PUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 274
40820: ST_TO_ADDR
// if not pom then
40821: LD_VAR 0 4
40825: NOT
40826: IFFALSE 40830
// exit ;
40828: GO 40931
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40830: LD_ADDR_VAR 0 5
40834: PUSH
40835: LD_VAR 0 2
40839: PPUSH
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 248
40849: PPUSH
40850: CALL_OW 450
40854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_VAR 0 4
40864: PPUSH
40865: LD_INT 1
40867: PPUSH
40868: CALL_OW 275
40872: PUSH
40873: LD_VAR 0 5
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: GREATEREQUAL
40882: PUSH
40883: LD_VAR 0 4
40887: PPUSH
40888: LD_INT 2
40890: PPUSH
40891: CALL_OW 275
40895: PUSH
40896: LD_VAR 0 5
40900: PUSH
40901: LD_INT 2
40903: ARRAY
40904: GREATEREQUAL
40905: AND
40906: PUSH
40907: LD_VAR 0 4
40911: PPUSH
40912: LD_INT 3
40914: PPUSH
40915: CALL_OW 275
40919: PUSH
40920: LD_VAR 0 5
40924: PUSH
40925: LD_INT 3
40927: ARRAY
40928: GREATEREQUAL
40929: AND
40930: ST_TO_ADDR
// end ;
40931: LD_VAR 0 3
40935: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
// result := false ;
40949: LD_ADDR_VAR 0 8
40953: PUSH
40954: LD_INT 0
40956: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40957: LD_VAR 0 5
40961: NOT
40962: PUSH
40963: LD_VAR 0 1
40967: NOT
40968: OR
40969: PUSH
40970: LD_VAR 0 2
40974: NOT
40975: OR
40976: PUSH
40977: LD_VAR 0 3
40981: NOT
40982: OR
40983: IFFALSE 40987
// exit ;
40985: GO 41801
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40987: LD_ADDR_VAR 0 14
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: LD_VAR 0 2
41001: PPUSH
41002: LD_VAR 0 3
41006: PPUSH
41007: LD_VAR 0 4
41011: PPUSH
41012: LD_VAR 0 5
41016: PUSH
41017: LD_INT 1
41019: ARRAY
41020: PPUSH
41021: CALL_OW 248
41025: PPUSH
41026: LD_INT 0
41028: PPUSH
41029: CALL 43038 0 6
41033: ST_TO_ADDR
// if not hexes then
41034: LD_VAR 0 14
41038: NOT
41039: IFFALSE 41043
// exit ;
41041: GO 41801
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41043: LD_ADDR_VAR 0 17
41047: PUSH
41048: LD_VAR 0 5
41052: PPUSH
41053: LD_INT 22
41055: PUSH
41056: LD_VAR 0 13
41060: PPUSH
41061: CALL_OW 255
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 30
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 30
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PPUSH
41102: CALL_OW 72
41106: ST_TO_ADDR
// for i = 1 to hexes do
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: DOUBLE
41113: LD_INT 1
41115: DEC
41116: ST_TO_ADDR
41117: LD_VAR 0 14
41121: PUSH
41122: FOR_TO
41123: IFFALSE 41799
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41125: LD_ADDR_VAR 0 13
41129: PUSH
41130: LD_VAR 0 14
41134: PUSH
41135: LD_VAR 0 9
41139: ARRAY
41140: PUSH
41141: LD_INT 1
41143: ARRAY
41144: PPUSH
41145: LD_VAR 0 14
41149: PUSH
41150: LD_VAR 0 9
41154: ARRAY
41155: PUSH
41156: LD_INT 2
41158: ARRAY
41159: PPUSH
41160: CALL_OW 428
41164: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41165: LD_VAR 0 14
41169: PUSH
41170: LD_VAR 0 9
41174: ARRAY
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PPUSH
41180: LD_VAR 0 14
41184: PUSH
41185: LD_VAR 0 9
41189: ARRAY
41190: PUSH
41191: LD_INT 2
41193: ARRAY
41194: PPUSH
41195: CALL_OW 351
41199: PUSH
41200: LD_VAR 0 14
41204: PUSH
41205: LD_VAR 0 9
41209: ARRAY
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: PPUSH
41215: LD_VAR 0 14
41219: PUSH
41220: LD_VAR 0 9
41224: ARRAY
41225: PUSH
41226: LD_INT 2
41228: ARRAY
41229: PPUSH
41230: CALL_OW 488
41234: NOT
41235: OR
41236: PUSH
41237: LD_VAR 0 13
41241: PPUSH
41242: CALL_OW 247
41246: PUSH
41247: LD_INT 3
41249: EQUAL
41250: OR
41251: IFFALSE 41257
// exit ;
41253: POP
41254: POP
41255: GO 41801
// if not tmp then
41257: LD_VAR 0 13
41261: NOT
41262: IFFALSE 41266
// continue ;
41264: GO 41122
// result := true ;
41266: LD_ADDR_VAR 0 8
41270: PUSH
41271: LD_INT 1
41273: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41274: LD_VAR 0 6
41278: PUSH
41279: LD_VAR 0 13
41283: PPUSH
41284: CALL_OW 247
41288: PUSH
41289: LD_INT 2
41291: EQUAL
41292: AND
41293: PUSH
41294: LD_VAR 0 13
41298: PPUSH
41299: CALL_OW 263
41303: PUSH
41304: LD_INT 1
41306: EQUAL
41307: AND
41308: IFFALSE 41472
// begin if IsDrivenBy ( tmp ) then
41310: LD_VAR 0 13
41314: PPUSH
41315: CALL_OW 311
41319: IFFALSE 41323
// continue ;
41321: GO 41122
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41323: LD_VAR 0 6
41327: PPUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 60
41333: PUSH
41334: EMPTY
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: LD_INT 55
41346: PUSH
41347: EMPTY
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PPUSH
41358: CALL_OW 72
41362: IFFALSE 41470
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41364: LD_ADDR_VAR 0 18
41368: PUSH
41369: LD_VAR 0 6
41373: PPUSH
41374: LD_INT 3
41376: PUSH
41377: LD_INT 60
41379: PUSH
41380: EMPTY
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 3
41389: PUSH
41390: LD_INT 55
41392: PUSH
41393: EMPTY
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PPUSH
41404: CALL_OW 72
41408: PUSH
41409: LD_INT 1
41411: ARRAY
41412: ST_TO_ADDR
// if IsInUnit ( driver ) then
41413: LD_VAR 0 18
41417: PPUSH
41418: CALL_OW 310
41422: IFFALSE 41433
// ComExit ( driver ) ;
41424: LD_VAR 0 18
41428: PPUSH
41429: CALL 66222 0 1
// AddComEnterUnit ( driver , tmp ) ;
41433: LD_VAR 0 18
41437: PPUSH
41438: LD_VAR 0 13
41442: PPUSH
41443: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41447: LD_VAR 0 18
41451: PPUSH
41452: LD_VAR 0 7
41456: PPUSH
41457: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41461: LD_VAR 0 18
41465: PPUSH
41466: CALL_OW 181
// end ; continue ;
41470: GO 41122
// end ; if not cleaners or not tmp in cleaners then
41472: LD_VAR 0 6
41476: NOT
41477: PUSH
41478: LD_VAR 0 13
41482: PUSH
41483: LD_VAR 0 6
41487: IN
41488: NOT
41489: OR
41490: IFFALSE 41797
// begin if dep then
41492: LD_VAR 0 17
41496: IFFALSE 41632
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41498: LD_ADDR_VAR 0 16
41502: PUSH
41503: LD_VAR 0 17
41507: PUSH
41508: LD_INT 1
41510: ARRAY
41511: PPUSH
41512: CALL_OW 250
41516: PPUSH
41517: LD_VAR 0 17
41521: PUSH
41522: LD_INT 1
41524: ARRAY
41525: PPUSH
41526: CALL_OW 254
41530: PPUSH
41531: LD_INT 5
41533: PPUSH
41534: CALL_OW 272
41538: PUSH
41539: LD_VAR 0 17
41543: PUSH
41544: LD_INT 1
41546: ARRAY
41547: PPUSH
41548: CALL_OW 251
41552: PPUSH
41553: LD_VAR 0 17
41557: PUSH
41558: LD_INT 1
41560: ARRAY
41561: PPUSH
41562: CALL_OW 254
41566: PPUSH
41567: LD_INT 5
41569: PPUSH
41570: CALL_OW 273
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41579: LD_VAR 0 16
41583: PUSH
41584: LD_INT 1
41586: ARRAY
41587: PPUSH
41588: LD_VAR 0 16
41592: PUSH
41593: LD_INT 2
41595: ARRAY
41596: PPUSH
41597: CALL_OW 488
41601: IFFALSE 41632
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41603: LD_VAR 0 13
41607: PPUSH
41608: LD_VAR 0 16
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PPUSH
41617: LD_VAR 0 16
41621: PUSH
41622: LD_INT 2
41624: ARRAY
41625: PPUSH
41626: CALL_OW 111
// continue ;
41630: GO 41122
// end ; end ; r := GetDir ( tmp ) ;
41632: LD_ADDR_VAR 0 15
41636: PUSH
41637: LD_VAR 0 13
41641: PPUSH
41642: CALL_OW 254
41646: ST_TO_ADDR
// if r = 5 then
41647: LD_VAR 0 15
41651: PUSH
41652: LD_INT 5
41654: EQUAL
41655: IFFALSE 41665
// r := 0 ;
41657: LD_ADDR_VAR 0 15
41661: PUSH
41662: LD_INT 0
41664: ST_TO_ADDR
// for j = r to 5 do
41665: LD_ADDR_VAR 0 10
41669: PUSH
41670: DOUBLE
41671: LD_VAR 0 15
41675: DEC
41676: ST_TO_ADDR
41677: LD_INT 5
41679: PUSH
41680: FOR_TO
41681: IFFALSE 41795
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41683: LD_ADDR_VAR 0 11
41687: PUSH
41688: LD_VAR 0 13
41692: PPUSH
41693: CALL_OW 250
41697: PPUSH
41698: LD_VAR 0 10
41702: PPUSH
41703: LD_INT 2
41705: PPUSH
41706: CALL_OW 272
41710: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41711: LD_ADDR_VAR 0 12
41715: PUSH
41716: LD_VAR 0 13
41720: PPUSH
41721: CALL_OW 251
41725: PPUSH
41726: LD_VAR 0 10
41730: PPUSH
41731: LD_INT 2
41733: PPUSH
41734: CALL_OW 273
41738: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41739: LD_VAR 0 11
41743: PPUSH
41744: LD_VAR 0 12
41748: PPUSH
41749: CALL_OW 488
41753: PUSH
41754: LD_VAR 0 11
41758: PPUSH
41759: LD_VAR 0 12
41763: PPUSH
41764: CALL_OW 428
41768: NOT
41769: AND
41770: IFFALSE 41793
// begin ComMoveXY ( tmp , _x , _y ) ;
41772: LD_VAR 0 13
41776: PPUSH
41777: LD_VAR 0 11
41781: PPUSH
41782: LD_VAR 0 12
41786: PPUSH
41787: CALL_OW 111
// break ;
41791: GO 41795
// end ; end ;
41793: GO 41680
41795: POP
41796: POP
// end ; end ;
41797: GO 41122
41799: POP
41800: POP
// end ;
41801: LD_VAR 0 8
41805: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41806: LD_INT 0
41808: PPUSH
// result := true ;
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_INT 1
41816: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41817: LD_VAR 0 2
41821: PUSH
41822: LD_INT 24
41824: DOUBLE
41825: EQUAL
41826: IFTRUE 41836
41828: LD_INT 33
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 32
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 42181
41861: LD_INT 20
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41894
41869: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 6
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: ST_TO_ADDR
41892: GO 42181
41894: LD_INT 22
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41908
41900: LD_INT 36
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41933
41908: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 15
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: CALL_OW 321
41926: PUSH
41927: LD_INT 2
41929: EQUAL
41930: ST_TO_ADDR
41931: GO 42181
41933: LD_INT 30
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41941
41939: GO 41966
41941: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: LD_INT 20
41949: PPUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 321
41959: PUSH
41960: LD_INT 2
41962: EQUAL
41963: ST_TO_ADDR
41964: GO 42181
41966: LD_INT 28
41968: DOUBLE
41969: EQUAL
41970: IFTRUE 41980
41972: LD_INT 21
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 42005
41980: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_INT 21
41988: PPUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: CALL_OW 321
41998: PUSH
41999: LD_INT 2
42001: EQUAL
42002: ST_TO_ADDR
42003: GO 42181
42005: LD_INT 16
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42040
42013: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_EXP 107
42023: PPUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 321
42033: PUSH
42034: LD_INT 2
42036: EQUAL
42037: ST_TO_ADDR
42038: GO 42181
42040: LD_INT 19
42042: DOUBLE
42043: EQUAL
42044: IFTRUE 42054
42046: LD_INT 23
42048: DOUBLE
42049: EQUAL
42050: IFTRUE 42054
42052: GO 42081
42054: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_EXP 106
42064: PPUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: CALL_OW 321
42074: PUSH
42075: LD_INT 2
42077: EQUAL
42078: ST_TO_ADDR
42079: GO 42181
42081: LD_INT 17
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42089
42087: GO 42114
42089: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_INT 39
42097: PPUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 321
42107: PUSH
42108: LD_INT 2
42110: EQUAL
42111: ST_TO_ADDR
42112: GO 42181
42114: LD_INT 18
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42122
42120: GO 42147
42122: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 40
42130: PPUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 321
42140: PUSH
42141: LD_INT 2
42143: EQUAL
42144: ST_TO_ADDR
42145: GO 42181
42147: LD_INT 27
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42180
42155: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: LD_INT 35
42163: PPUSH
42164: LD_VAR 0 1
42168: PPUSH
42169: CALL_OW 321
42173: PUSH
42174: LD_INT 2
42176: EQUAL
42177: ST_TO_ADDR
42178: GO 42181
42180: POP
// end ;
42181: LD_VAR 0 3
42185: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42186: LD_INT 0
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
// result := false ;
42199: LD_ADDR_VAR 0 6
42203: PUSH
42204: LD_INT 0
42206: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42207: LD_VAR 0 1
42211: NOT
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 266
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: IN
42233: NOT
42234: OR
42235: PUSH
42236: LD_VAR 0 2
42240: NOT
42241: OR
42242: PUSH
42243: LD_VAR 0 5
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: LD_INT 4
42262: PUSH
42263: LD_INT 5
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: IN
42274: NOT
42275: OR
42276: PUSH
42277: LD_VAR 0 3
42281: PPUSH
42282: LD_VAR 0 4
42286: PPUSH
42287: CALL_OW 488
42291: NOT
42292: OR
42293: IFFALSE 42297
// exit ;
42295: GO 43033
// side := GetSide ( depot ) ;
42297: LD_ADDR_VAR 0 9
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 255
42311: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42312: LD_VAR 0 9
42316: PPUSH
42317: LD_VAR 0 2
42321: PPUSH
42322: CALL 41806 0 2
42326: NOT
42327: IFFALSE 42331
// exit ;
42329: GO 43033
// pom := GetBase ( depot ) ;
42331: LD_ADDR_VAR 0 10
42335: PUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 274
42345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42346: LD_ADDR_VAR 0 11
42350: PUSH
42351: LD_VAR 0 2
42355: PPUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 248
42365: PPUSH
42366: CALL_OW 450
42370: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42371: LD_VAR 0 10
42375: PPUSH
42376: LD_INT 1
42378: PPUSH
42379: CALL_OW 275
42383: PUSH
42384: LD_VAR 0 11
42388: PUSH
42389: LD_INT 1
42391: ARRAY
42392: GREATEREQUAL
42393: PUSH
42394: LD_VAR 0 10
42398: PPUSH
42399: LD_INT 2
42401: PPUSH
42402: CALL_OW 275
42406: PUSH
42407: LD_VAR 0 11
42411: PUSH
42412: LD_INT 2
42414: ARRAY
42415: GREATEREQUAL
42416: AND
42417: PUSH
42418: LD_VAR 0 10
42422: PPUSH
42423: LD_INT 3
42425: PPUSH
42426: CALL_OW 275
42430: PUSH
42431: LD_VAR 0 11
42435: PUSH
42436: LD_INT 3
42438: ARRAY
42439: GREATEREQUAL
42440: AND
42441: NOT
42442: IFFALSE 42446
// exit ;
42444: GO 43033
// if GetBType ( depot ) = b_depot then
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 266
42455: PUSH
42456: LD_INT 0
42458: EQUAL
42459: IFFALSE 42471
// dist := 28 else
42461: LD_ADDR_VAR 0 14
42465: PUSH
42466: LD_INT 28
42468: ST_TO_ADDR
42469: GO 42479
// dist := 36 ;
42471: LD_ADDR_VAR 0 14
42475: PUSH
42476: LD_INT 36
42478: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42479: LD_VAR 0 1
42483: PPUSH
42484: LD_VAR 0 3
42488: PPUSH
42489: LD_VAR 0 4
42493: PPUSH
42494: CALL_OW 297
42498: PUSH
42499: LD_VAR 0 14
42503: GREATER
42504: IFFALSE 42508
// exit ;
42506: GO 43033
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42508: LD_ADDR_VAR 0 12
42512: PUSH
42513: LD_VAR 0 2
42517: PPUSH
42518: LD_VAR 0 3
42522: PPUSH
42523: LD_VAR 0 4
42527: PPUSH
42528: LD_VAR 0 5
42532: PPUSH
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 248
42542: PPUSH
42543: LD_INT 0
42545: PPUSH
42546: CALL 43038 0 6
42550: ST_TO_ADDR
// if not hexes then
42551: LD_VAR 0 12
42555: NOT
42556: IFFALSE 42560
// exit ;
42558: GO 43033
// hex := GetHexInfo ( x , y ) ;
42560: LD_ADDR_VAR 0 15
42564: PUSH
42565: LD_VAR 0 3
42569: PPUSH
42570: LD_VAR 0 4
42574: PPUSH
42575: CALL_OW 546
42579: ST_TO_ADDR
// if hex [ 1 ] then
42580: LD_VAR 0 15
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: IFFALSE 42592
// exit ;
42590: GO 43033
// height := hex [ 2 ] ;
42592: LD_ADDR_VAR 0 13
42596: PUSH
42597: LD_VAR 0 15
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: ST_TO_ADDR
// for i = 1 to hexes do
42606: LD_ADDR_VAR 0 7
42610: PUSH
42611: DOUBLE
42612: LD_INT 1
42614: DEC
42615: ST_TO_ADDR
42616: LD_VAR 0 12
42620: PUSH
42621: FOR_TO
42622: IFFALSE 42952
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42624: LD_VAR 0 12
42628: PUSH
42629: LD_VAR 0 7
42633: ARRAY
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: PPUSH
42639: LD_VAR 0 12
42643: PUSH
42644: LD_VAR 0 7
42648: ARRAY
42649: PUSH
42650: LD_INT 2
42652: ARRAY
42653: PPUSH
42654: CALL_OW 488
42658: NOT
42659: PUSH
42660: LD_VAR 0 12
42664: PUSH
42665: LD_VAR 0 7
42669: ARRAY
42670: PUSH
42671: LD_INT 1
42673: ARRAY
42674: PPUSH
42675: LD_VAR 0 12
42679: PUSH
42680: LD_VAR 0 7
42684: ARRAY
42685: PUSH
42686: LD_INT 2
42688: ARRAY
42689: PPUSH
42690: CALL_OW 428
42694: PUSH
42695: LD_INT 0
42697: GREATER
42698: OR
42699: PUSH
42700: LD_VAR 0 12
42704: PUSH
42705: LD_VAR 0 7
42709: ARRAY
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: PPUSH
42715: LD_VAR 0 12
42719: PUSH
42720: LD_VAR 0 7
42724: ARRAY
42725: PUSH
42726: LD_INT 2
42728: ARRAY
42729: PPUSH
42730: CALL_OW 351
42734: OR
42735: IFFALSE 42741
// exit ;
42737: POP
42738: POP
42739: GO 43033
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42741: LD_ADDR_VAR 0 8
42745: PUSH
42746: LD_VAR 0 12
42750: PUSH
42751: LD_VAR 0 7
42755: ARRAY
42756: PUSH
42757: LD_INT 1
42759: ARRAY
42760: PPUSH
42761: LD_VAR 0 12
42765: PUSH
42766: LD_VAR 0 7
42770: ARRAY
42771: PUSH
42772: LD_INT 2
42774: ARRAY
42775: PPUSH
42776: CALL_OW 546
42780: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42781: LD_VAR 0 8
42785: PUSH
42786: LD_INT 1
42788: ARRAY
42789: PUSH
42790: LD_VAR 0 8
42794: PUSH
42795: LD_INT 2
42797: ARRAY
42798: PUSH
42799: LD_VAR 0 13
42803: PUSH
42804: LD_INT 2
42806: PLUS
42807: GREATER
42808: OR
42809: PUSH
42810: LD_VAR 0 8
42814: PUSH
42815: LD_INT 2
42817: ARRAY
42818: PUSH
42819: LD_VAR 0 13
42823: PUSH
42824: LD_INT 2
42826: MINUS
42827: LESS
42828: OR
42829: PUSH
42830: LD_VAR 0 8
42834: PUSH
42835: LD_INT 3
42837: ARRAY
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 8
42844: PUSH
42845: LD_INT 9
42847: PUSH
42848: LD_INT 10
42850: PUSH
42851: LD_INT 11
42853: PUSH
42854: LD_INT 12
42856: PUSH
42857: LD_INT 13
42859: PUSH
42860: LD_INT 16
42862: PUSH
42863: LD_INT 17
42865: PUSH
42866: LD_INT 18
42868: PUSH
42869: LD_INT 19
42871: PUSH
42872: LD_INT 20
42874: PUSH
42875: LD_INT 21
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: IN
42893: NOT
42894: OR
42895: PUSH
42896: LD_VAR 0 8
42900: PUSH
42901: LD_INT 5
42903: ARRAY
42904: NOT
42905: OR
42906: PUSH
42907: LD_VAR 0 8
42911: PUSH
42912: LD_INT 6
42914: ARRAY
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 7
42924: PUSH
42925: LD_INT 9
42927: PUSH
42928: LD_INT 10
42930: PUSH
42931: LD_INT 11
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: IN
42942: NOT
42943: OR
42944: IFFALSE 42950
// exit ;
42946: POP
42947: POP
42948: GO 43033
// end ;
42950: GO 42621
42952: POP
42953: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42954: LD_VAR 0 9
42958: PPUSH
42959: LD_VAR 0 3
42963: PPUSH
42964: LD_VAR 0 4
42968: PPUSH
42969: LD_INT 20
42971: PPUSH
42972: CALL 34979 0 4
42976: PUSH
42977: LD_INT 4
42979: ARRAY
42980: IFFALSE 42984
// exit ;
42982: GO 43033
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42984: LD_VAR 0 2
42988: PUSH
42989: LD_INT 29
42991: PUSH
42992: LD_INT 30
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: IN
42999: PUSH
43000: LD_VAR 0 3
43004: PPUSH
43005: LD_VAR 0 4
43009: PPUSH
43010: LD_VAR 0 9
43014: PPUSH
43015: CALL_OW 440
43019: NOT
43020: AND
43021: IFFALSE 43025
// exit ;
43023: GO 43033
// result := true ;
43025: LD_ADDR_VAR 0 6
43029: PUSH
43030: LD_INT 1
43032: ST_TO_ADDR
// end ;
43033: LD_VAR 0 6
43037: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43038: LD_INT 0
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
// result = [ ] ;
43098: LD_ADDR_VAR 0 7
43102: PUSH
43103: EMPTY
43104: ST_TO_ADDR
// temp_list = [ ] ;
43105: LD_ADDR_VAR 0 9
43109: PUSH
43110: EMPTY
43111: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43112: LD_VAR 0 4
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 4
43131: PUSH
43132: LD_INT 5
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: IN
43143: NOT
43144: PUSH
43145: LD_VAR 0 1
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: IN
43160: PUSH
43161: LD_VAR 0 5
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: IN
43180: NOT
43181: AND
43182: OR
43183: IFFALSE 43187
// exit ;
43185: GO 61578
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43187: LD_VAR 0 1
43191: PUSH
43192: LD_INT 6
43194: PUSH
43195: LD_INT 7
43197: PUSH
43198: LD_INT 8
43200: PUSH
43201: LD_INT 13
43203: PUSH
43204: LD_INT 12
43206: PUSH
43207: LD_INT 15
43209: PUSH
43210: LD_INT 11
43212: PUSH
43213: LD_INT 14
43215: PUSH
43216: LD_INT 10
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: IN
43230: IFFALSE 43240
// btype = b_lab ;
43232: LD_ADDR_VAR 0 1
43236: PUSH
43237: LD_INT 6
43239: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43240: LD_VAR 0 6
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: IN
43259: NOT
43260: PUSH
43261: LD_VAR 0 1
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: LD_INT 6
43280: PUSH
43281: LD_INT 36
43283: PUSH
43284: LD_INT 4
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: LD_INT 31
43292: PUSH
43293: LD_INT 32
43295: PUSH
43296: LD_INT 33
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: IN
43312: NOT
43313: PUSH
43314: LD_VAR 0 6
43318: PUSH
43319: LD_INT 1
43321: EQUAL
43322: AND
43323: OR
43324: PUSH
43325: LD_VAR 0 1
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: IN
43340: NOT
43341: PUSH
43342: LD_VAR 0 6
43346: PUSH
43347: LD_INT 2
43349: EQUAL
43350: AND
43351: OR
43352: IFFALSE 43362
// mode = 0 ;
43354: LD_ADDR_VAR 0 6
43358: PUSH
43359: LD_INT 0
43361: ST_TO_ADDR
// case mode of 0 :
43362: LD_VAR 0 6
43366: PUSH
43367: LD_INT 0
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 54828
43375: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43376: LD_ADDR_VAR 0 11
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43569: LD_ADDR_VAR 0 12
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 3
43726: NEG
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43765: LD_ADDR_VAR 0 13
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43964: LD_ADDR_VAR 0 14
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44160: LD_ADDR_VAR 0 15
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44353: LD_ADDR_VAR 0 16
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 3
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44546: LD_ADDR_VAR 0 17
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44776: LD_ADDR_VAR 0 18
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45006: LD_ADDR_VAR 0 19
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45236: LD_ADDR_VAR 0 20
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45466: LD_ADDR_VAR 0 21
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45696: LD_ADDR_VAR 0 22
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45926: LD_ADDR_VAR 0 23
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 3
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46206: LD_ADDR_VAR 0 24
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46482: LD_ADDR_VAR 0 25
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 3
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46756: LD_ADDR_VAR 0 26
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47032: LD_ADDR_VAR 0 27
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47312: LD_ADDR_VAR 0 28
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47594: LD_ADDR_VAR 0 29
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47873: LD_ADDR_VAR 0 30
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48151: LD_ADDR_VAR 0 31
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: LD_INT 3
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48429: LD_ADDR_VAR 0 32
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48707: LD_ADDR_VAR 0 33
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48986: LD_ADDR_VAR 0 34
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49266: LD_ADDR_VAR 0 35
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49378: LD_ADDR_VAR 0 36
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49490: LD_ADDR_VAR 0 37
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49602: LD_ADDR_VAR 0 38
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49714: LD_ADDR_VAR 0 39
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49826: LD_ADDR_VAR 0 40
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49938: LD_ADDR_VAR 0 41
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: NEG
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50288: LD_ADDR_VAR 0 42
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50638: LD_ADDR_VAR 0 43
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50986: LD_ADDR_VAR 0 44
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: LD_INT 3
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51336: LD_ADDR_VAR 0 45
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 3
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51686: LD_ADDR_VAR 0 46
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52034: LD_ADDR_VAR 0 47
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52185: LD_ADDR_VAR 0 48
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52332: LD_ADDR_VAR 0 49
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52476: LD_ADDR_VAR 0 50
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52620: LD_ADDR_VAR 0 51
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52767: LD_ADDR_VAR 0 52
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52918: LD_ADDR_VAR 0 53
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53148: LD_ADDR_VAR 0 54
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53378: LD_ADDR_VAR 0 55
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53608: LD_ADDR_VAR 0 56
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53838: LD_ADDR_VAR 0 57
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54068: LD_ADDR_VAR 0 58
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54298: LD_ADDR_VAR 0 59
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54386: LD_ADDR_VAR 0 60
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54474: LD_ADDR_VAR 0 61
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54562: LD_ADDR_VAR 0 62
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54650: LD_ADDR_VAR 0 63
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54738: LD_ADDR_VAR 0 64
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// end ; 1 :
54826: GO 60723
54828: LD_INT 1
54830: DOUBLE
54831: EQUAL
54832: IFTRUE 54836
54834: GO 57459
54836: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54837: LD_ADDR_VAR 0 11
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54881: LD_ADDR_VAR 0 12
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54922: LD_ADDR_VAR 0 13
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54962: LD_ADDR_VAR 0 14
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 3
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55003: LD_ADDR_VAR 0 15
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55047: LD_ADDR_VAR 0 16
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 3
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55093: LD_ADDR_VAR 0 17
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55137: LD_ADDR_VAR 0 18
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55178: LD_ADDR_VAR 0 19
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55218: LD_ADDR_VAR 0 20
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55259: LD_ADDR_VAR 0 21
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55303: LD_ADDR_VAR 0 22
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55349: LD_ADDR_VAR 0 23
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55393: LD_ADDR_VAR 0 24
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55434: LD_ADDR_VAR 0 25
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 4
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55474: LD_ADDR_VAR 0 26
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55515: LD_ADDR_VAR 0 27
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55559: LD_ADDR_VAR 0 28
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: LD_INT 4
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 4
55590: NEG
55591: PUSH
55592: LD_INT 3
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55605: LD_ADDR_VAR 0 29
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 4
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 5
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 4
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 6
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 6
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55760: LD_ADDR_VAR 0 30
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 5
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 6
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 6
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55903: LD_ADDR_VAR 0 31
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 5
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 5
55980: PUSH
55981: LD_INT 5
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 4
55990: PUSH
55991: LD_INT 5
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 6
56000: PUSH
56001: LD_INT 5
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 6
56010: PUSH
56011: LD_INT 6
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 5
56020: PUSH
56021: LD_INT 6
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56042: LD_ADDR_VAR 0 32
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 4
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 4
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 5
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 4
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 6
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 6
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 5
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56185: LD_ADDR_VAR 0 33
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 4
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 5
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 5
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 5
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 6
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 6
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56340: LD_ADDR_VAR 0 34
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: NEG
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: NEG
56420: PUSH
56421: LD_INT 5
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 5
56431: NEG
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: LD_INT 5
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 5
56455: NEG
56456: PUSH
56457: LD_INT 6
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 6
56467: NEG
56468: PUSH
56469: LD_INT 5
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 6
56479: NEG
56480: PUSH
56481: LD_INT 6
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56503: LD_ADDR_VAR 0 41
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56547: LD_ADDR_VAR 0 42
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56588: LD_ADDR_VAR 0 43
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56628: LD_ADDR_VAR 0 44
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56669: LD_ADDR_VAR 0 45
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56713: LD_ADDR_VAR 0 46
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56759: LD_ADDR_VAR 0 47
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56792: LD_ADDR_VAR 0 48
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56823: LD_ADDR_VAR 0 49
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56852: LD_ADDR_VAR 0 50
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56881: LD_ADDR_VAR 0 51
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56912: LD_ADDR_VAR 0 52
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56945: LD_ADDR_VAR 0 53
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56989: LD_ADDR_VAR 0 54
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57030: LD_ADDR_VAR 0 55
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57070: LD_ADDR_VAR 0 56
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57111: LD_ADDR_VAR 0 57
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57155: LD_ADDR_VAR 0 58
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57201: LD_ADDR_VAR 0 59
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57245: LD_ADDR_VAR 0 60
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57286: LD_ADDR_VAR 0 61
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57326: LD_ADDR_VAR 0 62
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57367: LD_ADDR_VAR 0 63
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57411: LD_ADDR_VAR 0 64
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// end ; 2 :
57457: GO 60723
57459: LD_INT 2
57461: DOUBLE
57462: EQUAL
57463: IFTRUE 57467
57465: GO 60722
57467: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57468: LD_ADDR_VAR 0 29
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 5
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 3
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: PUSH
57599: LD_INT 4
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 4
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 4
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 5
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 5
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 4
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 4
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 4
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: NEG
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 5
57913: NEG
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 5
57925: NEG
57926: PUSH
57927: LD_INT 5
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: LD_INT 5
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: NEG
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58006: LD_ADDR_VAR 0 30
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 5
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 5
58043: PUSH
58044: LD_INT 5
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 5
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 5
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: LD_INT 5
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 4
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 4
58196: NEG
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: NEG
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 4
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 5
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 5
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: NEG
58371: PUSH
58372: LD_INT 4
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 4
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 5
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 3
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 5
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58553: LD_ADDR_VAR 0 31
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 4
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 5
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 4
58755: NEG
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: NEG
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 5
58815: NEG
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: NEG
58828: PUSH
58829: LD_INT 5
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 5
58851: NEG
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 4
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 4
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 5
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 5
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59103: LD_ADDR_VAR 0 32
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 4
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 5
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 5
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: NEG
59285: PUSH
59286: LD_INT 4
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 5
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 5
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 5
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 4
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 5
59545: PUSH
59546: LD_INT 5
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: LD_INT 5
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 5
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59650: LD_ADDR_VAR 0 33
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: NEG
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 5
59717: NEG
59718: PUSH
59719: LD_INT 4
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: NEG
59730: PUSH
59731: LD_INT 5
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: LD_INT 5
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 4
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 4
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 4
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 5
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 5
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 4
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: LD_INT 4
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 5
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 5
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 5
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60188: LD_ADDR_VAR 0 34
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 4
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 4
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 5
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 5
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 4
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 4
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 4
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 5
60410: PUSH
60411: LD_INT 4
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 5
60420: PUSH
60421: LD_INT 5
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: LD_INT 5
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 5
60460: PUSH
60461: LD_INT 3
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 5
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 4
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: NEG
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 5
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 5
60652: NEG
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// end ; end ;
60720: GO 60723
60722: POP
// case btype of b_depot , b_warehouse :
60723: LD_VAR 0 1
60727: PUSH
60728: LD_INT 0
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60742
60734: LD_INT 1
60736: DOUBLE
60737: EQUAL
60738: IFTRUE 60742
60740: GO 60943
60742: POP
// case nation of nation_american :
60743: LD_VAR 0 5
60747: PUSH
60748: LD_INT 1
60750: DOUBLE
60751: EQUAL
60752: IFTRUE 60756
60754: GO 60812
60756: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60757: LD_ADDR_VAR 0 9
60761: PUSH
60762: LD_VAR 0 11
60766: PUSH
60767: LD_VAR 0 12
60771: PUSH
60772: LD_VAR 0 13
60776: PUSH
60777: LD_VAR 0 14
60781: PUSH
60782: LD_VAR 0 15
60786: PUSH
60787: LD_VAR 0 16
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: PUSH
60800: LD_VAR 0 4
60804: PUSH
60805: LD_INT 1
60807: PLUS
60808: ARRAY
60809: ST_TO_ADDR
60810: GO 60941
60812: LD_INT 2
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60820
60818: GO 60876
60820: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60821: LD_ADDR_VAR 0 9
60825: PUSH
60826: LD_VAR 0 17
60830: PUSH
60831: LD_VAR 0 18
60835: PUSH
60836: LD_VAR 0 19
60840: PUSH
60841: LD_VAR 0 20
60845: PUSH
60846: LD_VAR 0 21
60850: PUSH
60851: LD_VAR 0 22
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: PUSH
60864: LD_VAR 0 4
60868: PUSH
60869: LD_INT 1
60871: PLUS
60872: ARRAY
60873: ST_TO_ADDR
60874: GO 60941
60876: LD_INT 3
60878: DOUBLE
60879: EQUAL
60880: IFTRUE 60884
60882: GO 60940
60884: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60885: LD_ADDR_VAR 0 9
60889: PUSH
60890: LD_VAR 0 23
60894: PUSH
60895: LD_VAR 0 24
60899: PUSH
60900: LD_VAR 0 25
60904: PUSH
60905: LD_VAR 0 26
60909: PUSH
60910: LD_VAR 0 27
60914: PUSH
60915: LD_VAR 0 28
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: PUSH
60928: LD_VAR 0 4
60932: PUSH
60933: LD_INT 1
60935: PLUS
60936: ARRAY
60937: ST_TO_ADDR
60938: GO 60941
60940: POP
60941: GO 61496
60943: LD_INT 2
60945: DOUBLE
60946: EQUAL
60947: IFTRUE 60957
60949: LD_INT 3
60951: DOUBLE
60952: EQUAL
60953: IFTRUE 60957
60955: GO 61013
60957: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60958: LD_ADDR_VAR 0 9
60962: PUSH
60963: LD_VAR 0 29
60967: PUSH
60968: LD_VAR 0 30
60972: PUSH
60973: LD_VAR 0 31
60977: PUSH
60978: LD_VAR 0 32
60982: PUSH
60983: LD_VAR 0 33
60987: PUSH
60988: LD_VAR 0 34
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: PUSH
61001: LD_VAR 0 4
61005: PUSH
61006: LD_INT 1
61008: PLUS
61009: ARRAY
61010: ST_TO_ADDR
61011: GO 61496
61013: LD_INT 16
61015: DOUBLE
61016: EQUAL
61017: IFTRUE 61075
61019: LD_INT 17
61021: DOUBLE
61022: EQUAL
61023: IFTRUE 61075
61025: LD_INT 18
61027: DOUBLE
61028: EQUAL
61029: IFTRUE 61075
61031: LD_INT 19
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61075
61037: LD_INT 22
61039: DOUBLE
61040: EQUAL
61041: IFTRUE 61075
61043: LD_INT 20
61045: DOUBLE
61046: EQUAL
61047: IFTRUE 61075
61049: LD_INT 21
61051: DOUBLE
61052: EQUAL
61053: IFTRUE 61075
61055: LD_INT 23
61057: DOUBLE
61058: EQUAL
61059: IFTRUE 61075
61061: LD_INT 24
61063: DOUBLE
61064: EQUAL
61065: IFTRUE 61075
61067: LD_INT 25
61069: DOUBLE
61070: EQUAL
61071: IFTRUE 61075
61073: GO 61131
61075: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61076: LD_ADDR_VAR 0 9
61080: PUSH
61081: LD_VAR 0 35
61085: PUSH
61086: LD_VAR 0 36
61090: PUSH
61091: LD_VAR 0 37
61095: PUSH
61096: LD_VAR 0 38
61100: PUSH
61101: LD_VAR 0 39
61105: PUSH
61106: LD_VAR 0 40
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: LD_VAR 0 4
61123: PUSH
61124: LD_INT 1
61126: PLUS
61127: ARRAY
61128: ST_TO_ADDR
61129: GO 61496
61131: LD_INT 6
61133: DOUBLE
61134: EQUAL
61135: IFTRUE 61187
61137: LD_INT 7
61139: DOUBLE
61140: EQUAL
61141: IFTRUE 61187
61143: LD_INT 8
61145: DOUBLE
61146: EQUAL
61147: IFTRUE 61187
61149: LD_INT 13
61151: DOUBLE
61152: EQUAL
61153: IFTRUE 61187
61155: LD_INT 12
61157: DOUBLE
61158: EQUAL
61159: IFTRUE 61187
61161: LD_INT 15
61163: DOUBLE
61164: EQUAL
61165: IFTRUE 61187
61167: LD_INT 11
61169: DOUBLE
61170: EQUAL
61171: IFTRUE 61187
61173: LD_INT 14
61175: DOUBLE
61176: EQUAL
61177: IFTRUE 61187
61179: LD_INT 10
61181: DOUBLE
61182: EQUAL
61183: IFTRUE 61187
61185: GO 61243
61187: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61188: LD_ADDR_VAR 0 9
61192: PUSH
61193: LD_VAR 0 41
61197: PUSH
61198: LD_VAR 0 42
61202: PUSH
61203: LD_VAR 0 43
61207: PUSH
61208: LD_VAR 0 44
61212: PUSH
61213: LD_VAR 0 45
61217: PUSH
61218: LD_VAR 0 46
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: PUSH
61231: LD_VAR 0 4
61235: PUSH
61236: LD_INT 1
61238: PLUS
61239: ARRAY
61240: ST_TO_ADDR
61241: GO 61496
61243: LD_INT 36
61245: DOUBLE
61246: EQUAL
61247: IFTRUE 61251
61249: GO 61307
61251: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61252: LD_ADDR_VAR 0 9
61256: PUSH
61257: LD_VAR 0 47
61261: PUSH
61262: LD_VAR 0 48
61266: PUSH
61267: LD_VAR 0 49
61271: PUSH
61272: LD_VAR 0 50
61276: PUSH
61277: LD_VAR 0 51
61281: PUSH
61282: LD_VAR 0 52
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: PUSH
61295: LD_VAR 0 4
61299: PUSH
61300: LD_INT 1
61302: PLUS
61303: ARRAY
61304: ST_TO_ADDR
61305: GO 61496
61307: LD_INT 4
61309: DOUBLE
61310: EQUAL
61311: IFTRUE 61333
61313: LD_INT 5
61315: DOUBLE
61316: EQUAL
61317: IFTRUE 61333
61319: LD_INT 34
61321: DOUBLE
61322: EQUAL
61323: IFTRUE 61333
61325: LD_INT 37
61327: DOUBLE
61328: EQUAL
61329: IFTRUE 61333
61331: GO 61389
61333: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61334: LD_ADDR_VAR 0 9
61338: PUSH
61339: LD_VAR 0 53
61343: PUSH
61344: LD_VAR 0 54
61348: PUSH
61349: LD_VAR 0 55
61353: PUSH
61354: LD_VAR 0 56
61358: PUSH
61359: LD_VAR 0 57
61363: PUSH
61364: LD_VAR 0 58
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: PUSH
61377: LD_VAR 0 4
61381: PUSH
61382: LD_INT 1
61384: PLUS
61385: ARRAY
61386: ST_TO_ADDR
61387: GO 61496
61389: LD_INT 31
61391: DOUBLE
61392: EQUAL
61393: IFTRUE 61439
61395: LD_INT 32
61397: DOUBLE
61398: EQUAL
61399: IFTRUE 61439
61401: LD_INT 33
61403: DOUBLE
61404: EQUAL
61405: IFTRUE 61439
61407: LD_INT 27
61409: DOUBLE
61410: EQUAL
61411: IFTRUE 61439
61413: LD_INT 26
61415: DOUBLE
61416: EQUAL
61417: IFTRUE 61439
61419: LD_INT 28
61421: DOUBLE
61422: EQUAL
61423: IFTRUE 61439
61425: LD_INT 29
61427: DOUBLE
61428: EQUAL
61429: IFTRUE 61439
61431: LD_INT 30
61433: DOUBLE
61434: EQUAL
61435: IFTRUE 61439
61437: GO 61495
61439: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61440: LD_ADDR_VAR 0 9
61444: PUSH
61445: LD_VAR 0 59
61449: PUSH
61450: LD_VAR 0 60
61454: PUSH
61455: LD_VAR 0 61
61459: PUSH
61460: LD_VAR 0 62
61464: PUSH
61465: LD_VAR 0 63
61469: PUSH
61470: LD_VAR 0 64
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: LD_VAR 0 4
61487: PUSH
61488: LD_INT 1
61490: PLUS
61491: ARRAY
61492: ST_TO_ADDR
61493: GO 61496
61495: POP
// temp_list2 = [ ] ;
61496: LD_ADDR_VAR 0 10
61500: PUSH
61501: EMPTY
61502: ST_TO_ADDR
// for i in temp_list do
61503: LD_ADDR_VAR 0 8
61507: PUSH
61508: LD_VAR 0 9
61512: PUSH
61513: FOR_IN
61514: IFFALSE 61566
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61516: LD_ADDR_VAR 0 10
61520: PUSH
61521: LD_VAR 0 10
61525: PUSH
61526: LD_VAR 0 8
61530: PUSH
61531: LD_INT 1
61533: ARRAY
61534: PUSH
61535: LD_VAR 0 2
61539: PLUS
61540: PUSH
61541: LD_VAR 0 8
61545: PUSH
61546: LD_INT 2
61548: ARRAY
61549: PUSH
61550: LD_VAR 0 3
61554: PLUS
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: ADD
61563: ST_TO_ADDR
61564: GO 61513
61566: POP
61567: POP
// result = temp_list2 ;
61568: LD_ADDR_VAR 0 7
61572: PUSH
61573: LD_VAR 0 10
61577: ST_TO_ADDR
// end ;
61578: LD_VAR 0 7
61582: RET
// export function EnemyInRange ( unit , dist ) ; begin
61583: LD_INT 0
61585: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61586: LD_ADDR_VAR 0 3
61590: PUSH
61591: LD_VAR 0 1
61595: PPUSH
61596: CALL_OW 255
61600: PPUSH
61601: LD_VAR 0 1
61605: PPUSH
61606: CALL_OW 250
61610: PPUSH
61611: LD_VAR 0 1
61615: PPUSH
61616: CALL_OW 251
61620: PPUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: CALL 34979 0 4
61630: PUSH
61631: LD_INT 4
61633: ARRAY
61634: ST_TO_ADDR
// end ;
61635: LD_VAR 0 3
61639: RET
// export function PlayerSeeMe ( unit ) ; begin
61640: LD_INT 0
61642: PPUSH
// result := See ( your_side , unit ) ;
61643: LD_ADDR_VAR 0 2
61647: PUSH
61648: LD_OWVAR 2
61652: PPUSH
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 292
61662: ST_TO_ADDR
// end ;
61663: LD_VAR 0 2
61667: RET
// export function ReverseDir ( unit ) ; begin
61668: LD_INT 0
61670: PPUSH
// if not unit then
61671: LD_VAR 0 1
61675: NOT
61676: IFFALSE 61680
// exit ;
61678: GO 61703
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61680: LD_ADDR_VAR 0 2
61684: PUSH
61685: LD_VAR 0 1
61689: PPUSH
61690: CALL_OW 254
61694: PUSH
61695: LD_INT 3
61697: PLUS
61698: PUSH
61699: LD_INT 6
61701: MOD
61702: ST_TO_ADDR
// end ;
61703: LD_VAR 0 2
61707: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
61712: PPUSH
61713: PPUSH
61714: PPUSH
// if not hexes then
61715: LD_VAR 0 2
61719: NOT
61720: IFFALSE 61724
// exit ;
61722: GO 61872
// dist := 9999 ;
61724: LD_ADDR_VAR 0 5
61728: PUSH
61729: LD_INT 9999
61731: ST_TO_ADDR
// for i = 1 to hexes do
61732: LD_ADDR_VAR 0 4
61736: PUSH
61737: DOUBLE
61738: LD_INT 1
61740: DEC
61741: ST_TO_ADDR
61742: LD_VAR 0 2
61746: PUSH
61747: FOR_TO
61748: IFFALSE 61860
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61750: LD_VAR 0 1
61754: PPUSH
61755: LD_VAR 0 2
61759: PUSH
61760: LD_VAR 0 4
61764: ARRAY
61765: PUSH
61766: LD_INT 1
61768: ARRAY
61769: PPUSH
61770: LD_VAR 0 2
61774: PUSH
61775: LD_VAR 0 4
61779: ARRAY
61780: PUSH
61781: LD_INT 2
61783: ARRAY
61784: PPUSH
61785: CALL_OW 297
61789: PUSH
61790: LD_VAR 0 5
61794: LESS
61795: IFFALSE 61858
// begin hex := hexes [ i ] ;
61797: LD_ADDR_VAR 0 7
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_VAR 0 4
61811: ARRAY
61812: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61813: LD_ADDR_VAR 0 5
61817: PUSH
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 2
61827: PUSH
61828: LD_VAR 0 4
61832: ARRAY
61833: PUSH
61834: LD_INT 1
61836: ARRAY
61837: PPUSH
61838: LD_VAR 0 2
61842: PUSH
61843: LD_VAR 0 4
61847: ARRAY
61848: PUSH
61849: LD_INT 2
61851: ARRAY
61852: PPUSH
61853: CALL_OW 297
61857: ST_TO_ADDR
// end ; end ;
61858: GO 61747
61860: POP
61861: POP
// result := hex ;
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_VAR 0 7
61871: ST_TO_ADDR
// end ;
61872: LD_VAR 0 3
61876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61877: LD_INT 0
61879: PPUSH
61880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61881: LD_VAR 0 1
61885: NOT
61886: PUSH
61887: LD_VAR 0 1
61891: PUSH
61892: LD_INT 21
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 23
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PPUSH
61916: CALL_OW 69
61920: IN
61921: NOT
61922: OR
61923: IFFALSE 61927
// exit ;
61925: GO 61974
// for i = 1 to 3 do
61927: LD_ADDR_VAR 0 3
61931: PUSH
61932: DOUBLE
61933: LD_INT 1
61935: DEC
61936: ST_TO_ADDR
61937: LD_INT 3
61939: PUSH
61940: FOR_TO
61941: IFFALSE 61972
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 250
61952: PPUSH
61953: LD_VAR 0 1
61957: PPUSH
61958: CALL_OW 251
61962: PPUSH
61963: LD_INT 1
61965: PPUSH
61966: CALL_OW 453
61970: GO 61940
61972: POP
61973: POP
// end ;
61974: LD_VAR 0 2
61978: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61979: LD_INT 0
61981: PPUSH
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61987: LD_VAR 0 1
61991: NOT
61992: PUSH
61993: LD_VAR 0 2
61997: NOT
61998: OR
61999: PUSH
62000: LD_VAR 0 1
62004: PPUSH
62005: CALL_OW 314
62009: OR
62010: IFFALSE 62014
// exit ;
62012: GO 62455
// x := GetX ( enemy_unit ) ;
62014: LD_ADDR_VAR 0 7
62018: PUSH
62019: LD_VAR 0 2
62023: PPUSH
62024: CALL_OW 250
62028: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62029: LD_ADDR_VAR 0 8
62033: PUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: CALL_OW 251
62043: ST_TO_ADDR
// if not x or not y then
62044: LD_VAR 0 7
62048: NOT
62049: PUSH
62050: LD_VAR 0 8
62054: NOT
62055: OR
62056: IFFALSE 62060
// exit ;
62058: GO 62455
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62060: LD_ADDR_VAR 0 6
62064: PUSH
62065: LD_VAR 0 7
62069: PPUSH
62070: LD_INT 0
62072: PPUSH
62073: LD_INT 4
62075: PPUSH
62076: CALL_OW 272
62080: PUSH
62081: LD_VAR 0 8
62085: PPUSH
62086: LD_INT 0
62088: PPUSH
62089: LD_INT 4
62091: PPUSH
62092: CALL_OW 273
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_VAR 0 7
62105: PPUSH
62106: LD_INT 1
62108: PPUSH
62109: LD_INT 4
62111: PPUSH
62112: CALL_OW 272
62116: PUSH
62117: LD_VAR 0 8
62121: PPUSH
62122: LD_INT 1
62124: PPUSH
62125: LD_INT 4
62127: PPUSH
62128: CALL_OW 273
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 7
62141: PPUSH
62142: LD_INT 2
62144: PPUSH
62145: LD_INT 4
62147: PPUSH
62148: CALL_OW 272
62152: PUSH
62153: LD_VAR 0 8
62157: PPUSH
62158: LD_INT 2
62160: PPUSH
62161: LD_INT 4
62163: PPUSH
62164: CALL_OW 273
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_VAR 0 7
62177: PPUSH
62178: LD_INT 3
62180: PPUSH
62181: LD_INT 4
62183: PPUSH
62184: CALL_OW 272
62188: PUSH
62189: LD_VAR 0 8
62193: PPUSH
62194: LD_INT 3
62196: PPUSH
62197: LD_INT 4
62199: PPUSH
62200: CALL_OW 273
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_VAR 0 7
62213: PPUSH
62214: LD_INT 4
62216: PPUSH
62217: LD_INT 4
62219: PPUSH
62220: CALL_OW 272
62224: PUSH
62225: LD_VAR 0 8
62229: PPUSH
62230: LD_INT 4
62232: PPUSH
62233: LD_INT 4
62235: PPUSH
62236: CALL_OW 273
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_VAR 0 7
62249: PPUSH
62250: LD_INT 5
62252: PPUSH
62253: LD_INT 4
62255: PPUSH
62256: CALL_OW 272
62260: PUSH
62261: LD_VAR 0 8
62265: PPUSH
62266: LD_INT 5
62268: PPUSH
62269: LD_INT 4
62271: PPUSH
62272: CALL_OW 273
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: ST_TO_ADDR
// for i = tmp downto 1 do
62289: LD_ADDR_VAR 0 4
62293: PUSH
62294: DOUBLE
62295: LD_VAR 0 6
62299: INC
62300: ST_TO_ADDR
62301: LD_INT 1
62303: PUSH
62304: FOR_DOWNTO
62305: IFFALSE 62406
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62307: LD_VAR 0 6
62311: PUSH
62312: LD_VAR 0 4
62316: ARRAY
62317: PUSH
62318: LD_INT 1
62320: ARRAY
62321: PPUSH
62322: LD_VAR 0 6
62326: PUSH
62327: LD_VAR 0 4
62331: ARRAY
62332: PUSH
62333: LD_INT 2
62335: ARRAY
62336: PPUSH
62337: CALL_OW 488
62341: NOT
62342: PUSH
62343: LD_VAR 0 6
62347: PUSH
62348: LD_VAR 0 4
62352: ARRAY
62353: PUSH
62354: LD_INT 1
62356: ARRAY
62357: PPUSH
62358: LD_VAR 0 6
62362: PUSH
62363: LD_VAR 0 4
62367: ARRAY
62368: PUSH
62369: LD_INT 2
62371: ARRAY
62372: PPUSH
62373: CALL_OW 428
62377: PUSH
62378: LD_INT 0
62380: NONEQUAL
62381: OR
62382: IFFALSE 62404
// tmp := Delete ( tmp , i ) ;
62384: LD_ADDR_VAR 0 6
62388: PUSH
62389: LD_VAR 0 6
62393: PPUSH
62394: LD_VAR 0 4
62398: PPUSH
62399: CALL_OW 3
62403: ST_TO_ADDR
62404: GO 62304
62406: POP
62407: POP
// j := GetClosestHex ( unit , tmp ) ;
62408: LD_ADDR_VAR 0 5
62412: PUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: LD_VAR 0 6
62422: PPUSH
62423: CALL 61708 0 2
62427: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62428: LD_VAR 0 1
62432: PPUSH
62433: LD_VAR 0 5
62437: PUSH
62438: LD_INT 1
62440: ARRAY
62441: PPUSH
62442: LD_VAR 0 5
62446: PUSH
62447: LD_INT 2
62449: ARRAY
62450: PPUSH
62451: CALL_OW 111
// end ;
62455: LD_VAR 0 3
62459: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
62464: PPUSH
// uc_side = 0 ;
62465: LD_ADDR_OWVAR 20
62469: PUSH
62470: LD_INT 0
62472: ST_TO_ADDR
// uc_nation = 0 ;
62473: LD_ADDR_OWVAR 21
62477: PUSH
62478: LD_INT 0
62480: ST_TO_ADDR
// InitHc_All ( ) ;
62481: CALL_OW 584
// InitVc ;
62485: CALL_OW 20
// if mastodonts then
62489: LD_VAR 0 6
62493: IFFALSE 62560
// for i = 1 to mastodonts do
62495: LD_ADDR_VAR 0 11
62499: PUSH
62500: DOUBLE
62501: LD_INT 1
62503: DEC
62504: ST_TO_ADDR
62505: LD_VAR 0 6
62509: PUSH
62510: FOR_TO
62511: IFFALSE 62558
// begin vc_chassis := 31 ;
62513: LD_ADDR_OWVAR 37
62517: PUSH
62518: LD_INT 31
62520: ST_TO_ADDR
// vc_control := control_rider ;
62521: LD_ADDR_OWVAR 38
62525: PUSH
62526: LD_INT 4
62528: ST_TO_ADDR
// animal := CreateVehicle ;
62529: LD_ADDR_VAR 0 12
62533: PUSH
62534: CALL_OW 45
62538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62539: LD_VAR 0 12
62543: PPUSH
62544: LD_VAR 0 8
62548: PPUSH
62549: LD_INT 0
62551: PPUSH
62552: CALL 64748 0 3
// end ;
62556: GO 62510
62558: POP
62559: POP
// if horses then
62560: LD_VAR 0 5
62564: IFFALSE 62631
// for i = 1 to horses do
62566: LD_ADDR_VAR 0 11
62570: PUSH
62571: DOUBLE
62572: LD_INT 1
62574: DEC
62575: ST_TO_ADDR
62576: LD_VAR 0 5
62580: PUSH
62581: FOR_TO
62582: IFFALSE 62629
// begin hc_class := 21 ;
62584: LD_ADDR_OWVAR 28
62588: PUSH
62589: LD_INT 21
62591: ST_TO_ADDR
// hc_gallery :=  ;
62592: LD_ADDR_OWVAR 33
62596: PUSH
62597: LD_STRING 
62599: ST_TO_ADDR
// animal := CreateHuman ;
62600: LD_ADDR_VAR 0 12
62604: PUSH
62605: CALL_OW 44
62609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62610: LD_VAR 0 12
62614: PPUSH
62615: LD_VAR 0 8
62619: PPUSH
62620: LD_INT 0
62622: PPUSH
62623: CALL 64748 0 3
// end ;
62627: GO 62581
62629: POP
62630: POP
// if birds then
62631: LD_VAR 0 1
62635: IFFALSE 62702
// for i = 1 to birds do
62637: LD_ADDR_VAR 0 11
62641: PUSH
62642: DOUBLE
62643: LD_INT 1
62645: DEC
62646: ST_TO_ADDR
62647: LD_VAR 0 1
62651: PUSH
62652: FOR_TO
62653: IFFALSE 62700
// begin hc_class = 18 ;
62655: LD_ADDR_OWVAR 28
62659: PUSH
62660: LD_INT 18
62662: ST_TO_ADDR
// hc_gallery =  ;
62663: LD_ADDR_OWVAR 33
62667: PUSH
62668: LD_STRING 
62670: ST_TO_ADDR
// animal := CreateHuman ;
62671: LD_ADDR_VAR 0 12
62675: PUSH
62676: CALL_OW 44
62680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62681: LD_VAR 0 12
62685: PPUSH
62686: LD_VAR 0 8
62690: PPUSH
62691: LD_INT 0
62693: PPUSH
62694: CALL 64748 0 3
// end ;
62698: GO 62652
62700: POP
62701: POP
// if tigers then
62702: LD_VAR 0 2
62706: IFFALSE 62790
// for i = 1 to tigers do
62708: LD_ADDR_VAR 0 11
62712: PUSH
62713: DOUBLE
62714: LD_INT 1
62716: DEC
62717: ST_TO_ADDR
62718: LD_VAR 0 2
62722: PUSH
62723: FOR_TO
62724: IFFALSE 62788
// begin hc_class = class_tiger ;
62726: LD_ADDR_OWVAR 28
62730: PUSH
62731: LD_INT 14
62733: ST_TO_ADDR
// hc_gallery =  ;
62734: LD_ADDR_OWVAR 33
62738: PUSH
62739: LD_STRING 
62741: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62742: LD_ADDR_OWVAR 35
62746: PUSH
62747: LD_INT 7
62749: NEG
62750: PPUSH
62751: LD_INT 7
62753: PPUSH
62754: CALL_OW 12
62758: ST_TO_ADDR
// animal := CreateHuman ;
62759: LD_ADDR_VAR 0 12
62763: PUSH
62764: CALL_OW 44
62768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62769: LD_VAR 0 12
62773: PPUSH
62774: LD_VAR 0 8
62778: PPUSH
62779: LD_INT 0
62781: PPUSH
62782: CALL 64748 0 3
// end ;
62786: GO 62723
62788: POP
62789: POP
// if apemans then
62790: LD_VAR 0 3
62794: IFFALSE 62917
// for i = 1 to apemans do
62796: LD_ADDR_VAR 0 11
62800: PUSH
62801: DOUBLE
62802: LD_INT 1
62804: DEC
62805: ST_TO_ADDR
62806: LD_VAR 0 3
62810: PUSH
62811: FOR_TO
62812: IFFALSE 62915
// begin hc_class = class_apeman ;
62814: LD_ADDR_OWVAR 28
62818: PUSH
62819: LD_INT 12
62821: ST_TO_ADDR
// hc_gallery =  ;
62822: LD_ADDR_OWVAR 33
62826: PUSH
62827: LD_STRING 
62829: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62830: LD_ADDR_OWVAR 35
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PPUSH
62839: LD_INT 2
62841: PPUSH
62842: CALL_OW 12
62846: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62847: LD_ADDR_OWVAR 31
62851: PUSH
62852: LD_INT 1
62854: PPUSH
62855: LD_INT 3
62857: PPUSH
62858: CALL_OW 12
62862: PUSH
62863: LD_INT 1
62865: PPUSH
62866: LD_INT 3
62868: PPUSH
62869: CALL_OW 12
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: ST_TO_ADDR
// animal := CreateHuman ;
62886: LD_ADDR_VAR 0 12
62890: PUSH
62891: CALL_OW 44
62895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62896: LD_VAR 0 12
62900: PPUSH
62901: LD_VAR 0 8
62905: PPUSH
62906: LD_INT 0
62908: PPUSH
62909: CALL 64748 0 3
// end ;
62913: GO 62811
62915: POP
62916: POP
// if enchidnas then
62917: LD_VAR 0 4
62921: IFFALSE 62988
// for i = 1 to enchidnas do
62923: LD_ADDR_VAR 0 11
62927: PUSH
62928: DOUBLE
62929: LD_INT 1
62931: DEC
62932: ST_TO_ADDR
62933: LD_VAR 0 4
62937: PUSH
62938: FOR_TO
62939: IFFALSE 62986
// begin hc_class = 13 ;
62941: LD_ADDR_OWVAR 28
62945: PUSH
62946: LD_INT 13
62948: ST_TO_ADDR
// hc_gallery =  ;
62949: LD_ADDR_OWVAR 33
62953: PUSH
62954: LD_STRING 
62956: ST_TO_ADDR
// animal := CreateHuman ;
62957: LD_ADDR_VAR 0 12
62961: PUSH
62962: CALL_OW 44
62966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62967: LD_VAR 0 12
62971: PPUSH
62972: LD_VAR 0 8
62976: PPUSH
62977: LD_INT 0
62979: PPUSH
62980: CALL 64748 0 3
// end ;
62984: GO 62938
62986: POP
62987: POP
// if fishes then
62988: LD_VAR 0 7
62992: IFFALSE 63059
// for i = 1 to fishes do
62994: LD_ADDR_VAR 0 11
62998: PUSH
62999: DOUBLE
63000: LD_INT 1
63002: DEC
63003: ST_TO_ADDR
63004: LD_VAR 0 7
63008: PUSH
63009: FOR_TO
63010: IFFALSE 63057
// begin hc_class = 20 ;
63012: LD_ADDR_OWVAR 28
63016: PUSH
63017: LD_INT 20
63019: ST_TO_ADDR
// hc_gallery =  ;
63020: LD_ADDR_OWVAR 33
63024: PUSH
63025: LD_STRING 
63027: ST_TO_ADDR
// animal := CreateHuman ;
63028: LD_ADDR_VAR 0 12
63032: PUSH
63033: CALL_OW 44
63037: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63038: LD_VAR 0 12
63042: PPUSH
63043: LD_VAR 0 9
63047: PPUSH
63048: LD_INT 0
63050: PPUSH
63051: CALL 64748 0 3
// end ;
63055: GO 63009
63057: POP
63058: POP
// end ;
63059: LD_VAR 0 10
63063: RET
// export function WantHeal ( sci , unit ) ; begin
63064: LD_INT 0
63066: PPUSH
// if GetTaskList ( sci ) > 0 then
63067: LD_VAR 0 1
63071: PPUSH
63072: CALL_OW 437
63076: PUSH
63077: LD_INT 0
63079: GREATER
63080: IFFALSE 63150
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63082: LD_VAR 0 1
63086: PPUSH
63087: CALL_OW 437
63091: PUSH
63092: LD_INT 1
63094: ARRAY
63095: PUSH
63096: LD_INT 1
63098: ARRAY
63099: PUSH
63100: LD_STRING l
63102: EQUAL
63103: PUSH
63104: LD_VAR 0 1
63108: PPUSH
63109: CALL_OW 437
63113: PUSH
63114: LD_INT 1
63116: ARRAY
63117: PUSH
63118: LD_INT 4
63120: ARRAY
63121: PUSH
63122: LD_VAR 0 2
63126: EQUAL
63127: AND
63128: IFFALSE 63140
// result := true else
63130: LD_ADDR_VAR 0 3
63134: PUSH
63135: LD_INT 1
63137: ST_TO_ADDR
63138: GO 63148
// result := false ;
63140: LD_ADDR_VAR 0 3
63144: PUSH
63145: LD_INT 0
63147: ST_TO_ADDR
// end else
63148: GO 63158
// result := false ;
63150: LD_ADDR_VAR 0 3
63154: PUSH
63155: LD_INT 0
63157: ST_TO_ADDR
// end ;
63158: LD_VAR 0 3
63162: RET
// export function HealTarget ( sci ) ; begin
63163: LD_INT 0
63165: PPUSH
// if not sci then
63166: LD_VAR 0 1
63170: NOT
63171: IFFALSE 63175
// exit ;
63173: GO 63240
// result := 0 ;
63175: LD_ADDR_VAR 0 2
63179: PUSH
63180: LD_INT 0
63182: ST_TO_ADDR
// if GetTaskList ( sci ) then
63183: LD_VAR 0 1
63187: PPUSH
63188: CALL_OW 437
63192: IFFALSE 63240
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 437
63203: PUSH
63204: LD_INT 1
63206: ARRAY
63207: PUSH
63208: LD_INT 1
63210: ARRAY
63211: PUSH
63212: LD_STRING l
63214: EQUAL
63215: IFFALSE 63240
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63217: LD_ADDR_VAR 0 2
63221: PUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: CALL_OW 437
63231: PUSH
63232: LD_INT 1
63234: ARRAY
63235: PUSH
63236: LD_INT 4
63238: ARRAY
63239: ST_TO_ADDR
// end ;
63240: LD_VAR 0 2
63244: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63245: LD_INT 0
63247: PPUSH
63248: PPUSH
63249: PPUSH
63250: PPUSH
// if not base_units then
63251: LD_VAR 0 1
63255: NOT
63256: IFFALSE 63260
// exit ;
63258: GO 63347
// result := false ;
63260: LD_ADDR_VAR 0 2
63264: PUSH
63265: LD_INT 0
63267: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63268: LD_ADDR_VAR 0 5
63272: PUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: LD_INT 21
63280: PUSH
63281: LD_INT 3
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PPUSH
63288: CALL_OW 72
63292: ST_TO_ADDR
// if not tmp then
63293: LD_VAR 0 5
63297: NOT
63298: IFFALSE 63302
// exit ;
63300: GO 63347
// for i in tmp do
63302: LD_ADDR_VAR 0 3
63306: PUSH
63307: LD_VAR 0 5
63311: PUSH
63312: FOR_IN
63313: IFFALSE 63345
// begin result := EnemyInRange ( i , 22 ) ;
63315: LD_ADDR_VAR 0 2
63319: PUSH
63320: LD_VAR 0 3
63324: PPUSH
63325: LD_INT 22
63327: PPUSH
63328: CALL 61583 0 2
63332: ST_TO_ADDR
// if result then
63333: LD_VAR 0 2
63337: IFFALSE 63343
// exit ;
63339: POP
63340: POP
63341: GO 63347
// end ;
63343: GO 63312
63345: POP
63346: POP
// end ;
63347: LD_VAR 0 2
63351: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63352: LD_INT 0
63354: PPUSH
63355: PPUSH
// if not units then
63356: LD_VAR 0 1
63360: NOT
63361: IFFALSE 63365
// exit ;
63363: GO 63435
// result := [ ] ;
63365: LD_ADDR_VAR 0 3
63369: PUSH
63370: EMPTY
63371: ST_TO_ADDR
// for i in units do
63372: LD_ADDR_VAR 0 4
63376: PUSH
63377: LD_VAR 0 1
63381: PUSH
63382: FOR_IN
63383: IFFALSE 63433
// if GetTag ( i ) = tag then
63385: LD_VAR 0 4
63389: PPUSH
63390: CALL_OW 110
63394: PUSH
63395: LD_VAR 0 2
63399: EQUAL
63400: IFFALSE 63431
// result := Replace ( result , result + 1 , i ) ;
63402: LD_ADDR_VAR 0 3
63406: PUSH
63407: LD_VAR 0 3
63411: PPUSH
63412: LD_VAR 0 3
63416: PUSH
63417: LD_INT 1
63419: PLUS
63420: PPUSH
63421: LD_VAR 0 4
63425: PPUSH
63426: CALL_OW 1
63430: ST_TO_ADDR
63431: GO 63382
63433: POP
63434: POP
// end ;
63435: LD_VAR 0 3
63439: RET
// export function IsDriver ( un ) ; begin
63440: LD_INT 0
63442: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 55
63455: PUSH
63456: EMPTY
63457: LIST
63458: PPUSH
63459: CALL_OW 69
63463: IN
63464: ST_TO_ADDR
// end ;
63465: LD_VAR 0 2
63469: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63470: LD_INT 0
63472: PPUSH
63473: PPUSH
// list := [ ] ;
63474: LD_ADDR_VAR 0 5
63478: PUSH
63479: EMPTY
63480: ST_TO_ADDR
// case d of 0 :
63481: LD_VAR 0 3
63485: PUSH
63486: LD_INT 0
63488: DOUBLE
63489: EQUAL
63490: IFTRUE 63494
63492: GO 63627
63494: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63495: LD_ADDR_VAR 0 5
63499: PUSH
63500: LD_VAR 0 1
63504: PUSH
63505: LD_INT 4
63507: MINUS
63508: PUSH
63509: LD_VAR 0 2
63513: PUSH
63514: LD_INT 4
63516: MINUS
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: PUSH
63526: LD_VAR 0 1
63530: PUSH
63531: LD_INT 3
63533: MINUS
63534: PUSH
63535: LD_VAR 0 2
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: PUSH
63548: LD_VAR 0 1
63552: PUSH
63553: LD_INT 4
63555: PLUS
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: PUSH
63570: LD_VAR 0 1
63574: PUSH
63575: LD_INT 3
63577: PLUS
63578: PUSH
63579: LD_VAR 0 2
63583: PUSH
63584: LD_INT 3
63586: PLUS
63587: PUSH
63588: LD_INT 5
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_VAR 0 2
63605: PUSH
63606: LD_INT 4
63608: PLUS
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// end ; 1 :
63625: GO 64325
63627: LD_INT 1
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63635
63633: GO 63768
63635: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63636: LD_ADDR_VAR 0 5
63640: PUSH
63641: LD_VAR 0 1
63645: PUSH
63646: LD_VAR 0 2
63650: PUSH
63651: LD_INT 4
63653: MINUS
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: LIST
63662: PUSH
63663: LD_VAR 0 1
63667: PUSH
63668: LD_INT 3
63670: MINUS
63671: PUSH
63672: LD_VAR 0 2
63676: PUSH
63677: LD_INT 3
63679: MINUS
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 4
63696: MINUS
63697: PUSH
63698: LD_VAR 0 2
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: LIST
63710: PUSH
63711: LD_VAR 0 1
63715: PUSH
63716: LD_VAR 0 2
63720: PUSH
63721: LD_INT 3
63723: PLUS
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: PUSH
63733: LD_VAR 0 1
63737: PUSH
63738: LD_INT 4
63740: PLUS
63741: PUSH
63742: LD_VAR 0 2
63746: PUSH
63747: LD_INT 4
63749: PLUS
63750: PUSH
63751: LD_INT 5
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// end ; 2 :
63766: GO 64325
63768: LD_INT 2
63770: DOUBLE
63771: EQUAL
63772: IFTRUE 63776
63774: GO 63905
63776: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63777: LD_ADDR_VAR 0 5
63781: PUSH
63782: LD_VAR 0 1
63786: PUSH
63787: LD_VAR 0 2
63791: PUSH
63792: LD_INT 3
63794: MINUS
63795: PUSH
63796: LD_INT 3
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: PUSH
63804: LD_VAR 0 1
63808: PUSH
63809: LD_INT 4
63811: PLUS
63812: PUSH
63813: LD_VAR 0 2
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: LIST
63825: PUSH
63826: LD_VAR 0 1
63830: PUSH
63831: LD_VAR 0 2
63835: PUSH
63836: LD_INT 4
63838: PLUS
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: PUSH
63848: LD_VAR 0 1
63852: PUSH
63853: LD_INT 3
63855: MINUS
63856: PUSH
63857: LD_VAR 0 2
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: PUSH
63870: LD_VAR 0 1
63874: PUSH
63875: LD_INT 4
63877: MINUS
63878: PUSH
63879: LD_VAR 0 2
63883: PUSH
63884: LD_INT 4
63886: MINUS
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// end ; 3 :
63903: GO 64325
63905: LD_INT 3
63907: DOUBLE
63908: EQUAL
63909: IFTRUE 63913
63911: GO 64046
63913: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63914: LD_ADDR_VAR 0 5
63918: PUSH
63919: LD_VAR 0 1
63923: PUSH
63924: LD_INT 3
63926: PLUS
63927: PUSH
63928: LD_VAR 0 2
63932: PUSH
63933: LD_INT 4
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: PUSH
63941: LD_VAR 0 1
63945: PUSH
63946: LD_INT 4
63948: PLUS
63949: PUSH
63950: LD_VAR 0 2
63954: PUSH
63955: LD_INT 4
63957: PLUS
63958: PUSH
63959: LD_INT 5
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: LIST
63966: PUSH
63967: LD_VAR 0 1
63971: PUSH
63972: LD_INT 4
63974: MINUS
63975: PUSH
63976: LD_VAR 0 2
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: PUSH
63989: LD_VAR 0 1
63993: PUSH
63994: LD_VAR 0 2
63998: PUSH
63999: LD_INT 4
64001: MINUS
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: PUSH
64011: LD_VAR 0 1
64015: PUSH
64016: LD_INT 3
64018: MINUS
64019: PUSH
64020: LD_VAR 0 2
64024: PUSH
64025: LD_INT 3
64027: MINUS
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: ST_TO_ADDR
// end ; 4 :
64044: GO 64325
64046: LD_INT 4
64048: DOUBLE
64049: EQUAL
64050: IFTRUE 64054
64052: GO 64187
64054: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64055: LD_ADDR_VAR 0 5
64059: PUSH
64060: LD_VAR 0 1
64064: PUSH
64065: LD_VAR 0 2
64069: PUSH
64070: LD_INT 4
64072: PLUS
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: PUSH
64082: LD_VAR 0 1
64086: PUSH
64087: LD_INT 3
64089: PLUS
64090: PUSH
64091: LD_VAR 0 2
64095: PUSH
64096: LD_INT 3
64098: PLUS
64099: PUSH
64100: LD_INT 5
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: PUSH
64108: LD_VAR 0 1
64112: PUSH
64113: LD_INT 4
64115: PLUS
64116: PUSH
64117: LD_VAR 0 2
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: LIST
64129: PUSH
64130: LD_VAR 0 1
64134: PUSH
64135: LD_VAR 0 2
64139: PUSH
64140: LD_INT 3
64142: MINUS
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_INT 4
64159: MINUS
64160: PUSH
64161: LD_VAR 0 2
64165: PUSH
64166: LD_INT 4
64168: MINUS
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// end ; 5 :
64185: GO 64325
64187: LD_INT 5
64189: DOUBLE
64190: EQUAL
64191: IFTRUE 64195
64193: GO 64324
64195: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64196: LD_ADDR_VAR 0 5
64200: PUSH
64201: LD_VAR 0 1
64205: PUSH
64206: LD_INT 4
64208: MINUS
64209: PUSH
64210: LD_VAR 0 2
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: PUSH
64223: LD_VAR 0 1
64227: PUSH
64228: LD_VAR 0 2
64232: PUSH
64233: LD_INT 4
64235: MINUS
64236: PUSH
64237: LD_INT 3
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: PUSH
64245: LD_VAR 0 1
64249: PUSH
64250: LD_INT 4
64252: PLUS
64253: PUSH
64254: LD_VAR 0 2
64258: PUSH
64259: LD_INT 4
64261: PLUS
64262: PUSH
64263: LD_INT 5
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_INT 3
64278: PLUS
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: PUSH
64293: LD_VAR 0 1
64297: PUSH
64298: LD_VAR 0 2
64302: PUSH
64303: LD_INT 3
64305: PLUS
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: ST_TO_ADDR
// end ; end ;
64322: GO 64325
64324: POP
// result := list ;
64325: LD_ADDR_VAR 0 4
64329: PUSH
64330: LD_VAR 0 5
64334: ST_TO_ADDR
// end ;
64335: LD_VAR 0 4
64339: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
64344: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64345: LD_VAR 0 1
64349: NOT
64350: PUSH
64351: LD_VAR 0 2
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: LD_INT 3
64364: PUSH
64365: LD_INT 4
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: IN
64374: NOT
64375: OR
64376: IFFALSE 64380
// exit ;
64378: GO 64472
// tmp := [ ] ;
64380: LD_ADDR_VAR 0 5
64384: PUSH
64385: EMPTY
64386: ST_TO_ADDR
// for i in units do
64387: LD_ADDR_VAR 0 4
64391: PUSH
64392: LD_VAR 0 1
64396: PUSH
64397: FOR_IN
64398: IFFALSE 64441
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64400: LD_ADDR_VAR 0 5
64404: PUSH
64405: LD_VAR 0 5
64409: PPUSH
64410: LD_VAR 0 5
64414: PUSH
64415: LD_INT 1
64417: PLUS
64418: PPUSH
64419: LD_VAR 0 4
64423: PPUSH
64424: LD_VAR 0 2
64428: PPUSH
64429: CALL_OW 259
64433: PPUSH
64434: CALL_OW 2
64438: ST_TO_ADDR
64439: GO 64397
64441: POP
64442: POP
// if not tmp then
64443: LD_VAR 0 5
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64472
// result := SortListByListDesc ( units , tmp ) ;
64452: LD_ADDR_VAR 0 3
64456: PUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: LD_VAR 0 5
64466: PPUSH
64467: CALL_OW 77
64471: ST_TO_ADDR
// end ;
64472: LD_VAR 0 3
64476: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64477: LD_INT 0
64479: PPUSH
64480: PPUSH
64481: PPUSH
// result := false ;
64482: LD_ADDR_VAR 0 3
64486: PUSH
64487: LD_INT 0
64489: ST_TO_ADDR
// x := GetX ( building ) ;
64490: LD_ADDR_VAR 0 4
64494: PUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: CALL_OW 250
64504: ST_TO_ADDR
// y := GetY ( building ) ;
64505: LD_ADDR_VAR 0 5
64509: PUSH
64510: LD_VAR 0 2
64514: PPUSH
64515: CALL_OW 251
64519: ST_TO_ADDR
// if not building or not x or not y then
64520: LD_VAR 0 2
64524: NOT
64525: PUSH
64526: LD_VAR 0 4
64530: NOT
64531: OR
64532: PUSH
64533: LD_VAR 0 5
64537: NOT
64538: OR
64539: IFFALSE 64543
// exit ;
64541: GO 64635
// if GetTaskList ( unit ) then
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 437
64552: IFFALSE 64635
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64554: LD_STRING e
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: CALL_OW 437
64566: PUSH
64567: LD_INT 1
64569: ARRAY
64570: PUSH
64571: LD_INT 1
64573: ARRAY
64574: EQUAL
64575: PUSH
64576: LD_VAR 0 4
64580: PUSH
64581: LD_VAR 0 1
64585: PPUSH
64586: CALL_OW 437
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PUSH
64595: LD_INT 2
64597: ARRAY
64598: EQUAL
64599: AND
64600: PUSH
64601: LD_VAR 0 5
64605: PUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 437
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: PUSH
64620: LD_INT 3
64622: ARRAY
64623: EQUAL
64624: AND
64625: IFFALSE 64635
// result := true end ;
64627: LD_ADDR_VAR 0 3
64631: PUSH
64632: LD_INT 1
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 3
64639: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64640: LD_INT 0
64642: PPUSH
// result := false ;
64643: LD_ADDR_VAR 0 4
64647: PUSH
64648: LD_INT 0
64650: ST_TO_ADDR
// if GetTaskList ( unit ) then
64651: LD_VAR 0 1
64655: PPUSH
64656: CALL_OW 437
64660: IFFALSE 64743
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64662: LD_STRING M
64664: PUSH
64665: LD_VAR 0 1
64669: PPUSH
64670: CALL_OW 437
64674: PUSH
64675: LD_INT 1
64677: ARRAY
64678: PUSH
64679: LD_INT 1
64681: ARRAY
64682: EQUAL
64683: PUSH
64684: LD_VAR 0 2
64688: PUSH
64689: LD_VAR 0 1
64693: PPUSH
64694: CALL_OW 437
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PUSH
64703: LD_INT 2
64705: ARRAY
64706: EQUAL
64707: AND
64708: PUSH
64709: LD_VAR 0 3
64713: PUSH
64714: LD_VAR 0 1
64718: PPUSH
64719: CALL_OW 437
64723: PUSH
64724: LD_INT 1
64726: ARRAY
64727: PUSH
64728: LD_INT 3
64730: ARRAY
64731: EQUAL
64732: AND
64733: IFFALSE 64743
// result := true ;
64735: LD_ADDR_VAR 0 4
64739: PUSH
64740: LD_INT 1
64742: ST_TO_ADDR
// end ; end ;
64743: LD_VAR 0 4
64747: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64748: LD_INT 0
64750: PPUSH
64751: PPUSH
64752: PPUSH
64753: PPUSH
// if not unit or not area then
64754: LD_VAR 0 1
64758: NOT
64759: PUSH
64760: LD_VAR 0 2
64764: NOT
64765: OR
64766: IFFALSE 64770
// exit ;
64768: GO 64934
// tmp := AreaToList ( area , i ) ;
64770: LD_ADDR_VAR 0 6
64774: PUSH
64775: LD_VAR 0 2
64779: PPUSH
64780: LD_VAR 0 5
64784: PPUSH
64785: CALL_OW 517
64789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: DOUBLE
64796: LD_INT 1
64798: DEC
64799: ST_TO_ADDR
64800: LD_VAR 0 6
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: PUSH
64809: FOR_TO
64810: IFFALSE 64932
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64812: LD_ADDR_VAR 0 7
64816: PUSH
64817: LD_VAR 0 6
64821: PUSH
64822: LD_INT 1
64824: ARRAY
64825: PUSH
64826: LD_VAR 0 5
64830: ARRAY
64831: PUSH
64832: LD_VAR 0 6
64836: PUSH
64837: LD_INT 2
64839: ARRAY
64840: PUSH
64841: LD_VAR 0 5
64845: ARRAY
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64851: LD_VAR 0 7
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PPUSH
64860: LD_VAR 0 7
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: PPUSH
64869: CALL_OW 428
64873: PUSH
64874: LD_INT 0
64876: EQUAL
64877: IFFALSE 64930
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64879: LD_VAR 0 1
64883: PPUSH
64884: LD_VAR 0 7
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PPUSH
64893: LD_VAR 0 7
64897: PUSH
64898: LD_INT 2
64900: ARRAY
64901: PPUSH
64902: LD_VAR 0 3
64906: PPUSH
64907: CALL_OW 48
// result := IsPlaced ( unit ) ;
64911: LD_ADDR_VAR 0 4
64915: PUSH
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 305
64925: ST_TO_ADDR
// exit ;
64926: POP
64927: POP
64928: GO 64934
// end ; end ;
64930: GO 64809
64932: POP
64933: POP
// end ;
64934: LD_VAR 0 4
64938: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64939: LD_INT 0
64941: PPUSH
64942: PPUSH
64943: PPUSH
// if not side or side > 8 then
64944: LD_VAR 0 1
64948: NOT
64949: PUSH
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 8
64957: GREATER
64958: OR
64959: IFFALSE 64963
// exit ;
64961: GO 65150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64963: LD_ADDR_VAR 0 4
64967: PUSH
64968: LD_INT 22
64970: PUSH
64971: LD_VAR 0 1
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 21
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PPUSH
64994: CALL_OW 69
64998: ST_TO_ADDR
// if not tmp then
64999: LD_VAR 0 4
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65150
// enable_addtolog := true ;
65008: LD_ADDR_OWVAR 81
65012: PUSH
65013: LD_INT 1
65015: ST_TO_ADDR
// AddToLog ( [ ) ;
65016: LD_STRING [
65018: PPUSH
65019: CALL_OW 561
// for i in tmp do
65023: LD_ADDR_VAR 0 3
65027: PUSH
65028: LD_VAR 0 4
65032: PUSH
65033: FOR_IN
65034: IFFALSE 65141
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65036: LD_STRING [
65038: PUSH
65039: LD_VAR 0 3
65043: PPUSH
65044: CALL_OW 266
65048: STR
65049: PUSH
65050: LD_STRING , 
65052: STR
65053: PUSH
65054: LD_VAR 0 3
65058: PPUSH
65059: CALL_OW 250
65063: STR
65064: PUSH
65065: LD_STRING , 
65067: STR
65068: PUSH
65069: LD_VAR 0 3
65073: PPUSH
65074: CALL_OW 251
65078: STR
65079: PUSH
65080: LD_STRING , 
65082: STR
65083: PUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: CALL_OW 254
65093: STR
65094: PUSH
65095: LD_STRING , 
65097: STR
65098: PUSH
65099: LD_VAR 0 3
65103: PPUSH
65104: LD_INT 1
65106: PPUSH
65107: CALL_OW 268
65111: STR
65112: PUSH
65113: LD_STRING , 
65115: STR
65116: PUSH
65117: LD_VAR 0 3
65121: PPUSH
65122: LD_INT 2
65124: PPUSH
65125: CALL_OW 268
65129: STR
65130: PUSH
65131: LD_STRING ],
65133: STR
65134: PPUSH
65135: CALL_OW 561
// end ;
65139: GO 65033
65141: POP
65142: POP
// AddToLog ( ]; ) ;
65143: LD_STRING ];
65145: PPUSH
65146: CALL_OW 561
// end ;
65150: LD_VAR 0 2
65154: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65155: LD_INT 0
65157: PPUSH
65158: PPUSH
65159: PPUSH
65160: PPUSH
65161: PPUSH
// if not area or not rate or not max then
65162: LD_VAR 0 1
65166: NOT
65167: PUSH
65168: LD_VAR 0 2
65172: NOT
65173: OR
65174: PUSH
65175: LD_VAR 0 4
65179: NOT
65180: OR
65181: IFFALSE 65185
// exit ;
65183: GO 65377
// while 1 do
65185: LD_INT 1
65187: IFFALSE 65377
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65189: LD_ADDR_VAR 0 9
65193: PUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_INT 1
65201: PPUSH
65202: CALL_OW 287
65206: PUSH
65207: LD_INT 10
65209: MUL
65210: ST_TO_ADDR
// r := rate / 10 ;
65211: LD_ADDR_VAR 0 7
65215: PUSH
65216: LD_VAR 0 2
65220: PUSH
65221: LD_INT 10
65223: DIVREAL
65224: ST_TO_ADDR
// time := 1 1$00 ;
65225: LD_ADDR_VAR 0 8
65229: PUSH
65230: LD_INT 2100
65232: ST_TO_ADDR
// if amount < min then
65233: LD_VAR 0 9
65237: PUSH
65238: LD_VAR 0 3
65242: LESS
65243: IFFALSE 65261
// r := r * 2 else
65245: LD_ADDR_VAR 0 7
65249: PUSH
65250: LD_VAR 0 7
65254: PUSH
65255: LD_INT 2
65257: MUL
65258: ST_TO_ADDR
65259: GO 65287
// if amount > max then
65261: LD_VAR 0 9
65265: PUSH
65266: LD_VAR 0 4
65270: GREATER
65271: IFFALSE 65287
// r := r / 2 ;
65273: LD_ADDR_VAR 0 7
65277: PUSH
65278: LD_VAR 0 7
65282: PUSH
65283: LD_INT 2
65285: DIVREAL
65286: ST_TO_ADDR
// time := time / r ;
65287: LD_ADDR_VAR 0 8
65291: PUSH
65292: LD_VAR 0 8
65296: PUSH
65297: LD_VAR 0 7
65301: DIVREAL
65302: ST_TO_ADDR
// if time < 0 then
65303: LD_VAR 0 8
65307: PUSH
65308: LD_INT 0
65310: LESS
65311: IFFALSE 65328
// time := time * - 1 ;
65313: LD_ADDR_VAR 0 8
65317: PUSH
65318: LD_VAR 0 8
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: MUL
65327: ST_TO_ADDR
// wait ( time ) ;
65328: LD_VAR 0 8
65332: PPUSH
65333: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65337: LD_INT 35
65339: PPUSH
65340: LD_INT 875
65342: PPUSH
65343: CALL_OW 12
65347: PPUSH
65348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65352: LD_INT 1
65354: PPUSH
65355: LD_INT 5
65357: PPUSH
65358: CALL_OW 12
65362: PPUSH
65363: LD_VAR 0 1
65367: PPUSH
65368: LD_INT 1
65370: PPUSH
65371: CALL_OW 55
// end ;
65375: GO 65185
// end ;
65377: LD_VAR 0 5
65381: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65382: LD_INT 0
65384: PPUSH
65385: PPUSH
65386: PPUSH
65387: PPUSH
65388: PPUSH
65389: PPUSH
65390: PPUSH
65391: PPUSH
// if not turrets or not factories then
65392: LD_VAR 0 1
65396: NOT
65397: PUSH
65398: LD_VAR 0 2
65402: NOT
65403: OR
65404: IFFALSE 65408
// exit ;
65406: GO 65715
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65408: LD_ADDR_VAR 0 10
65412: PUSH
65413: LD_INT 5
65415: PUSH
65416: LD_INT 6
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: LD_INT 5
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 24
65450: PUSH
65451: LD_INT 25
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 23
65460: PUSH
65461: LD_INT 27
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 42
65474: PUSH
65475: LD_INT 43
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 44
65484: PUSH
65485: LD_INT 46
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 45
65494: PUSH
65495: LD_INT 47
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: ST_TO_ADDR
// result := [ ] ;
65512: LD_ADDR_VAR 0 3
65516: PUSH
65517: EMPTY
65518: ST_TO_ADDR
// for i in turrets do
65519: LD_ADDR_VAR 0 4
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: FOR_IN
65530: IFFALSE 65713
// begin nat := GetNation ( i ) ;
65532: LD_ADDR_VAR 0 7
65536: PUSH
65537: LD_VAR 0 4
65541: PPUSH
65542: CALL_OW 248
65546: ST_TO_ADDR
// weapon := 0 ;
65547: LD_ADDR_VAR 0 8
65551: PUSH
65552: LD_INT 0
65554: ST_TO_ADDR
// if not nat then
65555: LD_VAR 0 7
65559: NOT
65560: IFFALSE 65564
// continue ;
65562: GO 65529
// for j in list [ nat ] do
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: LD_VAR 0 10
65573: PUSH
65574: LD_VAR 0 7
65578: ARRAY
65579: PUSH
65580: FOR_IN
65581: IFFALSE 65622
// if GetBWeapon ( i ) = j [ 1 ] then
65583: LD_VAR 0 4
65587: PPUSH
65588: CALL_OW 269
65592: PUSH
65593: LD_VAR 0 5
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: EQUAL
65602: IFFALSE 65620
// begin weapon := j [ 2 ] ;
65604: LD_ADDR_VAR 0 8
65608: PUSH
65609: LD_VAR 0 5
65613: PUSH
65614: LD_INT 2
65616: ARRAY
65617: ST_TO_ADDR
// break ;
65618: GO 65622
// end ;
65620: GO 65580
65622: POP
65623: POP
// if not weapon then
65624: LD_VAR 0 8
65628: NOT
65629: IFFALSE 65633
// continue ;
65631: GO 65529
// for k in factories do
65633: LD_ADDR_VAR 0 6
65637: PUSH
65638: LD_VAR 0 2
65642: PUSH
65643: FOR_IN
65644: IFFALSE 65709
// begin weapons := AvailableWeaponList ( k ) ;
65646: LD_ADDR_VAR 0 9
65650: PUSH
65651: LD_VAR 0 6
65655: PPUSH
65656: CALL_OW 478
65660: ST_TO_ADDR
// if not weapons then
65661: LD_VAR 0 9
65665: NOT
65666: IFFALSE 65670
// continue ;
65668: GO 65643
// if weapon in weapons then
65670: LD_VAR 0 8
65674: PUSH
65675: LD_VAR 0 9
65679: IN
65680: IFFALSE 65707
// begin result := [ i , weapon ] ;
65682: LD_ADDR_VAR 0 3
65686: PUSH
65687: LD_VAR 0 4
65691: PUSH
65692: LD_VAR 0 8
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: ST_TO_ADDR
// exit ;
65701: POP
65702: POP
65703: POP
65704: POP
65705: GO 65715
// end ; end ;
65707: GO 65643
65709: POP
65710: POP
// end ;
65711: GO 65529
65713: POP
65714: POP
// end ;
65715: LD_VAR 0 3
65719: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65720: LD_INT 0
65722: PPUSH
// if not side or side > 8 then
65723: LD_VAR 0 3
65727: NOT
65728: PUSH
65729: LD_VAR 0 3
65733: PUSH
65734: LD_INT 8
65736: GREATER
65737: OR
65738: IFFALSE 65742
// exit ;
65740: GO 65801
// if not range then
65742: LD_VAR 0 4
65746: NOT
65747: IFFALSE 65758
// range := - 12 ;
65749: LD_ADDR_VAR 0 4
65753: PUSH
65754: LD_INT 12
65756: NEG
65757: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_VAR 0 2
65767: PPUSH
65768: LD_VAR 0 3
65772: PPUSH
65773: LD_VAR 0 4
65777: PPUSH
65778: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 2
65791: PPUSH
65792: LD_VAR 0 3
65796: PPUSH
65797: CALL_OW 331
// end ;
65801: LD_VAR 0 5
65805: RET
// export function Video ( mode ) ; begin
65806: LD_INT 0
65808: PPUSH
// ingame_video = mode ;
65809: LD_ADDR_OWVAR 52
65813: PUSH
65814: LD_VAR 0 1
65818: ST_TO_ADDR
// interface_hidden = mode ;
65819: LD_ADDR_OWVAR 54
65823: PUSH
65824: LD_VAR 0 1
65828: ST_TO_ADDR
// end ;
65829: LD_VAR 0 2
65833: RET
// export function Join ( array , element ) ; begin
65834: LD_INT 0
65836: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65837: LD_ADDR_VAR 0 3
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: LD_VAR 0 1
65851: PUSH
65852: LD_INT 1
65854: PLUS
65855: PPUSH
65856: LD_VAR 0 2
65860: PPUSH
65861: CALL_OW 1
65865: ST_TO_ADDR
// end ;
65866: LD_VAR 0 3
65870: RET
// export function JoinUnion ( array , element ) ; begin
65871: LD_INT 0
65873: PPUSH
// result := array union element ;
65874: LD_ADDR_VAR 0 3
65878: PUSH
65879: LD_VAR 0 1
65883: PUSH
65884: LD_VAR 0 2
65888: UNION
65889: ST_TO_ADDR
// end ;
65890: LD_VAR 0 3
65894: RET
// export function GetBehemoths ( side ) ; begin
65895: LD_INT 0
65897: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65898: LD_ADDR_VAR 0 2
65902: PUSH
65903: LD_INT 22
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 31
65917: PUSH
65918: LD_INT 25
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PPUSH
65929: CALL_OW 69
65933: ST_TO_ADDR
// end ;
65934: LD_VAR 0 2
65938: RET
// export function Shuffle ( array ) ; var i , index ; begin
65939: LD_INT 0
65941: PPUSH
65942: PPUSH
65943: PPUSH
// result := [ ] ;
65944: LD_ADDR_VAR 0 2
65948: PUSH
65949: EMPTY
65950: ST_TO_ADDR
// if not array then
65951: LD_VAR 0 1
65955: NOT
65956: IFFALSE 65960
// exit ;
65958: GO 66059
// Randomize ;
65960: CALL_OW 10
// for i = array downto 1 do
65964: LD_ADDR_VAR 0 3
65968: PUSH
65969: DOUBLE
65970: LD_VAR 0 1
65974: INC
65975: ST_TO_ADDR
65976: LD_INT 1
65978: PUSH
65979: FOR_DOWNTO
65980: IFFALSE 66057
// begin index := rand ( 1 , array ) ;
65982: LD_ADDR_VAR 0 4
65986: PUSH
65987: LD_INT 1
65989: PPUSH
65990: LD_VAR 0 1
65994: PPUSH
65995: CALL_OW 12
65999: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66000: LD_ADDR_VAR 0 2
66004: PUSH
66005: LD_VAR 0 2
66009: PPUSH
66010: LD_VAR 0 2
66014: PUSH
66015: LD_INT 1
66017: PLUS
66018: PPUSH
66019: LD_VAR 0 1
66023: PUSH
66024: LD_VAR 0 4
66028: ARRAY
66029: PPUSH
66030: CALL_OW 2
66034: ST_TO_ADDR
// array := Delete ( array , index ) ;
66035: LD_ADDR_VAR 0 1
66039: PUSH
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_VAR 0 4
66049: PPUSH
66050: CALL_OW 3
66054: ST_TO_ADDR
// end ;
66055: GO 65979
66057: POP
66058: POP
// end ;
66059: LD_VAR 0 2
66063: RET
// export function GetBaseMaterials ( base ) ; begin
66064: LD_INT 0
66066: PPUSH
// result := [ 0 , 0 , 0 ] ;
66067: LD_ADDR_VAR 0 2
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// if not base then
66086: LD_VAR 0 1
66090: NOT
66091: IFFALSE 66095
// exit ;
66093: GO 66144
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66095: LD_ADDR_VAR 0 2
66099: PUSH
66100: LD_VAR 0 1
66104: PPUSH
66105: LD_INT 1
66107: PPUSH
66108: CALL_OW 275
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: LD_INT 2
66120: PPUSH
66121: CALL_OW 275
66125: PUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_INT 3
66133: PPUSH
66134: CALL_OW 275
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: ST_TO_ADDR
// end ;
66144: LD_VAR 0 2
66148: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66149: LD_INT 0
66151: PPUSH
66152: PPUSH
// result := array ;
66153: LD_ADDR_VAR 0 3
66157: PUSH
66158: LD_VAR 0 1
66162: ST_TO_ADDR
// if size > 0 then
66163: LD_VAR 0 2
66167: PUSH
66168: LD_INT 0
66170: GREATER
66171: IFFALSE 66217
// for i := array downto size do
66173: LD_ADDR_VAR 0 4
66177: PUSH
66178: DOUBLE
66179: LD_VAR 0 1
66183: INC
66184: ST_TO_ADDR
66185: LD_VAR 0 2
66189: PUSH
66190: FOR_DOWNTO
66191: IFFALSE 66215
// result := Delete ( result , result ) ;
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_VAR 0 3
66202: PPUSH
66203: LD_VAR 0 3
66207: PPUSH
66208: CALL_OW 3
66212: ST_TO_ADDR
66213: GO 66190
66215: POP
66216: POP
// end ;
66217: LD_VAR 0 3
66221: RET
// export function ComExit ( unit ) ; var tmp ; begin
66222: LD_INT 0
66224: PPUSH
66225: PPUSH
// if not IsInUnit ( unit ) then
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 310
66235: NOT
66236: IFFALSE 66240
// exit ;
66238: GO 66300
// tmp := IsInUnit ( unit ) ;
66240: LD_ADDR_VAR 0 3
66244: PUSH
66245: LD_VAR 0 1
66249: PPUSH
66250: CALL_OW 310
66254: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66255: LD_VAR 0 3
66259: PPUSH
66260: CALL_OW 247
66264: PUSH
66265: LD_INT 2
66267: EQUAL
66268: IFFALSE 66281
// ComExitVehicle ( unit ) else
66270: LD_VAR 0 1
66274: PPUSH
66275: CALL_OW 121
66279: GO 66290
// ComExitBuilding ( unit ) ;
66281: LD_VAR 0 1
66285: PPUSH
66286: CALL_OW 122
// result := tmp ;
66290: LD_ADDR_VAR 0 2
66294: PUSH
66295: LD_VAR 0 3
66299: ST_TO_ADDR
// end ;
66300: LD_VAR 0 2
66304: RET
// export function ComExitAll ( units ) ; var i ; begin
66305: LD_INT 0
66307: PPUSH
66308: PPUSH
// if not units then
66309: LD_VAR 0 1
66313: NOT
66314: IFFALSE 66318
// exit ;
66316: GO 66344
// for i in units do
66318: LD_ADDR_VAR 0 3
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: FOR_IN
66329: IFFALSE 66342
// ComExit ( i ) ;
66331: LD_VAR 0 3
66335: PPUSH
66336: CALL 66222 0 1
66340: GO 66328
66342: POP
66343: POP
// end ;
66344: LD_VAR 0 2
66348: RET
// export function ResetHc ; begin
66349: LD_INT 0
66351: PPUSH
// InitHc ;
66352: CALL_OW 19
// hc_importance := 0 ;
66356: LD_ADDR_OWVAR 32
66360: PUSH
66361: LD_INT 0
66363: ST_TO_ADDR
// end ;
66364: LD_VAR 0 1
66368: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66369: LD_INT 0
66371: PPUSH
66372: PPUSH
66373: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66374: LD_ADDR_VAR 0 6
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_VAR 0 3
66388: PLUS
66389: PUSH
66390: LD_INT 2
66392: DIV
66393: ST_TO_ADDR
// if _x < 0 then
66394: LD_VAR 0 6
66398: PUSH
66399: LD_INT 0
66401: LESS
66402: IFFALSE 66419
// _x := _x * - 1 ;
66404: LD_ADDR_VAR 0 6
66408: PUSH
66409: LD_VAR 0 6
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: MUL
66418: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66419: LD_ADDR_VAR 0 7
66423: PUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_VAR 0 4
66433: PLUS
66434: PUSH
66435: LD_INT 2
66437: DIV
66438: ST_TO_ADDR
// if _y < 0 then
66439: LD_VAR 0 7
66443: PUSH
66444: LD_INT 0
66446: LESS
66447: IFFALSE 66464
// _y := _y * - 1 ;
66449: LD_ADDR_VAR 0 7
66453: PUSH
66454: LD_VAR 0 7
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: MUL
66463: ST_TO_ADDR
// result := [ _x , _y ] ;
66464: LD_ADDR_VAR 0 5
66468: PUSH
66469: LD_VAR 0 6
66473: PUSH
66474: LD_VAR 0 7
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: ST_TO_ADDR
// end ;
66483: LD_VAR 0 5
66487: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
66492: PPUSH
66493: PPUSH
// task := GetTaskList ( unit ) ;
66494: LD_ADDR_VAR 0 7
66498: PUSH
66499: LD_VAR 0 1
66503: PPUSH
66504: CALL_OW 437
66508: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66509: LD_VAR 0 7
66513: NOT
66514: PUSH
66515: LD_VAR 0 1
66519: PPUSH
66520: LD_VAR 0 2
66524: PPUSH
66525: CALL_OW 308
66529: NOT
66530: AND
66531: IFFALSE 66535
// exit ;
66533: GO 66653
// if IsInArea ( unit , area ) then
66535: LD_VAR 0 1
66539: PPUSH
66540: LD_VAR 0 2
66544: PPUSH
66545: CALL_OW 308
66549: IFFALSE 66567
// begin ComMoveToArea ( unit , goAway ) ;
66551: LD_VAR 0 1
66555: PPUSH
66556: LD_VAR 0 3
66560: PPUSH
66561: CALL_OW 113
// exit ;
66565: GO 66653
// end ; if task [ 1 ] [ 1 ] <> M then
66567: LD_VAR 0 7
66571: PUSH
66572: LD_INT 1
66574: ARRAY
66575: PUSH
66576: LD_INT 1
66578: ARRAY
66579: PUSH
66580: LD_STRING M
66582: NONEQUAL
66583: IFFALSE 66587
// exit ;
66585: GO 66653
// x := task [ 1 ] [ 2 ] ;
66587: LD_ADDR_VAR 0 5
66591: PUSH
66592: LD_VAR 0 7
66596: PUSH
66597: LD_INT 1
66599: ARRAY
66600: PUSH
66601: LD_INT 2
66603: ARRAY
66604: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66605: LD_ADDR_VAR 0 6
66609: PUSH
66610: LD_VAR 0 7
66614: PUSH
66615: LD_INT 1
66617: ARRAY
66618: PUSH
66619: LD_INT 3
66621: ARRAY
66622: ST_TO_ADDR
// if InArea ( x , y , area ) then
66623: LD_VAR 0 5
66627: PPUSH
66628: LD_VAR 0 6
66632: PPUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: CALL_OW 309
66642: IFFALSE 66653
// ComStop ( unit ) ;
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 141
// end ;
66653: LD_VAR 0 4
66657: RET
// export function Abs ( value ) ; begin
66658: LD_INT 0
66660: PPUSH
// result := value ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: LD_VAR 0 1
66670: ST_TO_ADDR
// if value < 0 then
66671: LD_VAR 0 1
66675: PUSH
66676: LD_INT 0
66678: LESS
66679: IFFALSE 66696
// result := value * - 1 ;
66681: LD_ADDR_VAR 0 2
66685: PUSH
66686: LD_VAR 0 1
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: MUL
66695: ST_TO_ADDR
// end ;
66696: LD_VAR 0 2
66700: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66701: LD_INT 0
66703: PPUSH
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
66708: PPUSH
66709: PPUSH
66710: PPUSH
// if not unit or not building then
66711: LD_VAR 0 1
66715: NOT
66716: PUSH
66717: LD_VAR 0 2
66721: NOT
66722: OR
66723: IFFALSE 66727
// exit ;
66725: GO 66953
// x := GetX ( building ) ;
66727: LD_ADDR_VAR 0 4
66731: PUSH
66732: LD_VAR 0 2
66736: PPUSH
66737: CALL_OW 250
66741: ST_TO_ADDR
// y := GetY ( building ) ;
66742: LD_ADDR_VAR 0 6
66746: PUSH
66747: LD_VAR 0 2
66751: PPUSH
66752: CALL_OW 251
66756: ST_TO_ADDR
// d := GetDir ( building ) ;
66757: LD_ADDR_VAR 0 8
66761: PUSH
66762: LD_VAR 0 2
66766: PPUSH
66767: CALL_OW 254
66771: ST_TO_ADDR
// r := 4 ;
66772: LD_ADDR_VAR 0 9
66776: PUSH
66777: LD_INT 4
66779: ST_TO_ADDR
// for i := 1 to 5 do
66780: LD_ADDR_VAR 0 10
66784: PUSH
66785: DOUBLE
66786: LD_INT 1
66788: DEC
66789: ST_TO_ADDR
66790: LD_INT 5
66792: PUSH
66793: FOR_TO
66794: IFFALSE 66951
// begin _x := ShiftX ( x , d , r + i ) ;
66796: LD_ADDR_VAR 0 5
66800: PUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: LD_VAR 0 8
66810: PPUSH
66811: LD_VAR 0 9
66815: PUSH
66816: LD_VAR 0 10
66820: PLUS
66821: PPUSH
66822: CALL_OW 272
66826: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66827: LD_ADDR_VAR 0 7
66831: PUSH
66832: LD_VAR 0 6
66836: PPUSH
66837: LD_VAR 0 8
66841: PPUSH
66842: LD_VAR 0 9
66846: PUSH
66847: LD_VAR 0 10
66851: PLUS
66852: PPUSH
66853: CALL_OW 273
66857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66858: LD_VAR 0 5
66862: PPUSH
66863: LD_VAR 0 7
66867: PPUSH
66868: CALL_OW 488
66872: PUSH
66873: LD_VAR 0 5
66877: PPUSH
66878: LD_VAR 0 7
66882: PPUSH
66883: CALL_OW 428
66887: PPUSH
66888: CALL_OW 247
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: IN
66903: NOT
66904: AND
66905: IFFALSE 66949
// begin ComMoveXY ( unit , _x , _y ) ;
66907: LD_VAR 0 1
66911: PPUSH
66912: LD_VAR 0 5
66916: PPUSH
66917: LD_VAR 0 7
66921: PPUSH
66922: CALL_OW 111
// result := [ _x , _y ] ;
66926: LD_ADDR_VAR 0 3
66930: PUSH
66931: LD_VAR 0 5
66935: PUSH
66936: LD_VAR 0 7
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// exit ;
66945: POP
66946: POP
66947: GO 66953
// end ; end ;
66949: GO 66793
66951: POP
66952: POP
// end ;
66953: LD_VAR 0 3
66957: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66958: LD_INT 0
66960: PPUSH
66961: PPUSH
66962: PPUSH
// result := 0 ;
66963: LD_ADDR_VAR 0 3
66967: PUSH
66968: LD_INT 0
66970: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66971: LD_VAR 0 1
66975: PUSH
66976: LD_INT 0
66978: LESS
66979: PUSH
66980: LD_VAR 0 1
66984: PUSH
66985: LD_INT 8
66987: GREATER
66988: OR
66989: PUSH
66990: LD_VAR 0 2
66994: PUSH
66995: LD_INT 0
66997: LESS
66998: OR
66999: PUSH
67000: LD_VAR 0 2
67004: PUSH
67005: LD_INT 8
67007: GREATER
67008: OR
67009: IFFALSE 67013
// exit ;
67011: GO 67088
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67013: LD_ADDR_VAR 0 4
67017: PUSH
67018: LD_INT 22
67020: PUSH
67021: LD_VAR 0 2
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PPUSH
67030: CALL_OW 69
67034: PUSH
67035: FOR_IN
67036: IFFALSE 67086
// begin un := UnitShoot ( i ) ;
67038: LD_ADDR_VAR 0 5
67042: PUSH
67043: LD_VAR 0 4
67047: PPUSH
67048: CALL_OW 504
67052: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67053: LD_VAR 0 5
67057: PPUSH
67058: CALL_OW 255
67062: PUSH
67063: LD_VAR 0 1
67067: EQUAL
67068: IFFALSE 67084
// begin result := un ;
67070: LD_ADDR_VAR 0 3
67074: PUSH
67075: LD_VAR 0 5
67079: ST_TO_ADDR
// exit ;
67080: POP
67081: POP
67082: GO 67088
// end ; end ;
67084: GO 67035
67086: POP
67087: POP
// end ;
67088: LD_VAR 0 3
67092: RET
// export function GetCargoBay ( units ) ; begin
67093: LD_INT 0
67095: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67096: LD_ADDR_VAR 0 2
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: LD_INT 2
67108: PUSH
67109: LD_INT 34
67111: PUSH
67112: LD_INT 12
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 34
67121: PUSH
67122: LD_INT 51
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 34
67131: PUSH
67132: LD_INT 32
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 34
67141: PUSH
67142: LD_EXP 96
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: PPUSH
67158: CALL_OW 72
67162: ST_TO_ADDR
// end ;
67163: LD_VAR 0 2
67167: RET
// export function Negate ( value ) ; begin
67168: LD_INT 0
67170: PPUSH
// result := not value ;
67171: LD_ADDR_VAR 0 2
67175: PUSH
67176: LD_VAR 0 1
67180: NOT
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function Inc ( value ) ; begin
67187: LD_INT 0
67189: PPUSH
// result := value + 1 ;
67190: LD_ADDR_VAR 0 2
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_INT 1
67202: PLUS
67203: ST_TO_ADDR
// end ;
67204: LD_VAR 0 2
67208: RET
// export function Dec ( value ) ; begin
67209: LD_INT 0
67211: PPUSH
// result := value - 1 ;
67212: LD_ADDR_VAR 0 2
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 1
67224: MINUS
67225: ST_TO_ADDR
// end ;
67226: LD_VAR 0 2
67230: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67231: LD_INT 0
67233: PPUSH
67234: PPUSH
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67241: LD_VAR 0 1
67245: PPUSH
67246: LD_VAR 0 2
67250: PPUSH
67251: CALL_OW 488
67255: NOT
67256: PUSH
67257: LD_VAR 0 3
67261: PPUSH
67262: LD_VAR 0 4
67266: PPUSH
67267: CALL_OW 488
67271: NOT
67272: OR
67273: IFFALSE 67286
// begin result := - 1 ;
67275: LD_ADDR_VAR 0 5
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: ST_TO_ADDR
// exit ;
67284: GO 67521
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67286: LD_ADDR_VAR 0 12
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: LD_VAR 0 3
67305: PPUSH
67306: LD_VAR 0 4
67310: PPUSH
67311: CALL 66369 0 4
67315: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67316: LD_ADDR_VAR 0 11
67320: PUSH
67321: LD_VAR 0 1
67325: PPUSH
67326: LD_VAR 0 2
67330: PPUSH
67331: LD_VAR 0 12
67335: PUSH
67336: LD_INT 1
67338: ARRAY
67339: PPUSH
67340: LD_VAR 0 12
67344: PUSH
67345: LD_INT 2
67347: ARRAY
67348: PPUSH
67349: CALL_OW 298
67353: ST_TO_ADDR
// distance := 9999 ;
67354: LD_ADDR_VAR 0 10
67358: PUSH
67359: LD_INT 9999
67361: ST_TO_ADDR
// for i := 0 to 5 do
67362: LD_ADDR_VAR 0 6
67366: PUSH
67367: DOUBLE
67368: LD_INT 0
67370: DEC
67371: ST_TO_ADDR
67372: LD_INT 5
67374: PUSH
67375: FOR_TO
67376: IFFALSE 67519
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67378: LD_ADDR_VAR 0 7
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_VAR 0 6
67392: PPUSH
67393: LD_VAR 0 11
67397: PPUSH
67398: CALL_OW 272
67402: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67403: LD_ADDR_VAR 0 8
67407: PUSH
67408: LD_VAR 0 2
67412: PPUSH
67413: LD_VAR 0 6
67417: PPUSH
67418: LD_VAR 0 11
67422: PPUSH
67423: CALL_OW 273
67427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67428: LD_VAR 0 7
67432: PPUSH
67433: LD_VAR 0 8
67437: PPUSH
67438: CALL_OW 488
67442: NOT
67443: IFFALSE 67447
// continue ;
67445: GO 67375
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67447: LD_ADDR_VAR 0 9
67451: PUSH
67452: LD_VAR 0 12
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: PPUSH
67461: LD_VAR 0 12
67465: PUSH
67466: LD_INT 2
67468: ARRAY
67469: PPUSH
67470: LD_VAR 0 7
67474: PPUSH
67475: LD_VAR 0 8
67479: PPUSH
67480: CALL_OW 298
67484: ST_TO_ADDR
// if tmp < distance then
67485: LD_VAR 0 9
67489: PUSH
67490: LD_VAR 0 10
67494: LESS
67495: IFFALSE 67517
// begin result := i ;
67497: LD_ADDR_VAR 0 5
67501: PUSH
67502: LD_VAR 0 6
67506: ST_TO_ADDR
// distance := tmp ;
67507: LD_ADDR_VAR 0 10
67511: PUSH
67512: LD_VAR 0 9
67516: ST_TO_ADDR
// end ; end ;
67517: GO 67375
67519: POP
67520: POP
// end ;
67521: LD_VAR 0 5
67525: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67526: LD_INT 0
67528: PPUSH
67529: PPUSH
// if not driver or not IsInUnit ( driver ) then
67530: LD_VAR 0 1
67534: NOT
67535: PUSH
67536: LD_VAR 0 1
67540: PPUSH
67541: CALL_OW 310
67545: NOT
67546: OR
67547: IFFALSE 67551
// exit ;
67549: GO 67641
// vehicle := IsInUnit ( driver ) ;
67551: LD_ADDR_VAR 0 3
67555: PUSH
67556: LD_VAR 0 1
67560: PPUSH
67561: CALL_OW 310
67565: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67566: LD_VAR 0 1
67570: PPUSH
67571: LD_STRING \
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_STRING E
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: LD_VAR 0 3
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PPUSH
67637: CALL_OW 446
// end ;
67641: LD_VAR 0 2
67645: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67646: LD_INT 0
67648: PPUSH
67649: PPUSH
// if not driver or not IsInUnit ( driver ) then
67650: LD_VAR 0 1
67654: NOT
67655: PUSH
67656: LD_VAR 0 1
67660: PPUSH
67661: CALL_OW 310
67665: NOT
67666: OR
67667: IFFALSE 67671
// exit ;
67669: GO 67761
// vehicle := IsInUnit ( driver ) ;
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_VAR 0 1
67680: PPUSH
67681: CALL_OW 310
67685: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_STRING \
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: PUSH
67721: LD_STRING E
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_VAR 0 3
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PPUSH
67757: CALL_OW 447
// end ;
67761: LD_VAR 0 2
67765: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67766: LD_INT 0
67768: PPUSH
67769: PPUSH
67770: PPUSH
// tmp := [ ] ;
67771: LD_ADDR_VAR 0 5
67775: PUSH
67776: EMPTY
67777: ST_TO_ADDR
// for i in units do
67778: LD_ADDR_VAR 0 4
67782: PUSH
67783: LD_VAR 0 1
67787: PUSH
67788: FOR_IN
67789: IFFALSE 67827
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: LD_VAR 0 5
67800: PPUSH
67801: LD_VAR 0 5
67805: PUSH
67806: LD_INT 1
67808: PLUS
67809: PPUSH
67810: LD_VAR 0 4
67814: PPUSH
67815: CALL_OW 256
67819: PPUSH
67820: CALL_OW 2
67824: ST_TO_ADDR
67825: GO 67788
67827: POP
67828: POP
// if not tmp then
67829: LD_VAR 0 5
67833: NOT
67834: IFFALSE 67838
// exit ;
67836: GO 67886
// if asc then
67838: LD_VAR 0 2
67842: IFFALSE 67866
// result := SortListByListAsc ( units , tmp ) else
67844: LD_ADDR_VAR 0 3
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: LD_VAR 0 5
67858: PPUSH
67859: CALL_OW 76
67863: ST_TO_ADDR
67864: GO 67886
// result := SortListByListDesc ( units , tmp ) ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 5
67880: PPUSH
67881: CALL_OW 77
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 3
67890: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67891: LD_INT 0
67893: PPUSH
67894: PPUSH
// task := GetTaskList ( mech ) ;
67895: LD_ADDR_VAR 0 4
67899: PUSH
67900: LD_VAR 0 1
67904: PPUSH
67905: CALL_OW 437
67909: ST_TO_ADDR
// if not task then
67910: LD_VAR 0 4
67914: NOT
67915: IFFALSE 67919
// exit ;
67917: GO 67961
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67919: LD_ADDR_VAR 0 3
67923: PUSH
67924: LD_VAR 0 4
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PUSH
67933: LD_INT 1
67935: ARRAY
67936: PUSH
67937: LD_STRING r
67939: EQUAL
67940: PUSH
67941: LD_VAR 0 4
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PUSH
67950: LD_INT 4
67952: ARRAY
67953: PUSH
67954: LD_VAR 0 2
67958: EQUAL
67959: AND
67960: ST_TO_ADDR
// end ;
67961: LD_VAR 0 3
67965: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67966: LD_INT 0
67968: PPUSH
// SetDir ( unit , d ) ;
67969: LD_VAR 0 1
67973: PPUSH
67974: LD_VAR 0 4
67978: PPUSH
67979: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_VAR 0 2
67992: PPUSH
67993: LD_VAR 0 3
67997: PPUSH
67998: LD_VAR 0 5
68002: PPUSH
68003: CALL_OW 48
// end ;
68007: LD_VAR 0 6
68011: RET
// export function ToNaturalNumber ( number ) ; begin
68012: LD_INT 0
68014: PPUSH
// result := number div 1 ;
68015: LD_ADDR_VAR 0 2
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_INT 1
68027: DIV
68028: ST_TO_ADDR
// if number < 0 then
68029: LD_VAR 0 1
68033: PUSH
68034: LD_INT 0
68036: LESS
68037: IFFALSE 68047
// result := 0 ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_INT 0
68046: ST_TO_ADDR
// end ;
68047: LD_VAR 0 2
68051: RET
// export function SortByClass ( units , class ) ; var un ; begin
68052: LD_INT 0
68054: PPUSH
68055: PPUSH
// if not units or not class then
68056: LD_VAR 0 1
68060: NOT
68061: PUSH
68062: LD_VAR 0 2
68066: NOT
68067: OR
68068: IFFALSE 68072
// exit ;
68070: GO 68167
// result := [ ] ;
68072: LD_ADDR_VAR 0 3
68076: PUSH
68077: EMPTY
68078: ST_TO_ADDR
// for un in units do
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_VAR 0 1
68088: PUSH
68089: FOR_IN
68090: IFFALSE 68165
// if GetClass ( un ) = class then
68092: LD_VAR 0 4
68096: PPUSH
68097: CALL_OW 257
68101: PUSH
68102: LD_VAR 0 2
68106: EQUAL
68107: IFFALSE 68134
// result := Insert ( result , 1 , un ) else
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_VAR 0 3
68118: PPUSH
68119: LD_INT 1
68121: PPUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 2
68131: ST_TO_ADDR
68132: GO 68163
// result := Replace ( result , result + 1 , un ) ;
68134: LD_ADDR_VAR 0 3
68138: PUSH
68139: LD_VAR 0 3
68143: PPUSH
68144: LD_VAR 0 3
68148: PUSH
68149: LD_INT 1
68151: PLUS
68152: PPUSH
68153: LD_VAR 0 4
68157: PPUSH
68158: CALL_OW 1
68162: ST_TO_ADDR
68163: GO 68089
68165: POP
68166: POP
// end ;
68167: LD_VAR 0 3
68171: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68172: LD_INT 0
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
68178: PPUSH
68179: PPUSH
68180: PPUSH
// result := [ ] ;
68181: LD_ADDR_VAR 0 4
68185: PUSH
68186: EMPTY
68187: ST_TO_ADDR
// if x - r < 0 then
68188: LD_VAR 0 1
68192: PUSH
68193: LD_VAR 0 3
68197: MINUS
68198: PUSH
68199: LD_INT 0
68201: LESS
68202: IFFALSE 68214
// min_x := 0 else
68204: LD_ADDR_VAR 0 8
68208: PUSH
68209: LD_INT 0
68211: ST_TO_ADDR
68212: GO 68230
// min_x := x - r ;
68214: LD_ADDR_VAR 0 8
68218: PUSH
68219: LD_VAR 0 1
68223: PUSH
68224: LD_VAR 0 3
68228: MINUS
68229: ST_TO_ADDR
// if y - r < 0 then
68230: LD_VAR 0 2
68234: PUSH
68235: LD_VAR 0 3
68239: MINUS
68240: PUSH
68241: LD_INT 0
68243: LESS
68244: IFFALSE 68256
// min_y := 0 else
68246: LD_ADDR_VAR 0 7
68250: PUSH
68251: LD_INT 0
68253: ST_TO_ADDR
68254: GO 68272
// min_y := y - r ;
68256: LD_ADDR_VAR 0 7
68260: PUSH
68261: LD_VAR 0 2
68265: PUSH
68266: LD_VAR 0 3
68270: MINUS
68271: ST_TO_ADDR
// max_x := x + r ;
68272: LD_ADDR_VAR 0 9
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: LD_VAR 0 3
68286: PLUS
68287: ST_TO_ADDR
// max_y := y + r ;
68288: LD_ADDR_VAR 0 10
68292: PUSH
68293: LD_VAR 0 2
68297: PUSH
68298: LD_VAR 0 3
68302: PLUS
68303: ST_TO_ADDR
// for _x = min_x to max_x do
68304: LD_ADDR_VAR 0 5
68308: PUSH
68309: DOUBLE
68310: LD_VAR 0 8
68314: DEC
68315: ST_TO_ADDR
68316: LD_VAR 0 9
68320: PUSH
68321: FOR_TO
68322: IFFALSE 68423
// for _y = min_y to max_y do
68324: LD_ADDR_VAR 0 6
68328: PUSH
68329: DOUBLE
68330: LD_VAR 0 7
68334: DEC
68335: ST_TO_ADDR
68336: LD_VAR 0 10
68340: PUSH
68341: FOR_TO
68342: IFFALSE 68419
// begin if not ValidHex ( _x , _y ) then
68344: LD_VAR 0 5
68348: PPUSH
68349: LD_VAR 0 6
68353: PPUSH
68354: CALL_OW 488
68358: NOT
68359: IFFALSE 68363
// continue ;
68361: GO 68341
// if GetResourceTypeXY ( _x , _y ) then
68363: LD_VAR 0 5
68367: PPUSH
68368: LD_VAR 0 6
68372: PPUSH
68373: CALL_OW 283
68377: IFFALSE 68417
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68379: LD_ADDR_VAR 0 4
68383: PUSH
68384: LD_VAR 0 4
68388: PPUSH
68389: LD_VAR 0 4
68393: PUSH
68394: LD_INT 1
68396: PLUS
68397: PPUSH
68398: LD_VAR 0 5
68402: PUSH
68403: LD_VAR 0 6
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PPUSH
68412: CALL_OW 1
68416: ST_TO_ADDR
// end ;
68417: GO 68341
68419: POP
68420: POP
68421: GO 68321
68423: POP
68424: POP
// end ;
68425: LD_VAR 0 4
68429: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68430: LD_INT 0
68432: PPUSH
68433: PPUSH
68434: PPUSH
68435: PPUSH
68436: PPUSH
68437: PPUSH
68438: PPUSH
68439: PPUSH
// if not units then
68440: LD_VAR 0 1
68444: NOT
68445: IFFALSE 68449
// exit ;
68447: GO 68874
// result := UnitFilter ( units , [ f_ok ] ) ;
68449: LD_ADDR_VAR 0 3
68453: PUSH
68454: LD_VAR 0 1
68458: PPUSH
68459: LD_INT 50
68461: PUSH
68462: EMPTY
68463: LIST
68464: PPUSH
68465: CALL_OW 72
68469: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68470: LD_ADDR_VAR 0 8
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 1
68482: ARRAY
68483: PPUSH
68484: CALL_OW 255
68488: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68489: LD_ADDR_VAR 0 10
68493: PUSH
68494: LD_INT 29
68496: PUSH
68497: LD_EXP 99
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: ST_TO_ADDR
// if not result then
68506: LD_VAR 0 3
68510: NOT
68511: IFFALSE 68515
// exit ;
68513: GO 68874
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68515: LD_ADDR_VAR 0 5
68519: PUSH
68520: LD_INT 81
68522: PUSH
68523: LD_VAR 0 8
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PPUSH
68532: CALL_OW 69
68536: ST_TO_ADDR
// for i in result do
68537: LD_ADDR_VAR 0 4
68541: PUSH
68542: LD_VAR 0 3
68546: PUSH
68547: FOR_IN
68548: IFFALSE 68872
// begin tag := GetTag ( i ) + 1 ;
68550: LD_ADDR_VAR 0 9
68554: PUSH
68555: LD_VAR 0 4
68559: PPUSH
68560: CALL_OW 110
68564: PUSH
68565: LD_INT 1
68567: PLUS
68568: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68569: LD_ADDR_VAR 0 7
68573: PUSH
68574: LD_VAR 0 4
68578: PPUSH
68579: CALL_OW 250
68583: PPUSH
68584: LD_VAR 0 4
68588: PPUSH
68589: CALL_OW 251
68593: PPUSH
68594: LD_INT 6
68596: PPUSH
68597: CALL 68172 0 3
68601: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68602: LD_VAR 0 7
68606: PUSH
68607: LD_VAR 0 4
68611: PPUSH
68612: CALL_OW 264
68616: PUSH
68617: LD_VAR 0 10
68621: IN
68622: NOT
68623: AND
68624: IFFALSE 68663
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68626: LD_VAR 0 4
68630: PPUSH
68631: LD_VAR 0 7
68635: PUSH
68636: LD_INT 1
68638: ARRAY
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PPUSH
68644: LD_VAR 0 7
68648: PUSH
68649: LD_INT 1
68651: ARRAY
68652: PUSH
68653: LD_INT 2
68655: ARRAY
68656: PPUSH
68657: CALL_OW 116
68661: GO 68870
// if path > tag then
68663: LD_VAR 0 2
68667: PUSH
68668: LD_VAR 0 9
68672: GREATER
68673: IFFALSE 68840
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68675: LD_ADDR_VAR 0 6
68679: PUSH
68680: LD_VAR 0 5
68684: PPUSH
68685: LD_INT 91
68687: PUSH
68688: LD_VAR 0 4
68692: PUSH
68693: LD_INT 12
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: LIST
68700: PPUSH
68701: CALL_OW 72
68705: ST_TO_ADDR
// if nearEnemy then
68706: LD_VAR 0 6
68710: IFFALSE 68738
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68712: LD_VAR 0 4
68716: PPUSH
68717: LD_VAR 0 6
68721: PPUSH
68722: LD_VAR 0 4
68726: PPUSH
68727: CALL_OW 74
68731: PPUSH
68732: CALL_OW 115
68736: GO 68838
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68738: LD_VAR 0 4
68742: PPUSH
68743: LD_VAR 0 2
68747: PUSH
68748: LD_VAR 0 9
68752: ARRAY
68753: PUSH
68754: LD_INT 1
68756: ARRAY
68757: PPUSH
68758: LD_VAR 0 2
68762: PUSH
68763: LD_VAR 0 9
68767: ARRAY
68768: PUSH
68769: LD_INT 2
68771: ARRAY
68772: PPUSH
68773: CALL_OW 297
68777: PUSH
68778: LD_INT 6
68780: GREATER
68781: IFFALSE 68824
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68783: LD_VAR 0 4
68787: PPUSH
68788: LD_VAR 0 2
68792: PUSH
68793: LD_VAR 0 9
68797: ARRAY
68798: PUSH
68799: LD_INT 1
68801: ARRAY
68802: PPUSH
68803: LD_VAR 0 2
68807: PUSH
68808: LD_VAR 0 9
68812: ARRAY
68813: PUSH
68814: LD_INT 2
68816: ARRAY
68817: PPUSH
68818: CALL_OW 114
68822: GO 68838
// SetTag ( i , tag ) ;
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_VAR 0 9
68833: PPUSH
68834: CALL_OW 109
// end else
68838: GO 68870
// if enemy then
68840: LD_VAR 0 5
68844: IFFALSE 68870
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68846: LD_VAR 0 4
68850: PPUSH
68851: LD_VAR 0 5
68855: PPUSH
68856: LD_VAR 0 4
68860: PPUSH
68861: CALL_OW 74
68865: PPUSH
68866: CALL_OW 115
// end ;
68870: GO 68547
68872: POP
68873: POP
// end ;
68874: LD_VAR 0 3
68878: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68879: LD_INT 0
68881: PPUSH
68882: PPUSH
68883: PPUSH
// if not unit or IsInUnit ( unit ) then
68884: LD_VAR 0 1
68888: NOT
68889: PUSH
68890: LD_VAR 0 1
68894: PPUSH
68895: CALL_OW 310
68899: OR
68900: IFFALSE 68904
// exit ;
68902: GO 68995
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68904: LD_ADDR_VAR 0 4
68908: PUSH
68909: LD_VAR 0 1
68913: PPUSH
68914: CALL_OW 250
68918: PPUSH
68919: LD_VAR 0 2
68923: PPUSH
68924: LD_INT 1
68926: PPUSH
68927: CALL_OW 272
68931: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68932: LD_ADDR_VAR 0 5
68936: PUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 251
68946: PPUSH
68947: LD_VAR 0 2
68951: PPUSH
68952: LD_INT 1
68954: PPUSH
68955: CALL_OW 273
68959: ST_TO_ADDR
// if ValidHex ( x , y ) then
68960: LD_VAR 0 4
68964: PPUSH
68965: LD_VAR 0 5
68969: PPUSH
68970: CALL_OW 488
68974: IFFALSE 68995
// ComTurnXY ( unit , x , y ) ;
68976: LD_VAR 0 1
68980: PPUSH
68981: LD_VAR 0 4
68985: PPUSH
68986: LD_VAR 0 5
68990: PPUSH
68991: CALL_OW 118
// end ;
68995: LD_VAR 0 3
68999: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69000: LD_INT 0
69002: PPUSH
69003: PPUSH
// result := false ;
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: LD_INT 0
69011: ST_TO_ADDR
// if not units then
69012: LD_VAR 0 2
69016: NOT
69017: IFFALSE 69021
// exit ;
69019: GO 69066
// for i in units do
69021: LD_ADDR_VAR 0 4
69025: PUSH
69026: LD_VAR 0 2
69030: PUSH
69031: FOR_IN
69032: IFFALSE 69064
// if See ( side , i ) then
69034: LD_VAR 0 1
69038: PPUSH
69039: LD_VAR 0 4
69043: PPUSH
69044: CALL_OW 292
69048: IFFALSE 69062
// begin result := true ;
69050: LD_ADDR_VAR 0 3
69054: PUSH
69055: LD_INT 1
69057: ST_TO_ADDR
// exit ;
69058: POP
69059: POP
69060: GO 69066
// end ;
69062: GO 69031
69064: POP
69065: POP
// end ;
69066: LD_VAR 0 3
69070: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69071: LD_INT 0
69073: PPUSH
69074: PPUSH
69075: PPUSH
69076: PPUSH
// if not unit or not points then
69077: LD_VAR 0 1
69081: NOT
69082: PUSH
69083: LD_VAR 0 2
69087: NOT
69088: OR
69089: IFFALSE 69093
// exit ;
69091: GO 69183
// dist := 99999 ;
69093: LD_ADDR_VAR 0 5
69097: PUSH
69098: LD_INT 99999
69100: ST_TO_ADDR
// for i in points do
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: LD_VAR 0 2
69110: PUSH
69111: FOR_IN
69112: IFFALSE 69181
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69114: LD_ADDR_VAR 0 6
69118: PUSH
69119: LD_VAR 0 1
69123: PPUSH
69124: LD_VAR 0 4
69128: PUSH
69129: LD_INT 1
69131: ARRAY
69132: PPUSH
69133: LD_VAR 0 4
69137: PUSH
69138: LD_INT 2
69140: ARRAY
69141: PPUSH
69142: CALL_OW 297
69146: ST_TO_ADDR
// if tmpDist < dist then
69147: LD_VAR 0 6
69151: PUSH
69152: LD_VAR 0 5
69156: LESS
69157: IFFALSE 69179
// begin result := i ;
69159: LD_ADDR_VAR 0 3
69163: PUSH
69164: LD_VAR 0 4
69168: ST_TO_ADDR
// dist := tmpDist ;
69169: LD_ADDR_VAR 0 5
69173: PUSH
69174: LD_VAR 0 6
69178: ST_TO_ADDR
// end ; end ;
69179: GO 69111
69181: POP
69182: POP
// end ; end_of_file
69183: LD_VAR 0 3
69187: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69188: LD_VAR 0 1
69192: PUSH
69193: LD_INT 200
69195: DOUBLE
69196: GREATEREQUAL
69197: IFFALSE 69205
69199: LD_INT 299
69201: DOUBLE
69202: LESSEQUAL
69203: IFTRUE 69207
69205: GO 69239
69207: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69208: LD_VAR 0 1
69212: PPUSH
69213: LD_VAR 0 2
69217: PPUSH
69218: LD_VAR 0 3
69222: PPUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: LD_VAR 0 5
69232: PPUSH
69233: CALL 24667 0 5
69237: GO 69316
69239: LD_INT 300
69241: DOUBLE
69242: GREATEREQUAL
69243: IFFALSE 69251
69245: LD_INT 399
69247: DOUBLE
69248: LESSEQUAL
69249: IFTRUE 69253
69251: GO 69315
69253: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69254: LD_VAR 0 1
69258: PPUSH
69259: LD_VAR 0 2
69263: PPUSH
69264: LD_VAR 0 3
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: LD_VAR 0 5
69278: PPUSH
69279: LD_VAR 0 6
69283: PPUSH
69284: LD_VAR 0 7
69288: PPUSH
69289: LD_VAR 0 8
69293: PPUSH
69294: LD_VAR 0 9
69298: PPUSH
69299: LD_VAR 0 10
69303: PPUSH
69304: LD_VAR 0 11
69308: PPUSH
69309: CALL 22309 0 11
69313: GO 69316
69315: POP
// end ;
69316: PPOPN 11
69318: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_VAR 0 2
69328: PPUSH
69329: LD_VAR 0 3
69333: PPUSH
69334: LD_VAR 0 4
69338: PPUSH
69339: LD_VAR 0 5
69343: PPUSH
69344: CALL 24403 0 5
// end ; end_of_file
69348: PPOPN 5
69350: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_VAR 0 2
69360: PPUSH
69361: LD_VAR 0 3
69365: PPUSH
69366: LD_VAR 0 4
69370: PPUSH
69371: LD_VAR 0 5
69375: PPUSH
69376: LD_VAR 0 6
69380: PPUSH
69381: CALL 10002 0 6
// end ;
69385: PPOPN 6
69387: END
