// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8203
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// end ;
8203: PPOPN 2
8205: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8206: LD_INT 22
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 91
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: IFFALSE 8396
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8247: LD_INT 315
8249: PUSH
8250: LD_INT 280
8252: PUSH
8253: LD_INT 245
8255: PUSH
8256: LD_INT 210
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: LD_OWVAR 67
8269: ARRAY
8270: PPUSH
8271: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 54
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
// if not tmp then
8316: LD_VAR 0 2
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8396
// for i in tmp do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: FOR_IN
8336: IFFALSE 8364
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 174
// end ;
8362: GO 8335
8364: POP
8365: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8366: LD_EXP 23
8370: PPUSH
8371: LD_INT 142
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_INT 142
8388: PPUSH
8389: LD_INT 71
8391: PPUSH
8392: CALL_OW 114
// end ;
8396: PPOPN 2
8398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: EMPTY
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 91
8444: PUSH
8445: LD_EXP 17
8449: PUSH
8450: LD_INT 8
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: LD_EXP 17
8474: PPUSH
8475: CALL_OW 302
8479: AND
8480: IFFALSE 8594
8482: GO 8484
8484: DISABLE
// begin enable ;
8485: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8486: LD_EXP 17
8490: PPUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 58
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1000
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 91
8536: PUSH
8537: LD_EXP 17
8541: PUSH
8542: LD_INT 8
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 69
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_INT 52
8577: PPUSH
8578: LD_INT 90
8580: PPUSH
8581: CALL_OW 171
// AddComHold ( Olaf ) ;
8585: LD_EXP 17
8589: PPUSH
8590: CALL_OW 200
// end ;
8594: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8595: LD_EXP 12
8599: PUSH
8600: LD_INT 2
8602: PPUSH
8603: CALL_OW 302
8607: NOT
8608: AND
8609: PUSH
8610: LD_OWVAR 67
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: AND
8619: PUSH
8620: LD_EXP 13
8624: NOT
8625: AND
8626: IFFALSE 8643
8628: GO 8630
8630: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8631: LD_EXP 16
8635: PPUSH
8636: LD_STRING DH-prison-missing
8638: PPUSH
8639: CALL_OW 88
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 8
8651: PPUSH
8652: CALL_OW 302
8656: NOT
8657: AND
8658: PUSH
8659: LD_OWVAR 67
8663: PUSH
8664: LD_INT 1
8666: GREATER
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: CALL_OW 88
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 302
8705: NOT
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing-a
8726: PPUSH
8727: CALL_OW 88
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 10
8739: PPUSH
8740: CALL_OW 302
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: CALL_OW 88
// end ;
8770: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8771: LD_EXP 13
8775: NOT
8776: PUSH
8777: LD_EXP 12
8781: AND
8782: PUSH
8783: LD_INT 2
8785: PPUSH
8786: LD_EXP 20
8790: PPUSH
8791: CALL_OW 292
8795: AND
8796: IFFALSE 8883
8798: GO 8800
8800: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8801: LD_EXP 20
8805: PPUSH
8806: LD_EXP 16
8810: PPUSH
8811: CALL_OW 119
// DialogueOn ;
8815: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8828: LD_EXP 20
8832: PPUSH
8833: LD_STRING DK-prison-found
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8840: LD_EXP 16
8844: PPUSH
8845: LD_STRING DH-prison-found
8847: PPUSH
8848: CALL_OW 88
// DialogueOff ;
8852: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 235
// prisonFound := true ;
8868: LD_ADDR_EXP 13
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8876: LD_STRING O6_prison_out
8878: PPUSH
8879: CALL_OW 337
// end ;
8883: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8884: LD_EXP 16
8888: PPUSH
8889: CALL_OW 256
8893: PUSH
8894: LD_INT 500
8896: LESS
8897: IFFALSE 8910
8899: GO 8901
8901: DISABLE
// heikeHurt := true ;
8902: LD_ADDR_EXP 14
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
8910: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8911: LD_INT 22
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: IFFALSE 9255
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
// begin uc_side := 3 ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// uc_nation := 3 ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_INT 3
8964: ST_TO_ADDR
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// for i := 1 to 5 do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 5
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9094
// begin PrepareHuman ( false , 1 , 4 ) ;
8988: LD_INT 0
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 380
// un := CreateHuman ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: CALL_OW 44
9010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 4
9018: PPUSH
9019: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 158
9030: PPUSH
9031: LD_INT 80
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 147
9048: PPUSH
9049: LD_INT 75
9051: PPUSH
9052: CALL_OW 111
// wait ( 0 0$1 ) ;
9056: LD_INT 35
9058: PPUSH
9059: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 2
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: CALL_OW 1
9091: ST_TO_ADDR
// end ;
9092: GO 8985
9094: POP
9095: POP
// repeat wait ( 0 0$1 ) ;
9096: LD_INT 35
9098: PPUSH
9099: CALL_OW 67
// for i in tmp do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9235
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 74
9145: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 250
9159: PPUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: CALL_OW 251
9173: PPUSH
9174: CALL_OW 428
9178: IFFALSE 9219
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 250
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: CALL_OW 114
9217: GO 9233
// ComAttackUnit ( i , Heike ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_EXP 16
9228: PPUSH
9229: CALL_OW 115
// end ;
9233: GO 9113
9235: POP
9236: POP
// until IsDead ( Heike ) or not tmp ;
9237: LD_EXP 16
9241: PPUSH
9242: CALL_OW 301
9246: PUSH
9247: LD_VAR 0 2
9251: NOT
9252: OR
9253: IFFALSE 9096
// end ;
9255: PPOPN 3
9257: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9258: LD_EXP 12
9262: PUSH
9263: LD_EXP 16
9267: PPUSH
9268: CALL_OW 302
9272: AND
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 50
9299: PUSH
9300: EMPTY
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 71
9312: PUSH
9313: LD_INT 0
9315: EQUAL
9316: AND
9317: IFFALSE 9680
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin if not heikeHurt then
9325: LD_EXP 14
9329: NOT
9330: IFFALSE 9339
// SetAchievement ( ACH_INVINCIBLE ) ;
9332: LD_STRING ACH_INVINCIBLE
9334: PPUSH
9335: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9339: LD_STRING enableBioCharacter(BIO_GIVI)
9341: PPUSH
9342: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9346: LD_STRING enableBioCharacter(BIO_MIKE)
9348: PPUSH
9349: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9353: LD_STRING enableBioCharacter(BIO_OLAF)
9355: PPUSH
9356: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 50
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 69
9400: ST_TO_ADDR
// if prisonFound then
9401: LD_EXP 13
9405: IFFALSE 9419
// AddMedal ( med1 , 1 ) else
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 101
9417: GO 9430
// AddMedal ( med1 , - 1 ) ;
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: NEG
9425: PPUSH
9426: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9430: LD_VAR 0 1
9434: PUSH
9435: LD_INT 3
9437: LESS
9438: PUSH
9439: LD_EXP 13
9443: NOT
9444: AND
9445: PUSH
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: LESS
9454: PUSH
9455: LD_EXP 13
9459: AND
9460: OR
9461: IFFALSE 9476
// AddMedal ( med2 , - 1 ) else
9463: LD_STRING med2
9465: PPUSH
9466: LD_INT 1
9468: NEG
9469: PPUSH
9470: CALL_OW 101
9474: GO 9486
// AddMedal ( med2 , 1 ) ;
9476: LD_STRING med2
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9486: LD_EXP 13
9490: PUSH
9491: LD_EXP 4
9495: AND
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 4
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9520
// AddMedal ( med3 , 1 ) else
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 101
9518: GO 9531
// AddMedal ( med3 , - 1 ) ;
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: NEG
9526: PPUSH
9527: CALL_OW 101
// GiveMedals ( MAIN ) ;
9531: LD_STRING MAIN
9533: PPUSH
9534: CALL_OW 102
// RewardPeople ( tmp ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9547: LD_EXP 4
9551: PPUSH
9552: LD_STRING 01_JohnnySaved
9554: PPUSH
9555: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9559: LD_EXP 16
9563: PPUSH
9564: LD_STRING 01_Heike
9566: PPUSH
9567: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9571: LD_EXP 18
9575: PPUSH
9576: CALL_OW 302
9580: PUSH
9581: LD_EXP 18
9585: PUSH
9586: LD_VAR 0 1
9590: IN
9591: AND
9592: IFFALSE 9606
// SaveCharacters ( Givi , 01_Givi ) ;
9594: LD_EXP 18
9598: PPUSH
9599: LD_STRING 01_Givi
9601: PPUSH
9602: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9606: LD_EXP 19
9610: PPUSH
9611: CALL_OW 302
9615: PUSH
9616: LD_EXP 19
9620: PUSH
9621: LD_VAR 0 1
9625: IN
9626: AND
9627: IFFALSE 9641
// SaveCharacters ( Mike , 01_Mike ) ;
9629: LD_EXP 19
9633: PPUSH
9634: LD_STRING 01_Mike
9636: PPUSH
9637: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9641: LD_EXP 20
9645: PPUSH
9646: CALL_OW 302
9650: PUSH
9651: LD_EXP 20
9655: PUSH
9656: LD_VAR 0 1
9660: IN
9661: AND
9662: IFFALSE 9676
// SaveCharacters ( Kamil , 01_Kamil ) ;
9664: LD_EXP 20
9668: PPUSH
9669: LD_STRING 01_Kamil
9671: PPUSH
9672: CALL_OW 38
// YouWin ;
9676: CALL_OW 103
// end ; end_of_file
9680: PPOPN 1
9682: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9683: LD_VAR 0 1
9687: PUSH
9688: LD_EXP 16
9692: EQUAL
9693: IFFALSE 9702
// YouLost ( Heike ) ;
9695: LD_STRING Heike
9697: PPUSH
9698: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 25
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 69
9735: IN
9736: IFFALSE 9842
// begin if un in russianPatrol then
9738: LD_VAR 0 1
9742: PUSH
9743: LD_EXP 21
9747: IN
9748: IFFALSE 9766
// russianPatrol := russianPatrol diff un ;
9750: LD_ADDR_EXP 21
9754: PUSH
9755: LD_EXP 21
9759: PUSH
9760: LD_VAR 0 1
9764: DIFF
9765: ST_TO_ADDR
// if un in russianForestPatrol then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_EXP 22
9775: IN
9776: IFFALSE 9794
// russianForestPatrol := russianForestPatrol diff un ;
9778: LD_ADDR_EXP 22
9782: PUSH
9783: LD_EXP 22
9787: PUSH
9788: LD_VAR 0 1
9792: DIFF
9793: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9794: LD_ADDR_EXP 5
9798: PUSH
9799: LD_EXP 5
9803: PPUSH
9804: LD_EXP 5
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 250
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 251
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// end ; end ;
9842: PPOPN 1
9844: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 16
9854: EQUAL
9855: IFFALSE 9864
// YouLost ( Heike ) ;
9857: LD_STRING Heike
9859: PPUSH
9860: CALL_OW 104
// if un = Olaf then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 17
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( Olaf ) ;
9876: LD_STRING Olaf
9878: PPUSH
9879: CALL_OW 104
// end ;
9883: PPOPN 1
9885: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9886: LD_VAR 0 1
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: PUSH
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 5
9902: EQUAL
9903: AND
9904: IFFALSE 9913
// YouLost ( FriendlyFire ) ;
9906: LD_STRING FriendlyFire
9908: PPUSH
9909: CALL_OW 104
// end ; end_of_file
9913: PPOPN 2
9915: END
// every 0 0$1 do
9916: GO 9918
9918: DISABLE
// begin enable ;
9919: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9920: LD_STRING updateTimer(
9922: PUSH
9923: LD_OWVAR 1
9927: STR
9928: PUSH
9929: LD_STRING );
9931: STR
9932: PPUSH
9933: CALL_OW 559
// end ;
9937: END
// export function SOS_MapStart ( ) ; begin
9938: LD_INT 0
9940: PPUSH
// if streamModeActive then
9941: LD_EXP 26
9945: IFFALSE 9954
// DefineStreamItems ( true ) ;
9947: LD_INT 1
9949: PPUSH
9950: CALL 11608 0 1
// UpdateFactoryWaypoints ( ) ;
9954: CALL 24469 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9958: CALL 24726 0 0
// end ;
9962: LD_VAR 0 1
9966: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9967: LD_INT 0
9969: PPUSH
// if p2 = 100 then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 100
9977: EQUAL
9978: IFFALSE 10981
// begin if not StreamModeActive then
9980: LD_EXP 26
9984: NOT
9985: IFFALSE 9995
// StreamModeActive := true ;
9987: LD_ADDR_EXP 26
9991: PUSH
9992: LD_INT 1
9994: ST_TO_ADDR
// if p3 = 0 then
9995: LD_VAR 0 3
9999: PUSH
10000: LD_INT 0
10002: EQUAL
10003: IFFALSE 10009
// InitStreamMode ;
10005: CALL 11144 0 0
// if p3 = 1 then
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: EQUAL
10017: IFFALSE 10027
// sRocket := true ;
10019: LD_ADDR_EXP 31
10023: PUSH
10024: LD_INT 1
10026: ST_TO_ADDR
// if p3 = 2 then
10027: LD_VAR 0 3
10031: PUSH
10032: LD_INT 2
10034: EQUAL
10035: IFFALSE 10045
// sSpeed := true ;
10037: LD_ADDR_EXP 30
10041: PUSH
10042: LD_INT 1
10044: ST_TO_ADDR
// if p3 = 3 then
10045: LD_VAR 0 3
10049: PUSH
10050: LD_INT 3
10052: EQUAL
10053: IFFALSE 10063
// sEngine := true ;
10055: LD_ADDR_EXP 32
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// if p3 = 4 then
10063: LD_VAR 0 3
10067: PUSH
10068: LD_INT 4
10070: EQUAL
10071: IFFALSE 10081
// sSpec := true ;
10073: LD_ADDR_EXP 29
10077: PUSH
10078: LD_INT 1
10080: ST_TO_ADDR
// if p3 = 5 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 5
10088: EQUAL
10089: IFFALSE 10099
// sLevel := true ;
10091: LD_ADDR_EXP 33
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// if p3 = 6 then
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 6
10106: EQUAL
10107: IFFALSE 10117
// sArmoury := true ;
10109: LD_ADDR_EXP 34
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if p3 = 7 then
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 7
10124: EQUAL
10125: IFFALSE 10135
// sRadar := true ;
10127: LD_ADDR_EXP 35
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// if p3 = 8 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 8
10142: EQUAL
10143: IFFALSE 10153
// sBunker := true ;
10145: LD_ADDR_EXP 36
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// if p3 = 9 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 9
10160: EQUAL
10161: IFFALSE 10171
// sHack := true ;
10163: LD_ADDR_EXP 37
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// if p3 = 10 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_INT 10
10178: EQUAL
10179: IFFALSE 10189
// sFire := true ;
10181: LD_ADDR_EXP 38
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// if p3 = 11 then
10189: LD_VAR 0 3
10193: PUSH
10194: LD_INT 11
10196: EQUAL
10197: IFFALSE 10207
// sRefresh := true ;
10199: LD_ADDR_EXP 39
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// if p3 = 12 then
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 12
10214: EQUAL
10215: IFFALSE 10225
// sExp := true ;
10217: LD_ADDR_EXP 40
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if p3 = 13 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 13
10232: EQUAL
10233: IFFALSE 10243
// sDepot := true ;
10235: LD_ADDR_EXP 41
10239: PUSH
10240: LD_INT 1
10242: ST_TO_ADDR
// if p3 = 14 then
10243: LD_VAR 0 3
10247: PUSH
10248: LD_INT 14
10250: EQUAL
10251: IFFALSE 10261
// sFlag := true ;
10253: LD_ADDR_EXP 42
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// if p3 = 15 then
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 15
10268: EQUAL
10269: IFFALSE 10279
// sKamikadze := true ;
10271: LD_ADDR_EXP 50
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// if p3 = 16 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 16
10286: EQUAL
10287: IFFALSE 10297
// sTroll := true ;
10289: LD_ADDR_EXP 51
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// if p3 = 17 then
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 17
10304: EQUAL
10305: IFFALSE 10315
// sSlow := true ;
10307: LD_ADDR_EXP 52
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if p3 = 18 then
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 18
10322: EQUAL
10323: IFFALSE 10333
// sLack := true ;
10325: LD_ADDR_EXP 53
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// if p3 = 19 then
10333: LD_VAR 0 3
10337: PUSH
10338: LD_INT 19
10340: EQUAL
10341: IFFALSE 10351
// sTank := true ;
10343: LD_ADDR_EXP 55
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// if p3 = 20 then
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 20
10358: EQUAL
10359: IFFALSE 10369
// sRemote := true ;
10361: LD_ADDR_EXP 56
10365: PUSH
10366: LD_INT 1
10368: ST_TO_ADDR
// if p3 = 21 then
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 21
10376: EQUAL
10377: IFFALSE 10387
// sPowell := true ;
10379: LD_ADDR_EXP 57
10383: PUSH
10384: LD_INT 1
10386: ST_TO_ADDR
// if p3 = 22 then
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 22
10394: EQUAL
10395: IFFALSE 10405
// sTeleport := true ;
10397: LD_ADDR_EXP 60
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// if p3 = 23 then
10405: LD_VAR 0 3
10409: PUSH
10410: LD_INT 23
10412: EQUAL
10413: IFFALSE 10423
// sOilTower := true ;
10415: LD_ADDR_EXP 62
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// if p3 = 24 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 24
10430: EQUAL
10431: IFFALSE 10441
// sShovel := true ;
10433: LD_ADDR_EXP 63
10437: PUSH
10438: LD_INT 1
10440: ST_TO_ADDR
// if p3 = 25 then
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 25
10448: EQUAL
10449: IFFALSE 10459
// sSheik := true ;
10451: LD_ADDR_EXP 64
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// if p3 = 26 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 26
10466: EQUAL
10467: IFFALSE 10477
// sEarthquake := true ;
10469: LD_ADDR_EXP 66
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 27 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 27
10484: EQUAL
10485: IFFALSE 10495
// sAI := true ;
10487: LD_ADDR_EXP 67
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 28 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 28
10502: EQUAL
10503: IFFALSE 10513
// sCargo := true ;
10505: LD_ADDR_EXP 70
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 29 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 29
10520: EQUAL
10521: IFFALSE 10531
// sDLaser := true ;
10523: LD_ADDR_EXP 71
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 30 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 30
10538: EQUAL
10539: IFFALSE 10549
// sExchange := true ;
10541: LD_ADDR_EXP 72
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 31 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 31
10556: EQUAL
10557: IFFALSE 10567
// sFac := true ;
10559: LD_ADDR_EXP 73
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 32 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 32
10574: EQUAL
10575: IFFALSE 10585
// sPower := true ;
10577: LD_ADDR_EXP 74
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 33 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 33
10592: EQUAL
10593: IFFALSE 10603
// sRandom := true ;
10595: LD_ADDR_EXP 75
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 34 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 34
10610: EQUAL
10611: IFFALSE 10621
// sShield := true ;
10613: LD_ADDR_EXP 76
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 35 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 35
10628: EQUAL
10629: IFFALSE 10639
// sTime := true ;
10631: LD_ADDR_EXP 77
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 36 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 36
10646: EQUAL
10647: IFFALSE 10657
// sTools := true ;
10649: LD_ADDR_EXP 78
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 101 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 101
10664: EQUAL
10665: IFFALSE 10675
// sSold := true ;
10667: LD_ADDR_EXP 43
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 102 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 102
10682: EQUAL
10683: IFFALSE 10693
// sDiff := true ;
10685: LD_ADDR_EXP 44
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 103 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 103
10700: EQUAL
10701: IFFALSE 10711
// sFog := true ;
10703: LD_ADDR_EXP 47
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 104 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 104
10718: EQUAL
10719: IFFALSE 10729
// sReset := true ;
10721: LD_ADDR_EXP 48
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 105 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 105
10736: EQUAL
10737: IFFALSE 10747
// sSun := true ;
10739: LD_ADDR_EXP 49
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 106 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 106
10754: EQUAL
10755: IFFALSE 10765
// sTiger := true ;
10757: LD_ADDR_EXP 45
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 107 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 107
10772: EQUAL
10773: IFFALSE 10783
// sBomb := true ;
10775: LD_ADDR_EXP 46
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 108 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 108
10790: EQUAL
10791: IFFALSE 10801
// sWound := true ;
10793: LD_ADDR_EXP 54
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 109 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 109
10808: EQUAL
10809: IFFALSE 10819
// sBetray := true ;
10811: LD_ADDR_EXP 58
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 110 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 110
10826: EQUAL
10827: IFFALSE 10837
// sContamin := true ;
10829: LD_ADDR_EXP 59
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 111 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 111
10844: EQUAL
10845: IFFALSE 10855
// sOil := true ;
10847: LD_ADDR_EXP 61
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 112 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 112
10862: EQUAL
10863: IFFALSE 10873
// sStu := true ;
10865: LD_ADDR_EXP 65
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 113 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 113
10880: EQUAL
10881: IFFALSE 10891
// sBazooka := true ;
10883: LD_ADDR_EXP 68
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 114 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 114
10898: EQUAL
10899: IFFALSE 10909
// sMortar := true ;
10901: LD_ADDR_EXP 69
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 115 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 115
10916: EQUAL
10917: IFFALSE 10927
// sRanger := true ;
10919: LD_ADDR_EXP 79
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 116 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 116
10934: EQUAL
10935: IFFALSE 10945
// sComputer := true ;
10937: LD_ADDR_EXP 80
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 117 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 117
10952: EQUAL
10953: IFFALSE 10963
// s30 := true ;
10955: LD_ADDR_EXP 81
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 118 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 118
10970: EQUAL
10971: IFFALSE 10981
// s60 := true ;
10973: LD_ADDR_EXP 82
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// end ; if p2 = 101 then
10981: LD_VAR 0 2
10985: PUSH
10986: LD_INT 101
10988: EQUAL
10989: IFFALSE 11117
// begin case p3 of 1 :
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 1
10998: DOUBLE
10999: EQUAL
11000: IFTRUE 11004
11002: GO 11011
11004: POP
// hHackUnlimitedResources ; 2 :
11005: CALL 23215 0 0
11009: GO 11117
11011: LD_INT 2
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11026
11019: POP
// hHackSetLevel10 ; 3 :
11020: CALL 23348 0 0
11024: GO 11117
11026: LD_INT 3
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11041
11034: POP
// hHackSetLevel10YourUnits ; 4 :
11035: CALL 23433 0 0
11039: GO 11117
11041: LD_INT 4
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11049
11047: GO 11056
11049: POP
// hHackInvincible ; 5 :
11050: CALL 23881 0 0
11054: GO 11117
11056: LD_INT 5
11058: DOUBLE
11059: EQUAL
11060: IFTRUE 11064
11062: GO 11071
11064: POP
// hHackInvisible ; 6 :
11065: CALL 23992 0 0
11069: GO 11117
11071: LD_INT 6
11073: DOUBLE
11074: EQUAL
11075: IFTRUE 11079
11077: GO 11086
11079: POP
// hHackChangeYourSide ; 7 :
11080: CALL 24049 0 0
11084: GO 11117
11086: LD_INT 7
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11101
11094: POP
// hHackChangeUnitSide ; 8 :
11095: CALL 24091 0 0
11099: GO 11117
11101: LD_INT 8
11103: DOUBLE
11104: EQUAL
11105: IFTRUE 11109
11107: GO 11116
11109: POP
// hHackFog ; end ;
11110: CALL 24192 0 0
11114: GO 11117
11116: POP
// end ; end ;
11117: LD_VAR 0 7
11121: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11122: GO 11124
11124: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11125: LD_STRING initStreamRollete();
11127: PPUSH
11128: CALL_OW 559
// InitStreamMode ;
11132: CALL 11144 0 0
// DefineStreamItems ( false ) ;
11136: LD_INT 0
11138: PPUSH
11139: CALL 11608 0 1
// end ;
11143: END
// function InitStreamMode ; begin
11144: LD_INT 0
11146: PPUSH
// streamModeActive := false ;
11147: LD_ADDR_EXP 26
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// normalCounter := 36 ;
11155: LD_ADDR_EXP 27
11159: PUSH
11160: LD_INT 36
11162: ST_TO_ADDR
// hardcoreCounter := 18 ;
11163: LD_ADDR_EXP 28
11167: PUSH
11168: LD_INT 18
11170: ST_TO_ADDR
// sRocket := false ;
11171: LD_ADDR_EXP 31
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sSpeed := false ;
11179: LD_ADDR_EXP 30
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sEngine := false ;
11187: LD_ADDR_EXP 32
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sSpec := false ;
11195: LD_ADDR_EXP 29
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sLevel := false ;
11203: LD_ADDR_EXP 33
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sArmoury := false ;
11211: LD_ADDR_EXP 34
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sRadar := false ;
11219: LD_ADDR_EXP 35
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sBunker := false ;
11227: LD_ADDR_EXP 36
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sHack := false ;
11235: LD_ADDR_EXP 37
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sFire := false ;
11243: LD_ADDR_EXP 38
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sRefresh := false ;
11251: LD_ADDR_EXP 39
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sExp := false ;
11259: LD_ADDR_EXP 40
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sDepot := false ;
11267: LD_ADDR_EXP 41
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sFlag := false ;
11275: LD_ADDR_EXP 42
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sKamikadze := false ;
11283: LD_ADDR_EXP 50
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sTroll := false ;
11291: LD_ADDR_EXP 51
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sSlow := false ;
11299: LD_ADDR_EXP 52
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sLack := false ;
11307: LD_ADDR_EXP 53
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sTank := false ;
11315: LD_ADDR_EXP 55
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sRemote := false ;
11323: LD_ADDR_EXP 56
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sPowell := false ;
11331: LD_ADDR_EXP 57
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sTeleport := false ;
11339: LD_ADDR_EXP 60
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sOilTower := false ;
11347: LD_ADDR_EXP 62
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// sShovel := false ;
11355: LD_ADDR_EXP 63
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// sSheik := false ;
11363: LD_ADDR_EXP 64
11367: PUSH
11368: LD_INT 0
11370: ST_TO_ADDR
// sEarthquake := false ;
11371: LD_ADDR_EXP 66
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// sAI := false ;
11379: LD_ADDR_EXP 67
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// sCargo := false ;
11387: LD_ADDR_EXP 70
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// sDLaser := false ;
11395: LD_ADDR_EXP 71
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// sExchange := false ;
11403: LD_ADDR_EXP 72
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// sFac := false ;
11411: LD_ADDR_EXP 73
11415: PUSH
11416: LD_INT 0
11418: ST_TO_ADDR
// sPower := false ;
11419: LD_ADDR_EXP 74
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// sRandom := false ;
11427: LD_ADDR_EXP 75
11431: PUSH
11432: LD_INT 0
11434: ST_TO_ADDR
// sShield := false ;
11435: LD_ADDR_EXP 76
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// sTime := false ;
11443: LD_ADDR_EXP 77
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// sTools := false ;
11451: LD_ADDR_EXP 78
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// sSold := false ;
11459: LD_ADDR_EXP 43
11463: PUSH
11464: LD_INT 0
11466: ST_TO_ADDR
// sDiff := false ;
11467: LD_ADDR_EXP 44
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// sFog := false ;
11475: LD_ADDR_EXP 47
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// sReset := false ;
11483: LD_ADDR_EXP 48
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// sSun := false ;
11491: LD_ADDR_EXP 49
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// sTiger := false ;
11499: LD_ADDR_EXP 45
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// sBomb := false ;
11507: LD_ADDR_EXP 46
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// sWound := false ;
11515: LD_ADDR_EXP 54
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// sBetray := false ;
11523: LD_ADDR_EXP 58
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// sContamin := false ;
11531: LD_ADDR_EXP 59
11535: PUSH
11536: LD_INT 0
11538: ST_TO_ADDR
// sOil := false ;
11539: LD_ADDR_EXP 61
11543: PUSH
11544: LD_INT 0
11546: ST_TO_ADDR
// sStu := false ;
11547: LD_ADDR_EXP 65
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// sBazooka := false ;
11555: LD_ADDR_EXP 68
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// sMortar := false ;
11563: LD_ADDR_EXP 69
11567: PUSH
11568: LD_INT 0
11570: ST_TO_ADDR
// sRanger := false ;
11571: LD_ADDR_EXP 79
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// sComputer := false ;
11579: LD_ADDR_EXP 80
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// s30 := false ;
11587: LD_ADDR_EXP 81
11591: PUSH
11592: LD_INT 0
11594: ST_TO_ADDR
// s60 := false ;
11595: LD_ADDR_EXP 82
11599: PUSH
11600: LD_INT 0
11602: ST_TO_ADDR
// end ;
11603: LD_VAR 0 1
11607: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
// result := [ ] ;
11617: LD_ADDR_VAR 0 2
11621: PUSH
11622: EMPTY
11623: ST_TO_ADDR
// if campaign_id = 1 then
11624: LD_OWVAR 69
11628: PUSH
11629: LD_INT 1
11631: EQUAL
11632: IFFALSE 14798
// begin case mission_number of 1 :
11634: LD_OWVAR 70
11638: PUSH
11639: LD_INT 1
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11723
11647: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: LD_INT 11
11661: PUSH
11662: LD_INT 12
11664: PUSH
11665: LD_INT 15
11667: PUSH
11668: LD_INT 16
11670: PUSH
11671: LD_INT 22
11673: PUSH
11674: LD_INT 23
11676: PUSH
11677: LD_INT 26
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 101
11693: PUSH
11694: LD_INT 102
11696: PUSH
11697: LD_INT 106
11699: PUSH
11700: LD_INT 116
11702: PUSH
11703: LD_INT 117
11705: PUSH
11706: LD_INT 118
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: ST_TO_ADDR
11721: GO 14796
11723: LD_INT 2
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11815
11731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11732: LD_ADDR_VAR 0 2
11736: PUSH
11737: LD_INT 2
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 15
11751: PUSH
11752: LD_INT 16
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 23
11760: PUSH
11761: LD_INT 26
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 101
11777: PUSH
11778: LD_INT 102
11780: PUSH
11781: LD_INT 105
11783: PUSH
11784: LD_INT 106
11786: PUSH
11787: LD_INT 108
11789: PUSH
11790: LD_INT 116
11792: PUSH
11793: LD_INT 117
11795: PUSH
11796: LD_INT 118
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 14796
11815: LD_INT 3
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 11911
11823: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: LD_INT 11
11840: PUSH
11841: LD_INT 12
11843: PUSH
11844: LD_INT 15
11846: PUSH
11847: LD_INT 16
11849: PUSH
11850: LD_INT 22
11852: PUSH
11853: LD_INT 26
11855: PUSH
11856: LD_INT 36
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 101
11873: PUSH
11874: LD_INT 102
11876: PUSH
11877: LD_INT 105
11879: PUSH
11880: LD_INT 106
11882: PUSH
11883: LD_INT 108
11885: PUSH
11886: LD_INT 116
11888: PUSH
11889: LD_INT 117
11891: PUSH
11892: LD_INT 118
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: ST_TO_ADDR
11909: GO 14796
11911: LD_INT 4
11913: DOUBLE
11914: EQUAL
11915: IFTRUE 11919
11917: GO 12015
11919: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11920: LD_ADDR_VAR 0 2
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: LD_INT 4
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 8
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: LD_INT 12
11942: PUSH
11943: LD_INT 15
11945: PUSH
11946: LD_INT 16
11948: PUSH
11949: LD_INT 22
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 26
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 101
11977: PUSH
11978: LD_INT 102
11980: PUSH
11981: LD_INT 105
11983: PUSH
11984: LD_INT 106
11986: PUSH
11987: LD_INT 108
11989: PUSH
11990: LD_INT 116
11992: PUSH
11993: LD_INT 117
11995: PUSH
11996: LD_INT 118
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: ST_TO_ADDR
12013: GO 14796
12015: LD_INT 5
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12135
12023: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 4
12034: PUSH
12035: LD_INT 5
12037: PUSH
12038: LD_INT 6
12040: PUSH
12041: LD_INT 8
12043: PUSH
12044: LD_INT 11
12046: PUSH
12047: LD_INT 12
12049: PUSH
12050: LD_INT 15
12052: PUSH
12053: LD_INT 16
12055: PUSH
12056: LD_INT 22
12058: PUSH
12059: LD_INT 23
12061: PUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 26
12067: PUSH
12068: LD_INT 36
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 101
12089: PUSH
12090: LD_INT 102
12092: PUSH
12093: LD_INT 105
12095: PUSH
12096: LD_INT 106
12098: PUSH
12099: LD_INT 108
12101: PUSH
12102: LD_INT 109
12104: PUSH
12105: LD_INT 112
12107: PUSH
12108: LD_INT 116
12110: PUSH
12111: LD_INT 117
12113: PUSH
12114: LD_INT 118
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: ST_TO_ADDR
12133: GO 14796
12135: LD_INT 6
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12275
12143: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12144: LD_ADDR_VAR 0 2
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 5
12157: PUSH
12158: LD_INT 6
12160: PUSH
12161: LD_INT 8
12163: PUSH
12164: LD_INT 11
12166: PUSH
12167: LD_INT 12
12169: PUSH
12170: LD_INT 15
12172: PUSH
12173: LD_INT 16
12175: PUSH
12176: LD_INT 20
12178: PUSH
12179: LD_INT 21
12181: PUSH
12182: LD_INT 22
12184: PUSH
12185: LD_INT 23
12187: PUSH
12188: LD_INT 25
12190: PUSH
12191: LD_INT 26
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 31
12199: PUSH
12200: LD_INT 32
12202: PUSH
12203: LD_INT 36
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 101
12229: PUSH
12230: LD_INT 102
12232: PUSH
12233: LD_INT 105
12235: PUSH
12236: LD_INT 106
12238: PUSH
12239: LD_INT 108
12241: PUSH
12242: LD_INT 109
12244: PUSH
12245: LD_INT 112
12247: PUSH
12248: LD_INT 116
12250: PUSH
12251: LD_INT 117
12253: PUSH
12254: LD_INT 118
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
12273: GO 14796
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12395
12283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: LD_INT 5
12297: PUSH
12298: LD_INT 7
12300: PUSH
12301: LD_INT 11
12303: PUSH
12304: LD_INT 12
12306: PUSH
12307: LD_INT 15
12309: PUSH
12310: LD_INT 16
12312: PUSH
12313: LD_INT 20
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 23
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 26
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 101
12349: PUSH
12350: LD_INT 102
12352: PUSH
12353: LD_INT 103
12355: PUSH
12356: LD_INT 105
12358: PUSH
12359: LD_INT 106
12361: PUSH
12362: LD_INT 108
12364: PUSH
12365: LD_INT 112
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: ST_TO_ADDR
12393: GO 14796
12395: LD_INT 8
12397: DOUBLE
12398: EQUAL
12399: IFTRUE 12403
12401: GO 12543
12403: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12404: LD_ADDR_VAR 0 2
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: LD_INT 4
12414: PUSH
12415: LD_INT 5
12417: PUSH
12418: LD_INT 6
12420: PUSH
12421: LD_INT 7
12423: PUSH
12424: LD_INT 8
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 15
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: LD_INT 20
12441: PUSH
12442: LD_INT 21
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_INT 23
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 26
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 31
12462: PUSH
12463: LD_INT 32
12465: PUSH
12466: LD_INT 36
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 101
12493: PUSH
12494: LD_INT 102
12496: PUSH
12497: LD_INT 103
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 108
12508: PUSH
12509: LD_INT 109
12511: PUSH
12512: LD_INT 112
12514: PUSH
12515: LD_INT 116
12517: PUSH
12518: LD_INT 117
12520: PUSH
12521: LD_INT 118
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: ST_TO_ADDR
12541: GO 14796
12543: LD_INT 9
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12699
12551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: LD_INT 4
12562: PUSH
12563: LD_INT 5
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 7
12571: PUSH
12572: LD_INT 8
12574: PUSH
12575: LD_INT 11
12577: PUSH
12578: LD_INT 12
12580: PUSH
12581: LD_INT 15
12583: PUSH
12584: LD_INT 16
12586: PUSH
12587: LD_INT 20
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 23
12598: PUSH
12599: LD_INT 25
12601: PUSH
12602: LD_INT 26
12604: PUSH
12605: LD_INT 28
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 31
12613: PUSH
12614: LD_INT 32
12616: PUSH
12617: LD_INT 36
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 101
12645: PUSH
12646: LD_INT 102
12648: PUSH
12649: LD_INT 103
12651: PUSH
12652: LD_INT 105
12654: PUSH
12655: LD_INT 106
12657: PUSH
12658: LD_INT 108
12660: PUSH
12661: LD_INT 109
12663: PUSH
12664: LD_INT 112
12666: PUSH
12667: LD_INT 114
12669: PUSH
12670: LD_INT 116
12672: PUSH
12673: LD_INT 117
12675: PUSH
12676: LD_INT 118
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: ST_TO_ADDR
12697: GO 14796
12699: LD_INT 10
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12903
12707: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 4
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: LD_INT 6
12724: PUSH
12725: LD_INT 7
12727: PUSH
12728: LD_INT 8
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 10
12736: PUSH
12737: LD_INT 11
12739: PUSH
12740: LD_INT 12
12742: PUSH
12743: LD_INT 13
12745: PUSH
12746: LD_INT 14
12748: PUSH
12749: LD_INT 15
12751: PUSH
12752: LD_INT 16
12754: PUSH
12755: LD_INT 17
12757: PUSH
12758: LD_INT 18
12760: PUSH
12761: LD_INT 19
12763: PUSH
12764: LD_INT 20
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_INT 23
12775: PUSH
12776: LD_INT 24
12778: PUSH
12779: LD_INT 25
12781: PUSH
12782: LD_INT 26
12784: PUSH
12785: LD_INT 28
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 31
12793: PUSH
12794: LD_INT 32
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 104
12842: PUSH
12843: LD_INT 105
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 107
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 109
12857: PUSH
12858: LD_INT 110
12860: PUSH
12861: LD_INT 111
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: LD_INT 114
12869: PUSH
12870: LD_INT 116
12872: PUSH
12873: LD_INT 117
12875: PUSH
12876: LD_INT 118
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: ST_TO_ADDR
12901: GO 14796
12903: LD_INT 11
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 13115
12911: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_INT 2
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: LD_INT 4
12925: PUSH
12926: LD_INT 5
12928: PUSH
12929: LD_INT 6
12931: PUSH
12932: LD_INT 7
12934: PUSH
12935: LD_INT 8
12937: PUSH
12938: LD_INT 9
12940: PUSH
12941: LD_INT 10
12943: PUSH
12944: LD_INT 11
12946: PUSH
12947: LD_INT 12
12949: PUSH
12950: LD_INT 13
12952: PUSH
12953: LD_INT 14
12955: PUSH
12956: LD_INT 15
12958: PUSH
12959: LD_INT 16
12961: PUSH
12962: LD_INT 17
12964: PUSH
12965: LD_INT 18
12967: PUSH
12968: LD_INT 19
12970: PUSH
12971: LD_INT 20
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: LD_INT 23
12982: PUSH
12983: LD_INT 24
12985: PUSH
12986: LD_INT 25
12988: PUSH
12989: LD_INT 26
12991: PUSH
12992: LD_INT 28
12994: PUSH
12995: LD_INT 30
12997: PUSH
12998: LD_INT 31
13000: PUSH
13001: LD_INT 32
13003: PUSH
13004: LD_INT 34
13006: PUSH
13007: LD_INT 36
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 103
13051: PUSH
13052: LD_INT 104
13054: PUSH
13055: LD_INT 105
13057: PUSH
13058: LD_INT 106
13060: PUSH
13061: LD_INT 107
13063: PUSH
13064: LD_INT 108
13066: PUSH
13067: LD_INT 109
13069: PUSH
13070: LD_INT 110
13072: PUSH
13073: LD_INT 111
13075: PUSH
13076: LD_INT 112
13078: PUSH
13079: LD_INT 114
13081: PUSH
13082: LD_INT 116
13084: PUSH
13085: LD_INT 117
13087: PUSH
13088: LD_INT 118
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: ST_TO_ADDR
13113: GO 14796
13115: LD_INT 12
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13343
13123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: LD_INT 4
13140: PUSH
13141: LD_INT 5
13143: PUSH
13144: LD_INT 6
13146: PUSH
13147: LD_INT 7
13149: PUSH
13150: LD_INT 8
13152: PUSH
13153: LD_INT 9
13155: PUSH
13156: LD_INT 10
13158: PUSH
13159: LD_INT 11
13161: PUSH
13162: LD_INT 12
13164: PUSH
13165: LD_INT 13
13167: PUSH
13168: LD_INT 14
13170: PUSH
13171: LD_INT 15
13173: PUSH
13174: LD_INT 16
13176: PUSH
13177: LD_INT 17
13179: PUSH
13180: LD_INT 18
13182: PUSH
13183: LD_INT 19
13185: PUSH
13186: LD_INT 20
13188: PUSH
13189: LD_INT 21
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_INT 23
13197: PUSH
13198: LD_INT 24
13200: PUSH
13201: LD_INT 25
13203: PUSH
13204: LD_INT 26
13206: PUSH
13207: LD_INT 27
13209: PUSH
13210: LD_INT 28
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 31
13218: PUSH
13219: LD_INT 32
13221: PUSH
13222: LD_INT 33
13224: PUSH
13225: LD_INT 34
13227: PUSH
13228: LD_INT 36
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 101
13269: PUSH
13270: LD_INT 102
13272: PUSH
13273: LD_INT 103
13275: PUSH
13276: LD_INT 104
13278: PUSH
13279: LD_INT 105
13281: PUSH
13282: LD_INT 106
13284: PUSH
13285: LD_INT 107
13287: PUSH
13288: LD_INT 108
13290: PUSH
13291: LD_INT 109
13293: PUSH
13294: LD_INT 110
13296: PUSH
13297: LD_INT 111
13299: PUSH
13300: LD_INT 112
13302: PUSH
13303: LD_INT 113
13305: PUSH
13306: LD_INT 114
13308: PUSH
13309: LD_INT 116
13311: PUSH
13312: LD_INT 117
13314: PUSH
13315: LD_INT 118
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 14796
13343: LD_INT 13
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13559
13351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 1
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: LD_INT 8
13374: PUSH
13375: LD_INT 9
13377: PUSH
13378: LD_INT 10
13380: PUSH
13381: LD_INT 11
13383: PUSH
13384: LD_INT 12
13386: PUSH
13387: LD_INT 14
13389: PUSH
13390: LD_INT 15
13392: PUSH
13393: LD_INT 16
13395: PUSH
13396: LD_INT 17
13398: PUSH
13399: LD_INT 18
13401: PUSH
13402: LD_INT 19
13404: PUSH
13405: LD_INT 20
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 23
13416: PUSH
13417: LD_INT 24
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 26
13425: PUSH
13426: LD_INT 27
13428: PUSH
13429: LD_INT 28
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: LD_INT 34
13446: PUSH
13447: LD_INT 36
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 101
13485: PUSH
13486: LD_INT 102
13488: PUSH
13489: LD_INT 103
13491: PUSH
13492: LD_INT 104
13494: PUSH
13495: LD_INT 105
13497: PUSH
13498: LD_INT 106
13500: PUSH
13501: LD_INT 107
13503: PUSH
13504: LD_INT 108
13506: PUSH
13507: LD_INT 109
13509: PUSH
13510: LD_INT 110
13512: PUSH
13513: LD_INT 111
13515: PUSH
13516: LD_INT 112
13518: PUSH
13519: LD_INT 113
13521: PUSH
13522: LD_INT 114
13524: PUSH
13525: LD_INT 116
13527: PUSH
13528: LD_INT 117
13530: PUSH
13531: LD_INT 118
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 14796
13559: LD_INT 14
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13791
13567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: LD_INT 2
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: LD_INT 4
13584: PUSH
13585: LD_INT 5
13587: PUSH
13588: LD_INT 6
13590: PUSH
13591: LD_INT 7
13593: PUSH
13594: LD_INT 8
13596: PUSH
13597: LD_INT 9
13599: PUSH
13600: LD_INT 10
13602: PUSH
13603: LD_INT 11
13605: PUSH
13606: LD_INT 12
13608: PUSH
13609: LD_INT 13
13611: PUSH
13612: LD_INT 14
13614: PUSH
13615: LD_INT 15
13617: PUSH
13618: LD_INT 16
13620: PUSH
13621: LD_INT 17
13623: PUSH
13624: LD_INT 18
13626: PUSH
13627: LD_INT 19
13629: PUSH
13630: LD_INT 20
13632: PUSH
13633: LD_INT 21
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 23
13641: PUSH
13642: LD_INT 24
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 26
13650: PUSH
13651: LD_INT 27
13653: PUSH
13654: LD_INT 28
13656: PUSH
13657: LD_INT 29
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_INT 31
13665: PUSH
13666: LD_INT 32
13668: PUSH
13669: LD_INT 33
13671: PUSH
13672: LD_INT 34
13674: PUSH
13675: LD_INT 36
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 101
13717: PUSH
13718: LD_INT 102
13720: PUSH
13721: LD_INT 103
13723: PUSH
13724: LD_INT 104
13726: PUSH
13727: LD_INT 105
13729: PUSH
13730: LD_INT 106
13732: PUSH
13733: LD_INT 107
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 110
13744: PUSH
13745: LD_INT 111
13747: PUSH
13748: LD_INT 112
13750: PUSH
13751: LD_INT 113
13753: PUSH
13754: LD_INT 114
13756: PUSH
13757: LD_INT 116
13759: PUSH
13760: LD_INT 117
13762: PUSH
13763: LD_INT 118
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: ST_TO_ADDR
13789: GO 14796
13791: LD_INT 15
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 14023
13799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13800: LD_ADDR_VAR 0 2
13804: PUSH
13805: LD_INT 1
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 3
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 5
13819: PUSH
13820: LD_INT 6
13822: PUSH
13823: LD_INT 7
13825: PUSH
13826: LD_INT 8
13828: PUSH
13829: LD_INT 9
13831: PUSH
13832: LD_INT 10
13834: PUSH
13835: LD_INT 11
13837: PUSH
13838: LD_INT 12
13840: PUSH
13841: LD_INT 13
13843: PUSH
13844: LD_INT 14
13846: PUSH
13847: LD_INT 15
13849: PUSH
13850: LD_INT 16
13852: PUSH
13853: LD_INT 17
13855: PUSH
13856: LD_INT 18
13858: PUSH
13859: LD_INT 19
13861: PUSH
13862: LD_INT 20
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_INT 23
13873: PUSH
13874: LD_INT 24
13876: PUSH
13877: LD_INT 25
13879: PUSH
13880: LD_INT 26
13882: PUSH
13883: LD_INT 27
13885: PUSH
13886: LD_INT 28
13888: PUSH
13889: LD_INT 29
13891: PUSH
13892: LD_INT 30
13894: PUSH
13895: LD_INT 31
13897: PUSH
13898: LD_INT 32
13900: PUSH
13901: LD_INT 33
13903: PUSH
13904: LD_INT 34
13906: PUSH
13907: LD_INT 36
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 101
13949: PUSH
13950: LD_INT 102
13952: PUSH
13953: LD_INT 103
13955: PUSH
13956: LD_INT 104
13958: PUSH
13959: LD_INT 105
13961: PUSH
13962: LD_INT 106
13964: PUSH
13965: LD_INT 107
13967: PUSH
13968: LD_INT 108
13970: PUSH
13971: LD_INT 109
13973: PUSH
13974: LD_INT 110
13976: PUSH
13977: LD_INT 111
13979: PUSH
13980: LD_INT 112
13982: PUSH
13983: LD_INT 113
13985: PUSH
13986: LD_INT 114
13988: PUSH
13989: LD_INT 116
13991: PUSH
13992: LD_INT 117
13994: PUSH
13995: LD_INT 118
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: ST_TO_ADDR
14021: GO 14796
14023: LD_INT 16
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14167
14031: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: LD_INT 5
14045: PUSH
14046: LD_INT 7
14048: PUSH
14049: LD_INT 11
14051: PUSH
14052: LD_INT 12
14054: PUSH
14055: LD_INT 15
14057: PUSH
14058: LD_INT 16
14060: PUSH
14061: LD_INT 20
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_INT 23
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 26
14078: PUSH
14079: LD_INT 30
14081: PUSH
14082: LD_INT 31
14084: PUSH
14085: LD_INT 32
14087: PUSH
14088: LD_INT 33
14090: PUSH
14091: LD_INT 34
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 101
14117: PUSH
14118: LD_INT 102
14120: PUSH
14121: LD_INT 103
14123: PUSH
14124: LD_INT 106
14126: PUSH
14127: LD_INT 108
14129: PUSH
14130: LD_INT 112
14132: PUSH
14133: LD_INT 113
14135: PUSH
14136: LD_INT 114
14138: PUSH
14139: LD_INT 116
14141: PUSH
14142: LD_INT 117
14144: PUSH
14145: LD_INT 118
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 14796
14167: LD_INT 17
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14399
14175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14176: LD_ADDR_VAR 0 2
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 6
14198: PUSH
14199: LD_INT 7
14201: PUSH
14202: LD_INT 8
14204: PUSH
14205: LD_INT 9
14207: PUSH
14208: LD_INT 10
14210: PUSH
14211: LD_INT 11
14213: PUSH
14214: LD_INT 12
14216: PUSH
14217: LD_INT 13
14219: PUSH
14220: LD_INT 14
14222: PUSH
14223: LD_INT 15
14225: PUSH
14226: LD_INT 16
14228: PUSH
14229: LD_INT 17
14231: PUSH
14232: LD_INT 18
14234: PUSH
14235: LD_INT 19
14237: PUSH
14238: LD_INT 20
14240: PUSH
14241: LD_INT 21
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 23
14249: PUSH
14250: LD_INT 24
14252: PUSH
14253: LD_INT 25
14255: PUSH
14256: LD_INT 26
14258: PUSH
14259: LD_INT 27
14261: PUSH
14262: LD_INT 28
14264: PUSH
14265: LD_INT 29
14267: PUSH
14268: LD_INT 30
14270: PUSH
14271: LD_INT 31
14273: PUSH
14274: LD_INT 32
14276: PUSH
14277: LD_INT 33
14279: PUSH
14280: LD_INT 34
14282: PUSH
14283: LD_INT 36
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 101
14325: PUSH
14326: LD_INT 102
14328: PUSH
14329: LD_INT 103
14331: PUSH
14332: LD_INT 104
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 107
14343: PUSH
14344: LD_INT 108
14346: PUSH
14347: LD_INT 109
14349: PUSH
14350: LD_INT 110
14352: PUSH
14353: LD_INT 111
14355: PUSH
14356: LD_INT 112
14358: PUSH
14359: LD_INT 113
14361: PUSH
14362: LD_INT 114
14364: PUSH
14365: LD_INT 116
14367: PUSH
14368: LD_INT 117
14370: PUSH
14371: LD_INT 118
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: ST_TO_ADDR
14397: GO 14796
14399: LD_INT 18
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14555
14407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_INT 2
14415: PUSH
14416: LD_INT 4
14418: PUSH
14419: LD_INT 5
14421: PUSH
14422: LD_INT 7
14424: PUSH
14425: LD_INT 11
14427: PUSH
14428: LD_INT 12
14430: PUSH
14431: LD_INT 15
14433: PUSH
14434: LD_INT 16
14436: PUSH
14437: LD_INT 20
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_INT 23
14448: PUSH
14449: LD_INT 25
14451: PUSH
14452: LD_INT 26
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 31
14460: PUSH
14461: LD_INT 32
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: LD_INT 34
14469: PUSH
14470: LD_INT 35
14472: PUSH
14473: LD_INT 36
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 101
14501: PUSH
14502: LD_INT 102
14504: PUSH
14505: LD_INT 103
14507: PUSH
14508: LD_INT 106
14510: PUSH
14511: LD_INT 108
14513: PUSH
14514: LD_INT 112
14516: PUSH
14517: LD_INT 113
14519: PUSH
14520: LD_INT 114
14522: PUSH
14523: LD_INT 115
14525: PUSH
14526: LD_INT 116
14528: PUSH
14529: LD_INT 117
14531: PUSH
14532: LD_INT 118
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: ST_TO_ADDR
14553: GO 14796
14555: LD_INT 19
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14795
14563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: LD_INT 3
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: LD_INT 6
14586: PUSH
14587: LD_INT 7
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 9
14595: PUSH
14596: LD_INT 10
14598: PUSH
14599: LD_INT 11
14601: PUSH
14602: LD_INT 12
14604: PUSH
14605: LD_INT 13
14607: PUSH
14608: LD_INT 14
14610: PUSH
14611: LD_INT 15
14613: PUSH
14614: LD_INT 16
14616: PUSH
14617: LD_INT 17
14619: PUSH
14620: LD_INT 18
14622: PUSH
14623: LD_INT 19
14625: PUSH
14626: LD_INT 20
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_INT 23
14637: PUSH
14638: LD_INT 24
14640: PUSH
14641: LD_INT 25
14643: PUSH
14644: LD_INT 26
14646: PUSH
14647: LD_INT 27
14649: PUSH
14650: LD_INT 28
14652: PUSH
14653: LD_INT 29
14655: PUSH
14656: LD_INT 30
14658: PUSH
14659: LD_INT 31
14661: PUSH
14662: LD_INT 32
14664: PUSH
14665: LD_INT 33
14667: PUSH
14668: LD_INT 34
14670: PUSH
14671: LD_INT 35
14673: PUSH
14674: LD_INT 36
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 101
14717: PUSH
14718: LD_INT 102
14720: PUSH
14721: LD_INT 103
14723: PUSH
14724: LD_INT 104
14726: PUSH
14727: LD_INT 105
14729: PUSH
14730: LD_INT 106
14732: PUSH
14733: LD_INT 107
14735: PUSH
14736: LD_INT 108
14738: PUSH
14739: LD_INT 109
14741: PUSH
14742: LD_INT 110
14744: PUSH
14745: LD_INT 111
14747: PUSH
14748: LD_INT 112
14750: PUSH
14751: LD_INT 113
14753: PUSH
14754: LD_INT 114
14756: PUSH
14757: LD_INT 115
14759: PUSH
14760: LD_INT 116
14762: PUSH
14763: LD_INT 117
14765: PUSH
14766: LD_INT 118
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 14796
14795: POP
// end else
14796: GO 15027
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 35
14907: PUSH
14908: LD_INT 36
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 101
14951: PUSH
14952: LD_INT 102
14954: PUSH
14955: LD_INT 103
14957: PUSH
14958: LD_INT 104
14960: PUSH
14961: LD_INT 105
14963: PUSH
14964: LD_INT 106
14966: PUSH
14967: LD_INT 107
14969: PUSH
14970: LD_INT 108
14972: PUSH
14973: LD_INT 109
14975: PUSH
14976: LD_INT 110
14978: PUSH
14979: LD_INT 111
14981: PUSH
14982: LD_INT 112
14984: PUSH
14985: LD_INT 113
14987: PUSH
14988: LD_INT 114
14990: PUSH
14991: LD_INT 115
14993: PUSH
14994: LD_INT 116
14996: PUSH
14997: LD_INT 117
14999: PUSH
15000: LD_INT 118
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: ST_TO_ADDR
// if result then
15027: LD_VAR 0 2
15031: IFFALSE 15817
// begin normal :=  ;
15033: LD_ADDR_VAR 0 5
15037: PUSH
15038: LD_STRING 
15040: ST_TO_ADDR
// hardcore :=  ;
15041: LD_ADDR_VAR 0 6
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// active :=  ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_STRING 
15056: ST_TO_ADDR
// for i = 1 to normalCounter do
15057: LD_ADDR_VAR 0 8
15061: PUSH
15062: DOUBLE
15063: LD_INT 1
15065: DEC
15066: ST_TO_ADDR
15067: LD_EXP 27
15071: PUSH
15072: FOR_TO
15073: IFFALSE 15174
// begin tmp := 0 ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: LD_STRING 0
15082: ST_TO_ADDR
// if result [ 1 ] then
15083: LD_VAR 0 2
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: IFFALSE 15156
// if result [ 1 ] [ 1 ] = i then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PUSH
15106: LD_VAR 0 8
15110: EQUAL
15111: IFFALSE 15156
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15113: LD_ADDR_VAR 0 2
15117: PUSH
15118: LD_VAR 0 2
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: CALL_OW 3
15142: PPUSH
15143: CALL_OW 1
15147: ST_TO_ADDR
// tmp := 1 ;
15148: LD_ADDR_VAR 0 3
15152: PUSH
15153: LD_STRING 1
15155: ST_TO_ADDR
// end ; normal := normal & tmp ;
15156: LD_ADDR_VAR 0 5
15160: PUSH
15161: LD_VAR 0 5
15165: PUSH
15166: LD_VAR 0 3
15170: STR
15171: ST_TO_ADDR
// end ;
15172: GO 15072
15174: POP
15175: POP
// for i = 1 to hardcoreCounter do
15176: LD_ADDR_VAR 0 8
15180: PUSH
15181: DOUBLE
15182: LD_INT 1
15184: DEC
15185: ST_TO_ADDR
15186: LD_EXP 28
15190: PUSH
15191: FOR_TO
15192: IFFALSE 15297
// begin tmp := 0 ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_STRING 0
15201: ST_TO_ADDR
// if result [ 2 ] then
15202: LD_VAR 0 2
15206: PUSH
15207: LD_INT 2
15209: ARRAY
15210: IFFALSE 15279
// if result [ 2 ] [ 1 ] = 100 + i then
15212: LD_VAR 0 2
15216: PUSH
15217: LD_INT 2
15219: ARRAY
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PUSH
15225: LD_INT 100
15227: PUSH
15228: LD_VAR 0 8
15232: PLUS
15233: EQUAL
15234: IFFALSE 15279
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 2
15245: PPUSH
15246: LD_INT 2
15248: PPUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 2
15256: ARRAY
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 3
15265: PPUSH
15266: CALL_OW 1
15270: ST_TO_ADDR
// tmp := 1 ;
15271: LD_ADDR_VAR 0 3
15275: PUSH
15276: LD_STRING 1
15278: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15279: LD_ADDR_VAR 0 6
15283: PUSH
15284: LD_VAR 0 6
15288: PUSH
15289: LD_VAR 0 3
15293: STR
15294: ST_TO_ADDR
// end ;
15295: GO 15191
15297: POP
15298: POP
// if isGameLoad then
15299: LD_VAR 0 1
15303: IFFALSE 15778
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15305: LD_ADDR_VAR 0 4
15309: PUSH
15310: LD_EXP 31
15314: PUSH
15315: LD_EXP 30
15319: PUSH
15320: LD_EXP 32
15324: PUSH
15325: LD_EXP 29
15329: PUSH
15330: LD_EXP 33
15334: PUSH
15335: LD_EXP 34
15339: PUSH
15340: LD_EXP 35
15344: PUSH
15345: LD_EXP 36
15349: PUSH
15350: LD_EXP 37
15354: PUSH
15355: LD_EXP 38
15359: PUSH
15360: LD_EXP 39
15364: PUSH
15365: LD_EXP 40
15369: PUSH
15370: LD_EXP 41
15374: PUSH
15375: LD_EXP 42
15379: PUSH
15380: LD_EXP 50
15384: PUSH
15385: LD_EXP 51
15389: PUSH
15390: LD_EXP 52
15394: PUSH
15395: LD_EXP 53
15399: PUSH
15400: LD_EXP 55
15404: PUSH
15405: LD_EXP 56
15409: PUSH
15410: LD_EXP 57
15414: PUSH
15415: LD_EXP 60
15419: PUSH
15420: LD_EXP 62
15424: PUSH
15425: LD_EXP 63
15429: PUSH
15430: LD_EXP 64
15434: PUSH
15435: LD_EXP 66
15439: PUSH
15440: LD_EXP 67
15444: PUSH
15445: LD_EXP 70
15449: PUSH
15450: LD_EXP 71
15454: PUSH
15455: LD_EXP 72
15459: PUSH
15460: LD_EXP 73
15464: PUSH
15465: LD_EXP 74
15469: PUSH
15470: LD_EXP 75
15474: PUSH
15475: LD_EXP 76
15479: PUSH
15480: LD_EXP 77
15484: PUSH
15485: LD_EXP 78
15489: PUSH
15490: LD_EXP 43
15494: PUSH
15495: LD_EXP 44
15499: PUSH
15500: LD_EXP 47
15504: PUSH
15505: LD_EXP 48
15509: PUSH
15510: LD_EXP 49
15514: PUSH
15515: LD_EXP 45
15519: PUSH
15520: LD_EXP 46
15524: PUSH
15525: LD_EXP 54
15529: PUSH
15530: LD_EXP 58
15534: PUSH
15535: LD_EXP 59
15539: PUSH
15540: LD_EXP 61
15544: PUSH
15545: LD_EXP 65
15549: PUSH
15550: LD_EXP 68
15554: PUSH
15555: LD_EXP 69
15559: PUSH
15560: LD_EXP 79
15564: PUSH
15565: LD_EXP 80
15569: PUSH
15570: LD_EXP 81
15574: PUSH
15575: LD_EXP 82
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: ST_TO_ADDR
// tmp :=  ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_STRING 
15643: ST_TO_ADDR
// for i = 1 to normalCounter do
15644: LD_ADDR_VAR 0 8
15648: PUSH
15649: DOUBLE
15650: LD_INT 1
15652: DEC
15653: ST_TO_ADDR
15654: LD_EXP 27
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15696
// begin if flags [ i ] then
15662: LD_VAR 0 4
15666: PUSH
15667: LD_VAR 0 8
15671: ARRAY
15672: IFFALSE 15694
// tmp := tmp & i & ; ;
15674: LD_ADDR_VAR 0 3
15678: PUSH
15679: LD_VAR 0 3
15683: PUSH
15684: LD_VAR 0 8
15688: STR
15689: PUSH
15690: LD_STRING ;
15692: STR
15693: ST_TO_ADDR
// end ;
15694: GO 15659
15696: POP
15697: POP
// for i = 1 to hardcoreCounter do
15698: LD_ADDR_VAR 0 8
15702: PUSH
15703: DOUBLE
15704: LD_INT 1
15706: DEC
15707: ST_TO_ADDR
15708: LD_EXP 28
15712: PUSH
15713: FOR_TO
15714: IFFALSE 15760
// begin if flags [ normalCounter + i ] then
15716: LD_VAR 0 4
15720: PUSH
15721: LD_EXP 27
15725: PUSH
15726: LD_VAR 0 8
15730: PLUS
15731: ARRAY
15732: IFFALSE 15758
// tmp := tmp & ( 100 + i ) & ; ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 100
15746: PUSH
15747: LD_VAR 0 8
15751: PLUS
15752: STR
15753: PUSH
15754: LD_STRING ;
15756: STR
15757: ST_TO_ADDR
// end ;
15758: GO 15713
15760: POP
15761: POP
// if tmp then
15762: LD_VAR 0 3
15766: IFFALSE 15778
// active := tmp ;
15768: LD_ADDR_VAR 0 7
15772: PUSH
15773: LD_VAR 0 3
15777: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15778: LD_STRING getStreamItemsFromMission("
15780: PUSH
15781: LD_VAR 0 5
15785: STR
15786: PUSH
15787: LD_STRING ","
15789: STR
15790: PUSH
15791: LD_VAR 0 6
15795: STR
15796: PUSH
15797: LD_STRING ","
15799: STR
15800: PUSH
15801: LD_VAR 0 7
15805: STR
15806: PUSH
15807: LD_STRING ")
15809: STR
15810: PPUSH
15811: CALL_OW 559
// end else
15815: GO 15824
// ToLua ( getStreamItemsFromMission("","","") ) ;
15817: LD_STRING getStreamItemsFromMission("","","")
15819: PPUSH
15820: CALL_OW 559
// end ;
15824: LD_VAR 0 2
15828: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15829: LD_EXP 26
15833: PUSH
15834: LD_EXP 31
15838: AND
15839: IFFALSE 15963
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
// begin enable ;
15848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15849: LD_ADDR_VAR 0 2
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: LD_OWVAR 2
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 34
15871: PUSH
15872: LD_INT 7
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 34
15881: PUSH
15882: LD_INT 45
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 34
15891: PUSH
15892: LD_INT 28
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 47
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PPUSH
15920: CALL_OW 69
15924: ST_TO_ADDR
// if not tmp then
15925: LD_VAR 0 2
15929: NOT
15930: IFFALSE 15934
// exit ;
15932: GO 15963
// for i in tmp do
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 2
15943: PUSH
15944: FOR_IN
15945: IFFALSE 15961
// begin SetLives ( i , 0 ) ;
15947: LD_VAR 0 1
15951: PPUSH
15952: LD_INT 0
15954: PPUSH
15955: CALL_OW 234
// end ;
15959: GO 15944
15961: POP
15962: POP
// end ;
15963: PPOPN 2
15965: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15966: LD_EXP 26
15970: PUSH
15971: LD_EXP 32
15975: AND
15976: IFFALSE 16060
15978: GO 15980
15980: DISABLE
15981: LD_INT 0
15983: PPUSH
15984: PPUSH
// begin enable ;
15985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_INT 22
15993: PUSH
15994: LD_OWVAR 2
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 32
16005: PUSH
16006: LD_INT 3
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PPUSH
16017: CALL_OW 69
16021: ST_TO_ADDR
// if not tmp then
16022: LD_VAR 0 2
16026: NOT
16027: IFFALSE 16031
// exit ;
16029: GO 16060
// for i in tmp do
16031: LD_ADDR_VAR 0 1
16035: PUSH
16036: LD_VAR 0 2
16040: PUSH
16041: FOR_IN
16042: IFFALSE 16058
// begin SetLives ( i , 0 ) ;
16044: LD_VAR 0 1
16048: PPUSH
16049: LD_INT 0
16051: PPUSH
16052: CALL_OW 234
// end ;
16056: GO 16041
16058: POP
16059: POP
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16063: LD_EXP 26
16067: PUSH
16068: LD_EXP 29
16072: AND
16073: IFFALSE 16166
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
// begin enable ;
16081: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16082: LD_ADDR_VAR 0 1
16086: PUSH
16087: LD_INT 22
16089: PUSH
16090: LD_OWVAR 2
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 2
16101: PUSH
16102: LD_INT 25
16104: PUSH
16105: LD_INT 5
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 25
16114: PUSH
16115: LD_INT 9
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 25
16124: PUSH
16125: LD_INT 8
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PPUSH
16142: CALL_OW 69
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16164
// begin SetClass ( i , 1 ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: CALL_OW 336
// end ;
16162: GO 16147
16164: POP
16165: POP
// end ;
16166: PPOPN 1
16168: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16169: LD_EXP 26
16173: PUSH
16174: LD_EXP 30
16178: AND
16179: PUSH
16180: LD_OWVAR 65
16184: PUSH
16185: LD_INT 7
16187: LESS
16188: AND
16189: IFFALSE 16203
16191: GO 16193
16193: DISABLE
// begin enable ;
16194: ENABLE
// game_speed := 7 ;
16195: LD_ADDR_OWVAR 65
16199: PUSH
16200: LD_INT 7
16202: ST_TO_ADDR
// end ;
16203: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16204: LD_EXP 26
16208: PUSH
16209: LD_EXP 33
16213: AND
16214: IFFALSE 16416
16216: GO 16218
16218: DISABLE
16219: LD_INT 0
16221: PPUSH
16222: PPUSH
16223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_INT 81
16231: PUSH
16232: LD_OWVAR 2
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 21
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 3
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16416
// if tmp > 5 then
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 5
16276: GREATER
16277: IFFALSE 16289
// k := 5 else
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_INT 5
16286: ST_TO_ADDR
16287: GO 16299
// k := tmp ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_VAR 0 3
16298: ST_TO_ADDR
// for i := 1 to k do
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_VAR 0 2
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16414
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16317: LD_VAR 0 3
16321: PUSH
16322: LD_VAR 0 1
16326: ARRAY
16327: PPUSH
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 4
16335: MOD
16336: PUSH
16337: LD_INT 1
16339: PLUS
16340: PPUSH
16341: CALL_OW 259
16345: PUSH
16346: LD_INT 10
16348: LESS
16349: IFFALSE 16412
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16351: LD_VAR 0 3
16355: PUSH
16356: LD_VAR 0 1
16360: ARRAY
16361: PPUSH
16362: LD_VAR 0 1
16366: PUSH
16367: LD_INT 4
16369: MOD
16370: PUSH
16371: LD_INT 1
16373: PLUS
16374: PPUSH
16375: LD_VAR 0 3
16379: PUSH
16380: LD_VAR 0 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 4
16393: MOD
16394: PUSH
16395: LD_INT 1
16397: PLUS
16398: PPUSH
16399: CALL_OW 259
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: PPUSH
16408: CALL_OW 237
16412: GO 16314
16414: POP
16415: POP
// end ;
16416: PPOPN 3
16418: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16419: LD_EXP 26
16423: PUSH
16424: LD_EXP 34
16428: AND
16429: IFFALSE 16449
16431: GO 16433
16433: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16434: LD_INT 4
16436: PPUSH
16437: LD_OWVAR 2
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 324
16449: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16450: LD_EXP 26
16454: PUSH
16455: LD_EXP 63
16459: AND
16460: IFFALSE 16480
16462: GO 16464
16464: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16465: LD_INT 19
16467: PPUSH
16468: LD_OWVAR 2
16472: PPUSH
16473: LD_INT 0
16475: PPUSH
16476: CALL_OW 324
16480: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16481: LD_EXP 26
16485: PUSH
16486: LD_EXP 35
16490: AND
16491: IFFALSE 16593
16493: GO 16495
16495: DISABLE
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
// begin enable ;
16500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_OWVAR 2
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 34
16523: PUSH
16524: LD_INT 11
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 34
16533: PUSH
16534: LD_INT 30
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 69
16554: ST_TO_ADDR
// if not tmp then
16555: LD_VAR 0 2
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16593
// for i in tmp do
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_VAR 0 2
16573: PUSH
16574: FOR_IN
16575: IFFALSE 16591
// begin SetLives ( i , 0 ) ;
16577: LD_VAR 0 1
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: CALL_OW 234
// end ;
16589: GO 16574
16591: POP
16592: POP
// end ;
16593: PPOPN 2
16595: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16596: LD_EXP 26
16600: PUSH
16601: LD_EXP 36
16605: AND
16606: IFFALSE 16626
16608: GO 16610
16610: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16611: LD_INT 32
16613: PPUSH
16614: LD_OWVAR 2
16618: PPUSH
16619: LD_INT 0
16621: PPUSH
16622: CALL_OW 324
16626: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16627: LD_EXP 26
16631: PUSH
16632: LD_EXP 37
16636: AND
16637: IFFALSE 16818
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
16645: PPUSH
16646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_OWVAR 2
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 33
16666: PUSH
16667: LD_INT 3
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: ST_TO_ADDR
// if not tmp then
16683: LD_VAR 0 2
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16818
// side := 0 ;
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// for i := 1 to 8 do
16700: LD_ADDR_VAR 0 1
16704: PUSH
16705: DOUBLE
16706: LD_INT 1
16708: DEC
16709: ST_TO_ADDR
16710: LD_INT 8
16712: PUSH
16713: FOR_TO
16714: IFFALSE 16762
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16716: LD_OWVAR 2
16720: PUSH
16721: LD_VAR 0 1
16725: NONEQUAL
16726: PUSH
16727: LD_OWVAR 2
16731: PPUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 81
16741: PUSH
16742: LD_INT 2
16744: EQUAL
16745: AND
16746: IFFALSE 16760
// begin side := i ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 1
16757: ST_TO_ADDR
// break ;
16758: GO 16762
// end ;
16760: GO 16713
16762: POP
16763: POP
// if not side then
16764: LD_VAR 0 3
16768: NOT
16769: IFFALSE 16773
// exit ;
16771: GO 16818
// for i := 1 to tmp do
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_VAR 0 2
16787: PUSH
16788: FOR_TO
16789: IFFALSE 16816
// if Prob ( 60 ) then
16791: LD_INT 60
16793: PPUSH
16794: CALL_OW 13
16798: IFFALSE 16814
// SetSide ( i , side ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: CALL_OW 235
16814: GO 16788
16816: POP
16817: POP
// end ;
16818: PPOPN 3
16820: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16821: LD_EXP 26
16825: PUSH
16826: LD_EXP 39
16830: AND
16831: IFFALSE 16950
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16839: LD_ADDR_VAR 0 1
16843: PUSH
16844: LD_INT 22
16846: PUSH
16847: LD_OWVAR 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 21
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 3
16868: PUSH
16869: LD_INT 23
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: PPUSH
16888: CALL_OW 69
16892: PUSH
16893: FOR_IN
16894: IFFALSE 16948
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 257
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: LD_INT 2
16911: PUSH
16912: LD_INT 3
16914: PUSH
16915: LD_INT 4
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: IN
16924: IFFALSE 16946
// SetClass ( un , rand ( 1 , 4 ) ) ;
16926: LD_VAR 0 1
16930: PPUSH
16931: LD_INT 1
16933: PPUSH
16934: LD_INT 4
16936: PPUSH
16937: CALL_OW 12
16941: PPUSH
16942: CALL_OW 336
16946: GO 16893
16948: POP
16949: POP
// end ;
16950: PPOPN 1
16952: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16953: LD_EXP 26
16957: PUSH
16958: LD_EXP 38
16962: AND
16963: IFFALSE 17042
16965: GO 16967
16967: DISABLE
16968: LD_INT 0
16970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_OWVAR 2
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 21
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 69
17006: ST_TO_ADDR
// if not tmp then
17007: LD_VAR 0 1
17011: NOT
17012: IFFALSE 17016
// exit ;
17014: GO 17042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 12
17033: ARRAY
17034: PPUSH
17035: LD_INT 100
17037: PPUSH
17038: CALL_OW 234
// end ;
17042: PPOPN 1
17044: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17045: LD_EXP 26
17049: PUSH
17050: LD_EXP 40
17054: AND
17055: IFFALSE 17153
17057: GO 17059
17059: DISABLE
17060: LD_INT 0
17062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17063: LD_ADDR_VAR 0 1
17067: PUSH
17068: LD_INT 22
17070: PUSH
17071: LD_OWVAR 2
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 21
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PPUSH
17094: CALL_OW 69
17098: ST_TO_ADDR
// if not tmp then
17099: LD_VAR 0 1
17103: NOT
17104: IFFALSE 17108
// exit ;
17106: GO 17153
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17108: LD_VAR 0 1
17112: PUSH
17113: LD_INT 1
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 12
17125: ARRAY
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_INT 4
17132: PPUSH
17133: CALL_OW 12
17137: PPUSH
17138: LD_INT 3000
17140: PPUSH
17141: LD_INT 9000
17143: PPUSH
17144: CALL_OW 12
17148: PPUSH
17149: CALL_OW 492
// end ;
17153: PPOPN 1
17155: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17156: LD_EXP 26
17160: PUSH
17161: LD_EXP 41
17165: AND
17166: IFFALSE 17186
17168: GO 17170
17170: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17171: LD_INT 1
17173: PPUSH
17174: LD_OWVAR 2
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 324
17186: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17187: LD_EXP 26
17191: PUSH
17192: LD_EXP 42
17196: AND
17197: IFFALSE 17280
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: LD_OWVAR 2
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PPUSH
17237: CALL_OW 69
17241: ST_TO_ADDR
// if not tmp then
17242: LD_VAR 0 2
17246: NOT
17247: IFFALSE 17251
// exit ;
17249: GO 17280
// for i in tmp do
17251: LD_ADDR_VAR 0 1
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: FOR_IN
17262: IFFALSE 17278
// SetBLevel ( i , 10 ) ;
17264: LD_VAR 0 1
17268: PPUSH
17269: LD_INT 10
17271: PPUSH
17272: CALL_OW 241
17276: GO 17261
17278: POP
17279: POP
// end ;
17280: PPOPN 2
17282: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17283: LD_EXP 26
17287: PUSH
17288: LD_EXP 43
17292: AND
17293: IFFALSE 17404
17295: GO 17297
17297: DISABLE
17298: LD_INT 0
17300: PPUSH
17301: PPUSH
17302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17303: LD_ADDR_VAR 0 3
17307: PUSH
17308: LD_INT 22
17310: PUSH
17311: LD_OWVAR 2
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// if not tmp then
17339: LD_VAR 0 3
17343: NOT
17344: IFFALSE 17348
// exit ;
17346: GO 17404
// un := tmp [ rand ( 1 , tmp ) ] ;
17348: LD_ADDR_VAR 0 2
17352: PUSH
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: CALL_OW 12
17370: ARRAY
17371: ST_TO_ADDR
// if Crawls ( un ) then
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 318
17381: IFFALSE 17392
// ComWalk ( un ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_INT 5
17399: PPUSH
17400: CALL_OW 336
// end ;
17404: PPOPN 3
17406: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17407: LD_EXP 26
17411: PUSH
17412: LD_EXP 44
17416: AND
17417: PUSH
17418: LD_OWVAR 67
17422: PUSH
17423: LD_INT 4
17425: LESS
17426: AND
17427: IFFALSE 17446
17429: GO 17431
17431: DISABLE
// begin Difficulty := Difficulty + 1 ;
17432: LD_ADDR_OWVAR 67
17436: PUSH
17437: LD_OWVAR 67
17441: PUSH
17442: LD_INT 1
17444: PLUS
17445: ST_TO_ADDR
// end ;
17446: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17447: LD_EXP 26
17451: PUSH
17452: LD_EXP 45
17456: AND
17457: IFFALSE 17560
17459: GO 17461
17461: DISABLE
17462: LD_INT 0
17464: PPUSH
// begin for i := 1 to 5 do
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: DOUBLE
17471: LD_INT 1
17473: DEC
17474: ST_TO_ADDR
17475: LD_INT 5
17477: PUSH
17478: FOR_TO
17479: IFFALSE 17558
// begin uc_nation := nation_nature ;
17481: LD_ADDR_OWVAR 21
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
// uc_side := 0 ;
17489: LD_ADDR_OWVAR 20
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17497: LD_ADDR_OWVAR 29
17501: PUSH
17502: LD_INT 12
17504: PUSH
17505: LD_INT 12
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: ST_TO_ADDR
// hc_agressivity := 20 ;
17512: LD_ADDR_OWVAR 35
17516: PUSH
17517: LD_INT 20
17519: ST_TO_ADDR
// hc_class := class_tiger ;
17520: LD_ADDR_OWVAR 28
17524: PUSH
17525: LD_INT 14
17527: ST_TO_ADDR
// hc_gallery :=  ;
17528: LD_ADDR_OWVAR 33
17532: PUSH
17533: LD_STRING 
17535: ST_TO_ADDR
// hc_name :=  ;
17536: LD_ADDR_OWVAR 26
17540: PUSH
17541: LD_STRING 
17543: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17544: CALL_OW 44
17548: PPUSH
17549: LD_INT 0
17551: PPUSH
17552: CALL_OW 51
// end ;
17556: GO 17478
17558: POP
17559: POP
// end ;
17560: PPOPN 1
17562: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17563: LD_EXP 26
17567: PUSH
17568: LD_EXP 46
17572: AND
17573: IFFALSE 17582
17575: GO 17577
17577: DISABLE
// StreamSibBomb ;
17578: CALL 17583 0 0
17582: END
// export function StreamSibBomb ; var i , x , y ; begin
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
// result := false ;
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// for i := 1 to 16 do
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: DOUBLE
17603: LD_INT 1
17605: DEC
17606: ST_TO_ADDR
17607: LD_INT 16
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17810
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17613: LD_ADDR_VAR 0 3
17617: PUSH
17618: LD_INT 10
17620: PUSH
17621: LD_INT 20
17623: PUSH
17624: LD_INT 30
17626: PUSH
17627: LD_INT 40
17629: PUSH
17630: LD_INT 50
17632: PUSH
17633: LD_INT 60
17635: PUSH
17636: LD_INT 70
17638: PUSH
17639: LD_INT 80
17641: PUSH
17642: LD_INT 90
17644: PUSH
17645: LD_INT 100
17647: PUSH
17648: LD_INT 110
17650: PUSH
17651: LD_INT 120
17653: PUSH
17654: LD_INT 130
17656: PUSH
17657: LD_INT 140
17659: PUSH
17660: LD_INT 150
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PPUSH
17683: LD_INT 15
17685: PPUSH
17686: CALL_OW 12
17690: ARRAY
17691: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17692: LD_ADDR_VAR 0 4
17696: PUSH
17697: LD_INT 10
17699: PUSH
17700: LD_INT 20
17702: PUSH
17703: LD_INT 30
17705: PUSH
17706: LD_INT 40
17708: PUSH
17709: LD_INT 50
17711: PUSH
17712: LD_INT 60
17714: PUSH
17715: LD_INT 70
17717: PUSH
17718: LD_INT 80
17720: PUSH
17721: LD_INT 90
17723: PUSH
17724: LD_INT 100
17726: PUSH
17727: LD_INT 110
17729: PUSH
17730: LD_INT 120
17732: PUSH
17733: LD_INT 130
17735: PUSH
17736: LD_INT 140
17738: PUSH
17739: LD_INT 150
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PPUSH
17762: LD_INT 15
17764: PPUSH
17765: CALL_OW 12
17769: ARRAY
17770: ST_TO_ADDR
// if ValidHex ( x , y ) then
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_VAR 0 4
17780: PPUSH
17781: CALL_OW 488
17785: IFFALSE 17808
// begin result := [ x , y ] ;
17787: LD_ADDR_VAR 0 1
17791: PUSH
17792: LD_VAR 0 3
17796: PUSH
17797: LD_VAR 0 4
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
// break ;
17806: GO 17810
// end ; end ;
17808: GO 17610
17810: POP
17811: POP
// if result then
17812: LD_VAR 0 1
17816: IFFALSE 17876
// begin ToLua ( playSibBomb() ) ;
17818: LD_STRING playSibBomb()
17820: PPUSH
17821: CALL_OW 559
// wait ( 0 0$14 ) ;
17825: LD_INT 490
17827: PPUSH
17828: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17832: LD_VAR 0 1
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: LD_VAR 0 1
17845: PUSH
17846: LD_INT 2
17848: ARRAY
17849: PPUSH
17850: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17854: LD_VAR 0 1
17858: PUSH
17859: LD_INT 1
17861: ARRAY
17862: PPUSH
17863: LD_VAR 0 1
17867: PUSH
17868: LD_INT 2
17870: ARRAY
17871: PPUSH
17872: CALL_OW 429
// end ; end ;
17876: LD_VAR 0 1
17880: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17881: LD_EXP 26
17885: PUSH
17886: LD_EXP 48
17890: AND
17891: IFFALSE 17903
17893: GO 17895
17895: DISABLE
// YouLost (  ) ;
17896: LD_STRING 
17898: PPUSH
17899: CALL_OW 104
17903: END
// every 0 0$1 trigger StreamModeActive and sFog do
17904: LD_EXP 26
17908: PUSH
17909: LD_EXP 47
17913: AND
17914: IFFALSE 17928
17916: GO 17918
17918: DISABLE
// FogOff ( your_side ) ;
17919: LD_OWVAR 2
17923: PPUSH
17924: CALL_OW 344
17928: END
// every 0 0$1 trigger StreamModeActive and sSun do
17929: LD_EXP 26
17933: PUSH
17934: LD_EXP 49
17938: AND
17939: IFFALSE 17967
17941: GO 17943
17943: DISABLE
// begin solar_recharge_percent := 0 ;
17944: LD_ADDR_OWVAR 79
17948: PUSH
17949: LD_INT 0
17951: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17952: LD_INT 10500
17954: PPUSH
17955: CALL_OW 67
// solar_recharge_percent := 100 ;
17959: LD_ADDR_OWVAR 79
17963: PUSH
17964: LD_INT 100
17966: ST_TO_ADDR
// end ;
17967: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17968: LD_EXP 26
17972: PUSH
17973: LD_EXP 50
17977: AND
17978: IFFALSE 18217
17980: GO 17982
17982: DISABLE
17983: LD_INT 0
17985: PPUSH
17986: PPUSH
17987: PPUSH
// begin tmp := [ ] ;
17988: LD_ADDR_VAR 0 3
17992: PUSH
17993: EMPTY
17994: ST_TO_ADDR
// for i := 1 to 6 do
17995: LD_ADDR_VAR 0 1
17999: PUSH
18000: DOUBLE
18001: LD_INT 1
18003: DEC
18004: ST_TO_ADDR
18005: LD_INT 6
18007: PUSH
18008: FOR_TO
18009: IFFALSE 18114
// begin uc_nation := nation_nature ;
18011: LD_ADDR_OWVAR 21
18015: PUSH
18016: LD_INT 0
18018: ST_TO_ADDR
// uc_side := 0 ;
18019: LD_ADDR_OWVAR 20
18023: PUSH
18024: LD_INT 0
18026: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18027: LD_ADDR_OWVAR 29
18031: PUSH
18032: LD_INT 12
18034: PUSH
18035: LD_INT 12
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// hc_agressivity := 20 ;
18042: LD_ADDR_OWVAR 35
18046: PUSH
18047: LD_INT 20
18049: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18050: LD_ADDR_OWVAR 28
18054: PUSH
18055: LD_INT 17
18057: ST_TO_ADDR
// hc_gallery :=  ;
18058: LD_ADDR_OWVAR 33
18062: PUSH
18063: LD_STRING 
18065: ST_TO_ADDR
// hc_name :=  ;
18066: LD_ADDR_OWVAR 26
18070: PUSH
18071: LD_STRING 
18073: ST_TO_ADDR
// un := CreateHuman ;
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: CALL_OW 44
18083: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18084: LD_VAR 0 2
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: CALL_OW 51
// tmp := tmp ^ un ;
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_VAR 0 3
18105: PUSH
18106: LD_VAR 0 2
18110: ADD
18111: ST_TO_ADDR
// end ;
18112: GO 18008
18114: POP
18115: POP
// repeat wait ( 0 0$1 ) ;
18116: LD_INT 35
18118: PPUSH
18119: CALL_OW 67
// for un in tmp do
18123: LD_ADDR_VAR 0 2
18127: PUSH
18128: LD_VAR 0 3
18132: PUSH
18133: FOR_IN
18134: IFFALSE 18208
// begin if IsDead ( un ) then
18136: LD_VAR 0 2
18140: PPUSH
18141: CALL_OW 301
18145: IFFALSE 18165
// begin tmp := tmp diff un ;
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: LD_VAR 0 3
18156: PUSH
18157: LD_VAR 0 2
18161: DIFF
18162: ST_TO_ADDR
// continue ;
18163: GO 18133
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18165: LD_VAR 0 2
18169: PPUSH
18170: LD_INT 3
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: PPUSH
18192: LD_VAR 0 2
18196: PPUSH
18197: CALL_OW 74
18201: PPUSH
18202: CALL_OW 115
// end ;
18206: GO 18133
18208: POP
18209: POP
// until not tmp ;
18210: LD_VAR 0 3
18214: NOT
18215: IFFALSE 18116
// end ;
18217: PPOPN 3
18219: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18220: LD_EXP 26
18224: PUSH
18225: LD_EXP 51
18229: AND
18230: IFFALSE 18284
18232: GO 18234
18234: DISABLE
// begin ToLua ( displayTroll(); ) ;
18235: LD_STRING displayTroll();
18237: PPUSH
18238: CALL_OW 559
// wait ( 3 3$00 ) ;
18242: LD_INT 6300
18244: PPUSH
18245: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18249: LD_STRING hideTroll();
18251: PPUSH
18252: CALL_OW 559
// wait ( 1 1$00 ) ;
18256: LD_INT 2100
18258: PPUSH
18259: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18263: LD_STRING displayTroll();
18265: PPUSH
18266: CALL_OW 559
// wait ( 1 1$00 ) ;
18270: LD_INT 2100
18272: PPUSH
18273: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18277: LD_STRING hideTroll();
18279: PPUSH
18280: CALL_OW 559
// end ;
18284: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18285: LD_EXP 26
18289: PUSH
18290: LD_EXP 52
18294: AND
18295: IFFALSE 18358
18297: GO 18299
18299: DISABLE
18300: LD_INT 0
18302: PPUSH
// begin p := 0 ;
18303: LD_ADDR_VAR 0 1
18307: PUSH
18308: LD_INT 0
18310: ST_TO_ADDR
// repeat game_speed := 1 ;
18311: LD_ADDR_OWVAR 65
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18319: LD_INT 35
18321: PPUSH
18322: CALL_OW 67
// p := p + 1 ;
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_VAR 0 1
18335: PUSH
18336: LD_INT 1
18338: PLUS
18339: ST_TO_ADDR
// until p >= 60 ;
18340: LD_VAR 0 1
18344: PUSH
18345: LD_INT 60
18347: GREATEREQUAL
18348: IFFALSE 18311
// game_speed := 4 ;
18350: LD_ADDR_OWVAR 65
18354: PUSH
18355: LD_INT 4
18357: ST_TO_ADDR
// end ;
18358: PPOPN 1
18360: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18361: LD_EXP 26
18365: PUSH
18366: LD_EXP 53
18370: AND
18371: IFFALSE 18517
18373: GO 18375
18375: DISABLE
18376: LD_INT 0
18378: PPUSH
18379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_OWVAR 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 30
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if not depot then
18434: LD_VAR 0 1
18438: NOT
18439: IFFALSE 18443
// exit ;
18441: GO 18517
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18443: LD_ADDR_VAR 0 2
18447: PUSH
18448: LD_VAR 0 1
18452: PUSH
18453: LD_INT 1
18455: PPUSH
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 12
18465: ARRAY
18466: PPUSH
18467: CALL_OW 274
18471: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_INT 1
18479: PPUSH
18480: LD_INT 0
18482: PPUSH
18483: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_INT 2
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_INT 3
18509: PPUSH
18510: LD_INT 0
18512: PPUSH
18513: CALL_OW 277
// end ;
18517: PPOPN 2
18519: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18520: LD_EXP 26
18524: PUSH
18525: LD_EXP 54
18529: AND
18530: IFFALSE 18627
18532: GO 18534
18534: DISABLE
18535: LD_INT 0
18537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_OWVAR 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 21
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 3
18567: PUSH
18568: LD_INT 23
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: PPUSH
18587: CALL_OW 69
18591: ST_TO_ADDR
// if not tmp then
18592: LD_VAR 0 1
18596: NOT
18597: IFFALSE 18601
// exit ;
18599: GO 18627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18601: LD_VAR 0 1
18605: PUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_VAR 0 1
18613: PPUSH
18614: CALL_OW 12
18618: ARRAY
18619: PPUSH
18620: LD_INT 200
18622: PPUSH
18623: CALL_OW 234
// end ;
18627: PPOPN 1
18629: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18630: LD_EXP 26
18634: PUSH
18635: LD_EXP 55
18639: AND
18640: IFFALSE 18719
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_OWVAR 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 12
18710: ARRAY
18711: PPUSH
18712: LD_INT 60
18714: PPUSH
18715: CALL_OW 234
// end ;
18719: PPOPN 1
18721: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18722: LD_EXP 26
18726: PUSH
18727: LD_EXP 56
18731: AND
18732: IFFALSE 18831
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
// begin enable ;
18741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18742: LD_ADDR_VAR 0 1
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 61
18761: PUSH
18762: EMPTY
18763: LIST
18764: PUSH
18765: LD_INT 33
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: ST_TO_ADDR
// if not tmp then
18785: LD_VAR 0 1
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 18831
// for i in tmp do
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_VAR 0 1
18803: PUSH
18804: FOR_IN
18805: IFFALSE 18829
// if IsControledBy ( i ) then
18807: LD_VAR 0 2
18811: PPUSH
18812: CALL_OW 312
18816: IFFALSE 18827
// ComUnlink ( i ) ;
18818: LD_VAR 0 2
18822: PPUSH
18823: CALL_OW 136
18827: GO 18804
18829: POP
18830: POP
// end ;
18831: PPOPN 2
18833: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18834: LD_EXP 26
18838: PUSH
18839: LD_EXP 57
18843: AND
18844: IFFALSE 18984
18846: GO 18848
18848: DISABLE
18849: LD_INT 0
18851: PPUSH
18852: PPUSH
// begin ToLua ( displayPowell(); ) ;
18853: LD_STRING displayPowell();
18855: PPUSH
18856: CALL_OW 559
// uc_side := 0 ;
18860: LD_ADDR_OWVAR 20
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// uc_nation := 2 ;
18868: LD_ADDR_OWVAR 21
18872: PUSH
18873: LD_INT 2
18875: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18876: LD_ADDR_OWVAR 37
18880: PUSH
18881: LD_INT 14
18883: ST_TO_ADDR
// vc_engine := engine_siberite ;
18884: LD_ADDR_OWVAR 39
18888: PUSH
18889: LD_INT 3
18891: ST_TO_ADDR
// vc_control := control_apeman ;
18892: LD_ADDR_OWVAR 38
18896: PUSH
18897: LD_INT 5
18899: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18900: LD_ADDR_OWVAR 40
18904: PUSH
18905: LD_INT 29
18907: ST_TO_ADDR
// un := CreateVehicle ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: CALL_OW 45
18917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18918: LD_VAR 0 2
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18930: LD_INT 35
18932: PPUSH
18933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_INT 22
18944: PUSH
18945: LD_OWVAR 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PPUSH
18954: CALL_OW 69
18958: PPUSH
18959: LD_VAR 0 2
18963: PPUSH
18964: CALL_OW 74
18968: PPUSH
18969: CALL_OW 115
// until IsDead ( un ) ;
18973: LD_VAR 0 2
18977: PPUSH
18978: CALL_OW 301
18982: IFFALSE 18930
// end ;
18984: PPOPN 2
18986: END
// every 0 0$1 trigger StreamModeActive and sStu do
18987: LD_EXP 26
18991: PUSH
18992: LD_EXP 65
18996: AND
18997: IFFALSE 19013
18999: GO 19001
19001: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19002: LD_STRING displayStucuk();
19004: PPUSH
19005: CALL_OW 559
// ResetFog ;
19009: CALL_OW 335
// end ;
19013: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19014: LD_EXP 26
19018: PUSH
19019: LD_EXP 58
19023: AND
19024: IFFALSE 19165
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 22
19040: PUSH
19041: LD_OWVAR 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 21
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PPUSH
19064: CALL_OW 69
19068: ST_TO_ADDR
// if not tmp then
19069: LD_VAR 0 2
19073: NOT
19074: IFFALSE 19078
// exit ;
19076: GO 19165
// un := tmp [ rand ( 1 , tmp ) ] ;
19078: LD_ADDR_VAR 0 1
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_INT 1
19090: PPUSH
19091: LD_VAR 0 2
19095: PPUSH
19096: CALL_OW 12
19100: ARRAY
19101: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19102: LD_VAR 0 1
19106: PPUSH
19107: LD_INT 0
19109: PPUSH
19110: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19114: LD_VAR 0 1
19118: PPUSH
19119: LD_OWVAR 3
19123: PUSH
19124: LD_VAR 0 1
19128: DIFF
19129: PPUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 74
19139: PPUSH
19140: CALL_OW 115
// wait ( 0 0$20 ) ;
19144: LD_INT 700
19146: PPUSH
19147: CALL_OW 67
// SetSide ( un , your_side ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_OWVAR 2
19160: PPUSH
19161: CALL_OW 235
// end ;
19165: PPOPN 2
19167: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19168: LD_EXP 26
19172: PUSH
19173: LD_EXP 59
19177: AND
19178: IFFALSE 19284
19180: GO 19182
19182: DISABLE
19183: LD_INT 0
19185: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: LD_OWVAR 2
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: ST_TO_ADDR
// if not depot then
19240: LD_VAR 0 1
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19284
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 1
19256: ARRAY
19257: PPUSH
19258: CALL_OW 250
19262: PPUSH
19263: LD_VAR 0 1
19267: PUSH
19268: LD_INT 1
19270: ARRAY
19271: PPUSH
19272: CALL_OW 251
19276: PPUSH
19277: LD_INT 70
19279: PPUSH
19280: CALL_OW 495
// end ;
19284: PPOPN 1
19286: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19287: LD_EXP 26
19291: PUSH
19292: LD_EXP 60
19296: AND
19297: IFFALSE 19508
19299: GO 19301
19301: DISABLE
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
19307: PPUSH
19308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19309: LD_ADDR_VAR 0 5
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_OWVAR 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 69
19344: ST_TO_ADDR
// if not tmp then
19345: LD_VAR 0 5
19349: NOT
19350: IFFALSE 19354
// exit ;
19352: GO 19508
// for i in tmp do
19354: LD_ADDR_VAR 0 1
19358: PUSH
19359: LD_VAR 0 5
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19506
// begin d := rand ( 0 , 5 ) ;
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_INT 0
19374: PPUSH
19375: LD_INT 5
19377: PPUSH
19378: CALL_OW 12
19382: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 250
19397: PPUSH
19398: LD_VAR 0 4
19402: PPUSH
19403: LD_INT 3
19405: PPUSH
19406: LD_INT 12
19408: PPUSH
19409: CALL_OW 12
19413: PPUSH
19414: CALL_OW 272
19418: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 251
19433: PPUSH
19434: LD_VAR 0 4
19438: PPUSH
19439: LD_INT 3
19441: PPUSH
19442: LD_INT 12
19444: PPUSH
19445: CALL_OW 12
19449: PPUSH
19450: CALL_OW 273
19454: ST_TO_ADDR
// if ValidHex ( x , y ) then
19455: LD_VAR 0 2
19459: PPUSH
19460: LD_VAR 0 3
19464: PPUSH
19465: CALL_OW 488
19469: IFFALSE 19504
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19471: LD_VAR 0 1
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: LD_INT 3
19488: PPUSH
19489: LD_INT 6
19491: PPUSH
19492: CALL_OW 12
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: CALL_OW 483
// end ;
19504: GO 19364
19506: POP
19507: POP
// end ;
19508: PPOPN 5
19510: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19511: LD_EXP 26
19515: PUSH
19516: LD_EXP 61
19520: AND
19521: IFFALSE 19615
19523: GO 19525
19525: DISABLE
19526: LD_INT 0
19528: PPUSH
19529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19530: LD_ADDR_VAR 0 2
19534: PUSH
19535: LD_INT 22
19537: PUSH
19538: LD_OWVAR 2
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 21
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: PPUSH
19572: CALL_OW 69
19576: ST_TO_ADDR
// if not tmp then
19577: LD_VAR 0 2
19581: NOT
19582: IFFALSE 19586
// exit ;
19584: GO 19615
// for i in tmp do
19586: LD_ADDR_VAR 0 1
19590: PUSH
19591: LD_VAR 0 2
19595: PUSH
19596: FOR_IN
19597: IFFALSE 19613
// SetFuel ( i , 0 ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: LD_INT 0
19606: PPUSH
19607: CALL_OW 240
19611: GO 19596
19613: POP
19614: POP
// end ;
19615: PPOPN 2
19617: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19618: LD_EXP 26
19622: PUSH
19623: LD_EXP 62
19627: AND
19628: IFFALSE 19694
19630: GO 19632
19632: DISABLE
19633: LD_INT 0
19635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19636: LD_ADDR_VAR 0 1
19640: PUSH
19641: LD_INT 22
19643: PUSH
19644: LD_OWVAR 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 30
19655: PUSH
19656: LD_INT 29
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: CALL_OW 69
19671: ST_TO_ADDR
// if not tmp then
19672: LD_VAR 0 1
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19694
// DestroyUnit ( tmp [ 1 ] ) ;
19681: LD_VAR 0 1
19685: PUSH
19686: LD_INT 1
19688: ARRAY
19689: PPUSH
19690: CALL_OW 65
// end ;
19694: PPOPN 1
19696: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19697: LD_EXP 26
19701: PUSH
19702: LD_EXP 64
19706: AND
19707: IFFALSE 19836
19709: GO 19711
19711: DISABLE
19712: LD_INT 0
19714: PPUSH
// begin uc_side := 0 ;
19715: LD_ADDR_OWVAR 20
19719: PUSH
19720: LD_INT 0
19722: ST_TO_ADDR
// uc_nation := nation_arabian ;
19723: LD_ADDR_OWVAR 21
19727: PUSH
19728: LD_INT 2
19730: ST_TO_ADDR
// hc_gallery :=  ;
19731: LD_ADDR_OWVAR 33
19735: PUSH
19736: LD_STRING 
19738: ST_TO_ADDR
// hc_name :=  ;
19739: LD_ADDR_OWVAR 26
19743: PUSH
19744: LD_STRING 
19746: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19747: LD_INT 1
19749: PPUSH
19750: LD_INT 11
19752: PPUSH
19753: LD_INT 10
19755: PPUSH
19756: CALL_OW 380
// un := CreateHuman ;
19760: LD_ADDR_VAR 0 1
19764: PUSH
19765: CALL_OW 44
19769: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19770: LD_VAR 0 1
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19782: LD_INT 35
19784: PPUSH
19785: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19789: LD_VAR 0 1
19793: PPUSH
19794: LD_INT 22
19796: PUSH
19797: LD_OWVAR 2
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: PPUSH
19811: LD_VAR 0 1
19815: PPUSH
19816: CALL_OW 74
19820: PPUSH
19821: CALL_OW 115
// until IsDead ( un ) ;
19825: LD_VAR 0 1
19829: PPUSH
19830: CALL_OW 301
19834: IFFALSE 19782
// end ;
19836: PPOPN 1
19838: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19839: LD_EXP 26
19843: PUSH
19844: LD_EXP 66
19848: AND
19849: IFFALSE 19861
19851: GO 19853
19853: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19854: LD_STRING earthquake(getX(game), 0, 32)
19856: PPUSH
19857: CALL_OW 559
19861: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19862: LD_EXP 26
19866: PUSH
19867: LD_EXP 67
19871: AND
19872: IFFALSE 19963
19874: GO 19876
19876: DISABLE
19877: LD_INT 0
19879: PPUSH
// begin enable ;
19880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: LD_INT 22
19888: PUSH
19889: LD_OWVAR 2
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 21
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 33
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: PPUSH
19923: CALL_OW 69
19927: ST_TO_ADDR
// if not tmp then
19928: LD_VAR 0 1
19932: NOT
19933: IFFALSE 19937
// exit ;
19935: GO 19963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 1
19944: PPUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 12
19954: ARRAY
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 234
// end ;
19963: PPOPN 1
19965: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19966: LD_EXP 26
19970: PUSH
19971: LD_EXP 68
19975: AND
19976: IFFALSE 20117
19978: GO 19980
19980: DISABLE
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
19985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19986: LD_ADDR_VAR 0 3
19990: PUSH
19991: LD_INT 22
19993: PUSH
19994: LD_OWVAR 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 25
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: CALL_OW 69
20021: ST_TO_ADDR
// if not tmp then
20022: LD_VAR 0 3
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20117
// un := tmp [ rand ( 1 , tmp ) ] ;
20031: LD_ADDR_VAR 0 2
20035: PUSH
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 1
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: CALL_OW 12
20053: ARRAY
20054: ST_TO_ADDR
// if Crawls ( un ) then
20055: LD_VAR 0 2
20059: PPUSH
20060: CALL_OW 318
20064: IFFALSE 20075
// ComWalk ( un ) ;
20066: LD_VAR 0 2
20070: PPUSH
20071: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20075: LD_VAR 0 2
20079: PPUSH
20080: LD_INT 9
20082: PPUSH
20083: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20087: LD_INT 28
20089: PPUSH
20090: LD_OWVAR 2
20094: PPUSH
20095: LD_INT 2
20097: PPUSH
20098: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20102: LD_INT 29
20104: PPUSH
20105: LD_OWVAR 2
20109: PPUSH
20110: LD_INT 2
20112: PPUSH
20113: CALL_OW 322
// end ;
20117: PPOPN 3
20119: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20120: LD_EXP 26
20124: PUSH
20125: LD_EXP 69
20129: AND
20130: IFFALSE 20241
20132: GO 20134
20134: DISABLE
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
20139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 22
20147: PUSH
20148: LD_OWVAR 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 25
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PPUSH
20171: CALL_OW 69
20175: ST_TO_ADDR
// if not tmp then
20176: LD_VAR 0 3
20180: NOT
20181: IFFALSE 20185
// exit ;
20183: GO 20241
// un := tmp [ rand ( 1 , tmp ) ] ;
20185: LD_ADDR_VAR 0 2
20189: PUSH
20190: LD_VAR 0 3
20194: PUSH
20195: LD_INT 1
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: CALL_OW 12
20207: ARRAY
20208: ST_TO_ADDR
// if Crawls ( un ) then
20209: LD_VAR 0 2
20213: PPUSH
20214: CALL_OW 318
20218: IFFALSE 20229
// ComWalk ( un ) ;
20220: LD_VAR 0 2
20224: PPUSH
20225: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20229: LD_VAR 0 2
20233: PPUSH
20234: LD_INT 8
20236: PPUSH
20237: CALL_OW 336
// end ;
20241: PPOPN 3
20243: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20244: LD_EXP 26
20248: PUSH
20249: LD_EXP 70
20253: AND
20254: IFFALSE 20398
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 34
20295: PUSH
20296: LD_INT 12
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 34
20305: PUSH
20306: LD_INT 51
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 34
20315: PUSH
20316: LD_INT 32
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL_OW 69
20338: ST_TO_ADDR
// if not tmp then
20339: LD_VAR 0 2
20343: NOT
20344: IFFALSE 20348
// exit ;
20346: GO 20398
// for i in tmp do
20348: LD_ADDR_VAR 0 1
20352: PUSH
20353: LD_VAR 0 2
20357: PUSH
20358: FOR_IN
20359: IFFALSE 20396
// if GetCargo ( i , mat_artifact ) = 0 then
20361: LD_VAR 0 1
20365: PPUSH
20366: LD_INT 4
20368: PPUSH
20369: CALL_OW 289
20373: PUSH
20374: LD_INT 0
20376: EQUAL
20377: IFFALSE 20394
// SetCargo ( i , mat_siberit , 100 ) ;
20379: LD_VAR 0 1
20383: PPUSH
20384: LD_INT 3
20386: PPUSH
20387: LD_INT 100
20389: PPUSH
20390: CALL_OW 290
20394: GO 20358
20396: POP
20397: POP
// end ;
20398: PPOPN 2
20400: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20401: LD_EXP 26
20405: PUSH
20406: LD_EXP 71
20410: AND
20411: IFFALSE 20594
20413: GO 20415
20415: DISABLE
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_INT 22
20427: PUSH
20428: LD_OWVAR 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PPUSH
20437: CALL_OW 69
20441: ST_TO_ADDR
// if not tmp then
20442: LD_VAR 0 2
20446: NOT
20447: IFFALSE 20451
// exit ;
20449: GO 20594
// for i := 1 to 2 do
20451: LD_ADDR_VAR 0 1
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_INT 2
20463: PUSH
20464: FOR_TO
20465: IFFALSE 20592
// begin uc_side := your_side ;
20467: LD_ADDR_OWVAR 20
20471: PUSH
20472: LD_OWVAR 2
20476: ST_TO_ADDR
// uc_nation := nation_american ;
20477: LD_ADDR_OWVAR 21
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// vc_chassis := us_morphling ;
20485: LD_ADDR_OWVAR 37
20489: PUSH
20490: LD_INT 5
20492: ST_TO_ADDR
// vc_engine := engine_siberite ;
20493: LD_ADDR_OWVAR 39
20497: PUSH
20498: LD_INT 3
20500: ST_TO_ADDR
// vc_control := control_computer ;
20501: LD_ADDR_OWVAR 38
20505: PUSH
20506: LD_INT 3
20508: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20509: LD_ADDR_OWVAR 40
20513: PUSH
20514: LD_INT 10
20516: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20517: LD_VAR 0 2
20521: PUSH
20522: LD_INT 1
20524: ARRAY
20525: PPUSH
20526: CALL_OW 310
20530: NOT
20531: IFFALSE 20578
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20533: CALL_OW 45
20537: PPUSH
20538: LD_VAR 0 2
20542: PUSH
20543: LD_INT 1
20545: ARRAY
20546: PPUSH
20547: CALL_OW 250
20551: PPUSH
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PPUSH
20561: CALL_OW 251
20565: PPUSH
20566: LD_INT 12
20568: PPUSH
20569: LD_INT 1
20571: PPUSH
20572: CALL_OW 50
20576: GO 20590
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20578: CALL_OW 45
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: CALL_OW 51
// end ;
20590: GO 20464
20592: POP
20593: POP
// end ;
20594: PPOPN 2
20596: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20597: LD_EXP 26
20601: PUSH
20602: LD_EXP 72
20606: AND
20607: IFFALSE 20829
20609: GO 20611
20611: DISABLE
20612: LD_INT 0
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20620: LD_ADDR_VAR 0 6
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 3
20649: PUSH
20650: LD_INT 23
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 69
20673: ST_TO_ADDR
// if not tmp then
20674: LD_VAR 0 6
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20829
// s1 := rand ( 1 , 4 ) ;
20683: LD_ADDR_VAR 0 2
20687: PUSH
20688: LD_INT 1
20690: PPUSH
20691: LD_INT 4
20693: PPUSH
20694: CALL_OW 12
20698: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20699: LD_ADDR_VAR 0 4
20703: PUSH
20704: LD_VAR 0 6
20708: PUSH
20709: LD_INT 1
20711: ARRAY
20712: PPUSH
20713: LD_VAR 0 2
20717: PPUSH
20718: CALL_OW 259
20722: ST_TO_ADDR
// if s1 = 1 then
20723: LD_VAR 0 2
20727: PUSH
20728: LD_INT 1
20730: EQUAL
20731: IFFALSE 20751
// s2 := rand ( 2 , 4 ) else
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 2
20740: PPUSH
20741: LD_INT 4
20743: PPUSH
20744: CALL_OW 12
20748: ST_TO_ADDR
20749: GO 20759
// s2 := 1 ;
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20759: LD_ADDR_VAR 0 5
20763: PUSH
20764: LD_VAR 0 6
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 259
20782: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20783: LD_VAR 0 6
20787: PUSH
20788: LD_INT 1
20790: ARRAY
20791: PPUSH
20792: LD_VAR 0 2
20796: PPUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20806: LD_VAR 0 6
20810: PUSH
20811: LD_INT 1
20813: ARRAY
20814: PPUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_VAR 0 4
20824: PPUSH
20825: CALL_OW 237
// end ;
20829: PPOPN 6
20831: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20832: LD_EXP 26
20836: PUSH
20837: LD_EXP 73
20841: AND
20842: IFFALSE 20921
20844: GO 20846
20846: DISABLE
20847: LD_INT 0
20849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_OWVAR 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: ST_TO_ADDR
// if not tmp then
20886: LD_VAR 0 1
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 20921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20895: LD_VAR 0 1
20899: PUSH
20900: LD_INT 1
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 12
20912: ARRAY
20913: PPUSH
20914: LD_INT 1
20916: PPUSH
20917: CALL_OW 234
// end ;
20921: PPOPN 1
20923: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20924: LD_EXP 26
20928: PUSH
20929: LD_EXP 74
20933: AND
20934: IFFALSE 21046
20936: GO 20938
20938: DISABLE
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_OWVAR 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 27
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 30
20975: PUSH
20976: LD_INT 26
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 28
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 2
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21046
// for i in tmp do
21017: LD_ADDR_VAR 0 1
21021: PUSH
21022: LD_VAR 0 2
21026: PUSH
21027: FOR_IN
21028: IFFALSE 21044
// SetLives ( i , 1 ) ;
21030: LD_VAR 0 1
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: CALL_OW 234
21042: GO 21027
21044: POP
21045: POP
// end ;
21046: PPOPN 2
21048: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21049: LD_EXP 26
21053: PUSH
21054: LD_EXP 75
21058: AND
21059: IFFALSE 21346
21061: GO 21063
21063: DISABLE
21064: LD_INT 0
21066: PPUSH
21067: PPUSH
21068: PPUSH
// begin i := rand ( 1 , 7 ) ;
21069: LD_ADDR_VAR 0 1
21073: PUSH
21074: LD_INT 1
21076: PPUSH
21077: LD_INT 7
21079: PPUSH
21080: CALL_OW 12
21084: ST_TO_ADDR
// case i of 1 :
21085: LD_VAR 0 1
21089: PUSH
21090: LD_INT 1
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21108
21098: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21099: LD_STRING earthquake(getX(game), 0, 32)
21101: PPUSH
21102: CALL_OW 559
21106: GO 21346
21108: LD_INT 2
21110: DOUBLE
21111: EQUAL
21112: IFTRUE 21116
21114: GO 21130
21116: POP
// begin ToLua ( displayStucuk(); ) ;
21117: LD_STRING displayStucuk();
21119: PPUSH
21120: CALL_OW 559
// ResetFog ;
21124: CALL_OW 335
// end ; 3 :
21128: GO 21346
21130: LD_INT 3
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21242
21138: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21139: LD_ADDR_VAR 0 2
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: LD_OWVAR 2
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 25
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 69
21174: ST_TO_ADDR
// if not tmp then
21175: LD_VAR 0 2
21179: NOT
21180: IFFALSE 21184
// exit ;
21182: GO 21346
// un := tmp [ rand ( 1 , tmp ) ] ;
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_VAR 0 2
21193: PUSH
21194: LD_INT 1
21196: PPUSH
21197: LD_VAR 0 2
21201: PPUSH
21202: CALL_OW 12
21206: ARRAY
21207: ST_TO_ADDR
// if Crawls ( un ) then
21208: LD_VAR 0 3
21212: PPUSH
21213: CALL_OW 318
21217: IFFALSE 21228
// ComWalk ( un ) ;
21219: LD_VAR 0 3
21223: PPUSH
21224: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_INT 8
21235: PPUSH
21236: CALL_OW 336
// end ; 4 :
21240: GO 21346
21242: LD_INT 4
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21324
21250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_OWVAR 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 30
21270: PUSH
21271: LD_INT 29
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 69
21286: ST_TO_ADDR
// if not tmp then
21287: LD_VAR 0 2
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 21346
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21309: LD_VAR 0 2
21313: PUSH
21314: LD_INT 1
21316: ARRAY
21317: PPUSH
21318: CALL_OW 65
// end ; 5 .. 7 :
21322: GO 21346
21324: LD_INT 5
21326: DOUBLE
21327: GREATEREQUAL
21328: IFFALSE 21336
21330: LD_INT 7
21332: DOUBLE
21333: LESSEQUAL
21334: IFTRUE 21338
21336: GO 21345
21338: POP
// StreamSibBomb ; end ;
21339: CALL 17583 0 0
21343: GO 21346
21345: POP
// end ;
21346: PPOPN 3
21348: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21349: LD_EXP 26
21353: PUSH
21354: LD_EXP 76
21358: AND
21359: IFFALSE 21515
21361: GO 21363
21363: DISABLE
21364: LD_INT 0
21366: PPUSH
21367: PPUSH
21368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21369: LD_ADDR_VAR 0 2
21373: PUSH
21374: LD_INT 81
21376: PUSH
21377: LD_OWVAR 2
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 21
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: ST_TO_ADDR
// if not tmp then
21423: LD_VAR 0 2
21427: NOT
21428: IFFALSE 21432
// exit ;
21430: GO 21515
// p := 0 ;
21432: LD_ADDR_VAR 0 3
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21440: LD_INT 35
21442: PPUSH
21443: CALL_OW 67
// p := p + 1 ;
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: PLUS
21460: ST_TO_ADDR
// for i in tmp do
21461: LD_ADDR_VAR 0 1
21465: PUSH
21466: LD_VAR 0 2
21470: PUSH
21471: FOR_IN
21472: IFFALSE 21503
// if GetLives ( i ) < 1000 then
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL_OW 256
21483: PUSH
21484: LD_INT 1000
21486: LESS
21487: IFFALSE 21501
// SetLives ( i , 1000 ) ;
21489: LD_VAR 0 1
21493: PPUSH
21494: LD_INT 1000
21496: PPUSH
21497: CALL_OW 234
21501: GO 21471
21503: POP
21504: POP
// until p > 20 ;
21505: LD_VAR 0 3
21509: PUSH
21510: LD_INT 20
21512: GREATER
21513: IFFALSE 21440
// end ;
21515: PPOPN 3
21517: END
// every 0 0$1 trigger StreamModeActive and sTime do
21518: LD_EXP 26
21522: PUSH
21523: LD_EXP 77
21527: AND
21528: IFFALSE 21563
21530: GO 21532
21532: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21533: LD_INT 28
21535: PPUSH
21536: LD_OWVAR 2
21540: PPUSH
21541: LD_INT 2
21543: PPUSH
21544: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21548: LD_INT 30
21550: PPUSH
21551: LD_OWVAR 2
21555: PPUSH
21556: LD_INT 2
21558: PPUSH
21559: CALL_OW 322
// end ;
21563: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21564: LD_EXP 26
21568: PUSH
21569: LD_EXP 78
21573: AND
21574: IFFALSE 21695
21576: GO 21578
21578: DISABLE
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21583: LD_ADDR_VAR 0 2
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_OWVAR 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 21
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 23
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 69
21636: ST_TO_ADDR
// if not tmp then
21637: LD_VAR 0 2
21641: NOT
21642: IFFALSE 21646
// exit ;
21644: GO 21695
// for i in tmp do
21646: LD_ADDR_VAR 0 1
21650: PUSH
21651: LD_VAR 0 2
21655: PUSH
21656: FOR_IN
21657: IFFALSE 21693
// begin if Crawls ( i ) then
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 318
21668: IFFALSE 21679
// ComWalk ( i ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: CALL_OW 138
// SetClass ( i , 2 ) ;
21679: LD_VAR 0 1
21683: PPUSH
21684: LD_INT 2
21686: PPUSH
21687: CALL_OW 336
// end ;
21691: GO 21656
21693: POP
21694: POP
// end ;
21695: PPOPN 2
21697: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21698: LD_EXP 26
21702: PUSH
21703: LD_EXP 79
21707: AND
21708: IFFALSE 21996
21710: GO 21712
21712: DISABLE
21713: LD_INT 0
21715: PPUSH
21716: PPUSH
21717: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21718: LD_OWVAR 2
21722: PPUSH
21723: LD_INT 9
21725: PPUSH
21726: LD_INT 1
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21736: LD_INT 9
21738: PPUSH
21739: LD_OWVAR 2
21743: PPUSH
21744: CALL_OW 343
// uc_side := 9 ;
21748: LD_ADDR_OWVAR 20
21752: PUSH
21753: LD_INT 9
21755: ST_TO_ADDR
// uc_nation := 2 ;
21756: LD_ADDR_OWVAR 21
21760: PUSH
21761: LD_INT 2
21763: ST_TO_ADDR
// hc_name := Dark Warrior ;
21764: LD_ADDR_OWVAR 26
21768: PUSH
21769: LD_STRING Dark Warrior
21771: ST_TO_ADDR
// hc_gallery :=  ;
21772: LD_ADDR_OWVAR 33
21776: PUSH
21777: LD_STRING 
21779: ST_TO_ADDR
// hc_noskilllimit := true ;
21780: LD_ADDR_OWVAR 76
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21788: LD_ADDR_OWVAR 31
21792: PUSH
21793: LD_INT 30
21795: PUSH
21796: LD_INT 30
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// un := CreateHuman ;
21811: LD_ADDR_VAR 0 3
21815: PUSH
21816: CALL_OW 44
21820: ST_TO_ADDR
// hc_noskilllimit := false ;
21821: LD_ADDR_OWVAR 76
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21829: LD_VAR 0 3
21833: PPUSH
21834: LD_INT 1
21836: PPUSH
21837: CALL_OW 51
// ToLua ( playRanger() ) ;
21841: LD_STRING playRanger()
21843: PPUSH
21844: CALL_OW 559
// p := 0 ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21856: LD_INT 35
21858: PPUSH
21859: CALL_OW 67
// p := p + 1 ;
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: LD_VAR 0 2
21872: PUSH
21873: LD_INT 1
21875: PLUS
21876: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21877: LD_VAR 0 3
21881: PPUSH
21882: CALL_OW 256
21886: PUSH
21887: LD_INT 1000
21889: LESS
21890: IFFALSE 21904
// SetLives ( un , 1000 ) ;
21892: LD_VAR 0 3
21896: PPUSH
21897: LD_INT 1000
21899: PPUSH
21900: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21904: LD_VAR 0 3
21908: PPUSH
21909: LD_INT 81
21911: PUSH
21912: LD_OWVAR 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 91
21923: PUSH
21924: LD_VAR 0 3
21928: PUSH
21929: LD_INT 30
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PPUSH
21941: CALL_OW 69
21945: PPUSH
21946: LD_VAR 0 3
21950: PPUSH
21951: CALL_OW 74
21955: PPUSH
21956: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21960: LD_VAR 0 2
21964: PUSH
21965: LD_INT 80
21967: GREATER
21968: PUSH
21969: LD_VAR 0 3
21973: PPUSH
21974: CALL_OW 301
21978: OR
21979: IFFALSE 21856
// if un then
21981: LD_VAR 0 3
21985: IFFALSE 21996
// RemoveUnit ( un ) ;
21987: LD_VAR 0 3
21991: PPUSH
21992: CALL_OW 64
// end ;
21996: PPOPN 3
21998: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21999: LD_EXP 80
22003: IFFALSE 22119
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 81
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 69
22048: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22049: LD_STRING playComputer()
22051: PPUSH
22052: CALL_OW 559
// if not tmp then
22056: LD_VAR 0 2
22060: NOT
22061: IFFALSE 22065
// exit ;
22063: GO 22119
// for i in tmp do
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22117
// for j := 1 to 4 do
22078: LD_ADDR_VAR 0 3
22082: PUSH
22083: DOUBLE
22084: LD_INT 1
22086: DEC
22087: ST_TO_ADDR
22088: LD_INT 4
22090: PUSH
22091: FOR_TO
22092: IFFALSE 22113
// SetSkill ( i , j , 10 ) ;
22094: LD_VAR 0 1
22098: PPUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: LD_INT 10
22106: PPUSH
22107: CALL_OW 237
22111: GO 22091
22113: POP
22114: POP
22115: GO 22075
22117: POP
22118: POP
// end ;
22119: PPOPN 3
22121: END
// every 0 0$1 trigger s30 do var i , tmp ;
22122: LD_EXP 81
22126: IFFALSE 22195
22128: GO 22130
22130: DISABLE
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_INT 22
22142: PUSH
22143: LD_OWVAR 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PPUSH
22152: CALL_OW 69
22156: ST_TO_ADDR
// if not tmp then
22157: LD_VAR 0 2
22161: NOT
22162: IFFALSE 22166
// exit ;
22164: GO 22195
// for i in tmp do
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_VAR 0 2
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22193
// SetLives ( i , 300 ) ;
22179: LD_VAR 0 1
22183: PPUSH
22184: LD_INT 300
22186: PPUSH
22187: CALL_OW 234
22191: GO 22176
22193: POP
22194: POP
// end ;
22195: PPOPN 2
22197: END
// every 0 0$1 trigger s60 do var i , tmp ;
22198: LD_EXP 82
22202: IFFALSE 22271
22204: GO 22206
22206: DISABLE
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_OWVAR 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PPUSH
22228: CALL_OW 69
22232: ST_TO_ADDR
// if not tmp then
22233: LD_VAR 0 2
22237: NOT
22238: IFFALSE 22242
// exit ;
22240: GO 22271
// for i in tmp do
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22269
// SetLives ( i , 600 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 600
22262: PPUSH
22263: CALL_OW 234
22267: GO 22252
22269: POP
22270: POP
// end ;
22271: PPOPN 2
22273: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22274: LD_INT 0
22276: PPUSH
// case cmd of 301 :
22277: LD_VAR 0 1
22281: PUSH
22282: LD_INT 301
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22322
22290: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22291: LD_VAR 0 6
22295: PPUSH
22296: LD_VAR 0 7
22300: PPUSH
22301: LD_VAR 0 8
22305: PPUSH
22306: LD_VAR 0 4
22310: PPUSH
22311: LD_VAR 0 5
22315: PPUSH
22316: CALL 23523 0 5
22320: GO 22443
22322: LD_INT 302
22324: DOUBLE
22325: EQUAL
22326: IFTRUE 22330
22328: GO 22367
22330: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22331: LD_VAR 0 6
22335: PPUSH
22336: LD_VAR 0 7
22340: PPUSH
22341: LD_VAR 0 8
22345: PPUSH
22346: LD_VAR 0 9
22350: PPUSH
22351: LD_VAR 0 4
22355: PPUSH
22356: LD_VAR 0 5
22360: PPUSH
22361: CALL 23614 0 6
22365: GO 22443
22367: LD_INT 303
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22412
22375: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22376: LD_VAR 0 6
22380: PPUSH
22381: LD_VAR 0 7
22385: PPUSH
22386: LD_VAR 0 8
22390: PPUSH
22391: LD_VAR 0 9
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL 22448 0 6
22410: GO 22443
22412: LD_INT 304
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22442
22420: POP
// hHackTeleport ( unit , x , y ) ; end ;
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: LD_VAR 0 5
22435: PPUSH
22436: CALL 24207 0 3
22440: GO 22443
22442: POP
// end ;
22443: LD_VAR 0 12
22447: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22448: LD_INT 0
22450: PPUSH
22451: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22452: LD_VAR 0 1
22456: PUSH
22457: LD_INT 1
22459: LESS
22460: PUSH
22461: LD_VAR 0 1
22465: PUSH
22466: LD_INT 3
22468: GREATER
22469: OR
22470: PUSH
22471: LD_VAR 0 5
22475: PPUSH
22476: LD_VAR 0 6
22480: PPUSH
22481: CALL_OW 428
22485: OR
22486: IFFALSE 22490
// exit ;
22488: GO 23210
// uc_side := your_side ;
22490: LD_ADDR_OWVAR 20
22494: PUSH
22495: LD_OWVAR 2
22499: ST_TO_ADDR
// uc_nation := nation ;
22500: LD_ADDR_OWVAR 21
22504: PUSH
22505: LD_VAR 0 1
22509: ST_TO_ADDR
// bc_level = 1 ;
22510: LD_ADDR_OWVAR 43
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// case btype of 1 :
22518: LD_VAR 0 2
22522: PUSH
22523: LD_INT 1
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22542
22531: POP
// bc_type := b_depot ; 2 :
22532: LD_ADDR_OWVAR 42
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
22540: GO 23154
22542: LD_INT 2
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22561
22550: POP
// bc_type := b_warehouse ; 3 :
22551: LD_ADDR_OWVAR 42
22555: PUSH
22556: LD_INT 1
22558: ST_TO_ADDR
22559: GO 23154
22561: LD_INT 3
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22580
22569: POP
// bc_type := b_lab ; 4 .. 9 :
22570: LD_ADDR_OWVAR 42
22574: PUSH
22575: LD_INT 6
22577: ST_TO_ADDR
22578: GO 23154
22580: LD_INT 4
22582: DOUBLE
22583: GREATEREQUAL
22584: IFFALSE 22592
22586: LD_INT 9
22588: DOUBLE
22589: LESSEQUAL
22590: IFTRUE 22594
22592: GO 22646
22594: POP
// begin bc_type := b_lab_half ;
22595: LD_ADDR_OWVAR 42
22599: PUSH
22600: LD_INT 7
22602: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22603: LD_ADDR_OWVAR 44
22607: PUSH
22608: LD_INT 10
22610: PUSH
22611: LD_INT 11
22613: PUSH
22614: LD_INT 12
22616: PUSH
22617: LD_INT 15
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 13
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: LD_VAR 0 2
22638: PUSH
22639: LD_INT 3
22641: MINUS
22642: ARRAY
22643: ST_TO_ADDR
// end ; 10 .. 13 :
22644: GO 23154
22646: LD_INT 10
22648: DOUBLE
22649: GREATEREQUAL
22650: IFFALSE 22658
22652: LD_INT 13
22654: DOUBLE
22655: LESSEQUAL
22656: IFTRUE 22660
22658: GO 22737
22660: POP
// begin bc_type := b_lab_full ;
22661: LD_ADDR_OWVAR 42
22665: PUSH
22666: LD_INT 8
22668: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22669: LD_ADDR_OWVAR 44
22673: PUSH
22674: LD_INT 10
22676: PUSH
22677: LD_INT 12
22679: PUSH
22680: LD_INT 14
22682: PUSH
22683: LD_INT 13
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: PUSH
22692: LD_VAR 0 2
22696: PUSH
22697: LD_INT 9
22699: MINUS
22700: ARRAY
22701: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22702: LD_ADDR_OWVAR 45
22706: PUSH
22707: LD_INT 11
22709: PUSH
22710: LD_INT 15
22712: PUSH
22713: LD_INT 12
22715: PUSH
22716: LD_INT 15
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: LD_VAR 0 2
22729: PUSH
22730: LD_INT 9
22732: MINUS
22733: ARRAY
22734: ST_TO_ADDR
// end ; 14 :
22735: GO 23154
22737: LD_INT 14
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22756
22745: POP
// bc_type := b_workshop ; 15 :
22746: LD_ADDR_OWVAR 42
22750: PUSH
22751: LD_INT 2
22753: ST_TO_ADDR
22754: GO 23154
22756: LD_INT 15
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22775
22764: POP
// bc_type := b_factory ; 16 :
22765: LD_ADDR_OWVAR 42
22769: PUSH
22770: LD_INT 3
22772: ST_TO_ADDR
22773: GO 23154
22775: LD_INT 16
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22794
22783: POP
// bc_type := b_ext_gun ; 17 :
22784: LD_ADDR_OWVAR 42
22788: PUSH
22789: LD_INT 17
22791: ST_TO_ADDR
22792: GO 23154
22794: LD_INT 17
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22830
22802: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22803: LD_ADDR_OWVAR 42
22807: PUSH
22808: LD_INT 19
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 19
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_VAR 0 1
22826: ARRAY
22827: ST_TO_ADDR
22828: GO 23154
22830: LD_INT 18
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22849
22838: POP
// bc_type := b_ext_radar ; 19 :
22839: LD_ADDR_OWVAR 42
22843: PUSH
22844: LD_INT 20
22846: ST_TO_ADDR
22847: GO 23154
22849: LD_INT 19
22851: DOUBLE
22852: EQUAL
22853: IFTRUE 22857
22855: GO 22868
22857: POP
// bc_type := b_ext_radio ; 20 :
22858: LD_ADDR_OWVAR 42
22862: PUSH
22863: LD_INT 22
22865: ST_TO_ADDR
22866: GO 23154
22868: LD_INT 20
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22887
22876: POP
// bc_type := b_ext_siberium ; 21 :
22877: LD_ADDR_OWVAR 42
22881: PUSH
22882: LD_INT 21
22884: ST_TO_ADDR
22885: GO 23154
22887: LD_INT 21
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 22906
22895: POP
// bc_type := b_ext_computer ; 22 :
22896: LD_ADDR_OWVAR 42
22900: PUSH
22901: LD_INT 24
22903: ST_TO_ADDR
22904: GO 23154
22906: LD_INT 22
22908: DOUBLE
22909: EQUAL
22910: IFTRUE 22914
22912: GO 22925
22914: POP
// bc_type := b_ext_track ; 23 :
22915: LD_ADDR_OWVAR 42
22919: PUSH
22920: LD_INT 16
22922: ST_TO_ADDR
22923: GO 23154
22925: LD_INT 23
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 22944
22933: POP
// bc_type := b_ext_laser ; 24 :
22934: LD_ADDR_OWVAR 42
22938: PUSH
22939: LD_INT 25
22941: ST_TO_ADDR
22942: GO 23154
22944: LD_INT 24
22946: DOUBLE
22947: EQUAL
22948: IFTRUE 22952
22950: GO 22963
22952: POP
// bc_type := b_control_tower ; 25 :
22953: LD_ADDR_OWVAR 42
22957: PUSH
22958: LD_INT 36
22960: ST_TO_ADDR
22961: GO 23154
22963: LD_INT 25
22965: DOUBLE
22966: EQUAL
22967: IFTRUE 22971
22969: GO 22982
22971: POP
// bc_type := b_breastwork ; 26 :
22972: LD_ADDR_OWVAR 42
22976: PUSH
22977: LD_INT 31
22979: ST_TO_ADDR
22980: GO 23154
22982: LD_INT 26
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23001
22990: POP
// bc_type := b_bunker ; 27 :
22991: LD_ADDR_OWVAR 42
22995: PUSH
22996: LD_INT 32
22998: ST_TO_ADDR
22999: GO 23154
23001: LD_INT 27
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23020
23009: POP
// bc_type := b_turret ; 28 :
23010: LD_ADDR_OWVAR 42
23014: PUSH
23015: LD_INT 33
23017: ST_TO_ADDR
23018: GO 23154
23020: LD_INT 28
23022: DOUBLE
23023: EQUAL
23024: IFTRUE 23028
23026: GO 23039
23028: POP
// bc_type := b_armoury ; 29 :
23029: LD_ADDR_OWVAR 42
23033: PUSH
23034: LD_INT 4
23036: ST_TO_ADDR
23037: GO 23154
23039: LD_INT 29
23041: DOUBLE
23042: EQUAL
23043: IFTRUE 23047
23045: GO 23058
23047: POP
// bc_type := b_barracks ; 30 :
23048: LD_ADDR_OWVAR 42
23052: PUSH
23053: LD_INT 5
23055: ST_TO_ADDR
23056: GO 23154
23058: LD_INT 30
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23077
23066: POP
// bc_type := b_solar_power ; 31 :
23067: LD_ADDR_OWVAR 42
23071: PUSH
23072: LD_INT 27
23074: ST_TO_ADDR
23075: GO 23154
23077: LD_INT 31
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23096
23085: POP
// bc_type := b_oil_power ; 32 :
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 26
23093: ST_TO_ADDR
23094: GO 23154
23096: LD_INT 32
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23115
23104: POP
// bc_type := b_siberite_power ; 33 :
23105: LD_ADDR_OWVAR 42
23109: PUSH
23110: LD_INT 28
23112: ST_TO_ADDR
23113: GO 23154
23115: LD_INT 33
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// bc_type := b_oil_mine ; 34 :
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 29
23131: ST_TO_ADDR
23132: GO 23154
23134: LD_INT 34
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// bc_type := b_siberite_mine ; end ;
23143: LD_ADDR_OWVAR 42
23147: PUSH
23148: LD_INT 30
23150: ST_TO_ADDR
23151: GO 23154
23153: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23154: LD_ADDR_VAR 0 8
23158: PUSH
23159: LD_VAR 0 5
23163: PPUSH
23164: LD_VAR 0 6
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 47
23178: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23179: LD_OWVAR 42
23183: PUSH
23184: LD_INT 32
23186: PUSH
23187: LD_INT 33
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: IN
23194: IFFALSE 23210
// PlaceWeaponTurret ( b , weapon ) ;
23196: LD_VAR 0 8
23200: PPUSH
23201: LD_VAR 0 4
23205: PPUSH
23206: CALL_OW 431
// end ;
23210: LD_VAR 0 7
23214: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
23220: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23221: LD_ADDR_VAR 0 4
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_OWVAR 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 30
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 4
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23343
// for i in tmp do
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 4
23293: PUSH
23294: FOR_IN
23295: IFFALSE 23341
// for j = 1 to 3 do
23297: LD_ADDR_VAR 0 3
23301: PUSH
23302: DOUBLE
23303: LD_INT 1
23305: DEC
23306: ST_TO_ADDR
23307: LD_INT 3
23309: PUSH
23310: FOR_TO
23311: IFFALSE 23337
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: CALL_OW 274
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 99999
23330: PPUSH
23331: CALL_OW 277
23335: GO 23310
23337: POP
23338: POP
23339: GO 23294
23341: POP
23342: POP
// end ;
23343: LD_VAR 0 1
23347: RET
// export function hHackSetLevel10 ; var i , j ; begin
23348: LD_INT 0
23350: PPUSH
23351: PPUSH
23352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: PUSH
23373: FOR_IN
23374: IFFALSE 23426
// if IsSelected ( i ) then
23376: LD_VAR 0 2
23380: PPUSH
23381: CALL_OW 306
23385: IFFALSE 23424
// begin for j := 1 to 4 do
23387: LD_ADDR_VAR 0 3
23391: PUSH
23392: DOUBLE
23393: LD_INT 1
23395: DEC
23396: ST_TO_ADDR
23397: LD_INT 4
23399: PUSH
23400: FOR_TO
23401: IFFALSE 23422
// SetSkill ( i , j , 10 ) ;
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: LD_INT 10
23415: PPUSH
23416: CALL_OW 237
23420: GO 23400
23422: POP
23423: POP
// end ;
23424: GO 23373
23426: POP
23427: POP
// end ;
23428: LD_VAR 0 1
23432: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23433: LD_INT 0
23435: PPUSH
23436: PPUSH
23437: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 22
23445: PUSH
23446: LD_OWVAR 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 21
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PPUSH
23469: CALL_OW 69
23473: PUSH
23474: FOR_IN
23475: IFFALSE 23516
// begin for j := 1 to 4 do
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: DOUBLE
23483: LD_INT 1
23485: DEC
23486: ST_TO_ADDR
23487: LD_INT 4
23489: PUSH
23490: FOR_TO
23491: IFFALSE 23512
// SetSkill ( i , j , 10 ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 10
23505: PPUSH
23506: CALL_OW 237
23510: GO 23490
23512: POP
23513: POP
// end ;
23514: GO 23474
23516: POP
23517: POP
// end ;
23518: LD_VAR 0 1
23522: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23523: LD_INT 0
23525: PPUSH
// uc_side := your_side ;
23526: LD_ADDR_OWVAR 20
23530: PUSH
23531: LD_OWVAR 2
23535: ST_TO_ADDR
// uc_nation := nation ;
23536: LD_ADDR_OWVAR 21
23540: PUSH
23541: LD_VAR 0 1
23545: ST_TO_ADDR
// InitHc ;
23546: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23550: LD_INT 0
23552: PPUSH
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_VAR 0 3
23562: PPUSH
23563: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23567: LD_VAR 0 4
23571: PPUSH
23572: LD_VAR 0 5
23576: PPUSH
23577: CALL_OW 428
23581: PUSH
23582: LD_INT 0
23584: EQUAL
23585: IFFALSE 23609
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23587: CALL_OW 44
23591: PPUSH
23592: LD_VAR 0 4
23596: PPUSH
23597: LD_VAR 0 5
23601: PPUSH
23602: LD_INT 1
23604: PPUSH
23605: CALL_OW 48
// end ;
23609: LD_VAR 0 6
23613: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23614: LD_INT 0
23616: PPUSH
23617: PPUSH
// uc_side := your_side ;
23618: LD_ADDR_OWVAR 20
23622: PUSH
23623: LD_OWVAR 2
23627: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23628: LD_VAR 0 1
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: LD_INT 4
23644: PUSH
23645: LD_INT 5
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: IN
23655: IFFALSE 23667
// uc_nation := nation_american else
23657: LD_ADDR_OWVAR 21
23661: PUSH
23662: LD_INT 1
23664: ST_TO_ADDR
23665: GO 23710
// if chassis in [ 11 , 12 , 13 , 14 ] then
23667: LD_VAR 0 1
23671: PUSH
23672: LD_INT 11
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 13
23680: PUSH
23681: LD_INT 14
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: IN
23690: IFFALSE 23702
// uc_nation := nation_arabian else
23692: LD_ADDR_OWVAR 21
23696: PUSH
23697: LD_INT 2
23699: ST_TO_ADDR
23700: GO 23710
// uc_nation := nation_russian ;
23702: LD_ADDR_OWVAR 21
23706: PUSH
23707: LD_INT 3
23709: ST_TO_ADDR
// vc_chassis := chassis ;
23710: LD_ADDR_OWVAR 37
23714: PUSH
23715: LD_VAR 0 1
23719: ST_TO_ADDR
// vc_engine := engine ;
23720: LD_ADDR_OWVAR 39
23724: PUSH
23725: LD_VAR 0 2
23729: ST_TO_ADDR
// vc_control := control ;
23730: LD_ADDR_OWVAR 38
23734: PUSH
23735: LD_VAR 0 3
23739: ST_TO_ADDR
// vc_weapon := weapon ;
23740: LD_ADDR_OWVAR 40
23744: PUSH
23745: LD_VAR 0 4
23749: ST_TO_ADDR
// un := CreateVehicle ;
23750: LD_ADDR_VAR 0 8
23754: PUSH
23755: CALL_OW 45
23759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23760: LD_VAR 0 8
23764: PPUSH
23765: LD_INT 0
23767: PPUSH
23768: LD_INT 5
23770: PPUSH
23771: CALL_OW 12
23775: PPUSH
23776: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23780: LD_VAR 0 8
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: LD_VAR 0 6
23794: PPUSH
23795: LD_INT 1
23797: PPUSH
23798: CALL_OW 48
// end ;
23802: LD_VAR 0 7
23806: RET
// export hInvincible ; every 1 do
23807: GO 23809
23809: DISABLE
// hInvincible := [ ] ;
23810: LD_ADDR_EXP 83
23814: PUSH
23815: EMPTY
23816: ST_TO_ADDR
23817: END
// every 10 do var i ;
23818: GO 23820
23820: DISABLE
23821: LD_INT 0
23823: PPUSH
// begin enable ;
23824: ENABLE
// if not hInvincible then
23825: LD_EXP 83
23829: NOT
23830: IFFALSE 23834
// exit ;
23832: GO 23878
// for i in hInvincible do
23834: LD_ADDR_VAR 0 1
23838: PUSH
23839: LD_EXP 83
23843: PUSH
23844: FOR_IN
23845: IFFALSE 23876
// if GetLives ( i ) < 1000 then
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 256
23856: PUSH
23857: LD_INT 1000
23859: LESS
23860: IFFALSE 23874
// SetLives ( i , 1000 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 1000
23869: PPUSH
23870: CALL_OW 234
23874: GO 23844
23876: POP
23877: POP
// end ;
23878: PPOPN 1
23880: END
// export function hHackInvincible ; var i ; begin
23881: LD_INT 0
23883: PPUSH
23884: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23885: LD_ADDR_VAR 0 2
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 21
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 21
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: PPUSH
23918: CALL_OW 69
23922: PUSH
23923: FOR_IN
23924: IFFALSE 23985
// if IsSelected ( i ) then
23926: LD_VAR 0 2
23930: PPUSH
23931: CALL_OW 306
23935: IFFALSE 23983
// begin if i in hInvincible then
23937: LD_VAR 0 2
23941: PUSH
23942: LD_EXP 83
23946: IN
23947: IFFALSE 23967
// hInvincible := hInvincible diff i else
23949: LD_ADDR_EXP 83
23953: PUSH
23954: LD_EXP 83
23958: PUSH
23959: LD_VAR 0 2
23963: DIFF
23964: ST_TO_ADDR
23965: GO 23983
// hInvincible := hInvincible union i ;
23967: LD_ADDR_EXP 83
23971: PUSH
23972: LD_EXP 83
23976: PUSH
23977: LD_VAR 0 2
23981: UNION
23982: ST_TO_ADDR
// end ;
23983: GO 23923
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 1
23991: RET
// export function hHackInvisible ; var i , j ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23997: LD_ADDR_VAR 0 2
24001: PUSH
24002: LD_INT 21
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PPUSH
24012: CALL_OW 69
24016: PUSH
24017: FOR_IN
24018: IFFALSE 24042
// if IsSelected ( i ) then
24020: LD_VAR 0 2
24024: PPUSH
24025: CALL_OW 306
24029: IFFALSE 24040
// ComForceInvisible ( i ) ;
24031: LD_VAR 0 2
24035: PPUSH
24036: CALL_OW 496
24040: GO 24017
24042: POP
24043: POP
// end ;
24044: LD_VAR 0 1
24048: RET
// export function hHackChangeYourSide ; begin
24049: LD_INT 0
24051: PPUSH
// if your_side = 8 then
24052: LD_OWVAR 2
24056: PUSH
24057: LD_INT 8
24059: EQUAL
24060: IFFALSE 24072
// your_side := 0 else
24062: LD_ADDR_OWVAR 2
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
24070: GO 24086
// your_side := your_side + 1 ;
24072: LD_ADDR_OWVAR 2
24076: PUSH
24077: LD_OWVAR 2
24081: PUSH
24082: LD_INT 1
24084: PLUS
24085: ST_TO_ADDR
// end ;
24086: LD_VAR 0 1
24090: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24091: LD_INT 0
24093: PPUSH
24094: PPUSH
24095: PPUSH
// for i in all_units do
24096: LD_ADDR_VAR 0 2
24100: PUSH
24101: LD_OWVAR 3
24105: PUSH
24106: FOR_IN
24107: IFFALSE 24185
// if IsSelected ( i ) then
24109: LD_VAR 0 2
24113: PPUSH
24114: CALL_OW 306
24118: IFFALSE 24183
// begin j := GetSide ( i ) ;
24120: LD_ADDR_VAR 0 3
24124: PUSH
24125: LD_VAR 0 2
24129: PPUSH
24130: CALL_OW 255
24134: ST_TO_ADDR
// if j = 8 then
24135: LD_VAR 0 3
24139: PUSH
24140: LD_INT 8
24142: EQUAL
24143: IFFALSE 24155
// j := 0 else
24145: LD_ADDR_VAR 0 3
24149: PUSH
24150: LD_INT 0
24152: ST_TO_ADDR
24153: GO 24169
// j := j + 1 ;
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: LD_INT 1
24167: PLUS
24168: ST_TO_ADDR
// SetSide ( i , j ) ;
24169: LD_VAR 0 2
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: CALL_OW 235
// end ;
24183: GO 24106
24185: POP
24186: POP
// end ;
24187: LD_VAR 0 1
24191: RET
// export function hHackFog ; begin
24192: LD_INT 0
24194: PPUSH
// FogOff ( true ) ;
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 344
// end ;
24202: LD_VAR 0 1
24206: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24207: LD_INT 0
24209: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24210: LD_VAR 0 1
24214: PPUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: LD_INT 1
24230: PPUSH
24231: CALL_OW 483
// CenterOnXY ( x , y ) ;
24235: LD_VAR 0 2
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: CALL_OW 84
// end ;
24249: LD_VAR 0 4
24253: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24254: LD_INT 0
24256: PPUSH
24257: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24258: LD_VAR 0 1
24262: NOT
24263: PUSH
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 488
24278: NOT
24279: OR
24280: PUSH
24281: LD_VAR 0 1
24285: PPUSH
24286: CALL_OW 266
24290: PUSH
24291: LD_INT 3
24293: NONEQUAL
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 247
24304: PUSH
24305: LD_INT 1
24307: EQUAL
24308: NOT
24309: AND
24310: OR
24311: IFFALSE 24315
// exit ;
24313: GO 24464
// if GetType ( factory ) = unit_human then
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 247
24324: PUSH
24325: LD_INT 1
24327: EQUAL
24328: IFFALSE 24345
// factory := IsInUnit ( factory ) ;
24330: LD_ADDR_VAR 0 1
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 310
24344: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 266
24354: PUSH
24355: LD_INT 3
24357: NONEQUAL
24358: IFFALSE 24362
// exit ;
24360: GO 24464
// if HexInfo ( x , y ) = factory then
24362: LD_VAR 0 2
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL_OW 428
24376: PUSH
24377: LD_VAR 0 1
24381: EQUAL
24382: IFFALSE 24409
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24384: LD_ADDR_EXP 84
24388: PUSH
24389: LD_EXP 84
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: LD_INT 0
24401: PPUSH
24402: CALL_OW 1
24406: ST_TO_ADDR
24407: GO 24460
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24409: LD_ADDR_EXP 84
24413: PUSH
24414: LD_EXP 84
24418: PPUSH
24419: LD_VAR 0 1
24423: PPUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 255
24433: PUSH
24434: LD_VAR 0 1
24438: PUSH
24439: LD_VAR 0 2
24443: PUSH
24444: LD_VAR 0 3
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 1
24459: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24460: CALL 24469 0 0
// end ;
24464: LD_VAR 0 4
24468: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24474: LD_STRING resetFactoryWaypoint();
24476: PPUSH
24477: CALL_OW 559
// if factoryWaypoints then
24481: LD_EXP 84
24485: IFFALSE 24611
// begin list := PrepareArray ( factoryWaypoints ) ;
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: LD_EXP 84
24496: PPUSH
24497: CALL 71203 0 1
24501: ST_TO_ADDR
// for i := 1 to list do
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: DOUBLE
24508: LD_INT 1
24510: DEC
24511: ST_TO_ADDR
24512: LD_VAR 0 3
24516: PUSH
24517: FOR_TO
24518: IFFALSE 24609
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24520: LD_STRING setFactoryWaypointXY(
24522: PUSH
24523: LD_VAR 0 3
24527: PUSH
24528: LD_VAR 0 2
24532: ARRAY
24533: PUSH
24534: LD_INT 1
24536: ARRAY
24537: STR
24538: PUSH
24539: LD_STRING ,
24541: STR
24542: PUSH
24543: LD_VAR 0 3
24547: PUSH
24548: LD_VAR 0 2
24552: ARRAY
24553: PUSH
24554: LD_INT 2
24556: ARRAY
24557: STR
24558: PUSH
24559: LD_STRING ,
24561: STR
24562: PUSH
24563: LD_VAR 0 3
24567: PUSH
24568: LD_VAR 0 2
24572: ARRAY
24573: PUSH
24574: LD_INT 3
24576: ARRAY
24577: STR
24578: PUSH
24579: LD_STRING ,
24581: STR
24582: PUSH
24583: LD_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: ARRAY
24593: PUSH
24594: LD_INT 4
24596: ARRAY
24597: STR
24598: PUSH
24599: LD_STRING )
24601: STR
24602: PPUSH
24603: CALL_OW 559
24607: GO 24517
24609: POP
24610: POP
// end ; end ;
24611: LD_VAR 0 1
24615: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24616: LD_INT 0
24618: PPUSH
// if HexInfo ( x , y ) = warehouse then
24619: LD_VAR 0 2
24623: PPUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: CALL_OW 428
24633: PUSH
24634: LD_VAR 0 1
24638: EQUAL
24639: IFFALSE 24666
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24641: LD_ADDR_EXP 85
24645: PUSH
24646: LD_EXP 85
24650: PPUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: LD_INT 0
24658: PPUSH
24659: CALL_OW 1
24663: ST_TO_ADDR
24664: GO 24717
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24666: LD_ADDR_EXP 85
24670: PUSH
24671: LD_EXP 85
24675: PPUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 255
24690: PUSH
24691: LD_VAR 0 1
24695: PUSH
24696: LD_VAR 0 2
24700: PUSH
24701: LD_VAR 0 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: PPUSH
24712: CALL_OW 1
24716: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24717: CALL 24726 0 0
// end ;
24721: LD_VAR 0 4
24725: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24726: LD_INT 0
24728: PPUSH
24729: PPUSH
24730: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24731: LD_STRING resetWarehouseGatheringPoints();
24733: PPUSH
24734: CALL_OW 559
// if warehouseGatheringPoints then
24738: LD_EXP 85
24742: IFFALSE 24868
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_EXP 85
24753: PPUSH
24754: CALL 71203 0 1
24758: ST_TO_ADDR
// for i := 1 to list do
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: DOUBLE
24765: LD_INT 1
24767: DEC
24768: ST_TO_ADDR
24769: LD_VAR 0 3
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24866
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24777: LD_STRING setWarehouseGatheringPointXY(
24779: PUSH
24780: LD_VAR 0 3
24784: PUSH
24785: LD_VAR 0 2
24789: ARRAY
24790: PUSH
24791: LD_INT 1
24793: ARRAY
24794: STR
24795: PUSH
24796: LD_STRING ,
24798: STR
24799: PUSH
24800: LD_VAR 0 3
24804: PUSH
24805: LD_VAR 0 2
24809: ARRAY
24810: PUSH
24811: LD_INT 2
24813: ARRAY
24814: STR
24815: PUSH
24816: LD_STRING ,
24818: STR
24819: PUSH
24820: LD_VAR 0 3
24824: PUSH
24825: LD_VAR 0 2
24829: ARRAY
24830: PUSH
24831: LD_INT 3
24833: ARRAY
24834: STR
24835: PUSH
24836: LD_STRING ,
24838: STR
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_VAR 0 2
24849: ARRAY
24850: PUSH
24851: LD_INT 4
24853: ARRAY
24854: STR
24855: PUSH
24856: LD_STRING )
24858: STR
24859: PPUSH
24860: CALL_OW 559
24864: GO 24774
24866: POP
24867: POP
// end ; end ;
24868: LD_VAR 0 1
24872: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24873: LD_EXP 85
24877: IFFALSE 25564
24879: GO 24881
24881: DISABLE
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
24891: PPUSH
24892: PPUSH
// begin enable ;
24893: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_EXP 85
24903: PPUSH
24904: CALL 71203 0 1
24908: ST_TO_ADDR
// if not list then
24909: LD_VAR 0 3
24913: NOT
24914: IFFALSE 24918
// exit ;
24916: GO 25564
// for i := 1 to list do
24918: LD_ADDR_VAR 0 1
24922: PUSH
24923: DOUBLE
24924: LD_INT 1
24926: DEC
24927: ST_TO_ADDR
24928: LD_VAR 0 3
24932: PUSH
24933: FOR_TO
24934: IFFALSE 25562
// begin depot := list [ i ] [ 2 ] ;
24936: LD_ADDR_VAR 0 8
24940: PUSH
24941: LD_VAR 0 3
24945: PUSH
24946: LD_VAR 0 1
24950: ARRAY
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24956: LD_ADDR_VAR 0 5
24960: PUSH
24961: LD_VAR 0 3
24965: PUSH
24966: LD_VAR 0 1
24970: ARRAY
24971: PUSH
24972: LD_INT 1
24974: ARRAY
24975: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24976: LD_VAR 0 8
24980: PPUSH
24981: CALL_OW 301
24985: PUSH
24986: LD_VAR 0 5
24990: PUSH
24991: LD_VAR 0 8
24995: PPUSH
24996: CALL_OW 255
25000: NONEQUAL
25001: OR
25002: IFFALSE 25031
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25004: LD_ADDR_EXP 85
25008: PUSH
25009: LD_EXP 85
25013: PPUSH
25014: LD_VAR 0 8
25018: PPUSH
25019: LD_INT 0
25021: PPUSH
25022: CALL_OW 1
25026: ST_TO_ADDR
// exit ;
25027: POP
25028: POP
25029: GO 25564
// end ; x := list [ i ] [ 3 ] ;
25031: LD_ADDR_VAR 0 6
25035: PUSH
25036: LD_VAR 0 3
25040: PUSH
25041: LD_VAR 0 1
25045: ARRAY
25046: PUSH
25047: LD_INT 3
25049: ARRAY
25050: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_VAR 0 3
25060: PUSH
25061: LD_VAR 0 1
25065: ARRAY
25066: PUSH
25067: LD_INT 4
25069: ARRAY
25070: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25071: LD_ADDR_VAR 0 9
25075: PUSH
25076: LD_VAR 0 6
25080: PPUSH
25081: LD_VAR 0 7
25085: PPUSH
25086: LD_INT 16
25088: PPUSH
25089: CALL 69787 0 3
25093: ST_TO_ADDR
// if not cratesNearbyPoint then
25094: LD_VAR 0 9
25098: NOT
25099: IFFALSE 25105
// exit ;
25101: POP
25102: POP
25103: GO 25564
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25105: LD_ADDR_VAR 0 4
25109: PUSH
25110: LD_INT 22
25112: PUSH
25113: LD_VAR 0 5
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: LD_INT 60
25127: PUSH
25128: EMPTY
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 91
25137: PUSH
25138: LD_VAR 0 8
25142: PUSH
25143: LD_INT 6
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 25
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 25
25166: PUSH
25167: LD_INT 16
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: LD_VAR 0 8
25194: PPUSH
25195: CALL_OW 313
25199: PPUSH
25200: LD_INT 3
25202: PUSH
25203: LD_INT 60
25205: PUSH
25206: EMPTY
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: LD_INT 25
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 25
25228: PUSH
25229: LD_INT 16
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PPUSH
25245: CALL_OW 72
25249: UNION
25250: ST_TO_ADDR
// if tmp then
25251: LD_VAR 0 4
25255: IFFALSE 25335
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25257: LD_ADDR_VAR 0 4
25261: PUSH
25262: LD_VAR 0 4
25266: PPUSH
25267: LD_INT 3
25269: PPUSH
25270: CALL 67754 0 2
25274: ST_TO_ADDR
// for j in tmp do
25275: LD_ADDR_VAR 0 2
25279: PUSH
25280: LD_VAR 0 4
25284: PUSH
25285: FOR_IN
25286: IFFALSE 25329
// begin if IsInUnit ( j ) then
25288: LD_VAR 0 2
25292: PPUSH
25293: CALL_OW 310
25297: IFFALSE 25308
// ComExit ( j ) ;
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL 67837 0 1
// AddComCollect ( j , x , y ) ;
25308: LD_VAR 0 2
25312: PPUSH
25313: LD_VAR 0 6
25317: PPUSH
25318: LD_VAR 0 7
25322: PPUSH
25323: CALL_OW 177
// end ;
25327: GO 25285
25329: POP
25330: POP
// exit ;
25331: POP
25332: POP
25333: GO 25564
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25335: LD_ADDR_VAR 0 4
25339: PUSH
25340: LD_INT 22
25342: PUSH
25343: LD_VAR 0 5
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 91
25354: PUSH
25355: LD_VAR 0 8
25359: PUSH
25360: LD_INT 8
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 34
25373: PUSH
25374: LD_INT 12
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 34
25383: PUSH
25384: LD_INT 51
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 34
25393: PUSH
25394: LD_INT 32
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 34
25403: PUSH
25404: LD_EXP 98
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: PPUSH
25425: CALL_OW 69
25429: ST_TO_ADDR
// if tmp then
25430: LD_VAR 0 4
25434: IFFALSE 25560
// begin for j in tmp do
25436: LD_ADDR_VAR 0 2
25440: PUSH
25441: LD_VAR 0 4
25445: PUSH
25446: FOR_IN
25447: IFFALSE 25558
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL_OW 262
25458: PUSH
25459: LD_INT 3
25461: EQUAL
25462: PUSH
25463: LD_VAR 0 2
25467: PPUSH
25468: CALL_OW 261
25472: PUSH
25473: LD_INT 20
25475: GREATER
25476: OR
25477: PUSH
25478: LD_VAR 0 2
25482: PPUSH
25483: CALL_OW 314
25487: NOT
25488: AND
25489: PUSH
25490: LD_VAR 0 2
25494: PPUSH
25495: CALL_OW 263
25499: PUSH
25500: LD_INT 1
25502: NONEQUAL
25503: PUSH
25504: LD_VAR 0 2
25508: PPUSH
25509: CALL_OW 311
25513: OR
25514: AND
25515: IFFALSE 25556
// begin ComCollect ( j , x , y ) ;
25517: LD_VAR 0 2
25521: PPUSH
25522: LD_VAR 0 6
25526: PPUSH
25527: LD_VAR 0 7
25531: PPUSH
25532: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25536: LD_VAR 0 2
25540: PPUSH
25541: LD_VAR 0 8
25545: PPUSH
25546: CALL_OW 172
// exit ;
25550: POP
25551: POP
25552: POP
25553: POP
25554: GO 25564
// end ;
25556: GO 25446
25558: POP
25559: POP
// end ; end ;
25560: GO 24933
25562: POP
25563: POP
// end ; end_of_file end_of_file
25564: PPOPN 9
25566: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25567: LD_INT 0
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 264
25582: PUSH
25583: LD_EXP 101
25587: EQUAL
25588: IFFALSE 25660
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25590: LD_INT 68
25592: PPUSH
25593: LD_VAR 0 1
25597: PPUSH
25598: CALL_OW 255
25602: PPUSH
25603: CALL_OW 321
25607: PUSH
25608: LD_INT 2
25610: EQUAL
25611: IFFALSE 25623
// eff := 70 else
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_INT 70
25620: ST_TO_ADDR
25621: GO 25631
// eff := 30 ;
25623: LD_ADDR_VAR 0 4
25627: PUSH
25628: LD_INT 30
25630: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 250
25640: PPUSH
25641: LD_VAR 0 1
25645: PPUSH
25646: CALL_OW 251
25650: PPUSH
25651: LD_VAR 0 4
25655: PPUSH
25656: CALL_OW 495
// end ; end ;
25660: LD_VAR 0 2
25664: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25665: LD_INT 0
25667: PPUSH
// end ;
25668: LD_VAR 0 4
25672: RET
// export function SOS_Command ( cmd ) ; begin
25673: LD_INT 0
25675: PPUSH
// end ;
25676: LD_VAR 0 2
25680: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25681: LD_INT 0
25683: PPUSH
// end ;
25684: LD_VAR 0 6
25688: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25689: LD_INT 0
25691: PPUSH
25692: PPUSH
// if not vehicle or not factory then
25693: LD_VAR 0 1
25697: NOT
25698: PUSH
25699: LD_VAR 0 2
25703: NOT
25704: OR
25705: IFFALSE 25709
// exit ;
25707: GO 25940
// if factoryWaypoints >= factory then
25709: LD_EXP 84
25713: PUSH
25714: LD_VAR 0 2
25718: GREATEREQUAL
25719: IFFALSE 25940
// if factoryWaypoints [ factory ] then
25721: LD_EXP 84
25725: PUSH
25726: LD_VAR 0 2
25730: ARRAY
25731: IFFALSE 25940
// begin if GetControl ( vehicle ) = control_manual then
25733: LD_VAR 0 1
25737: PPUSH
25738: CALL_OW 263
25742: PUSH
25743: LD_INT 1
25745: EQUAL
25746: IFFALSE 25827
// begin driver := IsDrivenBy ( vehicle ) ;
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 311
25762: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25763: LD_VAR 0 4
25767: PPUSH
25768: LD_EXP 84
25772: PUSH
25773: LD_VAR 0 2
25777: ARRAY
25778: PUSH
25779: LD_INT 3
25781: ARRAY
25782: PPUSH
25783: LD_EXP 84
25787: PUSH
25788: LD_VAR 0 2
25792: ARRAY
25793: PUSH
25794: LD_INT 4
25796: ARRAY
25797: PPUSH
25798: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25802: LD_VAR 0 4
25806: PPUSH
25807: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25811: LD_VAR 0 4
25815: PPUSH
25816: LD_VAR 0 2
25820: PPUSH
25821: CALL_OW 180
// end else
25825: GO 25940
// if GetControl ( vehicle ) = control_remote then
25827: LD_VAR 0 1
25831: PPUSH
25832: CALL_OW 263
25836: PUSH
25837: LD_INT 2
25839: EQUAL
25840: IFFALSE 25901
// begin wait ( 0 0$2 ) ;
25842: LD_INT 70
25844: PPUSH
25845: CALL_OW 67
// if Connect ( vehicle ) then
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL 38148 0 1
25858: IFFALSE 25899
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_EXP 84
25869: PUSH
25870: LD_VAR 0 2
25874: ARRAY
25875: PUSH
25876: LD_INT 3
25878: ARRAY
25879: PPUSH
25880: LD_EXP 84
25884: PUSH
25885: LD_VAR 0 2
25889: ARRAY
25890: PUSH
25891: LD_INT 4
25893: ARRAY
25894: PPUSH
25895: CALL_OW 171
// end else
25899: GO 25940
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_EXP 84
25910: PUSH
25911: LD_VAR 0 2
25915: ARRAY
25916: PUSH
25917: LD_INT 3
25919: ARRAY
25920: PPUSH
25921: LD_EXP 84
25925: PUSH
25926: LD_VAR 0 2
25930: ARRAY
25931: PUSH
25932: LD_INT 4
25934: ARRAY
25935: PPUSH
25936: CALL_OW 171
// end ; end ;
25940: LD_VAR 0 3
25944: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25945: LD_INT 0
25947: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25948: LD_VAR 0 1
25952: PUSH
25953: LD_INT 250
25955: EQUAL
25956: PUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: CALL_OW 264
25966: PUSH
25967: LD_EXP 104
25971: EQUAL
25972: AND
25973: IFFALSE 25994
// MinerPlaceMine ( unit , x , y ) ;
25975: LD_VAR 0 2
25979: PPUSH
25980: LD_VAR 0 4
25984: PPUSH
25985: LD_VAR 0 5
25989: PPUSH
25990: CALL 28393 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25994: LD_VAR 0 1
25998: PUSH
25999: LD_INT 251
26001: EQUAL
26002: PUSH
26003: LD_VAR 0 2
26007: PPUSH
26008: CALL_OW 264
26012: PUSH
26013: LD_EXP 104
26017: EQUAL
26018: AND
26019: IFFALSE 26040
// MinerDetonateMine ( unit , x , y ) ;
26021: LD_VAR 0 2
26025: PPUSH
26026: LD_VAR 0 4
26030: PPUSH
26031: LD_VAR 0 5
26035: PPUSH
26036: CALL 28670 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26040: LD_VAR 0 1
26044: PUSH
26045: LD_INT 252
26047: EQUAL
26048: PUSH
26049: LD_VAR 0 2
26053: PPUSH
26054: CALL_OW 264
26058: PUSH
26059: LD_EXP 104
26063: EQUAL
26064: AND
26065: IFFALSE 26086
// MinerCreateMinefield ( unit , x , y ) ;
26067: LD_VAR 0 2
26071: PPUSH
26072: LD_VAR 0 4
26076: PPUSH
26077: LD_VAR 0 5
26081: PPUSH
26082: CALL 29087 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26086: LD_VAR 0 1
26090: PUSH
26091: LD_INT 253
26093: EQUAL
26094: PUSH
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 257
26104: PUSH
26105: LD_INT 5
26107: EQUAL
26108: AND
26109: IFFALSE 26130
// ComBinocular ( unit , x , y ) ;
26111: LD_VAR 0 2
26115: PPUSH
26116: LD_VAR 0 4
26120: PPUSH
26121: LD_VAR 0 5
26125: PPUSH
26126: CALL 29458 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26130: LD_VAR 0 1
26134: PUSH
26135: LD_INT 254
26137: EQUAL
26138: PUSH
26139: LD_VAR 0 2
26143: PPUSH
26144: CALL_OW 264
26148: PUSH
26149: LD_EXP 99
26153: EQUAL
26154: AND
26155: PUSH
26156: LD_VAR 0 3
26160: PPUSH
26161: CALL_OW 263
26165: PUSH
26166: LD_INT 3
26168: EQUAL
26169: AND
26170: IFFALSE 26186
// HackDestroyVehicle ( unit , selectedUnit ) ;
26172: LD_VAR 0 2
26176: PPUSH
26177: LD_VAR 0 3
26181: PPUSH
26182: CALL 27753 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26186: LD_VAR 0 1
26190: PUSH
26191: LD_INT 255
26193: EQUAL
26194: PUSH
26195: LD_VAR 0 2
26199: PPUSH
26200: CALL_OW 264
26204: PUSH
26205: LD_INT 14
26207: PUSH
26208: LD_INT 53
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: IN
26215: AND
26216: PUSH
26217: LD_VAR 0 4
26221: PPUSH
26222: LD_VAR 0 5
26226: PPUSH
26227: CALL_OW 488
26231: AND
26232: IFFALSE 26256
// CutTreeXYR ( unit , x , y , 12 ) ;
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_VAR 0 4
26243: PPUSH
26244: LD_VAR 0 5
26248: PPUSH
26249: LD_INT 12
26251: PPUSH
26252: CALL 26319 0 4
// if cmd = 256 then
26256: LD_VAR 0 1
26260: PUSH
26261: LD_INT 256
26263: EQUAL
26264: IFFALSE 26285
// SetFactoryWaypoint ( unit , x , y ) ;
26266: LD_VAR 0 2
26270: PPUSH
26271: LD_VAR 0 4
26275: PPUSH
26276: LD_VAR 0 5
26280: PPUSH
26281: CALL 24254 0 3
// if cmd = 257 then
26285: LD_VAR 0 1
26289: PUSH
26290: LD_INT 257
26292: EQUAL
26293: IFFALSE 26314
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26295: LD_VAR 0 2
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: LD_VAR 0 5
26309: PPUSH
26310: CALL 24616 0 3
// end ;
26314: LD_VAR 0 6
26318: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26330: LD_VAR 0 1
26334: NOT
26335: PUSH
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 488
26350: NOT
26351: OR
26352: PUSH
26353: LD_VAR 0 4
26357: NOT
26358: OR
26359: IFFALSE 26363
// exit ;
26361: GO 26703
// list := [ ] ;
26363: LD_ADDR_VAR 0 13
26367: PUSH
26368: EMPTY
26369: ST_TO_ADDR
// if x - r < 0 then
26370: LD_VAR 0 2
26374: PUSH
26375: LD_VAR 0 4
26379: MINUS
26380: PUSH
26381: LD_INT 0
26383: LESS
26384: IFFALSE 26396
// min_x := 0 else
26386: LD_ADDR_VAR 0 7
26390: PUSH
26391: LD_INT 0
26393: ST_TO_ADDR
26394: GO 26412
// min_x := x - r ;
26396: LD_ADDR_VAR 0 7
26400: PUSH
26401: LD_VAR 0 2
26405: PUSH
26406: LD_VAR 0 4
26410: MINUS
26411: ST_TO_ADDR
// if y - r < 0 then
26412: LD_VAR 0 3
26416: PUSH
26417: LD_VAR 0 4
26421: MINUS
26422: PUSH
26423: LD_INT 0
26425: LESS
26426: IFFALSE 26438
// min_y := 0 else
26428: LD_ADDR_VAR 0 8
26432: PUSH
26433: LD_INT 0
26435: ST_TO_ADDR
26436: GO 26454
// min_y := y - r ;
26438: LD_ADDR_VAR 0 8
26442: PUSH
26443: LD_VAR 0 3
26447: PUSH
26448: LD_VAR 0 4
26452: MINUS
26453: ST_TO_ADDR
// max_x := x + r ;
26454: LD_ADDR_VAR 0 9
26458: PUSH
26459: LD_VAR 0 2
26463: PUSH
26464: LD_VAR 0 4
26468: PLUS
26469: ST_TO_ADDR
// max_y := y + r ;
26470: LD_ADDR_VAR 0 10
26474: PUSH
26475: LD_VAR 0 3
26479: PUSH
26480: LD_VAR 0 4
26484: PLUS
26485: ST_TO_ADDR
// for _x = min_x to max_x do
26486: LD_ADDR_VAR 0 11
26490: PUSH
26491: DOUBLE
26492: LD_VAR 0 7
26496: DEC
26497: ST_TO_ADDR
26498: LD_VAR 0 9
26502: PUSH
26503: FOR_TO
26504: IFFALSE 26621
// for _y = min_y to max_y do
26506: LD_ADDR_VAR 0 12
26510: PUSH
26511: DOUBLE
26512: LD_VAR 0 8
26516: DEC
26517: ST_TO_ADDR
26518: LD_VAR 0 10
26522: PUSH
26523: FOR_TO
26524: IFFALSE 26617
// begin if not ValidHex ( _x , _y ) then
26526: LD_VAR 0 11
26530: PPUSH
26531: LD_VAR 0 12
26535: PPUSH
26536: CALL_OW 488
26540: NOT
26541: IFFALSE 26545
// continue ;
26543: GO 26523
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26545: LD_VAR 0 11
26549: PPUSH
26550: LD_VAR 0 12
26554: PPUSH
26555: CALL_OW 351
26559: PUSH
26560: LD_VAR 0 11
26564: PPUSH
26565: LD_VAR 0 12
26569: PPUSH
26570: CALL_OW 554
26574: AND
26575: IFFALSE 26615
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26577: LD_ADDR_VAR 0 13
26581: PUSH
26582: LD_VAR 0 13
26586: PPUSH
26587: LD_VAR 0 13
26591: PUSH
26592: LD_INT 1
26594: PLUS
26595: PPUSH
26596: LD_VAR 0 11
26600: PUSH
26601: LD_VAR 0 12
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 2
26614: ST_TO_ADDR
// end ;
26615: GO 26523
26617: POP
26618: POP
26619: GO 26503
26621: POP
26622: POP
// if not list then
26623: LD_VAR 0 13
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26703
// for i in list do
26632: LD_ADDR_VAR 0 6
26636: PUSH
26637: LD_VAR 0 13
26641: PUSH
26642: FOR_IN
26643: IFFALSE 26701
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26645: LD_VAR 0 1
26649: PPUSH
26650: LD_STRING M
26652: PUSH
26653: LD_VAR 0 6
26657: PUSH
26658: LD_INT 1
26660: ARRAY
26661: PUSH
26662: LD_VAR 0 6
26666: PUSH
26667: LD_INT 2
26669: ARRAY
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: PUSH
26692: EMPTY
26693: LIST
26694: PPUSH
26695: CALL_OW 447
26699: GO 26642
26701: POP
26702: POP
// end ;
26703: LD_VAR 0 5
26707: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26708: LD_EXP 87
26712: NOT
26713: IFFALSE 26763
26715: GO 26717
26717: DISABLE
// begin initHack := true ;
26718: LD_ADDR_EXP 87
26722: PUSH
26723: LD_INT 1
26725: ST_TO_ADDR
// hackTanks := [ ] ;
26726: LD_ADDR_EXP 88
26730: PUSH
26731: EMPTY
26732: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26733: LD_ADDR_EXP 89
26737: PUSH
26738: EMPTY
26739: ST_TO_ADDR
// hackLimit := 3 ;
26740: LD_ADDR_EXP 90
26744: PUSH
26745: LD_INT 3
26747: ST_TO_ADDR
// hackDist := 12 ;
26748: LD_ADDR_EXP 91
26752: PUSH
26753: LD_INT 12
26755: ST_TO_ADDR
// hackCounter := [ ] ;
26756: LD_ADDR_EXP 92
26760: PUSH
26761: EMPTY
26762: ST_TO_ADDR
// end ;
26763: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26764: LD_EXP 87
26768: PUSH
26769: LD_INT 34
26771: PUSH
26772: LD_EXP 99
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 69
26785: AND
26786: IFFALSE 27041
26788: GO 26790
26790: DISABLE
26791: LD_INT 0
26793: PPUSH
26794: PPUSH
// begin enable ;
26795: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26796: LD_ADDR_VAR 0 1
26800: PUSH
26801: LD_INT 34
26803: PUSH
26804: LD_EXP 99
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PPUSH
26813: CALL_OW 69
26817: PUSH
26818: FOR_IN
26819: IFFALSE 27039
// begin if not i in hackTanks then
26821: LD_VAR 0 1
26825: PUSH
26826: LD_EXP 88
26830: IN
26831: NOT
26832: IFFALSE 26915
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26834: LD_ADDR_EXP 88
26838: PUSH
26839: LD_EXP 88
26843: PPUSH
26844: LD_EXP 88
26848: PUSH
26849: LD_INT 1
26851: PLUS
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 1
26862: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26863: LD_ADDR_EXP 89
26867: PUSH
26868: LD_EXP 89
26872: PPUSH
26873: LD_EXP 89
26877: PUSH
26878: LD_INT 1
26880: PLUS
26881: PPUSH
26882: EMPTY
26883: PPUSH
26884: CALL_OW 1
26888: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26889: LD_ADDR_EXP 92
26893: PUSH
26894: LD_EXP 92
26898: PPUSH
26899: LD_EXP 92
26903: PUSH
26904: LD_INT 1
26906: PLUS
26907: PPUSH
26908: EMPTY
26909: PPUSH
26910: CALL_OW 1
26914: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 302
26924: NOT
26925: IFFALSE 26938
// begin HackUnlinkAll ( i ) ;
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL 27044 0 1
// continue ;
26936: GO 26818
// end ; HackCheckCapturedStatus ( i ) ;
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL 27487 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26947: LD_ADDR_VAR 0 2
26951: PUSH
26952: LD_INT 81
26954: PUSH
26955: LD_VAR 0 1
26959: PPUSH
26960: CALL_OW 255
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 33
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 91
26981: PUSH
26982: LD_VAR 0 1
26986: PUSH
26987: LD_EXP 91
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 50
26999: PUSH
27000: EMPTY
27001: LIST
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: PPUSH
27009: CALL_OW 69
27013: ST_TO_ADDR
// if not tmp then
27014: LD_VAR 0 2
27018: NOT
27019: IFFALSE 27023
// continue ;
27021: GO 26818
// HackLink ( i , tmp ) ;
27023: LD_VAR 0 1
27027: PPUSH
27028: LD_VAR 0 2
27032: PPUSH
27033: CALL 27180 0 2
// end ;
27037: GO 26818
27039: POP
27040: POP
// end ;
27041: PPOPN 2
27043: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27044: LD_INT 0
27046: PPUSH
27047: PPUSH
27048: PPUSH
// if not hack in hackTanks then
27049: LD_VAR 0 1
27053: PUSH
27054: LD_EXP 88
27058: IN
27059: NOT
27060: IFFALSE 27064
// exit ;
27062: GO 27175
// index := GetElementIndex ( hackTanks , hack ) ;
27064: LD_ADDR_VAR 0 4
27068: PUSH
27069: LD_EXP 88
27073: PPUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL 34962 0 2
27083: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27084: LD_EXP 89
27088: PUSH
27089: LD_VAR 0 4
27093: ARRAY
27094: IFFALSE 27175
// begin for i in hackTanksCaptured [ index ] do
27096: LD_ADDR_VAR 0 3
27100: PUSH
27101: LD_EXP 89
27105: PUSH
27106: LD_VAR 0 4
27110: ARRAY
27111: PUSH
27112: FOR_IN
27113: IFFALSE 27139
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27115: LD_VAR 0 3
27119: PUSH
27120: LD_INT 1
27122: ARRAY
27123: PPUSH
27124: LD_VAR 0 3
27128: PUSH
27129: LD_INT 2
27131: ARRAY
27132: PPUSH
27133: CALL_OW 235
27137: GO 27112
27139: POP
27140: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27141: LD_ADDR_EXP 89
27145: PUSH
27146: LD_EXP 89
27150: PPUSH
27151: LD_VAR 0 4
27155: PPUSH
27156: EMPTY
27157: PPUSH
27158: CALL_OW 1
27162: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27163: LD_VAR 0 1
27167: PPUSH
27168: LD_INT 0
27170: PPUSH
27171: CALL_OW 505
// end ; end ;
27175: LD_VAR 0 2
27179: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27180: LD_INT 0
27182: PPUSH
27183: PPUSH
27184: PPUSH
// if not hack in hackTanks or not vehicles then
27185: LD_VAR 0 1
27189: PUSH
27190: LD_EXP 88
27194: IN
27195: NOT
27196: PUSH
27197: LD_VAR 0 2
27201: NOT
27202: OR
27203: IFFALSE 27207
// exit ;
27205: GO 27482
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27207: LD_ADDR_VAR 0 2
27211: PUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_VAR 0 2
27221: PPUSH
27222: LD_INT 1
27224: PPUSH
27225: LD_INT 1
27227: PPUSH
27228: CALL 35612 0 4
27232: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27233: LD_ADDR_VAR 0 5
27237: PUSH
27238: LD_EXP 88
27242: PPUSH
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL 34962 0 2
27252: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27253: LD_EXP 89
27257: PUSH
27258: LD_VAR 0 5
27262: ARRAY
27263: PUSH
27264: LD_EXP 90
27268: LESS
27269: IFFALSE 27458
// begin for i := 1 to vehicles do
27271: LD_ADDR_VAR 0 4
27275: PUSH
27276: DOUBLE
27277: LD_INT 1
27279: DEC
27280: ST_TO_ADDR
27281: LD_VAR 0 2
27285: PUSH
27286: FOR_TO
27287: IFFALSE 27456
// begin if hackTanksCaptured [ index ] = hackLimit then
27289: LD_EXP 89
27293: PUSH
27294: LD_VAR 0 5
27298: ARRAY
27299: PUSH
27300: LD_EXP 90
27304: EQUAL
27305: IFFALSE 27309
// break ;
27307: GO 27456
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27309: LD_ADDR_EXP 92
27313: PUSH
27314: LD_EXP 92
27318: PPUSH
27319: LD_VAR 0 5
27323: PPUSH
27324: LD_EXP 92
27328: PUSH
27329: LD_VAR 0 5
27333: ARRAY
27334: PUSH
27335: LD_INT 1
27337: PLUS
27338: PPUSH
27339: CALL_OW 1
27343: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27344: LD_ADDR_EXP 89
27348: PUSH
27349: LD_EXP 89
27353: PPUSH
27354: LD_VAR 0 5
27358: PUSH
27359: LD_EXP 89
27363: PUSH
27364: LD_VAR 0 5
27368: ARRAY
27369: PUSH
27370: LD_INT 1
27372: PLUS
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PPUSH
27378: LD_VAR 0 2
27382: PUSH
27383: LD_VAR 0 4
27387: ARRAY
27388: PUSH
27389: LD_VAR 0 2
27393: PUSH
27394: LD_VAR 0 4
27398: ARRAY
27399: PPUSH
27400: CALL_OW 255
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL 35177 0 3
27413: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27414: LD_VAR 0 2
27418: PUSH
27419: LD_VAR 0 4
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 1
27429: PPUSH
27430: CALL_OW 255
27434: PPUSH
27435: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27439: LD_VAR 0 2
27443: PUSH
27444: LD_VAR 0 4
27448: ARRAY
27449: PPUSH
27450: CALL_OW 141
// end ;
27454: GO 27286
27456: POP
27457: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27458: LD_VAR 0 1
27462: PPUSH
27463: LD_EXP 89
27467: PUSH
27468: LD_VAR 0 5
27472: ARRAY
27473: PUSH
27474: LD_INT 0
27476: PLUS
27477: PPUSH
27478: CALL_OW 505
// end ;
27482: LD_VAR 0 3
27486: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
// if not hack in hackTanks then
27493: LD_VAR 0 1
27497: PUSH
27498: LD_EXP 88
27502: IN
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27748
// index := GetElementIndex ( hackTanks , hack ) ;
27508: LD_ADDR_VAR 0 4
27512: PUSH
27513: LD_EXP 88
27517: PPUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL 34962 0 2
27527: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27528: LD_ADDR_VAR 0 3
27532: PUSH
27533: DOUBLE
27534: LD_EXP 89
27538: PUSH
27539: LD_VAR 0 4
27543: ARRAY
27544: INC
27545: ST_TO_ADDR
27546: LD_INT 1
27548: PUSH
27549: FOR_DOWNTO
27550: IFFALSE 27722
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27552: LD_ADDR_VAR 0 5
27556: PUSH
27557: LD_EXP 89
27561: PUSH
27562: LD_VAR 0 4
27566: ARRAY
27567: PUSH
27568: LD_VAR 0 3
27572: ARRAY
27573: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27574: LD_VAR 0 5
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PPUSH
27583: CALL_OW 302
27587: NOT
27588: PUSH
27589: LD_VAR 0 5
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: PPUSH
27598: CALL_OW 255
27602: PUSH
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 255
27612: NONEQUAL
27613: OR
27614: IFFALSE 27720
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27616: LD_VAR 0 5
27620: PUSH
27621: LD_INT 1
27623: ARRAY
27624: PPUSH
27625: CALL_OW 305
27629: PUSH
27630: LD_VAR 0 5
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: PPUSH
27639: CALL_OW 255
27643: PUSH
27644: LD_VAR 0 1
27648: PPUSH
27649: CALL_OW 255
27653: EQUAL
27654: AND
27655: IFFALSE 27679
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27657: LD_VAR 0 5
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: PPUSH
27666: LD_VAR 0 5
27670: PUSH
27671: LD_INT 2
27673: ARRAY
27674: PPUSH
27675: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27679: LD_ADDR_EXP 89
27683: PUSH
27684: LD_EXP 89
27688: PPUSH
27689: LD_VAR 0 4
27693: PPUSH
27694: LD_EXP 89
27698: PUSH
27699: LD_VAR 0 4
27703: ARRAY
27704: PPUSH
27705: LD_VAR 0 3
27709: PPUSH
27710: CALL_OW 3
27714: PPUSH
27715: CALL_OW 1
27719: ST_TO_ADDR
// end ; end ;
27720: GO 27549
27722: POP
27723: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27724: LD_VAR 0 1
27728: PPUSH
27729: LD_EXP 89
27733: PUSH
27734: LD_VAR 0 4
27738: ARRAY
27739: PUSH
27740: LD_INT 0
27742: PLUS
27743: PPUSH
27744: CALL_OW 505
// end ;
27748: LD_VAR 0 2
27752: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27753: LD_INT 0
27755: PPUSH
27756: PPUSH
27757: PPUSH
27758: PPUSH
// if not hack in hackTanks then
27759: LD_VAR 0 1
27763: PUSH
27764: LD_EXP 88
27768: IN
27769: NOT
27770: IFFALSE 27774
// exit ;
27772: GO 27859
// index := GetElementIndex ( hackTanks , hack ) ;
27774: LD_ADDR_VAR 0 5
27778: PUSH
27779: LD_EXP 88
27783: PPUSH
27784: LD_VAR 0 1
27788: PPUSH
27789: CALL 34962 0 2
27793: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: DOUBLE
27800: LD_INT 1
27802: DEC
27803: ST_TO_ADDR
27804: LD_EXP 89
27808: PUSH
27809: LD_VAR 0 5
27813: ARRAY
27814: PUSH
27815: FOR_TO
27816: IFFALSE 27857
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27818: LD_EXP 89
27822: PUSH
27823: LD_VAR 0 5
27827: ARRAY
27828: PUSH
27829: LD_VAR 0 4
27833: ARRAY
27834: PUSH
27835: LD_INT 1
27837: ARRAY
27838: PUSH
27839: LD_VAR 0 2
27843: EQUAL
27844: IFFALSE 27855
// KillUnit ( vehicle ) ;
27846: LD_VAR 0 2
27850: PPUSH
27851: CALL_OW 66
27855: GO 27815
27857: POP
27858: POP
// end ;
27859: LD_VAR 0 3
27863: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27864: LD_EXP 93
27868: NOT
27869: IFFALSE 27904
27871: GO 27873
27873: DISABLE
// begin initMiner := true ;
27874: LD_ADDR_EXP 93
27878: PUSH
27879: LD_INT 1
27881: ST_TO_ADDR
// minersList := [ ] ;
27882: LD_ADDR_EXP 94
27886: PUSH
27887: EMPTY
27888: ST_TO_ADDR
// minerMinesList := [ ] ;
27889: LD_ADDR_EXP 95
27893: PUSH
27894: EMPTY
27895: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27896: LD_ADDR_EXP 96
27900: PUSH
27901: LD_INT 5
27903: ST_TO_ADDR
// end ;
27904: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27905: LD_EXP 93
27909: PUSH
27910: LD_INT 34
27912: PUSH
27913: LD_EXP 104
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 69
27926: AND
27927: IFFALSE 28390
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
// begin enable ;
27938: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27939: LD_ADDR_VAR 0 1
27943: PUSH
27944: LD_INT 34
27946: PUSH
27947: LD_EXP 104
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PPUSH
27956: CALL_OW 69
27960: PUSH
27961: FOR_IN
27962: IFFALSE 28034
// begin if not i in minersList then
27964: LD_VAR 0 1
27968: PUSH
27969: LD_EXP 94
27973: IN
27974: NOT
27975: IFFALSE 28032
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27977: LD_ADDR_EXP 94
27981: PUSH
27982: LD_EXP 94
27986: PPUSH
27987: LD_EXP 94
27991: PUSH
27992: LD_INT 1
27994: PLUS
27995: PPUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 1
28005: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28006: LD_ADDR_EXP 95
28010: PUSH
28011: LD_EXP 95
28015: PPUSH
28016: LD_EXP 95
28020: PUSH
28021: LD_INT 1
28023: PLUS
28024: PPUSH
28025: EMPTY
28026: PPUSH
28027: CALL_OW 1
28031: ST_TO_ADDR
// end end ;
28032: GO 27961
28034: POP
28035: POP
// for i := minerMinesList downto 1 do
28036: LD_ADDR_VAR 0 1
28040: PUSH
28041: DOUBLE
28042: LD_EXP 95
28046: INC
28047: ST_TO_ADDR
28048: LD_INT 1
28050: PUSH
28051: FOR_DOWNTO
28052: IFFALSE 28388
// begin if IsLive ( minersList [ i ] ) then
28054: LD_EXP 94
28058: PUSH
28059: LD_VAR 0 1
28063: ARRAY
28064: PPUSH
28065: CALL_OW 300
28069: IFFALSE 28097
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28071: LD_EXP 94
28075: PUSH
28076: LD_VAR 0 1
28080: ARRAY
28081: PPUSH
28082: LD_EXP 95
28086: PUSH
28087: LD_VAR 0 1
28091: ARRAY
28092: PPUSH
28093: CALL_OW 505
// if not minerMinesList [ i ] then
28097: LD_EXP 95
28101: PUSH
28102: LD_VAR 0 1
28106: ARRAY
28107: NOT
28108: IFFALSE 28112
// continue ;
28110: GO 28051
// for j := minerMinesList [ i ] downto 1 do
28112: LD_ADDR_VAR 0 2
28116: PUSH
28117: DOUBLE
28118: LD_EXP 95
28122: PUSH
28123: LD_VAR 0 1
28127: ARRAY
28128: INC
28129: ST_TO_ADDR
28130: LD_INT 1
28132: PUSH
28133: FOR_DOWNTO
28134: IFFALSE 28384
// begin side := GetSide ( minersList [ i ] ) ;
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_EXP 94
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PPUSH
28152: CALL_OW 255
28156: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28157: LD_ADDR_VAR 0 4
28161: PUSH
28162: LD_EXP 95
28166: PUSH
28167: LD_VAR 0 1
28171: ARRAY
28172: PUSH
28173: LD_VAR 0 2
28177: ARRAY
28178: PUSH
28179: LD_INT 1
28181: ARRAY
28182: PPUSH
28183: LD_EXP 95
28187: PUSH
28188: LD_VAR 0 1
28192: ARRAY
28193: PUSH
28194: LD_VAR 0 2
28198: ARRAY
28199: PUSH
28200: LD_INT 2
28202: ARRAY
28203: PPUSH
28204: CALL_OW 428
28208: ST_TO_ADDR
// if not tmp then
28209: LD_VAR 0 4
28213: NOT
28214: IFFALSE 28218
// continue ;
28216: GO 28133
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28218: LD_VAR 0 4
28222: PUSH
28223: LD_INT 81
28225: PUSH
28226: LD_VAR 0 3
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: IN
28240: PUSH
28241: LD_EXP 95
28245: PUSH
28246: LD_VAR 0 1
28250: ARRAY
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PPUSH
28262: LD_EXP 95
28266: PUSH
28267: LD_VAR 0 1
28271: ARRAY
28272: PUSH
28273: LD_VAR 0 2
28277: ARRAY
28278: PUSH
28279: LD_INT 2
28281: ARRAY
28282: PPUSH
28283: CALL_OW 458
28287: AND
28288: IFFALSE 28382
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28290: LD_EXP 95
28294: PUSH
28295: LD_VAR 0 1
28299: ARRAY
28300: PUSH
28301: LD_VAR 0 2
28305: ARRAY
28306: PUSH
28307: LD_INT 1
28309: ARRAY
28310: PPUSH
28311: LD_EXP 95
28315: PUSH
28316: LD_VAR 0 1
28320: ARRAY
28321: PUSH
28322: LD_VAR 0 2
28326: ARRAY
28327: PUSH
28328: LD_INT 2
28330: ARRAY
28331: PPUSH
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28341: LD_ADDR_EXP 95
28345: PUSH
28346: LD_EXP 95
28350: PPUSH
28351: LD_VAR 0 1
28355: PPUSH
28356: LD_EXP 95
28360: PUSH
28361: LD_VAR 0 1
28365: ARRAY
28366: PPUSH
28367: LD_VAR 0 2
28371: PPUSH
28372: CALL_OW 3
28376: PPUSH
28377: CALL_OW 1
28381: ST_TO_ADDR
// end ; end ;
28382: GO 28133
28384: POP
28385: POP
// end ;
28386: GO 28051
28388: POP
28389: POP
// end ;
28390: PPOPN 4
28392: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
// result := false ;
28397: LD_ADDR_VAR 0 4
28401: PUSH
28402: LD_INT 0
28404: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 264
28414: PUSH
28415: LD_EXP 104
28419: EQUAL
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28665
// index := GetElementIndex ( minersList , unit ) ;
28425: LD_ADDR_VAR 0 5
28429: PUSH
28430: LD_EXP 94
28434: PPUSH
28435: LD_VAR 0 1
28439: PPUSH
28440: CALL 34962 0 2
28444: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28445: LD_EXP 95
28449: PUSH
28450: LD_VAR 0 5
28454: ARRAY
28455: PUSH
28456: LD_EXP 96
28460: GREATEREQUAL
28461: IFFALSE 28465
// exit ;
28463: GO 28665
// ComMoveXY ( unit , x , y ) ;
28465: LD_VAR 0 1
28469: PPUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: LD_VAR 0 3
28479: PPUSH
28480: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28484: LD_INT 35
28486: PPUSH
28487: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28491: LD_VAR 0 1
28495: PPUSH
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_VAR 0 3
28505: PPUSH
28506: CALL 66248 0 3
28510: NOT
28511: PUSH
28512: LD_VAR 0 1
28516: PPUSH
28517: CALL_OW 314
28521: AND
28522: IFFALSE 28526
// exit ;
28524: GO 28665
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28526: LD_VAR 0 2
28530: PPUSH
28531: LD_VAR 0 3
28535: PPUSH
28536: CALL_OW 428
28540: PUSH
28541: LD_VAR 0 1
28545: EQUAL
28546: PUSH
28547: LD_VAR 0 1
28551: PPUSH
28552: CALL_OW 314
28556: NOT
28557: AND
28558: IFFALSE 28484
// PlaySoundXY ( x , y , PlantMine ) ;
28560: LD_VAR 0 2
28564: PPUSH
28565: LD_VAR 0 3
28569: PPUSH
28570: LD_STRING PlantMine
28572: PPUSH
28573: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 255
28596: PPUSH
28597: LD_INT 0
28599: PPUSH
28600: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28604: LD_ADDR_EXP 95
28608: PUSH
28609: LD_EXP 95
28613: PPUSH
28614: LD_VAR 0 5
28618: PUSH
28619: LD_EXP 95
28623: PUSH
28624: LD_VAR 0 5
28628: ARRAY
28629: PUSH
28630: LD_INT 1
28632: PLUS
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: LD_VAR 0 2
28642: PUSH
28643: LD_VAR 0 3
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL 35177 0 3
28656: ST_TO_ADDR
// result := true ;
28657: LD_ADDR_VAR 0 4
28661: PUSH
28662: LD_INT 1
28664: ST_TO_ADDR
// end ;
28665: LD_VAR 0 4
28669: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
// if not unit in minersList then
28675: LD_VAR 0 1
28679: PUSH
28680: LD_EXP 94
28684: IN
28685: NOT
28686: IFFALSE 28690
// exit ;
28688: GO 29082
// index := GetElementIndex ( minersList , unit ) ;
28690: LD_ADDR_VAR 0 6
28694: PUSH
28695: LD_EXP 94
28699: PPUSH
28700: LD_VAR 0 1
28704: PPUSH
28705: CALL 34962 0 2
28709: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28710: LD_ADDR_VAR 0 5
28714: PUSH
28715: DOUBLE
28716: LD_EXP 95
28720: PUSH
28721: LD_VAR 0 6
28725: ARRAY
28726: INC
28727: ST_TO_ADDR
28728: LD_INT 1
28730: PUSH
28731: FOR_DOWNTO
28732: IFFALSE 28893
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28734: LD_EXP 95
28738: PUSH
28739: LD_VAR 0 6
28743: ARRAY
28744: PUSH
28745: LD_VAR 0 5
28749: ARRAY
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PUSH
28755: LD_VAR 0 2
28759: EQUAL
28760: PUSH
28761: LD_EXP 95
28765: PUSH
28766: LD_VAR 0 6
28770: ARRAY
28771: PUSH
28772: LD_VAR 0 5
28776: ARRAY
28777: PUSH
28778: LD_INT 2
28780: ARRAY
28781: PUSH
28782: LD_VAR 0 3
28786: EQUAL
28787: AND
28788: IFFALSE 28891
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28790: LD_EXP 95
28794: PUSH
28795: LD_VAR 0 6
28799: ARRAY
28800: PUSH
28801: LD_VAR 0 5
28805: ARRAY
28806: PUSH
28807: LD_INT 1
28809: ARRAY
28810: PPUSH
28811: LD_EXP 95
28815: PUSH
28816: LD_VAR 0 6
28820: ARRAY
28821: PUSH
28822: LD_VAR 0 5
28826: ARRAY
28827: PUSH
28828: LD_INT 2
28830: ARRAY
28831: PPUSH
28832: LD_VAR 0 1
28836: PPUSH
28837: CALL_OW 255
28841: PPUSH
28842: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28846: LD_ADDR_EXP 95
28850: PUSH
28851: LD_EXP 95
28855: PPUSH
28856: LD_VAR 0 6
28860: PPUSH
28861: LD_EXP 95
28865: PUSH
28866: LD_VAR 0 6
28870: ARRAY
28871: PPUSH
28872: LD_VAR 0 5
28876: PPUSH
28877: CALL_OW 3
28881: PPUSH
28882: CALL_OW 1
28886: ST_TO_ADDR
// exit ;
28887: POP
28888: POP
28889: GO 29082
// end ; end ;
28891: GO 28731
28893: POP
28894: POP
// for i := minerMinesList [ index ] downto 1 do
28895: LD_ADDR_VAR 0 5
28899: PUSH
28900: DOUBLE
28901: LD_EXP 95
28905: PUSH
28906: LD_VAR 0 6
28910: ARRAY
28911: INC
28912: ST_TO_ADDR
28913: LD_INT 1
28915: PUSH
28916: FOR_DOWNTO
28917: IFFALSE 29080
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28919: LD_EXP 95
28923: PUSH
28924: LD_VAR 0 6
28928: ARRAY
28929: PUSH
28930: LD_VAR 0 5
28934: ARRAY
28935: PUSH
28936: LD_INT 1
28938: ARRAY
28939: PPUSH
28940: LD_EXP 95
28944: PUSH
28945: LD_VAR 0 6
28949: ARRAY
28950: PUSH
28951: LD_VAR 0 5
28955: ARRAY
28956: PUSH
28957: LD_INT 2
28959: ARRAY
28960: PPUSH
28961: LD_VAR 0 2
28965: PPUSH
28966: LD_VAR 0 3
28970: PPUSH
28971: CALL_OW 298
28975: PUSH
28976: LD_INT 6
28978: LESS
28979: IFFALSE 29078
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28981: LD_EXP 95
28985: PUSH
28986: LD_VAR 0 6
28990: ARRAY
28991: PUSH
28992: LD_VAR 0 5
28996: ARRAY
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: PPUSH
29002: LD_EXP 95
29006: PUSH
29007: LD_VAR 0 6
29011: ARRAY
29012: PUSH
29013: LD_VAR 0 5
29017: ARRAY
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: PPUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 255
29032: PPUSH
29033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29037: LD_ADDR_EXP 95
29041: PUSH
29042: LD_EXP 95
29046: PPUSH
29047: LD_VAR 0 6
29051: PPUSH
29052: LD_EXP 95
29056: PUSH
29057: LD_VAR 0 6
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 5
29067: PPUSH
29068: CALL_OW 3
29072: PPUSH
29073: CALL_OW 1
29077: ST_TO_ADDR
// end ; end ;
29078: GO 28916
29080: POP
29081: POP
// end ;
29082: LD_VAR 0 4
29086: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29087: LD_INT 0
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
29097: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29098: LD_VAR 0 1
29102: PPUSH
29103: CALL_OW 264
29107: PUSH
29108: LD_EXP 104
29112: EQUAL
29113: NOT
29114: PUSH
29115: LD_VAR 0 1
29119: PUSH
29120: LD_EXP 94
29124: IN
29125: NOT
29126: OR
29127: IFFALSE 29131
// exit ;
29129: GO 29453
// index := GetElementIndex ( minersList , unit ) ;
29131: LD_ADDR_VAR 0 6
29135: PUSH
29136: LD_EXP 94
29140: PPUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL 34962 0 2
29150: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29151: LD_ADDR_VAR 0 8
29155: PUSH
29156: LD_EXP 96
29160: PUSH
29161: LD_EXP 95
29165: PUSH
29166: LD_VAR 0 6
29170: ARRAY
29171: MINUS
29172: ST_TO_ADDR
// if not minesFreeAmount then
29173: LD_VAR 0 8
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29453
// tmp := [ ] ;
29182: LD_ADDR_VAR 0 7
29186: PUSH
29187: EMPTY
29188: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29189: LD_ADDR_VAR 0 5
29193: PUSH
29194: DOUBLE
29195: LD_INT 1
29197: DEC
29198: ST_TO_ADDR
29199: LD_VAR 0 8
29203: PUSH
29204: FOR_TO
29205: IFFALSE 29400
// begin _d := rand ( 0 , 5 ) ;
29207: LD_ADDR_VAR 0 11
29211: PUSH
29212: LD_INT 0
29214: PPUSH
29215: LD_INT 5
29217: PPUSH
29218: CALL_OW 12
29222: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29223: LD_ADDR_VAR 0 12
29227: PUSH
29228: LD_INT 2
29230: PPUSH
29231: LD_INT 6
29233: PPUSH
29234: CALL_OW 12
29238: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29239: LD_ADDR_VAR 0 9
29243: PUSH
29244: LD_VAR 0 2
29248: PPUSH
29249: LD_VAR 0 11
29253: PPUSH
29254: LD_VAR 0 12
29258: PPUSH
29259: CALL_OW 272
29263: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29264: LD_ADDR_VAR 0 10
29268: PUSH
29269: LD_VAR 0 3
29273: PPUSH
29274: LD_VAR 0 11
29278: PPUSH
29279: LD_VAR 0 12
29283: PPUSH
29284: CALL_OW 273
29288: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29289: LD_VAR 0 9
29293: PPUSH
29294: LD_VAR 0 10
29298: PPUSH
29299: CALL_OW 488
29303: PUSH
29304: LD_VAR 0 9
29308: PUSH
29309: LD_VAR 0 10
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_VAR 0 7
29322: IN
29323: NOT
29324: AND
29325: PUSH
29326: LD_VAR 0 9
29330: PPUSH
29331: LD_VAR 0 10
29335: PPUSH
29336: CALL_OW 458
29340: NOT
29341: AND
29342: IFFALSE 29384
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29344: LD_ADDR_VAR 0 7
29348: PUSH
29349: LD_VAR 0 7
29353: PPUSH
29354: LD_VAR 0 7
29358: PUSH
29359: LD_INT 1
29361: PLUS
29362: PPUSH
29363: LD_VAR 0 9
29367: PUSH
29368: LD_VAR 0 10
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
29382: GO 29398
// i := i - 1 ;
29384: LD_ADDR_VAR 0 5
29388: PUSH
29389: LD_VAR 0 5
29393: PUSH
29394: LD_INT 1
29396: MINUS
29397: ST_TO_ADDR
// end ;
29398: GO 29204
29400: POP
29401: POP
// for i in tmp do
29402: LD_ADDR_VAR 0 5
29406: PUSH
29407: LD_VAR 0 7
29411: PUSH
29412: FOR_IN
29413: IFFALSE 29451
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29415: LD_VAR 0 1
29419: PPUSH
29420: LD_VAR 0 5
29424: PUSH
29425: LD_INT 1
29427: ARRAY
29428: PPUSH
29429: LD_VAR 0 5
29433: PUSH
29434: LD_INT 2
29436: ARRAY
29437: PPUSH
29438: CALL 28393 0 3
29442: NOT
29443: IFFALSE 29449
// exit ;
29445: POP
29446: POP
29447: GO 29453
29449: GO 29412
29451: POP
29452: POP
// end ;
29453: LD_VAR 0 4
29457: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29458: LD_INT 0
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
// if not GetClass ( unit ) = class_sniper then
29467: LD_VAR 0 1
29471: PPUSH
29472: CALL_OW 257
29476: PUSH
29477: LD_INT 5
29479: EQUAL
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29873
// dist := 8 ;
29485: LD_ADDR_VAR 0 5
29489: PUSH
29490: LD_INT 8
29492: ST_TO_ADDR
// viewRange := 12 ;
29493: LD_ADDR_VAR 0 7
29497: PUSH
29498: LD_INT 12
29500: ST_TO_ADDR
// side := GetSide ( unit ) ;
29501: LD_ADDR_VAR 0 6
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 255
29515: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29516: LD_INT 61
29518: PPUSH
29519: LD_VAR 0 6
29523: PPUSH
29524: CALL_OW 321
29528: PUSH
29529: LD_INT 2
29531: EQUAL
29532: IFFALSE 29542
// viewRange := 16 ;
29534: LD_ADDR_VAR 0 7
29538: PUSH
29539: LD_INT 16
29541: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29542: LD_VAR 0 1
29546: PPUSH
29547: LD_VAR 0 2
29551: PPUSH
29552: LD_VAR 0 3
29556: PPUSH
29557: CALL_OW 297
29561: PUSH
29562: LD_VAR 0 5
29566: GREATER
29567: IFFALSE 29646
// begin ComMoveXY ( unit , x , y ) ;
29569: LD_VAR 0 1
29573: PPUSH
29574: LD_VAR 0 2
29578: PPUSH
29579: LD_VAR 0 3
29583: PPUSH
29584: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29588: LD_INT 35
29590: PPUSH
29591: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29595: LD_VAR 0 1
29599: PPUSH
29600: LD_VAR 0 2
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL 66248 0 3
29614: NOT
29615: IFFALSE 29619
// exit ;
29617: GO 29873
// until GetDistUnitXY ( unit , x , y ) < dist ;
29619: LD_VAR 0 1
29623: PPUSH
29624: LD_VAR 0 2
29628: PPUSH
29629: LD_VAR 0 3
29633: PPUSH
29634: CALL_OW 297
29638: PUSH
29639: LD_VAR 0 5
29643: LESS
29644: IFFALSE 29588
// end ; ComTurnXY ( unit , x , y ) ;
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_VAR 0 2
29655: PPUSH
29656: LD_VAR 0 3
29660: PPUSH
29661: CALL_OW 118
// wait ( 5 ) ;
29665: LD_INT 5
29667: PPUSH
29668: CALL_OW 67
// _d := GetDir ( unit ) ;
29672: LD_ADDR_VAR 0 10
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 254
29686: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29687: LD_ADDR_VAR 0 8
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 250
29701: PPUSH
29702: LD_VAR 0 10
29706: PPUSH
29707: LD_VAR 0 5
29711: PPUSH
29712: CALL_OW 272
29716: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29717: LD_ADDR_VAR 0 9
29721: PUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 251
29731: PPUSH
29732: LD_VAR 0 10
29736: PPUSH
29737: LD_VAR 0 5
29741: PPUSH
29742: CALL_OW 273
29746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29747: LD_VAR 0 8
29751: PPUSH
29752: LD_VAR 0 9
29756: PPUSH
29757: CALL_OW 488
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29873
// ComAnimCustom ( unit , 1 ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: LD_INT 1
29773: PPUSH
29774: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29778: LD_VAR 0 8
29782: PPUSH
29783: LD_VAR 0 9
29787: PPUSH
29788: LD_VAR 0 6
29792: PPUSH
29793: LD_VAR 0 7
29797: PPUSH
29798: CALL_OW 330
// repeat wait ( 1 ) ;
29802: LD_INT 1
29804: PPUSH
29805: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 316
29818: PUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 314
29828: OR
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 302
29839: NOT
29840: OR
29841: PUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 301
29851: OR
29852: IFFALSE 29802
// RemoveSeeing ( _x , _y , side ) ;
29854: LD_VAR 0 8
29858: PPUSH
29859: LD_VAR 0 9
29863: PPUSH
29864: LD_VAR 0 6
29868: PPUSH
29869: CALL_OW 331
// end ; end_of_file
29873: LD_VAR 0 4
29877: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
29878: LD_INT 0
29880: PPUSH
// ar_miner := 81 ;
29881: LD_ADDR_EXP 104
29885: PUSH
29886: LD_INT 81
29888: ST_TO_ADDR
// ar_crane := 88 ;
29889: LD_ADDR_EXP 103
29893: PUSH
29894: LD_INT 88
29896: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29897: LD_ADDR_EXP 98
29901: PUSH
29902: LD_INT 89
29904: ST_TO_ADDR
// us_hack := 99 ;
29905: LD_ADDR_EXP 99
29909: PUSH
29910: LD_INT 99
29912: ST_TO_ADDR
// us_artillery := 97 ;
29913: LD_ADDR_EXP 100
29917: PUSH
29918: LD_INT 97
29920: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29921: LD_ADDR_EXP 101
29925: PUSH
29926: LD_INT 91
29928: ST_TO_ADDR
// ar_mortar := 92 ;
29929: LD_ADDR_EXP 102
29933: PUSH
29934: LD_INT 92
29936: ST_TO_ADDR
// ru_flamethrower := 93 ;
29937: LD_ADDR_EXP 105
29941: PUSH
29942: LD_INT 93
29944: ST_TO_ADDR
// ru_radar := 98 ;
29945: LD_ADDR_EXP 97
29949: PUSH
29950: LD_INT 98
29952: ST_TO_ADDR
// tech_Artillery := 80 ;
29953: LD_ADDR_EXP 106
29957: PUSH
29958: LD_INT 80
29960: ST_TO_ADDR
// tech_RadMat := 81 ;
29961: LD_ADDR_EXP 107
29965: PUSH
29966: LD_INT 81
29968: ST_TO_ADDR
// tech_BasicTools := 82 ;
29969: LD_ADDR_EXP 108
29973: PUSH
29974: LD_INT 82
29976: ST_TO_ADDR
// tech_Cargo := 83 ;
29977: LD_ADDR_EXP 109
29981: PUSH
29982: LD_INT 83
29984: ST_TO_ADDR
// tech_Track := 84 ;
29985: LD_ADDR_EXP 110
29989: PUSH
29990: LD_INT 84
29992: ST_TO_ADDR
// tech_Crane := 85 ;
29993: LD_ADDR_EXP 111
29997: PUSH
29998: LD_INT 85
30000: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30001: LD_ADDR_EXP 112
30005: PUSH
30006: LD_INT 86
30008: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30009: LD_ADDR_EXP 113
30013: PUSH
30014: LD_INT 87
30016: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30017: LD_ADDR_EXP 114
30021: PUSH
30022: LD_INT 88
30024: ST_TO_ADDR
// end ;
30025: LD_VAR 0 1
30029: RET
// every 1 do
30030: GO 30032
30032: DISABLE
// InitGlobalVariables ; end_of_file
30033: CALL 29878 0 0
30037: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
// if exist_mode then
30042: LD_VAR 0 2
30046: IFFALSE 30071
// unit := CreateCharacter ( prefix & ident ) else
30048: LD_ADDR_VAR 0 5
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_VAR 0 1
30062: STR
30063: PPUSH
30064: CALL_OW 34
30068: ST_TO_ADDR
30069: GO 30086
// unit := NewCharacter ( ident ) ;
30071: LD_ADDR_VAR 0 5
30075: PUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: CALL_OW 25
30085: ST_TO_ADDR
// result := unit ;
30086: LD_ADDR_VAR 0 4
30090: PUSH
30091: LD_VAR 0 5
30095: ST_TO_ADDR
// end ;
30096: LD_VAR 0 4
30100: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30101: LD_INT 0
30103: PPUSH
30104: PPUSH
// if not side or not nation then
30105: LD_VAR 0 1
30109: NOT
30110: PUSH
30111: LD_VAR 0 2
30115: NOT
30116: OR
30117: IFFALSE 30121
// exit ;
30119: GO 30889
// case nation of nation_american :
30121: LD_VAR 0 2
30125: PUSH
30126: LD_INT 1
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30348
30134: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30135: LD_ADDR_VAR 0 4
30139: PUSH
30140: LD_INT 35
30142: PUSH
30143: LD_INT 45
30145: PUSH
30146: LD_INT 46
30148: PUSH
30149: LD_INT 47
30151: PUSH
30152: LD_INT 82
30154: PUSH
30155: LD_INT 83
30157: PUSH
30158: LD_INT 84
30160: PUSH
30161: LD_INT 85
30163: PUSH
30164: LD_INT 86
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: LD_INT 15
30178: PUSH
30179: LD_INT 16
30181: PUSH
30182: LD_INT 7
30184: PUSH
30185: LD_INT 12
30187: PUSH
30188: LD_INT 13
30190: PUSH
30191: LD_INT 10
30193: PUSH
30194: LD_INT 14
30196: PUSH
30197: LD_INT 20
30199: PUSH
30200: LD_INT 21
30202: PUSH
30203: LD_INT 22
30205: PUSH
30206: LD_INT 25
30208: PUSH
30209: LD_INT 32
30211: PUSH
30212: LD_INT 27
30214: PUSH
30215: LD_INT 36
30217: PUSH
30218: LD_INT 69
30220: PUSH
30221: LD_INT 39
30223: PUSH
30224: LD_INT 34
30226: PUSH
30227: LD_INT 40
30229: PUSH
30230: LD_INT 48
30232: PUSH
30233: LD_INT 49
30235: PUSH
30236: LD_INT 50
30238: PUSH
30239: LD_INT 51
30241: PUSH
30242: LD_INT 52
30244: PUSH
30245: LD_INT 53
30247: PUSH
30248: LD_INT 54
30250: PUSH
30251: LD_INT 55
30253: PUSH
30254: LD_INT 56
30256: PUSH
30257: LD_INT 57
30259: PUSH
30260: LD_INT 58
30262: PUSH
30263: LD_INT 59
30265: PUSH
30266: LD_INT 60
30268: PUSH
30269: LD_INT 61
30271: PUSH
30272: LD_INT 62
30274: PUSH
30275: LD_INT 80
30277: PUSH
30278: LD_INT 82
30280: PUSH
30281: LD_INT 83
30283: PUSH
30284: LD_INT 84
30286: PUSH
30287: LD_INT 85
30289: PUSH
30290: LD_INT 86
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
30346: GO 30813
30348: LD_INT 2
30350: DOUBLE
30351: EQUAL
30352: IFTRUE 30356
30354: GO 30582
30356: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: LD_INT 35
30364: PUSH
30365: LD_INT 45
30367: PUSH
30368: LD_INT 46
30370: PUSH
30371: LD_INT 47
30373: PUSH
30374: LD_INT 82
30376: PUSH
30377: LD_INT 83
30379: PUSH
30380: LD_INT 84
30382: PUSH
30383: LD_INT 85
30385: PUSH
30386: LD_INT 87
30388: PUSH
30389: LD_INT 70
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 11
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: LD_INT 4
30403: PUSH
30404: LD_INT 5
30406: PUSH
30407: LD_INT 6
30409: PUSH
30410: LD_INT 15
30412: PUSH
30413: LD_INT 18
30415: PUSH
30416: LD_INT 7
30418: PUSH
30419: LD_INT 17
30421: PUSH
30422: LD_INT 8
30424: PUSH
30425: LD_INT 20
30427: PUSH
30428: LD_INT 21
30430: PUSH
30431: LD_INT 22
30433: PUSH
30434: LD_INT 72
30436: PUSH
30437: LD_INT 26
30439: PUSH
30440: LD_INT 69
30442: PUSH
30443: LD_INT 39
30445: PUSH
30446: LD_INT 40
30448: PUSH
30449: LD_INT 41
30451: PUSH
30452: LD_INT 42
30454: PUSH
30455: LD_INT 43
30457: PUSH
30458: LD_INT 48
30460: PUSH
30461: LD_INT 49
30463: PUSH
30464: LD_INT 50
30466: PUSH
30467: LD_INT 51
30469: PUSH
30470: LD_INT 52
30472: PUSH
30473: LD_INT 53
30475: PUSH
30476: LD_INT 54
30478: PUSH
30479: LD_INT 55
30481: PUSH
30482: LD_INT 56
30484: PUSH
30485: LD_INT 60
30487: PUSH
30488: LD_INT 61
30490: PUSH
30491: LD_INT 62
30493: PUSH
30494: LD_INT 66
30496: PUSH
30497: LD_INT 67
30499: PUSH
30500: LD_INT 68
30502: PUSH
30503: LD_INT 81
30505: PUSH
30506: LD_INT 82
30508: PUSH
30509: LD_INT 83
30511: PUSH
30512: LD_INT 84
30514: PUSH
30515: LD_INT 85
30517: PUSH
30518: LD_INT 87
30520: PUSH
30521: LD_INT 88
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 30813
30582: LD_INT 3
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30812
30590: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30591: LD_ADDR_VAR 0 4
30595: PUSH
30596: LD_INT 46
30598: PUSH
30599: LD_INT 47
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 82
30610: PUSH
30611: LD_INT 83
30613: PUSH
30614: LD_INT 84
30616: PUSH
30617: LD_INT 85
30619: PUSH
30620: LD_INT 86
30622: PUSH
30623: LD_INT 11
30625: PUSH
30626: LD_INT 9
30628: PUSH
30629: LD_INT 20
30631: PUSH
30632: LD_INT 19
30634: PUSH
30635: LD_INT 21
30637: PUSH
30638: LD_INT 24
30640: PUSH
30641: LD_INT 22
30643: PUSH
30644: LD_INT 25
30646: PUSH
30647: LD_INT 28
30649: PUSH
30650: LD_INT 29
30652: PUSH
30653: LD_INT 30
30655: PUSH
30656: LD_INT 31
30658: PUSH
30659: LD_INT 37
30661: PUSH
30662: LD_INT 38
30664: PUSH
30665: LD_INT 32
30667: PUSH
30668: LD_INT 27
30670: PUSH
30671: LD_INT 33
30673: PUSH
30674: LD_INT 69
30676: PUSH
30677: LD_INT 39
30679: PUSH
30680: LD_INT 34
30682: PUSH
30683: LD_INT 40
30685: PUSH
30686: LD_INT 71
30688: PUSH
30689: LD_INT 23
30691: PUSH
30692: LD_INT 44
30694: PUSH
30695: LD_INT 48
30697: PUSH
30698: LD_INT 49
30700: PUSH
30701: LD_INT 50
30703: PUSH
30704: LD_INT 51
30706: PUSH
30707: LD_INT 52
30709: PUSH
30710: LD_INT 53
30712: PUSH
30713: LD_INT 54
30715: PUSH
30716: LD_INT 55
30718: PUSH
30719: LD_INT 56
30721: PUSH
30722: LD_INT 57
30724: PUSH
30725: LD_INT 58
30727: PUSH
30728: LD_INT 59
30730: PUSH
30731: LD_INT 63
30733: PUSH
30734: LD_INT 64
30736: PUSH
30737: LD_INT 65
30739: PUSH
30740: LD_INT 82
30742: PUSH
30743: LD_INT 83
30745: PUSH
30746: LD_INT 84
30748: PUSH
30749: LD_INT 85
30751: PUSH
30752: LD_INT 86
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
30810: GO 30813
30812: POP
// if state > - 1 and state < 3 then
30813: LD_VAR 0 3
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: GREATER
30822: PUSH
30823: LD_VAR 0 3
30827: PUSH
30828: LD_INT 3
30830: LESS
30831: AND
30832: IFFALSE 30889
// for i in result do
30834: LD_ADDR_VAR 0 5
30838: PUSH
30839: LD_VAR 0 4
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30887
// if GetTech ( i , side ) <> state then
30847: LD_VAR 0 5
30851: PPUSH
30852: LD_VAR 0 1
30856: PPUSH
30857: CALL_OW 321
30861: PUSH
30862: LD_VAR 0 3
30866: NONEQUAL
30867: IFFALSE 30885
// result := result diff i ;
30869: LD_ADDR_VAR 0 4
30873: PUSH
30874: LD_VAR 0 4
30878: PUSH
30879: LD_VAR 0 5
30883: DIFF
30884: ST_TO_ADDR
30885: GO 30844
30887: POP
30888: POP
// end ;
30889: LD_VAR 0 4
30893: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
30898: PPUSH
// result := true ;
30899: LD_ADDR_VAR 0 3
30903: PUSH
30904: LD_INT 1
30906: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30907: LD_ADDR_VAR 0 5
30911: PUSH
30912: LD_VAR 0 2
30916: PPUSH
30917: CALL_OW 480
30921: ST_TO_ADDR
// if not tmp then
30922: LD_VAR 0 5
30926: NOT
30927: IFFALSE 30931
// exit ;
30929: GO 30980
// for i in tmp do
30931: LD_ADDR_VAR 0 4
30935: PUSH
30936: LD_VAR 0 5
30940: PUSH
30941: FOR_IN
30942: IFFALSE 30978
// if GetTech ( i , side ) <> state_researched then
30944: LD_VAR 0 4
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 321
30958: PUSH
30959: LD_INT 2
30961: NONEQUAL
30962: IFFALSE 30976
// begin result := false ;
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_INT 0
30971: ST_TO_ADDR
// exit ;
30972: POP
30973: POP
30974: GO 30980
// end ;
30976: GO 30941
30978: POP
30979: POP
// end ;
30980: LD_VAR 0 3
30984: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31000: LD_VAR 0 1
31004: NOT
31005: PUSH
31006: LD_VAR 0 1
31010: PPUSH
31011: CALL_OW 257
31015: PUSH
31016: LD_INT 9
31018: NONEQUAL
31019: OR
31020: IFFALSE 31024
// exit ;
31022: GO 31597
// side := GetSide ( unit ) ;
31024: LD_ADDR_VAR 0 9
31028: PUSH
31029: LD_VAR 0 1
31033: PPUSH
31034: CALL_OW 255
31038: ST_TO_ADDR
// tech_space := tech_spacanom ;
31039: LD_ADDR_VAR 0 12
31043: PUSH
31044: LD_INT 29
31046: ST_TO_ADDR
// tech_time := tech_taurad ;
31047: LD_ADDR_VAR 0 13
31051: PUSH
31052: LD_INT 28
31054: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31055: LD_ADDR_VAR 0 11
31059: PUSH
31060: LD_VAR 0 1
31064: PPUSH
31065: CALL_OW 310
31069: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31070: LD_VAR 0 11
31074: PPUSH
31075: CALL_OW 247
31079: PUSH
31080: LD_INT 2
31082: EQUAL
31083: IFFALSE 31087
// exit ;
31085: GO 31597
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31087: LD_ADDR_VAR 0 8
31091: PUSH
31092: LD_INT 81
31094: PUSH
31095: LD_VAR 0 9
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 21
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: ST_TO_ADDR
// if not tmp then
31130: LD_VAR 0 8
31134: NOT
31135: IFFALSE 31139
// exit ;
31137: GO 31597
// if in_unit then
31139: LD_VAR 0 11
31143: IFFALSE 31167
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31145: LD_ADDR_VAR 0 10
31149: PUSH
31150: LD_VAR 0 8
31154: PPUSH
31155: LD_VAR 0 11
31159: PPUSH
31160: CALL_OW 74
31164: ST_TO_ADDR
31165: GO 31187
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31167: LD_ADDR_VAR 0 10
31171: PUSH
31172: LD_VAR 0 8
31176: PPUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 74
31186: ST_TO_ADDR
// if not enemy then
31187: LD_VAR 0 10
31191: NOT
31192: IFFALSE 31196
// exit ;
31194: GO 31597
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31196: LD_VAR 0 11
31200: PUSH
31201: LD_VAR 0 11
31205: PPUSH
31206: LD_VAR 0 10
31210: PPUSH
31211: CALL_OW 296
31215: PUSH
31216: LD_INT 13
31218: GREATER
31219: AND
31220: PUSH
31221: LD_VAR 0 1
31225: PPUSH
31226: LD_VAR 0 10
31230: PPUSH
31231: CALL_OW 296
31235: PUSH
31236: LD_INT 12
31238: GREATER
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 31597
// missile := [ 1 ] ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31255: LD_VAR 0 9
31259: PPUSH
31260: LD_VAR 0 12
31264: PPUSH
31265: CALL_OW 325
31269: IFFALSE 31298
// missile := Replace ( missile , missile + 1 , 2 ) ;
31271: LD_ADDR_VAR 0 14
31275: PUSH
31276: LD_VAR 0 14
31280: PPUSH
31281: LD_VAR 0 14
31285: PUSH
31286: LD_INT 1
31288: PLUS
31289: PPUSH
31290: LD_INT 2
31292: PPUSH
31293: CALL_OW 1
31297: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31298: LD_VAR 0 9
31302: PPUSH
31303: LD_VAR 0 13
31307: PPUSH
31308: CALL_OW 325
31312: PUSH
31313: LD_VAR 0 10
31317: PPUSH
31318: CALL_OW 255
31322: PPUSH
31323: LD_VAR 0 13
31327: PPUSH
31328: CALL_OW 325
31332: NOT
31333: AND
31334: IFFALSE 31363
// missile := Replace ( missile , missile + 1 , 3 ) ;
31336: LD_ADDR_VAR 0 14
31340: PUSH
31341: LD_VAR 0 14
31345: PPUSH
31346: LD_VAR 0 14
31350: PUSH
31351: LD_INT 1
31353: PLUS
31354: PPUSH
31355: LD_INT 3
31357: PPUSH
31358: CALL_OW 1
31362: ST_TO_ADDR
// if missile < 2 then
31363: LD_VAR 0 14
31367: PUSH
31368: LD_INT 2
31370: LESS
31371: IFFALSE 31375
// exit ;
31373: GO 31597
// x := GetX ( enemy ) ;
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_VAR 0 10
31384: PPUSH
31385: CALL_OW 250
31389: ST_TO_ADDR
// y := GetY ( enemy ) ;
31390: LD_ADDR_VAR 0 5
31394: PUSH
31395: LD_VAR 0 10
31399: PPUSH
31400: CALL_OW 251
31404: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31405: LD_ADDR_VAR 0 6
31409: PUSH
31410: LD_VAR 0 4
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PPUSH
31419: LD_INT 1
31421: PPUSH
31422: CALL_OW 12
31426: PLUS
31427: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31428: LD_ADDR_VAR 0 7
31432: PUSH
31433: LD_VAR 0 5
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PPUSH
31442: LD_INT 1
31444: PPUSH
31445: CALL_OW 12
31449: PLUS
31450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31451: LD_VAR 0 6
31455: PPUSH
31456: LD_VAR 0 7
31460: PPUSH
31461: CALL_OW 488
31465: NOT
31466: IFFALSE 31488
// begin _x := x ;
31468: LD_ADDR_VAR 0 6
31472: PUSH
31473: LD_VAR 0 4
31477: ST_TO_ADDR
// _y := y ;
31478: LD_ADDR_VAR 0 7
31482: PUSH
31483: LD_VAR 0 5
31487: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31488: LD_ADDR_VAR 0 3
31492: PUSH
31493: LD_INT 1
31495: PPUSH
31496: LD_VAR 0 14
31500: PPUSH
31501: CALL_OW 12
31505: ST_TO_ADDR
// case i of 1 :
31506: LD_VAR 0 3
31510: PUSH
31511: LD_INT 1
31513: DOUBLE
31514: EQUAL
31515: IFTRUE 31519
31517: GO 31536
31519: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31520: LD_VAR 0 1
31524: PPUSH
31525: LD_VAR 0 10
31529: PPUSH
31530: CALL_OW 115
31534: GO 31597
31536: LD_INT 2
31538: DOUBLE
31539: EQUAL
31540: IFTRUE 31544
31542: GO 31566
31544: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31545: LD_VAR 0 1
31549: PPUSH
31550: LD_VAR 0 6
31554: PPUSH
31555: LD_VAR 0 7
31559: PPUSH
31560: CALL_OW 153
31564: GO 31597
31566: LD_INT 3
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31596
31574: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31575: LD_VAR 0 1
31579: PPUSH
31580: LD_VAR 0 6
31584: PPUSH
31585: LD_VAR 0 7
31589: PPUSH
31590: CALL_OW 154
31594: GO 31597
31596: POP
// end ;
31597: LD_VAR 0 2
31601: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31602: LD_INT 0
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
31609: PPUSH
// if not unit or not building then
31610: LD_VAR 0 1
31614: NOT
31615: PUSH
31616: LD_VAR 0 2
31620: NOT
31621: OR
31622: IFFALSE 31626
// exit ;
31624: GO 31784
// x := GetX ( building ) ;
31626: LD_ADDR_VAR 0 5
31630: PUSH
31631: LD_VAR 0 2
31635: PPUSH
31636: CALL_OW 250
31640: ST_TO_ADDR
// y := GetY ( building ) ;
31641: LD_ADDR_VAR 0 6
31645: PUSH
31646: LD_VAR 0 2
31650: PPUSH
31651: CALL_OW 251
31655: ST_TO_ADDR
// for i = 0 to 5 do
31656: LD_ADDR_VAR 0 4
31660: PUSH
31661: DOUBLE
31662: LD_INT 0
31664: DEC
31665: ST_TO_ADDR
31666: LD_INT 5
31668: PUSH
31669: FOR_TO
31670: IFFALSE 31782
// begin _x := ShiftX ( x , i , 3 ) ;
31672: LD_ADDR_VAR 0 7
31676: PUSH
31677: LD_VAR 0 5
31681: PPUSH
31682: LD_VAR 0 4
31686: PPUSH
31687: LD_INT 3
31689: PPUSH
31690: CALL_OW 272
31694: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31695: LD_ADDR_VAR 0 8
31699: PUSH
31700: LD_VAR 0 6
31704: PPUSH
31705: LD_VAR 0 4
31709: PPUSH
31710: LD_INT 3
31712: PPUSH
31713: CALL_OW 273
31717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31718: LD_VAR 0 7
31722: PPUSH
31723: LD_VAR 0 8
31727: PPUSH
31728: CALL_OW 488
31732: NOT
31733: IFFALSE 31737
// continue ;
31735: GO 31669
// if HexInfo ( _x , _y ) = 0 then
31737: LD_VAR 0 7
31741: PPUSH
31742: LD_VAR 0 8
31746: PPUSH
31747: CALL_OW 428
31751: PUSH
31752: LD_INT 0
31754: EQUAL
31755: IFFALSE 31780
// begin ComMoveXY ( unit , _x , _y ) ;
31757: LD_VAR 0 1
31761: PPUSH
31762: LD_VAR 0 7
31766: PPUSH
31767: LD_VAR 0 8
31771: PPUSH
31772: CALL_OW 111
// exit ;
31776: POP
31777: POP
31778: GO 31784
// end ; end ;
31780: GO 31669
31782: POP
31783: POP
// end ;
31784: LD_VAR 0 3
31788: RET
// export function ScanBase ( side , base_area ) ; begin
31789: LD_INT 0
31791: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31792: LD_ADDR_VAR 0 3
31796: PUSH
31797: LD_VAR 0 2
31801: PPUSH
31802: LD_INT 81
31804: PUSH
31805: LD_VAR 0 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PPUSH
31814: CALL_OW 70
31818: ST_TO_ADDR
// end ;
31819: LD_VAR 0 3
31823: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31824: LD_INT 0
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
// result := false ;
31830: LD_ADDR_VAR 0 2
31834: PUSH
31835: LD_INT 0
31837: ST_TO_ADDR
// side := GetSide ( unit ) ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL_OW 255
31852: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 248
31867: ST_TO_ADDR
// case nat of 1 :
31868: LD_VAR 0 4
31872: PUSH
31873: LD_INT 1
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31892
31881: POP
// tech := tech_lassight ; 2 :
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: LD_INT 12
31889: ST_TO_ADDR
31890: GO 31931
31892: LD_INT 2
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31911
31900: POP
// tech := tech_mortar ; 3 :
31901: LD_ADDR_VAR 0 5
31905: PUSH
31906: LD_INT 41
31908: ST_TO_ADDR
31909: GO 31931
31911: LD_INT 3
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31919
31917: GO 31930
31919: POP
// tech := tech_bazooka ; end ;
31920: LD_ADDR_VAR 0 5
31924: PUSH
31925: LD_INT 44
31927: ST_TO_ADDR
31928: GO 31931
31930: POP
// if Researched ( side , tech ) then
31931: LD_VAR 0 3
31935: PPUSH
31936: LD_VAR 0 5
31940: PPUSH
31941: CALL_OW 325
31945: IFFALSE 31972
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31947: LD_ADDR_VAR 0 2
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 8
31957: PUSH
31958: LD_INT 9
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: PUSH
31966: LD_VAR 0 4
31970: ARRAY
31971: ST_TO_ADDR
// end ;
31972: LD_VAR 0 2
31976: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31977: LD_INT 0
31979: PPUSH
31980: PPUSH
31981: PPUSH
// if not mines then
31982: LD_VAR 0 2
31986: NOT
31987: IFFALSE 31991
// exit ;
31989: GO 32135
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31991: LD_ADDR_VAR 0 5
31995: PUSH
31996: LD_INT 81
31998: PUSH
31999: LD_VAR 0 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: LD_INT 21
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 69
32033: ST_TO_ADDR
// for i in mines do
32034: LD_ADDR_VAR 0 4
32038: PUSH
32039: LD_VAR 0 2
32043: PUSH
32044: FOR_IN
32045: IFFALSE 32133
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32047: LD_VAR 0 4
32051: PUSH
32052: LD_INT 1
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 4
32060: PUSH
32061: LD_INT 2
32063: ARRAY
32064: PPUSH
32065: CALL_OW 458
32069: NOT
32070: IFFALSE 32074
// continue ;
32072: GO 32044
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32074: LD_VAR 0 4
32078: PUSH
32079: LD_INT 1
32081: ARRAY
32082: PPUSH
32083: LD_VAR 0 4
32087: PUSH
32088: LD_INT 2
32090: ARRAY
32091: PPUSH
32092: CALL_OW 428
32096: PUSH
32097: LD_VAR 0 5
32101: IN
32102: IFFALSE 32131
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32104: LD_VAR 0 4
32108: PUSH
32109: LD_INT 1
32111: ARRAY
32112: PPUSH
32113: LD_VAR 0 4
32117: PUSH
32118: LD_INT 2
32120: ARRAY
32121: PPUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 456
// end ;
32131: GO 32044
32133: POP
32134: POP
// end ;
32135: LD_VAR 0 3
32139: RET
// export function Count ( array ) ; var i ; begin
32140: LD_INT 0
32142: PPUSH
32143: PPUSH
// result := 0 ;
32144: LD_ADDR_VAR 0 2
32148: PUSH
32149: LD_INT 0
32151: ST_TO_ADDR
// for i in array do
32152: LD_ADDR_VAR 0 3
32156: PUSH
32157: LD_VAR 0 1
32161: PUSH
32162: FOR_IN
32163: IFFALSE 32187
// if i then
32165: LD_VAR 0 3
32169: IFFALSE 32185
// result := result + 1 ;
32171: LD_ADDR_VAR 0 2
32175: PUSH
32176: LD_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: PLUS
32184: ST_TO_ADDR
32185: GO 32162
32187: POP
32188: POP
// end ;
32189: LD_VAR 0 2
32193: RET
// export function IsEmpty ( building ) ; begin
32194: LD_INT 0
32196: PPUSH
// if not building then
32197: LD_VAR 0 1
32201: NOT
32202: IFFALSE 32206
// exit ;
32204: GO 32249
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32206: LD_ADDR_VAR 0 2
32210: PUSH
32211: LD_VAR 0 1
32215: PUSH
32216: LD_INT 22
32218: PUSH
32219: LD_VAR 0 1
32223: PPUSH
32224: CALL_OW 255
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 58
32235: PUSH
32236: EMPTY
32237: LIST
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PPUSH
32243: CALL_OW 69
32247: IN
32248: ST_TO_ADDR
// end ;
32249: LD_VAR 0 2
32253: RET
// export function IsNotFull ( building ) ; var places ; begin
32254: LD_INT 0
32256: PPUSH
32257: PPUSH
// if not building then
32258: LD_VAR 0 1
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32438
// result := false ;
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_INT 0
32274: ST_TO_ADDR
// places := 0 ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_INT 0
32282: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 266
32292: PUSH
32293: LD_INT 0
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32355
32299: LD_INT 1
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32355
32305: LD_INT 6
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32355
32311: LD_INT 7
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32355
32317: LD_INT 8
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32355
32323: LD_INT 4
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32355
32329: LD_INT 5
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32355
32335: LD_INT 2
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32355
32341: LD_INT 3
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32355
32347: LD_INT 35
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32366
32355: POP
// places := 6 ; b_bunker , b_breastwork :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 6
32363: ST_TO_ADDR
32364: GO 32411
32366: LD_INT 32
32368: DOUBLE
32369: EQUAL
32370: IFTRUE 32380
32372: LD_INT 31
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32380
32378: GO 32391
32380: POP
// places := 1 ; b_control_tower :
32381: LD_ADDR_VAR 0 3
32385: PUSH
32386: LD_INT 1
32388: ST_TO_ADDR
32389: GO 32411
32391: LD_INT 36
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32410
32399: POP
// places := 3 ; end ;
32400: LD_ADDR_VAR 0 3
32404: PUSH
32405: LD_INT 3
32407: ST_TO_ADDR
32408: GO 32411
32410: POP
// if places then
32411: LD_VAR 0 3
32415: IFFALSE 32438
// result := UnitsInside ( building ) < places ;
32417: LD_ADDR_VAR 0 2
32421: PUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 313
32431: PUSH
32432: LD_VAR 0 3
32436: LESS
32437: ST_TO_ADDR
// end ;
32438: LD_VAR 0 2
32442: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
// tmp := [ ] ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: EMPTY
32455: ST_TO_ADDR
// list := [ ] ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: EMPTY
32462: ST_TO_ADDR
// for i = 16 to 25 do
32463: LD_ADDR_VAR 0 4
32467: PUSH
32468: DOUBLE
32469: LD_INT 16
32471: DEC
32472: ST_TO_ADDR
32473: LD_INT 25
32475: PUSH
32476: FOR_TO
32477: IFFALSE 32550
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_VAR 0 3
32488: PUSH
32489: LD_INT 22
32491: PUSH
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 255
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 91
32508: PUSH
32509: LD_VAR 0 1
32513: PUSH
32514: LD_INT 6
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 30
32524: PUSH
32525: LD_VAR 0 4
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: PUSH
32539: EMPTY
32540: LIST
32541: PPUSH
32542: CALL_OW 69
32546: ADD
32547: ST_TO_ADDR
32548: GO 32476
32550: POP
32551: POP
// for i = 1 to tmp do
32552: LD_ADDR_VAR 0 4
32556: PUSH
32557: DOUBLE
32558: LD_INT 1
32560: DEC
32561: ST_TO_ADDR
32562: LD_VAR 0 3
32566: PUSH
32567: FOR_TO
32568: IFFALSE 32656
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32570: LD_ADDR_VAR 0 5
32574: PUSH
32575: LD_VAR 0 5
32579: PUSH
32580: LD_VAR 0 3
32584: PUSH
32585: LD_VAR 0 4
32589: ARRAY
32590: PPUSH
32591: CALL_OW 266
32595: PUSH
32596: LD_VAR 0 3
32600: PUSH
32601: LD_VAR 0 4
32605: ARRAY
32606: PPUSH
32607: CALL_OW 250
32611: PUSH
32612: LD_VAR 0 3
32616: PUSH
32617: LD_VAR 0 4
32621: ARRAY
32622: PPUSH
32623: CALL_OW 251
32627: PUSH
32628: LD_VAR 0 3
32632: PUSH
32633: LD_VAR 0 4
32637: ARRAY
32638: PPUSH
32639: CALL_OW 254
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: PUSH
32650: EMPTY
32651: LIST
32652: ADD
32653: ST_TO_ADDR
32654: GO 32567
32656: POP
32657: POP
// result := list ;
32658: LD_ADDR_VAR 0 2
32662: PUSH
32663: LD_VAR 0 5
32667: ST_TO_ADDR
// end ;
32668: LD_VAR 0 2
32672: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32673: LD_INT 0
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
// if not factory then
32682: LD_VAR 0 1
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 33284
// if control = control_apeman then
32691: LD_VAR 0 4
32695: PUSH
32696: LD_INT 5
32698: EQUAL
32699: IFFALSE 32808
// begin tmp := UnitsInside ( factory ) ;
32701: LD_ADDR_VAR 0 8
32705: PUSH
32706: LD_VAR 0 1
32710: PPUSH
32711: CALL_OW 313
32715: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32716: LD_VAR 0 8
32720: PPUSH
32721: LD_INT 25
32723: PUSH
32724: LD_INT 12
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 72
32735: NOT
32736: IFFALSE 32746
// control := control_manual ;
32738: LD_ADDR_VAR 0 4
32742: PUSH
32743: LD_INT 1
32745: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32746: LD_ADDR_VAR 0 8
32750: PUSH
32751: LD_VAR 0 1
32755: PPUSH
32756: CALL 32443 0 1
32760: ST_TO_ADDR
// if tmp then
32761: LD_VAR 0 8
32765: IFFALSE 32808
// begin for i in tmp do
32767: LD_ADDR_VAR 0 7
32771: PUSH
32772: LD_VAR 0 8
32776: PUSH
32777: FOR_IN
32778: IFFALSE 32806
// if i [ 1 ] = b_ext_radio then
32780: LD_VAR 0 7
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: PUSH
32789: LD_INT 22
32791: EQUAL
32792: IFFALSE 32804
// begin control := control_remote ;
32794: LD_ADDR_VAR 0 4
32798: PUSH
32799: LD_INT 2
32801: ST_TO_ADDR
// break ;
32802: GO 32806
// end ;
32804: GO 32777
32806: POP
32807: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32808: LD_VAR 0 1
32812: PPUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: LD_VAR 0 3
32822: PPUSH
32823: LD_VAR 0 4
32827: PPUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: CALL_OW 448
32837: IFFALSE 32872
// begin result := [ chassis , engine , control , weapon ] ;
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 2
32848: PUSH
32849: LD_VAR 0 3
32853: PUSH
32854: LD_VAR 0 4
32858: PUSH
32859: LD_VAR 0 5
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// exit ;
32870: GO 33284
// end ; _chassis := AvailableChassisList ( factory ) ;
32872: LD_ADDR_VAR 0 9
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 475
32886: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32887: LD_ADDR_VAR 0 11
32891: PUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 476
32901: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32902: LD_ADDR_VAR 0 12
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 477
32916: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32917: LD_ADDR_VAR 0 10
32921: PUSH
32922: LD_VAR 0 1
32926: PPUSH
32927: CALL_OW 478
32931: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32932: LD_VAR 0 9
32936: NOT
32937: PUSH
32938: LD_VAR 0 11
32942: NOT
32943: OR
32944: PUSH
32945: LD_VAR 0 12
32949: NOT
32950: OR
32951: PUSH
32952: LD_VAR 0 10
32956: NOT
32957: OR
32958: IFFALSE 32993
// begin result := [ chassis , engine , control , weapon ] ;
32960: LD_ADDR_VAR 0 6
32964: PUSH
32965: LD_VAR 0 2
32969: PUSH
32970: LD_VAR 0 3
32974: PUSH
32975: LD_VAR 0 4
32979: PUSH
32980: LD_VAR 0 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// exit ;
32991: GO 33284
// end ; if not chassis in _chassis then
32993: LD_VAR 0 2
32997: PUSH
32998: LD_VAR 0 9
33002: IN
33003: NOT
33004: IFFALSE 33030
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_VAR 0 9
33015: PUSH
33016: LD_INT 1
33018: PPUSH
33019: LD_VAR 0 9
33023: PPUSH
33024: CALL_OW 12
33028: ARRAY
33029: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33030: LD_VAR 0 2
33034: PPUSH
33035: LD_VAR 0 3
33039: PPUSH
33040: CALL 33289 0 2
33044: NOT
33045: IFFALSE 33104
// repeat engine := _engine [ 1 ] ;
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_VAR 0 11
33056: PUSH
33057: LD_INT 1
33059: ARRAY
33060: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33061: LD_ADDR_VAR 0 11
33065: PUSH
33066: LD_VAR 0 11
33070: PPUSH
33071: LD_INT 1
33073: PPUSH
33074: CALL_OW 3
33078: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33079: LD_VAR 0 2
33083: PPUSH
33084: LD_VAR 0 3
33088: PPUSH
33089: CALL 33289 0 2
33093: PUSH
33094: LD_VAR 0 11
33098: PUSH
33099: EMPTY
33100: EQUAL
33101: OR
33102: IFFALSE 33047
// if not control in _control then
33104: LD_VAR 0 4
33108: PUSH
33109: LD_VAR 0 12
33113: IN
33114: NOT
33115: IFFALSE 33141
// control := _control [ rand ( 1 , _control ) ] ;
33117: LD_ADDR_VAR 0 4
33121: PUSH
33122: LD_VAR 0 12
33126: PUSH
33127: LD_INT 1
33129: PPUSH
33130: LD_VAR 0 12
33134: PPUSH
33135: CALL_OW 12
33139: ARRAY
33140: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33141: LD_VAR 0 2
33145: PPUSH
33146: LD_VAR 0 5
33150: PPUSH
33151: CALL 33509 0 2
33155: NOT
33156: IFFALSE 33215
// repeat weapon := _weapon [ 1 ] ;
33158: LD_ADDR_VAR 0 5
33162: PUSH
33163: LD_VAR 0 10
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33172: LD_ADDR_VAR 0 10
33176: PUSH
33177: LD_VAR 0 10
33181: PPUSH
33182: LD_INT 1
33184: PPUSH
33185: CALL_OW 3
33189: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33190: LD_VAR 0 2
33194: PPUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: CALL 33509 0 2
33204: PUSH
33205: LD_VAR 0 10
33209: PUSH
33210: EMPTY
33211: EQUAL
33212: OR
33213: IFFALSE 33158
// result := [ ] ;
33215: LD_ADDR_VAR 0 6
33219: PUSH
33220: EMPTY
33221: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33222: LD_VAR 0 1
33226: PPUSH
33227: LD_VAR 0 2
33231: PPUSH
33232: LD_VAR 0 3
33236: PPUSH
33237: LD_VAR 0 4
33241: PPUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: CALL_OW 448
33251: IFFALSE 33284
// result := [ chassis , engine , control , weapon ] ;
33253: LD_ADDR_VAR 0 6
33257: PUSH
33258: LD_VAR 0 2
33262: PUSH
33263: LD_VAR 0 3
33267: PUSH
33268: LD_VAR 0 4
33272: PUSH
33273: LD_VAR 0 5
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// end ;
33284: LD_VAR 0 6
33288: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33289: LD_INT 0
33291: PPUSH
// if not chassis or not engine then
33292: LD_VAR 0 1
33296: NOT
33297: PUSH
33298: LD_VAR 0 2
33302: NOT
33303: OR
33304: IFFALSE 33308
// exit ;
33306: GO 33504
// case engine of engine_solar :
33308: LD_VAR 0 2
33312: PUSH
33313: LD_INT 2
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33359
33321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 11
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: LD_INT 13
33335: PUSH
33336: LD_INT 14
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: ST_TO_ADDR
33357: GO 33488
33359: LD_INT 1
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33429
33367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33368: LD_ADDR_VAR 0 3
33372: PUSH
33373: LD_INT 11
33375: PUSH
33376: LD_INT 12
33378: PUSH
33379: LD_INT 13
33381: PUSH
33382: LD_INT 14
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 4
33396: PUSH
33397: LD_INT 5
33399: PUSH
33400: LD_INT 21
33402: PUSH
33403: LD_INT 23
33405: PUSH
33406: LD_INT 22
33408: PUSH
33409: LD_INT 24
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 33488
33429: LD_INT 3
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33487
33437: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: LD_INT 4
33457: PUSH
33458: LD_INT 5
33460: PUSH
33461: LD_INT 21
33463: PUSH
33464: LD_INT 22
33466: PUSH
33467: LD_INT 23
33469: PUSH
33470: LD_INT 24
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
33485: GO 33488
33487: POP
// result := ( chassis in result ) ;
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_VAR 0 1
33497: PUSH
33498: LD_VAR 0 3
33502: IN
33503: ST_TO_ADDR
// end ;
33504: LD_VAR 0 3
33508: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33509: LD_INT 0
33511: PPUSH
// if not chassis or not weapon then
33512: LD_VAR 0 1
33516: NOT
33517: PUSH
33518: LD_VAR 0 2
33522: NOT
33523: OR
33524: IFFALSE 33528
// exit ;
33526: GO 34590
// case weapon of us_machine_gun :
33528: LD_VAR 0 2
33532: PUSH
33533: LD_INT 2
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33571
33541: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: ST_TO_ADDR
33569: GO 34574
33571: LD_INT 3
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33609
33579: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
33607: GO 34574
33609: LD_INT 11
33611: DOUBLE
33612: EQUAL
33613: IFTRUE 33617
33615: GO 33647
33617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 4
33634: PUSH
33635: LD_INT 5
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 34574
33647: LD_INT 4
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33681
33655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
33679: GO 34574
33681: LD_INT 5
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33715
33689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: LD_INT 4
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
33713: GO 34574
33715: LD_INT 9
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33749
33723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: LD_INT 5
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
33747: GO 34574
33749: LD_INT 7
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33783
33757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
33781: GO 34574
33783: LD_INT 12
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33817
33791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
33815: GO 34574
33817: LD_INT 13
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 33851
33825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33826: LD_ADDR_VAR 0 3
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 4
33839: PUSH
33840: LD_INT 5
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: ST_TO_ADDR
33849: GO 34574
33851: LD_INT 14
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33877
33859: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33860: LD_ADDR_VAR 0 3
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: ST_TO_ADDR
33875: GO 34574
33877: LD_INT 6
33879: DOUBLE
33880: EQUAL
33881: IFTRUE 33885
33883: GO 33903
33885: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_INT 4
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: ST_TO_ADDR
33901: GO 34574
33903: LD_INT 10
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33911
33909: GO 33929
33911: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33912: LD_ADDR_VAR 0 3
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34574
33929: LD_INT 22
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33963
33937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_INT 11
33945: PUSH
33946: LD_INT 12
33948: PUSH
33949: LD_INT 13
33951: PUSH
33952: LD_INT 14
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
33961: GO 34574
33963: LD_INT 23
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 33997
33971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_INT 11
33979: PUSH
33980: LD_INT 12
33982: PUSH
33983: LD_INT 13
33985: PUSH
33986: LD_INT 14
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: ST_TO_ADDR
33995: GO 34574
33997: LD_INT 24
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34031
34005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_INT 11
34013: PUSH
34014: LD_INT 12
34016: PUSH
34017: LD_INT 13
34019: PUSH
34020: LD_INT 14
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
34029: GO 34574
34031: LD_INT 30
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34065
34039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_INT 11
34047: PUSH
34048: LD_INT 12
34050: PUSH
34051: LD_INT 13
34053: PUSH
34054: LD_INT 14
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: ST_TO_ADDR
34063: GO 34574
34065: LD_INT 25
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34073
34071: GO 34091
34073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34074: LD_ADDR_VAR 0 3
34078: PUSH
34079: LD_INT 13
34081: PUSH
34082: LD_INT 14
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34574
34091: LD_INT 27
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34117
34099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 13
34107: PUSH
34108: LD_INT 14
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34574
34117: LD_EXP 102
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34153
34127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34128: LD_ADDR_VAR 0 3
34132: PUSH
34133: LD_INT 11
34135: PUSH
34136: LD_INT 12
34138: PUSH
34139: LD_INT 13
34141: PUSH
34142: LD_INT 14
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: ST_TO_ADDR
34151: GO 34574
34153: LD_INT 28
34155: DOUBLE
34156: EQUAL
34157: IFTRUE 34161
34159: GO 34179
34161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34162: LD_ADDR_VAR 0 3
34166: PUSH
34167: LD_INT 13
34169: PUSH
34170: LD_INT 14
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: ST_TO_ADDR
34177: GO 34574
34179: LD_INT 29
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34205
34187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_INT 13
34195: PUSH
34196: LD_INT 14
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: ST_TO_ADDR
34203: GO 34574
34205: LD_INT 31
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34231
34213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_INT 13
34221: PUSH
34222: LD_INT 14
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: ST_TO_ADDR
34229: GO 34574
34231: LD_INT 26
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34257
34239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34240: LD_ADDR_VAR 0 3
34244: PUSH
34245: LD_INT 13
34247: PUSH
34248: LD_INT 14
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: ST_TO_ADDR
34255: GO 34574
34257: LD_INT 42
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34291
34265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34266: LD_ADDR_VAR 0 3
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 22
34276: PUSH
34277: LD_INT 23
34279: PUSH
34280: LD_INT 24
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: ST_TO_ADDR
34289: GO 34574
34291: LD_INT 43
34293: DOUBLE
34294: EQUAL
34295: IFTRUE 34299
34297: GO 34325
34299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: LD_INT 21
34307: PUSH
34308: LD_INT 22
34310: PUSH
34311: LD_INT 23
34313: PUSH
34314: LD_INT 24
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
34323: GO 34574
34325: LD_INT 44
34327: DOUBLE
34328: EQUAL
34329: IFTRUE 34333
34331: GO 34359
34333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_INT 21
34341: PUSH
34342: LD_INT 22
34344: PUSH
34345: LD_INT 23
34347: PUSH
34348: LD_INT 24
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
34357: GO 34574
34359: LD_INT 45
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34393
34367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: LD_INT 21
34375: PUSH
34376: LD_INT 22
34378: PUSH
34379: LD_INT 23
34381: PUSH
34382: LD_INT 24
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
34391: GO 34574
34393: LD_INT 49
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34427
34401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_INT 21
34409: PUSH
34410: LD_INT 22
34412: PUSH
34413: LD_INT 23
34415: PUSH
34416: LD_INT 24
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
34425: GO 34574
34427: LD_INT 51
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34435
34433: GO 34461
34435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_INT 21
34443: PUSH
34444: LD_INT 22
34446: PUSH
34447: LD_INT 23
34449: PUSH
34450: LD_INT 24
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
34459: GO 34574
34461: LD_INT 52
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34469
34467: GO 34495
34469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34470: LD_ADDR_VAR 0 3
34474: PUSH
34475: LD_INT 21
34477: PUSH
34478: LD_INT 22
34480: PUSH
34481: LD_INT 23
34483: PUSH
34484: LD_INT 24
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
34493: GO 34574
34495: LD_INT 53
34497: DOUBLE
34498: EQUAL
34499: IFTRUE 34503
34501: GO 34521
34503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_INT 23
34511: PUSH
34512: LD_INT 24
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: ST_TO_ADDR
34519: GO 34574
34521: LD_INT 46
34523: DOUBLE
34524: EQUAL
34525: IFTRUE 34529
34527: GO 34547
34529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34530: LD_ADDR_VAR 0 3
34534: PUSH
34535: LD_INT 23
34537: PUSH
34538: LD_INT 24
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: ST_TO_ADDR
34545: GO 34574
34547: LD_INT 47
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34573
34555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_INT 23
34563: PUSH
34564: LD_INT 24
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: ST_TO_ADDR
34571: GO 34574
34573: POP
// result := ( chassis in result ) ;
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_VAR 0 1
34583: PUSH
34584: LD_VAR 0 3
34588: IN
34589: ST_TO_ADDR
// end ;
34590: LD_VAR 0 3
34594: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34595: LD_INT 0
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
// result := array ;
34604: LD_ADDR_VAR 0 5
34608: PUSH
34609: LD_VAR 0 1
34613: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34614: LD_VAR 0 1
34618: NOT
34619: PUSH
34620: LD_VAR 0 2
34624: NOT
34625: OR
34626: PUSH
34627: LD_VAR 0 3
34631: NOT
34632: OR
34633: PUSH
34634: LD_VAR 0 2
34638: PUSH
34639: LD_VAR 0 1
34643: GREATER
34644: OR
34645: PUSH
34646: LD_VAR 0 3
34650: PUSH
34651: LD_VAR 0 1
34655: GREATER
34656: OR
34657: IFFALSE 34661
// exit ;
34659: GO 34957
// if direction then
34661: LD_VAR 0 4
34665: IFFALSE 34729
// begin d := 1 ;
34667: LD_ADDR_VAR 0 9
34671: PUSH
34672: LD_INT 1
34674: ST_TO_ADDR
// if i_from > i_to then
34675: LD_VAR 0 2
34679: PUSH
34680: LD_VAR 0 3
34684: GREATER
34685: IFFALSE 34711
// length := ( array - i_from ) + i_to else
34687: LD_ADDR_VAR 0 11
34691: PUSH
34692: LD_VAR 0 1
34696: PUSH
34697: LD_VAR 0 2
34701: MINUS
34702: PUSH
34703: LD_VAR 0 3
34707: PLUS
34708: ST_TO_ADDR
34709: GO 34727
// length := i_to - i_from ;
34711: LD_ADDR_VAR 0 11
34715: PUSH
34716: LD_VAR 0 3
34720: PUSH
34721: LD_VAR 0 2
34725: MINUS
34726: ST_TO_ADDR
// end else
34727: GO 34790
// begin d := - 1 ;
34729: LD_ADDR_VAR 0 9
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: ST_TO_ADDR
// if i_from > i_to then
34738: LD_VAR 0 2
34742: PUSH
34743: LD_VAR 0 3
34747: GREATER
34748: IFFALSE 34768
// length := i_from - i_to else
34750: LD_ADDR_VAR 0 11
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: LD_VAR 0 3
34764: MINUS
34765: ST_TO_ADDR
34766: GO 34790
// length := ( array - i_to ) + i_from ;
34768: LD_ADDR_VAR 0 11
34772: PUSH
34773: LD_VAR 0 1
34777: PUSH
34778: LD_VAR 0 3
34782: MINUS
34783: PUSH
34784: LD_VAR 0 2
34788: PLUS
34789: ST_TO_ADDR
// end ; if not length then
34790: LD_VAR 0 11
34794: NOT
34795: IFFALSE 34799
// exit ;
34797: GO 34957
// tmp := array ;
34799: LD_ADDR_VAR 0 10
34803: PUSH
34804: LD_VAR 0 1
34808: ST_TO_ADDR
// for i = 1 to length do
34809: LD_ADDR_VAR 0 6
34813: PUSH
34814: DOUBLE
34815: LD_INT 1
34817: DEC
34818: ST_TO_ADDR
34819: LD_VAR 0 11
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34945
// begin for j = 1 to array do
34827: LD_ADDR_VAR 0 7
34831: PUSH
34832: DOUBLE
34833: LD_INT 1
34835: DEC
34836: ST_TO_ADDR
34837: LD_VAR 0 1
34841: PUSH
34842: FOR_TO
34843: IFFALSE 34931
// begin k := j + d ;
34845: LD_ADDR_VAR 0 8
34849: PUSH
34850: LD_VAR 0 7
34854: PUSH
34855: LD_VAR 0 9
34859: PLUS
34860: ST_TO_ADDR
// if k > array then
34861: LD_VAR 0 8
34865: PUSH
34866: LD_VAR 0 1
34870: GREATER
34871: IFFALSE 34881
// k := 1 ;
34873: LD_ADDR_VAR 0 8
34877: PUSH
34878: LD_INT 1
34880: ST_TO_ADDR
// if not k then
34881: LD_VAR 0 8
34885: NOT
34886: IFFALSE 34898
// k := array ;
34888: LD_ADDR_VAR 0 8
34892: PUSH
34893: LD_VAR 0 1
34897: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34898: LD_ADDR_VAR 0 10
34902: PUSH
34903: LD_VAR 0 10
34907: PPUSH
34908: LD_VAR 0 8
34912: PPUSH
34913: LD_VAR 0 1
34917: PUSH
34918: LD_VAR 0 7
34922: ARRAY
34923: PPUSH
34924: CALL_OW 1
34928: ST_TO_ADDR
// end ;
34929: GO 34842
34931: POP
34932: POP
// array := tmp ;
34933: LD_ADDR_VAR 0 1
34937: PUSH
34938: LD_VAR 0 10
34942: ST_TO_ADDR
// end ;
34943: GO 34824
34945: POP
34946: POP
// result := array ;
34947: LD_ADDR_VAR 0 5
34951: PUSH
34952: LD_VAR 0 1
34956: ST_TO_ADDR
// end ;
34957: LD_VAR 0 5
34961: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34962: LD_INT 0
34964: PPUSH
34965: PPUSH
// result := 0 ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_INT 0
34973: ST_TO_ADDR
// if not array or not value in array then
34974: LD_VAR 0 1
34978: NOT
34979: PUSH
34980: LD_VAR 0 2
34984: PUSH
34985: LD_VAR 0 1
34989: IN
34990: NOT
34991: OR
34992: IFFALSE 34996
// exit ;
34994: GO 35050
// for i = 1 to array do
34996: LD_ADDR_VAR 0 4
35000: PUSH
35001: DOUBLE
35002: LD_INT 1
35004: DEC
35005: ST_TO_ADDR
35006: LD_VAR 0 1
35010: PUSH
35011: FOR_TO
35012: IFFALSE 35048
// if value = array [ i ] then
35014: LD_VAR 0 2
35018: PUSH
35019: LD_VAR 0 1
35023: PUSH
35024: LD_VAR 0 4
35028: ARRAY
35029: EQUAL
35030: IFFALSE 35046
// begin result := i ;
35032: LD_ADDR_VAR 0 3
35036: PUSH
35037: LD_VAR 0 4
35041: ST_TO_ADDR
// exit ;
35042: POP
35043: POP
35044: GO 35050
// end ;
35046: GO 35011
35048: POP
35049: POP
// end ;
35050: LD_VAR 0 3
35054: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35055: LD_INT 0
35057: PPUSH
// vc_chassis := chassis ;
35058: LD_ADDR_OWVAR 37
35062: PUSH
35063: LD_VAR 0 1
35067: ST_TO_ADDR
// vc_engine := engine ;
35068: LD_ADDR_OWVAR 39
35072: PUSH
35073: LD_VAR 0 2
35077: ST_TO_ADDR
// vc_control := control ;
35078: LD_ADDR_OWVAR 38
35082: PUSH
35083: LD_VAR 0 3
35087: ST_TO_ADDR
// vc_weapon := weapon ;
35088: LD_ADDR_OWVAR 40
35092: PUSH
35093: LD_VAR 0 4
35097: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35098: LD_ADDR_OWVAR 41
35102: PUSH
35103: LD_VAR 0 5
35107: ST_TO_ADDR
// end ;
35108: LD_VAR 0 6
35112: RET
// export function WantPlant ( unit ) ; var task ; begin
35113: LD_INT 0
35115: PPUSH
35116: PPUSH
// result := false ;
35117: LD_ADDR_VAR 0 2
35121: PUSH
35122: LD_INT 0
35124: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35125: LD_ADDR_VAR 0 3
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 437
35139: ST_TO_ADDR
// if task then
35140: LD_VAR 0 3
35144: IFFALSE 35172
// if task [ 1 ] [ 1 ] = p then
35146: LD_VAR 0 3
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PUSH
35155: LD_INT 1
35157: ARRAY
35158: PUSH
35159: LD_STRING p
35161: EQUAL
35162: IFFALSE 35172
// result := true ;
35164: LD_ADDR_VAR 0 2
35168: PUSH
35169: LD_INT 1
35171: ST_TO_ADDR
// end ;
35172: LD_VAR 0 2
35176: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35177: LD_INT 0
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
// if pos < 1 then
35183: LD_VAR 0 2
35187: PUSH
35188: LD_INT 1
35190: LESS
35191: IFFALSE 35195
// exit ;
35193: GO 35498
// if pos = 1 then
35195: LD_VAR 0 2
35199: PUSH
35200: LD_INT 1
35202: EQUAL
35203: IFFALSE 35236
// result := Replace ( arr , pos [ 1 ] , value ) else
35205: LD_ADDR_VAR 0 4
35209: PUSH
35210: LD_VAR 0 1
35214: PPUSH
35215: LD_VAR 0 2
35219: PUSH
35220: LD_INT 1
35222: ARRAY
35223: PPUSH
35224: LD_VAR 0 3
35228: PPUSH
35229: CALL_OW 1
35233: ST_TO_ADDR
35234: GO 35498
// begin tmp := arr ;
35236: LD_ADDR_VAR 0 6
35240: PUSH
35241: LD_VAR 0 1
35245: ST_TO_ADDR
// s_arr := [ tmp ] ;
35246: LD_ADDR_VAR 0 7
35250: PUSH
35251: LD_VAR 0 6
35255: PUSH
35256: EMPTY
35257: LIST
35258: ST_TO_ADDR
// for i = 1 to pos - 1 do
35259: LD_ADDR_VAR 0 5
35263: PUSH
35264: DOUBLE
35265: LD_INT 1
35267: DEC
35268: ST_TO_ADDR
35269: LD_VAR 0 2
35273: PUSH
35274: LD_INT 1
35276: MINUS
35277: PUSH
35278: FOR_TO
35279: IFFALSE 35324
// begin tmp := tmp [ pos [ i ] ] ;
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: LD_VAR 0 6
35290: PUSH
35291: LD_VAR 0 2
35295: PUSH
35296: LD_VAR 0 5
35300: ARRAY
35301: ARRAY
35302: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35303: LD_ADDR_VAR 0 7
35307: PUSH
35308: LD_VAR 0 7
35312: PUSH
35313: LD_VAR 0 6
35317: PUSH
35318: EMPTY
35319: LIST
35320: ADD
35321: ST_TO_ADDR
// end ;
35322: GO 35278
35324: POP
35325: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35326: LD_ADDR_VAR 0 6
35330: PUSH
35331: LD_VAR 0 6
35335: PPUSH
35336: LD_VAR 0 2
35340: PUSH
35341: LD_VAR 0 2
35345: ARRAY
35346: PPUSH
35347: LD_VAR 0 3
35351: PPUSH
35352: CALL_OW 1
35356: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35357: LD_ADDR_VAR 0 7
35361: PUSH
35362: LD_VAR 0 7
35366: PPUSH
35367: LD_VAR 0 7
35371: PPUSH
35372: LD_VAR 0 6
35376: PPUSH
35377: CALL_OW 1
35381: ST_TO_ADDR
// for i = s_arr downto 2 do
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: DOUBLE
35388: LD_VAR 0 7
35392: INC
35393: ST_TO_ADDR
35394: LD_INT 2
35396: PUSH
35397: FOR_DOWNTO
35398: IFFALSE 35482
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35400: LD_ADDR_VAR 0 6
35404: PUSH
35405: LD_VAR 0 7
35409: PUSH
35410: LD_VAR 0 5
35414: PUSH
35415: LD_INT 1
35417: MINUS
35418: ARRAY
35419: PPUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_INT 1
35432: MINUS
35433: ARRAY
35434: PPUSH
35435: LD_VAR 0 7
35439: PUSH
35440: LD_VAR 0 5
35444: ARRAY
35445: PPUSH
35446: CALL_OW 1
35450: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35451: LD_ADDR_VAR 0 7
35455: PUSH
35456: LD_VAR 0 7
35460: PPUSH
35461: LD_VAR 0 5
35465: PUSH
35466: LD_INT 1
35468: MINUS
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: CALL_OW 1
35479: ST_TO_ADDR
// end ;
35480: GO 35397
35482: POP
35483: POP
// result := s_arr [ 1 ] ;
35484: LD_ADDR_VAR 0 4
35488: PUSH
35489: LD_VAR 0 7
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: ST_TO_ADDR
// end ; end ;
35498: LD_VAR 0 4
35502: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35503: LD_INT 0
35505: PPUSH
35506: PPUSH
// if not list then
35507: LD_VAR 0 1
35511: NOT
35512: IFFALSE 35516
// exit ;
35514: GO 35607
// i := list [ pos1 ] ;
35516: LD_ADDR_VAR 0 5
35520: PUSH
35521: LD_VAR 0 1
35525: PUSH
35526: LD_VAR 0 2
35530: ARRAY
35531: ST_TO_ADDR
// if not i then
35532: LD_VAR 0 5
35536: NOT
35537: IFFALSE 35541
// exit ;
35539: GO 35607
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35541: LD_ADDR_VAR 0 1
35545: PUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: LD_VAR 0 2
35555: PPUSH
35556: LD_VAR 0 1
35560: PUSH
35561: LD_VAR 0 3
35565: ARRAY
35566: PPUSH
35567: CALL_OW 1
35571: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35572: LD_ADDR_VAR 0 1
35576: PUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_VAR 0 3
35586: PPUSH
35587: LD_VAR 0 5
35591: PPUSH
35592: CALL_OW 1
35596: ST_TO_ADDR
// result := list ;
35597: LD_ADDR_VAR 0 4
35601: PUSH
35602: LD_VAR 0 1
35606: ST_TO_ADDR
// end ;
35607: LD_VAR 0 4
35611: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35612: LD_INT 0
35614: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35615: LD_ADDR_VAR 0 5
35619: PUSH
35620: LD_VAR 0 1
35624: PPUSH
35625: CALL_OW 250
35629: PPUSH
35630: LD_VAR 0 1
35634: PPUSH
35635: CALL_OW 251
35639: PPUSH
35640: LD_VAR 0 2
35644: PPUSH
35645: LD_VAR 0 3
35649: PPUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: CALL 35665 0 5
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 5
35664: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
// if not list then
35671: LD_VAR 0 3
35675: NOT
35676: IFFALSE 35680
// exit ;
35678: GO 36068
// result := [ ] ;
35680: LD_ADDR_VAR 0 6
35684: PUSH
35685: EMPTY
35686: ST_TO_ADDR
// for i in list do
35687: LD_ADDR_VAR 0 7
35691: PUSH
35692: LD_VAR 0 3
35696: PUSH
35697: FOR_IN
35698: IFFALSE 35900
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35700: LD_ADDR_VAR 0 9
35704: PUSH
35705: LD_VAR 0 7
35709: PPUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: LD_VAR 0 2
35719: PPUSH
35720: CALL_OW 297
35724: ST_TO_ADDR
// if not result then
35725: LD_VAR 0 6
35729: NOT
35730: IFFALSE 35756
// result := [ [ i , tmp ] ] else
35732: LD_ADDR_VAR 0 6
35736: PUSH
35737: LD_VAR 0 7
35741: PUSH
35742: LD_VAR 0 9
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: ST_TO_ADDR
35754: GO 35898
// begin if result [ result ] [ 2 ] < tmp then
35756: LD_VAR 0 6
35760: PUSH
35761: LD_VAR 0 6
35765: ARRAY
35766: PUSH
35767: LD_INT 2
35769: ARRAY
35770: PUSH
35771: LD_VAR 0 9
35775: LESS
35776: IFFALSE 35818
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: LD_VAR 0 6
35787: PPUSH
35788: LD_VAR 0 6
35792: PUSH
35793: LD_INT 1
35795: PLUS
35796: PPUSH
35797: LD_VAR 0 7
35801: PUSH
35802: LD_VAR 0 9
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PPUSH
35811: CALL_OW 2
35815: ST_TO_ADDR
35816: GO 35898
// for j = 1 to result do
35818: LD_ADDR_VAR 0 8
35822: PUSH
35823: DOUBLE
35824: LD_INT 1
35826: DEC
35827: ST_TO_ADDR
35828: LD_VAR 0 6
35832: PUSH
35833: FOR_TO
35834: IFFALSE 35896
// begin if tmp < result [ j ] [ 2 ] then
35836: LD_VAR 0 9
35840: PUSH
35841: LD_VAR 0 6
35845: PUSH
35846: LD_VAR 0 8
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: LESS
35856: IFFALSE 35894
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35858: LD_ADDR_VAR 0 6
35862: PUSH
35863: LD_VAR 0 6
35867: PPUSH
35868: LD_VAR 0 8
35872: PPUSH
35873: LD_VAR 0 7
35877: PUSH
35878: LD_VAR 0 9
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 2
35891: ST_TO_ADDR
// break ;
35892: GO 35896
// end ; end ;
35894: GO 35833
35896: POP
35897: POP
// end ; end ;
35898: GO 35697
35900: POP
35901: POP
// if result and not asc then
35902: LD_VAR 0 6
35906: PUSH
35907: LD_VAR 0 4
35911: NOT
35912: AND
35913: IFFALSE 35988
// begin tmp := result ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_VAR 0 6
35924: ST_TO_ADDR
// for i = tmp downto 1 do
35925: LD_ADDR_VAR 0 7
35929: PUSH
35930: DOUBLE
35931: LD_VAR 0 9
35935: INC
35936: ST_TO_ADDR
35937: LD_INT 1
35939: PUSH
35940: FOR_DOWNTO
35941: IFFALSE 35986
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35943: LD_ADDR_VAR 0 6
35947: PUSH
35948: LD_VAR 0 6
35952: PPUSH
35953: LD_VAR 0 9
35957: PUSH
35958: LD_VAR 0 7
35962: MINUS
35963: PUSH
35964: LD_INT 1
35966: PLUS
35967: PPUSH
35968: LD_VAR 0 9
35972: PUSH
35973: LD_VAR 0 7
35977: ARRAY
35978: PPUSH
35979: CALL_OW 1
35983: ST_TO_ADDR
35984: GO 35940
35986: POP
35987: POP
// end ; tmp := [ ] ;
35988: LD_ADDR_VAR 0 9
35992: PUSH
35993: EMPTY
35994: ST_TO_ADDR
// if mode then
35995: LD_VAR 0 5
35999: IFFALSE 36068
// begin for i = 1 to result do
36001: LD_ADDR_VAR 0 7
36005: PUSH
36006: DOUBLE
36007: LD_INT 1
36009: DEC
36010: ST_TO_ADDR
36011: LD_VAR 0 6
36015: PUSH
36016: FOR_TO
36017: IFFALSE 36056
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36019: LD_ADDR_VAR 0 9
36023: PUSH
36024: LD_VAR 0 9
36028: PPUSH
36029: LD_VAR 0 7
36033: PPUSH
36034: LD_VAR 0 6
36038: PUSH
36039: LD_VAR 0 7
36043: ARRAY
36044: PUSH
36045: LD_INT 1
36047: ARRAY
36048: PPUSH
36049: CALL_OW 1
36053: ST_TO_ADDR
36054: GO 36016
36056: POP
36057: POP
// result := tmp ;
36058: LD_ADDR_VAR 0 6
36062: PUSH
36063: LD_VAR 0 9
36067: ST_TO_ADDR
// end ; end ;
36068: LD_VAR 0 6
36072: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36073: LD_INT 0
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// if not x or not y then
36103: LD_VAR 0 2
36107: NOT
36108: PUSH
36109: LD_VAR 0 3
36113: NOT
36114: OR
36115: IFFALSE 36119
// exit ;
36117: GO 37771
// if not range then
36119: LD_VAR 0 4
36123: NOT
36124: IFFALSE 36134
// range := 10 ;
36126: LD_ADDR_VAR 0 4
36130: PUSH
36131: LD_INT 10
36133: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36134: LD_ADDR_VAR 0 8
36138: PUSH
36139: LD_INT 81
36141: PUSH
36142: LD_VAR 0 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 92
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_VAR 0 3
36163: PUSH
36164: LD_VAR 0 4
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 21
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: PPUSH
36197: CALL_OW 69
36201: ST_TO_ADDR
// if not tmp then
36202: LD_VAR 0 8
36206: NOT
36207: IFFALSE 36211
// exit ;
36209: GO 37771
// for i in tmp do
36211: LD_ADDR_VAR 0 6
36215: PUSH
36216: LD_VAR 0 8
36220: PUSH
36221: FOR_IN
36222: IFFALSE 37746
// begin points := [ 0 , 0 , 0 ] ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// bpoints := 1 ;
36243: LD_ADDR_VAR 0 10
36247: PUSH
36248: LD_INT 1
36250: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36251: LD_VAR 0 6
36255: PPUSH
36256: CALL_OW 247
36260: PUSH
36261: LD_INT 1
36263: DOUBLE
36264: EQUAL
36265: IFTRUE 36269
36267: GO 36847
36269: POP
// begin if GetClass ( i ) = 1 then
36270: LD_VAR 0 6
36274: PPUSH
36275: CALL_OW 257
36279: PUSH
36280: LD_INT 1
36282: EQUAL
36283: IFFALSE 36304
// points := [ 10 , 5 , 3 ] ;
36285: LD_ADDR_VAR 0 9
36289: PUSH
36290: LD_INT 10
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 3
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36304: LD_VAR 0 6
36308: PPUSH
36309: CALL_OW 257
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: LD_INT 4
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: IN
36328: IFFALSE 36349
// points := [ 3 , 2 , 1 ] ;
36330: LD_ADDR_VAR 0 9
36334: PUSH
36335: LD_INT 3
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36349: LD_VAR 0 6
36353: PPUSH
36354: CALL_OW 257
36358: PUSH
36359: LD_INT 5
36361: EQUAL
36362: IFFALSE 36383
// points := [ 130 , 5 , 2 ] ;
36364: LD_ADDR_VAR 0 9
36368: PUSH
36369: LD_INT 130
36371: PUSH
36372: LD_INT 5
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36383: LD_VAR 0 6
36387: PPUSH
36388: CALL_OW 257
36392: PUSH
36393: LD_INT 8
36395: EQUAL
36396: IFFALSE 36417
// points := [ 35 , 35 , 30 ] ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_INT 35
36405: PUSH
36406: LD_INT 35
36408: PUSH
36409: LD_INT 30
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36417: LD_VAR 0 6
36421: PPUSH
36422: CALL_OW 257
36426: PUSH
36427: LD_INT 9
36429: EQUAL
36430: IFFALSE 36451
// points := [ 20 , 55 , 40 ] ;
36432: LD_ADDR_VAR 0 9
36436: PUSH
36437: LD_INT 20
36439: PUSH
36440: LD_INT 55
36442: PUSH
36443: LD_INT 40
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36451: LD_VAR 0 6
36455: PPUSH
36456: CALL_OW 257
36460: PUSH
36461: LD_INT 12
36463: PUSH
36464: LD_INT 16
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: IN
36471: IFFALSE 36492
// points := [ 5 , 3 , 2 ] ;
36473: LD_ADDR_VAR 0 9
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36492: LD_VAR 0 6
36496: PPUSH
36497: CALL_OW 257
36501: PUSH
36502: LD_INT 17
36504: EQUAL
36505: IFFALSE 36526
// points := [ 100 , 50 , 75 ] ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_INT 100
36514: PUSH
36515: LD_INT 50
36517: PUSH
36518: LD_INT 75
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 257
36535: PUSH
36536: LD_INT 15
36538: EQUAL
36539: IFFALSE 36560
// points := [ 10 , 5 , 3 ] ;
36541: LD_ADDR_VAR 0 9
36545: PUSH
36546: LD_INT 10
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36560: LD_VAR 0 6
36564: PPUSH
36565: CALL_OW 257
36569: PUSH
36570: LD_INT 14
36572: EQUAL
36573: IFFALSE 36594
// points := [ 10 , 0 , 0 ] ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_INT 10
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36594: LD_VAR 0 6
36598: PPUSH
36599: CALL_OW 257
36603: PUSH
36604: LD_INT 11
36606: EQUAL
36607: IFFALSE 36628
// points := [ 30 , 10 , 5 ] ;
36609: LD_ADDR_VAR 0 9
36613: PUSH
36614: LD_INT 30
36616: PUSH
36617: LD_INT 10
36619: PUSH
36620: LD_INT 5
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36628: LD_VAR 0 1
36632: PPUSH
36633: LD_INT 5
36635: PPUSH
36636: CALL_OW 321
36640: PUSH
36641: LD_INT 2
36643: EQUAL
36644: IFFALSE 36661
// bpoints := bpoints * 1.8 ;
36646: LD_ADDR_VAR 0 10
36650: PUSH
36651: LD_VAR 0 10
36655: PUSH
36656: LD_REAL  1.80000000000000E+0000
36659: MUL
36660: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36661: LD_VAR 0 6
36665: PPUSH
36666: CALL_OW 257
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: LD_INT 4
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: IN
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: LD_INT 51
36697: PPUSH
36698: CALL_OW 321
36702: PUSH
36703: LD_INT 2
36705: EQUAL
36706: AND
36707: IFFALSE 36724
// bpoints := bpoints * 1.2 ;
36709: LD_ADDR_VAR 0 10
36713: PUSH
36714: LD_VAR 0 10
36718: PUSH
36719: LD_REAL  1.20000000000000E+0000
36722: MUL
36723: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36724: LD_VAR 0 6
36728: PPUSH
36729: CALL_OW 257
36733: PUSH
36734: LD_INT 5
36736: PUSH
36737: LD_INT 7
36739: PUSH
36740: LD_INT 9
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: IN
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: LD_INT 52
36756: PPUSH
36757: CALL_OW 321
36761: PUSH
36762: LD_INT 2
36764: EQUAL
36765: AND
36766: IFFALSE 36783
// bpoints := bpoints * 1.5 ;
36768: LD_ADDR_VAR 0 10
36772: PUSH
36773: LD_VAR 0 10
36777: PUSH
36778: LD_REAL  1.50000000000000E+0000
36781: MUL
36782: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36783: LD_VAR 0 1
36787: PPUSH
36788: LD_INT 66
36790: PPUSH
36791: CALL_OW 321
36795: PUSH
36796: LD_INT 2
36798: EQUAL
36799: IFFALSE 36816
// bpoints := bpoints * 1.1 ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_REAL  1.10000000000000E+0000
36814: MUL
36815: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36816: LD_ADDR_VAR 0 10
36820: PUSH
36821: LD_VAR 0 10
36825: PUSH
36826: LD_VAR 0 6
36830: PPUSH
36831: LD_INT 1
36833: PPUSH
36834: CALL_OW 259
36838: PUSH
36839: LD_REAL  1.15000000000000E+0000
36842: MUL
36843: MUL
36844: ST_TO_ADDR
// end ; unit_vehicle :
36845: GO 37675
36847: LD_INT 2
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 37663
36855: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36856: LD_VAR 0 6
36860: PPUSH
36861: CALL_OW 264
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 42
36871: PUSH
36872: LD_INT 24
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: IN
36880: IFFALSE 36901
// points := [ 25 , 5 , 3 ] ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_INT 25
36889: PUSH
36890: LD_INT 5
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36901: LD_VAR 0 6
36905: PPUSH
36906: CALL_OW 264
36910: PUSH
36911: LD_INT 4
36913: PUSH
36914: LD_INT 43
36916: PUSH
36917: LD_INT 25
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: IN
36925: IFFALSE 36946
// points := [ 40 , 15 , 5 ] ;
36927: LD_ADDR_VAR 0 9
36931: PUSH
36932: LD_INT 40
36934: PUSH
36935: LD_INT 15
36937: PUSH
36938: LD_INT 5
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36946: LD_VAR 0 6
36950: PPUSH
36951: CALL_OW 264
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: LD_INT 23
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: IN
36966: IFFALSE 36987
// points := [ 7 , 25 , 8 ] ;
36968: LD_ADDR_VAR 0 9
36972: PUSH
36973: LD_INT 7
36975: PUSH
36976: LD_INT 25
36978: PUSH
36979: LD_INT 8
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36987: LD_VAR 0 6
36991: PPUSH
36992: CALL_OW 264
36996: PUSH
36997: LD_INT 5
36999: PUSH
37000: LD_INT 27
37002: PUSH
37003: LD_INT 44
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: IN
37011: IFFALSE 37032
// points := [ 14 , 50 , 16 ] ;
37013: LD_ADDR_VAR 0 9
37017: PUSH
37018: LD_INT 14
37020: PUSH
37021: LD_INT 50
37023: PUSH
37024: LD_INT 16
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37032: LD_VAR 0 6
37036: PPUSH
37037: CALL_OW 264
37041: PUSH
37042: LD_INT 6
37044: PUSH
37045: LD_INT 46
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: IN
37052: IFFALSE 37073
// points := [ 32 , 120 , 70 ] ;
37054: LD_ADDR_VAR 0 9
37058: PUSH
37059: LD_INT 32
37061: PUSH
37062: LD_INT 120
37064: PUSH
37065: LD_INT 70
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL_OW 264
37082: PUSH
37083: LD_INT 7
37085: PUSH
37086: LD_INT 28
37088: PUSH
37089: LD_INT 45
37091: PUSH
37092: LD_EXP 102
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: IN
37103: IFFALSE 37124
// points := [ 35 , 20 , 45 ] ;
37105: LD_ADDR_VAR 0 9
37109: PUSH
37110: LD_INT 35
37112: PUSH
37113: LD_INT 20
37115: PUSH
37116: LD_INT 45
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37124: LD_VAR 0 6
37128: PPUSH
37129: CALL_OW 264
37133: PUSH
37134: LD_INT 47
37136: PUSH
37137: EMPTY
37138: LIST
37139: IN
37140: IFFALSE 37161
// points := [ 67 , 45 , 75 ] ;
37142: LD_ADDR_VAR 0 9
37146: PUSH
37147: LD_INT 67
37149: PUSH
37150: LD_INT 45
37152: PUSH
37153: LD_INT 75
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37161: LD_VAR 0 6
37165: PPUSH
37166: CALL_OW 264
37170: PUSH
37171: LD_INT 26
37173: PUSH
37174: EMPTY
37175: LIST
37176: IN
37177: IFFALSE 37198
// points := [ 120 , 30 , 80 ] ;
37179: LD_ADDR_VAR 0 9
37183: PUSH
37184: LD_INT 120
37186: PUSH
37187: LD_INT 30
37189: PUSH
37190: LD_INT 80
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37198: LD_VAR 0 6
37202: PPUSH
37203: CALL_OW 264
37207: PUSH
37208: LD_INT 22
37210: PUSH
37211: EMPTY
37212: LIST
37213: IN
37214: IFFALSE 37235
// points := [ 40 , 1 , 1 ] ;
37216: LD_ADDR_VAR 0 9
37220: PUSH
37221: LD_INT 40
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37235: LD_VAR 0 6
37239: PPUSH
37240: CALL_OW 264
37244: PUSH
37245: LD_INT 29
37247: PUSH
37248: EMPTY
37249: LIST
37250: IN
37251: IFFALSE 37272
// points := [ 70 , 200 , 400 ] ;
37253: LD_ADDR_VAR 0 9
37257: PUSH
37258: LD_INT 70
37260: PUSH
37261: LD_INT 200
37263: PUSH
37264: LD_INT 400
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37272: LD_VAR 0 6
37276: PPUSH
37277: CALL_OW 264
37281: PUSH
37282: LD_INT 14
37284: PUSH
37285: LD_INT 53
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: IN
37292: IFFALSE 37313
// points := [ 40 , 10 , 20 ] ;
37294: LD_ADDR_VAR 0 9
37298: PUSH
37299: LD_INT 40
37301: PUSH
37302: LD_INT 10
37304: PUSH
37305: LD_INT 20
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37313: LD_VAR 0 6
37317: PPUSH
37318: CALL_OW 264
37322: PUSH
37323: LD_INT 9
37325: PUSH
37326: EMPTY
37327: LIST
37328: IN
37329: IFFALSE 37350
// points := [ 5 , 70 , 20 ] ;
37331: LD_ADDR_VAR 0 9
37335: PUSH
37336: LD_INT 5
37338: PUSH
37339: LD_INT 70
37341: PUSH
37342: LD_INT 20
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37350: LD_VAR 0 6
37354: PPUSH
37355: CALL_OW 264
37359: PUSH
37360: LD_INT 10
37362: PUSH
37363: EMPTY
37364: LIST
37365: IN
37366: IFFALSE 37387
// points := [ 35 , 110 , 70 ] ;
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: LD_INT 35
37375: PUSH
37376: LD_INT 110
37378: PUSH
37379: LD_INT 70
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37387: LD_VAR 0 6
37391: PPUSH
37392: CALL_OW 265
37396: PUSH
37397: LD_INT 25
37399: EQUAL
37400: IFFALSE 37421
// points := [ 80 , 65 , 100 ] ;
37402: LD_ADDR_VAR 0 9
37406: PUSH
37407: LD_INT 80
37409: PUSH
37410: LD_INT 65
37412: PUSH
37413: LD_INT 100
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37421: LD_VAR 0 6
37425: PPUSH
37426: CALL_OW 263
37430: PUSH
37431: LD_INT 1
37433: EQUAL
37434: IFFALSE 37469
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37436: LD_ADDR_VAR 0 10
37440: PUSH
37441: LD_VAR 0 10
37445: PUSH
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL_OW 311
37455: PPUSH
37456: LD_INT 3
37458: PPUSH
37459: CALL_OW 259
37463: PUSH
37464: LD_INT 4
37466: MUL
37467: MUL
37468: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37469: LD_VAR 0 6
37473: PPUSH
37474: CALL_OW 263
37478: PUSH
37479: LD_INT 2
37481: EQUAL
37482: IFFALSE 37533
// begin j := IsControledBy ( i ) ;
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: LD_VAR 0 6
37493: PPUSH
37494: CALL_OW 312
37498: ST_TO_ADDR
// if j then
37499: LD_VAR 0 7
37503: IFFALSE 37533
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37505: LD_ADDR_VAR 0 10
37509: PUSH
37510: LD_VAR 0 10
37514: PUSH
37515: LD_VAR 0 7
37519: PPUSH
37520: LD_INT 3
37522: PPUSH
37523: CALL_OW 259
37527: PUSH
37528: LD_INT 3
37530: MUL
37531: MUL
37532: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37533: LD_VAR 0 6
37537: PPUSH
37538: CALL_OW 264
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: LD_INT 6
37548: PUSH
37549: LD_INT 46
37551: PUSH
37552: LD_INT 44
37554: PUSH
37555: LD_INT 47
37557: PUSH
37558: LD_INT 45
37560: PUSH
37561: LD_INT 28
37563: PUSH
37564: LD_INT 7
37566: PUSH
37567: LD_INT 27
37569: PUSH
37570: LD_INT 29
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: IN
37585: PUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: LD_INT 52
37593: PPUSH
37594: CALL_OW 321
37598: PUSH
37599: LD_INT 2
37601: EQUAL
37602: AND
37603: IFFALSE 37620
// bpoints := bpoints * 1.2 ;
37605: LD_ADDR_VAR 0 10
37609: PUSH
37610: LD_VAR 0 10
37614: PUSH
37615: LD_REAL  1.20000000000000E+0000
37618: MUL
37619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37620: LD_VAR 0 6
37624: PPUSH
37625: CALL_OW 264
37629: PUSH
37630: LD_INT 6
37632: PUSH
37633: LD_INT 46
37635: PUSH
37636: LD_INT 47
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: IN
37644: IFFALSE 37661
// bpoints := bpoints * 1.2 ;
37646: LD_ADDR_VAR 0 10
37650: PUSH
37651: LD_VAR 0 10
37655: PUSH
37656: LD_REAL  1.20000000000000E+0000
37659: MUL
37660: ST_TO_ADDR
// end ; unit_building :
37661: GO 37675
37663: LD_INT 3
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37674
37671: POP
// ; end ;
37672: GO 37675
37674: POP
// for j = 1 to 3 do
37675: LD_ADDR_VAR 0 7
37679: PUSH
37680: DOUBLE
37681: LD_INT 1
37683: DEC
37684: ST_TO_ADDR
37685: LD_INT 3
37687: PUSH
37688: FOR_TO
37689: IFFALSE 37742
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: LD_VAR 0 5
37700: PPUSH
37701: LD_VAR 0 7
37705: PPUSH
37706: LD_VAR 0 5
37710: PUSH
37711: LD_VAR 0 7
37715: ARRAY
37716: PUSH
37717: LD_VAR 0 9
37721: PUSH
37722: LD_VAR 0 7
37726: ARRAY
37727: PUSH
37728: LD_VAR 0 10
37732: MUL
37733: PLUS
37734: PPUSH
37735: CALL_OW 1
37739: ST_TO_ADDR
37740: GO 37688
37742: POP
37743: POP
// end ;
37744: GO 36221
37746: POP
37747: POP
// result := Replace ( result , 4 , tmp ) ;
37748: LD_ADDR_VAR 0 5
37752: PUSH
37753: LD_VAR 0 5
37757: PPUSH
37758: LD_INT 4
37760: PPUSH
37761: LD_VAR 0 8
37765: PPUSH
37766: CALL_OW 1
37770: ST_TO_ADDR
// end ;
37771: LD_VAR 0 5
37775: RET
// export function DangerAtRange ( unit , range ) ; begin
37776: LD_INT 0
37778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37779: LD_ADDR_VAR 0 3
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 255
37793: PPUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 250
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 251
37813: PPUSH
37814: LD_VAR 0 2
37818: PPUSH
37819: CALL 36073 0 4
37823: ST_TO_ADDR
// end ;
37824: LD_VAR 0 3
37828: RET
// export function DangerInArea ( side , area ) ; begin
37829: LD_INT 0
37831: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37832: LD_ADDR_VAR 0 3
37836: PUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_INT 81
37844: PUSH
37845: LD_VAR 0 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 70
37858: ST_TO_ADDR
// end ;
37859: LD_VAR 0 3
37863: RET
// export function IsExtension ( b ) ; begin
37864: LD_INT 0
37866: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37867: LD_ADDR_VAR 0 2
37871: PUSH
37872: LD_VAR 0 1
37876: PUSH
37877: LD_INT 23
37879: PUSH
37880: LD_INT 20
37882: PUSH
37883: LD_INT 22
37885: PUSH
37886: LD_INT 17
37888: PUSH
37889: LD_INT 24
37891: PUSH
37892: LD_INT 21
37894: PUSH
37895: LD_INT 19
37897: PUSH
37898: LD_INT 16
37900: PUSH
37901: LD_INT 25
37903: PUSH
37904: LD_INT 18
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: IN
37919: ST_TO_ADDR
// end ;
37920: LD_VAR 0 2
37924: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37925: LD_INT 0
37927: PPUSH
37928: PPUSH
37929: PPUSH
// result := [ ] ;
37930: LD_ADDR_VAR 0 4
37934: PUSH
37935: EMPTY
37936: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37937: LD_ADDR_VAR 0 5
37941: PUSH
37942: LD_VAR 0 2
37946: PPUSH
37947: LD_INT 21
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PPUSH
37957: CALL_OW 70
37961: ST_TO_ADDR
// if not tmp then
37962: LD_VAR 0 5
37966: NOT
37967: IFFALSE 37971
// exit ;
37969: GO 38035
// if checkLink then
37971: LD_VAR 0 3
37975: IFFALSE 38025
// begin for i in tmp do
37977: LD_ADDR_VAR 0 6
37981: PUSH
37982: LD_VAR 0 5
37986: PUSH
37987: FOR_IN
37988: IFFALSE 38023
// if GetBase ( i ) <> base then
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 274
37999: PUSH
38000: LD_VAR 0 1
38004: NONEQUAL
38005: IFFALSE 38021
// ComLinkToBase ( base , i ) ;
38007: LD_VAR 0 1
38011: PPUSH
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 169
38021: GO 37987
38023: POP
38024: POP
// end ; result := tmp ;
38025: LD_ADDR_VAR 0 4
38029: PUSH
38030: LD_VAR 0 5
38034: ST_TO_ADDR
// end ;
38035: LD_VAR 0 4
38039: RET
// export function ComComplete ( units , b ) ; var i ; begin
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
// if not units then
38044: LD_VAR 0 1
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38143
// for i in units do
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 1
38062: PUSH
38063: FOR_IN
38064: IFFALSE 38141
// if BuildingStatus ( b ) = bs_build then
38066: LD_VAR 0 2
38070: PPUSH
38071: CALL_OW 461
38075: PUSH
38076: LD_INT 1
38078: EQUAL
38079: IFFALSE 38139
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38081: LD_VAR 0 4
38085: PPUSH
38086: LD_STRING h
38088: PUSH
38089: LD_VAR 0 2
38093: PPUSH
38094: CALL_OW 250
38098: PUSH
38099: LD_VAR 0 2
38103: PPUSH
38104: CALL_OW 251
38108: PUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: PUSH
38132: EMPTY
38133: LIST
38134: PPUSH
38135: CALL_OW 446
38139: GO 38063
38141: POP
38142: POP
// end ;
38143: LD_VAR 0 3
38147: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38148: LD_INT 0
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38156: LD_VAR 0 1
38160: NOT
38161: PUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 263
38171: PUSH
38172: LD_INT 2
38174: NONEQUAL
38175: OR
38176: IFFALSE 38180
// exit ;
38178: GO 38496
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38180: LD_ADDR_VAR 0 6
38184: PUSH
38185: LD_INT 22
38187: PUSH
38188: LD_VAR 0 1
38192: PPUSH
38193: CALL_OW 255
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: LD_INT 30
38207: PUSH
38208: LD_INT 36
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 34
38217: PUSH
38218: LD_INT 31
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PPUSH
38234: CALL_OW 69
38238: ST_TO_ADDR
// if not tmp then
38239: LD_VAR 0 6
38243: NOT
38244: IFFALSE 38248
// exit ;
38246: GO 38496
// result := [ ] ;
38248: LD_ADDR_VAR 0 2
38252: PUSH
38253: EMPTY
38254: ST_TO_ADDR
// for i in tmp do
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_VAR 0 6
38264: PUSH
38265: FOR_IN
38266: IFFALSE 38337
// begin t := UnitsInside ( i ) ;
38268: LD_ADDR_VAR 0 4
38272: PUSH
38273: LD_VAR 0 3
38277: PPUSH
38278: CALL_OW 313
38282: ST_TO_ADDR
// if t then
38283: LD_VAR 0 4
38287: IFFALSE 38335
// for j in t do
38289: LD_ADDR_VAR 0 7
38293: PUSH
38294: LD_VAR 0 4
38298: PUSH
38299: FOR_IN
38300: IFFALSE 38333
// result := Replace ( result , result + 1 , j ) ;
38302: LD_ADDR_VAR 0 2
38306: PUSH
38307: LD_VAR 0 2
38311: PPUSH
38312: LD_VAR 0 2
38316: PUSH
38317: LD_INT 1
38319: PLUS
38320: PPUSH
38321: LD_VAR 0 7
38325: PPUSH
38326: CALL_OW 1
38330: ST_TO_ADDR
38331: GO 38299
38333: POP
38334: POP
// end ;
38335: GO 38265
38337: POP
38338: POP
// if not result then
38339: LD_VAR 0 2
38343: NOT
38344: IFFALSE 38348
// exit ;
38346: GO 38496
// mech := result [ 1 ] ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_VAR 0 2
38357: PUSH
38358: LD_INT 1
38360: ARRAY
38361: ST_TO_ADDR
// if result > 1 then
38362: LD_VAR 0 2
38366: PUSH
38367: LD_INT 1
38369: GREATER
38370: IFFALSE 38482
// begin for i = 2 to result do
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: DOUBLE
38378: LD_INT 2
38380: DEC
38381: ST_TO_ADDR
38382: LD_VAR 0 2
38386: PUSH
38387: FOR_TO
38388: IFFALSE 38480
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38390: LD_ADDR_VAR 0 4
38394: PUSH
38395: LD_VAR 0 2
38399: PUSH
38400: LD_VAR 0 3
38404: ARRAY
38405: PPUSH
38406: LD_INT 3
38408: PPUSH
38409: CALL_OW 259
38413: PUSH
38414: LD_VAR 0 2
38418: PUSH
38419: LD_VAR 0 3
38423: ARRAY
38424: PPUSH
38425: CALL_OW 432
38429: MINUS
38430: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38431: LD_VAR 0 4
38435: PUSH
38436: LD_VAR 0 5
38440: PPUSH
38441: LD_INT 3
38443: PPUSH
38444: CALL_OW 259
38448: PUSH
38449: LD_VAR 0 5
38453: PPUSH
38454: CALL_OW 432
38458: MINUS
38459: GREATEREQUAL
38460: IFFALSE 38478
// mech := result [ i ] ;
38462: LD_ADDR_VAR 0 5
38466: PUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_VAR 0 3
38476: ARRAY
38477: ST_TO_ADDR
// end ;
38478: GO 38387
38480: POP
38481: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38482: LD_VAR 0 1
38486: PPUSH
38487: LD_VAR 0 5
38491: PPUSH
38492: CALL_OW 135
// end ;
38496: LD_VAR 0 2
38500: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38501: LD_INT 0
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
// result := [ ] ;
38516: LD_ADDR_VAR 0 7
38520: PUSH
38521: EMPTY
38522: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 266
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: IN
38543: NOT
38544: IFFALSE 38548
// exit ;
38546: GO 40182
// if name then
38548: LD_VAR 0 3
38552: IFFALSE 38568
// SetBName ( base_dep , name ) ;
38554: LD_VAR 0 1
38558: PPUSH
38559: LD_VAR 0 3
38563: PPUSH
38564: CALL_OW 500
// base := GetBase ( base_dep ) ;
38568: LD_ADDR_VAR 0 15
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 274
38582: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38583: LD_ADDR_VAR 0 16
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 255
38597: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38598: LD_ADDR_VAR 0 17
38602: PUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: CALL_OW 248
38612: ST_TO_ADDR
// if sources then
38613: LD_VAR 0 5
38617: IFFALSE 38664
// for i = 1 to 3 do
38619: LD_ADDR_VAR 0 8
38623: PUSH
38624: DOUBLE
38625: LD_INT 1
38627: DEC
38628: ST_TO_ADDR
38629: LD_INT 3
38631: PUSH
38632: FOR_TO
38633: IFFALSE 38662
// AddResourceType ( base , i , sources [ i ] ) ;
38635: LD_VAR 0 15
38639: PPUSH
38640: LD_VAR 0 8
38644: PPUSH
38645: LD_VAR 0 5
38649: PUSH
38650: LD_VAR 0 8
38654: ARRAY
38655: PPUSH
38656: CALL_OW 276
38660: GO 38632
38662: POP
38663: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38664: LD_ADDR_VAR 0 18
38668: PUSH
38669: LD_VAR 0 15
38673: PPUSH
38674: LD_VAR 0 2
38678: PPUSH
38679: LD_INT 1
38681: PPUSH
38682: CALL 37925 0 3
38686: ST_TO_ADDR
// InitHc ;
38687: CALL_OW 19
// InitUc ;
38691: CALL_OW 18
// uc_side := side ;
38695: LD_ADDR_OWVAR 20
38699: PUSH
38700: LD_VAR 0 16
38704: ST_TO_ADDR
// uc_nation := nation ;
38705: LD_ADDR_OWVAR 21
38709: PUSH
38710: LD_VAR 0 17
38714: ST_TO_ADDR
// if buildings then
38715: LD_VAR 0 18
38719: IFFALSE 40041
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38721: LD_ADDR_VAR 0 19
38725: PUSH
38726: LD_VAR 0 18
38730: PPUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 30
38736: PUSH
38737: LD_INT 29
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 30
38746: PUSH
38747: LD_INT 30
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: PPUSH
38759: CALL_OW 72
38763: ST_TO_ADDR
// if tmp then
38764: LD_VAR 0 19
38768: IFFALSE 38816
// for i in tmp do
38770: LD_ADDR_VAR 0 8
38774: PUSH
38775: LD_VAR 0 19
38779: PUSH
38780: FOR_IN
38781: IFFALSE 38814
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38783: LD_VAR 0 8
38787: PPUSH
38788: CALL_OW 250
38792: PPUSH
38793: LD_VAR 0 8
38797: PPUSH
38798: CALL_OW 251
38802: PPUSH
38803: LD_VAR 0 16
38807: PPUSH
38808: CALL_OW 441
38812: GO 38780
38814: POP
38815: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38816: LD_VAR 0 18
38820: PPUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 30
38826: PUSH
38827: LD_INT 32
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 30
38836: PUSH
38837: LD_INT 33
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL_OW 72
38853: IFFALSE 38941
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38855: LD_ADDR_VAR 0 8
38859: PUSH
38860: LD_VAR 0 18
38864: PPUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 30
38870: PUSH
38871: LD_INT 32
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 30
38880: PUSH
38881: LD_INT 33
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: PPUSH
38893: CALL_OW 72
38897: PUSH
38898: FOR_IN
38899: IFFALSE 38939
// begin if not GetBWeapon ( i ) then
38901: LD_VAR 0 8
38905: PPUSH
38906: CALL_OW 269
38910: NOT
38911: IFFALSE 38937
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38913: LD_VAR 0 8
38917: PPUSH
38918: LD_VAR 0 8
38922: PPUSH
38923: LD_VAR 0 2
38927: PPUSH
38928: CALL 40187 0 2
38932: PPUSH
38933: CALL_OW 431
// end ;
38937: GO 38898
38939: POP
38940: POP
// end ; for i = 1 to personel do
38941: LD_ADDR_VAR 0 8
38945: PUSH
38946: DOUBLE
38947: LD_INT 1
38949: DEC
38950: ST_TO_ADDR
38951: LD_VAR 0 6
38955: PUSH
38956: FOR_TO
38957: IFFALSE 40021
// begin if i > 4 then
38959: LD_VAR 0 8
38963: PUSH
38964: LD_INT 4
38966: GREATER
38967: IFFALSE 38971
// break ;
38969: GO 40021
// case i of 1 :
38971: LD_VAR 0 8
38975: PUSH
38976: LD_INT 1
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 39064
38984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38985: LD_ADDR_VAR 0 12
38989: PUSH
38990: LD_VAR 0 18
38994: PPUSH
38995: LD_INT 22
38997: PUSH
38998: LD_VAR 0 16
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 58
39009: PUSH
39010: EMPTY
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 30
39018: PUSH
39019: LD_INT 32
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 30
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 5
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 72
39061: ST_TO_ADDR
39062: GO 39286
39064: LD_INT 2
39066: DOUBLE
39067: EQUAL
39068: IFTRUE 39072
39070: GO 39134
39072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39073: LD_ADDR_VAR 0 12
39077: PUSH
39078: LD_VAR 0 18
39082: PPUSH
39083: LD_INT 22
39085: PUSH
39086: LD_VAR 0 16
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 30
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PPUSH
39127: CALL_OW 72
39131: ST_TO_ADDR
39132: GO 39286
39134: LD_INT 3
39136: DOUBLE
39137: EQUAL
39138: IFTRUE 39142
39140: GO 39204
39142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39143: LD_ADDR_VAR 0 12
39147: PUSH
39148: LD_VAR 0 18
39152: PPUSH
39153: LD_INT 22
39155: PUSH
39156: LD_VAR 0 16
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 30
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 30
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 72
39201: ST_TO_ADDR
39202: GO 39286
39204: LD_INT 4
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39285
39212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39213: LD_ADDR_VAR 0 12
39217: PUSH
39218: LD_VAR 0 18
39222: PPUSH
39223: LD_INT 22
39225: PUSH
39226: LD_VAR 0 16
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 30
39240: PUSH
39241: LD_INT 6
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 30
39250: PUSH
39251: LD_INT 7
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 30
39260: PUSH
39261: LD_INT 8
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PPUSH
39278: CALL_OW 72
39282: ST_TO_ADDR
39283: GO 39286
39285: POP
// if i = 1 then
39286: LD_VAR 0 8
39290: PUSH
39291: LD_INT 1
39293: EQUAL
39294: IFFALSE 39405
// begin tmp := [ ] ;
39296: LD_ADDR_VAR 0 19
39300: PUSH
39301: EMPTY
39302: ST_TO_ADDR
// for j in f do
39303: LD_ADDR_VAR 0 9
39307: PUSH
39308: LD_VAR 0 12
39312: PUSH
39313: FOR_IN
39314: IFFALSE 39387
// if GetBType ( j ) = b_bunker then
39316: LD_VAR 0 9
39320: PPUSH
39321: CALL_OW 266
39325: PUSH
39326: LD_INT 32
39328: EQUAL
39329: IFFALSE 39356
// tmp := Insert ( tmp , 1 , j ) else
39331: LD_ADDR_VAR 0 19
39335: PUSH
39336: LD_VAR 0 19
39340: PPUSH
39341: LD_INT 1
39343: PPUSH
39344: LD_VAR 0 9
39348: PPUSH
39349: CALL_OW 2
39353: ST_TO_ADDR
39354: GO 39385
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39356: LD_ADDR_VAR 0 19
39360: PUSH
39361: LD_VAR 0 19
39365: PPUSH
39366: LD_VAR 0 19
39370: PUSH
39371: LD_INT 1
39373: PLUS
39374: PPUSH
39375: LD_VAR 0 9
39379: PPUSH
39380: CALL_OW 2
39384: ST_TO_ADDR
39385: GO 39313
39387: POP
39388: POP
// if tmp then
39389: LD_VAR 0 19
39393: IFFALSE 39405
// f := tmp ;
39395: LD_ADDR_VAR 0 12
39399: PUSH
39400: LD_VAR 0 19
39404: ST_TO_ADDR
// end ; x := personel [ i ] ;
39405: LD_ADDR_VAR 0 13
39409: PUSH
39410: LD_VAR 0 6
39414: PUSH
39415: LD_VAR 0 8
39419: ARRAY
39420: ST_TO_ADDR
// if x = - 1 then
39421: LD_VAR 0 13
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: EQUAL
39430: IFFALSE 39639
// begin for j in f do
39432: LD_ADDR_VAR 0 9
39436: PUSH
39437: LD_VAR 0 12
39441: PUSH
39442: FOR_IN
39443: IFFALSE 39635
// repeat InitHc ;
39445: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39449: LD_VAR 0 9
39453: PPUSH
39454: CALL_OW 266
39458: PUSH
39459: LD_INT 5
39461: EQUAL
39462: IFFALSE 39532
// begin if UnitsInside ( j ) < 3 then
39464: LD_VAR 0 9
39468: PPUSH
39469: CALL_OW 313
39473: PUSH
39474: LD_INT 3
39476: LESS
39477: IFFALSE 39513
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39479: LD_INT 0
39481: PPUSH
39482: LD_INT 5
39484: PUSH
39485: LD_INT 8
39487: PUSH
39488: LD_INT 9
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: PUSH
39496: LD_VAR 0 17
39500: ARRAY
39501: PPUSH
39502: LD_VAR 0 4
39506: PPUSH
39507: CALL_OW 380
39511: GO 39530
// PrepareHuman ( false , i , skill ) ;
39513: LD_INT 0
39515: PPUSH
39516: LD_VAR 0 8
39520: PPUSH
39521: LD_VAR 0 4
39525: PPUSH
39526: CALL_OW 380
// end else
39530: GO 39549
// PrepareHuman ( false , i , skill ) ;
39532: LD_INT 0
39534: PPUSH
39535: LD_VAR 0 8
39539: PPUSH
39540: LD_VAR 0 4
39544: PPUSH
39545: CALL_OW 380
// un := CreateHuman ;
39549: LD_ADDR_VAR 0 14
39553: PUSH
39554: CALL_OW 44
39558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39559: LD_ADDR_VAR 0 7
39563: PUSH
39564: LD_VAR 0 7
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: LD_VAR 0 14
39576: PPUSH
39577: CALL_OW 2
39581: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39582: LD_VAR 0 14
39586: PPUSH
39587: LD_VAR 0 9
39591: PPUSH
39592: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39596: LD_VAR 0 9
39600: PPUSH
39601: CALL_OW 313
39605: PUSH
39606: LD_INT 6
39608: EQUAL
39609: PUSH
39610: LD_VAR 0 9
39614: PPUSH
39615: CALL_OW 266
39619: PUSH
39620: LD_INT 32
39622: PUSH
39623: LD_INT 31
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: IN
39630: OR
39631: IFFALSE 39445
39633: GO 39442
39635: POP
39636: POP
// end else
39637: GO 40019
// for j = 1 to x do
39639: LD_ADDR_VAR 0 9
39643: PUSH
39644: DOUBLE
39645: LD_INT 1
39647: DEC
39648: ST_TO_ADDR
39649: LD_VAR 0 13
39653: PUSH
39654: FOR_TO
39655: IFFALSE 40017
// begin InitHc ;
39657: CALL_OW 19
// if not f then
39661: LD_VAR 0 12
39665: NOT
39666: IFFALSE 39755
// begin PrepareHuman ( false , i , skill ) ;
39668: LD_INT 0
39670: PPUSH
39671: LD_VAR 0 8
39675: PPUSH
39676: LD_VAR 0 4
39680: PPUSH
39681: CALL_OW 380
// un := CreateHuman ;
39685: LD_ADDR_VAR 0 14
39689: PUSH
39690: CALL_OW 44
39694: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39695: LD_ADDR_VAR 0 7
39699: PUSH
39700: LD_VAR 0 7
39704: PPUSH
39705: LD_INT 1
39707: PPUSH
39708: LD_VAR 0 14
39712: PPUSH
39713: CALL_OW 2
39717: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39718: LD_VAR 0 14
39722: PPUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 250
39732: PPUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 251
39742: PPUSH
39743: LD_INT 10
39745: PPUSH
39746: LD_INT 0
39748: PPUSH
39749: CALL_OW 50
// continue ;
39753: GO 39654
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39755: LD_VAR 0 12
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: PPUSH
39764: CALL_OW 313
39768: PUSH
39769: LD_VAR 0 12
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PPUSH
39778: CALL_OW 266
39782: PUSH
39783: LD_INT 32
39785: PUSH
39786: LD_INT 31
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: IN
39793: AND
39794: PUSH
39795: LD_VAR 0 12
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PPUSH
39804: CALL_OW 313
39808: PUSH
39809: LD_INT 6
39811: EQUAL
39812: OR
39813: IFFALSE 39833
// f := Delete ( f , 1 ) ;
39815: LD_ADDR_VAR 0 12
39819: PUSH
39820: LD_VAR 0 12
39824: PPUSH
39825: LD_INT 1
39827: PPUSH
39828: CALL_OW 3
39832: ST_TO_ADDR
// if not f then
39833: LD_VAR 0 12
39837: NOT
39838: IFFALSE 39856
// begin x := x + 2 ;
39840: LD_ADDR_VAR 0 13
39844: PUSH
39845: LD_VAR 0 13
39849: PUSH
39850: LD_INT 2
39852: PLUS
39853: ST_TO_ADDR
// continue ;
39854: GO 39654
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39856: LD_VAR 0 12
39860: PUSH
39861: LD_INT 1
39863: ARRAY
39864: PPUSH
39865: CALL_OW 266
39869: PUSH
39870: LD_INT 5
39872: EQUAL
39873: IFFALSE 39947
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39875: LD_VAR 0 12
39879: PUSH
39880: LD_INT 1
39882: ARRAY
39883: PPUSH
39884: CALL_OW 313
39888: PUSH
39889: LD_INT 3
39891: LESS
39892: IFFALSE 39928
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39894: LD_INT 0
39896: PPUSH
39897: LD_INT 5
39899: PUSH
39900: LD_INT 8
39902: PUSH
39903: LD_INT 9
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: PUSH
39911: LD_VAR 0 17
39915: ARRAY
39916: PPUSH
39917: LD_VAR 0 4
39921: PPUSH
39922: CALL_OW 380
39926: GO 39945
// PrepareHuman ( false , i , skill ) ;
39928: LD_INT 0
39930: PPUSH
39931: LD_VAR 0 8
39935: PPUSH
39936: LD_VAR 0 4
39940: PPUSH
39941: CALL_OW 380
// end else
39945: GO 39964
// PrepareHuman ( false , i , skill ) ;
39947: LD_INT 0
39949: PPUSH
39950: LD_VAR 0 8
39954: PPUSH
39955: LD_VAR 0 4
39959: PPUSH
39960: CALL_OW 380
// un := CreateHuman ;
39964: LD_ADDR_VAR 0 14
39968: PUSH
39969: CALL_OW 44
39973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39974: LD_ADDR_VAR 0 7
39978: PUSH
39979: LD_VAR 0 7
39983: PPUSH
39984: LD_INT 1
39986: PPUSH
39987: LD_VAR 0 14
39991: PPUSH
39992: CALL_OW 2
39996: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39997: LD_VAR 0 14
40001: PPUSH
40002: LD_VAR 0 12
40006: PUSH
40007: LD_INT 1
40009: ARRAY
40010: PPUSH
40011: CALL_OW 52
// end ;
40015: GO 39654
40017: POP
40018: POP
// end ;
40019: GO 38956
40021: POP
40022: POP
// result := result ^ buildings ;
40023: LD_ADDR_VAR 0 7
40027: PUSH
40028: LD_VAR 0 7
40032: PUSH
40033: LD_VAR 0 18
40037: ADD
40038: ST_TO_ADDR
// end else
40039: GO 40182
// begin for i = 1 to personel do
40041: LD_ADDR_VAR 0 8
40045: PUSH
40046: DOUBLE
40047: LD_INT 1
40049: DEC
40050: ST_TO_ADDR
40051: LD_VAR 0 6
40055: PUSH
40056: FOR_TO
40057: IFFALSE 40180
// begin if i > 4 then
40059: LD_VAR 0 8
40063: PUSH
40064: LD_INT 4
40066: GREATER
40067: IFFALSE 40071
// break ;
40069: GO 40180
// x := personel [ i ] ;
40071: LD_ADDR_VAR 0 13
40075: PUSH
40076: LD_VAR 0 6
40080: PUSH
40081: LD_VAR 0 8
40085: ARRAY
40086: ST_TO_ADDR
// if x = - 1 then
40087: LD_VAR 0 13
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: EQUAL
40096: IFFALSE 40100
// continue ;
40098: GO 40056
// PrepareHuman ( false , i , skill ) ;
40100: LD_INT 0
40102: PPUSH
40103: LD_VAR 0 8
40107: PPUSH
40108: LD_VAR 0 4
40112: PPUSH
40113: CALL_OW 380
// un := CreateHuman ;
40117: LD_ADDR_VAR 0 14
40121: PUSH
40122: CALL_OW 44
40126: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40127: LD_VAR 0 14
40131: PPUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 250
40141: PPUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 251
40151: PPUSH
40152: LD_INT 10
40154: PPUSH
40155: LD_INT 0
40157: PPUSH
40158: CALL_OW 50
// result := result ^ un ;
40162: LD_ADDR_VAR 0 7
40166: PUSH
40167: LD_VAR 0 7
40171: PUSH
40172: LD_VAR 0 14
40176: ADD
40177: ST_TO_ADDR
// end ;
40178: GO 40056
40180: POP
40181: POP
// end ; end ;
40182: LD_VAR 0 7
40186: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40187: LD_INT 0
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
// result := false ;
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: LD_INT 0
40212: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40213: LD_VAR 0 1
40217: NOT
40218: PUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 266
40228: PUSH
40229: LD_INT 32
40231: PUSH
40232: LD_INT 33
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: IN
40239: NOT
40240: OR
40241: IFFALSE 40245
// exit ;
40243: GO 41354
// nat := GetNation ( tower ) ;
40245: LD_ADDR_VAR 0 12
40249: PUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 248
40259: ST_TO_ADDR
// side := GetSide ( tower ) ;
40260: LD_ADDR_VAR 0 16
40264: PUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 255
40274: ST_TO_ADDR
// x := GetX ( tower ) ;
40275: LD_ADDR_VAR 0 10
40279: PUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: CALL_OW 250
40289: ST_TO_ADDR
// y := GetY ( tower ) ;
40290: LD_ADDR_VAR 0 11
40294: PUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: CALL_OW 251
40304: ST_TO_ADDR
// if not x or not y then
40305: LD_VAR 0 10
40309: NOT
40310: PUSH
40311: LD_VAR 0 11
40315: NOT
40316: OR
40317: IFFALSE 40321
// exit ;
40319: GO 41354
// weapon := 0 ;
40321: LD_ADDR_VAR 0 18
40325: PUSH
40326: LD_INT 0
40328: ST_TO_ADDR
// fac_list := [ ] ;
40329: LD_ADDR_VAR 0 17
40333: PUSH
40334: EMPTY
40335: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40336: LD_ADDR_VAR 0 6
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 274
40350: PPUSH
40351: LD_VAR 0 2
40355: PPUSH
40356: LD_INT 0
40358: PPUSH
40359: CALL 37925 0 3
40363: PPUSH
40364: LD_INT 30
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 72
40378: ST_TO_ADDR
// if not factories then
40379: LD_VAR 0 6
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 41354
// for i in factories do
40388: LD_ADDR_VAR 0 8
40392: PUSH
40393: LD_VAR 0 6
40397: PUSH
40398: FOR_IN
40399: IFFALSE 40424
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40401: LD_ADDR_VAR 0 17
40405: PUSH
40406: LD_VAR 0 17
40410: PUSH
40411: LD_VAR 0 8
40415: PPUSH
40416: CALL_OW 478
40420: UNION
40421: ST_TO_ADDR
40422: GO 40398
40424: POP
40425: POP
// if not fac_list then
40426: LD_VAR 0 17
40430: NOT
40431: IFFALSE 40435
// exit ;
40433: GO 41354
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40435: LD_ADDR_VAR 0 5
40439: PUSH
40440: LD_INT 4
40442: PUSH
40443: LD_INT 5
40445: PUSH
40446: LD_INT 9
40448: PUSH
40449: LD_INT 10
40451: PUSH
40452: LD_INT 6
40454: PUSH
40455: LD_INT 7
40457: PUSH
40458: LD_INT 11
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 27
40472: PUSH
40473: LD_INT 28
40475: PUSH
40476: LD_INT 26
40478: PUSH
40479: LD_INT 30
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 43
40490: PUSH
40491: LD_INT 44
40493: PUSH
40494: LD_INT 46
40496: PUSH
40497: LD_INT 45
40499: PUSH
40500: LD_INT 47
40502: PUSH
40503: LD_INT 49
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: PUSH
40519: LD_VAR 0 12
40523: ARRAY
40524: ST_TO_ADDR
// list := list isect fac_list ;
40525: LD_ADDR_VAR 0 5
40529: PUSH
40530: LD_VAR 0 5
40534: PUSH
40535: LD_VAR 0 17
40539: ISECT
40540: ST_TO_ADDR
// if not list then
40541: LD_VAR 0 5
40545: NOT
40546: IFFALSE 40550
// exit ;
40548: GO 41354
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40550: LD_VAR 0 12
40554: PUSH
40555: LD_INT 3
40557: EQUAL
40558: PUSH
40559: LD_INT 49
40561: PUSH
40562: LD_VAR 0 5
40566: IN
40567: AND
40568: PUSH
40569: LD_INT 31
40571: PPUSH
40572: LD_VAR 0 16
40576: PPUSH
40577: CALL_OW 321
40581: PUSH
40582: LD_INT 2
40584: EQUAL
40585: AND
40586: IFFALSE 40646
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40588: LD_INT 22
40590: PUSH
40591: LD_VAR 0 16
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 35
40602: PUSH
40603: LD_INT 49
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 91
40612: PUSH
40613: LD_VAR 0 1
40617: PUSH
40618: LD_INT 10
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: PPUSH
40631: CALL_OW 69
40635: NOT
40636: IFFALSE 40646
// weapon := ru_time_lapser ;
40638: LD_ADDR_VAR 0 18
40642: PUSH
40643: LD_INT 49
40645: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40646: LD_VAR 0 12
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: IN
40661: PUSH
40662: LD_INT 11
40664: PUSH
40665: LD_VAR 0 5
40669: IN
40670: PUSH
40671: LD_INT 30
40673: PUSH
40674: LD_VAR 0 5
40678: IN
40679: OR
40680: AND
40681: PUSH
40682: LD_INT 6
40684: PPUSH
40685: LD_VAR 0 16
40689: PPUSH
40690: CALL_OW 321
40694: PUSH
40695: LD_INT 2
40697: EQUAL
40698: AND
40699: IFFALSE 40864
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40701: LD_INT 22
40703: PUSH
40704: LD_VAR 0 16
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 35
40718: PUSH
40719: LD_INT 11
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 35
40728: PUSH
40729: LD_INT 30
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 91
40743: PUSH
40744: LD_VAR 0 1
40748: PUSH
40749: LD_INT 18
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: PPUSH
40762: CALL_OW 69
40766: NOT
40767: PUSH
40768: LD_INT 22
40770: PUSH
40771: LD_VAR 0 16
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 30
40785: PUSH
40786: LD_INT 32
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 30
40795: PUSH
40796: LD_INT 33
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 91
40810: PUSH
40811: LD_VAR 0 1
40815: PUSH
40816: LD_INT 12
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: PPUSH
40832: CALL_OW 69
40836: PUSH
40837: LD_INT 2
40839: GREATER
40840: AND
40841: IFFALSE 40864
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40843: LD_ADDR_VAR 0 18
40847: PUSH
40848: LD_INT 11
40850: PUSH
40851: LD_INT 30
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_VAR 0 12
40862: ARRAY
40863: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40864: LD_VAR 0 18
40868: NOT
40869: PUSH
40870: LD_INT 40
40872: PPUSH
40873: LD_VAR 0 16
40877: PPUSH
40878: CALL_OW 321
40882: PUSH
40883: LD_INT 2
40885: EQUAL
40886: AND
40887: PUSH
40888: LD_INT 7
40890: PUSH
40891: LD_VAR 0 5
40895: IN
40896: PUSH
40897: LD_INT 28
40899: PUSH
40900: LD_VAR 0 5
40904: IN
40905: OR
40906: PUSH
40907: LD_INT 45
40909: PUSH
40910: LD_VAR 0 5
40914: IN
40915: OR
40916: AND
40917: IFFALSE 41171
// begin hex := GetHexInfo ( x , y ) ;
40919: LD_ADDR_VAR 0 4
40923: PUSH
40924: LD_VAR 0 10
40928: PPUSH
40929: LD_VAR 0 11
40933: PPUSH
40934: CALL_OW 546
40938: ST_TO_ADDR
// if hex [ 1 ] then
40939: LD_VAR 0 4
40943: PUSH
40944: LD_INT 1
40946: ARRAY
40947: IFFALSE 40951
// exit ;
40949: GO 41354
// height := hex [ 2 ] ;
40951: LD_ADDR_VAR 0 15
40955: PUSH
40956: LD_VAR 0 4
40960: PUSH
40961: LD_INT 2
40963: ARRAY
40964: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40965: LD_ADDR_VAR 0 14
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 3
40978: PUSH
40979: LD_INT 5
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// for i in tmp do
40988: LD_ADDR_VAR 0 8
40992: PUSH
40993: LD_VAR 0 14
40997: PUSH
40998: FOR_IN
40999: IFFALSE 41169
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41001: LD_ADDR_VAR 0 9
41005: PUSH
41006: LD_VAR 0 10
41010: PPUSH
41011: LD_VAR 0 8
41015: PPUSH
41016: LD_INT 5
41018: PPUSH
41019: CALL_OW 272
41023: PUSH
41024: LD_VAR 0 11
41028: PPUSH
41029: LD_VAR 0 8
41033: PPUSH
41034: LD_INT 5
41036: PPUSH
41037: CALL_OW 273
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41046: LD_VAR 0 9
41050: PUSH
41051: LD_INT 1
41053: ARRAY
41054: PPUSH
41055: LD_VAR 0 9
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: PPUSH
41064: CALL_OW 488
41068: IFFALSE 41167
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41070: LD_ADDR_VAR 0 4
41074: PUSH
41075: LD_VAR 0 9
41079: PUSH
41080: LD_INT 1
41082: ARRAY
41083: PPUSH
41084: LD_VAR 0 9
41088: PUSH
41089: LD_INT 2
41091: ARRAY
41092: PPUSH
41093: CALL_OW 546
41097: ST_TO_ADDR
// if hex [ 1 ] then
41098: LD_VAR 0 4
41102: PUSH
41103: LD_INT 1
41105: ARRAY
41106: IFFALSE 41110
// continue ;
41108: GO 40998
// h := hex [ 2 ] ;
41110: LD_ADDR_VAR 0 13
41114: PUSH
41115: LD_VAR 0 4
41119: PUSH
41120: LD_INT 2
41122: ARRAY
41123: ST_TO_ADDR
// if h + 7 < height then
41124: LD_VAR 0 13
41128: PUSH
41129: LD_INT 7
41131: PLUS
41132: PUSH
41133: LD_VAR 0 15
41137: LESS
41138: IFFALSE 41167
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41140: LD_ADDR_VAR 0 18
41144: PUSH
41145: LD_INT 7
41147: PUSH
41148: LD_INT 28
41150: PUSH
41151: LD_INT 45
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: LIST
41158: PUSH
41159: LD_VAR 0 12
41163: ARRAY
41164: ST_TO_ADDR
// break ;
41165: GO 41169
// end ; end ; end ;
41167: GO 40998
41169: POP
41170: POP
// end ; if not weapon then
41171: LD_VAR 0 18
41175: NOT
41176: IFFALSE 41236
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41178: LD_ADDR_VAR 0 5
41182: PUSH
41183: LD_VAR 0 5
41187: PUSH
41188: LD_INT 11
41190: PUSH
41191: LD_INT 30
41193: PUSH
41194: LD_INT 49
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: DIFF
41202: ST_TO_ADDR
// if not list then
41203: LD_VAR 0 5
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 41354
// weapon := list [ rand ( 1 , list ) ] ;
41212: LD_ADDR_VAR 0 18
41216: PUSH
41217: LD_VAR 0 5
41221: PUSH
41222: LD_INT 1
41224: PPUSH
41225: LD_VAR 0 5
41229: PPUSH
41230: CALL_OW 12
41234: ARRAY
41235: ST_TO_ADDR
// end ; if weapon then
41236: LD_VAR 0 18
41240: IFFALSE 41354
// begin tmp := CostOfWeapon ( weapon ) ;
41242: LD_ADDR_VAR 0 14
41246: PUSH
41247: LD_VAR 0 18
41251: PPUSH
41252: CALL_OW 451
41256: ST_TO_ADDR
// j := GetBase ( tower ) ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 274
41271: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41272: LD_VAR 0 9
41276: PPUSH
41277: LD_INT 1
41279: PPUSH
41280: CALL_OW 275
41284: PUSH
41285: LD_VAR 0 14
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: GREATEREQUAL
41294: PUSH
41295: LD_VAR 0 9
41299: PPUSH
41300: LD_INT 2
41302: PPUSH
41303: CALL_OW 275
41307: PUSH
41308: LD_VAR 0 14
41312: PUSH
41313: LD_INT 2
41315: ARRAY
41316: GREATEREQUAL
41317: AND
41318: PUSH
41319: LD_VAR 0 9
41323: PPUSH
41324: LD_INT 3
41326: PPUSH
41327: CALL_OW 275
41331: PUSH
41332: LD_VAR 0 14
41336: PUSH
41337: LD_INT 3
41339: ARRAY
41340: GREATEREQUAL
41341: AND
41342: IFFALSE 41354
// result := weapon ;
41344: LD_ADDR_VAR 0 3
41348: PUSH
41349: LD_VAR 0 18
41353: ST_TO_ADDR
// end ; end ;
41354: LD_VAR 0 3
41358: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
// result := true ;
41363: LD_ADDR_VAR 0 3
41367: PUSH
41368: LD_INT 1
41370: ST_TO_ADDR
// if array1 = array2 then
41371: LD_VAR 0 1
41375: PUSH
41376: LD_VAR 0 2
41380: EQUAL
41381: IFFALSE 41441
// begin for i = 1 to array1 do
41383: LD_ADDR_VAR 0 4
41387: PUSH
41388: DOUBLE
41389: LD_INT 1
41391: DEC
41392: ST_TO_ADDR
41393: LD_VAR 0 1
41397: PUSH
41398: FOR_TO
41399: IFFALSE 41437
// if array1 [ i ] <> array2 [ i ] then
41401: LD_VAR 0 1
41405: PUSH
41406: LD_VAR 0 4
41410: ARRAY
41411: PUSH
41412: LD_VAR 0 2
41416: PUSH
41417: LD_VAR 0 4
41421: ARRAY
41422: NONEQUAL
41423: IFFALSE 41435
// begin result := false ;
41425: LD_ADDR_VAR 0 3
41429: PUSH
41430: LD_INT 0
41432: ST_TO_ADDR
// break ;
41433: GO 41437
// end ;
41435: GO 41398
41437: POP
41438: POP
// end else
41439: GO 41449
// result := false ;
41441: LD_ADDR_VAR 0 3
41445: PUSH
41446: LD_INT 0
41448: ST_TO_ADDR
// end ;
41449: LD_VAR 0 3
41453: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41454: LD_INT 0
41456: PPUSH
41457: PPUSH
// if not array1 or not array2 then
41458: LD_VAR 0 1
41462: NOT
41463: PUSH
41464: LD_VAR 0 2
41468: NOT
41469: OR
41470: IFFALSE 41474
// exit ;
41472: GO 41538
// result := true ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_INT 1
41481: ST_TO_ADDR
// for i = 1 to array1 do
41482: LD_ADDR_VAR 0 4
41486: PUSH
41487: DOUBLE
41488: LD_INT 1
41490: DEC
41491: ST_TO_ADDR
41492: LD_VAR 0 1
41496: PUSH
41497: FOR_TO
41498: IFFALSE 41536
// if array1 [ i ] <> array2 [ i ] then
41500: LD_VAR 0 1
41504: PUSH
41505: LD_VAR 0 4
41509: ARRAY
41510: PUSH
41511: LD_VAR 0 2
41515: PUSH
41516: LD_VAR 0 4
41520: ARRAY
41521: NONEQUAL
41522: IFFALSE 41534
// begin result := false ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// break ;
41532: GO 41536
// end ;
41534: GO 41497
41536: POP
41537: POP
// end ;
41538: LD_VAR 0 3
41542: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41543: LD_INT 0
41545: PPUSH
41546: PPUSH
41547: PPUSH
// pom := GetBase ( fac ) ;
41548: LD_ADDR_VAR 0 5
41552: PUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 274
41562: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41563: LD_ADDR_VAR 0 4
41567: PUSH
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: LD_VAR 0 2
41581: PUSH
41582: LD_INT 2
41584: ARRAY
41585: PPUSH
41586: LD_VAR 0 2
41590: PUSH
41591: LD_INT 3
41593: ARRAY
41594: PPUSH
41595: LD_VAR 0 2
41599: PUSH
41600: LD_INT 4
41602: ARRAY
41603: PPUSH
41604: CALL_OW 449
41608: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41609: LD_ADDR_VAR 0 3
41613: PUSH
41614: LD_VAR 0 5
41618: PPUSH
41619: LD_INT 1
41621: PPUSH
41622: CALL_OW 275
41626: PUSH
41627: LD_VAR 0 4
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: GREATEREQUAL
41636: PUSH
41637: LD_VAR 0 5
41641: PPUSH
41642: LD_INT 2
41644: PPUSH
41645: CALL_OW 275
41649: PUSH
41650: LD_VAR 0 4
41654: PUSH
41655: LD_INT 2
41657: ARRAY
41658: GREATEREQUAL
41659: AND
41660: PUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: LD_INT 3
41668: PPUSH
41669: CALL_OW 275
41673: PUSH
41674: LD_VAR 0 4
41678: PUSH
41679: LD_INT 3
41681: ARRAY
41682: GREATEREQUAL
41683: AND
41684: ST_TO_ADDR
// end ;
41685: LD_VAR 0 3
41689: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41690: LD_INT 0
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
// pom := GetBase ( building ) ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL_OW 274
41710: ST_TO_ADDR
// if not pom then
41711: LD_VAR 0 3
41715: NOT
41716: IFFALSE 41720
// exit ;
41718: GO 41890
// btype := GetBType ( building ) ;
41720: LD_ADDR_VAR 0 5
41724: PUSH
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 266
41734: ST_TO_ADDR
// if btype = b_armoury then
41735: LD_VAR 0 5
41739: PUSH
41740: LD_INT 4
41742: EQUAL
41743: IFFALSE 41753
// btype := b_barracks ;
41745: LD_ADDR_VAR 0 5
41749: PUSH
41750: LD_INT 5
41752: ST_TO_ADDR
// if btype = b_depot then
41753: LD_VAR 0 5
41757: PUSH
41758: LD_INT 0
41760: EQUAL
41761: IFFALSE 41771
// btype := b_warehouse ;
41763: LD_ADDR_VAR 0 5
41767: PUSH
41768: LD_INT 1
41770: ST_TO_ADDR
// if btype = b_workshop then
41771: LD_VAR 0 5
41775: PUSH
41776: LD_INT 2
41778: EQUAL
41779: IFFALSE 41789
// btype := b_factory ;
41781: LD_ADDR_VAR 0 5
41785: PUSH
41786: LD_INT 3
41788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41789: LD_ADDR_VAR 0 4
41793: PUSH
41794: LD_VAR 0 5
41798: PPUSH
41799: LD_VAR 0 1
41803: PPUSH
41804: CALL_OW 248
41808: PPUSH
41809: CALL_OW 450
41813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41814: LD_ADDR_VAR 0 2
41818: PUSH
41819: LD_VAR 0 3
41823: PPUSH
41824: LD_INT 1
41826: PPUSH
41827: CALL_OW 275
41831: PUSH
41832: LD_VAR 0 4
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: GREATEREQUAL
41841: PUSH
41842: LD_VAR 0 3
41846: PPUSH
41847: LD_INT 2
41849: PPUSH
41850: CALL_OW 275
41854: PUSH
41855: LD_VAR 0 4
41859: PUSH
41860: LD_INT 2
41862: ARRAY
41863: GREATEREQUAL
41864: AND
41865: PUSH
41866: LD_VAR 0 3
41870: PPUSH
41871: LD_INT 3
41873: PPUSH
41874: CALL_OW 275
41878: PUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 3
41886: ARRAY
41887: GREATEREQUAL
41888: AND
41889: ST_TO_ADDR
// end ;
41890: LD_VAR 0 2
41894: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41895: LD_INT 0
41897: PPUSH
41898: PPUSH
41899: PPUSH
// pom := GetBase ( building ) ;
41900: LD_ADDR_VAR 0 4
41904: PUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 274
41914: ST_TO_ADDR
// if not pom then
41915: LD_VAR 0 4
41919: NOT
41920: IFFALSE 41924
// exit ;
41922: GO 42025
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41924: LD_ADDR_VAR 0 5
41928: PUSH
41929: LD_VAR 0 2
41933: PPUSH
41934: LD_VAR 0 1
41938: PPUSH
41939: CALL_OW 248
41943: PPUSH
41944: CALL_OW 450
41948: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_VAR 0 4
41958: PPUSH
41959: LD_INT 1
41961: PPUSH
41962: CALL_OW 275
41966: PUSH
41967: LD_VAR 0 5
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: GREATEREQUAL
41976: PUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: LD_INT 2
41984: PPUSH
41985: CALL_OW 275
41989: PUSH
41990: LD_VAR 0 5
41994: PUSH
41995: LD_INT 2
41997: ARRAY
41998: GREATEREQUAL
41999: AND
42000: PUSH
42001: LD_VAR 0 4
42005: PPUSH
42006: LD_INT 3
42008: PPUSH
42009: CALL_OW 275
42013: PUSH
42014: LD_VAR 0 5
42018: PUSH
42019: LD_INT 3
42021: ARRAY
42022: GREATEREQUAL
42023: AND
42024: ST_TO_ADDR
// end ;
42025: LD_VAR 0 3
42029: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42030: LD_INT 0
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
// result := false ;
42043: LD_ADDR_VAR 0 8
42047: PUSH
42048: LD_INT 0
42050: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42051: LD_VAR 0 5
42055: NOT
42056: PUSH
42057: LD_VAR 0 1
42061: NOT
42062: OR
42063: PUSH
42064: LD_VAR 0 2
42068: NOT
42069: OR
42070: PUSH
42071: LD_VAR 0 3
42075: NOT
42076: OR
42077: IFFALSE 42081
// exit ;
42079: GO 42895
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42081: LD_ADDR_VAR 0 14
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: LD_VAR 0 2
42095: PPUSH
42096: LD_VAR 0 3
42100: PPUSH
42101: LD_VAR 0 4
42105: PPUSH
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 1
42113: ARRAY
42114: PPUSH
42115: CALL_OW 248
42119: PPUSH
42120: LD_INT 0
42122: PPUSH
42123: CALL 44132 0 6
42127: ST_TO_ADDR
// if not hexes then
42128: LD_VAR 0 14
42132: NOT
42133: IFFALSE 42137
// exit ;
42135: GO 42895
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42137: LD_ADDR_VAR 0 17
42141: PUSH
42142: LD_VAR 0 5
42146: PPUSH
42147: LD_INT 22
42149: PUSH
42150: LD_VAR 0 13
42154: PPUSH
42155: CALL_OW 255
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 30
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 30
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PPUSH
42196: CALL_OW 72
42200: ST_TO_ADDR
// for i = 1 to hexes do
42201: LD_ADDR_VAR 0 9
42205: PUSH
42206: DOUBLE
42207: LD_INT 1
42209: DEC
42210: ST_TO_ADDR
42211: LD_VAR 0 14
42215: PUSH
42216: FOR_TO
42217: IFFALSE 42893
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42219: LD_ADDR_VAR 0 13
42223: PUSH
42224: LD_VAR 0 14
42228: PUSH
42229: LD_VAR 0 9
42233: ARRAY
42234: PUSH
42235: LD_INT 1
42237: ARRAY
42238: PPUSH
42239: LD_VAR 0 14
42243: PUSH
42244: LD_VAR 0 9
42248: ARRAY
42249: PUSH
42250: LD_INT 2
42252: ARRAY
42253: PPUSH
42254: CALL_OW 428
42258: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42259: LD_VAR 0 14
42263: PUSH
42264: LD_VAR 0 9
42268: ARRAY
42269: PUSH
42270: LD_INT 1
42272: ARRAY
42273: PPUSH
42274: LD_VAR 0 14
42278: PUSH
42279: LD_VAR 0 9
42283: ARRAY
42284: PUSH
42285: LD_INT 2
42287: ARRAY
42288: PPUSH
42289: CALL_OW 351
42293: PUSH
42294: LD_VAR 0 14
42298: PUSH
42299: LD_VAR 0 9
42303: ARRAY
42304: PUSH
42305: LD_INT 1
42307: ARRAY
42308: PPUSH
42309: LD_VAR 0 14
42313: PUSH
42314: LD_VAR 0 9
42318: ARRAY
42319: PUSH
42320: LD_INT 2
42322: ARRAY
42323: PPUSH
42324: CALL_OW 488
42328: NOT
42329: OR
42330: PUSH
42331: LD_VAR 0 13
42335: PPUSH
42336: CALL_OW 247
42340: PUSH
42341: LD_INT 3
42343: EQUAL
42344: OR
42345: IFFALSE 42351
// exit ;
42347: POP
42348: POP
42349: GO 42895
// if not tmp then
42351: LD_VAR 0 13
42355: NOT
42356: IFFALSE 42360
// continue ;
42358: GO 42216
// result := true ;
42360: LD_ADDR_VAR 0 8
42364: PUSH
42365: LD_INT 1
42367: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42368: LD_VAR 0 6
42372: PUSH
42373: LD_VAR 0 13
42377: PPUSH
42378: CALL_OW 247
42382: PUSH
42383: LD_INT 2
42385: EQUAL
42386: AND
42387: PUSH
42388: LD_VAR 0 13
42392: PPUSH
42393: CALL_OW 263
42397: PUSH
42398: LD_INT 1
42400: EQUAL
42401: AND
42402: IFFALSE 42566
// begin if IsDrivenBy ( tmp ) then
42404: LD_VAR 0 13
42408: PPUSH
42409: CALL_OW 311
42413: IFFALSE 42417
// continue ;
42415: GO 42216
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42417: LD_VAR 0 6
42421: PPUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 60
42427: PUSH
42428: EMPTY
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: LD_INT 55
42440: PUSH
42441: EMPTY
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PPUSH
42452: CALL_OW 72
42456: IFFALSE 42564
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42458: LD_ADDR_VAR 0 18
42462: PUSH
42463: LD_VAR 0 6
42467: PPUSH
42468: LD_INT 3
42470: PUSH
42471: LD_INT 60
42473: PUSH
42474: EMPTY
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: LD_INT 55
42486: PUSH
42487: EMPTY
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PPUSH
42498: CALL_OW 72
42502: PUSH
42503: LD_INT 1
42505: ARRAY
42506: ST_TO_ADDR
// if IsInUnit ( driver ) then
42507: LD_VAR 0 18
42511: PPUSH
42512: CALL_OW 310
42516: IFFALSE 42527
// ComExit ( driver ) ;
42518: LD_VAR 0 18
42522: PPUSH
42523: CALL 67837 0 1
// AddComEnterUnit ( driver , tmp ) ;
42527: LD_VAR 0 18
42531: PPUSH
42532: LD_VAR 0 13
42536: PPUSH
42537: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42541: LD_VAR 0 18
42545: PPUSH
42546: LD_VAR 0 7
42550: PPUSH
42551: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42555: LD_VAR 0 18
42559: PPUSH
42560: CALL_OW 181
// end ; continue ;
42564: GO 42216
// end ; if not cleaners or not tmp in cleaners then
42566: LD_VAR 0 6
42570: NOT
42571: PUSH
42572: LD_VAR 0 13
42576: PUSH
42577: LD_VAR 0 6
42581: IN
42582: NOT
42583: OR
42584: IFFALSE 42891
// begin if dep then
42586: LD_VAR 0 17
42590: IFFALSE 42726
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42592: LD_ADDR_VAR 0 16
42596: PUSH
42597: LD_VAR 0 17
42601: PUSH
42602: LD_INT 1
42604: ARRAY
42605: PPUSH
42606: CALL_OW 250
42610: PPUSH
42611: LD_VAR 0 17
42615: PUSH
42616: LD_INT 1
42618: ARRAY
42619: PPUSH
42620: CALL_OW 254
42624: PPUSH
42625: LD_INT 5
42627: PPUSH
42628: CALL_OW 272
42632: PUSH
42633: LD_VAR 0 17
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: CALL_OW 251
42646: PPUSH
42647: LD_VAR 0 17
42651: PUSH
42652: LD_INT 1
42654: ARRAY
42655: PPUSH
42656: CALL_OW 254
42660: PPUSH
42661: LD_INT 5
42663: PPUSH
42664: CALL_OW 273
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42673: LD_VAR 0 16
42677: PUSH
42678: LD_INT 1
42680: ARRAY
42681: PPUSH
42682: LD_VAR 0 16
42686: PUSH
42687: LD_INT 2
42689: ARRAY
42690: PPUSH
42691: CALL_OW 488
42695: IFFALSE 42726
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42697: LD_VAR 0 13
42701: PPUSH
42702: LD_VAR 0 16
42706: PUSH
42707: LD_INT 1
42709: ARRAY
42710: PPUSH
42711: LD_VAR 0 16
42715: PUSH
42716: LD_INT 2
42718: ARRAY
42719: PPUSH
42720: CALL_OW 111
// continue ;
42724: GO 42216
// end ; end ; r := GetDir ( tmp ) ;
42726: LD_ADDR_VAR 0 15
42730: PUSH
42731: LD_VAR 0 13
42735: PPUSH
42736: CALL_OW 254
42740: ST_TO_ADDR
// if r = 5 then
42741: LD_VAR 0 15
42745: PUSH
42746: LD_INT 5
42748: EQUAL
42749: IFFALSE 42759
// r := 0 ;
42751: LD_ADDR_VAR 0 15
42755: PUSH
42756: LD_INT 0
42758: ST_TO_ADDR
// for j = r to 5 do
42759: LD_ADDR_VAR 0 10
42763: PUSH
42764: DOUBLE
42765: LD_VAR 0 15
42769: DEC
42770: ST_TO_ADDR
42771: LD_INT 5
42773: PUSH
42774: FOR_TO
42775: IFFALSE 42889
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42777: LD_ADDR_VAR 0 11
42781: PUSH
42782: LD_VAR 0 13
42786: PPUSH
42787: CALL_OW 250
42791: PPUSH
42792: LD_VAR 0 10
42796: PPUSH
42797: LD_INT 2
42799: PPUSH
42800: CALL_OW 272
42804: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42805: LD_ADDR_VAR 0 12
42809: PUSH
42810: LD_VAR 0 13
42814: PPUSH
42815: CALL_OW 251
42819: PPUSH
42820: LD_VAR 0 10
42824: PPUSH
42825: LD_INT 2
42827: PPUSH
42828: CALL_OW 273
42832: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42833: LD_VAR 0 11
42837: PPUSH
42838: LD_VAR 0 12
42842: PPUSH
42843: CALL_OW 488
42847: PUSH
42848: LD_VAR 0 11
42852: PPUSH
42853: LD_VAR 0 12
42857: PPUSH
42858: CALL_OW 428
42862: NOT
42863: AND
42864: IFFALSE 42887
// begin ComMoveXY ( tmp , _x , _y ) ;
42866: LD_VAR 0 13
42870: PPUSH
42871: LD_VAR 0 11
42875: PPUSH
42876: LD_VAR 0 12
42880: PPUSH
42881: CALL_OW 111
// break ;
42885: GO 42889
// end ; end ;
42887: GO 42774
42889: POP
42890: POP
// end ; end ;
42891: GO 42216
42893: POP
42894: POP
// end ;
42895: LD_VAR 0 8
42899: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42900: LD_INT 0
42902: PPUSH
// result := true ;
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 1
42910: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42911: LD_VAR 0 2
42915: PUSH
42916: LD_INT 24
42918: DOUBLE
42919: EQUAL
42920: IFTRUE 42930
42922: LD_INT 33
42924: DOUBLE
42925: EQUAL
42926: IFTRUE 42930
42928: GO 42955
42930: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_INT 32
42938: PPUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: CALL_OW 321
42948: PUSH
42949: LD_INT 2
42951: EQUAL
42952: ST_TO_ADDR
42953: GO 43275
42955: LD_INT 20
42957: DOUBLE
42958: EQUAL
42959: IFTRUE 42963
42961: GO 42988
42963: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42964: LD_ADDR_VAR 0 3
42968: PUSH
42969: LD_INT 6
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 321
42981: PUSH
42982: LD_INT 2
42984: EQUAL
42985: ST_TO_ADDR
42986: GO 43275
42988: LD_INT 22
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 43002
42994: LD_INT 36
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43002
43000: GO 43027
43002: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: LD_INT 15
43010: PPUSH
43011: LD_VAR 0 1
43015: PPUSH
43016: CALL_OW 321
43020: PUSH
43021: LD_INT 2
43023: EQUAL
43024: ST_TO_ADDR
43025: GO 43275
43027: LD_INT 30
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43060
43035: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: LD_INT 20
43043: PPUSH
43044: LD_VAR 0 1
43048: PPUSH
43049: CALL_OW 321
43053: PUSH
43054: LD_INT 2
43056: EQUAL
43057: ST_TO_ADDR
43058: GO 43275
43060: LD_INT 28
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43074
43066: LD_INT 21
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43099
43074: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 21
43082: PPUSH
43083: LD_VAR 0 1
43087: PPUSH
43088: CALL_OW 321
43092: PUSH
43093: LD_INT 2
43095: EQUAL
43096: ST_TO_ADDR
43097: GO 43275
43099: LD_INT 16
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43107
43105: GO 43134
43107: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_EXP 110
43117: PPUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 321
43127: PUSH
43128: LD_INT 2
43130: EQUAL
43131: ST_TO_ADDR
43132: GO 43275
43134: LD_INT 19
43136: DOUBLE
43137: EQUAL
43138: IFTRUE 43148
43140: LD_INT 23
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43175
43148: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_EXP 109
43158: PPUSH
43159: LD_VAR 0 1
43163: PPUSH
43164: CALL_OW 321
43168: PUSH
43169: LD_INT 2
43171: EQUAL
43172: ST_TO_ADDR
43173: GO 43275
43175: LD_INT 17
43177: DOUBLE
43178: EQUAL
43179: IFTRUE 43183
43181: GO 43208
43183: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_INT 39
43191: PPUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 321
43201: PUSH
43202: LD_INT 2
43204: EQUAL
43205: ST_TO_ADDR
43206: GO 43275
43208: LD_INT 18
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43241
43216: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 40
43224: PPUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: CALL_OW 321
43234: PUSH
43235: LD_INT 2
43237: EQUAL
43238: ST_TO_ADDR
43239: GO 43275
43241: LD_INT 27
43243: DOUBLE
43244: EQUAL
43245: IFTRUE 43249
43247: GO 43274
43249: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_INT 35
43257: PPUSH
43258: LD_VAR 0 1
43262: PPUSH
43263: CALL_OW 321
43267: PUSH
43268: LD_INT 2
43270: EQUAL
43271: ST_TO_ADDR
43272: GO 43275
43274: POP
// end ;
43275: LD_VAR 0 3
43279: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43280: LD_INT 0
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
// result := false ;
43293: LD_ADDR_VAR 0 6
43297: PUSH
43298: LD_INT 0
43300: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43301: LD_VAR 0 1
43305: NOT
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 266
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: IN
43327: NOT
43328: OR
43329: PUSH
43330: LD_VAR 0 2
43334: NOT
43335: OR
43336: PUSH
43337: LD_VAR 0 5
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: IN
43368: NOT
43369: OR
43370: PUSH
43371: LD_VAR 0 3
43375: PPUSH
43376: LD_VAR 0 4
43380: PPUSH
43381: CALL_OW 488
43385: NOT
43386: OR
43387: IFFALSE 43391
// exit ;
43389: GO 44127
// side := GetSide ( depot ) ;
43391: LD_ADDR_VAR 0 9
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 255
43405: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43406: LD_VAR 0 9
43410: PPUSH
43411: LD_VAR 0 2
43415: PPUSH
43416: CALL 42900 0 2
43420: NOT
43421: IFFALSE 43425
// exit ;
43423: GO 44127
// pom := GetBase ( depot ) ;
43425: LD_ADDR_VAR 0 10
43429: PUSH
43430: LD_VAR 0 1
43434: PPUSH
43435: CALL_OW 274
43439: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43440: LD_ADDR_VAR 0 11
43444: PUSH
43445: LD_VAR 0 2
43449: PPUSH
43450: LD_VAR 0 1
43454: PPUSH
43455: CALL_OW 248
43459: PPUSH
43460: CALL_OW 450
43464: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43465: LD_VAR 0 10
43469: PPUSH
43470: LD_INT 1
43472: PPUSH
43473: CALL_OW 275
43477: PUSH
43478: LD_VAR 0 11
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: GREATEREQUAL
43487: PUSH
43488: LD_VAR 0 10
43492: PPUSH
43493: LD_INT 2
43495: PPUSH
43496: CALL_OW 275
43500: PUSH
43501: LD_VAR 0 11
43505: PUSH
43506: LD_INT 2
43508: ARRAY
43509: GREATEREQUAL
43510: AND
43511: PUSH
43512: LD_VAR 0 10
43516: PPUSH
43517: LD_INT 3
43519: PPUSH
43520: CALL_OW 275
43524: PUSH
43525: LD_VAR 0 11
43529: PUSH
43530: LD_INT 3
43532: ARRAY
43533: GREATEREQUAL
43534: AND
43535: NOT
43536: IFFALSE 43540
// exit ;
43538: GO 44127
// if GetBType ( depot ) = b_depot then
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 266
43549: PUSH
43550: LD_INT 0
43552: EQUAL
43553: IFFALSE 43565
// dist := 28 else
43555: LD_ADDR_VAR 0 14
43559: PUSH
43560: LD_INT 28
43562: ST_TO_ADDR
43563: GO 43573
// dist := 36 ;
43565: LD_ADDR_VAR 0 14
43569: PUSH
43570: LD_INT 36
43572: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43573: LD_VAR 0 1
43577: PPUSH
43578: LD_VAR 0 3
43582: PPUSH
43583: LD_VAR 0 4
43587: PPUSH
43588: CALL_OW 297
43592: PUSH
43593: LD_VAR 0 14
43597: GREATER
43598: IFFALSE 43602
// exit ;
43600: GO 44127
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43602: LD_ADDR_VAR 0 12
43606: PUSH
43607: LD_VAR 0 2
43611: PPUSH
43612: LD_VAR 0 3
43616: PPUSH
43617: LD_VAR 0 4
43621: PPUSH
43622: LD_VAR 0 5
43626: PPUSH
43627: LD_VAR 0 1
43631: PPUSH
43632: CALL_OW 248
43636: PPUSH
43637: LD_INT 0
43639: PPUSH
43640: CALL 44132 0 6
43644: ST_TO_ADDR
// if not hexes then
43645: LD_VAR 0 12
43649: NOT
43650: IFFALSE 43654
// exit ;
43652: GO 44127
// hex := GetHexInfo ( x , y ) ;
43654: LD_ADDR_VAR 0 15
43658: PUSH
43659: LD_VAR 0 3
43663: PPUSH
43664: LD_VAR 0 4
43668: PPUSH
43669: CALL_OW 546
43673: ST_TO_ADDR
// if hex [ 1 ] then
43674: LD_VAR 0 15
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: IFFALSE 43686
// exit ;
43684: GO 44127
// height := hex [ 2 ] ;
43686: LD_ADDR_VAR 0 13
43690: PUSH
43691: LD_VAR 0 15
43695: PUSH
43696: LD_INT 2
43698: ARRAY
43699: ST_TO_ADDR
// for i = 1 to hexes do
43700: LD_ADDR_VAR 0 7
43704: PUSH
43705: DOUBLE
43706: LD_INT 1
43708: DEC
43709: ST_TO_ADDR
43710: LD_VAR 0 12
43714: PUSH
43715: FOR_TO
43716: IFFALSE 44046
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43718: LD_VAR 0 12
43722: PUSH
43723: LD_VAR 0 7
43727: ARRAY
43728: PUSH
43729: LD_INT 1
43731: ARRAY
43732: PPUSH
43733: LD_VAR 0 12
43737: PUSH
43738: LD_VAR 0 7
43742: ARRAY
43743: PUSH
43744: LD_INT 2
43746: ARRAY
43747: PPUSH
43748: CALL_OW 488
43752: NOT
43753: PUSH
43754: LD_VAR 0 12
43758: PUSH
43759: LD_VAR 0 7
43763: ARRAY
43764: PUSH
43765: LD_INT 1
43767: ARRAY
43768: PPUSH
43769: LD_VAR 0 12
43773: PUSH
43774: LD_VAR 0 7
43778: ARRAY
43779: PUSH
43780: LD_INT 2
43782: ARRAY
43783: PPUSH
43784: CALL_OW 428
43788: PUSH
43789: LD_INT 0
43791: GREATER
43792: OR
43793: PUSH
43794: LD_VAR 0 12
43798: PUSH
43799: LD_VAR 0 7
43803: ARRAY
43804: PUSH
43805: LD_INT 1
43807: ARRAY
43808: PPUSH
43809: LD_VAR 0 12
43813: PUSH
43814: LD_VAR 0 7
43818: ARRAY
43819: PUSH
43820: LD_INT 2
43822: ARRAY
43823: PPUSH
43824: CALL_OW 351
43828: OR
43829: IFFALSE 43835
// exit ;
43831: POP
43832: POP
43833: GO 44127
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43835: LD_ADDR_VAR 0 8
43839: PUSH
43840: LD_VAR 0 12
43844: PUSH
43845: LD_VAR 0 7
43849: ARRAY
43850: PUSH
43851: LD_INT 1
43853: ARRAY
43854: PPUSH
43855: LD_VAR 0 12
43859: PUSH
43860: LD_VAR 0 7
43864: ARRAY
43865: PUSH
43866: LD_INT 2
43868: ARRAY
43869: PPUSH
43870: CALL_OW 546
43874: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43875: LD_VAR 0 8
43879: PUSH
43880: LD_INT 1
43882: ARRAY
43883: PUSH
43884: LD_VAR 0 8
43888: PUSH
43889: LD_INT 2
43891: ARRAY
43892: PUSH
43893: LD_VAR 0 13
43897: PUSH
43898: LD_INT 2
43900: PLUS
43901: GREATER
43902: OR
43903: PUSH
43904: LD_VAR 0 8
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PUSH
43913: LD_VAR 0 13
43917: PUSH
43918: LD_INT 2
43920: MINUS
43921: LESS
43922: OR
43923: PUSH
43924: LD_VAR 0 8
43928: PUSH
43929: LD_INT 3
43931: ARRAY
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 8
43938: PUSH
43939: LD_INT 9
43941: PUSH
43942: LD_INT 10
43944: PUSH
43945: LD_INT 11
43947: PUSH
43948: LD_INT 12
43950: PUSH
43951: LD_INT 13
43953: PUSH
43954: LD_INT 16
43956: PUSH
43957: LD_INT 17
43959: PUSH
43960: LD_INT 18
43962: PUSH
43963: LD_INT 19
43965: PUSH
43966: LD_INT 20
43968: PUSH
43969: LD_INT 21
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: IN
43987: NOT
43988: OR
43989: PUSH
43990: LD_VAR 0 8
43994: PUSH
43995: LD_INT 5
43997: ARRAY
43998: NOT
43999: OR
44000: PUSH
44001: LD_VAR 0 8
44005: PUSH
44006: LD_INT 6
44008: ARRAY
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 7
44018: PUSH
44019: LD_INT 9
44021: PUSH
44022: LD_INT 10
44024: PUSH
44025: LD_INT 11
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: IN
44036: NOT
44037: OR
44038: IFFALSE 44044
// exit ;
44040: POP
44041: POP
44042: GO 44127
// end ;
44044: GO 43715
44046: POP
44047: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44048: LD_VAR 0 9
44052: PPUSH
44053: LD_VAR 0 3
44057: PPUSH
44058: LD_VAR 0 4
44062: PPUSH
44063: LD_INT 20
44065: PPUSH
44066: CALL 36073 0 4
44070: PUSH
44071: LD_INT 4
44073: ARRAY
44074: IFFALSE 44078
// exit ;
44076: GO 44127
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44078: LD_VAR 0 2
44082: PUSH
44083: LD_INT 29
44085: PUSH
44086: LD_INT 30
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: IN
44093: PUSH
44094: LD_VAR 0 3
44098: PPUSH
44099: LD_VAR 0 4
44103: PPUSH
44104: LD_VAR 0 9
44108: PPUSH
44109: CALL_OW 440
44113: NOT
44114: AND
44115: IFFALSE 44119
// exit ;
44117: GO 44127
// result := true ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_INT 1
44126: ST_TO_ADDR
// end ;
44127: LD_VAR 0 6
44131: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44132: LD_INT 0
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
// result = [ ] ;
44192: LD_ADDR_VAR 0 7
44196: PUSH
44197: EMPTY
44198: ST_TO_ADDR
// temp_list = [ ] ;
44199: LD_ADDR_VAR 0 9
44203: PUSH
44204: EMPTY
44205: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44206: LD_VAR 0 4
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 4
44225: PUSH
44226: LD_INT 5
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: IN
44237: NOT
44238: PUSH
44239: LD_VAR 0 1
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: IN
44254: PUSH
44255: LD_VAR 0 5
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: IN
44274: NOT
44275: AND
44276: OR
44277: IFFALSE 44281
// exit ;
44279: GO 62672
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44281: LD_VAR 0 1
44285: PUSH
44286: LD_INT 6
44288: PUSH
44289: LD_INT 7
44291: PUSH
44292: LD_INT 8
44294: PUSH
44295: LD_INT 13
44297: PUSH
44298: LD_INT 12
44300: PUSH
44301: LD_INT 15
44303: PUSH
44304: LD_INT 11
44306: PUSH
44307: LD_INT 14
44309: PUSH
44310: LD_INT 10
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: IN
44324: IFFALSE 44334
// btype = b_lab ;
44326: LD_ADDR_VAR 0 1
44330: PUSH
44331: LD_INT 6
44333: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44334: LD_VAR 0 6
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: IN
44353: NOT
44354: PUSH
44355: LD_VAR 0 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 6
44374: PUSH
44375: LD_INT 36
44377: PUSH
44378: LD_INT 4
44380: PUSH
44381: LD_INT 5
44383: PUSH
44384: LD_INT 31
44386: PUSH
44387: LD_INT 32
44389: PUSH
44390: LD_INT 33
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: IN
44406: NOT
44407: PUSH
44408: LD_VAR 0 6
44412: PUSH
44413: LD_INT 1
44415: EQUAL
44416: AND
44417: OR
44418: PUSH
44419: LD_VAR 0 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: IN
44434: NOT
44435: PUSH
44436: LD_VAR 0 6
44440: PUSH
44441: LD_INT 2
44443: EQUAL
44444: AND
44445: OR
44446: IFFALSE 44456
// mode = 0 ;
44448: LD_ADDR_VAR 0 6
44452: PUSH
44453: LD_INT 0
44455: ST_TO_ADDR
// case mode of 0 :
44456: LD_VAR 0 6
44460: PUSH
44461: LD_INT 0
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 55922
44469: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44470: LD_ADDR_VAR 0 11
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44663: LD_ADDR_VAR 0 12
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: NEG
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44859: LD_ADDR_VAR 0 13
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 3
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45058: LD_ADDR_VAR 0 14
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45254: LD_ADDR_VAR 0 15
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45447: LD_ADDR_VAR 0 16
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45640: LD_ADDR_VAR 0 17
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45870: LD_ADDR_VAR 0 18
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46100: LD_ADDR_VAR 0 19
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46330: LD_ADDR_VAR 0 20
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46560: LD_ADDR_VAR 0 21
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46790: LD_ADDR_VAR 0 22
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47020: LD_ADDR_VAR 0 23
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47300: LD_ADDR_VAR 0 24
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47576: LD_ADDR_VAR 0 25
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47850: LD_ADDR_VAR 0 26
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48126: LD_ADDR_VAR 0 27
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48406: LD_ADDR_VAR 0 28
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48688: LD_ADDR_VAR 0 29
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48967: LD_ADDR_VAR 0 30
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49245: LD_ADDR_VAR 0 31
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49523: LD_ADDR_VAR 0 32
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49801: LD_ADDR_VAR 0 33
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 3
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50080: LD_ADDR_VAR 0 34
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 35
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50472: LD_ADDR_VAR 0 36
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50584: LD_ADDR_VAR 0 37
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50696: LD_ADDR_VAR 0 38
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50808: LD_ADDR_VAR 0 39
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50920: LD_ADDR_VAR 0 40
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51032: LD_ADDR_VAR 0 41
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51382: LD_ADDR_VAR 0 42
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51732: LD_ADDR_VAR 0 43
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52080: LD_ADDR_VAR 0 44
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: NEG
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52430: LD_ADDR_VAR 0 45
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52780: LD_ADDR_VAR 0 46
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 3
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53128: LD_ADDR_VAR 0 47
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53279: LD_ADDR_VAR 0 48
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53426: LD_ADDR_VAR 0 49
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53570: LD_ADDR_VAR 0 50
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53714: LD_ADDR_VAR 0 51
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53861: LD_ADDR_VAR 0 52
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54012: LD_ADDR_VAR 0 53
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54242: LD_ADDR_VAR 0 54
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54472: LD_ADDR_VAR 0 55
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54702: LD_ADDR_VAR 0 56
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54932: LD_ADDR_VAR 0 57
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55162: LD_ADDR_VAR 0 58
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55392: LD_ADDR_VAR 0 59
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55480: LD_ADDR_VAR 0 60
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55568: LD_ADDR_VAR 0 61
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55656: LD_ADDR_VAR 0 62
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55744: LD_ADDR_VAR 0 63
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55832: LD_ADDR_VAR 0 64
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// end ; 1 :
55920: GO 61817
55922: LD_INT 1
55924: DOUBLE
55925: EQUAL
55926: IFTRUE 55930
55928: GO 58553
55930: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55931: LD_ADDR_VAR 0 11
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55975: LD_ADDR_VAR 0 12
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56016: LD_ADDR_VAR 0 13
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56056: LD_ADDR_VAR 0 14
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56097: LD_ADDR_VAR 0 15
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56141: LD_ADDR_VAR 0 16
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56187: LD_ADDR_VAR 0 17
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56231: LD_ADDR_VAR 0 18
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56272: LD_ADDR_VAR 0 19
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56312: LD_ADDR_VAR 0 20
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56353: LD_ADDR_VAR 0 21
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56397: LD_ADDR_VAR 0 22
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56443: LD_ADDR_VAR 0 23
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 3
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 4
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56487: LD_ADDR_VAR 0 24
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 4
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56528: LD_ADDR_VAR 0 25
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 4
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56568: LD_ADDR_VAR 0 26
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 4
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56609: LD_ADDR_VAR 0 27
56613: PUSH
56614: LD_INT 3
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56653: LD_ADDR_VAR 0 28
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 4
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56699: LD_ADDR_VAR 0 29
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 5
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 5
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 4
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 6
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 6
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 5
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56854: LD_ADDR_VAR 0 30
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 4
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 5
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 5
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 6
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 6
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56997: LD_ADDR_VAR 0 31
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 4
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: LD_INT 4
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 4
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: LD_INT 5
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 6
57094: PUSH
57095: LD_INT 5
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 6
57104: PUSH
57105: LD_INT 6
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 5
57114: PUSH
57115: LD_INT 6
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57136: LD_ADDR_VAR 0 32
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 4
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 5
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 5
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 6
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 6
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57279: LD_ADDR_VAR 0 33
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 4
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 5
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 5
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 6
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 6
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57434: LD_ADDR_VAR 0 34
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: NEG
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 4
57513: NEG
57514: PUSH
57515: LD_INT 5
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: NEG
57538: PUSH
57539: LD_INT 5
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 5
57549: NEG
57550: PUSH
57551: LD_INT 6
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 6
57561: NEG
57562: PUSH
57563: LD_INT 5
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 6
57573: NEG
57574: PUSH
57575: LD_INT 6
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57597: LD_ADDR_VAR 0 41
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57641: LD_ADDR_VAR 0 42
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57682: LD_ADDR_VAR 0 43
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57722: LD_ADDR_VAR 0 44
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57763: LD_ADDR_VAR 0 45
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57807: LD_ADDR_VAR 0 46
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57853: LD_ADDR_VAR 0 47
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57886: LD_ADDR_VAR 0 48
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57917: LD_ADDR_VAR 0 49
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57946: LD_ADDR_VAR 0 50
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57975: LD_ADDR_VAR 0 51
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58006: LD_ADDR_VAR 0 52
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 3
58025: NEG
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58039: LD_ADDR_VAR 0 53
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58083: LD_ADDR_VAR 0 54
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58124: LD_ADDR_VAR 0 55
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58164: LD_ADDR_VAR 0 56
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58205: LD_ADDR_VAR 0 57
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58249: LD_ADDR_VAR 0 58
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58295: LD_ADDR_VAR 0 59
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58339: LD_ADDR_VAR 0 60
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58380: LD_ADDR_VAR 0 61
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58420: LD_ADDR_VAR 0 62
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58461: LD_ADDR_VAR 0 63
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58505: LD_ADDR_VAR 0 64
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// end ; 2 :
58551: GO 61817
58553: LD_INT 2
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58561
58559: GO 61816
58561: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58562: LD_ADDR_VAR 0 29
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 5
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 5
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 4
58692: PUSH
58693: LD_INT 4
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: LD_INT 4
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 4
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 5
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 5
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 3
58845: NEG
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 4
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: LD_INT 4
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: LD_INT 5
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: NEG
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 5
59019: NEG
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: LD_INT 5
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 5
59043: NEG
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59100: LD_ADDR_VAR 0 30
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: LD_INT 4
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 5
59137: PUSH
59138: LD_INT 5
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 5
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 5
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 4
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 4
59290: NEG
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 5
59346: NEG
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 5
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 5
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 4
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 4
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 5
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 4
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 4
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 5
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 5
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59647: LD_ADDR_VAR 0 31
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 4
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 4
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 5
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 4
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 4
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 4
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 4
59861: NEG
59862: PUSH
59863: LD_INT 5
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 4
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 4
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 5
59909: NEG
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 5
59921: NEG
59922: PUSH
59923: LD_INT 5
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: LD_INT 5
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 5
59945: NEG
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 3
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 4
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 4
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 5
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 5
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60197: LD_ADDR_VAR 0 32
60201: PUSH
60202: LD_INT 4
60204: NEG
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 4
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 5
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 5
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 5
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 4
60366: NEG
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: LD_INT 4
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 4
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 4
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 5
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 5
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 3
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 5
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 4
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 4
60609: PUSH
60610: LD_INT 4
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 5
60639: PUSH
60640: LD_INT 5
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: LD_INT 5
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 5
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: LD_INT 5
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60744: LD_ADDR_VAR 0 33
60748: PUSH
60749: LD_INT 4
60751: NEG
60752: PUSH
60753: LD_INT 4
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: LD_INT 5
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 4
60799: NEG
60800: PUSH
60801: LD_INT 3
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 5
60811: NEG
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 5
60823: NEG
60824: PUSH
60825: LD_INT 5
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 5
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 5
60847: NEG
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 4
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 5
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 5
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 5
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: PUSH
61085: LD_INT 4
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 4
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 4
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61282: LD_ADDR_VAR 0 34
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 4
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 5
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 5
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 2
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 4
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 4
61484: PUSH
61485: LD_INT 4
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 5
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 5
61514: PUSH
61515: LD_INT 5
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 4
61524: PUSH
61525: LD_INT 5
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 5
61554: PUSH
61555: LD_INT 3
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: LD_INT 5
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 3
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 4
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 4
61667: NEG
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 5
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// end ; end ;
61814: GO 61817
61816: POP
// case btype of b_depot , b_warehouse :
61817: LD_VAR 0 1
61821: PUSH
61822: LD_INT 0
61824: DOUBLE
61825: EQUAL
61826: IFTRUE 61836
61828: LD_INT 1
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61836
61834: GO 62037
61836: POP
// case nation of nation_american :
61837: LD_VAR 0 5
61841: PUSH
61842: LD_INT 1
61844: DOUBLE
61845: EQUAL
61846: IFTRUE 61850
61848: GO 61906
61850: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61851: LD_ADDR_VAR 0 9
61855: PUSH
61856: LD_VAR 0 11
61860: PUSH
61861: LD_VAR 0 12
61865: PUSH
61866: LD_VAR 0 13
61870: PUSH
61871: LD_VAR 0 14
61875: PUSH
61876: LD_VAR 0 15
61880: PUSH
61881: LD_VAR 0 16
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: PUSH
61894: LD_VAR 0 4
61898: PUSH
61899: LD_INT 1
61901: PLUS
61902: ARRAY
61903: ST_TO_ADDR
61904: GO 62035
61906: LD_INT 2
61908: DOUBLE
61909: EQUAL
61910: IFTRUE 61914
61912: GO 61970
61914: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61915: LD_ADDR_VAR 0 9
61919: PUSH
61920: LD_VAR 0 17
61924: PUSH
61925: LD_VAR 0 18
61929: PUSH
61930: LD_VAR 0 19
61934: PUSH
61935: LD_VAR 0 20
61939: PUSH
61940: LD_VAR 0 21
61944: PUSH
61945: LD_VAR 0 22
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: LD_VAR 0 4
61962: PUSH
61963: LD_INT 1
61965: PLUS
61966: ARRAY
61967: ST_TO_ADDR
61968: GO 62035
61970: LD_INT 3
61972: DOUBLE
61973: EQUAL
61974: IFTRUE 61978
61976: GO 62034
61978: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61979: LD_ADDR_VAR 0 9
61983: PUSH
61984: LD_VAR 0 23
61988: PUSH
61989: LD_VAR 0 24
61993: PUSH
61994: LD_VAR 0 25
61998: PUSH
61999: LD_VAR 0 26
62003: PUSH
62004: LD_VAR 0 27
62008: PUSH
62009: LD_VAR 0 28
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: PUSH
62022: LD_VAR 0 4
62026: PUSH
62027: LD_INT 1
62029: PLUS
62030: ARRAY
62031: ST_TO_ADDR
62032: GO 62035
62034: POP
62035: GO 62590
62037: LD_INT 2
62039: DOUBLE
62040: EQUAL
62041: IFTRUE 62051
62043: LD_INT 3
62045: DOUBLE
62046: EQUAL
62047: IFTRUE 62051
62049: GO 62107
62051: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62052: LD_ADDR_VAR 0 9
62056: PUSH
62057: LD_VAR 0 29
62061: PUSH
62062: LD_VAR 0 30
62066: PUSH
62067: LD_VAR 0 31
62071: PUSH
62072: LD_VAR 0 32
62076: PUSH
62077: LD_VAR 0 33
62081: PUSH
62082: LD_VAR 0 34
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: LD_VAR 0 4
62099: PUSH
62100: LD_INT 1
62102: PLUS
62103: ARRAY
62104: ST_TO_ADDR
62105: GO 62590
62107: LD_INT 16
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62169
62113: LD_INT 17
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62169
62119: LD_INT 18
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62169
62125: LD_INT 19
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62169
62131: LD_INT 22
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62169
62137: LD_INT 20
62139: DOUBLE
62140: EQUAL
62141: IFTRUE 62169
62143: LD_INT 21
62145: DOUBLE
62146: EQUAL
62147: IFTRUE 62169
62149: LD_INT 23
62151: DOUBLE
62152: EQUAL
62153: IFTRUE 62169
62155: LD_INT 24
62157: DOUBLE
62158: EQUAL
62159: IFTRUE 62169
62161: LD_INT 25
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62169
62167: GO 62225
62169: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62170: LD_ADDR_VAR 0 9
62174: PUSH
62175: LD_VAR 0 35
62179: PUSH
62180: LD_VAR 0 36
62184: PUSH
62185: LD_VAR 0 37
62189: PUSH
62190: LD_VAR 0 38
62194: PUSH
62195: LD_VAR 0 39
62199: PUSH
62200: LD_VAR 0 40
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: PUSH
62213: LD_VAR 0 4
62217: PUSH
62218: LD_INT 1
62220: PLUS
62221: ARRAY
62222: ST_TO_ADDR
62223: GO 62590
62225: LD_INT 6
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62281
62231: LD_INT 7
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62281
62237: LD_INT 8
62239: DOUBLE
62240: EQUAL
62241: IFTRUE 62281
62243: LD_INT 13
62245: DOUBLE
62246: EQUAL
62247: IFTRUE 62281
62249: LD_INT 12
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62281
62255: LD_INT 15
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62281
62261: LD_INT 11
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62281
62267: LD_INT 14
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62281
62273: LD_INT 10
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62281
62279: GO 62337
62281: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62282: LD_ADDR_VAR 0 9
62286: PUSH
62287: LD_VAR 0 41
62291: PUSH
62292: LD_VAR 0 42
62296: PUSH
62297: LD_VAR 0 43
62301: PUSH
62302: LD_VAR 0 44
62306: PUSH
62307: LD_VAR 0 45
62311: PUSH
62312: LD_VAR 0 46
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: PUSH
62325: LD_VAR 0 4
62329: PUSH
62330: LD_INT 1
62332: PLUS
62333: ARRAY
62334: ST_TO_ADDR
62335: GO 62590
62337: LD_INT 36
62339: DOUBLE
62340: EQUAL
62341: IFTRUE 62345
62343: GO 62401
62345: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62346: LD_ADDR_VAR 0 9
62350: PUSH
62351: LD_VAR 0 47
62355: PUSH
62356: LD_VAR 0 48
62360: PUSH
62361: LD_VAR 0 49
62365: PUSH
62366: LD_VAR 0 50
62370: PUSH
62371: LD_VAR 0 51
62375: PUSH
62376: LD_VAR 0 52
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: PUSH
62389: LD_VAR 0 4
62393: PUSH
62394: LD_INT 1
62396: PLUS
62397: ARRAY
62398: ST_TO_ADDR
62399: GO 62590
62401: LD_INT 4
62403: DOUBLE
62404: EQUAL
62405: IFTRUE 62427
62407: LD_INT 5
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62427
62413: LD_INT 34
62415: DOUBLE
62416: EQUAL
62417: IFTRUE 62427
62419: LD_INT 37
62421: DOUBLE
62422: EQUAL
62423: IFTRUE 62427
62425: GO 62483
62427: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62428: LD_ADDR_VAR 0 9
62432: PUSH
62433: LD_VAR 0 53
62437: PUSH
62438: LD_VAR 0 54
62442: PUSH
62443: LD_VAR 0 55
62447: PUSH
62448: LD_VAR 0 56
62452: PUSH
62453: LD_VAR 0 57
62457: PUSH
62458: LD_VAR 0 58
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: PUSH
62471: LD_VAR 0 4
62475: PUSH
62476: LD_INT 1
62478: PLUS
62479: ARRAY
62480: ST_TO_ADDR
62481: GO 62590
62483: LD_INT 31
62485: DOUBLE
62486: EQUAL
62487: IFTRUE 62533
62489: LD_INT 32
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62533
62495: LD_INT 33
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62533
62501: LD_INT 27
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62533
62507: LD_INT 26
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62533
62513: LD_INT 28
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62533
62519: LD_INT 29
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62533
62525: LD_INT 30
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62533
62531: GO 62589
62533: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62534: LD_ADDR_VAR 0 9
62538: PUSH
62539: LD_VAR 0 59
62543: PUSH
62544: LD_VAR 0 60
62548: PUSH
62549: LD_VAR 0 61
62553: PUSH
62554: LD_VAR 0 62
62558: PUSH
62559: LD_VAR 0 63
62563: PUSH
62564: LD_VAR 0 64
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: PUSH
62577: LD_VAR 0 4
62581: PUSH
62582: LD_INT 1
62584: PLUS
62585: ARRAY
62586: ST_TO_ADDR
62587: GO 62590
62589: POP
// temp_list2 = [ ] ;
62590: LD_ADDR_VAR 0 10
62594: PUSH
62595: EMPTY
62596: ST_TO_ADDR
// for i in temp_list do
62597: LD_ADDR_VAR 0 8
62601: PUSH
62602: LD_VAR 0 9
62606: PUSH
62607: FOR_IN
62608: IFFALSE 62660
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62610: LD_ADDR_VAR 0 10
62614: PUSH
62615: LD_VAR 0 10
62619: PUSH
62620: LD_VAR 0 8
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PUSH
62629: LD_VAR 0 2
62633: PLUS
62634: PUSH
62635: LD_VAR 0 8
62639: PUSH
62640: LD_INT 2
62642: ARRAY
62643: PUSH
62644: LD_VAR 0 3
62648: PLUS
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: EMPTY
62655: LIST
62656: ADD
62657: ST_TO_ADDR
62658: GO 62607
62660: POP
62661: POP
// result = temp_list2 ;
62662: LD_ADDR_VAR 0 7
62666: PUSH
62667: LD_VAR 0 10
62671: ST_TO_ADDR
// end ;
62672: LD_VAR 0 7
62676: RET
// export function EnemyInRange ( unit , dist ) ; begin
62677: LD_INT 0
62679: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62680: LD_ADDR_VAR 0 3
62684: PUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: CALL_OW 255
62694: PPUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: CALL_OW 250
62704: PPUSH
62705: LD_VAR 0 1
62709: PPUSH
62710: CALL_OW 251
62714: PPUSH
62715: LD_VAR 0 2
62719: PPUSH
62720: CALL 36073 0 4
62724: PUSH
62725: LD_INT 4
62727: ARRAY
62728: ST_TO_ADDR
// end ;
62729: LD_VAR 0 3
62733: RET
// export function PlayerSeeMe ( unit ) ; begin
62734: LD_INT 0
62736: PPUSH
// result := See ( your_side , unit ) ;
62737: LD_ADDR_VAR 0 2
62741: PUSH
62742: LD_OWVAR 2
62746: PPUSH
62747: LD_VAR 0 1
62751: PPUSH
62752: CALL_OW 292
62756: ST_TO_ADDR
// end ;
62757: LD_VAR 0 2
62761: RET
// export function ReverseDir ( unit ) ; begin
62762: LD_INT 0
62764: PPUSH
// if not unit then
62765: LD_VAR 0 1
62769: NOT
62770: IFFALSE 62774
// exit ;
62772: GO 62797
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62774: LD_ADDR_VAR 0 2
62778: PUSH
62779: LD_VAR 0 1
62783: PPUSH
62784: CALL_OW 254
62788: PUSH
62789: LD_INT 3
62791: PLUS
62792: PUSH
62793: LD_INT 6
62795: MOD
62796: ST_TO_ADDR
// end ;
62797: LD_VAR 0 2
62801: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62802: LD_INT 0
62804: PPUSH
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not hexes then
62809: LD_VAR 0 2
62813: NOT
62814: IFFALSE 62818
// exit ;
62816: GO 62966
// dist := 9999 ;
62818: LD_ADDR_VAR 0 5
62822: PUSH
62823: LD_INT 9999
62825: ST_TO_ADDR
// for i = 1 to hexes do
62826: LD_ADDR_VAR 0 4
62830: PUSH
62831: DOUBLE
62832: LD_INT 1
62834: DEC
62835: ST_TO_ADDR
62836: LD_VAR 0 2
62840: PUSH
62841: FOR_TO
62842: IFFALSE 62954
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62844: LD_VAR 0 1
62848: PPUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_VAR 0 4
62858: ARRAY
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: PPUSH
62864: LD_VAR 0 2
62868: PUSH
62869: LD_VAR 0 4
62873: ARRAY
62874: PUSH
62875: LD_INT 2
62877: ARRAY
62878: PPUSH
62879: CALL_OW 297
62883: PUSH
62884: LD_VAR 0 5
62888: LESS
62889: IFFALSE 62952
// begin hex := hexes [ i ] ;
62891: LD_ADDR_VAR 0 7
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_VAR 0 4
62905: ARRAY
62906: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62907: LD_ADDR_VAR 0 5
62911: PUSH
62912: LD_VAR 0 1
62916: PPUSH
62917: LD_VAR 0 2
62921: PUSH
62922: LD_VAR 0 4
62926: ARRAY
62927: PUSH
62928: LD_INT 1
62930: ARRAY
62931: PPUSH
62932: LD_VAR 0 2
62936: PUSH
62937: LD_VAR 0 4
62941: ARRAY
62942: PUSH
62943: LD_INT 2
62945: ARRAY
62946: PPUSH
62947: CALL_OW 297
62951: ST_TO_ADDR
// end ; end ;
62952: GO 62841
62954: POP
62955: POP
// result := hex ;
62956: LD_ADDR_VAR 0 3
62960: PUSH
62961: LD_VAR 0 7
62965: ST_TO_ADDR
// end ;
62966: LD_VAR 0 3
62970: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62975: LD_VAR 0 1
62979: NOT
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_INT 21
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 23
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 69
63014: IN
63015: NOT
63016: OR
63017: IFFALSE 63021
// exit ;
63019: GO 63068
// for i = 1 to 3 do
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: DOUBLE
63027: LD_INT 1
63029: DEC
63030: ST_TO_ADDR
63031: LD_INT 3
63033: PUSH
63034: FOR_TO
63035: IFFALSE 63066
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63037: LD_VAR 0 1
63041: PPUSH
63042: CALL_OW 250
63046: PPUSH
63047: LD_VAR 0 1
63051: PPUSH
63052: CALL_OW 251
63056: PPUSH
63057: LD_INT 1
63059: PPUSH
63060: CALL_OW 453
63064: GO 63034
63066: POP
63067: POP
// end ;
63068: LD_VAR 0 2
63072: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63073: LD_INT 0
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63081: LD_VAR 0 1
63085: NOT
63086: PUSH
63087: LD_VAR 0 2
63091: NOT
63092: OR
63093: PUSH
63094: LD_VAR 0 1
63098: PPUSH
63099: CALL_OW 314
63103: OR
63104: IFFALSE 63108
// exit ;
63106: GO 63549
// x := GetX ( enemy_unit ) ;
63108: LD_ADDR_VAR 0 7
63112: PUSH
63113: LD_VAR 0 2
63117: PPUSH
63118: CALL_OW 250
63122: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63123: LD_ADDR_VAR 0 8
63127: PUSH
63128: LD_VAR 0 2
63132: PPUSH
63133: CALL_OW 251
63137: ST_TO_ADDR
// if not x or not y then
63138: LD_VAR 0 7
63142: NOT
63143: PUSH
63144: LD_VAR 0 8
63148: NOT
63149: OR
63150: IFFALSE 63154
// exit ;
63152: GO 63549
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63154: LD_ADDR_VAR 0 6
63158: PUSH
63159: LD_VAR 0 7
63163: PPUSH
63164: LD_INT 0
63166: PPUSH
63167: LD_INT 4
63169: PPUSH
63170: CALL_OW 272
63174: PUSH
63175: LD_VAR 0 8
63179: PPUSH
63180: LD_INT 0
63182: PPUSH
63183: LD_INT 4
63185: PPUSH
63186: CALL_OW 273
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_VAR 0 7
63199: PPUSH
63200: LD_INT 1
63202: PPUSH
63203: LD_INT 4
63205: PPUSH
63206: CALL_OW 272
63210: PUSH
63211: LD_VAR 0 8
63215: PPUSH
63216: LD_INT 1
63218: PPUSH
63219: LD_INT 4
63221: PPUSH
63222: CALL_OW 273
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_VAR 0 7
63235: PPUSH
63236: LD_INT 2
63238: PPUSH
63239: LD_INT 4
63241: PPUSH
63242: CALL_OW 272
63246: PUSH
63247: LD_VAR 0 8
63251: PPUSH
63252: LD_INT 2
63254: PPUSH
63255: LD_INT 4
63257: PPUSH
63258: CALL_OW 273
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_VAR 0 7
63271: PPUSH
63272: LD_INT 3
63274: PPUSH
63275: LD_INT 4
63277: PPUSH
63278: CALL_OW 272
63282: PUSH
63283: LD_VAR 0 8
63287: PPUSH
63288: LD_INT 3
63290: PPUSH
63291: LD_INT 4
63293: PPUSH
63294: CALL_OW 273
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_VAR 0 7
63307: PPUSH
63308: LD_INT 4
63310: PPUSH
63311: LD_INT 4
63313: PPUSH
63314: CALL_OW 272
63318: PUSH
63319: LD_VAR 0 8
63323: PPUSH
63324: LD_INT 4
63326: PPUSH
63327: LD_INT 4
63329: PPUSH
63330: CALL_OW 273
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_VAR 0 7
63343: PPUSH
63344: LD_INT 5
63346: PPUSH
63347: LD_INT 4
63349: PPUSH
63350: CALL_OW 272
63354: PUSH
63355: LD_VAR 0 8
63359: PPUSH
63360: LD_INT 5
63362: PPUSH
63363: LD_INT 4
63365: PPUSH
63366: CALL_OW 273
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// for i = tmp downto 1 do
63383: LD_ADDR_VAR 0 4
63387: PUSH
63388: DOUBLE
63389: LD_VAR 0 6
63393: INC
63394: ST_TO_ADDR
63395: LD_INT 1
63397: PUSH
63398: FOR_DOWNTO
63399: IFFALSE 63500
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63401: LD_VAR 0 6
63405: PUSH
63406: LD_VAR 0 4
63410: ARRAY
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PPUSH
63416: LD_VAR 0 6
63420: PUSH
63421: LD_VAR 0 4
63425: ARRAY
63426: PUSH
63427: LD_INT 2
63429: ARRAY
63430: PPUSH
63431: CALL_OW 488
63435: NOT
63436: PUSH
63437: LD_VAR 0 6
63441: PUSH
63442: LD_VAR 0 4
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PPUSH
63452: LD_VAR 0 6
63456: PUSH
63457: LD_VAR 0 4
63461: ARRAY
63462: PUSH
63463: LD_INT 2
63465: ARRAY
63466: PPUSH
63467: CALL_OW 428
63471: PUSH
63472: LD_INT 0
63474: NONEQUAL
63475: OR
63476: IFFALSE 63498
// tmp := Delete ( tmp , i ) ;
63478: LD_ADDR_VAR 0 6
63482: PUSH
63483: LD_VAR 0 6
63487: PPUSH
63488: LD_VAR 0 4
63492: PPUSH
63493: CALL_OW 3
63497: ST_TO_ADDR
63498: GO 63398
63500: POP
63501: POP
// j := GetClosestHex ( unit , tmp ) ;
63502: LD_ADDR_VAR 0 5
63506: PUSH
63507: LD_VAR 0 1
63511: PPUSH
63512: LD_VAR 0 6
63516: PPUSH
63517: CALL 62802 0 2
63521: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_VAR 0 5
63531: PUSH
63532: LD_INT 1
63534: ARRAY
63535: PPUSH
63536: LD_VAR 0 5
63540: PUSH
63541: LD_INT 2
63543: ARRAY
63544: PPUSH
63545: CALL_OW 111
// end ;
63549: LD_VAR 0 3
63553: RET
// export function PrepareApemanSoldier ( ) ; begin
63554: LD_INT 0
63556: PPUSH
// uc_nation := 0 ;
63557: LD_ADDR_OWVAR 21
63561: PUSH
63562: LD_INT 0
63564: ST_TO_ADDR
// hc_sex := sex_male ;
63565: LD_ADDR_OWVAR 27
63569: PUSH
63570: LD_INT 1
63572: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63573: LD_ADDR_OWVAR 28
63577: PUSH
63578: LD_INT 15
63580: ST_TO_ADDR
// hc_gallery :=  ;
63581: LD_ADDR_OWVAR 33
63585: PUSH
63586: LD_STRING 
63588: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63589: LD_ADDR_OWVAR 31
63593: PUSH
63594: LD_INT 0
63596: PPUSH
63597: LD_INT 3
63599: PPUSH
63600: CALL_OW 12
63604: PUSH
63605: LD_INT 0
63607: PPUSH
63608: LD_INT 3
63610: PPUSH
63611: CALL_OW 12
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: ST_TO_ADDR
// end ;
63628: LD_VAR 0 1
63632: RET
// export function PrepareApemanEngineer ( ) ; begin
63633: LD_INT 0
63635: PPUSH
// uc_nation := 0 ;
63636: LD_ADDR_OWVAR 21
63640: PUSH
63641: LD_INT 0
63643: ST_TO_ADDR
// hc_sex := sex_male ;
63644: LD_ADDR_OWVAR 27
63648: PUSH
63649: LD_INT 1
63651: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63652: LD_ADDR_OWVAR 28
63656: PUSH
63657: LD_INT 16
63659: ST_TO_ADDR
// hc_gallery :=  ;
63660: LD_ADDR_OWVAR 33
63664: PUSH
63665: LD_STRING 
63667: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63668: LD_ADDR_OWVAR 31
63672: PUSH
63673: LD_INT 0
63675: PPUSH
63676: LD_INT 3
63678: PPUSH
63679: CALL_OW 12
63683: PUSH
63684: LD_INT 0
63686: PPUSH
63687: LD_INT 3
63689: PPUSH
63690: CALL_OW 12
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// end ;
63707: LD_VAR 0 1
63711: RET
// export function PrepareApeman ( agressivity ) ; begin
63712: LD_INT 0
63714: PPUSH
// uc_side := 0 ;
63715: LD_ADDR_OWVAR 20
63719: PUSH
63720: LD_INT 0
63722: ST_TO_ADDR
// uc_nation := 0 ;
63723: LD_ADDR_OWVAR 21
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// hc_sex := sex_male ;
63731: LD_ADDR_OWVAR 27
63735: PUSH
63736: LD_INT 1
63738: ST_TO_ADDR
// hc_class := class_apeman ;
63739: LD_ADDR_OWVAR 28
63743: PUSH
63744: LD_INT 12
63746: ST_TO_ADDR
// hc_gallery :=  ;
63747: LD_ADDR_OWVAR 33
63751: PUSH
63752: LD_STRING 
63754: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63755: LD_ADDR_OWVAR 35
63759: PUSH
63760: LD_VAR 0 1
63764: NEG
63765: PPUSH
63766: LD_VAR 0 1
63770: PPUSH
63771: CALL_OW 12
63775: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63776: LD_ADDR_OWVAR 31
63780: PUSH
63781: LD_INT 0
63783: PPUSH
63784: LD_INT 3
63786: PPUSH
63787: CALL_OW 12
63791: PUSH
63792: LD_INT 0
63794: PPUSH
63795: LD_INT 3
63797: PPUSH
63798: CALL_OW 12
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: ST_TO_ADDR
// end ;
63815: LD_VAR 0 2
63819: RET
// export function PrepareTiger ( agressivity ) ; begin
63820: LD_INT 0
63822: PPUSH
// uc_side := 0 ;
63823: LD_ADDR_OWVAR 20
63827: PUSH
63828: LD_INT 0
63830: ST_TO_ADDR
// uc_nation := 0 ;
63831: LD_ADDR_OWVAR 21
63835: PUSH
63836: LD_INT 0
63838: ST_TO_ADDR
// hc_class := class_tiger ;
63839: LD_ADDR_OWVAR 28
63843: PUSH
63844: LD_INT 14
63846: ST_TO_ADDR
// hc_gallery :=  ;
63847: LD_ADDR_OWVAR 33
63851: PUSH
63852: LD_STRING 
63854: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63855: LD_ADDR_OWVAR 35
63859: PUSH
63860: LD_VAR 0 1
63864: NEG
63865: PPUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 12
63875: ST_TO_ADDR
// end ;
63876: LD_VAR 0 2
63880: RET
// export function PrepareEnchidna ( ) ; begin
63881: LD_INT 0
63883: PPUSH
// uc_side := 0 ;
63884: LD_ADDR_OWVAR 20
63888: PUSH
63889: LD_INT 0
63891: ST_TO_ADDR
// uc_nation := 0 ;
63892: LD_ADDR_OWVAR 21
63896: PUSH
63897: LD_INT 0
63899: ST_TO_ADDR
// hc_class := class_baggie ;
63900: LD_ADDR_OWVAR 28
63904: PUSH
63905: LD_INT 13
63907: ST_TO_ADDR
// hc_gallery :=  ;
63908: LD_ADDR_OWVAR 33
63912: PUSH
63913: LD_STRING 
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 1
63920: RET
// export function PrepareFrog ( ) ; begin
63921: LD_INT 0
63923: PPUSH
// uc_side := 0 ;
63924: LD_ADDR_OWVAR 20
63928: PUSH
63929: LD_INT 0
63931: ST_TO_ADDR
// uc_nation := 0 ;
63932: LD_ADDR_OWVAR 21
63936: PUSH
63937: LD_INT 0
63939: ST_TO_ADDR
// hc_class := class_frog ;
63940: LD_ADDR_OWVAR 28
63944: PUSH
63945: LD_INT 19
63947: ST_TO_ADDR
// hc_gallery :=  ;
63948: LD_ADDR_OWVAR 33
63952: PUSH
63953: LD_STRING 
63955: ST_TO_ADDR
// end ;
63956: LD_VAR 0 1
63960: RET
// export function PrepareFish ( ) ; begin
63961: LD_INT 0
63963: PPUSH
// uc_side := 0 ;
63964: LD_ADDR_OWVAR 20
63968: PUSH
63969: LD_INT 0
63971: ST_TO_ADDR
// uc_nation := 0 ;
63972: LD_ADDR_OWVAR 21
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// hc_class := class_fish ;
63980: LD_ADDR_OWVAR 28
63984: PUSH
63985: LD_INT 20
63987: ST_TO_ADDR
// hc_gallery :=  ;
63988: LD_ADDR_OWVAR 33
63992: PUSH
63993: LD_STRING 
63995: ST_TO_ADDR
// end ;
63996: LD_VAR 0 1
64000: RET
// export function PrepareBird ( ) ; begin
64001: LD_INT 0
64003: PPUSH
// uc_side := 0 ;
64004: LD_ADDR_OWVAR 20
64008: PUSH
64009: LD_INT 0
64011: ST_TO_ADDR
// uc_nation := 0 ;
64012: LD_ADDR_OWVAR 21
64016: PUSH
64017: LD_INT 0
64019: ST_TO_ADDR
// hc_class := class_phororhacos ;
64020: LD_ADDR_OWVAR 28
64024: PUSH
64025: LD_INT 18
64027: ST_TO_ADDR
// hc_gallery :=  ;
64028: LD_ADDR_OWVAR 33
64032: PUSH
64033: LD_STRING 
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 1
64040: RET
// export function PrepareHorse ( ) ; begin
64041: LD_INT 0
64043: PPUSH
// uc_side := 0 ;
64044: LD_ADDR_OWVAR 20
64048: PUSH
64049: LD_INT 0
64051: ST_TO_ADDR
// uc_nation := 0 ;
64052: LD_ADDR_OWVAR 21
64056: PUSH
64057: LD_INT 0
64059: ST_TO_ADDR
// hc_class := class_horse ;
64060: LD_ADDR_OWVAR 28
64064: PUSH
64065: LD_INT 21
64067: ST_TO_ADDR
// hc_gallery :=  ;
64068: LD_ADDR_OWVAR 33
64072: PUSH
64073: LD_STRING 
64075: ST_TO_ADDR
// end ;
64076: LD_VAR 0 1
64080: RET
// export function PrepareMastodont ( ) ; begin
64081: LD_INT 0
64083: PPUSH
// uc_side := 0 ;
64084: LD_ADDR_OWVAR 20
64088: PUSH
64089: LD_INT 0
64091: ST_TO_ADDR
// uc_nation := 0 ;
64092: LD_ADDR_OWVAR 21
64096: PUSH
64097: LD_INT 0
64099: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64100: LD_ADDR_OWVAR 37
64104: PUSH
64105: LD_INT 31
64107: ST_TO_ADDR
// vc_control := control_rider ;
64108: LD_ADDR_OWVAR 38
64112: PUSH
64113: LD_INT 4
64115: ST_TO_ADDR
// end ;
64116: LD_VAR 0 1
64120: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64121: LD_INT 0
64123: PPUSH
64124: PPUSH
64125: PPUSH
// uc_side = 0 ;
64126: LD_ADDR_OWVAR 20
64130: PUSH
64131: LD_INT 0
64133: ST_TO_ADDR
// uc_nation = 0 ;
64134: LD_ADDR_OWVAR 21
64138: PUSH
64139: LD_INT 0
64141: ST_TO_ADDR
// InitHc_All ( ) ;
64142: CALL_OW 584
// InitVc ;
64146: CALL_OW 20
// if mastodonts then
64150: LD_VAR 0 6
64154: IFFALSE 64221
// for i = 1 to mastodonts do
64156: LD_ADDR_VAR 0 11
64160: PUSH
64161: DOUBLE
64162: LD_INT 1
64164: DEC
64165: ST_TO_ADDR
64166: LD_VAR 0 6
64170: PUSH
64171: FOR_TO
64172: IFFALSE 64219
// begin vc_chassis := 31 ;
64174: LD_ADDR_OWVAR 37
64178: PUSH
64179: LD_INT 31
64181: ST_TO_ADDR
// vc_control := control_rider ;
64182: LD_ADDR_OWVAR 38
64186: PUSH
64187: LD_INT 4
64189: ST_TO_ADDR
// animal := CreateVehicle ;
64190: LD_ADDR_VAR 0 12
64194: PUSH
64195: CALL_OW 45
64199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64200: LD_VAR 0 12
64204: PPUSH
64205: LD_VAR 0 8
64209: PPUSH
64210: LD_INT 0
64212: PPUSH
64213: CALL 66356 0 3
// end ;
64217: GO 64171
64219: POP
64220: POP
// if horses then
64221: LD_VAR 0 5
64225: IFFALSE 64292
// for i = 1 to horses do
64227: LD_ADDR_VAR 0 11
64231: PUSH
64232: DOUBLE
64233: LD_INT 1
64235: DEC
64236: ST_TO_ADDR
64237: LD_VAR 0 5
64241: PUSH
64242: FOR_TO
64243: IFFALSE 64290
// begin hc_class := 21 ;
64245: LD_ADDR_OWVAR 28
64249: PUSH
64250: LD_INT 21
64252: ST_TO_ADDR
// hc_gallery :=  ;
64253: LD_ADDR_OWVAR 33
64257: PUSH
64258: LD_STRING 
64260: ST_TO_ADDR
// animal := CreateHuman ;
64261: LD_ADDR_VAR 0 12
64265: PUSH
64266: CALL_OW 44
64270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64271: LD_VAR 0 12
64275: PPUSH
64276: LD_VAR 0 8
64280: PPUSH
64281: LD_INT 0
64283: PPUSH
64284: CALL 66356 0 3
// end ;
64288: GO 64242
64290: POP
64291: POP
// if birds then
64292: LD_VAR 0 1
64296: IFFALSE 64363
// for i = 1 to birds do
64298: LD_ADDR_VAR 0 11
64302: PUSH
64303: DOUBLE
64304: LD_INT 1
64306: DEC
64307: ST_TO_ADDR
64308: LD_VAR 0 1
64312: PUSH
64313: FOR_TO
64314: IFFALSE 64361
// begin hc_class = 18 ;
64316: LD_ADDR_OWVAR 28
64320: PUSH
64321: LD_INT 18
64323: ST_TO_ADDR
// hc_gallery =  ;
64324: LD_ADDR_OWVAR 33
64328: PUSH
64329: LD_STRING 
64331: ST_TO_ADDR
// animal := CreateHuman ;
64332: LD_ADDR_VAR 0 12
64336: PUSH
64337: CALL_OW 44
64341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64342: LD_VAR 0 12
64346: PPUSH
64347: LD_VAR 0 8
64351: PPUSH
64352: LD_INT 0
64354: PPUSH
64355: CALL 66356 0 3
// end ;
64359: GO 64313
64361: POP
64362: POP
// if tigers then
64363: LD_VAR 0 2
64367: IFFALSE 64451
// for i = 1 to tigers do
64369: LD_ADDR_VAR 0 11
64373: PUSH
64374: DOUBLE
64375: LD_INT 1
64377: DEC
64378: ST_TO_ADDR
64379: LD_VAR 0 2
64383: PUSH
64384: FOR_TO
64385: IFFALSE 64449
// begin hc_class = class_tiger ;
64387: LD_ADDR_OWVAR 28
64391: PUSH
64392: LD_INT 14
64394: ST_TO_ADDR
// hc_gallery =  ;
64395: LD_ADDR_OWVAR 33
64399: PUSH
64400: LD_STRING 
64402: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64403: LD_ADDR_OWVAR 35
64407: PUSH
64408: LD_INT 7
64410: NEG
64411: PPUSH
64412: LD_INT 7
64414: PPUSH
64415: CALL_OW 12
64419: ST_TO_ADDR
// animal := CreateHuman ;
64420: LD_ADDR_VAR 0 12
64424: PUSH
64425: CALL_OW 44
64429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64430: LD_VAR 0 12
64434: PPUSH
64435: LD_VAR 0 8
64439: PPUSH
64440: LD_INT 0
64442: PPUSH
64443: CALL 66356 0 3
// end ;
64447: GO 64384
64449: POP
64450: POP
// if apemans then
64451: LD_VAR 0 3
64455: IFFALSE 64578
// for i = 1 to apemans do
64457: LD_ADDR_VAR 0 11
64461: PUSH
64462: DOUBLE
64463: LD_INT 1
64465: DEC
64466: ST_TO_ADDR
64467: LD_VAR 0 3
64471: PUSH
64472: FOR_TO
64473: IFFALSE 64576
// begin hc_class = class_apeman ;
64475: LD_ADDR_OWVAR 28
64479: PUSH
64480: LD_INT 12
64482: ST_TO_ADDR
// hc_gallery =  ;
64483: LD_ADDR_OWVAR 33
64487: PUSH
64488: LD_STRING 
64490: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64491: LD_ADDR_OWVAR 35
64495: PUSH
64496: LD_INT 2
64498: NEG
64499: PPUSH
64500: LD_INT 2
64502: PPUSH
64503: CALL_OW 12
64507: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64508: LD_ADDR_OWVAR 31
64512: PUSH
64513: LD_INT 1
64515: PPUSH
64516: LD_INT 3
64518: PPUSH
64519: CALL_OW 12
64523: PUSH
64524: LD_INT 1
64526: PPUSH
64527: LD_INT 3
64529: PPUSH
64530: CALL_OW 12
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// animal := CreateHuman ;
64547: LD_ADDR_VAR 0 12
64551: PUSH
64552: CALL_OW 44
64556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64557: LD_VAR 0 12
64561: PPUSH
64562: LD_VAR 0 8
64566: PPUSH
64567: LD_INT 0
64569: PPUSH
64570: CALL 66356 0 3
// end ;
64574: GO 64472
64576: POP
64577: POP
// if enchidnas then
64578: LD_VAR 0 4
64582: IFFALSE 64649
// for i = 1 to enchidnas do
64584: LD_ADDR_VAR 0 11
64588: PUSH
64589: DOUBLE
64590: LD_INT 1
64592: DEC
64593: ST_TO_ADDR
64594: LD_VAR 0 4
64598: PUSH
64599: FOR_TO
64600: IFFALSE 64647
// begin hc_class = 13 ;
64602: LD_ADDR_OWVAR 28
64606: PUSH
64607: LD_INT 13
64609: ST_TO_ADDR
// hc_gallery =  ;
64610: LD_ADDR_OWVAR 33
64614: PUSH
64615: LD_STRING 
64617: ST_TO_ADDR
// animal := CreateHuman ;
64618: LD_ADDR_VAR 0 12
64622: PUSH
64623: CALL_OW 44
64627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64628: LD_VAR 0 12
64632: PPUSH
64633: LD_VAR 0 8
64637: PPUSH
64638: LD_INT 0
64640: PPUSH
64641: CALL 66356 0 3
// end ;
64645: GO 64599
64647: POP
64648: POP
// if fishes then
64649: LD_VAR 0 7
64653: IFFALSE 64720
// for i = 1 to fishes do
64655: LD_ADDR_VAR 0 11
64659: PUSH
64660: DOUBLE
64661: LD_INT 1
64663: DEC
64664: ST_TO_ADDR
64665: LD_VAR 0 7
64669: PUSH
64670: FOR_TO
64671: IFFALSE 64718
// begin hc_class = 20 ;
64673: LD_ADDR_OWVAR 28
64677: PUSH
64678: LD_INT 20
64680: ST_TO_ADDR
// hc_gallery =  ;
64681: LD_ADDR_OWVAR 33
64685: PUSH
64686: LD_STRING 
64688: ST_TO_ADDR
// animal := CreateHuman ;
64689: LD_ADDR_VAR 0 12
64693: PUSH
64694: CALL_OW 44
64698: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64699: LD_VAR 0 12
64703: PPUSH
64704: LD_VAR 0 9
64708: PPUSH
64709: LD_INT 0
64711: PPUSH
64712: CALL 66356 0 3
// end ;
64716: GO 64670
64718: POP
64719: POP
// end ;
64720: LD_VAR 0 10
64724: RET
// export function WantHeal ( sci , unit ) ; begin
64725: LD_INT 0
64727: PPUSH
// if GetTaskList ( sci ) > 0 then
64728: LD_VAR 0 1
64732: PPUSH
64733: CALL_OW 437
64737: PUSH
64738: LD_INT 0
64740: GREATER
64741: IFFALSE 64811
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64743: LD_VAR 0 1
64747: PPUSH
64748: CALL_OW 437
64752: PUSH
64753: LD_INT 1
64755: ARRAY
64756: PUSH
64757: LD_INT 1
64759: ARRAY
64760: PUSH
64761: LD_STRING l
64763: EQUAL
64764: PUSH
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 437
64774: PUSH
64775: LD_INT 1
64777: ARRAY
64778: PUSH
64779: LD_INT 4
64781: ARRAY
64782: PUSH
64783: LD_VAR 0 2
64787: EQUAL
64788: AND
64789: IFFALSE 64801
// result := true else
64791: LD_ADDR_VAR 0 3
64795: PUSH
64796: LD_INT 1
64798: ST_TO_ADDR
64799: GO 64809
// result := false ;
64801: LD_ADDR_VAR 0 3
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// end else
64809: GO 64819
// result := false ;
64811: LD_ADDR_VAR 0 3
64815: PUSH
64816: LD_INT 0
64818: ST_TO_ADDR
// end ;
64819: LD_VAR 0 3
64823: RET
// export function HealTarget ( sci ) ; begin
64824: LD_INT 0
64826: PPUSH
// if not sci then
64827: LD_VAR 0 1
64831: NOT
64832: IFFALSE 64836
// exit ;
64834: GO 64901
// result := 0 ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// if GetTaskList ( sci ) then
64844: LD_VAR 0 1
64848: PPUSH
64849: CALL_OW 437
64853: IFFALSE 64901
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64855: LD_VAR 0 1
64859: PPUSH
64860: CALL_OW 437
64864: PUSH
64865: LD_INT 1
64867: ARRAY
64868: PUSH
64869: LD_INT 1
64871: ARRAY
64872: PUSH
64873: LD_STRING l
64875: EQUAL
64876: IFFALSE 64901
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64878: LD_ADDR_VAR 0 2
64882: PUSH
64883: LD_VAR 0 1
64887: PPUSH
64888: CALL_OW 437
64892: PUSH
64893: LD_INT 1
64895: ARRAY
64896: PUSH
64897: LD_INT 4
64899: ARRAY
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 2
64905: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64906: LD_INT 0
64908: PPUSH
64909: PPUSH
64910: PPUSH
64911: PPUSH
// if not base_units then
64912: LD_VAR 0 1
64916: NOT
64917: IFFALSE 64921
// exit ;
64919: GO 65008
// result := false ;
64921: LD_ADDR_VAR 0 2
64925: PUSH
64926: LD_INT 0
64928: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64929: LD_ADDR_VAR 0 5
64933: PUSH
64934: LD_VAR 0 1
64938: PPUSH
64939: LD_INT 21
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PPUSH
64949: CALL_OW 72
64953: ST_TO_ADDR
// if not tmp then
64954: LD_VAR 0 5
64958: NOT
64959: IFFALSE 64963
// exit ;
64961: GO 65008
// for i in tmp do
64963: LD_ADDR_VAR 0 3
64967: PUSH
64968: LD_VAR 0 5
64972: PUSH
64973: FOR_IN
64974: IFFALSE 65006
// begin result := EnemyInRange ( i , 22 ) ;
64976: LD_ADDR_VAR 0 2
64980: PUSH
64981: LD_VAR 0 3
64985: PPUSH
64986: LD_INT 22
64988: PPUSH
64989: CALL 62677 0 2
64993: ST_TO_ADDR
// if result then
64994: LD_VAR 0 2
64998: IFFALSE 65004
// exit ;
65000: POP
65001: POP
65002: GO 65008
// end ;
65004: GO 64973
65006: POP
65007: POP
// end ;
65008: LD_VAR 0 2
65012: RET
// export function FilterByTag ( units , tag ) ; begin
65013: LD_INT 0
65015: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65016: LD_ADDR_VAR 0 3
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_INT 120
65028: PUSH
65029: LD_VAR 0 2
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PPUSH
65038: CALL_OW 72
65042: ST_TO_ADDR
// end ;
65043: LD_VAR 0 3
65047: RET
// export function IsDriver ( un ) ; begin
65048: LD_INT 0
65050: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65051: LD_ADDR_VAR 0 2
65055: PUSH
65056: LD_VAR 0 1
65060: PUSH
65061: LD_INT 55
65063: PUSH
65064: EMPTY
65065: LIST
65066: PPUSH
65067: CALL_OW 69
65071: IN
65072: ST_TO_ADDR
// end ;
65073: LD_VAR 0 2
65077: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65078: LD_INT 0
65080: PPUSH
65081: PPUSH
// list := [ ] ;
65082: LD_ADDR_VAR 0 5
65086: PUSH
65087: EMPTY
65088: ST_TO_ADDR
// case d of 0 :
65089: LD_VAR 0 3
65093: PUSH
65094: LD_INT 0
65096: DOUBLE
65097: EQUAL
65098: IFTRUE 65102
65100: GO 65235
65102: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65103: LD_ADDR_VAR 0 5
65107: PUSH
65108: LD_VAR 0 1
65112: PUSH
65113: LD_INT 4
65115: MINUS
65116: PUSH
65117: LD_VAR 0 2
65121: PUSH
65122: LD_INT 4
65124: MINUS
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: PUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 3
65141: MINUS
65142: PUSH
65143: LD_VAR 0 2
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: PUSH
65156: LD_VAR 0 1
65160: PUSH
65161: LD_INT 4
65163: PLUS
65164: PUSH
65165: LD_VAR 0 2
65169: PUSH
65170: LD_INT 4
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: PUSH
65178: LD_VAR 0 1
65182: PUSH
65183: LD_INT 3
65185: PLUS
65186: PUSH
65187: LD_VAR 0 2
65191: PUSH
65192: LD_INT 3
65194: PLUS
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: PUSH
65204: LD_VAR 0 1
65208: PUSH
65209: LD_VAR 0 2
65213: PUSH
65214: LD_INT 4
65216: PLUS
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// end ; 1 :
65233: GO 65933
65235: LD_INT 1
65237: DOUBLE
65238: EQUAL
65239: IFTRUE 65243
65241: GO 65376
65243: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65244: LD_ADDR_VAR 0 5
65248: PUSH
65249: LD_VAR 0 1
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 4
65261: MINUS
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: LD_INT 3
65278: MINUS
65279: PUSH
65280: LD_VAR 0 2
65284: PUSH
65285: LD_INT 3
65287: MINUS
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: LD_VAR 0 1
65301: PUSH
65302: LD_INT 4
65304: MINUS
65305: PUSH
65306: LD_VAR 0 2
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: LIST
65318: PUSH
65319: LD_VAR 0 1
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_INT 3
65331: PLUS
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: LD_VAR 0 1
65345: PUSH
65346: LD_INT 4
65348: PLUS
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_INT 4
65357: PLUS
65358: PUSH
65359: LD_INT 5
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: ST_TO_ADDR
// end ; 2 :
65374: GO 65933
65376: LD_INT 2
65378: DOUBLE
65379: EQUAL
65380: IFTRUE 65384
65382: GO 65513
65384: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65385: LD_ADDR_VAR 0 5
65389: PUSH
65390: LD_VAR 0 1
65394: PUSH
65395: LD_VAR 0 2
65399: PUSH
65400: LD_INT 3
65402: MINUS
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: PUSH
65412: LD_VAR 0 1
65416: PUSH
65417: LD_INT 4
65419: PLUS
65420: PUSH
65421: LD_VAR 0 2
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: LD_VAR 0 1
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_INT 4
65446: PLUS
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_INT 3
65463: MINUS
65464: PUSH
65465: LD_VAR 0 2
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 4
65485: MINUS
65486: PUSH
65487: LD_VAR 0 2
65491: PUSH
65492: LD_INT 4
65494: MINUS
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// end ; 3 :
65511: GO 65933
65513: LD_INT 3
65515: DOUBLE
65516: EQUAL
65517: IFTRUE 65521
65519: GO 65654
65521: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65522: LD_ADDR_VAR 0 5
65526: PUSH
65527: LD_VAR 0 1
65531: PUSH
65532: LD_INT 3
65534: PLUS
65535: PUSH
65536: LD_VAR 0 2
65540: PUSH
65541: LD_INT 4
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_INT 4
65556: PLUS
65557: PUSH
65558: LD_VAR 0 2
65562: PUSH
65563: LD_INT 4
65565: PLUS
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: PUSH
65575: LD_VAR 0 1
65579: PUSH
65580: LD_INT 4
65582: MINUS
65583: PUSH
65584: LD_VAR 0 2
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_VAR 0 2
65606: PUSH
65607: LD_INT 4
65609: MINUS
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: PUSH
65619: LD_VAR 0 1
65623: PUSH
65624: LD_INT 3
65626: MINUS
65627: PUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_INT 3
65635: MINUS
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// end ; 4 :
65652: GO 65933
65654: LD_INT 4
65656: DOUBLE
65657: EQUAL
65658: IFTRUE 65662
65660: GO 65795
65662: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65663: LD_ADDR_VAR 0 5
65667: PUSH
65668: LD_VAR 0 1
65672: PUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_INT 4
65680: PLUS
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_INT 3
65697: PLUS
65698: PUSH
65699: LD_VAR 0 2
65703: PUSH
65704: LD_INT 3
65706: PLUS
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: PUSH
65716: LD_VAR 0 1
65720: PUSH
65721: LD_INT 4
65723: PLUS
65724: PUSH
65725: LD_VAR 0 2
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: LIST
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 3
65750: MINUS
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 4
65767: MINUS
65768: PUSH
65769: LD_VAR 0 2
65773: PUSH
65774: LD_INT 4
65776: MINUS
65777: PUSH
65778: LD_INT 2
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// end ; 5 :
65793: GO 65933
65795: LD_INT 5
65797: DOUBLE
65798: EQUAL
65799: IFTRUE 65803
65801: GO 65932
65803: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65804: LD_ADDR_VAR 0 5
65808: PUSH
65809: LD_VAR 0 1
65813: PUSH
65814: LD_INT 4
65816: MINUS
65817: PUSH
65818: LD_VAR 0 2
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: PUSH
65831: LD_VAR 0 1
65835: PUSH
65836: LD_VAR 0 2
65840: PUSH
65841: LD_INT 4
65843: MINUS
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 4
65860: PLUS
65861: PUSH
65862: LD_VAR 0 2
65866: PUSH
65867: LD_INT 4
65869: PLUS
65870: PUSH
65871: LD_INT 5
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: PUSH
65879: LD_VAR 0 1
65883: PUSH
65884: LD_INT 3
65886: PLUS
65887: PUSH
65888: LD_VAR 0 2
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: LD_VAR 0 1
65905: PUSH
65906: LD_VAR 0 2
65910: PUSH
65911: LD_INT 3
65913: PLUS
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: ST_TO_ADDR
// end ; end ;
65930: GO 65933
65932: POP
// result := list ;
65933: LD_ADDR_VAR 0 4
65937: PUSH
65938: LD_VAR 0 5
65942: ST_TO_ADDR
// end ;
65943: LD_VAR 0 4
65947: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65948: LD_INT 0
65950: PPUSH
65951: PPUSH
65952: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65953: LD_VAR 0 1
65957: NOT
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: IN
65982: NOT
65983: OR
65984: IFFALSE 65988
// exit ;
65986: GO 66080
// tmp := [ ] ;
65988: LD_ADDR_VAR 0 5
65992: PUSH
65993: EMPTY
65994: ST_TO_ADDR
// for i in units do
65995: LD_ADDR_VAR 0 4
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66049
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66008: LD_ADDR_VAR 0 5
66012: PUSH
66013: LD_VAR 0 5
66017: PPUSH
66018: LD_VAR 0 5
66022: PUSH
66023: LD_INT 1
66025: PLUS
66026: PPUSH
66027: LD_VAR 0 4
66031: PPUSH
66032: LD_VAR 0 2
66036: PPUSH
66037: CALL_OW 259
66041: PPUSH
66042: CALL_OW 2
66046: ST_TO_ADDR
66047: GO 66005
66049: POP
66050: POP
// if not tmp then
66051: LD_VAR 0 5
66055: NOT
66056: IFFALSE 66060
// exit ;
66058: GO 66080
// result := SortListByListDesc ( units , tmp ) ;
66060: LD_ADDR_VAR 0 3
66064: PUSH
66065: LD_VAR 0 1
66069: PPUSH
66070: LD_VAR 0 5
66074: PPUSH
66075: CALL_OW 77
66079: ST_TO_ADDR
// end ;
66080: LD_VAR 0 3
66084: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66085: LD_INT 0
66087: PPUSH
66088: PPUSH
66089: PPUSH
// result := false ;
66090: LD_ADDR_VAR 0 3
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// x := GetX ( building ) ;
66098: LD_ADDR_VAR 0 4
66102: PUSH
66103: LD_VAR 0 2
66107: PPUSH
66108: CALL_OW 250
66112: ST_TO_ADDR
// y := GetY ( building ) ;
66113: LD_ADDR_VAR 0 5
66117: PUSH
66118: LD_VAR 0 2
66122: PPUSH
66123: CALL_OW 251
66127: ST_TO_ADDR
// if not building or not x or not y then
66128: LD_VAR 0 2
66132: NOT
66133: PUSH
66134: LD_VAR 0 4
66138: NOT
66139: OR
66140: PUSH
66141: LD_VAR 0 5
66145: NOT
66146: OR
66147: IFFALSE 66151
// exit ;
66149: GO 66243
// if GetTaskList ( unit ) then
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 437
66160: IFFALSE 66243
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66162: LD_STRING e
66164: PUSH
66165: LD_VAR 0 1
66169: PPUSH
66170: CALL_OW 437
66174: PUSH
66175: LD_INT 1
66177: ARRAY
66178: PUSH
66179: LD_INT 1
66181: ARRAY
66182: EQUAL
66183: PUSH
66184: LD_VAR 0 4
66188: PUSH
66189: LD_VAR 0 1
66193: PPUSH
66194: CALL_OW 437
66198: PUSH
66199: LD_INT 1
66201: ARRAY
66202: PUSH
66203: LD_INT 2
66205: ARRAY
66206: EQUAL
66207: AND
66208: PUSH
66209: LD_VAR 0 5
66213: PUSH
66214: LD_VAR 0 1
66218: PPUSH
66219: CALL_OW 437
66223: PUSH
66224: LD_INT 1
66226: ARRAY
66227: PUSH
66228: LD_INT 3
66230: ARRAY
66231: EQUAL
66232: AND
66233: IFFALSE 66243
// result := true end ;
66235: LD_ADDR_VAR 0 3
66239: PUSH
66240: LD_INT 1
66242: ST_TO_ADDR
// end ;
66243: LD_VAR 0 3
66247: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66248: LD_INT 0
66250: PPUSH
// result := false ;
66251: LD_ADDR_VAR 0 4
66255: PUSH
66256: LD_INT 0
66258: ST_TO_ADDR
// if GetTaskList ( unit ) then
66259: LD_VAR 0 1
66263: PPUSH
66264: CALL_OW 437
66268: IFFALSE 66351
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66270: LD_STRING M
66272: PUSH
66273: LD_VAR 0 1
66277: PPUSH
66278: CALL_OW 437
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: PUSH
66287: LD_INT 1
66289: ARRAY
66290: EQUAL
66291: PUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: CALL_OW 437
66306: PUSH
66307: LD_INT 1
66309: ARRAY
66310: PUSH
66311: LD_INT 2
66313: ARRAY
66314: EQUAL
66315: AND
66316: PUSH
66317: LD_VAR 0 3
66321: PUSH
66322: LD_VAR 0 1
66326: PPUSH
66327: CALL_OW 437
66331: PUSH
66332: LD_INT 1
66334: ARRAY
66335: PUSH
66336: LD_INT 3
66338: ARRAY
66339: EQUAL
66340: AND
66341: IFFALSE 66351
// result := true ;
66343: LD_ADDR_VAR 0 4
66347: PUSH
66348: LD_INT 1
66350: ST_TO_ADDR
// end ; end ;
66351: LD_VAR 0 4
66355: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66356: LD_INT 0
66358: PPUSH
66359: PPUSH
66360: PPUSH
66361: PPUSH
// if not unit or not area then
66362: LD_VAR 0 1
66366: NOT
66367: PUSH
66368: LD_VAR 0 2
66372: NOT
66373: OR
66374: IFFALSE 66378
// exit ;
66376: GO 66542
// tmp := AreaToList ( area , i ) ;
66378: LD_ADDR_VAR 0 6
66382: PUSH
66383: LD_VAR 0 2
66387: PPUSH
66388: LD_VAR 0 5
66392: PPUSH
66393: CALL_OW 517
66397: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66398: LD_ADDR_VAR 0 5
66402: PUSH
66403: DOUBLE
66404: LD_INT 1
66406: DEC
66407: ST_TO_ADDR
66408: LD_VAR 0 6
66412: PUSH
66413: LD_INT 1
66415: ARRAY
66416: PUSH
66417: FOR_TO
66418: IFFALSE 66540
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66420: LD_ADDR_VAR 0 7
66424: PUSH
66425: LD_VAR 0 6
66429: PUSH
66430: LD_INT 1
66432: ARRAY
66433: PUSH
66434: LD_VAR 0 5
66438: ARRAY
66439: PUSH
66440: LD_VAR 0 6
66444: PUSH
66445: LD_INT 2
66447: ARRAY
66448: PUSH
66449: LD_VAR 0 5
66453: ARRAY
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66459: LD_VAR 0 7
66463: PUSH
66464: LD_INT 1
66466: ARRAY
66467: PPUSH
66468: LD_VAR 0 7
66472: PUSH
66473: LD_INT 2
66475: ARRAY
66476: PPUSH
66477: CALL_OW 428
66481: PUSH
66482: LD_INT 0
66484: EQUAL
66485: IFFALSE 66538
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66487: LD_VAR 0 1
66491: PPUSH
66492: LD_VAR 0 7
66496: PUSH
66497: LD_INT 1
66499: ARRAY
66500: PPUSH
66501: LD_VAR 0 7
66505: PUSH
66506: LD_INT 2
66508: ARRAY
66509: PPUSH
66510: LD_VAR 0 3
66514: PPUSH
66515: CALL_OW 48
// result := IsPlaced ( unit ) ;
66519: LD_ADDR_VAR 0 4
66523: PUSH
66524: LD_VAR 0 1
66528: PPUSH
66529: CALL_OW 305
66533: ST_TO_ADDR
// exit ;
66534: POP
66535: POP
66536: GO 66542
// end ; end ;
66538: GO 66417
66540: POP
66541: POP
// end ;
66542: LD_VAR 0 4
66546: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66547: LD_INT 0
66549: PPUSH
66550: PPUSH
66551: PPUSH
// if not side or side > 8 then
66552: LD_VAR 0 1
66556: NOT
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 8
66565: GREATER
66566: OR
66567: IFFALSE 66571
// exit ;
66569: GO 66758
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66571: LD_ADDR_VAR 0 4
66575: PUSH
66576: LD_INT 22
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 21
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PPUSH
66602: CALL_OW 69
66606: ST_TO_ADDR
// if not tmp then
66607: LD_VAR 0 4
66611: NOT
66612: IFFALSE 66616
// exit ;
66614: GO 66758
// enable_addtolog := true ;
66616: LD_ADDR_OWVAR 81
66620: PUSH
66621: LD_INT 1
66623: ST_TO_ADDR
// AddToLog ( [ ) ;
66624: LD_STRING [
66626: PPUSH
66627: CALL_OW 561
// for i in tmp do
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: LD_VAR 0 4
66640: PUSH
66641: FOR_IN
66642: IFFALSE 66749
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66644: LD_STRING [
66646: PUSH
66647: LD_VAR 0 3
66651: PPUSH
66652: CALL_OW 266
66656: STR
66657: PUSH
66658: LD_STRING , 
66660: STR
66661: PUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: CALL_OW 250
66671: STR
66672: PUSH
66673: LD_STRING , 
66675: STR
66676: PUSH
66677: LD_VAR 0 3
66681: PPUSH
66682: CALL_OW 251
66686: STR
66687: PUSH
66688: LD_STRING , 
66690: STR
66691: PUSH
66692: LD_VAR 0 3
66696: PPUSH
66697: CALL_OW 254
66701: STR
66702: PUSH
66703: LD_STRING , 
66705: STR
66706: PUSH
66707: LD_VAR 0 3
66711: PPUSH
66712: LD_INT 1
66714: PPUSH
66715: CALL_OW 268
66719: STR
66720: PUSH
66721: LD_STRING , 
66723: STR
66724: PUSH
66725: LD_VAR 0 3
66729: PPUSH
66730: LD_INT 2
66732: PPUSH
66733: CALL_OW 268
66737: STR
66738: PUSH
66739: LD_STRING ],
66741: STR
66742: PPUSH
66743: CALL_OW 561
// end ;
66747: GO 66641
66749: POP
66750: POP
// AddToLog ( ]; ) ;
66751: LD_STRING ];
66753: PPUSH
66754: CALL_OW 561
// end ;
66758: LD_VAR 0 2
66762: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66763: LD_INT 0
66765: PPUSH
66766: PPUSH
66767: PPUSH
66768: PPUSH
66769: PPUSH
// if not area or not rate or not max then
66770: LD_VAR 0 1
66774: NOT
66775: PUSH
66776: LD_VAR 0 2
66780: NOT
66781: OR
66782: PUSH
66783: LD_VAR 0 4
66787: NOT
66788: OR
66789: IFFALSE 66793
// exit ;
66791: GO 66982
// while 1 do
66793: LD_INT 1
66795: IFFALSE 66982
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66797: LD_ADDR_VAR 0 9
66801: PUSH
66802: LD_VAR 0 1
66806: PPUSH
66807: LD_INT 1
66809: PPUSH
66810: CALL_OW 287
66814: PUSH
66815: LD_INT 10
66817: MUL
66818: ST_TO_ADDR
// r := rate / 10 ;
66819: LD_ADDR_VAR 0 7
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: LD_INT 10
66831: DIVREAL
66832: ST_TO_ADDR
// time := 1 1$00 ;
66833: LD_ADDR_VAR 0 8
66837: PUSH
66838: LD_INT 2100
66840: ST_TO_ADDR
// if amount < min then
66841: LD_VAR 0 9
66845: PUSH
66846: LD_VAR 0 3
66850: LESS
66851: IFFALSE 66869
// r := r * 2 else
66853: LD_ADDR_VAR 0 7
66857: PUSH
66858: LD_VAR 0 7
66862: PUSH
66863: LD_INT 2
66865: MUL
66866: ST_TO_ADDR
66867: GO 66895
// if amount > max then
66869: LD_VAR 0 9
66873: PUSH
66874: LD_VAR 0 4
66878: GREATER
66879: IFFALSE 66895
// r := r / 2 ;
66881: LD_ADDR_VAR 0 7
66885: PUSH
66886: LD_VAR 0 7
66890: PUSH
66891: LD_INT 2
66893: DIVREAL
66894: ST_TO_ADDR
// time := time / r ;
66895: LD_ADDR_VAR 0 8
66899: PUSH
66900: LD_VAR 0 8
66904: PUSH
66905: LD_VAR 0 7
66909: DIVREAL
66910: ST_TO_ADDR
// if time < 0 then
66911: LD_VAR 0 8
66915: PUSH
66916: LD_INT 0
66918: LESS
66919: IFFALSE 66936
// time := time * - 1 ;
66921: LD_ADDR_VAR 0 8
66925: PUSH
66926: LD_VAR 0 8
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: MUL
66935: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66936: LD_VAR 0 8
66940: PUSH
66941: LD_INT 35
66943: PPUSH
66944: LD_INT 875
66946: PPUSH
66947: CALL_OW 12
66951: PLUS
66952: PPUSH
66953: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66957: LD_INT 1
66959: PPUSH
66960: LD_INT 5
66962: PPUSH
66963: CALL_OW 12
66967: PPUSH
66968: LD_VAR 0 1
66972: PPUSH
66973: LD_INT 1
66975: PPUSH
66976: CALL_OW 55
// end ;
66980: GO 66793
// end ;
66982: LD_VAR 0 5
66986: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66987: LD_INT 0
66989: PPUSH
66990: PPUSH
66991: PPUSH
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
66996: PPUSH
// if not turrets or not factories then
66997: LD_VAR 0 1
67001: NOT
67002: PUSH
67003: LD_VAR 0 2
67007: NOT
67008: OR
67009: IFFALSE 67013
// exit ;
67011: GO 67320
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67013: LD_ADDR_VAR 0 10
67017: PUSH
67018: LD_INT 5
67020: PUSH
67021: LD_INT 6
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 4
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: LD_INT 5
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 24
67055: PUSH
67056: LD_INT 25
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 23
67065: PUSH
67066: LD_INT 27
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 42
67079: PUSH
67080: LD_INT 43
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 44
67089: PUSH
67090: LD_INT 46
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 45
67099: PUSH
67100: LD_INT 47
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: ST_TO_ADDR
// result := [ ] ;
67117: LD_ADDR_VAR 0 3
67121: PUSH
67122: EMPTY
67123: ST_TO_ADDR
// for i in turrets do
67124: LD_ADDR_VAR 0 4
67128: PUSH
67129: LD_VAR 0 1
67133: PUSH
67134: FOR_IN
67135: IFFALSE 67318
// begin nat := GetNation ( i ) ;
67137: LD_ADDR_VAR 0 7
67141: PUSH
67142: LD_VAR 0 4
67146: PPUSH
67147: CALL_OW 248
67151: ST_TO_ADDR
// weapon := 0 ;
67152: LD_ADDR_VAR 0 8
67156: PUSH
67157: LD_INT 0
67159: ST_TO_ADDR
// if not nat then
67160: LD_VAR 0 7
67164: NOT
67165: IFFALSE 67169
// continue ;
67167: GO 67134
// for j in list [ nat ] do
67169: LD_ADDR_VAR 0 5
67173: PUSH
67174: LD_VAR 0 10
67178: PUSH
67179: LD_VAR 0 7
67183: ARRAY
67184: PUSH
67185: FOR_IN
67186: IFFALSE 67227
// if GetBWeapon ( i ) = j [ 1 ] then
67188: LD_VAR 0 4
67192: PPUSH
67193: CALL_OW 269
67197: PUSH
67198: LD_VAR 0 5
67202: PUSH
67203: LD_INT 1
67205: ARRAY
67206: EQUAL
67207: IFFALSE 67225
// begin weapon := j [ 2 ] ;
67209: LD_ADDR_VAR 0 8
67213: PUSH
67214: LD_VAR 0 5
67218: PUSH
67219: LD_INT 2
67221: ARRAY
67222: ST_TO_ADDR
// break ;
67223: GO 67227
// end ;
67225: GO 67185
67227: POP
67228: POP
// if not weapon then
67229: LD_VAR 0 8
67233: NOT
67234: IFFALSE 67238
// continue ;
67236: GO 67134
// for k in factories do
67238: LD_ADDR_VAR 0 6
67242: PUSH
67243: LD_VAR 0 2
67247: PUSH
67248: FOR_IN
67249: IFFALSE 67314
// begin weapons := AvailableWeaponList ( k ) ;
67251: LD_ADDR_VAR 0 9
67255: PUSH
67256: LD_VAR 0 6
67260: PPUSH
67261: CALL_OW 478
67265: ST_TO_ADDR
// if not weapons then
67266: LD_VAR 0 9
67270: NOT
67271: IFFALSE 67275
// continue ;
67273: GO 67248
// if weapon in weapons then
67275: LD_VAR 0 8
67279: PUSH
67280: LD_VAR 0 9
67284: IN
67285: IFFALSE 67312
// begin result := [ i , weapon ] ;
67287: LD_ADDR_VAR 0 3
67291: PUSH
67292: LD_VAR 0 4
67296: PUSH
67297: LD_VAR 0 8
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: ST_TO_ADDR
// exit ;
67306: POP
67307: POP
67308: POP
67309: POP
67310: GO 67320
// end ; end ;
67312: GO 67248
67314: POP
67315: POP
// end ;
67316: GO 67134
67318: POP
67319: POP
// end ;
67320: LD_VAR 0 3
67324: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67325: LD_INT 0
67327: PPUSH
// if not side or side > 8 then
67328: LD_VAR 0 3
67332: NOT
67333: PUSH
67334: LD_VAR 0 3
67338: PUSH
67339: LD_INT 8
67341: GREATER
67342: OR
67343: IFFALSE 67347
// exit ;
67345: GO 67406
// if not range then
67347: LD_VAR 0 4
67351: NOT
67352: IFFALSE 67363
// range := - 12 ;
67354: LD_ADDR_VAR 0 4
67358: PUSH
67359: LD_INT 12
67361: NEG
67362: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67363: LD_VAR 0 1
67367: PPUSH
67368: LD_VAR 0 2
67372: PPUSH
67373: LD_VAR 0 3
67377: PPUSH
67378: LD_VAR 0 4
67382: PPUSH
67383: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67387: LD_VAR 0 1
67391: PPUSH
67392: LD_VAR 0 2
67396: PPUSH
67397: LD_VAR 0 3
67401: PPUSH
67402: CALL_OW 331
// end ;
67406: LD_VAR 0 5
67410: RET
// export function Video ( mode ) ; begin
67411: LD_INT 0
67413: PPUSH
// ingame_video = mode ;
67414: LD_ADDR_OWVAR 52
67418: PUSH
67419: LD_VAR 0 1
67423: ST_TO_ADDR
// interface_hidden = mode ;
67424: LD_ADDR_OWVAR 54
67428: PUSH
67429: LD_VAR 0 1
67433: ST_TO_ADDR
// end ;
67434: LD_VAR 0 2
67438: RET
// export function Join ( array , element ) ; begin
67439: LD_INT 0
67441: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67442: LD_ADDR_VAR 0 3
67446: PUSH
67447: LD_VAR 0 1
67451: PPUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_INT 1
67459: PLUS
67460: PPUSH
67461: LD_VAR 0 2
67465: PPUSH
67466: CALL_OW 1
67470: ST_TO_ADDR
// end ;
67471: LD_VAR 0 3
67475: RET
// export function JoinUnion ( array , element ) ; begin
67476: LD_INT 0
67478: PPUSH
// result := array union element ;
67479: LD_ADDR_VAR 0 3
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: LD_VAR 0 2
67493: UNION
67494: ST_TO_ADDR
// end ;
67495: LD_VAR 0 3
67499: RET
// export function GetBehemoths ( side ) ; begin
67500: LD_INT 0
67502: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67503: LD_ADDR_VAR 0 2
67507: PUSH
67508: LD_INT 22
67510: PUSH
67511: LD_VAR 0 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 31
67522: PUSH
67523: LD_INT 25
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PPUSH
67534: CALL_OW 69
67538: ST_TO_ADDR
// end ;
67539: LD_VAR 0 2
67543: RET
// export function Shuffle ( array ) ; var i , index ; begin
67544: LD_INT 0
67546: PPUSH
67547: PPUSH
67548: PPUSH
// result := [ ] ;
67549: LD_ADDR_VAR 0 2
67553: PUSH
67554: EMPTY
67555: ST_TO_ADDR
// if not array then
67556: LD_VAR 0 1
67560: NOT
67561: IFFALSE 67565
// exit ;
67563: GO 67664
// Randomize ;
67565: CALL_OW 10
// for i = array downto 1 do
67569: LD_ADDR_VAR 0 3
67573: PUSH
67574: DOUBLE
67575: LD_VAR 0 1
67579: INC
67580: ST_TO_ADDR
67581: LD_INT 1
67583: PUSH
67584: FOR_DOWNTO
67585: IFFALSE 67662
// begin index := rand ( 1 , array ) ;
67587: LD_ADDR_VAR 0 4
67591: PUSH
67592: LD_INT 1
67594: PPUSH
67595: LD_VAR 0 1
67599: PPUSH
67600: CALL_OW 12
67604: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67605: LD_ADDR_VAR 0 2
67609: PUSH
67610: LD_VAR 0 2
67614: PPUSH
67615: LD_VAR 0 2
67619: PUSH
67620: LD_INT 1
67622: PLUS
67623: PPUSH
67624: LD_VAR 0 1
67628: PUSH
67629: LD_VAR 0 4
67633: ARRAY
67634: PPUSH
67635: CALL_OW 2
67639: ST_TO_ADDR
// array := Delete ( array , index ) ;
67640: LD_ADDR_VAR 0 1
67644: PUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_VAR 0 4
67654: PPUSH
67655: CALL_OW 3
67659: ST_TO_ADDR
// end ;
67660: GO 67584
67662: POP
67663: POP
// end ;
67664: LD_VAR 0 2
67668: RET
// export function GetBaseMaterials ( base ) ; begin
67669: LD_INT 0
67671: PPUSH
// result := [ 0 , 0 , 0 ] ;
67672: LD_ADDR_VAR 0 2
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// if not base then
67691: LD_VAR 0 1
67695: NOT
67696: IFFALSE 67700
// exit ;
67698: GO 67749
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67700: LD_ADDR_VAR 0 2
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_INT 1
67712: PPUSH
67713: CALL_OW 275
67717: PUSH
67718: LD_VAR 0 1
67722: PPUSH
67723: LD_INT 2
67725: PPUSH
67726: CALL_OW 275
67730: PUSH
67731: LD_VAR 0 1
67735: PPUSH
67736: LD_INT 3
67738: PPUSH
67739: CALL_OW 275
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: ST_TO_ADDR
// end ;
67749: LD_VAR 0 2
67753: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67754: LD_INT 0
67756: PPUSH
67757: PPUSH
// result := array ;
67758: LD_ADDR_VAR 0 3
67762: PUSH
67763: LD_VAR 0 1
67767: ST_TO_ADDR
// if size >= result then
67768: LD_VAR 0 2
67772: PUSH
67773: LD_VAR 0 3
67777: GREATEREQUAL
67778: IFFALSE 67782
// exit ;
67780: GO 67832
// if size then
67782: LD_VAR 0 2
67786: IFFALSE 67832
// for i := array downto size do
67788: LD_ADDR_VAR 0 4
67792: PUSH
67793: DOUBLE
67794: LD_VAR 0 1
67798: INC
67799: ST_TO_ADDR
67800: LD_VAR 0 2
67804: PUSH
67805: FOR_DOWNTO
67806: IFFALSE 67830
// result := Delete ( result , result ) ;
67808: LD_ADDR_VAR 0 3
67812: PUSH
67813: LD_VAR 0 3
67817: PPUSH
67818: LD_VAR 0 3
67822: PPUSH
67823: CALL_OW 3
67827: ST_TO_ADDR
67828: GO 67805
67830: POP
67831: POP
// end ;
67832: LD_VAR 0 3
67836: RET
// export function ComExit ( unit ) ; var tmp ; begin
67837: LD_INT 0
67839: PPUSH
67840: PPUSH
// if not IsInUnit ( unit ) then
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 310
67850: NOT
67851: IFFALSE 67855
// exit ;
67853: GO 67915
// tmp := IsInUnit ( unit ) ;
67855: LD_ADDR_VAR 0 3
67859: PUSH
67860: LD_VAR 0 1
67864: PPUSH
67865: CALL_OW 310
67869: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67870: LD_VAR 0 3
67874: PPUSH
67875: CALL_OW 247
67879: PUSH
67880: LD_INT 2
67882: EQUAL
67883: IFFALSE 67896
// ComExitVehicle ( unit ) else
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 121
67894: GO 67905
// ComExitBuilding ( unit ) ;
67896: LD_VAR 0 1
67900: PPUSH
67901: CALL_OW 122
// result := tmp ;
67905: LD_ADDR_VAR 0 2
67909: PUSH
67910: LD_VAR 0 3
67914: ST_TO_ADDR
// end ;
67915: LD_VAR 0 2
67919: RET
// export function ComExitAll ( units ) ; var i ; begin
67920: LD_INT 0
67922: PPUSH
67923: PPUSH
// if not units then
67924: LD_VAR 0 1
67928: NOT
67929: IFFALSE 67933
// exit ;
67931: GO 67959
// for i in units do
67933: LD_ADDR_VAR 0 3
67937: PUSH
67938: LD_VAR 0 1
67942: PUSH
67943: FOR_IN
67944: IFFALSE 67957
// ComExit ( i ) ;
67946: LD_VAR 0 3
67950: PPUSH
67951: CALL 67837 0 1
67955: GO 67943
67957: POP
67958: POP
// end ;
67959: LD_VAR 0 2
67963: RET
// export function ResetHc ; begin
67964: LD_INT 0
67966: PPUSH
// InitHc ;
67967: CALL_OW 19
// hc_importance := 0 ;
67971: LD_ADDR_OWVAR 32
67975: PUSH
67976: LD_INT 0
67978: ST_TO_ADDR
// end ;
67979: LD_VAR 0 1
67983: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67984: LD_INT 0
67986: PPUSH
67987: PPUSH
67988: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67989: LD_ADDR_VAR 0 6
67993: PUSH
67994: LD_VAR 0 1
67998: PUSH
67999: LD_VAR 0 3
68003: PLUS
68004: PUSH
68005: LD_INT 2
68007: DIV
68008: ST_TO_ADDR
// if _x < 0 then
68009: LD_VAR 0 6
68013: PUSH
68014: LD_INT 0
68016: LESS
68017: IFFALSE 68034
// _x := _x * - 1 ;
68019: LD_ADDR_VAR 0 6
68023: PUSH
68024: LD_VAR 0 6
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: MUL
68033: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68034: LD_ADDR_VAR 0 7
68038: PUSH
68039: LD_VAR 0 2
68043: PUSH
68044: LD_VAR 0 4
68048: PLUS
68049: PUSH
68050: LD_INT 2
68052: DIV
68053: ST_TO_ADDR
// if _y < 0 then
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 0
68061: LESS
68062: IFFALSE 68079
// _y := _y * - 1 ;
68064: LD_ADDR_VAR 0 7
68068: PUSH
68069: LD_VAR 0 7
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: MUL
68078: ST_TO_ADDR
// result := [ _x , _y ] ;
68079: LD_ADDR_VAR 0 5
68083: PUSH
68084: LD_VAR 0 6
68088: PUSH
68089: LD_VAR 0 7
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// end ;
68098: LD_VAR 0 5
68102: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68103: LD_INT 0
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
// task := GetTaskList ( unit ) ;
68109: LD_ADDR_VAR 0 7
68113: PUSH
68114: LD_VAR 0 1
68118: PPUSH
68119: CALL_OW 437
68123: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68124: LD_VAR 0 7
68128: NOT
68129: PUSH
68130: LD_VAR 0 1
68134: PPUSH
68135: LD_VAR 0 2
68139: PPUSH
68140: CALL_OW 308
68144: NOT
68145: AND
68146: IFFALSE 68150
// exit ;
68148: GO 68268
// if IsInArea ( unit , area ) then
68150: LD_VAR 0 1
68154: PPUSH
68155: LD_VAR 0 2
68159: PPUSH
68160: CALL_OW 308
68164: IFFALSE 68182
// begin ComMoveToArea ( unit , goAway ) ;
68166: LD_VAR 0 1
68170: PPUSH
68171: LD_VAR 0 3
68175: PPUSH
68176: CALL_OW 113
// exit ;
68180: GO 68268
// end ; if task [ 1 ] [ 1 ] <> M then
68182: LD_VAR 0 7
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: PUSH
68191: LD_INT 1
68193: ARRAY
68194: PUSH
68195: LD_STRING M
68197: NONEQUAL
68198: IFFALSE 68202
// exit ;
68200: GO 68268
// x := task [ 1 ] [ 2 ] ;
68202: LD_ADDR_VAR 0 5
68206: PUSH
68207: LD_VAR 0 7
68211: PUSH
68212: LD_INT 1
68214: ARRAY
68215: PUSH
68216: LD_INT 2
68218: ARRAY
68219: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68220: LD_ADDR_VAR 0 6
68224: PUSH
68225: LD_VAR 0 7
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: PUSH
68234: LD_INT 3
68236: ARRAY
68237: ST_TO_ADDR
// if InArea ( x , y , area ) then
68238: LD_VAR 0 5
68242: PPUSH
68243: LD_VAR 0 6
68247: PPUSH
68248: LD_VAR 0 2
68252: PPUSH
68253: CALL_OW 309
68257: IFFALSE 68268
// ComStop ( unit ) ;
68259: LD_VAR 0 1
68263: PPUSH
68264: CALL_OW 141
// end ;
68268: LD_VAR 0 4
68272: RET
// export function Abs ( value ) ; begin
68273: LD_INT 0
68275: PPUSH
// result := value ;
68276: LD_ADDR_VAR 0 2
68280: PUSH
68281: LD_VAR 0 1
68285: ST_TO_ADDR
// if value < 0 then
68286: LD_VAR 0 1
68290: PUSH
68291: LD_INT 0
68293: LESS
68294: IFFALSE 68311
// result := value * - 1 ;
68296: LD_ADDR_VAR 0 2
68300: PUSH
68301: LD_VAR 0 1
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: MUL
68310: ST_TO_ADDR
// end ;
68311: LD_VAR 0 2
68315: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68316: LD_INT 0
68318: PPUSH
68319: PPUSH
68320: PPUSH
68321: PPUSH
68322: PPUSH
68323: PPUSH
68324: PPUSH
68325: PPUSH
// if not unit or not building then
68326: LD_VAR 0 1
68330: NOT
68331: PUSH
68332: LD_VAR 0 2
68336: NOT
68337: OR
68338: IFFALSE 68342
// exit ;
68340: GO 68568
// x := GetX ( building ) ;
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: LD_VAR 0 2
68351: PPUSH
68352: CALL_OW 250
68356: ST_TO_ADDR
// y := GetY ( building ) ;
68357: LD_ADDR_VAR 0 6
68361: PUSH
68362: LD_VAR 0 2
68366: PPUSH
68367: CALL_OW 251
68371: ST_TO_ADDR
// d := GetDir ( building ) ;
68372: LD_ADDR_VAR 0 8
68376: PUSH
68377: LD_VAR 0 2
68381: PPUSH
68382: CALL_OW 254
68386: ST_TO_ADDR
// r := 4 ;
68387: LD_ADDR_VAR 0 9
68391: PUSH
68392: LD_INT 4
68394: ST_TO_ADDR
// for i := 1 to 5 do
68395: LD_ADDR_VAR 0 10
68399: PUSH
68400: DOUBLE
68401: LD_INT 1
68403: DEC
68404: ST_TO_ADDR
68405: LD_INT 5
68407: PUSH
68408: FOR_TO
68409: IFFALSE 68566
// begin _x := ShiftX ( x , d , r + i ) ;
68411: LD_ADDR_VAR 0 5
68415: PUSH
68416: LD_VAR 0 4
68420: PPUSH
68421: LD_VAR 0 8
68425: PPUSH
68426: LD_VAR 0 9
68430: PUSH
68431: LD_VAR 0 10
68435: PLUS
68436: PPUSH
68437: CALL_OW 272
68441: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68442: LD_ADDR_VAR 0 7
68446: PUSH
68447: LD_VAR 0 6
68451: PPUSH
68452: LD_VAR 0 8
68456: PPUSH
68457: LD_VAR 0 9
68461: PUSH
68462: LD_VAR 0 10
68466: PLUS
68467: PPUSH
68468: CALL_OW 273
68472: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68473: LD_VAR 0 5
68477: PPUSH
68478: LD_VAR 0 7
68482: PPUSH
68483: CALL_OW 488
68487: PUSH
68488: LD_VAR 0 5
68492: PPUSH
68493: LD_VAR 0 7
68497: PPUSH
68498: CALL_OW 428
68502: PPUSH
68503: CALL_OW 247
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: IN
68518: NOT
68519: AND
68520: IFFALSE 68564
// begin ComMoveXY ( unit , _x , _y ) ;
68522: LD_VAR 0 1
68526: PPUSH
68527: LD_VAR 0 5
68531: PPUSH
68532: LD_VAR 0 7
68536: PPUSH
68537: CALL_OW 111
// result := [ _x , _y ] ;
68541: LD_ADDR_VAR 0 3
68545: PUSH
68546: LD_VAR 0 5
68550: PUSH
68551: LD_VAR 0 7
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: ST_TO_ADDR
// exit ;
68560: POP
68561: POP
68562: GO 68568
// end ; end ;
68564: GO 68408
68566: POP
68567: POP
// end ;
68568: LD_VAR 0 3
68572: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68573: LD_INT 0
68575: PPUSH
68576: PPUSH
68577: PPUSH
// result := 0 ;
68578: LD_ADDR_VAR 0 3
68582: PUSH
68583: LD_INT 0
68585: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68586: LD_VAR 0 1
68590: PUSH
68591: LD_INT 0
68593: LESS
68594: PUSH
68595: LD_VAR 0 1
68599: PUSH
68600: LD_INT 8
68602: GREATER
68603: OR
68604: PUSH
68605: LD_VAR 0 2
68609: PUSH
68610: LD_INT 0
68612: LESS
68613: OR
68614: PUSH
68615: LD_VAR 0 2
68619: PUSH
68620: LD_INT 8
68622: GREATER
68623: OR
68624: IFFALSE 68628
// exit ;
68626: GO 68703
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68628: LD_ADDR_VAR 0 4
68632: PUSH
68633: LD_INT 22
68635: PUSH
68636: LD_VAR 0 2
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PPUSH
68645: CALL_OW 69
68649: PUSH
68650: FOR_IN
68651: IFFALSE 68701
// begin un := UnitShoot ( i ) ;
68653: LD_ADDR_VAR 0 5
68657: PUSH
68658: LD_VAR 0 4
68662: PPUSH
68663: CALL_OW 504
68667: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68668: LD_VAR 0 5
68672: PPUSH
68673: CALL_OW 255
68677: PUSH
68678: LD_VAR 0 1
68682: EQUAL
68683: IFFALSE 68699
// begin result := un ;
68685: LD_ADDR_VAR 0 3
68689: PUSH
68690: LD_VAR 0 5
68694: ST_TO_ADDR
// exit ;
68695: POP
68696: POP
68697: GO 68703
// end ; end ;
68699: GO 68650
68701: POP
68702: POP
// end ;
68703: LD_VAR 0 3
68707: RET
// export function GetCargoBay ( units ) ; begin
68708: LD_INT 0
68710: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68711: LD_ADDR_VAR 0 2
68715: PUSH
68716: LD_VAR 0 1
68720: PPUSH
68721: LD_INT 2
68723: PUSH
68724: LD_INT 34
68726: PUSH
68727: LD_INT 12
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 34
68736: PUSH
68737: LD_INT 51
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 34
68746: PUSH
68747: LD_INT 32
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 34
68756: PUSH
68757: LD_EXP 98
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: PPUSH
68773: CALL_OW 72
68777: ST_TO_ADDR
// end ;
68778: LD_VAR 0 2
68782: RET
// export function Negate ( value ) ; begin
68783: LD_INT 0
68785: PPUSH
// result := not value ;
68786: LD_ADDR_VAR 0 2
68790: PUSH
68791: LD_VAR 0 1
68795: NOT
68796: ST_TO_ADDR
// end ;
68797: LD_VAR 0 2
68801: RET
// export function Inc ( value ) ; begin
68802: LD_INT 0
68804: PPUSH
// result := value + 1 ;
68805: LD_ADDR_VAR 0 2
68809: PUSH
68810: LD_VAR 0 1
68814: PUSH
68815: LD_INT 1
68817: PLUS
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 2
68823: RET
// export function Dec ( value ) ; begin
68824: LD_INT 0
68826: PPUSH
// result := value - 1 ;
68827: LD_ADDR_VAR 0 2
68831: PUSH
68832: LD_VAR 0 1
68836: PUSH
68837: LD_INT 1
68839: MINUS
68840: ST_TO_ADDR
// end ;
68841: LD_VAR 0 2
68845: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68846: LD_INT 0
68848: PPUSH
68849: PPUSH
68850: PPUSH
68851: PPUSH
68852: PPUSH
68853: PPUSH
68854: PPUSH
68855: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68856: LD_VAR 0 1
68860: PPUSH
68861: LD_VAR 0 2
68865: PPUSH
68866: CALL_OW 488
68870: NOT
68871: PUSH
68872: LD_VAR 0 3
68876: PPUSH
68877: LD_VAR 0 4
68881: PPUSH
68882: CALL_OW 488
68886: NOT
68887: OR
68888: IFFALSE 68901
// begin result := - 1 ;
68890: LD_ADDR_VAR 0 5
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: ST_TO_ADDR
// exit ;
68899: GO 69136
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68901: LD_ADDR_VAR 0 12
68905: PUSH
68906: LD_VAR 0 1
68910: PPUSH
68911: LD_VAR 0 2
68915: PPUSH
68916: LD_VAR 0 3
68920: PPUSH
68921: LD_VAR 0 4
68925: PPUSH
68926: CALL 67984 0 4
68930: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68931: LD_ADDR_VAR 0 11
68935: PUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: LD_VAR 0 2
68945: PPUSH
68946: LD_VAR 0 12
68950: PUSH
68951: LD_INT 1
68953: ARRAY
68954: PPUSH
68955: LD_VAR 0 12
68959: PUSH
68960: LD_INT 2
68962: ARRAY
68963: PPUSH
68964: CALL_OW 298
68968: ST_TO_ADDR
// distance := 9999 ;
68969: LD_ADDR_VAR 0 10
68973: PUSH
68974: LD_INT 9999
68976: ST_TO_ADDR
// for i := 0 to 5 do
68977: LD_ADDR_VAR 0 6
68981: PUSH
68982: DOUBLE
68983: LD_INT 0
68985: DEC
68986: ST_TO_ADDR
68987: LD_INT 5
68989: PUSH
68990: FOR_TO
68991: IFFALSE 69134
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68993: LD_ADDR_VAR 0 7
68997: PUSH
68998: LD_VAR 0 1
69002: PPUSH
69003: LD_VAR 0 6
69007: PPUSH
69008: LD_VAR 0 11
69012: PPUSH
69013: CALL_OW 272
69017: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69018: LD_ADDR_VAR 0 8
69022: PUSH
69023: LD_VAR 0 2
69027: PPUSH
69028: LD_VAR 0 6
69032: PPUSH
69033: LD_VAR 0 11
69037: PPUSH
69038: CALL_OW 273
69042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69043: LD_VAR 0 7
69047: PPUSH
69048: LD_VAR 0 8
69052: PPUSH
69053: CALL_OW 488
69057: NOT
69058: IFFALSE 69062
// continue ;
69060: GO 68990
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69062: LD_ADDR_VAR 0 9
69066: PUSH
69067: LD_VAR 0 12
69071: PUSH
69072: LD_INT 1
69074: ARRAY
69075: PPUSH
69076: LD_VAR 0 12
69080: PUSH
69081: LD_INT 2
69083: ARRAY
69084: PPUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_VAR 0 8
69094: PPUSH
69095: CALL_OW 298
69099: ST_TO_ADDR
// if tmp < distance then
69100: LD_VAR 0 9
69104: PUSH
69105: LD_VAR 0 10
69109: LESS
69110: IFFALSE 69132
// begin result := i ;
69112: LD_ADDR_VAR 0 5
69116: PUSH
69117: LD_VAR 0 6
69121: ST_TO_ADDR
// distance := tmp ;
69122: LD_ADDR_VAR 0 10
69126: PUSH
69127: LD_VAR 0 9
69131: ST_TO_ADDR
// end ; end ;
69132: GO 68990
69134: POP
69135: POP
// end ;
69136: LD_VAR 0 5
69140: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69141: LD_INT 0
69143: PPUSH
69144: PPUSH
// if not driver or not IsInUnit ( driver ) then
69145: LD_VAR 0 1
69149: NOT
69150: PUSH
69151: LD_VAR 0 1
69155: PPUSH
69156: CALL_OW 310
69160: NOT
69161: OR
69162: IFFALSE 69166
// exit ;
69164: GO 69256
// vehicle := IsInUnit ( driver ) ;
69166: LD_ADDR_VAR 0 3
69170: PUSH
69171: LD_VAR 0 1
69175: PPUSH
69176: CALL_OW 310
69180: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69181: LD_VAR 0 1
69185: PPUSH
69186: LD_STRING \
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: PUSH
69216: LD_STRING E
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: LD_VAR 0 3
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PPUSH
69252: CALL_OW 446
// end ;
69256: LD_VAR 0 2
69260: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69261: LD_INT 0
69263: PPUSH
69264: PPUSH
// if not driver or not IsInUnit ( driver ) then
69265: LD_VAR 0 1
69269: NOT
69270: PUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 310
69280: NOT
69281: OR
69282: IFFALSE 69286
// exit ;
69284: GO 69376
// vehicle := IsInUnit ( driver ) ;
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: CALL_OW 310
69300: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69301: LD_VAR 0 1
69305: PPUSH
69306: LD_STRING \
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: PUSH
69336: LD_STRING E
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: LD_VAR 0 3
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PPUSH
69372: CALL_OW 447
// end ;
69376: LD_VAR 0 2
69380: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
69385: PPUSH
// tmp := [ ] ;
69386: LD_ADDR_VAR 0 5
69390: PUSH
69391: EMPTY
69392: ST_TO_ADDR
// for i in units do
69393: LD_ADDR_VAR 0 4
69397: PUSH
69398: LD_VAR 0 1
69402: PUSH
69403: FOR_IN
69404: IFFALSE 69442
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69406: LD_ADDR_VAR 0 5
69410: PUSH
69411: LD_VAR 0 5
69415: PPUSH
69416: LD_VAR 0 5
69420: PUSH
69421: LD_INT 1
69423: PLUS
69424: PPUSH
69425: LD_VAR 0 4
69429: PPUSH
69430: CALL_OW 256
69434: PPUSH
69435: CALL_OW 2
69439: ST_TO_ADDR
69440: GO 69403
69442: POP
69443: POP
// if not tmp then
69444: LD_VAR 0 5
69448: NOT
69449: IFFALSE 69453
// exit ;
69451: GO 69501
// if asc then
69453: LD_VAR 0 2
69457: IFFALSE 69481
// result := SortListByListAsc ( units , tmp ) else
69459: LD_ADDR_VAR 0 3
69463: PUSH
69464: LD_VAR 0 1
69468: PPUSH
69469: LD_VAR 0 5
69473: PPUSH
69474: CALL_OW 76
69478: ST_TO_ADDR
69479: GO 69501
// result := SortListByListDesc ( units , tmp ) ;
69481: LD_ADDR_VAR 0 3
69485: PUSH
69486: LD_VAR 0 1
69490: PPUSH
69491: LD_VAR 0 5
69495: PPUSH
69496: CALL_OW 77
69500: ST_TO_ADDR
// end ;
69501: LD_VAR 0 3
69505: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69506: LD_INT 0
69508: PPUSH
69509: PPUSH
// task := GetTaskList ( mech ) ;
69510: LD_ADDR_VAR 0 4
69514: PUSH
69515: LD_VAR 0 1
69519: PPUSH
69520: CALL_OW 437
69524: ST_TO_ADDR
// if not task then
69525: LD_VAR 0 4
69529: NOT
69530: IFFALSE 69534
// exit ;
69532: GO 69576
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_VAR 0 4
69543: PUSH
69544: LD_INT 1
69546: ARRAY
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: PUSH
69552: LD_STRING r
69554: EQUAL
69555: PUSH
69556: LD_VAR 0 4
69560: PUSH
69561: LD_INT 1
69563: ARRAY
69564: PUSH
69565: LD_INT 4
69567: ARRAY
69568: PUSH
69569: LD_VAR 0 2
69573: EQUAL
69574: AND
69575: ST_TO_ADDR
// end ;
69576: LD_VAR 0 3
69580: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69581: LD_INT 0
69583: PPUSH
// SetDir ( unit , d ) ;
69584: LD_VAR 0 1
69588: PPUSH
69589: LD_VAR 0 4
69593: PPUSH
69594: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69598: LD_VAR 0 1
69602: PPUSH
69603: LD_VAR 0 2
69607: PPUSH
69608: LD_VAR 0 3
69612: PPUSH
69613: LD_VAR 0 5
69617: PPUSH
69618: CALL_OW 48
// end ;
69622: LD_VAR 0 6
69626: RET
// export function ToNaturalNumber ( number ) ; begin
69627: LD_INT 0
69629: PPUSH
// result := number div 1 ;
69630: LD_ADDR_VAR 0 2
69634: PUSH
69635: LD_VAR 0 1
69639: PUSH
69640: LD_INT 1
69642: DIV
69643: ST_TO_ADDR
// if number < 0 then
69644: LD_VAR 0 1
69648: PUSH
69649: LD_INT 0
69651: LESS
69652: IFFALSE 69662
// result := 0 ;
69654: LD_ADDR_VAR 0 2
69658: PUSH
69659: LD_INT 0
69661: ST_TO_ADDR
// end ;
69662: LD_VAR 0 2
69666: RET
// export function SortByClass ( units , class ) ; var un ; begin
69667: LD_INT 0
69669: PPUSH
69670: PPUSH
// if not units or not class then
69671: LD_VAR 0 1
69675: NOT
69676: PUSH
69677: LD_VAR 0 2
69681: NOT
69682: OR
69683: IFFALSE 69687
// exit ;
69685: GO 69782
// result := [ ] ;
69687: LD_ADDR_VAR 0 3
69691: PUSH
69692: EMPTY
69693: ST_TO_ADDR
// for un in units do
69694: LD_ADDR_VAR 0 4
69698: PUSH
69699: LD_VAR 0 1
69703: PUSH
69704: FOR_IN
69705: IFFALSE 69780
// if GetClass ( un ) = class then
69707: LD_VAR 0 4
69711: PPUSH
69712: CALL_OW 257
69716: PUSH
69717: LD_VAR 0 2
69721: EQUAL
69722: IFFALSE 69749
// result := Insert ( result , 1 , un ) else
69724: LD_ADDR_VAR 0 3
69728: PUSH
69729: LD_VAR 0 3
69733: PPUSH
69734: LD_INT 1
69736: PPUSH
69737: LD_VAR 0 4
69741: PPUSH
69742: CALL_OW 2
69746: ST_TO_ADDR
69747: GO 69778
// result := Replace ( result , result + 1 , un ) ;
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: LD_VAR 0 3
69758: PPUSH
69759: LD_VAR 0 3
69763: PUSH
69764: LD_INT 1
69766: PLUS
69767: PPUSH
69768: LD_VAR 0 4
69772: PPUSH
69773: CALL_OW 1
69777: ST_TO_ADDR
69778: GO 69704
69780: POP
69781: POP
// end ;
69782: LD_VAR 0 3
69786: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69787: LD_INT 0
69789: PPUSH
69790: PPUSH
69791: PPUSH
69792: PPUSH
69793: PPUSH
69794: PPUSH
69795: PPUSH
// result := [ ] ;
69796: LD_ADDR_VAR 0 4
69800: PUSH
69801: EMPTY
69802: ST_TO_ADDR
// if x - r < 0 then
69803: LD_VAR 0 1
69807: PUSH
69808: LD_VAR 0 3
69812: MINUS
69813: PUSH
69814: LD_INT 0
69816: LESS
69817: IFFALSE 69829
// min_x := 0 else
69819: LD_ADDR_VAR 0 8
69823: PUSH
69824: LD_INT 0
69826: ST_TO_ADDR
69827: GO 69845
// min_x := x - r ;
69829: LD_ADDR_VAR 0 8
69833: PUSH
69834: LD_VAR 0 1
69838: PUSH
69839: LD_VAR 0 3
69843: MINUS
69844: ST_TO_ADDR
// if y - r < 0 then
69845: LD_VAR 0 2
69849: PUSH
69850: LD_VAR 0 3
69854: MINUS
69855: PUSH
69856: LD_INT 0
69858: LESS
69859: IFFALSE 69871
// min_y := 0 else
69861: LD_ADDR_VAR 0 7
69865: PUSH
69866: LD_INT 0
69868: ST_TO_ADDR
69869: GO 69887
// min_y := y - r ;
69871: LD_ADDR_VAR 0 7
69875: PUSH
69876: LD_VAR 0 2
69880: PUSH
69881: LD_VAR 0 3
69885: MINUS
69886: ST_TO_ADDR
// max_x := x + r ;
69887: LD_ADDR_VAR 0 9
69891: PUSH
69892: LD_VAR 0 1
69896: PUSH
69897: LD_VAR 0 3
69901: PLUS
69902: ST_TO_ADDR
// max_y := y + r ;
69903: LD_ADDR_VAR 0 10
69907: PUSH
69908: LD_VAR 0 2
69912: PUSH
69913: LD_VAR 0 3
69917: PLUS
69918: ST_TO_ADDR
// for _x = min_x to max_x do
69919: LD_ADDR_VAR 0 5
69923: PUSH
69924: DOUBLE
69925: LD_VAR 0 8
69929: DEC
69930: ST_TO_ADDR
69931: LD_VAR 0 9
69935: PUSH
69936: FOR_TO
69937: IFFALSE 70038
// for _y = min_y to max_y do
69939: LD_ADDR_VAR 0 6
69943: PUSH
69944: DOUBLE
69945: LD_VAR 0 7
69949: DEC
69950: ST_TO_ADDR
69951: LD_VAR 0 10
69955: PUSH
69956: FOR_TO
69957: IFFALSE 70034
// begin if not ValidHex ( _x , _y ) then
69959: LD_VAR 0 5
69963: PPUSH
69964: LD_VAR 0 6
69968: PPUSH
69969: CALL_OW 488
69973: NOT
69974: IFFALSE 69978
// continue ;
69976: GO 69956
// if GetResourceTypeXY ( _x , _y ) then
69978: LD_VAR 0 5
69982: PPUSH
69983: LD_VAR 0 6
69987: PPUSH
69988: CALL_OW 283
69992: IFFALSE 70032
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69994: LD_ADDR_VAR 0 4
69998: PUSH
69999: LD_VAR 0 4
70003: PPUSH
70004: LD_VAR 0 4
70008: PUSH
70009: LD_INT 1
70011: PLUS
70012: PPUSH
70013: LD_VAR 0 5
70017: PUSH
70018: LD_VAR 0 6
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PPUSH
70027: CALL_OW 1
70031: ST_TO_ADDR
// end ;
70032: GO 69956
70034: POP
70035: POP
70036: GO 69936
70038: POP
70039: POP
// end ;
70040: LD_VAR 0 4
70044: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70045: LD_INT 0
70047: PPUSH
70048: PPUSH
70049: PPUSH
70050: PPUSH
70051: PPUSH
70052: PPUSH
70053: PPUSH
70054: PPUSH
// if not units then
70055: LD_VAR 0 1
70059: NOT
70060: IFFALSE 70064
// exit ;
70062: GO 70590
// result := UnitFilter ( units , [ f_ok ] ) ;
70064: LD_ADDR_VAR 0 3
70068: PUSH
70069: LD_VAR 0 1
70073: PPUSH
70074: LD_INT 50
70076: PUSH
70077: EMPTY
70078: LIST
70079: PPUSH
70080: CALL_OW 72
70084: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70085: LD_ADDR_VAR 0 8
70089: PUSH
70090: LD_VAR 0 1
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: PPUSH
70099: CALL_OW 255
70103: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70104: LD_ADDR_VAR 0 10
70108: PUSH
70109: LD_INT 29
70111: PUSH
70112: LD_EXP 101
70116: PUSH
70117: LD_INT 49
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: ST_TO_ADDR
// if not result then
70125: LD_VAR 0 3
70129: NOT
70130: IFFALSE 70134
// exit ;
70132: GO 70590
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70134: LD_ADDR_VAR 0 5
70138: PUSH
70139: LD_INT 81
70141: PUSH
70142: LD_VAR 0 8
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PPUSH
70151: CALL_OW 69
70155: ST_TO_ADDR
// for i in result do
70156: LD_ADDR_VAR 0 4
70160: PUSH
70161: LD_VAR 0 3
70165: PUSH
70166: FOR_IN
70167: IFFALSE 70588
// begin tag := GetTag ( i ) + 1 ;
70169: LD_ADDR_VAR 0 9
70173: PUSH
70174: LD_VAR 0 4
70178: PPUSH
70179: CALL_OW 110
70183: PUSH
70184: LD_INT 1
70186: PLUS
70187: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70188: LD_ADDR_VAR 0 7
70192: PUSH
70193: LD_VAR 0 4
70197: PPUSH
70198: CALL_OW 250
70202: PPUSH
70203: LD_VAR 0 4
70207: PPUSH
70208: CALL_OW 251
70212: PPUSH
70213: LD_INT 6
70215: PPUSH
70216: CALL 69787 0 3
70220: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70221: LD_VAR 0 4
70225: PPUSH
70226: CALL_OW 247
70230: PUSH
70231: LD_INT 2
70233: EQUAL
70234: PUSH
70235: LD_VAR 0 7
70239: AND
70240: PUSH
70241: LD_VAR 0 4
70245: PPUSH
70246: CALL_OW 264
70250: PUSH
70251: LD_VAR 0 10
70255: IN
70256: NOT
70257: AND
70258: IFFALSE 70297
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70260: LD_VAR 0 4
70264: PPUSH
70265: LD_VAR 0 7
70269: PUSH
70270: LD_INT 1
70272: ARRAY
70273: PUSH
70274: LD_INT 1
70276: ARRAY
70277: PPUSH
70278: LD_VAR 0 7
70282: PUSH
70283: LD_INT 1
70285: ARRAY
70286: PUSH
70287: LD_INT 2
70289: ARRAY
70290: PPUSH
70291: CALL_OW 116
70295: GO 70586
// if path > tag then
70297: LD_VAR 0 2
70301: PUSH
70302: LD_VAR 0 9
70306: GREATER
70307: IFFALSE 70515
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70309: LD_ADDR_VAR 0 6
70313: PUSH
70314: LD_VAR 0 5
70318: PPUSH
70319: LD_INT 91
70321: PUSH
70322: LD_VAR 0 4
70326: PUSH
70327: LD_INT 8
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: PPUSH
70335: CALL_OW 72
70339: ST_TO_ADDR
// if nearEnemy then
70340: LD_VAR 0 6
70344: IFFALSE 70413
// begin if GetWeapon ( i ) = ru_time_lapser then
70346: LD_VAR 0 4
70350: PPUSH
70351: CALL_OW 264
70355: PUSH
70356: LD_INT 49
70358: EQUAL
70359: IFFALSE 70387
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70361: LD_VAR 0 4
70365: PPUSH
70366: LD_VAR 0 6
70370: PPUSH
70371: LD_VAR 0 4
70375: PPUSH
70376: CALL_OW 74
70380: PPUSH
70381: CALL_OW 112
70385: GO 70411
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70387: LD_VAR 0 4
70391: PPUSH
70392: LD_VAR 0 6
70396: PPUSH
70397: LD_VAR 0 4
70401: PPUSH
70402: CALL_OW 74
70406: PPUSH
70407: CALL_OW 115
// end else
70411: GO 70513
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70413: LD_VAR 0 4
70417: PPUSH
70418: LD_VAR 0 2
70422: PUSH
70423: LD_VAR 0 9
70427: ARRAY
70428: PUSH
70429: LD_INT 1
70431: ARRAY
70432: PPUSH
70433: LD_VAR 0 2
70437: PUSH
70438: LD_VAR 0 9
70442: ARRAY
70443: PUSH
70444: LD_INT 2
70446: ARRAY
70447: PPUSH
70448: CALL_OW 297
70452: PUSH
70453: LD_INT 6
70455: GREATER
70456: IFFALSE 70499
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70458: LD_VAR 0 4
70462: PPUSH
70463: LD_VAR 0 2
70467: PUSH
70468: LD_VAR 0 9
70472: ARRAY
70473: PUSH
70474: LD_INT 1
70476: ARRAY
70477: PPUSH
70478: LD_VAR 0 2
70482: PUSH
70483: LD_VAR 0 9
70487: ARRAY
70488: PUSH
70489: LD_INT 2
70491: ARRAY
70492: PPUSH
70493: CALL_OW 114
70497: GO 70513
// SetTag ( i , tag ) ;
70499: LD_VAR 0 4
70503: PPUSH
70504: LD_VAR 0 9
70508: PPUSH
70509: CALL_OW 109
// end else
70513: GO 70586
// if enemy then
70515: LD_VAR 0 5
70519: IFFALSE 70586
// begin if GetWeapon ( i ) = ru_time_lapser then
70521: LD_VAR 0 4
70525: PPUSH
70526: CALL_OW 264
70530: PUSH
70531: LD_INT 49
70533: EQUAL
70534: IFFALSE 70562
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70536: LD_VAR 0 4
70540: PPUSH
70541: LD_VAR 0 5
70545: PPUSH
70546: LD_VAR 0 4
70550: PPUSH
70551: CALL_OW 74
70555: PPUSH
70556: CALL_OW 112
70560: GO 70586
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70562: LD_VAR 0 4
70566: PPUSH
70567: LD_VAR 0 5
70571: PPUSH
70572: LD_VAR 0 4
70576: PPUSH
70577: CALL_OW 74
70581: PPUSH
70582: CALL_OW 115
// end ; end ;
70586: GO 70166
70588: POP
70589: POP
// end ;
70590: LD_VAR 0 3
70594: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70595: LD_INT 0
70597: PPUSH
70598: PPUSH
70599: PPUSH
// if not unit or IsInUnit ( unit ) then
70600: LD_VAR 0 1
70604: NOT
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: CALL_OW 310
70615: OR
70616: IFFALSE 70620
// exit ;
70618: GO 70711
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70620: LD_ADDR_VAR 0 4
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: CALL_OW 250
70634: PPUSH
70635: LD_VAR 0 2
70639: PPUSH
70640: LD_INT 1
70642: PPUSH
70643: CALL_OW 272
70647: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70648: LD_ADDR_VAR 0 5
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: CALL_OW 251
70662: PPUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_INT 1
70670: PPUSH
70671: CALL_OW 273
70675: ST_TO_ADDR
// if ValidHex ( x , y ) then
70676: LD_VAR 0 4
70680: PPUSH
70681: LD_VAR 0 5
70685: PPUSH
70686: CALL_OW 488
70690: IFFALSE 70711
// ComTurnXY ( unit , x , y ) ;
70692: LD_VAR 0 1
70696: PPUSH
70697: LD_VAR 0 4
70701: PPUSH
70702: LD_VAR 0 5
70706: PPUSH
70707: CALL_OW 118
// end ;
70711: LD_VAR 0 3
70715: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70716: LD_INT 0
70718: PPUSH
70719: PPUSH
// result := false ;
70720: LD_ADDR_VAR 0 3
70724: PUSH
70725: LD_INT 0
70727: ST_TO_ADDR
// if not units then
70728: LD_VAR 0 2
70732: NOT
70733: IFFALSE 70737
// exit ;
70735: GO 70782
// for i in units do
70737: LD_ADDR_VAR 0 4
70741: PUSH
70742: LD_VAR 0 2
70746: PUSH
70747: FOR_IN
70748: IFFALSE 70780
// if See ( side , i ) then
70750: LD_VAR 0 1
70754: PPUSH
70755: LD_VAR 0 4
70759: PPUSH
70760: CALL_OW 292
70764: IFFALSE 70778
// begin result := true ;
70766: LD_ADDR_VAR 0 3
70770: PUSH
70771: LD_INT 1
70773: ST_TO_ADDR
// exit ;
70774: POP
70775: POP
70776: GO 70782
// end ;
70778: GO 70747
70780: POP
70781: POP
// end ;
70782: LD_VAR 0 3
70786: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70787: LD_INT 0
70789: PPUSH
70790: PPUSH
70791: PPUSH
70792: PPUSH
// if not unit or not points then
70793: LD_VAR 0 1
70797: NOT
70798: PUSH
70799: LD_VAR 0 2
70803: NOT
70804: OR
70805: IFFALSE 70809
// exit ;
70807: GO 70899
// dist := 99999 ;
70809: LD_ADDR_VAR 0 5
70813: PUSH
70814: LD_INT 99999
70816: ST_TO_ADDR
// for i in points do
70817: LD_ADDR_VAR 0 4
70821: PUSH
70822: LD_VAR 0 2
70826: PUSH
70827: FOR_IN
70828: IFFALSE 70897
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70830: LD_ADDR_VAR 0 6
70834: PUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: LD_VAR 0 4
70844: PUSH
70845: LD_INT 1
70847: ARRAY
70848: PPUSH
70849: LD_VAR 0 4
70853: PUSH
70854: LD_INT 2
70856: ARRAY
70857: PPUSH
70858: CALL_OW 297
70862: ST_TO_ADDR
// if tmpDist < dist then
70863: LD_VAR 0 6
70867: PUSH
70868: LD_VAR 0 5
70872: LESS
70873: IFFALSE 70895
// begin result := i ;
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 4
70884: ST_TO_ADDR
// dist := tmpDist ;
70885: LD_ADDR_VAR 0 5
70889: PUSH
70890: LD_VAR 0 6
70894: ST_TO_ADDR
// end ; end ;
70895: GO 70827
70897: POP
70898: POP
// end ;
70899: LD_VAR 0 3
70903: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70904: LD_INT 0
70906: PPUSH
// uc_side := side ;
70907: LD_ADDR_OWVAR 20
70911: PUSH
70912: LD_VAR 0 1
70916: ST_TO_ADDR
// uc_nation := 3 ;
70917: LD_ADDR_OWVAR 21
70921: PUSH
70922: LD_INT 3
70924: ST_TO_ADDR
// vc_chassis := 25 ;
70925: LD_ADDR_OWVAR 37
70929: PUSH
70930: LD_INT 25
70932: ST_TO_ADDR
// vc_engine := engine_siberite ;
70933: LD_ADDR_OWVAR 39
70937: PUSH
70938: LD_INT 3
70940: ST_TO_ADDR
// vc_control := control_computer ;
70941: LD_ADDR_OWVAR 38
70945: PUSH
70946: LD_INT 3
70948: ST_TO_ADDR
// vc_weapon := 59 ;
70949: LD_ADDR_OWVAR 40
70953: PUSH
70954: LD_INT 59
70956: ST_TO_ADDR
// result := CreateVehicle ;
70957: LD_ADDR_VAR 0 5
70961: PUSH
70962: CALL_OW 45
70966: ST_TO_ADDR
// SetDir ( result , d ) ;
70967: LD_VAR 0 5
70971: PPUSH
70972: LD_VAR 0 4
70976: PPUSH
70977: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70981: LD_VAR 0 5
70985: PPUSH
70986: LD_VAR 0 2
70990: PPUSH
70991: LD_VAR 0 3
70995: PPUSH
70996: LD_INT 0
70998: PPUSH
70999: CALL_OW 48
// end ;
71003: LD_VAR 0 5
71007: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71008: LD_INT 0
71010: PPUSH
71011: PPUSH
71012: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71013: LD_ADDR_VAR 0 2
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: LD_INT 0
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71036: LD_VAR 0 1
71040: NOT
71041: PUSH
71042: LD_VAR 0 1
71046: PPUSH
71047: CALL_OW 264
71051: PUSH
71052: LD_INT 12
71054: PUSH
71055: LD_INT 51
71057: PUSH
71058: LD_INT 32
71060: PUSH
71061: LD_EXP 98
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: IN
71072: NOT
71073: OR
71074: IFFALSE 71078
// exit ;
71076: GO 71176
// for i := 1 to 3 do
71078: LD_ADDR_VAR 0 3
71082: PUSH
71083: DOUBLE
71084: LD_INT 1
71086: DEC
71087: ST_TO_ADDR
71088: LD_INT 3
71090: PUSH
71091: FOR_TO
71092: IFFALSE 71174
// begin tmp := GetCargo ( cargo , i ) ;
71094: LD_ADDR_VAR 0 4
71098: PUSH
71099: LD_VAR 0 1
71103: PPUSH
71104: LD_VAR 0 3
71108: PPUSH
71109: CALL_OW 289
71113: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71114: LD_ADDR_VAR 0 2
71118: PUSH
71119: LD_VAR 0 2
71123: PPUSH
71124: LD_VAR 0 3
71128: PPUSH
71129: LD_VAR 0 4
71133: PPUSH
71134: CALL_OW 1
71138: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71139: LD_ADDR_VAR 0 2
71143: PUSH
71144: LD_VAR 0 2
71148: PPUSH
71149: LD_INT 4
71151: PPUSH
71152: LD_VAR 0 2
71156: PUSH
71157: LD_INT 4
71159: ARRAY
71160: PUSH
71161: LD_VAR 0 4
71165: PLUS
71166: PPUSH
71167: CALL_OW 1
71171: ST_TO_ADDR
// end ;
71172: GO 71091
71174: POP
71175: POP
// end ;
71176: LD_VAR 0 2
71180: RET
// export function Length ( array ) ; begin
71181: LD_INT 0
71183: PPUSH
// result := array + 0 ;
71184: LD_ADDR_VAR 0 2
71188: PUSH
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 0
71196: PLUS
71197: ST_TO_ADDR
// end ;
71198: LD_VAR 0 2
71202: RET
// export function PrepareArray ( array ) ; begin
71203: LD_INT 0
71205: PPUSH
// result := array diff 0 ;
71206: LD_ADDR_VAR 0 2
71210: PUSH
71211: LD_VAR 0 1
71215: PUSH
71216: LD_INT 0
71218: DIFF
71219: ST_TO_ADDR
// if not result [ 1 ] then
71220: LD_VAR 0 2
71224: PUSH
71225: LD_INT 1
71227: ARRAY
71228: NOT
71229: IFFALSE 71249
// result := Delete ( result , 1 ) ;
71231: LD_ADDR_VAR 0 2
71235: PUSH
71236: LD_VAR 0 2
71240: PPUSH
71241: LD_INT 1
71243: PPUSH
71244: CALL_OW 3
71248: ST_TO_ADDR
// end ; end_of_file
71249: LD_VAR 0 2
71253: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71254: LD_VAR 0 1
71258: PUSH
71259: LD_INT 200
71261: DOUBLE
71262: GREATEREQUAL
71263: IFFALSE 71271
71265: LD_INT 299
71267: DOUBLE
71268: LESSEQUAL
71269: IFTRUE 71273
71271: GO 71305
71273: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71274: LD_VAR 0 1
71278: PPUSH
71279: LD_VAR 0 2
71283: PPUSH
71284: LD_VAR 0 3
71288: PPUSH
71289: LD_VAR 0 4
71293: PPUSH
71294: LD_VAR 0 5
71298: PPUSH
71299: CALL 25945 0 5
71303: GO 71382
71305: LD_INT 300
71307: DOUBLE
71308: GREATEREQUAL
71309: IFFALSE 71317
71311: LD_INT 399
71313: DOUBLE
71314: LESSEQUAL
71315: IFTRUE 71319
71317: GO 71381
71319: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71320: LD_VAR 0 1
71324: PPUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: LD_VAR 0 3
71334: PPUSH
71335: LD_VAR 0 4
71339: PPUSH
71340: LD_VAR 0 5
71344: PPUSH
71345: LD_VAR 0 6
71349: PPUSH
71350: LD_VAR 0 7
71354: PPUSH
71355: LD_VAR 0 8
71359: PPUSH
71360: LD_VAR 0 9
71364: PPUSH
71365: LD_VAR 0 10
71369: PPUSH
71370: LD_VAR 0 11
71374: PPUSH
71375: CALL 22274 0 11
71379: GO 71382
71381: POP
// end ;
71382: PPOPN 11
71384: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_VAR 0 2
71394: PPUSH
71395: LD_VAR 0 3
71399: PPUSH
71400: LD_VAR 0 4
71404: PPUSH
71405: LD_VAR 0 5
71409: PPUSH
71410: CALL 25681 0 5
// end ; end_of_file
71414: PPOPN 5
71416: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71417: LD_VAR 0 1
71421: PPUSH
71422: LD_VAR 0 2
71426: PPUSH
71427: LD_VAR 0 3
71431: PPUSH
71432: LD_VAR 0 4
71436: PPUSH
71437: LD_VAR 0 5
71441: PPUSH
71442: LD_VAR 0 6
71446: PPUSH
71447: CALL 9967 0 6
// end ;
71451: PPOPN 6
71453: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71454: LD_INT 0
71456: PPUSH
// begin if not units then
71457: LD_VAR 0 1
71461: NOT
71462: IFFALSE 71466
// exit ;
71464: GO 71466
// end ;
71466: PPOPN 7
71468: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71469: CALL 9938 0 0
// end ;
71473: PPOPN 1
71475: END
