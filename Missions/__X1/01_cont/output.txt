// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2901 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = class_fish ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side := 3 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// uc_nation := 3 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// russianForces := [ ] ;
1387: LD_ADDR_EXP 21
1391: PUSH
1392: EMPTY
1393: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1394: LD_ADDR_EXP 20
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1401: LD_ADDR_VAR 0 5
1405: PUSH
1406: LD_INT 11
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: CALL_OW 517
1416: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: CALL_OW 69
1436: PUSH
1437: FOR_IN
1438: IFFALSE 1482
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1440: LD_VAR 0 2
1444: PPUSH
1445: CALL_OW 274
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 200
1455: PPUSH
1456: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 274
1469: PPUSH
1470: LD_INT 2
1472: PPUSH
1473: LD_INT 10
1475: PPUSH
1476: CALL_OW 277
// end ;
1480: GO 1437
1482: POP
1483: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_INT 30
1491: PUSH
1492: LD_INT 31
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 69
1503: PUSH
1504: FOR_IN
1505: IFFALSE 1579
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_OWVAR 67
1517: PUSH
1518: LD_INT 1
1520: MINUS
1521: PPUSH
1522: CALL_OW 380
// un := CreateHuman ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: CALL_OW 44
1535: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1536: LD_VAR 0 4
1540: PPUSH
1541: LD_VAR 0 2
1545: PPUSH
1546: CALL_OW 254
1550: PUSH
1551: LD_INT 3
1553: MINUS
1554: PUSH
1555: LD_INT 6
1557: MOD
1558: PPUSH
1559: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_VAR 0 2
1572: PPUSH
1573: CALL_OW 52
// end ;
1577: GO 1504
1579: POP
1580: POP
// for i = 1 to 5 do
1581: LD_ADDR_VAR 0 2
1585: PUSH
1586: DOUBLE
1587: LD_INT 1
1589: DEC
1590: ST_TO_ADDR
1591: LD_INT 5
1593: PUSH
1594: FOR_TO
1595: IFFALSE 1677
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PPUSH
1608: CALL_OW 380
// un := CreateHuman ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: CALL_OW 44
1621: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1622: LD_VAR 0 4
1626: PPUSH
1627: LD_INT 9
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
// ComHold ( un ) ;
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1646: LD_ADDR_EXP 21
1650: PUSH
1651: LD_EXP 21
1655: PPUSH
1656: LD_EXP 21
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL_OW 1
1674: ST_TO_ADDR
// end ;
1675: GO 1594
1677: POP
1678: POP
// for i := 1 to Difficulty + 1 do
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: DOUBLE
1685: LD_INT 1
1687: DEC
1688: ST_TO_ADDR
1689: LD_OWVAR 67
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: PUSH
1698: FOR_TO
1699: IFFALSE 1799
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1701: LD_INT 0
1703: PPUSH
1704: LD_INT 1
1706: PPUSH
1707: LD_OWVAR 67
1711: PPUSH
1712: CALL_OW 380
// un := CreateHuman ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 44
1725: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PPUSH
1746: LD_VAR 0 5
1750: PUSH
1751: LD_INT 2
1753: ARRAY
1754: PUSH
1755: LD_VAR 0 2
1759: ARRAY
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1768: LD_ADDR_EXP 20
1772: PUSH
1773: LD_EXP 20
1777: PPUSH
1778: LD_EXP 20
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: PPUSH
1787: LD_VAR 0 4
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// end ;
1797: GO 1698
1799: POP
1800: POP
// vc_chassis := ru_medium_wheeled ;
1801: LD_ADDR_OWVAR 37
1805: PUSH
1806: LD_INT 21
1808: ST_TO_ADDR
// vc_engine := engine_combustion ;
1809: LD_ADDR_OWVAR 39
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// vc_control := control_manual ;
1817: LD_ADDR_OWVAR 38
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 42
1832: ST_TO_ADDR
// russianTank := CreateVehicle ;
1833: LD_ADDR_EXP 22
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1843: LD_EXP 22
1847: PPUSH
1848: LD_INT 121
1850: PPUSH
1851: LD_INT 25
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1861: LD_INT 0
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: LD_OWVAR 67
1871: PPUSH
1872: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1876: CALL_OW 44
1880: PPUSH
1881: LD_EXP 22
1885: PPUSH
1886: CALL_OW 52
// if Difficulty > 1 then
1890: LD_OWVAR 67
1894: PUSH
1895: LD_INT 1
1897: GREATER
1898: IFFALSE 1984
// begin bc_type := b_breastwork ;
1900: LD_ADDR_OWVAR 42
1904: PUSH
1905: LD_INT 31
1907: ST_TO_ADDR
// bc_level := 2 ;
1908: LD_ADDR_OWVAR 43
1912: PUSH
1913: LD_INT 2
1915: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1916: LD_ADDR_VAR 0 3
1920: PUSH
1921: LD_INT 143
1923: PPUSH
1924: LD_INT 88
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 47
1934: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 52
// end ; if Difficulty > 2 then
1984: LD_OWVAR 67
1988: PUSH
1989: LD_INT 2
1991: GREATER
1992: IFFALSE 2048
// begin for i := 1 to 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 2
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2046
// begin PrepareHuman ( false , 1 , 2 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2023: CALL_OW 44
2027: PPUSH
2028: LD_INT 156
2030: PPUSH
2031: LD_INT 108
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 50
// end ;
2044: GO 2007
2046: POP
2047: POP
// end ; end ;
2048: LD_VAR 0 1
2052: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2053: LD_EXP 20
2057: IFFALSE 2363
2059: GO 2061
2061: DISABLE
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in russianForestPatrol do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_EXP 20
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2361
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 53
2091: PPUSH
2092: LD_INT 89
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 30
2102: LESS
2103: IFFALSE 2122
// begin ComMoveXY ( i , 114 , 80 ) ;
2105: LD_VAR 0 1
2109: PPUSH
2110: LD_INT 114
2112: PPUSH
2113: LD_INT 80
2115: PPUSH
2116: CALL_OW 111
// continue ;
2120: GO 2081
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_EXP 20
2131: PUSH
2132: LD_VAR 0 1
2136: DIFF
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 74
2147: ST_TO_ADDR
// if tmp then
2148: LD_VAR 0 6
2152: IFFALSE 2220
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_VAR 0 6
2163: PPUSH
2164: CALL_OW 296
2168: PUSH
2169: LD_INT 14
2171: LESS
2172: PUSH
2173: LD_VAR 0 6
2177: PPUSH
2178: CALL_OW 256
2182: PUSH
2183: LD_INT 999
2185: LESS
2186: AND
2187: IFFALSE 2220
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 6
2208: PPUSH
2209: CALL_OW 251
2213: PPUSH
2214: CALL_OW 114
// break ;
2218: GO 2361
// end ; if not HasTask ( i ) then
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 314
2229: NOT
2230: IFFALSE 2359
// begin d := rand ( 0 , 5 ) ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: CALL_OW 12
2247: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: LD_INT 3
2255: PPUSH
2256: LD_INT 7
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2264: LD_ADDR_VAR 0 4
2268: PUSH
2269: LD_VAR 0 1
2273: PPUSH
2274: CALL_OW 250
2278: PPUSH
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_VAR 0 3
2288: PPUSH
2289: CALL_OW 272
2293: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2294: LD_ADDR_VAR 0 5
2298: PUSH
2299: LD_VAR 0 1
2303: PPUSH
2304: CALL_OW 251
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_VAR 0 3
2318: PPUSH
2319: CALL_OW 273
2323: ST_TO_ADDR
// if ValidHex ( x , y ) then
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_VAR 0 5
2333: PPUSH
2334: CALL_OW 488
2338: IFFALSE 2359
// ComAgressiveMove ( i , x , y ) ;
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_VAR 0 5
2354: PPUSH
2355: CALL_OW 114
// end ; end ;
2359: GO 2081
2361: POP
2362: POP
// end ;
2363: PPOPN 6
2365: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2366: LD_EXP 22
2370: PPUSH
2371: CALL_OW 302
2375: PUSH
2376: LD_EXP 22
2380: PPUSH
2381: CALL_OW 255
2385: PUSH
2386: LD_INT 3
2388: EQUAL
2389: AND
2390: IFFALSE 2657
2392: GO 2394
2394: DISABLE
// begin enable ;
2395: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2396: LD_EXP 22
2400: PPUSH
2401: LD_INT 124
2403: PPUSH
2404: LD_INT 25
2406: PPUSH
2407: CALL_OW 307
2411: IFFALSE 2425
// SetFuel ( russianTank , 100 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 100
2420: PPUSH
2421: CALL_OW 240
// if HasTask ( russianTank ) then
2425: LD_EXP 22
2429: PPUSH
2430: CALL_OW 314
2434: IFFALSE 2438
// exit ;
2436: GO 2657
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2438: LD_EXP 22
2442: PPUSH
2443: LD_INT 121
2445: PPUSH
2446: LD_INT 25
2448: PPUSH
2449: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2453: LD_EXP 22
2457: PPUSH
2458: LD_INT 122
2460: PPUSH
2461: LD_INT 48
2463: PPUSH
2464: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2468: LD_EXP 22
2472: PPUSH
2473: LD_INT 70
2475: PPUSH
2476: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2480: LD_EXP 22
2484: PPUSH
2485: LD_INT 107
2487: PPUSH
2488: LD_INT 57
2490: PPUSH
2491: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2495: LD_EXP 22
2499: PPUSH
2500: LD_INT 70
2502: PPUSH
2503: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2507: LD_EXP 22
2511: PPUSH
2512: LD_INT 100
2514: PPUSH
2515: LD_INT 61
2517: PPUSH
2518: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2522: LD_EXP 22
2526: PPUSH
2527: LD_INT 105
2529: PPUSH
2530: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2534: LD_EXP 22
2538: PPUSH
2539: LD_INT 78
2541: PPUSH
2542: LD_INT 64
2544: PPUSH
2545: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2549: LD_EXP 22
2553: PPUSH
2554: LD_INT 140
2556: PPUSH
2557: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2561: LD_EXP 22
2565: PPUSH
2566: LD_INT 100
2568: PPUSH
2569: LD_INT 61
2571: PPUSH
2572: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2576: LD_EXP 22
2580: PPUSH
2581: LD_INT 105
2583: PPUSH
2584: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2588: LD_EXP 22
2592: PPUSH
2593: LD_INT 107
2595: PPUSH
2596: LD_INT 57
2598: PPUSH
2599: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2603: LD_EXP 22
2607: PPUSH
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2615: LD_EXP 22
2619: PPUSH
2620: LD_INT 122
2622: PPUSH
2623: LD_INT 48
2625: PPUSH
2626: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2630: LD_EXP 22
2634: PPUSH
2635: LD_INT 70
2637: PPUSH
2638: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2642: LD_EXP 22
2646: PPUSH
2647: LD_INT 124
2649: PPUSH
2650: LD_INT 25
2652: PPUSH
2653: CALL_OW 171
// end ; end_of_file
2657: END
// export Johnny ; export function PrepareJohnny ; begin
2658: LD_INT 0
2660: PPUSH
// uc_side := 1 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// uc_nation := 1 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2677: LD_ADDR_EXP 23
2681: PUSH
2682: LD_STRING Harris
2684: PPUSH
2685: CALL_OW 25
2689: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2690: LD_EXP 23
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2702: LD_EXP 23
2706: PPUSH
2707: LD_INT 8
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// ComCrawl ( Johnny ) ;
2717: LD_EXP 23
2721: PPUSH
2722: CALL_OW 137
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PreparePatrolTank ; var veh , un ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
// uc_side := 1 ;
2736: LD_ADDR_OWVAR 20
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// uc_nation := 1 ;
2744: LD_ADDR_OWVAR 21
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL_OW 380
// un := CreateHuman ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2775: LD_ADDR_OWVAR 37
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// vc_engine := engine_combustion ;
2783: LD_ADDR_OWVAR 39
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// vc_control := control_manual ;
2791: LD_ADDR_OWVAR 38
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2799: LD_ADDR_OWVAR 40
2803: PUSH
2804: LD_INT 2
2806: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2807: LD_ADDR_OWVAR 41
2811: PUSH
2812: LD_INT 72
2814: PUSH
2815: LD_INT 54
2817: PUSH
2818: LD_INT 36
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_OWVAR 67
2830: ARRAY
2831: ST_TO_ADDR
// veh := CreateVehicle ;
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: CALL_OW 45
2841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2842: LD_VAR 0 2
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2854: LD_VAR 0 2
2858: PPUSH
2859: LD_INT 31
2861: PPUSH
2862: LD_INT 58
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 52
// result := un ;
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_VAR 0 3
2895: ST_TO_ADDR
// end ; end_of_file
2896: LD_VAR 0 1
2900: RET
// export function Action ; begin
2901: LD_INT 0
2903: PPUSH
// InGameOn ;
2904: CALL_OW 8
// wait ( 0 0$4 ) ;
2908: LD_INT 140
2910: PPUSH
2911: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2915: LD_EXP 14
2919: PPUSH
2920: LD_STRING DH-start-1
2922: PPUSH
2923: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 29
2937: PPUSH
2938: CALL_OW 111
// wait ( 0 0$4 ) ;
2942: LD_INT 140
2944: PPUSH
2945: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2949: LD_EXP 14
2953: PPUSH
2954: LD_INT 71
2956: PPUSH
2957: LD_INT 33
2959: PPUSH
2960: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2964: LD_EXP 14
2968: PPUSH
2969: LD_INT 71
2971: PPUSH
2972: LD_INT 34
2974: PPUSH
2975: CALL_OW 178
// wait ( 0 0$4 ) ;
2979: LD_INT 140
2981: PPUSH
2982: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2986: LD_EXP 14
2990: PPUSH
2991: LD_STRING DH-start-2
2993: PPUSH
2994: CALL_OW 88
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3005: LD_EXP 14
3009: PPUSH
3010: LD_INT 65
3012: PPUSH
3013: LD_INT 26
3015: PPUSH
3016: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3020: LD_EXP 14
3024: PPUSH
3025: LD_STRING DH-start-3
3027: PPUSH
3028: CALL_OW 88
// InGameOff ;
3032: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3036: LD_STRING O1_cont
3038: PPUSH
3039: CALL_OW 337
// SaveForQuickRestart ;
3043: CALL_OW 22
// missionStarted := true ;
3047: LD_ADDR_EXP 1
3051: PUSH
3052: LD_INT 1
3054: ST_TO_ADDR
// PrepareJohnny ;
3055: CALL 2658 0 0
// end ;
3059: LD_VAR 0 1
3063: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3064: LD_EXP 8
3068: NOT
3069: PUSH
3070: LD_EXP 7
3074: NOT
3075: AND
3076: PUSH
3077: LD_INT 2
3079: PPUSH
3080: LD_EXP 23
3084: PPUSH
3085: CALL_OW 292
3089: AND
3090: PUSH
3091: LD_INT 3
3093: PPUSH
3094: LD_EXP 14
3098: PPUSH
3099: CALL_OW 292
3103: NOT
3104: AND
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PPUSH
3121: LD_EXP 14
3125: PPUSH
3126: CALL_OW 74
3130: PUSH
3131: LD_EXP 23
3135: EQUAL
3136: AND
3137: PUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 2
3143: PPUSH
3144: CALL_OW 81
3148: PUSH
3149: LD_INT 0
3151: EQUAL
3152: AND
3153: IFFALSE 4084
3155: GO 3157
3157: DISABLE
// begin InGameOn ;
3158: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3162: LD_EXP 14
3166: PPUSH
3167: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3171: LD_EXP 23
3175: PPUSH
3176: LD_STRING DJ-ambush-1
3178: PPUSH
3179: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3183: LD_INT 10
3185: PPUSH
3186: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3190: LD_EXP 14
3194: PPUSH
3195: LD_EXP 23
3199: PPUSH
3200: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_STRING DH-ambush-1
3211: PPUSH
3212: CALL_OW 88
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// ComWalk ( Johnny ) ;
3223: LD_EXP 23
3227: PPUSH
3228: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3232: LD_EXP 23
3236: PPUSH
3237: LD_EXP 14
3241: PPUSH
3242: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3246: LD_INT 35
3248: PPUSH
3249: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3253: LD_EXP 23
3257: PPUSH
3258: LD_EXP 14
3262: PPUSH
3263: CALL_OW 296
3267: PUSH
3268: LD_INT 4
3270: LESS
3271: IFFALSE 3246
// ComTurnUnit ( Johnny , Heike ) ;
3273: LD_EXP 23
3277: PPUSH
3278: LD_EXP 14
3282: PPUSH
3283: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3287: LD_EXP 23
3291: PPUSH
3292: LD_STRING DJ-ambush-2
3294: PPUSH
3295: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3299: LD_EXP 14
3303: PPUSH
3304: LD_STRING DH-ambush-2
3306: PPUSH
3307: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3311: LD_EXP 23
3315: PPUSH
3316: LD_STRING DJ-ambush-3
3318: PPUSH
3319: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3323: LD_EXP 14
3327: PPUSH
3328: LD_STRING DH-ambush-3
3330: PPUSH
3331: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3335: LD_EXP 23
3339: PPUSH
3340: LD_STRING DJ-ambush-4
3342: PPUSH
3343: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3347: LD_EXP 14
3351: PPUSH
3352: LD_INT 39
3354: PPUSH
3355: LD_INT 22
3357: PPUSH
3358: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3362: LD_EXP 14
3366: PPUSH
3367: LD_STRING DH-ambush-4
3369: PPUSH
3370: CALL_OW 88
// PrepareRussianPatrol ;
3374: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3378: LD_INT 39
3380: PPUSH
3381: LD_INT 22
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: LD_INT 12
3389: NEG
3390: PPUSH
3391: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3395: LD_INT 39
3397: PPUSH
3398: LD_INT 22
3400: PPUSH
3401: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3405: LD_EXP 19
3409: PPUSH
3410: LD_INT 39
3412: PPUSH
3413: LD_INT 23
3415: PPUSH
3416: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3420: LD_EXP 14
3424: PUSH
3425: LD_EXP 23
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PPUSH
3434: LD_INT 39
3436: PPUSH
3437: LD_INT 7
3439: PPUSH
3440: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3444: LD_EXP 14
3448: PUSH
3449: LD_EXP 23
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: LD_EXP 19
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3471: LD_EXP 19
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_STRING DR-ambush-5
3482: PPUSH
3483: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3487: LD_EXP 19
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: LD_STRING DR1-ambush-5
3498: PPUSH
3499: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3503: LD_INT 35
3505: PPUSH
3506: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3510: LD_EXP 14
3514: PPUSH
3515: LD_INT 39
3517: PPUSH
3518: LD_INT 7
3520: PPUSH
3521: CALL_OW 297
3525: PUSH
3526: LD_INT 6
3528: LESS
3529: IFFALSE 3503
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3531: LD_EXP 14
3535: PPUSH
3536: LD_EXP 19
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3549: LD_EXP 23
3553: PPUSH
3554: LD_EXP 14
3558: PPUSH
3559: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3563: LD_EXP 23
3567: PPUSH
3568: LD_STRING DJ-ambush-6
3570: PPUSH
3571: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3575: LD_EXP 14
3579: PPUSH
3580: LD_STRING DH-ambush-6
3582: PPUSH
3583: CALL_OW 88
// InGameOff ;
3587: CALL_OW 9
// meetJohnny := true ;
3591: LD_ADDR_EXP 3
3595: PUSH
3596: LD_INT 1
3598: ST_TO_ADDR
// ComFree ( Johnny ) ;
3599: LD_EXP 23
3603: PPUSH
3604: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3608: LD_STRING O2_ambush_cont
3610: PPUSH
3611: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3615: LD_EXP 19
3619: PUSH
3620: LD_EXP 19
3624: ARRAY
3625: PPUSH
3626: LD_INT 29
3628: PPUSH
3629: LD_INT 15
3631: PPUSH
3632: CALL_OW 111
// wait ( 0 0$2 ) ;
3636: LD_INT 70
3638: PPUSH
3639: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3643: LD_INT 3
3645: PPUSH
3646: LD_EXP 14
3650: PPUSH
3651: CALL_OW 292
3655: NOT
3656: PUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_EXP 23
3664: PPUSH
3665: CALL_OW 292
3669: NOT
3670: AND
3671: IFFALSE 3692
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3673: LD_EXP 19
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_INT 58
3684: PPUSH
3685: LD_INT 32
3687: PPUSH
3688: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3692: LD_INT 1750
3694: PUSH
3695: LD_INT 1400
3697: PUSH
3698: LD_INT 1225
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: PPUSH
3712: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3716: LD_EXP 19
3720: PPUSH
3721: LD_INT 43
3723: PPUSH
3724: LD_INT 13
3726: PPUSH
3727: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3731: LD_INT 35
3733: PPUSH
3734: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3738: LD_EXP 19
3742: NOT
3743: PUSH
3744: LD_EXP 23
3748: PPUSH
3749: CALL_OW 302
3753: NOT
3754: OR
3755: IFFALSE 3731
// RemoveSeeing ( 39 , 22 , 2 ) ;
3757: LD_INT 39
3759: PPUSH
3760: LD_INT 22
3762: PPUSH
3763: LD_INT 2
3765: PPUSH
3766: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 81
3780: PUSH
3781: LD_INT 2
3783: EQUAL
3784: IFFALSE 3788
// exit ;
3786: GO 4084
// if not IsOk ( Johnny ) then
3788: LD_EXP 23
3792: PPUSH
3793: CALL_OW 302
3797: NOT
3798: IFFALSE 3809
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3800: LD_STRING O2_ambush_out_cont
3802: PPUSH
3803: CALL_OW 337
// exit ;
3807: GO 4084
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3809: LD_EXP 14
3813: PPUSH
3814: LD_EXP 23
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 10
3826: GREATER
3827: IFFALSE 3870
// begin ComMoveUnit ( Johnny , Heike ) ;
3829: LD_EXP 23
3833: PPUSH
3834: LD_EXP 14
3838: PPUSH
3839: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3850: LD_EXP 23
3854: PPUSH
3855: LD_EXP 14
3859: PPUSH
3860: CALL_OW 296
3864: PUSH
3865: LD_INT 6
3867: LESS
3868: IFFALSE 3843
// end ; CenterNowOnUnits ( Heike ) ;
3870: LD_EXP 14
3874: PPUSH
3875: CALL_OW 87
// InGameOn ;
3879: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3883: LD_EXP 14
3887: PPUSH
3888: LD_EXP 23
3892: PPUSH
3893: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3897: LD_EXP 23
3901: PPUSH
3902: LD_EXP 14
3906: PPUSH
3907: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3911: LD_EXP 23
3915: PPUSH
3916: LD_STRING DJ-thanks-1
3918: PPUSH
3919: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3923: LD_EXP 14
3927: PPUSH
3928: LD_STRING DH-thanks-1
3930: PPUSH
3931: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3935: LD_EXP 23
3939: PPUSH
3940: LD_STRING DJ-thanks-2
3942: PPUSH
3943: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3947: LD_EXP 23
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 3
3957: PPUSH
3958: CALL_OW 111
// wait ( 0 0$1 ) ;
3962: LD_INT 35
3964: PPUSH
3965: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3969: LD_EXP 14
3973: PPUSH
3974: LD_STRING DH-thanks-2
3976: PPUSH
3977: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3981: LD_INT 35
3983: PPUSH
3984: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3988: LD_INT 2
3990: PPUSH
3991: LD_EXP 23
3995: PPUSH
3996: CALL_OW 292
4000: NOT
4001: IFFALSE 3981
// Say ( Heike , DH-thanks-2a ) ;
4003: LD_EXP 14
4007: PPUSH
4008: LD_STRING DH-thanks-2a
4010: PPUSH
4011: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4015: LD_EXP 23
4019: PPUSH
4020: CALL_OW 64
// InGameOff ;
4024: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4028: LD_STRING O2_ambush_out_cont
4030: PPUSH
4031: CALL_OW 337
// johnnySaved := true ;
4035: LD_ADDR_EXP 4
4039: PUSH
4040: LD_INT 1
4042: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4043: LD_EXP 14
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 600
4053: PPUSH
4054: CALL_OW 492
// if IsOk ( Olaf ) then
4058: LD_EXP 15
4062: PPUSH
4063: CALL_OW 302
4067: IFFALSE 4084
// ComMoveXY ( Olaf , 44 , 25 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_INT 44
4076: PPUSH
4077: LD_INT 25
4079: PPUSH
4080: CALL_OW 111
// end ;
4084: END
// every 0 0$1 trigger russianPatrol do var i ;
4085: LD_EXP 19
4089: IFFALSE 4157
4091: GO 4093
4093: DISABLE
4094: LD_INT 0
4096: PPUSH
// begin enable ;
4097: ENABLE
// for i in russianPatrol do
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_EXP 19
4107: PUSH
4108: FOR_IN
4109: IFFALSE 4155
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4111: LD_VAR 0 1
4115: PPUSH
4116: CALL_OW 256
4120: PUSH
4121: LD_INT 1000
4123: LESS
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL_OW 314
4134: NOT
4135: AND
4136: IFFALSE 4153
// ComAgressiveMove ( i , 42 , 12 ) ;
4138: LD_VAR 0 1
4142: PPUSH
4143: LD_INT 42
4145: PPUSH
4146: LD_INT 12
4148: PPUSH
4149: CALL_OW 114
4153: GO 4108
4155: POP
4156: POP
// end ;
4157: PPOPN 1
4159: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4160: LD_INT 1
4162: PPUSH
4163: LD_INT 2
4165: PPUSH
4166: CALL_OW 81
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: PUSH
4175: LD_EXP 23
4179: PPUSH
4180: CALL_OW 302
4184: AND
4185: IFFALSE 4202
4187: GO 4189
4189: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4190: LD_EXP 23
4194: PPUSH
4195: LD_STRING DJ-fire-1
4197: PPUSH
4198: CALL_OW 88
4202: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4203: LD_EXP 7
4207: NOT
4208: PUSH
4209: LD_EXP 21
4213: PPUSH
4214: LD_INT 101
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 72
4228: AND
4229: IFFALSE 4349
4231: GO 4233
4233: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4234: LD_EXP 14
4238: PPUSH
4239: CALL_OW 87
// DialogueOn ;
4243: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4247: LD_EXP 14
4251: PPUSH
4252: LD_STRING DH-see-enemy-patrol-1
4254: PPUSH
4255: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4259: LD_EXP 21
4263: PPUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 72
4278: PUSH
4279: LD_INT 1
4281: ARRAY
4282: PPUSH
4283: LD_STRING DR-see-enemy-patrol-1
4285: PPUSH
4286: CALL_OW 88
// DialogueOff ;
4290: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4294: LD_EXP 21
4298: PPUSH
4299: LD_INT 66
4301: PPUSH
4302: LD_INT 22
4304: PPUSH
4305: CALL_OW 114
// wait ( 0 0$10 ) ;
4309: LD_INT 350
4311: PPUSH
4312: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4316: LD_EXP 21
4320: PPUSH
4321: LD_INT 175
4323: PPUSH
4324: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4328: LD_EXP 21
4332: PPUSH
4333: LD_INT 9
4335: PPUSH
4336: CALL_OW 173
// AddComFree ( russianForces ) ;
4340: LD_EXP 21
4344: PPUSH
4345: CALL_OW 199
// end ;
4349: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4350: LD_EXP 21
4354: PPUSH
4355: LD_INT 3
4357: PUSH
4358: LD_INT 24
4360: PUSH
4361: LD_INT 960
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: IFFALSE 4620
4378: GO 4380
4380: DISABLE
4381: LD_INT 0
4383: PPUSH
4384: PPUSH
4385: PPUSH
4386: PPUSH
// begin enable ;
4387: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PPUSH
4403: CALL_OW 69
4407: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4408: LD_ADDR_VAR 0 3
4412: PUSH
4413: LD_EXP 21
4417: PPUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 3
4423: PUSH
4424: LD_INT 24
4426: PUSH
4427: LD_INT 960
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 24
4436: PUSH
4437: LD_INT 500
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PPUSH
4453: CALL_OW 72
4457: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4458: LD_ADDR_VAR 0 4
4462: PUSH
4463: LD_EXP 21
4467: PPUSH
4468: LD_INT 3
4470: PUSH
4471: LD_INT 24
4473: PUSH
4474: LD_INT 500
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 72
4489: ST_TO_ADDR
// if not tmp then
4490: LD_VAR 0 2
4494: NOT
4495: IFFALSE 4499
// exit ;
4497: GO 4620
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_VAR 0 3
4508: PUSH
4509: LD_INT 1
4511: ARRAY
4512: PPUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL_OW 74
4522: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_VAR 0 3
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 296
4541: PUSH
4542: LD_INT 10
4544: LESS
4545: IFFALSE 4561
// ComAttackUnit ( tmp2 , tmp ) ;
4547: LD_VAR 0 3
4551: PPUSH
4552: LD_VAR 0 2
4556: PPUSH
4557: CALL_OW 115
// if tmp3 then
4561: LD_VAR 0 4
4565: IFFALSE 4620
// for i in tmp do
4567: LD_ADDR_VAR 0 1
4571: PUSH
4572: LD_VAR 0 2
4576: PUSH
4577: FOR_IN
4578: IFFALSE 4618
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 119
4587: PPUSH
4588: LD_INT 21
4590: PPUSH
4591: CALL_OW 297
4595: PUSH
4596: LD_INT 10
4598: GREATER
4599: IFFALSE 4616
// ComMoveXY ( i , 119 , 21 ) ;
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_INT 119
4608: PPUSH
4609: LD_INT 21
4611: PPUSH
4612: CALL_OW 111
4616: GO 4577
4618: POP
4619: POP
// end ;
4620: PPOPN 4
4622: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4623: LD_EXP 1
4627: PUSH
4628: LD_EXP 8
4632: NOT
4633: AND
4634: PUSH
4635: LD_EXP 7
4639: NOT
4640: AND
4641: PUSH
4642: LD_EXP 14
4646: PPUSH
4647: LD_INT 25
4649: PUSH
4650: LD_INT 14
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: PPUSH
4662: LD_EXP 14
4666: PPUSH
4667: CALL_OW 74
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 6
4679: LESS
4680: AND
4681: IFFALSE 4698
4683: GO 4685
4685: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4686: LD_EXP 14
4690: PPUSH
4691: LD_STRING DH-tiger-1
4693: PPUSH
4694: CALL_OW 88
4698: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4699: LD_EXP 1
4703: PUSH
4704: LD_EXP 8
4708: NOT
4709: AND
4710: PUSH
4711: LD_EXP 7
4715: NOT
4716: AND
4717: PUSH
4718: LD_EXP 14
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 12
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 69
4737: PPUSH
4738: LD_EXP 14
4742: PPUSH
4743: CALL_OW 74
4747: PPUSH
4748: CALL_OW 296
4752: PUSH
4753: LD_INT 6
4755: LESS
4756: AND
4757: IFFALSE 4774
4759: GO 4761
4761: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4762: LD_EXP 14
4766: PPUSH
4767: LD_STRING DH-ape-1
4769: PPUSH
4770: CALL_OW 88
4774: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4775: LD_EXP 1
4779: PUSH
4780: LD_EXP 8
4784: NOT
4785: AND
4786: PUSH
4787: LD_EXP 7
4791: NOT
4792: AND
4793: PUSH
4794: LD_EXP 14
4798: PPUSH
4799: LD_INT 25
4801: PUSH
4802: LD_INT 18
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 69
4813: PPUSH
4814: LD_EXP 14
4818: PPUSH
4819: CALL_OW 74
4823: PPUSH
4824: CALL_OW 296
4828: PUSH
4829: LD_INT 6
4831: LESS
4832: AND
4833: IFFALSE 4850
4835: GO 4837
4837: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4838: LD_EXP 14
4842: PPUSH
4843: LD_STRING DH-bird-1
4845: PPUSH
4846: CALL_OW 88
4850: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 101
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: IFFALSE 4892
4881: GO 4883
4883: DISABLE
// russianSpotted := true ;
4884: LD_ADDR_EXP 9
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
4892: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4893: LD_EXP 14
4897: PPUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 3
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PPUSH
4927: LD_EXP 14
4931: PPUSH
4932: CALL_OW 74
4936: PPUSH
4937: CALL_OW 296
4941: PUSH
4942: LD_INT 8
4944: LESS
4945: IFFALSE 4962
4947: GO 4949
4949: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4950: LD_EXP 14
4954: PPUSH
4955: LD_STRING DH-enemy-base
4957: PPUSH
4958: CALL_OW 88
4962: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
4963: LD_EXP 23
4967: PPUSH
4968: CALL_OW 305
4972: NOT
4973: PUSH
4974: LD_EXP 6
4978: NOT
4979: AND
4980: PUSH
4981: LD_EXP 5
4985: AND
4986: PUSH
4987: LD_EXP 12
4991: NOT
4992: AND
4993: PUSH
4994: LD_EXP 11
4998: NOT
4999: AND
5000: IFFALSE 5151
5002: GO 5004
5004: DISABLE
5005: LD_INT 0
5007: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5008: LD_INT 35
5010: PPUSH
5011: CALL_OW 67
// for i in dogTag do
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_EXP 5
5024: PUSH
5025: FOR_IN
5026: IFFALSE 5075
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5028: LD_EXP 14
5032: PPUSH
5033: LD_VAR 0 1
5037: PUSH
5038: LD_INT 1
5040: ARRAY
5041: PPUSH
5042: LD_VAR 0 1
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PPUSH
5051: CALL_OW 297
5055: PUSH
5056: LD_INT 3
5058: LESS
5059: IFFALSE 5073
// begin dogTagFound := i ;
5061: LD_ADDR_EXP 6
5065: PUSH
5066: LD_VAR 0 1
5070: ST_TO_ADDR
// break ;
5071: GO 5075
// end ;
5073: GO 5025
5075: POP
5076: POP
// until dogTagFound ;
5077: LD_EXP 6
5081: IFFALSE 5008
// CenterNowOnUnits ( Heike ) ;
5083: LD_EXP 14
5087: PPUSH
5088: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5092: LD_EXP 14
5096: PPUSH
5097: LD_EXP 6
5101: PUSH
5102: LD_INT 1
5104: ARRAY
5105: PPUSH
5106: LD_EXP 6
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PPUSH
5115: CALL_OW 111
// if mercenariesQuestReady then
5119: LD_EXP 10
5123: IFFALSE 5139
// Say ( Heike , DH-dogtag-found-quest ) else
5125: LD_EXP 14
5129: PPUSH
5130: LD_STRING DH-dogtag-found-quest
5132: PPUSH
5133: CALL_OW 88
5137: GO 5151
// Say ( Heike , DH-dogtag-found ) ;
5139: LD_EXP 14
5143: PPUSH
5144: LD_STRING DH-dogtag-found
5146: PPUSH
5147: CALL_OW 88
// end ;
5151: PPOPN 1
5153: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5154: LD_EXP 8
5158: NOT
5159: PUSH
5160: LD_EXP 7
5164: NOT
5165: AND
5166: PUSH
5167: LD_INT 5
5169: PPUSH
5170: LD_EXP 14
5174: PPUSH
5175: CALL_OW 292
5179: AND
5180: PUSH
5181: LD_EXP 14
5185: PPUSH
5186: LD_EXP 15
5190: PPUSH
5191: CALL_OW 296
5195: PUSH
5196: LD_INT 8
5198: LESS
5199: AND
5200: IFFALSE 5561
5202: GO 5204
5204: DISABLE
// begin olafSpotted := true ;
5205: LD_ADDR_EXP 8
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if HasTask ( Olaf ) then
5213: LD_EXP 15
5217: PPUSH
5218: CALL_OW 314
5222: IFFALSE 5233
// ComStop ( Olaf ) ;
5224: LD_EXP 15
5228: PPUSH
5229: CALL_OW 141
// InGameOn ;
5233: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5237: LD_EXP 15
5241: PPUSH
5242: LD_EXP 14
5246: PPUSH
5247: CALL_OW 296
5251: PUSH
5252: LD_INT 8
5254: GREATER
5255: IFFALSE 5271
// ComMoveUnit ( Olaf , Heike ) ;
5257: LD_EXP 15
5261: PPUSH
5262: LD_EXP 14
5266: PPUSH
5267: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5271: LD_INT 35
5273: PPUSH
5274: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5278: LD_EXP 15
5282: PPUSH
5283: LD_EXP 14
5287: PPUSH
5288: CALL_OW 296
5292: PUSH
5293: LD_INT 8
5295: LESSEQUAL
5296: IFFALSE 5271
// ComTurnUnit ( Heike , Olaf ) ;
5298: LD_EXP 14
5302: PPUSH
5303: LD_EXP 15
5307: PPUSH
5308: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5312: LD_EXP 15
5316: PPUSH
5317: LD_EXP 14
5321: PPUSH
5322: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5326: LD_EXP 15
5330: PPUSH
5331: LD_STRING DO-olaf-1
5333: PPUSH
5334: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5338: LD_EXP 14
5342: PPUSH
5343: LD_STRING DH-olaf-1
5345: PPUSH
5346: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5350: LD_EXP 15
5354: PPUSH
5355: LD_STRING DO-olaf-2
5357: PPUSH
5358: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5362: LD_EXP 14
5366: PPUSH
5367: LD_STRING DH-olaf-2
5369: PPUSH
5370: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5374: LD_EXP 15
5378: PPUSH
5379: LD_STRING DO-olaf-3
5381: PPUSH
5382: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5386: LD_EXP 15
5390: PPUSH
5391: LD_STRING DO-olaf-4
5393: PPUSH
5394: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5398: LD_EXP 14
5402: PPUSH
5403: LD_STRING DH-olaf-4
5405: PPUSH
5406: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5410: LD_EXP 15
5414: PPUSH
5415: LD_STRING DO-olaf-5
5417: PPUSH
5418: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5422: LD_EXP 14
5426: PPUSH
5427: LD_STRING DH-olaf-5
5429: PPUSH
5430: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5434: LD_EXP 15
5438: PPUSH
5439: LD_STRING DO-olaf-6
5441: PPUSH
5442: CALL_OW 88
// if russianSpotted or johnnySaved then
5446: LD_EXP 9
5450: PUSH
5451: LD_EXP 4
5455: OR
5456: IFFALSE 5484
// begin Say ( Heike , DH-olaf-6a ) ;
5458: LD_EXP 14
5462: PPUSH
5463: LD_STRING DH-olaf-6a
5465: PPUSH
5466: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5470: LD_EXP 15
5474: PPUSH
5475: LD_STRING DO-olaf-7a
5477: PPUSH
5478: CALL_OW 88
// end else
5482: GO 5508
// begin Say ( Heike , DH-olaf-6b ) ;
5484: LD_EXP 14
5488: PPUSH
5489: LD_STRING DH-olaf-6b
5491: PPUSH
5492: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5496: LD_EXP 15
5500: PPUSH
5501: LD_STRING DO-olaf-7b
5503: PPUSH
5504: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5508: LD_EXP 15
5512: PPUSH
5513: LD_STRING DO-olaf-8
5515: PPUSH
5516: CALL_OW 88
// InGameOff ;
5520: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5524: LD_STRING O3_camp_cont
5526: PPUSH
5527: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5531: LD_EXP 15
5535: PPUSH
5536: LD_INT 52
5538: PPUSH
5539: LD_INT 90
5541: PPUSH
5542: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5546: LD_EXP 15
5550: PPUSH
5551: LD_INT 53
5553: PPUSH
5554: LD_INT 89
5556: PPUSH
5557: CALL_OW 178
// end ;
5561: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5562: LD_EXP 8
5566: NOT
5567: PUSH
5568: LD_EXP 14
5572: PPUSH
5573: LD_EXP 16
5577: PPUSH
5578: CALL_OW 296
5582: PUSH
5583: LD_INT 36
5585: LESS
5586: AND
5587: IFFALSE 5607
5589: GO 5591
5591: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5592: LD_EXP 15
5596: PPUSH
5597: LD_INT 39
5599: PPUSH
5600: LD_INT 71
5602: PPUSH
5603: CALL_OW 111
5607: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5608: LD_EXP 7
5612: NOT
5613: PUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_EXP 17
5621: PPUSH
5622: CALL_OW 292
5626: PUSH
5627: LD_INT 2
5629: PPUSH
5630: LD_EXP 16
5634: PPUSH
5635: CALL_OW 292
5639: OR
5640: AND
5641: IFFALSE 6966
5643: GO 5645
5645: DISABLE
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin if IsLive ( Johnny ) then
5651: LD_EXP 23
5655: PPUSH
5656: CALL_OW 300
5660: IFFALSE 5671
// KillUnit ( Johnny ) ;
5662: LD_EXP 23
5666: PPUSH
5667: CALL_OW 66
// mercenariesSpotted := true ;
5671: LD_ADDR_EXP 7
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5679: LD_STRING O4_camp_cont
5681: PPUSH
5682: CALL_OW 337
// InGameOn ;
5686: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5690: LD_INT 53
5692: PPUSH
5693: LD_INT 89
5695: PPUSH
5696: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5700: LD_INT 53
5702: PPUSH
5703: LD_INT 89
5705: PPUSH
5706: LD_INT 2
5708: PPUSH
5709: LD_INT 8
5711: NEG
5712: PPUSH
5713: CALL_OW 330
// if olafSpotted then
5717: LD_EXP 8
5721: IFFALSE 5839
// begin AddComTurnUnit ( Olaf , Heike ) ;
5723: LD_EXP 15
5727: PPUSH
5728: LD_EXP 14
5732: PPUSH
5733: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 51
5744: PPUSH
5745: LD_INT 86
5747: PPUSH
5748: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5752: LD_EXP 14
5756: PPUSH
5757: LD_EXP 15
5761: PPUSH
5762: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5766: LD_EXP 15
5770: PPUSH
5771: LD_STRING DO-camp-1
5773: PPUSH
5774: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5778: LD_EXP 16
5782: PUSH
5783: LD_EXP 17
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: LD_EXP 14
5796: PPUSH
5797: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5801: LD_EXP 16
5805: PPUSH
5806: LD_STRING DG-camp-1
5808: PPUSH
5809: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5813: LD_EXP 14
5817: PPUSH
5818: LD_STRING DH-camp-1
5820: PPUSH
5821: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5825: LD_EXP 15
5829: PPUSH
5830: LD_STRING DO-camp-2
5832: PPUSH
5833: CALL_OW 88
// end else
5837: GO 6234
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5839: LD_EXP 14
5843: PPUSH
5844: LD_INT 51
5846: PPUSH
5847: LD_INT 86
5849: PPUSH
5850: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5854: LD_EXP 14
5858: PPUSH
5859: LD_EXP 16
5863: PPUSH
5864: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5868: LD_EXP 16
5872: PUSH
5873: LD_EXP 17
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PPUSH
5882: LD_EXP 14
5886: PPUSH
5887: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5891: LD_EXP 16
5895: PPUSH
5896: LD_STRING DG-camp-1a
5898: PPUSH
5899: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5903: LD_EXP 14
5907: PPUSH
5908: LD_STRING DH-camp-1a
5910: PPUSH
5911: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5915: LD_INT 1
5917: PPUSH
5918: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5922: LD_EXP 17
5926: PPUSH
5927: LD_EXP 15
5931: PPUSH
5932: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5936: LD_EXP 17
5940: PPUSH
5941: LD_STRING DM-camp-1a
5943: PPUSH
5944: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5948: LD_EXP 15
5952: PPUSH
5953: LD_INT 52
5955: PPUSH
5956: LD_INT 90
5958: PPUSH
5959: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5963: LD_EXP 17
5967: PPUSH
5968: LD_EXP 14
5972: PPUSH
5973: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5977: LD_EXP 16
5981: PPUSH
5982: LD_STRING DG-camp-2a
5984: PPUSH
5985: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5989: LD_EXP 14
5993: PPUSH
5994: LD_STRING DH-camp-2a
5996: PPUSH
5997: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6001: LD_EXP 17
6005: PPUSH
6006: LD_STRING DM-camp-2a
6008: PPUSH
6009: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6013: LD_INT 35
6015: PPUSH
6016: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6020: LD_EXP 15
6024: PPUSH
6025: LD_EXP 14
6029: PPUSH
6030: CALL_OW 296
6034: PUSH
6035: LD_INT 10
6037: LESS
6038: IFFALSE 6013
// AddComTurnUnit ( Olaf , Heike ) ;
6040: LD_EXP 15
6044: PPUSH
6045: LD_EXP 14
6049: PPUSH
6050: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6054: LD_EXP 17
6058: PPUSH
6059: LD_EXP 14
6063: PPUSH
6064: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6068: LD_EXP 15
6072: PPUSH
6073: LD_STRING DO-camp-2a
6075: PPUSH
6076: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6080: LD_EXP 14
6084: PPUSH
6085: LD_EXP 15
6089: PPUSH
6090: CALL_OW 119
// if russianSpotted then
6094: LD_EXP 9
6098: IFFALSE 6138
// begin Say ( Heike , DH-camp-2aa ) ;
6100: LD_EXP 14
6104: PPUSH
6105: LD_STRING DH-camp-2aa
6107: PPUSH
6108: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6112: LD_EXP 16
6116: PPUSH
6117: LD_STRING DG-camp-2aa
6119: PPUSH
6120: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6124: LD_EXP 17
6128: PPUSH
6129: LD_STRING DM-camp-2aa
6131: PPUSH
6132: CALL_OW 88
// end else
6136: GO 6162
// begin Say ( Heike , DH-camp-2ab ) ;
6138: LD_EXP 14
6142: PPUSH
6143: LD_STRING DH-camp-2ab
6145: PPUSH
6146: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6150: LD_EXP 17
6154: PPUSH
6155: LD_STRING DM-camp-2ab
6157: PPUSH
6158: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6162: LD_EXP 14
6166: PPUSH
6167: LD_STRING DH-camp-3a
6169: PPUSH
6170: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6174: LD_EXP 15
6178: PPUSH
6179: LD_STRING DO-camp-3a
6181: PPUSH
6182: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6186: LD_EXP 16
6190: PPUSH
6191: LD_STRING DG-camp-3a
6193: PPUSH
6194: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_STRING DH-camp-4aa
6205: PPUSH
6206: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6210: LD_EXP 17
6214: PPUSH
6215: LD_STRING DM-camp-4aa
6217: PPUSH
6218: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6222: LD_EXP 15
6226: PPUSH
6227: LD_STRING DO-camp-4a
6229: PPUSH
6230: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6234: LD_EXP 15
6238: PPUSH
6239: LD_STRING DO-camp-3
6241: PPUSH
6242: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6246: LD_EXP 15
6250: PPUSH
6251: LD_STRING DO-camp-4
6253: PPUSH
6254: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6258: LD_EXP 16
6262: PPUSH
6263: LD_EXP 15
6267: PPUSH
6268: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6272: LD_EXP 16
6276: PPUSH
6277: LD_STRING DG-camp-4
6279: PPUSH
6280: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6284: LD_EXP 14
6288: PPUSH
6289: LD_EXP 16
6293: PPUSH
6294: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6298: LD_EXP 14
6302: PPUSH
6303: LD_STRING DH-camp-4
6305: PPUSH
6306: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6310: LD_EXP 17
6314: PUSH
6315: LD_EXP 15
6319: PUSH
6320: LD_EXP 16
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: LD_EXP 14
6334: PPUSH
6335: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6339: LD_EXP 16
6343: PPUSH
6344: LD_STRING DG-camp-5
6346: PPUSH
6347: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6351: LD_EXP 16
6355: PPUSH
6356: LD_STRING DG-camp-6
6358: PPUSH
6359: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6363: LD_EXP 14
6367: PPUSH
6368: LD_STRING DH-camp-6
6370: PPUSH
6371: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6375: LD_EXP 16
6379: PPUSH
6380: LD_STRING DG-camp-7
6382: PPUSH
6383: CALL_OW 88
// if DogTagFound then
6387: LD_EXP 6
6391: IFFALSE 6431
// begin Say ( Heike , DH-quest-1a ) ;
6393: LD_EXP 14
6397: PPUSH
6398: LD_STRING DH-quest-1a
6400: PPUSH
6401: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6405: LD_EXP 16
6409: PPUSH
6410: LD_STRING DG-quest-1a
6412: PPUSH
6413: CALL_OW 88
// mercenariesQuestDone := true ;
6417: LD_ADDR_EXP 11
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// InGameOff ;
6425: CALL_OW 9
// end else
6429: GO 6597
// begin Say ( Heike , DH-camp-7 ) ;
6431: LD_EXP 14
6435: PPUSH
6436: LD_STRING DH-camp-7
6438: PPUSH
6439: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6443: LD_EXP 14
6447: PPUSH
6448: CALL_OW 256
6452: PUSH
6453: LD_INT 1000
6455: LESS
6456: IFFALSE 6548
// begin Say ( Olaf , DO-heal-1 ) ;
6458: LD_EXP 15
6462: PPUSH
6463: LD_STRING DO-heal-1
6465: PPUSH
6466: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6470: LD_EXP 14
6474: PPUSH
6475: LD_INT 51
6477: PPUSH
6478: LD_INT 88
6480: PPUSH
6481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6485: LD_INT 35
6487: PPUSH
6488: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6492: LD_EXP 14
6496: PPUSH
6497: LD_EXP 15
6501: PPUSH
6502: CALL_OW 296
6506: PUSH
6507: LD_INT 4
6509: LESS
6510: PUSH
6511: LD_EXP 14
6515: PPUSH
6516: LD_INT 51
6518: PPUSH
6519: LD_INT 88
6521: PPUSH
6522: CALL_OW 307
6526: OR
6527: IFFALSE 6485
// SetLives ( Heike , 1000 ) ;
6529: LD_EXP 14
6533: PPUSH
6534: LD_INT 1000
6536: PPUSH
6537: CALL_OW 234
// wait ( 0 0$2 ) ;
6541: LD_INT 70
6543: PPUSH
6544: CALL_OW 67
// end ; InGameOff ;
6548: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6552: LD_EXP 15
6556: PUSH
6557: LD_EXP 16
6561: PUSH
6562: LD_EXP 17
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: PPUSH
6572: LD_INT 53
6574: PPUSH
6575: LD_INT 89
6577: PPUSH
6578: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6582: LD_STRING O5_proof_cont
6584: PPUSH
6585: CALL_OW 337
// mercenariesQuestReady := true ;
6589: LD_ADDR_EXP 10
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6597: LD_EXP 10
6601: NOT
6602: IFFALSE 6606
// exit ;
6604: GO 6966
// wait ( 0 0$35 ) ;
6606: LD_INT 1225
6608: PPUSH
6609: CALL_OW 67
// driver := PreparePatrolTank ;
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: CALL 2731 0 0
6622: ST_TO_ADDR
// if not driver then
6623: LD_VAR 0 2
6627: NOT
6628: IFFALSE 6632
// exit ;
6630: GO 6966
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6632: LD_INT 2
6634: PPUSH
6635: LD_INT 1
6637: PPUSH
6638: LD_INT 2
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_VAR 0 2
6657: PPUSH
6658: CALL_OW 310
6662: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 500
6670: PPUSH
6671: CALL_OW 234
// SetLives ( driver , 450 ) ;
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_INT 450
6682: PPUSH
6683: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_INT 59
6694: PPUSH
6695: LD_INT 60
6697: PPUSH
6698: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6709: LD_VAR 0 3
6713: PPUSH
6714: LD_INT 59
6716: PPUSH
6717: LD_INT 60
6719: PPUSH
6720: CALL_OW 307
6724: IFFALSE 6702
// if not See ( 1 , Heike ) then
6726: LD_INT 1
6728: PPUSH
6729: LD_EXP 14
6733: PPUSH
6734: CALL_OW 292
6738: NOT
6739: IFFALSE 6863
// begin if Difficulty < 3 then
6741: LD_OWVAR 67
6745: PUSH
6746: LD_INT 3
6748: LESS
6749: IFFALSE 6767
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6751: LD_INT 59
6753: PPUSH
6754: LD_INT 60
6756: PPUSH
6757: LD_INT 2
6759: PPUSH
6760: LD_INT 6
6762: PPUSH
6763: CALL_OW 330
// ComExitVehicle ( driver ) ;
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 121
// wait ( 0 0$1 ) ;
6776: LD_INT 35
6778: PPUSH
6779: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6783: LD_VAR 0 2
6787: PPUSH
6788: LD_INT 58
6790: PPUSH
6791: LD_INT 54
6793: PPUSH
6794: CALL_OW 171
// wait ( 0 0$1 ) ;
6798: LD_INT 35
6800: PPUSH
6801: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6805: LD_VAR 0 2
6809: PPUSH
6810: LD_INT 57
6812: PPUSH
6813: LD_INT 53
6815: PPUSH
6816: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6820: LD_VAR 0 2
6824: PPUSH
6825: LD_INT 350
6827: PPUSH
6828: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6832: LD_VAR 0 2
6836: PPUSH
6837: LD_VAR 0 3
6841: PPUSH
6842: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6846: LD_VAR 0 2
6850: PPUSH
6851: LD_INT 107
6853: PPUSH
6854: LD_INT 118
6856: PPUSH
6857: CALL_OW 171
// end else
6861: GO 6878
// begin ComMoveXY ( driver , 107 , 118 ) ;
6863: LD_VAR 0 2
6867: PPUSH
6868: LD_INT 107
6870: PPUSH
6871: LD_INT 118
6873: PPUSH
6874: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6878: LD_INT 35
6880: PPUSH
6881: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6885: LD_VAR 0 3
6889: PPUSH
6890: LD_INT 107
6892: PPUSH
6893: LD_INT 118
6895: PPUSH
6896: CALL_OW 307
6900: PUSH
6901: LD_VAR 0 2
6905: PPUSH
6906: CALL_OW 301
6910: OR
6911: IFFALSE 6878
// if IsDead ( driver [ 1 ] ) then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 1
6920: ARRAY
6921: PPUSH
6922: CALL_OW 301
6926: IFFALSE 6930
// exit ;
6928: GO 6966
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6930: LD_ADDR_VAR 0 1
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 69
6949: PUSH
6950: FOR_IN
6951: IFFALSE 6964
// RemoveUnit ( i ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL_OW 64
6962: GO 6950
6964: POP
6965: POP
// end ;
6966: PPOPN 3
6968: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6969: LD_INT 10
6971: PPUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 2
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 70
7000: IFFALSE 7074
7002: GO 7004
7004: DISABLE
// begin InGameOn ;
7005: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7009: LD_EXP 15
7013: PUSH
7014: LD_EXP 17
7018: PUSH
7019: LD_EXP 16
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: LD_EXP 14
7033: PPUSH
7034: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7038: LD_EXP 17
7042: PPUSH
7043: LD_STRING DM-quest-1
7045: PPUSH
7046: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7050: LD_EXP 16
7054: PPUSH
7055: LD_STRING DG-quest-1
7057: PPUSH
7058: CALL_OW 88
// InGameOff ;
7062: CALL_OW 9
// mercenariesQuestDone := true ;
7066: LD_ADDR_EXP 11
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// end ;
7074: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
7075: LD_EXP 14
7079: PPUSH
7080: LD_INT 10
7082: PPUSH
7083: CALL_OW 308
7087: PUSH
7088: LD_EXP 6
7092: AND
7093: PUSH
7094: LD_EXP 10
7098: AND
7099: IFFALSE 7271
7101: GO 7103
7103: DISABLE
7104: LD_INT 0
7106: PPUSH
// begin InGameOn ;
7107: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7111: LD_EXP 15
7115: PUSH
7116: LD_EXP 17
7120: PUSH
7121: LD_EXP 16
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: LIST
7130: PPUSH
7131: LD_EXP 14
7135: PPUSH
7136: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7140: LD_EXP 14
7144: PPUSH
7145: LD_INT 54
7147: PPUSH
7148: LD_INT 86
7150: PPUSH
7151: CALL_OW 111
// p := p + 1 ;
7155: LD_ADDR_VAR 0 1
7159: PUSH
7160: LD_VAR 0 1
7164: PUSH
7165: LD_INT 1
7167: PLUS
7168: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7169: LD_INT 35
7171: PPUSH
7172: CALL_OW 67
// p := p + 1 ;
7176: LD_ADDR_VAR 0 1
7180: PUSH
7181: LD_VAR 0 1
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7190: LD_EXP 14
7194: PPUSH
7195: LD_EXP 16
7199: PPUSH
7200: CALL_OW 296
7204: PUSH
7205: LD_INT 4
7207: LESS
7208: PUSH
7209: LD_VAR 0 1
7213: PUSH
7214: LD_INT 5
7216: GREATER
7217: OR
7218: IFFALSE 7169
// Say ( Mike , DM-quest-1 ) ;
7220: LD_EXP 17
7224: PPUSH
7225: LD_STRING DM-quest-1
7227: PPUSH
7228: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7232: LD_EXP 16
7236: PPUSH
7237: LD_STRING DG-quest-1
7239: PPUSH
7240: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7244: LD_EXP 14
7248: PPUSH
7249: LD_INT 55
7251: PPUSH
7252: LD_INT 87
7254: PPUSH
7255: CALL_OW 111
// InGameOff ;
7259: CALL_OW 9
// mercenariesQuestDone := true ;
7263: LD_ADDR_EXP 11
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// end ;
7271: PPOPN 1
7273: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7274: LD_EXP 14
7278: PUSH
7279: LD_INT 55
7281: PUSH
7282: EMPTY
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: IN
7290: IFFALSE 7330
7292: GO 7294
7294: DISABLE
// begin if Difficulty < 3 then
7295: LD_OWVAR 67
7299: PUSH
7300: LD_INT 3
7302: LESS
7303: IFFALSE 7318
// RemoveSeeing ( 59 , 60 , 2 ) ;
7305: LD_INT 59
7307: PPUSH
7308: LD_INT 60
7310: PPUSH
7311: LD_INT 2
7313: PPUSH
7314: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7318: LD_EXP 14
7322: PPUSH
7323: LD_STRING DH-driver
7325: PPUSH
7326: CALL_OW 88
// end ;
7330: END
// every 0 0$1 trigger mercenariesQuestDone do
7331: LD_EXP 11
7335: IFFALSE 7823
7337: GO 7339
7339: DISABLE
// begin if mercenariesQuestReady then
7340: LD_EXP 10
7344: IFFALSE 7353
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7346: LD_STRING O5_proof_cont_out
7348: PPUSH
7349: CALL_OW 337
// InGameOn ;
7353: CALL_OW 8
// if IsInUnit ( Heike ) then
7357: LD_EXP 14
7361: PPUSH
7362: CALL_OW 310
7366: IFFALSE 7377
// ComExitVehicle ( Heike ) ;
7368: LD_EXP 14
7372: PPUSH
7373: CALL_OW 121
// wait ( 3 ) ;
7377: LD_INT 3
7379: PPUSH
7380: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7384: LD_EXP 14
7388: PPUSH
7389: LD_EXP 16
7393: PPUSH
7394: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7398: LD_EXP 15
7402: PUSH
7403: LD_EXP 17
7407: PUSH
7408: LD_EXP 16
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: LD_EXP 14
7422: PPUSH
7423: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7427: LD_EXP 14
7431: PPUSH
7432: LD_STRING DH-quest-done-1
7434: PPUSH
7435: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7439: LD_EXP 17
7443: PPUSH
7444: LD_STRING DM-quest-done-1
7446: PPUSH
7447: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7451: LD_EXP 16
7455: PPUSH
7456: LD_STRING DG-quest-done-1
7458: PPUSH
7459: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7463: LD_EXP 14
7467: PPUSH
7468: LD_EXP 15
7472: PPUSH
7473: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7477: LD_EXP 14
7481: PPUSH
7482: LD_STRING DH-quest-done-2
7484: PPUSH
7485: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7489: LD_EXP 15
7493: PPUSH
7494: LD_STRING DO-quest-done-2
7496: PPUSH
7497: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7501: LD_EXP 15
7505: PPUSH
7506: LD_STRING DO-quest-done-3
7508: PPUSH
7509: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7513: LD_EXP 16
7517: PPUSH
7518: LD_INT 51
7520: PPUSH
7521: LD_INT 90
7523: PPUSH
7524: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7528: LD_EXP 16
7532: PPUSH
7533: LD_INT 50
7535: PPUSH
7536: LD_INT 89
7538: PPUSH
7539: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7543: LD_EXP 14
7547: PPUSH
7548: LD_EXP 16
7552: PPUSH
7553: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7557: LD_EXP 16
7561: PPUSH
7562: LD_STRING DG-quest-done-4
7564: PPUSH
7565: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7569: LD_EXP 16
7573: PPUSH
7574: LD_EXP 14
7578: PPUSH
7579: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 256
7592: PUSH
7593: LD_INT 1000
7595: LESS
7596: IFFALSE 7688
// begin Say ( Olaf , DO-heal-1 ) ;
7598: LD_EXP 15
7602: PPUSH
7603: LD_STRING DO-heal-1
7605: PPUSH
7606: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7610: LD_EXP 14
7614: PPUSH
7615: LD_INT 51
7617: PPUSH
7618: LD_INT 88
7620: PPUSH
7621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7625: LD_INT 35
7627: PPUSH
7628: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7632: LD_EXP 14
7636: PPUSH
7637: LD_EXP 15
7641: PPUSH
7642: CALL_OW 296
7646: PUSH
7647: LD_INT 4
7649: LESS
7650: PUSH
7651: LD_EXP 14
7655: PPUSH
7656: LD_INT 51
7658: PPUSH
7659: LD_INT 88
7661: PPUSH
7662: CALL_OW 307
7666: OR
7667: IFFALSE 7625
// SetLives ( Heike , 1000 ) ;
7669: LD_EXP 14
7673: PPUSH
7674: LD_INT 1000
7676: PPUSH
7677: CALL_OW 234
// wait ( 0 0$2 ) ;
7681: LD_INT 70
7683: PPUSH
7684: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7688: LD_EXP 14
7692: PPUSH
7693: LD_STRING DH-quest-done-4
7695: PPUSH
7696: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7700: LD_EXP 15
7704: PPUSH
7705: LD_STRING DO-quest-done-4
7707: PPUSH
7708: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7712: LD_EXP 14
7716: PPUSH
7717: LD_EXP 15
7721: PPUSH
7722: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7726: LD_EXP 14
7730: PPUSH
7731: LD_STRING DH-quest-done-5
7733: PPUSH
7734: CALL_OW 88
// InGameOff ;
7738: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7742: LD_STRING O6_end_cont
7744: PPUSH
7745: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7749: LD_EXP 16
7753: PPUSH
7754: LD_INT 2
7756: PPUSH
7757: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7761: LD_EXP 17
7765: PPUSH
7766: LD_INT 2
7768: PPUSH
7769: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7773: LD_INT 42
7775: PPUSH
7776: LD_INT 2
7778: PPUSH
7779: LD_INT 2
7781: PPUSH
7782: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7786: LD_EXP 15
7790: PPUSH
7791: LD_INT 53
7793: PPUSH
7794: LD_INT 89
7796: PPUSH
7797: CALL_OW 118
// lastObjectiveActive := true ;
7801: LD_ADDR_EXP 12
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7809: LD_INT 1
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: CALL_OW 424
// PreparePrison ;
7819: CALL 1081 0 0
// end ;
7823: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7824: LD_INT 22
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 91
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: IFFALSE 8010
7858: GO 7860
7860: DISABLE
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
// begin wait ( [ 0 0$10 , 0 0$09 , 0 0$08 ] [ Difficulty ] ) ;
7865: LD_INT 350
7867: PUSH
7868: LD_INT 315
7870: PUSH
7871: LD_INT 280
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: LD_OWVAR 67
7883: ARRAY
7884: PPUSH
7885: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7889: LD_ADDR_VAR 0 2
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 25
7906: PUSH
7907: LD_INT 1
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 54
7916: PUSH
7917: EMPTY
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: PPUSH
7925: CALL_OW 69
7929: ST_TO_ADDR
// if not tmp then
7930: LD_VAR 0 2
7934: NOT
7935: IFFALSE 7939
// exit ;
7937: GO 8010
// for i in tmp do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 2
7948: PUSH
7949: FOR_IN
7950: IFFALSE 7978
// begin ComExitBuilding ( i ) ;
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_INT 121
7968: PPUSH
7969: LD_INT 22
7971: PPUSH
7972: CALL_OW 174
// end ;
7976: GO 7949
7978: POP
7979: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7980: LD_EXP 21
7984: PPUSH
7985: LD_INT 121
7987: PPUSH
7988: LD_INT 22
7990: PPUSH
7991: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7995: LD_EXP 22
7999: PPUSH
8000: LD_INT 121
8002: PPUSH
8003: LD_INT 22
8005: PPUSH
8006: CALL_OW 114
// end ;
8010: PPOPN 2
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 8
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8199
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$09 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8054: LD_INT 315
8056: PUSH
8057: LD_INT 245
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_OWVAR 67
8072: ARRAY
8073: PPUSH
8074: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_INT 22
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 25
8095: PUSH
8096: LD_INT 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 54
8105: PUSH
8106: EMPTY
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: PPUSH
8114: CALL_OW 69
8118: ST_TO_ADDR
// if not tmp then
8119: LD_VAR 0 2
8123: NOT
8124: IFFALSE 8128
// exit ;
8126: GO 8199
// for i in tmp do
8128: LD_ADDR_VAR 0 1
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8167
// begin ComExitBuilding ( i ) ;
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 142
8157: PPUSH
8158: LD_INT 71
8160: PPUSH
8161: CALL_OW 174
// end ;
8165: GO 8138
8167: POP
8168: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8169: LD_EXP 21
8173: PPUSH
8174: LD_INT 142
8176: PPUSH
8177: LD_INT 71
8179: PPUSH
8180: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8184: LD_EXP 22
8188: PPUSH
8189: LD_INT 142
8191: PPUSH
8192: LD_INT 71
8194: PPUSH
8195: CALL_OW 114
// end ;
8199: PPOPN 2
8201: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8202: LD_INT 22
8204: PUSH
8205: LD_INT 2
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 21
8214: PUSH
8215: LD_INT 2
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 58
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: LD_INT 3
8230: PUSH
8231: LD_INT 24
8233: PUSH
8234: LD_INT 1000
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 91
8247: PUSH
8248: LD_EXP 15
8252: PUSH
8253: LD_INT 8
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PPUSH
8268: CALL_OW 69
8272: PUSH
8273: LD_EXP 15
8277: PPUSH
8278: CALL_OW 302
8282: AND
8283: IFFALSE 8397
8285: GO 8287
8287: DISABLE
// begin enable ;
8288: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8289: LD_EXP 15
8293: PPUSH
8294: LD_INT 22
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_INT 21
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 58
8316: PUSH
8317: EMPTY
8318: LIST
8319: PUSH
8320: LD_INT 3
8322: PUSH
8323: LD_INT 24
8325: PUSH
8326: LD_INT 1000
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 91
8339: PUSH
8340: LD_EXP 15
8344: PUSH
8345: LD_INT 8
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 69
8364: PUSH
8365: LD_INT 1
8367: ARRAY
8368: PPUSH
8369: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8373: LD_EXP 15
8377: PPUSH
8378: LD_INT 52
8380: PPUSH
8381: LD_INT 90
8383: PPUSH
8384: CALL_OW 171
// AddComHold ( Olaf ) ;
8388: LD_EXP 15
8392: PPUSH
8393: CALL_OW 200
// end ;
8397: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8398: LD_EXP 12
8402: PUSH
8403: LD_INT 2
8405: PPUSH
8406: CALL_OW 302
8410: NOT
8411: AND
8412: PUSH
8413: LD_OWVAR 67
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: AND
8422: PUSH
8423: LD_EXP 13
8427: NOT
8428: AND
8429: IFFALSE 8446
8431: GO 8433
8433: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8434: LD_EXP 14
8438: PPUSH
8439: LD_STRING DH-prison-missing
8441: PPUSH
8442: CALL_OW 88
// end ;
8446: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8447: LD_EXP 12
8451: PUSH
8452: LD_INT 8
8454: PPUSH
8455: CALL_OW 302
8459: NOT
8460: AND
8461: PUSH
8462: LD_OWVAR 67
8466: PUSH
8467: LD_INT 1
8469: GREATER
8470: AND
8471: PUSH
8472: LD_EXP 13
8476: NOT
8477: AND
8478: IFFALSE 8495
8480: GO 8482
8482: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8483: LD_EXP 14
8487: PPUSH
8488: LD_STRING DH-prison-missing
8490: PPUSH
8491: CALL_OW 88
// end ;
8495: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8496: LD_EXP 12
8500: PUSH
8501: LD_INT 3
8503: PPUSH
8504: CALL_OW 302
8508: NOT
8509: AND
8510: PUSH
8511: LD_EXP 13
8515: NOT
8516: AND
8517: IFFALSE 8534
8519: GO 8521
8521: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8522: LD_EXP 14
8526: PPUSH
8527: LD_STRING DH-prison-missing-a
8529: PPUSH
8530: CALL_OW 88
// end ;
8534: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8535: LD_EXP 12
8539: PUSH
8540: LD_INT 10
8542: PPUSH
8543: CALL_OW 302
8547: NOT
8548: AND
8549: PUSH
8550: LD_EXP 13
8554: NOT
8555: AND
8556: IFFALSE 8573
8558: GO 8560
8560: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8561: LD_EXP 14
8565: PPUSH
8566: LD_STRING DH-prison-missing-a
8568: PPUSH
8569: CALL_OW 88
// end ;
8573: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8574: LD_EXP 13
8578: NOT
8579: PUSH
8580: LD_EXP 12
8584: AND
8585: PUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_EXP 18
8593: PPUSH
8594: CALL_OW 292
8598: AND
8599: IFFALSE 8686
8601: GO 8603
8603: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8604: LD_EXP 18
8608: PPUSH
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 119
// DialogueOn ;
8618: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8622: LD_EXP 18
8626: PPUSH
8627: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8631: LD_EXP 18
8635: PPUSH
8636: LD_STRING DK-prison-found
8638: PPUSH
8639: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8643: LD_EXP 14
8647: PPUSH
8648: LD_STRING DH-prison-found
8650: PPUSH
8651: CALL_OW 88
// DialogueOff ;
8655: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8659: LD_EXP 18
8663: PPUSH
8664: LD_INT 2
8666: PPUSH
8667: CALL_OW 235
// prisonFound := true ;
8671: LD_ADDR_EXP 13
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8679: LD_STRING O6_prison_out
8681: PPUSH
8682: CALL_OW 337
// end ;
8686: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8687: LD_EXP 12
8691: PUSH
8692: LD_EXP 14
8696: PPUSH
8697: CALL_OW 302
8701: AND
8702: PUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 1
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 50
8728: PUSH
8729: EMPTY
8730: LIST
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 71
8741: PUSH
8742: LD_INT 0
8744: EQUAL
8745: AND
8746: IFFALSE 9062
8748: GO 8750
8750: DISABLE
8751: LD_INT 0
8753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8754: LD_ADDR_VAR 0 1
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 21
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 50
8781: PUSH
8782: EMPTY
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PPUSH
8790: CALL_OW 69
8794: ST_TO_ADDR
// if prisonFound then
8795: LD_EXP 13
8799: IFFALSE 8813
// AddMedal ( med1 , 1 ) else
8801: LD_STRING med1
8803: PPUSH
8804: LD_INT 1
8806: PPUSH
8807: CALL_OW 101
8811: GO 8824
// AddMedal ( med1 , - 1 ) ;
8813: LD_STRING med1
8815: PPUSH
8816: LD_INT 1
8818: NEG
8819: PPUSH
8820: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
8824: LD_VAR 0 1
8828: PUSH
8829: LD_INT 3
8831: LESS
8832: PUSH
8833: LD_EXP 13
8837: NOT
8838: AND
8839: PUSH
8840: LD_VAR 0 1
8844: PUSH
8845: LD_INT 4
8847: LESS
8848: PUSH
8849: LD_EXP 13
8853: AND
8854: OR
8855: IFFALSE 8870
// AddMedal ( med2 , - 1 ) else
8857: LD_STRING med2
8859: PPUSH
8860: LD_INT 1
8862: NEG
8863: PPUSH
8864: CALL_OW 101
8868: GO 8880
// AddMedal ( med2 , 1 ) ;
8870: LD_STRING med2
8872: PPUSH
8873: LD_INT 1
8875: PPUSH
8876: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
8880: LD_EXP 13
8884: PUSH
8885: LD_EXP 4
8889: AND
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: LD_INT 4
8898: GREATEREQUAL
8899: AND
8900: IFFALSE 8914
// AddMedal ( med3 , 1 ) else
8902: LD_STRING med3
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 101
8912: GO 8925
// AddMedal ( med3 , - 1 ) ;
8914: LD_STRING med3
8916: PPUSH
8917: LD_INT 1
8919: NEG
8920: PPUSH
8921: CALL_OW 101
// GiveMedals ( MAIN ) ;
8925: LD_STRING MAIN
8927: PPUSH
8928: CALL_OW 102
// RewardPeople ( tmp ) ;
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
8941: LD_EXP 14
8945: PPUSH
8946: LD_STRING 01_Heike
8948: PPUSH
8949: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
8953: LD_EXP 16
8957: PPUSH
8958: CALL_OW 302
8962: PUSH
8963: LD_EXP 16
8967: PUSH
8968: LD_VAR 0 1
8972: IN
8973: AND
8974: IFFALSE 8988
// SaveCharacters ( Givi , 01_Givi ) ;
8976: LD_EXP 16
8980: PPUSH
8981: LD_STRING 01_Givi
8983: PPUSH
8984: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
8988: LD_EXP 17
8992: PPUSH
8993: CALL_OW 302
8997: PUSH
8998: LD_EXP 17
9002: PUSH
9003: LD_VAR 0 1
9007: IN
9008: AND
9009: IFFALSE 9023
// SaveCharacters ( Mike , 01_Mike ) ;
9011: LD_EXP 17
9015: PPUSH
9016: LD_STRING 01_Mike
9018: PPUSH
9019: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9023: LD_EXP 18
9027: PPUSH
9028: CALL_OW 302
9032: PUSH
9033: LD_EXP 18
9037: PUSH
9038: LD_VAR 0 1
9042: IN
9043: AND
9044: IFFALSE 9058
// SaveCharacters ( Kamil , 01_Kamil ) ;
9046: LD_EXP 18
9050: PPUSH
9051: LD_STRING 01_Kamil
9053: PPUSH
9054: CALL_OW 38
// YouWin ;
9058: CALL_OW 103
// end ; end_of_file
9062: PPOPN 1
9064: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9065: LD_VAR 0 1
9069: PUSH
9070: LD_EXP 14
9074: EQUAL
9075: IFFALSE 9084
// YouLost ( Heike ) ;
9077: LD_STRING Heike
9079: PPUSH
9080: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9084: LD_VAR 0 1
9088: PUSH
9089: LD_INT 22
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 25
9101: PUSH
9102: LD_INT 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 69
9117: IN
9118: IFFALSE 9224
// begin if un in russianPatrol then
9120: LD_VAR 0 1
9124: PUSH
9125: LD_EXP 19
9129: IN
9130: IFFALSE 9148
// russianPatrol := russianPatrol diff un ;
9132: LD_ADDR_EXP 19
9136: PUSH
9137: LD_EXP 19
9141: PUSH
9142: LD_VAR 0 1
9146: DIFF
9147: ST_TO_ADDR
// if un in russianForestPatrol then
9148: LD_VAR 0 1
9152: PUSH
9153: LD_EXP 20
9157: IN
9158: IFFALSE 9176
// russianForestPatrol := russianForestPatrol diff un ;
9160: LD_ADDR_EXP 20
9164: PUSH
9165: LD_EXP 20
9169: PUSH
9170: LD_VAR 0 1
9174: DIFF
9175: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9176: LD_ADDR_EXP 5
9180: PUSH
9181: LD_EXP 5
9185: PPUSH
9186: LD_EXP 5
9190: PUSH
9191: LD_INT 1
9193: PLUS
9194: PPUSH
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 250
9204: PUSH
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 251
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PPUSH
9219: CALL_OW 1
9223: ST_TO_ADDR
// end ; end ;
9224: PPOPN 1
9226: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9227: LD_VAR 0 1
9231: PUSH
9232: LD_EXP 14
9236: EQUAL
9237: IFFALSE 9246
// YouLost ( Heike ) ;
9239: LD_STRING Heike
9241: PPUSH
9242: CALL_OW 104
// end ;
9246: PPOPN 1
9248: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9249: LD_VAR 0 1
9253: PUSH
9254: LD_INT 2
9256: PUSH
9257: LD_INT 5
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: IN
9264: PUSH
9265: LD_VAR 0 2
9269: PUSH
9270: LD_INT 5
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: IN
9280: AND
9281: IFFALSE 9290
// YouLost ( FriendlyFire ) ;
9283: LD_STRING FriendlyFire
9285: PPUSH
9286: CALL_OW 104
// end ; end_of_file
9290: PPOPN 2
9292: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9293: GO 9295
9295: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9296: LD_STRING initStreamRollete();
9298: PPUSH
9299: CALL_OW 559
// InitStreamMode ;
9303: CALL 9312 0 0
// DefineStreamItems ( ) ;
9307: CALL 9752 0 0
// end ;
9311: END
// function InitStreamMode ; begin
9312: LD_INT 0
9314: PPUSH
// streamModeActive := false ;
9315: LD_ADDR_EXP 24
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// normalCounter := 36 ;
9323: LD_ADDR_EXP 25
9327: PUSH
9328: LD_INT 36
9330: ST_TO_ADDR
// hardcoreCounter := 16 ;
9331: LD_ADDR_EXP 26
9335: PUSH
9336: LD_INT 16
9338: ST_TO_ADDR
// sRocket := false ;
9339: LD_ADDR_EXP 29
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// sSpeed := false ;
9347: LD_ADDR_EXP 28
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// sEngine := false ;
9355: LD_ADDR_EXP 30
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// sSpec := false ;
9363: LD_ADDR_EXP 27
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// sLevel := false ;
9371: LD_ADDR_EXP 31
9375: PUSH
9376: LD_INT 0
9378: ST_TO_ADDR
// sArmoury := false ;
9379: LD_ADDR_EXP 32
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// sRadar := false ;
9387: LD_ADDR_EXP 33
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// sBunker := false ;
9395: LD_ADDR_EXP 34
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// sHack := false ;
9403: LD_ADDR_EXP 35
9407: PUSH
9408: LD_INT 0
9410: ST_TO_ADDR
// sFire := false ;
9411: LD_ADDR_EXP 36
9415: PUSH
9416: LD_INT 0
9418: ST_TO_ADDR
// sRefresh := false ;
9419: LD_ADDR_EXP 37
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// sExp := false ;
9427: LD_ADDR_EXP 38
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// sDepot := false ;
9435: LD_ADDR_EXP 39
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// sFlag := false ;
9443: LD_ADDR_EXP 40
9447: PUSH
9448: LD_INT 0
9450: ST_TO_ADDR
// sKamikadze := false ;
9451: LD_ADDR_EXP 48
9455: PUSH
9456: LD_INT 0
9458: ST_TO_ADDR
// sTroll := false ;
9459: LD_ADDR_EXP 49
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// sSlow := false ;
9467: LD_ADDR_EXP 50
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// sLack := false ;
9475: LD_ADDR_EXP 51
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// sTank := false ;
9483: LD_ADDR_EXP 53
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// sRemote := false ;
9491: LD_ADDR_EXP 54
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// sPowell := false ;
9499: LD_ADDR_EXP 55
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// sTeleport := false ;
9507: LD_ADDR_EXP 58
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// sOilTower := false ;
9515: LD_ADDR_EXP 60
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// sShovel := false ;
9523: LD_ADDR_EXP 61
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// sSheik := false ;
9531: LD_ADDR_EXP 62
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// sEarthquake := false ;
9539: LD_ADDR_EXP 64
9543: PUSH
9544: LD_INT 0
9546: ST_TO_ADDR
// sAI := false ;
9547: LD_ADDR_EXP 65
9551: PUSH
9552: LD_INT 0
9554: ST_TO_ADDR
// sCargo := false ;
9555: LD_ADDR_EXP 68
9559: PUSH
9560: LD_INT 0
9562: ST_TO_ADDR
// sDLaser := false ;
9563: LD_ADDR_EXP 69
9567: PUSH
9568: LD_INT 0
9570: ST_TO_ADDR
// sExchange := false ;
9571: LD_ADDR_EXP 70
9575: PUSH
9576: LD_INT 0
9578: ST_TO_ADDR
// sFac := false ;
9579: LD_ADDR_EXP 71
9583: PUSH
9584: LD_INT 0
9586: ST_TO_ADDR
// sPower := false ;
9587: LD_ADDR_EXP 72
9591: PUSH
9592: LD_INT 0
9594: ST_TO_ADDR
// sRandom := false ;
9595: LD_ADDR_EXP 73
9599: PUSH
9600: LD_INT 0
9602: ST_TO_ADDR
// sShield := false ;
9603: LD_ADDR_EXP 74
9607: PUSH
9608: LD_INT 0
9610: ST_TO_ADDR
// sTime := false ;
9611: LD_ADDR_EXP 75
9615: PUSH
9616: LD_INT 0
9618: ST_TO_ADDR
// sTools := false ;
9619: LD_ADDR_EXP 76
9623: PUSH
9624: LD_INT 0
9626: ST_TO_ADDR
// sSold := false ;
9627: LD_ADDR_EXP 41
9631: PUSH
9632: LD_INT 0
9634: ST_TO_ADDR
// sDiff := false ;
9635: LD_ADDR_EXP 42
9639: PUSH
9640: LD_INT 0
9642: ST_TO_ADDR
// sFog := false ;
9643: LD_ADDR_EXP 45
9647: PUSH
9648: LD_INT 0
9650: ST_TO_ADDR
// sReset := false ;
9651: LD_ADDR_EXP 46
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// sSun := false ;
9659: LD_ADDR_EXP 47
9663: PUSH
9664: LD_INT 0
9666: ST_TO_ADDR
// sTiger := false ;
9667: LD_ADDR_EXP 43
9671: PUSH
9672: LD_INT 0
9674: ST_TO_ADDR
// sBomb := false ;
9675: LD_ADDR_EXP 44
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// sWound := false ;
9683: LD_ADDR_EXP 52
9687: PUSH
9688: LD_INT 0
9690: ST_TO_ADDR
// sBetray := false ;
9691: LD_ADDR_EXP 56
9695: PUSH
9696: LD_INT 0
9698: ST_TO_ADDR
// sContamin := false ;
9699: LD_ADDR_EXP 57
9703: PUSH
9704: LD_INT 0
9706: ST_TO_ADDR
// sOil := false ;
9707: LD_ADDR_EXP 59
9711: PUSH
9712: LD_INT 0
9714: ST_TO_ADDR
// sStu := false ;
9715: LD_ADDR_EXP 63
9719: PUSH
9720: LD_INT 0
9722: ST_TO_ADDR
// sBazooka := false ;
9723: LD_ADDR_EXP 66
9727: PUSH
9728: LD_INT 0
9730: ST_TO_ADDR
// sMortar := false ;
9731: LD_ADDR_EXP 67
9735: PUSH
9736: LD_INT 0
9738: ST_TO_ADDR
// sRanger := false ;
9739: LD_ADDR_EXP 77
9743: PUSH
9744: LD_INT 0
9746: ST_TO_ADDR
// end ;
9747: LD_VAR 0 1
9751: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
// result := [ ] ;
9759: LD_ADDR_VAR 0 1
9763: PUSH
9764: EMPTY
9765: ST_TO_ADDR
// if campaign_id = 1 then
9766: LD_OWVAR 69
9770: PUSH
9771: LD_INT 1
9773: EQUAL
9774: IFFALSE 12712
// begin case mission_number of 1 :
9776: LD_OWVAR 70
9780: PUSH
9781: LD_INT 1
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9853
9789: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 11
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 15
9809: PUSH
9810: LD_INT 16
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 23
9818: PUSH
9819: LD_INT 26
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 101
9835: PUSH
9836: LD_INT 102
9838: PUSH
9839: LD_INT 106
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
9851: GO 12710
9853: LD_INT 2
9855: DOUBLE
9856: EQUAL
9857: IFTRUE 9861
9859: GO 9933
9861: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9862: LD_ADDR_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: LD_INT 11
9875: PUSH
9876: LD_INT 12
9878: PUSH
9879: LD_INT 15
9881: PUSH
9882: LD_INT 16
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 23
9890: PUSH
9891: LD_INT 26
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 101
9907: PUSH
9908: LD_INT 102
9910: PUSH
9911: LD_INT 105
9913: PUSH
9914: LD_INT 106
9916: PUSH
9917: LD_INT 108
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: ST_TO_ADDR
9931: GO 12710
9933: LD_INT 3
9935: DOUBLE
9936: EQUAL
9937: IFTRUE 9941
9939: GO 10017
9941: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9942: LD_ADDR_VAR 0 1
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 4
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 11
9958: PUSH
9959: LD_INT 12
9961: PUSH
9962: LD_INT 15
9964: PUSH
9965: LD_INT 16
9967: PUSH
9968: LD_INT 22
9970: PUSH
9971: LD_INT 26
9973: PUSH
9974: LD_INT 36
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 101
9991: PUSH
9992: LD_INT 102
9994: PUSH
9995: LD_INT 105
9997: PUSH
9998: LD_INT 106
10000: PUSH
10001: LD_INT 108
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: ST_TO_ADDR
10015: GO 12710
10017: LD_INT 4
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10109
10025: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10026: LD_ADDR_VAR 0 1
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 4
10036: PUSH
10037: LD_INT 5
10039: PUSH
10040: LD_INT 8
10042: PUSH
10043: LD_INT 11
10045: PUSH
10046: LD_INT 12
10048: PUSH
10049: LD_INT 15
10051: PUSH
10052: LD_INT 16
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_INT 23
10060: PUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 36
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 101
10083: PUSH
10084: LD_INT 102
10086: PUSH
10087: LD_INT 105
10089: PUSH
10090: LD_INT 106
10092: PUSH
10093: LD_INT 108
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: ST_TO_ADDR
10107: GO 12710
10109: LD_INT 5
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10217
10117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10118: LD_ADDR_VAR 0 1
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: LD_INT 4
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: LD_INT 6
10134: PUSH
10135: LD_INT 8
10137: PUSH
10138: LD_INT 11
10140: PUSH
10141: LD_INT 12
10143: PUSH
10144: LD_INT 15
10146: PUSH
10147: LD_INT 16
10149: PUSH
10150: LD_INT 22
10152: PUSH
10153: LD_INT 23
10155: PUSH
10156: LD_INT 25
10158: PUSH
10159: LD_INT 26
10161: PUSH
10162: LD_INT 36
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 101
10183: PUSH
10184: LD_INT 102
10186: PUSH
10187: LD_INT 105
10189: PUSH
10190: LD_INT 106
10192: PUSH
10193: LD_INT 108
10195: PUSH
10196: LD_INT 109
10198: PUSH
10199: LD_INT 112
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: ST_TO_ADDR
10215: GO 12710
10217: LD_INT 6
10219: DOUBLE
10220: EQUAL
10221: IFTRUE 10225
10223: GO 10345
10225: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10226: LD_ADDR_VAR 0 1
10230: PUSH
10231: LD_INT 2
10233: PUSH
10234: LD_INT 4
10236: PUSH
10237: LD_INT 5
10239: PUSH
10240: LD_INT 6
10242: PUSH
10243: LD_INT 8
10245: PUSH
10246: LD_INT 11
10248: PUSH
10249: LD_INT 12
10251: PUSH
10252: LD_INT 15
10254: PUSH
10255: LD_INT 16
10257: PUSH
10258: LD_INT 20
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_INT 23
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: LD_INT 32
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 101
10311: PUSH
10312: LD_INT 102
10314: PUSH
10315: LD_INT 105
10317: PUSH
10318: LD_INT 106
10320: PUSH
10321: LD_INT 108
10323: PUSH
10324: LD_INT 109
10326: PUSH
10327: LD_INT 112
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: ST_TO_ADDR
10343: GO 12710
10345: LD_INT 7
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10453
10353: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: LD_INT 4
10364: PUSH
10365: LD_INT 5
10367: PUSH
10368: LD_INT 7
10370: PUSH
10371: LD_INT 11
10373: PUSH
10374: LD_INT 12
10376: PUSH
10377: LD_INT 15
10379: PUSH
10380: LD_INT 16
10382: PUSH
10383: LD_INT 20
10385: PUSH
10386: LD_INT 21
10388: PUSH
10389: LD_INT 22
10391: PUSH
10392: LD_INT 23
10394: PUSH
10395: LD_INT 25
10397: PUSH
10398: LD_INT 26
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 101
10419: PUSH
10420: LD_INT 102
10422: PUSH
10423: LD_INT 103
10425: PUSH
10426: LD_INT 105
10428: PUSH
10429: LD_INT 106
10431: PUSH
10432: LD_INT 108
10434: PUSH
10435: LD_INT 112
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: ST_TO_ADDR
10451: GO 12710
10453: LD_INT 8
10455: DOUBLE
10456: EQUAL
10457: IFTRUE 10461
10459: GO 10589
10461: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10462: LD_ADDR_VAR 0 1
10466: PUSH
10467: LD_INT 2
10469: PUSH
10470: LD_INT 4
10472: PUSH
10473: LD_INT 5
10475: PUSH
10476: LD_INT 6
10478: PUSH
10479: LD_INT 7
10481: PUSH
10482: LD_INT 8
10484: PUSH
10485: LD_INT 11
10487: PUSH
10488: LD_INT 12
10490: PUSH
10491: LD_INT 15
10493: PUSH
10494: LD_INT 16
10496: PUSH
10497: LD_INT 20
10499: PUSH
10500: LD_INT 21
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 23
10508: PUSH
10509: LD_INT 25
10511: PUSH
10512: LD_INT 26
10514: PUSH
10515: LD_INT 30
10517: PUSH
10518: LD_INT 31
10520: PUSH
10521: LD_INT 32
10523: PUSH
10524: LD_INT 36
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 101
10551: PUSH
10552: LD_INT 102
10554: PUSH
10555: LD_INT 103
10557: PUSH
10558: LD_INT 105
10560: PUSH
10561: LD_INT 106
10563: PUSH
10564: LD_INT 108
10566: PUSH
10567: LD_INT 109
10569: PUSH
10570: LD_INT 112
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: ST_TO_ADDR
10587: GO 12710
10589: LD_INT 9
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10733
10597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10598: LD_ADDR_VAR 0 1
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 4
10608: PUSH
10609: LD_INT 5
10611: PUSH
10612: LD_INT 6
10614: PUSH
10615: LD_INT 7
10617: PUSH
10618: LD_INT 8
10620: PUSH
10621: LD_INT 11
10623: PUSH
10624: LD_INT 12
10626: PUSH
10627: LD_INT 15
10629: PUSH
10630: LD_INT 16
10632: PUSH
10633: LD_INT 20
10635: PUSH
10636: LD_INT 21
10638: PUSH
10639: LD_INT 22
10641: PUSH
10642: LD_INT 23
10644: PUSH
10645: LD_INT 25
10647: PUSH
10648: LD_INT 26
10650: PUSH
10651: LD_INT 28
10653: PUSH
10654: LD_INT 30
10656: PUSH
10657: LD_INT 31
10659: PUSH
10660: LD_INT 32
10662: PUSH
10663: LD_INT 36
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 101
10691: PUSH
10692: LD_INT 102
10694: PUSH
10695: LD_INT 103
10697: PUSH
10698: LD_INT 105
10700: PUSH
10701: LD_INT 106
10703: PUSH
10704: LD_INT 108
10706: PUSH
10707: LD_INT 109
10709: PUSH
10710: LD_INT 112
10712: PUSH
10713: LD_INT 114
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: ST_TO_ADDR
10731: GO 12710
10733: LD_INT 10
10735: DOUBLE
10736: EQUAL
10737: IFTRUE 10741
10739: GO 10925
10741: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10742: LD_ADDR_VAR 0 1
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 4
10752: PUSH
10753: LD_INT 5
10755: PUSH
10756: LD_INT 6
10758: PUSH
10759: LD_INT 7
10761: PUSH
10762: LD_INT 8
10764: PUSH
10765: LD_INT 9
10767: PUSH
10768: LD_INT 10
10770: PUSH
10771: LD_INT 11
10773: PUSH
10774: LD_INT 12
10776: PUSH
10777: LD_INT 13
10779: PUSH
10780: LD_INT 14
10782: PUSH
10783: LD_INT 15
10785: PUSH
10786: LD_INT 16
10788: PUSH
10789: LD_INT 17
10791: PUSH
10792: LD_INT 18
10794: PUSH
10795: LD_INT 19
10797: PUSH
10798: LD_INT 20
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 26
10818: PUSH
10819: LD_INT 28
10821: PUSH
10822: LD_INT 30
10824: PUSH
10825: LD_INT 31
10827: PUSH
10828: LD_INT 32
10830: PUSH
10831: LD_INT 36
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 101
10867: PUSH
10868: LD_INT 102
10870: PUSH
10871: LD_INT 103
10873: PUSH
10874: LD_INT 104
10876: PUSH
10877: LD_INT 105
10879: PUSH
10880: LD_INT 106
10882: PUSH
10883: LD_INT 107
10885: PUSH
10886: LD_INT 108
10888: PUSH
10889: LD_INT 109
10891: PUSH
10892: LD_INT 110
10894: PUSH
10895: LD_INT 111
10897: PUSH
10898: LD_INT 112
10900: PUSH
10901: LD_INT 114
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: ST_TO_ADDR
10923: GO 12710
10925: LD_INT 11
10927: DOUBLE
10928: EQUAL
10929: IFTRUE 10933
10931: GO 11125
10933: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10934: LD_ADDR_VAR 0 1
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: LD_INT 5
10950: PUSH
10951: LD_INT 6
10953: PUSH
10954: LD_INT 7
10956: PUSH
10957: LD_INT 8
10959: PUSH
10960: LD_INT 9
10962: PUSH
10963: LD_INT 10
10965: PUSH
10966: LD_INT 11
10968: PUSH
10969: LD_INT 12
10971: PUSH
10972: LD_INT 13
10974: PUSH
10975: LD_INT 14
10977: PUSH
10978: LD_INT 15
10980: PUSH
10981: LD_INT 16
10983: PUSH
10984: LD_INT 17
10986: PUSH
10987: LD_INT 18
10989: PUSH
10990: LD_INT 19
10992: PUSH
10993: LD_INT 20
10995: PUSH
10996: LD_INT 21
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 23
11004: PUSH
11005: LD_INT 24
11007: PUSH
11008: LD_INT 25
11010: PUSH
11011: LD_INT 26
11013: PUSH
11014: LD_INT 28
11016: PUSH
11017: LD_INT 30
11019: PUSH
11020: LD_INT 31
11022: PUSH
11023: LD_INT 32
11025: PUSH
11026: LD_INT 34
11028: PUSH
11029: LD_INT 36
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 101
11067: PUSH
11068: LD_INT 102
11070: PUSH
11071: LD_INT 103
11073: PUSH
11074: LD_INT 104
11076: PUSH
11077: LD_INT 105
11079: PUSH
11080: LD_INT 106
11082: PUSH
11083: LD_INT 107
11085: PUSH
11086: LD_INT 108
11088: PUSH
11089: LD_INT 109
11091: PUSH
11092: LD_INT 110
11094: PUSH
11095: LD_INT 111
11097: PUSH
11098: LD_INT 112
11100: PUSH
11101: LD_INT 114
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: ST_TO_ADDR
11123: GO 12710
11125: LD_INT 12
11127: DOUBLE
11128: EQUAL
11129: IFTRUE 11133
11131: GO 11341
11133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11134: LD_ADDR_VAR 0 1
11138: PUSH
11139: LD_INT 1
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: LD_INT 3
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: LD_INT 6
11156: PUSH
11157: LD_INT 7
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: LD_INT 9
11165: PUSH
11166: LD_INT 10
11168: PUSH
11169: LD_INT 11
11171: PUSH
11172: LD_INT 12
11174: PUSH
11175: LD_INT 13
11177: PUSH
11178: LD_INT 14
11180: PUSH
11181: LD_INT 15
11183: PUSH
11184: LD_INT 16
11186: PUSH
11187: LD_INT 17
11189: PUSH
11190: LD_INT 18
11192: PUSH
11193: LD_INT 19
11195: PUSH
11196: LD_INT 20
11198: PUSH
11199: LD_INT 21
11201: PUSH
11202: LD_INT 22
11204: PUSH
11205: LD_INT 23
11207: PUSH
11208: LD_INT 24
11210: PUSH
11211: LD_INT 25
11213: PUSH
11214: LD_INT 26
11216: PUSH
11217: LD_INT 27
11219: PUSH
11220: LD_INT 28
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 33
11234: PUSH
11235: LD_INT 34
11237: PUSH
11238: LD_INT 36
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 101
11279: PUSH
11280: LD_INT 102
11282: PUSH
11283: LD_INT 103
11285: PUSH
11286: LD_INT 104
11288: PUSH
11289: LD_INT 105
11291: PUSH
11292: LD_INT 106
11294: PUSH
11295: LD_INT 107
11297: PUSH
11298: LD_INT 108
11300: PUSH
11301: LD_INT 109
11303: PUSH
11304: LD_INT 110
11306: PUSH
11307: LD_INT 111
11309: PUSH
11310: LD_INT 112
11312: PUSH
11313: LD_INT 113
11315: PUSH
11316: LD_INT 114
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: ST_TO_ADDR
11339: GO 12710
11341: LD_INT 13
11343: DOUBLE
11344: EQUAL
11345: IFTRUE 11349
11347: GO 11545
11349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11350: LD_ADDR_VAR 0 1
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: LD_INT 5
11369: PUSH
11370: LD_INT 8
11372: PUSH
11373: LD_INT 9
11375: PUSH
11376: LD_INT 10
11378: PUSH
11379: LD_INT 11
11381: PUSH
11382: LD_INT 12
11384: PUSH
11385: LD_INT 14
11387: PUSH
11388: LD_INT 15
11390: PUSH
11391: LD_INT 16
11393: PUSH
11394: LD_INT 17
11396: PUSH
11397: LD_INT 18
11399: PUSH
11400: LD_INT 19
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 21
11408: PUSH
11409: LD_INT 22
11411: PUSH
11412: LD_INT 23
11414: PUSH
11415: LD_INT 24
11417: PUSH
11418: LD_INT 25
11420: PUSH
11421: LD_INT 26
11423: PUSH
11424: LD_INT 27
11426: PUSH
11427: LD_INT 28
11429: PUSH
11430: LD_INT 30
11432: PUSH
11433: LD_INT 31
11435: PUSH
11436: LD_INT 32
11438: PUSH
11439: LD_INT 33
11441: PUSH
11442: LD_INT 34
11444: PUSH
11445: LD_INT 36
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 101
11483: PUSH
11484: LD_INT 102
11486: PUSH
11487: LD_INT 103
11489: PUSH
11490: LD_INT 104
11492: PUSH
11493: LD_INT 105
11495: PUSH
11496: LD_INT 106
11498: PUSH
11499: LD_INT 107
11501: PUSH
11502: LD_INT 108
11504: PUSH
11505: LD_INT 109
11507: PUSH
11508: LD_INT 110
11510: PUSH
11511: LD_INT 111
11513: PUSH
11514: LD_INT 112
11516: PUSH
11517: LD_INT 113
11519: PUSH
11520: LD_INT 114
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 12710
11545: LD_INT 14
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11765
11553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11554: LD_ADDR_VAR 0 1
11558: PUSH
11559: LD_INT 1
11561: PUSH
11562: LD_INT 2
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: LD_INT 5
11573: PUSH
11574: LD_INT 6
11576: PUSH
11577: LD_INT 7
11579: PUSH
11580: LD_INT 8
11582: PUSH
11583: LD_INT 9
11585: PUSH
11586: LD_INT 10
11588: PUSH
11589: LD_INT 11
11591: PUSH
11592: LD_INT 12
11594: PUSH
11595: LD_INT 13
11597: PUSH
11598: LD_INT 14
11600: PUSH
11601: LD_INT 15
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 17
11609: PUSH
11610: LD_INT 18
11612: PUSH
11613: LD_INT 19
11615: PUSH
11616: LD_INT 20
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 23
11627: PUSH
11628: LD_INT 24
11630: PUSH
11631: LD_INT 25
11633: PUSH
11634: LD_INT 26
11636: PUSH
11637: LD_INT 27
11639: PUSH
11640: LD_INT 28
11642: PUSH
11643: LD_INT 29
11645: PUSH
11646: LD_INT 30
11648: PUSH
11649: LD_INT 31
11651: PUSH
11652: LD_INT 32
11654: PUSH
11655: LD_INT 33
11657: PUSH
11658: LD_INT 34
11660: PUSH
11661: LD_INT 36
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 101
11703: PUSH
11704: LD_INT 102
11706: PUSH
11707: LD_INT 103
11709: PUSH
11710: LD_INT 104
11712: PUSH
11713: LD_INT 105
11715: PUSH
11716: LD_INT 106
11718: PUSH
11719: LD_INT 107
11721: PUSH
11722: LD_INT 108
11724: PUSH
11725: LD_INT 109
11727: PUSH
11728: LD_INT 110
11730: PUSH
11731: LD_INT 111
11733: PUSH
11734: LD_INT 112
11736: PUSH
11737: LD_INT 113
11739: PUSH
11740: LD_INT 114
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: ST_TO_ADDR
11763: GO 12710
11765: LD_INT 15
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11985
11773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_INT 1
11781: PUSH
11782: LD_INT 2
11784: PUSH
11785: LD_INT 3
11787: PUSH
11788: LD_INT 4
11790: PUSH
11791: LD_INT 5
11793: PUSH
11794: LD_INT 6
11796: PUSH
11797: LD_INT 7
11799: PUSH
11800: LD_INT 8
11802: PUSH
11803: LD_INT 9
11805: PUSH
11806: LD_INT 10
11808: PUSH
11809: LD_INT 11
11811: PUSH
11812: LD_INT 12
11814: PUSH
11815: LD_INT 13
11817: PUSH
11818: LD_INT 14
11820: PUSH
11821: LD_INT 15
11823: PUSH
11824: LD_INT 16
11826: PUSH
11827: LD_INT 17
11829: PUSH
11830: LD_INT 18
11832: PUSH
11833: LD_INT 19
11835: PUSH
11836: LD_INT 20
11838: PUSH
11839: LD_INT 21
11841: PUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 23
11847: PUSH
11848: LD_INT 24
11850: PUSH
11851: LD_INT 25
11853: PUSH
11854: LD_INT 26
11856: PUSH
11857: LD_INT 27
11859: PUSH
11860: LD_INT 28
11862: PUSH
11863: LD_INT 29
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 31
11871: PUSH
11872: LD_INT 32
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 36
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 101
11923: PUSH
11924: LD_INT 102
11926: PUSH
11927: LD_INT 103
11929: PUSH
11930: LD_INT 104
11932: PUSH
11933: LD_INT 105
11935: PUSH
11936: LD_INT 106
11938: PUSH
11939: LD_INT 107
11941: PUSH
11942: LD_INT 108
11944: PUSH
11945: LD_INT 109
11947: PUSH
11948: LD_INT 110
11950: PUSH
11951: LD_INT 111
11953: PUSH
11954: LD_INT 112
11956: PUSH
11957: LD_INT 113
11959: PUSH
11960: LD_INT 114
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: ST_TO_ADDR
11983: GO 12710
11985: LD_INT 16
11987: DOUBLE
11988: EQUAL
11989: IFTRUE 11993
11991: GO 12117
11993: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11994: LD_ADDR_VAR 0 1
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 4
12004: PUSH
12005: LD_INT 5
12007: PUSH
12008: LD_INT 7
12010: PUSH
12011: LD_INT 11
12013: PUSH
12014: LD_INT 12
12016: PUSH
12017: LD_INT 15
12019: PUSH
12020: LD_INT 16
12022: PUSH
12023: LD_INT 20
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 22
12031: PUSH
12032: LD_INT 23
12034: PUSH
12035: LD_INT 25
12037: PUSH
12038: LD_INT 26
12040: PUSH
12041: LD_INT 30
12043: PUSH
12044: LD_INT 31
12046: PUSH
12047: LD_INT 32
12049: PUSH
12050: LD_INT 33
12052: PUSH
12053: LD_INT 34
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 101
12079: PUSH
12080: LD_INT 102
12082: PUSH
12083: LD_INT 103
12085: PUSH
12086: LD_INT 106
12088: PUSH
12089: LD_INT 108
12091: PUSH
12092: LD_INT 112
12094: PUSH
12095: LD_INT 113
12097: PUSH
12098: LD_INT 114
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: ST_TO_ADDR
12115: GO 12710
12117: LD_INT 17
12119: DOUBLE
12120: EQUAL
12121: IFTRUE 12125
12123: GO 12337
12125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12126: LD_ADDR_VAR 0 1
12130: PUSH
12131: LD_INT 1
12133: PUSH
12134: LD_INT 2
12136: PUSH
12137: LD_INT 3
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: LD_INT 5
12145: PUSH
12146: LD_INT 6
12148: PUSH
12149: LD_INT 7
12151: PUSH
12152: LD_INT 8
12154: PUSH
12155: LD_INT 9
12157: PUSH
12158: LD_INT 10
12160: PUSH
12161: LD_INT 11
12163: PUSH
12164: LD_INT 12
12166: PUSH
12167: LD_INT 13
12169: PUSH
12170: LD_INT 14
12172: PUSH
12173: LD_INT 15
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: LD_INT 17
12181: PUSH
12182: LD_INT 18
12184: PUSH
12185: LD_INT 19
12187: PUSH
12188: LD_INT 20
12190: PUSH
12191: LD_INT 21
12193: PUSH
12194: LD_INT 22
12196: PUSH
12197: LD_INT 23
12199: PUSH
12200: LD_INT 24
12202: PUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 26
12208: PUSH
12209: LD_INT 27
12211: PUSH
12212: LD_INT 28
12214: PUSH
12215: LD_INT 29
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 31
12223: PUSH
12224: LD_INT 32
12226: PUSH
12227: LD_INT 33
12229: PUSH
12230: LD_INT 34
12232: PUSH
12233: LD_INT 36
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 101
12275: PUSH
12276: LD_INT 102
12278: PUSH
12279: LD_INT 103
12281: PUSH
12282: LD_INT 104
12284: PUSH
12285: LD_INT 105
12287: PUSH
12288: LD_INT 106
12290: PUSH
12291: LD_INT 107
12293: PUSH
12294: LD_INT 108
12296: PUSH
12297: LD_INT 109
12299: PUSH
12300: LD_INT 110
12302: PUSH
12303: LD_INT 111
12305: PUSH
12306: LD_INT 112
12308: PUSH
12309: LD_INT 113
12311: PUSH
12312: LD_INT 114
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: ST_TO_ADDR
12335: GO 12710
12337: LD_INT 18
12339: DOUBLE
12340: EQUAL
12341: IFTRUE 12345
12343: GO 12481
12345: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: LD_INT 5
12359: PUSH
12360: LD_INT 7
12362: PUSH
12363: LD_INT 11
12365: PUSH
12366: LD_INT 12
12368: PUSH
12369: LD_INT 15
12371: PUSH
12372: LD_INT 16
12374: PUSH
12375: LD_INT 20
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_INT 23
12386: PUSH
12387: LD_INT 25
12389: PUSH
12390: LD_INT 26
12392: PUSH
12393: LD_INT 30
12395: PUSH
12396: LD_INT 31
12398: PUSH
12399: LD_INT 32
12401: PUSH
12402: LD_INT 33
12404: PUSH
12405: LD_INT 34
12407: PUSH
12408: LD_INT 35
12410: PUSH
12411: LD_INT 36
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 101
12439: PUSH
12440: LD_INT 102
12442: PUSH
12443: LD_INT 103
12445: PUSH
12446: LD_INT 106
12448: PUSH
12449: LD_INT 108
12451: PUSH
12452: LD_INT 112
12454: PUSH
12455: LD_INT 113
12457: PUSH
12458: LD_INT 114
12460: PUSH
12461: LD_INT 115
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 12710
12481: LD_INT 19
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12709
12489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: LD_INT 4
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 7
12515: PUSH
12516: LD_INT 8
12518: PUSH
12519: LD_INT 9
12521: PUSH
12522: LD_INT 10
12524: PUSH
12525: LD_INT 11
12527: PUSH
12528: LD_INT 12
12530: PUSH
12531: LD_INT 13
12533: PUSH
12534: LD_INT 14
12536: PUSH
12537: LD_INT 15
12539: PUSH
12540: LD_INT 16
12542: PUSH
12543: LD_INT 17
12545: PUSH
12546: LD_INT 18
12548: PUSH
12549: LD_INT 19
12551: PUSH
12552: LD_INT 20
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_INT 23
12563: PUSH
12564: LD_INT 24
12566: PUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 27
12575: PUSH
12576: LD_INT 28
12578: PUSH
12579: LD_INT 29
12581: PUSH
12582: LD_INT 30
12584: PUSH
12585: LD_INT 31
12587: PUSH
12588: LD_INT 32
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 34
12596: PUSH
12597: LD_INT 35
12599: PUSH
12600: LD_INT 36
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 101
12643: PUSH
12644: LD_INT 102
12646: PUSH
12647: LD_INT 103
12649: PUSH
12650: LD_INT 104
12652: PUSH
12653: LD_INT 105
12655: PUSH
12656: LD_INT 106
12658: PUSH
12659: LD_INT 107
12661: PUSH
12662: LD_INT 108
12664: PUSH
12665: LD_INT 109
12667: PUSH
12668: LD_INT 110
12670: PUSH
12671: LD_INT 111
12673: PUSH
12674: LD_INT 112
12676: PUSH
12677: LD_INT 113
12679: PUSH
12680: LD_INT 114
12682: PUSH
12683: LD_INT 115
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: ST_TO_ADDR
12707: GO 12710
12709: POP
// end else
12710: GO 12929
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12712: LD_ADDR_VAR 0 1
12716: PUSH
12717: LD_INT 1
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: LD_INT 4
12728: PUSH
12729: LD_INT 5
12731: PUSH
12732: LD_INT 6
12734: PUSH
12735: LD_INT 7
12737: PUSH
12738: LD_INT 8
12740: PUSH
12741: LD_INT 9
12743: PUSH
12744: LD_INT 10
12746: PUSH
12747: LD_INT 11
12749: PUSH
12750: LD_INT 12
12752: PUSH
12753: LD_INT 13
12755: PUSH
12756: LD_INT 14
12758: PUSH
12759: LD_INT 15
12761: PUSH
12762: LD_INT 16
12764: PUSH
12765: LD_INT 17
12767: PUSH
12768: LD_INT 18
12770: PUSH
12771: LD_INT 19
12773: PUSH
12774: LD_INT 20
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 22
12782: PUSH
12783: LD_INT 23
12785: PUSH
12786: LD_INT 24
12788: PUSH
12789: LD_INT 25
12791: PUSH
12792: LD_INT 26
12794: PUSH
12795: LD_INT 27
12797: PUSH
12798: LD_INT 28
12800: PUSH
12801: LD_INT 29
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 31
12809: PUSH
12810: LD_INT 32
12812: PUSH
12813: LD_INT 33
12815: PUSH
12816: LD_INT 34
12818: PUSH
12819: LD_INT 35
12821: PUSH
12822: LD_INT 36
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 101
12865: PUSH
12866: LD_INT 102
12868: PUSH
12869: LD_INT 103
12871: PUSH
12872: LD_INT 104
12874: PUSH
12875: LD_INT 105
12877: PUSH
12878: LD_INT 106
12880: PUSH
12881: LD_INT 107
12883: PUSH
12884: LD_INT 108
12886: PUSH
12887: LD_INT 109
12889: PUSH
12890: LD_INT 110
12892: PUSH
12893: LD_INT 111
12895: PUSH
12896: LD_INT 112
12898: PUSH
12899: LD_INT 113
12901: PUSH
12902: LD_INT 114
12904: PUSH
12905: LD_INT 115
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: ST_TO_ADDR
// if result then
12929: LD_VAR 0 1
12933: IFFALSE 13222
// begin normal :=  ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_STRING 
12942: ST_TO_ADDR
// hardcore :=  ;
12943: LD_ADDR_VAR 0 4
12947: PUSH
12948: LD_STRING 
12950: ST_TO_ADDR
// for i = 1 to normalCounter do
12951: LD_ADDR_VAR 0 5
12955: PUSH
12956: DOUBLE
12957: LD_INT 1
12959: DEC
12960: ST_TO_ADDR
12961: LD_EXP 25
12965: PUSH
12966: FOR_TO
12967: IFFALSE 13068
// begin tmp := 0 ;
12969: LD_ADDR_VAR 0 2
12973: PUSH
12974: LD_STRING 0
12976: ST_TO_ADDR
// if result [ 1 ] then
12977: LD_VAR 0 1
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: IFFALSE 13050
// if result [ 1 ] [ 1 ] = i then
12987: LD_VAR 0 1
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PUSH
13000: LD_VAR 0 5
13004: EQUAL
13005: IFFALSE 13050
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: LD_VAR 0 1
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL_OW 3
13036: PPUSH
13037: CALL_OW 1
13041: ST_TO_ADDR
// tmp := 1 ;
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_STRING 1
13049: ST_TO_ADDR
// end ; normal := normal & tmp ;
13050: LD_ADDR_VAR 0 3
13054: PUSH
13055: LD_VAR 0 3
13059: PUSH
13060: LD_VAR 0 2
13064: STR
13065: ST_TO_ADDR
// end ;
13066: GO 12966
13068: POP
13069: POP
// for i = 1 to hardcoreCounter do
13070: LD_ADDR_VAR 0 5
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 26
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13191
// begin tmp := 0 ;
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: LD_STRING 0
13095: ST_TO_ADDR
// if result [ 2 ] then
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: IFFALSE 13173
// if result [ 2 ] [ 1 ] = 100 + i then
13106: LD_VAR 0 1
13110: PUSH
13111: LD_INT 2
13113: ARRAY
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PUSH
13119: LD_INT 100
13121: PUSH
13122: LD_VAR 0 5
13126: PLUS
13127: EQUAL
13128: IFFALSE 13173
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_VAR 0 1
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: LD_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: ARRAY
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 3
13159: PPUSH
13160: CALL_OW 1
13164: ST_TO_ADDR
// tmp := 1 ;
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_STRING 1
13172: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13173: LD_ADDR_VAR 0 4
13177: PUSH
13178: LD_VAR 0 4
13182: PUSH
13183: LD_VAR 0 2
13187: STR
13188: ST_TO_ADDR
// end ;
13189: GO 13085
13191: POP
13192: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13193: LD_STRING getStreamItemsFromMission("
13195: PUSH
13196: LD_VAR 0 3
13200: STR
13201: PUSH
13202: LD_STRING ","
13204: STR
13205: PUSH
13206: LD_VAR 0 4
13210: STR
13211: PUSH
13212: LD_STRING ")
13214: STR
13215: PPUSH
13216: CALL_OW 559
// end else
13220: GO 13229
// ToLua ( getStreamItemsFromMission("","") ) ;
13222: LD_STRING getStreamItemsFromMission("","")
13224: PPUSH
13225: CALL_OW 559
// end ;
13229: LD_VAR 0 1
13233: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13234: LD_VAR 0 2
13238: PUSH
13239: LD_INT 100
13241: EQUAL
13242: IFFALSE 14191
// begin if not StreamModeActive then
13244: LD_EXP 24
13248: NOT
13249: IFFALSE 13259
// StreamModeActive := true ;
13251: LD_ADDR_EXP 24
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
// if p3 = 0 then
13259: LD_VAR 0 3
13263: PUSH
13264: LD_INT 0
13266: EQUAL
13267: IFFALSE 13273
// InitStreamMode ;
13269: CALL 9312 0 0
// if p3 = 1 then
13273: LD_VAR 0 3
13277: PUSH
13278: LD_INT 1
13280: EQUAL
13281: IFFALSE 13291
// sRocket := true ;
13283: LD_ADDR_EXP 29
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if p3 = 2 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 2
13298: EQUAL
13299: IFFALSE 13309
// sSpeed := true ;
13301: LD_ADDR_EXP 28
13305: PUSH
13306: LD_INT 1
13308: ST_TO_ADDR
// if p3 = 3 then
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 3
13316: EQUAL
13317: IFFALSE 13327
// sEngine := true ;
13319: LD_ADDR_EXP 30
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// if p3 = 4 then
13327: LD_VAR 0 3
13331: PUSH
13332: LD_INT 4
13334: EQUAL
13335: IFFALSE 13345
// sSpec := true ;
13337: LD_ADDR_EXP 27
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// if p3 = 5 then
13345: LD_VAR 0 3
13349: PUSH
13350: LD_INT 5
13352: EQUAL
13353: IFFALSE 13363
// sLevel := true ;
13355: LD_ADDR_EXP 31
13359: PUSH
13360: LD_INT 1
13362: ST_TO_ADDR
// if p3 = 6 then
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 6
13370: EQUAL
13371: IFFALSE 13381
// sArmoury := true ;
13373: LD_ADDR_EXP 32
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// if p3 = 7 then
13381: LD_VAR 0 3
13385: PUSH
13386: LD_INT 7
13388: EQUAL
13389: IFFALSE 13399
// sRadar := true ;
13391: LD_ADDR_EXP 33
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// if p3 = 8 then
13399: LD_VAR 0 3
13403: PUSH
13404: LD_INT 8
13406: EQUAL
13407: IFFALSE 13417
// sBunker := true ;
13409: LD_ADDR_EXP 34
13413: PUSH
13414: LD_INT 1
13416: ST_TO_ADDR
// if p3 = 9 then
13417: LD_VAR 0 3
13421: PUSH
13422: LD_INT 9
13424: EQUAL
13425: IFFALSE 13435
// sHack := true ;
13427: LD_ADDR_EXP 35
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// if p3 = 10 then
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 10
13442: EQUAL
13443: IFFALSE 13453
// sFire := true ;
13445: LD_ADDR_EXP 36
13449: PUSH
13450: LD_INT 1
13452: ST_TO_ADDR
// if p3 = 11 then
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 11
13460: EQUAL
13461: IFFALSE 13471
// sRefresh := true ;
13463: LD_ADDR_EXP 37
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// if p3 = 12 then
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 12
13478: EQUAL
13479: IFFALSE 13489
// sExp := true ;
13481: LD_ADDR_EXP 38
13485: PUSH
13486: LD_INT 1
13488: ST_TO_ADDR
// if p3 = 13 then
13489: LD_VAR 0 3
13493: PUSH
13494: LD_INT 13
13496: EQUAL
13497: IFFALSE 13507
// sDepot := true ;
13499: LD_ADDR_EXP 39
13503: PUSH
13504: LD_INT 1
13506: ST_TO_ADDR
// if p3 = 14 then
13507: LD_VAR 0 3
13511: PUSH
13512: LD_INT 14
13514: EQUAL
13515: IFFALSE 13525
// sFlag := true ;
13517: LD_ADDR_EXP 40
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// if p3 = 15 then
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 15
13532: EQUAL
13533: IFFALSE 13543
// sKamikadze := true ;
13535: LD_ADDR_EXP 48
13539: PUSH
13540: LD_INT 1
13542: ST_TO_ADDR
// if p3 = 16 then
13543: LD_VAR 0 3
13547: PUSH
13548: LD_INT 16
13550: EQUAL
13551: IFFALSE 13561
// sTroll := true ;
13553: LD_ADDR_EXP 49
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// if p3 = 17 then
13561: LD_VAR 0 3
13565: PUSH
13566: LD_INT 17
13568: EQUAL
13569: IFFALSE 13579
// sSlow := true ;
13571: LD_ADDR_EXP 50
13575: PUSH
13576: LD_INT 1
13578: ST_TO_ADDR
// if p3 = 18 then
13579: LD_VAR 0 3
13583: PUSH
13584: LD_INT 18
13586: EQUAL
13587: IFFALSE 13597
// sLack := true ;
13589: LD_ADDR_EXP 51
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// if p3 = 19 then
13597: LD_VAR 0 3
13601: PUSH
13602: LD_INT 19
13604: EQUAL
13605: IFFALSE 13615
// sTank := true ;
13607: LD_ADDR_EXP 53
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// if p3 = 20 then
13615: LD_VAR 0 3
13619: PUSH
13620: LD_INT 20
13622: EQUAL
13623: IFFALSE 13633
// sRemote := true ;
13625: LD_ADDR_EXP 54
13629: PUSH
13630: LD_INT 1
13632: ST_TO_ADDR
// if p3 = 21 then
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 21
13640: EQUAL
13641: IFFALSE 13651
// sPowell := true ;
13643: LD_ADDR_EXP 55
13647: PUSH
13648: LD_INT 1
13650: ST_TO_ADDR
// if p3 = 22 then
13651: LD_VAR 0 3
13655: PUSH
13656: LD_INT 22
13658: EQUAL
13659: IFFALSE 13669
// sTeleport := true ;
13661: LD_ADDR_EXP 58
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// if p3 = 23 then
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 23
13676: EQUAL
13677: IFFALSE 13687
// sOilTower := true ;
13679: LD_ADDR_EXP 60
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// if p3 = 24 then
13687: LD_VAR 0 3
13691: PUSH
13692: LD_INT 24
13694: EQUAL
13695: IFFALSE 13705
// sShovel := true ;
13697: LD_ADDR_EXP 61
13701: PUSH
13702: LD_INT 1
13704: ST_TO_ADDR
// if p3 = 25 then
13705: LD_VAR 0 3
13709: PUSH
13710: LD_INT 25
13712: EQUAL
13713: IFFALSE 13723
// sSheik := true ;
13715: LD_ADDR_EXP 62
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// if p3 = 26 then
13723: LD_VAR 0 3
13727: PUSH
13728: LD_INT 26
13730: EQUAL
13731: IFFALSE 13741
// sEarthquake := true ;
13733: LD_ADDR_EXP 64
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// if p3 = 27 then
13741: LD_VAR 0 3
13745: PUSH
13746: LD_INT 27
13748: EQUAL
13749: IFFALSE 13759
// sAI := true ;
13751: LD_ADDR_EXP 65
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// if p3 = 28 then
13759: LD_VAR 0 3
13763: PUSH
13764: LD_INT 28
13766: EQUAL
13767: IFFALSE 13777
// sCargo := true ;
13769: LD_ADDR_EXP 68
13773: PUSH
13774: LD_INT 1
13776: ST_TO_ADDR
// if p3 = 29 then
13777: LD_VAR 0 3
13781: PUSH
13782: LD_INT 29
13784: EQUAL
13785: IFFALSE 13795
// sDLaser := true ;
13787: LD_ADDR_EXP 69
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// if p3 = 30 then
13795: LD_VAR 0 3
13799: PUSH
13800: LD_INT 30
13802: EQUAL
13803: IFFALSE 13813
// sExchange := true ;
13805: LD_ADDR_EXP 70
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// if p3 = 31 then
13813: LD_VAR 0 3
13817: PUSH
13818: LD_INT 31
13820: EQUAL
13821: IFFALSE 13831
// sFac := true ;
13823: LD_ADDR_EXP 71
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// if p3 = 32 then
13831: LD_VAR 0 3
13835: PUSH
13836: LD_INT 32
13838: EQUAL
13839: IFFALSE 13849
// sPower := true ;
13841: LD_ADDR_EXP 72
13845: PUSH
13846: LD_INT 1
13848: ST_TO_ADDR
// if p3 = 33 then
13849: LD_VAR 0 3
13853: PUSH
13854: LD_INT 33
13856: EQUAL
13857: IFFALSE 13867
// sRandom := true ;
13859: LD_ADDR_EXP 73
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
// if p3 = 34 then
13867: LD_VAR 0 3
13871: PUSH
13872: LD_INT 34
13874: EQUAL
13875: IFFALSE 13885
// sShield := true ;
13877: LD_ADDR_EXP 74
13881: PUSH
13882: LD_INT 1
13884: ST_TO_ADDR
// if p3 = 35 then
13885: LD_VAR 0 3
13889: PUSH
13890: LD_INT 35
13892: EQUAL
13893: IFFALSE 13903
// sTime := true ;
13895: LD_ADDR_EXP 75
13899: PUSH
13900: LD_INT 1
13902: ST_TO_ADDR
// if p3 = 36 then
13903: LD_VAR 0 3
13907: PUSH
13908: LD_INT 36
13910: EQUAL
13911: IFFALSE 13921
// sTools := true ;
13913: LD_ADDR_EXP 76
13917: PUSH
13918: LD_INT 1
13920: ST_TO_ADDR
// if p3 = 101 then
13921: LD_VAR 0 3
13925: PUSH
13926: LD_INT 101
13928: EQUAL
13929: IFFALSE 13939
// sSold := true ;
13931: LD_ADDR_EXP 41
13935: PUSH
13936: LD_INT 1
13938: ST_TO_ADDR
// if p3 = 102 then
13939: LD_VAR 0 3
13943: PUSH
13944: LD_INT 102
13946: EQUAL
13947: IFFALSE 13957
// sDiff := true ;
13949: LD_ADDR_EXP 42
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// if p3 = 103 then
13957: LD_VAR 0 3
13961: PUSH
13962: LD_INT 103
13964: EQUAL
13965: IFFALSE 13975
// sFog := true ;
13967: LD_ADDR_EXP 45
13971: PUSH
13972: LD_INT 1
13974: ST_TO_ADDR
// if p3 = 104 then
13975: LD_VAR 0 3
13979: PUSH
13980: LD_INT 104
13982: EQUAL
13983: IFFALSE 13993
// sReset := true ;
13985: LD_ADDR_EXP 46
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// if p3 = 105 then
13993: LD_VAR 0 3
13997: PUSH
13998: LD_INT 105
14000: EQUAL
14001: IFFALSE 14011
// sSun := true ;
14003: LD_ADDR_EXP 47
14007: PUSH
14008: LD_INT 1
14010: ST_TO_ADDR
// if p3 = 106 then
14011: LD_VAR 0 3
14015: PUSH
14016: LD_INT 106
14018: EQUAL
14019: IFFALSE 14029
// sTiger := true ;
14021: LD_ADDR_EXP 43
14025: PUSH
14026: LD_INT 1
14028: ST_TO_ADDR
// if p3 = 107 then
14029: LD_VAR 0 3
14033: PUSH
14034: LD_INT 107
14036: EQUAL
14037: IFFALSE 14047
// sBomb := true ;
14039: LD_ADDR_EXP 44
14043: PUSH
14044: LD_INT 1
14046: ST_TO_ADDR
// if p3 = 108 then
14047: LD_VAR 0 3
14051: PUSH
14052: LD_INT 108
14054: EQUAL
14055: IFFALSE 14065
// sWound := true ;
14057: LD_ADDR_EXP 52
14061: PUSH
14062: LD_INT 1
14064: ST_TO_ADDR
// if p3 = 109 then
14065: LD_VAR 0 3
14069: PUSH
14070: LD_INT 109
14072: EQUAL
14073: IFFALSE 14083
// sBetray := true ;
14075: LD_ADDR_EXP 56
14079: PUSH
14080: LD_INT 1
14082: ST_TO_ADDR
// if p3 = 110 then
14083: LD_VAR 0 3
14087: PUSH
14088: LD_INT 110
14090: EQUAL
14091: IFFALSE 14101
// sContamin := true ;
14093: LD_ADDR_EXP 57
14097: PUSH
14098: LD_INT 1
14100: ST_TO_ADDR
// if p3 = 111 then
14101: LD_VAR 0 3
14105: PUSH
14106: LD_INT 111
14108: EQUAL
14109: IFFALSE 14119
// sOil := true ;
14111: LD_ADDR_EXP 59
14115: PUSH
14116: LD_INT 1
14118: ST_TO_ADDR
// if p3 = 112 then
14119: LD_VAR 0 3
14123: PUSH
14124: LD_INT 112
14126: EQUAL
14127: IFFALSE 14137
// sStu := true ;
14129: LD_ADDR_EXP 63
14133: PUSH
14134: LD_INT 1
14136: ST_TO_ADDR
// if p3 = 113 then
14137: LD_VAR 0 3
14141: PUSH
14142: LD_INT 113
14144: EQUAL
14145: IFFALSE 14155
// sBazooka := true ;
14147: LD_ADDR_EXP 66
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
// if p3 = 114 then
14155: LD_VAR 0 3
14159: PUSH
14160: LD_INT 114
14162: EQUAL
14163: IFFALSE 14173
// sMortar := true ;
14165: LD_ADDR_EXP 67
14169: PUSH
14170: LD_INT 1
14172: ST_TO_ADDR
// if p3 = 115 then
14173: LD_VAR 0 3
14177: PUSH
14178: LD_INT 115
14180: EQUAL
14181: IFFALSE 14191
// sRanger := true ;
14183: LD_ADDR_EXP 77
14187: PUSH
14188: LD_INT 1
14190: ST_TO_ADDR
// end ; end ;
14191: PPOPN 6
14193: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14194: LD_EXP 24
14198: PUSH
14199: LD_EXP 29
14203: AND
14204: IFFALSE 14328
14206: GO 14208
14208: DISABLE
14209: LD_INT 0
14211: PPUSH
14212: PPUSH
// begin enable ;
14213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14214: LD_ADDR_VAR 0 2
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_OWVAR 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 7
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 34
14246: PUSH
14247: LD_INT 45
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 34
14256: PUSH
14257: LD_INT 28
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 34
14266: PUSH
14267: LD_INT 47
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: ST_TO_ADDR
// if not tmp then
14290: LD_VAR 0 2
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14328
// for i in tmp do
14299: LD_ADDR_VAR 0 1
14303: PUSH
14304: LD_VAR 0 2
14308: PUSH
14309: FOR_IN
14310: IFFALSE 14326
// begin SetLives ( i , 0 ) ;
14312: LD_VAR 0 1
14316: PPUSH
14317: LD_INT 0
14319: PPUSH
14320: CALL_OW 234
// end ;
14324: GO 14309
14326: POP
14327: POP
// end ;
14328: PPOPN 2
14330: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14331: LD_EXP 24
14335: PUSH
14336: LD_EXP 30
14340: AND
14341: IFFALSE 14425
14343: GO 14345
14345: DISABLE
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
// begin enable ;
14350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_OWVAR 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 32
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: ST_TO_ADDR
// if not tmp then
14387: LD_VAR 0 2
14391: NOT
14392: IFFALSE 14396
// exit ;
14394: GO 14425
// for i in tmp do
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_VAR 0 2
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14423
// begin SetLives ( i , 0 ) ;
14409: LD_VAR 0 1
14413: PPUSH
14414: LD_INT 0
14416: PPUSH
14417: CALL_OW 234
// end ;
14421: GO 14406
14423: POP
14424: POP
// end ;
14425: PPOPN 2
14427: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14428: LD_EXP 24
14432: PUSH
14433: LD_EXP 27
14437: AND
14438: IFFALSE 14531
14440: GO 14442
14442: DISABLE
14443: LD_INT 0
14445: PPUSH
// begin enable ;
14446: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14447: LD_ADDR_VAR 0 1
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_OWVAR 2
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: LD_INT 25
14469: PUSH
14470: LD_INT 5
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 25
14479: PUSH
14480: LD_INT 9
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 25
14489: PUSH
14490: LD_INT 8
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: PUSH
14512: FOR_IN
14513: IFFALSE 14529
// begin SetClass ( i , 1 ) ;
14515: LD_VAR 0 1
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 336
// end ;
14527: GO 14512
14529: POP
14530: POP
// end ;
14531: PPOPN 1
14533: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14534: LD_EXP 24
14538: PUSH
14539: LD_EXP 28
14543: AND
14544: PUSH
14545: LD_OWVAR 65
14549: PUSH
14550: LD_INT 7
14552: LESS
14553: AND
14554: IFFALSE 14568
14556: GO 14558
14558: DISABLE
// begin enable ;
14559: ENABLE
// game_speed := 7 ;
14560: LD_ADDR_OWVAR 65
14564: PUSH
14565: LD_INT 7
14567: ST_TO_ADDR
// end ;
14568: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14569: LD_EXP 24
14573: PUSH
14574: LD_EXP 31
14578: AND
14579: IFFALSE 14781
14581: GO 14583
14583: DISABLE
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 81
14596: PUSH
14597: LD_OWVAR 2
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 21
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: ST_TO_ADDR
// if not tmp then
14625: LD_VAR 0 3
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 14781
// if tmp > 5 then
14634: LD_VAR 0 3
14638: PUSH
14639: LD_INT 5
14641: GREATER
14642: IFFALSE 14654
// k := 5 else
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_INT 5
14651: ST_TO_ADDR
14652: GO 14664
// k := tmp ;
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: LD_VAR 0 3
14663: ST_TO_ADDR
// for i := 1 to k do
14664: LD_ADDR_VAR 0 1
14668: PUSH
14669: DOUBLE
14670: LD_INT 1
14672: DEC
14673: ST_TO_ADDR
14674: LD_VAR 0 2
14678: PUSH
14679: FOR_TO
14680: IFFALSE 14779
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14682: LD_VAR 0 3
14686: PUSH
14687: LD_VAR 0 1
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 1
14697: PUSH
14698: LD_INT 4
14700: MOD
14701: PUSH
14702: LD_INT 1
14704: PLUS
14705: PPUSH
14706: CALL_OW 259
14710: PUSH
14711: LD_INT 10
14713: LESS
14714: IFFALSE 14777
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14716: LD_VAR 0 3
14720: PUSH
14721: LD_VAR 0 1
14725: ARRAY
14726: PPUSH
14727: LD_VAR 0 1
14731: PUSH
14732: LD_INT 4
14734: MOD
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: PPUSH
14740: LD_VAR 0 3
14744: PUSH
14745: LD_VAR 0 1
14749: ARRAY
14750: PPUSH
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 4
14758: MOD
14759: PUSH
14760: LD_INT 1
14762: PLUS
14763: PPUSH
14764: CALL_OW 259
14768: PUSH
14769: LD_INT 1
14771: PLUS
14772: PPUSH
14773: CALL_OW 237
14777: GO 14679
14779: POP
14780: POP
// end ;
14781: PPOPN 3
14783: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14784: LD_EXP 24
14788: PUSH
14789: LD_EXP 32
14793: AND
14794: IFFALSE 14814
14796: GO 14798
14798: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14799: LD_INT 4
14801: PPUSH
14802: LD_OWVAR 2
14806: PPUSH
14807: LD_INT 0
14809: PPUSH
14810: CALL_OW 324
14814: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14815: LD_EXP 24
14819: PUSH
14820: LD_EXP 61
14824: AND
14825: IFFALSE 14845
14827: GO 14829
14829: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14830: LD_INT 19
14832: PPUSH
14833: LD_OWVAR 2
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 324
14845: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14846: LD_EXP 24
14850: PUSH
14851: LD_EXP 33
14855: AND
14856: IFFALSE 14958
14858: GO 14860
14860: DISABLE
14861: LD_INT 0
14863: PPUSH
14864: PPUSH
// begin enable ;
14865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_OWVAR 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 2
14885: PUSH
14886: LD_INT 34
14888: PUSH
14889: LD_INT 11
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 34
14898: PUSH
14899: LD_INT 30
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: ST_TO_ADDR
// if not tmp then
14920: LD_VAR 0 2
14924: NOT
14925: IFFALSE 14929
// exit ;
14927: GO 14958
// for i in tmp do
14929: LD_ADDR_VAR 0 1
14933: PUSH
14934: LD_VAR 0 2
14938: PUSH
14939: FOR_IN
14940: IFFALSE 14956
// begin SetLives ( i , 0 ) ;
14942: LD_VAR 0 1
14946: PPUSH
14947: LD_INT 0
14949: PPUSH
14950: CALL_OW 234
// end ;
14954: GO 14939
14956: POP
14957: POP
// end ;
14958: PPOPN 2
14960: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14961: LD_EXP 24
14965: PUSH
14966: LD_EXP 34
14970: AND
14971: IFFALSE 14991
14973: GO 14975
14975: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14976: LD_INT 32
14978: PPUSH
14979: LD_OWVAR 2
14983: PPUSH
14984: LD_INT 0
14986: PPUSH
14987: CALL_OW 324
14991: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14992: LD_EXP 24
14996: PUSH
14997: LD_EXP 35
15001: AND
15002: IFFALSE 15183
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
15011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15012: LD_ADDR_VAR 0 2
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_OWVAR 2
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 33
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: ST_TO_ADDR
// if not tmp then
15048: LD_VAR 0 2
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15183
// side := 0 ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// for i := 1 to 8 do
15065: LD_ADDR_VAR 0 1
15069: PUSH
15070: DOUBLE
15071: LD_INT 1
15073: DEC
15074: ST_TO_ADDR
15075: LD_INT 8
15077: PUSH
15078: FOR_TO
15079: IFFALSE 15127
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15081: LD_OWVAR 2
15085: PUSH
15086: LD_VAR 0 1
15090: NONEQUAL
15091: PUSH
15092: LD_OWVAR 2
15096: PPUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 81
15106: PUSH
15107: LD_INT 2
15109: EQUAL
15110: AND
15111: IFFALSE 15125
// begin side := i ;
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_VAR 0 1
15122: ST_TO_ADDR
// break ;
15123: GO 15127
// end ;
15125: GO 15078
15127: POP
15128: POP
// if not side then
15129: LD_VAR 0 3
15133: NOT
15134: IFFALSE 15138
// exit ;
15136: GO 15183
// for i := 1 to tmp do
15138: LD_ADDR_VAR 0 1
15142: PUSH
15143: DOUBLE
15144: LD_INT 1
15146: DEC
15147: ST_TO_ADDR
15148: LD_VAR 0 2
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15181
// if Prob ( 60 ) then
15156: LD_INT 60
15158: PPUSH
15159: CALL_OW 13
15163: IFFALSE 15179
// SetSide ( i , side ) ;
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: CALL_OW 235
15179: GO 15153
15181: POP
15182: POP
// end ;
15183: PPOPN 3
15185: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15186: LD_EXP 24
15190: PUSH
15191: LD_EXP 37
15195: AND
15196: IFFALSE 15315
15198: GO 15200
15200: DISABLE
15201: LD_INT 0
15203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15204: LD_ADDR_VAR 0 1
15208: PUSH
15209: LD_INT 22
15211: PUSH
15212: LD_OWVAR 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 21
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: LD_INT 23
15236: PUSH
15237: LD_INT 0
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PPUSH
15253: CALL_OW 69
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 257
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: LD_INT 4
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: IN
15289: IFFALSE 15311
// SetClass ( un , rand ( 1 , 4 ) ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: LD_INT 4
15301: PPUSH
15302: CALL_OW 12
15306: PPUSH
15307: CALL_OW 336
15311: GO 15258
15313: POP
15314: POP
// end ;
15315: PPOPN 1
15317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15318: LD_EXP 24
15322: PUSH
15323: LD_EXP 36
15327: AND
15328: IFFALSE 15407
15330: GO 15332
15332: DISABLE
15333: LD_INT 0
15335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_INT 22
15343: PUSH
15344: LD_OWVAR 2
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 3
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 1
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15381: LD_VAR 0 1
15385: PUSH
15386: LD_INT 1
15388: PPUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 12
15398: ARRAY
15399: PPUSH
15400: LD_INT 100
15402: PPUSH
15403: CALL_OW 234
// end ;
15407: PPOPN 1
15409: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15410: LD_EXP 24
15414: PUSH
15415: LD_EXP 38
15419: AND
15420: IFFALSE 15518
15422: GO 15424
15424: DISABLE
15425: LD_INT 0
15427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15428: LD_ADDR_VAR 0 1
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_OWVAR 2
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 1
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 69
15463: ST_TO_ADDR
// if not tmp then
15464: LD_VAR 0 1
15468: NOT
15469: IFFALSE 15473
// exit ;
15471: GO 15518
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15473: LD_VAR 0 1
15477: PUSH
15478: LD_INT 1
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 12
15490: ARRAY
15491: PPUSH
15492: LD_INT 1
15494: PPUSH
15495: LD_INT 4
15497: PPUSH
15498: CALL_OW 12
15502: PPUSH
15503: LD_INT 3000
15505: PPUSH
15506: LD_INT 9000
15508: PPUSH
15509: CALL_OW 12
15513: PPUSH
15514: CALL_OW 492
// end ;
15518: PPOPN 1
15520: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15521: LD_EXP 24
15525: PUSH
15526: LD_EXP 39
15530: AND
15531: IFFALSE 15551
15533: GO 15535
15535: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15536: LD_INT 1
15538: PPUSH
15539: LD_OWVAR 2
15543: PPUSH
15544: LD_INT 0
15546: PPUSH
15547: CALL_OW 324
15551: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15552: LD_EXP 24
15556: PUSH
15557: LD_EXP 40
15561: AND
15562: IFFALSE 15645
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
15570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15571: LD_ADDR_VAR 0 2
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_OWVAR 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 3
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: ST_TO_ADDR
// if not tmp then
15607: LD_VAR 0 2
15611: NOT
15612: IFFALSE 15616
// exit ;
15614: GO 15645
// for i in tmp do
15616: LD_ADDR_VAR 0 1
15620: PUSH
15621: LD_VAR 0 2
15625: PUSH
15626: FOR_IN
15627: IFFALSE 15643
// SetBLevel ( i , 10 ) ;
15629: LD_VAR 0 1
15633: PPUSH
15634: LD_INT 10
15636: PPUSH
15637: CALL_OW 241
15641: GO 15626
15643: POP
15644: POP
// end ;
15645: PPOPN 2
15647: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15648: LD_EXP 24
15652: PUSH
15653: LD_EXP 41
15657: AND
15658: IFFALSE 15769
15660: GO 15662
15662: DISABLE
15663: LD_INT 0
15665: PPUSH
15666: PPUSH
15667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15668: LD_ADDR_VAR 0 3
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_OWVAR 2
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 25
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 69
15703: ST_TO_ADDR
// if not tmp then
15704: LD_VAR 0 3
15708: NOT
15709: IFFALSE 15713
// exit ;
15711: GO 15769
// un := tmp [ rand ( 1 , tmp ) ] ;
15713: LD_ADDR_VAR 0 2
15717: PUSH
15718: LD_VAR 0 3
15722: PUSH
15723: LD_INT 1
15725: PPUSH
15726: LD_VAR 0 3
15730: PPUSH
15731: CALL_OW 12
15735: ARRAY
15736: ST_TO_ADDR
// if Crawls ( un ) then
15737: LD_VAR 0 2
15741: PPUSH
15742: CALL_OW 318
15746: IFFALSE 15757
// ComWalk ( un ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15757: LD_VAR 0 2
15761: PPUSH
15762: LD_INT 5
15764: PPUSH
15765: CALL_OW 336
// end ;
15769: PPOPN 3
15771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15772: LD_EXP 24
15776: PUSH
15777: LD_EXP 42
15781: AND
15782: PUSH
15783: LD_OWVAR 67
15787: PUSH
15788: LD_INT 3
15790: LESS
15791: AND
15792: IFFALSE 15811
15794: GO 15796
15796: DISABLE
// Difficulty := Difficulty + 1 ;
15797: LD_ADDR_OWVAR 67
15801: PUSH
15802: LD_OWVAR 67
15806: PUSH
15807: LD_INT 1
15809: PLUS
15810: ST_TO_ADDR
15811: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15812: LD_EXP 24
15816: PUSH
15817: LD_EXP 43
15821: AND
15822: IFFALSE 15925
15824: GO 15826
15826: DISABLE
15827: LD_INT 0
15829: PPUSH
// begin for i := 1 to 5 do
15830: LD_ADDR_VAR 0 1
15834: PUSH
15835: DOUBLE
15836: LD_INT 1
15838: DEC
15839: ST_TO_ADDR
15840: LD_INT 5
15842: PUSH
15843: FOR_TO
15844: IFFALSE 15923
// begin uc_nation := nation_nature ;
15846: LD_ADDR_OWVAR 21
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// uc_side := 0 ;
15854: LD_ADDR_OWVAR 20
15858: PUSH
15859: LD_INT 0
15861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15862: LD_ADDR_OWVAR 29
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 12
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: ST_TO_ADDR
// hc_agressivity := 20 ;
15877: LD_ADDR_OWVAR 35
15881: PUSH
15882: LD_INT 20
15884: ST_TO_ADDR
// hc_class := class_tiger ;
15885: LD_ADDR_OWVAR 28
15889: PUSH
15890: LD_INT 14
15892: ST_TO_ADDR
// hc_gallery :=  ;
15893: LD_ADDR_OWVAR 33
15897: PUSH
15898: LD_STRING 
15900: ST_TO_ADDR
// hc_name :=  ;
15901: LD_ADDR_OWVAR 26
15905: PUSH
15906: LD_STRING 
15908: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15909: CALL_OW 44
15913: PPUSH
15914: LD_INT 0
15916: PPUSH
15917: CALL_OW 51
// end ;
15921: GO 15843
15923: POP
15924: POP
// end ;
15925: PPOPN 1
15927: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15928: LD_EXP 24
15932: PUSH
15933: LD_EXP 44
15937: AND
15938: IFFALSE 15947
15940: GO 15942
15942: DISABLE
// StreamSibBomb ;
15943: CALL 15948 0 0
15947: END
// export function StreamSibBomb ; var i , x , y ; begin
15948: LD_INT 0
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
// result := false ;
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// for i := 1 to 16 do
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: DOUBLE
15968: LD_INT 1
15970: DEC
15971: ST_TO_ADDR
15972: LD_INT 16
15974: PUSH
15975: FOR_TO
15976: IFFALSE 16175
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_INT 10
15985: PUSH
15986: LD_INT 20
15988: PUSH
15989: LD_INT 30
15991: PUSH
15992: LD_INT 40
15994: PUSH
15995: LD_INT 50
15997: PUSH
15998: LD_INT 60
16000: PUSH
16001: LD_INT 70
16003: PUSH
16004: LD_INT 80
16006: PUSH
16007: LD_INT 90
16009: PUSH
16010: LD_INT 100
16012: PUSH
16013: LD_INT 110
16015: PUSH
16016: LD_INT 120
16018: PUSH
16019: LD_INT 130
16021: PUSH
16022: LD_INT 140
16024: PUSH
16025: LD_INT 150
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 1
16047: PPUSH
16048: LD_INT 15
16050: PPUSH
16051: CALL_OW 12
16055: ARRAY
16056: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16057: LD_ADDR_VAR 0 4
16061: PUSH
16062: LD_INT 10
16064: PUSH
16065: LD_INT 20
16067: PUSH
16068: LD_INT 30
16070: PUSH
16071: LD_INT 40
16073: PUSH
16074: LD_INT 50
16076: PUSH
16077: LD_INT 60
16079: PUSH
16080: LD_INT 70
16082: PUSH
16083: LD_INT 80
16085: PUSH
16086: LD_INT 90
16088: PUSH
16089: LD_INT 100
16091: PUSH
16092: LD_INT 110
16094: PUSH
16095: LD_INT 120
16097: PUSH
16098: LD_INT 130
16100: PUSH
16101: LD_INT 140
16103: PUSH
16104: LD_INT 150
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 1
16126: PPUSH
16127: LD_INT 15
16129: PPUSH
16130: CALL_OW 12
16134: ARRAY
16135: ST_TO_ADDR
// if ValidHex ( x , y ) then
16136: LD_VAR 0 3
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: CALL_OW 488
16150: IFFALSE 16173
// begin result := [ x , y ] ;
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_VAR 0 3
16161: PUSH
16162: LD_VAR 0 4
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: ST_TO_ADDR
// break ;
16171: GO 16175
// end ; end ;
16173: GO 15975
16175: POP
16176: POP
// if result then
16177: LD_VAR 0 1
16181: IFFALSE 16241
// begin ToLua ( playSibBomb() ) ;
16183: LD_STRING playSibBomb()
16185: PPUSH
16186: CALL_OW 559
// wait ( 0 0$14 ) ;
16190: LD_INT 490
16192: PPUSH
16193: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 1
16204: ARRAY
16205: PPUSH
16206: LD_VAR 0 1
16210: PUSH
16211: LD_INT 2
16213: ARRAY
16214: PPUSH
16215: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16219: LD_VAR 0 1
16223: PUSH
16224: LD_INT 1
16226: ARRAY
16227: PPUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_INT 2
16235: ARRAY
16236: PPUSH
16237: CALL_OW 429
// end ; end ;
16241: LD_VAR 0 1
16245: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16246: LD_EXP 24
16250: PUSH
16251: LD_EXP 46
16255: AND
16256: IFFALSE 16268
16258: GO 16260
16260: DISABLE
// YouLost (  ) ;
16261: LD_STRING 
16263: PPUSH
16264: CALL_OW 104
16268: END
// every 0 0$1 trigger StreamModeActive and sFog do
16269: LD_EXP 24
16273: PUSH
16274: LD_EXP 45
16278: AND
16279: IFFALSE 16293
16281: GO 16283
16283: DISABLE
// FogOff ( your_side ) ;
16284: LD_OWVAR 2
16288: PPUSH
16289: CALL_OW 344
16293: END
// every 0 0$1 trigger StreamModeActive and sSun do
16294: LD_EXP 24
16298: PUSH
16299: LD_EXP 47
16303: AND
16304: IFFALSE 16332
16306: GO 16308
16308: DISABLE
// begin solar_recharge_percent := 0 ;
16309: LD_ADDR_OWVAR 79
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16317: LD_INT 10500
16319: PPUSH
16320: CALL_OW 67
// solar_recharge_percent := 100 ;
16324: LD_ADDR_OWVAR 79
16328: PUSH
16329: LD_INT 100
16331: ST_TO_ADDR
// end ;
16332: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16333: LD_EXP 24
16337: PUSH
16338: LD_EXP 48
16342: AND
16343: IFFALSE 16582
16345: GO 16347
16347: DISABLE
16348: LD_INT 0
16350: PPUSH
16351: PPUSH
16352: PPUSH
// begin tmp := [ ] ;
16353: LD_ADDR_VAR 0 3
16357: PUSH
16358: EMPTY
16359: ST_TO_ADDR
// for i := 1 to 6 do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: DOUBLE
16366: LD_INT 1
16368: DEC
16369: ST_TO_ADDR
16370: LD_INT 6
16372: PUSH
16373: FOR_TO
16374: IFFALSE 16479
// begin uc_nation := nation_nature ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// uc_side := 0 ;
16384: LD_ADDR_OWVAR 20
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16392: LD_ADDR_OWVAR 29
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 12
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: ST_TO_ADDR
// hc_agressivity := 20 ;
16407: LD_ADDR_OWVAR 35
16411: PUSH
16412: LD_INT 20
16414: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16415: LD_ADDR_OWVAR 28
16419: PUSH
16420: LD_INT 17
16422: ST_TO_ADDR
// hc_gallery :=  ;
16423: LD_ADDR_OWVAR 33
16427: PUSH
16428: LD_STRING 
16430: ST_TO_ADDR
// hc_name :=  ;
16431: LD_ADDR_OWVAR 26
16435: PUSH
16436: LD_STRING 
16438: ST_TO_ADDR
// un := CreateHuman ;
16439: LD_ADDR_VAR 0 2
16443: PUSH
16444: CALL_OW 44
16448: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 51
// tmp := tmp ^ un ;
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_VAR 0 3
16470: PUSH
16471: LD_VAR 0 2
16475: ADD
16476: ST_TO_ADDR
// end ;
16477: GO 16373
16479: POP
16480: POP
// repeat wait ( 0 0$1 ) ;
16481: LD_INT 35
16483: PPUSH
16484: CALL_OW 67
// for un in tmp do
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: LD_VAR 0 3
16497: PUSH
16498: FOR_IN
16499: IFFALSE 16573
// begin if IsDead ( un ) then
16501: LD_VAR 0 2
16505: PPUSH
16506: CALL_OW 301
16510: IFFALSE 16530
// begin tmp := tmp diff un ;
16512: LD_ADDR_VAR 0 3
16516: PUSH
16517: LD_VAR 0 3
16521: PUSH
16522: LD_VAR 0 2
16526: DIFF
16527: ST_TO_ADDR
// continue ;
16528: GO 16498
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16530: LD_VAR 0 2
16534: PPUSH
16535: LD_INT 3
16537: PUSH
16538: LD_INT 22
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PPUSH
16552: CALL_OW 69
16556: PPUSH
16557: LD_VAR 0 2
16561: PPUSH
16562: CALL_OW 74
16566: PPUSH
16567: CALL_OW 115
// end ;
16571: GO 16498
16573: POP
16574: POP
// until not tmp ;
16575: LD_VAR 0 3
16579: NOT
16580: IFFALSE 16481
// end ;
16582: PPOPN 3
16584: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16585: LD_EXP 24
16589: PUSH
16590: LD_EXP 49
16594: AND
16595: IFFALSE 16649
16597: GO 16599
16599: DISABLE
// begin ToLua ( displayTroll(); ) ;
16600: LD_STRING displayTroll();
16602: PPUSH
16603: CALL_OW 559
// wait ( 3 3$00 ) ;
16607: LD_INT 6300
16609: PPUSH
16610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16614: LD_STRING hideTroll();
16616: PPUSH
16617: CALL_OW 559
// wait ( 1 1$00 ) ;
16621: LD_INT 2100
16623: PPUSH
16624: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16628: LD_STRING displayTroll();
16630: PPUSH
16631: CALL_OW 559
// wait ( 1 1$00 ) ;
16635: LD_INT 2100
16637: PPUSH
16638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16642: LD_STRING hideTroll();
16644: PPUSH
16645: CALL_OW 559
// end ;
16649: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16650: LD_EXP 24
16654: PUSH
16655: LD_EXP 50
16659: AND
16660: IFFALSE 16723
16662: GO 16664
16664: DISABLE
16665: LD_INT 0
16667: PPUSH
// begin p := 0 ;
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// repeat game_speed := 1 ;
16676: LD_ADDR_OWVAR 65
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16684: LD_INT 35
16686: PPUSH
16687: CALL_OW 67
// p := p + 1 ;
16691: LD_ADDR_VAR 0 1
16695: PUSH
16696: LD_VAR 0 1
16700: PUSH
16701: LD_INT 1
16703: PLUS
16704: ST_TO_ADDR
// until p >= 60 ;
16705: LD_VAR 0 1
16709: PUSH
16710: LD_INT 60
16712: GREATEREQUAL
16713: IFFALSE 16676
// game_speed := 4 ;
16715: LD_ADDR_OWVAR 65
16719: PUSH
16720: LD_INT 4
16722: ST_TO_ADDR
// end ;
16723: PPOPN 1
16725: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16726: LD_EXP 24
16730: PUSH
16731: LD_EXP 51
16735: AND
16736: IFFALSE 16882
16738: GO 16740
16740: DISABLE
16741: LD_INT 0
16743: PPUSH
16744: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16745: LD_ADDR_VAR 0 1
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_OWVAR 2
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: LD_INT 30
16767: PUSH
16768: LD_INT 0
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 30
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PPUSH
16794: CALL_OW 69
16798: ST_TO_ADDR
// if not depot then
16799: LD_VAR 0 1
16803: NOT
16804: IFFALSE 16808
// exit ;
16806: GO 16882
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16808: LD_ADDR_VAR 0 2
16812: PUSH
16813: LD_VAR 0 1
16817: PUSH
16818: LD_INT 1
16820: PPUSH
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL_OW 12
16830: ARRAY
16831: PPUSH
16832: CALL_OW 274
16836: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16837: LD_VAR 0 2
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 0
16847: PPUSH
16848: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16852: LD_VAR 0 2
16856: PPUSH
16857: LD_INT 2
16859: PPUSH
16860: LD_INT 0
16862: PPUSH
16863: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16867: LD_VAR 0 2
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: LD_INT 0
16877: PPUSH
16878: CALL_OW 277
// end ;
16882: PPOPN 2
16884: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16885: LD_EXP 24
16889: PUSH
16890: LD_EXP 52
16894: AND
16895: IFFALSE 16992
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_OWVAR 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 21
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 3
16932: PUSH
16933: LD_INT 23
16935: PUSH
16936: LD_INT 0
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: ST_TO_ADDR
// if not tmp then
16957: LD_VAR 0 1
16961: NOT
16962: IFFALSE 16966
// exit ;
16964: GO 16992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16966: LD_VAR 0 1
16970: PUSH
16971: LD_INT 1
16973: PPUSH
16974: LD_VAR 0 1
16978: PPUSH
16979: CALL_OW 12
16983: ARRAY
16984: PPUSH
16985: LD_INT 200
16987: PPUSH
16988: CALL_OW 234
// end ;
16992: PPOPN 1
16994: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16995: LD_EXP 24
16999: PUSH
17000: LD_EXP 53
17004: AND
17005: IFFALSE 17084
17007: GO 17009
17009: DISABLE
17010: LD_INT 0
17012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17013: LD_ADDR_VAR 0 1
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_OWVAR 2
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: ST_TO_ADDR
// if not tmp then
17049: LD_VAR 0 1
17053: NOT
17054: IFFALSE 17058
// exit ;
17056: GO 17084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17058: LD_VAR 0 1
17062: PUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 12
17075: ARRAY
17076: PPUSH
17077: LD_INT 60
17079: PPUSH
17080: CALL_OW 234
// end ;
17084: PPOPN 1
17086: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17087: LD_EXP 24
17091: PUSH
17092: LD_EXP 54
17096: AND
17097: IFFALSE 17196
17099: GO 17101
17101: DISABLE
17102: LD_INT 0
17104: PPUSH
17105: PPUSH
// begin enable ;
17106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_INT 22
17114: PUSH
17115: LD_OWVAR 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 61
17126: PUSH
17127: EMPTY
17128: LIST
17129: PUSH
17130: LD_INT 33
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: ST_TO_ADDR
// if not tmp then
17150: LD_VAR 0 1
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17196
// for i in tmp do
17159: LD_ADDR_VAR 0 2
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17194
// if IsControledBy ( i ) then
17172: LD_VAR 0 2
17176: PPUSH
17177: CALL_OW 312
17181: IFFALSE 17192
// ComUnlink ( i ) ;
17183: LD_VAR 0 2
17187: PPUSH
17188: CALL_OW 136
17192: GO 17169
17194: POP
17195: POP
// end ;
17196: PPOPN 2
17198: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17199: LD_EXP 24
17203: PUSH
17204: LD_EXP 55
17208: AND
17209: IFFALSE 17349
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
// begin ToLua ( displayPowell(); ) ;
17218: LD_STRING displayPowell();
17220: PPUSH
17221: CALL_OW 559
// uc_side := 0 ;
17225: LD_ADDR_OWVAR 20
17229: PUSH
17230: LD_INT 0
17232: ST_TO_ADDR
// uc_nation := 2 ;
17233: LD_ADDR_OWVAR 21
17237: PUSH
17238: LD_INT 2
17240: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17241: LD_ADDR_OWVAR 37
17245: PUSH
17246: LD_INT 14
17248: ST_TO_ADDR
// vc_engine := engine_siberite ;
17249: LD_ADDR_OWVAR 39
17253: PUSH
17254: LD_INT 3
17256: ST_TO_ADDR
// vc_control := control_apeman ;
17257: LD_ADDR_OWVAR 38
17261: PUSH
17262: LD_INT 5
17264: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17265: LD_ADDR_OWVAR 40
17269: PUSH
17270: LD_INT 29
17272: ST_TO_ADDR
// un := CreateVehicle ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: CALL_OW 45
17282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17295: LD_INT 35
17297: PPUSH
17298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17302: LD_VAR 0 2
17306: PPUSH
17307: LD_INT 22
17309: PUSH
17310: LD_OWVAR 2
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PPUSH
17324: LD_VAR 0 2
17328: PPUSH
17329: CALL_OW 74
17333: PPUSH
17334: CALL_OW 115
// until IsDead ( un ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 301
17347: IFFALSE 17295
// end ;
17349: PPOPN 2
17351: END
// every 0 0$1 trigger StreamModeActive and sStu do
17352: LD_EXP 24
17356: PUSH
17357: LD_EXP 63
17361: AND
17362: IFFALSE 17378
17364: GO 17366
17366: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17367: LD_STRING displayStucuk();
17369: PPUSH
17370: CALL_OW 559
// ResetFog ;
17374: CALL_OW 335
// end ;
17378: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17379: LD_EXP 24
17383: PUSH
17384: LD_EXP 56
17388: AND
17389: IFFALSE 17530
17391: GO 17393
17393: DISABLE
17394: LD_INT 0
17396: PPUSH
17397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17398: LD_ADDR_VAR 0 2
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_OWVAR 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PPUSH
17429: CALL_OW 69
17433: ST_TO_ADDR
// if not tmp then
17434: LD_VAR 0 2
17438: NOT
17439: IFFALSE 17443
// exit ;
17441: GO 17530
// un := tmp [ rand ( 1 , tmp ) ] ;
17443: LD_ADDR_VAR 0 1
17447: PUSH
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 12
17465: ARRAY
17466: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17467: LD_VAR 0 1
17471: PPUSH
17472: LD_INT 0
17474: PPUSH
17475: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17479: LD_VAR 0 1
17483: PPUSH
17484: LD_OWVAR 3
17488: PUSH
17489: LD_VAR 0 1
17493: DIFF
17494: PPUSH
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 74
17504: PPUSH
17505: CALL_OW 115
// wait ( 0 0$20 ) ;
17509: LD_INT 700
17511: PPUSH
17512: CALL_OW 67
// SetSide ( un , your_side ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_OWVAR 2
17525: PPUSH
17526: CALL_OW 235
// end ;
17530: PPOPN 2
17532: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17533: LD_EXP 24
17537: PUSH
17538: LD_EXP 57
17542: AND
17543: IFFALSE 17649
17545: GO 17547
17547: DISABLE
17548: LD_INT 0
17550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17551: LD_ADDR_VAR 0 1
17555: PUSH
17556: LD_INT 22
17558: PUSH
17559: LD_OWVAR 2
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 30
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 30
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PPUSH
17600: CALL_OW 69
17604: ST_TO_ADDR
// if not depot then
17605: LD_VAR 0 1
17609: NOT
17610: IFFALSE 17614
// exit ;
17612: GO 17649
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17614: LD_VAR 0 1
17618: PUSH
17619: LD_INT 1
17621: ARRAY
17622: PPUSH
17623: CALL_OW 250
17627: PPUSH
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 1
17635: ARRAY
17636: PPUSH
17637: CALL_OW 251
17641: PPUSH
17642: LD_INT 70
17644: PPUSH
17645: CALL_OW 495
// end ;
17649: PPOPN 1
17651: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17652: LD_EXP 24
17656: PUSH
17657: LD_EXP 58
17661: AND
17662: IFFALSE 17873
17664: GO 17666
17666: DISABLE
17667: LD_INT 0
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17674: LD_ADDR_VAR 0 5
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_OWVAR 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PPUSH
17705: CALL_OW 69
17709: ST_TO_ADDR
// if not tmp then
17710: LD_VAR 0 5
17714: NOT
17715: IFFALSE 17719
// exit ;
17717: GO 17873
// for i in tmp do
17719: LD_ADDR_VAR 0 1
17723: PUSH
17724: LD_VAR 0 5
17728: PUSH
17729: FOR_IN
17730: IFFALSE 17871
// begin d := rand ( 0 , 5 ) ;
17732: LD_ADDR_VAR 0 4
17736: PUSH
17737: LD_INT 0
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 12
17747: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17748: LD_ADDR_VAR 0 2
17752: PUSH
17753: LD_VAR 0 1
17757: PPUSH
17758: CALL_OW 250
17762: PPUSH
17763: LD_VAR 0 4
17767: PPUSH
17768: LD_INT 3
17770: PPUSH
17771: LD_INT 12
17773: PPUSH
17774: CALL_OW 12
17778: PPUSH
17779: CALL_OW 272
17783: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_VAR 0 1
17793: PPUSH
17794: CALL_OW 251
17798: PPUSH
17799: LD_VAR 0 4
17803: PPUSH
17804: LD_INT 3
17806: PPUSH
17807: LD_INT 12
17809: PPUSH
17810: CALL_OW 12
17814: PPUSH
17815: CALL_OW 273
17819: ST_TO_ADDR
// if ValidHex ( x , y ) then
17820: LD_VAR 0 2
17824: PPUSH
17825: LD_VAR 0 3
17829: PPUSH
17830: CALL_OW 488
17834: IFFALSE 17869
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17836: LD_VAR 0 1
17840: PPUSH
17841: LD_VAR 0 2
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 3
17853: PPUSH
17854: LD_INT 6
17856: PPUSH
17857: CALL_OW 12
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 483
// end ;
17869: GO 17729
17871: POP
17872: POP
// end ;
17873: PPOPN 5
17875: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17876: LD_EXP 24
17880: PUSH
17881: LD_EXP 59
17885: AND
17886: IFFALSE 17980
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
17894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17895: LD_ADDR_VAR 0 2
17899: PUSH
17900: LD_INT 22
17902: PUSH
17903: LD_OWVAR 2
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 32
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 21
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: ST_TO_ADDR
// if not tmp then
17942: LD_VAR 0 2
17946: NOT
17947: IFFALSE 17951
// exit ;
17949: GO 17980
// for i in tmp do
17951: LD_ADDR_VAR 0 1
17955: PUSH
17956: LD_VAR 0 2
17960: PUSH
17961: FOR_IN
17962: IFFALSE 17978
// SetFuel ( i , 0 ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_INT 0
17971: PPUSH
17972: CALL_OW 240
17976: GO 17961
17978: POP
17979: POP
// end ;
17980: PPOPN 2
17982: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17983: LD_EXP 24
17987: PUSH
17988: LD_EXP 60
17992: AND
17993: IFFALSE 18059
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 22
18008: PUSH
18009: LD_OWVAR 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 30
18020: PUSH
18021: LD_INT 29
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: ST_TO_ADDR
// if not tmp then
18037: LD_VAR 0 1
18041: NOT
18042: IFFALSE 18046
// exit ;
18044: GO 18059
// DestroyUnit ( tmp [ 1 ] ) ;
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 1
18053: ARRAY
18054: PPUSH
18055: CALL_OW 65
// end ;
18059: PPOPN 1
18061: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18062: LD_EXP 24
18066: PUSH
18067: LD_EXP 62
18071: AND
18072: IFFALSE 18201
18074: GO 18076
18076: DISABLE
18077: LD_INT 0
18079: PPUSH
// begin uc_side := 0 ;
18080: LD_ADDR_OWVAR 20
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// uc_nation := nation_arabian ;
18088: LD_ADDR_OWVAR 21
18092: PUSH
18093: LD_INT 2
18095: ST_TO_ADDR
// hc_gallery :=  ;
18096: LD_ADDR_OWVAR 33
18100: PUSH
18101: LD_STRING 
18103: ST_TO_ADDR
// hc_name :=  ;
18104: LD_ADDR_OWVAR 26
18108: PUSH
18109: LD_STRING 
18111: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18112: LD_INT 1
18114: PPUSH
18115: LD_INT 11
18117: PPUSH
18118: LD_INT 10
18120: PPUSH
18121: CALL_OW 380
// un := CreateHuman ;
18125: LD_ADDR_VAR 0 1
18129: PUSH
18130: CALL_OW 44
18134: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18135: LD_VAR 0 1
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18147: LD_INT 35
18149: PPUSH
18150: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18154: LD_VAR 0 1
18158: PPUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: PPUSH
18176: LD_VAR 0 1
18180: PPUSH
18181: CALL_OW 74
18185: PPUSH
18186: CALL_OW 115
// until IsDead ( un ) ;
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 301
18199: IFFALSE 18147
// end ;
18201: PPOPN 1
18203: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18204: LD_EXP 24
18208: PUSH
18209: LD_EXP 64
18213: AND
18214: IFFALSE 18226
18216: GO 18218
18218: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18219: LD_STRING earthquake(getX(game), 0, 32)
18221: PPUSH
18222: CALL_OW 559
18226: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18227: LD_EXP 24
18231: PUSH
18232: LD_EXP 65
18236: AND
18237: IFFALSE 18328
18239: GO 18241
18241: DISABLE
18242: LD_INT 0
18244: PPUSH
// begin enable ;
18245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18246: LD_ADDR_VAR 0 1
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_OWVAR 2
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 2
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 33
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: ST_TO_ADDR
// if not tmp then
18293: LD_VAR 0 1
18297: NOT
18298: IFFALSE 18302
// exit ;
18300: GO 18328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18302: LD_VAR 0 1
18306: PUSH
18307: LD_INT 1
18309: PPUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 12
18319: ARRAY
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: CALL_OW 234
// end ;
18328: PPOPN 1
18330: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18331: LD_EXP 24
18335: PUSH
18336: LD_EXP 66
18340: AND
18341: IFFALSE 18482
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
18350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_OWVAR 2
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: ST_TO_ADDR
// if not tmp then
18387: LD_VAR 0 3
18391: NOT
18392: IFFALSE 18396
// exit ;
18394: GO 18482
// un := tmp [ rand ( 1 , tmp ) ] ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_VAR 0 3
18405: PUSH
18406: LD_INT 1
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL_OW 12
18418: ARRAY
18419: ST_TO_ADDR
// if Crawls ( un ) then
18420: LD_VAR 0 2
18424: PPUSH
18425: CALL_OW 318
18429: IFFALSE 18440
// ComWalk ( un ) ;
18431: LD_VAR 0 2
18435: PPUSH
18436: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18440: LD_VAR 0 2
18444: PPUSH
18445: LD_INT 9
18447: PPUSH
18448: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18452: LD_INT 28
18454: PPUSH
18455: LD_OWVAR 2
18459: PPUSH
18460: LD_INT 2
18462: PPUSH
18463: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18467: LD_INT 29
18469: PPUSH
18470: LD_OWVAR 2
18474: PPUSH
18475: LD_INT 2
18477: PPUSH
18478: CALL_OW 322
// end ;
18482: PPOPN 3
18484: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18485: LD_EXP 24
18489: PUSH
18490: LD_EXP 67
18494: AND
18495: IFFALSE 18606
18497: GO 18499
18499: DISABLE
18500: LD_INT 0
18502: PPUSH
18503: PPUSH
18504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18505: LD_ADDR_VAR 0 3
18509: PUSH
18510: LD_INT 22
18512: PUSH
18513: LD_OWVAR 2
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 25
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: ST_TO_ADDR
// if not tmp then
18541: LD_VAR 0 3
18545: NOT
18546: IFFALSE 18550
// exit ;
18548: GO 18606
// un := tmp [ rand ( 1 , tmp ) ] ;
18550: LD_ADDR_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: PUSH
18560: LD_INT 1
18562: PPUSH
18563: LD_VAR 0 3
18567: PPUSH
18568: CALL_OW 12
18572: ARRAY
18573: ST_TO_ADDR
// if Crawls ( un ) then
18574: LD_VAR 0 2
18578: PPUSH
18579: CALL_OW 318
18583: IFFALSE 18594
// ComWalk ( un ) ;
18585: LD_VAR 0 2
18589: PPUSH
18590: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18594: LD_VAR 0 2
18598: PPUSH
18599: LD_INT 8
18601: PPUSH
18602: CALL_OW 336
// end ;
18606: PPOPN 3
18608: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18609: LD_EXP 24
18613: PUSH
18614: LD_EXP 68
18618: AND
18619: IFFALSE 18763
18621: GO 18623
18623: DISABLE
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_INT 22
18635: PUSH
18636: LD_OWVAR 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 21
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 34
18660: PUSH
18661: LD_INT 12
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 34
18670: PUSH
18671: LD_INT 51
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 34
18680: PUSH
18681: LD_INT 32
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: PPUSH
18699: CALL_OW 69
18703: ST_TO_ADDR
// if not tmp then
18704: LD_VAR 0 2
18708: NOT
18709: IFFALSE 18713
// exit ;
18711: GO 18763
// for i in tmp do
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: FOR_IN
18724: IFFALSE 18761
// if GetCargo ( i , mat_artifact ) = 0 then
18726: LD_VAR 0 1
18730: PPUSH
18731: LD_INT 4
18733: PPUSH
18734: CALL_OW 289
18738: PUSH
18739: LD_INT 0
18741: EQUAL
18742: IFFALSE 18759
// SetCargo ( i , mat_siberit , 100 ) ;
18744: LD_VAR 0 1
18748: PPUSH
18749: LD_INT 3
18751: PPUSH
18752: LD_INT 100
18754: PPUSH
18755: CALL_OW 290
18759: GO 18723
18761: POP
18762: POP
// end ;
18763: PPOPN 2
18765: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18766: LD_EXP 24
18770: PUSH
18771: LD_EXP 69
18775: AND
18776: IFFALSE 18929
18778: GO 18780
18780: DISABLE
18781: LD_INT 0
18783: PPUSH
18784: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18785: LD_ADDR_VAR 0 2
18789: PUSH
18790: LD_INT 22
18792: PUSH
18793: LD_OWVAR 2
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: ST_TO_ADDR
// if not tmp then
18807: LD_VAR 0 2
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18929
// for i := 1 to 2 do
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: DOUBLE
18822: LD_INT 1
18824: DEC
18825: ST_TO_ADDR
18826: LD_INT 2
18828: PUSH
18829: FOR_TO
18830: IFFALSE 18927
// begin uc_side := your_side ;
18832: LD_ADDR_OWVAR 20
18836: PUSH
18837: LD_OWVAR 2
18841: ST_TO_ADDR
// uc_nation := nation_american ;
18842: LD_ADDR_OWVAR 21
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// vc_chassis := us_morphling ;
18850: LD_ADDR_OWVAR 37
18854: PUSH
18855: LD_INT 5
18857: ST_TO_ADDR
// vc_engine := engine_siberite ;
18858: LD_ADDR_OWVAR 39
18862: PUSH
18863: LD_INT 3
18865: ST_TO_ADDR
// vc_control := control_computer ;
18866: LD_ADDR_OWVAR 38
18870: PUSH
18871: LD_INT 3
18873: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18874: LD_ADDR_OWVAR 40
18878: PUSH
18879: LD_INT 10
18881: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18882: CALL_OW 45
18886: PPUSH
18887: LD_VAR 0 2
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PPUSH
18896: CALL_OW 250
18900: PPUSH
18901: LD_VAR 0 2
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PPUSH
18910: CALL_OW 251
18914: PPUSH
18915: LD_INT 12
18917: PPUSH
18918: LD_INT 1
18920: PPUSH
18921: CALL_OW 50
// end ;
18925: GO 18829
18927: POP
18928: POP
// end ;
18929: PPOPN 2
18931: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18932: LD_EXP 24
18936: PUSH
18937: LD_EXP 70
18941: AND
18942: IFFALSE 19164
18944: GO 18946
18946: DISABLE
18947: LD_INT 0
18949: PPUSH
18950: PPUSH
18951: PPUSH
18952: PPUSH
18953: PPUSH
18954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18955: LD_ADDR_VAR 0 6
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 23
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: LIST
19003: PPUSH
19004: CALL_OW 69
19008: ST_TO_ADDR
// if not tmp then
19009: LD_VAR 0 6
19013: NOT
19014: IFFALSE 19018
// exit ;
19016: GO 19164
// s1 := rand ( 1 , 4 ) ;
19018: LD_ADDR_VAR 0 2
19022: PUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_INT 4
19028: PPUSH
19029: CALL_OW 12
19033: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19034: LD_ADDR_VAR 0 4
19038: PUSH
19039: LD_VAR 0 6
19043: PUSH
19044: LD_INT 1
19046: ARRAY
19047: PPUSH
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 259
19057: ST_TO_ADDR
// if s1 = 1 then
19058: LD_VAR 0 2
19062: PUSH
19063: LD_INT 1
19065: EQUAL
19066: IFFALSE 19086
// s2 := rand ( 2 , 4 ) else
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: LD_INT 2
19075: PPUSH
19076: LD_INT 4
19078: PPUSH
19079: CALL_OW 12
19083: ST_TO_ADDR
19084: GO 19094
// s2 := 1 ;
19086: LD_ADDR_VAR 0 3
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19094: LD_ADDR_VAR 0 5
19098: PUSH
19099: LD_VAR 0 6
19103: PUSH
19104: LD_INT 1
19106: ARRAY
19107: PPUSH
19108: LD_VAR 0 3
19112: PPUSH
19113: CALL_OW 259
19117: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19118: LD_VAR 0 6
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: LD_VAR 0 2
19131: PPUSH
19132: LD_VAR 0 5
19136: PPUSH
19137: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19141: LD_VAR 0 6
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: LD_VAR 0 3
19154: PPUSH
19155: LD_VAR 0 4
19159: PPUSH
19160: CALL_OW 237
// end ;
19164: PPOPN 6
19166: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19167: LD_EXP 24
19171: PUSH
19172: LD_EXP 71
19176: AND
19177: IFFALSE 19256
19179: GO 19181
19181: DISABLE
19182: LD_INT 0
19184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19185: LD_ADDR_VAR 0 1
19189: PUSH
19190: LD_INT 22
19192: PUSH
19193: LD_OWVAR 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 30
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: ST_TO_ADDR
// if not tmp then
19221: LD_VAR 0 1
19225: NOT
19226: IFFALSE 19230
// exit ;
19228: GO 19256
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19230: LD_VAR 0 1
19234: PUSH
19235: LD_INT 1
19237: PPUSH
19238: LD_VAR 0 1
19242: PPUSH
19243: CALL_OW 12
19247: ARRAY
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: CALL_OW 234
// end ;
19256: PPOPN 1
19258: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19259: LD_EXP 24
19263: PUSH
19264: LD_EXP 72
19268: AND
19269: IFFALSE 19381
19271: GO 19273
19273: DISABLE
19274: LD_INT 0
19276: PPUSH
19277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19278: LD_ADDR_VAR 0 2
19282: PUSH
19283: LD_INT 22
19285: PUSH
19286: LD_OWVAR 2
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: LD_INT 30
19300: PUSH
19301: LD_INT 27
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 30
19310: PUSH
19311: LD_INT 26
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 30
19320: PUSH
19321: LD_INT 28
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// if not tmp then
19343: LD_VAR 0 2
19347: NOT
19348: IFFALSE 19352
// exit ;
19350: GO 19381
// for i in tmp do
19352: LD_ADDR_VAR 0 1
19356: PUSH
19357: LD_VAR 0 2
19361: PUSH
19362: FOR_IN
19363: IFFALSE 19379
// SetLives ( i , 1 ) ;
19365: LD_VAR 0 1
19369: PPUSH
19370: LD_INT 1
19372: PPUSH
19373: CALL_OW 234
19377: GO 19362
19379: POP
19380: POP
// end ;
19381: PPOPN 2
19383: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19384: LD_EXP 24
19388: PUSH
19389: LD_EXP 73
19393: AND
19394: IFFALSE 19668
19396: GO 19398
19398: DISABLE
19399: LD_INT 0
19401: PPUSH
19402: PPUSH
19403: PPUSH
// begin i := rand ( 1 , 7 ) ;
19404: LD_ADDR_VAR 0 1
19408: PUSH
19409: LD_INT 1
19411: PPUSH
19412: LD_INT 7
19414: PPUSH
19415: CALL_OW 12
19419: ST_TO_ADDR
// case i of 1 :
19420: LD_VAR 0 1
19424: PUSH
19425: LD_INT 1
19427: DOUBLE
19428: EQUAL
19429: IFTRUE 19433
19431: GO 19443
19433: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19434: LD_STRING earthquake(getX(game), 0, 32)
19436: PPUSH
19437: CALL_OW 559
19441: GO 19668
19443: LD_INT 2
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19465
19451: POP
// begin ToLua ( displayStucuk(); ) ;
19452: LD_STRING displayStucuk();
19454: PPUSH
19455: CALL_OW 559
// ResetFog ;
19459: CALL_OW 335
// end ; 3 :
19463: GO 19668
19465: LD_INT 3
19467: DOUBLE
19468: EQUAL
19469: IFTRUE 19473
19471: GO 19577
19473: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19474: LD_ADDR_VAR 0 2
19478: PUSH
19479: LD_INT 22
19481: PUSH
19482: LD_OWVAR 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PPUSH
19505: CALL_OW 69
19509: ST_TO_ADDR
// if not tmp then
19510: LD_VAR 0 2
19514: NOT
19515: IFFALSE 19519
// exit ;
19517: GO 19668
// un := tmp [ rand ( 1 , tmp ) ] ;
19519: LD_ADDR_VAR 0 3
19523: PUSH
19524: LD_VAR 0 2
19528: PUSH
19529: LD_INT 1
19531: PPUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: CALL_OW 12
19541: ARRAY
19542: ST_TO_ADDR
// if Crawls ( un ) then
19543: LD_VAR 0 3
19547: PPUSH
19548: CALL_OW 318
19552: IFFALSE 19563
// ComWalk ( un ) ;
19554: LD_VAR 0 3
19558: PPUSH
19559: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19563: LD_VAR 0 3
19567: PPUSH
19568: LD_INT 8
19570: PPUSH
19571: CALL_OW 336
// end ; 4 :
19575: GO 19668
19577: LD_INT 4
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19646
19585: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: LD_INT 22
19593: PUSH
19594: LD_OWVAR 2
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 30
19605: PUSH
19606: LD_INT 29
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PPUSH
19617: CALL_OW 69
19621: ST_TO_ADDR
// if not tmp then
19622: LD_VAR 0 2
19626: NOT
19627: IFFALSE 19631
// exit ;
19629: GO 19668
// DestroyUnit ( tmp [ 1 ] ) ;
19631: LD_VAR 0 2
19635: PUSH
19636: LD_INT 1
19638: ARRAY
19639: PPUSH
19640: CALL_OW 65
// end ; 5 .. 7 :
19644: GO 19668
19646: LD_INT 5
19648: DOUBLE
19649: GREATEREQUAL
19650: IFFALSE 19658
19652: LD_INT 7
19654: DOUBLE
19655: LESSEQUAL
19656: IFTRUE 19660
19658: GO 19667
19660: POP
// StreamSibBomb ; end ;
19661: CALL 15948 0 0
19665: GO 19668
19667: POP
// end ;
19668: PPOPN 3
19670: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19671: LD_EXP 24
19675: PUSH
19676: LD_EXP 74
19680: AND
19681: IFFALSE 19837
19683: GO 19685
19685: DISABLE
19686: LD_INT 0
19688: PPUSH
19689: PPUSH
19690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19691: LD_ADDR_VAR 0 2
19695: PUSH
19696: LD_INT 81
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PPUSH
19740: CALL_OW 69
19744: ST_TO_ADDR
// if not tmp then
19745: LD_VAR 0 2
19749: NOT
19750: IFFALSE 19754
// exit ;
19752: GO 19837
// p := 0 ;
19754: LD_ADDR_VAR 0 3
19758: PUSH
19759: LD_INT 0
19761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19762: LD_INT 35
19764: PPUSH
19765: CALL_OW 67
// p := p + 1 ;
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 1
19781: PLUS
19782: ST_TO_ADDR
// for i in tmp do
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_VAR 0 2
19792: PUSH
19793: FOR_IN
19794: IFFALSE 19825
// if GetLives ( i ) < 1000 then
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 256
19805: PUSH
19806: LD_INT 1000
19808: LESS
19809: IFFALSE 19823
// SetLives ( i , 1000 ) ;
19811: LD_VAR 0 1
19815: PPUSH
19816: LD_INT 1000
19818: PPUSH
19819: CALL_OW 234
19823: GO 19793
19825: POP
19826: POP
// until p > 20 ;
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 20
19834: GREATER
19835: IFFALSE 19762
// end ;
19837: PPOPN 3
19839: END
// every 0 0$1 trigger StreamModeActive and sTime do
19840: LD_EXP 24
19844: PUSH
19845: LD_EXP 75
19849: AND
19850: IFFALSE 19885
19852: GO 19854
19854: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19855: LD_INT 28
19857: PPUSH
19858: LD_OWVAR 2
19862: PPUSH
19863: LD_INT 2
19865: PPUSH
19866: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19870: LD_INT 30
19872: PPUSH
19873: LD_OWVAR 2
19877: PPUSH
19878: LD_INT 2
19880: PPUSH
19881: CALL_OW 322
// end ;
19885: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19886: LD_EXP 24
19890: PUSH
19891: LD_EXP 76
19895: AND
19896: IFFALSE 20017
19898: GO 19900
19900: DISABLE
19901: LD_INT 0
19903: PPUSH
19904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19905: LD_ADDR_VAR 0 2
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 3
19934: PUSH
19935: LD_INT 23
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 69
19958: ST_TO_ADDR
// if not tmp then
19959: LD_VAR 0 2
19963: NOT
19964: IFFALSE 19968
// exit ;
19966: GO 20017
// for i in tmp do
19968: LD_ADDR_VAR 0 1
19972: PUSH
19973: LD_VAR 0 2
19977: PUSH
19978: FOR_IN
19979: IFFALSE 20015
// begin if Crawls ( i ) then
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL_OW 318
19990: IFFALSE 20001
// ComWalk ( i ) ;
19992: LD_VAR 0 1
19996: PPUSH
19997: CALL_OW 138
// SetClass ( i , 2 ) ;
20001: LD_VAR 0 1
20005: PPUSH
20006: LD_INT 2
20008: PPUSH
20009: CALL_OW 336
// end ;
20013: GO 19978
20015: POP
20016: POP
// end ;
20017: PPOPN 2
20019: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20020: LD_EXP 24
20024: PUSH
20025: LD_EXP 77
20029: AND
20030: IFFALSE 20311
20032: GO 20034
20034: DISABLE
20035: LD_INT 0
20037: PPUSH
20038: PPUSH
20039: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20040: LD_OWVAR 2
20044: PPUSH
20045: LD_INT 9
20047: PPUSH
20048: LD_INT 1
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20058: LD_INT 9
20060: PPUSH
20061: LD_OWVAR 2
20065: PPUSH
20066: CALL_OW 343
// uc_side := 9 ;
20070: LD_ADDR_OWVAR 20
20074: PUSH
20075: LD_INT 9
20077: ST_TO_ADDR
// uc_nation := 2 ;
20078: LD_ADDR_OWVAR 21
20082: PUSH
20083: LD_INT 2
20085: ST_TO_ADDR
// hc_name := Dark Warrior ;
20086: LD_ADDR_OWVAR 26
20090: PUSH
20091: LD_STRING Dark Warrior
20093: ST_TO_ADDR
// hc_gallery :=  ;
20094: LD_ADDR_OWVAR 33
20098: PUSH
20099: LD_STRING 
20101: ST_TO_ADDR
// hc_noskilllimit := true ;
20102: LD_ADDR_OWVAR 76
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20110: LD_ADDR_OWVAR 31
20114: PUSH
20115: LD_INT 30
20117: PUSH
20118: LD_INT 30
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 30
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: ST_TO_ADDR
// un := CreateHuman ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: CALL_OW 44
20142: ST_TO_ADDR
// hc_noskilllimit := false ;
20143: LD_ADDR_OWVAR 76
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 1
20158: PPUSH
20159: CALL_OW 51
// p := 0 ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20171: LD_INT 35
20173: PPUSH
20174: CALL_OW 67
// p := p + 1 ;
20178: LD_ADDR_VAR 0 2
20182: PUSH
20183: LD_VAR 0 2
20187: PUSH
20188: LD_INT 1
20190: PLUS
20191: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20192: LD_VAR 0 3
20196: PPUSH
20197: CALL_OW 256
20201: PUSH
20202: LD_INT 1000
20204: LESS
20205: IFFALSE 20219
// SetLives ( un , 1000 ) ;
20207: LD_VAR 0 3
20211: PPUSH
20212: LD_INT 1000
20214: PPUSH
20215: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20219: LD_VAR 0 3
20223: PPUSH
20224: LD_INT 81
20226: PUSH
20227: LD_OWVAR 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 91
20238: PUSH
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 30
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PPUSH
20256: CALL_OW 69
20260: PPUSH
20261: LD_VAR 0 3
20265: PPUSH
20266: CALL_OW 74
20270: PPUSH
20271: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20275: LD_VAR 0 2
20279: PUSH
20280: LD_INT 60
20282: GREATER
20283: PUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: CALL_OW 301
20293: OR
20294: IFFALSE 20171
// if un then
20296: LD_VAR 0 3
20300: IFFALSE 20311
// RemoveUnit ( un ) ;
20302: LD_VAR 0 3
20306: PPUSH
20307: CALL_OW 64
// end ; end_of_file end_of_file
20311: PPOPN 3
20313: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20314: LD_INT 0
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20320: LD_VAR 0 1
20324: PPUSH
20325: CALL_OW 264
20329: PUSH
20330: LD_EXP 82
20334: EQUAL
20335: IFFALSE 20407
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20337: LD_INT 68
20339: PPUSH
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL_OW 255
20349: PPUSH
20350: CALL_OW 321
20354: PUSH
20355: LD_INT 2
20357: EQUAL
20358: IFFALSE 20370
// eff := 70 else
20360: LD_ADDR_VAR 0 4
20364: PUSH
20365: LD_INT 70
20367: ST_TO_ADDR
20368: GO 20378
// eff := 30 ;
20370: LD_ADDR_VAR 0 4
20374: PUSH
20375: LD_INT 30
20377: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 250
20387: PPUSH
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 251
20397: PPUSH
20398: LD_VAR 0 4
20402: PPUSH
20403: CALL_OW 495
// end ; end ;
20407: LD_VAR 0 2
20411: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20412: LD_INT 0
20414: PPUSH
// end ;
20415: LD_VAR 0 4
20419: RET
// export function SOS_Command ( cmd ) ; begin
20420: LD_INT 0
20422: PPUSH
// end ;
20423: LD_VAR 0 2
20427: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20428: LD_VAR 0 1
20432: PUSH
20433: LD_INT 255
20435: EQUAL
20436: PUSH
20437: LD_VAR 0 2
20441: PPUSH
20442: CALL_OW 264
20446: PUSH
20447: LD_INT 14
20449: PUSH
20450: LD_INT 53
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: IN
20457: AND
20458: PUSH
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: CALL_OW 488
20473: AND
20474: IFFALSE 20498
// CutTreeXYR ( unit , x , y , 12 ) ;
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_VAR 0 4
20485: PPUSH
20486: LD_VAR 0 5
20490: PPUSH
20491: LD_INT 12
20493: PPUSH
20494: CALL 20501 0 4
// end ;
20498: PPOPN 5
20500: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20512: LD_VAR 0 1
20516: NOT
20517: PUSH
20518: LD_VAR 0 2
20522: PPUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: CALL_OW 488
20532: NOT
20533: OR
20534: PUSH
20535: LD_VAR 0 4
20539: NOT
20540: OR
20541: IFFALSE 20545
// exit ;
20543: GO 20885
// list := [ ] ;
20545: LD_ADDR_VAR 0 13
20549: PUSH
20550: EMPTY
20551: ST_TO_ADDR
// if x - r < 0 then
20552: LD_VAR 0 2
20556: PUSH
20557: LD_VAR 0 4
20561: MINUS
20562: PUSH
20563: LD_INT 0
20565: LESS
20566: IFFALSE 20578
// min_x := 0 else
20568: LD_ADDR_VAR 0 7
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
20576: GO 20594
// min_x := x - r ;
20578: LD_ADDR_VAR 0 7
20582: PUSH
20583: LD_VAR 0 2
20587: PUSH
20588: LD_VAR 0 4
20592: MINUS
20593: ST_TO_ADDR
// if y - r < 0 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_VAR 0 4
20603: MINUS
20604: PUSH
20605: LD_INT 0
20607: LESS
20608: IFFALSE 20620
// min_y := 0 else
20610: LD_ADDR_VAR 0 8
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
20618: GO 20636
// min_y := y - r ;
20620: LD_ADDR_VAR 0 8
20624: PUSH
20625: LD_VAR 0 3
20629: PUSH
20630: LD_VAR 0 4
20634: MINUS
20635: ST_TO_ADDR
// max_x := x + r ;
20636: LD_ADDR_VAR 0 9
20640: PUSH
20641: LD_VAR 0 2
20645: PUSH
20646: LD_VAR 0 4
20650: PLUS
20651: ST_TO_ADDR
// max_y := y + r ;
20652: LD_ADDR_VAR 0 10
20656: PUSH
20657: LD_VAR 0 3
20661: PUSH
20662: LD_VAR 0 4
20666: PLUS
20667: ST_TO_ADDR
// for _x = min_x to max_x do
20668: LD_ADDR_VAR 0 11
20672: PUSH
20673: DOUBLE
20674: LD_VAR 0 7
20678: DEC
20679: ST_TO_ADDR
20680: LD_VAR 0 9
20684: PUSH
20685: FOR_TO
20686: IFFALSE 20803
// for _y = min_y to max_y do
20688: LD_ADDR_VAR 0 12
20692: PUSH
20693: DOUBLE
20694: LD_VAR 0 8
20698: DEC
20699: ST_TO_ADDR
20700: LD_VAR 0 10
20704: PUSH
20705: FOR_TO
20706: IFFALSE 20799
// begin if not ValidHex ( _x , _y ) then
20708: LD_VAR 0 11
20712: PPUSH
20713: LD_VAR 0 12
20717: PPUSH
20718: CALL_OW 488
20722: NOT
20723: IFFALSE 20727
// continue ;
20725: GO 20705
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20727: LD_VAR 0 11
20731: PPUSH
20732: LD_VAR 0 12
20736: PPUSH
20737: CALL_OW 351
20741: PUSH
20742: LD_VAR 0 11
20746: PPUSH
20747: LD_VAR 0 12
20751: PPUSH
20752: CALL_OW 554
20756: AND
20757: IFFALSE 20797
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20759: LD_ADDR_VAR 0 13
20763: PUSH
20764: LD_VAR 0 13
20768: PPUSH
20769: LD_VAR 0 13
20773: PUSH
20774: LD_INT 1
20776: PLUS
20777: PPUSH
20778: LD_VAR 0 11
20782: PUSH
20783: LD_VAR 0 12
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PPUSH
20792: CALL_OW 2
20796: ST_TO_ADDR
// end ;
20797: GO 20705
20799: POP
20800: POP
20801: GO 20685
20803: POP
20804: POP
// if not list then
20805: LD_VAR 0 13
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 20885
// for i in list do
20814: LD_ADDR_VAR 0 6
20818: PUSH
20819: LD_VAR 0 13
20823: PUSH
20824: FOR_IN
20825: IFFALSE 20883
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_STRING M
20834: PUSH
20835: LD_VAR 0 6
20839: PUSH
20840: LD_INT 1
20842: ARRAY
20843: PUSH
20844: LD_VAR 0 6
20848: PUSH
20849: LD_INT 2
20851: ARRAY
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: PPUSH
20877: CALL_OW 447
20881: GO 20824
20883: POP
20884: POP
// end ; end_of_file
20885: LD_VAR 0 5
20889: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
20890: GO 20892
20892: DISABLE
// begin ru_radar := 98 ;
20893: LD_ADDR_EXP 78
20897: PUSH
20898: LD_INT 98
20900: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20901: LD_ADDR_EXP 79
20905: PUSH
20906: LD_INT 89
20908: ST_TO_ADDR
// us_hack := 99 ;
20909: LD_ADDR_EXP 80
20913: PUSH
20914: LD_INT 99
20916: ST_TO_ADDR
// us_artillery := 97 ;
20917: LD_ADDR_EXP 81
20921: PUSH
20922: LD_INT 97
20924: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20925: LD_ADDR_EXP 82
20929: PUSH
20930: LD_INT 91
20932: ST_TO_ADDR
// tech_Artillery := 80 ;
20933: LD_ADDR_EXP 83
20937: PUSH
20938: LD_INT 80
20940: ST_TO_ADDR
// tech_RadMat := 81 ;
20941: LD_ADDR_EXP 84
20945: PUSH
20946: LD_INT 81
20948: ST_TO_ADDR
// tech_BasicTools := 82 ;
20949: LD_ADDR_EXP 85
20953: PUSH
20954: LD_INT 82
20956: ST_TO_ADDR
// tech_Cargo := 83 ;
20957: LD_ADDR_EXP 86
20961: PUSH
20962: LD_INT 83
20964: ST_TO_ADDR
// tech_Track := 84 ;
20965: LD_ADDR_EXP 87
20969: PUSH
20970: LD_INT 84
20972: ST_TO_ADDR
// tech_Crane := 85 ;
20973: LD_ADDR_EXP 88
20977: PUSH
20978: LD_INT 85
20980: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20981: LD_ADDR_EXP 89
20985: PUSH
20986: LD_INT 86
20988: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20989: LD_ADDR_EXP 90
20993: PUSH
20994: LD_INT 87
20996: ST_TO_ADDR
// end ;
20997: END
