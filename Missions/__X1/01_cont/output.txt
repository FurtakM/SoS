// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 2 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 0
  22: PPUSH
  23: LD_INT 0
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 2
  34: PPUSH
  35: LD_INT 7
  37: PPUSH
  38: LD_INT 6
  40: PPUSH
  41: CALL 210 0 10
// InitVariables ;
  45: CALL 66 0 0
// PrepareRussian ;
  49: CALL 1454 0 0
// PrepareArabian ;
  53: CALL 1024 0 0
// PrepareHeike ;
  57: CALL 959 0 0
// Action ;
  61: CALL 2991 0 0
// end ;
  65: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// missionStarted := false ;
  77: LD_ADDR_EXP 1
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// meetJohnny := false ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// johnnySaved := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// dogTag := [ ] ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: EMPTY
 107: ST_TO_ADDR
// dogTagFound := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// mercenariesSpotted := false ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// olafSpotted := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// russianSpotted := false ;
 132: LD_ADDR_EXP 9
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// mercenariesQuestReady := false ;
 140: LD_ADDR_EXP 10
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// mercenariesQuestDone := false ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// lastObjectiveActive := false ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// prisonFound := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// heikeHurt := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// animalCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// end ;
 188: LD_VAR 0 1
 192: RET
// every 0 0$1 trigger debug do
 193: LD_EXP 2
 197: IFFALSE 209
 199: GO 201
 201: DISABLE
// FogOff ( 2 ) ; end_of_file
 202: LD_INT 2
 204: PPUSH
 205: CALL_OW 344
 209: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
 214: PPUSH
// uc_side = 0 ;
 215: LD_ADDR_OWVAR 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// uc_nation = 0 ;
 223: LD_ADDR_OWVAR 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// InitHc ;
 231: CALL_OW 19
// InitVc ;
 235: CALL_OW 20
// if mastodonts then
 239: LD_VAR 0 6
 243: IFFALSE 310
// for i = 1 to mastodonts do
 245: LD_ADDR_VAR 0 12
 249: PUSH
 250: DOUBLE
 251: LD_INT 1
 253: DEC
 254: ST_TO_ADDR
 255: LD_VAR 0 6
 259: PUSH
 260: FOR_TO
 261: IFFALSE 308
// begin vc_chassis := 31 ;
 263: LD_ADDR_OWVAR 37
 267: PUSH
 268: LD_INT 31
 270: ST_TO_ADDR
// vc_control := control_rider ;
 271: LD_ADDR_OWVAR 38
 275: PUSH
 276: LD_INT 4
 278: ST_TO_ADDR
// animal := CreateVehicle ;
 279: LD_ADDR_VAR 0 13
 283: PUSH
 284: CALL_OW 45
 288: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 289: LD_VAR 0 13
 293: PPUSH
 294: LD_VAR 0 9
 298: PPUSH
 299: LD_INT 0
 301: PPUSH
 302: CALL_OW 49
// end ;
 306: GO 260
 308: POP
 309: POP
// if horses then
 310: LD_VAR 0 5
 314: IFFALSE 381
// for i = 1 to horses do
 316: LD_ADDR_VAR 0 12
 320: PUSH
 321: DOUBLE
 322: LD_INT 1
 324: DEC
 325: ST_TO_ADDR
 326: LD_VAR 0 5
 330: PUSH
 331: FOR_TO
 332: IFFALSE 379
// begin hc_class := 21 ;
 334: LD_ADDR_OWVAR 28
 338: PUSH
 339: LD_INT 21
 341: ST_TO_ADDR
// hc_gallery :=  ;
 342: LD_ADDR_OWVAR 33
 346: PUSH
 347: LD_STRING 
 349: ST_TO_ADDR
// animal := CreateHuman ;
 350: LD_ADDR_VAR 0 13
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 360: LD_VAR 0 13
 364: PPUSH
 365: LD_VAR 0 9
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// end ;
 377: GO 331
 379: POP
 380: POP
// if birds then
 381: LD_VAR 0 1
 385: IFFALSE 452
// for i = 1 to birds do
 387: LD_ADDR_VAR 0 12
 391: PUSH
 392: DOUBLE
 393: LD_INT 1
 395: DEC
 396: ST_TO_ADDR
 397: LD_VAR 0 1
 401: PUSH
 402: FOR_TO
 403: IFFALSE 450
// begin hc_class = 18 ;
 405: LD_ADDR_OWVAR 28
 409: PUSH
 410: LD_INT 18
 412: ST_TO_ADDR
// hc_gallery =  ;
 413: LD_ADDR_OWVAR 33
 417: PUSH
 418: LD_STRING 
 420: ST_TO_ADDR
// animal := CreateHuman ;
 421: LD_ADDR_VAR 0 13
 425: PUSH
 426: CALL_OW 44
 430: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 431: LD_VAR 0 13
 435: PPUSH
 436: LD_VAR 0 9
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 402
 450: POP
 451: POP
// if tigers then
 452: LD_VAR 0 2
 456: IFFALSE 540
// for i = 1 to tigers do
 458: LD_ADDR_VAR 0 12
 462: PUSH
 463: DOUBLE
 464: LD_INT 1
 466: DEC
 467: ST_TO_ADDR
 468: LD_VAR 0 2
 472: PUSH
 473: FOR_TO
 474: IFFALSE 538
// begin hc_class = class_tiger ;
 476: LD_ADDR_OWVAR 28
 480: PUSH
 481: LD_INT 14
 483: ST_TO_ADDR
// hc_gallery =  ;
 484: LD_ADDR_OWVAR 33
 488: PUSH
 489: LD_STRING 
 491: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 492: LD_ADDR_OWVAR 35
 496: PUSH
 497: LD_INT 7
 499: NEG
 500: PPUSH
 501: LD_INT 7
 503: PPUSH
 504: CALL_OW 12
 508: ST_TO_ADDR
// animal := CreateHuman ;
 509: LD_ADDR_VAR 0 13
 513: PUSH
 514: CALL_OW 44
 518: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 519: LD_VAR 0 13
 523: PPUSH
 524: LD_VAR 0 9
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// end ;
 536: GO 473
 538: POP
 539: POP
// if apemans then
 540: LD_VAR 0 3
 544: IFFALSE 667
// for i = 1 to apemans do
 546: LD_ADDR_VAR 0 12
 550: PUSH
 551: DOUBLE
 552: LD_INT 1
 554: DEC
 555: ST_TO_ADDR
 556: LD_VAR 0 3
 560: PUSH
 561: FOR_TO
 562: IFFALSE 665
// begin hc_class = class_apeman ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 12
 571: ST_TO_ADDR
// hc_gallery =  ;
 572: LD_ADDR_OWVAR 33
 576: PUSH
 577: LD_STRING 
 579: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 580: LD_ADDR_OWVAR 35
 584: PUSH
 585: LD_INT 5
 587: NEG
 588: PPUSH
 589: LD_INT 5
 591: PPUSH
 592: CALL_OW 12
 596: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 597: LD_ADDR_OWVAR 31
 601: PUSH
 602: LD_INT 1
 604: PPUSH
 605: LD_INT 3
 607: PPUSH
 608: CALL_OW 12
 612: PUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 12
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// animal := CreateHuman ;
 636: LD_ADDR_VAR 0 13
 640: PUSH
 641: CALL_OW 44
 645: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 646: LD_VAR 0 13
 650: PPUSH
 651: LD_VAR 0 9
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 49
// end ;
 663: GO 561
 665: POP
 666: POP
// if enchidnas then
 667: LD_VAR 0 4
 671: IFFALSE 738
// for i = 1 to enchidnas do
 673: LD_ADDR_VAR 0 12
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 4
 687: PUSH
 688: FOR_TO
 689: IFFALSE 736
// begin hc_class = 13 ;
 691: LD_ADDR_OWVAR 28
 695: PUSH
 696: LD_INT 13
 698: ST_TO_ADDR
// hc_gallery =  ;
 699: LD_ADDR_OWVAR 33
 703: PUSH
 704: LD_STRING 
 706: ST_TO_ADDR
// animal := CreateHuman ;
 707: LD_ADDR_VAR 0 13
 711: PUSH
 712: CALL_OW 44
 716: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 717: LD_VAR 0 13
 721: PPUSH
 722: LD_VAR 0 9
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// end ;
 734: GO 688
 736: POP
 737: POP
// if fishes then
 738: LD_VAR 0 7
 742: IFFALSE 809
// for i = 1 to fishes do
 744: LD_ADDR_VAR 0 12
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 7
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin hc_class = class_fish ;
 762: LD_ADDR_OWVAR 28
 766: PUSH
 767: LD_INT 20
 769: ST_TO_ADDR
// hc_gallery =  ;
 770: LD_ADDR_OWVAR 33
 774: PUSH
 775: LD_STRING 
 777: ST_TO_ADDR
// animal := CreateHuman ;
 778: LD_ADDR_VAR 0 13
 782: PUSH
 783: CALL_OW 44
 787: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 788: LD_VAR 0 13
 792: PPUSH
 793: LD_VAR 0 10
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 759
 807: POP
 808: POP
// if frogs then
 809: LD_VAR 0 8
 813: IFFALSE 880
// for i := 1 to frogs do
 815: LD_ADDR_VAR 0 12
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 8
 829: PUSH
 830: FOR_TO
 831: IFFALSE 878
// begin hc_class := class_frog ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 19
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// animal := CreateHuman ;
 849: LD_ADDR_VAR 0 13
 853: PUSH
 854: CALL_OW 44
 858: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 859: LD_VAR 0 13
 863: PPUSH
 864: LD_VAR 0 10
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ;
 876: GO 830
 878: POP
 879: POP
// end ;
 880: LD_VAR 0 11
 884: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// if not observer or not unit then
 890: LD_VAR 0 1
 894: NOT
 895: PUSH
 896: LD_VAR 0 2
 900: NOT
 901: OR
 902: IFFALSE 906
// exit ;
 904: GO 954
// if not See ( GetSide ( observer ) , unit ) then
 906: LD_VAR 0 1
 910: PPUSH
 911: CALL_OW 255
 915: PPUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: CALL_OW 292
 925: NOT
 926: IFFALSE 930
// exit ;
 928: GO 954
// result := GetDistUnits ( observer , unit ) < 12 ;
 930: LD_ADDR_VAR 0 3
 934: PUSH
 935: LD_VAR 0 1
 939: PPUSH
 940: LD_VAR 0 2
 944: PPUSH
 945: CALL_OW 296
 949: PUSH
 950: LD_INT 12
 952: LESS
 953: ST_TO_ADDR
// end ; end_of_file
 954: LD_VAR 0 3
 958: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 959: LD_INT 0
 961: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 962: LD_INT 66
 964: PPUSH
 965: LD_INT 26
 967: PPUSH
 968: CALL_OW 86
// uc_side := 2 ;
 972: LD_ADDR_OWVAR 20
 976: PUSH
 977: LD_INT 2
 979: ST_TO_ADDR
// uc_nation := 2 ;
 980: LD_ADDR_OWVAR 21
 984: PUSH
 985: LD_INT 2
 987: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 988: LD_ADDR_EXP 16
 992: PUSH
 993: LD_STRING Heike
 995: PPUSH
 996: CALL_OW 25
1000: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
1001: LD_EXP 16
1005: PPUSH
1006: LD_INT 66
1008: PPUSH
1009: LD_INT 26
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 48
// end ;
1019: LD_VAR 0 1
1023: RET
// export function PrepareArabian ; begin
1024: LD_INT 0
1026: PPUSH
// uc_side := 5 ;
1027: LD_ADDR_OWVAR 20
1031: PUSH
1032: LD_INT 5
1034: ST_TO_ADDR
// uc_nation := 2 ;
1035: LD_ADDR_OWVAR 21
1039: PUSH
1040: LD_INT 2
1042: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1043: LD_ADDR_EXP 17
1047: PUSH
1048: LD_STRING Olaf
1050: PPUSH
1051: CALL_OW 25
1055: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1056: LD_EXP 17
1060: PPUSH
1061: LD_INT 39
1063: PPUSH
1064: LD_INT 52
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_STRING Givi
1081: PPUSH
1082: CALL_OW 25
1086: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1087: LD_EXP 18
1091: PPUSH
1092: LD_INT 55
1094: PPUSH
1095: LD_INT 90
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1105: LD_EXP 18
1109: PPUSH
1110: LD_INT 53
1112: PPUSH
1113: LD_INT 89
1115: PPUSH
1116: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1120: LD_ADDR_EXP 19
1124: PUSH
1125: LD_STRING Mike
1127: PPUSH
1128: CALL_OW 25
1132: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1133: LD_EXP 19
1137: PPUSH
1138: LD_INT 53
1140: PPUSH
1141: LD_INT 87
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1151: LD_EXP 19
1155: PPUSH
1156: LD_INT 53
1158: PPUSH
1159: LD_INT 89
1161: PPUSH
1162: CALL_OW 118
// end ;
1166: LD_VAR 0 1
1170: RET
// export function PreparePrison ; begin
1171: LD_INT 0
1173: PPUSH
// uc_side := 5 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 5
1181: ST_TO_ADDR
// uc_nation := 2 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 2
1189: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1190: LD_ADDR_EXP 20
1194: PUSH
1195: LD_STRING Kamil
1197: PPUSH
1198: CALL_OW 25
1202: ST_TO_ADDR
// if Difficulty > 1 then
1203: LD_OWVAR 67
1207: PUSH
1208: LD_INT 1
1210: GREATER
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PUSH
2916: LD_OWVAR 67
2920: ARRAY
2921: ST_TO_ADDR
// veh := CreateVehicle ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: CALL_OW 45
2931: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 31
2951: PPUSH
2952: LD_INT 58
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 52
// result := un ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_VAR 0 3
2985: ST_TO_ADDR
// end ; end_of_file
2986: LD_VAR 0 1
2990: RET
// export function Action ; begin
2991: LD_INT 0
2993: PPUSH
// InGameOn ;
2994: CALL_OW 8
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3005: LD_EXP 16
3009: PPUSH
3010: LD_STRING DH-start-1
3012: PPUSH
3013: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3017: LD_EXP 16
3021: PPUSH
3022: LD_INT 71
3024: PPUSH
3025: LD_INT 29
3027: PPUSH
3028: CALL_OW 111
// wait ( 0 0$4 ) ;
3032: LD_INT 140
3034: PPUSH
3035: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3039: LD_EXP 16
3043: PPUSH
3044: LD_INT 71
3046: PPUSH
3047: LD_INT 33
3049: PPUSH
3050: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3054: LD_EXP 16
3058: PPUSH
3059: LD_INT 71
3061: PPUSH
3062: LD_INT 34
3064: PPUSH
3065: CALL_OW 178
// wait ( 0 0$4 ) ;
3069: LD_INT 140
3071: PPUSH
3072: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3076: LD_EXP 16
3080: PPUSH
3081: LD_STRING DH-start-2
3083: PPUSH
3084: CALL_OW 88
// wait ( 0 0$4 ) ;
3088: LD_INT 140
3090: PPUSH
3091: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3095: LD_EXP 16
3099: PPUSH
3100: LD_INT 65
3102: PPUSH
3103: LD_INT 26
3105: PPUSH
3106: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3110: LD_EXP 16
3114: PPUSH
3115: LD_STRING DH-start-3
3117: PPUSH
3118: CALL_OW 88
// InGameOff ;
3122: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3126: LD_STRING O1_cont
3128: PPUSH
3129: CALL_OW 337
// SaveForQuickRestart ;
3133: CALL_OW 22
// missionStarted := true ;
3137: LD_ADDR_EXP 1
3141: PUSH
3142: LD_INT 1
3144: ST_TO_ADDR
// PrepareJohnny ;
3145: CALL 2748 0 0
// end ;
3149: LD_VAR 0 1
3153: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3154: LD_EXP 8
3158: NOT
3159: PUSH
3160: LD_EXP 7
3164: NOT
3165: AND
3166: PUSH
3167: LD_INT 2
3169: PPUSH
3170: LD_EXP 25
3174: PPUSH
3175: CALL_OW 292
3179: AND
3180: PUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: CALL_OW 292
3193: NOT
3194: AND
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 69
3210: PPUSH
3211: LD_EXP 16
3215: PPUSH
3216: CALL_OW 74
3220: PUSH
3221: LD_EXP 25
3225: EQUAL
3226: AND
3227: PUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 2
3233: PPUSH
3234: CALL_OW 81
3238: PUSH
3239: LD_INT 0
3241: EQUAL
3242: AND
3243: IFFALSE 4174
3245: GO 3247
3247: DISABLE
// begin InGameOn ;
3248: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3252: LD_EXP 16
3256: PPUSH
3257: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3261: LD_EXP 25
3265: PPUSH
3266: LD_STRING DJ-ambush-1
3268: PPUSH
3269: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3273: LD_INT 10
3275: PPUSH
3276: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3280: LD_EXP 16
3284: PPUSH
3285: LD_EXP 25
3289: PPUSH
3290: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3294: LD_EXP 16
3298: PPUSH
3299: LD_STRING DH-ambush-1
3301: PPUSH
3302: CALL_OW 88
// wait ( 0 0$1 ) ;
3306: LD_INT 35
3308: PPUSH
3309: CALL_OW 67
// ComWalk ( Johnny ) ;
3313: LD_EXP 25
3317: PPUSH
3318: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3322: LD_EXP 25
3326: PPUSH
3327: LD_EXP 16
3331: PPUSH
3332: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3336: LD_INT 35
3338: PPUSH
3339: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3343: LD_EXP 25
3347: PPUSH
3348: LD_EXP 16
3352: PPUSH
3353: CALL_OW 296
3357: PUSH
3358: LD_INT 4
3360: LESS
3361: IFFALSE 3336
// ComTurnUnit ( Johnny , Heike ) ;
3363: LD_EXP 25
3367: PPUSH
3368: LD_EXP 16
3372: PPUSH
3373: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3377: LD_EXP 25
3381: PPUSH
3382: LD_STRING DJ-ambush-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3389: LD_EXP 16
3393: PPUSH
3394: LD_STRING DH-ambush-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3401: LD_EXP 25
3405: PPUSH
3406: LD_STRING DJ-ambush-3
3408: PPUSH
3409: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3413: LD_EXP 16
3417: PPUSH
3418: LD_STRING DH-ambush-3
3420: PPUSH
3421: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3425: LD_EXP 25
3429: PPUSH
3430: LD_STRING DJ-ambush-4
3432: PPUSH
3433: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3437: LD_EXP 16
3441: PPUSH
3442: LD_INT 39
3444: PPUSH
3445: LD_INT 22
3447: PPUSH
3448: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3452: LD_EXP 16
3456: PPUSH
3457: LD_STRING DH-ambush-4
3459: PPUSH
3460: CALL_OW 88
// PrepareRussianPatrol ;
3464: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3468: LD_INT 39
3470: PPUSH
3471: LD_INT 22
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 12
3479: NEG
3480: PPUSH
3481: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3485: LD_INT 39
3487: PPUSH
3488: LD_INT 22
3490: PPUSH
3491: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3495: LD_EXP 21
3499: PPUSH
3500: LD_INT 39
3502: PPUSH
3503: LD_INT 23
3505: PPUSH
3506: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3510: LD_EXP 16
3514: PUSH
3515: LD_EXP 25
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_INT 39
3526: PPUSH
3527: LD_INT 7
3529: PPUSH
3530: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3534: LD_EXP 16
3538: PUSH
3539: LD_EXP 25
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: LD_EXP 21
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3561: LD_EXP 21
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: LD_STRING DR-ambush-5
3572: PPUSH
3573: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3577: LD_EXP 21
3581: PUSH
3582: LD_INT 2
3584: ARRAY
3585: PPUSH
3586: LD_STRING DR1-ambush-5
3588: PPUSH
3589: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3600: LD_EXP 16
3604: PPUSH
3605: LD_INT 39
3607: PPUSH
3608: LD_INT 7
3610: PPUSH
3611: CALL_OW 297
3615: PUSH
3616: LD_INT 6
3618: LESS
3619: IFFALSE 3593
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3621: LD_EXP 16
3625: PPUSH
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_EXP 16
3648: PPUSH
3649: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3653: LD_EXP 25
3657: PPUSH
3658: LD_STRING DJ-ambush-6
3660: PPUSH
3661: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3665: LD_EXP 16
3669: PPUSH
3670: LD_STRING DH-ambush-6
3672: PPUSH
3673: CALL_OW 88
// InGameOff ;
3677: CALL_OW 9
// meetJohnny := true ;
3681: LD_ADDR_EXP 3
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
// ComFree ( Johnny ) ;
3689: LD_EXP 25
3693: PPUSH
3694: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3698: LD_STRING O2_ambush_cont
3700: PPUSH
3701: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3705: LD_EXP 21
3709: PUSH
3710: LD_EXP 21
3714: ARRAY
3715: PPUSH
3716: LD_INT 29
3718: PPUSH
3719: LD_INT 15
3721: PPUSH
3722: CALL_OW 111
// wait ( 0 0$2 ) ;
3726: LD_INT 70
3728: PPUSH
3729: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3733: LD_INT 3
3735: PPUSH
3736: LD_EXP 16
3740: PPUSH
3741: CALL_OW 292
3745: NOT
3746: PUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_EXP 25
3754: PPUSH
3755: CALL_OW 292
3759: NOT
3760: AND
3761: IFFALSE 3782
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3763: LD_EXP 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_INT 58
3774: PPUSH
3775: LD_INT 32
3777: PPUSH
3778: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3782: LD_INT 1750
3784: PUSH
3785: LD_INT 1400
3787: PUSH
3788: LD_INT 1225
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3806: LD_EXP 21
3810: PPUSH
3811: LD_INT 43
3813: PPUSH
3814: LD_INT 13
3816: PPUSH
3817: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3821: LD_INT 35
3823: PPUSH
3824: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3828: LD_EXP 21
3832: NOT
3833: PUSH
3834: LD_EXP 25
3838: PPUSH
3839: CALL_OW 302
3843: NOT
3844: OR
3845: IFFALSE 3821
// RemoveSeeing ( 39 , 22 , 2 ) ;
3847: LD_INT 39
3849: PPUSH
3850: LD_INT 22
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 81
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3878
// exit ;
3876: GO 4174
// if not IsOk ( Johnny ) then
3878: LD_EXP 25
3882: PPUSH
3883: CALL_OW 302
3887: NOT
3888: IFFALSE 3899
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3890: LD_STRING O2_ambush_out_cont
3892: PPUSH
3893: CALL_OW 337
// exit ;
3897: GO 4174
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3899: LD_EXP 16
3903: PPUSH
3904: LD_EXP 25
3908: PPUSH
3909: CALL_OW 296
3913: PUSH
3914: LD_INT 10
3916: GREATER
3917: IFFALSE 3960
// begin ComMoveUnit ( Johnny , Heike ) ;
3919: LD_EXP 25
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3933: LD_INT 35
3935: PPUSH
3936: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3940: LD_EXP 25
3944: PPUSH
3945: LD_EXP 16
3949: PPUSH
3950: CALL_OW 296
3954: PUSH
3955: LD_INT 6
3957: LESS
3958: IFFALSE 3933
// end ; CenterNowOnUnits ( Heike ) ;
3960: LD_EXP 16
3964: PPUSH
3965: CALL_OW 87
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 25
3982: PPUSH
3983: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3987: LD_EXP 25
3991: PPUSH
3992: LD_EXP 16
3996: PPUSH
3997: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4001: LD_EXP 25
4005: PPUSH
4006: LD_STRING DJ-thanks-1
4008: PPUSH
4009: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_STRING DH-thanks-1
4020: PPUSH
4021: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4025: LD_EXP 25
4029: PPUSH
4030: LD_STRING DJ-thanks-2
4032: PPUSH
4033: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4037: LD_EXP 25
4041: PPUSH
4042: LD_INT 4
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 111
// wait ( 0 0$1 ) ;
4052: LD_INT 35
4054: PPUSH
4055: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4059: LD_EXP 16
4063: PPUSH
4064: LD_STRING DH-thanks-2
4066: PPUSH
4067: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4071: LD_INT 35
4073: PPUSH
4074: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4078: LD_INT 2
4080: PPUSH
4081: LD_EXP 25
4085: PPUSH
4086: CALL_OW 292
4090: NOT
4091: IFFALSE 4071
// Say ( Heike , DH-thanks-2a ) ;
4093: LD_EXP 16
4097: PPUSH
4098: LD_STRING DH-thanks-2a
4100: PPUSH
4101: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4105: LD_EXP 25
4109: PPUSH
4110: CALL_OW 64
// InGameOff ;
4114: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4118: LD_STRING O2_ambush_out_cont
4120: PPUSH
4121: CALL_OW 337
// johnnySaved := true ;
4125: LD_ADDR_EXP 4
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 600
4143: PPUSH
4144: CALL_OW 492
// if IsOk ( Olaf ) then
4148: LD_EXP 17
4152: PPUSH
4153: CALL_OW 302
4157: IFFALSE 4174
// ComMoveXY ( Olaf , 44 , 25 ) ;
4159: LD_EXP 17
4163: PPUSH
4164: LD_INT 44
4166: PPUSH
4167: LD_INT 25
4169: PPUSH
4170: CALL_OW 111
// end ;
4174: END
// every 0 0$1 trigger russianPatrol do var i ;
4175: LD_EXP 21
4179: IFFALSE 4247
4181: GO 4183
4183: DISABLE
4184: LD_INT 0
4186: PPUSH
// begin enable ;
4187: ENABLE
// for i in russianPatrol do
4188: LD_ADDR_VAR 0 1
4192: PUSH
4193: LD_EXP 21
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4245
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4201: LD_VAR 0 1
4205: PPUSH
4206: CALL_OW 256
4210: PUSH
4211: LD_INT 1000
4213: LESS
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 314
4224: NOT
4225: AND
4226: IFFALSE 4243
// ComAgressiveMove ( i , 42 , 12 ) ;
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_INT 42
4235: PPUSH
4236: LD_INT 12
4238: PPUSH
4239: CALL_OW 114
4243: GO 4198
4245: POP
4246: POP
// end ;
4247: PPOPN 1
4249: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4250: LD_INT 1
4252: PPUSH
4253: LD_INT 2
4255: PPUSH
4256: CALL_OW 81
4260: PUSH
4261: LD_INT 2
4263: EQUAL
4264: PUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 302
4274: AND
4275: IFFALSE 4292
4277: GO 4279
4279: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4280: LD_EXP 25
4284: PPUSH
4285: LD_STRING DJ-fire-1
4287: PPUSH
4288: CALL_OW 88
4292: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4293: LD_EXP 7
4297: NOT
4298: PUSH
4299: LD_EXP 23
4303: PPUSH
4304: LD_INT 101
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 72
4318: AND
4319: IFFALSE 4439
4321: GO 4323
4323: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4324: LD_EXP 16
4328: PPUSH
4329: CALL_OW 87
// DialogueOn ;
4333: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4337: LD_EXP 16
4341: PPUSH
4342: LD_STRING DH-see-enemy-patrol-1
4344: PPUSH
4345: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4349: LD_EXP 23
4353: PPUSH
4354: LD_INT 26
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 72
4368: PUSH
4369: LD_INT 1
4371: ARRAY
4372: PPUSH
4373: LD_STRING DR-see-enemy-patrol-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4384: LD_EXP 23
4388: PPUSH
4389: LD_INT 66
4391: PPUSH
4392: LD_INT 22
4394: PPUSH
4395: CALL_OW 114
// wait ( 0 0$10 ) ;
4399: LD_INT 350
4401: PPUSH
4402: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4406: LD_EXP 23
4410: PPUSH
4411: LD_INT 175
4413: PPUSH
4414: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4418: LD_EXP 23
4422: PPUSH
4423: LD_INT 9
4425: PPUSH
4426: CALL_OW 173
// AddComFree ( russianForces ) ;
4430: LD_EXP 23
4434: PPUSH
4435: CALL_OW 199
// end ;
4439: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4440: LD_EXP 23
4444: PPUSH
4445: LD_INT 3
4447: PUSH
4448: LD_INT 24
4450: PUSH
4451: LD_INT 960
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 72
4466: IFFALSE 4710
4468: GO 4470
4470: DISABLE
4471: LD_INT 0
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
// begin enable ;
4477: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 69
4497: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_EXP 23
4507: PPUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 24
4516: PUSH
4517: LD_INT 960
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 24
4526: PUSH
4527: LD_INT 500
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 72
4547: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_EXP 23
4557: PPUSH
4558: LD_INT 3
4560: PUSH
4561: LD_INT 24
4563: PUSH
4564: LD_INT 500
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 72
4579: ST_TO_ADDR
// if not tmp then
4580: LD_VAR 0 2
4584: NOT
4585: IFFALSE 4589
// exit ;
4587: GO 4710
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4589: LD_ADDR_VAR 0 2
4593: PUSH
4594: LD_VAR 0 3
4598: PUSH
4599: LD_INT 1
4601: ARRAY
4602: PPUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 74
4612: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4613: LD_VAR 0 2
4617: PPUSH
4618: LD_VAR 0 3
4622: PUSH
4623: LD_INT 1
4625: ARRAY
4626: PPUSH
4627: CALL_OW 296
4631: PUSH
4632: LD_INT 10
4634: LESS
4635: IFFALSE 4651
// ComAttackUnit ( tmp2 , tmp ) ;
4637: LD_VAR 0 3
4641: PPUSH
4642: LD_VAR 0 2
4646: PPUSH
4647: CALL_OW 115
// if tmp3 then
4651: LD_VAR 0 4
4655: IFFALSE 4710
// for i in tmp do
4657: LD_ADDR_VAR 0 1
4661: PUSH
4662: LD_VAR 0 2
4666: PUSH
4667: FOR_IN
4668: IFFALSE 4708
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4670: LD_VAR 0 1
4674: PPUSH
4675: LD_INT 119
4677: PPUSH
4678: LD_INT 21
4680: PPUSH
4681: CALL_OW 297
4685: PUSH
4686: LD_INT 10
4688: GREATER
4689: IFFALSE 4706
// ComMoveXY ( i , 119 , 21 ) ;
4691: LD_VAR 0 1
4695: PPUSH
4696: LD_INT 119
4698: PPUSH
4699: LD_INT 21
4701: PPUSH
4702: CALL_OW 111
4706: GO 4667
4708: POP
4709: POP
// end ;
4710: PPOPN 4
4712: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4713: LD_EXP 1
4717: PUSH
4718: LD_EXP 16
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 14
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 69
4737: PPUSH
4738: LD_EXP 16
4742: PPUSH
4743: CALL_OW 74
4747: PPUSH
4748: CALL_OW 296
4752: PUSH
4753: LD_INT 6
4755: LESS
4756: AND
4757: IFFALSE 4788
4759: GO 4761
4761: DISABLE
// begin animalCounter := animalCounter + 1 ;
4762: LD_ADDR_EXP 15
4766: PUSH
4767: LD_EXP 15
4771: PUSH
4772: LD_INT 1
4774: PLUS
4775: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4776: LD_EXP 16
4780: PPUSH
4781: LD_STRING DH-tiger-1
4783: PPUSH
4784: CALL_OW 88
// end ;
4788: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4789: LD_EXP 1
4793: PUSH
4794: LD_EXP 16
4798: PPUSH
4799: LD_INT 25
4801: PUSH
4802: LD_INT 12
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 69
4813: PPUSH
4814: LD_EXP 16
4818: PPUSH
4819: CALL_OW 74
4823: PPUSH
4824: CALL_OW 296
4828: PUSH
4829: LD_INT 6
4831: LESS
4832: AND
4833: IFFALSE 4864
4835: GO 4837
4837: DISABLE
// begin animalCounter := animalCounter + 1 ;
4838: LD_ADDR_EXP 15
4842: PUSH
4843: LD_EXP 15
4847: PUSH
4848: LD_INT 1
4850: PLUS
4851: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4852: LD_EXP 16
4856: PPUSH
4857: LD_STRING DH-ape-1
4859: PPUSH
4860: CALL_OW 88
// end ;
4864: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4865: LD_EXP 1
4869: PUSH
4870: LD_EXP 16
4874: PPUSH
4875: LD_INT 25
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PPUSH
4890: LD_EXP 16
4894: PPUSH
4895: CALL_OW 74
4899: PPUSH
4900: CALL_OW 296
4904: PUSH
4905: LD_INT 6
4907: LESS
4908: AND
4909: IFFALSE 4940
4911: GO 4913
4913: DISABLE
// begin animalCounter := animalCounter + 1 ;
4914: LD_ADDR_EXP 15
4918: PUSH
4919: LD_EXP 15
4923: PUSH
4924: LD_INT 1
4926: PLUS
4927: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4928: LD_EXP 16
4932: PPUSH
4933: LD_STRING DH-bird-1
4935: PPUSH
4936: CALL_OW 88
// end ;
4940: END
// every 0 0$2 trigger animalCounter = 3 do
4941: LD_EXP 15
4945: PUSH
4946: LD_INT 3
4948: EQUAL
4949: IFFALSE 4961
4951: GO 4953
4953: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4954: LD_STRING ACH_ZOOLIGST
4956: PPUSH
4957: CALL_OW 543
4961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4962: LD_INT 22
4964: PUSH
4965: LD_INT 2
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 101
4974: PUSH
4975: LD_INT 3
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PPUSH
4986: CALL_OW 69
4990: IFFALSE 5003
4992: GO 4994
4994: DISABLE
// russianSpotted := true ;
4995: LD_ADDR_EXP 9
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
5003: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5004: LD_EXP 16
5008: PPUSH
5009: LD_INT 22
5011: PUSH
5012: LD_INT 3
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_EXP 16
5042: PPUSH
5043: CALL_OW 74
5047: PPUSH
5048: CALL_OW 296
5052: PUSH
5053: LD_INT 8
5055: LESS
5056: IFFALSE 5073
5058: GO 5060
5060: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5061: LD_EXP 16
5065: PPUSH
5066: LD_STRING DH-enemy-base
5068: PPUSH
5069: CALL_OW 88
5073: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5074: LD_EXP 25
5078: PPUSH
5079: CALL_OW 305
5083: NOT
5084: PUSH
5085: LD_EXP 6
5089: NOT
5090: AND
5091: PUSH
5092: LD_EXP 5
5096: AND
5097: PUSH
5098: LD_EXP 12
5102: NOT
5103: AND
5104: PUSH
5105: LD_EXP 11
5109: NOT
5110: AND
5111: IFFALSE 5269
5113: GO 5115
5115: DISABLE
5116: LD_INT 0
5118: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5119: LD_INT 35
5121: PPUSH
5122: CALL_OW 67
// for i in dogTag do
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_EXP 5
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5186
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5139: LD_EXP 16
5143: PPUSH
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PPUSH
5153: LD_VAR 0 1
5157: PUSH
5158: LD_INT 2
5160: ARRAY
5161: PPUSH
5162: CALL_OW 297
5166: PUSH
5167: LD_INT 3
5169: LESS
5170: IFFALSE 5184
// begin dogTagFound := i ;
5172: LD_ADDR_EXP 6
5176: PUSH
5177: LD_VAR 0 1
5181: ST_TO_ADDR
// break ;
5182: GO 5186
// end ;
5184: GO 5136
5186: POP
5187: POP
// until dogTagFound ;
5188: LD_EXP 6
5192: IFFALSE 5119
// CenterNowOnUnits ( Heike ) ;
5194: LD_EXP 16
5198: PPUSH
5199: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5203: LD_EXP 16
5207: PPUSH
5208: LD_EXP 6
5212: PUSH
5213: LD_INT 1
5215: ARRAY
5216: PPUSH
5217: LD_EXP 6
5221: PUSH
5222: LD_INT 2
5224: ARRAY
5225: PPUSH
5226: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5230: LD_STRING ACH_DOGTAG
5232: PPUSH
5233: CALL_OW 543
// if mercenariesQuestReady then
5237: LD_EXP 10
5241: IFFALSE 5257
// Say ( Heike , DH-dogtag-found-quest ) else
5243: LD_EXP 16
5247: PPUSH
5248: LD_STRING DH-dogtag-found-quest
5250: PPUSH
5251: CALL_OW 88
5255: GO 5269
// Say ( Heike , DH-dogtag-found ) ;
5257: LD_EXP 16
5261: PPUSH
5262: LD_STRING DH-dogtag-found
5264: PPUSH
5265: CALL_OW 88
// end ;
5269: PPOPN 1
5271: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5272: LD_EXP 8
5276: NOT
5277: PUSH
5278: LD_EXP 7
5282: NOT
5283: AND
5284: PUSH
5285: LD_INT 5
5287: PPUSH
5288: LD_EXP 16
5292: PPUSH
5293: CALL_OW 292
5297: AND
5298: PUSH
5299: LD_EXP 16
5303: PPUSH
5304: LD_EXP 17
5308: PPUSH
5309: CALL_OW 296
5313: PUSH
5314: LD_INT 8
5316: LESS
5317: AND
5318: IFFALSE 5679
5320: GO 5322
5322: DISABLE
// begin olafSpotted := true ;
5323: LD_ADDR_EXP 8
5327: PUSH
5328: LD_INT 1
5330: ST_TO_ADDR
// if HasTask ( Olaf ) then
5331: LD_EXP 17
5335: PPUSH
5336: CALL_OW 314
5340: IFFALSE 5351
// ComStop ( Olaf ) ;
5342: LD_EXP 17
5346: PPUSH
5347: CALL_OW 141
// InGameOn ;
5351: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5355: LD_EXP 17
5359: PPUSH
5360: LD_EXP 16
5364: PPUSH
5365: CALL_OW 296
5369: PUSH
5370: LD_INT 8
5372: GREATER
5373: IFFALSE 5389
// ComMoveUnit ( Olaf , Heike ) ;
5375: LD_EXP 17
5379: PPUSH
5380: LD_EXP 16
5384: PPUSH
5385: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5389: LD_INT 35
5391: PPUSH
5392: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5396: LD_EXP 17
5400: PPUSH
5401: LD_EXP 16
5405: PPUSH
5406: CALL_OW 296
5410: PUSH
5411: LD_INT 8
5413: LESSEQUAL
5414: IFFALSE 5389
// ComTurnUnit ( Heike , Olaf ) ;
5416: LD_EXP 16
5420: PPUSH
5421: LD_EXP 17
5425: PPUSH
5426: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5430: LD_EXP 17
5434: PPUSH
5435: LD_EXP 16
5439: PPUSH
5440: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5444: LD_EXP 17
5448: PPUSH
5449: LD_STRING DO-olaf-1
5451: PPUSH
5452: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5456: LD_EXP 16
5460: PPUSH
5461: LD_STRING DH-olaf-1
5463: PPUSH
5464: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5468: LD_EXP 17
5472: PPUSH
5473: LD_STRING DO-olaf-2
5475: PPUSH
5476: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5480: LD_EXP 16
5484: PPUSH
5485: LD_STRING DH-olaf-2
5487: PPUSH
5488: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5492: LD_EXP 17
5496: PPUSH
5497: LD_STRING DO-olaf-3
5499: PPUSH
5500: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5504: LD_EXP 17
5508: PPUSH
5509: LD_STRING DO-olaf-4
5511: PPUSH
5512: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5516: LD_EXP 16
5520: PPUSH
5521: LD_STRING DH-olaf-4
5523: PPUSH
5524: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5528: LD_EXP 17
5532: PPUSH
5533: LD_STRING DO-olaf-5
5535: PPUSH
5536: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5540: LD_EXP 16
5544: PPUSH
5545: LD_STRING DH-olaf-5
5547: PPUSH
5548: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5552: LD_EXP 17
5556: PPUSH
5557: LD_STRING DO-olaf-6
5559: PPUSH
5560: CALL_OW 88
// if russianSpotted or johnnySaved then
5564: LD_EXP 9
5568: PUSH
5569: LD_EXP 4
5573: OR
5574: IFFALSE 5602
// begin Say ( Heike , DH-olaf-6a ) ;
5576: LD_EXP 16
5580: PPUSH
5581: LD_STRING DH-olaf-6a
5583: PPUSH
5584: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5588: LD_EXP 17
5592: PPUSH
5593: LD_STRING DO-olaf-7a
5595: PPUSH
5596: CALL_OW 88
// end else
5600: GO 5626
// begin Say ( Heike , DH-olaf-6b ) ;
5602: LD_EXP 16
5606: PPUSH
5607: LD_STRING DH-olaf-6b
5609: PPUSH
5610: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5614: LD_EXP 17
5618: PPUSH
5619: LD_STRING DO-olaf-7b
5621: PPUSH
5622: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5626: LD_EXP 17
5630: PPUSH
5631: LD_STRING DO-olaf-8
5633: PPUSH
5634: CALL_OW 88
// InGameOff ;
5638: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5642: LD_STRING O3_camp_cont
5644: PPUSH
5645: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5649: LD_EXP 17
5653: PPUSH
5654: LD_INT 52
5656: PPUSH
5657: LD_INT 90
5659: PPUSH
5660: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5664: LD_EXP 17
5668: PPUSH
5669: LD_INT 53
5671: PPUSH
5672: LD_INT 89
5674: PPUSH
5675: CALL_OW 178
// end ;
5679: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5680: LD_EXP 8
5684: NOT
5685: PUSH
5686: LD_EXP 16
5690: PPUSH
5691: LD_EXP 18
5695: PPUSH
5696: CALL_OW 296
5700: PUSH
5701: LD_INT 36
5703: LESS
5704: AND
5705: IFFALSE 5725
5707: GO 5709
5709: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5710: LD_EXP 17
5714: PPUSH
5715: LD_INT 39
5717: PPUSH
5718: LD_INT 71
5720: PPUSH
5721: CALL_OW 111
5725: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5726: LD_EXP 7
5730: NOT
5731: PUSH
5732: LD_INT 2
5734: PPUSH
5735: LD_EXP 19
5739: PPUSH
5740: CALL_OW 292
5744: PUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_EXP 18
5752: PPUSH
5753: CALL_OW 292
5757: OR
5758: AND
5759: IFFALSE 7080
5761: GO 5763
5763: DISABLE
5764: LD_INT 0
5766: PPUSH
5767: PPUSH
5768: PPUSH
// begin if not johnnySaved then
5769: LD_EXP 4
5773: NOT
5774: IFFALSE 5785
// KillUnit ( Johnny ) ;
5776: LD_EXP 25
5780: PPUSH
5781: CALL_OW 66
// mercenariesSpotted := true ;
5785: LD_ADDR_EXP 7
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5793: LD_STRING O4_camp_cont
5795: PPUSH
5796: CALL_OW 337
// InGameOn ;
5800: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5804: LD_INT 53
5806: PPUSH
5807: LD_INT 89
5809: PPUSH
5810: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5814: LD_INT 53
5816: PPUSH
5817: LD_INT 89
5819: PPUSH
5820: LD_INT 2
5822: PPUSH
5823: LD_INT 8
5825: NEG
5826: PPUSH
5827: CALL_OW 330
// if olafSpotted then
5831: LD_EXP 8
5835: IFFALSE 5953
// begin AddComTurnUnit ( Olaf , Heike ) ;
5837: LD_EXP 17
5841: PPUSH
5842: LD_EXP 16
5846: PPUSH
5847: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5851: LD_EXP 16
5855: PPUSH
5856: LD_INT 51
5858: PPUSH
5859: LD_INT 86
5861: PPUSH
5862: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5866: LD_EXP 16
5870: PPUSH
5871: LD_EXP 17
5875: PPUSH
5876: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5880: LD_EXP 17
5884: PPUSH
5885: LD_STRING DO-camp-1
5887: PPUSH
5888: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5892: LD_EXP 18
5896: PUSH
5897: LD_EXP 19
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PPUSH
5906: LD_EXP 16
5910: PPUSH
5911: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5915: LD_EXP 18
5919: PPUSH
5920: LD_STRING DG-camp-1
5922: PPUSH
5923: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5927: LD_EXP 16
5931: PPUSH
5932: LD_STRING DH-camp-1
5934: PPUSH
5935: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5939: LD_EXP 17
5943: PPUSH
5944: LD_STRING DO-camp-2
5946: PPUSH
5947: CALL_OW 88
// end else
5951: GO 6348
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5953: LD_EXP 16
5957: PPUSH
5958: LD_INT 51
5960: PPUSH
5961: LD_INT 86
5963: PPUSH
5964: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_EXP 18
5977: PPUSH
5978: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5982: LD_EXP 18
5986: PUSH
5987: LD_EXP 19
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: LD_EXP 16
6000: PPUSH
6001: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6005: LD_EXP 18
6009: PPUSH
6010: LD_STRING DG-camp-1a
6012: PPUSH
6013: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6017: LD_EXP 16
6021: PPUSH
6022: LD_STRING DH-camp-1a
6024: PPUSH
6025: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6029: LD_INT 1
6031: PPUSH
6032: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6036: LD_EXP 19
6040: PPUSH
6041: LD_EXP 17
6045: PPUSH
6046: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6050: LD_EXP 19
6054: PPUSH
6055: LD_STRING DM-camp-1a
6057: PPUSH
6058: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6062: LD_EXP 17
6066: PPUSH
6067: LD_INT 52
6069: PPUSH
6070: LD_INT 90
6072: PPUSH
6073: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 16
6086: PPUSH
6087: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6091: LD_EXP 18
6095: PPUSH
6096: LD_STRING DG-camp-2a
6098: PPUSH
6099: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6103: LD_EXP 16
6107: PPUSH
6108: LD_STRING DH-camp-2a
6110: PPUSH
6111: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6115: LD_EXP 19
6119: PPUSH
6120: LD_STRING DM-camp-2a
6122: PPUSH
6123: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6127: LD_INT 35
6129: PPUSH
6130: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6134: LD_EXP 17
6138: PPUSH
6139: LD_EXP 16
6143: PPUSH
6144: CALL_OW 296
6148: PUSH
6149: LD_INT 10
6151: LESS
6152: IFFALSE 6127
// AddComTurnUnit ( Olaf , Heike ) ;
6154: LD_EXP 17
6158: PPUSH
6159: LD_EXP 16
6163: PPUSH
6164: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6168: LD_EXP 19
6172: PPUSH
6173: LD_EXP 16
6177: PPUSH
6178: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6182: LD_EXP 17
6186: PPUSH
6187: LD_STRING DO-camp-2a
6189: PPUSH
6190: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6194: LD_EXP 16
6198: PPUSH
6199: LD_EXP 17
6203: PPUSH
6204: CALL_OW 119
// if russianSpotted then
6208: LD_EXP 9
6212: IFFALSE 6252
// begin Say ( Heike , DH-camp-2aa ) ;
6214: LD_EXP 16
6218: PPUSH
6219: LD_STRING DH-camp-2aa
6221: PPUSH
6222: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6226: LD_EXP 18
6230: PPUSH
6231: LD_STRING DG-camp-2aa
6233: PPUSH
6234: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6238: LD_EXP 19
6242: PPUSH
6243: LD_STRING DM-camp-2aa
6245: PPUSH
6246: CALL_OW 88
// end else
6250: GO 6276
// begin Say ( Heike , DH-camp-2ab ) ;
6252: LD_EXP 16
6256: PPUSH
6257: LD_STRING DH-camp-2ab
6259: PPUSH
6260: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6264: LD_EXP 19
6268: PPUSH
6269: LD_STRING DM-camp-2ab
6271: PPUSH
6272: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6276: LD_EXP 16
6280: PPUSH
6281: LD_STRING DH-camp-3a
6283: PPUSH
6284: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6288: LD_EXP 17
6292: PPUSH
6293: LD_STRING DO-camp-3a
6295: PPUSH
6296: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6300: LD_EXP 18
6304: PPUSH
6305: LD_STRING DG-camp-3a
6307: PPUSH
6308: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6312: LD_EXP 16
6316: PPUSH
6317: LD_STRING DH-camp-4aa
6319: PPUSH
6320: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6324: LD_EXP 19
6328: PPUSH
6329: LD_STRING DM-camp-4aa
6331: PPUSH
6332: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6336: LD_EXP 17
6340: PPUSH
6341: LD_STRING DO-camp-4a
6343: PPUSH
6344: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6348: LD_EXP 17
6352: PPUSH
6353: LD_STRING DO-camp-3
6355: PPUSH
6356: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6360: LD_EXP 17
6364: PPUSH
6365: LD_STRING DO-camp-4
6367: PPUSH
6368: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6372: LD_EXP 18
6376: PPUSH
6377: LD_EXP 17
6381: PPUSH
6382: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6386: LD_EXP 18
6390: PPUSH
6391: LD_STRING DG-camp-4
6393: PPUSH
6394: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6398: LD_EXP 16
6402: PPUSH
6403: LD_EXP 18
6407: PPUSH
6408: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6412: LD_EXP 16
6416: PPUSH
6417: LD_STRING DH-camp-4
6419: PPUSH
6420: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6424: LD_EXP 19
6428: PUSH
6429: LD_EXP 17
6433: PUSH
6434: LD_EXP 18
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: PPUSH
6444: LD_EXP 16
6448: PPUSH
6449: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6453: LD_EXP 18
6457: PPUSH
6458: LD_STRING DG-camp-5
6460: PPUSH
6461: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6465: LD_EXP 18
6469: PPUSH
6470: LD_STRING DG-camp-6
6472: PPUSH
6473: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6477: LD_EXP 16
6481: PPUSH
6482: LD_STRING DH-camp-6
6484: PPUSH
6485: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6489: LD_EXP 18
6493: PPUSH
6494: LD_STRING DG-camp-7
6496: PPUSH
6497: CALL_OW 88
// if DogTagFound then
6501: LD_EXP 6
6505: IFFALSE 6545
// begin Say ( Heike , DH-quest-1a ) ;
6507: LD_EXP 16
6511: PPUSH
6512: LD_STRING DH-quest-1a
6514: PPUSH
6515: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6519: LD_EXP 18
6523: PPUSH
6524: LD_STRING DG-quest-1a
6526: PPUSH
6527: CALL_OW 88
// mercenariesQuestDone := true ;
6531: LD_ADDR_EXP 11
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// InGameOff ;
6539: CALL_OW 9
// end else
6543: GO 6711
// begin Say ( Heike , DH-camp-7 ) ;
6545: LD_EXP 16
6549: PPUSH
6550: LD_STRING DH-camp-7
6552: PPUSH
6553: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6557: LD_EXP 16
6561: PPUSH
6562: CALL_OW 256
6566: PUSH
6567: LD_INT 1000
6569: LESS
6570: IFFALSE 6662
// begin Say ( Olaf , DO-heal-1 ) ;
6572: LD_EXP 17
6576: PPUSH
6577: LD_STRING DO-heal-1
6579: PPUSH
6580: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6584: LD_EXP 16
6588: PPUSH
6589: LD_INT 51
6591: PPUSH
6592: LD_INT 88
6594: PPUSH
6595: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6599: LD_INT 35
6601: PPUSH
6602: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6606: LD_EXP 16
6610: PPUSH
6611: LD_EXP 17
6615: PPUSH
6616: CALL_OW 296
6620: PUSH
6621: LD_INT 4
6623: LESS
6624: PUSH
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 307
6640: OR
6641: IFFALSE 6599
// SetLives ( Heike , 1000 ) ;
6643: LD_EXP 16
6647: PPUSH
6648: LD_INT 1000
6650: PPUSH
6651: CALL_OW 234
// wait ( 0 0$2 ) ;
6655: LD_INT 70
6657: PPUSH
6658: CALL_OW 67
// end ; InGameOff ;
6662: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6666: LD_EXP 17
6670: PUSH
6671: LD_EXP 18
6675: PUSH
6676: LD_EXP 19
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: PPUSH
6686: LD_INT 53
6688: PPUSH
6689: LD_INT 89
6691: PPUSH
6692: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6696: LD_STRING O5_proof_cont
6698: PPUSH
6699: CALL_OW 337
// mercenariesQuestReady := true ;
6703: LD_ADDR_EXP 10
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6711: LD_EXP 10
6715: NOT
6716: IFFALSE 6720
// exit ;
6718: GO 7080
// wait ( 0 0$35 ) ;
6720: LD_INT 1225
6722: PPUSH
6723: CALL_OW 67
// driver := PreparePatrolTank ;
6727: LD_ADDR_VAR 0 2
6731: PUSH
6732: CALL 2821 0 0
6736: ST_TO_ADDR
// if not driver then
6737: LD_VAR 0 2
6741: NOT
6742: IFFALSE 6746
// exit ;
6744: GO 7080
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6746: LD_INT 2
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 2
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 310
6776: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_INT 500
6784: PPUSH
6785: CALL_OW 234
// SetLives ( driver , 450 ) ;
6789: LD_VAR 0 2
6793: PPUSH
6794: LD_INT 450
6796: PPUSH
6797: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6801: LD_VAR 0 2
6805: PPUSH
6806: LD_INT 59
6808: PPUSH
6809: LD_INT 60
6811: PPUSH
6812: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6816: LD_INT 35
6818: PPUSH
6819: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_INT 59
6830: PPUSH
6831: LD_INT 60
6833: PPUSH
6834: CALL_OW 307
6838: IFFALSE 6816
// if not See ( 1 , Heike ) then
6840: LD_INT 1
6842: PPUSH
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 292
6852: NOT
6853: IFFALSE 6977
// begin if Difficulty < 3 then
6855: LD_OWVAR 67
6859: PUSH
6860: LD_INT 3
6862: LESS
6863: IFFALSE 6881
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6865: LD_INT 59
6867: PPUSH
6868: LD_INT 60
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: LD_INT 6
6876: PPUSH
6877: CALL_OW 330
// ComExitVehicle ( driver ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: CALL_OW 121
// wait ( 0 0$1 ) ;
6890: LD_INT 35
6892: PPUSH
6893: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6897: LD_VAR 0 2
6901: PPUSH
6902: LD_INT 58
6904: PPUSH
6905: LD_INT 54
6907: PPUSH
6908: CALL_OW 171
// wait ( 0 0$1 ) ;
6912: LD_INT 35
6914: PPUSH
6915: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6919: LD_VAR 0 2
6923: PPUSH
6924: LD_INT 57
6926: PPUSH
6927: LD_INT 53
6929: PPUSH
6930: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6934: LD_VAR 0 2
6938: PPUSH
6939: LD_INT 350
6941: PPUSH
6942: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6946: LD_VAR 0 2
6950: PPUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 107
6967: PPUSH
6968: LD_INT 118
6970: PPUSH
6971: CALL_OW 171
// end else
6975: GO 6992
// begin ComMoveXY ( driver , 107 , 118 ) ;
6977: LD_VAR 0 2
6981: PPUSH
6982: LD_INT 107
6984: PPUSH
6985: LD_INT 118
6987: PPUSH
6988: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6992: LD_INT 35
6994: PPUSH
6995: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6999: LD_VAR 0 3
7003: PPUSH
7004: LD_INT 107
7006: PPUSH
7007: LD_INT 118
7009: PPUSH
7010: CALL_OW 307
7014: PUSH
7015: LD_VAR 0 2
7019: PPUSH
7020: CALL_OW 301
7024: OR
7025: IFFALSE 6992
// if IsDead ( driver [ 1 ] ) then
7027: LD_VAR 0 2
7031: PUSH
7032: LD_INT 1
7034: ARRAY
7035: PPUSH
7036: CALL_OW 301
7040: IFFALSE 7044
// exit ;
7042: GO 7080
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7044: LD_ADDR_VAR 0 1
7048: PUSH
7049: LD_INT 22
7051: PUSH
7052: LD_INT 1
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: PUSH
7064: FOR_IN
7065: IFFALSE 7078
// RemoveUnit ( i ) ;
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 64
7076: GO 7064
7078: POP
7079: POP
// end ;
7080: PPOPN 3
7082: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7083: LD_INT 10
7085: PPUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PPUSH
7110: CALL_OW 70
7114: IFFALSE 7188
7116: GO 7118
7118: DISABLE
// begin InGameOn ;
7119: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7123: LD_EXP 17
7127: PUSH
7128: LD_EXP 19
7132: PUSH
7133: LD_EXP 18
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: PPUSH
7143: LD_EXP 16
7147: PPUSH
7148: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7152: LD_EXP 19
7156: PPUSH
7157: LD_STRING DM-quest-1
7159: PPUSH
7160: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7164: LD_EXP 18
7168: PPUSH
7169: LD_STRING DG-quest-1
7171: PPUSH
7172: CALL_OW 88
// InGameOff ;
7176: CALL_OW 9
// mercenariesQuestDone := true ;
7180: LD_ADDR_EXP 11
7184: PUSH
7185: LD_INT 1
7187: ST_TO_ADDR
// end ;
7188: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7189: LD_EXP 16
7193: PPUSH
7194: LD_INT 10
7196: PPUSH
7197: CALL_OW 308
7201: PUSH
7202: LD_EXP 6
7206: AND
7207: PUSH
7208: LD_EXP 10
7212: AND
7213: PUSH
7214: LD_INT 10
7216: PPUSH
7217: LD_INT 22
7219: PUSH
7220: LD_INT 2
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 70
7245: NOT
7246: AND
7247: IFFALSE 7419
7249: GO 7251
7251: DISABLE
7252: LD_INT 0
7254: PPUSH
// begin InGameOn ;
7255: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7259: LD_EXP 17
7263: PUSH
7264: LD_EXP 19
7268: PUSH
7269: LD_EXP 18
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: PPUSH
7279: LD_EXP 16
7283: PPUSH
7284: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7288: LD_EXP 16
7292: PPUSH
7293: LD_INT 54
7295: PPUSH
7296: LD_INT 86
7298: PPUSH
7299: CALL_OW 111
// p := p + 1 ;
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_VAR 0 1
7312: PUSH
7313: LD_INT 1
7315: PLUS
7316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7317: LD_INT 35
7319: PPUSH
7320: CALL_OW 67
// p := p + 1 ;
7324: LD_ADDR_VAR 0 1
7328: PUSH
7329: LD_VAR 0 1
7333: PUSH
7334: LD_INT 1
7336: PLUS
7337: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7338: LD_EXP 16
7342: PPUSH
7343: LD_EXP 18
7347: PPUSH
7348: CALL_OW 296
7352: PUSH
7353: LD_INT 4
7355: LESS
7356: PUSH
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 5
7364: GREATER
7365: OR
7366: IFFALSE 7317
// Say ( Mike , DM-quest-1 ) ;
7368: LD_EXP 19
7372: PPUSH
7373: LD_STRING DM-quest-1
7375: PPUSH
7376: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7380: LD_EXP 18
7384: PPUSH
7385: LD_STRING DG-quest-1
7387: PPUSH
7388: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7392: LD_EXP 16
7396: PPUSH
7397: LD_INT 55
7399: PPUSH
7400: LD_INT 87
7402: PPUSH
7403: CALL_OW 111
// InGameOff ;
7407: CALL_OW 9
// mercenariesQuestDone := true ;
7411: LD_ADDR_EXP 11
7415: PUSH
7416: LD_INT 1
7418: ST_TO_ADDR
// end ;
7419: PPOPN 1
7421: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7422: LD_EXP 16
7426: PUSH
7427: LD_INT 55
7429: PUSH
7430: EMPTY
7431: LIST
7432: PPUSH
7433: CALL_OW 69
7437: IN
7438: IFFALSE 7478
7440: GO 7442
7442: DISABLE
// begin if Difficulty < 3 then
7443: LD_OWVAR 67
7447: PUSH
7448: LD_INT 3
7450: LESS
7451: IFFALSE 7466
// RemoveSeeing ( 59 , 60 , 2 ) ;
7453: LD_INT 59
7455: PPUSH
7456: LD_INT 60
7458: PPUSH
7459: LD_INT 2
7461: PPUSH
7462: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7466: LD_EXP 16
7470: PPUSH
7471: LD_STRING DH-driver
7473: PPUSH
7474: CALL_OW 88
// end ;
7478: END
// every 0 0$1 trigger mercenariesQuestDone do
7479: LD_EXP 11
7483: IFFALSE 7971
7485: GO 7487
7487: DISABLE
// begin if mercenariesQuestReady then
7488: LD_EXP 10
7492: IFFALSE 7501
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7494: LD_STRING O5_proof_cont_out
7496: PPUSH
7497: CALL_OW 337
// InGameOn ;
7501: CALL_OW 8
// if IsInUnit ( Heike ) then
7505: LD_EXP 16
7509: PPUSH
7510: CALL_OW 310
7514: IFFALSE 7525
// ComExitVehicle ( Heike ) ;
7516: LD_EXP 16
7520: PPUSH
7521: CALL_OW 121
// wait ( 3 ) ;
7525: LD_INT 3
7527: PPUSH
7528: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7532: LD_EXP 16
7536: PPUSH
7537: LD_EXP 18
7541: PPUSH
7542: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7546: LD_EXP 17
7550: PUSH
7551: LD_EXP 19
7555: PUSH
7556: LD_EXP 18
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: PPUSH
7566: LD_EXP 16
7570: PPUSH
7571: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7575: LD_EXP 16
7579: PPUSH
7580: LD_STRING DH-quest-done-1
7582: PPUSH
7583: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7587: LD_EXP 19
7591: PPUSH
7592: LD_STRING DM-quest-done-1
7594: PPUSH
7595: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7599: LD_EXP 18
7603: PPUSH
7604: LD_STRING DG-quest-done-1
7606: PPUSH
7607: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7611: LD_EXP 16
7615: PPUSH
7616: LD_EXP 17
7620: PPUSH
7621: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7625: LD_EXP 16
7629: PPUSH
7630: LD_STRING DH-quest-done-2
7632: PPUSH
7633: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7637: LD_EXP 17
7641: PPUSH
7642: LD_STRING DO-quest-done-2
7644: PPUSH
7645: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7649: LD_EXP 17
7653: PPUSH
7654: LD_STRING DO-quest-done-3
7656: PPUSH
7657: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7661: LD_EXP 18
7665: PPUSH
7666: LD_INT 51
7668: PPUSH
7669: LD_INT 90
7671: PPUSH
7672: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7676: LD_EXP 18
7680: PPUSH
7681: LD_INT 50
7683: PPUSH
7684: LD_INT 89
7686: PPUSH
7687: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7691: LD_EXP 16
7695: PPUSH
7696: LD_EXP 18
7700: PPUSH
7701: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7705: LD_EXP 18
7709: PPUSH
7710: LD_STRING DG-quest-done-4
7712: PPUSH
7713: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_EXP 16
7726: PPUSH
7727: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7731: LD_EXP 16
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 1000
7743: LESS
7744: IFFALSE 7836
// begin Say ( Olaf , DO-heal-1 ) ;
7746: LD_EXP 17
7750: PPUSH
7751: LD_STRING DO-heal-1
7753: PPUSH
7754: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7758: LD_EXP 16
7762: PPUSH
7763: LD_INT 51
7765: PPUSH
7766: LD_INT 88
7768: PPUSH
7769: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7773: LD_INT 35
7775: PPUSH
7776: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7780: LD_EXP 16
7784: PPUSH
7785: LD_EXP 17
7789: PPUSH
7790: CALL_OW 296
7794: PUSH
7795: LD_INT 4
7797: LESS
7798: PUSH
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 307
7814: OR
7815: IFFALSE 7773
// SetLives ( Heike , 1000 ) ;
7817: LD_EXP 16
7821: PPUSH
7822: LD_INT 1000
7824: PPUSH
7825: CALL_OW 234
// wait ( 0 0$2 ) ;
7829: LD_INT 70
7831: PPUSH
7832: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7836: LD_EXP 16
7840: PPUSH
7841: LD_STRING DH-quest-done-4
7843: PPUSH
7844: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7848: LD_EXP 17
7852: PPUSH
7853: LD_STRING DO-quest-done-4
7855: PPUSH
7856: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7860: LD_EXP 16
7864: PPUSH
7865: LD_EXP 17
7869: PPUSH
7870: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7874: LD_EXP 16
7878: PPUSH
7879: LD_STRING DH-quest-done-5
7881: PPUSH
7882: CALL_OW 88
// InGameOff ;
7886: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7890: LD_STRING O6_end_cont
7892: PPUSH
7893: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7897: LD_EXP 18
7901: PPUSH
7902: LD_INT 2
7904: PPUSH
7905: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7909: LD_EXP 19
7913: PPUSH
7914: LD_INT 2
7916: PPUSH
7917: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7921: LD_INT 42
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: LD_INT 2
7929: PPUSH
7930: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7934: LD_EXP 17
7938: PPUSH
7939: LD_INT 53
7941: PPUSH
7942: LD_INT 89
7944: PPUSH
7945: CALL_OW 118
// lastObjectiveActive := true ;
7949: LD_ADDR_EXP 12
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7957: LD_INT 1
7959: PPUSH
7960: LD_INT 1
7962: PPUSH
7963: CALL_OW 424
// PreparePrison ;
7967: CALL 1171 0 0
// end ;
7971: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7972: LD_INT 22
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 91
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: LD_INT 4
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 69
8004: IFFALSE 8186
8006: GO 8008
8008: DISABLE
8009: LD_INT 0
8011: PPUSH
8012: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8013: LD_INT 245
8015: PUSH
8016: LD_INT 210
8018: PUSH
8019: LD_INT 210
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: LD_OWVAR 67
8031: ARRAY
8032: PPUSH
8033: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8037: LD_ADDR_VAR 0 2
8041: PUSH
8042: LD_INT 22
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 54
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: ST_TO_ADDR
// if not tmp then
8078: LD_VAR 0 2
8082: NOT
8083: IFFALSE 8087
// exit ;
8085: GO 8186
// for i in tmp do
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_VAR 0 2
8096: PUSH
8097: FOR_IN
8098: IFFALSE 8126
// begin ComExitBuilding ( i ) ;
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 121
8116: PPUSH
8117: LD_INT 22
8119: PPUSH
8120: CALL_OW 174
// end ;
8124: GO 8097
8126: POP
8127: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8128: LD_EXP 23
8132: PPUSH
8133: LD_INT 121
8135: PPUSH
8136: LD_INT 22
8138: PPUSH
8139: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8143: LD_EXP 24
8147: PPUSH
8148: LD_INT 121
8150: PPUSH
8151: LD_INT 22
8153: PPUSH
8154: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8158: LD_EXP 23
8162: PPUSH
8163: LD_EXP 16
8167: PPUSH
8168: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8172: LD_EXP 24
8176: PPUSH
8177: LD_EXP 16
8181: PPUSH
8182: CALL_OW 175
// end ;
8186: PPOPN 2
8188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8189: LD_INT 22
8191: PUSH
8192: LD_INT 2
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 91
8201: PUSH
8202: LD_INT 8
8204: PUSH
8205: LD_INT 4
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PPUSH
8217: CALL_OW 69
8221: IFFALSE 8403
8223: GO 8225
8225: DISABLE
8226: LD_INT 0
8228: PPUSH
8229: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8230: LD_INT 280
8232: PUSH
8233: LD_INT 245
8235: PUSH
8236: LD_INT 210
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: LD_OWVAR 67
8248: ARRAY
8249: PPUSH
8250: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8254: LD_ADDR_VAR 0 2
8258: PUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 25
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 54
8281: PUSH
8282: EMPTY
8283: LIST
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: ST_TO_ADDR
// if not tmp then
8295: LD_VAR 0 2
8299: NOT
8300: IFFALSE 8304
// exit ;
8302: GO 8403
// for i in tmp do
8304: LD_ADDR_VAR 0 1
8308: PUSH
8309: LD_VAR 0 2
8313: PUSH
8314: FOR_IN
8315: IFFALSE 8343
// begin ComExitBuilding ( i ) ;
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 142
8333: PPUSH
8334: LD_INT 71
8336: PPUSH
8337: CALL_OW 174
// end ;
8341: GO 8314
8343: POP
8344: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8345: LD_EXP 23
8349: PPUSH
8350: LD_INT 142
8352: PPUSH
8353: LD_INT 71
8355: PPUSH
8356: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8360: LD_EXP 24
8364: PPUSH
8365: LD_INT 142
8367: PPUSH
8368: LD_INT 71
8370: PPUSH
8371: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8375: LD_EXP 23
8379: PPUSH
8380: LD_EXP 16
8384: PPUSH
8385: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8389: LD_EXP 24
8393: PPUSH
8394: LD_EXP 16
8398: PPUSH
8399: CALL_OW 175
// end ;
8403: PPOPN 2
8405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8406: LD_INT 22
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 58
8428: PUSH
8429: EMPTY
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 24
8437: PUSH
8438: LD_INT 1000
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 91
8451: PUSH
8452: LD_EXP 17
8456: PUSH
8457: LD_INT 8
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PPUSH
8472: CALL_OW 69
8476: PUSH
8477: LD_EXP 17
8481: PPUSH
8482: CALL_OW 302
8486: AND
8487: IFFALSE 8601
8489: GO 8491
8491: DISABLE
// begin enable ;
8492: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8493: LD_EXP 17
8497: PPUSH
8498: LD_INT 22
8500: PUSH
8501: LD_INT 2
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 58
8520: PUSH
8521: EMPTY
8522: LIST
8523: PUSH
8524: LD_INT 3
8526: PUSH
8527: LD_INT 24
8529: PUSH
8530: LD_INT 1000
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 91
8543: PUSH
8544: LD_EXP 17
8548: PUSH
8549: LD_INT 8
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: PUSH
8569: LD_INT 1
8571: ARRAY
8572: PPUSH
8573: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8577: LD_EXP 17
8581: PPUSH
8582: LD_INT 52
8584: PPUSH
8585: LD_INT 90
8587: PPUSH
8588: CALL_OW 171
// AddComHold ( Olaf ) ;
8592: LD_EXP 17
8596: PPUSH
8597: CALL_OW 200
// end ;
8601: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8602: LD_EXP 12
8606: PUSH
8607: LD_INT 2
8609: PPUSH
8610: CALL_OW 302
8614: NOT
8615: AND
8616: PUSH
8617: LD_OWVAR 67
8621: PUSH
8622: LD_INT 1
8624: EQUAL
8625: AND
8626: PUSH
8627: LD_EXP 13
8631: NOT
8632: AND
8633: IFFALSE 8650
8635: GO 8637
8637: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8638: LD_EXP 16
8642: PPUSH
8643: LD_STRING DH-prison-missing
8645: PPUSH
8646: CALL_OW 88
// end ;
8650: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8651: LD_EXP 12
8655: PUSH
8656: LD_INT 8
8658: PPUSH
8659: CALL_OW 302
8663: NOT
8664: AND
8665: PUSH
8666: LD_OWVAR 67
8670: PUSH
8671: LD_INT 1
8673: GREATER
8674: AND
8675: PUSH
8676: LD_EXP 13
8680: NOT
8681: AND
8682: IFFALSE 8699
8684: GO 8686
8686: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8687: LD_EXP 16
8691: PPUSH
8692: LD_STRING DH-prison-missing
8694: PPUSH
8695: CALL_OW 88
// end ;
8699: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8700: LD_EXP 12
8704: PUSH
8705: LD_INT 3
8707: PPUSH
8708: CALL_OW 302
8712: NOT
8713: AND
8714: PUSH
8715: LD_EXP 13
8719: NOT
8720: AND
8721: IFFALSE 8738
8723: GO 8725
8725: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8726: LD_EXP 16
8730: PPUSH
8731: LD_STRING DH-prison-missing-a
8733: PPUSH
8734: CALL_OW 88
// end ;
8738: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8739: LD_EXP 12
8743: PUSH
8744: LD_INT 10
8746: PPUSH
8747: CALL_OW 302
8751: NOT
8752: AND
8753: PUSH
8754: LD_EXP 13
8758: NOT
8759: AND
8760: IFFALSE 8777
8762: GO 8764
8764: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8765: LD_EXP 16
8769: PPUSH
8770: LD_STRING DH-prison-missing-a
8772: PPUSH
8773: CALL_OW 88
// end ;
8777: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8778: LD_EXP 13
8782: NOT
8783: PUSH
8784: LD_EXP 12
8788: AND
8789: PUSH
8790: LD_INT 2
8792: PPUSH
8793: LD_EXP 20
8797: PPUSH
8798: CALL_OW 292
8802: AND
8803: IFFALSE 8890
8805: GO 8807
8807: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8808: LD_EXP 20
8812: PPUSH
8813: LD_EXP 16
8817: PPUSH
8818: CALL_OW 119
// DialogueOn ;
8822: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8826: LD_EXP 20
8830: PPUSH
8831: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8835: LD_EXP 20
8839: PPUSH
8840: LD_STRING DK-prison-found
8842: PPUSH
8843: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8847: LD_EXP 16
8851: PPUSH
8852: LD_STRING DH-prison-found
8854: PPUSH
8855: CALL_OW 88
// DialogueOff ;
8859: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8863: LD_EXP 20
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 235
// prisonFound := true ;
8875: LD_ADDR_EXP 13
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8883: LD_STRING O6_prison_out
8885: PPUSH
8886: CALL_OW 337
// end ;
8890: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8891: LD_EXP 16
8895: PPUSH
8896: CALL_OW 256
8900: PUSH
8901: LD_INT 500
8903: LESS
8904: IFFALSE 8917
8906: GO 8908
8908: DISABLE
// heikeHurt := true ;
8909: LD_ADDR_EXP 14
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
8917: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
8918: LD_EXP 12
8922: PUSH
8923: LD_EXP 16
8927: PPUSH
8928: CALL_OW 302
8932: AND
8933: PUSH
8934: LD_INT 1
8936: PPUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 22
8949: PUSH
8950: LD_INT 2
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 50
8959: PUSH
8960: EMPTY
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 71
8972: PUSH
8973: LD_INT 0
8975: EQUAL
8976: AND
8977: IFFALSE 9307
8979: GO 8981
8981: DISABLE
8982: LD_INT 0
8984: PPUSH
// begin if not heikeHurt then
8985: LD_EXP 14
8989: NOT
8990: IFFALSE 8999
// SetAchievement ( ACH_INVINCIBLE ) ;
8992: LD_STRING ACH_INVINCIBLE
8994: PPUSH
8995: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8999: LD_ADDR_VAR 0 1
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 21
9016: PUSH
9017: LD_INT 1
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 50
9026: PUSH
9027: EMPTY
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 69
9039: ST_TO_ADDR
// if prisonFound then
9040: LD_EXP 13
9044: IFFALSE 9058
// AddMedal ( med1 , 1 ) else
9046: LD_STRING med1
9048: PPUSH
9049: LD_INT 1
9051: PPUSH
9052: CALL_OW 101
9056: GO 9069
// AddMedal ( med1 , - 1 ) ;
9058: LD_STRING med1
9060: PPUSH
9061: LD_INT 1
9063: NEG
9064: PPUSH
9065: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9069: LD_VAR 0 1
9073: PUSH
9074: LD_INT 3
9076: LESS
9077: PUSH
9078: LD_EXP 13
9082: NOT
9083: AND
9084: PUSH
9085: LD_VAR 0 1
9089: PUSH
9090: LD_INT 4
9092: LESS
9093: PUSH
9094: LD_EXP 13
9098: AND
9099: OR
9100: IFFALSE 9115
// AddMedal ( med2 , - 1 ) else
9102: LD_STRING med2
9104: PPUSH
9105: LD_INT 1
9107: NEG
9108: PPUSH
9109: CALL_OW 101
9113: GO 9125
// AddMedal ( med2 , 1 ) ;
9115: LD_STRING med2
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9125: LD_EXP 13
9129: PUSH
9130: LD_EXP 4
9134: AND
9135: PUSH
9136: LD_VAR 0 1
9140: PUSH
9141: LD_INT 4
9143: GREATEREQUAL
9144: AND
9145: IFFALSE 9159
// AddMedal ( med3 , 1 ) else
9147: LD_STRING med3
9149: PPUSH
9150: LD_INT 1
9152: PPUSH
9153: CALL_OW 101
9157: GO 9170
// AddMedal ( med3 , - 1 ) ;
9159: LD_STRING med3
9161: PPUSH
9162: LD_INT 1
9164: NEG
9165: PPUSH
9166: CALL_OW 101
// GiveMedals ( MAIN ) ;
9170: LD_STRING MAIN
9172: PPUSH
9173: CALL_OW 102
// RewardPeople ( tmp ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9186: LD_EXP 16
9190: PPUSH
9191: LD_STRING 01_Heike
9193: PPUSH
9194: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9198: LD_EXP 18
9202: PPUSH
9203: CALL_OW 302
9207: PUSH
9208: LD_EXP 18
9212: PUSH
9213: LD_VAR 0 1
9217: IN
9218: AND
9219: IFFALSE 9233
// SaveCharacters ( Givi , 01_Givi ) ;
9221: LD_EXP 18
9225: PPUSH
9226: LD_STRING 01_Givi
9228: PPUSH
9229: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9233: LD_EXP 19
9237: PPUSH
9238: CALL_OW 302
9242: PUSH
9243: LD_EXP 19
9247: PUSH
9248: LD_VAR 0 1
9252: IN
9253: AND
9254: IFFALSE 9268
// SaveCharacters ( Mike , 01_Mike ) ;
9256: LD_EXP 19
9260: PPUSH
9261: LD_STRING 01_Mike
9263: PPUSH
9264: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9268: LD_EXP 20
9272: PPUSH
9273: CALL_OW 302
9277: PUSH
9278: LD_EXP 20
9282: PUSH
9283: LD_VAR 0 1
9287: IN
9288: AND
9289: IFFALSE 9303
// SaveCharacters ( Kamil , 01_Kamil ) ;
9291: LD_EXP 20
9295: PPUSH
9296: LD_STRING 01_Kamil
9298: PPUSH
9299: CALL_OW 38
// YouWin ;
9303: CALL_OW 103
// end ; end_of_file
9307: PPOPN 1
9309: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9310: LD_VAR 0 1
9314: PUSH
9315: LD_EXP 16
9319: EQUAL
9320: IFFALSE 9329
// YouLost ( Heike ) ;
9322: LD_STRING Heike
9324: PPUSH
9325: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9329: LD_VAR 0 1
9333: PUSH
9334: LD_INT 22
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 25
9346: PUSH
9347: LD_INT 1
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 69
9362: IN
9363: IFFALSE 9469
// begin if un in russianPatrol then
9365: LD_VAR 0 1
9369: PUSH
9370: LD_EXP 21
9374: IN
9375: IFFALSE 9393
// russianPatrol := russianPatrol diff un ;
9377: LD_ADDR_EXP 21
9381: PUSH
9382: LD_EXP 21
9386: PUSH
9387: LD_VAR 0 1
9391: DIFF
9392: ST_TO_ADDR
// if un in russianForestPatrol then
9393: LD_VAR 0 1
9397: PUSH
9398: LD_EXP 22
9402: IN
9403: IFFALSE 9421
// russianForestPatrol := russianForestPatrol diff un ;
9405: LD_ADDR_EXP 22
9409: PUSH
9410: LD_EXP 22
9414: PUSH
9415: LD_VAR 0 1
9419: DIFF
9420: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9421: LD_ADDR_EXP 5
9425: PUSH
9426: LD_EXP 5
9430: PPUSH
9431: LD_EXP 5
9435: PUSH
9436: LD_INT 1
9438: PLUS
9439: PPUSH
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 250
9449: PUSH
9450: LD_VAR 0 1
9454: PPUSH
9455: CALL_OW 251
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PPUSH
9464: CALL_OW 1
9468: ST_TO_ADDR
// end ; end ;
9469: PPOPN 1
9471: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9472: LD_VAR 0 1
9476: PUSH
9477: LD_EXP 16
9481: EQUAL
9482: IFFALSE 9491
// YouLost ( Heike ) ;
9484: LD_STRING Heike
9486: PPUSH
9487: CALL_OW 104
// end ;
9491: PPOPN 1
9493: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9494: LD_VAR 0 1
9498: PUSH
9499: LD_INT 2
9501: EQUAL
9502: PUSH
9503: LD_VAR 0 2
9507: PUSH
9508: LD_INT 5
9510: EQUAL
9511: AND
9512: IFFALSE 9521
// YouLost ( FriendlyFire ) ;
9514: LD_STRING FriendlyFire
9516: PPUSH
9517: CALL_OW 104
// end ; end_of_file
9521: PPOPN 2
9523: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9524: GO 9526
9526: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9527: LD_STRING initStreamRollete();
9529: PPUSH
9530: CALL_OW 559
// InitStreamMode ;
9534: CALL 9543 0 0
// DefineStreamItems ( ) ;
9538: CALL 9983 0 0
// end ;
9542: END
// function InitStreamMode ; begin
9543: LD_INT 0
9545: PPUSH
// streamModeActive := false ;
9546: LD_ADDR_EXP 26
9550: PUSH
9551: LD_INT 0
9553: ST_TO_ADDR
// normalCounter := 36 ;
9554: LD_ADDR_EXP 27
9558: PUSH
9559: LD_INT 36
9561: ST_TO_ADDR
// hardcoreCounter := 16 ;
9562: LD_ADDR_EXP 28
9566: PUSH
9567: LD_INT 16
9569: ST_TO_ADDR
// sRocket := false ;
9570: LD_ADDR_EXP 31
9574: PUSH
9575: LD_INT 0
9577: ST_TO_ADDR
// sSpeed := false ;
9578: LD_ADDR_EXP 30
9582: PUSH
9583: LD_INT 0
9585: ST_TO_ADDR
// sEngine := false ;
9586: LD_ADDR_EXP 32
9590: PUSH
9591: LD_INT 0
9593: ST_TO_ADDR
// sSpec := false ;
9594: LD_ADDR_EXP 29
9598: PUSH
9599: LD_INT 0
9601: ST_TO_ADDR
// sLevel := false ;
9602: LD_ADDR_EXP 33
9606: PUSH
9607: LD_INT 0
9609: ST_TO_ADDR
// sArmoury := false ;
9610: LD_ADDR_EXP 34
9614: PUSH
9615: LD_INT 0
9617: ST_TO_ADDR
// sRadar := false ;
9618: LD_ADDR_EXP 35
9622: PUSH
9623: LD_INT 0
9625: ST_TO_ADDR
// sBunker := false ;
9626: LD_ADDR_EXP 36
9630: PUSH
9631: LD_INT 0
9633: ST_TO_ADDR
// sHack := false ;
9634: LD_ADDR_EXP 37
9638: PUSH
9639: LD_INT 0
9641: ST_TO_ADDR
// sFire := false ;
9642: LD_ADDR_EXP 38
9646: PUSH
9647: LD_INT 0
9649: ST_TO_ADDR
// sRefresh := false ;
9650: LD_ADDR_EXP 39
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// sExp := false ;
9658: LD_ADDR_EXP 40
9662: PUSH
9663: LD_INT 0
9665: ST_TO_ADDR
// sDepot := false ;
9666: LD_ADDR_EXP 41
9670: PUSH
9671: LD_INT 0
9673: ST_TO_ADDR
// sFlag := false ;
9674: LD_ADDR_EXP 42
9678: PUSH
9679: LD_INT 0
9681: ST_TO_ADDR
// sKamikadze := false ;
9682: LD_ADDR_EXP 50
9686: PUSH
9687: LD_INT 0
9689: ST_TO_ADDR
// sTroll := false ;
9690: LD_ADDR_EXP 51
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// sSlow := false ;
9698: LD_ADDR_EXP 52
9702: PUSH
9703: LD_INT 0
9705: ST_TO_ADDR
// sLack := false ;
9706: LD_ADDR_EXP 53
9710: PUSH
9711: LD_INT 0
9713: ST_TO_ADDR
// sTank := false ;
9714: LD_ADDR_EXP 55
9718: PUSH
9719: LD_INT 0
9721: ST_TO_ADDR
// sRemote := false ;
9722: LD_ADDR_EXP 56
9726: PUSH
9727: LD_INT 0
9729: ST_TO_ADDR
// sPowell := false ;
9730: LD_ADDR_EXP 57
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// sTeleport := false ;
9738: LD_ADDR_EXP 60
9742: PUSH
9743: LD_INT 0
9745: ST_TO_ADDR
// sOilTower := false ;
9746: LD_ADDR_EXP 62
9750: PUSH
9751: LD_INT 0
9753: ST_TO_ADDR
// sShovel := false ;
9754: LD_ADDR_EXP 63
9758: PUSH
9759: LD_INT 0
9761: ST_TO_ADDR
// sSheik := false ;
9762: LD_ADDR_EXP 64
9766: PUSH
9767: LD_INT 0
9769: ST_TO_ADDR
// sEarthquake := false ;
9770: LD_ADDR_EXP 66
9774: PUSH
9775: LD_INT 0
9777: ST_TO_ADDR
// sAI := false ;
9778: LD_ADDR_EXP 67
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// sCargo := false ;
9786: LD_ADDR_EXP 70
9790: PUSH
9791: LD_INT 0
9793: ST_TO_ADDR
// sDLaser := false ;
9794: LD_ADDR_EXP 71
9798: PUSH
9799: LD_INT 0
9801: ST_TO_ADDR
// sExchange := false ;
9802: LD_ADDR_EXP 72
9806: PUSH
9807: LD_INT 0
9809: ST_TO_ADDR
// sFac := false ;
9810: LD_ADDR_EXP 73
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// sPower := false ;
9818: LD_ADDR_EXP 74
9822: PUSH
9823: LD_INT 0
9825: ST_TO_ADDR
// sRandom := false ;
9826: LD_ADDR_EXP 75
9830: PUSH
9831: LD_INT 0
9833: ST_TO_ADDR
// sShield := false ;
9834: LD_ADDR_EXP 76
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// sTime := false ;
9842: LD_ADDR_EXP 77
9846: PUSH
9847: LD_INT 0
9849: ST_TO_ADDR
// sTools := false ;
9850: LD_ADDR_EXP 78
9854: PUSH
9855: LD_INT 0
9857: ST_TO_ADDR
// sSold := false ;
9858: LD_ADDR_EXP 43
9862: PUSH
9863: LD_INT 0
9865: ST_TO_ADDR
// sDiff := false ;
9866: LD_ADDR_EXP 44
9870: PUSH
9871: LD_INT 0
9873: ST_TO_ADDR
// sFog := false ;
9874: LD_ADDR_EXP 47
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// sReset := false ;
9882: LD_ADDR_EXP 48
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// sSun := false ;
9890: LD_ADDR_EXP 49
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// sTiger := false ;
9898: LD_ADDR_EXP 45
9902: PUSH
9903: LD_INT 0
9905: ST_TO_ADDR
// sBomb := false ;
9906: LD_ADDR_EXP 46
9910: PUSH
9911: LD_INT 0
9913: ST_TO_ADDR
// sWound := false ;
9914: LD_ADDR_EXP 54
9918: PUSH
9919: LD_INT 0
9921: ST_TO_ADDR
// sBetray := false ;
9922: LD_ADDR_EXP 58
9926: PUSH
9927: LD_INT 0
9929: ST_TO_ADDR
// sContamin := false ;
9930: LD_ADDR_EXP 59
9934: PUSH
9935: LD_INT 0
9937: ST_TO_ADDR
// sOil := false ;
9938: LD_ADDR_EXP 61
9942: PUSH
9943: LD_INT 0
9945: ST_TO_ADDR
// sStu := false ;
9946: LD_ADDR_EXP 65
9950: PUSH
9951: LD_INT 0
9953: ST_TO_ADDR
// sBazooka := false ;
9954: LD_ADDR_EXP 68
9958: PUSH
9959: LD_INT 0
9961: ST_TO_ADDR
// sMortar := false ;
9962: LD_ADDR_EXP 69
9966: PUSH
9967: LD_INT 0
9969: ST_TO_ADDR
// sRanger := false ;
9970: LD_ADDR_EXP 79
9974: PUSH
9975: LD_INT 0
9977: ST_TO_ADDR
// end ;
9978: LD_VAR 0 1
9982: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9983: LD_INT 0
9985: PPUSH
9986: PPUSH
9987: PPUSH
9988: PPUSH
9989: PPUSH
// result := [ ] ;
9990: LD_ADDR_VAR 0 1
9994: PUSH
9995: EMPTY
9996: ST_TO_ADDR
// if campaign_id = 1 then
9997: LD_OWVAR 69
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 12943
// begin case mission_number of 1 :
10007: LD_OWVAR 70
10011: PUSH
10012: LD_INT 1
10014: DOUBLE
10015: EQUAL
10016: IFTRUE 10020
10018: GO 10084
10020: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10021: LD_ADDR_VAR 0 1
10025: PUSH
10026: LD_INT 2
10028: PUSH
10029: LD_INT 4
10031: PUSH
10032: LD_INT 11
10034: PUSH
10035: LD_INT 12
10037: PUSH
10038: LD_INT 15
10040: PUSH
10041: LD_INT 16
10043: PUSH
10044: LD_INT 22
10046: PUSH
10047: LD_INT 23
10049: PUSH
10050: LD_INT 26
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 101
10066: PUSH
10067: LD_INT 102
10069: PUSH
10070: LD_INT 106
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: ST_TO_ADDR
10082: GO 12941
10084: LD_INT 2
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10164
10092: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10093: LD_ADDR_VAR 0 1
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: LD_INT 11
10106: PUSH
10107: LD_INT 12
10109: PUSH
10110: LD_INT 15
10112: PUSH
10113: LD_INT 16
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 101
10138: PUSH
10139: LD_INT 102
10141: PUSH
10142: LD_INT 105
10144: PUSH
10145: LD_INT 106
10147: PUSH
10148: LD_INT 108
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: ST_TO_ADDR
10162: GO 12941
10164: LD_INT 3
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10248
10172: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10173: LD_ADDR_VAR 0 1
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 11
10189: PUSH
10190: LD_INT 12
10192: PUSH
10193: LD_INT 15
10195: PUSH
10196: LD_INT 16
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_INT 26
10204: PUSH
10205: LD_INT 36
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 101
10222: PUSH
10223: LD_INT 102
10225: PUSH
10226: LD_INT 105
10228: PUSH
10229: LD_INT 106
10231: PUSH
10232: LD_INT 108
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: ST_TO_ADDR
10246: GO 12941
10248: LD_INT 4
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10340
10256: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10257: LD_ADDR_VAR 0 1
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: LD_INT 4
10267: PUSH
10268: LD_INT 5
10270: PUSH
10271: LD_INT 8
10273: PUSH
10274: LD_INT 11
10276: PUSH
10277: LD_INT 12
10279: PUSH
10280: LD_INT 15
10282: PUSH
10283: LD_INT 16
10285: PUSH
10286: LD_INT 22
10288: PUSH
10289: LD_INT 23
10291: PUSH
10292: LD_INT 26
10294: PUSH
10295: LD_INT 36
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 101
10314: PUSH
10315: LD_INT 102
10317: PUSH
10318: LD_INT 105
10320: PUSH
10321: LD_INT 106
10323: PUSH
10324: LD_INT 108
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: ST_TO_ADDR
10338: GO 12941
10340: LD_INT 5
10342: DOUBLE
10343: EQUAL
10344: IFTRUE 10348
10346: GO 10448
10348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10349: LD_ADDR_VAR 0 1
10353: PUSH
10354: LD_INT 2
10356: PUSH
10357: LD_INT 4
10359: PUSH
10360: LD_INT 5
10362: PUSH
10363: LD_INT 6
10365: PUSH
10366: LD_INT 8
10368: PUSH
10369: LD_INT 11
10371: PUSH
10372: LD_INT 12
10374: PUSH
10375: LD_INT 15
10377: PUSH
10378: LD_INT 16
10380: PUSH
10381: LD_INT 22
10383: PUSH
10384: LD_INT 23
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 26
10392: PUSH
10393: LD_INT 36
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 101
10414: PUSH
10415: LD_INT 102
10417: PUSH
10418: LD_INT 105
10420: PUSH
10421: LD_INT 106
10423: PUSH
10424: LD_INT 108
10426: PUSH
10427: LD_INT 109
10429: PUSH
10430: LD_INT 112
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: ST_TO_ADDR
10446: GO 12941
10448: LD_INT 6
10450: DOUBLE
10451: EQUAL
10452: IFTRUE 10456
10454: GO 10576
10456: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10457: LD_ADDR_VAR 0 1
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: LD_INT 4
10467: PUSH
10468: LD_INT 5
10470: PUSH
10471: LD_INT 6
10473: PUSH
10474: LD_INT 8
10476: PUSH
10477: LD_INT 11
10479: PUSH
10480: LD_INT 12
10482: PUSH
10483: LD_INT 15
10485: PUSH
10486: LD_INT 16
10488: PUSH
10489: LD_INT 20
10491: PUSH
10492: LD_INT 21
10494: PUSH
10495: LD_INT 22
10497: PUSH
10498: LD_INT 23
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 26
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: LD_INT 31
10512: PUSH
10513: LD_INT 32
10515: PUSH
10516: LD_INT 36
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 102
10545: PUSH
10546: LD_INT 105
10548: PUSH
10549: LD_INT 106
10551: PUSH
10552: LD_INT 108
10554: PUSH
10555: LD_INT 109
10557: PUSH
10558: LD_INT 112
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
10574: GO 12941
10576: LD_INT 7
10578: DOUBLE
10579: EQUAL
10580: IFTRUE 10584
10582: GO 10684
10584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10585: LD_ADDR_VAR 0 1
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 4
10595: PUSH
10596: LD_INT 5
10598: PUSH
10599: LD_INT 7
10601: PUSH
10602: LD_INT 11
10604: PUSH
10605: LD_INT 12
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 16
10613: PUSH
10614: LD_INT 20
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 22
10622: PUSH
10623: LD_INT 23
10625: PUSH
10626: LD_INT 25
10628: PUSH
10629: LD_INT 26
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 101
10650: PUSH
10651: LD_INT 102
10653: PUSH
10654: LD_INT 103
10656: PUSH
10657: LD_INT 105
10659: PUSH
10660: LD_INT 106
10662: PUSH
10663: LD_INT 108
10665: PUSH
10666: LD_INT 112
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: ST_TO_ADDR
10682: GO 12941
10684: LD_INT 8
10686: DOUBLE
10687: EQUAL
10688: IFTRUE 10692
10690: GO 10820
10692: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10693: LD_ADDR_VAR 0 1
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 4
10703: PUSH
10704: LD_INT 5
10706: PUSH
10707: LD_INT 6
10709: PUSH
10710: LD_INT 7
10712: PUSH
10713: LD_INT 8
10715: PUSH
10716: LD_INT 11
10718: PUSH
10719: LD_INT 12
10721: PUSH
10722: LD_INT 15
10724: PUSH
10725: LD_INT 16
10727: PUSH
10728: LD_INT 20
10730: PUSH
10731: LD_INT 21
10733: PUSH
10734: LD_INT 22
10736: PUSH
10737: LD_INT 23
10739: PUSH
10740: LD_INT 25
10742: PUSH
10743: LD_INT 26
10745: PUSH
10746: LD_INT 30
10748: PUSH
10749: LD_INT 31
10751: PUSH
10752: LD_INT 32
10754: PUSH
10755: LD_INT 36
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 101
10782: PUSH
10783: LD_INT 102
10785: PUSH
10786: LD_INT 103
10788: PUSH
10789: LD_INT 105
10791: PUSH
10792: LD_INT 106
10794: PUSH
10795: LD_INT 108
10797: PUSH
10798: LD_INT 109
10800: PUSH
10801: LD_INT 112
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: ST_TO_ADDR
10818: GO 12941
10820: LD_INT 9
10822: DOUBLE
10823: EQUAL
10824: IFTRUE 10828
10826: GO 10964
10828: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10829: LD_ADDR_VAR 0 1
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: LD_INT 4
10839: PUSH
10840: LD_INT 5
10842: PUSH
10843: LD_INT 6
10845: PUSH
10846: LD_INT 7
10848: PUSH
10849: LD_INT 8
10851: PUSH
10852: LD_INT 11
10854: PUSH
10855: LD_INT 12
10857: PUSH
10858: LD_INT 15
10860: PUSH
10861: LD_INT 16
10863: PUSH
10864: LD_INT 20
10866: PUSH
10867: LD_INT 21
10869: PUSH
10870: LD_INT 22
10872: PUSH
10873: LD_INT 23
10875: PUSH
10876: LD_INT 25
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 28
10884: PUSH
10885: LD_INT 30
10887: PUSH
10888: LD_INT 31
10890: PUSH
10891: LD_INT 32
10893: PUSH
10894: LD_INT 36
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 101
10922: PUSH
10923: LD_INT 102
10925: PUSH
10926: LD_INT 103
10928: PUSH
10929: LD_INT 105
10931: PUSH
10932: LD_INT 106
10934: PUSH
10935: LD_INT 108
10937: PUSH
10938: LD_INT 109
10940: PUSH
10941: LD_INT 112
10943: PUSH
10944: LD_INT 114
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: ST_TO_ADDR
10962: GO 12941
10964: LD_INT 10
10966: DOUBLE
10967: EQUAL
10968: IFTRUE 10972
10970: GO 11156
10972: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_INT 2
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: LD_INT 5
10986: PUSH
10987: LD_INT 6
10989: PUSH
10990: LD_INT 7
10992: PUSH
10993: LD_INT 8
10995: PUSH
10996: LD_INT 9
10998: PUSH
10999: LD_INT 10
11001: PUSH
11002: LD_INT 11
11004: PUSH
11005: LD_INT 12
11007: PUSH
11008: LD_INT 13
11010: PUSH
11011: LD_INT 14
11013: PUSH
11014: LD_INT 15
11016: PUSH
11017: LD_INT 16
11019: PUSH
11020: LD_INT 17
11022: PUSH
11023: LD_INT 18
11025: PUSH
11026: LD_INT 19
11028: PUSH
11029: LD_INT 20
11031: PUSH
11032: LD_INT 21
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_INT 23
11040: PUSH
11041: LD_INT 24
11043: PUSH
11044: LD_INT 25
11046: PUSH
11047: LD_INT 26
11049: PUSH
11050: LD_INT 28
11052: PUSH
11053: LD_INT 30
11055: PUSH
11056: LD_INT 31
11058: PUSH
11059: LD_INT 32
11061: PUSH
11062: LD_INT 36
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 101
11098: PUSH
11099: LD_INT 102
11101: PUSH
11102: LD_INT 103
11104: PUSH
11105: LD_INT 104
11107: PUSH
11108: LD_INT 105
11110: PUSH
11111: LD_INT 106
11113: PUSH
11114: LD_INT 107
11116: PUSH
11117: LD_INT 108
11119: PUSH
11120: LD_INT 109
11122: PUSH
11123: LD_INT 110
11125: PUSH
11126: LD_INT 111
11128: PUSH
11129: LD_INT 112
11131: PUSH
11132: LD_INT 114
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: ST_TO_ADDR
11154: GO 12941
11156: LD_INT 11
11158: DOUBLE
11159: EQUAL
11160: IFTRUE 11164
11162: GO 11356
11164: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11165: LD_ADDR_VAR 0 1
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: LD_INT 4
11178: PUSH
11179: LD_INT 5
11181: PUSH
11182: LD_INT 6
11184: PUSH
11185: LD_INT 7
11187: PUSH
11188: LD_INT 8
11190: PUSH
11191: LD_INT 9
11193: PUSH
11194: LD_INT 10
11196: PUSH
11197: LD_INT 11
11199: PUSH
11200: LD_INT 12
11202: PUSH
11203: LD_INT 13
11205: PUSH
11206: LD_INT 14
11208: PUSH
11209: LD_INT 15
11211: PUSH
11212: LD_INT 16
11214: PUSH
11215: LD_INT 17
11217: PUSH
11218: LD_INT 18
11220: PUSH
11221: LD_INT 19
11223: PUSH
11224: LD_INT 20
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 22
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 24
11238: PUSH
11239: LD_INT 25
11241: PUSH
11242: LD_INT 26
11244: PUSH
11245: LD_INT 28
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_INT 31
11253: PUSH
11254: LD_INT 32
11256: PUSH
11257: LD_INT 34
11259: PUSH
11260: LD_INT 36
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 101
11298: PUSH
11299: LD_INT 102
11301: PUSH
11302: LD_INT 103
11304: PUSH
11305: LD_INT 104
11307: PUSH
11308: LD_INT 105
11310: PUSH
11311: LD_INT 106
11313: PUSH
11314: LD_INT 107
11316: PUSH
11317: LD_INT 108
11319: PUSH
11320: LD_INT 109
11322: PUSH
11323: LD_INT 110
11325: PUSH
11326: LD_INT 111
11328: PUSH
11329: LD_INT 112
11331: PUSH
11332: LD_INT 114
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: ST_TO_ADDR
11354: GO 12941
11356: LD_INT 12
11358: DOUBLE
11359: EQUAL
11360: IFTRUE 11364
11362: GO 11572
11364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: LD_INT 4
11381: PUSH
11382: LD_INT 5
11384: PUSH
11385: LD_INT 6
11387: PUSH
11388: LD_INT 7
11390: PUSH
11391: LD_INT 8
11393: PUSH
11394: LD_INT 9
11396: PUSH
11397: LD_INT 10
11399: PUSH
11400: LD_INT 11
11402: PUSH
11403: LD_INT 12
11405: PUSH
11406: LD_INT 13
11408: PUSH
11409: LD_INT 14
11411: PUSH
11412: LD_INT 15
11414: PUSH
11415: LD_INT 16
11417: PUSH
11418: LD_INT 17
11420: PUSH
11421: LD_INT 18
11423: PUSH
11424: LD_INT 19
11426: PUSH
11427: LD_INT 20
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_INT 23
11438: PUSH
11439: LD_INT 24
11441: PUSH
11442: LD_INT 25
11444: PUSH
11445: LD_INT 26
11447: PUSH
11448: LD_INT 27
11450: PUSH
11451: LD_INT 28
11453: PUSH
11454: LD_INT 30
11456: PUSH
11457: LD_INT 31
11459: PUSH
11460: LD_INT 32
11462: PUSH
11463: LD_INT 33
11465: PUSH
11466: LD_INT 34
11468: PUSH
11469: LD_INT 36
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 101
11510: PUSH
11511: LD_INT 102
11513: PUSH
11514: LD_INT 103
11516: PUSH
11517: LD_INT 104
11519: PUSH
11520: LD_INT 105
11522: PUSH
11523: LD_INT 106
11525: PUSH
11526: LD_INT 107
11528: PUSH
11529: LD_INT 108
11531: PUSH
11532: LD_INT 109
11534: PUSH
11535: LD_INT 110
11537: PUSH
11538: LD_INT 111
11540: PUSH
11541: LD_INT 112
11543: PUSH
11544: LD_INT 113
11546: PUSH
11547: LD_INT 114
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: ST_TO_ADDR
11570: GO 12941
11572: LD_INT 13
11574: DOUBLE
11575: EQUAL
11576: IFTRUE 11580
11578: GO 11776
11580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11581: LD_ADDR_VAR 0 1
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: LD_INT 3
11594: PUSH
11595: LD_INT 4
11597: PUSH
11598: LD_INT 5
11600: PUSH
11601: LD_INT 8
11603: PUSH
11604: LD_INT 9
11606: PUSH
11607: LD_INT 10
11609: PUSH
11610: LD_INT 11
11612: PUSH
11613: LD_INT 12
11615: PUSH
11616: LD_INT 14
11618: PUSH
11619: LD_INT 15
11621: PUSH
11622: LD_INT 16
11624: PUSH
11625: LD_INT 17
11627: PUSH
11628: LD_INT 18
11630: PUSH
11631: LD_INT 19
11633: PUSH
11634: LD_INT 20
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 23
11645: PUSH
11646: LD_INT 24
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 26
11654: PUSH
11655: LD_INT 27
11657: PUSH
11658: LD_INT 28
11660: PUSH
11661: LD_INT 30
11663: PUSH
11664: LD_INT 31
11666: PUSH
11667: LD_INT 32
11669: PUSH
11670: LD_INT 33
11672: PUSH
11673: LD_INT 34
11675: PUSH
11676: LD_INT 36
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 101
11714: PUSH
11715: LD_INT 102
11717: PUSH
11718: LD_INT 103
11720: PUSH
11721: LD_INT 104
11723: PUSH
11724: LD_INT 105
11726: PUSH
11727: LD_INT 106
11729: PUSH
11730: LD_INT 107
11732: PUSH
11733: LD_INT 108
11735: PUSH
11736: LD_INT 109
11738: PUSH
11739: LD_INT 110
11741: PUSH
11742: LD_INT 111
11744: PUSH
11745: LD_INT 112
11747: PUSH
11748: LD_INT 113
11750: PUSH
11751: LD_INT 114
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 12941
11776: LD_INT 14
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11996
11784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11785: LD_ADDR_VAR 0 1
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: LD_INT 3
11798: PUSH
11799: LD_INT 4
11801: PUSH
11802: LD_INT 5
11804: PUSH
11805: LD_INT 6
11807: PUSH
11808: LD_INT 7
11810: PUSH
11811: LD_INT 8
11813: PUSH
11814: LD_INT 9
11816: PUSH
11817: LD_INT 10
11819: PUSH
11820: LD_INT 11
11822: PUSH
11823: LD_INT 12
11825: PUSH
11826: LD_INT 13
11828: PUSH
11829: LD_INT 14
11831: PUSH
11832: LD_INT 15
11834: PUSH
11835: LD_INT 16
11837: PUSH
11838: LD_INT 17
11840: PUSH
11841: LD_INT 18
11843: PUSH
11844: LD_INT 19
11846: PUSH
11847: LD_INT 20
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 23
11858: PUSH
11859: LD_INT 24
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 26
11867: PUSH
11868: LD_INT 27
11870: PUSH
11871: LD_INT 28
11873: PUSH
11874: LD_INT 29
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 31
11882: PUSH
11883: LD_INT 32
11885: PUSH
11886: LD_INT 33
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 36
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 101
11934: PUSH
11935: LD_INT 102
11937: PUSH
11938: LD_INT 103
11940: PUSH
11941: LD_INT 104
11943: PUSH
11944: LD_INT 105
11946: PUSH
11947: LD_INT 106
11949: PUSH
11950: LD_INT 107
11952: PUSH
11953: LD_INT 108
11955: PUSH
11956: LD_INT 109
11958: PUSH
11959: LD_INT 110
11961: PUSH
11962: LD_INT 111
11964: PUSH
11965: LD_INT 112
11967: PUSH
11968: LD_INT 113
11970: PUSH
11971: LD_INT 114
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: ST_TO_ADDR
11994: GO 12941
11996: LD_INT 15
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12216
12004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12005: LD_ADDR_VAR 0 1
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: LD_INT 4
12021: PUSH
12022: LD_INT 5
12024: PUSH
12025: LD_INT 6
12027: PUSH
12028: LD_INT 7
12030: PUSH
12031: LD_INT 8
12033: PUSH
12034: LD_INT 9
12036: PUSH
12037: LD_INT 10
12039: PUSH
12040: LD_INT 11
12042: PUSH
12043: LD_INT 12
12045: PUSH
12046: LD_INT 13
12048: PUSH
12049: LD_INT 14
12051: PUSH
12052: LD_INT 15
12054: PUSH
12055: LD_INT 16
12057: PUSH
12058: LD_INT 17
12060: PUSH
12061: LD_INT 18
12063: PUSH
12064: LD_INT 19
12066: PUSH
12067: LD_INT 20
12069: PUSH
12070: LD_INT 21
12072: PUSH
12073: LD_INT 22
12075: PUSH
12076: LD_INT 23
12078: PUSH
12079: LD_INT 24
12081: PUSH
12082: LD_INT 25
12084: PUSH
12085: LD_INT 26
12087: PUSH
12088: LD_INT 27
12090: PUSH
12091: LD_INT 28
12093: PUSH
12094: LD_INT 29
12096: PUSH
12097: LD_INT 30
12099: PUSH
12100: LD_INT 31
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 33
12108: PUSH
12109: LD_INT 34
12111: PUSH
12112: LD_INT 36
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 101
12154: PUSH
12155: LD_INT 102
12157: PUSH
12158: LD_INT 103
12160: PUSH
12161: LD_INT 104
12163: PUSH
12164: LD_INT 105
12166: PUSH
12167: LD_INT 106
12169: PUSH
12170: LD_INT 107
12172: PUSH
12173: LD_INT 108
12175: PUSH
12176: LD_INT 109
12178: PUSH
12179: LD_INT 110
12181: PUSH
12182: LD_INT 111
12184: PUSH
12185: LD_INT 112
12187: PUSH
12188: LD_INT 113
12190: PUSH
12191: LD_INT 114
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: ST_TO_ADDR
12214: GO 12941
12216: LD_INT 16
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12348
12224: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12225: LD_ADDR_VAR 0 1
12229: PUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 4
12235: PUSH
12236: LD_INT 5
12238: PUSH
12239: LD_INT 7
12241: PUSH
12242: LD_INT 11
12244: PUSH
12245: LD_INT 12
12247: PUSH
12248: LD_INT 15
12250: PUSH
12251: LD_INT 16
12253: PUSH
12254: LD_INT 20
12256: PUSH
12257: LD_INT 21
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 25
12268: PUSH
12269: LD_INT 26
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 31
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: LD_INT 33
12283: PUSH
12284: LD_INT 34
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 101
12310: PUSH
12311: LD_INT 102
12313: PUSH
12314: LD_INT 103
12316: PUSH
12317: LD_INT 106
12319: PUSH
12320: LD_INT 108
12322: PUSH
12323: LD_INT 112
12325: PUSH
12326: LD_INT 113
12328: PUSH
12329: LD_INT 114
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
12346: GO 12941
12348: LD_INT 17
12350: DOUBLE
12351: EQUAL
12352: IFTRUE 12356
12354: GO 12568
12356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12357: LD_ADDR_VAR 0 1
12361: PUSH
12362: LD_INT 1
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: LD_INT 5
12376: PUSH
12377: LD_INT 6
12379: PUSH
12380: LD_INT 7
12382: PUSH
12383: LD_INT 8
12385: PUSH
12386: LD_INT 9
12388: PUSH
12389: LD_INT 10
12391: PUSH
12392: LD_INT 11
12394: PUSH
12395: LD_INT 12
12397: PUSH
12398: LD_INT 13
12400: PUSH
12401: LD_INT 14
12403: PUSH
12404: LD_INT 15
12406: PUSH
12407: LD_INT 16
12409: PUSH
12410: LD_INT 17
12412: PUSH
12413: LD_INT 18
12415: PUSH
12416: LD_INT 19
12418: PUSH
12419: LD_INT 20
12421: PUSH
12422: LD_INT 21
12424: PUSH
12425: LD_INT 22
12427: PUSH
12428: LD_INT 23
12430: PUSH
12431: LD_INT 24
12433: PUSH
12434: LD_INT 25
12436: PUSH
12437: LD_INT 26
12439: PUSH
12440: LD_INT 27
12442: PUSH
12443: LD_INT 28
12445: PUSH
12446: LD_INT 29
12448: PUSH
12449: LD_INT 30
12451: PUSH
12452: LD_INT 31
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: LD_INT 33
12460: PUSH
12461: LD_INT 34
12463: PUSH
12464: LD_INT 36
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 102
12509: PUSH
12510: LD_INT 103
12512: PUSH
12513: LD_INT 104
12515: PUSH
12516: LD_INT 105
12518: PUSH
12519: LD_INT 106
12521: PUSH
12522: LD_INT 107
12524: PUSH
12525: LD_INT 108
12527: PUSH
12528: LD_INT 109
12530: PUSH
12531: LD_INT 110
12533: PUSH
12534: LD_INT 111
12536: PUSH
12537: LD_INT 112
12539: PUSH
12540: LD_INT 113
12542: PUSH
12543: LD_INT 114
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: ST_TO_ADDR
12566: GO 12941
12568: LD_INT 18
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12712
12576: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12577: LD_ADDR_VAR 0 1
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: LD_INT 5
12590: PUSH
12591: LD_INT 7
12593: PUSH
12594: LD_INT 11
12596: PUSH
12597: LD_INT 12
12599: PUSH
12600: LD_INT 15
12602: PUSH
12603: LD_INT 16
12605: PUSH
12606: LD_INT 20
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 23
12617: PUSH
12618: LD_INT 25
12620: PUSH
12621: LD_INT 26
12623: PUSH
12624: LD_INT 30
12626: PUSH
12627: LD_INT 31
12629: PUSH
12630: LD_INT 32
12632: PUSH
12633: LD_INT 33
12635: PUSH
12636: LD_INT 34
12638: PUSH
12639: LD_INT 35
12641: PUSH
12642: LD_INT 36
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 101
12670: PUSH
12671: LD_INT 102
12673: PUSH
12674: LD_INT 103
12676: PUSH
12677: LD_INT 106
12679: PUSH
12680: LD_INT 108
12682: PUSH
12683: LD_INT 112
12685: PUSH
12686: LD_INT 113
12688: PUSH
12689: LD_INT 114
12691: PUSH
12692: LD_INT 115
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: ST_TO_ADDR
12710: GO 12941
12712: LD_INT 19
12714: DOUBLE
12715: EQUAL
12716: IFTRUE 12720
12718: GO 12940
12720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12721: LD_ADDR_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: LD_INT 2
12731: PUSH
12732: LD_INT 3
12734: PUSH
12735: LD_INT 4
12737: PUSH
12738: LD_INT 5
12740: PUSH
12741: LD_INT 6
12743: PUSH
12744: LD_INT 7
12746: PUSH
12747: LD_INT 8
12749: PUSH
12750: LD_INT 9
12752: PUSH
12753: LD_INT 10
12755: PUSH
12756: LD_INT 11
12758: PUSH
12759: LD_INT 12
12761: PUSH
12762: LD_INT 13
12764: PUSH
12765: LD_INT 14
12767: PUSH
12768: LD_INT 15
12770: PUSH
12771: LD_INT 16
12773: PUSH
12774: LD_INT 17
12776: PUSH
12777: LD_INT 18
12779: PUSH
12780: LD_INT 19
12782: PUSH
12783: LD_INT 20
12785: PUSH
12786: LD_INT 21
12788: PUSH
12789: LD_INT 22
12791: PUSH
12792: LD_INT 23
12794: PUSH
12795: LD_INT 24
12797: PUSH
12798: LD_INT 25
12800: PUSH
12801: LD_INT 26
12803: PUSH
12804: LD_INT 27
12806: PUSH
12807: LD_INT 28
12809: PUSH
12810: LD_INT 29
12812: PUSH
12813: LD_INT 30
12815: PUSH
12816: LD_INT 31
12818: PUSH
12819: LD_INT 32
12821: PUSH
12822: LD_INT 33
12824: PUSH
12825: LD_INT 34
12827: PUSH
12828: LD_INT 35
12830: PUSH
12831: LD_INT 36
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 101
12874: PUSH
12875: LD_INT 102
12877: PUSH
12878: LD_INT 103
12880: PUSH
12881: LD_INT 104
12883: PUSH
12884: LD_INT 105
12886: PUSH
12887: LD_INT 106
12889: PUSH
12890: LD_INT 107
12892: PUSH
12893: LD_INT 108
12895: PUSH
12896: LD_INT 109
12898: PUSH
12899: LD_INT 110
12901: PUSH
12902: LD_INT 111
12904: PUSH
12905: LD_INT 112
12907: PUSH
12908: LD_INT 113
12910: PUSH
12911: LD_INT 114
12913: PUSH
12914: LD_INT 115
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: ST_TO_ADDR
12938: GO 12941
12940: POP
// end else
12941: GO 13160
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12943: LD_ADDR_VAR 0 1
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: LD_INT 4
12959: PUSH
12960: LD_INT 5
12962: PUSH
12963: LD_INT 6
12965: PUSH
12966: LD_INT 7
12968: PUSH
12969: LD_INT 8
12971: PUSH
12972: LD_INT 9
12974: PUSH
12975: LD_INT 10
12977: PUSH
12978: LD_INT 11
12980: PUSH
12981: LD_INT 12
12983: PUSH
12984: LD_INT 13
12986: PUSH
12987: LD_INT 14
12989: PUSH
12990: LD_INT 15
12992: PUSH
12993: LD_INT 16
12995: PUSH
12996: LD_INT 17
12998: PUSH
12999: LD_INT 18
13001: PUSH
13002: LD_INT 19
13004: PUSH
13005: LD_INT 20
13007: PUSH
13008: LD_INT 21
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_INT 23
13016: PUSH
13017: LD_INT 24
13019: PUSH
13020: LD_INT 25
13022: PUSH
13023: LD_INT 26
13025: PUSH
13026: LD_INT 27
13028: PUSH
13029: LD_INT 28
13031: PUSH
13032: LD_INT 29
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 31
13040: PUSH
13041: LD_INT 32
13043: PUSH
13044: LD_INT 33
13046: PUSH
13047: LD_INT 34
13049: PUSH
13050: LD_INT 35
13052: PUSH
13053: LD_INT 36
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 101
13096: PUSH
13097: LD_INT 102
13099: PUSH
13100: LD_INT 103
13102: PUSH
13103: LD_INT 104
13105: PUSH
13106: LD_INT 105
13108: PUSH
13109: LD_INT 106
13111: PUSH
13112: LD_INT 107
13114: PUSH
13115: LD_INT 108
13117: PUSH
13118: LD_INT 109
13120: PUSH
13121: LD_INT 110
13123: PUSH
13124: LD_INT 111
13126: PUSH
13127: LD_INT 112
13129: PUSH
13130: LD_INT 113
13132: PUSH
13133: LD_INT 114
13135: PUSH
13136: LD_INT 115
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: ST_TO_ADDR
// if result then
13160: LD_VAR 0 1
13164: IFFALSE 13453
// begin normal :=  ;
13166: LD_ADDR_VAR 0 3
13170: PUSH
13171: LD_STRING 
13173: ST_TO_ADDR
// hardcore :=  ;
13174: LD_ADDR_VAR 0 4
13178: PUSH
13179: LD_STRING 
13181: ST_TO_ADDR
// for i = 1 to normalCounter do
13182: LD_ADDR_VAR 0 5
13186: PUSH
13187: DOUBLE
13188: LD_INT 1
13190: DEC
13191: ST_TO_ADDR
13192: LD_EXP 27
13196: PUSH
13197: FOR_TO
13198: IFFALSE 13299
// begin tmp := 0 ;
13200: LD_ADDR_VAR 0 2
13204: PUSH
13205: LD_STRING 0
13207: ST_TO_ADDR
// if result [ 1 ] then
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: IFFALSE 13281
// if result [ 1 ] [ 1 ] = i then
13218: LD_VAR 0 1
13222: PUSH
13223: LD_INT 1
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PUSH
13231: LD_VAR 0 5
13235: EQUAL
13236: IFFALSE 13281
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13238: LD_ADDR_VAR 0 1
13242: PUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: LD_VAR 0 1
13255: PUSH
13256: LD_INT 1
13258: ARRAY
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 3
13267: PPUSH
13268: CALL_OW 1
13272: ST_TO_ADDR
// tmp := 1 ;
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: LD_STRING 1
13280: ST_TO_ADDR
// end ; normal := normal & tmp ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_VAR 0 3
13290: PUSH
13291: LD_VAR 0 2
13295: STR
13296: ST_TO_ADDR
// end ;
13297: GO 13197
13299: POP
13300: POP
// for i = 1 to hardcoreCounter do
13301: LD_ADDR_VAR 0 5
13305: PUSH
13306: DOUBLE
13307: LD_INT 1
13309: DEC
13310: ST_TO_ADDR
13311: LD_EXP 28
13315: PUSH
13316: FOR_TO
13317: IFFALSE 13422
// begin tmp := 0 ;
13319: LD_ADDR_VAR 0 2
13323: PUSH
13324: LD_STRING 0
13326: ST_TO_ADDR
// if result [ 2 ] then
13327: LD_VAR 0 1
13331: PUSH
13332: LD_INT 2
13334: ARRAY
13335: IFFALSE 13404
// if result [ 2 ] [ 1 ] = 100 + i then
13337: LD_VAR 0 1
13341: PUSH
13342: LD_INT 2
13344: ARRAY
13345: PUSH
13346: LD_INT 1
13348: ARRAY
13349: PUSH
13350: LD_INT 100
13352: PUSH
13353: LD_VAR 0 5
13357: PLUS
13358: EQUAL
13359: IFFALSE 13404
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13361: LD_ADDR_VAR 0 1
13365: PUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_INT 2
13373: PPUSH
13374: LD_VAR 0 1
13378: PUSH
13379: LD_INT 2
13381: ARRAY
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 3
13390: PPUSH
13391: CALL_OW 1
13395: ST_TO_ADDR
// tmp := 1 ;
13396: LD_ADDR_VAR 0 2
13400: PUSH
13401: LD_STRING 1
13403: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13404: LD_ADDR_VAR 0 4
13408: PUSH
13409: LD_VAR 0 4
13413: PUSH
13414: LD_VAR 0 2
13418: STR
13419: ST_TO_ADDR
// end ;
13420: GO 13316
13422: POP
13423: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13424: LD_STRING getStreamItemsFromMission("
13426: PUSH
13427: LD_VAR 0 3
13431: STR
13432: PUSH
13433: LD_STRING ","
13435: STR
13436: PUSH
13437: LD_VAR 0 4
13441: STR
13442: PUSH
13443: LD_STRING ")
13445: STR
13446: PPUSH
13447: CALL_OW 559
// end else
13451: GO 13460
// ToLua ( getStreamItemsFromMission("","") ) ;
13453: LD_STRING getStreamItemsFromMission("","")
13455: PPUSH
13456: CALL_OW 559
// end ;
13460: LD_VAR 0 1
13464: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13465: LD_VAR 0 2
13469: PUSH
13470: LD_INT 100
13472: EQUAL
13473: IFFALSE 14422
// begin if not StreamModeActive then
13475: LD_EXP 26
13479: NOT
13480: IFFALSE 13490
// StreamModeActive := true ;
13482: LD_ADDR_EXP 26
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 0 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 0
13497: EQUAL
13498: IFFALSE 13504
// InitStreamMode ;
13500: CALL 9543 0 0
// if p3 = 1 then
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 1
13511: EQUAL
13512: IFFALSE 13522
// sRocket := true ;
13514: LD_ADDR_EXP 31
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// if p3 = 2 then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_INT 2
13529: EQUAL
13530: IFFALSE 13540
// sSpeed := true ;
13532: LD_ADDR_EXP 30
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// if p3 = 3 then
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 3
13547: EQUAL
13548: IFFALSE 13558
// sEngine := true ;
13550: LD_ADDR_EXP 32
13554: PUSH
13555: LD_INT 1
13557: ST_TO_ADDR
// if p3 = 4 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 4
13565: EQUAL
13566: IFFALSE 13576
// sSpec := true ;
13568: LD_ADDR_EXP 29
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// if p3 = 5 then
13576: LD_VAR 0 3
13580: PUSH
13581: LD_INT 5
13583: EQUAL
13584: IFFALSE 13594
// sLevel := true ;
13586: LD_ADDR_EXP 33
13590: PUSH
13591: LD_INT 1
13593: ST_TO_ADDR
// if p3 = 6 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 6
13601: EQUAL
13602: IFFALSE 13612
// sArmoury := true ;
13604: LD_ADDR_EXP 34
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// if p3 = 7 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 7
13619: EQUAL
13620: IFFALSE 13630
// sRadar := true ;
13622: LD_ADDR_EXP 35
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 8 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 8
13637: EQUAL
13638: IFFALSE 13648
// sBunker := true ;
13640: LD_ADDR_EXP 36
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 9 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 9
13655: EQUAL
13656: IFFALSE 13666
// sHack := true ;
13658: LD_ADDR_EXP 37
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 10 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 10
13673: EQUAL
13674: IFFALSE 13684
// sFire := true ;
13676: LD_ADDR_EXP 38
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 11 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 11
13691: EQUAL
13692: IFFALSE 13702
// sRefresh := true ;
13694: LD_ADDR_EXP 39
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 12 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 12
13709: EQUAL
13710: IFFALSE 13720
// sExp := true ;
13712: LD_ADDR_EXP 40
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 13 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 13
13727: EQUAL
13728: IFFALSE 13738
// sDepot := true ;
13730: LD_ADDR_EXP 41
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 14 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 14
13745: EQUAL
13746: IFFALSE 13756
// sFlag := true ;
13748: LD_ADDR_EXP 42
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 15 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 15
13763: EQUAL
13764: IFFALSE 13774
// sKamikadze := true ;
13766: LD_ADDR_EXP 50
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 16 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 16
13781: EQUAL
13782: IFFALSE 13792
// sTroll := true ;
13784: LD_ADDR_EXP 51
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 17 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 17
13799: EQUAL
13800: IFFALSE 13810
// sSlow := true ;
13802: LD_ADDR_EXP 52
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 18 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 18
13817: EQUAL
13818: IFFALSE 13828
// sLack := true ;
13820: LD_ADDR_EXP 53
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 19 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 19
13835: EQUAL
13836: IFFALSE 13846
// sTank := true ;
13838: LD_ADDR_EXP 55
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 20 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 20
13853: EQUAL
13854: IFFALSE 13864
// sRemote := true ;
13856: LD_ADDR_EXP 56
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 21 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 21
13871: EQUAL
13872: IFFALSE 13882
// sPowell := true ;
13874: LD_ADDR_EXP 57
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 22 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 22
13889: EQUAL
13890: IFFALSE 13900
// sTeleport := true ;
13892: LD_ADDR_EXP 60
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 23 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 23
13907: EQUAL
13908: IFFALSE 13918
// sOilTower := true ;
13910: LD_ADDR_EXP 62
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 24 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 24
13925: EQUAL
13926: IFFALSE 13936
// sShovel := true ;
13928: LD_ADDR_EXP 63
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 25 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 25
13943: EQUAL
13944: IFFALSE 13954
// sSheik := true ;
13946: LD_ADDR_EXP 64
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 26 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 26
13961: EQUAL
13962: IFFALSE 13972
// sEarthquake := true ;
13964: LD_ADDR_EXP 66
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 27 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 27
13979: EQUAL
13980: IFFALSE 13990
// sAI := true ;
13982: LD_ADDR_EXP 67
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// if p3 = 28 then
13990: LD_VAR 0 3
13994: PUSH
13995: LD_INT 28
13997: EQUAL
13998: IFFALSE 14008
// sCargo := true ;
14000: LD_ADDR_EXP 70
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// if p3 = 29 then
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 29
14015: EQUAL
14016: IFFALSE 14026
// sDLaser := true ;
14018: LD_ADDR_EXP 71
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// if p3 = 30 then
14026: LD_VAR 0 3
14030: PUSH
14031: LD_INT 30
14033: EQUAL
14034: IFFALSE 14044
// sExchange := true ;
14036: LD_ADDR_EXP 72
14040: PUSH
14041: LD_INT 1
14043: ST_TO_ADDR
// if p3 = 31 then
14044: LD_VAR 0 3
14048: PUSH
14049: LD_INT 31
14051: EQUAL
14052: IFFALSE 14062
// sFac := true ;
14054: LD_ADDR_EXP 73
14058: PUSH
14059: LD_INT 1
14061: ST_TO_ADDR
// if p3 = 32 then
14062: LD_VAR 0 3
14066: PUSH
14067: LD_INT 32
14069: EQUAL
14070: IFFALSE 14080
// sPower := true ;
14072: LD_ADDR_EXP 74
14076: PUSH
14077: LD_INT 1
14079: ST_TO_ADDR
// if p3 = 33 then
14080: LD_VAR 0 3
14084: PUSH
14085: LD_INT 33
14087: EQUAL
14088: IFFALSE 14098
// sRandom := true ;
14090: LD_ADDR_EXP 75
14094: PUSH
14095: LD_INT 1
14097: ST_TO_ADDR
// if p3 = 34 then
14098: LD_VAR 0 3
14102: PUSH
14103: LD_INT 34
14105: EQUAL
14106: IFFALSE 14116
// sShield := true ;
14108: LD_ADDR_EXP 76
14112: PUSH
14113: LD_INT 1
14115: ST_TO_ADDR
// if p3 = 35 then
14116: LD_VAR 0 3
14120: PUSH
14121: LD_INT 35
14123: EQUAL
14124: IFFALSE 14134
// sTime := true ;
14126: LD_ADDR_EXP 77
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// if p3 = 36 then
14134: LD_VAR 0 3
14138: PUSH
14139: LD_INT 36
14141: EQUAL
14142: IFFALSE 14152
// sTools := true ;
14144: LD_ADDR_EXP 78
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// if p3 = 101 then
14152: LD_VAR 0 3
14156: PUSH
14157: LD_INT 101
14159: EQUAL
14160: IFFALSE 14170
// sSold := true ;
14162: LD_ADDR_EXP 43
14166: PUSH
14167: LD_INT 1
14169: ST_TO_ADDR
// if p3 = 102 then
14170: LD_VAR 0 3
14174: PUSH
14175: LD_INT 102
14177: EQUAL
14178: IFFALSE 14188
// sDiff := true ;
14180: LD_ADDR_EXP 44
14184: PUSH
14185: LD_INT 1
14187: ST_TO_ADDR
// if p3 = 103 then
14188: LD_VAR 0 3
14192: PUSH
14193: LD_INT 103
14195: EQUAL
14196: IFFALSE 14206
// sFog := true ;
14198: LD_ADDR_EXP 47
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// if p3 = 104 then
14206: LD_VAR 0 3
14210: PUSH
14211: LD_INT 104
14213: EQUAL
14214: IFFALSE 14224
// sReset := true ;
14216: LD_ADDR_EXP 48
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// if p3 = 105 then
14224: LD_VAR 0 3
14228: PUSH
14229: LD_INT 105
14231: EQUAL
14232: IFFALSE 14242
// sSun := true ;
14234: LD_ADDR_EXP 49
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// if p3 = 106 then
14242: LD_VAR 0 3
14246: PUSH
14247: LD_INT 106
14249: EQUAL
14250: IFFALSE 14260
// sTiger := true ;
14252: LD_ADDR_EXP 45
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// if p3 = 107 then
14260: LD_VAR 0 3
14264: PUSH
14265: LD_INT 107
14267: EQUAL
14268: IFFALSE 14278
// sBomb := true ;
14270: LD_ADDR_EXP 46
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// if p3 = 108 then
14278: LD_VAR 0 3
14282: PUSH
14283: LD_INT 108
14285: EQUAL
14286: IFFALSE 14296
// sWound := true ;
14288: LD_ADDR_EXP 54
14292: PUSH
14293: LD_INT 1
14295: ST_TO_ADDR
// if p3 = 109 then
14296: LD_VAR 0 3
14300: PUSH
14301: LD_INT 109
14303: EQUAL
14304: IFFALSE 14314
// sBetray := true ;
14306: LD_ADDR_EXP 58
14310: PUSH
14311: LD_INT 1
14313: ST_TO_ADDR
// if p3 = 110 then
14314: LD_VAR 0 3
14318: PUSH
14319: LD_INT 110
14321: EQUAL
14322: IFFALSE 14332
// sContamin := true ;
14324: LD_ADDR_EXP 59
14328: PUSH
14329: LD_INT 1
14331: ST_TO_ADDR
// if p3 = 111 then
14332: LD_VAR 0 3
14336: PUSH
14337: LD_INT 111
14339: EQUAL
14340: IFFALSE 14350
// sOil := true ;
14342: LD_ADDR_EXP 61
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// if p3 = 112 then
14350: LD_VAR 0 3
14354: PUSH
14355: LD_INT 112
14357: EQUAL
14358: IFFALSE 14368
// sStu := true ;
14360: LD_ADDR_EXP 65
14364: PUSH
14365: LD_INT 1
14367: ST_TO_ADDR
// if p3 = 113 then
14368: LD_VAR 0 3
14372: PUSH
14373: LD_INT 113
14375: EQUAL
14376: IFFALSE 14386
// sBazooka := true ;
14378: LD_ADDR_EXP 68
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// if p3 = 114 then
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 114
14393: EQUAL
14394: IFFALSE 14404
// sMortar := true ;
14396: LD_ADDR_EXP 69
14400: PUSH
14401: LD_INT 1
14403: ST_TO_ADDR
// if p3 = 115 then
14404: LD_VAR 0 3
14408: PUSH
14409: LD_INT 115
14411: EQUAL
14412: IFFALSE 14422
// sRanger := true ;
14414: LD_ADDR_EXP 79
14418: PUSH
14419: LD_INT 1
14421: ST_TO_ADDR
// end ; end ;
14422: PPOPN 6
14424: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14425: LD_EXP 26
14429: PUSH
14430: LD_EXP 31
14434: AND
14435: IFFALSE 14559
14437: GO 14439
14439: DISABLE
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
// begin enable ;
14444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: LD_INT 22
14452: PUSH
14453: LD_OWVAR 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 2
14464: PUSH
14465: LD_INT 34
14467: PUSH
14468: LD_INT 7
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 34
14477: PUSH
14478: LD_INT 45
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 28
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 34
14497: PUSH
14498: LD_INT 47
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 2
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14559
// for i in tmp do
14530: LD_ADDR_VAR 0 1
14534: PUSH
14535: LD_VAR 0 2
14539: PUSH
14540: FOR_IN
14541: IFFALSE 14557
// begin SetLives ( i , 0 ) ;
14543: LD_VAR 0 1
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 234
// end ;
14555: GO 14540
14557: POP
14558: POP
// end ;
14559: PPOPN 2
14561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14562: LD_EXP 26
14566: PUSH
14567: LD_EXP 32
14571: AND
14572: IFFALSE 14656
14574: GO 14576
14576: DISABLE
14577: LD_INT 0
14579: PPUSH
14580: PPUSH
// begin enable ;
14581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_OWVAR 2
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 32
14601: PUSH
14602: LD_INT 3
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not tmp then
14618: LD_VAR 0 2
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14656
// for i in tmp do
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: LD_VAR 0 2
14636: PUSH
14637: FOR_IN
14638: IFFALSE 14654
// begin SetLives ( i , 0 ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 234
// end ;
14652: GO 14637
14654: POP
14655: POP
// end ;
14656: PPOPN 2
14658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14659: LD_EXP 26
14663: PUSH
14664: LD_EXP 29
14668: AND
14669: IFFALSE 14762
14671: GO 14673
14673: DISABLE
14674: LD_INT 0
14676: PPUSH
// begin enable ;
14677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14678: LD_ADDR_VAR 0 1
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_OWVAR 2
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: LD_INT 25
14700: PUSH
14701: LD_INT 5
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 25
14710: PUSH
14711: LD_INT 9
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 25
14720: PUSH
14721: LD_INT 8
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: PUSH
14743: FOR_IN
14744: IFFALSE 14760
// begin SetClass ( i , 1 ) ;
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 336
// end ;
14758: GO 14743
14760: POP
14761: POP
// end ;
14762: PPOPN 1
14764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14765: LD_EXP 26
14769: PUSH
14770: LD_EXP 30
14774: AND
14775: PUSH
14776: LD_OWVAR 65
14780: PUSH
14781: LD_INT 7
14783: LESS
14784: AND
14785: IFFALSE 14799
14787: GO 14789
14789: DISABLE
// begin enable ;
14790: ENABLE
// game_speed := 7 ;
14791: LD_ADDR_OWVAR 65
14795: PUSH
14796: LD_INT 7
14798: ST_TO_ADDR
// end ;
14799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14800: LD_EXP 26
14804: PUSH
14805: LD_EXP 33
14809: AND
14810: IFFALSE 15012
14812: GO 14814
14814: DISABLE
14815: LD_INT 0
14817: PPUSH
14818: PPUSH
14819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14820: LD_ADDR_VAR 0 3
14824: PUSH
14825: LD_INT 81
14827: PUSH
14828: LD_OWVAR 2
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 69
14855: ST_TO_ADDR
// if not tmp then
14856: LD_VAR 0 3
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 15012
// if tmp > 5 then
14865: LD_VAR 0 3
14869: PUSH
14870: LD_INT 5
14872: GREATER
14873: IFFALSE 14885
// k := 5 else
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_INT 5
14882: ST_TO_ADDR
14883: GO 14895
// k := tmp ;
14885: LD_ADDR_VAR 0 2
14889: PUSH
14890: LD_VAR 0 3
14894: ST_TO_ADDR
// for i := 1 to k do
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: DOUBLE
14901: LD_INT 1
14903: DEC
14904: ST_TO_ADDR
14905: LD_VAR 0 2
14909: PUSH
14910: FOR_TO
14911: IFFALSE 15010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14913: LD_VAR 0 3
14917: PUSH
14918: LD_VAR 0 1
14922: ARRAY
14923: PPUSH
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 4
14931: MOD
14932: PUSH
14933: LD_INT 1
14935: PLUS
14936: PPUSH
14937: CALL_OW 259
14941: PUSH
14942: LD_INT 10
14944: LESS
14945: IFFALSE 15008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14947: LD_VAR 0 3
14951: PUSH
14952: LD_VAR 0 1
14956: ARRAY
14957: PPUSH
14958: LD_VAR 0 1
14962: PUSH
14963: LD_INT 4
14965: MOD
14966: PUSH
14967: LD_INT 1
14969: PLUS
14970: PPUSH
14971: LD_VAR 0 3
14975: PUSH
14976: LD_VAR 0 1
14980: ARRAY
14981: PPUSH
14982: LD_VAR 0 1
14986: PUSH
14987: LD_INT 4
14989: MOD
14990: PUSH
14991: LD_INT 1
14993: PLUS
14994: PPUSH
14995: CALL_OW 259
14999: PUSH
15000: LD_INT 1
15002: PLUS
15003: PPUSH
15004: CALL_OW 237
15008: GO 14910
15010: POP
15011: POP
// end ;
15012: PPOPN 3
15014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15015: LD_EXP 26
15019: PUSH
15020: LD_EXP 34
15024: AND
15025: IFFALSE 15045
15027: GO 15029
15029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15030: LD_INT 4
15032: PPUSH
15033: LD_OWVAR 2
15037: PPUSH
15038: LD_INT 0
15040: PPUSH
15041: CALL_OW 324
15045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15046: LD_EXP 26
15050: PUSH
15051: LD_EXP 63
15055: AND
15056: IFFALSE 15076
15058: GO 15060
15060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15061: LD_INT 19
15063: PPUSH
15064: LD_OWVAR 2
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 324
15076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15077: LD_EXP 26
15081: PUSH
15082: LD_EXP 35
15086: AND
15087: IFFALSE 15189
15089: GO 15091
15091: DISABLE
15092: LD_INT 0
15094: PPUSH
15095: PPUSH
// begin enable ;
15096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15097: LD_ADDR_VAR 0 2
15101: PUSH
15102: LD_INT 22
15104: PUSH
15105: LD_OWVAR 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: LD_INT 34
15119: PUSH
15120: LD_INT 11
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 34
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: ST_TO_ADDR
// if not tmp then
15151: LD_VAR 0 2
15155: NOT
15156: IFFALSE 15160
// exit ;
15158: GO 15189
// for i in tmp do
15160: LD_ADDR_VAR 0 1
15164: PUSH
15165: LD_VAR 0 2
15169: PUSH
15170: FOR_IN
15171: IFFALSE 15187
// begin SetLives ( i , 0 ) ;
15173: LD_VAR 0 1
15177: PPUSH
15178: LD_INT 0
15180: PPUSH
15181: CALL_OW 234
// end ;
15185: GO 15170
15187: POP
15188: POP
// end ;
15189: PPOPN 2
15191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15192: LD_EXP 26
15196: PUSH
15197: LD_EXP 36
15201: AND
15202: IFFALSE 15222
15204: GO 15206
15206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15207: LD_INT 32
15209: PPUSH
15210: LD_OWVAR 2
15214: PPUSH
15215: LD_INT 0
15217: PPUSH
15218: CALL_OW 324
15222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15223: LD_EXP 26
15227: PUSH
15228: LD_EXP 37
15232: AND
15233: IFFALSE 15414
15235: GO 15237
15237: DISABLE
15238: LD_INT 0
15240: PPUSH
15241: PPUSH
15242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15243: LD_ADDR_VAR 0 2
15247: PUSH
15248: LD_INT 22
15250: PUSH
15251: LD_OWVAR 2
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 33
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PPUSH
15274: CALL_OW 69
15278: ST_TO_ADDR
// if not tmp then
15279: LD_VAR 0 2
15283: NOT
15284: IFFALSE 15288
// exit ;
15286: GO 15414
// side := 0 ;
15288: LD_ADDR_VAR 0 3
15292: PUSH
15293: LD_INT 0
15295: ST_TO_ADDR
// for i := 1 to 8 do
15296: LD_ADDR_VAR 0 1
15300: PUSH
15301: DOUBLE
15302: LD_INT 1
15304: DEC
15305: ST_TO_ADDR
15306: LD_INT 8
15308: PUSH
15309: FOR_TO
15310: IFFALSE 15358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15312: LD_OWVAR 2
15316: PUSH
15317: LD_VAR 0 1
15321: NONEQUAL
15322: PUSH
15323: LD_OWVAR 2
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 81
15337: PUSH
15338: LD_INT 2
15340: EQUAL
15341: AND
15342: IFFALSE 15356
// begin side := i ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: LD_VAR 0 1
15353: ST_TO_ADDR
// break ;
15354: GO 15358
// end ;
15356: GO 15309
15358: POP
15359: POP
// if not side then
15360: LD_VAR 0 3
15364: NOT
15365: IFFALSE 15369
// exit ;
15367: GO 15414
// for i := 1 to tmp do
15369: LD_ADDR_VAR 0 1
15373: PUSH
15374: DOUBLE
15375: LD_INT 1
15377: DEC
15378: ST_TO_ADDR
15379: LD_VAR 0 2
15383: PUSH
15384: FOR_TO
15385: IFFALSE 15412
// if Prob ( 60 ) then
15387: LD_INT 60
15389: PPUSH
15390: CALL_OW 13
15394: IFFALSE 15410
// SetSide ( i , side ) ;
15396: LD_VAR 0 1
15400: PPUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: CALL_OW 235
15410: GO 15384
15412: POP
15413: POP
// end ;
15414: PPOPN 3
15416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15417: LD_EXP 26
15421: PUSH
15422: LD_EXP 39
15426: AND
15427: IFFALSE 15546
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15435: LD_ADDR_VAR 0 1
15439: PUSH
15440: LD_INT 22
15442: PUSH
15443: LD_OWVAR 2
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 3
15464: PUSH
15465: LD_INT 23
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: PUSH
15489: FOR_IN
15490: IFFALSE 15544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 257
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: LD_INT 2
15507: PUSH
15508: LD_INT 3
15510: PUSH
15511: LD_INT 4
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: IN
15520: IFFALSE 15542
// SetClass ( un , rand ( 1 , 4 ) ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: LD_INT 4
15532: PPUSH
15533: CALL_OW 12
15537: PPUSH
15538: CALL_OW 336
15542: GO 15489
15544: POP
15545: POP
// end ;
15546: PPOPN 1
15548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15549: LD_EXP 26
15553: PUSH
15554: LD_EXP 38
15558: AND
15559: IFFALSE 15638
15561: GO 15563
15563: DISABLE
15564: LD_INT 0
15566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: LD_INT 22
15574: PUSH
15575: LD_OWVAR 2
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PPUSH
15598: CALL_OW 69
15602: ST_TO_ADDR
// if not tmp then
15603: LD_VAR 0 1
15607: NOT
15608: IFFALSE 15612
// exit ;
15610: GO 15638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15612: LD_VAR 0 1
15616: PUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_VAR 0 1
15624: PPUSH
15625: CALL_OW 12
15629: ARRAY
15630: PPUSH
15631: LD_INT 100
15633: PPUSH
15634: CALL_OW 234
// end ;
15638: PPOPN 1
15640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15641: LD_EXP 26
15645: PUSH
15646: LD_EXP 40
15650: AND
15651: IFFALSE 15749
15653: GO 15655
15655: DISABLE
15656: LD_INT 0
15658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15659: LD_ADDR_VAR 0 1
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_OWVAR 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 1
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15704: LD_VAR 0 1
15708: PUSH
15709: LD_INT 1
15711: PPUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 12
15721: ARRAY
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: LD_INT 4
15728: PPUSH
15729: CALL_OW 12
15733: PPUSH
15734: LD_INT 3000
15736: PPUSH
15737: LD_INT 9000
15739: PPUSH
15740: CALL_OW 12
15744: PPUSH
15745: CALL_OW 492
// end ;
15749: PPOPN 1
15751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15752: LD_EXP 26
15756: PUSH
15757: LD_EXP 41
15761: AND
15762: IFFALSE 15782
15764: GO 15766
15766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15767: LD_INT 1
15769: PPUSH
15770: LD_OWVAR 2
15774: PPUSH
15775: LD_INT 0
15777: PPUSH
15778: CALL_OW 324
15782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15783: LD_EXP 26
15787: PUSH
15788: LD_EXP 42
15792: AND
15793: IFFALSE 15876
15795: GO 15797
15797: DISABLE
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_OWVAR 2
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 21
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: ST_TO_ADDR
// if not tmp then
15838: LD_VAR 0 2
15842: NOT
15843: IFFALSE 15847
// exit ;
15845: GO 15876
// for i in tmp do
15847: LD_ADDR_VAR 0 1
15851: PUSH
15852: LD_VAR 0 2
15856: PUSH
15857: FOR_IN
15858: IFFALSE 15874
// SetBLevel ( i , 10 ) ;
15860: LD_VAR 0 1
15864: PPUSH
15865: LD_INT 10
15867: PPUSH
15868: CALL_OW 241
15872: GO 15857
15874: POP
15875: POP
// end ;
15876: PPOPN 2
15878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15879: LD_EXP 26
15883: PUSH
15884: LD_EXP 43
15888: AND
15889: IFFALSE 16000
15891: GO 15893
15893: DISABLE
15894: LD_INT 0
15896: PPUSH
15897: PPUSH
15898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15899: LD_ADDR_VAR 0 3
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_OWVAR 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 25
15918: PUSH
15919: LD_INT 1
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PPUSH
15930: CALL_OW 69
15934: ST_TO_ADDR
// if not tmp then
15935: LD_VAR 0 3
15939: NOT
15940: IFFALSE 15944
// exit ;
15942: GO 16000
// un := tmp [ rand ( 1 , tmp ) ] ;
15944: LD_ADDR_VAR 0 2
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_INT 1
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: CALL_OW 12
15966: ARRAY
15967: ST_TO_ADDR
// if Crawls ( un ) then
15968: LD_VAR 0 2
15972: PPUSH
15973: CALL_OW 318
15977: IFFALSE 15988
// ComWalk ( un ) ;
15979: LD_VAR 0 2
15983: PPUSH
15984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15988: LD_VAR 0 2
15992: PPUSH
15993: LD_INT 5
15995: PPUSH
15996: CALL_OW 336
// end ;
16000: PPOPN 3
16002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16003: LD_EXP 26
16007: PUSH
16008: LD_EXP 44
16012: AND
16013: PUSH
16014: LD_OWVAR 67
16018: PUSH
16019: LD_INT 3
16021: LESS
16022: AND
16023: IFFALSE 16042
16025: GO 16027
16027: DISABLE
// Difficulty := Difficulty + 1 ;
16028: LD_ADDR_OWVAR 67
16032: PUSH
16033: LD_OWVAR 67
16037: PUSH
16038: LD_INT 1
16040: PLUS
16041: ST_TO_ADDR
16042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16043: LD_EXP 26
16047: PUSH
16048: LD_EXP 45
16052: AND
16053: IFFALSE 16156
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
// begin for i := 1 to 5 do
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: DOUBLE
16067: LD_INT 1
16069: DEC
16070: ST_TO_ADDR
16071: LD_INT 5
16073: PUSH
16074: FOR_TO
16075: IFFALSE 16154
// begin uc_nation := nation_nature ;
16077: LD_ADDR_OWVAR 21
16081: PUSH
16082: LD_INT 0
16084: ST_TO_ADDR
// uc_side := 0 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 0
16092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16093: LD_ADDR_OWVAR 29
16097: PUSH
16098: LD_INT 12
16100: PUSH
16101: LD_INT 12
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: ST_TO_ADDR
// hc_agressivity := 20 ;
16108: LD_ADDR_OWVAR 35
16112: PUSH
16113: LD_INT 20
16115: ST_TO_ADDR
// hc_class := class_tiger ;
16116: LD_ADDR_OWVAR 28
16120: PUSH
16121: LD_INT 14
16123: ST_TO_ADDR
// hc_gallery :=  ;
16124: LD_ADDR_OWVAR 33
16128: PUSH
16129: LD_STRING 
16131: ST_TO_ADDR
// hc_name :=  ;
16132: LD_ADDR_OWVAR 26
16136: PUSH
16137: LD_STRING 
16139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16140: CALL_OW 44
16144: PPUSH
16145: LD_INT 0
16147: PPUSH
16148: CALL_OW 51
// end ;
16152: GO 16074
16154: POP
16155: POP
// end ;
16156: PPOPN 1
16158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16159: LD_EXP 26
16163: PUSH
16164: LD_EXP 46
16168: AND
16169: IFFALSE 16178
16171: GO 16173
16173: DISABLE
// StreamSibBomb ;
16174: CALL 16179 0 0
16178: END
// export function StreamSibBomb ; var i , x , y ; begin
16179: LD_INT 0
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
// result := false ;
16185: LD_ADDR_VAR 0 1
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// for i := 1 to 16 do
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: DOUBLE
16199: LD_INT 1
16201: DEC
16202: ST_TO_ADDR
16203: LD_INT 16
16205: PUSH
16206: FOR_TO
16207: IFFALSE 16406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_INT 10
16216: PUSH
16217: LD_INT 20
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 40
16225: PUSH
16226: LD_INT 50
16228: PUSH
16229: LD_INT 60
16231: PUSH
16232: LD_INT 70
16234: PUSH
16235: LD_INT 80
16237: PUSH
16238: LD_INT 90
16240: PUSH
16241: LD_INT 100
16243: PUSH
16244: LD_INT 110
16246: PUSH
16247: LD_INT 120
16249: PUSH
16250: LD_INT 130
16252: PUSH
16253: LD_INT 140
16255: PUSH
16256: LD_INT 150
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 1
16278: PPUSH
16279: LD_INT 15
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16288: LD_ADDR_VAR 0 4
16292: PUSH
16293: LD_INT 10
16295: PUSH
16296: LD_INT 20
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 40
16304: PUSH
16305: LD_INT 50
16307: PUSH
16308: LD_INT 60
16310: PUSH
16311: LD_INT 70
16313: PUSH
16314: LD_INT 80
16316: PUSH
16317: LD_INT 90
16319: PUSH
16320: LD_INT 100
16322: PUSH
16323: LD_INT 110
16325: PUSH
16326: LD_INT 120
16328: PUSH
16329: LD_INT 130
16331: PUSH
16332: LD_INT 140
16334: PUSH
16335: LD_INT 150
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: PPUSH
16358: LD_INT 15
16360: PPUSH
16361: CALL_OW 12
16365: ARRAY
16366: ST_TO_ADDR
// if ValidHex ( x , y ) then
16367: LD_VAR 0 3
16371: PPUSH
16372: LD_VAR 0 4
16376: PPUSH
16377: CALL_OW 488
16381: IFFALSE 16404
// begin result := [ x , y ] ;
16383: LD_ADDR_VAR 0 1
16387: PUSH
16388: LD_VAR 0 3
16392: PUSH
16393: LD_VAR 0 4
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: ST_TO_ADDR
// break ;
16402: GO 16406
// end ; end ;
16404: GO 16206
16406: POP
16407: POP
// if result then
16408: LD_VAR 0 1
16412: IFFALSE 16472
// begin ToLua ( playSibBomb() ) ;
16414: LD_STRING playSibBomb()
16416: PPUSH
16417: CALL_OW 559
// wait ( 0 0$14 ) ;
16421: LD_INT 490
16423: PPUSH
16424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 1
16435: ARRAY
16436: PPUSH
16437: LD_VAR 0 1
16441: PUSH
16442: LD_INT 2
16444: ARRAY
16445: PPUSH
16446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16450: LD_VAR 0 1
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: LD_VAR 0 1
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PPUSH
16468: CALL_OW 429
// end ; end ;
16472: LD_VAR 0 1
16476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16477: LD_EXP 26
16481: PUSH
16482: LD_EXP 48
16486: AND
16487: IFFALSE 16499
16489: GO 16491
16491: DISABLE
// YouLost (  ) ;
16492: LD_STRING 
16494: PPUSH
16495: CALL_OW 104
16499: END
// every 0 0$1 trigger StreamModeActive and sFog do
16500: LD_EXP 26
16504: PUSH
16505: LD_EXP 47
16509: AND
16510: IFFALSE 16524
16512: GO 16514
16514: DISABLE
// FogOff ( your_side ) ;
16515: LD_OWVAR 2
16519: PPUSH
16520: CALL_OW 344
16524: END
// every 0 0$1 trigger StreamModeActive and sSun do
16525: LD_EXP 26
16529: PUSH
16530: LD_EXP 49
16534: AND
16535: IFFALSE 16563
16537: GO 16539
16539: DISABLE
// begin solar_recharge_percent := 0 ;
16540: LD_ADDR_OWVAR 79
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16548: LD_INT 10500
16550: PPUSH
16551: CALL_OW 67
// solar_recharge_percent := 100 ;
16555: LD_ADDR_OWVAR 79
16559: PUSH
16560: LD_INT 100
16562: ST_TO_ADDR
// end ;
16563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16564: LD_EXP 26
16568: PUSH
16569: LD_EXP 50
16573: AND
16574: IFFALSE 16813
16576: GO 16578
16578: DISABLE
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
// begin tmp := [ ] ;
16584: LD_ADDR_VAR 0 3
16588: PUSH
16589: EMPTY
16590: ST_TO_ADDR
// for i := 1 to 6 do
16591: LD_ADDR_VAR 0 1
16595: PUSH
16596: DOUBLE
16597: LD_INT 1
16599: DEC
16600: ST_TO_ADDR
16601: LD_INT 6
16603: PUSH
16604: FOR_TO
16605: IFFALSE 16710
// begin uc_nation := nation_nature ;
16607: LD_ADDR_OWVAR 21
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// uc_side := 0 ;
16615: LD_ADDR_OWVAR 20
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16623: LD_ADDR_OWVAR 29
16627: PUSH
16628: LD_INT 12
16630: PUSH
16631: LD_INT 12
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: ST_TO_ADDR
// hc_agressivity := 20 ;
16638: LD_ADDR_OWVAR 35
16642: PUSH
16643: LD_INT 20
16645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16646: LD_ADDR_OWVAR 28
16650: PUSH
16651: LD_INT 17
16653: ST_TO_ADDR
// hc_gallery :=  ;
16654: LD_ADDR_OWVAR 33
16658: PUSH
16659: LD_STRING 
16661: ST_TO_ADDR
// hc_name :=  ;
16662: LD_ADDR_OWVAR 26
16666: PUSH
16667: LD_STRING 
16669: ST_TO_ADDR
// un := CreateHuman ;
16670: LD_ADDR_VAR 0 2
16674: PUSH
16675: CALL_OW 44
16679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16680: LD_VAR 0 2
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 51
// tmp := tmp ^ un ;
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_VAR 0 3
16701: PUSH
16702: LD_VAR 0 2
16706: ADD
16707: ST_TO_ADDR
// end ;
16708: GO 16604
16710: POP
16711: POP
// repeat wait ( 0 0$1 ) ;
16712: LD_INT 35
16714: PPUSH
16715: CALL_OW 67
// for un in tmp do
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_VAR 0 3
16728: PUSH
16729: FOR_IN
16730: IFFALSE 16804
// begin if IsDead ( un ) then
16732: LD_VAR 0 2
16736: PPUSH
16737: CALL_OW 301
16741: IFFALSE 16761
// begin tmp := tmp diff un ;
16743: LD_ADDR_VAR 0 3
16747: PUSH
16748: LD_VAR 0 3
16752: PUSH
16753: LD_VAR 0 2
16757: DIFF
16758: ST_TO_ADDR
// continue ;
16759: GO 16729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16761: LD_VAR 0 2
16765: PPUSH
16766: LD_INT 3
16768: PUSH
16769: LD_INT 22
16771: PUSH
16772: LD_INT 0
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PPUSH
16783: CALL_OW 69
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: CALL_OW 74
16797: PPUSH
16798: CALL_OW 115
// end ;
16802: GO 16729
16804: POP
16805: POP
// until not tmp ;
16806: LD_VAR 0 3
16810: NOT
16811: IFFALSE 16712
// end ;
16813: PPOPN 3
16815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16816: LD_EXP 26
16820: PUSH
16821: LD_EXP 51
16825: AND
16826: IFFALSE 16880
16828: GO 16830
16830: DISABLE
// begin ToLua ( displayTroll(); ) ;
16831: LD_STRING displayTroll();
16833: PPUSH
16834: CALL_OW 559
// wait ( 3 3$00 ) ;
16838: LD_INT 6300
16840: PPUSH
16841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16845: LD_STRING hideTroll();
16847: PPUSH
16848: CALL_OW 559
// wait ( 1 1$00 ) ;
16852: LD_INT 2100
16854: PPUSH
16855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16859: LD_STRING displayTroll();
16861: PPUSH
16862: CALL_OW 559
// wait ( 1 1$00 ) ;
16866: LD_INT 2100
16868: PPUSH
16869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16873: LD_STRING hideTroll();
16875: PPUSH
16876: CALL_OW 559
// end ;
16880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16881: LD_EXP 26
16885: PUSH
16886: LD_EXP 52
16890: AND
16891: IFFALSE 16954
16893: GO 16895
16895: DISABLE
16896: LD_INT 0
16898: PPUSH
// begin p := 0 ;
16899: LD_ADDR_VAR 0 1
16903: PUSH
16904: LD_INT 0
16906: ST_TO_ADDR
// repeat game_speed := 1 ;
16907: LD_ADDR_OWVAR 65
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16915: LD_INT 35
16917: PPUSH
16918: CALL_OW 67
// p := p + 1 ;
16922: LD_ADDR_VAR 0 1
16926: PUSH
16927: LD_VAR 0 1
16931: PUSH
16932: LD_INT 1
16934: PLUS
16935: ST_TO_ADDR
// until p >= 60 ;
16936: LD_VAR 0 1
16940: PUSH
16941: LD_INT 60
16943: GREATEREQUAL
16944: IFFALSE 16907
// game_speed := 4 ;
16946: LD_ADDR_OWVAR 65
16950: PUSH
16951: LD_INT 4
16953: ST_TO_ADDR
// end ;
16954: PPOPN 1
16956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16957: LD_EXP 26
16961: PUSH
16962: LD_EXP 53
16966: AND
16967: IFFALSE 17113
16969: GO 16971
16971: DISABLE
16972: LD_INT 0
16974: PPUSH
16975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16976: LD_ADDR_VAR 0 1
16980: PUSH
16981: LD_INT 22
16983: PUSH
16984: LD_OWVAR 2
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: LD_INT 30
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 30
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PPUSH
17025: CALL_OW 69
17029: ST_TO_ADDR
// if not depot then
17030: LD_VAR 0 1
17034: NOT
17035: IFFALSE 17039
// exit ;
17037: GO 17113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17039: LD_ADDR_VAR 0 2
17043: PUSH
17044: LD_VAR 0 1
17048: PUSH
17049: LD_INT 1
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 12
17061: ARRAY
17062: PPUSH
17063: CALL_OW 274
17067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17068: LD_VAR 0 2
17072: PPUSH
17073: LD_INT 1
17075: PPUSH
17076: LD_INT 0
17078: PPUSH
17079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17083: LD_VAR 0 2
17087: PPUSH
17088: LD_INT 2
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17098: LD_VAR 0 2
17102: PPUSH
17103: LD_INT 3
17105: PPUSH
17106: LD_INT 0
17108: PPUSH
17109: CALL_OW 277
// end ;
17113: PPOPN 2
17115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17116: LD_EXP 26
17120: PUSH
17121: LD_EXP 54
17125: AND
17126: IFFALSE 17223
17128: GO 17130
17130: DISABLE
17131: LD_INT 0
17133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_OWVAR 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 21
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 69
17187: ST_TO_ADDR
// if not tmp then
17188: LD_VAR 0 1
17192: NOT
17193: IFFALSE 17197
// exit ;
17195: GO 17223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 1
17204: PPUSH
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 12
17214: ARRAY
17215: PPUSH
17216: LD_INT 200
17218: PPUSH
17219: CALL_OW 234
// end ;
17223: PPOPN 1
17225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17226: LD_EXP 26
17230: PUSH
17231: LD_EXP 55
17235: AND
17236: IFFALSE 17315
17238: GO 17240
17240: DISABLE
17241: LD_INT 0
17243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17244: LD_ADDR_VAR 0 1
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_OWVAR 2
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: ST_TO_ADDR
// if not tmp then
17280: LD_VAR 0 1
17284: NOT
17285: IFFALSE 17289
// exit ;
17287: GO 17315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17289: LD_VAR 0 1
17293: PUSH
17294: LD_INT 1
17296: PPUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: PPUSH
17308: LD_INT 60
17310: PPUSH
17311: CALL_OW 234
// end ;
17315: PPOPN 1
17317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17318: LD_EXP 26
17322: PUSH
17323: LD_EXP 56
17327: AND
17328: IFFALSE 17427
17330: GO 17332
17332: DISABLE
17333: LD_INT 0
17335: PPUSH
17336: PPUSH
// begin enable ;
17337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17338: LD_ADDR_VAR 0 1
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_OWVAR 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 61
17357: PUSH
17358: EMPTY
17359: LIST
17360: PUSH
17361: LD_INT 33
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: PPUSH
17376: CALL_OW 69
17380: ST_TO_ADDR
// if not tmp then
17381: LD_VAR 0 1
17385: NOT
17386: IFFALSE 17390
// exit ;
17388: GO 17427
// for i in tmp do
17390: LD_ADDR_VAR 0 2
17394: PUSH
17395: LD_VAR 0 1
17399: PUSH
17400: FOR_IN
17401: IFFALSE 17425
// if IsControledBy ( i ) then
17403: LD_VAR 0 2
17407: PPUSH
17408: CALL_OW 312
17412: IFFALSE 17423
// ComUnlink ( i ) ;
17414: LD_VAR 0 2
17418: PPUSH
17419: CALL_OW 136
17423: GO 17400
17425: POP
17426: POP
// end ;
17427: PPOPN 2
17429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17430: LD_EXP 26
17434: PUSH
17435: LD_EXP 57
17439: AND
17440: IFFALSE 17580
17442: GO 17444
17444: DISABLE
17445: LD_INT 0
17447: PPUSH
17448: PPUSH
// begin ToLua ( displayPowell(); ) ;
17449: LD_STRING displayPowell();
17451: PPUSH
17452: CALL_OW 559
// uc_side := 0 ;
17456: LD_ADDR_OWVAR 20
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// uc_nation := 2 ;
17464: LD_ADDR_OWVAR 21
17468: PUSH
17469: LD_INT 2
17471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17472: LD_ADDR_OWVAR 37
17476: PUSH
17477: LD_INT 14
17479: ST_TO_ADDR
// vc_engine := engine_siberite ;
17480: LD_ADDR_OWVAR 39
17484: PUSH
17485: LD_INT 3
17487: ST_TO_ADDR
// vc_control := control_apeman ;
17488: LD_ADDR_OWVAR 38
17492: PUSH
17493: LD_INT 5
17495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17496: LD_ADDR_OWVAR 40
17500: PUSH
17501: LD_INT 29
17503: ST_TO_ADDR
// un := CreateVehicle ;
17504: LD_ADDR_VAR 0 2
17508: PUSH
17509: CALL_OW 45
17513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17514: LD_VAR 0 2
17518: PPUSH
17519: LD_INT 1
17521: PPUSH
17522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17526: LD_INT 35
17528: PPUSH
17529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17533: LD_VAR 0 2
17537: PPUSH
17538: LD_INT 22
17540: PUSH
17541: LD_OWVAR 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 69
17554: PPUSH
17555: LD_VAR 0 2
17559: PPUSH
17560: CALL_OW 74
17564: PPUSH
17565: CALL_OW 115
// until IsDead ( un ) ;
17569: LD_VAR 0 2
17573: PPUSH
17574: CALL_OW 301
17578: IFFALSE 17526
// end ;
17580: PPOPN 2
17582: END
// every 0 0$1 trigger StreamModeActive and sStu do
17583: LD_EXP 26
17587: PUSH
17588: LD_EXP 65
17592: AND
17593: IFFALSE 17609
17595: GO 17597
17597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17598: LD_STRING displayStucuk();
17600: PPUSH
17601: CALL_OW 559
// ResetFog ;
17605: CALL_OW 335
// end ;
17609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17610: LD_EXP 26
17614: PUSH
17615: LD_EXP 58
17619: AND
17620: IFFALSE 17761
17622: GO 17624
17624: DISABLE
17625: LD_INT 0
17627: PPUSH
17628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17629: LD_ADDR_VAR 0 2
17633: PUSH
17634: LD_INT 22
17636: PUSH
17637: LD_OWVAR 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 21
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PPUSH
17660: CALL_OW 69
17664: ST_TO_ADDR
// if not tmp then
17665: LD_VAR 0 2
17669: NOT
17670: IFFALSE 17674
// exit ;
17672: GO 17761
// un := tmp [ rand ( 1 , tmp ) ] ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_VAR 0 2
17683: PUSH
17684: LD_INT 1
17686: PPUSH
17687: LD_VAR 0 2
17691: PPUSH
17692: CALL_OW 12
17696: ARRAY
17697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17698: LD_VAR 0 1
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: LD_OWVAR 3
17719: PUSH
17720: LD_VAR 0 1
17724: DIFF
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 74
17735: PPUSH
17736: CALL_OW 115
// wait ( 0 0$20 ) ;
17740: LD_INT 700
17742: PPUSH
17743: CALL_OW 67
// SetSide ( un , your_side ) ;
17747: LD_VAR 0 1
17751: PPUSH
17752: LD_OWVAR 2
17756: PPUSH
17757: CALL_OW 235
// end ;
17761: PPOPN 2
17763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17764: LD_EXP 26
17768: PUSH
17769: LD_EXP 59
17773: AND
17774: IFFALSE 17880
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17782: LD_ADDR_VAR 0 1
17786: PUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 2
17801: PUSH
17802: LD_INT 30
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PPUSH
17831: CALL_OW 69
17835: ST_TO_ADDR
// if not depot then
17836: LD_VAR 0 1
17840: NOT
17841: IFFALSE 17845
// exit ;
17843: GO 17880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 1
17852: ARRAY
17853: PPUSH
17854: CALL_OW 250
17858: PPUSH
17859: LD_VAR 0 1
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: CALL_OW 251
17872: PPUSH
17873: LD_INT 70
17875: PPUSH
17876: CALL_OW 495
// end ;
17880: PPOPN 1
17882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17883: LD_EXP 26
17887: PUSH
17888: LD_EXP 60
17892: AND
17893: IFFALSE 18104
17895: GO 17897
17897: DISABLE
17898: LD_INT 0
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17905: LD_ADDR_VAR 0 5
17909: PUSH
17910: LD_INT 22
17912: PUSH
17913: LD_OWVAR 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 21
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: ST_TO_ADDR
// if not tmp then
17941: LD_VAR 0 5
17945: NOT
17946: IFFALSE 17950
// exit ;
17948: GO 18104
// for i in tmp do
17950: LD_ADDR_VAR 0 1
17954: PUSH
17955: LD_VAR 0 5
17959: PUSH
17960: FOR_IN
17961: IFFALSE 18102
// begin d := rand ( 0 , 5 ) ;
17963: LD_ADDR_VAR 0 4
17967: PUSH
17968: LD_INT 0
17970: PPUSH
17971: LD_INT 5
17973: PPUSH
17974: CALL_OW 12
17978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17979: LD_ADDR_VAR 0 2
17983: PUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 250
17993: PPUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: LD_INT 3
18001: PPUSH
18002: LD_INT 12
18004: PPUSH
18005: CALL_OW 12
18009: PPUSH
18010: CALL_OW 272
18014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18015: LD_ADDR_VAR 0 3
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 251
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: LD_INT 3
18037: PPUSH
18038: LD_INT 12
18040: PPUSH
18041: CALL_OW 12
18045: PPUSH
18046: CALL_OW 273
18050: ST_TO_ADDR
// if ValidHex ( x , y ) then
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: CALL_OW 488
18065: IFFALSE 18100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18067: LD_VAR 0 1
18071: PPUSH
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: LD_INT 3
18084: PPUSH
18085: LD_INT 6
18087: PPUSH
18088: CALL_OW 12
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 483
// end ;
18100: GO 17960
18102: POP
18103: POP
// end ;
18104: PPOPN 5
18106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18107: LD_EXP 26
18111: PUSH
18112: LD_EXP 61
18116: AND
18117: IFFALSE 18211
18119: GO 18121
18121: DISABLE
18122: LD_INT 0
18124: PPUSH
18125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18126: LD_ADDR_VAR 0 2
18130: PUSH
18131: LD_INT 22
18133: PUSH
18134: LD_OWVAR 2
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 32
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 21
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: ST_TO_ADDR
// if not tmp then
18173: LD_VAR 0 2
18177: NOT
18178: IFFALSE 18182
// exit ;
18180: GO 18211
// for i in tmp do
18182: LD_ADDR_VAR 0 1
18186: PUSH
18187: LD_VAR 0 2
18191: PUSH
18192: FOR_IN
18193: IFFALSE 18209
// SetFuel ( i , 0 ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: LD_INT 0
18202: PPUSH
18203: CALL_OW 240
18207: GO 18192
18209: POP
18210: POP
// end ;
18211: PPOPN 2
18213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18214: LD_EXP 26
18218: PUSH
18219: LD_EXP 62
18223: AND
18224: IFFALSE 18290
18226: GO 18228
18228: DISABLE
18229: LD_INT 0
18231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18232: LD_ADDR_VAR 0 1
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_OWVAR 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 30
18251: PUSH
18252: LD_INT 29
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: ST_TO_ADDR
// if not tmp then
18268: LD_VAR 0 1
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18290
// DestroyUnit ( tmp [ 1 ] ) ;
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: CALL_OW 65
// end ;
18290: PPOPN 1
18292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18293: LD_EXP 26
18297: PUSH
18298: LD_EXP 64
18302: AND
18303: IFFALSE 18432
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
// begin uc_side := 0 ;
18311: LD_ADDR_OWVAR 20
18315: PUSH
18316: LD_INT 0
18318: ST_TO_ADDR
// uc_nation := nation_arabian ;
18319: LD_ADDR_OWVAR 21
18323: PUSH
18324: LD_INT 2
18326: ST_TO_ADDR
// hc_gallery :=  ;
18327: LD_ADDR_OWVAR 33
18331: PUSH
18332: LD_STRING 
18334: ST_TO_ADDR
// hc_name :=  ;
18335: LD_ADDR_OWVAR 26
18339: PUSH
18340: LD_STRING 
18342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18343: LD_INT 1
18345: PPUSH
18346: LD_INT 11
18348: PPUSH
18349: LD_INT 10
18351: PPUSH
18352: CALL_OW 380
// un := CreateHuman ;
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: CALL_OW 44
18365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18366: LD_VAR 0 1
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18378: LD_INT 35
18380: PPUSH
18381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_INT 22
18392: PUSH
18393: LD_OWVAR 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PPUSH
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 74
18416: PPUSH
18417: CALL_OW 115
// until IsDead ( un ) ;
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 301
18430: IFFALSE 18378
// end ;
18432: PPOPN 1
18434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18435: LD_EXP 26
18439: PUSH
18440: LD_EXP 66
18444: AND
18445: IFFALSE 18457
18447: GO 18449
18449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18450: LD_STRING earthquake(getX(game), 0, 32)
18452: PPUSH
18453: CALL_OW 559
18457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18458: LD_EXP 26
18462: PUSH
18463: LD_EXP 67
18467: AND
18468: IFFALSE 18559
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
// begin enable ;
18476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18477: LD_ADDR_VAR 0 1
18481: PUSH
18482: LD_INT 22
18484: PUSH
18485: LD_OWVAR 2
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 21
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 33
18506: PUSH
18507: LD_INT 3
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: ST_TO_ADDR
// if not tmp then
18524: LD_VAR 0 1
18528: NOT
18529: IFFALSE 18533
// exit ;
18531: GO 18559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18533: LD_VAR 0 1
18537: PUSH
18538: LD_INT 1
18540: PPUSH
18541: LD_VAR 0 1
18545: PPUSH
18546: CALL_OW 12
18550: ARRAY
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 234
// end ;
18559: PPOPN 1
18561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18562: LD_EXP 26
18566: PUSH
18567: LD_EXP 68
18571: AND
18572: IFFALSE 18713
18574: GO 18576
18576: DISABLE
18577: LD_INT 0
18579: PPUSH
18580: PPUSH
18581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: LD_INT 22
18589: PUSH
18590: LD_OWVAR 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 25
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: ST_TO_ADDR
// if not tmp then
18618: LD_VAR 0 3
18622: NOT
18623: IFFALSE 18627
// exit ;
18625: GO 18713
// un := tmp [ rand ( 1 , tmp ) ] ;
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_VAR 0 3
18636: PUSH
18637: LD_INT 1
18639: PPUSH
18640: LD_VAR 0 3
18644: PPUSH
18645: CALL_OW 12
18649: ARRAY
18650: ST_TO_ADDR
// if Crawls ( un ) then
18651: LD_VAR 0 2
18655: PPUSH
18656: CALL_OW 318
18660: IFFALSE 18671
// ComWalk ( un ) ;
18662: LD_VAR 0 2
18666: PPUSH
18667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: LD_INT 9
18678: PPUSH
18679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18683: LD_INT 28
18685: PPUSH
18686: LD_OWVAR 2
18690: PPUSH
18691: LD_INT 2
18693: PPUSH
18694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18698: LD_INT 29
18700: PPUSH
18701: LD_OWVAR 2
18705: PPUSH
18706: LD_INT 2
18708: PPUSH
18709: CALL_OW 322
// end ;
18713: PPOPN 3
18715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18716: LD_EXP 26
18720: PUSH
18721: LD_EXP 69
18725: AND
18726: IFFALSE 18837
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
18734: PPUSH
18735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18736: LD_ADDR_VAR 0 3
18740: PUSH
18741: LD_INT 22
18743: PUSH
18744: LD_OWVAR 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 25
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: CALL_OW 69
18771: ST_TO_ADDR
// if not tmp then
18772: LD_VAR 0 3
18776: NOT
18777: IFFALSE 18781
// exit ;
18779: GO 18837
// un := tmp [ rand ( 1 , tmp ) ] ;
18781: LD_ADDR_VAR 0 2
18785: PUSH
18786: LD_VAR 0 3
18790: PUSH
18791: LD_INT 1
18793: PPUSH
18794: LD_VAR 0 3
18798: PPUSH
18799: CALL_OW 12
18803: ARRAY
18804: ST_TO_ADDR
// if Crawls ( un ) then
18805: LD_VAR 0 2
18809: PPUSH
18810: CALL_OW 318
18814: IFFALSE 18825
// ComWalk ( un ) ;
18816: LD_VAR 0 2
18820: PPUSH
18821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18825: LD_VAR 0 2
18829: PPUSH
18830: LD_INT 8
18832: PPUSH
18833: CALL_OW 336
// end ;
18837: PPOPN 3
18839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18840: LD_EXP 26
18844: PUSH
18845: LD_EXP 70
18849: AND
18850: IFFALSE 18994
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18859: LD_ADDR_VAR 0 2
18863: PUSH
18864: LD_INT 22
18866: PUSH
18867: LD_OWVAR 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 21
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: LD_INT 34
18891: PUSH
18892: LD_INT 12
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 34
18901: PUSH
18902: LD_INT 51
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 34
18911: PUSH
18912: LD_INT 32
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: ST_TO_ADDR
// if not tmp then
18935: LD_VAR 0 2
18939: NOT
18940: IFFALSE 18944
// exit ;
18942: GO 18994
// for i in tmp do
18944: LD_ADDR_VAR 0 1
18948: PUSH
18949: LD_VAR 0 2
18953: PUSH
18954: FOR_IN
18955: IFFALSE 18992
// if GetCargo ( i , mat_artifact ) = 0 then
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 4
18964: PPUSH
18965: CALL_OW 289
18969: PUSH
18970: LD_INT 0
18972: EQUAL
18973: IFFALSE 18990
// SetCargo ( i , mat_siberit , 100 ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 3
18982: PPUSH
18983: LD_INT 100
18985: PPUSH
18986: CALL_OW 290
18990: GO 18954
18992: POP
18993: POP
// end ;
18994: PPOPN 2
18996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18997: LD_EXP 26
19001: PUSH
19002: LD_EXP 71
19006: AND
19007: IFFALSE 19190
19009: GO 19011
19011: DISABLE
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19016: LD_ADDR_VAR 0 2
19020: PUSH
19021: LD_INT 22
19023: PUSH
19024: LD_OWVAR 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 2
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19190
// for i := 1 to 2 do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: DOUBLE
19053: LD_INT 1
19055: DEC
19056: ST_TO_ADDR
19057: LD_INT 2
19059: PUSH
19060: FOR_TO
19061: IFFALSE 19188
// begin uc_side := your_side ;
19063: LD_ADDR_OWVAR 20
19067: PUSH
19068: LD_OWVAR 2
19072: ST_TO_ADDR
// uc_nation := nation_american ;
19073: LD_ADDR_OWVAR 21
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// vc_chassis := us_morphling ;
19081: LD_ADDR_OWVAR 37
19085: PUSH
19086: LD_INT 5
19088: ST_TO_ADDR
// vc_engine := engine_siberite ;
19089: LD_ADDR_OWVAR 39
19093: PUSH
19094: LD_INT 3
19096: ST_TO_ADDR
// vc_control := control_computer ;
19097: LD_ADDR_OWVAR 38
19101: PUSH
19102: LD_INT 3
19104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19105: LD_ADDR_OWVAR 40
19109: PUSH
19110: LD_INT 10
19112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19113: LD_VAR 0 2
19117: PUSH
19118: LD_INT 1
19120: ARRAY
19121: PPUSH
19122: CALL_OW 310
19126: NOT
19127: IFFALSE 19174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19129: CALL_OW 45
19133: PPUSH
19134: LD_VAR 0 2
19138: PUSH
19139: LD_INT 1
19141: ARRAY
19142: PPUSH
19143: CALL_OW 250
19147: PPUSH
19148: LD_VAR 0 2
19152: PUSH
19153: LD_INT 1
19155: ARRAY
19156: PPUSH
19157: CALL_OW 251
19161: PPUSH
19162: LD_INT 12
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL_OW 50
19172: GO 19186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19174: CALL_OW 45
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL_OW 51
// end ;
19186: GO 19060
19188: POP
19189: POP
// end ;
19190: PPOPN 2
19192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19193: LD_EXP 26
19197: PUSH
19198: LD_EXP 72
19202: AND
19203: IFFALSE 19425
19205: GO 19207
19207: DISABLE
19208: LD_INT 0
19210: PPUSH
19211: PPUSH
19212: PPUSH
19213: PPUSH
19214: PPUSH
19215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19216: LD_ADDR_VAR 0 6
19220: PUSH
19221: LD_INT 22
19223: PUSH
19224: LD_OWVAR 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 21
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 3
19245: PUSH
19246: LD_INT 23
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 69
19269: ST_TO_ADDR
// if not tmp then
19270: LD_VAR 0 6
19274: NOT
19275: IFFALSE 19279
// exit ;
19277: GO 19425
// s1 := rand ( 1 , 4 ) ;
19279: LD_ADDR_VAR 0 2
19283: PUSH
19284: LD_INT 1
19286: PPUSH
19287: LD_INT 4
19289: PPUSH
19290: CALL_OW 12
19294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19295: LD_ADDR_VAR 0 4
19299: PUSH
19300: LD_VAR 0 6
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 259
19318: ST_TO_ADDR
// if s1 = 1 then
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 1
19326: EQUAL
19327: IFFALSE 19347
// s2 := rand ( 2 , 4 ) else
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 2
19336: PPUSH
19337: LD_INT 4
19339: PPUSH
19340: CALL_OW 12
19344: ST_TO_ADDR
19345: GO 19355
// s2 := 1 ;
19347: LD_ADDR_VAR 0 3
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19355: LD_ADDR_VAR 0 5
19359: PUSH
19360: LD_VAR 0 6
19364: PUSH
19365: LD_INT 1
19367: ARRAY
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: CALL_OW 259
19378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19379: LD_VAR 0 6
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: LD_VAR 0 2
19392: PPUSH
19393: LD_VAR 0 5
19397: PPUSH
19398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19402: LD_VAR 0 6
19406: PUSH
19407: LD_INT 1
19409: ARRAY
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: LD_VAR 0 4
19420: PPUSH
19421: CALL_OW 237
// end ;
19425: PPOPN 6
19427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19428: LD_EXP 26
19432: PUSH
19433: LD_EXP 73
19437: AND
19438: IFFALSE 19517
19440: GO 19442
19442: DISABLE
19443: LD_INT 0
19445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19446: LD_ADDR_VAR 0 1
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_OWVAR 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 30
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PPUSH
19477: CALL_OW 69
19481: ST_TO_ADDR
// if not tmp then
19482: LD_VAR 0 1
19486: NOT
19487: IFFALSE 19491
// exit ;
19489: GO 19517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19491: LD_VAR 0 1
19495: PUSH
19496: LD_INT 1
19498: PPUSH
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL_OW 12
19508: ARRAY
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: CALL_OW 234
// end ;
19517: PPOPN 1
19519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19520: LD_EXP 26
19524: PUSH
19525: LD_EXP 74
19529: AND
19530: IFFALSE 19642
19532: GO 19534
19534: DISABLE
19535: LD_INT 0
19537: PPUSH
19538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19539: LD_ADDR_VAR 0 2
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 30
19561: PUSH
19562: LD_INT 27
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 30
19571: PUSH
19572: LD_INT 26
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 30
19581: PUSH
19582: LD_INT 28
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: ST_TO_ADDR
// if not tmp then
19604: LD_VAR 0 2
19608: NOT
19609: IFFALSE 19613
// exit ;
19611: GO 19642
// for i in tmp do
19613: LD_ADDR_VAR 0 1
19617: PUSH
19618: LD_VAR 0 2
19622: PUSH
19623: FOR_IN
19624: IFFALSE 19640
// SetLives ( i , 1 ) ;
19626: LD_VAR 0 1
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: CALL_OW 234
19638: GO 19623
19640: POP
19641: POP
// end ;
19642: PPOPN 2
19644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19645: LD_EXP 26
19649: PUSH
19650: LD_EXP 75
19654: AND
19655: IFFALSE 19929
19657: GO 19659
19659: DISABLE
19660: LD_INT 0
19662: PPUSH
19663: PPUSH
19664: PPUSH
// begin i := rand ( 1 , 7 ) ;
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_INT 1
19672: PPUSH
19673: LD_INT 7
19675: PPUSH
19676: CALL_OW 12
19680: ST_TO_ADDR
// case i of 1 :
19681: LD_VAR 0 1
19685: PUSH
19686: LD_INT 1
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19704
19694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19695: LD_STRING earthquake(getX(game), 0, 32)
19697: PPUSH
19698: CALL_OW 559
19702: GO 19929
19704: LD_INT 2
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19726
19712: POP
// begin ToLua ( displayStucuk(); ) ;
19713: LD_STRING displayStucuk();
19715: PPUSH
19716: CALL_OW 559
// ResetFog ;
19720: CALL_OW 335
// end ; 3 :
19724: GO 19929
19726: LD_INT 3
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19838
19734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19735: LD_ADDR_VAR 0 2
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 25
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PPUSH
19766: CALL_OW 69
19770: ST_TO_ADDR
// if not tmp then
19771: LD_VAR 0 2
19775: NOT
19776: IFFALSE 19780
// exit ;
19778: GO 19929
// un := tmp [ rand ( 1 , tmp ) ] ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: LD_VAR 0 2
19789: PUSH
19790: LD_INT 1
19792: PPUSH
19793: LD_VAR 0 2
19797: PPUSH
19798: CALL_OW 12
19802: ARRAY
19803: ST_TO_ADDR
// if Crawls ( un ) then
19804: LD_VAR 0 3
19808: PPUSH
19809: CALL_OW 318
19813: IFFALSE 19824
// ComWalk ( un ) ;
19815: LD_VAR 0 3
19819: PPUSH
19820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19824: LD_VAR 0 3
19828: PPUSH
19829: LD_INT 8
19831: PPUSH
19832: CALL_OW 336
// end ; 4 :
19836: GO 19929
19838: LD_INT 4
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19907
19846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_OWVAR 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 30
19866: PUSH
19867: LD_INT 29
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: ST_TO_ADDR
// if not tmp then
19883: LD_VAR 0 2
19887: NOT
19888: IFFALSE 19892
// exit ;
19890: GO 19929
// DestroyUnit ( tmp [ 1 ] ) ;
19892: LD_VAR 0 2
19896: PUSH
19897: LD_INT 1
19899: ARRAY
19900: PPUSH
19901: CALL_OW 65
// end ; 5 .. 7 :
19905: GO 19929
19907: LD_INT 5
19909: DOUBLE
19910: GREATEREQUAL
19911: IFFALSE 19919
19913: LD_INT 7
19915: DOUBLE
19916: LESSEQUAL
19917: IFTRUE 19921
19919: GO 19928
19921: POP
// StreamSibBomb ; end ;
19922: CALL 16179 0 0
19926: GO 19929
19928: POP
// end ;
19929: PPOPN 3
19931: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19932: LD_EXP 26
19936: PUSH
19937: LD_EXP 76
19941: AND
19942: IFFALSE 20098
19944: GO 19946
19946: DISABLE
19947: LD_INT 0
19949: PPUSH
19950: PPUSH
19951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19952: LD_ADDR_VAR 0 2
19956: PUSH
19957: LD_INT 81
19959: PUSH
19960: LD_OWVAR 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 21
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 21
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: ST_TO_ADDR
// if not tmp then
20006: LD_VAR 0 2
20010: NOT
20011: IFFALSE 20015
// exit ;
20013: GO 20098
// p := 0 ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20023: LD_INT 35
20025: PPUSH
20026: CALL_OW 67
// p := p + 1 ;
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 1
20042: PLUS
20043: ST_TO_ADDR
// for i in tmp do
20044: LD_ADDR_VAR 0 1
20048: PUSH
20049: LD_VAR 0 2
20053: PUSH
20054: FOR_IN
20055: IFFALSE 20086
// if GetLives ( i ) < 1000 then
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 256
20066: PUSH
20067: LD_INT 1000
20069: LESS
20070: IFFALSE 20084
// SetLives ( i , 1000 ) ;
20072: LD_VAR 0 1
20076: PPUSH
20077: LD_INT 1000
20079: PPUSH
20080: CALL_OW 234
20084: GO 20054
20086: POP
20087: POP
// until p > 20 ;
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 20
20095: GREATER
20096: IFFALSE 20023
// end ;
20098: PPOPN 3
20100: END
// every 0 0$1 trigger StreamModeActive and sTime do
20101: LD_EXP 26
20105: PUSH
20106: LD_EXP 77
20110: AND
20111: IFFALSE 20146
20113: GO 20115
20115: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20116: LD_INT 28
20118: PPUSH
20119: LD_OWVAR 2
20123: PPUSH
20124: LD_INT 2
20126: PPUSH
20127: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20131: LD_INT 30
20133: PPUSH
20134: LD_OWVAR 2
20138: PPUSH
20139: LD_INT 2
20141: PPUSH
20142: CALL_OW 322
// end ;
20146: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20147: LD_EXP 26
20151: PUSH
20152: LD_EXP 78
20156: AND
20157: IFFALSE 20278
20159: GO 20161
20161: DISABLE
20162: LD_INT 0
20164: PPUSH
20165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20166: LD_ADDR_VAR 0 2
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_OWVAR 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: LD_INT 23
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: ST_TO_ADDR
// if not tmp then
20220: LD_VAR 0 2
20224: NOT
20225: IFFALSE 20229
// exit ;
20227: GO 20278
// for i in tmp do
20229: LD_ADDR_VAR 0 1
20233: PUSH
20234: LD_VAR 0 2
20238: PUSH
20239: FOR_IN
20240: IFFALSE 20276
// begin if Crawls ( i ) then
20242: LD_VAR 0 1
20246: PPUSH
20247: CALL_OW 318
20251: IFFALSE 20262
// ComWalk ( i ) ;
20253: LD_VAR 0 1
20257: PPUSH
20258: CALL_OW 138
// SetClass ( i , 2 ) ;
20262: LD_VAR 0 1
20266: PPUSH
20267: LD_INT 2
20269: PPUSH
20270: CALL_OW 336
// end ;
20274: GO 20239
20276: POP
20277: POP
// end ;
20278: PPOPN 2
20280: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20281: LD_EXP 26
20285: PUSH
20286: LD_EXP 79
20290: AND
20291: IFFALSE 20572
20293: GO 20295
20295: DISABLE
20296: LD_INT 0
20298: PPUSH
20299: PPUSH
20300: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20301: LD_OWVAR 2
20305: PPUSH
20306: LD_INT 9
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: LD_INT 1
20314: PPUSH
20315: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20319: LD_INT 9
20321: PPUSH
20322: LD_OWVAR 2
20326: PPUSH
20327: CALL_OW 343
// uc_side := 9 ;
20331: LD_ADDR_OWVAR 20
20335: PUSH
20336: LD_INT 9
20338: ST_TO_ADDR
// uc_nation := 2 ;
20339: LD_ADDR_OWVAR 21
20343: PUSH
20344: LD_INT 2
20346: ST_TO_ADDR
// hc_name := Dark Warrior ;
20347: LD_ADDR_OWVAR 26
20351: PUSH
20352: LD_STRING Dark Warrior
20354: ST_TO_ADDR
// hc_gallery :=  ;
20355: LD_ADDR_OWVAR 33
20359: PUSH
20360: LD_STRING 
20362: ST_TO_ADDR
// hc_noskilllimit := true ;
20363: LD_ADDR_OWVAR 76
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20371: LD_ADDR_OWVAR 31
20375: PUSH
20376: LD_INT 30
20378: PUSH
20379: LD_INT 30
20381: PUSH
20382: LD_INT 30
20384: PUSH
20385: LD_INT 30
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: ST_TO_ADDR
// un := CreateHuman ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: CALL_OW 44
20403: ST_TO_ADDR
// hc_noskilllimit := false ;
20404: LD_ADDR_OWVAR 76
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20412: LD_VAR 0 3
20416: PPUSH
20417: LD_INT 1
20419: PPUSH
20420: CALL_OW 51
// p := 0 ;
20424: LD_ADDR_VAR 0 2
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20432: LD_INT 35
20434: PPUSH
20435: CALL_OW 67
// p := p + 1 ;
20439: LD_ADDR_VAR 0 2
20443: PUSH
20444: LD_VAR 0 2
20448: PUSH
20449: LD_INT 1
20451: PLUS
20452: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20453: LD_VAR 0 3
20457: PPUSH
20458: CALL_OW 256
20462: PUSH
20463: LD_INT 1000
20465: LESS
20466: IFFALSE 20480
// SetLives ( un , 1000 ) ;
20468: LD_VAR 0 3
20472: PPUSH
20473: LD_INT 1000
20475: PPUSH
20476: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20480: LD_VAR 0 3
20484: PPUSH
20485: LD_INT 81
20487: PUSH
20488: LD_OWVAR 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 91
20499: PUSH
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 30
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 69
20521: PPUSH
20522: LD_VAR 0 3
20526: PPUSH
20527: CALL_OW 74
20531: PPUSH
20532: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20536: LD_VAR 0 2
20540: PUSH
20541: LD_INT 60
20543: GREATER
20544: PUSH
20545: LD_VAR 0 3
20549: PPUSH
20550: CALL_OW 301
20554: OR
20555: IFFALSE 20432
// if un then
20557: LD_VAR 0 3
20561: IFFALSE 20572
// RemoveUnit ( un ) ;
20563: LD_VAR 0 3
20567: PPUSH
20568: CALL_OW 64
// end ; end_of_file end_of_file
20572: PPOPN 3
20574: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20575: LD_INT 0
20577: PPUSH
20578: PPUSH
20579: PPUSH
20580: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 264
20590: PUSH
20591: LD_EXP 84
20595: EQUAL
20596: IFFALSE 20668
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20598: LD_INT 68
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 255
20610: PPUSH
20611: CALL_OW 321
20615: PUSH
20616: LD_INT 2
20618: EQUAL
20619: IFFALSE 20631
// eff := 70 else
20621: LD_ADDR_VAR 0 4
20625: PUSH
20626: LD_INT 70
20628: ST_TO_ADDR
20629: GO 20639
// eff := 30 ;
20631: LD_ADDR_VAR 0 4
20635: PUSH
20636: LD_INT 30
20638: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 250
20648: PPUSH
20649: LD_VAR 0 1
20653: PPUSH
20654: CALL_OW 251
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: CALL_OW 495
// end ; end ;
20668: LD_VAR 0 2
20672: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20673: LD_INT 0
20675: PPUSH
// end ;
20676: LD_VAR 0 4
20680: RET
// export function SOS_Command ( cmd ) ; begin
20681: LD_INT 0
20683: PPUSH
// end ;
20684: LD_VAR 0 2
20688: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_INT 255
20696: EQUAL
20697: PUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 264
20707: PUSH
20708: LD_INT 14
20710: PUSH
20711: LD_INT 53
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: IN
20718: AND
20719: PUSH
20720: LD_VAR 0 4
20724: PPUSH
20725: LD_VAR 0 5
20729: PPUSH
20730: CALL_OW 488
20734: AND
20735: IFFALSE 20759
// CutTreeXYR ( unit , x , y , 12 ) ;
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 4
20746: PPUSH
20747: LD_VAR 0 5
20751: PPUSH
20752: LD_INT 12
20754: PPUSH
20755: CALL 20762 0 4
// end ;
20759: PPOPN 5
20761: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20773: LD_VAR 0 1
20777: NOT
20778: PUSH
20779: LD_VAR 0 2
20783: PPUSH
20784: LD_VAR 0 3
20788: PPUSH
20789: CALL_OW 488
20793: NOT
20794: OR
20795: PUSH
20796: LD_VAR 0 4
20800: NOT
20801: OR
20802: IFFALSE 20806
// exit ;
20804: GO 21146
// list := [ ] ;
20806: LD_ADDR_VAR 0 13
20810: PUSH
20811: EMPTY
20812: ST_TO_ADDR
// if x - r < 0 then
20813: LD_VAR 0 2
20817: PUSH
20818: LD_VAR 0 4
20822: MINUS
20823: PUSH
20824: LD_INT 0
20826: LESS
20827: IFFALSE 20839
// min_x := 0 else
20829: LD_ADDR_VAR 0 7
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
20837: GO 20855
// min_x := x - r ;
20839: LD_ADDR_VAR 0 7
20843: PUSH
20844: LD_VAR 0 2
20848: PUSH
20849: LD_VAR 0 4
20853: MINUS
20854: ST_TO_ADDR
// if y - r < 0 then
20855: LD_VAR 0 3
20859: PUSH
20860: LD_VAR 0 4
20864: MINUS
20865: PUSH
20866: LD_INT 0
20868: LESS
20869: IFFALSE 20881
// min_y := 0 else
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
20879: GO 20897
// min_y := y - r ;
20881: LD_ADDR_VAR 0 8
20885: PUSH
20886: LD_VAR 0 3
20890: PUSH
20891: LD_VAR 0 4
20895: MINUS
20896: ST_TO_ADDR
// max_x := x + r ;
20897: LD_ADDR_VAR 0 9
20901: PUSH
20902: LD_VAR 0 2
20906: PUSH
20907: LD_VAR 0 4
20911: PLUS
20912: ST_TO_ADDR
// max_y := y + r ;
20913: LD_ADDR_VAR 0 10
20917: PUSH
20918: LD_VAR 0 3
20922: PUSH
20923: LD_VAR 0 4
20927: PLUS
20928: ST_TO_ADDR
// for _x = min_x to max_x do
20929: LD_ADDR_VAR 0 11
20933: PUSH
20934: DOUBLE
20935: LD_VAR 0 7
20939: DEC
20940: ST_TO_ADDR
20941: LD_VAR 0 9
20945: PUSH
20946: FOR_TO
20947: IFFALSE 21064
// for _y = min_y to max_y do
20949: LD_ADDR_VAR 0 12
20953: PUSH
20954: DOUBLE
20955: LD_VAR 0 8
20959: DEC
20960: ST_TO_ADDR
20961: LD_VAR 0 10
20965: PUSH
20966: FOR_TO
20967: IFFALSE 21060
// begin if not ValidHex ( _x , _y ) then
20969: LD_VAR 0 11
20973: PPUSH
20974: LD_VAR 0 12
20978: PPUSH
20979: CALL_OW 488
20983: NOT
20984: IFFALSE 20988
// continue ;
20986: GO 20966
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20988: LD_VAR 0 11
20992: PPUSH
20993: LD_VAR 0 12
20997: PPUSH
20998: CALL_OW 351
21002: PUSH
21003: LD_VAR 0 11
21007: PPUSH
21008: LD_VAR 0 12
21012: PPUSH
21013: CALL_OW 554
21017: AND
21018: IFFALSE 21058
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21020: LD_ADDR_VAR 0 13
21024: PUSH
21025: LD_VAR 0 13
21029: PPUSH
21030: LD_VAR 0 13
21034: PUSH
21035: LD_INT 1
21037: PLUS
21038: PPUSH
21039: LD_VAR 0 11
21043: PUSH
21044: LD_VAR 0 12
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL_OW 2
21057: ST_TO_ADDR
// end ;
21058: GO 20966
21060: POP
21061: POP
21062: GO 20946
21064: POP
21065: POP
// if not list then
21066: LD_VAR 0 13
21070: NOT
21071: IFFALSE 21075
// exit ;
21073: GO 21146
// for i in list do
21075: LD_ADDR_VAR 0 6
21079: PUSH
21080: LD_VAR 0 13
21084: PUSH
21085: FOR_IN
21086: IFFALSE 21144
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21088: LD_VAR 0 1
21092: PPUSH
21093: LD_STRING M
21095: PUSH
21096: LD_VAR 0 6
21100: PUSH
21101: LD_INT 1
21103: ARRAY
21104: PUSH
21105: LD_VAR 0 6
21109: PUSH
21110: LD_INT 2
21112: ARRAY
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: PPUSH
21138: CALL_OW 447
21142: GO 21085
21144: POP
21145: POP
// end ; end_of_file
21146: LD_VAR 0 5
21150: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
21151: GO 21153
21153: DISABLE
// begin ru_radar := 98 ;
21154: LD_ADDR_EXP 80
21158: PUSH
21159: LD_INT 98
21161: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21162: LD_ADDR_EXP 81
21166: PUSH
21167: LD_INT 89
21169: ST_TO_ADDR
// us_hack := 99 ;
21170: LD_ADDR_EXP 82
21174: PUSH
21175: LD_INT 99
21177: ST_TO_ADDR
// us_artillery := 97 ;
21178: LD_ADDR_EXP 83
21182: PUSH
21183: LD_INT 97
21185: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21186: LD_ADDR_EXP 84
21190: PUSH
21191: LD_INT 91
21193: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21194: LD_ADDR_EXP 85
21198: PUSH
21199: LD_INT 92
21201: ST_TO_ADDR
// tech_Artillery := 80 ;
21202: LD_ADDR_EXP 86
21206: PUSH
21207: LD_INT 80
21209: ST_TO_ADDR
// tech_RadMat := 81 ;
21210: LD_ADDR_EXP 87
21214: PUSH
21215: LD_INT 81
21217: ST_TO_ADDR
// tech_BasicTools := 82 ;
21218: LD_ADDR_EXP 88
21222: PUSH
21223: LD_INT 82
21225: ST_TO_ADDR
// tech_Cargo := 83 ;
21226: LD_ADDR_EXP 89
21230: PUSH
21231: LD_INT 83
21233: ST_TO_ADDR
// tech_Track := 84 ;
21234: LD_ADDR_EXP 90
21238: PUSH
21239: LD_INT 84
21241: ST_TO_ADDR
// tech_Crane := 85 ;
21242: LD_ADDR_EXP 91
21246: PUSH
21247: LD_INT 85
21249: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21250: LD_ADDR_EXP 92
21254: PUSH
21255: LD_INT 86
21257: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21258: LD_ADDR_EXP 93
21262: PUSH
21263: LD_INT 87
21265: ST_TO_ADDR
// end ;
21266: END
