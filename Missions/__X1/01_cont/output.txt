// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 2
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5681
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5446: LD_EXP 17
5450: PPUSH
5451: LD_STRING DO-olaf-1
5453: PPUSH
5454: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5458: LD_EXP 16
5462: PPUSH
5463: LD_STRING DH-olaf-1
5465: PPUSH
5466: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING DO-olaf-2
5477: PPUSH
5478: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5482: LD_EXP 16
5486: PPUSH
5487: LD_STRING DH-olaf-2
5489: PPUSH
5490: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5494: LD_EXP 17
5498: PPUSH
5499: LD_STRING DO-olaf-3
5501: PPUSH
5502: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5506: LD_EXP 17
5510: PPUSH
5511: LD_STRING DO-olaf-4
5513: PPUSH
5514: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5518: LD_EXP 16
5522: PPUSH
5523: LD_STRING DH-olaf-4
5525: PPUSH
5526: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5530: LD_EXP 17
5534: PPUSH
5535: LD_STRING DO-olaf-5
5537: PPUSH
5538: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5542: LD_EXP 16
5546: PPUSH
5547: LD_STRING DH-olaf-5
5549: PPUSH
5550: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5554: LD_EXP 17
5558: PPUSH
5559: LD_STRING DO-olaf-6
5561: PPUSH
5562: CALL_OW 88
// if russianSpotted or johnnySaved then
5566: LD_EXP 9
5570: PUSH
5571: LD_EXP 4
5575: OR
5576: IFFALSE 5604
// begin Say ( Heike , DH-olaf-6a ) ;
5578: LD_EXP 16
5582: PPUSH
5583: LD_STRING DH-olaf-6a
5585: PPUSH
5586: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5590: LD_EXP 17
5594: PPUSH
5595: LD_STRING DO-olaf-7a
5597: PPUSH
5598: CALL_OW 88
// end else
5602: GO 5628
// begin Say ( Heike , DH-olaf-6b ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING DH-olaf-6b
5611: PPUSH
5612: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5616: LD_EXP 17
5620: PPUSH
5621: LD_STRING DO-olaf-7b
5623: PPUSH
5624: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5628: LD_EXP 17
5632: PPUSH
5633: LD_STRING DO-olaf-8
5635: PPUSH
5636: CALL_OW 88
// InGameOff ;
5640: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5644: LD_STRING O3_camp_cont
5646: PPUSH
5647: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5651: LD_EXP 17
5655: PPUSH
5656: LD_INT 52
5658: PPUSH
5659: LD_INT 90
5661: PPUSH
5662: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 53
5673: PPUSH
5674: LD_INT 89
5676: PPUSH
5677: CALL_OW 178
// end ;
5681: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5682: LD_EXP 8
5686: NOT
5687: PUSH
5688: LD_EXP 16
5692: PPUSH
5693: LD_EXP 18
5697: PPUSH
5698: CALL_OW 296
5702: PUSH
5703: LD_INT 36
5705: LESS
5706: AND
5707: IFFALSE 5727
5709: GO 5711
5711: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5712: LD_EXP 17
5716: PPUSH
5717: LD_INT 39
5719: PPUSH
5720: LD_INT 71
5722: PPUSH
5723: CALL_OW 111
5727: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5728: LD_EXP 7
5732: NOT
5733: PUSH
5734: LD_INT 2
5736: PPUSH
5737: LD_EXP 19
5741: PPUSH
5742: CALL_OW 292
5746: PUSH
5747: LD_INT 2
5749: PPUSH
5750: LD_EXP 18
5754: PPUSH
5755: CALL_OW 292
5759: OR
5760: AND
5761: IFFALSE 7082
5763: GO 5765
5765: DISABLE
5766: LD_INT 0
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin if not johnnySaved then
5771: LD_EXP 4
5775: NOT
5776: IFFALSE 5787
// KillUnit ( Johnny ) ;
5778: LD_EXP 25
5782: PPUSH
5783: CALL_OW 66
// mercenariesSpotted := true ;
5787: LD_ADDR_EXP 7
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5795: LD_STRING O4_camp_cont
5797: PPUSH
5798: CALL_OW 337
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5806: LD_INT 53
5808: PPUSH
5809: LD_INT 89
5811: PPUSH
5812: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5816: LD_INT 53
5818: PPUSH
5819: LD_INT 89
5821: PPUSH
5822: LD_INT 2
5824: PPUSH
5825: LD_INT 8
5827: NEG
5828: PPUSH
5829: CALL_OW 330
// if olafSpotted then
5833: LD_EXP 8
5837: IFFALSE 5955
// begin AddComTurnUnit ( Olaf , Heike ) ;
5839: LD_EXP 17
5843: PPUSH
5844: LD_EXP 16
5848: PPUSH
5849: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5853: LD_EXP 16
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 86
5863: PPUSH
5864: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5868: LD_EXP 16
5872: PPUSH
5873: LD_EXP 17
5877: PPUSH
5878: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5882: LD_EXP 17
5886: PPUSH
5887: LD_STRING DO-camp-1
5889: PPUSH
5890: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5894: LD_EXP 18
5898: PUSH
5899: LD_EXP 19
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: LD_EXP 16
5912: PPUSH
5913: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5917: LD_EXP 18
5921: PPUSH
5922: LD_STRING DG-camp-1
5924: PPUSH
5925: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5929: LD_EXP 16
5933: PPUSH
5934: LD_STRING DH-camp-1
5936: PPUSH
5937: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5941: LD_EXP 17
5945: PPUSH
5946: LD_STRING DO-camp-2
5948: PPUSH
5949: CALL_OW 88
// end else
5953: GO 6350
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5955: LD_EXP 16
5959: PPUSH
5960: LD_INT 51
5962: PPUSH
5963: LD_INT 86
5965: PPUSH
5966: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5970: LD_EXP 16
5974: PPUSH
5975: LD_EXP 18
5979: PPUSH
5980: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5984: LD_EXP 18
5988: PUSH
5989: LD_EXP 19
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: LD_EXP 16
6002: PPUSH
6003: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6007: LD_EXP 18
6011: PPUSH
6012: LD_STRING DG-camp-1a
6014: PPUSH
6015: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING DH-camp-1a
6026: PPUSH
6027: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6038: LD_EXP 19
6042: PPUSH
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6052: LD_EXP 19
6056: PPUSH
6057: LD_STRING DM-camp-1a
6059: PPUSH
6060: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6064: LD_EXP 17
6068: PPUSH
6069: LD_INT 52
6071: PPUSH
6072: LD_INT 90
6074: PPUSH
6075: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6079: LD_EXP 19
6083: PPUSH
6084: LD_EXP 16
6088: PPUSH
6089: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING DG-camp-2a
6100: PPUSH
6101: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6105: LD_EXP 16
6109: PPUSH
6110: LD_STRING DH-camp-2a
6112: PPUSH
6113: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6117: LD_EXP 19
6121: PPUSH
6122: LD_STRING DM-camp-2a
6124: PPUSH
6125: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6129: LD_INT 35
6131: PPUSH
6132: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6136: LD_EXP 17
6140: PPUSH
6141: LD_EXP 16
6145: PPUSH
6146: CALL_OW 296
6150: PUSH
6151: LD_INT 10
6153: LESS
6154: IFFALSE 6129
// AddComTurnUnit ( Olaf , Heike ) ;
6156: LD_EXP 17
6160: PPUSH
6161: LD_EXP 16
6165: PPUSH
6166: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6170: LD_EXP 19
6174: PPUSH
6175: LD_EXP 16
6179: PPUSH
6180: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6184: LD_EXP 17
6188: PPUSH
6189: LD_STRING DO-camp-2a
6191: PPUSH
6192: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6196: LD_EXP 16
6200: PPUSH
6201: LD_EXP 17
6205: PPUSH
6206: CALL_OW 119
// if russianSpotted then
6210: LD_EXP 9
6214: IFFALSE 6254
// begin Say ( Heike , DH-camp-2aa ) ;
6216: LD_EXP 16
6220: PPUSH
6221: LD_STRING DH-camp-2aa
6223: PPUSH
6224: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6228: LD_EXP 18
6232: PPUSH
6233: LD_STRING DG-camp-2aa
6235: PPUSH
6236: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6240: LD_EXP 19
6244: PPUSH
6245: LD_STRING DM-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// end else
6252: GO 6278
// begin Say ( Heike , DH-camp-2ab ) ;
6254: LD_EXP 16
6258: PPUSH
6259: LD_STRING DH-camp-2ab
6261: PPUSH
6262: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6266: LD_EXP 19
6270: PPUSH
6271: LD_STRING DM-camp-2ab
6273: PPUSH
6274: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-3a
6285: PPUSH
6286: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6290: LD_EXP 17
6294: PPUSH
6295: LD_STRING DO-camp-3a
6297: PPUSH
6298: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6302: LD_EXP 18
6306: PPUSH
6307: LD_STRING DG-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-4aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6326: LD_EXP 19
6330: PPUSH
6331: LD_STRING DM-camp-4aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_STRING DO-camp-4a
6345: PPUSH
6346: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6350: LD_EXP 17
6354: PPUSH
6355: LD_STRING DO-camp-3
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4
6369: PPUSH
6370: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_EXP 17
6383: PPUSH
6384: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6388: LD_EXP 18
6392: PPUSH
6393: LD_STRING DG-camp-4
6395: PPUSH
6396: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6400: LD_EXP 16
6404: PPUSH
6405: LD_EXP 18
6409: PPUSH
6410: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6414: LD_EXP 16
6418: PPUSH
6419: LD_STRING DH-camp-4
6421: PPUSH
6422: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6426: LD_EXP 19
6430: PUSH
6431: LD_EXP 17
6435: PUSH
6436: LD_EXP 18
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: PPUSH
6446: LD_EXP 16
6450: PPUSH
6451: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6455: LD_EXP 18
6459: PPUSH
6460: LD_STRING DG-camp-5
6462: PPUSH
6463: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6467: LD_EXP 18
6471: PPUSH
6472: LD_STRING DG-camp-6
6474: PPUSH
6475: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6479: LD_EXP 16
6483: PPUSH
6484: LD_STRING DH-camp-6
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-7
6498: PPUSH
6499: CALL_OW 88
// if DogTagFound then
6503: LD_EXP 6
6507: IFFALSE 6547
// begin Say ( Heike , DH-quest-1a ) ;
6509: LD_EXP 16
6513: PPUSH
6514: LD_STRING DH-quest-1a
6516: PPUSH
6517: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6521: LD_EXP 18
6525: PPUSH
6526: LD_STRING DG-quest-1a
6528: PPUSH
6529: CALL_OW 88
// mercenariesQuestDone := true ;
6533: LD_ADDR_EXP 11
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// InGameOff ;
6541: CALL_OW 9
// end else
6545: GO 6713
// begin Say ( Heike , DH-camp-7 ) ;
6547: LD_EXP 16
6551: PPUSH
6552: LD_STRING DH-camp-7
6554: PPUSH
6555: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6559: LD_EXP 16
6563: PPUSH
6564: CALL_OW 256
6568: PUSH
6569: LD_INT 1000
6571: LESS
6572: IFFALSE 6664
// begin Say ( Olaf , DO-heal-1 ) ;
6574: LD_EXP 17
6578: PPUSH
6579: LD_STRING DO-heal-1
6581: PPUSH
6582: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_INT 51
6593: PPUSH
6594: LD_INT 88
6596: PPUSH
6597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6601: LD_INT 35
6603: PPUSH
6604: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6608: LD_EXP 16
6612: PPUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 296
6622: PUSH
6623: LD_INT 4
6625: LESS
6626: PUSH
6627: LD_EXP 16
6631: PPUSH
6632: LD_INT 51
6634: PPUSH
6635: LD_INT 88
6637: PPUSH
6638: CALL_OW 307
6642: OR
6643: IFFALSE 6601
// SetLives ( Heike , 1000 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_INT 1000
6652: PPUSH
6653: CALL_OW 234
// wait ( 0 0$2 ) ;
6657: LD_INT 70
6659: PPUSH
6660: CALL_OW 67
// end ; InGameOff ;
6664: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6668: LD_EXP 17
6672: PUSH
6673: LD_EXP 18
6677: PUSH
6678: LD_EXP 19
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: PPUSH
6688: LD_INT 53
6690: PPUSH
6691: LD_INT 89
6693: PPUSH
6694: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6698: LD_STRING O5_proof_cont
6700: PPUSH
6701: CALL_OW 337
// mercenariesQuestReady := true ;
6705: LD_ADDR_EXP 10
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6713: LD_EXP 10
6717: NOT
6718: IFFALSE 6722
// exit ;
6720: GO 7082
// wait ( 0 0$35 ) ;
6722: LD_INT 1225
6724: PPUSH
6725: CALL_OW 67
// driver := PreparePatrolTank ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL 2814 0 0
6738: ST_TO_ADDR
// if not driver then
6739: LD_VAR 0 2
6743: NOT
6744: IFFALSE 6748
// exit ;
6746: GO 7082
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_INT 1
6753: PPUSH
6754: LD_INT 2
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 310
6778: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6779: LD_VAR 0 3
6783: PPUSH
6784: LD_INT 500
6786: PPUSH
6787: CALL_OW 234
// SetLives ( driver , 450 ) ;
6791: LD_VAR 0 2
6795: PPUSH
6796: LD_INT 450
6798: PPUSH
6799: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 59
6810: PPUSH
6811: LD_INT 60
6813: PPUSH
6814: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 59
6832: PPUSH
6833: LD_INT 60
6835: PPUSH
6836: CALL_OW 307
6840: IFFALSE 6818
// if not See ( 1 , Heike ) then
6842: LD_INT 1
6844: PPUSH
6845: LD_EXP 16
6849: PPUSH
6850: CALL_OW 292
6854: NOT
6855: IFFALSE 6979
// begin if Difficulty < 3 then
6857: LD_OWVAR 67
6861: PUSH
6862: LD_INT 3
6864: LESS
6865: IFFALSE 6883
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6867: LD_INT 59
6869: PPUSH
6870: LD_INT 60
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 6
6878: PPUSH
6879: CALL_OW 330
// ComExitVehicle ( driver ) ;
6883: LD_VAR 0 2
6887: PPUSH
6888: CALL_OW 121
// wait ( 0 0$1 ) ;
6892: LD_INT 35
6894: PPUSH
6895: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6899: LD_VAR 0 2
6903: PPUSH
6904: LD_INT 58
6906: PPUSH
6907: LD_INT 54
6909: PPUSH
6910: CALL_OW 171
// wait ( 0 0$1 ) ;
6914: LD_INT 35
6916: PPUSH
6917: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6921: LD_VAR 0 2
6925: PPUSH
6926: LD_INT 57
6928: PPUSH
6929: LD_INT 53
6931: PPUSH
6932: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_INT 350
6943: PPUSH
6944: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6962: LD_VAR 0 2
6966: PPUSH
6967: LD_INT 107
6969: PPUSH
6970: LD_INT 118
6972: PPUSH
6973: CALL_OW 171
// end else
6977: GO 6994
// begin ComMoveXY ( driver , 107 , 118 ) ;
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_INT 107
6986: PPUSH
6987: LD_INT 118
6989: PPUSH
6990: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6994: LD_INT 35
6996: PPUSH
6997: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 307
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 301
7026: OR
7027: IFFALSE 6994
// if IsDead ( driver [ 1 ] ) then
7029: LD_VAR 0 2
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 301
7042: IFFALSE 7046
// exit ;
7044: GO 7082
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7046: LD_ADDR_VAR 0 1
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: PUSH
7066: FOR_IN
7067: IFFALSE 7080
// RemoveUnit ( i ) ;
7069: LD_VAR 0 1
7073: PPUSH
7074: CALL_OW 64
7078: GO 7066
7080: POP
7081: POP
// end ;
7082: PPOPN 3
7084: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7085: LD_INT 10
7087: PPUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 2
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 21
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 70
7116: IFFALSE 7190
7118: GO 7120
7120: DISABLE
// begin InGameOn ;
7121: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7125: LD_EXP 17
7129: PUSH
7130: LD_EXP 19
7134: PUSH
7135: LD_EXP 18
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PPUSH
7145: LD_EXP 16
7149: PPUSH
7150: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7154: LD_EXP 19
7158: PPUSH
7159: LD_STRING DM-quest-1
7161: PPUSH
7162: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7166: LD_EXP 18
7170: PPUSH
7171: LD_STRING DG-quest-1
7173: PPUSH
7174: CALL_OW 88
// InGameOff ;
7178: CALL_OW 9
// mercenariesQuestDone := true ;
7182: LD_ADDR_EXP 11
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// end ;
7190: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7191: LD_EXP 16
7195: PPUSH
7196: LD_INT 10
7198: PPUSH
7199: CALL_OW 308
7203: PUSH
7204: LD_EXP 6
7208: AND
7209: PUSH
7210: LD_EXP 10
7214: AND
7215: PUSH
7216: LD_INT 10
7218: PPUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 70
7247: NOT
7248: AND
7249: IFFALSE 7421
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
// begin InGameOn ;
7257: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7261: LD_EXP 17
7265: PUSH
7266: LD_EXP 19
7270: PUSH
7271: LD_EXP 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: LD_EXP 16
7285: PPUSH
7286: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7290: LD_EXP 16
7294: PPUSH
7295: LD_INT 54
7297: PPUSH
7298: LD_INT 86
7300: PPUSH
7301: CALL_OW 111
// p := p + 1 ;
7305: LD_ADDR_VAR 0 1
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: LD_INT 1
7317: PLUS
7318: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7319: LD_INT 35
7321: PPUSH
7322: CALL_OW 67
// p := p + 1 ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 1
7335: PUSH
7336: LD_INT 1
7338: PLUS
7339: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7340: LD_EXP 16
7344: PPUSH
7345: LD_EXP 18
7349: PPUSH
7350: CALL_OW 296
7354: PUSH
7355: LD_INT 4
7357: LESS
7358: PUSH
7359: LD_VAR 0 1
7363: PUSH
7364: LD_INT 5
7366: GREATER
7367: OR
7368: IFFALSE 7319
// Say ( Mike , DM-quest-1 ) ;
7370: LD_EXP 19
7374: PPUSH
7375: LD_STRING DM-quest-1
7377: PPUSH
7378: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7382: LD_EXP 18
7386: PPUSH
7387: LD_STRING DG-quest-1
7389: PPUSH
7390: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7394: LD_EXP 16
7398: PPUSH
7399: LD_INT 55
7401: PPUSH
7402: LD_INT 87
7404: PPUSH
7405: CALL_OW 111
// InGameOff ;
7409: CALL_OW 9
// mercenariesQuestDone := true ;
7413: LD_ADDR_EXP 11
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// end ;
7421: PPOPN 1
7423: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7424: LD_EXP 16
7428: PUSH
7429: LD_INT 55
7431: PUSH
7432: EMPTY
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: IN
7440: IFFALSE 7480
7442: GO 7444
7444: DISABLE
// begin if Difficulty < 3 then
7445: LD_OWVAR 67
7449: PUSH
7450: LD_INT 3
7452: LESS
7453: IFFALSE 7468
// RemoveSeeing ( 59 , 60 , 2 ) ;
7455: LD_INT 59
7457: PPUSH
7458: LD_INT 60
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7468: LD_EXP 16
7472: PPUSH
7473: LD_STRING DH-driver
7475: PPUSH
7476: CALL_OW 88
// end ;
7480: END
// every 0 0$1 trigger mercenariesQuestDone do
7481: LD_EXP 11
7485: IFFALSE 7973
7487: GO 7489
7489: DISABLE
// begin if mercenariesQuestReady then
7490: LD_EXP 10
7494: IFFALSE 7503
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7496: LD_STRING O5_proof_cont_out
7498: PPUSH
7499: CALL_OW 337
// InGameOn ;
7503: CALL_OW 8
// if IsInUnit ( Heike ) then
7507: LD_EXP 16
7511: PPUSH
7512: CALL_OW 310
7516: IFFALSE 7527
// ComExitVehicle ( Heike ) ;
7518: LD_EXP 16
7522: PPUSH
7523: CALL_OW 121
// wait ( 3 ) ;
7527: LD_INT 3
7529: PPUSH
7530: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7534: LD_EXP 16
7538: PPUSH
7539: LD_EXP 18
7543: PPUSH
7544: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7548: LD_EXP 17
7552: PUSH
7553: LD_EXP 19
7557: PUSH
7558: LD_EXP 18
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PPUSH
7568: LD_EXP 16
7572: PPUSH
7573: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7577: LD_EXP 16
7581: PPUSH
7582: LD_STRING DH-quest-done-1
7584: PPUSH
7585: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7589: LD_EXP 19
7593: PPUSH
7594: LD_STRING DM-quest-done-1
7596: PPUSH
7597: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7601: LD_EXP 18
7605: PPUSH
7606: LD_STRING DG-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7613: LD_EXP 16
7617: PPUSH
7618: LD_EXP 17
7622: PPUSH
7623: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7627: LD_EXP 16
7631: PPUSH
7632: LD_STRING DH-quest-done-2
7634: PPUSH
7635: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7639: LD_EXP 17
7643: PPUSH
7644: LD_STRING DO-quest-done-2
7646: PPUSH
7647: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7651: LD_EXP 17
7655: PPUSH
7656: LD_STRING DO-quest-done-3
7658: PPUSH
7659: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7663: LD_EXP 18
7667: PPUSH
7668: LD_INT 51
7670: PPUSH
7671: LD_INT 90
7673: PPUSH
7674: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7678: LD_EXP 18
7682: PPUSH
7683: LD_INT 50
7685: PPUSH
7686: LD_INT 89
7688: PPUSH
7689: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7693: LD_EXP 16
7697: PPUSH
7698: LD_EXP 18
7702: PPUSH
7703: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7707: LD_EXP 18
7711: PPUSH
7712: LD_STRING DG-quest-done-4
7714: PPUSH
7715: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7719: LD_EXP 18
7723: PPUSH
7724: LD_EXP 16
7728: PPUSH
7729: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7733: LD_EXP 16
7737: PPUSH
7738: CALL_OW 256
7742: PUSH
7743: LD_INT 1000
7745: LESS
7746: IFFALSE 7838
// begin Say ( Olaf , DO-heal-1 ) ;
7748: LD_EXP 17
7752: PPUSH
7753: LD_STRING DO-heal-1
7755: PPUSH
7756: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7760: LD_EXP 16
7764: PPUSH
7765: LD_INT 51
7767: PPUSH
7768: LD_INT 88
7770: PPUSH
7771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7775: LD_INT 35
7777: PPUSH
7778: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7782: LD_EXP 16
7786: PPUSH
7787: LD_EXP 17
7791: PPUSH
7792: CALL_OW 296
7796: PUSH
7797: LD_INT 4
7799: LESS
7800: PUSH
7801: LD_EXP 16
7805: PPUSH
7806: LD_INT 51
7808: PPUSH
7809: LD_INT 88
7811: PPUSH
7812: CALL_OW 307
7816: OR
7817: IFFALSE 7775
// SetLives ( Heike , 1000 ) ;
7819: LD_EXP 16
7823: PPUSH
7824: LD_INT 1000
7826: PPUSH
7827: CALL_OW 234
// wait ( 0 0$2 ) ;
7831: LD_INT 70
7833: PPUSH
7834: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7838: LD_EXP 16
7842: PPUSH
7843: LD_STRING DH-quest-done-4
7845: PPUSH
7846: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7850: LD_EXP 17
7854: PPUSH
7855: LD_STRING DO-quest-done-4
7857: PPUSH
7858: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_EXP 17
7871: PPUSH
7872: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7876: LD_EXP 16
7880: PPUSH
7881: LD_STRING DH-quest-done-5
7883: PPUSH
7884: CALL_OW 88
// InGameOff ;
7888: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7892: LD_STRING O6_end_cont
7894: PPUSH
7895: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_INT 2
7906: PPUSH
7907: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7911: LD_EXP 19
7915: PPUSH
7916: LD_INT 2
7918: PPUSH
7919: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7923: LD_INT 42
7925: PPUSH
7926: LD_INT 2
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7936: LD_EXP 17
7940: PPUSH
7941: LD_INT 53
7943: PPUSH
7944: LD_INT 89
7946: PPUSH
7947: CALL_OW 118
// lastObjectiveActive := true ;
7951: LD_ADDR_EXP 12
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7959: LD_INT 1
7961: PPUSH
7962: LD_INT 1
7964: PPUSH
7965: CALL_OW 424
// PreparePrison ;
7969: CALL 1164 0 0
// end ;
7973: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7974: LD_INT 22
7976: PUSH
7977: LD_INT 2
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 91
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: IFFALSE 8188
8008: GO 8010
8010: DISABLE
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8015: LD_INT 245
8017: PUSH
8018: LD_INT 210
8020: PUSH
8021: LD_INT 210
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: LD_OWVAR 67
8033: ARRAY
8034: PPUSH
8035: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_INT 22
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 54
8066: PUSH
8067: EMPTY
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: ST_TO_ADDR
// if not tmp then
8080: LD_VAR 0 2
8084: NOT
8085: IFFALSE 8089
// exit ;
8087: GO 8188
// for i in tmp do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_VAR 0 2
8098: PUSH
8099: FOR_IN
8100: IFFALSE 8128
// begin ComExitBuilding ( i ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8111: LD_VAR 0 1
8115: PPUSH
8116: LD_INT 121
8118: PPUSH
8119: LD_INT 22
8121: PPUSH
8122: CALL_OW 174
// end ;
8126: GO 8099
8128: POP
8129: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8130: LD_EXP 23
8134: PPUSH
8135: LD_INT 121
8137: PPUSH
8138: LD_INT 22
8140: PPUSH
8141: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8145: LD_EXP 24
8149: PPUSH
8150: LD_INT 121
8152: PPUSH
8153: LD_INT 22
8155: PPUSH
8156: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8160: LD_EXP 23
8164: PPUSH
8165: LD_EXP 16
8169: PPUSH
8170: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8174: LD_EXP 24
8178: PPUSH
8179: LD_EXP 16
8183: PPUSH
8184: CALL_OW 175
// end ;
8188: PPOPN 2
8190: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8191: LD_INT 22
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 91
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PPUSH
8219: CALL_OW 69
8223: IFFALSE 8405
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
8231: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8232: LD_INT 280
8234: PUSH
8235: LD_INT 245
8237: PUSH
8238: LD_INT 210
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: PUSH
8246: LD_OWVAR 67
8250: ARRAY
8251: PPUSH
8252: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 54
8283: PUSH
8284: EMPTY
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: ST_TO_ADDR
// if not tmp then
8297: LD_VAR 0 2
8301: NOT
8302: IFFALSE 8306
// exit ;
8304: GO 8405
// for i in tmp do
8306: LD_ADDR_VAR 0 1
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: FOR_IN
8317: IFFALSE 8345
// begin ComExitBuilding ( i ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: LD_INT 142
8335: PPUSH
8336: LD_INT 71
8338: PPUSH
8339: CALL_OW 174
// end ;
8343: GO 8316
8345: POP
8346: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8347: LD_EXP 23
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8362: LD_EXP 24
8366: PPUSH
8367: LD_INT 142
8369: PPUSH
8370: LD_INT 71
8372: PPUSH
8373: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8377: LD_EXP 23
8381: PPUSH
8382: LD_EXP 16
8386: PPUSH
8387: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8391: LD_EXP 24
8395: PPUSH
8396: LD_EXP 16
8400: PPUSH
8401: CALL_OW 175
// end ;
8405: PPOPN 2
8407: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8408: LD_INT 22
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 58
8430: PUSH
8431: EMPTY
8432: LIST
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: LD_INT 24
8439: PUSH
8440: LD_INT 1000
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 91
8453: PUSH
8454: LD_EXP 17
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 69
8478: PUSH
8479: LD_EXP 17
8483: PPUSH
8484: CALL_OW 302
8488: AND
8489: IFFALSE 8603
8491: GO 8493
8493: DISABLE
// begin enable ;
8494: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8495: LD_EXP 17
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 58
8522: PUSH
8523: EMPTY
8524: LIST
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 24
8531: PUSH
8532: LD_INT 1000
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 91
8545: PUSH
8546: LD_EXP 17
8550: PUSH
8551: LD_INT 8
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 69
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8579: LD_EXP 17
8583: PPUSH
8584: LD_INT 52
8586: PPUSH
8587: LD_INT 90
8589: PPUSH
8590: CALL_OW 171
// AddComHold ( Olaf ) ;
8594: LD_EXP 17
8598: PPUSH
8599: CALL_OW 200
// end ;
8603: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8604: LD_EXP 12
8608: PUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 302
8616: NOT
8617: AND
8618: PUSH
8619: LD_OWVAR 67
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: AND
8628: PUSH
8629: LD_EXP 13
8633: NOT
8634: AND
8635: IFFALSE 8652
8637: GO 8639
8639: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8640: LD_EXP 16
8644: PPUSH
8645: LD_STRING DH-prison-missing
8647: PPUSH
8648: CALL_OW 88
// end ;
8652: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8653: LD_EXP 12
8657: PUSH
8658: LD_INT 8
8660: PPUSH
8661: CALL_OW 302
8665: NOT
8666: AND
8667: PUSH
8668: LD_OWVAR 67
8672: PUSH
8673: LD_INT 1
8675: GREATER
8676: AND
8677: PUSH
8678: LD_EXP 13
8682: NOT
8683: AND
8684: IFFALSE 8701
8686: GO 8688
8688: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8689: LD_EXP 16
8693: PPUSH
8694: LD_STRING DH-prison-missing
8696: PPUSH
8697: CALL_OW 88
// end ;
8701: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8702: LD_EXP 12
8706: PUSH
8707: LD_INT 3
8709: PPUSH
8710: CALL_OW 302
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 13
8721: NOT
8722: AND
8723: IFFALSE 8740
8725: GO 8727
8727: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8728: LD_EXP 16
8732: PPUSH
8733: LD_STRING DH-prison-missing-a
8735: PPUSH
8736: CALL_OW 88
// end ;
8740: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8741: LD_EXP 12
8745: PUSH
8746: LD_INT 10
8748: PPUSH
8749: CALL_OW 302
8753: NOT
8754: AND
8755: PUSH
8756: LD_EXP 13
8760: NOT
8761: AND
8762: IFFALSE 8779
8764: GO 8766
8766: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8767: LD_EXP 16
8771: PPUSH
8772: LD_STRING DH-prison-missing-a
8774: PPUSH
8775: CALL_OW 88
// end ;
8779: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8780: LD_EXP 13
8784: NOT
8785: PUSH
8786: LD_EXP 12
8790: AND
8791: PUSH
8792: LD_INT 2
8794: PPUSH
8795: LD_EXP 20
8799: PPUSH
8800: CALL_OW 292
8804: AND
8805: IFFALSE 8892
8807: GO 8809
8809: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8810: LD_EXP 20
8814: PPUSH
8815: LD_EXP 16
8819: PPUSH
8820: CALL_OW 119
// DialogueOn ;
8824: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8828: LD_EXP 20
8832: PPUSH
8833: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8837: LD_EXP 20
8841: PPUSH
8842: LD_STRING DK-prison-found
8844: PPUSH
8845: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8849: LD_EXP 16
8853: PPUSH
8854: LD_STRING DH-prison-found
8856: PPUSH
8857: CALL_OW 88
// DialogueOff ;
8861: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8865: LD_EXP 20
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL_OW 235
// prisonFound := true ;
8877: LD_ADDR_EXP 13
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8885: LD_STRING O6_prison_out
8887: PPUSH
8888: CALL_OW 337
// end ;
8892: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8893: LD_EXP 16
8897: PPUSH
8898: CALL_OW 256
8902: PUSH
8903: LD_INT 500
8905: LESS
8906: IFFALSE 8919
8908: GO 8910
8910: DISABLE
// heikeHurt := true ;
8911: LD_ADDR_EXP 14
8915: PUSH
8916: LD_INT 1
8918: ST_TO_ADDR
8919: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8920: LD_INT 22
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 21
8932: PUSH
8933: LD_INT 3
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PPUSH
8944: CALL_OW 69
8948: IFFALSE 9264
8950: GO 8952
8952: DISABLE
8953: LD_INT 0
8955: PPUSH
8956: PPUSH
8957: PPUSH
// begin uc_side := 3 ;
8958: LD_ADDR_OWVAR 20
8962: PUSH
8963: LD_INT 3
8965: ST_TO_ADDR
// uc_nation := 3 ;
8966: LD_ADDR_OWVAR 21
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// tmp := [ ] ;
8974: LD_ADDR_VAR 0 2
8978: PUSH
8979: EMPTY
8980: ST_TO_ADDR
// for i := 1 to 8 do
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_INT 8
8993: PUSH
8994: FOR_TO
8995: IFFALSE 9103
// begin PrepareHuman ( false , 1 , 4 ) ;
8997: LD_INT 0
8999: PPUSH
9000: LD_INT 1
9002: PPUSH
9003: LD_INT 4
9005: PPUSH
9006: CALL_OW 380
// un := CreateHuman ;
9010: LD_ADDR_VAR 0 3
9014: PUSH
9015: CALL_OW 44
9019: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9020: LD_VAR 0 3
9024: PPUSH
9025: LD_INT 4
9027: PPUSH
9028: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 158
9039: PPUSH
9040: LD_INT 80
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 147
9057: PPUSH
9058: LD_INT 75
9060: PPUSH
9061: CALL_OW 111
// wait ( 0 0$1 ) ;
9065: LD_INT 35
9067: PPUSH
9068: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9072: LD_ADDR_VAR 0 2
9076: PUSH
9077: LD_VAR 0 2
9081: PPUSH
9082: LD_VAR 0 2
9086: PUSH
9087: LD_INT 1
9089: PLUS
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: CALL_OW 1
9100: ST_TO_ADDR
// end ;
9101: GO 8994
9103: POP
9104: POP
// repeat wait ( 0 0$1 ) ;
9105: LD_INT 35
9107: PPUSH
9108: CALL_OW 67
// for i in tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: PUSH
9122: FOR_IN
9123: IFFALSE 9244
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9125: LD_ADDR_VAR 0 3
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_INT 3
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 69
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 74
9154: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 250
9168: PPUSH
9169: LD_VAR 0 3
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 251
9182: PPUSH
9183: CALL_OW 428
9187: IFFALSE 9228
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_INT 1
9201: ARRAY
9202: PPUSH
9203: CALL_OW 250
9207: PPUSH
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PPUSH
9217: CALL_OW 251
9221: PPUSH
9222: CALL_OW 114
9226: GO 9242
// ComAttackUnit ( i , Heike ) ;
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_EXP 16
9237: PPUSH
9238: CALL_OW 115
// end ;
9242: GO 9122
9244: POP
9245: POP
// until IsDead ( Heike ) or not tmp ;
9246: LD_EXP 16
9250: PPUSH
9251: CALL_OW 301
9255: PUSH
9256: LD_VAR 0 2
9260: NOT
9261: OR
9262: IFFALSE 9105
// end ;
9264: PPOPN 3
9266: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9267: LD_EXP 12
9271: PUSH
9272: LD_EXP 16
9276: PPUSH
9277: CALL_OW 302
9281: AND
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_INT 21
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 22
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 50
9308: PUSH
9309: EMPTY
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 71
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: AND
9326: IFFALSE 9656
9328: GO 9330
9330: DISABLE
9331: LD_INT 0
9333: PPUSH
// begin if not heikeHurt then
9334: LD_EXP 14
9338: NOT
9339: IFFALSE 9348
// SetAchievement ( ACH_INVINCIBLE ) ;
9341: LD_STRING ACH_INVINCIBLE
9343: PPUSH
9344: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 21
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 50
9375: PUSH
9376: EMPTY
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 69
9388: ST_TO_ADDR
// if prisonFound then
9389: LD_EXP 13
9393: IFFALSE 9407
// AddMedal ( med1 , 1 ) else
9395: LD_STRING med1
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 101
9405: GO 9418
// AddMedal ( med1 , - 1 ) ;
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: NEG
9413: PPUSH
9414: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9418: LD_VAR 0 1
9422: PUSH
9423: LD_INT 3
9425: LESS
9426: PUSH
9427: LD_EXP 13
9431: NOT
9432: AND
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: LD_INT 4
9441: LESS
9442: PUSH
9443: LD_EXP 13
9447: AND
9448: OR
9449: IFFALSE 9464
// AddMedal ( med2 , - 1 ) else
9451: LD_STRING med2
9453: PPUSH
9454: LD_INT 1
9456: NEG
9457: PPUSH
9458: CALL_OW 101
9462: GO 9474
// AddMedal ( med2 , 1 ) ;
9464: LD_STRING med2
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9474: LD_EXP 13
9478: PUSH
9479: LD_EXP 4
9483: AND
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: LD_INT 4
9492: GREATEREQUAL
9493: AND
9494: IFFALSE 9508
// AddMedal ( med3 , 1 ) else
9496: LD_STRING med3
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 101
9506: GO 9519
// AddMedal ( med3 , - 1 ) ;
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: NEG
9514: PPUSH
9515: CALL_OW 101
// GiveMedals ( MAIN ) ;
9519: LD_STRING MAIN
9521: PPUSH
9522: CALL_OW 102
// RewardPeople ( tmp ) ;
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9535: LD_EXP 16
9539: PPUSH
9540: LD_STRING 01_Heike
9542: PPUSH
9543: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9547: LD_EXP 18
9551: PPUSH
9552: CALL_OW 302
9556: PUSH
9557: LD_EXP 18
9561: PUSH
9562: LD_VAR 0 1
9566: IN
9567: AND
9568: IFFALSE 9582
// SaveCharacters ( Givi , 01_Givi ) ;
9570: LD_EXP 18
9574: PPUSH
9575: LD_STRING 01_Givi
9577: PPUSH
9578: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9582: LD_EXP 19
9586: PPUSH
9587: CALL_OW 302
9591: PUSH
9592: LD_EXP 19
9596: PUSH
9597: LD_VAR 0 1
9601: IN
9602: AND
9603: IFFALSE 9617
// SaveCharacters ( Mike , 01_Mike ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 01_Mike
9612: PPUSH
9613: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9617: LD_EXP 20
9621: PPUSH
9622: CALL_OW 302
9626: PUSH
9627: LD_EXP 20
9631: PUSH
9632: LD_VAR 0 1
9636: IN
9637: AND
9638: IFFALSE 9652
// SaveCharacters ( Kamil , 01_Kamil ) ;
9640: LD_EXP 20
9644: PPUSH
9645: LD_STRING 01_Kamil
9647: PPUSH
9648: CALL_OW 38
// YouWin ;
9652: CALL_OW 103
// end ; end_of_file
9656: PPOPN 1
9658: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9659: LD_VAR 0 1
9663: PUSH
9664: LD_EXP 16
9668: EQUAL
9669: IFFALSE 9678
// YouLost ( Heike ) ;
9671: LD_STRING Heike
9673: PPUSH
9674: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9678: LD_VAR 0 1
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: IN
9712: IFFALSE 9818
// begin if un in russianPatrol then
9714: LD_VAR 0 1
9718: PUSH
9719: LD_EXP 21
9723: IN
9724: IFFALSE 9742
// russianPatrol := russianPatrol diff un ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 1
9740: DIFF
9741: ST_TO_ADDR
// if un in russianForestPatrol then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_EXP 22
9751: IN
9752: IFFALSE 9770
// russianForestPatrol := russianForestPatrol diff un ;
9754: LD_ADDR_EXP 22
9758: PUSH
9759: LD_EXP 22
9763: PUSH
9764: LD_VAR 0 1
9768: DIFF
9769: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9770: LD_ADDR_EXP 5
9774: PUSH
9775: LD_EXP 5
9779: PPUSH
9780: LD_EXP 5
9784: PUSH
9785: LD_INT 1
9787: PLUS
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 250
9798: PUSH
9799: LD_VAR 0 1
9803: PPUSH
9804: CALL_OW 251
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 1
9817: ST_TO_ADDR
// end ; end ;
9818: PPOPN 1
9820: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 16
9830: EQUAL
9831: IFFALSE 9840
// YouLost ( Heike ) ;
9833: LD_STRING Heike
9835: PPUSH
9836: CALL_OW 104
// end ;
9840: PPOPN 1
9842: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 2
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 5
9859: EQUAL
9860: AND
9861: IFFALSE 9870
// YouLost ( FriendlyFire ) ;
9863: LD_STRING FriendlyFire
9865: PPUSH
9866: CALL_OW 104
// end ;
9870: PPOPN 2
9872: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9873: LD_EXP 17
9877: PPUSH
9878: CALL_OW 256
9882: PUSH
9883: LD_INT 250
9885: LESS
9886: IFFALSE 9898
9888: GO 9890
9890: DISABLE
// YouLost ( Olaf ) ; end_of_file
9891: LD_STRING Olaf
9893: PPUSH
9894: CALL_OW 104
9898: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9899: GO 9901
9901: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9902: LD_STRING initStreamRollete();
9904: PPUSH
9905: CALL_OW 559
// InitStreamMode ;
9909: CALL 9918 0 0
// DefineStreamItems ( ) ;
9913: CALL 10358 0 0
// end ;
9917: END
// function InitStreamMode ; begin
9918: LD_INT 0
9920: PPUSH
// streamModeActive := false ;
9921: LD_ADDR_EXP 26
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// normalCounter := 36 ;
9929: LD_ADDR_EXP 27
9933: PUSH
9934: LD_INT 36
9936: ST_TO_ADDR
// hardcoreCounter := 16 ;
9937: LD_ADDR_EXP 28
9941: PUSH
9942: LD_INT 16
9944: ST_TO_ADDR
// sRocket := false ;
9945: LD_ADDR_EXP 31
9949: PUSH
9950: LD_INT 0
9952: ST_TO_ADDR
// sSpeed := false ;
9953: LD_ADDR_EXP 30
9957: PUSH
9958: LD_INT 0
9960: ST_TO_ADDR
// sEngine := false ;
9961: LD_ADDR_EXP 32
9965: PUSH
9966: LD_INT 0
9968: ST_TO_ADDR
// sSpec := false ;
9969: LD_ADDR_EXP 29
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// sLevel := false ;
9977: LD_ADDR_EXP 33
9981: PUSH
9982: LD_INT 0
9984: ST_TO_ADDR
// sArmoury := false ;
9985: LD_ADDR_EXP 34
9989: PUSH
9990: LD_INT 0
9992: ST_TO_ADDR
// sRadar := false ;
9993: LD_ADDR_EXP 35
9997: PUSH
9998: LD_INT 0
10000: ST_TO_ADDR
// sBunker := false ;
10001: LD_ADDR_EXP 36
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// sHack := false ;
10009: LD_ADDR_EXP 37
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// sFire := false ;
10017: LD_ADDR_EXP 38
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// sRefresh := false ;
10025: LD_ADDR_EXP 39
10029: PUSH
10030: LD_INT 0
10032: ST_TO_ADDR
// sExp := false ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// sDepot := false ;
10041: LD_ADDR_EXP 41
10045: PUSH
10046: LD_INT 0
10048: ST_TO_ADDR
// sFlag := false ;
10049: LD_ADDR_EXP 42
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// sKamikadze := false ;
10057: LD_ADDR_EXP 50
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// sTroll := false ;
10065: LD_ADDR_EXP 51
10069: PUSH
10070: LD_INT 0
10072: ST_TO_ADDR
// sSlow := false ;
10073: LD_ADDR_EXP 52
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// sLack := false ;
10081: LD_ADDR_EXP 53
10085: PUSH
10086: LD_INT 0
10088: ST_TO_ADDR
// sTank := false ;
10089: LD_ADDR_EXP 55
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// sRemote := false ;
10097: LD_ADDR_EXP 56
10101: PUSH
10102: LD_INT 0
10104: ST_TO_ADDR
// sPowell := false ;
10105: LD_ADDR_EXP 57
10109: PUSH
10110: LD_INT 0
10112: ST_TO_ADDR
// sTeleport := false ;
10113: LD_ADDR_EXP 60
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// sOilTower := false ;
10121: LD_ADDR_EXP 62
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// sShovel := false ;
10129: LD_ADDR_EXP 63
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// sSheik := false ;
10137: LD_ADDR_EXP 64
10141: PUSH
10142: LD_INT 0
10144: ST_TO_ADDR
// sEarthquake := false ;
10145: LD_ADDR_EXP 66
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// sAI := false ;
10153: LD_ADDR_EXP 67
10157: PUSH
10158: LD_INT 0
10160: ST_TO_ADDR
// sCargo := false ;
10161: LD_ADDR_EXP 70
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// sDLaser := false ;
10169: LD_ADDR_EXP 71
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// sExchange := false ;
10177: LD_ADDR_EXP 72
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// sFac := false ;
10185: LD_ADDR_EXP 73
10189: PUSH
10190: LD_INT 0
10192: ST_TO_ADDR
// sPower := false ;
10193: LD_ADDR_EXP 74
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// sRandom := false ;
10201: LD_ADDR_EXP 75
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// sShield := false ;
10209: LD_ADDR_EXP 76
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// sTime := false ;
10217: LD_ADDR_EXP 77
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// sTools := false ;
10225: LD_ADDR_EXP 78
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// sSold := false ;
10233: LD_ADDR_EXP 43
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// sDiff := false ;
10241: LD_ADDR_EXP 44
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// sFog := false ;
10249: LD_ADDR_EXP 47
10253: PUSH
10254: LD_INT 0
10256: ST_TO_ADDR
// sReset := false ;
10257: LD_ADDR_EXP 48
10261: PUSH
10262: LD_INT 0
10264: ST_TO_ADDR
// sSun := false ;
10265: LD_ADDR_EXP 49
10269: PUSH
10270: LD_INT 0
10272: ST_TO_ADDR
// sTiger := false ;
10273: LD_ADDR_EXP 45
10277: PUSH
10278: LD_INT 0
10280: ST_TO_ADDR
// sBomb := false ;
10281: LD_ADDR_EXP 46
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// sWound := false ;
10289: LD_ADDR_EXP 54
10293: PUSH
10294: LD_INT 0
10296: ST_TO_ADDR
// sBetray := false ;
10297: LD_ADDR_EXP 58
10301: PUSH
10302: LD_INT 0
10304: ST_TO_ADDR
// sContamin := false ;
10305: LD_ADDR_EXP 59
10309: PUSH
10310: LD_INT 0
10312: ST_TO_ADDR
// sOil := false ;
10313: LD_ADDR_EXP 61
10317: PUSH
10318: LD_INT 0
10320: ST_TO_ADDR
// sStu := false ;
10321: LD_ADDR_EXP 65
10325: PUSH
10326: LD_INT 0
10328: ST_TO_ADDR
// sBazooka := false ;
10329: LD_ADDR_EXP 68
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// sMortar := false ;
10337: LD_ADDR_EXP 69
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// sRanger := false ;
10345: LD_ADDR_EXP 79
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// end ;
10353: LD_VAR 0 1
10357: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10358: LD_INT 0
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
// result := [ ] ;
10365: LD_ADDR_VAR 0 1
10369: PUSH
10370: EMPTY
10371: ST_TO_ADDR
// if campaign_id = 1 then
10372: LD_OWVAR 69
10376: PUSH
10377: LD_INT 1
10379: EQUAL
10380: IFFALSE 13318
// begin case mission_number of 1 :
10382: LD_OWVAR 70
10386: PUSH
10387: LD_INT 1
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10459
10395: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10396: LD_ADDR_VAR 0 1
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: LD_INT 4
10406: PUSH
10407: LD_INT 11
10409: PUSH
10410: LD_INT 12
10412: PUSH
10413: LD_INT 15
10415: PUSH
10416: LD_INT 16
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 26
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 101
10441: PUSH
10442: LD_INT 102
10444: PUSH
10445: LD_INT 106
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: ST_TO_ADDR
10457: GO 13316
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10539
10467: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10468: LD_ADDR_VAR 0 1
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: LD_INT 4
10478: PUSH
10479: LD_INT 11
10481: PUSH
10482: LD_INT 12
10484: PUSH
10485: LD_INT 15
10487: PUSH
10488: LD_INT 16
10490: PUSH
10491: LD_INT 22
10493: PUSH
10494: LD_INT 23
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 101
10513: PUSH
10514: LD_INT 102
10516: PUSH
10517: LD_INT 105
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 108
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: ST_TO_ADDR
10537: GO 13316
10539: LD_INT 3
10541: DOUBLE
10542: EQUAL
10543: IFTRUE 10547
10545: GO 10623
10547: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: LD_INT 5
10561: PUSH
10562: LD_INT 11
10564: PUSH
10565: LD_INT 12
10567: PUSH
10568: LD_INT 15
10570: PUSH
10571: LD_INT 16
10573: PUSH
10574: LD_INT 22
10576: PUSH
10577: LD_INT 26
10579: PUSH
10580: LD_INT 36
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 105
10603: PUSH
10604: LD_INT 106
10606: PUSH
10607: LD_INT 108
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: ST_TO_ADDR
10621: GO 13316
10623: LD_INT 4
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10715
10631: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10632: LD_ADDR_VAR 0 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 4
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: LD_INT 8
10648: PUSH
10649: LD_INT 11
10651: PUSH
10652: LD_INT 12
10654: PUSH
10655: LD_INT 15
10657: PUSH
10658: LD_INT 16
10660: PUSH
10661: LD_INT 22
10663: PUSH
10664: LD_INT 23
10666: PUSH
10667: LD_INT 26
10669: PUSH
10670: LD_INT 36
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 101
10689: PUSH
10690: LD_INT 102
10692: PUSH
10693: LD_INT 105
10695: PUSH
10696: LD_INT 106
10698: PUSH
10699: LD_INT 108
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: ST_TO_ADDR
10713: GO 13316
10715: LD_INT 5
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10823
10723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: LD_INT 5
10737: PUSH
10738: LD_INT 6
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 11
10746: PUSH
10747: LD_INT 12
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_INT 23
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 26
10767: PUSH
10768: LD_INT 36
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 105
10795: PUSH
10796: LD_INT 106
10798: PUSH
10799: LD_INT 108
10801: PUSH
10802: LD_INT 109
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: ST_TO_ADDR
10821: GO 13316
10823: LD_INT 6
10825: DOUBLE
10826: EQUAL
10827: IFTRUE 10831
10829: GO 10951
10831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 2
10839: PUSH
10840: LD_INT 4
10842: PUSH
10843: LD_INT 5
10845: PUSH
10846: LD_INT 6
10848: PUSH
10849: LD_INT 8
10851: PUSH
10852: LD_INT 11
10854: PUSH
10855: LD_INT 12
10857: PUSH
10858: LD_INT 15
10860: PUSH
10861: LD_INT 16
10863: PUSH
10864: LD_INT 20
10866: PUSH
10867: LD_INT 21
10869: PUSH
10870: LD_INT 22
10872: PUSH
10873: LD_INT 23
10875: PUSH
10876: LD_INT 25
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 30
10884: PUSH
10885: LD_INT 31
10887: PUSH
10888: LD_INT 32
10890: PUSH
10891: LD_INT 36
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 101
10917: PUSH
10918: LD_INT 102
10920: PUSH
10921: LD_INT 105
10923: PUSH
10924: LD_INT 106
10926: PUSH
10927: LD_INT 108
10929: PUSH
10930: LD_INT 109
10932: PUSH
10933: LD_INT 112
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: ST_TO_ADDR
10949: GO 13316
10951: LD_INT 7
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10959
10957: GO 11059
10959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: LD_INT 4
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: LD_INT 7
10976: PUSH
10977: LD_INT 11
10979: PUSH
10980: LD_INT 12
10982: PUSH
10983: LD_INT 15
10985: PUSH
10986: LD_INT 16
10988: PUSH
10989: LD_INT 20
10991: PUSH
10992: LD_INT 21
10994: PUSH
10995: LD_INT 22
10997: PUSH
10998: LD_INT 23
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 26
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 101
11025: PUSH
11026: LD_INT 102
11028: PUSH
11029: LD_INT 103
11031: PUSH
11032: LD_INT 105
11034: PUSH
11035: LD_INT 106
11037: PUSH
11038: LD_INT 108
11040: PUSH
11041: LD_INT 112
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: ST_TO_ADDR
11057: GO 13316
11059: LD_INT 8
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11195
11067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11068: LD_ADDR_VAR 0 1
11072: PUSH
11073: LD_INT 2
11075: PUSH
11076: LD_INT 4
11078: PUSH
11079: LD_INT 5
11081: PUSH
11082: LD_INT 6
11084: PUSH
11085: LD_INT 7
11087: PUSH
11088: LD_INT 8
11090: PUSH
11091: LD_INT 11
11093: PUSH
11094: LD_INT 12
11096: PUSH
11097: LD_INT 15
11099: PUSH
11100: LD_INT 16
11102: PUSH
11103: LD_INT 20
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 22
11111: PUSH
11112: LD_INT 23
11114: PUSH
11115: LD_INT 25
11117: PUSH
11118: LD_INT 26
11120: PUSH
11121: LD_INT 30
11123: PUSH
11124: LD_INT 31
11126: PUSH
11127: LD_INT 32
11129: PUSH
11130: LD_INT 36
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 101
11157: PUSH
11158: LD_INT 102
11160: PUSH
11161: LD_INT 103
11163: PUSH
11164: LD_INT 105
11166: PUSH
11167: LD_INT 106
11169: PUSH
11170: LD_INT 108
11172: PUSH
11173: LD_INT 109
11175: PUSH
11176: LD_INT 112
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: ST_TO_ADDR
11193: GO 13316
11195: LD_INT 9
11197: DOUBLE
11198: EQUAL
11199: IFTRUE 11203
11201: GO 11339
11203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: LD_INT 4
11214: PUSH
11215: LD_INT 5
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: LD_INT 7
11223: PUSH
11224: LD_INT 8
11226: PUSH
11227: LD_INT 11
11229: PUSH
11230: LD_INT 12
11232: PUSH
11233: LD_INT 15
11235: PUSH
11236: LD_INT 16
11238: PUSH
11239: LD_INT 20
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 23
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 26
11256: PUSH
11257: LD_INT 28
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: LD_INT 31
11265: PUSH
11266: LD_INT 32
11268: PUSH
11269: LD_INT 36
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 101
11297: PUSH
11298: LD_INT 102
11300: PUSH
11301: LD_INT 103
11303: PUSH
11304: LD_INT 105
11306: PUSH
11307: LD_INT 106
11309: PUSH
11310: LD_INT 108
11312: PUSH
11313: LD_INT 109
11315: PUSH
11316: LD_INT 112
11318: PUSH
11319: LD_INT 114
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: ST_TO_ADDR
11337: GO 13316
11339: LD_INT 10
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11531
11347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: LD_INT 2
11355: PUSH
11356: LD_INT 4
11358: PUSH
11359: LD_INT 5
11361: PUSH
11362: LD_INT 6
11364: PUSH
11365: LD_INT 7
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: LD_INT 9
11373: PUSH
11374: LD_INT 10
11376: PUSH
11377: LD_INT 11
11379: PUSH
11380: LD_INT 12
11382: PUSH
11383: LD_INT 13
11385: PUSH
11386: LD_INT 14
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 17
11397: PUSH
11398: LD_INT 18
11400: PUSH
11401: LD_INT 19
11403: PUSH
11404: LD_INT 20
11406: PUSH
11407: LD_INT 21
11409: PUSH
11410: LD_INT 22
11412: PUSH
11413: LD_INT 23
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 26
11424: PUSH
11425: LD_INT 28
11427: PUSH
11428: LD_INT 30
11430: PUSH
11431: LD_INT 31
11433: PUSH
11434: LD_INT 32
11436: PUSH
11437: LD_INT 36
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 101
11473: PUSH
11474: LD_INT 102
11476: PUSH
11477: LD_INT 103
11479: PUSH
11480: LD_INT 104
11482: PUSH
11483: LD_INT 105
11485: PUSH
11486: LD_INT 106
11488: PUSH
11489: LD_INT 107
11491: PUSH
11492: LD_INT 108
11494: PUSH
11495: LD_INT 109
11497: PUSH
11498: LD_INT 110
11500: PUSH
11501: LD_INT 111
11503: PUSH
11504: LD_INT 112
11506: PUSH
11507: LD_INT 114
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: ST_TO_ADDR
11529: GO 13316
11531: LD_INT 11
11533: DOUBLE
11534: EQUAL
11535: IFTRUE 11539
11537: GO 11731
11539: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11540: LD_ADDR_VAR 0 1
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 6
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 8
11565: PUSH
11566: LD_INT 9
11568: PUSH
11569: LD_INT 10
11571: PUSH
11572: LD_INT 11
11574: PUSH
11575: LD_INT 12
11577: PUSH
11578: LD_INT 13
11580: PUSH
11581: LD_INT 14
11583: PUSH
11584: LD_INT 15
11586: PUSH
11587: LD_INT 16
11589: PUSH
11590: LD_INT 17
11592: PUSH
11593: LD_INT 18
11595: PUSH
11596: LD_INT 19
11598: PUSH
11599: LD_INT 20
11601: PUSH
11602: LD_INT 21
11604: PUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 23
11610: PUSH
11611: LD_INT 24
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 26
11619: PUSH
11620: LD_INT 28
11622: PUSH
11623: LD_INT 30
11625: PUSH
11626: LD_INT 31
11628: PUSH
11629: LD_INT 32
11631: PUSH
11632: LD_INT 34
11634: PUSH
11635: LD_INT 36
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 101
11673: PUSH
11674: LD_INT 102
11676: PUSH
11677: LD_INT 103
11679: PUSH
11680: LD_INT 104
11682: PUSH
11683: LD_INT 105
11685: PUSH
11686: LD_INT 106
11688: PUSH
11689: LD_INT 107
11691: PUSH
11692: LD_INT 108
11694: PUSH
11695: LD_INT 109
11697: PUSH
11698: LD_INT 110
11700: PUSH
11701: LD_INT 111
11703: PUSH
11704: LD_INT 112
11706: PUSH
11707: LD_INT 114
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: ST_TO_ADDR
11729: GO 13316
11731: LD_INT 12
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11947
11739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11740: LD_ADDR_VAR 0 1
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 3
11753: PUSH
11754: LD_INT 4
11756: PUSH
11757: LD_INT 5
11759: PUSH
11760: LD_INT 6
11762: PUSH
11763: LD_INT 7
11765: PUSH
11766: LD_INT 8
11768: PUSH
11769: LD_INT 9
11771: PUSH
11772: LD_INT 10
11774: PUSH
11775: LD_INT 11
11777: PUSH
11778: LD_INT 12
11780: PUSH
11781: LD_INT 13
11783: PUSH
11784: LD_INT 14
11786: PUSH
11787: LD_INT 15
11789: PUSH
11790: LD_INT 16
11792: PUSH
11793: LD_INT 17
11795: PUSH
11796: LD_INT 18
11798: PUSH
11799: LD_INT 19
11801: PUSH
11802: LD_INT 20
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_INT 23
11813: PUSH
11814: LD_INT 24
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 26
11822: PUSH
11823: LD_INT 27
11825: PUSH
11826: LD_INT 28
11828: PUSH
11829: LD_INT 30
11831: PUSH
11832: LD_INT 31
11834: PUSH
11835: LD_INT 32
11837: PUSH
11838: LD_INT 33
11840: PUSH
11841: LD_INT 34
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 101
11885: PUSH
11886: LD_INT 102
11888: PUSH
11889: LD_INT 103
11891: PUSH
11892: LD_INT 104
11894: PUSH
11895: LD_INT 105
11897: PUSH
11898: LD_INT 106
11900: PUSH
11901: LD_INT 107
11903: PUSH
11904: LD_INT 108
11906: PUSH
11907: LD_INT 109
11909: PUSH
11910: LD_INT 110
11912: PUSH
11913: LD_INT 111
11915: PUSH
11916: LD_INT 112
11918: PUSH
11919: LD_INT 113
11921: PUSH
11922: LD_INT 114
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: ST_TO_ADDR
11945: GO 13316
11947: LD_INT 13
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 12151
11955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11956: LD_ADDR_VAR 0 1
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 3
11969: PUSH
11970: LD_INT 4
11972: PUSH
11973: LD_INT 5
11975: PUSH
11976: LD_INT 8
11978: PUSH
11979: LD_INT 9
11981: PUSH
11982: LD_INT 10
11984: PUSH
11985: LD_INT 11
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: LD_INT 14
11993: PUSH
11994: LD_INT 15
11996: PUSH
11997: LD_INT 16
11999: PUSH
12000: LD_INT 17
12002: PUSH
12003: LD_INT 18
12005: PUSH
12006: LD_INT 19
12008: PUSH
12009: LD_INT 20
12011: PUSH
12012: LD_INT 21
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_INT 23
12020: PUSH
12021: LD_INT 24
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 26
12029: PUSH
12030: LD_INT 27
12032: PUSH
12033: LD_INT 28
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: LD_INT 33
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: LD_INT 36
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 101
12089: PUSH
12090: LD_INT 102
12092: PUSH
12093: LD_INT 103
12095: PUSH
12096: LD_INT 104
12098: PUSH
12099: LD_INT 105
12101: PUSH
12102: LD_INT 106
12104: PUSH
12105: LD_INT 107
12107: PUSH
12108: LD_INT 108
12110: PUSH
12111: LD_INT 109
12113: PUSH
12114: LD_INT 110
12116: PUSH
12117: LD_INT 111
12119: PUSH
12120: LD_INT 112
12122: PUSH
12123: LD_INT 113
12125: PUSH
12126: LD_INT 114
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: ST_TO_ADDR
12149: GO 13316
12151: LD_INT 14
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12371
12159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 3
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: LD_INT 6
12182: PUSH
12183: LD_INT 7
12185: PUSH
12186: LD_INT 8
12188: PUSH
12189: LD_INT 9
12191: PUSH
12192: LD_INT 10
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 13
12203: PUSH
12204: LD_INT 14
12206: PUSH
12207: LD_INT 15
12209: PUSH
12210: LD_INT 16
12212: PUSH
12213: LD_INT 17
12215: PUSH
12216: LD_INT 18
12218: PUSH
12219: LD_INT 19
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_INT 23
12233: PUSH
12234: LD_INT 24
12236: PUSH
12237: LD_INT 25
12239: PUSH
12240: LD_INT 26
12242: PUSH
12243: LD_INT 27
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 29
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 31
12257: PUSH
12258: LD_INT 32
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 34
12266: PUSH
12267: LD_INT 36
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 101
12309: PUSH
12310: LD_INT 102
12312: PUSH
12313: LD_INT 103
12315: PUSH
12316: LD_INT 104
12318: PUSH
12319: LD_INT 105
12321: PUSH
12322: LD_INT 106
12324: PUSH
12325: LD_INT 107
12327: PUSH
12328: LD_INT 108
12330: PUSH
12331: LD_INT 109
12333: PUSH
12334: LD_INT 110
12336: PUSH
12337: LD_INT 111
12339: PUSH
12340: LD_INT 112
12342: PUSH
12343: LD_INT 113
12345: PUSH
12346: LD_INT 114
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: ST_TO_ADDR
12369: GO 13316
12371: LD_INT 15
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12591
12379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12380: LD_ADDR_VAR 0 1
12384: PUSH
12385: LD_INT 1
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: LD_INT 5
12399: PUSH
12400: LD_INT 6
12402: PUSH
12403: LD_INT 7
12405: PUSH
12406: LD_INT 8
12408: PUSH
12409: LD_INT 9
12411: PUSH
12412: LD_INT 10
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 12
12420: PUSH
12421: LD_INT 13
12423: PUSH
12424: LD_INT 14
12426: PUSH
12427: LD_INT 15
12429: PUSH
12430: LD_INT 16
12432: PUSH
12433: LD_INT 17
12435: PUSH
12436: LD_INT 18
12438: PUSH
12439: LD_INT 19
12441: PUSH
12442: LD_INT 20
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_INT 23
12453: PUSH
12454: LD_INT 24
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 26
12462: PUSH
12463: LD_INT 27
12465: PUSH
12466: LD_INT 28
12468: PUSH
12469: LD_INT 29
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 31
12477: PUSH
12478: LD_INT 32
12480: PUSH
12481: LD_INT 33
12483: PUSH
12484: LD_INT 34
12486: PUSH
12487: LD_INT 36
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 101
12529: PUSH
12530: LD_INT 102
12532: PUSH
12533: LD_INT 103
12535: PUSH
12536: LD_INT 104
12538: PUSH
12539: LD_INT 105
12541: PUSH
12542: LD_INT 106
12544: PUSH
12545: LD_INT 107
12547: PUSH
12548: LD_INT 108
12550: PUSH
12551: LD_INT 109
12553: PUSH
12554: LD_INT 110
12556: PUSH
12557: LD_INT 111
12559: PUSH
12560: LD_INT 112
12562: PUSH
12563: LD_INT 113
12565: PUSH
12566: LD_INT 114
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: ST_TO_ADDR
12589: GO 13316
12591: LD_INT 16
12593: DOUBLE
12594: EQUAL
12595: IFTRUE 12599
12597: GO 12723
12599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12600: LD_ADDR_VAR 0 1
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: LD_INT 7
12616: PUSH
12617: LD_INT 11
12619: PUSH
12620: LD_INT 12
12622: PUSH
12623: LD_INT 15
12625: PUSH
12626: LD_INT 16
12628: PUSH
12629: LD_INT 20
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_INT 23
12640: PUSH
12641: LD_INT 25
12643: PUSH
12644: LD_INT 26
12646: PUSH
12647: LD_INT 30
12649: PUSH
12650: LD_INT 31
12652: PUSH
12653: LD_INT 32
12655: PUSH
12656: LD_INT 33
12658: PUSH
12659: LD_INT 34
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 101
12685: PUSH
12686: LD_INT 102
12688: PUSH
12689: LD_INT 103
12691: PUSH
12692: LD_INT 106
12694: PUSH
12695: LD_INT 108
12697: PUSH
12698: LD_INT 112
12700: PUSH
12701: LD_INT 113
12703: PUSH
12704: LD_INT 114
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
12721: GO 13316
12723: LD_INT 17
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12943
12731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12732: LD_ADDR_VAR 0 1
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: LD_INT 4
12748: PUSH
12749: LD_INT 5
12751: PUSH
12752: LD_INT 6
12754: PUSH
12755: LD_INT 7
12757: PUSH
12758: LD_INT 8
12760: PUSH
12761: LD_INT 9
12763: PUSH
12764: LD_INT 10
12766: PUSH
12767: LD_INT 11
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: LD_INT 13
12775: PUSH
12776: LD_INT 14
12778: PUSH
12779: LD_INT 15
12781: PUSH
12782: LD_INT 16
12784: PUSH
12785: LD_INT 17
12787: PUSH
12788: LD_INT 18
12790: PUSH
12791: LD_INT 19
12793: PUSH
12794: LD_INT 20
12796: PUSH
12797: LD_INT 21
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 23
12805: PUSH
12806: LD_INT 24
12808: PUSH
12809: LD_INT 25
12811: PUSH
12812: LD_INT 26
12814: PUSH
12815: LD_INT 27
12817: PUSH
12818: LD_INT 28
12820: PUSH
12821: LD_INT 29
12823: PUSH
12824: LD_INT 30
12826: PUSH
12827: LD_INT 31
12829: PUSH
12830: LD_INT 32
12832: PUSH
12833: LD_INT 33
12835: PUSH
12836: LD_INT 34
12838: PUSH
12839: LD_INT 36
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 101
12881: PUSH
12882: LD_INT 102
12884: PUSH
12885: LD_INT 103
12887: PUSH
12888: LD_INT 104
12890: PUSH
12891: LD_INT 105
12893: PUSH
12894: LD_INT 106
12896: PUSH
12897: LD_INT 107
12899: PUSH
12900: LD_INT 108
12902: PUSH
12903: LD_INT 109
12905: PUSH
12906: LD_INT 110
12908: PUSH
12909: LD_INT 111
12911: PUSH
12912: LD_INT 112
12914: PUSH
12915: LD_INT 113
12917: PUSH
12918: LD_INT 114
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: ST_TO_ADDR
12941: GO 13316
12943: LD_INT 18
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 13087
12951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: LD_INT 4
12962: PUSH
12963: LD_INT 5
12965: PUSH
12966: LD_INT 7
12968: PUSH
12969: LD_INT 11
12971: PUSH
12972: LD_INT 12
12974: PUSH
12975: LD_INT 15
12977: PUSH
12978: LD_INT 16
12980: PUSH
12981: LD_INT 20
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 23
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 31
13004: PUSH
13005: LD_INT 32
13007: PUSH
13008: LD_INT 33
13010: PUSH
13011: LD_INT 34
13013: PUSH
13014: LD_INT 35
13016: PUSH
13017: LD_INT 36
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 103
13051: PUSH
13052: LD_INT 106
13054: PUSH
13055: LD_INT 108
13057: PUSH
13058: LD_INT 112
13060: PUSH
13061: LD_INT 113
13063: PUSH
13064: LD_INT 114
13066: PUSH
13067: LD_INT 115
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: ST_TO_ADDR
13085: GO 13316
13087: LD_INT 19
13089: DOUBLE
13090: EQUAL
13091: IFTRUE 13095
13093: GO 13315
13095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: LD_INT 3
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 6
13118: PUSH
13119: LD_INT 7
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: LD_INT 9
13127: PUSH
13128: LD_INT 10
13130: PUSH
13131: LD_INT 11
13133: PUSH
13134: LD_INT 12
13136: PUSH
13137: LD_INT 13
13139: PUSH
13140: LD_INT 14
13142: PUSH
13143: LD_INT 15
13145: PUSH
13146: LD_INT 16
13148: PUSH
13149: LD_INT 17
13151: PUSH
13152: LD_INT 18
13154: PUSH
13155: LD_INT 19
13157: PUSH
13158: LD_INT 20
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 22
13166: PUSH
13167: LD_INT 23
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 25
13175: PUSH
13176: LD_INT 26
13178: PUSH
13179: LD_INT 27
13181: PUSH
13182: LD_INT 28
13184: PUSH
13185: LD_INT 29
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 31
13193: PUSH
13194: LD_INT 32
13196: PUSH
13197: LD_INT 33
13199: PUSH
13200: LD_INT 34
13202: PUSH
13203: LD_INT 35
13205: PUSH
13206: LD_INT 36
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 101
13249: PUSH
13250: LD_INT 102
13252: PUSH
13253: LD_INT 103
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 105
13261: PUSH
13262: LD_INT 106
13264: PUSH
13265: LD_INT 107
13267: PUSH
13268: LD_INT 108
13270: PUSH
13271: LD_INT 109
13273: PUSH
13274: LD_INT 110
13276: PUSH
13277: LD_INT 111
13279: PUSH
13280: LD_INT 112
13282: PUSH
13283: LD_INT 113
13285: PUSH
13286: LD_INT 114
13288: PUSH
13289: LD_INT 115
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: ST_TO_ADDR
13313: GO 13316
13315: POP
// end else
13316: GO 13535
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13318: LD_ADDR_VAR 0 1
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: LD_INT 5
13337: PUSH
13338: LD_INT 6
13340: PUSH
13341: LD_INT 7
13343: PUSH
13344: LD_INT 8
13346: PUSH
13347: LD_INT 9
13349: PUSH
13350: LD_INT 10
13352: PUSH
13353: LD_INT 11
13355: PUSH
13356: LD_INT 12
13358: PUSH
13359: LD_INT 13
13361: PUSH
13362: LD_INT 14
13364: PUSH
13365: LD_INT 15
13367: PUSH
13368: LD_INT 16
13370: PUSH
13371: LD_INT 17
13373: PUSH
13374: LD_INT 18
13376: PUSH
13377: LD_INT 19
13379: PUSH
13380: LD_INT 20
13382: PUSH
13383: LD_INT 21
13385: PUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 23
13391: PUSH
13392: LD_INT 24
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 26
13400: PUSH
13401: LD_INT 27
13403: PUSH
13404: LD_INT 28
13406: PUSH
13407: LD_INT 29
13409: PUSH
13410: LD_INT 30
13412: PUSH
13413: LD_INT 31
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: LD_INT 33
13421: PUSH
13422: LD_INT 34
13424: PUSH
13425: LD_INT 35
13427: PUSH
13428: LD_INT 36
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 104
13480: PUSH
13481: LD_INT 105
13483: PUSH
13484: LD_INT 106
13486: PUSH
13487: LD_INT 107
13489: PUSH
13490: LD_INT 108
13492: PUSH
13493: LD_INT 109
13495: PUSH
13496: LD_INT 110
13498: PUSH
13499: LD_INT 111
13501: PUSH
13502: LD_INT 112
13504: PUSH
13505: LD_INT 113
13507: PUSH
13508: LD_INT 114
13510: PUSH
13511: LD_INT 115
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: ST_TO_ADDR
// if result then
13535: LD_VAR 0 1
13539: IFFALSE 13828
// begin normal :=  ;
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_STRING 
13548: ST_TO_ADDR
// hardcore :=  ;
13549: LD_ADDR_VAR 0 4
13553: PUSH
13554: LD_STRING 
13556: ST_TO_ADDR
// for i = 1 to normalCounter do
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_EXP 27
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13674
// begin tmp := 0 ;
13575: LD_ADDR_VAR 0 2
13579: PUSH
13580: LD_STRING 0
13582: ST_TO_ADDR
// if result [ 1 ] then
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: IFFALSE 13656
// if result [ 1 ] [ 1 ] = i then
13593: LD_VAR 0 1
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PUSH
13606: LD_VAR 0 5
13610: EQUAL
13611: IFFALSE 13656
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
// tmp := 1 ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_STRING 1
13655: ST_TO_ADDR
// end ; normal := normal & tmp ;
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_VAR 0 2
13670: STR
13671: ST_TO_ADDR
// end ;
13672: GO 13572
13674: POP
13675: POP
// for i = 1 to hardcoreCounter do
13676: LD_ADDR_VAR 0 5
13680: PUSH
13681: DOUBLE
13682: LD_INT 1
13684: DEC
13685: ST_TO_ADDR
13686: LD_EXP 28
13690: PUSH
13691: FOR_TO
13692: IFFALSE 13797
// begin tmp := 0 ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_STRING 0
13701: ST_TO_ADDR
// if result [ 2 ] then
13702: LD_VAR 0 1
13706: PUSH
13707: LD_INT 2
13709: ARRAY
13710: IFFALSE 13779
// if result [ 2 ] [ 1 ] = 100 + i then
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 2
13719: ARRAY
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PUSH
13725: LD_INT 100
13727: PUSH
13728: LD_VAR 0 5
13732: PLUS
13733: EQUAL
13734: IFFALSE 13779
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13736: LD_ADDR_VAR 0 1
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: LD_VAR 0 1
13753: PUSH
13754: LD_INT 2
13756: ARRAY
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// tmp := 1 ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_STRING 1
13778: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13779: LD_ADDR_VAR 0 4
13783: PUSH
13784: LD_VAR 0 4
13788: PUSH
13789: LD_VAR 0 2
13793: STR
13794: ST_TO_ADDR
// end ;
13795: GO 13691
13797: POP
13798: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13799: LD_STRING getStreamItemsFromMission("
13801: PUSH
13802: LD_VAR 0 3
13806: STR
13807: PUSH
13808: LD_STRING ","
13810: STR
13811: PUSH
13812: LD_VAR 0 4
13816: STR
13817: PUSH
13818: LD_STRING ")
13820: STR
13821: PPUSH
13822: CALL_OW 559
// end else
13826: GO 13835
// ToLua ( getStreamItemsFromMission("","") ) ;
13828: LD_STRING getStreamItemsFromMission("","")
13830: PPUSH
13831: CALL_OW 559
// end ;
13835: LD_VAR 0 1
13839: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 100
13847: EQUAL
13848: IFFALSE 14797
// begin if not StreamModeActive then
13850: LD_EXP 26
13854: NOT
13855: IFFALSE 13865
// StreamModeActive := true ;
13857: LD_ADDR_EXP 26
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// if p3 = 0 then
13865: LD_VAR 0 3
13869: PUSH
13870: LD_INT 0
13872: EQUAL
13873: IFFALSE 13879
// InitStreamMode ;
13875: CALL 9918 0 0
// if p3 = 1 then
13879: LD_VAR 0 3
13883: PUSH
13884: LD_INT 1
13886: EQUAL
13887: IFFALSE 13897
// sRocket := true ;
13889: LD_ADDR_EXP 31
13893: PUSH
13894: LD_INT 1
13896: ST_TO_ADDR
// if p3 = 2 then
13897: LD_VAR 0 3
13901: PUSH
13902: LD_INT 2
13904: EQUAL
13905: IFFALSE 13915
// sSpeed := true ;
13907: LD_ADDR_EXP 30
13911: PUSH
13912: LD_INT 1
13914: ST_TO_ADDR
// if p3 = 3 then
13915: LD_VAR 0 3
13919: PUSH
13920: LD_INT 3
13922: EQUAL
13923: IFFALSE 13933
// sEngine := true ;
13925: LD_ADDR_EXP 32
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// if p3 = 4 then
13933: LD_VAR 0 3
13937: PUSH
13938: LD_INT 4
13940: EQUAL
13941: IFFALSE 13951
// sSpec := true ;
13943: LD_ADDR_EXP 29
13947: PUSH
13948: LD_INT 1
13950: ST_TO_ADDR
// if p3 = 5 then
13951: LD_VAR 0 3
13955: PUSH
13956: LD_INT 5
13958: EQUAL
13959: IFFALSE 13969
// sLevel := true ;
13961: LD_ADDR_EXP 33
13965: PUSH
13966: LD_INT 1
13968: ST_TO_ADDR
// if p3 = 6 then
13969: LD_VAR 0 3
13973: PUSH
13974: LD_INT 6
13976: EQUAL
13977: IFFALSE 13987
// sArmoury := true ;
13979: LD_ADDR_EXP 34
13983: PUSH
13984: LD_INT 1
13986: ST_TO_ADDR
// if p3 = 7 then
13987: LD_VAR 0 3
13991: PUSH
13992: LD_INT 7
13994: EQUAL
13995: IFFALSE 14005
// sRadar := true ;
13997: LD_ADDR_EXP 35
14001: PUSH
14002: LD_INT 1
14004: ST_TO_ADDR
// if p3 = 8 then
14005: LD_VAR 0 3
14009: PUSH
14010: LD_INT 8
14012: EQUAL
14013: IFFALSE 14023
// sBunker := true ;
14015: LD_ADDR_EXP 36
14019: PUSH
14020: LD_INT 1
14022: ST_TO_ADDR
// if p3 = 9 then
14023: LD_VAR 0 3
14027: PUSH
14028: LD_INT 9
14030: EQUAL
14031: IFFALSE 14041
// sHack := true ;
14033: LD_ADDR_EXP 37
14037: PUSH
14038: LD_INT 1
14040: ST_TO_ADDR
// if p3 = 10 then
14041: LD_VAR 0 3
14045: PUSH
14046: LD_INT 10
14048: EQUAL
14049: IFFALSE 14059
// sFire := true ;
14051: LD_ADDR_EXP 38
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// if p3 = 11 then
14059: LD_VAR 0 3
14063: PUSH
14064: LD_INT 11
14066: EQUAL
14067: IFFALSE 14077
// sRefresh := true ;
14069: LD_ADDR_EXP 39
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// if p3 = 12 then
14077: LD_VAR 0 3
14081: PUSH
14082: LD_INT 12
14084: EQUAL
14085: IFFALSE 14095
// sExp := true ;
14087: LD_ADDR_EXP 40
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// if p3 = 13 then
14095: LD_VAR 0 3
14099: PUSH
14100: LD_INT 13
14102: EQUAL
14103: IFFALSE 14113
// sDepot := true ;
14105: LD_ADDR_EXP 41
14109: PUSH
14110: LD_INT 1
14112: ST_TO_ADDR
// if p3 = 14 then
14113: LD_VAR 0 3
14117: PUSH
14118: LD_INT 14
14120: EQUAL
14121: IFFALSE 14131
// sFlag := true ;
14123: LD_ADDR_EXP 42
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// if p3 = 15 then
14131: LD_VAR 0 3
14135: PUSH
14136: LD_INT 15
14138: EQUAL
14139: IFFALSE 14149
// sKamikadze := true ;
14141: LD_ADDR_EXP 50
14145: PUSH
14146: LD_INT 1
14148: ST_TO_ADDR
// if p3 = 16 then
14149: LD_VAR 0 3
14153: PUSH
14154: LD_INT 16
14156: EQUAL
14157: IFFALSE 14167
// sTroll := true ;
14159: LD_ADDR_EXP 51
14163: PUSH
14164: LD_INT 1
14166: ST_TO_ADDR
// if p3 = 17 then
14167: LD_VAR 0 3
14171: PUSH
14172: LD_INT 17
14174: EQUAL
14175: IFFALSE 14185
// sSlow := true ;
14177: LD_ADDR_EXP 52
14181: PUSH
14182: LD_INT 1
14184: ST_TO_ADDR
// if p3 = 18 then
14185: LD_VAR 0 3
14189: PUSH
14190: LD_INT 18
14192: EQUAL
14193: IFFALSE 14203
// sLack := true ;
14195: LD_ADDR_EXP 53
14199: PUSH
14200: LD_INT 1
14202: ST_TO_ADDR
// if p3 = 19 then
14203: LD_VAR 0 3
14207: PUSH
14208: LD_INT 19
14210: EQUAL
14211: IFFALSE 14221
// sTank := true ;
14213: LD_ADDR_EXP 55
14217: PUSH
14218: LD_INT 1
14220: ST_TO_ADDR
// if p3 = 20 then
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 20
14228: EQUAL
14229: IFFALSE 14239
// sRemote := true ;
14231: LD_ADDR_EXP 56
14235: PUSH
14236: LD_INT 1
14238: ST_TO_ADDR
// if p3 = 21 then
14239: LD_VAR 0 3
14243: PUSH
14244: LD_INT 21
14246: EQUAL
14247: IFFALSE 14257
// sPowell := true ;
14249: LD_ADDR_EXP 57
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// if p3 = 22 then
14257: LD_VAR 0 3
14261: PUSH
14262: LD_INT 22
14264: EQUAL
14265: IFFALSE 14275
// sTeleport := true ;
14267: LD_ADDR_EXP 60
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// if p3 = 23 then
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 23
14282: EQUAL
14283: IFFALSE 14293
// sOilTower := true ;
14285: LD_ADDR_EXP 62
14289: PUSH
14290: LD_INT 1
14292: ST_TO_ADDR
// if p3 = 24 then
14293: LD_VAR 0 3
14297: PUSH
14298: LD_INT 24
14300: EQUAL
14301: IFFALSE 14311
// sShovel := true ;
14303: LD_ADDR_EXP 63
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// if p3 = 25 then
14311: LD_VAR 0 3
14315: PUSH
14316: LD_INT 25
14318: EQUAL
14319: IFFALSE 14329
// sSheik := true ;
14321: LD_ADDR_EXP 64
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// if p3 = 26 then
14329: LD_VAR 0 3
14333: PUSH
14334: LD_INT 26
14336: EQUAL
14337: IFFALSE 14347
// sEarthquake := true ;
14339: LD_ADDR_EXP 66
14343: PUSH
14344: LD_INT 1
14346: ST_TO_ADDR
// if p3 = 27 then
14347: LD_VAR 0 3
14351: PUSH
14352: LD_INT 27
14354: EQUAL
14355: IFFALSE 14365
// sAI := true ;
14357: LD_ADDR_EXP 67
14361: PUSH
14362: LD_INT 1
14364: ST_TO_ADDR
// if p3 = 28 then
14365: LD_VAR 0 3
14369: PUSH
14370: LD_INT 28
14372: EQUAL
14373: IFFALSE 14383
// sCargo := true ;
14375: LD_ADDR_EXP 70
14379: PUSH
14380: LD_INT 1
14382: ST_TO_ADDR
// if p3 = 29 then
14383: LD_VAR 0 3
14387: PUSH
14388: LD_INT 29
14390: EQUAL
14391: IFFALSE 14401
// sDLaser := true ;
14393: LD_ADDR_EXP 71
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// if p3 = 30 then
14401: LD_VAR 0 3
14405: PUSH
14406: LD_INT 30
14408: EQUAL
14409: IFFALSE 14419
// sExchange := true ;
14411: LD_ADDR_EXP 72
14415: PUSH
14416: LD_INT 1
14418: ST_TO_ADDR
// if p3 = 31 then
14419: LD_VAR 0 3
14423: PUSH
14424: LD_INT 31
14426: EQUAL
14427: IFFALSE 14437
// sFac := true ;
14429: LD_ADDR_EXP 73
14433: PUSH
14434: LD_INT 1
14436: ST_TO_ADDR
// if p3 = 32 then
14437: LD_VAR 0 3
14441: PUSH
14442: LD_INT 32
14444: EQUAL
14445: IFFALSE 14455
// sPower := true ;
14447: LD_ADDR_EXP 74
14451: PUSH
14452: LD_INT 1
14454: ST_TO_ADDR
// if p3 = 33 then
14455: LD_VAR 0 3
14459: PUSH
14460: LD_INT 33
14462: EQUAL
14463: IFFALSE 14473
// sRandom := true ;
14465: LD_ADDR_EXP 75
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// if p3 = 34 then
14473: LD_VAR 0 3
14477: PUSH
14478: LD_INT 34
14480: EQUAL
14481: IFFALSE 14491
// sShield := true ;
14483: LD_ADDR_EXP 76
14487: PUSH
14488: LD_INT 1
14490: ST_TO_ADDR
// if p3 = 35 then
14491: LD_VAR 0 3
14495: PUSH
14496: LD_INT 35
14498: EQUAL
14499: IFFALSE 14509
// sTime := true ;
14501: LD_ADDR_EXP 77
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// if p3 = 36 then
14509: LD_VAR 0 3
14513: PUSH
14514: LD_INT 36
14516: EQUAL
14517: IFFALSE 14527
// sTools := true ;
14519: LD_ADDR_EXP 78
14523: PUSH
14524: LD_INT 1
14526: ST_TO_ADDR
// if p3 = 101 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 101
14534: EQUAL
14535: IFFALSE 14545
// sSold := true ;
14537: LD_ADDR_EXP 43
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// if p3 = 102 then
14545: LD_VAR 0 3
14549: PUSH
14550: LD_INT 102
14552: EQUAL
14553: IFFALSE 14563
// sDiff := true ;
14555: LD_ADDR_EXP 44
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// if p3 = 103 then
14563: LD_VAR 0 3
14567: PUSH
14568: LD_INT 103
14570: EQUAL
14571: IFFALSE 14581
// sFog := true ;
14573: LD_ADDR_EXP 47
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// if p3 = 104 then
14581: LD_VAR 0 3
14585: PUSH
14586: LD_INT 104
14588: EQUAL
14589: IFFALSE 14599
// sReset := true ;
14591: LD_ADDR_EXP 48
14595: PUSH
14596: LD_INT 1
14598: ST_TO_ADDR
// if p3 = 105 then
14599: LD_VAR 0 3
14603: PUSH
14604: LD_INT 105
14606: EQUAL
14607: IFFALSE 14617
// sSun := true ;
14609: LD_ADDR_EXP 49
14613: PUSH
14614: LD_INT 1
14616: ST_TO_ADDR
// if p3 = 106 then
14617: LD_VAR 0 3
14621: PUSH
14622: LD_INT 106
14624: EQUAL
14625: IFFALSE 14635
// sTiger := true ;
14627: LD_ADDR_EXP 45
14631: PUSH
14632: LD_INT 1
14634: ST_TO_ADDR
// if p3 = 107 then
14635: LD_VAR 0 3
14639: PUSH
14640: LD_INT 107
14642: EQUAL
14643: IFFALSE 14653
// sBomb := true ;
14645: LD_ADDR_EXP 46
14649: PUSH
14650: LD_INT 1
14652: ST_TO_ADDR
// if p3 = 108 then
14653: LD_VAR 0 3
14657: PUSH
14658: LD_INT 108
14660: EQUAL
14661: IFFALSE 14671
// sWound := true ;
14663: LD_ADDR_EXP 54
14667: PUSH
14668: LD_INT 1
14670: ST_TO_ADDR
// if p3 = 109 then
14671: LD_VAR 0 3
14675: PUSH
14676: LD_INT 109
14678: EQUAL
14679: IFFALSE 14689
// sBetray := true ;
14681: LD_ADDR_EXP 58
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// if p3 = 110 then
14689: LD_VAR 0 3
14693: PUSH
14694: LD_INT 110
14696: EQUAL
14697: IFFALSE 14707
// sContamin := true ;
14699: LD_ADDR_EXP 59
14703: PUSH
14704: LD_INT 1
14706: ST_TO_ADDR
// if p3 = 111 then
14707: LD_VAR 0 3
14711: PUSH
14712: LD_INT 111
14714: EQUAL
14715: IFFALSE 14725
// sOil := true ;
14717: LD_ADDR_EXP 61
14721: PUSH
14722: LD_INT 1
14724: ST_TO_ADDR
// if p3 = 112 then
14725: LD_VAR 0 3
14729: PUSH
14730: LD_INT 112
14732: EQUAL
14733: IFFALSE 14743
// sStu := true ;
14735: LD_ADDR_EXP 65
14739: PUSH
14740: LD_INT 1
14742: ST_TO_ADDR
// if p3 = 113 then
14743: LD_VAR 0 3
14747: PUSH
14748: LD_INT 113
14750: EQUAL
14751: IFFALSE 14761
// sBazooka := true ;
14753: LD_ADDR_EXP 68
14757: PUSH
14758: LD_INT 1
14760: ST_TO_ADDR
// if p3 = 114 then
14761: LD_VAR 0 3
14765: PUSH
14766: LD_INT 114
14768: EQUAL
14769: IFFALSE 14779
// sMortar := true ;
14771: LD_ADDR_EXP 69
14775: PUSH
14776: LD_INT 1
14778: ST_TO_ADDR
// if p3 = 115 then
14779: LD_VAR 0 3
14783: PUSH
14784: LD_INT 115
14786: EQUAL
14787: IFFALSE 14797
// sRanger := true ;
14789: LD_ADDR_EXP 79
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// end ; end ;
14797: PPOPN 6
14799: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14800: LD_EXP 26
14804: PUSH
14805: LD_EXP 31
14809: AND
14810: IFFALSE 14934
14812: GO 14814
14814: DISABLE
14815: LD_INT 0
14817: PPUSH
14818: PPUSH
// begin enable ;
14819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: LD_INT 22
14827: PUSH
14828: LD_OWVAR 2
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 2
14839: PUSH
14840: LD_INT 34
14842: PUSH
14843: LD_INT 7
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 34
14852: PUSH
14853: LD_INT 45
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 34
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 34
14872: PUSH
14873: LD_INT 47
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 2
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14934
// for i in tmp do
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_VAR 0 2
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14932
// begin SetLives ( i , 0 ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 234
// end ;
14930: GO 14915
14932: POP
14933: POP
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14937: LD_EXP 26
14941: PUSH
14942: LD_EXP 32
14946: AND
14947: IFFALSE 15031
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
// begin enable ;
14956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_OWVAR 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 32
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// if not tmp then
14993: LD_VAR 0 2
14997: NOT
14998: IFFALSE 15002
// exit ;
15000: GO 15031
// for i in tmp do
15002: LD_ADDR_VAR 0 1
15006: PUSH
15007: LD_VAR 0 2
15011: PUSH
15012: FOR_IN
15013: IFFALSE 15029
// begin SetLives ( i , 0 ) ;
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_INT 0
15022: PPUSH
15023: CALL_OW 234
// end ;
15027: GO 15012
15029: POP
15030: POP
// end ;
15031: PPOPN 2
15033: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15034: LD_EXP 26
15038: PUSH
15039: LD_EXP 29
15043: AND
15044: IFFALSE 15137
15046: GO 15048
15048: DISABLE
15049: LD_INT 0
15051: PPUSH
// begin enable ;
15052: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15053: LD_ADDR_VAR 0 1
15057: PUSH
15058: LD_INT 22
15060: PUSH
15061: LD_OWVAR 2
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 25
15075: PUSH
15076: LD_INT 5
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 25
15085: PUSH
15086: LD_INT 9
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 25
15095: PUSH
15096: LD_INT 8
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: FOR_IN
15119: IFFALSE 15135
// begin SetClass ( i , 1 ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 336
// end ;
15133: GO 15118
15135: POP
15136: POP
// end ;
15137: PPOPN 1
15139: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15140: LD_EXP 26
15144: PUSH
15145: LD_EXP 30
15149: AND
15150: PUSH
15151: LD_OWVAR 65
15155: PUSH
15156: LD_INT 7
15158: LESS
15159: AND
15160: IFFALSE 15174
15162: GO 15164
15164: DISABLE
// begin enable ;
15165: ENABLE
// game_speed := 7 ;
15166: LD_ADDR_OWVAR 65
15170: PUSH
15171: LD_INT 7
15173: ST_TO_ADDR
// end ;
15174: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15175: LD_EXP 26
15179: PUSH
15180: LD_EXP 33
15184: AND
15185: IFFALSE 15387
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 81
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15387
// if tmp > 5 then
15240: LD_VAR 0 3
15244: PUSH
15245: LD_INT 5
15247: GREATER
15248: IFFALSE 15260
// k := 5 else
15250: LD_ADDR_VAR 0 2
15254: PUSH
15255: LD_INT 5
15257: ST_TO_ADDR
15258: GO 15270
// k := tmp ;
15260: LD_ADDR_VAR 0 2
15264: PUSH
15265: LD_VAR 0 3
15269: ST_TO_ADDR
// for i := 1 to k do
15270: LD_ADDR_VAR 0 1
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15385
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15288: LD_VAR 0 3
15292: PUSH
15293: LD_VAR 0 1
15297: ARRAY
15298: PPUSH
15299: LD_VAR 0 1
15303: PUSH
15304: LD_INT 4
15306: MOD
15307: PUSH
15308: LD_INT 1
15310: PLUS
15311: PPUSH
15312: CALL_OW 259
15316: PUSH
15317: LD_INT 10
15319: LESS
15320: IFFALSE 15383
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15322: LD_VAR 0 3
15326: PUSH
15327: LD_VAR 0 1
15331: ARRAY
15332: PPUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 4
15340: MOD
15341: PUSH
15342: LD_INT 1
15344: PLUS
15345: PPUSH
15346: LD_VAR 0 3
15350: PUSH
15351: LD_VAR 0 1
15355: ARRAY
15356: PPUSH
15357: LD_VAR 0 1
15361: PUSH
15362: LD_INT 4
15364: MOD
15365: PUSH
15366: LD_INT 1
15368: PLUS
15369: PPUSH
15370: CALL_OW 259
15374: PUSH
15375: LD_INT 1
15377: PLUS
15378: PPUSH
15379: CALL_OW 237
15383: GO 15285
15385: POP
15386: POP
// end ;
15387: PPOPN 3
15389: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15390: LD_EXP 26
15394: PUSH
15395: LD_EXP 34
15399: AND
15400: IFFALSE 15420
15402: GO 15404
15404: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15405: LD_INT 4
15407: PPUSH
15408: LD_OWVAR 2
15412: PPUSH
15413: LD_INT 0
15415: PPUSH
15416: CALL_OW 324
15420: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15421: LD_EXP 26
15425: PUSH
15426: LD_EXP 63
15430: AND
15431: IFFALSE 15451
15433: GO 15435
15435: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15436: LD_INT 19
15438: PPUSH
15439: LD_OWVAR 2
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 324
15451: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15452: LD_EXP 26
15456: PUSH
15457: LD_EXP 35
15461: AND
15462: IFFALSE 15564
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// begin enable ;
15471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_OWVAR 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: LD_INT 34
15494: PUSH
15495: LD_INT 11
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 34
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: ST_TO_ADDR
// if not tmp then
15526: LD_VAR 0 2
15530: NOT
15531: IFFALSE 15535
// exit ;
15533: GO 15564
// for i in tmp do
15535: LD_ADDR_VAR 0 1
15539: PUSH
15540: LD_VAR 0 2
15544: PUSH
15545: FOR_IN
15546: IFFALSE 15562
// begin SetLives ( i , 0 ) ;
15548: LD_VAR 0 1
15552: PPUSH
15553: LD_INT 0
15555: PPUSH
15556: CALL_OW 234
// end ;
15560: GO 15545
15562: POP
15563: POP
// end ;
15564: PPOPN 2
15566: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15567: LD_EXP 26
15571: PUSH
15572: LD_EXP 36
15576: AND
15577: IFFALSE 15597
15579: GO 15581
15581: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15582: LD_INT 32
15584: PPUSH
15585: LD_OWVAR 2
15589: PPUSH
15590: LD_INT 0
15592: PPUSH
15593: CALL_OW 324
15597: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15598: LD_EXP 26
15602: PUSH
15603: LD_EXP 37
15607: AND
15608: IFFALSE 15789
15610: GO 15612
15612: DISABLE
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_OWVAR 2
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 33
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: ST_TO_ADDR
// if not tmp then
15654: LD_VAR 0 2
15658: NOT
15659: IFFALSE 15663
// exit ;
15661: GO 15789
// side := 0 ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_INT 0
15670: ST_TO_ADDR
// for i := 1 to 8 do
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: DOUBLE
15677: LD_INT 1
15679: DEC
15680: ST_TO_ADDR
15681: LD_INT 8
15683: PUSH
15684: FOR_TO
15685: IFFALSE 15733
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15687: LD_OWVAR 2
15691: PUSH
15692: LD_VAR 0 1
15696: NONEQUAL
15697: PUSH
15698: LD_OWVAR 2
15702: PPUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 81
15712: PUSH
15713: LD_INT 2
15715: EQUAL
15716: AND
15717: IFFALSE 15731
// begin side := i ;
15719: LD_ADDR_VAR 0 3
15723: PUSH
15724: LD_VAR 0 1
15728: ST_TO_ADDR
// break ;
15729: GO 15733
// end ;
15731: GO 15684
15733: POP
15734: POP
// if not side then
15735: LD_VAR 0 3
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15789
// for i := 1 to tmp do
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: DOUBLE
15750: LD_INT 1
15752: DEC
15753: ST_TO_ADDR
15754: LD_VAR 0 2
15758: PUSH
15759: FOR_TO
15760: IFFALSE 15787
// if Prob ( 60 ) then
15762: LD_INT 60
15764: PPUSH
15765: CALL_OW 13
15769: IFFALSE 15785
// SetSide ( i , side ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: CALL_OW 235
15785: GO 15759
15787: POP
15788: POP
// end ;
15789: PPOPN 3
15791: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15792: LD_EXP 26
15796: PUSH
15797: LD_EXP 39
15801: AND
15802: IFFALSE 15921
15804: GO 15806
15806: DISABLE
15807: LD_INT 0
15809: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15810: LD_ADDR_VAR 0 1
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_OWVAR 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 3
15839: PUSH
15840: LD_INT 23
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: PPUSH
15859: CALL_OW 69
15863: PUSH
15864: FOR_IN
15865: IFFALSE 15919
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 257
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 3
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: IN
15895: IFFALSE 15917
// SetClass ( un , rand ( 1 , 4 ) ) ;
15897: LD_VAR 0 1
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: LD_INT 4
15907: PPUSH
15908: CALL_OW 12
15912: PPUSH
15913: CALL_OW 336
15917: GO 15864
15919: POP
15920: POP
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15924: LD_EXP 26
15928: PUSH
15929: LD_EXP 38
15933: AND
15934: IFFALSE 16013
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 100
16008: PPUSH
16009: CALL_OW 234
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16016: LD_EXP 26
16020: PUSH
16021: LD_EXP 40
16025: AND
16026: IFFALSE 16124
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16034: LD_ADDR_VAR 0 1
16038: PUSH
16039: LD_INT 22
16041: PUSH
16042: LD_OWVAR 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 21
16053: PUSH
16054: LD_INT 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if not tmp then
16070: LD_VAR 0 1
16074: NOT
16075: IFFALSE 16079
// exit ;
16077: GO 16124
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16079: LD_VAR 0 1
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 12
16096: ARRAY
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: LD_INT 4
16103: PPUSH
16104: CALL_OW 12
16108: PPUSH
16109: LD_INT 3000
16111: PPUSH
16112: LD_INT 9000
16114: PPUSH
16115: CALL_OW 12
16119: PPUSH
16120: CALL_OW 492
// end ;
16124: PPOPN 1
16126: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16127: LD_EXP 26
16131: PUSH
16132: LD_EXP 41
16136: AND
16137: IFFALSE 16157
16139: GO 16141
16141: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16142: LD_INT 1
16144: PPUSH
16145: LD_OWVAR 2
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: CALL_OW 324
16157: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16158: LD_EXP 26
16162: PUSH
16163: LD_EXP 42
16167: AND
16168: IFFALSE 16251
16170: GO 16172
16172: DISABLE
16173: LD_INT 0
16175: PPUSH
16176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 21
16196: PUSH
16197: LD_INT 3
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 2
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16251
// for i in tmp do
16222: LD_ADDR_VAR 0 1
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: FOR_IN
16233: IFFALSE 16249
// SetBLevel ( i , 10 ) ;
16235: LD_VAR 0 1
16239: PPUSH
16240: LD_INT 10
16242: PPUSH
16243: CALL_OW 241
16247: GO 16232
16249: POP
16250: POP
// end ;
16251: PPOPN 2
16253: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16254: LD_EXP 26
16258: PUSH
16259: LD_EXP 43
16263: AND
16264: IFFALSE 16375
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
16273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_OWVAR 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 25
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: ST_TO_ADDR
// if not tmp then
16310: LD_VAR 0 3
16314: NOT
16315: IFFALSE 16319
// exit ;
16317: GO 16375
// un := tmp [ rand ( 1 , tmp ) ] ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_VAR 0 3
16328: PUSH
16329: LD_INT 1
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 12
16341: ARRAY
16342: ST_TO_ADDR
// if Crawls ( un ) then
16343: LD_VAR 0 2
16347: PPUSH
16348: CALL_OW 318
16352: IFFALSE 16363
// ComWalk ( un ) ;
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16363: LD_VAR 0 2
16367: PPUSH
16368: LD_INT 5
16370: PPUSH
16371: CALL_OW 336
// end ;
16375: PPOPN 3
16377: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16378: LD_EXP 26
16382: PUSH
16383: LD_EXP 44
16387: AND
16388: PUSH
16389: LD_OWVAR 67
16393: PUSH
16394: LD_INT 3
16396: LESS
16397: AND
16398: IFFALSE 16417
16400: GO 16402
16402: DISABLE
// Difficulty := Difficulty + 1 ;
16403: LD_ADDR_OWVAR 67
16407: PUSH
16408: LD_OWVAR 67
16412: PUSH
16413: LD_INT 1
16415: PLUS
16416: ST_TO_ADDR
16417: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16418: LD_EXP 26
16422: PUSH
16423: LD_EXP 45
16427: AND
16428: IFFALSE 16531
16430: GO 16432
16432: DISABLE
16433: LD_INT 0
16435: PPUSH
// begin for i := 1 to 5 do
16436: LD_ADDR_VAR 0 1
16440: PUSH
16441: DOUBLE
16442: LD_INT 1
16444: DEC
16445: ST_TO_ADDR
16446: LD_INT 5
16448: PUSH
16449: FOR_TO
16450: IFFALSE 16529
// begin uc_nation := nation_nature ;
16452: LD_ADDR_OWVAR 21
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// uc_side := 0 ;
16460: LD_ADDR_OWVAR 20
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16468: LD_ADDR_OWVAR 29
16472: PUSH
16473: LD_INT 12
16475: PUSH
16476: LD_INT 12
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: ST_TO_ADDR
// hc_agressivity := 20 ;
16483: LD_ADDR_OWVAR 35
16487: PUSH
16488: LD_INT 20
16490: ST_TO_ADDR
// hc_class := class_tiger ;
16491: LD_ADDR_OWVAR 28
16495: PUSH
16496: LD_INT 14
16498: ST_TO_ADDR
// hc_gallery :=  ;
16499: LD_ADDR_OWVAR 33
16503: PUSH
16504: LD_STRING 
16506: ST_TO_ADDR
// hc_name :=  ;
16507: LD_ADDR_OWVAR 26
16511: PUSH
16512: LD_STRING 
16514: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16515: CALL_OW 44
16519: PPUSH
16520: LD_INT 0
16522: PPUSH
16523: CALL_OW 51
// end ;
16527: GO 16449
16529: POP
16530: POP
// end ;
16531: PPOPN 1
16533: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16534: LD_EXP 26
16538: PUSH
16539: LD_EXP 46
16543: AND
16544: IFFALSE 16553
16546: GO 16548
16548: DISABLE
// StreamSibBomb ;
16549: CALL 16554 0 0
16553: END
// export function StreamSibBomb ; var i , x , y ; begin
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
// result := false ;
16560: LD_ADDR_VAR 0 1
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// for i := 1 to 16 do
16568: LD_ADDR_VAR 0 2
16572: PUSH
16573: DOUBLE
16574: LD_INT 1
16576: DEC
16577: ST_TO_ADDR
16578: LD_INT 16
16580: PUSH
16581: FOR_TO
16582: IFFALSE 16781
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16584: LD_ADDR_VAR 0 3
16588: PUSH
16589: LD_INT 10
16591: PUSH
16592: LD_INT 20
16594: PUSH
16595: LD_INT 30
16597: PUSH
16598: LD_INT 40
16600: PUSH
16601: LD_INT 50
16603: PUSH
16604: LD_INT 60
16606: PUSH
16607: LD_INT 70
16609: PUSH
16610: LD_INT 80
16612: PUSH
16613: LD_INT 90
16615: PUSH
16616: LD_INT 100
16618: PUSH
16619: LD_INT 110
16621: PUSH
16622: LD_INT 120
16624: PUSH
16625: LD_INT 130
16627: PUSH
16628: LD_INT 140
16630: PUSH
16631: LD_INT 150
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 1
16653: PPUSH
16654: LD_INT 15
16656: PPUSH
16657: CALL_OW 12
16661: ARRAY
16662: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16663: LD_ADDR_VAR 0 4
16667: PUSH
16668: LD_INT 10
16670: PUSH
16671: LD_INT 20
16673: PUSH
16674: LD_INT 30
16676: PUSH
16677: LD_INT 40
16679: PUSH
16680: LD_INT 50
16682: PUSH
16683: LD_INT 60
16685: PUSH
16686: LD_INT 70
16688: PUSH
16689: LD_INT 80
16691: PUSH
16692: LD_INT 90
16694: PUSH
16695: LD_INT 100
16697: PUSH
16698: LD_INT 110
16700: PUSH
16701: LD_INT 120
16703: PUSH
16704: LD_INT 130
16706: PUSH
16707: LD_INT 140
16709: PUSH
16710: LD_INT 150
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 15
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: ST_TO_ADDR
// if ValidHex ( x , y ) then
16742: LD_VAR 0 3
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: CALL_OW 488
16756: IFFALSE 16779
// begin result := [ x , y ] ;
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: LD_VAR 0 3
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: ST_TO_ADDR
// break ;
16777: GO 16781
// end ; end ;
16779: GO 16581
16781: POP
16782: POP
// if result then
16783: LD_VAR 0 1
16787: IFFALSE 16847
// begin ToLua ( playSibBomb() ) ;
16789: LD_STRING playSibBomb()
16791: PPUSH
16792: CALL_OW 559
// wait ( 0 0$14 ) ;
16796: LD_INT 490
16798: PPUSH
16799: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16803: LD_VAR 0 1
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 1
16816: PUSH
16817: LD_INT 2
16819: ARRAY
16820: PPUSH
16821: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: LD_VAR 0 1
16838: PUSH
16839: LD_INT 2
16841: ARRAY
16842: PPUSH
16843: CALL_OW 429
// end ; end ;
16847: LD_VAR 0 1
16851: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16852: LD_EXP 26
16856: PUSH
16857: LD_EXP 48
16861: AND
16862: IFFALSE 16874
16864: GO 16866
16866: DISABLE
// YouLost (  ) ;
16867: LD_STRING 
16869: PPUSH
16870: CALL_OW 104
16874: END
// every 0 0$1 trigger StreamModeActive and sFog do
16875: LD_EXP 26
16879: PUSH
16880: LD_EXP 47
16884: AND
16885: IFFALSE 16899
16887: GO 16889
16889: DISABLE
// FogOff ( your_side ) ;
16890: LD_OWVAR 2
16894: PPUSH
16895: CALL_OW 344
16899: END
// every 0 0$1 trigger StreamModeActive and sSun do
16900: LD_EXP 26
16904: PUSH
16905: LD_EXP 49
16909: AND
16910: IFFALSE 16938
16912: GO 16914
16914: DISABLE
// begin solar_recharge_percent := 0 ;
16915: LD_ADDR_OWVAR 79
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16923: LD_INT 10500
16925: PPUSH
16926: CALL_OW 67
// solar_recharge_percent := 100 ;
16930: LD_ADDR_OWVAR 79
16934: PUSH
16935: LD_INT 100
16937: ST_TO_ADDR
// end ;
16938: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16939: LD_EXP 26
16943: PUSH
16944: LD_EXP 50
16948: AND
16949: IFFALSE 17188
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
16958: PPUSH
// begin tmp := [ ] ;
16959: LD_ADDR_VAR 0 3
16963: PUSH
16964: EMPTY
16965: ST_TO_ADDR
// for i := 1 to 6 do
16966: LD_ADDR_VAR 0 1
16970: PUSH
16971: DOUBLE
16972: LD_INT 1
16974: DEC
16975: ST_TO_ADDR
16976: LD_INT 6
16978: PUSH
16979: FOR_TO
16980: IFFALSE 17085
// begin uc_nation := nation_nature ;
16982: LD_ADDR_OWVAR 21
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// uc_side := 0 ;
16990: LD_ADDR_OWVAR 20
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16998: LD_ADDR_OWVAR 29
17002: PUSH
17003: LD_INT 12
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: ST_TO_ADDR
// hc_agressivity := 20 ;
17013: LD_ADDR_OWVAR 35
17017: PUSH
17018: LD_INT 20
17020: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17021: LD_ADDR_OWVAR 28
17025: PUSH
17026: LD_INT 17
17028: ST_TO_ADDR
// hc_gallery :=  ;
17029: LD_ADDR_OWVAR 33
17033: PUSH
17034: LD_STRING 
17036: ST_TO_ADDR
// hc_name :=  ;
17037: LD_ADDR_OWVAR 26
17041: PUSH
17042: LD_STRING 
17044: ST_TO_ADDR
// un := CreateHuman ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: CALL_OW 44
17054: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 51
// tmp := tmp ^ un ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_VAR 0 3
17076: PUSH
17077: LD_VAR 0 2
17081: ADD
17082: ST_TO_ADDR
// end ;
17083: GO 16979
17085: POP
17086: POP
// repeat wait ( 0 0$1 ) ;
17087: LD_INT 35
17089: PPUSH
17090: CALL_OW 67
// for un in tmp do
17094: LD_ADDR_VAR 0 2
17098: PUSH
17099: LD_VAR 0 3
17103: PUSH
17104: FOR_IN
17105: IFFALSE 17179
// begin if IsDead ( un ) then
17107: LD_VAR 0 2
17111: PPUSH
17112: CALL_OW 301
17116: IFFALSE 17136
// begin tmp := tmp diff un ;
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_VAR 0 3
17127: PUSH
17128: LD_VAR 0 2
17132: DIFF
17133: ST_TO_ADDR
// continue ;
17134: GO 17104
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17136: LD_VAR 0 2
17140: PPUSH
17141: LD_INT 3
17143: PUSH
17144: LD_INT 22
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 115
// end ;
17177: GO 17104
17179: POP
17180: POP
// until not tmp ;
17181: LD_VAR 0 3
17185: NOT
17186: IFFALSE 17087
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17191: LD_EXP 26
17195: PUSH
17196: LD_EXP 51
17200: AND
17201: IFFALSE 17255
17203: GO 17205
17205: DISABLE
// begin ToLua ( displayTroll(); ) ;
17206: LD_STRING displayTroll();
17208: PPUSH
17209: CALL_OW 559
// wait ( 3 3$00 ) ;
17213: LD_INT 6300
17215: PPUSH
17216: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17220: LD_STRING hideTroll();
17222: PPUSH
17223: CALL_OW 559
// wait ( 1 1$00 ) ;
17227: LD_INT 2100
17229: PPUSH
17230: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17234: LD_STRING displayTroll();
17236: PPUSH
17237: CALL_OW 559
// wait ( 1 1$00 ) ;
17241: LD_INT 2100
17243: PPUSH
17244: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17248: LD_STRING hideTroll();
17250: PPUSH
17251: CALL_OW 559
// end ;
17255: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17256: LD_EXP 26
17260: PUSH
17261: LD_EXP 52
17265: AND
17266: IFFALSE 17329
17268: GO 17270
17270: DISABLE
17271: LD_INT 0
17273: PPUSH
// begin p := 0 ;
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: LD_INT 0
17281: ST_TO_ADDR
// repeat game_speed := 1 ;
17282: LD_ADDR_OWVAR 65
17286: PUSH
17287: LD_INT 1
17289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17290: LD_INT 35
17292: PPUSH
17293: CALL_OW 67
// p := p + 1 ;
17297: LD_ADDR_VAR 0 1
17301: PUSH
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 1
17309: PLUS
17310: ST_TO_ADDR
// until p >= 60 ;
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 60
17318: GREATEREQUAL
17319: IFFALSE 17282
// game_speed := 4 ;
17321: LD_ADDR_OWVAR 65
17325: PUSH
17326: LD_INT 4
17328: ST_TO_ADDR
// end ;
17329: PPOPN 1
17331: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17332: LD_EXP 26
17336: PUSH
17337: LD_EXP 53
17341: AND
17342: IFFALSE 17488
17344: GO 17346
17346: DISABLE
17347: LD_INT 0
17349: PPUSH
17350: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 30
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: ST_TO_ADDR
// if not depot then
17405: LD_VAR 0 1
17409: NOT
17410: IFFALSE 17414
// exit ;
17412: GO 17488
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17414: LD_ADDR_VAR 0 2
17418: PUSH
17419: LD_VAR 0 1
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 12
17436: ARRAY
17437: PPUSH
17438: CALL_OW 274
17442: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: LD_INT 0
17453: PPUSH
17454: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17458: LD_VAR 0 2
17462: PPUSH
17463: LD_INT 2
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17473: LD_VAR 0 2
17477: PPUSH
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 0
17483: PPUSH
17484: CALL_OW 277
// end ;
17488: PPOPN 2
17490: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17491: LD_EXP 26
17495: PUSH
17496: LD_EXP 54
17500: AND
17501: IFFALSE 17598
17503: GO 17505
17505: DISABLE
17506: LD_INT 0
17508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17509: LD_ADDR_VAR 0 1
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_OWVAR 2
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 23
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PPUSH
17558: CALL_OW 69
17562: ST_TO_ADDR
// if not tmp then
17563: LD_VAR 0 1
17567: NOT
17568: IFFALSE 17572
// exit ;
17570: GO 17598
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 12
17589: ARRAY
17590: PPUSH
17591: LD_INT 200
17593: PPUSH
17594: CALL_OW 234
// end ;
17598: PPOPN 1
17600: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17601: LD_EXP 26
17605: PUSH
17606: LD_EXP 55
17610: AND
17611: IFFALSE 17690
17613: GO 17615
17615: DISABLE
17616: LD_INT 0
17618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17619: LD_ADDR_VAR 0 1
17623: PUSH
17624: LD_INT 22
17626: PUSH
17627: LD_OWVAR 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 21
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: ST_TO_ADDR
// if not tmp then
17655: LD_VAR 0 1
17659: NOT
17660: IFFALSE 17664
// exit ;
17662: GO 17690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 1
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 12
17681: ARRAY
17682: PPUSH
17683: LD_INT 60
17685: PPUSH
17686: CALL_OW 234
// end ;
17690: PPOPN 1
17692: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17693: LD_EXP 26
17697: PUSH
17698: LD_EXP 56
17702: AND
17703: IFFALSE 17802
17705: GO 17707
17707: DISABLE
17708: LD_INT 0
17710: PPUSH
17711: PPUSH
// begin enable ;
17712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_OWVAR 2
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 61
17732: PUSH
17733: EMPTY
17734: LIST
17735: PUSH
17736: LD_INT 33
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: PPUSH
17751: CALL_OW 69
17755: ST_TO_ADDR
// if not tmp then
17756: LD_VAR 0 1
17760: NOT
17761: IFFALSE 17765
// exit ;
17763: GO 17802
// for i in tmp do
17765: LD_ADDR_VAR 0 2
17769: PUSH
17770: LD_VAR 0 1
17774: PUSH
17775: FOR_IN
17776: IFFALSE 17800
// if IsControledBy ( i ) then
17778: LD_VAR 0 2
17782: PPUSH
17783: CALL_OW 312
17787: IFFALSE 17798
// ComUnlink ( i ) ;
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 136
17798: GO 17775
17800: POP
17801: POP
// end ;
17802: PPOPN 2
17804: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17805: LD_EXP 26
17809: PUSH
17810: LD_EXP 57
17814: AND
17815: IFFALSE 17955
17817: GO 17819
17819: DISABLE
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
// begin ToLua ( displayPowell(); ) ;
17824: LD_STRING displayPowell();
17826: PPUSH
17827: CALL_OW 559
// uc_side := 0 ;
17831: LD_ADDR_OWVAR 20
17835: PUSH
17836: LD_INT 0
17838: ST_TO_ADDR
// uc_nation := 2 ;
17839: LD_ADDR_OWVAR 21
17843: PUSH
17844: LD_INT 2
17846: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17847: LD_ADDR_OWVAR 37
17851: PUSH
17852: LD_INT 14
17854: ST_TO_ADDR
// vc_engine := engine_siberite ;
17855: LD_ADDR_OWVAR 39
17859: PUSH
17860: LD_INT 3
17862: ST_TO_ADDR
// vc_control := control_apeman ;
17863: LD_ADDR_OWVAR 38
17867: PUSH
17868: LD_INT 5
17870: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17871: LD_ADDR_OWVAR 40
17875: PUSH
17876: LD_INT 29
17878: ST_TO_ADDR
// un := CreateVehicle ;
17879: LD_ADDR_VAR 0 2
17883: PUSH
17884: CALL_OW 45
17888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17901: LD_INT 35
17903: PPUSH
17904: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17908: LD_VAR 0 2
17912: PPUSH
17913: LD_INT 22
17915: PUSH
17916: LD_OWVAR 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: PPUSH
17930: LD_VAR 0 2
17934: PPUSH
17935: CALL_OW 74
17939: PPUSH
17940: CALL_OW 115
// until IsDead ( un ) ;
17944: LD_VAR 0 2
17948: PPUSH
17949: CALL_OW 301
17953: IFFALSE 17901
// end ;
17955: PPOPN 2
17957: END
// every 0 0$1 trigger StreamModeActive and sStu do
17958: LD_EXP 26
17962: PUSH
17963: LD_EXP 65
17967: AND
17968: IFFALSE 17984
17970: GO 17972
17972: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17973: LD_STRING displayStucuk();
17975: PPUSH
17976: CALL_OW 559
// ResetFog ;
17980: CALL_OW 335
// end ;
17984: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17985: LD_EXP 26
17989: PUSH
17990: LD_EXP 58
17994: AND
17995: IFFALSE 18136
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
18003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18004: LD_ADDR_VAR 0 2
18008: PUSH
18009: LD_INT 22
18011: PUSH
18012: LD_OWVAR 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 21
18023: PUSH
18024: LD_INT 1
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 69
18039: ST_TO_ADDR
// if not tmp then
18040: LD_VAR 0 2
18044: NOT
18045: IFFALSE 18049
// exit ;
18047: GO 18136
// un := tmp [ rand ( 1 , tmp ) ] ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_VAR 0 2
18058: PUSH
18059: LD_INT 1
18061: PPUSH
18062: LD_VAR 0 2
18066: PPUSH
18067: CALL_OW 12
18071: ARRAY
18072: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18073: LD_VAR 0 1
18077: PPUSH
18078: LD_INT 0
18080: PPUSH
18081: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18085: LD_VAR 0 1
18089: PPUSH
18090: LD_OWVAR 3
18094: PUSH
18095: LD_VAR 0 1
18099: DIFF
18100: PPUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 74
18110: PPUSH
18111: CALL_OW 115
// wait ( 0 0$20 ) ;
18115: LD_INT 700
18117: PPUSH
18118: CALL_OW 67
// SetSide ( un , your_side ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: LD_OWVAR 2
18131: PPUSH
18132: CALL_OW 235
// end ;
18136: PPOPN 2
18138: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18139: LD_EXP 26
18143: PUSH
18144: LD_EXP 59
18148: AND
18149: IFFALSE 18255
18151: GO 18153
18153: DISABLE
18154: LD_INT 0
18156: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18157: LD_ADDR_VAR 0 1
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_OWVAR 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: LD_INT 30
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: ST_TO_ADDR
// if not depot then
18211: LD_VAR 0 1
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18255
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18220: LD_VAR 0 1
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: CALL_OW 250
18233: PPUSH
18234: LD_VAR 0 1
18238: PUSH
18239: LD_INT 1
18241: ARRAY
18242: PPUSH
18243: CALL_OW 251
18247: PPUSH
18248: LD_INT 70
18250: PPUSH
18251: CALL_OW 495
// end ;
18255: PPOPN 1
18257: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18258: LD_EXP 26
18262: PUSH
18263: LD_EXP 60
18267: AND
18268: IFFALSE 18479
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18280: LD_ADDR_VAR 0 5
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_OWVAR 2
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 21
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PPUSH
18311: CALL_OW 69
18315: ST_TO_ADDR
// if not tmp then
18316: LD_VAR 0 5
18320: NOT
18321: IFFALSE 18325
// exit ;
18323: GO 18479
// for i in tmp do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_VAR 0 5
18334: PUSH
18335: FOR_IN
18336: IFFALSE 18477
// begin d := rand ( 0 , 5 ) ;
18338: LD_ADDR_VAR 0 4
18342: PUSH
18343: LD_INT 0
18345: PPUSH
18346: LD_INT 5
18348: PPUSH
18349: CALL_OW 12
18353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18354: LD_ADDR_VAR 0 2
18358: PUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 250
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_INT 3
18376: PPUSH
18377: LD_INT 12
18379: PPUSH
18380: CALL_OW 12
18384: PPUSH
18385: CALL_OW 272
18389: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 251
18404: PPUSH
18405: LD_VAR 0 4
18409: PPUSH
18410: LD_INT 3
18412: PPUSH
18413: LD_INT 12
18415: PPUSH
18416: CALL_OW 12
18420: PPUSH
18421: CALL_OW 273
18425: ST_TO_ADDR
// if ValidHex ( x , y ) then
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: CALL_OW 488
18440: IFFALSE 18475
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_VAR 0 2
18451: PPUSH
18452: LD_VAR 0 3
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_INT 6
18462: PPUSH
18463: CALL_OW 12
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 483
// end ;
18475: GO 18335
18477: POP
18478: POP
// end ;
18479: PPOPN 5
18481: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18482: LD_EXP 26
18486: PUSH
18487: LD_EXP 61
18491: AND
18492: IFFALSE 18586
18494: GO 18496
18496: DISABLE
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_INT 22
18508: PUSH
18509: LD_OWVAR 2
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 32
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: ST_TO_ADDR
// if not tmp then
18548: LD_VAR 0 2
18552: NOT
18553: IFFALSE 18557
// exit ;
18555: GO 18586
// for i in tmp do
18557: LD_ADDR_VAR 0 1
18561: PUSH
18562: LD_VAR 0 2
18566: PUSH
18567: FOR_IN
18568: IFFALSE 18584
// SetFuel ( i , 0 ) ;
18570: LD_VAR 0 1
18574: PPUSH
18575: LD_INT 0
18577: PPUSH
18578: CALL_OW 240
18582: GO 18567
18584: POP
18585: POP
// end ;
18586: PPOPN 2
18588: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18589: LD_EXP 26
18593: PUSH
18594: LD_EXP 62
18598: AND
18599: IFFALSE 18665
18601: GO 18603
18603: DISABLE
18604: LD_INT 0
18606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18607: LD_ADDR_VAR 0 1
18611: PUSH
18612: LD_INT 22
18614: PUSH
18615: LD_OWVAR 2
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 29
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: ST_TO_ADDR
// if not tmp then
18643: LD_VAR 0 1
18647: NOT
18648: IFFALSE 18652
// exit ;
18650: GO 18665
// DestroyUnit ( tmp [ 1 ] ) ;
18652: LD_VAR 0 1
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: CALL_OW 65
// end ;
18665: PPOPN 1
18667: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18668: LD_EXP 26
18672: PUSH
18673: LD_EXP 64
18677: AND
18678: IFFALSE 18807
18680: GO 18682
18682: DISABLE
18683: LD_INT 0
18685: PPUSH
// begin uc_side := 0 ;
18686: LD_ADDR_OWVAR 20
18690: PUSH
18691: LD_INT 0
18693: ST_TO_ADDR
// uc_nation := nation_arabian ;
18694: LD_ADDR_OWVAR 21
18698: PUSH
18699: LD_INT 2
18701: ST_TO_ADDR
// hc_gallery :=  ;
18702: LD_ADDR_OWVAR 33
18706: PUSH
18707: LD_STRING 
18709: ST_TO_ADDR
// hc_name :=  ;
18710: LD_ADDR_OWVAR 26
18714: PUSH
18715: LD_STRING 
18717: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18718: LD_INT 1
18720: PPUSH
18721: LD_INT 11
18723: PPUSH
18724: LD_INT 10
18726: PPUSH
18727: CALL_OW 380
// un := CreateHuman ;
18731: LD_ADDR_VAR 0 1
18735: PUSH
18736: CALL_OW 44
18740: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18741: LD_VAR 0 1
18745: PPUSH
18746: LD_INT 1
18748: PPUSH
18749: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18753: LD_INT 35
18755: PPUSH
18756: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18760: LD_VAR 0 1
18764: PPUSH
18765: LD_INT 22
18767: PUSH
18768: LD_OWVAR 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 74
18791: PPUSH
18792: CALL_OW 115
// until IsDead ( un ) ;
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 301
18805: IFFALSE 18753
// end ;
18807: PPOPN 1
18809: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18810: LD_EXP 26
18814: PUSH
18815: LD_EXP 66
18819: AND
18820: IFFALSE 18832
18822: GO 18824
18824: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18825: LD_STRING earthquake(getX(game), 0, 32)
18827: PPUSH
18828: CALL_OW 559
18832: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18833: LD_EXP 26
18837: PUSH
18838: LD_EXP 67
18842: AND
18843: IFFALSE 18934
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
// begin enable ;
18851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18852: LD_ADDR_VAR 0 1
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_OWVAR 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 21
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 33
18881: PUSH
18882: LD_INT 3
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: PPUSH
18894: CALL_OW 69
18898: ST_TO_ADDR
// if not tmp then
18899: LD_VAR 0 1
18903: NOT
18904: IFFALSE 18908
// exit ;
18906: GO 18934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: PPUSH
18916: LD_VAR 0 1
18920: PPUSH
18921: CALL_OW 12
18925: ARRAY
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 234
// end ;
18934: PPOPN 1
18936: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18937: LD_EXP 26
18941: PUSH
18942: LD_EXP 68
18946: AND
18947: IFFALSE 19088
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
18955: PPUSH
18956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_INT 22
18964: PUSH
18965: LD_OWVAR 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 25
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: ST_TO_ADDR
// if not tmp then
18993: LD_VAR 0 3
18997: NOT
18998: IFFALSE 19002
// exit ;
19000: GO 19088
// un := tmp [ rand ( 1 , tmp ) ] ;
19002: LD_ADDR_VAR 0 2
19006: PUSH
19007: LD_VAR 0 3
19011: PUSH
19012: LD_INT 1
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 12
19024: ARRAY
19025: ST_TO_ADDR
// if Crawls ( un ) then
19026: LD_VAR 0 2
19030: PPUSH
19031: CALL_OW 318
19035: IFFALSE 19046
// ComWalk ( un ) ;
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19046: LD_VAR 0 2
19050: PPUSH
19051: LD_INT 9
19053: PPUSH
19054: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19058: LD_INT 28
19060: PPUSH
19061: LD_OWVAR 2
19065: PPUSH
19066: LD_INT 2
19068: PPUSH
19069: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19073: LD_INT 29
19075: PPUSH
19076: LD_OWVAR 2
19080: PPUSH
19081: LD_INT 2
19083: PPUSH
19084: CALL_OW 322
// end ;
19088: PPOPN 3
19090: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19091: LD_EXP 26
19095: PUSH
19096: LD_EXP 69
19100: AND
19101: IFFALSE 19212
19103: GO 19105
19105: DISABLE
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19111: LD_ADDR_VAR 0 3
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 25
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: ST_TO_ADDR
// if not tmp then
19147: LD_VAR 0 3
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19212
// un := tmp [ rand ( 1 , tmp ) ] ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: CALL_OW 12
19178: ARRAY
19179: ST_TO_ADDR
// if Crawls ( un ) then
19180: LD_VAR 0 2
19184: PPUSH
19185: CALL_OW 318
19189: IFFALSE 19200
// ComWalk ( un ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19200: LD_VAR 0 2
19204: PPUSH
19205: LD_INT 8
19207: PPUSH
19208: CALL_OW 336
// end ;
19212: PPOPN 3
19214: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19215: LD_EXP 26
19219: PUSH
19220: LD_EXP 70
19224: AND
19225: IFFALSE 19369
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: LD_INT 34
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 34
19276: PUSH
19277: LD_INT 51
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 34
19286: PUSH
19287: LD_INT 32
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 2
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19369
// for i in tmp do
19319: LD_ADDR_VAR 0 1
19323: PUSH
19324: LD_VAR 0 2
19328: PUSH
19329: FOR_IN
19330: IFFALSE 19367
// if GetCargo ( i , mat_artifact ) = 0 then
19332: LD_VAR 0 1
19336: PPUSH
19337: LD_INT 4
19339: PPUSH
19340: CALL_OW 289
19344: PUSH
19345: LD_INT 0
19347: EQUAL
19348: IFFALSE 19365
// SetCargo ( i , mat_siberit , 100 ) ;
19350: LD_VAR 0 1
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: LD_INT 100
19360: PPUSH
19361: CALL_OW 290
19365: GO 19329
19367: POP
19368: POP
// end ;
19369: PPOPN 2
19371: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19372: LD_EXP 26
19376: PUSH
19377: LD_EXP 71
19381: AND
19382: IFFALSE 19565
19384: GO 19386
19386: DISABLE
19387: LD_INT 0
19389: PPUSH
19390: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_OWVAR 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: ST_TO_ADDR
// if not tmp then
19413: LD_VAR 0 2
19417: NOT
19418: IFFALSE 19422
// exit ;
19420: GO 19565
// for i := 1 to 2 do
19422: LD_ADDR_VAR 0 1
19426: PUSH
19427: DOUBLE
19428: LD_INT 1
19430: DEC
19431: ST_TO_ADDR
19432: LD_INT 2
19434: PUSH
19435: FOR_TO
19436: IFFALSE 19563
// begin uc_side := your_side ;
19438: LD_ADDR_OWVAR 20
19442: PUSH
19443: LD_OWVAR 2
19447: ST_TO_ADDR
// uc_nation := nation_american ;
19448: LD_ADDR_OWVAR 21
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// vc_chassis := us_morphling ;
19456: LD_ADDR_OWVAR 37
19460: PUSH
19461: LD_INT 5
19463: ST_TO_ADDR
// vc_engine := engine_siberite ;
19464: LD_ADDR_OWVAR 39
19468: PUSH
19469: LD_INT 3
19471: ST_TO_ADDR
// vc_control := control_computer ;
19472: LD_ADDR_OWVAR 38
19476: PUSH
19477: LD_INT 3
19479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19480: LD_ADDR_OWVAR 40
19484: PUSH
19485: LD_INT 10
19487: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19488: LD_VAR 0 2
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: PPUSH
19497: CALL_OW 310
19501: NOT
19502: IFFALSE 19549
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19504: CALL_OW 45
19508: PPUSH
19509: LD_VAR 0 2
19513: PUSH
19514: LD_INT 1
19516: ARRAY
19517: PPUSH
19518: CALL_OW 250
19522: PPUSH
19523: LD_VAR 0 2
19527: PUSH
19528: LD_INT 1
19530: ARRAY
19531: PPUSH
19532: CALL_OW 251
19536: PPUSH
19537: LD_INT 12
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 50
19547: GO 19561
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19549: CALL_OW 45
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 51
// end ;
19561: GO 19435
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19568: LD_EXP 26
19572: PUSH
19573: LD_EXP 72
19577: AND
19578: IFFALSE 19800
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19591: LD_ADDR_VAR 0 6
19595: PUSH
19596: LD_INT 22
19598: PUSH
19599: LD_OWVAR 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 21
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_INT 23
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 6
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 19800
// s1 := rand ( 1 , 4 ) ;
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_INT 4
19664: PPUSH
19665: CALL_OW 12
19669: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19670: LD_ADDR_VAR 0 4
19674: PUSH
19675: LD_VAR 0 6
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: LD_VAR 0 2
19688: PPUSH
19689: CALL_OW 259
19693: ST_TO_ADDR
// if s1 = 1 then
19694: LD_VAR 0 2
19698: PUSH
19699: LD_INT 1
19701: EQUAL
19702: IFFALSE 19722
// s2 := rand ( 2 , 4 ) else
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_INT 2
19711: PPUSH
19712: LD_INT 4
19714: PPUSH
19715: CALL_OW 12
19719: ST_TO_ADDR
19720: GO 19730
// s2 := 1 ;
19722: LD_ADDR_VAR 0 3
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19730: LD_ADDR_VAR 0 5
19734: PUSH
19735: LD_VAR 0 6
19739: PUSH
19740: LD_INT 1
19742: ARRAY
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 259
19753: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19754: LD_VAR 0 6
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: LD_VAR 0 2
19767: PPUSH
19768: LD_VAR 0 5
19772: PPUSH
19773: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19777: LD_VAR 0 6
19781: PUSH
19782: LD_INT 1
19784: ARRAY
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: LD_VAR 0 4
19795: PPUSH
19796: CALL_OW 237
// end ;
19800: PPOPN 6
19802: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19803: LD_EXP 26
19807: PUSH
19808: LD_EXP 73
19812: AND
19813: IFFALSE 19892
19815: GO 19817
19817: DISABLE
19818: LD_INT 0
19820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19821: LD_ADDR_VAR 0 1
19825: PUSH
19826: LD_INT 22
19828: PUSH
19829: LD_OWVAR 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PPUSH
19852: CALL_OW 69
19856: ST_TO_ADDR
// if not tmp then
19857: LD_VAR 0 1
19861: NOT
19862: IFFALSE 19866
// exit ;
19864: GO 19892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19866: LD_VAR 0 1
19870: PUSH
19871: LD_INT 1
19873: PPUSH
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 12
19883: ARRAY
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 234
// end ;
19892: PPOPN 1
19894: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19895: LD_EXP 26
19899: PUSH
19900: LD_EXP 74
19904: AND
19905: IFFALSE 20017
19907: GO 19909
19909: DISABLE
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19914: LD_ADDR_VAR 0 2
19918: PUSH
19919: LD_INT 22
19921: PUSH
19922: LD_OWVAR 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 27
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: LD_INT 26
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 30
19956: PUSH
19957: LD_INT 28
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: ST_TO_ADDR
// if not tmp then
19979: LD_VAR 0 2
19983: NOT
19984: IFFALSE 19988
// exit ;
19986: GO 20017
// for i in tmp do
19988: LD_ADDR_VAR 0 1
19992: PUSH
19993: LD_VAR 0 2
19997: PUSH
19998: FOR_IN
19999: IFFALSE 20015
// SetLives ( i , 1 ) ;
20001: LD_VAR 0 1
20005: PPUSH
20006: LD_INT 1
20008: PPUSH
20009: CALL_OW 234
20013: GO 19998
20015: POP
20016: POP
// end ;
20017: PPOPN 2
20019: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20020: LD_EXP 26
20024: PUSH
20025: LD_EXP 75
20029: AND
20030: IFFALSE 20304
20032: GO 20034
20034: DISABLE
20035: LD_INT 0
20037: PPUSH
20038: PPUSH
20039: PPUSH
// begin i := rand ( 1 , 7 ) ;
20040: LD_ADDR_VAR 0 1
20044: PUSH
20045: LD_INT 1
20047: PPUSH
20048: LD_INT 7
20050: PPUSH
20051: CALL_OW 12
20055: ST_TO_ADDR
// case i of 1 :
20056: LD_VAR 0 1
20060: PUSH
20061: LD_INT 1
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20079
20069: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20070: LD_STRING earthquake(getX(game), 0, 32)
20072: PPUSH
20073: CALL_OW 559
20077: GO 20304
20079: LD_INT 2
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20101
20087: POP
// begin ToLua ( displayStucuk(); ) ;
20088: LD_STRING displayStucuk();
20090: PPUSH
20091: CALL_OW 559
// ResetFog ;
20095: CALL_OW 335
// end ; 3 :
20099: GO 20304
20101: LD_INT 3
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20213
20109: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20110: LD_ADDR_VAR 0 2
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_OWVAR 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 25
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PPUSH
20141: CALL_OW 69
20145: ST_TO_ADDR
// if not tmp then
20146: LD_VAR 0 2
20150: NOT
20151: IFFALSE 20155
// exit ;
20153: GO 20304
// un := tmp [ rand ( 1 , tmp ) ] ;
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_VAR 0 2
20164: PUSH
20165: LD_INT 1
20167: PPUSH
20168: LD_VAR 0 2
20172: PPUSH
20173: CALL_OW 12
20177: ARRAY
20178: ST_TO_ADDR
// if Crawls ( un ) then
20179: LD_VAR 0 3
20183: PPUSH
20184: CALL_OW 318
20188: IFFALSE 20199
// ComWalk ( un ) ;
20190: LD_VAR 0 3
20194: PPUSH
20195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20199: LD_VAR 0 3
20203: PPUSH
20204: LD_INT 8
20206: PPUSH
20207: CALL_OW 336
// end ; 4 :
20211: GO 20304
20213: LD_INT 4
20215: DOUBLE
20216: EQUAL
20217: IFTRUE 20221
20219: GO 20282
20221: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 30
20241: PUSH
20242: LD_INT 29
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 69
20257: ST_TO_ADDR
// if not tmp then
20258: LD_VAR 0 2
20262: NOT
20263: IFFALSE 20267
// exit ;
20265: GO 20304
// DestroyUnit ( tmp [ 1 ] ) ;
20267: LD_VAR 0 2
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: CALL_OW 65
// end ; 5 .. 7 :
20280: GO 20304
20282: LD_INT 5
20284: DOUBLE
20285: GREATEREQUAL
20286: IFFALSE 20294
20288: LD_INT 7
20290: DOUBLE
20291: LESSEQUAL
20292: IFTRUE 20296
20294: GO 20303
20296: POP
// StreamSibBomb ; end ;
20297: CALL 16554 0 0
20301: GO 20304
20303: POP
// end ;
20304: PPOPN 3
20306: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20307: LD_EXP 26
20311: PUSH
20312: LD_EXP 76
20316: AND
20317: IFFALSE 20473
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
20326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 81
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 21
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 21
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// if not tmp then
20381: LD_VAR 0 2
20385: NOT
20386: IFFALSE 20390
// exit ;
20388: GO 20473
// p := 0 ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20398: LD_INT 35
20400: PPUSH
20401: CALL_OW 67
// p := p + 1 ;
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 1
20417: PLUS
20418: ST_TO_ADDR
// for i in tmp do
20419: LD_ADDR_VAR 0 1
20423: PUSH
20424: LD_VAR 0 2
20428: PUSH
20429: FOR_IN
20430: IFFALSE 20461
// if GetLives ( i ) < 1000 then
20432: LD_VAR 0 1
20436: PPUSH
20437: CALL_OW 256
20441: PUSH
20442: LD_INT 1000
20444: LESS
20445: IFFALSE 20459
// SetLives ( i , 1000 ) ;
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_INT 1000
20454: PPUSH
20455: CALL_OW 234
20459: GO 20429
20461: POP
20462: POP
// until p > 20 ;
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 20
20470: GREATER
20471: IFFALSE 20398
// end ;
20473: PPOPN 3
20475: END
// every 0 0$1 trigger StreamModeActive and sTime do
20476: LD_EXP 26
20480: PUSH
20481: LD_EXP 77
20485: AND
20486: IFFALSE 20521
20488: GO 20490
20490: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20491: LD_INT 28
20493: PPUSH
20494: LD_OWVAR 2
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20506: LD_INT 30
20508: PPUSH
20509: LD_OWVAR 2
20513: PPUSH
20514: LD_INT 2
20516: PPUSH
20517: CALL_OW 322
// end ;
20521: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20522: LD_EXP 26
20526: PUSH
20527: LD_EXP 78
20531: AND
20532: IFFALSE 20653
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20541: LD_ADDR_VAR 0 2
20545: PUSH
20546: LD_INT 22
20548: PUSH
20549: LD_OWVAR 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 21
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 23
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: PPUSH
20590: CALL_OW 69
20594: ST_TO_ADDR
// if not tmp then
20595: LD_VAR 0 2
20599: NOT
20600: IFFALSE 20604
// exit ;
20602: GO 20653
// for i in tmp do
20604: LD_ADDR_VAR 0 1
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: FOR_IN
20615: IFFALSE 20651
// begin if Crawls ( i ) then
20617: LD_VAR 0 1
20621: PPUSH
20622: CALL_OW 318
20626: IFFALSE 20637
// ComWalk ( i ) ;
20628: LD_VAR 0 1
20632: PPUSH
20633: CALL_OW 138
// SetClass ( i , 2 ) ;
20637: LD_VAR 0 1
20641: PPUSH
20642: LD_INT 2
20644: PPUSH
20645: CALL_OW 336
// end ;
20649: GO 20614
20651: POP
20652: POP
// end ;
20653: PPOPN 2
20655: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20656: LD_EXP 26
20660: PUSH
20661: LD_EXP 79
20665: AND
20666: IFFALSE 20947
20668: GO 20670
20670: DISABLE
20671: LD_INT 0
20673: PPUSH
20674: PPUSH
20675: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20676: LD_OWVAR 2
20680: PPUSH
20681: LD_INT 9
20683: PPUSH
20684: LD_INT 1
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20694: LD_INT 9
20696: PPUSH
20697: LD_OWVAR 2
20701: PPUSH
20702: CALL_OW 343
// uc_side := 9 ;
20706: LD_ADDR_OWVAR 20
20710: PUSH
20711: LD_INT 9
20713: ST_TO_ADDR
// uc_nation := 2 ;
20714: LD_ADDR_OWVAR 21
20718: PUSH
20719: LD_INT 2
20721: ST_TO_ADDR
// hc_name := Dark Warrior ;
20722: LD_ADDR_OWVAR 26
20726: PUSH
20727: LD_STRING Dark Warrior
20729: ST_TO_ADDR
// hc_gallery :=  ;
20730: LD_ADDR_OWVAR 33
20734: PUSH
20735: LD_STRING 
20737: ST_TO_ADDR
// hc_noskilllimit := true ;
20738: LD_ADDR_OWVAR 76
20742: PUSH
20743: LD_INT 1
20745: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20746: LD_ADDR_OWVAR 31
20750: PUSH
20751: LD_INT 30
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 30
20759: PUSH
20760: LD_INT 30
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: ST_TO_ADDR
// un := CreateHuman ;
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: CALL_OW 44
20778: ST_TO_ADDR
// hc_noskilllimit := false ;
20779: LD_ADDR_OWVAR 76
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 51
// p := 0 ;
20799: LD_ADDR_VAR 0 2
20803: PUSH
20804: LD_INT 0
20806: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20807: LD_INT 35
20809: PPUSH
20810: CALL_OW 67
// p := p + 1 ;
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_VAR 0 2
20823: PUSH
20824: LD_INT 1
20826: PLUS
20827: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20828: LD_VAR 0 3
20832: PPUSH
20833: CALL_OW 256
20837: PUSH
20838: LD_INT 1000
20840: LESS
20841: IFFALSE 20855
// SetLives ( un , 1000 ) ;
20843: LD_VAR 0 3
20847: PPUSH
20848: LD_INT 1000
20850: PPUSH
20851: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20855: LD_VAR 0 3
20859: PPUSH
20860: LD_INT 81
20862: PUSH
20863: LD_OWVAR 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 91
20874: PUSH
20875: LD_VAR 0 3
20879: PUSH
20880: LD_INT 30
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: PPUSH
20897: LD_VAR 0 3
20901: PPUSH
20902: CALL_OW 74
20906: PPUSH
20907: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20911: LD_VAR 0 2
20915: PUSH
20916: LD_INT 60
20918: GREATER
20919: PUSH
20920: LD_VAR 0 3
20924: PPUSH
20925: CALL_OW 301
20929: OR
20930: IFFALSE 20807
// if un then
20932: LD_VAR 0 3
20936: IFFALSE 20947
// RemoveUnit ( un ) ;
20938: LD_VAR 0 3
20942: PPUSH
20943: CALL_OW 64
// end ; end_of_file end_of_file
20947: PPOPN 3
20949: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20956: LD_VAR 0 1
20960: PPUSH
20961: CALL_OW 264
20965: PUSH
20966: LD_EXP 90
20970: EQUAL
20971: IFFALSE 21043
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20973: LD_INT 68
20975: PPUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 255
20985: PPUSH
20986: CALL_OW 321
20990: PUSH
20991: LD_INT 2
20993: EQUAL
20994: IFFALSE 21006
// eff := 70 else
20996: LD_ADDR_VAR 0 4
21000: PUSH
21001: LD_INT 70
21003: ST_TO_ADDR
21004: GO 21014
// eff := 30 ;
21006: LD_ADDR_VAR 0 4
21010: PUSH
21011: LD_INT 30
21013: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 250
21023: PPUSH
21024: LD_VAR 0 1
21028: PPUSH
21029: CALL_OW 251
21033: PPUSH
21034: LD_VAR 0 4
21038: PPUSH
21039: CALL_OW 495
// end ; end ;
21043: LD_VAR 0 2
21047: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21048: LD_INT 0
21050: PPUSH
// end ;
21051: LD_VAR 0 4
21055: RET
// export function SOS_Command ( cmd ) ; begin
21056: LD_INT 0
21058: PPUSH
// end ;
21059: LD_VAR 0 2
21063: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21064: LD_VAR 0 1
21068: PUSH
21069: LD_INT 254
21071: EQUAL
21072: PUSH
21073: LD_VAR 0 2
21077: PPUSH
21078: CALL_OW 264
21082: PUSH
21083: LD_EXP 88
21087: EQUAL
21088: AND
21089: PUSH
21090: LD_VAR 0 3
21094: PPUSH
21095: CALL_OW 263
21099: PUSH
21100: LD_INT 3
21102: EQUAL
21103: AND
21104: IFFALSE 21120
// HackDestroyVehicle ( unit , selectedUnit ) ;
21106: LD_VAR 0 2
21110: PPUSH
21111: LD_VAR 0 3
21115: PPUSH
21116: CALL 22627 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21120: LD_VAR 0 1
21124: PUSH
21125: LD_INT 255
21127: EQUAL
21128: PUSH
21129: LD_VAR 0 2
21133: PPUSH
21134: CALL_OW 264
21138: PUSH
21139: LD_INT 14
21141: PUSH
21142: LD_INT 53
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: IN
21149: AND
21150: PUSH
21151: LD_VAR 0 4
21155: PPUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: CALL_OW 488
21165: AND
21166: IFFALSE 21190
// CutTreeXYR ( unit , x , y , 12 ) ;
21168: LD_VAR 0 2
21172: PPUSH
21173: LD_VAR 0 4
21177: PPUSH
21178: LD_VAR 0 5
21182: PPUSH
21183: LD_INT 12
21185: PPUSH
21186: CALL 21193 0 4
// end ;
21190: PPOPN 5
21192: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21193: LD_INT 0
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
21203: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21204: LD_VAR 0 1
21208: NOT
21209: PUSH
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: CALL_OW 488
21224: NOT
21225: OR
21226: PUSH
21227: LD_VAR 0 4
21231: NOT
21232: OR
21233: IFFALSE 21237
// exit ;
21235: GO 21577
// list := [ ] ;
21237: LD_ADDR_VAR 0 13
21241: PUSH
21242: EMPTY
21243: ST_TO_ADDR
// if x - r < 0 then
21244: LD_VAR 0 2
21248: PUSH
21249: LD_VAR 0 4
21253: MINUS
21254: PUSH
21255: LD_INT 0
21257: LESS
21258: IFFALSE 21270
// min_x := 0 else
21260: LD_ADDR_VAR 0 7
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
21268: GO 21286
// min_x := x - r ;
21270: LD_ADDR_VAR 0 7
21274: PUSH
21275: LD_VAR 0 2
21279: PUSH
21280: LD_VAR 0 4
21284: MINUS
21285: ST_TO_ADDR
// if y - r < 0 then
21286: LD_VAR 0 3
21290: PUSH
21291: LD_VAR 0 4
21295: MINUS
21296: PUSH
21297: LD_INT 0
21299: LESS
21300: IFFALSE 21312
// min_y := 0 else
21302: LD_ADDR_VAR 0 8
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
21310: GO 21328
// min_y := y - r ;
21312: LD_ADDR_VAR 0 8
21316: PUSH
21317: LD_VAR 0 3
21321: PUSH
21322: LD_VAR 0 4
21326: MINUS
21327: ST_TO_ADDR
// max_x := x + r ;
21328: LD_ADDR_VAR 0 9
21332: PUSH
21333: LD_VAR 0 2
21337: PUSH
21338: LD_VAR 0 4
21342: PLUS
21343: ST_TO_ADDR
// max_y := y + r ;
21344: LD_ADDR_VAR 0 10
21348: PUSH
21349: LD_VAR 0 3
21353: PUSH
21354: LD_VAR 0 4
21358: PLUS
21359: ST_TO_ADDR
// for _x = min_x to max_x do
21360: LD_ADDR_VAR 0 11
21364: PUSH
21365: DOUBLE
21366: LD_VAR 0 7
21370: DEC
21371: ST_TO_ADDR
21372: LD_VAR 0 9
21376: PUSH
21377: FOR_TO
21378: IFFALSE 21495
// for _y = min_y to max_y do
21380: LD_ADDR_VAR 0 12
21384: PUSH
21385: DOUBLE
21386: LD_VAR 0 8
21390: DEC
21391: ST_TO_ADDR
21392: LD_VAR 0 10
21396: PUSH
21397: FOR_TO
21398: IFFALSE 21491
// begin if not ValidHex ( _x , _y ) then
21400: LD_VAR 0 11
21404: PPUSH
21405: LD_VAR 0 12
21409: PPUSH
21410: CALL_OW 488
21414: NOT
21415: IFFALSE 21419
// continue ;
21417: GO 21397
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21419: LD_VAR 0 11
21423: PPUSH
21424: LD_VAR 0 12
21428: PPUSH
21429: CALL_OW 351
21433: PUSH
21434: LD_VAR 0 11
21438: PPUSH
21439: LD_VAR 0 12
21443: PPUSH
21444: CALL_OW 554
21448: AND
21449: IFFALSE 21489
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21451: LD_ADDR_VAR 0 13
21455: PUSH
21456: LD_VAR 0 13
21460: PPUSH
21461: LD_VAR 0 13
21465: PUSH
21466: LD_INT 1
21468: PLUS
21469: PPUSH
21470: LD_VAR 0 11
21474: PUSH
21475: LD_VAR 0 12
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 2
21488: ST_TO_ADDR
// end ;
21489: GO 21397
21491: POP
21492: POP
21493: GO 21377
21495: POP
21496: POP
// if not list then
21497: LD_VAR 0 13
21501: NOT
21502: IFFALSE 21506
// exit ;
21504: GO 21577
// for i in list do
21506: LD_ADDR_VAR 0 6
21510: PUSH
21511: LD_VAR 0 13
21515: PUSH
21516: FOR_IN
21517: IFFALSE 21575
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21519: LD_VAR 0 1
21523: PPUSH
21524: LD_STRING M
21526: PUSH
21527: LD_VAR 0 6
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PUSH
21536: LD_VAR 0 6
21540: PUSH
21541: LD_INT 2
21543: ARRAY
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: PPUSH
21569: CALL_OW 447
21573: GO 21516
21575: POP
21576: POP
// end ;
21577: LD_VAR 0 5
21581: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21582: LD_EXP 80
21586: NOT
21587: IFFALSE 21637
21589: GO 21591
21591: DISABLE
// begin initHack := true ;
21592: LD_ADDR_EXP 80
21596: PUSH
21597: LD_INT 1
21599: ST_TO_ADDR
// hackTanks := [ ] ;
21600: LD_ADDR_EXP 81
21604: PUSH
21605: EMPTY
21606: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21607: LD_ADDR_EXP 82
21611: PUSH
21612: EMPTY
21613: ST_TO_ADDR
// hackLimit := 3 ;
21614: LD_ADDR_EXP 83
21618: PUSH
21619: LD_INT 3
21621: ST_TO_ADDR
// hackDist := 12 ;
21622: LD_ADDR_EXP 84
21626: PUSH
21627: LD_INT 12
21629: ST_TO_ADDR
// hackCounter := [ ] ;
21630: LD_ADDR_EXP 85
21634: PUSH
21635: EMPTY
21636: ST_TO_ADDR
// end ;
21637: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21638: LD_EXP 80
21642: PUSH
21643: LD_INT 34
21645: PUSH
21646: LD_EXP 88
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: AND
21660: IFFALSE 21915
21662: GO 21664
21664: DISABLE
21665: LD_INT 0
21667: PPUSH
21668: PPUSH
// begin enable ;
21669: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21670: LD_ADDR_VAR 0 1
21674: PUSH
21675: LD_INT 34
21677: PUSH
21678: LD_EXP 88
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: PUSH
21692: FOR_IN
21693: IFFALSE 21913
// begin if not i in hackTanks then
21695: LD_VAR 0 1
21699: PUSH
21700: LD_EXP 81
21704: IN
21705: NOT
21706: IFFALSE 21789
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21708: LD_ADDR_EXP 81
21712: PUSH
21713: LD_EXP 81
21717: PPUSH
21718: LD_EXP 81
21722: PUSH
21723: LD_INT 1
21725: PLUS
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 1
21736: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21737: LD_ADDR_EXP 82
21741: PUSH
21742: LD_EXP 82
21746: PPUSH
21747: LD_EXP 82
21751: PUSH
21752: LD_INT 1
21754: PLUS
21755: PPUSH
21756: EMPTY
21757: PPUSH
21758: CALL_OW 1
21762: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21763: LD_ADDR_EXP 85
21767: PUSH
21768: LD_EXP 85
21772: PPUSH
21773: LD_EXP 85
21777: PUSH
21778: LD_INT 1
21780: PLUS
21781: PPUSH
21782: EMPTY
21783: PPUSH
21784: CALL_OW 1
21788: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 302
21798: NOT
21799: IFFALSE 21812
// begin HackUnlinkAll ( i ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL 21918 0 1
// continue ;
21810: GO 21692
// end ; HackCheckCapturedStatus ( i ) ;
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL 22361 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21821: LD_ADDR_VAR 0 2
21825: PUSH
21826: LD_INT 81
21828: PUSH
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 255
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 33
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 91
21855: PUSH
21856: LD_VAR 0 1
21860: PUSH
21861: LD_EXP 84
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 50
21873: PUSH
21874: EMPTY
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: PPUSH
21883: CALL_OW 69
21887: ST_TO_ADDR
// if not tmp then
21888: LD_VAR 0 2
21892: NOT
21893: IFFALSE 21897
// continue ;
21895: GO 21692
// HackLink ( i , tmp ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: LD_VAR 0 2
21906: PPUSH
21907: CALL 22054 0 2
// end ;
21911: GO 21692
21913: POP
21914: POP
// end ;
21915: PPOPN 2
21917: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
21922: PPUSH
// if not hack in hackTanks then
21923: LD_VAR 0 1
21927: PUSH
21928: LD_EXP 81
21932: IN
21933: NOT
21934: IFFALSE 21938
// exit ;
21936: GO 22049
// index := GetElementIndex ( hackTanks , hack ) ;
21938: LD_ADDR_VAR 0 4
21942: PUSH
21943: LD_EXP 81
21947: PPUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL 27605 0 2
21957: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21958: LD_EXP 82
21962: PUSH
21963: LD_VAR 0 4
21967: ARRAY
21968: IFFALSE 22049
// begin for i in hackTanksCaptured [ index ] do
21970: LD_ADDR_VAR 0 3
21974: PUSH
21975: LD_EXP 82
21979: PUSH
21980: LD_VAR 0 4
21984: ARRAY
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22013
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21989: LD_VAR 0 3
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: PPUSH
21998: LD_VAR 0 3
22002: PUSH
22003: LD_INT 2
22005: ARRAY
22006: PPUSH
22007: CALL_OW 235
22011: GO 21986
22013: POP
22014: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22015: LD_ADDR_EXP 82
22019: PUSH
22020: LD_EXP 82
22024: PPUSH
22025: LD_VAR 0 4
22029: PPUSH
22030: EMPTY
22031: PPUSH
22032: CALL_OW 1
22036: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_INT 0
22044: PPUSH
22045: CALL_OW 505
// end ; end ;
22049: LD_VAR 0 2
22053: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22054: LD_INT 0
22056: PPUSH
22057: PPUSH
22058: PPUSH
// if not hack in hackTanks or not vehicles then
22059: LD_VAR 0 1
22063: PUSH
22064: LD_EXP 81
22068: IN
22069: NOT
22070: PUSH
22071: LD_VAR 0 2
22075: NOT
22076: OR
22077: IFFALSE 22081
// exit ;
22079: GO 22356
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22081: LD_ADDR_VAR 0 2
22085: PUSH
22086: LD_VAR 0 1
22090: PPUSH
22091: LD_VAR 0 2
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: LD_INT 1
22101: PPUSH
22102: CALL 28255 0 4
22106: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22107: LD_ADDR_VAR 0 5
22111: PUSH
22112: LD_EXP 81
22116: PPUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: CALL 27605 0 2
22126: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22127: LD_EXP 82
22131: PUSH
22132: LD_VAR 0 5
22136: ARRAY
22137: PUSH
22138: LD_EXP 83
22142: LESS
22143: IFFALSE 22332
// begin for i := 1 to vehicles do
22145: LD_ADDR_VAR 0 4
22149: PUSH
22150: DOUBLE
22151: LD_INT 1
22153: DEC
22154: ST_TO_ADDR
22155: LD_VAR 0 2
22159: PUSH
22160: FOR_TO
22161: IFFALSE 22330
// begin if hackTanksCaptured [ index ] = hackLimit then
22163: LD_EXP 82
22167: PUSH
22168: LD_VAR 0 5
22172: ARRAY
22173: PUSH
22174: LD_EXP 83
22178: EQUAL
22179: IFFALSE 22183
// break ;
22181: GO 22330
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22183: LD_ADDR_EXP 85
22187: PUSH
22188: LD_EXP 85
22192: PPUSH
22193: LD_VAR 0 5
22197: PPUSH
22198: LD_EXP 85
22202: PUSH
22203: LD_VAR 0 5
22207: ARRAY
22208: PUSH
22209: LD_INT 1
22211: PLUS
22212: PPUSH
22213: CALL_OW 1
22217: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22218: LD_ADDR_EXP 82
22222: PUSH
22223: LD_EXP 82
22227: PPUSH
22228: LD_VAR 0 5
22232: PUSH
22233: LD_EXP 82
22237: PUSH
22238: LD_VAR 0 5
22242: ARRAY
22243: PUSH
22244: LD_INT 1
22246: PLUS
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PPUSH
22252: LD_VAR 0 2
22256: PUSH
22257: LD_VAR 0 4
22261: ARRAY
22262: PUSH
22263: LD_VAR 0 2
22267: PUSH
22268: LD_VAR 0 4
22272: ARRAY
22273: PPUSH
22274: CALL_OW 255
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PPUSH
22283: CALL 27820 0 3
22287: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22288: LD_VAR 0 2
22292: PUSH
22293: LD_VAR 0 4
22297: ARRAY
22298: PPUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 255
22308: PPUSH
22309: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22313: LD_VAR 0 2
22317: PUSH
22318: LD_VAR 0 4
22322: ARRAY
22323: PPUSH
22324: CALL_OW 141
// end ;
22328: GO 22160
22330: POP
22331: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_EXP 82
22341: PUSH
22342: LD_VAR 0 5
22346: ARRAY
22347: PUSH
22348: LD_INT 0
22350: PLUS
22351: PPUSH
22352: CALL_OW 505
// end ;
22356: LD_VAR 0 3
22360: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22361: LD_INT 0
22363: PPUSH
22364: PPUSH
22365: PPUSH
22366: PPUSH
// if not hack in hackTanks then
22367: LD_VAR 0 1
22371: PUSH
22372: LD_EXP 81
22376: IN
22377: NOT
22378: IFFALSE 22382
// exit ;
22380: GO 22622
// index := GetElementIndex ( hackTanks , hack ) ;
22382: LD_ADDR_VAR 0 4
22386: PUSH
22387: LD_EXP 81
22391: PPUSH
22392: LD_VAR 0 1
22396: PPUSH
22397: CALL 27605 0 2
22401: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: DOUBLE
22408: LD_EXP 82
22412: PUSH
22413: LD_VAR 0 4
22417: ARRAY
22418: INC
22419: ST_TO_ADDR
22420: LD_INT 1
22422: PUSH
22423: FOR_DOWNTO
22424: IFFALSE 22596
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22426: LD_ADDR_VAR 0 5
22430: PUSH
22431: LD_EXP 82
22435: PUSH
22436: LD_VAR 0 4
22440: ARRAY
22441: PUSH
22442: LD_VAR 0 3
22446: ARRAY
22447: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22448: LD_VAR 0 5
22452: PUSH
22453: LD_INT 1
22455: ARRAY
22456: PPUSH
22457: CALL_OW 302
22461: NOT
22462: PUSH
22463: LD_VAR 0 5
22467: PUSH
22468: LD_INT 1
22470: ARRAY
22471: PPUSH
22472: CALL_OW 255
22476: PUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: CALL_OW 255
22486: NONEQUAL
22487: OR
22488: IFFALSE 22594
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22490: LD_VAR 0 5
22494: PUSH
22495: LD_INT 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 305
22503: PUSH
22504: LD_VAR 0 5
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PPUSH
22513: CALL_OW 255
22517: PUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 255
22527: EQUAL
22528: AND
22529: IFFALSE 22553
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22531: LD_VAR 0 5
22535: PUSH
22536: LD_INT 1
22538: ARRAY
22539: PPUSH
22540: LD_VAR 0 5
22544: PUSH
22545: LD_INT 2
22547: ARRAY
22548: PPUSH
22549: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22553: LD_ADDR_EXP 82
22557: PUSH
22558: LD_EXP 82
22562: PPUSH
22563: LD_VAR 0 4
22567: PPUSH
22568: LD_EXP 82
22572: PUSH
22573: LD_VAR 0 4
22577: ARRAY
22578: PPUSH
22579: LD_VAR 0 3
22583: PPUSH
22584: CALL_OW 3
22588: PPUSH
22589: CALL_OW 1
22593: ST_TO_ADDR
// end ; end ;
22594: GO 22423
22596: POP
22597: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22598: LD_VAR 0 1
22602: PPUSH
22603: LD_EXP 82
22607: PUSH
22608: LD_VAR 0 4
22612: ARRAY
22613: PUSH
22614: LD_INT 0
22616: PLUS
22617: PPUSH
22618: CALL_OW 505
// end ;
22622: LD_VAR 0 2
22626: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
22632: PPUSH
// if not hack in hackTanks then
22633: LD_VAR 0 1
22637: PUSH
22638: LD_EXP 81
22642: IN
22643: NOT
22644: IFFALSE 22648
// exit ;
22646: GO 22733
// index := GetElementIndex ( hackTanks , hack ) ;
22648: LD_ADDR_VAR 0 5
22652: PUSH
22653: LD_EXP 81
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL 27605 0 2
22667: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22668: LD_ADDR_VAR 0 4
22672: PUSH
22673: DOUBLE
22674: LD_INT 1
22676: DEC
22677: ST_TO_ADDR
22678: LD_EXP 82
22682: PUSH
22683: LD_VAR 0 5
22687: ARRAY
22688: PUSH
22689: FOR_TO
22690: IFFALSE 22731
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22692: LD_EXP 82
22696: PUSH
22697: LD_VAR 0 5
22701: ARRAY
22702: PUSH
22703: LD_VAR 0 4
22707: ARRAY
22708: PUSH
22709: LD_INT 1
22711: ARRAY
22712: PUSH
22713: LD_VAR 0 2
22717: EQUAL
22718: IFFALSE 22729
// KillUnit ( vehicle ) ;
22720: LD_VAR 0 2
22724: PPUSH
22725: CALL_OW 66
22729: GO 22689
22731: POP
22732: POP
// end ; end_of_file
22733: LD_VAR 0 3
22737: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22738: LD_INT 0
22740: PPUSH
// ar_crane := 88 ;
22741: LD_ADDR_EXP 92
22745: PUSH
22746: LD_INT 88
22748: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22749: LD_ADDR_EXP 87
22753: PUSH
22754: LD_INT 89
22756: ST_TO_ADDR
// us_hack := 99 ;
22757: LD_ADDR_EXP 88
22761: PUSH
22762: LD_INT 99
22764: ST_TO_ADDR
// us_artillery := 97 ;
22765: LD_ADDR_EXP 89
22769: PUSH
22770: LD_INT 97
22772: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22773: LD_ADDR_EXP 90
22777: PUSH
22778: LD_INT 91
22780: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22781: LD_ADDR_EXP 91
22785: PUSH
22786: LD_INT 92
22788: ST_TO_ADDR
// ru_radar := 98 ;
22789: LD_ADDR_EXP 86
22793: PUSH
22794: LD_INT 98
22796: ST_TO_ADDR
// tech_Artillery := 80 ;
22797: LD_ADDR_EXP 93
22801: PUSH
22802: LD_INT 80
22804: ST_TO_ADDR
// tech_RadMat := 81 ;
22805: LD_ADDR_EXP 94
22809: PUSH
22810: LD_INT 81
22812: ST_TO_ADDR
// tech_BasicTools := 82 ;
22813: LD_ADDR_EXP 95
22817: PUSH
22818: LD_INT 82
22820: ST_TO_ADDR
// tech_Cargo := 83 ;
22821: LD_ADDR_EXP 96
22825: PUSH
22826: LD_INT 83
22828: ST_TO_ADDR
// tech_Track := 84 ;
22829: LD_ADDR_EXP 97
22833: PUSH
22834: LD_INT 84
22836: ST_TO_ADDR
// tech_Crane := 85 ;
22837: LD_ADDR_EXP 98
22841: PUSH
22842: LD_INT 85
22844: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22845: LD_ADDR_EXP 99
22849: PUSH
22850: LD_INT 86
22852: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22853: LD_ADDR_EXP 100
22857: PUSH
22858: LD_INT 87
22860: ST_TO_ADDR
// end ;
22861: LD_VAR 0 1
22865: RET
// every 1 do
22866: GO 22868
22868: DISABLE
// InitGlobalVariables ; end_of_file
22869: CALL 22738 0 0
22873: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22874: LD_INT 0
22876: PPUSH
22877: PPUSH
// if exist_mode then
22878: LD_VAR 0 2
22882: IFFALSE 22907
// unit := CreateCharacter ( prefix & ident ) else
22884: LD_ADDR_VAR 0 5
22888: PUSH
22889: LD_VAR 0 3
22893: PUSH
22894: LD_VAR 0 1
22898: STR
22899: PPUSH
22900: CALL_OW 34
22904: ST_TO_ADDR
22905: GO 22922
// unit := NewCharacter ( ident ) ;
22907: LD_ADDR_VAR 0 5
22911: PUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 25
22921: ST_TO_ADDR
// result := unit ;
22922: LD_ADDR_VAR 0 4
22926: PUSH
22927: LD_VAR 0 5
22931: ST_TO_ADDR
// end ;
22932: LD_VAR 0 4
22936: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
// if not side or not nation then
22941: LD_VAR 0 1
22945: NOT
22946: PUSH
22947: LD_VAR 0 2
22951: NOT
22952: OR
22953: IFFALSE 22957
// exit ;
22955: GO 23721
// case nation of nation_american :
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: DOUBLE
22965: EQUAL
22966: IFTRUE 22970
22968: GO 23184
22970: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22971: LD_ADDR_VAR 0 4
22975: PUSH
22976: LD_INT 35
22978: PUSH
22979: LD_INT 45
22981: PUSH
22982: LD_INT 46
22984: PUSH
22985: LD_INT 47
22987: PUSH
22988: LD_INT 82
22990: PUSH
22991: LD_INT 83
22993: PUSH
22994: LD_INT 84
22996: PUSH
22997: LD_INT 85
22999: PUSH
23000: LD_INT 86
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 6
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 7
23020: PUSH
23021: LD_INT 12
23023: PUSH
23024: LD_INT 13
23026: PUSH
23027: LD_INT 10
23029: PUSH
23030: LD_INT 14
23032: PUSH
23033: LD_INT 20
23035: PUSH
23036: LD_INT 21
23038: PUSH
23039: LD_INT 22
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 32
23047: PUSH
23048: LD_INT 27
23050: PUSH
23051: LD_INT 36
23053: PUSH
23054: LD_INT 69
23056: PUSH
23057: LD_INT 39
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 40
23065: PUSH
23066: LD_INT 48
23068: PUSH
23069: LD_INT 49
23071: PUSH
23072: LD_INT 50
23074: PUSH
23075: LD_INT 51
23077: PUSH
23078: LD_INT 52
23080: PUSH
23081: LD_INT 53
23083: PUSH
23084: LD_INT 54
23086: PUSH
23087: LD_INT 55
23089: PUSH
23090: LD_INT 56
23092: PUSH
23093: LD_INT 57
23095: PUSH
23096: LD_INT 58
23098: PUSH
23099: LD_INT 59
23101: PUSH
23102: LD_INT 60
23104: PUSH
23105: LD_INT 61
23107: PUSH
23108: LD_INT 62
23110: PUSH
23111: LD_INT 80
23113: PUSH
23114: LD_INT 82
23116: PUSH
23117: LD_INT 83
23119: PUSH
23120: LD_INT 84
23122: PUSH
23123: LD_INT 85
23125: PUSH
23126: LD_INT 86
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23645
23184: LD_INT 2
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23414
23192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23193: LD_ADDR_VAR 0 4
23197: PUSH
23198: LD_INT 35
23200: PUSH
23201: LD_INT 45
23203: PUSH
23204: LD_INT 46
23206: PUSH
23207: LD_INT 47
23209: PUSH
23210: LD_INT 82
23212: PUSH
23213: LD_INT 83
23215: PUSH
23216: LD_INT 84
23218: PUSH
23219: LD_INT 85
23221: PUSH
23222: LD_INT 87
23224: PUSH
23225: LD_INT 70
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 11
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 4
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: LD_INT 6
23245: PUSH
23246: LD_INT 15
23248: PUSH
23249: LD_INT 18
23251: PUSH
23252: LD_INT 7
23254: PUSH
23255: LD_INT 17
23257: PUSH
23258: LD_INT 8
23260: PUSH
23261: LD_INT 20
23263: PUSH
23264: LD_INT 21
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: LD_INT 72
23272: PUSH
23273: LD_INT 26
23275: PUSH
23276: LD_INT 69
23278: PUSH
23279: LD_INT 39
23281: PUSH
23282: LD_INT 40
23284: PUSH
23285: LD_INT 41
23287: PUSH
23288: LD_INT 42
23290: PUSH
23291: LD_INT 43
23293: PUSH
23294: LD_INT 48
23296: PUSH
23297: LD_INT 49
23299: PUSH
23300: LD_INT 50
23302: PUSH
23303: LD_INT 51
23305: PUSH
23306: LD_INT 52
23308: PUSH
23309: LD_INT 53
23311: PUSH
23312: LD_INT 54
23314: PUSH
23315: LD_INT 55
23317: PUSH
23318: LD_INT 56
23320: PUSH
23321: LD_INT 60
23323: PUSH
23324: LD_INT 61
23326: PUSH
23327: LD_INT 62
23329: PUSH
23330: LD_INT 66
23332: PUSH
23333: LD_INT 67
23335: PUSH
23336: LD_INT 68
23338: PUSH
23339: LD_INT 81
23341: PUSH
23342: LD_INT 82
23344: PUSH
23345: LD_INT 83
23347: PUSH
23348: LD_INT 84
23350: PUSH
23351: LD_INT 85
23353: PUSH
23354: LD_INT 87
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: ST_TO_ADDR
23412: GO 23645
23414: LD_INT 3
23416: DOUBLE
23417: EQUAL
23418: IFTRUE 23422
23420: GO 23644
23422: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23423: LD_ADDR_VAR 0 4
23427: PUSH
23428: LD_INT 46
23430: PUSH
23431: LD_INT 47
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: LD_INT 82
23442: PUSH
23443: LD_INT 83
23445: PUSH
23446: LD_INT 84
23448: PUSH
23449: LD_INT 85
23451: PUSH
23452: LD_INT 86
23454: PUSH
23455: LD_INT 11
23457: PUSH
23458: LD_INT 9
23460: PUSH
23461: LD_INT 20
23463: PUSH
23464: LD_INT 19
23466: PUSH
23467: LD_INT 21
23469: PUSH
23470: LD_INT 24
23472: PUSH
23473: LD_INT 22
23475: PUSH
23476: LD_INT 25
23478: PUSH
23479: LD_INT 28
23481: PUSH
23482: LD_INT 29
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: LD_INT 31
23490: PUSH
23491: LD_INT 37
23493: PUSH
23494: LD_INT 38
23496: PUSH
23497: LD_INT 32
23499: PUSH
23500: LD_INT 27
23502: PUSH
23503: LD_INT 33
23505: PUSH
23506: LD_INT 69
23508: PUSH
23509: LD_INT 39
23511: PUSH
23512: LD_INT 34
23514: PUSH
23515: LD_INT 40
23517: PUSH
23518: LD_INT 71
23520: PUSH
23521: LD_INT 23
23523: PUSH
23524: LD_INT 44
23526: PUSH
23527: LD_INT 48
23529: PUSH
23530: LD_INT 49
23532: PUSH
23533: LD_INT 50
23535: PUSH
23536: LD_INT 51
23538: PUSH
23539: LD_INT 52
23541: PUSH
23542: LD_INT 53
23544: PUSH
23545: LD_INT 54
23547: PUSH
23548: LD_INT 55
23550: PUSH
23551: LD_INT 56
23553: PUSH
23554: LD_INT 57
23556: PUSH
23557: LD_INT 58
23559: PUSH
23560: LD_INT 59
23562: PUSH
23563: LD_INT 63
23565: PUSH
23566: LD_INT 64
23568: PUSH
23569: LD_INT 65
23571: PUSH
23572: LD_INT 82
23574: PUSH
23575: LD_INT 83
23577: PUSH
23578: LD_INT 84
23580: PUSH
23581: LD_INT 85
23583: PUSH
23584: LD_INT 86
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 23645
23644: POP
// if state > - 1 and state < 3 then
23645: LD_VAR 0 3
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: GREATER
23654: PUSH
23655: LD_VAR 0 3
23659: PUSH
23660: LD_INT 3
23662: LESS
23663: AND
23664: IFFALSE 23721
// for i in result do
23666: LD_ADDR_VAR 0 5
23670: PUSH
23671: LD_VAR 0 4
23675: PUSH
23676: FOR_IN
23677: IFFALSE 23719
// if GetTech ( i , side ) <> state then
23679: LD_VAR 0 5
23683: PPUSH
23684: LD_VAR 0 1
23688: PPUSH
23689: CALL_OW 321
23693: PUSH
23694: LD_VAR 0 3
23698: NONEQUAL
23699: IFFALSE 23717
// result := result diff i ;
23701: LD_ADDR_VAR 0 4
23705: PUSH
23706: LD_VAR 0 4
23710: PUSH
23711: LD_VAR 0 5
23715: DIFF
23716: ST_TO_ADDR
23717: GO 23676
23719: POP
23720: POP
// end ;
23721: LD_VAR 0 4
23725: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
// result := true ;
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 1
23738: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23739: LD_ADDR_VAR 0 5
23743: PUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL_OW 480
23753: ST_TO_ADDR
// if not tmp then
23754: LD_VAR 0 5
23758: NOT
23759: IFFALSE 23763
// exit ;
23761: GO 23812
// for i in tmp do
23763: LD_ADDR_VAR 0 4
23767: PUSH
23768: LD_VAR 0 5
23772: PUSH
23773: FOR_IN
23774: IFFALSE 23810
// if GetTech ( i , side ) <> state_researched then
23776: LD_VAR 0 4
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 321
23790: PUSH
23791: LD_INT 2
23793: NONEQUAL
23794: IFFALSE 23808
// begin result := false ;
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: LD_INT 0
23803: ST_TO_ADDR
// exit ;
23804: POP
23805: POP
23806: GO 23812
// end ;
23808: GO 23773
23810: POP
23811: POP
// end ;
23812: LD_VAR 0 3
23816: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23817: LD_INT 0
23819: PPUSH
23820: PPUSH
23821: PPUSH
23822: PPUSH
23823: PPUSH
23824: PPUSH
23825: PPUSH
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
23831: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23832: LD_VAR 0 1
23836: NOT
23837: PUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 257
23847: PUSH
23848: LD_INT 9
23850: NONEQUAL
23851: OR
23852: IFFALSE 23856
// exit ;
23854: GO 24429
// side := GetSide ( unit ) ;
23856: LD_ADDR_VAR 0 9
23860: PUSH
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL_OW 255
23870: ST_TO_ADDR
// tech_space := tech_spacanom ;
23871: LD_ADDR_VAR 0 12
23875: PUSH
23876: LD_INT 29
23878: ST_TO_ADDR
// tech_time := tech_taurad ;
23879: LD_ADDR_VAR 0 13
23883: PUSH
23884: LD_INT 28
23886: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23887: LD_ADDR_VAR 0 11
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 310
23901: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23902: LD_VAR 0 11
23906: PPUSH
23907: CALL_OW 247
23911: PUSH
23912: LD_INT 2
23914: EQUAL
23915: IFFALSE 23919
// exit ;
23917: GO 24429
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23919: LD_ADDR_VAR 0 8
23923: PUSH
23924: LD_INT 81
23926: PUSH
23927: LD_VAR 0 9
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 21
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PPUSH
23957: CALL_OW 69
23961: ST_TO_ADDR
// if not tmp then
23962: LD_VAR 0 8
23966: NOT
23967: IFFALSE 23971
// exit ;
23969: GO 24429
// if in_unit then
23971: LD_VAR 0 11
23975: IFFALSE 23999
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23977: LD_ADDR_VAR 0 10
23981: PUSH
23982: LD_VAR 0 8
23986: PPUSH
23987: LD_VAR 0 11
23991: PPUSH
23992: CALL_OW 74
23996: ST_TO_ADDR
23997: GO 24019
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23999: LD_ADDR_VAR 0 10
24003: PUSH
24004: LD_VAR 0 8
24008: PPUSH
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 74
24018: ST_TO_ADDR
// if not enemy then
24019: LD_VAR 0 10
24023: NOT
24024: IFFALSE 24028
// exit ;
24026: GO 24429
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24028: LD_VAR 0 11
24032: PUSH
24033: LD_VAR 0 11
24037: PPUSH
24038: LD_VAR 0 10
24042: PPUSH
24043: CALL_OW 296
24047: PUSH
24048: LD_INT 13
24050: GREATER
24051: AND
24052: PUSH
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_VAR 0 10
24062: PPUSH
24063: CALL_OW 296
24067: PUSH
24068: LD_INT 12
24070: GREATER
24071: OR
24072: IFFALSE 24076
// exit ;
24074: GO 24429
// missile := [ 1 ] ;
24076: LD_ADDR_VAR 0 14
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24087: LD_VAR 0 9
24091: PPUSH
24092: LD_VAR 0 12
24096: PPUSH
24097: CALL_OW 325
24101: IFFALSE 24130
// missile := Insert ( missile , missile + 1 , 2 ) ;
24103: LD_ADDR_VAR 0 14
24107: PUSH
24108: LD_VAR 0 14
24112: PPUSH
24113: LD_VAR 0 14
24117: PUSH
24118: LD_INT 1
24120: PLUS
24121: PPUSH
24122: LD_INT 2
24124: PPUSH
24125: CALL_OW 2
24129: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24130: LD_VAR 0 9
24134: PPUSH
24135: LD_VAR 0 13
24139: PPUSH
24140: CALL_OW 325
24144: PUSH
24145: LD_VAR 0 10
24149: PPUSH
24150: CALL_OW 255
24154: PPUSH
24155: LD_VAR 0 13
24159: PPUSH
24160: CALL_OW 325
24164: NOT
24165: AND
24166: IFFALSE 24195
// missile := Insert ( missile , missile + 1 , 3 ) ;
24168: LD_ADDR_VAR 0 14
24172: PUSH
24173: LD_VAR 0 14
24177: PPUSH
24178: LD_VAR 0 14
24182: PUSH
24183: LD_INT 1
24185: PLUS
24186: PPUSH
24187: LD_INT 3
24189: PPUSH
24190: CALL_OW 2
24194: ST_TO_ADDR
// if missile < 2 then
24195: LD_VAR 0 14
24199: PUSH
24200: LD_INT 2
24202: LESS
24203: IFFALSE 24207
// exit ;
24205: GO 24429
// x := GetX ( enemy ) ;
24207: LD_ADDR_VAR 0 4
24211: PUSH
24212: LD_VAR 0 10
24216: PPUSH
24217: CALL_OW 250
24221: ST_TO_ADDR
// y := GetY ( enemy ) ;
24222: LD_ADDR_VAR 0 5
24226: PUSH
24227: LD_VAR 0 10
24231: PPUSH
24232: CALL_OW 251
24236: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24237: LD_ADDR_VAR 0 6
24241: PUSH
24242: LD_VAR 0 4
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PPUSH
24251: LD_INT 1
24253: PPUSH
24254: CALL_OW 12
24258: PLUS
24259: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24260: LD_ADDR_VAR 0 7
24264: PUSH
24265: LD_VAR 0 5
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PPUSH
24274: LD_INT 1
24276: PPUSH
24277: CALL_OW 12
24281: PLUS
24282: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24283: LD_VAR 0 6
24287: PPUSH
24288: LD_VAR 0 7
24292: PPUSH
24293: CALL_OW 488
24297: NOT
24298: IFFALSE 24320
// begin _x := x ;
24300: LD_ADDR_VAR 0 6
24304: PUSH
24305: LD_VAR 0 4
24309: ST_TO_ADDR
// _y := y ;
24310: LD_ADDR_VAR 0 7
24314: PUSH
24315: LD_VAR 0 5
24319: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24320: LD_ADDR_VAR 0 3
24324: PUSH
24325: LD_INT 1
24327: PPUSH
24328: LD_VAR 0 14
24332: PPUSH
24333: CALL_OW 12
24337: ST_TO_ADDR
// case i of 1 :
24338: LD_VAR 0 3
24342: PUSH
24343: LD_INT 1
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24368
24351: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_VAR 0 10
24361: PPUSH
24362: CALL_OW 115
24366: GO 24429
24368: LD_INT 2
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24398
24376: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24377: LD_VAR 0 1
24381: PPUSH
24382: LD_VAR 0 6
24386: PPUSH
24387: LD_VAR 0 7
24391: PPUSH
24392: CALL_OW 153
24396: GO 24429
24398: LD_INT 3
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24428
24406: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24407: LD_VAR 0 1
24411: PPUSH
24412: LD_VAR 0 6
24416: PPUSH
24417: LD_VAR 0 7
24421: PPUSH
24422: CALL_OW 154
24426: GO 24429
24428: POP
// end ;
24429: LD_VAR 0 2
24433: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
// if not unit or not building then
24442: LD_VAR 0 1
24446: NOT
24447: PUSH
24448: LD_VAR 0 2
24452: NOT
24453: OR
24454: IFFALSE 24458
// exit ;
24456: GO 24616
// x := GetX ( building ) ;
24458: LD_ADDR_VAR 0 5
24462: PUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: CALL_OW 250
24472: ST_TO_ADDR
// y := GetY ( building ) ;
24473: LD_ADDR_VAR 0 6
24477: PUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: CALL_OW 251
24487: ST_TO_ADDR
// for i = 0 to 5 do
24488: LD_ADDR_VAR 0 4
24492: PUSH
24493: DOUBLE
24494: LD_INT 0
24496: DEC
24497: ST_TO_ADDR
24498: LD_INT 5
24500: PUSH
24501: FOR_TO
24502: IFFALSE 24614
// begin _x := ShiftX ( x , i , 3 ) ;
24504: LD_ADDR_VAR 0 7
24508: PUSH
24509: LD_VAR 0 5
24513: PPUSH
24514: LD_VAR 0 4
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: CALL_OW 272
24526: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24527: LD_ADDR_VAR 0 8
24531: PUSH
24532: LD_VAR 0 6
24536: PPUSH
24537: LD_VAR 0 4
24541: PPUSH
24542: LD_INT 3
24544: PPUSH
24545: CALL_OW 273
24549: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24550: LD_VAR 0 7
24554: PPUSH
24555: LD_VAR 0 8
24559: PPUSH
24560: CALL_OW 488
24564: NOT
24565: IFFALSE 24569
// continue ;
24567: GO 24501
// if HexInfo ( _x , _y ) = 0 then
24569: LD_VAR 0 7
24573: PPUSH
24574: LD_VAR 0 8
24578: PPUSH
24579: CALL_OW 428
24583: PUSH
24584: LD_INT 0
24586: EQUAL
24587: IFFALSE 24612
// begin ComMoveXY ( unit , _x , _y ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_VAR 0 7
24598: PPUSH
24599: LD_VAR 0 8
24603: PPUSH
24604: CALL_OW 111
// exit ;
24608: POP
24609: POP
24610: GO 24616
// end ; end ;
24612: GO 24501
24614: POP
24615: POP
// end ;
24616: LD_VAR 0 3
24620: RET
// export function ScanBase ( side , base_area ) ; begin
24621: LD_INT 0
24623: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24624: LD_ADDR_VAR 0 3
24628: PUSH
24629: LD_VAR 0 2
24633: PPUSH
24634: LD_INT 81
24636: PUSH
24637: LD_VAR 0 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 70
24650: ST_TO_ADDR
// end ;
24651: LD_VAR 0 3
24655: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24656: LD_INT 0
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
// result := false ;
24662: LD_ADDR_VAR 0 2
24666: PUSH
24667: LD_INT 0
24669: ST_TO_ADDR
// side := GetSide ( unit ) ;
24670: LD_ADDR_VAR 0 3
24674: PUSH
24675: LD_VAR 0 1
24679: PPUSH
24680: CALL_OW 255
24684: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24685: LD_ADDR_VAR 0 4
24689: PUSH
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL_OW 248
24699: ST_TO_ADDR
// case nat of 1 :
24700: LD_VAR 0 4
24704: PUSH
24705: LD_INT 1
24707: DOUBLE
24708: EQUAL
24709: IFTRUE 24713
24711: GO 24724
24713: POP
// tech := tech_lassight ; 2 :
24714: LD_ADDR_VAR 0 5
24718: PUSH
24719: LD_INT 12
24721: ST_TO_ADDR
24722: GO 24763
24724: LD_INT 2
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24743
24732: POP
// tech := tech_mortar ; 3 :
24733: LD_ADDR_VAR 0 5
24737: PUSH
24738: LD_INT 41
24740: ST_TO_ADDR
24741: GO 24763
24743: LD_INT 3
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24762
24751: POP
// tech := tech_bazooka ; end ;
24752: LD_ADDR_VAR 0 5
24756: PUSH
24757: LD_INT 44
24759: ST_TO_ADDR
24760: GO 24763
24762: POP
// if Researched ( side , tech ) then
24763: LD_VAR 0 3
24767: PPUSH
24768: LD_VAR 0 5
24772: PPUSH
24773: CALL_OW 325
24777: IFFALSE 24804
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24779: LD_ADDR_VAR 0 2
24783: PUSH
24784: LD_INT 5
24786: PUSH
24787: LD_INT 8
24789: PUSH
24790: LD_INT 9
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: PUSH
24798: LD_VAR 0 4
24802: ARRAY
24803: ST_TO_ADDR
// end ;
24804: LD_VAR 0 2
24808: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24809: LD_INT 0
24811: PPUSH
24812: PPUSH
24813: PPUSH
// if not mines then
24814: LD_VAR 0 2
24818: NOT
24819: IFFALSE 24823
// exit ;
24821: GO 24967
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24823: LD_ADDR_VAR 0 5
24827: PUSH
24828: LD_INT 81
24830: PUSH
24831: LD_VAR 0 1
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 3
24842: PUSH
24843: LD_INT 21
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PPUSH
24861: CALL_OW 69
24865: ST_TO_ADDR
// for i in mines do
24866: LD_ADDR_VAR 0 4
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: FOR_IN
24877: IFFALSE 24965
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24879: LD_VAR 0 4
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PPUSH
24888: LD_VAR 0 4
24892: PUSH
24893: LD_INT 2
24895: ARRAY
24896: PPUSH
24897: CALL_OW 458
24901: NOT
24902: IFFALSE 24906
// continue ;
24904: GO 24876
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24906: LD_VAR 0 4
24910: PUSH
24911: LD_INT 1
24913: ARRAY
24914: PPUSH
24915: LD_VAR 0 4
24919: PUSH
24920: LD_INT 2
24922: ARRAY
24923: PPUSH
24924: CALL_OW 428
24928: PUSH
24929: LD_VAR 0 5
24933: IN
24934: IFFALSE 24963
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24936: LD_VAR 0 4
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: PPUSH
24945: LD_VAR 0 4
24949: PUSH
24950: LD_INT 2
24952: ARRAY
24953: PPUSH
24954: LD_VAR 0 1
24958: PPUSH
24959: CALL_OW 456
// end ;
24963: GO 24876
24965: POP
24966: POP
// end ;
24967: LD_VAR 0 3
24971: RET
// export function Count ( array ) ; var i ; begin
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
// result := 0 ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 0
24983: ST_TO_ADDR
// for i in array do
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_VAR 0 1
24993: PUSH
24994: FOR_IN
24995: IFFALSE 25019
// if i then
24997: LD_VAR 0 3
25001: IFFALSE 25017
// result := result + 1 ;
25003: LD_ADDR_VAR 0 2
25007: PUSH
25008: LD_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: PLUS
25016: ST_TO_ADDR
25017: GO 24994
25019: POP
25020: POP
// end ;
25021: LD_VAR 0 2
25025: RET
// export function IsEmpty ( building ) ; begin
25026: LD_INT 0
25028: PPUSH
// if not building then
25029: LD_VAR 0 1
25033: NOT
25034: IFFALSE 25038
// exit ;
25036: GO 25081
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 1
25047: PUSH
25048: LD_INT 22
25050: PUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 255
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 58
25067: PUSH
25068: EMPTY
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PPUSH
25075: CALL_OW 69
25079: IN
25080: ST_TO_ADDR
// end ;
25081: LD_VAR 0 2
25085: RET
// export function IsNotFull ( building ) ; begin
25086: LD_INT 0
25088: PPUSH
// if not building then
25089: LD_VAR 0 1
25093: NOT
25094: IFFALSE 25098
// exit ;
25096: GO 25117
// result := UnitsInside ( building ) < 6 ;
25098: LD_ADDR_VAR 0 2
25102: PUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: CALL_OW 313
25112: PUSH
25113: LD_INT 6
25115: LESS
25116: ST_TO_ADDR
// end ;
25117: LD_VAR 0 2
25121: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25122: LD_INT 0
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
// tmp := [ ] ;
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: EMPTY
25134: ST_TO_ADDR
// list := [ ] ;
25135: LD_ADDR_VAR 0 5
25139: PUSH
25140: EMPTY
25141: ST_TO_ADDR
// for i = 16 to 25 do
25142: LD_ADDR_VAR 0 4
25146: PUSH
25147: DOUBLE
25148: LD_INT 16
25150: DEC
25151: ST_TO_ADDR
25152: LD_INT 25
25154: PUSH
25155: FOR_TO
25156: IFFALSE 25229
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_VAR 0 3
25167: PUSH
25168: LD_INT 22
25170: PUSH
25171: LD_VAR 0 1
25175: PPUSH
25176: CALL_OW 255
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 91
25187: PUSH
25188: LD_VAR 0 1
25192: PUSH
25193: LD_INT 6
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 30
25203: PUSH
25204: LD_VAR 0 4
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: PPUSH
25221: CALL_OW 69
25225: ADD
25226: ST_TO_ADDR
25227: GO 25155
25229: POP
25230: POP
// for i = 1 to tmp do
25231: LD_ADDR_VAR 0 4
25235: PUSH
25236: DOUBLE
25237: LD_INT 1
25239: DEC
25240: ST_TO_ADDR
25241: LD_VAR 0 3
25245: PUSH
25246: FOR_TO
25247: IFFALSE 25335
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25249: LD_ADDR_VAR 0 5
25253: PUSH
25254: LD_VAR 0 5
25258: PUSH
25259: LD_VAR 0 3
25263: PUSH
25264: LD_VAR 0 4
25268: ARRAY
25269: PPUSH
25270: CALL_OW 266
25274: PUSH
25275: LD_VAR 0 3
25279: PUSH
25280: LD_VAR 0 4
25284: ARRAY
25285: PPUSH
25286: CALL_OW 250
25290: PUSH
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 4
25300: ARRAY
25301: PPUSH
25302: CALL_OW 251
25306: PUSH
25307: LD_VAR 0 3
25311: PUSH
25312: LD_VAR 0 4
25316: ARRAY
25317: PPUSH
25318: CALL_OW 254
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: ADD
25332: ST_TO_ADDR
25333: GO 25246
25335: POP
25336: POP
// result := list ;
25337: LD_ADDR_VAR 0 2
25341: PUSH
25342: LD_VAR 0 5
25346: ST_TO_ADDR
// end ;
25347: LD_VAR 0 2
25351: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
// if not factory then
25361: LD_VAR 0 1
25365: NOT
25366: IFFALSE 25370
// exit ;
25368: GO 25963
// if control = control_apeman then
25370: LD_VAR 0 4
25374: PUSH
25375: LD_INT 5
25377: EQUAL
25378: IFFALSE 25487
// begin tmp := UnitsInside ( factory ) ;
25380: LD_ADDR_VAR 0 8
25384: PUSH
25385: LD_VAR 0 1
25389: PPUSH
25390: CALL_OW 313
25394: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25395: LD_VAR 0 8
25399: PPUSH
25400: LD_INT 25
25402: PUSH
25403: LD_INT 12
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PPUSH
25410: CALL_OW 72
25414: NOT
25415: IFFALSE 25425
// control := control_manual ;
25417: LD_ADDR_VAR 0 4
25421: PUSH
25422: LD_INT 1
25424: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25425: LD_ADDR_VAR 0 8
25429: PUSH
25430: LD_VAR 0 1
25434: PPUSH
25435: CALL 25122 0 1
25439: ST_TO_ADDR
// if tmp then
25440: LD_VAR 0 8
25444: IFFALSE 25487
// begin for i in tmp do
25446: LD_ADDR_VAR 0 7
25450: PUSH
25451: LD_VAR 0 8
25455: PUSH
25456: FOR_IN
25457: IFFALSE 25485
// if i [ 1 ] = b_ext_radio then
25459: LD_VAR 0 7
25463: PUSH
25464: LD_INT 1
25466: ARRAY
25467: PUSH
25468: LD_INT 22
25470: EQUAL
25471: IFFALSE 25483
// begin control := control_remote ;
25473: LD_ADDR_VAR 0 4
25477: PUSH
25478: LD_INT 2
25480: ST_TO_ADDR
// break ;
25481: GO 25485
// end ;
25483: GO 25456
25485: POP
25486: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_VAR 0 2
25496: PPUSH
25497: LD_VAR 0 3
25501: PPUSH
25502: LD_VAR 0 4
25506: PPUSH
25507: LD_VAR 0 5
25511: PPUSH
25512: CALL_OW 448
25516: IFFALSE 25551
// begin result := [ chassis , engine , control , weapon ] ;
25518: LD_ADDR_VAR 0 6
25522: PUSH
25523: LD_VAR 0 2
25527: PUSH
25528: LD_VAR 0 3
25532: PUSH
25533: LD_VAR 0 4
25537: PUSH
25538: LD_VAR 0 5
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: ST_TO_ADDR
// exit ;
25549: GO 25963
// end ; _chassis := AvailableChassisList ( factory ) ;
25551: LD_ADDR_VAR 0 9
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 475
25565: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25566: LD_ADDR_VAR 0 11
25570: PUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: CALL_OW 476
25580: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25581: LD_ADDR_VAR 0 12
25585: PUSH
25586: LD_VAR 0 1
25590: PPUSH
25591: CALL_OW 477
25595: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25596: LD_ADDR_VAR 0 10
25600: PUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 478
25610: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25611: LD_VAR 0 9
25615: NOT
25616: PUSH
25617: LD_VAR 0 11
25621: NOT
25622: OR
25623: PUSH
25624: LD_VAR 0 12
25628: NOT
25629: OR
25630: PUSH
25631: LD_VAR 0 10
25635: NOT
25636: OR
25637: IFFALSE 25672
// begin result := [ chassis , engine , control , weapon ] ;
25639: LD_ADDR_VAR 0 6
25643: PUSH
25644: LD_VAR 0 2
25648: PUSH
25649: LD_VAR 0 3
25653: PUSH
25654: LD_VAR 0 4
25658: PUSH
25659: LD_VAR 0 5
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: ST_TO_ADDR
// exit ;
25670: GO 25963
// end ; if not chassis in _chassis then
25672: LD_VAR 0 2
25676: PUSH
25677: LD_VAR 0 9
25681: IN
25682: NOT
25683: IFFALSE 25709
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25685: LD_ADDR_VAR 0 2
25689: PUSH
25690: LD_VAR 0 9
25694: PUSH
25695: LD_INT 1
25697: PPUSH
25698: LD_VAR 0 9
25702: PPUSH
25703: CALL_OW 12
25707: ARRAY
25708: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25709: LD_VAR 0 2
25713: PPUSH
25714: LD_VAR 0 3
25718: PPUSH
25719: CALL 25968 0 2
25723: NOT
25724: IFFALSE 25783
// repeat engine := _engine [ 1 ] ;
25726: LD_ADDR_VAR 0 3
25730: PUSH
25731: LD_VAR 0 11
25735: PUSH
25736: LD_INT 1
25738: ARRAY
25739: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25740: LD_ADDR_VAR 0 11
25744: PUSH
25745: LD_VAR 0 11
25749: PPUSH
25750: LD_INT 1
25752: PPUSH
25753: CALL_OW 3
25757: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25758: LD_VAR 0 2
25762: PPUSH
25763: LD_VAR 0 3
25767: PPUSH
25768: CALL 25968 0 2
25772: PUSH
25773: LD_VAR 0 11
25777: PUSH
25778: EMPTY
25779: EQUAL
25780: OR
25781: IFFALSE 25726
// if not control in _control then
25783: LD_VAR 0 4
25787: PUSH
25788: LD_VAR 0 12
25792: IN
25793: NOT
25794: IFFALSE 25820
// control := _control [ rand ( 1 , _control ) ] ;
25796: LD_ADDR_VAR 0 4
25800: PUSH
25801: LD_VAR 0 12
25805: PUSH
25806: LD_INT 1
25808: PPUSH
25809: LD_VAR 0 12
25813: PPUSH
25814: CALL_OW 12
25818: ARRAY
25819: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25820: LD_VAR 0 2
25824: PPUSH
25825: LD_VAR 0 5
25829: PPUSH
25830: CALL 26188 0 2
25834: NOT
25835: IFFALSE 25894
// repeat weapon := _weapon [ 1 ] ;
25837: LD_ADDR_VAR 0 5
25841: PUSH
25842: LD_VAR 0 10
25846: PUSH
25847: LD_INT 1
25849: ARRAY
25850: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25851: LD_ADDR_VAR 0 10
25855: PUSH
25856: LD_VAR 0 10
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 3
25868: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 5
25878: PPUSH
25879: CALL 26188 0 2
25883: PUSH
25884: LD_VAR 0 10
25888: PUSH
25889: EMPTY
25890: EQUAL
25891: OR
25892: IFFALSE 25837
// result := [ ] ;
25894: LD_ADDR_VAR 0 6
25898: PUSH
25899: EMPTY
25900: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: LD_VAR 0 4
25920: PPUSH
25921: LD_VAR 0 5
25925: PPUSH
25926: CALL_OW 448
25930: IFFALSE 25963
// result := [ chassis , engine , control , weapon ] ;
25932: LD_ADDR_VAR 0 6
25936: PUSH
25937: LD_VAR 0 2
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_VAR 0 4
25951: PUSH
25952: LD_VAR 0 5
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: ST_TO_ADDR
// end ;
25963: LD_VAR 0 6
25967: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25968: LD_INT 0
25970: PPUSH
// if not chassis or not engine then
25971: LD_VAR 0 1
25975: NOT
25976: PUSH
25977: LD_VAR 0 2
25981: NOT
25982: OR
25983: IFFALSE 25987
// exit ;
25985: GO 26183
// case engine of engine_solar :
25987: LD_VAR 0 2
25991: PUSH
25992: LD_INT 2
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26038
26000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 11
26008: PUSH
26009: LD_INT 12
26011: PUSH
26012: LD_INT 13
26014: PUSH
26015: LD_INT 14
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
26036: GO 26167
26038: LD_INT 1
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26108
26046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_INT 11
26054: PUSH
26055: LD_INT 12
26057: PUSH
26058: LD_INT 13
26060: PUSH
26061: LD_INT 14
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 4
26075: PUSH
26076: LD_INT 5
26078: PUSH
26079: LD_INT 21
26081: PUSH
26082: LD_INT 23
26084: PUSH
26085: LD_INT 22
26087: PUSH
26088: LD_INT 24
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: ST_TO_ADDR
26106: GO 26167
26108: LD_INT 3
26110: DOUBLE
26111: EQUAL
26112: IFTRUE 26116
26114: GO 26166
26116: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26117: LD_ADDR_VAR 0 3
26121: PUSH
26122: LD_INT 13
26124: PUSH
26125: LD_INT 14
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: LD_INT 4
26136: PUSH
26137: LD_INT 5
26139: PUSH
26140: LD_INT 21
26142: PUSH
26143: LD_INT 22
26145: PUSH
26146: LD_INT 23
26148: PUSH
26149: LD_INT 24
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: ST_TO_ADDR
26164: GO 26167
26166: POP
// result := ( chassis in result ) ;
26167: LD_ADDR_VAR 0 3
26171: PUSH
26172: LD_VAR 0 1
26176: PUSH
26177: LD_VAR 0 3
26181: IN
26182: ST_TO_ADDR
// end ;
26183: LD_VAR 0 3
26187: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26188: LD_INT 0
26190: PPUSH
// if not chassis or not weapon then
26191: LD_VAR 0 1
26195: NOT
26196: PUSH
26197: LD_VAR 0 2
26201: NOT
26202: OR
26203: IFFALSE 26207
// exit ;
26205: GO 27233
// case weapon of us_machine_gun :
26207: LD_VAR 0 2
26211: PUSH
26212: LD_INT 2
26214: DOUBLE
26215: EQUAL
26216: IFTRUE 26220
26218: GO 26250
26220: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26221: LD_ADDR_VAR 0 3
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: LD_INT 4
26237: PUSH
26238: LD_INT 5
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
26248: GO 27217
26250: LD_INT 3
26252: DOUBLE
26253: EQUAL
26254: IFTRUE 26258
26256: GO 26288
26258: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: LD_INT 4
26275: PUSH
26276: LD_INT 5
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: ST_TO_ADDR
26286: GO 27217
26288: LD_INT 11
26290: DOUBLE
26291: EQUAL
26292: IFTRUE 26296
26294: GO 26326
26296: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26297: LD_ADDR_VAR 0 3
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: LD_INT 4
26313: PUSH
26314: LD_INT 5
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: ST_TO_ADDR
26324: GO 27217
26326: LD_INT 4
26328: DOUBLE
26329: EQUAL
26330: IFTRUE 26334
26332: GO 26360
26334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26335: LD_ADDR_VAR 0 3
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: LD_INT 3
26345: PUSH
26346: LD_INT 4
26348: PUSH
26349: LD_INT 5
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: ST_TO_ADDR
26358: GO 27217
26360: LD_INT 5
26362: DOUBLE
26363: EQUAL
26364: IFTRUE 26368
26366: GO 26394
26368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26369: LD_ADDR_VAR 0 3
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 3
26379: PUSH
26380: LD_INT 4
26382: PUSH
26383: LD_INT 5
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: ST_TO_ADDR
26392: GO 27217
26394: LD_INT 9
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26428
26402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 3
26413: PUSH
26414: LD_INT 4
26416: PUSH
26417: LD_INT 5
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
26426: GO 27217
26428: LD_INT 7
26430: DOUBLE
26431: EQUAL
26432: IFTRUE 26436
26434: GO 26462
26436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26437: LD_ADDR_VAR 0 3
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: LD_INT 4
26450: PUSH
26451: LD_INT 5
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: ST_TO_ADDR
26460: GO 27217
26462: LD_INT 12
26464: DOUBLE
26465: EQUAL
26466: IFTRUE 26470
26468: GO 26496
26470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26471: LD_ADDR_VAR 0 3
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 3
26481: PUSH
26482: LD_INT 4
26484: PUSH
26485: LD_INT 5
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: ST_TO_ADDR
26494: GO 27217
26496: LD_INT 13
26498: DOUBLE
26499: EQUAL
26500: IFTRUE 26504
26502: GO 26530
26504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26505: LD_ADDR_VAR 0 3
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 4
26518: PUSH
26519: LD_INT 5
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: ST_TO_ADDR
26528: GO 27217
26530: LD_INT 14
26532: DOUBLE
26533: EQUAL
26534: IFTRUE 26538
26536: GO 26556
26538: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26539: LD_ADDR_VAR 0 3
26543: PUSH
26544: LD_INT 4
26546: PUSH
26547: LD_INT 5
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: ST_TO_ADDR
26554: GO 27217
26556: LD_INT 6
26558: DOUBLE
26559: EQUAL
26560: IFTRUE 26564
26562: GO 26582
26564: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_INT 4
26572: PUSH
26573: LD_INT 5
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: ST_TO_ADDR
26580: GO 27217
26582: LD_INT 10
26584: DOUBLE
26585: EQUAL
26586: IFTRUE 26590
26588: GO 26608
26590: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_INT 4
26598: PUSH
26599: LD_INT 5
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 27217
26608: LD_INT 22
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26642
26616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 11
26624: PUSH
26625: LD_INT 12
26627: PUSH
26628: LD_INT 13
26630: PUSH
26631: LD_INT 14
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: ST_TO_ADDR
26640: GO 27217
26642: LD_INT 23
26644: DOUBLE
26645: EQUAL
26646: IFTRUE 26650
26648: GO 26676
26650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_INT 11
26658: PUSH
26659: LD_INT 12
26661: PUSH
26662: LD_INT 13
26664: PUSH
26665: LD_INT 14
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: ST_TO_ADDR
26674: GO 27217
26676: LD_INT 24
26678: DOUBLE
26679: EQUAL
26680: IFTRUE 26684
26682: GO 26710
26684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26685: LD_ADDR_VAR 0 3
26689: PUSH
26690: LD_INT 11
26692: PUSH
26693: LD_INT 12
26695: PUSH
26696: LD_INT 13
26698: PUSH
26699: LD_INT 14
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
26708: GO 27217
26710: LD_INT 30
26712: DOUBLE
26713: EQUAL
26714: IFTRUE 26718
26716: GO 26744
26718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_INT 11
26726: PUSH
26727: LD_INT 12
26729: PUSH
26730: LD_INT 13
26732: PUSH
26733: LD_INT 14
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
26742: GO 27217
26744: LD_INT 25
26746: DOUBLE
26747: EQUAL
26748: IFTRUE 26752
26750: GO 26770
26752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26753: LD_ADDR_VAR 0 3
26757: PUSH
26758: LD_INT 13
26760: PUSH
26761: LD_INT 14
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: ST_TO_ADDR
26768: GO 27217
26770: LD_INT 27
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26796
26778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26779: LD_ADDR_VAR 0 3
26783: PUSH
26784: LD_INT 13
26786: PUSH
26787: LD_INT 14
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: ST_TO_ADDR
26794: GO 27217
26796: LD_INT 28
26798: DOUBLE
26799: EQUAL
26800: IFTRUE 26804
26802: GO 26822
26804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26805: LD_ADDR_VAR 0 3
26809: PUSH
26810: LD_INT 13
26812: PUSH
26813: LD_INT 14
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: ST_TO_ADDR
26820: GO 27217
26822: LD_INT 29
26824: DOUBLE
26825: EQUAL
26826: IFTRUE 26830
26828: GO 26848
26830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_INT 13
26838: PUSH
26839: LD_INT 14
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: ST_TO_ADDR
26846: GO 27217
26848: LD_INT 31
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26874
26856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_INT 13
26864: PUSH
26865: LD_INT 14
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: ST_TO_ADDR
26872: GO 27217
26874: LD_INT 26
26876: DOUBLE
26877: EQUAL
26878: IFTRUE 26882
26880: GO 26900
26882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26883: LD_ADDR_VAR 0 3
26887: PUSH
26888: LD_INT 13
26890: PUSH
26891: LD_INT 14
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: ST_TO_ADDR
26898: GO 27217
26900: LD_INT 42
26902: DOUBLE
26903: EQUAL
26904: IFTRUE 26908
26906: GO 26934
26908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26909: LD_ADDR_VAR 0 3
26913: PUSH
26914: LD_INT 21
26916: PUSH
26917: LD_INT 22
26919: PUSH
26920: LD_INT 23
26922: PUSH
26923: LD_INT 24
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: ST_TO_ADDR
26932: GO 27217
26934: LD_INT 43
26936: DOUBLE
26937: EQUAL
26938: IFTRUE 26942
26940: GO 26968
26942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_INT 21
26950: PUSH
26951: LD_INT 22
26953: PUSH
26954: LD_INT 23
26956: PUSH
26957: LD_INT 24
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: ST_TO_ADDR
26966: GO 27217
26968: LD_INT 44
26970: DOUBLE
26971: EQUAL
26972: IFTRUE 26976
26974: GO 27002
26976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26977: LD_ADDR_VAR 0 3
26981: PUSH
26982: LD_INT 21
26984: PUSH
26985: LD_INT 22
26987: PUSH
26988: LD_INT 23
26990: PUSH
26991: LD_INT 24
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
27000: GO 27217
27002: LD_INT 45
27004: DOUBLE
27005: EQUAL
27006: IFTRUE 27010
27008: GO 27036
27010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_INT 21
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_INT 23
27024: PUSH
27025: LD_INT 24
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: ST_TO_ADDR
27034: GO 27217
27036: LD_INT 49
27038: DOUBLE
27039: EQUAL
27040: IFTRUE 27044
27042: GO 27070
27044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: LD_INT 21
27052: PUSH
27053: LD_INT 22
27055: PUSH
27056: LD_INT 23
27058: PUSH
27059: LD_INT 24
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: ST_TO_ADDR
27068: GO 27217
27070: LD_INT 51
27072: DOUBLE
27073: EQUAL
27074: IFTRUE 27078
27076: GO 27104
27078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27079: LD_ADDR_VAR 0 3
27083: PUSH
27084: LD_INT 21
27086: PUSH
27087: LD_INT 22
27089: PUSH
27090: LD_INT 23
27092: PUSH
27093: LD_INT 24
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
27102: GO 27217
27104: LD_INT 52
27106: DOUBLE
27107: EQUAL
27108: IFTRUE 27112
27110: GO 27138
27112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27113: LD_ADDR_VAR 0 3
27117: PUSH
27118: LD_INT 21
27120: PUSH
27121: LD_INT 22
27123: PUSH
27124: LD_INT 23
27126: PUSH
27127: LD_INT 24
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: ST_TO_ADDR
27136: GO 27217
27138: LD_INT 53
27140: DOUBLE
27141: EQUAL
27142: IFTRUE 27146
27144: GO 27164
27146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27147: LD_ADDR_VAR 0 3
27151: PUSH
27152: LD_INT 23
27154: PUSH
27155: LD_INT 24
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: ST_TO_ADDR
27162: GO 27217
27164: LD_INT 46
27166: DOUBLE
27167: EQUAL
27168: IFTRUE 27172
27170: GO 27190
27172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27173: LD_ADDR_VAR 0 3
27177: PUSH
27178: LD_INT 23
27180: PUSH
27181: LD_INT 24
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: ST_TO_ADDR
27188: GO 27217
27190: LD_INT 47
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27216
27198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27199: LD_ADDR_VAR 0 3
27203: PUSH
27204: LD_INT 23
27206: PUSH
27207: LD_INT 24
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: ST_TO_ADDR
27214: GO 27217
27216: POP
// result := ( chassis in result ) ;
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_VAR 0 1
27226: PUSH
27227: LD_VAR 0 3
27231: IN
27232: ST_TO_ADDR
// end ;
27233: LD_VAR 0 3
27237: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27238: LD_INT 0
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
// result := array ;
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_VAR 0 1
27256: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27257: LD_VAR 0 1
27261: NOT
27262: PUSH
27263: LD_VAR 0 2
27267: NOT
27268: OR
27269: PUSH
27270: LD_VAR 0 3
27274: NOT
27275: OR
27276: PUSH
27277: LD_VAR 0 2
27281: PUSH
27282: LD_VAR 0 1
27286: GREATER
27287: OR
27288: PUSH
27289: LD_VAR 0 3
27293: PUSH
27294: LD_VAR 0 1
27298: GREATER
27299: OR
27300: IFFALSE 27304
// exit ;
27302: GO 27600
// if direction then
27304: LD_VAR 0 4
27308: IFFALSE 27372
// begin d := 1 ;
27310: LD_ADDR_VAR 0 9
27314: PUSH
27315: LD_INT 1
27317: ST_TO_ADDR
// if i_from > i_to then
27318: LD_VAR 0 2
27322: PUSH
27323: LD_VAR 0 3
27327: GREATER
27328: IFFALSE 27354
// length := ( array - i_from ) + i_to else
27330: LD_ADDR_VAR 0 11
27334: PUSH
27335: LD_VAR 0 1
27339: PUSH
27340: LD_VAR 0 2
27344: MINUS
27345: PUSH
27346: LD_VAR 0 3
27350: PLUS
27351: ST_TO_ADDR
27352: GO 27370
// length := i_to - i_from ;
27354: LD_ADDR_VAR 0 11
27358: PUSH
27359: LD_VAR 0 3
27363: PUSH
27364: LD_VAR 0 2
27368: MINUS
27369: ST_TO_ADDR
// end else
27370: GO 27433
// begin d := - 1 ;
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: ST_TO_ADDR
// if i_from > i_to then
27381: LD_VAR 0 2
27385: PUSH
27386: LD_VAR 0 3
27390: GREATER
27391: IFFALSE 27411
// length := i_from - i_to else
27393: LD_ADDR_VAR 0 11
27397: PUSH
27398: LD_VAR 0 2
27402: PUSH
27403: LD_VAR 0 3
27407: MINUS
27408: ST_TO_ADDR
27409: GO 27433
// length := ( array - i_to ) + i_from ;
27411: LD_ADDR_VAR 0 11
27415: PUSH
27416: LD_VAR 0 1
27420: PUSH
27421: LD_VAR 0 3
27425: MINUS
27426: PUSH
27427: LD_VAR 0 2
27431: PLUS
27432: ST_TO_ADDR
// end ; if not length then
27433: LD_VAR 0 11
27437: NOT
27438: IFFALSE 27442
// exit ;
27440: GO 27600
// tmp := array ;
27442: LD_ADDR_VAR 0 10
27446: PUSH
27447: LD_VAR 0 1
27451: ST_TO_ADDR
// for i = 1 to length do
27452: LD_ADDR_VAR 0 6
27456: PUSH
27457: DOUBLE
27458: LD_INT 1
27460: DEC
27461: ST_TO_ADDR
27462: LD_VAR 0 11
27466: PUSH
27467: FOR_TO
27468: IFFALSE 27588
// begin for j = 1 to array do
27470: LD_ADDR_VAR 0 7
27474: PUSH
27475: DOUBLE
27476: LD_INT 1
27478: DEC
27479: ST_TO_ADDR
27480: LD_VAR 0 1
27484: PUSH
27485: FOR_TO
27486: IFFALSE 27574
// begin k := j + d ;
27488: LD_ADDR_VAR 0 8
27492: PUSH
27493: LD_VAR 0 7
27497: PUSH
27498: LD_VAR 0 9
27502: PLUS
27503: ST_TO_ADDR
// if k > array then
27504: LD_VAR 0 8
27508: PUSH
27509: LD_VAR 0 1
27513: GREATER
27514: IFFALSE 27524
// k := 1 ;
27516: LD_ADDR_VAR 0 8
27520: PUSH
27521: LD_INT 1
27523: ST_TO_ADDR
// if not k then
27524: LD_VAR 0 8
27528: NOT
27529: IFFALSE 27541
// k := array ;
27531: LD_ADDR_VAR 0 8
27535: PUSH
27536: LD_VAR 0 1
27540: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27541: LD_ADDR_VAR 0 10
27545: PUSH
27546: LD_VAR 0 10
27550: PPUSH
27551: LD_VAR 0 8
27555: PPUSH
27556: LD_VAR 0 1
27560: PUSH
27561: LD_VAR 0 7
27565: ARRAY
27566: PPUSH
27567: CALL_OW 1
27571: ST_TO_ADDR
// end ;
27572: GO 27485
27574: POP
27575: POP
// array := tmp ;
27576: LD_ADDR_VAR 0 1
27580: PUSH
27581: LD_VAR 0 10
27585: ST_TO_ADDR
// end ;
27586: GO 27467
27588: POP
27589: POP
// result := array ;
27590: LD_ADDR_VAR 0 5
27594: PUSH
27595: LD_VAR 0 1
27599: ST_TO_ADDR
// end ;
27600: LD_VAR 0 5
27604: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27605: LD_INT 0
27607: PPUSH
27608: PPUSH
// result := 0 ;
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_INT 0
27616: ST_TO_ADDR
// if not array or not value in array then
27617: LD_VAR 0 1
27621: NOT
27622: PUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_VAR 0 1
27632: IN
27633: NOT
27634: OR
27635: IFFALSE 27639
// exit ;
27637: GO 27693
// for i = 1 to array do
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: DOUBLE
27645: LD_INT 1
27647: DEC
27648: ST_TO_ADDR
27649: LD_VAR 0 1
27653: PUSH
27654: FOR_TO
27655: IFFALSE 27691
// if value = array [ i ] then
27657: LD_VAR 0 2
27661: PUSH
27662: LD_VAR 0 1
27666: PUSH
27667: LD_VAR 0 4
27671: ARRAY
27672: EQUAL
27673: IFFALSE 27689
// begin result := i ;
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_VAR 0 4
27684: ST_TO_ADDR
// exit ;
27685: POP
27686: POP
27687: GO 27693
// end ;
27689: GO 27654
27691: POP
27692: POP
// end ;
27693: LD_VAR 0 3
27697: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27698: LD_INT 0
27700: PPUSH
// vc_chassis := chassis ;
27701: LD_ADDR_OWVAR 37
27705: PUSH
27706: LD_VAR 0 1
27710: ST_TO_ADDR
// vc_engine := engine ;
27711: LD_ADDR_OWVAR 39
27715: PUSH
27716: LD_VAR 0 2
27720: ST_TO_ADDR
// vc_control := control ;
27721: LD_ADDR_OWVAR 38
27725: PUSH
27726: LD_VAR 0 3
27730: ST_TO_ADDR
// vc_weapon := weapon ;
27731: LD_ADDR_OWVAR 40
27735: PUSH
27736: LD_VAR 0 4
27740: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27741: LD_ADDR_OWVAR 41
27745: PUSH
27746: LD_VAR 0 5
27750: ST_TO_ADDR
// end ;
27751: LD_VAR 0 6
27755: RET
// export function WantPlant ( unit ) ; var task ; begin
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
// result := false ;
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_INT 0
27767: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 437
27782: ST_TO_ADDR
// if task then
27783: LD_VAR 0 3
27787: IFFALSE 27815
// if task [ 1 ] [ 1 ] = p then
27789: LD_VAR 0 3
27793: PUSH
27794: LD_INT 1
27796: ARRAY
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PUSH
27802: LD_STRING p
27804: EQUAL
27805: IFFALSE 27815
// result := true ;
27807: LD_ADDR_VAR 0 2
27811: PUSH
27812: LD_INT 1
27814: ST_TO_ADDR
// end ;
27815: LD_VAR 0 2
27819: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27820: LD_INT 0
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
// if pos < 1 then
27826: LD_VAR 0 2
27830: PUSH
27831: LD_INT 1
27833: LESS
27834: IFFALSE 27838
// exit ;
27836: GO 28141
// if pos = 1 then
27838: LD_VAR 0 2
27842: PUSH
27843: LD_INT 1
27845: EQUAL
27846: IFFALSE 27879
// result := Replace ( arr , pos [ 1 ] , value ) else
27848: LD_ADDR_VAR 0 4
27852: PUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: LD_VAR 0 2
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: LD_VAR 0 3
27871: PPUSH
27872: CALL_OW 1
27876: ST_TO_ADDR
27877: GO 28141
// begin tmp := arr ;
27879: LD_ADDR_VAR 0 6
27883: PUSH
27884: LD_VAR 0 1
27888: ST_TO_ADDR
// s_arr := [ tmp ] ;
27889: LD_ADDR_VAR 0 7
27893: PUSH
27894: LD_VAR 0 6
27898: PUSH
27899: EMPTY
27900: LIST
27901: ST_TO_ADDR
// for i = 1 to pos - 1 do
27902: LD_ADDR_VAR 0 5
27906: PUSH
27907: DOUBLE
27908: LD_INT 1
27910: DEC
27911: ST_TO_ADDR
27912: LD_VAR 0 2
27916: PUSH
27917: LD_INT 1
27919: MINUS
27920: PUSH
27921: FOR_TO
27922: IFFALSE 27967
// begin tmp := tmp [ pos [ i ] ] ;
27924: LD_ADDR_VAR 0 6
27928: PUSH
27929: LD_VAR 0 6
27933: PUSH
27934: LD_VAR 0 2
27938: PUSH
27939: LD_VAR 0 5
27943: ARRAY
27944: ARRAY
27945: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27946: LD_ADDR_VAR 0 7
27950: PUSH
27951: LD_VAR 0 7
27955: PUSH
27956: LD_VAR 0 6
27960: PUSH
27961: EMPTY
27962: LIST
27963: ADD
27964: ST_TO_ADDR
// end ;
27965: GO 27921
27967: POP
27968: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27969: LD_ADDR_VAR 0 6
27973: PUSH
27974: LD_VAR 0 6
27978: PPUSH
27979: LD_VAR 0 2
27983: PUSH
27984: LD_VAR 0 2
27988: ARRAY
27989: PPUSH
27990: LD_VAR 0 3
27994: PPUSH
27995: CALL_OW 1
27999: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28000: LD_ADDR_VAR 0 7
28004: PUSH
28005: LD_VAR 0 7
28009: PPUSH
28010: LD_VAR 0 7
28014: PPUSH
28015: LD_VAR 0 6
28019: PPUSH
28020: CALL_OW 1
28024: ST_TO_ADDR
// for i = s_arr downto 2 do
28025: LD_ADDR_VAR 0 5
28029: PUSH
28030: DOUBLE
28031: LD_VAR 0 7
28035: INC
28036: ST_TO_ADDR
28037: LD_INT 2
28039: PUSH
28040: FOR_DOWNTO
28041: IFFALSE 28125
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28043: LD_ADDR_VAR 0 6
28047: PUSH
28048: LD_VAR 0 7
28052: PUSH
28053: LD_VAR 0 5
28057: PUSH
28058: LD_INT 1
28060: MINUS
28061: ARRAY
28062: PPUSH
28063: LD_VAR 0 2
28067: PUSH
28068: LD_VAR 0 5
28072: PUSH
28073: LD_INT 1
28075: MINUS
28076: ARRAY
28077: PPUSH
28078: LD_VAR 0 7
28082: PUSH
28083: LD_VAR 0 5
28087: ARRAY
28088: PPUSH
28089: CALL_OW 1
28093: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28094: LD_ADDR_VAR 0 7
28098: PUSH
28099: LD_VAR 0 7
28103: PPUSH
28104: LD_VAR 0 5
28108: PUSH
28109: LD_INT 1
28111: MINUS
28112: PPUSH
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 1
28122: ST_TO_ADDR
// end ;
28123: GO 28040
28125: POP
28126: POP
// result := s_arr [ 1 ] ;
28127: LD_ADDR_VAR 0 4
28131: PUSH
28132: LD_VAR 0 7
28136: PUSH
28137: LD_INT 1
28139: ARRAY
28140: ST_TO_ADDR
// end ; end ;
28141: LD_VAR 0 4
28145: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28146: LD_INT 0
28148: PPUSH
28149: PPUSH
// if not list then
28150: LD_VAR 0 1
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28250
// i := list [ pos1 ] ;
28159: LD_ADDR_VAR 0 5
28163: PUSH
28164: LD_VAR 0 1
28168: PUSH
28169: LD_VAR 0 2
28173: ARRAY
28174: ST_TO_ADDR
// if not i then
28175: LD_VAR 0 5
28179: NOT
28180: IFFALSE 28184
// exit ;
28182: GO 28250
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28184: LD_ADDR_VAR 0 1
28188: PUSH
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_VAR 0 1
28203: PUSH
28204: LD_VAR 0 3
28208: ARRAY
28209: PPUSH
28210: CALL_OW 1
28214: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28215: LD_ADDR_VAR 0 1
28219: PUSH
28220: LD_VAR 0 1
28224: PPUSH
28225: LD_VAR 0 3
28229: PPUSH
28230: LD_VAR 0 5
28234: PPUSH
28235: CALL_OW 1
28239: ST_TO_ADDR
// result := list ;
28240: LD_ADDR_VAR 0 4
28244: PUSH
28245: LD_VAR 0 1
28249: ST_TO_ADDR
// end ;
28250: LD_VAR 0 4
28254: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28255: LD_INT 0
28257: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28258: LD_ADDR_VAR 0 5
28262: PUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: CALL_OW 250
28272: PPUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL_OW 251
28282: PPUSH
28283: LD_VAR 0 2
28287: PPUSH
28288: LD_VAR 0 3
28292: PPUSH
28293: LD_VAR 0 4
28297: PPUSH
28298: CALL 28308 0 5
28302: ST_TO_ADDR
// end ;
28303: LD_VAR 0 5
28307: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
// if not list then
28314: LD_VAR 0 3
28318: NOT
28319: IFFALSE 28323
// exit ;
28321: GO 28711
// result := [ ] ;
28323: LD_ADDR_VAR 0 6
28327: PUSH
28328: EMPTY
28329: ST_TO_ADDR
// for i in list do
28330: LD_ADDR_VAR 0 7
28334: PUSH
28335: LD_VAR 0 3
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28543
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28343: LD_ADDR_VAR 0 9
28347: PUSH
28348: LD_VAR 0 7
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: CALL_OW 297
28367: ST_TO_ADDR
// if not result then
28368: LD_VAR 0 6
28372: NOT
28373: IFFALSE 28399
// result := [ [ i , tmp ] ] else
28375: LD_ADDR_VAR 0 6
28379: PUSH
28380: LD_VAR 0 7
28384: PUSH
28385: LD_VAR 0 9
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: ST_TO_ADDR
28397: GO 28541
// begin if result [ result ] [ 2 ] < tmp then
28399: LD_VAR 0 6
28403: PUSH
28404: LD_VAR 0 6
28408: ARRAY
28409: PUSH
28410: LD_INT 2
28412: ARRAY
28413: PUSH
28414: LD_VAR 0 9
28418: LESS
28419: IFFALSE 28461
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28421: LD_ADDR_VAR 0 6
28425: PUSH
28426: LD_VAR 0 6
28430: PPUSH
28431: LD_VAR 0 6
28435: PUSH
28436: LD_INT 1
28438: PLUS
28439: PPUSH
28440: LD_VAR 0 7
28444: PUSH
28445: LD_VAR 0 9
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 2
28458: ST_TO_ADDR
28459: GO 28541
// for j = 1 to result do
28461: LD_ADDR_VAR 0 8
28465: PUSH
28466: DOUBLE
28467: LD_INT 1
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 6
28475: PUSH
28476: FOR_TO
28477: IFFALSE 28539
// begin if tmp < result [ j ] [ 2 ] then
28479: LD_VAR 0 9
28483: PUSH
28484: LD_VAR 0 6
28488: PUSH
28489: LD_VAR 0 8
28493: ARRAY
28494: PUSH
28495: LD_INT 2
28497: ARRAY
28498: LESS
28499: IFFALSE 28537
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28501: LD_ADDR_VAR 0 6
28505: PUSH
28506: LD_VAR 0 6
28510: PPUSH
28511: LD_VAR 0 8
28515: PPUSH
28516: LD_VAR 0 7
28520: PUSH
28521: LD_VAR 0 9
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 2
28534: ST_TO_ADDR
// break ;
28535: GO 28539
// end ; end ;
28537: GO 28476
28539: POP
28540: POP
// end ; end ;
28541: GO 28340
28543: POP
28544: POP
// if result and not asc then
28545: LD_VAR 0 6
28549: PUSH
28550: LD_VAR 0 4
28554: NOT
28555: AND
28556: IFFALSE 28631
// begin tmp := result ;
28558: LD_ADDR_VAR 0 9
28562: PUSH
28563: LD_VAR 0 6
28567: ST_TO_ADDR
// for i = tmp downto 1 do
28568: LD_ADDR_VAR 0 7
28572: PUSH
28573: DOUBLE
28574: LD_VAR 0 9
28578: INC
28579: ST_TO_ADDR
28580: LD_INT 1
28582: PUSH
28583: FOR_DOWNTO
28584: IFFALSE 28629
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28586: LD_ADDR_VAR 0 6
28590: PUSH
28591: LD_VAR 0 6
28595: PPUSH
28596: LD_VAR 0 9
28600: PUSH
28601: LD_VAR 0 7
28605: MINUS
28606: PUSH
28607: LD_INT 1
28609: PLUS
28610: PPUSH
28611: LD_VAR 0 9
28615: PUSH
28616: LD_VAR 0 7
28620: ARRAY
28621: PPUSH
28622: CALL_OW 1
28626: ST_TO_ADDR
28627: GO 28583
28629: POP
28630: POP
// end ; tmp := [ ] ;
28631: LD_ADDR_VAR 0 9
28635: PUSH
28636: EMPTY
28637: ST_TO_ADDR
// if mode then
28638: LD_VAR 0 5
28642: IFFALSE 28711
// begin for i = 1 to result do
28644: LD_ADDR_VAR 0 7
28648: PUSH
28649: DOUBLE
28650: LD_INT 1
28652: DEC
28653: ST_TO_ADDR
28654: LD_VAR 0 6
28658: PUSH
28659: FOR_TO
28660: IFFALSE 28699
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28662: LD_ADDR_VAR 0 9
28666: PUSH
28667: LD_VAR 0 9
28671: PPUSH
28672: LD_VAR 0 7
28676: PPUSH
28677: LD_VAR 0 6
28681: PUSH
28682: LD_VAR 0 7
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PPUSH
28692: CALL_OW 1
28696: ST_TO_ADDR
28697: GO 28659
28699: POP
28700: POP
// result := tmp ;
28701: LD_ADDR_VAR 0 6
28705: PUSH
28706: LD_VAR 0 9
28710: ST_TO_ADDR
// end ; end ;
28711: LD_VAR 0 6
28715: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28716: LD_INT 0
28718: PPUSH
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28724: LD_ADDR_VAR 0 5
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if not x or not y then
28746: LD_VAR 0 2
28750: NOT
28751: PUSH
28752: LD_VAR 0 3
28756: NOT
28757: OR
28758: IFFALSE 28762
// exit ;
28760: GO 30408
// if not range then
28762: LD_VAR 0 4
28766: NOT
28767: IFFALSE 28777
// range := 10 ;
28769: LD_ADDR_VAR 0 4
28773: PUSH
28774: LD_INT 10
28776: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28777: LD_ADDR_VAR 0 8
28781: PUSH
28782: LD_INT 81
28784: PUSH
28785: LD_VAR 0 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 92
28796: PUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_VAR 0 3
28806: PUSH
28807: LD_VAR 0 4
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: LD_INT 21
28823: PUSH
28824: LD_INT 3
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: PPUSH
28840: CALL_OW 69
28844: ST_TO_ADDR
// if not tmp then
28845: LD_VAR 0 8
28849: NOT
28850: IFFALSE 28854
// exit ;
28852: GO 30408
// for i in tmp do
28854: LD_ADDR_VAR 0 6
28858: PUSH
28859: LD_VAR 0 8
28863: PUSH
28864: FOR_IN
28865: IFFALSE 30383
// begin points := [ 0 , 0 , 0 ] ;
28867: LD_ADDR_VAR 0 9
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// bpoints := 1 ;
28886: LD_ADDR_VAR 0 10
28890: PUSH
28891: LD_INT 1
28893: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28894: LD_VAR 0 6
28898: PPUSH
28899: CALL_OW 247
28903: PUSH
28904: LD_INT 1
28906: DOUBLE
28907: EQUAL
28908: IFTRUE 28912
28910: GO 29490
28912: POP
// begin if GetClass ( i ) = 1 then
28913: LD_VAR 0 6
28917: PPUSH
28918: CALL_OW 257
28922: PUSH
28923: LD_INT 1
28925: EQUAL
28926: IFFALSE 28947
// points := [ 10 , 5 , 3 ] ;
28928: LD_ADDR_VAR 0 9
28932: PUSH
28933: LD_INT 10
28935: PUSH
28936: LD_INT 5
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28947: LD_VAR 0 6
28951: PPUSH
28952: CALL_OW 257
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 3
28962: PUSH
28963: LD_INT 4
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: IN
28971: IFFALSE 28992
// points := [ 3 , 2 , 1 ] ;
28973: LD_ADDR_VAR 0 9
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28992: LD_VAR 0 6
28996: PPUSH
28997: CALL_OW 257
29001: PUSH
29002: LD_INT 5
29004: EQUAL
29005: IFFALSE 29026
// points := [ 130 , 5 , 2 ] ;
29007: LD_ADDR_VAR 0 9
29011: PUSH
29012: LD_INT 130
29014: PUSH
29015: LD_INT 5
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29026: LD_VAR 0 6
29030: PPUSH
29031: CALL_OW 257
29035: PUSH
29036: LD_INT 8
29038: EQUAL
29039: IFFALSE 29060
// points := [ 35 , 35 , 30 ] ;
29041: LD_ADDR_VAR 0 9
29045: PUSH
29046: LD_INT 35
29048: PUSH
29049: LD_INT 35
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29060: LD_VAR 0 6
29064: PPUSH
29065: CALL_OW 257
29069: PUSH
29070: LD_INT 9
29072: EQUAL
29073: IFFALSE 29094
// points := [ 20 , 55 , 40 ] ;
29075: LD_ADDR_VAR 0 9
29079: PUSH
29080: LD_INT 20
29082: PUSH
29083: LD_INT 55
29085: PUSH
29086: LD_INT 40
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29094: LD_VAR 0 6
29098: PPUSH
29099: CALL_OW 257
29103: PUSH
29104: LD_INT 12
29106: PUSH
29107: LD_INT 16
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: IN
29114: IFFALSE 29135
// points := [ 5 , 3 , 2 ] ;
29116: LD_ADDR_VAR 0 9
29120: PUSH
29121: LD_INT 5
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 2
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29135: LD_VAR 0 6
29139: PPUSH
29140: CALL_OW 257
29144: PUSH
29145: LD_INT 17
29147: EQUAL
29148: IFFALSE 29169
// points := [ 100 , 50 , 75 ] ;
29150: LD_ADDR_VAR 0 9
29154: PUSH
29155: LD_INT 100
29157: PUSH
29158: LD_INT 50
29160: PUSH
29161: LD_INT 75
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29169: LD_VAR 0 6
29173: PPUSH
29174: CALL_OW 257
29178: PUSH
29179: LD_INT 15
29181: EQUAL
29182: IFFALSE 29203
// points := [ 10 , 5 , 3 ] ;
29184: LD_ADDR_VAR 0 9
29188: PUSH
29189: LD_INT 10
29191: PUSH
29192: LD_INT 5
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29203: LD_VAR 0 6
29207: PPUSH
29208: CALL_OW 257
29212: PUSH
29213: LD_INT 14
29215: EQUAL
29216: IFFALSE 29237
// points := [ 10 , 0 , 0 ] ;
29218: LD_ADDR_VAR 0 9
29222: PUSH
29223: LD_INT 10
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29237: LD_VAR 0 6
29241: PPUSH
29242: CALL_OW 257
29246: PUSH
29247: LD_INT 11
29249: EQUAL
29250: IFFALSE 29271
// points := [ 30 , 10 , 5 ] ;
29252: LD_ADDR_VAR 0 9
29256: PUSH
29257: LD_INT 30
29259: PUSH
29260: LD_INT 10
29262: PUSH
29263: LD_INT 5
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_INT 5
29278: PPUSH
29279: CALL_OW 321
29283: PUSH
29284: LD_INT 2
29286: EQUAL
29287: IFFALSE 29304
// bpoints := bpoints * 1.8 ;
29289: LD_ADDR_VAR 0 10
29293: PUSH
29294: LD_VAR 0 10
29298: PUSH
29299: LD_REAL  1.80000000000000E+0000
29302: MUL
29303: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29304: LD_VAR 0 6
29308: PPUSH
29309: CALL_OW 257
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 4
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: IN
29332: PUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: LD_INT 51
29340: PPUSH
29341: CALL_OW 321
29345: PUSH
29346: LD_INT 2
29348: EQUAL
29349: AND
29350: IFFALSE 29367
// bpoints := bpoints * 1.2 ;
29352: LD_ADDR_VAR 0 10
29356: PUSH
29357: LD_VAR 0 10
29361: PUSH
29362: LD_REAL  1.20000000000000E+0000
29365: MUL
29366: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29367: LD_VAR 0 6
29371: PPUSH
29372: CALL_OW 257
29376: PUSH
29377: LD_INT 5
29379: PUSH
29380: LD_INT 7
29382: PUSH
29383: LD_INT 9
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: IN
29391: PUSH
29392: LD_VAR 0 1
29396: PPUSH
29397: LD_INT 52
29399: PPUSH
29400: CALL_OW 321
29404: PUSH
29405: LD_INT 2
29407: EQUAL
29408: AND
29409: IFFALSE 29426
// bpoints := bpoints * 1.5 ;
29411: LD_ADDR_VAR 0 10
29415: PUSH
29416: LD_VAR 0 10
29420: PUSH
29421: LD_REAL  1.50000000000000E+0000
29424: MUL
29425: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29426: LD_VAR 0 1
29430: PPUSH
29431: LD_INT 66
29433: PPUSH
29434: CALL_OW 321
29438: PUSH
29439: LD_INT 2
29441: EQUAL
29442: IFFALSE 29459
// bpoints := bpoints * 1.1 ;
29444: LD_ADDR_VAR 0 10
29448: PUSH
29449: LD_VAR 0 10
29453: PUSH
29454: LD_REAL  1.10000000000000E+0000
29457: MUL
29458: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29459: LD_ADDR_VAR 0 10
29463: PUSH
29464: LD_VAR 0 10
29468: PUSH
29469: LD_VAR 0 6
29473: PPUSH
29474: LD_INT 1
29476: PPUSH
29477: CALL_OW 259
29481: PUSH
29482: LD_REAL  1.15000000000000E+0000
29485: MUL
29486: MUL
29487: ST_TO_ADDR
// end ; unit_vehicle :
29488: GO 30312
29490: LD_INT 2
29492: DOUBLE
29493: EQUAL
29494: IFTRUE 29498
29496: GO 30300
29498: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29499: LD_VAR 0 6
29503: PPUSH
29504: CALL_OW 264
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: LD_INT 42
29514: PUSH
29515: LD_INT 24
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: IN
29523: IFFALSE 29544
// points := [ 25 , 5 , 3 ] ;
29525: LD_ADDR_VAR 0 9
29529: PUSH
29530: LD_INT 25
29532: PUSH
29533: LD_INT 5
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29544: LD_VAR 0 6
29548: PPUSH
29549: CALL_OW 264
29553: PUSH
29554: LD_INT 4
29556: PUSH
29557: LD_INT 43
29559: PUSH
29560: LD_INT 25
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: IN
29568: IFFALSE 29589
// points := [ 40 , 15 , 5 ] ;
29570: LD_ADDR_VAR 0 9
29574: PUSH
29575: LD_INT 40
29577: PUSH
29578: LD_INT 15
29580: PUSH
29581: LD_INT 5
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29589: LD_VAR 0 6
29593: PPUSH
29594: CALL_OW 264
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: LD_INT 23
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: IN
29609: IFFALSE 29630
// points := [ 7 , 25 , 8 ] ;
29611: LD_ADDR_VAR 0 9
29615: PUSH
29616: LD_INT 7
29618: PUSH
29619: LD_INT 25
29621: PUSH
29622: LD_INT 8
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29630: LD_VAR 0 6
29634: PPUSH
29635: CALL_OW 264
29639: PUSH
29640: LD_INT 5
29642: PUSH
29643: LD_INT 27
29645: PUSH
29646: LD_INT 44
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: IN
29654: IFFALSE 29675
// points := [ 14 , 50 , 16 ] ;
29656: LD_ADDR_VAR 0 9
29660: PUSH
29661: LD_INT 14
29663: PUSH
29664: LD_INT 50
29666: PUSH
29667: LD_INT 16
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29675: LD_VAR 0 6
29679: PPUSH
29680: CALL_OW 264
29684: PUSH
29685: LD_INT 6
29687: PUSH
29688: LD_INT 46
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: IN
29695: IFFALSE 29716
// points := [ 32 , 120 , 70 ] ;
29697: LD_ADDR_VAR 0 9
29701: PUSH
29702: LD_INT 32
29704: PUSH
29705: LD_INT 120
29707: PUSH
29708: LD_INT 70
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29716: LD_VAR 0 6
29720: PPUSH
29721: CALL_OW 264
29725: PUSH
29726: LD_INT 7
29728: PUSH
29729: LD_INT 28
29731: PUSH
29732: LD_INT 45
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: LIST
29739: IN
29740: IFFALSE 29761
// points := [ 35 , 20 , 45 ] ;
29742: LD_ADDR_VAR 0 9
29746: PUSH
29747: LD_INT 35
29749: PUSH
29750: LD_INT 20
29752: PUSH
29753: LD_INT 45
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29761: LD_VAR 0 6
29765: PPUSH
29766: CALL_OW 264
29770: PUSH
29771: LD_INT 47
29773: PUSH
29774: EMPTY
29775: LIST
29776: IN
29777: IFFALSE 29798
// points := [ 67 , 45 , 75 ] ;
29779: LD_ADDR_VAR 0 9
29783: PUSH
29784: LD_INT 67
29786: PUSH
29787: LD_INT 45
29789: PUSH
29790: LD_INT 75
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29798: LD_VAR 0 6
29802: PPUSH
29803: CALL_OW 264
29807: PUSH
29808: LD_INT 26
29810: PUSH
29811: EMPTY
29812: LIST
29813: IN
29814: IFFALSE 29835
// points := [ 120 , 30 , 80 ] ;
29816: LD_ADDR_VAR 0 9
29820: PUSH
29821: LD_INT 120
29823: PUSH
29824: LD_INT 30
29826: PUSH
29827: LD_INT 80
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29835: LD_VAR 0 6
29839: PPUSH
29840: CALL_OW 264
29844: PUSH
29845: LD_INT 22
29847: PUSH
29848: EMPTY
29849: LIST
29850: IN
29851: IFFALSE 29872
// points := [ 40 , 1 , 1 ] ;
29853: LD_ADDR_VAR 0 9
29857: PUSH
29858: LD_INT 40
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29872: LD_VAR 0 6
29876: PPUSH
29877: CALL_OW 264
29881: PUSH
29882: LD_INT 29
29884: PUSH
29885: EMPTY
29886: LIST
29887: IN
29888: IFFALSE 29909
// points := [ 70 , 200 , 400 ] ;
29890: LD_ADDR_VAR 0 9
29894: PUSH
29895: LD_INT 70
29897: PUSH
29898: LD_INT 200
29900: PUSH
29901: LD_INT 400
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29909: LD_VAR 0 6
29913: PPUSH
29914: CALL_OW 264
29918: PUSH
29919: LD_INT 14
29921: PUSH
29922: LD_INT 53
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: IN
29929: IFFALSE 29950
// points := [ 40 , 10 , 20 ] ;
29931: LD_ADDR_VAR 0 9
29935: PUSH
29936: LD_INT 40
29938: PUSH
29939: LD_INT 10
29941: PUSH
29942: LD_INT 20
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29950: LD_VAR 0 6
29954: PPUSH
29955: CALL_OW 264
29959: PUSH
29960: LD_INT 9
29962: PUSH
29963: EMPTY
29964: LIST
29965: IN
29966: IFFALSE 29987
// points := [ 5 , 70 , 20 ] ;
29968: LD_ADDR_VAR 0 9
29972: PUSH
29973: LD_INT 5
29975: PUSH
29976: LD_INT 70
29978: PUSH
29979: LD_INT 20
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29987: LD_VAR 0 6
29991: PPUSH
29992: CALL_OW 264
29996: PUSH
29997: LD_INT 10
29999: PUSH
30000: EMPTY
30001: LIST
30002: IN
30003: IFFALSE 30024
// points := [ 35 , 110 , 70 ] ;
30005: LD_ADDR_VAR 0 9
30009: PUSH
30010: LD_INT 35
30012: PUSH
30013: LD_INT 110
30015: PUSH
30016: LD_INT 70
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30024: LD_VAR 0 6
30028: PPUSH
30029: CALL_OW 265
30033: PUSH
30034: LD_INT 25
30036: EQUAL
30037: IFFALSE 30058
// points := [ 80 , 65 , 100 ] ;
30039: LD_ADDR_VAR 0 9
30043: PUSH
30044: LD_INT 80
30046: PUSH
30047: LD_INT 65
30049: PUSH
30050: LD_INT 100
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30058: LD_VAR 0 6
30062: PPUSH
30063: CALL_OW 263
30067: PUSH
30068: LD_INT 1
30070: EQUAL
30071: IFFALSE 30106
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30073: LD_ADDR_VAR 0 10
30077: PUSH
30078: LD_VAR 0 10
30082: PUSH
30083: LD_VAR 0 6
30087: PPUSH
30088: CALL_OW 311
30092: PPUSH
30093: LD_INT 3
30095: PPUSH
30096: CALL_OW 259
30100: PUSH
30101: LD_INT 4
30103: MUL
30104: MUL
30105: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30106: LD_VAR 0 6
30110: PPUSH
30111: CALL_OW 263
30115: PUSH
30116: LD_INT 2
30118: EQUAL
30119: IFFALSE 30170
// begin j := IsControledBy ( i ) ;
30121: LD_ADDR_VAR 0 7
30125: PUSH
30126: LD_VAR 0 6
30130: PPUSH
30131: CALL_OW 312
30135: ST_TO_ADDR
// if j then
30136: LD_VAR 0 7
30140: IFFALSE 30170
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30142: LD_ADDR_VAR 0 10
30146: PUSH
30147: LD_VAR 0 10
30151: PUSH
30152: LD_VAR 0 7
30156: PPUSH
30157: LD_INT 3
30159: PPUSH
30160: CALL_OW 259
30164: PUSH
30165: LD_INT 3
30167: MUL
30168: MUL
30169: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30170: LD_VAR 0 6
30174: PPUSH
30175: CALL_OW 264
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: LD_INT 46
30188: PUSH
30189: LD_INT 44
30191: PUSH
30192: LD_INT 47
30194: PUSH
30195: LD_INT 45
30197: PUSH
30198: LD_INT 28
30200: PUSH
30201: LD_INT 7
30203: PUSH
30204: LD_INT 27
30206: PUSH
30207: LD_INT 29
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: IN
30222: PUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: LD_INT 52
30230: PPUSH
30231: CALL_OW 321
30235: PUSH
30236: LD_INT 2
30238: EQUAL
30239: AND
30240: IFFALSE 30257
// bpoints := bpoints * 1.2 ;
30242: LD_ADDR_VAR 0 10
30246: PUSH
30247: LD_VAR 0 10
30251: PUSH
30252: LD_REAL  1.20000000000000E+0000
30255: MUL
30256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30257: LD_VAR 0 6
30261: PPUSH
30262: CALL_OW 264
30266: PUSH
30267: LD_INT 6
30269: PUSH
30270: LD_INT 46
30272: PUSH
30273: LD_INT 47
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: IN
30281: IFFALSE 30298
// bpoints := bpoints * 1.2 ;
30283: LD_ADDR_VAR 0 10
30287: PUSH
30288: LD_VAR 0 10
30292: PUSH
30293: LD_REAL  1.20000000000000E+0000
30296: MUL
30297: ST_TO_ADDR
// end ; unit_building :
30298: GO 30312
30300: LD_INT 3
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30311
30308: POP
// ; end ;
30309: GO 30312
30311: POP
// for j = 1 to 3 do
30312: LD_ADDR_VAR 0 7
30316: PUSH
30317: DOUBLE
30318: LD_INT 1
30320: DEC
30321: ST_TO_ADDR
30322: LD_INT 3
30324: PUSH
30325: FOR_TO
30326: IFFALSE 30379
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30328: LD_ADDR_VAR 0 5
30332: PUSH
30333: LD_VAR 0 5
30337: PPUSH
30338: LD_VAR 0 7
30342: PPUSH
30343: LD_VAR 0 5
30347: PUSH
30348: LD_VAR 0 7
30352: ARRAY
30353: PUSH
30354: LD_VAR 0 9
30358: PUSH
30359: LD_VAR 0 7
30363: ARRAY
30364: PUSH
30365: LD_VAR 0 10
30369: MUL
30370: PLUS
30371: PPUSH
30372: CALL_OW 1
30376: ST_TO_ADDR
30377: GO 30325
30379: POP
30380: POP
// end ;
30381: GO 28864
30383: POP
30384: POP
// result := Replace ( result , 4 , tmp ) ;
30385: LD_ADDR_VAR 0 5
30389: PUSH
30390: LD_VAR 0 5
30394: PPUSH
30395: LD_INT 4
30397: PPUSH
30398: LD_VAR 0 8
30402: PPUSH
30403: CALL_OW 1
30407: ST_TO_ADDR
// end ;
30408: LD_VAR 0 5
30412: RET
// export function DangerAtRange ( unit , range ) ; begin
30413: LD_INT 0
30415: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_VAR 0 1
30425: PPUSH
30426: CALL_OW 255
30430: PPUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 250
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 251
30450: PPUSH
30451: LD_VAR 0 2
30455: PPUSH
30456: CALL 28716 0 4
30460: ST_TO_ADDR
// end ;
30461: LD_VAR 0 3
30465: RET
// export function DangerInArea ( side , area ) ; begin
30466: LD_INT 0
30468: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_INT 81
30481: PUSH
30482: LD_VAR 0 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PPUSH
30491: CALL_OW 70
30495: ST_TO_ADDR
// end ;
30496: LD_VAR 0 3
30500: RET
// export function IsExtension ( b ) ; begin
30501: LD_INT 0
30503: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: LD_VAR 0 1
30513: PUSH
30514: LD_INT 23
30516: PUSH
30517: LD_INT 20
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_INT 17
30525: PUSH
30526: LD_INT 24
30528: PUSH
30529: LD_INT 21
30531: PUSH
30532: LD_INT 19
30534: PUSH
30535: LD_INT 16
30537: PUSH
30538: LD_INT 25
30540: PUSH
30541: LD_INT 18
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: IN
30556: ST_TO_ADDR
// end ;
30557: LD_VAR 0 2
30561: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30562: LD_INT 0
30564: PPUSH
30565: PPUSH
30566: PPUSH
// result := [ ] ;
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: EMPTY
30573: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30574: LD_ADDR_VAR 0 4
30578: PUSH
30579: LD_VAR 0 2
30583: PPUSH
30584: LD_INT 21
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PPUSH
30594: CALL_OW 70
30598: ST_TO_ADDR
// if not tmp then
30599: LD_VAR 0 4
30603: NOT
30604: IFFALSE 30608
// exit ;
30606: GO 30666
// for i in tmp do
30608: LD_ADDR_VAR 0 5
30612: PUSH
30613: LD_VAR 0 4
30617: PUSH
30618: FOR_IN
30619: IFFALSE 30654
// if GetBase ( i ) <> base then
30621: LD_VAR 0 5
30625: PPUSH
30626: CALL_OW 274
30630: PUSH
30631: LD_VAR 0 1
30635: NONEQUAL
30636: IFFALSE 30652
// ComLinkToBase ( base , i ) ;
30638: LD_VAR 0 1
30642: PPUSH
30643: LD_VAR 0 5
30647: PPUSH
30648: CALL_OW 169
30652: GO 30618
30654: POP
30655: POP
// result := tmp ;
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: ST_TO_ADDR
// end ;
30666: LD_VAR 0 3
30670: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30671: LD_INT 0
30673: PPUSH
30674: PPUSH
// if BuildingStatus ( b ) = bs_build then
30675: LD_VAR 0 2
30679: PPUSH
30680: CALL_OW 461
30684: PUSH
30685: LD_INT 1
30687: EQUAL
30688: IFFALSE 30748
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30690: LD_VAR 0 1
30694: PPUSH
30695: LD_STRING h
30697: PUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 250
30707: PUSH
30708: LD_VAR 0 2
30712: PPUSH
30713: CALL_OW 251
30717: PUSH
30718: LD_VAR 0 2
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: PPUSH
30744: CALL_OW 446
// end ;
30748: LD_VAR 0 3
30752: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30753: LD_INT 0
30755: PPUSH
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30761: LD_VAR 0 1
30765: NOT
30766: PUSH
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 263
30776: PUSH
30777: LD_INT 2
30779: EQUAL
30780: NOT
30781: OR
30782: IFFALSE 30786
// exit ;
30784: GO 31102
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30786: LD_ADDR_VAR 0 6
30790: PUSH
30791: LD_INT 22
30793: PUSH
30794: LD_VAR 0 1
30798: PPUSH
30799: CALL_OW 255
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 30
30813: PUSH
30814: LD_INT 36
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 34
30823: PUSH
30824: LD_INT 31
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 69
30844: ST_TO_ADDR
// if not tmp then
30845: LD_VAR 0 6
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 31102
// result := [ ] ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: EMPTY
30860: ST_TO_ADDR
// for i in tmp do
30861: LD_ADDR_VAR 0 3
30865: PUSH
30866: LD_VAR 0 6
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30943
// begin t := UnitsInside ( i ) ;
30874: LD_ADDR_VAR 0 4
30878: PUSH
30879: LD_VAR 0 3
30883: PPUSH
30884: CALL_OW 313
30888: ST_TO_ADDR
// if t then
30889: LD_VAR 0 4
30893: IFFALSE 30941
// for j in t do
30895: LD_ADDR_VAR 0 7
30899: PUSH
30900: LD_VAR 0 4
30904: PUSH
30905: FOR_IN
30906: IFFALSE 30939
// result := Insert ( result , result + 1 , j ) ;
30908: LD_ADDR_VAR 0 2
30912: PUSH
30913: LD_VAR 0 2
30917: PPUSH
30918: LD_VAR 0 2
30922: PUSH
30923: LD_INT 1
30925: PLUS
30926: PPUSH
30927: LD_VAR 0 7
30931: PPUSH
30932: CALL_OW 2
30936: ST_TO_ADDR
30937: GO 30905
30939: POP
30940: POP
// end ;
30941: GO 30871
30943: POP
30944: POP
// if not result then
30945: LD_VAR 0 2
30949: NOT
30950: IFFALSE 30954
// exit ;
30952: GO 31102
// mech := result [ 1 ] ;
30954: LD_ADDR_VAR 0 5
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: LD_INT 1
30966: ARRAY
30967: ST_TO_ADDR
// if result > 1 then
30968: LD_VAR 0 2
30972: PUSH
30973: LD_INT 1
30975: GREATER
30976: IFFALSE 31088
// for i = 2 to result do
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: DOUBLE
30984: LD_INT 2
30986: DEC
30987: ST_TO_ADDR
30988: LD_VAR 0 2
30992: PUSH
30993: FOR_TO
30994: IFFALSE 31086
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30996: LD_ADDR_VAR 0 4
31000: PUSH
31001: LD_VAR 0 2
31005: PUSH
31006: LD_VAR 0 3
31010: ARRAY
31011: PPUSH
31012: LD_INT 3
31014: PPUSH
31015: CALL_OW 259
31019: PUSH
31020: LD_VAR 0 2
31024: PUSH
31025: LD_VAR 0 3
31029: ARRAY
31030: PPUSH
31031: CALL_OW 432
31035: MINUS
31036: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31037: LD_VAR 0 4
31041: PUSH
31042: LD_VAR 0 5
31046: PPUSH
31047: LD_INT 3
31049: PPUSH
31050: CALL_OW 259
31054: PUSH
31055: LD_VAR 0 5
31059: PPUSH
31060: CALL_OW 432
31064: MINUS
31065: GREATEREQUAL
31066: IFFALSE 31084
// mech := result [ i ] ;
31068: LD_ADDR_VAR 0 5
31072: PUSH
31073: LD_VAR 0 2
31077: PUSH
31078: LD_VAR 0 3
31082: ARRAY
31083: ST_TO_ADDR
// end ;
31084: GO 30993
31086: POP
31087: POP
// ComLinkTo ( vehicle , mech ) ;
31088: LD_VAR 0 1
31092: PPUSH
31093: LD_VAR 0 5
31097: PPUSH
31098: CALL_OW 135
// end ;
31102: LD_VAR 0 2
31106: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31107: LD_INT 0
31109: PPUSH
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
31114: PPUSH
31115: PPUSH
31116: PPUSH
31117: PPUSH
31118: PPUSH
31119: PPUSH
31120: PPUSH
31121: PPUSH
// result := [ ] ;
31122: LD_ADDR_VAR 0 7
31126: PUSH
31127: EMPTY
31128: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 266
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: IN
31149: NOT
31150: IFFALSE 31154
// exit ;
31152: GO 32785
// if name then
31154: LD_VAR 0 3
31158: IFFALSE 31174
// SetBName ( base_dep , name ) ;
31160: LD_VAR 0 1
31164: PPUSH
31165: LD_VAR 0 3
31169: PPUSH
31170: CALL_OW 500
// base := GetBase ( base_dep ) ;
31174: LD_ADDR_VAR 0 15
31178: PUSH
31179: LD_VAR 0 1
31183: PPUSH
31184: CALL_OW 274
31188: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31189: LD_ADDR_VAR 0 16
31193: PUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 255
31203: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31204: LD_ADDR_VAR 0 17
31208: PUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 248
31218: ST_TO_ADDR
// if sources then
31219: LD_VAR 0 5
31223: IFFALSE 31270
// for i = 1 to 3 do
31225: LD_ADDR_VAR 0 8
31229: PUSH
31230: DOUBLE
31231: LD_INT 1
31233: DEC
31234: ST_TO_ADDR
31235: LD_INT 3
31237: PUSH
31238: FOR_TO
31239: IFFALSE 31268
// AddResourceType ( base , i , sources [ i ] ) ;
31241: LD_VAR 0 15
31245: PPUSH
31246: LD_VAR 0 8
31250: PPUSH
31251: LD_VAR 0 5
31255: PUSH
31256: LD_VAR 0 8
31260: ARRAY
31261: PPUSH
31262: CALL_OW 276
31266: GO 31238
31268: POP
31269: POP
// buildings := GetBaseBuildings ( base , area ) ;
31270: LD_ADDR_VAR 0 18
31274: PUSH
31275: LD_VAR 0 15
31279: PPUSH
31280: LD_VAR 0 2
31284: PPUSH
31285: CALL 30562 0 2
31289: ST_TO_ADDR
// InitHc ;
31290: CALL_OW 19
// InitUc ;
31294: CALL_OW 18
// uc_side := side ;
31298: LD_ADDR_OWVAR 20
31302: PUSH
31303: LD_VAR 0 16
31307: ST_TO_ADDR
// uc_nation := nation ;
31308: LD_ADDR_OWVAR 21
31312: PUSH
31313: LD_VAR 0 17
31317: ST_TO_ADDR
// if buildings then
31318: LD_VAR 0 18
31322: IFFALSE 32644
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31324: LD_ADDR_VAR 0 19
31328: PUSH
31329: LD_VAR 0 18
31333: PPUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 30
31339: PUSH
31340: LD_INT 29
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 30
31349: PUSH
31350: LD_INT 30
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 72
31366: ST_TO_ADDR
// if tmp then
31367: LD_VAR 0 19
31371: IFFALSE 31419
// for i in tmp do
31373: LD_ADDR_VAR 0 8
31377: PUSH
31378: LD_VAR 0 19
31382: PUSH
31383: FOR_IN
31384: IFFALSE 31417
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31386: LD_VAR 0 8
31390: PPUSH
31391: CALL_OW 250
31395: PPUSH
31396: LD_VAR 0 8
31400: PPUSH
31401: CALL_OW 251
31405: PPUSH
31406: LD_VAR 0 16
31410: PPUSH
31411: CALL_OW 441
31415: GO 31383
31417: POP
31418: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31419: LD_VAR 0 18
31423: PPUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 30
31429: PUSH
31430: LD_INT 32
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 30
31439: PUSH
31440: LD_INT 33
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 72
31456: IFFALSE 31544
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31458: LD_ADDR_VAR 0 8
31462: PUSH
31463: LD_VAR 0 18
31467: PPUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: LD_INT 32
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 30
31483: PUSH
31484: LD_INT 33
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: PPUSH
31496: CALL_OW 72
31500: PUSH
31501: FOR_IN
31502: IFFALSE 31542
// begin if not GetBWeapon ( i ) then
31504: LD_VAR 0 8
31508: PPUSH
31509: CALL_OW 269
31513: NOT
31514: IFFALSE 31540
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31516: LD_VAR 0 8
31520: PPUSH
31521: LD_VAR 0 8
31525: PPUSH
31526: LD_VAR 0 2
31530: PPUSH
31531: CALL 32790 0 2
31535: PPUSH
31536: CALL_OW 431
// end ;
31540: GO 31501
31542: POP
31543: POP
// end ; for i = 1 to personel do
31544: LD_ADDR_VAR 0 8
31548: PUSH
31549: DOUBLE
31550: LD_INT 1
31552: DEC
31553: ST_TO_ADDR
31554: LD_VAR 0 6
31558: PUSH
31559: FOR_TO
31560: IFFALSE 32624
// begin if i > 4 then
31562: LD_VAR 0 8
31566: PUSH
31567: LD_INT 4
31569: GREATER
31570: IFFALSE 31574
// break ;
31572: GO 32624
// case i of 1 :
31574: LD_VAR 0 8
31578: PUSH
31579: LD_INT 1
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31667
31587: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31588: LD_ADDR_VAR 0 12
31592: PUSH
31593: LD_VAR 0 18
31597: PPUSH
31598: LD_INT 22
31600: PUSH
31601: LD_VAR 0 16
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 58
31612: PUSH
31613: EMPTY
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 30
31621: PUSH
31622: LD_INT 32
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 30
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 30
31641: PUSH
31642: LD_INT 5
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: PPUSH
31660: CALL_OW 72
31664: ST_TO_ADDR
31665: GO 31889
31667: LD_INT 2
31669: DOUBLE
31670: EQUAL
31671: IFTRUE 31675
31673: GO 31737
31675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31676: LD_ADDR_VAR 0 12
31680: PUSH
31681: LD_VAR 0 18
31685: PPUSH
31686: LD_INT 22
31688: PUSH
31689: LD_VAR 0 16
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 30
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 30
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PPUSH
31730: CALL_OW 72
31734: ST_TO_ADDR
31735: GO 31889
31737: LD_INT 3
31739: DOUBLE
31740: EQUAL
31741: IFTRUE 31745
31743: GO 31807
31745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31746: LD_ADDR_VAR 0 12
31750: PUSH
31751: LD_VAR 0 18
31755: PPUSH
31756: LD_INT 22
31758: PUSH
31759: LD_VAR 0 16
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 30
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 30
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PPUSH
31800: CALL_OW 72
31804: ST_TO_ADDR
31805: GO 31889
31807: LD_INT 4
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31888
31815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31816: LD_ADDR_VAR 0 12
31820: PUSH
31821: LD_VAR 0 18
31825: PPUSH
31826: LD_INT 22
31828: PUSH
31829: LD_VAR 0 16
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 30
31843: PUSH
31844: LD_INT 6
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 30
31853: PUSH
31854: LD_INT 7
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 30
31863: PUSH
31864: LD_INT 8
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PPUSH
31881: CALL_OW 72
31885: ST_TO_ADDR
31886: GO 31889
31888: POP
// if i = 1 then
31889: LD_VAR 0 8
31893: PUSH
31894: LD_INT 1
31896: EQUAL
31897: IFFALSE 32008
// begin tmp := [ ] ;
31899: LD_ADDR_VAR 0 19
31903: PUSH
31904: EMPTY
31905: ST_TO_ADDR
// for j in f do
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_VAR 0 12
31915: PUSH
31916: FOR_IN
31917: IFFALSE 31990
// if GetBType ( j ) = b_bunker then
31919: LD_VAR 0 9
31923: PPUSH
31924: CALL_OW 266
31928: PUSH
31929: LD_INT 32
31931: EQUAL
31932: IFFALSE 31959
// tmp := Insert ( tmp , 1 , j ) else
31934: LD_ADDR_VAR 0 19
31938: PUSH
31939: LD_VAR 0 19
31943: PPUSH
31944: LD_INT 1
31946: PPUSH
31947: LD_VAR 0 9
31951: PPUSH
31952: CALL_OW 2
31956: ST_TO_ADDR
31957: GO 31988
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31959: LD_ADDR_VAR 0 19
31963: PUSH
31964: LD_VAR 0 19
31968: PPUSH
31969: LD_VAR 0 19
31973: PUSH
31974: LD_INT 1
31976: PLUS
31977: PPUSH
31978: LD_VAR 0 9
31982: PPUSH
31983: CALL_OW 2
31987: ST_TO_ADDR
31988: GO 31916
31990: POP
31991: POP
// if tmp then
31992: LD_VAR 0 19
31996: IFFALSE 32008
// f := tmp ;
31998: LD_ADDR_VAR 0 12
32002: PUSH
32003: LD_VAR 0 19
32007: ST_TO_ADDR
// end ; x := personel [ i ] ;
32008: LD_ADDR_VAR 0 13
32012: PUSH
32013: LD_VAR 0 6
32017: PUSH
32018: LD_VAR 0 8
32022: ARRAY
32023: ST_TO_ADDR
// if x = - 1 then
32024: LD_VAR 0 13
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: EQUAL
32033: IFFALSE 32242
// begin for j in f do
32035: LD_ADDR_VAR 0 9
32039: PUSH
32040: LD_VAR 0 12
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32238
// repeat InitHc ;
32048: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32052: LD_VAR 0 9
32056: PPUSH
32057: CALL_OW 266
32061: PUSH
32062: LD_INT 5
32064: EQUAL
32065: IFFALSE 32135
// begin if UnitsInside ( j ) < 3 then
32067: LD_VAR 0 9
32071: PPUSH
32072: CALL_OW 313
32076: PUSH
32077: LD_INT 3
32079: LESS
32080: IFFALSE 32116
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32082: LD_INT 0
32084: PPUSH
32085: LD_INT 5
32087: PUSH
32088: LD_INT 8
32090: PUSH
32091: LD_INT 9
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: PUSH
32099: LD_VAR 0 17
32103: ARRAY
32104: PPUSH
32105: LD_VAR 0 4
32109: PPUSH
32110: CALL_OW 380
32114: GO 32133
// PrepareHuman ( false , i , skill ) ;
32116: LD_INT 0
32118: PPUSH
32119: LD_VAR 0 8
32123: PPUSH
32124: LD_VAR 0 4
32128: PPUSH
32129: CALL_OW 380
// end else
32133: GO 32152
// PrepareHuman ( false , i , skill ) ;
32135: LD_INT 0
32137: PPUSH
32138: LD_VAR 0 8
32142: PPUSH
32143: LD_VAR 0 4
32147: PPUSH
32148: CALL_OW 380
// un := CreateHuman ;
32152: LD_ADDR_VAR 0 14
32156: PUSH
32157: CALL_OW 44
32161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32162: LD_ADDR_VAR 0 7
32166: PUSH
32167: LD_VAR 0 7
32171: PPUSH
32172: LD_INT 1
32174: PPUSH
32175: LD_VAR 0 14
32179: PPUSH
32180: CALL_OW 2
32184: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32185: LD_VAR 0 14
32189: PPUSH
32190: LD_VAR 0 9
32194: PPUSH
32195: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32199: LD_VAR 0 9
32203: PPUSH
32204: CALL_OW 313
32208: PUSH
32209: LD_INT 6
32211: EQUAL
32212: PUSH
32213: LD_VAR 0 9
32217: PPUSH
32218: CALL_OW 266
32222: PUSH
32223: LD_INT 32
32225: PUSH
32226: LD_INT 31
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: IN
32233: OR
32234: IFFALSE 32048
32236: GO 32045
32238: POP
32239: POP
// end else
32240: GO 32622
// for j = 1 to x do
32242: LD_ADDR_VAR 0 9
32246: PUSH
32247: DOUBLE
32248: LD_INT 1
32250: DEC
32251: ST_TO_ADDR
32252: LD_VAR 0 13
32256: PUSH
32257: FOR_TO
32258: IFFALSE 32620
// begin InitHc ;
32260: CALL_OW 19
// if not f then
32264: LD_VAR 0 12
32268: NOT
32269: IFFALSE 32358
// begin PrepareHuman ( false , i , skill ) ;
32271: LD_INT 0
32273: PPUSH
32274: LD_VAR 0 8
32278: PPUSH
32279: LD_VAR 0 4
32283: PPUSH
32284: CALL_OW 380
// un := CreateHuman ;
32288: LD_ADDR_VAR 0 14
32292: PUSH
32293: CALL_OW 44
32297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32298: LD_ADDR_VAR 0 7
32302: PUSH
32303: LD_VAR 0 7
32307: PPUSH
32308: LD_INT 1
32310: PPUSH
32311: LD_VAR 0 14
32315: PPUSH
32316: CALL_OW 2
32320: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32321: LD_VAR 0 14
32325: PPUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 250
32335: PPUSH
32336: LD_VAR 0 1
32340: PPUSH
32341: CALL_OW 251
32345: PPUSH
32346: LD_INT 10
32348: PPUSH
32349: LD_INT 0
32351: PPUSH
32352: CALL_OW 50
// continue ;
32356: GO 32257
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32358: LD_VAR 0 12
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: PPUSH
32367: CALL_OW 313
32371: PUSH
32372: LD_VAR 0 12
32376: PUSH
32377: LD_INT 1
32379: ARRAY
32380: PPUSH
32381: CALL_OW 266
32385: PUSH
32386: LD_INT 32
32388: PUSH
32389: LD_INT 31
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: IN
32396: AND
32397: PUSH
32398: LD_VAR 0 12
32402: PUSH
32403: LD_INT 1
32405: ARRAY
32406: PPUSH
32407: CALL_OW 313
32411: PUSH
32412: LD_INT 6
32414: EQUAL
32415: OR
32416: IFFALSE 32436
// f := Delete ( f , 1 ) ;
32418: LD_ADDR_VAR 0 12
32422: PUSH
32423: LD_VAR 0 12
32427: PPUSH
32428: LD_INT 1
32430: PPUSH
32431: CALL_OW 3
32435: ST_TO_ADDR
// if not f then
32436: LD_VAR 0 12
32440: NOT
32441: IFFALSE 32459
// begin x := x + 2 ;
32443: LD_ADDR_VAR 0 13
32447: PUSH
32448: LD_VAR 0 13
32452: PUSH
32453: LD_INT 2
32455: PLUS
32456: ST_TO_ADDR
// continue ;
32457: GO 32257
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32459: LD_VAR 0 12
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: PPUSH
32468: CALL_OW 266
32472: PUSH
32473: LD_INT 5
32475: EQUAL
32476: IFFALSE 32550
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32478: LD_VAR 0 12
32482: PUSH
32483: LD_INT 1
32485: ARRAY
32486: PPUSH
32487: CALL_OW 313
32491: PUSH
32492: LD_INT 3
32494: LESS
32495: IFFALSE 32531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32497: LD_INT 0
32499: PPUSH
32500: LD_INT 5
32502: PUSH
32503: LD_INT 8
32505: PUSH
32506: LD_INT 9
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: PUSH
32514: LD_VAR 0 17
32518: ARRAY
32519: PPUSH
32520: LD_VAR 0 4
32524: PPUSH
32525: CALL_OW 380
32529: GO 32548
// PrepareHuman ( false , i , skill ) ;
32531: LD_INT 0
32533: PPUSH
32534: LD_VAR 0 8
32538: PPUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: CALL_OW 380
// end else
32548: GO 32567
// PrepareHuman ( false , i , skill ) ;
32550: LD_INT 0
32552: PPUSH
32553: LD_VAR 0 8
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: CALL_OW 380
// un := CreateHuman ;
32567: LD_ADDR_VAR 0 14
32571: PUSH
32572: CALL_OW 44
32576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32577: LD_ADDR_VAR 0 7
32581: PUSH
32582: LD_VAR 0 7
32586: PPUSH
32587: LD_INT 1
32589: PPUSH
32590: LD_VAR 0 14
32594: PPUSH
32595: CALL_OW 2
32599: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32600: LD_VAR 0 14
32604: PPUSH
32605: LD_VAR 0 12
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PPUSH
32614: CALL_OW 52
// end ;
32618: GO 32257
32620: POP
32621: POP
// end ;
32622: GO 31559
32624: POP
32625: POP
// result := result ^ buildings ;
32626: LD_ADDR_VAR 0 7
32630: PUSH
32631: LD_VAR 0 7
32635: PUSH
32636: LD_VAR 0 18
32640: ADD
32641: ST_TO_ADDR
// end else
32642: GO 32785
// begin for i = 1 to personel do
32644: LD_ADDR_VAR 0 8
32648: PUSH
32649: DOUBLE
32650: LD_INT 1
32652: DEC
32653: ST_TO_ADDR
32654: LD_VAR 0 6
32658: PUSH
32659: FOR_TO
32660: IFFALSE 32783
// begin if i > 4 then
32662: LD_VAR 0 8
32666: PUSH
32667: LD_INT 4
32669: GREATER
32670: IFFALSE 32674
// break ;
32672: GO 32783
// x := personel [ i ] ;
32674: LD_ADDR_VAR 0 13
32678: PUSH
32679: LD_VAR 0 6
32683: PUSH
32684: LD_VAR 0 8
32688: ARRAY
32689: ST_TO_ADDR
// if x = - 1 then
32690: LD_VAR 0 13
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: EQUAL
32699: IFFALSE 32703
// continue ;
32701: GO 32659
// PrepareHuman ( false , i , skill ) ;
32703: LD_INT 0
32705: PPUSH
32706: LD_VAR 0 8
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: CALL_OW 380
// un := CreateHuman ;
32720: LD_ADDR_VAR 0 14
32724: PUSH
32725: CALL_OW 44
32729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32730: LD_VAR 0 14
32734: PPUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 250
32744: PPUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 251
32754: PPUSH
32755: LD_INT 10
32757: PPUSH
32758: LD_INT 0
32760: PPUSH
32761: CALL_OW 50
// result := result ^ un ;
32765: LD_ADDR_VAR 0 7
32769: PUSH
32770: LD_VAR 0 7
32774: PUSH
32775: LD_VAR 0 14
32779: ADD
32780: ST_TO_ADDR
// end ;
32781: GO 32659
32783: POP
32784: POP
// end ; end ;
32785: LD_VAR 0 7
32789: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32790: LD_INT 0
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
// result := false ;
32808: LD_ADDR_VAR 0 3
32812: PUSH
32813: LD_INT 0
32815: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32816: LD_VAR 0 1
32820: NOT
32821: PUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 266
32831: PUSH
32832: LD_INT 32
32834: PUSH
32835: LD_INT 33
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: IN
32842: NOT
32843: OR
32844: IFFALSE 32848
// exit ;
32846: GO 33984
// nat := GetNation ( tower ) ;
32848: LD_ADDR_VAR 0 12
32852: PUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 248
32862: ST_TO_ADDR
// side := GetSide ( tower ) ;
32863: LD_ADDR_VAR 0 16
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 255
32877: ST_TO_ADDR
// x := GetX ( tower ) ;
32878: LD_ADDR_VAR 0 10
32882: PUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 250
32892: ST_TO_ADDR
// y := GetY ( tower ) ;
32893: LD_ADDR_VAR 0 11
32897: PUSH
32898: LD_VAR 0 1
32902: PPUSH
32903: CALL_OW 251
32907: ST_TO_ADDR
// if not x or not y then
32908: LD_VAR 0 10
32912: NOT
32913: PUSH
32914: LD_VAR 0 11
32918: NOT
32919: OR
32920: IFFALSE 32924
// exit ;
32922: GO 33984
// weapon := 0 ;
32924: LD_ADDR_VAR 0 18
32928: PUSH
32929: LD_INT 0
32931: ST_TO_ADDR
// fac_list := [ ] ;
32932: LD_ADDR_VAR 0 17
32936: PUSH
32937: EMPTY
32938: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32939: LD_ADDR_VAR 0 6
32943: PUSH
32944: LD_VAR 0 1
32948: PPUSH
32949: CALL_OW 274
32953: PPUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL 30562 0 2
32963: PPUSH
32964: LD_INT 30
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PPUSH
32974: CALL_OW 72
32978: ST_TO_ADDR
// if not factories then
32979: LD_VAR 0 6
32983: NOT
32984: IFFALSE 32988
// exit ;
32986: GO 33984
// for i in factories do
32988: LD_ADDR_VAR 0 8
32992: PUSH
32993: LD_VAR 0 6
32997: PUSH
32998: FOR_IN
32999: IFFALSE 33024
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33001: LD_ADDR_VAR 0 17
33005: PUSH
33006: LD_VAR 0 17
33010: PUSH
33011: LD_VAR 0 8
33015: PPUSH
33016: CALL_OW 478
33020: UNION
33021: ST_TO_ADDR
33022: GO 32998
33024: POP
33025: POP
// if not fac_list then
33026: LD_VAR 0 17
33030: NOT
33031: IFFALSE 33035
// exit ;
33033: GO 33984
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33035: LD_ADDR_VAR 0 5
33039: PUSH
33040: LD_INT 4
33042: PUSH
33043: LD_INT 5
33045: PUSH
33046: LD_INT 9
33048: PUSH
33049: LD_INT 10
33051: PUSH
33052: LD_INT 6
33054: PUSH
33055: LD_INT 7
33057: PUSH
33058: LD_INT 11
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 27
33072: PUSH
33073: LD_INT 28
33075: PUSH
33076: LD_INT 26
33078: PUSH
33079: LD_INT 30
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 43
33090: PUSH
33091: LD_INT 44
33093: PUSH
33094: LD_INT 46
33096: PUSH
33097: LD_INT 45
33099: PUSH
33100: LD_INT 47
33102: PUSH
33103: LD_INT 49
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: PUSH
33119: LD_VAR 0 12
33123: ARRAY
33124: ST_TO_ADDR
// for i in list do
33125: LD_ADDR_VAR 0 8
33129: PUSH
33130: LD_VAR 0 5
33134: PUSH
33135: FOR_IN
33136: IFFALSE 33169
// if not i in fac_list then
33138: LD_VAR 0 8
33142: PUSH
33143: LD_VAR 0 17
33147: IN
33148: NOT
33149: IFFALSE 33167
// list := list diff i ;
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_VAR 0 5
33160: PUSH
33161: LD_VAR 0 8
33165: DIFF
33166: ST_TO_ADDR
33167: GO 33135
33169: POP
33170: POP
// if not list then
33171: LD_VAR 0 5
33175: NOT
33176: IFFALSE 33180
// exit ;
33178: GO 33984
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33180: LD_VAR 0 12
33184: PUSH
33185: LD_INT 3
33187: EQUAL
33188: PUSH
33189: LD_INT 49
33191: PUSH
33192: LD_VAR 0 5
33196: IN
33197: AND
33198: PUSH
33199: LD_INT 31
33201: PPUSH
33202: LD_VAR 0 16
33206: PPUSH
33207: CALL_OW 321
33211: PUSH
33212: LD_INT 2
33214: EQUAL
33215: AND
33216: IFFALSE 33276
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33218: LD_INT 22
33220: PUSH
33221: LD_VAR 0 16
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 35
33232: PUSH
33233: LD_INT 49
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 91
33242: PUSH
33243: LD_VAR 0 1
33247: PUSH
33248: LD_INT 10
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: PPUSH
33261: CALL_OW 69
33265: NOT
33266: IFFALSE 33276
// weapon := ru_time_lapser ;
33268: LD_ADDR_VAR 0 18
33272: PUSH
33273: LD_INT 49
33275: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33276: LD_VAR 0 12
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: IN
33291: PUSH
33292: LD_INT 11
33294: PUSH
33295: LD_VAR 0 5
33299: IN
33300: PUSH
33301: LD_INT 30
33303: PUSH
33304: LD_VAR 0 5
33308: IN
33309: OR
33310: AND
33311: PUSH
33312: LD_INT 6
33314: PPUSH
33315: LD_VAR 0 16
33319: PPUSH
33320: CALL_OW 321
33324: PUSH
33325: LD_INT 2
33327: EQUAL
33328: AND
33329: IFFALSE 33494
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33331: LD_INT 22
33333: PUSH
33334: LD_VAR 0 16
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 35
33348: PUSH
33349: LD_INT 11
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 35
33358: PUSH
33359: LD_INT 30
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 91
33373: PUSH
33374: LD_VAR 0 1
33378: PUSH
33379: LD_INT 18
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: PPUSH
33392: CALL_OW 69
33396: NOT
33397: PUSH
33398: LD_INT 22
33400: PUSH
33401: LD_VAR 0 16
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 30
33415: PUSH
33416: LD_INT 32
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 30
33425: PUSH
33426: LD_INT 33
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 91
33440: PUSH
33441: LD_VAR 0 1
33445: PUSH
33446: LD_INT 12
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: PUSH
33459: EMPTY
33460: LIST
33461: PPUSH
33462: CALL_OW 69
33466: PUSH
33467: LD_INT 2
33469: GREATER
33470: AND
33471: IFFALSE 33494
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33473: LD_ADDR_VAR 0 18
33477: PUSH
33478: LD_INT 11
33480: PUSH
33481: LD_INT 30
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_VAR 0 12
33492: ARRAY
33493: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33494: LD_VAR 0 18
33498: NOT
33499: PUSH
33500: LD_INT 40
33502: PPUSH
33503: LD_VAR 0 16
33507: PPUSH
33508: CALL_OW 321
33512: PUSH
33513: LD_INT 2
33515: EQUAL
33516: AND
33517: PUSH
33518: LD_INT 7
33520: PUSH
33521: LD_VAR 0 5
33525: IN
33526: PUSH
33527: LD_INT 28
33529: PUSH
33530: LD_VAR 0 5
33534: IN
33535: OR
33536: PUSH
33537: LD_INT 45
33539: PUSH
33540: LD_VAR 0 5
33544: IN
33545: OR
33546: AND
33547: IFFALSE 33801
// begin hex := GetHexInfo ( x , y ) ;
33549: LD_ADDR_VAR 0 4
33553: PUSH
33554: LD_VAR 0 10
33558: PPUSH
33559: LD_VAR 0 11
33563: PPUSH
33564: CALL_OW 546
33568: ST_TO_ADDR
// if hex [ 1 ] then
33569: LD_VAR 0 4
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: IFFALSE 33581
// exit ;
33579: GO 33984
// height := hex [ 2 ] ;
33581: LD_ADDR_VAR 0 15
33585: PUSH
33586: LD_VAR 0 4
33590: PUSH
33591: LD_INT 2
33593: ARRAY
33594: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33595: LD_ADDR_VAR 0 14
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: LD_INT 3
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
// for i in tmp do
33618: LD_ADDR_VAR 0 8
33622: PUSH
33623: LD_VAR 0 14
33627: PUSH
33628: FOR_IN
33629: IFFALSE 33799
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33631: LD_ADDR_VAR 0 9
33635: PUSH
33636: LD_VAR 0 10
33640: PPUSH
33641: LD_VAR 0 8
33645: PPUSH
33646: LD_INT 5
33648: PPUSH
33649: CALL_OW 272
33653: PUSH
33654: LD_VAR 0 11
33658: PPUSH
33659: LD_VAR 0 8
33663: PPUSH
33664: LD_INT 5
33666: PPUSH
33667: CALL_OW 273
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33676: LD_VAR 0 9
33680: PUSH
33681: LD_INT 1
33683: ARRAY
33684: PPUSH
33685: LD_VAR 0 9
33689: PUSH
33690: LD_INT 2
33692: ARRAY
33693: PPUSH
33694: CALL_OW 488
33698: IFFALSE 33797
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33700: LD_ADDR_VAR 0 4
33704: PUSH
33705: LD_VAR 0 9
33709: PUSH
33710: LD_INT 1
33712: ARRAY
33713: PPUSH
33714: LD_VAR 0 9
33718: PUSH
33719: LD_INT 2
33721: ARRAY
33722: PPUSH
33723: CALL_OW 546
33727: ST_TO_ADDR
// if hex [ 1 ] then
33728: LD_VAR 0 4
33732: PUSH
33733: LD_INT 1
33735: ARRAY
33736: IFFALSE 33740
// continue ;
33738: GO 33628
// h := hex [ 2 ] ;
33740: LD_ADDR_VAR 0 13
33744: PUSH
33745: LD_VAR 0 4
33749: PUSH
33750: LD_INT 2
33752: ARRAY
33753: ST_TO_ADDR
// if h + 7 < height then
33754: LD_VAR 0 13
33758: PUSH
33759: LD_INT 7
33761: PLUS
33762: PUSH
33763: LD_VAR 0 15
33767: LESS
33768: IFFALSE 33797
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33770: LD_ADDR_VAR 0 18
33774: PUSH
33775: LD_INT 7
33777: PUSH
33778: LD_INT 28
33780: PUSH
33781: LD_INT 45
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: LD_VAR 0 12
33793: ARRAY
33794: ST_TO_ADDR
// break ;
33795: GO 33799
// end ; end ; end ;
33797: GO 33628
33799: POP
33800: POP
// end ; if not weapon then
33801: LD_VAR 0 18
33805: NOT
33806: IFFALSE 33866
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33808: LD_ADDR_VAR 0 5
33812: PUSH
33813: LD_VAR 0 5
33817: PUSH
33818: LD_INT 11
33820: PUSH
33821: LD_INT 30
33823: PUSH
33824: LD_INT 49
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: DIFF
33832: ST_TO_ADDR
// if not list then
33833: LD_VAR 0 5
33837: NOT
33838: IFFALSE 33842
// exit ;
33840: GO 33984
// weapon := list [ rand ( 1 , list ) ] ;
33842: LD_ADDR_VAR 0 18
33846: PUSH
33847: LD_VAR 0 5
33851: PUSH
33852: LD_INT 1
33854: PPUSH
33855: LD_VAR 0 5
33859: PPUSH
33860: CALL_OW 12
33864: ARRAY
33865: ST_TO_ADDR
// end ; if weapon then
33866: LD_VAR 0 18
33870: IFFALSE 33984
// begin tmp := CostOfWeapon ( weapon ) ;
33872: LD_ADDR_VAR 0 14
33876: PUSH
33877: LD_VAR 0 18
33881: PPUSH
33882: CALL_OW 451
33886: ST_TO_ADDR
// j := GetBase ( tower ) ;
33887: LD_ADDR_VAR 0 9
33891: PUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 274
33901: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33902: LD_VAR 0 9
33906: PPUSH
33907: LD_INT 1
33909: PPUSH
33910: CALL_OW 275
33914: PUSH
33915: LD_VAR 0 14
33919: PUSH
33920: LD_INT 1
33922: ARRAY
33923: GREATEREQUAL
33924: PUSH
33925: LD_VAR 0 9
33929: PPUSH
33930: LD_INT 2
33932: PPUSH
33933: CALL_OW 275
33937: PUSH
33938: LD_VAR 0 14
33942: PUSH
33943: LD_INT 2
33945: ARRAY
33946: GREATEREQUAL
33947: AND
33948: PUSH
33949: LD_VAR 0 9
33953: PPUSH
33954: LD_INT 3
33956: PPUSH
33957: CALL_OW 275
33961: PUSH
33962: LD_VAR 0 14
33966: PUSH
33967: LD_INT 3
33969: ARRAY
33970: GREATEREQUAL
33971: AND
33972: IFFALSE 33984
// result := weapon ;
33974: LD_ADDR_VAR 0 3
33978: PUSH
33979: LD_VAR 0 18
33983: ST_TO_ADDR
// end ; end ;
33984: LD_VAR 0 3
33988: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33989: LD_INT 0
33991: PPUSH
33992: PPUSH
// result := true ;
33993: LD_ADDR_VAR 0 3
33997: PUSH
33998: LD_INT 1
34000: ST_TO_ADDR
// if array1 = array2 then
34001: LD_VAR 0 1
34005: PUSH
34006: LD_VAR 0 2
34010: EQUAL
34011: IFFALSE 34071
// begin for i = 1 to array1 do
34013: LD_ADDR_VAR 0 4
34017: PUSH
34018: DOUBLE
34019: LD_INT 1
34021: DEC
34022: ST_TO_ADDR
34023: LD_VAR 0 1
34027: PUSH
34028: FOR_TO
34029: IFFALSE 34067
// if array1 [ i ] <> array2 [ i ] then
34031: LD_VAR 0 1
34035: PUSH
34036: LD_VAR 0 4
34040: ARRAY
34041: PUSH
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 4
34051: ARRAY
34052: NONEQUAL
34053: IFFALSE 34065
// begin result := false ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: LD_INT 0
34062: ST_TO_ADDR
// break ;
34063: GO 34067
// end ;
34065: GO 34028
34067: POP
34068: POP
// end else
34069: GO 34079
// result := false ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_INT 0
34078: ST_TO_ADDR
// end ;
34079: LD_VAR 0 3
34083: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
34088: PPUSH
// pom := GetBase ( fac ) ;
34089: LD_ADDR_VAR 0 5
34093: PUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 274
34103: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_VAR 0 2
34113: PUSH
34114: LD_INT 1
34116: ARRAY
34117: PPUSH
34118: LD_VAR 0 2
34122: PUSH
34123: LD_INT 2
34125: ARRAY
34126: PPUSH
34127: LD_VAR 0 2
34131: PUSH
34132: LD_INT 3
34134: ARRAY
34135: PPUSH
34136: LD_VAR 0 2
34140: PUSH
34141: LD_INT 4
34143: ARRAY
34144: PPUSH
34145: CALL_OW 449
34149: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_VAR 0 5
34159: PPUSH
34160: LD_INT 1
34162: PPUSH
34163: CALL_OW 275
34167: PUSH
34168: LD_VAR 0 4
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: GREATEREQUAL
34177: PUSH
34178: LD_VAR 0 5
34182: PPUSH
34183: LD_INT 2
34185: PPUSH
34186: CALL_OW 275
34190: PUSH
34191: LD_VAR 0 4
34195: PUSH
34196: LD_INT 2
34198: ARRAY
34199: GREATEREQUAL
34200: AND
34201: PUSH
34202: LD_VAR 0 5
34206: PPUSH
34207: LD_INT 3
34209: PPUSH
34210: CALL_OW 275
34214: PUSH
34215: LD_VAR 0 4
34219: PUSH
34220: LD_INT 3
34222: ARRAY
34223: GREATEREQUAL
34224: AND
34225: ST_TO_ADDR
// end ;
34226: LD_VAR 0 3
34230: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34231: LD_INT 0
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
// pom := GetBase ( building ) ;
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 274
34251: ST_TO_ADDR
// if not pom then
34252: LD_VAR 0 3
34256: NOT
34257: IFFALSE 34261
// exit ;
34259: GO 34431
// btype := GetBType ( building ) ;
34261: LD_ADDR_VAR 0 5
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: CALL_OW 266
34275: ST_TO_ADDR
// if btype = b_armoury then
34276: LD_VAR 0 5
34280: PUSH
34281: LD_INT 4
34283: EQUAL
34284: IFFALSE 34294
// btype := b_barracks ;
34286: LD_ADDR_VAR 0 5
34290: PUSH
34291: LD_INT 5
34293: ST_TO_ADDR
// if btype = b_depot then
34294: LD_VAR 0 5
34298: PUSH
34299: LD_INT 0
34301: EQUAL
34302: IFFALSE 34312
// btype := b_warehouse ;
34304: LD_ADDR_VAR 0 5
34308: PUSH
34309: LD_INT 1
34311: ST_TO_ADDR
// if btype = b_workshop then
34312: LD_VAR 0 5
34316: PUSH
34317: LD_INT 2
34319: EQUAL
34320: IFFALSE 34330
// btype := b_factory ;
34322: LD_ADDR_VAR 0 5
34326: PUSH
34327: LD_INT 3
34329: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34330: LD_ADDR_VAR 0 4
34334: PUSH
34335: LD_VAR 0 5
34339: PPUSH
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 248
34349: PPUSH
34350: CALL_OW 450
34354: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34355: LD_ADDR_VAR 0 2
34359: PUSH
34360: LD_VAR 0 3
34364: PPUSH
34365: LD_INT 1
34367: PPUSH
34368: CALL_OW 275
34372: PUSH
34373: LD_VAR 0 4
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: GREATEREQUAL
34382: PUSH
34383: LD_VAR 0 3
34387: PPUSH
34388: LD_INT 2
34390: PPUSH
34391: CALL_OW 275
34395: PUSH
34396: LD_VAR 0 4
34400: PUSH
34401: LD_INT 2
34403: ARRAY
34404: GREATEREQUAL
34405: AND
34406: PUSH
34407: LD_VAR 0 3
34411: PPUSH
34412: LD_INT 3
34414: PPUSH
34415: CALL_OW 275
34419: PUSH
34420: LD_VAR 0 4
34424: PUSH
34425: LD_INT 3
34427: ARRAY
34428: GREATEREQUAL
34429: AND
34430: ST_TO_ADDR
// end ;
34431: LD_VAR 0 2
34435: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34436: LD_INT 0
34438: PPUSH
34439: PPUSH
34440: PPUSH
// pom := GetBase ( building ) ;
34441: LD_ADDR_VAR 0 4
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 274
34455: ST_TO_ADDR
// if not pom then
34456: LD_VAR 0 4
34460: NOT
34461: IFFALSE 34465
// exit ;
34463: GO 34566
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34465: LD_ADDR_VAR 0 5
34469: PUSH
34470: LD_VAR 0 2
34474: PPUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 248
34484: PPUSH
34485: CALL_OW 450
34489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_VAR 0 4
34499: PPUSH
34500: LD_INT 1
34502: PPUSH
34503: CALL_OW 275
34507: PUSH
34508: LD_VAR 0 5
34512: PUSH
34513: LD_INT 1
34515: ARRAY
34516: GREATEREQUAL
34517: PUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: LD_INT 2
34525: PPUSH
34526: CALL_OW 275
34530: PUSH
34531: LD_VAR 0 5
34535: PUSH
34536: LD_INT 2
34538: ARRAY
34539: GREATEREQUAL
34540: AND
34541: PUSH
34542: LD_VAR 0 4
34546: PPUSH
34547: LD_INT 3
34549: PPUSH
34550: CALL_OW 275
34554: PUSH
34555: LD_VAR 0 5
34559: PUSH
34560: LD_INT 3
34562: ARRAY
34563: GREATEREQUAL
34564: AND
34565: ST_TO_ADDR
// end ;
34566: LD_VAR 0 3
34570: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
// result := false ;
34583: LD_ADDR_VAR 0 6
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
// if not base or not btype or not x or not y then
34591: LD_VAR 0 1
34595: NOT
34596: PUSH
34597: LD_VAR 0 2
34601: NOT
34602: OR
34603: PUSH
34604: LD_VAR 0 3
34608: NOT
34609: OR
34610: PUSH
34611: LD_VAR 0 4
34615: NOT
34616: OR
34617: IFFALSE 34621
// exit ;
34619: GO 35230
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34621: LD_ADDR_VAR 0 12
34625: PUSH
34626: LD_VAR 0 2
34630: PPUSH
34631: LD_VAR 0 3
34635: PPUSH
34636: LD_VAR 0 4
34640: PPUSH
34641: LD_VAR 0 5
34645: PPUSH
34646: LD_VAR 0 1
34650: PUSH
34651: LD_INT 1
34653: ARRAY
34654: PPUSH
34655: CALL_OW 248
34659: PPUSH
34660: LD_INT 0
34662: PPUSH
34663: CALL 36067 0 6
34667: ST_TO_ADDR
// if not hexes then
34668: LD_VAR 0 12
34672: NOT
34673: IFFALSE 34677
// exit ;
34675: GO 35230
// for i = 1 to hexes do
34677: LD_ADDR_VAR 0 7
34681: PUSH
34682: DOUBLE
34683: LD_INT 1
34685: DEC
34686: ST_TO_ADDR
34687: LD_VAR 0 12
34691: PUSH
34692: FOR_TO
34693: IFFALSE 35228
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34695: LD_ADDR_VAR 0 11
34699: PUSH
34700: LD_VAR 0 12
34704: PUSH
34705: LD_VAR 0 7
34709: ARRAY
34710: PUSH
34711: LD_INT 1
34713: ARRAY
34714: PPUSH
34715: LD_VAR 0 12
34719: PUSH
34720: LD_VAR 0 7
34724: ARRAY
34725: PUSH
34726: LD_INT 2
34728: ARRAY
34729: PPUSH
34730: CALL_OW 428
34734: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34735: LD_VAR 0 12
34739: PUSH
34740: LD_VAR 0 7
34744: ARRAY
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: PPUSH
34750: LD_VAR 0 12
34754: PUSH
34755: LD_VAR 0 7
34759: ARRAY
34760: PUSH
34761: LD_INT 2
34763: ARRAY
34764: PPUSH
34765: CALL_OW 351
34769: PUSH
34770: LD_VAR 0 12
34774: PUSH
34775: LD_VAR 0 7
34779: ARRAY
34780: PUSH
34781: LD_INT 1
34783: ARRAY
34784: PPUSH
34785: LD_VAR 0 12
34789: PUSH
34790: LD_VAR 0 7
34794: ARRAY
34795: PUSH
34796: LD_INT 2
34798: ARRAY
34799: PPUSH
34800: CALL_OW 488
34804: NOT
34805: OR
34806: PUSH
34807: LD_VAR 0 11
34811: PPUSH
34812: CALL_OW 247
34816: PUSH
34817: LD_INT 3
34819: EQUAL
34820: OR
34821: IFFALSE 34827
// exit ;
34823: POP
34824: POP
34825: GO 35230
// if not tmp or not tmp in base then
34827: LD_VAR 0 11
34831: NOT
34832: PUSH
34833: LD_VAR 0 11
34837: PUSH
34838: LD_VAR 0 1
34842: IN
34843: NOT
34844: OR
34845: IFFALSE 34849
// continue ;
34847: GO 34692
// result := true ;
34849: LD_ADDR_VAR 0 6
34853: PUSH
34854: LD_INT 1
34856: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34857: LD_ADDR_VAR 0 15
34861: PUSH
34862: LD_VAR 0 1
34866: PPUSH
34867: LD_INT 22
34869: PUSH
34870: LD_VAR 0 11
34874: PPUSH
34875: CALL_OW 255
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 30
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 30
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 72
34920: ST_TO_ADDR
// if dep then
34921: LD_VAR 0 15
34925: IFFALSE 35061
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34927: LD_ADDR_VAR 0 14
34931: PUSH
34932: LD_VAR 0 15
34936: PUSH
34937: LD_INT 1
34939: ARRAY
34940: PPUSH
34941: CALL_OW 250
34945: PPUSH
34946: LD_VAR 0 15
34950: PUSH
34951: LD_INT 1
34953: ARRAY
34954: PPUSH
34955: CALL_OW 254
34959: PPUSH
34960: LD_INT 5
34962: PPUSH
34963: CALL_OW 272
34967: PUSH
34968: LD_VAR 0 15
34972: PUSH
34973: LD_INT 1
34975: ARRAY
34976: PPUSH
34977: CALL_OW 251
34981: PPUSH
34982: LD_VAR 0 15
34986: PUSH
34987: LD_INT 1
34989: ARRAY
34990: PPUSH
34991: CALL_OW 254
34995: PPUSH
34996: LD_INT 5
34998: PPUSH
34999: CALL_OW 273
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35008: LD_VAR 0 14
35012: PUSH
35013: LD_INT 1
35015: ARRAY
35016: PPUSH
35017: LD_VAR 0 14
35021: PUSH
35022: LD_INT 2
35024: ARRAY
35025: PPUSH
35026: CALL_OW 488
35030: IFFALSE 35061
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35032: LD_VAR 0 11
35036: PPUSH
35037: LD_VAR 0 14
35041: PUSH
35042: LD_INT 1
35044: ARRAY
35045: PPUSH
35046: LD_VAR 0 14
35050: PUSH
35051: LD_INT 2
35053: ARRAY
35054: PPUSH
35055: CALL_OW 111
// continue ;
35059: GO 34692
// end ; end ; r := GetDir ( tmp ) ;
35061: LD_ADDR_VAR 0 13
35065: PUSH
35066: LD_VAR 0 11
35070: PPUSH
35071: CALL_OW 254
35075: ST_TO_ADDR
// if r = 5 then
35076: LD_VAR 0 13
35080: PUSH
35081: LD_INT 5
35083: EQUAL
35084: IFFALSE 35094
// r := 0 ;
35086: LD_ADDR_VAR 0 13
35090: PUSH
35091: LD_INT 0
35093: ST_TO_ADDR
// for j = r to 5 do
35094: LD_ADDR_VAR 0 8
35098: PUSH
35099: DOUBLE
35100: LD_VAR 0 13
35104: DEC
35105: ST_TO_ADDR
35106: LD_INT 5
35108: PUSH
35109: FOR_TO
35110: IFFALSE 35224
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_VAR 0 11
35121: PPUSH
35122: CALL_OW 250
35126: PPUSH
35127: LD_VAR 0 8
35131: PPUSH
35132: LD_INT 2
35134: PPUSH
35135: CALL_OW 272
35139: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35140: LD_ADDR_VAR 0 10
35144: PUSH
35145: LD_VAR 0 11
35149: PPUSH
35150: CALL_OW 251
35154: PPUSH
35155: LD_VAR 0 8
35159: PPUSH
35160: LD_INT 2
35162: PPUSH
35163: CALL_OW 273
35167: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35168: LD_VAR 0 9
35172: PPUSH
35173: LD_VAR 0 10
35177: PPUSH
35178: CALL_OW 488
35182: PUSH
35183: LD_VAR 0 9
35187: PPUSH
35188: LD_VAR 0 10
35192: PPUSH
35193: CALL_OW 428
35197: NOT
35198: AND
35199: IFFALSE 35222
// begin ComMoveXY ( tmp , _x , _y ) ;
35201: LD_VAR 0 11
35205: PPUSH
35206: LD_VAR 0 9
35210: PPUSH
35211: LD_VAR 0 10
35215: PPUSH
35216: CALL_OW 111
// break ;
35220: GO 35224
// end ; end ;
35222: GO 35109
35224: POP
35225: POP
// end ;
35226: GO 34692
35228: POP
35229: POP
// end ;
35230: LD_VAR 0 6
35234: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35235: LD_INT 0
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
// result := false ;
35247: LD_ADDR_VAR 0 6
35251: PUSH
35252: LD_INT 0
35254: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35255: LD_VAR 0 1
35259: NOT
35260: PUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 266
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: IN
35281: NOT
35282: OR
35283: PUSH
35284: LD_VAR 0 2
35288: NOT
35289: OR
35290: PUSH
35291: LD_VAR 0 5
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: LD_INT 4
35310: PUSH
35311: LD_INT 5
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: IN
35322: NOT
35323: OR
35324: PUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: LD_VAR 0 4
35334: PPUSH
35335: CALL_OW 488
35339: NOT
35340: OR
35341: IFFALSE 35345
// exit ;
35343: GO 36062
// pom := GetBase ( depot ) ;
35345: LD_ADDR_VAR 0 10
35349: PUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 274
35359: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35360: LD_ADDR_VAR 0 11
35364: PUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 1
35374: PPUSH
35375: CALL_OW 248
35379: PPUSH
35380: CALL_OW 450
35384: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35385: LD_VAR 0 10
35389: PPUSH
35390: LD_INT 1
35392: PPUSH
35393: CALL_OW 275
35397: PUSH
35398: LD_VAR 0 11
35402: PUSH
35403: LD_INT 1
35405: ARRAY
35406: GREATEREQUAL
35407: PUSH
35408: LD_VAR 0 10
35412: PPUSH
35413: LD_INT 2
35415: PPUSH
35416: CALL_OW 275
35420: PUSH
35421: LD_VAR 0 11
35425: PUSH
35426: LD_INT 2
35428: ARRAY
35429: GREATEREQUAL
35430: AND
35431: PUSH
35432: LD_VAR 0 10
35436: PPUSH
35437: LD_INT 3
35439: PPUSH
35440: CALL_OW 275
35444: PUSH
35445: LD_VAR 0 11
35449: PUSH
35450: LD_INT 3
35452: ARRAY
35453: GREATEREQUAL
35454: AND
35455: NOT
35456: IFFALSE 35460
// exit ;
35458: GO 36062
// if GetBType ( depot ) = b_depot then
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 266
35469: PUSH
35470: LD_INT 0
35472: EQUAL
35473: IFFALSE 35485
// dist := 28 else
35475: LD_ADDR_VAR 0 14
35479: PUSH
35480: LD_INT 28
35482: ST_TO_ADDR
35483: GO 35493
// dist := 36 ;
35485: LD_ADDR_VAR 0 14
35489: PUSH
35490: LD_INT 36
35492: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_VAR 0 4
35507: PPUSH
35508: CALL_OW 297
35512: PUSH
35513: LD_VAR 0 14
35517: GREATER
35518: IFFALSE 35522
// exit ;
35520: GO 36062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35522: LD_ADDR_VAR 0 12
35526: PUSH
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 3
35536: PPUSH
35537: LD_VAR 0 4
35541: PPUSH
35542: LD_VAR 0 5
35546: PPUSH
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 248
35556: PPUSH
35557: LD_INT 0
35559: PPUSH
35560: CALL 36067 0 6
35564: ST_TO_ADDR
// if not hexes then
35565: LD_VAR 0 12
35569: NOT
35570: IFFALSE 35574
// exit ;
35572: GO 36062
// hex := GetHexInfo ( x , y ) ;
35574: LD_ADDR_VAR 0 15
35578: PUSH
35579: LD_VAR 0 3
35583: PPUSH
35584: LD_VAR 0 4
35588: PPUSH
35589: CALL_OW 546
35593: ST_TO_ADDR
// if hex [ 1 ] then
35594: LD_VAR 0 15
35598: PUSH
35599: LD_INT 1
35601: ARRAY
35602: IFFALSE 35606
// exit ;
35604: GO 36062
// height := hex [ 2 ] ;
35606: LD_ADDR_VAR 0 13
35610: PUSH
35611: LD_VAR 0 15
35615: PUSH
35616: LD_INT 2
35618: ARRAY
35619: ST_TO_ADDR
// for i = 1 to hexes do
35620: LD_ADDR_VAR 0 7
35624: PUSH
35625: DOUBLE
35626: LD_INT 1
35628: DEC
35629: ST_TO_ADDR
35630: LD_VAR 0 12
35634: PUSH
35635: FOR_TO
35636: IFFALSE 35966
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35638: LD_VAR 0 12
35642: PUSH
35643: LD_VAR 0 7
35647: ARRAY
35648: PUSH
35649: LD_INT 1
35651: ARRAY
35652: PPUSH
35653: LD_VAR 0 12
35657: PUSH
35658: LD_VAR 0 7
35662: ARRAY
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: PPUSH
35668: CALL_OW 488
35672: NOT
35673: PUSH
35674: LD_VAR 0 12
35678: PUSH
35679: LD_VAR 0 7
35683: ARRAY
35684: PUSH
35685: LD_INT 1
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 12
35693: PUSH
35694: LD_VAR 0 7
35698: ARRAY
35699: PUSH
35700: LD_INT 2
35702: ARRAY
35703: PPUSH
35704: CALL_OW 428
35708: PUSH
35709: LD_INT 0
35711: GREATER
35712: OR
35713: PUSH
35714: LD_VAR 0 12
35718: PUSH
35719: LD_VAR 0 7
35723: ARRAY
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: PPUSH
35729: LD_VAR 0 12
35733: PUSH
35734: LD_VAR 0 7
35738: ARRAY
35739: PUSH
35740: LD_INT 2
35742: ARRAY
35743: PPUSH
35744: CALL_OW 351
35748: OR
35749: IFFALSE 35755
// exit ;
35751: POP
35752: POP
35753: GO 36062
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35755: LD_ADDR_VAR 0 8
35759: PUSH
35760: LD_VAR 0 12
35764: PUSH
35765: LD_VAR 0 7
35769: ARRAY
35770: PUSH
35771: LD_INT 1
35773: ARRAY
35774: PPUSH
35775: LD_VAR 0 12
35779: PUSH
35780: LD_VAR 0 7
35784: ARRAY
35785: PUSH
35786: LD_INT 2
35788: ARRAY
35789: PPUSH
35790: CALL_OW 546
35794: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35795: LD_VAR 0 8
35799: PUSH
35800: LD_INT 1
35802: ARRAY
35803: PUSH
35804: LD_VAR 0 8
35808: PUSH
35809: LD_INT 2
35811: ARRAY
35812: PUSH
35813: LD_VAR 0 13
35817: PUSH
35818: LD_INT 2
35820: PLUS
35821: GREATER
35822: OR
35823: PUSH
35824: LD_VAR 0 8
35828: PUSH
35829: LD_INT 2
35831: ARRAY
35832: PUSH
35833: LD_VAR 0 13
35837: PUSH
35838: LD_INT 2
35840: MINUS
35841: LESS
35842: OR
35843: PUSH
35844: LD_VAR 0 8
35848: PUSH
35849: LD_INT 3
35851: ARRAY
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 8
35858: PUSH
35859: LD_INT 9
35861: PUSH
35862: LD_INT 10
35864: PUSH
35865: LD_INT 11
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: LD_INT 13
35873: PUSH
35874: LD_INT 16
35876: PUSH
35877: LD_INT 17
35879: PUSH
35880: LD_INT 18
35882: PUSH
35883: LD_INT 19
35885: PUSH
35886: LD_INT 20
35888: PUSH
35889: LD_INT 21
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: IN
35907: NOT
35908: OR
35909: PUSH
35910: LD_VAR 0 8
35914: PUSH
35915: LD_INT 5
35917: ARRAY
35918: NOT
35919: OR
35920: PUSH
35921: LD_VAR 0 8
35925: PUSH
35926: LD_INT 6
35928: ARRAY
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 7
35938: PUSH
35939: LD_INT 9
35941: PUSH
35942: LD_INT 10
35944: PUSH
35945: LD_INT 11
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: IN
35956: NOT
35957: OR
35958: IFFALSE 35964
// exit ;
35960: POP
35961: POP
35962: GO 36062
// end ;
35964: GO 35635
35966: POP
35967: POP
// side := GetSide ( depot ) ;
35968: LD_ADDR_VAR 0 9
35972: PUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 255
35982: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35983: LD_VAR 0 9
35987: PPUSH
35988: LD_VAR 0 3
35992: PPUSH
35993: LD_VAR 0 4
35997: PPUSH
35998: LD_INT 20
36000: PPUSH
36001: CALL 28716 0 4
36005: PUSH
36006: LD_INT 4
36008: ARRAY
36009: IFFALSE 36013
// exit ;
36011: GO 36062
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 29
36020: PUSH
36021: LD_INT 30
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: IN
36028: PUSH
36029: LD_VAR 0 3
36033: PPUSH
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_VAR 0 9
36043: PPUSH
36044: CALL_OW 440
36048: NOT
36049: AND
36050: IFFALSE 36054
// exit ;
36052: GO 36062
// result := true ;
36054: LD_ADDR_VAR 0 6
36058: PUSH
36059: LD_INT 1
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 6
36066: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36067: LD_INT 0
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
36109: PPUSH
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
// result = [ ] ;
36127: LD_ADDR_VAR 0 7
36131: PUSH
36132: EMPTY
36133: ST_TO_ADDR
// temp_list = [ ] ;
36134: LD_ADDR_VAR 0 9
36138: PUSH
36139: EMPTY
36140: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36141: LD_VAR 0 4
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 3
36157: PUSH
36158: LD_INT 4
36160: PUSH
36161: LD_INT 5
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: IN
36172: NOT
36173: PUSH
36174: LD_VAR 0 1
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: IN
36189: PUSH
36190: LD_VAR 0 5
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: IN
36209: NOT
36210: AND
36211: OR
36212: IFFALSE 36216
// exit ;
36214: GO 54607
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36216: LD_VAR 0 1
36220: PUSH
36221: LD_INT 6
36223: PUSH
36224: LD_INT 7
36226: PUSH
36227: LD_INT 8
36229: PUSH
36230: LD_INT 13
36232: PUSH
36233: LD_INT 12
36235: PUSH
36236: LD_INT 15
36238: PUSH
36239: LD_INT 11
36241: PUSH
36242: LD_INT 14
36244: PUSH
36245: LD_INT 10
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: IN
36259: IFFALSE 36269
// btype = b_lab ;
36261: LD_ADDR_VAR 0 1
36265: PUSH
36266: LD_INT 6
36268: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36269: LD_VAR 0 6
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: IN
36288: NOT
36289: PUSH
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 6
36309: PUSH
36310: LD_INT 36
36312: PUSH
36313: LD_INT 4
36315: PUSH
36316: LD_INT 5
36318: PUSH
36319: LD_INT 31
36321: PUSH
36322: LD_INT 32
36324: PUSH
36325: LD_INT 33
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: IN
36341: NOT
36342: PUSH
36343: LD_VAR 0 6
36347: PUSH
36348: LD_INT 1
36350: EQUAL
36351: AND
36352: OR
36353: PUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 3
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: IN
36369: NOT
36370: PUSH
36371: LD_VAR 0 6
36375: PUSH
36376: LD_INT 2
36378: EQUAL
36379: AND
36380: OR
36381: IFFALSE 36391
// mode = 0 ;
36383: LD_ADDR_VAR 0 6
36387: PUSH
36388: LD_INT 0
36390: ST_TO_ADDR
// case mode of 0 :
36391: LD_VAR 0 6
36395: PUSH
36396: LD_INT 0
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 47857
36404: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36405: LD_ADDR_VAR 0 11
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36598: LD_ADDR_VAR 0 12
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 3
36755: NEG
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 3
36766: NEG
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36794: LD_ADDR_VAR 0 13
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 2
36917: NEG
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: LD_INT 3
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: NEG
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 3
36965: NEG
36966: PUSH
36967: LD_INT 3
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36993: LD_ADDR_VAR 0 14
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: LD_INT 2
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37189: LD_ADDR_VAR 0 15
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 3
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37382: LD_ADDR_VAR 0 16
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: NEG
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 3
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 3
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37575: LD_ADDR_VAR 0 17
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37805: LD_ADDR_VAR 0 18
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38035: LD_ADDR_VAR 0 19
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38265: LD_ADDR_VAR 0 20
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38495: LD_ADDR_VAR 0 21
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38725: LD_ADDR_VAR 0 22
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38955: LD_ADDR_VAR 0 23
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39235: LD_ADDR_VAR 0 24
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39511: LD_ADDR_VAR 0 25
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 3
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 3
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 3
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39785: LD_ADDR_VAR 0 26
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 3
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 3
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40061: LD_ADDR_VAR 0 27
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 3
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40341: LD_ADDR_VAR 0 28
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 2
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 3
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40623: LD_ADDR_VAR 0 29
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: LD_INT 3
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40902: LD_ADDR_VAR 0 30
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 3
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41180: LD_ADDR_VAR 0 31
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 3
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 3
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41458: LD_ADDR_VAR 0 32
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 2
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 3
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41736: LD_ADDR_VAR 0 33
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: LD_INT 3
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42015: LD_ADDR_VAR 0 34
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 3
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42295: LD_ADDR_VAR 0 35
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42407: LD_ADDR_VAR 0 36
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42519: LD_ADDR_VAR 0 37
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42631: LD_ADDR_VAR 0 38
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42743: LD_ADDR_VAR 0 39
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42855: LD_ADDR_VAR 0 40
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42967: LD_ADDR_VAR 0 41
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: LD_INT 3
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43317: LD_ADDR_VAR 0 42
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 3
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 3
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 3
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43667: LD_ADDR_VAR 0 43
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 3
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 3
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 3
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 3
43963: NEG
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44015: LD_ADDR_VAR 0 44
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: LD_INT 3
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44365: LD_ADDR_VAR 0 45
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 3
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 3
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44715: LD_ADDR_VAR 0 46
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 3
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: NEG
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45063: LD_ADDR_VAR 0 47
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45214: LD_ADDR_VAR 0 48
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45361: LD_ADDR_VAR 0 49
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45505: LD_ADDR_VAR 0 50
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45649: LD_ADDR_VAR 0 51
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45796: LD_ADDR_VAR 0 52
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45947: LD_ADDR_VAR 0 53
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46177: LD_ADDR_VAR 0 54
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46407: LD_ADDR_VAR 0 55
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46637: LD_ADDR_VAR 0 56
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46867: LD_ADDR_VAR 0 57
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47097: LD_ADDR_VAR 0 58
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47327: LD_ADDR_VAR 0 59
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47415: LD_ADDR_VAR 0 60
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47503: LD_ADDR_VAR 0 61
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47591: LD_ADDR_VAR 0 62
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47679: LD_ADDR_VAR 0 63
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47767: LD_ADDR_VAR 0 64
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: ST_TO_ADDR
// end ; 1 :
47855: GO 53752
47857: LD_INT 1
47859: DOUBLE
47860: EQUAL
47861: IFTRUE 47865
47863: GO 50488
47865: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47866: LD_ADDR_VAR 0 11
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47910: LD_ADDR_VAR 0 12
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47951: LD_ADDR_VAR 0 13
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 3
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47991: LD_ADDR_VAR 0 14
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48032: LD_ADDR_VAR 0 15
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48076: LD_ADDR_VAR 0 16
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48122: LD_ADDR_VAR 0 17
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48166: LD_ADDR_VAR 0 18
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48207: LD_ADDR_VAR 0 19
48211: PUSH
48212: LD_INT 3
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48247: LD_ADDR_VAR 0 20
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48288: LD_ADDR_VAR 0 21
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48332: LD_ADDR_VAR 0 22
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: LD_INT 3
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48378: LD_ADDR_VAR 0 23
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 4
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48422: LD_ADDR_VAR 0 24
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 4
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48463: LD_ADDR_VAR 0 25
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: LD_INT 3
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 4
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: LD_INT 4
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48503: LD_ADDR_VAR 0 26
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 4
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48544: LD_ADDR_VAR 0 27
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 4
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48588: LD_ADDR_VAR 0 28
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: LD_INT 4
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 4
48619: NEG
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48634: LD_ADDR_VAR 0 29
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 4
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 4
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 5
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 5
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 4
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 6
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 6
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 5
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48789: LD_ADDR_VAR 0 30
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 4
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 5
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 5
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 5
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 6
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 6
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48932: LD_ADDR_VAR 0 31
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 4
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 4
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 4
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 5
48999: PUSH
49000: LD_INT 4
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 5
49009: PUSH
49010: LD_INT 5
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: LD_INT 5
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 6
49029: PUSH
49030: LD_INT 5
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 6
49039: PUSH
49040: LD_INT 6
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 5
49049: PUSH
49050: LD_INT 6
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49071: LD_ADDR_VAR 0 32
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 4
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: LD_INT 5
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 5
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: LD_INT 4
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 6
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 6
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 5
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49214: LD_ADDR_VAR 0 33
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 4
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 4
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 4
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 5
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 5
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 5
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 6
49334: NEG
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 6
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49369: LD_ADDR_VAR 0 34
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: LD_INT 3
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: LD_INT 4
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 4
49424: NEG
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 4
49436: NEG
49437: PUSH
49438: LD_INT 4
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: LD_INT 5
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 5
49460: NEG
49461: PUSH
49462: LD_INT 4
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 5
49472: NEG
49473: PUSH
49474: LD_INT 5
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 5
49484: NEG
49485: PUSH
49486: LD_INT 6
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 6
49496: NEG
49497: PUSH
49498: LD_INT 5
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 6
49508: NEG
49509: PUSH
49510: LD_INT 6
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49532: LD_ADDR_VAR 0 41
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49576: LD_ADDR_VAR 0 42
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49617: LD_ADDR_VAR 0 43
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49657: LD_ADDR_VAR 0 44
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49698: LD_ADDR_VAR 0 45
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49742: LD_ADDR_VAR 0 46
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49788: LD_ADDR_VAR 0 47
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 3
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49821: LD_ADDR_VAR 0 48
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49852: LD_ADDR_VAR 0 49
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49881: LD_ADDR_VAR 0 50
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49910: LD_ADDR_VAR 0 51
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49941: LD_ADDR_VAR 0 52
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49974: LD_ADDR_VAR 0 53
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50018: LD_ADDR_VAR 0 54
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50059: LD_ADDR_VAR 0 55
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 3
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 3
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50099: LD_ADDR_VAR 0 56
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 3
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50140: LD_ADDR_VAR 0 57
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50184: LD_ADDR_VAR 0 58
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50230: LD_ADDR_VAR 0 59
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50274: LD_ADDR_VAR 0 60
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50315: LD_ADDR_VAR 0 61
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50355: LD_ADDR_VAR 0 62
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50396: LD_ADDR_VAR 0 63
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50440: LD_ADDR_VAR 0 64
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: ST_TO_ADDR
// end ; 2 :
50486: GO 53752
50488: LD_INT 2
50490: DOUBLE
50491: EQUAL
50492: IFTRUE 50496
50494: GO 53751
50496: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50497: LD_ADDR_VAR 0 29
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 5
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 5
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 4
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: PUSH
50628: LD_INT 4
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: LD_INT 4
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 4
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 4
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 4
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 5
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 5
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 5
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 4
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 4
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 4
50882: NEG
50883: PUSH
50884: LD_INT 4
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 4
50894: NEG
50895: PUSH
50896: LD_INT 5
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: LD_INT 4
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 4
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 5
50942: NEG
50943: PUSH
50944: LD_INT 4
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 5
50954: NEG
50955: PUSH
50956: LD_INT 5
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: LD_INT 5
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 5
50978: NEG
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51035: LD_ADDR_VAR 0 30
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: LD_INT 4
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 5
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 5
51072: PUSH
51073: LD_INT 5
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: LD_INT 5
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 5
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 4
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 5
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 5
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 5
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 4
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 3
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 4
51387: NEG
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: NEG
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 4
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 4
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 5
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 4
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 4
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 5
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 5
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51582: LD_ADDR_VAR 0 31
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 4
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 4
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 5
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 5
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 4
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 4
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 4
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 4
51784: NEG
51785: PUSH
51786: LD_INT 4
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 4
51796: NEG
51797: PUSH
51798: LD_INT 5
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: LD_INT 4
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 4
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 5
51844: NEG
51845: PUSH
51846: LD_INT 4
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 5
51856: NEG
51857: PUSH
51858: LD_INT 5
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: LD_INT 5
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 5
51880: NEG
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 4
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 4
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 4
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 5
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 5
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52132: LD_ADDR_VAR 0 32
52136: PUSH
52137: LD_INT 4
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 4
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 4
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 5
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 5
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 5
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: LD_INT 4
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 4
52301: NEG
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: LD_INT 4
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 4
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 4
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 5
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 4
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 4
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 5
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 5
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 4
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 4
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 5
52564: PUSH
52565: LD_INT 4
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 5
52574: PUSH
52575: LD_INT 5
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: LD_INT 5
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: LD_INT 4
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 5
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 5
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52679: LD_ADDR_VAR 0 33
52683: PUSH
52684: LD_INT 4
52686: NEG
52687: PUSH
52688: LD_INT 4
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 4
52698: NEG
52699: PUSH
52700: LD_INT 5
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: LD_INT 4
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 3
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: LD_INT 3
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 5
52746: NEG
52747: PUSH
52748: LD_INT 4
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 5
52758: NEG
52759: PUSH
52760: LD_INT 5
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: LD_INT 5
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: NEG
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 4
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 4
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 4
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 5
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 5
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 4
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 4
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: LD_INT 4
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: LD_INT 4
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 4
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 4
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 4
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 5
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 5
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53217: LD_ADDR_VAR 0 34
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 4
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 5
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 4
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 4
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 5
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 5
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 4
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 4
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 5
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 5
53449: PUSH
53450: LD_INT 5
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 4
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 5
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: LD_INT 5
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 4
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 4
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 4
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 4
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 4
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 5
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 5
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 5
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// end ; end ;
53749: GO 53752
53751: POP
// case btype of b_depot , b_warehouse :
53752: LD_VAR 0 1
53756: PUSH
53757: LD_INT 0
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53771
53763: LD_INT 1
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53771
53769: GO 53972
53771: POP
// case nation of nation_american :
53772: LD_VAR 0 5
53776: PUSH
53777: LD_INT 1
53779: DOUBLE
53780: EQUAL
53781: IFTRUE 53785
53783: GO 53841
53785: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53786: LD_ADDR_VAR 0 9
53790: PUSH
53791: LD_VAR 0 11
53795: PUSH
53796: LD_VAR 0 12
53800: PUSH
53801: LD_VAR 0 13
53805: PUSH
53806: LD_VAR 0 14
53810: PUSH
53811: LD_VAR 0 15
53815: PUSH
53816: LD_VAR 0 16
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: PUSH
53829: LD_VAR 0 4
53833: PUSH
53834: LD_INT 1
53836: PLUS
53837: ARRAY
53838: ST_TO_ADDR
53839: GO 53970
53841: LD_INT 2
53843: DOUBLE
53844: EQUAL
53845: IFTRUE 53849
53847: GO 53905
53849: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53850: LD_ADDR_VAR 0 9
53854: PUSH
53855: LD_VAR 0 17
53859: PUSH
53860: LD_VAR 0 18
53864: PUSH
53865: LD_VAR 0 19
53869: PUSH
53870: LD_VAR 0 20
53874: PUSH
53875: LD_VAR 0 21
53879: PUSH
53880: LD_VAR 0 22
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: PUSH
53893: LD_VAR 0 4
53897: PUSH
53898: LD_INT 1
53900: PLUS
53901: ARRAY
53902: ST_TO_ADDR
53903: GO 53970
53905: LD_INT 3
53907: DOUBLE
53908: EQUAL
53909: IFTRUE 53913
53911: GO 53969
53913: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53914: LD_ADDR_VAR 0 9
53918: PUSH
53919: LD_VAR 0 23
53923: PUSH
53924: LD_VAR 0 24
53928: PUSH
53929: LD_VAR 0 25
53933: PUSH
53934: LD_VAR 0 26
53938: PUSH
53939: LD_VAR 0 27
53943: PUSH
53944: LD_VAR 0 28
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: PUSH
53957: LD_VAR 0 4
53961: PUSH
53962: LD_INT 1
53964: PLUS
53965: ARRAY
53966: ST_TO_ADDR
53967: GO 53970
53969: POP
53970: GO 54525
53972: LD_INT 2
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53986
53978: LD_INT 3
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53986
53984: GO 54042
53986: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53987: LD_ADDR_VAR 0 9
53991: PUSH
53992: LD_VAR 0 29
53996: PUSH
53997: LD_VAR 0 30
54001: PUSH
54002: LD_VAR 0 31
54006: PUSH
54007: LD_VAR 0 32
54011: PUSH
54012: LD_VAR 0 33
54016: PUSH
54017: LD_VAR 0 34
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: PUSH
54030: LD_VAR 0 4
54034: PUSH
54035: LD_INT 1
54037: PLUS
54038: ARRAY
54039: ST_TO_ADDR
54040: GO 54525
54042: LD_INT 16
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54104
54048: LD_INT 17
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54104
54054: LD_INT 18
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54104
54060: LD_INT 19
54062: DOUBLE
54063: EQUAL
54064: IFTRUE 54104
54066: LD_INT 22
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54104
54072: LD_INT 20
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54104
54078: LD_INT 21
54080: DOUBLE
54081: EQUAL
54082: IFTRUE 54104
54084: LD_INT 23
54086: DOUBLE
54087: EQUAL
54088: IFTRUE 54104
54090: LD_INT 24
54092: DOUBLE
54093: EQUAL
54094: IFTRUE 54104
54096: LD_INT 25
54098: DOUBLE
54099: EQUAL
54100: IFTRUE 54104
54102: GO 54160
54104: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54105: LD_ADDR_VAR 0 9
54109: PUSH
54110: LD_VAR 0 35
54114: PUSH
54115: LD_VAR 0 36
54119: PUSH
54120: LD_VAR 0 37
54124: PUSH
54125: LD_VAR 0 38
54129: PUSH
54130: LD_VAR 0 39
54134: PUSH
54135: LD_VAR 0 40
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: PUSH
54148: LD_VAR 0 4
54152: PUSH
54153: LD_INT 1
54155: PLUS
54156: ARRAY
54157: ST_TO_ADDR
54158: GO 54525
54160: LD_INT 6
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54216
54166: LD_INT 7
54168: DOUBLE
54169: EQUAL
54170: IFTRUE 54216
54172: LD_INT 8
54174: DOUBLE
54175: EQUAL
54176: IFTRUE 54216
54178: LD_INT 13
54180: DOUBLE
54181: EQUAL
54182: IFTRUE 54216
54184: LD_INT 12
54186: DOUBLE
54187: EQUAL
54188: IFTRUE 54216
54190: LD_INT 15
54192: DOUBLE
54193: EQUAL
54194: IFTRUE 54216
54196: LD_INT 11
54198: DOUBLE
54199: EQUAL
54200: IFTRUE 54216
54202: LD_INT 14
54204: DOUBLE
54205: EQUAL
54206: IFTRUE 54216
54208: LD_INT 10
54210: DOUBLE
54211: EQUAL
54212: IFTRUE 54216
54214: GO 54272
54216: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54217: LD_ADDR_VAR 0 9
54221: PUSH
54222: LD_VAR 0 41
54226: PUSH
54227: LD_VAR 0 42
54231: PUSH
54232: LD_VAR 0 43
54236: PUSH
54237: LD_VAR 0 44
54241: PUSH
54242: LD_VAR 0 45
54246: PUSH
54247: LD_VAR 0 46
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: PUSH
54260: LD_VAR 0 4
54264: PUSH
54265: LD_INT 1
54267: PLUS
54268: ARRAY
54269: ST_TO_ADDR
54270: GO 54525
54272: LD_INT 36
54274: DOUBLE
54275: EQUAL
54276: IFTRUE 54280
54278: GO 54336
54280: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54281: LD_ADDR_VAR 0 9
54285: PUSH
54286: LD_VAR 0 47
54290: PUSH
54291: LD_VAR 0 48
54295: PUSH
54296: LD_VAR 0 49
54300: PUSH
54301: LD_VAR 0 50
54305: PUSH
54306: LD_VAR 0 51
54310: PUSH
54311: LD_VAR 0 52
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: PUSH
54324: LD_VAR 0 4
54328: PUSH
54329: LD_INT 1
54331: PLUS
54332: ARRAY
54333: ST_TO_ADDR
54334: GO 54525
54336: LD_INT 4
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54362
54342: LD_INT 5
54344: DOUBLE
54345: EQUAL
54346: IFTRUE 54362
54348: LD_INT 34
54350: DOUBLE
54351: EQUAL
54352: IFTRUE 54362
54354: LD_INT 37
54356: DOUBLE
54357: EQUAL
54358: IFTRUE 54362
54360: GO 54418
54362: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54363: LD_ADDR_VAR 0 9
54367: PUSH
54368: LD_VAR 0 53
54372: PUSH
54373: LD_VAR 0 54
54377: PUSH
54378: LD_VAR 0 55
54382: PUSH
54383: LD_VAR 0 56
54387: PUSH
54388: LD_VAR 0 57
54392: PUSH
54393: LD_VAR 0 58
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: PUSH
54406: LD_VAR 0 4
54410: PUSH
54411: LD_INT 1
54413: PLUS
54414: ARRAY
54415: ST_TO_ADDR
54416: GO 54525
54418: LD_INT 31
54420: DOUBLE
54421: EQUAL
54422: IFTRUE 54468
54424: LD_INT 32
54426: DOUBLE
54427: EQUAL
54428: IFTRUE 54468
54430: LD_INT 33
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54468
54436: LD_INT 27
54438: DOUBLE
54439: EQUAL
54440: IFTRUE 54468
54442: LD_INT 26
54444: DOUBLE
54445: EQUAL
54446: IFTRUE 54468
54448: LD_INT 28
54450: DOUBLE
54451: EQUAL
54452: IFTRUE 54468
54454: LD_INT 29
54456: DOUBLE
54457: EQUAL
54458: IFTRUE 54468
54460: LD_INT 30
54462: DOUBLE
54463: EQUAL
54464: IFTRUE 54468
54466: GO 54524
54468: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54469: LD_ADDR_VAR 0 9
54473: PUSH
54474: LD_VAR 0 59
54478: PUSH
54479: LD_VAR 0 60
54483: PUSH
54484: LD_VAR 0 61
54488: PUSH
54489: LD_VAR 0 62
54493: PUSH
54494: LD_VAR 0 63
54498: PUSH
54499: LD_VAR 0 64
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: PUSH
54512: LD_VAR 0 4
54516: PUSH
54517: LD_INT 1
54519: PLUS
54520: ARRAY
54521: ST_TO_ADDR
54522: GO 54525
54524: POP
// temp_list2 = [ ] ;
54525: LD_ADDR_VAR 0 10
54529: PUSH
54530: EMPTY
54531: ST_TO_ADDR
// for i in temp_list do
54532: LD_ADDR_VAR 0 8
54536: PUSH
54537: LD_VAR 0 9
54541: PUSH
54542: FOR_IN
54543: IFFALSE 54595
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54545: LD_ADDR_VAR 0 10
54549: PUSH
54550: LD_VAR 0 10
54554: PUSH
54555: LD_VAR 0 8
54559: PUSH
54560: LD_INT 1
54562: ARRAY
54563: PUSH
54564: LD_VAR 0 2
54568: PLUS
54569: PUSH
54570: LD_VAR 0 8
54574: PUSH
54575: LD_INT 2
54577: ARRAY
54578: PUSH
54579: LD_VAR 0 3
54583: PLUS
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: ADD
54592: ST_TO_ADDR
54593: GO 54542
54595: POP
54596: POP
// result = temp_list2 ;
54597: LD_ADDR_VAR 0 7
54601: PUSH
54602: LD_VAR 0 10
54606: ST_TO_ADDR
// end ;
54607: LD_VAR 0 7
54611: RET
// export function EnemyInRange ( unit , dist ) ; begin
54612: LD_INT 0
54614: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54615: LD_ADDR_VAR 0 3
54619: PUSH
54620: LD_VAR 0 1
54624: PPUSH
54625: CALL_OW 255
54629: PPUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: CALL_OW 250
54639: PPUSH
54640: LD_VAR 0 1
54644: PPUSH
54645: CALL_OW 251
54649: PPUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: CALL 28716 0 4
54659: PUSH
54660: LD_INT 4
54662: ARRAY
54663: ST_TO_ADDR
// end ;
54664: LD_VAR 0 3
54668: RET
// export function PlayerSeeMe ( unit ) ; begin
54669: LD_INT 0
54671: PPUSH
// result := See ( your_side , unit ) ;
54672: LD_ADDR_VAR 0 2
54676: PUSH
54677: LD_OWVAR 2
54681: PPUSH
54682: LD_VAR 0 1
54686: PPUSH
54687: CALL_OW 292
54691: ST_TO_ADDR
// end ;
54692: LD_VAR 0 2
54696: RET
// export function ReverseDir ( unit ) ; begin
54697: LD_INT 0
54699: PPUSH
// if not unit then
54700: LD_VAR 0 1
54704: NOT
54705: IFFALSE 54709
// exit ;
54707: GO 54732
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54709: LD_ADDR_VAR 0 2
54713: PUSH
54714: LD_VAR 0 1
54718: PPUSH
54719: CALL_OW 254
54723: PUSH
54724: LD_INT 3
54726: PLUS
54727: PUSH
54728: LD_INT 6
54730: MOD
54731: ST_TO_ADDR
// end ;
54732: LD_VAR 0 2
54736: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54737: LD_INT 0
54739: PPUSH
54740: PPUSH
54741: PPUSH
54742: PPUSH
54743: PPUSH
// if not hexes then
54744: LD_VAR 0 2
54748: NOT
54749: IFFALSE 54753
// exit ;
54751: GO 54901
// dist := 9999 ;
54753: LD_ADDR_VAR 0 5
54757: PUSH
54758: LD_INT 9999
54760: ST_TO_ADDR
// for i = 1 to hexes do
54761: LD_ADDR_VAR 0 4
54765: PUSH
54766: DOUBLE
54767: LD_INT 1
54769: DEC
54770: ST_TO_ADDR
54771: LD_VAR 0 2
54775: PUSH
54776: FOR_TO
54777: IFFALSE 54889
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54779: LD_VAR 0 1
54783: PPUSH
54784: LD_VAR 0 2
54788: PUSH
54789: LD_VAR 0 4
54793: ARRAY
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: PPUSH
54799: LD_VAR 0 2
54803: PUSH
54804: LD_VAR 0 4
54808: ARRAY
54809: PUSH
54810: LD_INT 2
54812: ARRAY
54813: PPUSH
54814: CALL_OW 297
54818: PUSH
54819: LD_VAR 0 5
54823: LESS
54824: IFFALSE 54887
// begin hex := hexes [ i ] ;
54826: LD_ADDR_VAR 0 7
54830: PUSH
54831: LD_VAR 0 2
54835: PUSH
54836: LD_VAR 0 4
54840: ARRAY
54841: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54842: LD_ADDR_VAR 0 5
54846: PUSH
54847: LD_VAR 0 1
54851: PPUSH
54852: LD_VAR 0 2
54856: PUSH
54857: LD_VAR 0 4
54861: ARRAY
54862: PUSH
54863: LD_INT 1
54865: ARRAY
54866: PPUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_VAR 0 4
54876: ARRAY
54877: PUSH
54878: LD_INT 2
54880: ARRAY
54881: PPUSH
54882: CALL_OW 297
54886: ST_TO_ADDR
// end ; end ;
54887: GO 54776
54889: POP
54890: POP
// result := hex ;
54891: LD_ADDR_VAR 0 3
54895: PUSH
54896: LD_VAR 0 7
54900: ST_TO_ADDR
// end ;
54901: LD_VAR 0 3
54905: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54906: LD_INT 0
54908: PPUSH
54909: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54910: LD_VAR 0 1
54914: NOT
54915: PUSH
54916: LD_VAR 0 1
54920: PUSH
54921: LD_INT 21
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 23
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PPUSH
54945: CALL_OW 69
54949: IN
54950: NOT
54951: OR
54952: IFFALSE 54956
// exit ;
54954: GO 55003
// for i = 1 to 3 do
54956: LD_ADDR_VAR 0 3
54960: PUSH
54961: DOUBLE
54962: LD_INT 1
54964: DEC
54965: ST_TO_ADDR
54966: LD_INT 3
54968: PUSH
54969: FOR_TO
54970: IFFALSE 55001
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 250
54981: PPUSH
54982: LD_VAR 0 1
54986: PPUSH
54987: CALL_OW 251
54991: PPUSH
54992: LD_INT 1
54994: PPUSH
54995: CALL_OW 453
54999: GO 54969
55001: POP
55002: POP
// end ;
55003: LD_VAR 0 2
55007: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55008: LD_INT 0
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55016: LD_VAR 0 1
55020: NOT
55021: PUSH
55022: LD_VAR 0 2
55026: NOT
55027: OR
55028: PUSH
55029: LD_VAR 0 1
55033: PPUSH
55034: CALL_OW 314
55038: OR
55039: IFFALSE 55043
// exit ;
55041: GO 55484
// x := GetX ( enemy_unit ) ;
55043: LD_ADDR_VAR 0 7
55047: PUSH
55048: LD_VAR 0 2
55052: PPUSH
55053: CALL_OW 250
55057: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55058: LD_ADDR_VAR 0 8
55062: PUSH
55063: LD_VAR 0 2
55067: PPUSH
55068: CALL_OW 251
55072: ST_TO_ADDR
// if not x or not y then
55073: LD_VAR 0 7
55077: NOT
55078: PUSH
55079: LD_VAR 0 8
55083: NOT
55084: OR
55085: IFFALSE 55089
// exit ;
55087: GO 55484
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55089: LD_ADDR_VAR 0 6
55093: PUSH
55094: LD_VAR 0 7
55098: PPUSH
55099: LD_INT 0
55101: PPUSH
55102: LD_INT 4
55104: PPUSH
55105: CALL_OW 272
55109: PUSH
55110: LD_VAR 0 8
55114: PPUSH
55115: LD_INT 0
55117: PPUSH
55118: LD_INT 4
55120: PPUSH
55121: CALL_OW 273
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_VAR 0 7
55134: PPUSH
55135: LD_INT 1
55137: PPUSH
55138: LD_INT 4
55140: PPUSH
55141: CALL_OW 272
55145: PUSH
55146: LD_VAR 0 8
55150: PPUSH
55151: LD_INT 1
55153: PPUSH
55154: LD_INT 4
55156: PPUSH
55157: CALL_OW 273
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_VAR 0 7
55170: PPUSH
55171: LD_INT 2
55173: PPUSH
55174: LD_INT 4
55176: PPUSH
55177: CALL_OW 272
55181: PUSH
55182: LD_VAR 0 8
55186: PPUSH
55187: LD_INT 2
55189: PPUSH
55190: LD_INT 4
55192: PPUSH
55193: CALL_OW 273
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_VAR 0 7
55206: PPUSH
55207: LD_INT 3
55209: PPUSH
55210: LD_INT 4
55212: PPUSH
55213: CALL_OW 272
55217: PUSH
55218: LD_VAR 0 8
55222: PPUSH
55223: LD_INT 3
55225: PPUSH
55226: LD_INT 4
55228: PPUSH
55229: CALL_OW 273
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_VAR 0 7
55242: PPUSH
55243: LD_INT 4
55245: PPUSH
55246: LD_INT 4
55248: PPUSH
55249: CALL_OW 272
55253: PUSH
55254: LD_VAR 0 8
55258: PPUSH
55259: LD_INT 4
55261: PPUSH
55262: LD_INT 4
55264: PPUSH
55265: CALL_OW 273
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_VAR 0 7
55278: PPUSH
55279: LD_INT 5
55281: PPUSH
55282: LD_INT 4
55284: PPUSH
55285: CALL_OW 272
55289: PUSH
55290: LD_VAR 0 8
55294: PPUSH
55295: LD_INT 5
55297: PPUSH
55298: LD_INT 4
55300: PPUSH
55301: CALL_OW 273
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// for i = tmp downto 1 do
55318: LD_ADDR_VAR 0 4
55322: PUSH
55323: DOUBLE
55324: LD_VAR 0 6
55328: INC
55329: ST_TO_ADDR
55330: LD_INT 1
55332: PUSH
55333: FOR_DOWNTO
55334: IFFALSE 55435
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55336: LD_VAR 0 6
55340: PUSH
55341: LD_VAR 0 4
55345: ARRAY
55346: PUSH
55347: LD_INT 1
55349: ARRAY
55350: PPUSH
55351: LD_VAR 0 6
55355: PUSH
55356: LD_VAR 0 4
55360: ARRAY
55361: PUSH
55362: LD_INT 2
55364: ARRAY
55365: PPUSH
55366: CALL_OW 488
55370: NOT
55371: PUSH
55372: LD_VAR 0 6
55376: PUSH
55377: LD_VAR 0 4
55381: ARRAY
55382: PUSH
55383: LD_INT 1
55385: ARRAY
55386: PPUSH
55387: LD_VAR 0 6
55391: PUSH
55392: LD_VAR 0 4
55396: ARRAY
55397: PUSH
55398: LD_INT 2
55400: ARRAY
55401: PPUSH
55402: CALL_OW 428
55406: PUSH
55407: LD_INT 0
55409: NONEQUAL
55410: OR
55411: IFFALSE 55433
// tmp := Delete ( tmp , i ) ;
55413: LD_ADDR_VAR 0 6
55417: PUSH
55418: LD_VAR 0 6
55422: PPUSH
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 3
55432: ST_TO_ADDR
55433: GO 55333
55435: POP
55436: POP
// j := GetClosestHex ( unit , tmp ) ;
55437: LD_ADDR_VAR 0 5
55441: PUSH
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_VAR 0 6
55451: PPUSH
55452: CALL 54737 0 2
55456: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55457: LD_VAR 0 1
55461: PPUSH
55462: LD_VAR 0 5
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: PPUSH
55471: LD_VAR 0 5
55475: PUSH
55476: LD_INT 2
55478: ARRAY
55479: PPUSH
55480: CALL_OW 111
// end ;
55484: LD_VAR 0 3
55488: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55489: LD_INT 0
55491: PPUSH
55492: PPUSH
55493: PPUSH
// uc_side = 0 ;
55494: LD_ADDR_OWVAR 20
55498: PUSH
55499: LD_INT 0
55501: ST_TO_ADDR
// uc_nation = 0 ;
55502: LD_ADDR_OWVAR 21
55506: PUSH
55507: LD_INT 0
55509: ST_TO_ADDR
// InitHc ;
55510: CALL_OW 19
// InitVc ;
55514: CALL_OW 20
// if mastodonts then
55518: LD_VAR 0 6
55522: IFFALSE 55589
// for i = 1 to mastodonts do
55524: LD_ADDR_VAR 0 11
55528: PUSH
55529: DOUBLE
55530: LD_INT 1
55532: DEC
55533: ST_TO_ADDR
55534: LD_VAR 0 6
55538: PUSH
55539: FOR_TO
55540: IFFALSE 55587
// begin vc_chassis := 31 ;
55542: LD_ADDR_OWVAR 37
55546: PUSH
55547: LD_INT 31
55549: ST_TO_ADDR
// vc_control := control_rider ;
55550: LD_ADDR_OWVAR 38
55554: PUSH
55555: LD_INT 4
55557: ST_TO_ADDR
// animal := CreateVehicle ;
55558: LD_ADDR_VAR 0 12
55562: PUSH
55563: CALL_OW 45
55567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55568: LD_VAR 0 12
55572: PPUSH
55573: LD_VAR 0 8
55577: PPUSH
55578: LD_INT 0
55580: PPUSH
55581: CALL 57658 0 3
// end ;
55585: GO 55539
55587: POP
55588: POP
// if horses then
55589: LD_VAR 0 5
55593: IFFALSE 55660
// for i = 1 to horses do
55595: LD_ADDR_VAR 0 11
55599: PUSH
55600: DOUBLE
55601: LD_INT 1
55603: DEC
55604: ST_TO_ADDR
55605: LD_VAR 0 5
55609: PUSH
55610: FOR_TO
55611: IFFALSE 55658
// begin hc_class := 21 ;
55613: LD_ADDR_OWVAR 28
55617: PUSH
55618: LD_INT 21
55620: ST_TO_ADDR
// hc_gallery :=  ;
55621: LD_ADDR_OWVAR 33
55625: PUSH
55626: LD_STRING 
55628: ST_TO_ADDR
// animal := CreateHuman ;
55629: LD_ADDR_VAR 0 12
55633: PUSH
55634: CALL_OW 44
55638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55639: LD_VAR 0 12
55643: PPUSH
55644: LD_VAR 0 8
55648: PPUSH
55649: LD_INT 0
55651: PPUSH
55652: CALL 57658 0 3
// end ;
55656: GO 55610
55658: POP
55659: POP
// if birds then
55660: LD_VAR 0 1
55664: IFFALSE 55731
// for i = 1 to birds do
55666: LD_ADDR_VAR 0 11
55670: PUSH
55671: DOUBLE
55672: LD_INT 1
55674: DEC
55675: ST_TO_ADDR
55676: LD_VAR 0 1
55680: PUSH
55681: FOR_TO
55682: IFFALSE 55729
// begin hc_class = 18 ;
55684: LD_ADDR_OWVAR 28
55688: PUSH
55689: LD_INT 18
55691: ST_TO_ADDR
// hc_gallery =  ;
55692: LD_ADDR_OWVAR 33
55696: PUSH
55697: LD_STRING 
55699: ST_TO_ADDR
// animal := CreateHuman ;
55700: LD_ADDR_VAR 0 12
55704: PUSH
55705: CALL_OW 44
55709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55710: LD_VAR 0 12
55714: PPUSH
55715: LD_VAR 0 8
55719: PPUSH
55720: LD_INT 0
55722: PPUSH
55723: CALL 57658 0 3
// end ;
55727: GO 55681
55729: POP
55730: POP
// if tigers then
55731: LD_VAR 0 2
55735: IFFALSE 55819
// for i = 1 to tigers do
55737: LD_ADDR_VAR 0 11
55741: PUSH
55742: DOUBLE
55743: LD_INT 1
55745: DEC
55746: ST_TO_ADDR
55747: LD_VAR 0 2
55751: PUSH
55752: FOR_TO
55753: IFFALSE 55817
// begin hc_class = class_tiger ;
55755: LD_ADDR_OWVAR 28
55759: PUSH
55760: LD_INT 14
55762: ST_TO_ADDR
// hc_gallery =  ;
55763: LD_ADDR_OWVAR 33
55767: PUSH
55768: LD_STRING 
55770: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55771: LD_ADDR_OWVAR 35
55775: PUSH
55776: LD_INT 7
55778: NEG
55779: PPUSH
55780: LD_INT 7
55782: PPUSH
55783: CALL_OW 12
55787: ST_TO_ADDR
// animal := CreateHuman ;
55788: LD_ADDR_VAR 0 12
55792: PUSH
55793: CALL_OW 44
55797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55798: LD_VAR 0 12
55802: PPUSH
55803: LD_VAR 0 8
55807: PPUSH
55808: LD_INT 0
55810: PPUSH
55811: CALL 57658 0 3
// end ;
55815: GO 55752
55817: POP
55818: POP
// if apemans then
55819: LD_VAR 0 3
55823: IFFALSE 55946
// for i = 1 to apemans do
55825: LD_ADDR_VAR 0 11
55829: PUSH
55830: DOUBLE
55831: LD_INT 1
55833: DEC
55834: ST_TO_ADDR
55835: LD_VAR 0 3
55839: PUSH
55840: FOR_TO
55841: IFFALSE 55944
// begin hc_class = class_apeman ;
55843: LD_ADDR_OWVAR 28
55847: PUSH
55848: LD_INT 12
55850: ST_TO_ADDR
// hc_gallery =  ;
55851: LD_ADDR_OWVAR 33
55855: PUSH
55856: LD_STRING 
55858: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55859: LD_ADDR_OWVAR 35
55863: PUSH
55864: LD_INT 5
55866: NEG
55867: PPUSH
55868: LD_INT 5
55870: PPUSH
55871: CALL_OW 12
55875: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55876: LD_ADDR_OWVAR 31
55880: PUSH
55881: LD_INT 1
55883: PPUSH
55884: LD_INT 3
55886: PPUSH
55887: CALL_OW 12
55891: PUSH
55892: LD_INT 1
55894: PPUSH
55895: LD_INT 3
55897: PPUSH
55898: CALL_OW 12
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// animal := CreateHuman ;
55915: LD_ADDR_VAR 0 12
55919: PUSH
55920: CALL_OW 44
55924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55925: LD_VAR 0 12
55929: PPUSH
55930: LD_VAR 0 8
55934: PPUSH
55935: LD_INT 0
55937: PPUSH
55938: CALL 57658 0 3
// end ;
55942: GO 55840
55944: POP
55945: POP
// if enchidnas then
55946: LD_VAR 0 4
55950: IFFALSE 56017
// for i = 1 to enchidnas do
55952: LD_ADDR_VAR 0 11
55956: PUSH
55957: DOUBLE
55958: LD_INT 1
55960: DEC
55961: ST_TO_ADDR
55962: LD_VAR 0 4
55966: PUSH
55967: FOR_TO
55968: IFFALSE 56015
// begin hc_class = 13 ;
55970: LD_ADDR_OWVAR 28
55974: PUSH
55975: LD_INT 13
55977: ST_TO_ADDR
// hc_gallery =  ;
55978: LD_ADDR_OWVAR 33
55982: PUSH
55983: LD_STRING 
55985: ST_TO_ADDR
// animal := CreateHuman ;
55986: LD_ADDR_VAR 0 12
55990: PUSH
55991: CALL_OW 44
55995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55996: LD_VAR 0 12
56000: PPUSH
56001: LD_VAR 0 8
56005: PPUSH
56006: LD_INT 0
56008: PPUSH
56009: CALL 57658 0 3
// end ;
56013: GO 55967
56015: POP
56016: POP
// if fishes then
56017: LD_VAR 0 7
56021: IFFALSE 56088
// for i = 1 to fishes do
56023: LD_ADDR_VAR 0 11
56027: PUSH
56028: DOUBLE
56029: LD_INT 1
56031: DEC
56032: ST_TO_ADDR
56033: LD_VAR 0 7
56037: PUSH
56038: FOR_TO
56039: IFFALSE 56086
// begin hc_class = 20 ;
56041: LD_ADDR_OWVAR 28
56045: PUSH
56046: LD_INT 20
56048: ST_TO_ADDR
// hc_gallery =  ;
56049: LD_ADDR_OWVAR 33
56053: PUSH
56054: LD_STRING 
56056: ST_TO_ADDR
// animal := CreateHuman ;
56057: LD_ADDR_VAR 0 12
56061: PUSH
56062: CALL_OW 44
56066: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56067: LD_VAR 0 12
56071: PPUSH
56072: LD_VAR 0 9
56076: PPUSH
56077: LD_INT 0
56079: PPUSH
56080: CALL 57658 0 3
// end ;
56084: GO 56038
56086: POP
56087: POP
// end ;
56088: LD_VAR 0 10
56092: RET
// export function WantHeal ( sci , unit ) ; begin
56093: LD_INT 0
56095: PPUSH
// if GetTaskList ( sci ) > 0 then
56096: LD_VAR 0 1
56100: PPUSH
56101: CALL_OW 437
56105: PUSH
56106: LD_INT 0
56108: GREATER
56109: IFFALSE 56179
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 437
56120: PUSH
56121: LD_INT 1
56123: ARRAY
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: PUSH
56129: LD_STRING l
56131: EQUAL
56132: PUSH
56133: LD_VAR 0 1
56137: PPUSH
56138: CALL_OW 437
56142: PUSH
56143: LD_INT 1
56145: ARRAY
56146: PUSH
56147: LD_INT 4
56149: ARRAY
56150: PUSH
56151: LD_VAR 0 2
56155: EQUAL
56156: AND
56157: IFFALSE 56169
// result := true else
56159: LD_ADDR_VAR 0 3
56163: PUSH
56164: LD_INT 1
56166: ST_TO_ADDR
56167: GO 56177
// result := false ;
56169: LD_ADDR_VAR 0 3
56173: PUSH
56174: LD_INT 0
56176: ST_TO_ADDR
// end else
56177: GO 56187
// result := false ;
56179: LD_ADDR_VAR 0 3
56183: PUSH
56184: LD_INT 0
56186: ST_TO_ADDR
// end ;
56187: LD_VAR 0 3
56191: RET
// export function HealTarget ( sci ) ; begin
56192: LD_INT 0
56194: PPUSH
// if not sci then
56195: LD_VAR 0 1
56199: NOT
56200: IFFALSE 56204
// exit ;
56202: GO 56269
// result := 0 ;
56204: LD_ADDR_VAR 0 2
56208: PUSH
56209: LD_INT 0
56211: ST_TO_ADDR
// if GetTaskList ( sci ) then
56212: LD_VAR 0 1
56216: PPUSH
56217: CALL_OW 437
56221: IFFALSE 56269
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 437
56232: PUSH
56233: LD_INT 1
56235: ARRAY
56236: PUSH
56237: LD_INT 1
56239: ARRAY
56240: PUSH
56241: LD_STRING l
56243: EQUAL
56244: IFFALSE 56269
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56246: LD_ADDR_VAR 0 2
56250: PUSH
56251: LD_VAR 0 1
56255: PPUSH
56256: CALL_OW 437
56260: PUSH
56261: LD_INT 1
56263: ARRAY
56264: PUSH
56265: LD_INT 4
56267: ARRAY
56268: ST_TO_ADDR
// end ;
56269: LD_VAR 0 2
56273: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56274: LD_INT 0
56276: PPUSH
56277: PPUSH
56278: PPUSH
56279: PPUSH
// if not base_units then
56280: LD_VAR 0 1
56284: NOT
56285: IFFALSE 56289
// exit ;
56287: GO 56376
// result := false ;
56289: LD_ADDR_VAR 0 2
56293: PUSH
56294: LD_INT 0
56296: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56297: LD_ADDR_VAR 0 5
56301: PUSH
56302: LD_VAR 0 1
56306: PPUSH
56307: LD_INT 21
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PPUSH
56317: CALL_OW 72
56321: ST_TO_ADDR
// if not tmp then
56322: LD_VAR 0 5
56326: NOT
56327: IFFALSE 56331
// exit ;
56329: GO 56376
// for i in tmp do
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: LD_VAR 0 5
56340: PUSH
56341: FOR_IN
56342: IFFALSE 56374
// begin result := EnemyInRange ( i , 22 ) ;
56344: LD_ADDR_VAR 0 2
56348: PUSH
56349: LD_VAR 0 3
56353: PPUSH
56354: LD_INT 22
56356: PPUSH
56357: CALL 54612 0 2
56361: ST_TO_ADDR
// if result then
56362: LD_VAR 0 2
56366: IFFALSE 56372
// exit ;
56368: POP
56369: POP
56370: GO 56376
// end ;
56372: GO 56341
56374: POP
56375: POP
// end ;
56376: LD_VAR 0 2
56380: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56381: LD_INT 0
56383: PPUSH
56384: PPUSH
// if not units then
56385: LD_VAR 0 1
56389: NOT
56390: IFFALSE 56394
// exit ;
56392: GO 56464
// result := [ ] ;
56394: LD_ADDR_VAR 0 3
56398: PUSH
56399: EMPTY
56400: ST_TO_ADDR
// for i in units do
56401: LD_ADDR_VAR 0 4
56405: PUSH
56406: LD_VAR 0 1
56410: PUSH
56411: FOR_IN
56412: IFFALSE 56462
// if GetTag ( i ) = tag then
56414: LD_VAR 0 4
56418: PPUSH
56419: CALL_OW 110
56423: PUSH
56424: LD_VAR 0 2
56428: EQUAL
56429: IFFALSE 56460
// result := Insert ( result , result + 1 , i ) ;
56431: LD_ADDR_VAR 0 3
56435: PUSH
56436: LD_VAR 0 3
56440: PPUSH
56441: LD_VAR 0 3
56445: PUSH
56446: LD_INT 1
56448: PLUS
56449: PPUSH
56450: LD_VAR 0 4
56454: PPUSH
56455: CALL_OW 2
56459: ST_TO_ADDR
56460: GO 56411
56462: POP
56463: POP
// end ;
56464: LD_VAR 0 3
56468: RET
// export function IsDriver ( un ) ; begin
56469: LD_INT 0
56471: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56472: LD_ADDR_VAR 0 2
56476: PUSH
56477: LD_VAR 0 1
56481: PUSH
56482: LD_INT 55
56484: PUSH
56485: EMPTY
56486: LIST
56487: PPUSH
56488: CALL_OW 69
56492: IN
56493: ST_TO_ADDR
// end ;
56494: LD_VAR 0 2
56498: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56499: LD_INT 0
56501: PPUSH
56502: PPUSH
// list := [ ] ;
56503: LD_ADDR_VAR 0 5
56507: PUSH
56508: EMPTY
56509: ST_TO_ADDR
// case d of 0 :
56510: LD_VAR 0 3
56514: PUSH
56515: LD_INT 0
56517: DOUBLE
56518: EQUAL
56519: IFTRUE 56523
56521: GO 56656
56523: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56524: LD_ADDR_VAR 0 5
56528: PUSH
56529: LD_VAR 0 1
56533: PUSH
56534: LD_INT 4
56536: MINUS
56537: PUSH
56538: LD_VAR 0 2
56542: PUSH
56543: LD_INT 4
56545: MINUS
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: PUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 3
56562: MINUS
56563: PUSH
56564: LD_VAR 0 2
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: PUSH
56577: LD_VAR 0 1
56581: PUSH
56582: LD_INT 4
56584: PLUS
56585: PUSH
56586: LD_VAR 0 2
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: PUSH
56599: LD_VAR 0 1
56603: PUSH
56604: LD_INT 3
56606: PLUS
56607: PUSH
56608: LD_VAR 0 2
56612: PUSH
56613: LD_INT 3
56615: PLUS
56616: PUSH
56617: LD_INT 5
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_VAR 0 2
56634: PUSH
56635: LD_INT 4
56637: PLUS
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// end ; 1 :
56654: GO 57354
56656: LD_INT 1
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56664
56662: GO 56797
56664: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56665: LD_ADDR_VAR 0 5
56669: PUSH
56670: LD_VAR 0 1
56674: PUSH
56675: LD_VAR 0 2
56679: PUSH
56680: LD_INT 4
56682: MINUS
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: PUSH
56692: LD_VAR 0 1
56696: PUSH
56697: LD_INT 3
56699: MINUS
56700: PUSH
56701: LD_VAR 0 2
56705: PUSH
56706: LD_INT 3
56708: MINUS
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: LD_INT 4
56725: MINUS
56726: PUSH
56727: LD_VAR 0 2
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: PUSH
56740: LD_VAR 0 1
56744: PUSH
56745: LD_VAR 0 2
56749: PUSH
56750: LD_INT 3
56752: PLUS
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: LD_VAR 0 1
56766: PUSH
56767: LD_INT 4
56769: PLUS
56770: PUSH
56771: LD_VAR 0 2
56775: PUSH
56776: LD_INT 4
56778: PLUS
56779: PUSH
56780: LD_INT 5
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// end ; 2 :
56795: GO 57354
56797: LD_INT 2
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56805
56803: GO 56934
56805: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_VAR 0 1
56815: PUSH
56816: LD_VAR 0 2
56820: PUSH
56821: LD_INT 3
56823: MINUS
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: PUSH
56833: LD_VAR 0 1
56837: PUSH
56838: LD_INT 4
56840: PLUS
56841: PUSH
56842: LD_VAR 0 2
56846: PUSH
56847: LD_INT 4
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: PUSH
56855: LD_VAR 0 1
56859: PUSH
56860: LD_VAR 0 2
56864: PUSH
56865: LD_INT 4
56867: PLUS
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: PUSH
56877: LD_VAR 0 1
56881: PUSH
56882: LD_INT 3
56884: MINUS
56885: PUSH
56886: LD_VAR 0 2
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: LD_VAR 0 1
56903: PUSH
56904: LD_INT 4
56906: MINUS
56907: PUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_INT 4
56915: MINUS
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// end ; 3 :
56932: GO 57354
56934: LD_INT 3
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56942
56940: GO 57075
56942: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56943: LD_ADDR_VAR 0 5
56947: PUSH
56948: LD_VAR 0 1
56952: PUSH
56953: LD_INT 3
56955: PLUS
56956: PUSH
56957: LD_VAR 0 2
56961: PUSH
56962: LD_INT 4
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: PUSH
56970: LD_VAR 0 1
56974: PUSH
56975: LD_INT 4
56977: PLUS
56978: PUSH
56979: LD_VAR 0 2
56983: PUSH
56984: LD_INT 4
56986: PLUS
56987: PUSH
56988: LD_INT 5
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: PUSH
56996: LD_VAR 0 1
57000: PUSH
57001: LD_INT 4
57003: MINUS
57004: PUSH
57005: LD_VAR 0 2
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: PUSH
57018: LD_VAR 0 1
57022: PUSH
57023: LD_VAR 0 2
57027: PUSH
57028: LD_INT 4
57030: MINUS
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: PUSH
57040: LD_VAR 0 1
57044: PUSH
57045: LD_INT 3
57047: MINUS
57048: PUSH
57049: LD_VAR 0 2
57053: PUSH
57054: LD_INT 3
57056: MINUS
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// end ; 4 :
57073: GO 57354
57075: LD_INT 4
57077: DOUBLE
57078: EQUAL
57079: IFTRUE 57083
57081: GO 57216
57083: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57084: LD_ADDR_VAR 0 5
57088: PUSH
57089: LD_VAR 0 1
57093: PUSH
57094: LD_VAR 0 2
57098: PUSH
57099: LD_INT 4
57101: PLUS
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: PUSH
57111: LD_VAR 0 1
57115: PUSH
57116: LD_INT 3
57118: PLUS
57119: PUSH
57120: LD_VAR 0 2
57124: PUSH
57125: LD_INT 3
57127: PLUS
57128: PUSH
57129: LD_INT 5
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 1
57141: PUSH
57142: LD_INT 4
57144: PLUS
57145: PUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: LIST
57158: PUSH
57159: LD_VAR 0 1
57163: PUSH
57164: LD_VAR 0 2
57168: PUSH
57169: LD_INT 3
57171: MINUS
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: PUSH
57181: LD_VAR 0 1
57185: PUSH
57186: LD_INT 4
57188: MINUS
57189: PUSH
57190: LD_VAR 0 2
57194: PUSH
57195: LD_INT 4
57197: MINUS
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// end ; 5 :
57214: GO 57354
57216: LD_INT 5
57218: DOUBLE
57219: EQUAL
57220: IFTRUE 57224
57222: GO 57353
57224: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57225: LD_ADDR_VAR 0 5
57229: PUSH
57230: LD_VAR 0 1
57234: PUSH
57235: LD_INT 4
57237: MINUS
57238: PUSH
57239: LD_VAR 0 2
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: PUSH
57252: LD_VAR 0 1
57256: PUSH
57257: LD_VAR 0 2
57261: PUSH
57262: LD_INT 4
57264: MINUS
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: PUSH
57274: LD_VAR 0 1
57278: PUSH
57279: LD_INT 4
57281: PLUS
57282: PUSH
57283: LD_VAR 0 2
57287: PUSH
57288: LD_INT 4
57290: PLUS
57291: PUSH
57292: LD_INT 5
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: PUSH
57300: LD_VAR 0 1
57304: PUSH
57305: LD_INT 3
57307: PLUS
57308: PUSH
57309: LD_VAR 0 2
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: PUSH
57322: LD_VAR 0 1
57326: PUSH
57327: LD_VAR 0 2
57331: PUSH
57332: LD_INT 3
57334: PLUS
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// end ; end ;
57351: GO 57354
57353: POP
// result := list ;
57354: LD_ADDR_VAR 0 4
57358: PUSH
57359: LD_VAR 0 5
57363: ST_TO_ADDR
// end ;
57364: LD_VAR 0 4
57368: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
57373: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57374: LD_VAR 0 1
57378: NOT
57379: PUSH
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: IN
57403: NOT
57404: OR
57405: IFFALSE 57409
// exit ;
57407: GO 57501
// tmp := [ ] ;
57409: LD_ADDR_VAR 0 5
57413: PUSH
57414: EMPTY
57415: ST_TO_ADDR
// for i in units do
57416: LD_ADDR_VAR 0 4
57420: PUSH
57421: LD_VAR 0 1
57425: PUSH
57426: FOR_IN
57427: IFFALSE 57470
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57429: LD_ADDR_VAR 0 5
57433: PUSH
57434: LD_VAR 0 5
57438: PPUSH
57439: LD_VAR 0 5
57443: PUSH
57444: LD_INT 1
57446: PLUS
57447: PPUSH
57448: LD_VAR 0 4
57452: PPUSH
57453: LD_VAR 0 2
57457: PPUSH
57458: CALL_OW 259
57462: PPUSH
57463: CALL_OW 2
57467: ST_TO_ADDR
57468: GO 57426
57470: POP
57471: POP
// if not tmp then
57472: LD_VAR 0 5
57476: NOT
57477: IFFALSE 57481
// exit ;
57479: GO 57501
// result := SortListByListDesc ( units , tmp ) ;
57481: LD_ADDR_VAR 0 3
57485: PUSH
57486: LD_VAR 0 1
57490: PPUSH
57491: LD_VAR 0 5
57495: PPUSH
57496: CALL_OW 77
57500: ST_TO_ADDR
// end ;
57501: LD_VAR 0 3
57505: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57506: LD_INT 0
57508: PPUSH
57509: PPUSH
57510: PPUSH
// x := GetX ( building ) ;
57511: LD_ADDR_VAR 0 4
57515: PUSH
57516: LD_VAR 0 2
57520: PPUSH
57521: CALL_OW 250
57525: ST_TO_ADDR
// y := GetY ( building ) ;
57526: LD_ADDR_VAR 0 5
57530: PUSH
57531: LD_VAR 0 2
57535: PPUSH
57536: CALL_OW 251
57540: ST_TO_ADDR
// if GetTaskList ( unit ) then
57541: LD_VAR 0 1
57545: PPUSH
57546: CALL_OW 437
57550: IFFALSE 57645
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57552: LD_STRING e
57554: PUSH
57555: LD_VAR 0 1
57559: PPUSH
57560: CALL_OW 437
57564: PUSH
57565: LD_INT 1
57567: ARRAY
57568: PUSH
57569: LD_INT 1
57571: ARRAY
57572: EQUAL
57573: PUSH
57574: LD_VAR 0 4
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: CALL_OW 437
57588: PUSH
57589: LD_INT 1
57591: ARRAY
57592: PUSH
57593: LD_INT 2
57595: ARRAY
57596: EQUAL
57597: AND
57598: PUSH
57599: LD_VAR 0 5
57603: PUSH
57604: LD_VAR 0 1
57608: PPUSH
57609: CALL_OW 437
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: PUSH
57618: LD_INT 3
57620: ARRAY
57621: EQUAL
57622: AND
57623: IFFALSE 57635
// result := true else
57625: LD_ADDR_VAR 0 3
57629: PUSH
57630: LD_INT 1
57632: ST_TO_ADDR
57633: GO 57643
// result := false ;
57635: LD_ADDR_VAR 0 3
57639: PUSH
57640: LD_INT 0
57642: ST_TO_ADDR
// end else
57643: GO 57653
// result := false ;
57645: LD_ADDR_VAR 0 3
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
// end ;
57653: LD_VAR 0 3
57657: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57658: LD_INT 0
57660: PPUSH
57661: PPUSH
57662: PPUSH
57663: PPUSH
// if not unit or not area then
57664: LD_VAR 0 1
57668: NOT
57669: PUSH
57670: LD_VAR 0 2
57674: NOT
57675: OR
57676: IFFALSE 57680
// exit ;
57678: GO 57844
// tmp := AreaToList ( area , i ) ;
57680: LD_ADDR_VAR 0 6
57684: PUSH
57685: LD_VAR 0 2
57689: PPUSH
57690: LD_VAR 0 5
57694: PPUSH
57695: CALL_OW 517
57699: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57700: LD_ADDR_VAR 0 5
57704: PUSH
57705: DOUBLE
57706: LD_INT 1
57708: DEC
57709: ST_TO_ADDR
57710: LD_VAR 0 6
57714: PUSH
57715: LD_INT 1
57717: ARRAY
57718: PUSH
57719: FOR_TO
57720: IFFALSE 57842
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57722: LD_ADDR_VAR 0 7
57726: PUSH
57727: LD_VAR 0 6
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PUSH
57736: LD_VAR 0 5
57740: ARRAY
57741: PUSH
57742: LD_VAR 0 6
57746: PUSH
57747: LD_INT 2
57749: ARRAY
57750: PUSH
57751: LD_VAR 0 5
57755: ARRAY
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57761: LD_VAR 0 7
57765: PUSH
57766: LD_INT 1
57768: ARRAY
57769: PPUSH
57770: LD_VAR 0 7
57774: PUSH
57775: LD_INT 2
57777: ARRAY
57778: PPUSH
57779: CALL_OW 428
57783: PUSH
57784: LD_INT 0
57786: EQUAL
57787: IFFALSE 57840
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57789: LD_VAR 0 1
57793: PPUSH
57794: LD_VAR 0 7
57798: PUSH
57799: LD_INT 1
57801: ARRAY
57802: PPUSH
57803: LD_VAR 0 7
57807: PUSH
57808: LD_INT 2
57810: ARRAY
57811: PPUSH
57812: LD_VAR 0 3
57816: PPUSH
57817: CALL_OW 48
// result := IsPlaced ( unit ) ;
57821: LD_ADDR_VAR 0 4
57825: PUSH
57826: LD_VAR 0 1
57830: PPUSH
57831: CALL_OW 305
57835: ST_TO_ADDR
// exit ;
57836: POP
57837: POP
57838: GO 57844
// end ; end ;
57840: GO 57719
57842: POP
57843: POP
// end ;
57844: LD_VAR 0 4
57848: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57849: LD_INT 0
57851: PPUSH
57852: PPUSH
57853: PPUSH
// if not side or side > 8 then
57854: LD_VAR 0 1
57858: NOT
57859: PUSH
57860: LD_VAR 0 1
57864: PUSH
57865: LD_INT 8
57867: GREATER
57868: OR
57869: IFFALSE 57873
// exit ;
57871: GO 58060
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57873: LD_ADDR_VAR 0 4
57877: PUSH
57878: LD_INT 22
57880: PUSH
57881: LD_VAR 0 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 21
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PPUSH
57904: CALL_OW 69
57908: ST_TO_ADDR
// if not tmp then
57909: LD_VAR 0 4
57913: NOT
57914: IFFALSE 57918
// exit ;
57916: GO 58060
// enable_addtolog := true ;
57918: LD_ADDR_OWVAR 81
57922: PUSH
57923: LD_INT 1
57925: ST_TO_ADDR
// AddToLog ( [ ) ;
57926: LD_STRING [
57928: PPUSH
57929: CALL_OW 561
// for i in tmp do
57933: LD_ADDR_VAR 0 3
57937: PUSH
57938: LD_VAR 0 4
57942: PUSH
57943: FOR_IN
57944: IFFALSE 58051
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57946: LD_STRING [
57948: PUSH
57949: LD_VAR 0 3
57953: PPUSH
57954: CALL_OW 266
57958: STR
57959: PUSH
57960: LD_STRING , 
57962: STR
57963: PUSH
57964: LD_VAR 0 3
57968: PPUSH
57969: CALL_OW 250
57973: STR
57974: PUSH
57975: LD_STRING , 
57977: STR
57978: PUSH
57979: LD_VAR 0 3
57983: PPUSH
57984: CALL_OW 251
57988: STR
57989: PUSH
57990: LD_STRING , 
57992: STR
57993: PUSH
57994: LD_VAR 0 3
57998: PPUSH
57999: CALL_OW 254
58003: STR
58004: PUSH
58005: LD_STRING , 
58007: STR
58008: PUSH
58009: LD_VAR 0 3
58013: PPUSH
58014: LD_INT 1
58016: PPUSH
58017: CALL_OW 268
58021: STR
58022: PUSH
58023: LD_STRING , 
58025: STR
58026: PUSH
58027: LD_VAR 0 3
58031: PPUSH
58032: LD_INT 2
58034: PPUSH
58035: CALL_OW 268
58039: STR
58040: PUSH
58041: LD_STRING ],
58043: STR
58044: PPUSH
58045: CALL_OW 561
// end ;
58049: GO 57943
58051: POP
58052: POP
// AddToLog ( ]; ) ;
58053: LD_STRING ];
58055: PPUSH
58056: CALL_OW 561
// end ;
58060: LD_VAR 0 2
58064: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58065: LD_INT 0
58067: PPUSH
58068: PPUSH
58069: PPUSH
58070: PPUSH
58071: PPUSH
// if not area or not rate or not max then
58072: LD_VAR 0 1
58076: NOT
58077: PUSH
58078: LD_VAR 0 2
58082: NOT
58083: OR
58084: PUSH
58085: LD_VAR 0 4
58089: NOT
58090: OR
58091: IFFALSE 58095
// exit ;
58093: GO 58287
// while 1 do
58095: LD_INT 1
58097: IFFALSE 58287
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58099: LD_ADDR_VAR 0 9
58103: PUSH
58104: LD_VAR 0 1
58108: PPUSH
58109: LD_INT 1
58111: PPUSH
58112: CALL_OW 287
58116: PUSH
58117: LD_INT 10
58119: MUL
58120: ST_TO_ADDR
// r := rate / 10 ;
58121: LD_ADDR_VAR 0 7
58125: PUSH
58126: LD_VAR 0 2
58130: PUSH
58131: LD_INT 10
58133: DIVREAL
58134: ST_TO_ADDR
// time := 1 1$00 ;
58135: LD_ADDR_VAR 0 8
58139: PUSH
58140: LD_INT 2100
58142: ST_TO_ADDR
// if amount < min then
58143: LD_VAR 0 9
58147: PUSH
58148: LD_VAR 0 3
58152: LESS
58153: IFFALSE 58171
// r := r * 2 else
58155: LD_ADDR_VAR 0 7
58159: PUSH
58160: LD_VAR 0 7
58164: PUSH
58165: LD_INT 2
58167: MUL
58168: ST_TO_ADDR
58169: GO 58197
// if amount > max then
58171: LD_VAR 0 9
58175: PUSH
58176: LD_VAR 0 4
58180: GREATER
58181: IFFALSE 58197
// r := r / 2 ;
58183: LD_ADDR_VAR 0 7
58187: PUSH
58188: LD_VAR 0 7
58192: PUSH
58193: LD_INT 2
58195: DIVREAL
58196: ST_TO_ADDR
// time := time / r ;
58197: LD_ADDR_VAR 0 8
58201: PUSH
58202: LD_VAR 0 8
58206: PUSH
58207: LD_VAR 0 7
58211: DIVREAL
58212: ST_TO_ADDR
// if time < 0 then
58213: LD_VAR 0 8
58217: PUSH
58218: LD_INT 0
58220: LESS
58221: IFFALSE 58238
// time := time * - 1 ;
58223: LD_ADDR_VAR 0 8
58227: PUSH
58228: LD_VAR 0 8
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: MUL
58237: ST_TO_ADDR
// wait ( time ) ;
58238: LD_VAR 0 8
58242: PPUSH
58243: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58247: LD_INT 35
58249: PPUSH
58250: LD_INT 875
58252: PPUSH
58253: CALL_OW 12
58257: PPUSH
58258: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58262: LD_INT 1
58264: PPUSH
58265: LD_INT 5
58267: PPUSH
58268: CALL_OW 12
58272: PPUSH
58273: LD_VAR 0 1
58277: PPUSH
58278: LD_INT 1
58280: PPUSH
58281: CALL_OW 55
// end ;
58285: GO 58095
// end ;
58287: LD_VAR 0 5
58291: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58292: LD_INT 0
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
58301: PPUSH
// if not turrets or not factories then
58302: LD_VAR 0 1
58306: NOT
58307: PUSH
58308: LD_VAR 0 2
58312: NOT
58313: OR
58314: IFFALSE 58318
// exit ;
58316: GO 58625
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58318: LD_ADDR_VAR 0 10
58322: PUSH
58323: LD_INT 5
58325: PUSH
58326: LD_INT 6
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 5
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 24
58360: PUSH
58361: LD_INT 25
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 23
58370: PUSH
58371: LD_INT 27
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 42
58384: PUSH
58385: LD_INT 43
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 44
58394: PUSH
58395: LD_INT 46
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 45
58404: PUSH
58405: LD_INT 47
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// result := [ ] ;
58422: LD_ADDR_VAR 0 3
58426: PUSH
58427: EMPTY
58428: ST_TO_ADDR
// for i in turrets do
58429: LD_ADDR_VAR 0 4
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: FOR_IN
58440: IFFALSE 58623
// begin nat := GetNation ( i ) ;
58442: LD_ADDR_VAR 0 7
58446: PUSH
58447: LD_VAR 0 4
58451: PPUSH
58452: CALL_OW 248
58456: ST_TO_ADDR
// weapon := 0 ;
58457: LD_ADDR_VAR 0 8
58461: PUSH
58462: LD_INT 0
58464: ST_TO_ADDR
// if not nat then
58465: LD_VAR 0 7
58469: NOT
58470: IFFALSE 58474
// continue ;
58472: GO 58439
// for j in list [ nat ] do
58474: LD_ADDR_VAR 0 5
58478: PUSH
58479: LD_VAR 0 10
58483: PUSH
58484: LD_VAR 0 7
58488: ARRAY
58489: PUSH
58490: FOR_IN
58491: IFFALSE 58532
// if GetBWeapon ( i ) = j [ 1 ] then
58493: LD_VAR 0 4
58497: PPUSH
58498: CALL_OW 269
58502: PUSH
58503: LD_VAR 0 5
58507: PUSH
58508: LD_INT 1
58510: ARRAY
58511: EQUAL
58512: IFFALSE 58530
// begin weapon := j [ 2 ] ;
58514: LD_ADDR_VAR 0 8
58518: PUSH
58519: LD_VAR 0 5
58523: PUSH
58524: LD_INT 2
58526: ARRAY
58527: ST_TO_ADDR
// break ;
58528: GO 58532
// end ;
58530: GO 58490
58532: POP
58533: POP
// if not weapon then
58534: LD_VAR 0 8
58538: NOT
58539: IFFALSE 58543
// continue ;
58541: GO 58439
// for k in factories do
58543: LD_ADDR_VAR 0 6
58547: PUSH
58548: LD_VAR 0 2
58552: PUSH
58553: FOR_IN
58554: IFFALSE 58619
// begin weapons := AvailableWeaponList ( k ) ;
58556: LD_ADDR_VAR 0 9
58560: PUSH
58561: LD_VAR 0 6
58565: PPUSH
58566: CALL_OW 478
58570: ST_TO_ADDR
// if not weapons then
58571: LD_VAR 0 9
58575: NOT
58576: IFFALSE 58580
// continue ;
58578: GO 58553
// if weapon in weapons then
58580: LD_VAR 0 8
58584: PUSH
58585: LD_VAR 0 9
58589: IN
58590: IFFALSE 58617
// begin result := [ i , weapon ] ;
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: LD_VAR 0 4
58601: PUSH
58602: LD_VAR 0 8
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// exit ;
58611: POP
58612: POP
58613: POP
58614: POP
58615: GO 58625
// end ; end ;
58617: GO 58553
58619: POP
58620: POP
// end ;
58621: GO 58439
58623: POP
58624: POP
// end ;
58625: LD_VAR 0 3
58629: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58630: LD_INT 0
58632: PPUSH
// if not side or side > 8 then
58633: LD_VAR 0 3
58637: NOT
58638: PUSH
58639: LD_VAR 0 3
58643: PUSH
58644: LD_INT 8
58646: GREATER
58647: OR
58648: IFFALSE 58652
// exit ;
58650: GO 58711
// if not range then
58652: LD_VAR 0 4
58656: NOT
58657: IFFALSE 58668
// range := - 12 ;
58659: LD_ADDR_VAR 0 4
58663: PUSH
58664: LD_INT 12
58666: NEG
58667: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58668: LD_VAR 0 1
58672: PPUSH
58673: LD_VAR 0 2
58677: PPUSH
58678: LD_VAR 0 3
58682: PPUSH
58683: LD_VAR 0 4
58687: PPUSH
58688: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58692: LD_VAR 0 1
58696: PPUSH
58697: LD_VAR 0 2
58701: PPUSH
58702: LD_VAR 0 3
58706: PPUSH
58707: CALL_OW 331
// end ;
58711: LD_VAR 0 5
58715: RET
// export function Video ( mode ) ; begin
58716: LD_INT 0
58718: PPUSH
// ingame_video = mode ;
58719: LD_ADDR_OWVAR 52
58723: PUSH
58724: LD_VAR 0 1
58728: ST_TO_ADDR
// interface_hidden = mode ;
58729: LD_ADDR_OWVAR 54
58733: PUSH
58734: LD_VAR 0 1
58738: ST_TO_ADDR
// end ;
58739: LD_VAR 0 2
58743: RET
// export function Join ( array , element ) ; begin
58744: LD_INT 0
58746: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58747: LD_ADDR_VAR 0 3
58751: PUSH
58752: LD_VAR 0 1
58756: PPUSH
58757: LD_VAR 0 1
58761: PUSH
58762: LD_INT 1
58764: PLUS
58765: PPUSH
58766: LD_VAR 0 2
58770: PPUSH
58771: CALL_OW 1
58775: ST_TO_ADDR
// end ;
58776: LD_VAR 0 3
58780: RET
// export function JoinUnion ( array , element ) ; begin
58781: LD_INT 0
58783: PPUSH
// result := array union element ;
58784: LD_ADDR_VAR 0 3
58788: PUSH
58789: LD_VAR 0 1
58793: PUSH
58794: LD_VAR 0 2
58798: UNION
58799: ST_TO_ADDR
// end ;
58800: LD_VAR 0 3
58804: RET
// export function GetBehemoths ( side ) ; begin
58805: LD_INT 0
58807: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58808: LD_ADDR_VAR 0 2
58812: PUSH
58813: LD_INT 22
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 31
58827: PUSH
58828: LD_INT 25
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PPUSH
58839: CALL_OW 69
58843: ST_TO_ADDR
// end ;
58844: LD_VAR 0 2
58848: RET
// export function Shuffle ( array ) ; var i , index ; begin
58849: LD_INT 0
58851: PPUSH
58852: PPUSH
58853: PPUSH
// result := [ ] ;
58854: LD_ADDR_VAR 0 2
58858: PUSH
58859: EMPTY
58860: ST_TO_ADDR
// if not array then
58861: LD_VAR 0 1
58865: NOT
58866: IFFALSE 58870
// exit ;
58868: GO 58969
// Randomize ;
58870: CALL_OW 10
// for i = array downto 1 do
58874: LD_ADDR_VAR 0 3
58878: PUSH
58879: DOUBLE
58880: LD_VAR 0 1
58884: INC
58885: ST_TO_ADDR
58886: LD_INT 1
58888: PUSH
58889: FOR_DOWNTO
58890: IFFALSE 58967
// begin index := rand ( 1 , array ) ;
58892: LD_ADDR_VAR 0 4
58896: PUSH
58897: LD_INT 1
58899: PPUSH
58900: LD_VAR 0 1
58904: PPUSH
58905: CALL_OW 12
58909: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58910: LD_ADDR_VAR 0 2
58914: PUSH
58915: LD_VAR 0 2
58919: PPUSH
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 1
58927: PLUS
58928: PPUSH
58929: LD_VAR 0 1
58933: PUSH
58934: LD_VAR 0 4
58938: ARRAY
58939: PPUSH
58940: CALL_OW 2
58944: ST_TO_ADDR
// array := Delete ( array , index ) ;
58945: LD_ADDR_VAR 0 1
58949: PUSH
58950: LD_VAR 0 1
58954: PPUSH
58955: LD_VAR 0 4
58959: PPUSH
58960: CALL_OW 3
58964: ST_TO_ADDR
// end ;
58965: GO 58889
58967: POP
58968: POP
// end ;
58969: LD_VAR 0 2
58973: RET
// export function GetBaseMaterials ( base ) ; begin
58974: LD_INT 0
58976: PPUSH
// result := [ 0 , 0 , 0 ] ;
58977: LD_ADDR_VAR 0 2
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// if not base then
58996: LD_VAR 0 1
59000: NOT
59001: IFFALSE 59005
// exit ;
59003: GO 59054
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59005: LD_ADDR_VAR 0 2
59009: PUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: LD_INT 1
59017: PPUSH
59018: CALL_OW 275
59022: PUSH
59023: LD_VAR 0 1
59027: PPUSH
59028: LD_INT 2
59030: PPUSH
59031: CALL_OW 275
59035: PUSH
59036: LD_VAR 0 1
59040: PPUSH
59041: LD_INT 3
59043: PPUSH
59044: CALL_OW 275
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// end ;
59054: LD_VAR 0 2
59058: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59059: LD_INT 0
59061: PPUSH
59062: PPUSH
// result := array ;
59063: LD_ADDR_VAR 0 3
59067: PUSH
59068: LD_VAR 0 1
59072: ST_TO_ADDR
// if size > 0 then
59073: LD_VAR 0 2
59077: PUSH
59078: LD_INT 0
59080: GREATER
59081: IFFALSE 59127
// for i := array downto size do
59083: LD_ADDR_VAR 0 4
59087: PUSH
59088: DOUBLE
59089: LD_VAR 0 1
59093: INC
59094: ST_TO_ADDR
59095: LD_VAR 0 2
59099: PUSH
59100: FOR_DOWNTO
59101: IFFALSE 59125
// result := Delete ( result , result ) ;
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: LD_VAR 0 3
59112: PPUSH
59113: LD_VAR 0 3
59117: PPUSH
59118: CALL_OW 3
59122: ST_TO_ADDR
59123: GO 59100
59125: POP
59126: POP
// end ;
59127: LD_VAR 0 3
59131: RET
// export function ComExit ( unit ) ; var tmp ; begin
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
// if not IsInUnit ( unit ) then
59136: LD_VAR 0 1
59140: PPUSH
59141: CALL_OW 310
59145: NOT
59146: IFFALSE 59150
// exit ;
59148: GO 59210
// tmp := IsInUnit ( unit ) ;
59150: LD_ADDR_VAR 0 3
59154: PUSH
59155: LD_VAR 0 1
59159: PPUSH
59160: CALL_OW 310
59164: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59165: LD_VAR 0 3
59169: PPUSH
59170: CALL_OW 247
59174: PUSH
59175: LD_INT 2
59177: EQUAL
59178: IFFALSE 59191
// ComExitVehicle ( unit ) else
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 121
59189: GO 59200
// ComExitBuilding ( unit ) ;
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL_OW 122
// result := tmp ;
59200: LD_ADDR_VAR 0 2
59204: PUSH
59205: LD_VAR 0 3
59209: ST_TO_ADDR
// end ;
59210: LD_VAR 0 2
59214: RET
// export function ResetHc ; begin
59215: LD_INT 0
59217: PPUSH
// InitHc ;
59218: CALL_OW 19
// hc_importance := 0 ;
59222: LD_ADDR_OWVAR 32
59226: PUSH
59227: LD_INT 0
59229: ST_TO_ADDR
// end ;
59230: LD_VAR 0 1
59234: RET
