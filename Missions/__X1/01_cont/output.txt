// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1456 0 0
// PrepareArabian ;
  46: CALL 1019 0 0
// PrepareHeike ;
  50: CALL 954 0 0
// Action ;
  54: CALL 3001 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: IFTRUE 897
 890: PUSH
 891: LD_VAR 0 2
 895: NOT
 896: OR
 897: IFFALSE 901
// exit ;
 899: GO 949
// if not See ( GetSide ( observer ) , unit ) then
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 255
 910: PPUSH
 911: LD_VAR 0 2
 915: PPUSH
 916: CALL_OW 292
 920: NOT
 921: IFFALSE 925
// exit ;
 923: GO 949
// result := GetDistUnits ( observer , unit ) < 12 ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: LD_VAR 0 1
 934: PPUSH
 935: LD_VAR 0 2
 939: PPUSH
 940: CALL_OW 296
 944: PUSH
 945: LD_INT 12
 947: LESS
 948: ST_TO_ADDR
// end ; end_of_file
 949: LD_VAR 0 3
 953: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 954: LD_INT 0
 956: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 957: LD_INT 66
 959: PPUSH
 960: LD_INT 26
 962: PPUSH
 963: CALL_OW 86
// uc_side := 2 ;
 967: LD_ADDR_OWVAR 20
 971: PUSH
 972: LD_INT 2
 974: ST_TO_ADDR
// uc_nation := 2 ;
 975: LD_ADDR_OWVAR 21
 979: PUSH
 980: LD_INT 2
 982: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 983: LD_ADDR_EXP 16
 987: PUSH
 988: LD_STRING Heike
 990: PPUSH
 991: CALL_OW 25
 995: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 996: LD_EXP 16
1000: PPUSH
1001: LD_INT 66
1003: PPUSH
1004: LD_INT 26
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 48
// end ;
1014: LD_VAR 0 1
1018: RET
// export function PrepareArabian ; begin
1019: LD_INT 0
1021: PPUSH
// uc_side := 5 ;
1022: LD_ADDR_OWVAR 20
1026: PUSH
1027: LD_INT 5
1029: ST_TO_ADDR
// uc_nation := 2 ;
1030: LD_ADDR_OWVAR 21
1034: PUSH
1035: LD_INT 2
1037: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1038: LD_ADDR_EXP 17
1042: PUSH
1043: LD_STRING Olaf
1045: PPUSH
1046: CALL_OW 25
1050: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1051: LD_EXP 17
1055: PPUSH
1056: LD_INT 39
1058: PPUSH
1059: LD_INT 52
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1069: LD_ADDR_EXP 18
1073: PUSH
1074: LD_STRING Givi
1076: PPUSH
1077: CALL_OW 25
1081: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1082: LD_EXP 18
1086: PPUSH
1087: LD_INT 55
1089: PPUSH
1090: LD_INT 90
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1100: LD_EXP 18
1104: PPUSH
1105: LD_INT 53
1107: PPUSH
1108: LD_INT 89
1110: PPUSH
1111: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1115: LD_ADDR_EXP 19
1119: PUSH
1120: LD_STRING Mike
1122: PPUSH
1123: CALL_OW 25
1127: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1128: LD_EXP 19
1132: PPUSH
1133: LD_INT 53
1135: PPUSH
1136: LD_INT 87
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1146: LD_EXP 19
1150: PPUSH
1151: LD_INT 53
1153: PPUSH
1154: LD_INT 89
1156: PPUSH
1157: CALL_OW 118
// end ;
1161: LD_VAR 0 1
1165: RET
// export function PreparePrison ; begin
1166: LD_INT 0
1168: PPUSH
// uc_side := 5 ;
1169: LD_ADDR_OWVAR 20
1173: PUSH
1174: LD_INT 5
1176: ST_TO_ADDR
// uc_nation := 2 ;
1177: LD_ADDR_OWVAR 21
1181: PUSH
1182: LD_INT 2
1184: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1185: LD_ADDR_EXP 20
1189: PUSH
1190: LD_STRING Kamil
1192: PPUSH
1193: CALL_OW 25
1197: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1198: LD_OWVAR 67
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 4
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: IN
1213: IFFALSE 1229
// PlaceHumanInUnit ( Kamil , northDep ) else
1215: LD_EXP 20
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: CALL_OW 52
1227: GO 1241
// PlaceHumanInUnit ( Kamil , southDep ) ;
1229: LD_EXP 20
1233: PPUSH
1234: LD_INT 8
1236: PPUSH
1237: CALL_OW 52
// uc_side := 3 ;
1241: LD_ADDR_OWVAR 20
1245: PUSH
1246: LD_INT 3
1248: ST_TO_ADDR
// uc_nation := 3 ;
1249: LD_ADDR_OWVAR 21
1253: PUSH
1254: LD_INT 3
1256: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1257: LD_INT 0
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 380
// if Difficulty > 1 then
1270: LD_OWVAR 67
1274: PUSH
1275: LD_INT 1
1277: GREATER
1278: IFFALSE 1294
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1280: CALL_OW 44
1284: PPUSH
1285: LD_INT 8
1287: PPUSH
1288: CALL_OW 52
1292: GO 1306
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1294: CALL_OW 44
1298: PPUSH
1299: LD_INT 2
1301: PPUSH
1302: CALL_OW 52
// end ; end_of_file
1306: LD_VAR 0 1
1310: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1311: LD_INT 0
1313: PPUSH
1314: PPUSH
1315: PPUSH
// uc_side := 3 ;
1316: LD_ADDR_OWVAR 20
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// uc_nation := 3 ;
1324: LD_ADDR_OWVAR 21
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// russianPatrol := [ ] ;
1332: LD_ADDR_EXP 21
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// for i = 1 to 3 do
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: DOUBLE
1345: LD_INT 1
1347: DEC
1348: ST_TO_ADDR
1349: LD_INT 3
1351: PUSH
1352: FOR_TO
1353: IFFALSE 1449
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1368: LD_ADDR_OWVAR 29
1372: PUSH
1373: LD_INT 9
1375: PUSH
1376: LD_INT 10
1378: PPUSH
1379: LD_INT 11
1381: PPUSH
1382: CALL_OW 12
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: ST_TO_ADDR
// un := CreateHuman ;
1391: LD_ADDR_VAR 0 3
1395: PUSH
1396: CALL_OW 44
1400: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1401: LD_ADDR_EXP 21
1405: PUSH
1406: LD_EXP 21
1410: PPUSH
1411: LD_VAR 0 2
1415: PPUSH
1416: LD_VAR 0 3
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_INT 26
1433: PPUSH
1434: LD_INT 22
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 50
// end ;
1447: GO 1352
1449: POP
1450: POP
// end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// uc_side := 3 ;
1463: LD_ADDR_OWVAR 20
1467: PUSH
1468: LD_INT 3
1470: ST_TO_ADDR
// uc_nation := 3 ;
1471: LD_ADDR_OWVAR 21
1475: PUSH
1476: LD_INT 3
1478: ST_TO_ADDR
// russianForces := [ ] ;
1479: LD_ADDR_EXP 23
1483: PUSH
1484: EMPTY
1485: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1486: LD_ADDR_EXP 22
1490: PUSH
1491: EMPTY
1492: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1493: LD_ADDR_VAR 0 5
1497: PUSH
1498: LD_INT 11
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL_OW 517
1508: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_INT 21
1516: PUSH
1517: LD_INT 0
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: FOR_IN
1530: IFFALSE 1574
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1532: LD_VAR 0 2
1536: PPUSH
1537: CALL_OW 274
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: LD_INT 200
1547: PPUSH
1548: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 274
1561: PPUSH
1562: LD_INT 2
1564: PPUSH
1565: LD_INT 10
1567: PPUSH
1568: CALL_OW 277
// end ;
1572: GO 1529
1574: POP
1575: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1576: LD_ADDR_VAR 0 2
1580: PUSH
1581: LD_INT 30
1583: PUSH
1584: LD_INT 31
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: PPUSH
1591: CALL_OW 69
1595: PUSH
1596: FOR_IN
1597: IFFALSE 1671
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1599: LD_INT 0
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_OWVAR 67
1609: PUSH
1610: LD_INT 1
1612: MINUS
1613: PPUSH
1614: CALL_OW 380
// un := CreateHuman ;
1618: LD_ADDR_VAR 0 4
1622: PUSH
1623: CALL_OW 44
1627: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1628: LD_VAR 0 4
1632: PPUSH
1633: LD_VAR 0 2
1637: PPUSH
1638: CALL_OW 254
1642: PUSH
1643: LD_INT 3
1645: MINUS
1646: PUSH
1647: LD_INT 6
1649: MOD
1650: PPUSH
1651: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1655: LD_VAR 0 4
1659: PPUSH
1660: LD_VAR 0 2
1664: PPUSH
1665: CALL_OW 52
// end ;
1669: GO 1596
1671: POP
1672: POP
// for i = 1 to 5 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 5
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1769
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1689: LD_INT 0
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: LD_OWVAR 67
1699: PPUSH
1700: CALL_OW 380
// un := CreateHuman ;
1704: LD_ADDR_VAR 0 4
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1714: LD_VAR 0 4
1718: PPUSH
1719: LD_INT 9
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 49
// ComHold ( un ) ;
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1738: LD_ADDR_EXP 23
1742: PUSH
1743: LD_EXP 23
1747: PPUSH
1748: LD_EXP 23
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL_OW 1
1766: ST_TO_ADDR
// end ;
1767: GO 1686
1769: POP
1770: POP
// for i := 1 to Difficulty + 1 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_OWVAR 67
1785: PUSH
1786: LD_INT 1
1788: PLUS
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1891
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1793: LD_INT 0
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_OWVAR 67
1803: PPUSH
1804: CALL_OW 380
// un := CreateHuman ;
1808: LD_ADDR_VAR 0 4
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_VAR 0 5
1827: PUSH
1828: LD_INT 1
1830: ARRAY
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: PPUSH
1838: LD_VAR 0 5
1842: PUSH
1843: LD_INT 2
1845: ARRAY
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1860: LD_ADDR_EXP 22
1864: PUSH
1865: LD_EXP 22
1869: PPUSH
1870: LD_EXP 22
1874: PUSH
1875: LD_INT 1
1877: PLUS
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL_OW 1
1888: ST_TO_ADDR
// end ;
1889: GO 1790
1891: POP
1892: POP
// vc_chassis := ru_medium_wheeled ;
1893: LD_ADDR_OWVAR 37
1897: PUSH
1898: LD_INT 21
1900: ST_TO_ADDR
// vc_engine := engine_combustion ;
1901: LD_ADDR_OWVAR 39
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// vc_control := control_manual ;
1909: LD_ADDR_OWVAR 38
1913: PUSH
1914: LD_INT 1
1916: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1917: LD_ADDR_OWVAR 40
1921: PUSH
1922: LD_INT 42
1924: ST_TO_ADDR
// russianTank := CreateVehicle ;
1925: LD_ADDR_EXP 24
1929: PUSH
1930: CALL_OW 45
1934: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1935: LD_EXP 24
1939: PPUSH
1940: LD_INT 121
1942: PPUSH
1943: LD_INT 25
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_OWVAR 67
1963: PPUSH
1964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1968: CALL_OW 44
1972: PPUSH
1973: LD_EXP 24
1977: PPUSH
1978: CALL_OW 52
// if Difficulty > 1 then
1982: LD_OWVAR 67
1986: PUSH
1987: LD_INT 1
1989: GREATER
1990: IFFALSE 2076
// begin bc_type := b_breastwork ;
1992: LD_ADDR_OWVAR 42
1996: PUSH
1997: LD_INT 31
1999: ST_TO_ADDR
// bc_level := 2 ;
2000: LD_ADDR_OWVAR 43
2004: PUSH
2005: LD_INT 2
2007: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2008: LD_ADDR_VAR 0 3
2012: PUSH
2013: LD_INT 143
2015: PPUSH
2016: LD_INT 88
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL_OW 47
2026: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2027: LD_INT 0
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: CALL_OW 380
// un := CreateHuman ;
2040: LD_ADDR_VAR 0 4
2044: PUSH
2045: CALL_OW 44
2049: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2050: LD_VAR 0 4
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2062: LD_VAR 0 4
2066: PPUSH
2067: LD_VAR 0 3
2071: PPUSH
2072: CALL_OW 52
// end ; if Difficulty > 2 then
2076: LD_OWVAR 67
2080: PUSH
2081: LD_INT 2
2083: GREATER
2084: IFFALSE 2140
// begin for i := 1 to 2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 2
2098: PUSH
2099: FOR_TO
2100: IFFALSE 2138
// begin PrepareHuman ( false , 1 , 2 ) ;
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2115: CALL_OW 44
2119: PPUSH
2120: LD_INT 156
2122: PPUSH
2123: LD_INT 108
2125: PPUSH
2126: LD_INT 3
2128: PPUSH
2129: LD_INT 0
2131: PPUSH
2132: CALL_OW 50
// end ;
2136: GO 2099
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2145: LD_EXP 22
2149: IFFALSE 2457
2151: GO 2153
2153: DISABLE
2154: LD_INT 0
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
2160: PPUSH
2161: PPUSH
// begin enable ;
2162: ENABLE
// for i in russianForestPatrol do
2163: LD_ADDR_VAR 0 1
2167: PUSH
2168: LD_EXP 22
2172: PUSH
2173: FOR_IN
2174: IFFALSE 2455
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 53
2183: PPUSH
2184: LD_INT 89
2186: PPUSH
2187: CALL_OW 297
2191: PUSH
2192: LD_INT 30
2194: LESS
2195: IFFALSE 2214
// begin ComMoveXY ( i , 114 , 80 ) ;
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 114
2204: PPUSH
2205: LD_INT 80
2207: PPUSH
2208: CALL_OW 111
// continue ;
2212: GO 2173
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2214: LD_ADDR_VAR 0 6
2218: PUSH
2219: LD_EXP 22
2223: PUSH
2224: LD_VAR 0 1
2228: DIFF
2229: PPUSH
2230: LD_VAR 0 1
2234: PPUSH
2235: CALL_OW 74
2239: ST_TO_ADDR
// if tmp then
2240: LD_VAR 0 6
2244: IFFALSE 2314
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2246: LD_VAR 0 1
2250: PPUSH
2251: LD_VAR 0 6
2255: PPUSH
2256: CALL_OW 296
2260: PUSH
2261: LD_INT 14
2263: LESS
2264: IFFALSE 2281
2266: PUSH
2267: LD_VAR 0 6
2271: PPUSH
2272: CALL_OW 256
2276: PUSH
2277: LD_INT 999
2279: LESS
2280: AND
2281: IFFALSE 2314
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: LD_VAR 0 6
2292: PPUSH
2293: CALL_OW 250
2297: PPUSH
2298: LD_VAR 0 6
2302: PPUSH
2303: CALL_OW 251
2307: PPUSH
2308: CALL_OW 114
// break ;
2312: GO 2455
// end ; if not HasTask ( i ) then
2314: LD_VAR 0 1
2318: PPUSH
2319: CALL_OW 314
2323: NOT
2324: IFFALSE 2453
// begin d := rand ( 0 , 5 ) ;
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_INT 0
2333: PPUSH
2334: LD_INT 5
2336: PPUSH
2337: CALL_OW 12
2341: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2342: LD_ADDR_VAR 0 3
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_INT 7
2352: PPUSH
2353: CALL_OW 12
2357: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2358: LD_ADDR_VAR 0 4
2362: PUSH
2363: LD_VAR 0 1
2367: PPUSH
2368: CALL_OW 250
2372: PPUSH
2373: LD_VAR 0 2
2377: PPUSH
2378: LD_VAR 0 3
2382: PPUSH
2383: CALL_OW 272
2387: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2388: LD_ADDR_VAR 0 5
2392: PUSH
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 251
2402: PPUSH
2403: LD_VAR 0 2
2407: PPUSH
2408: LD_VAR 0 3
2412: PPUSH
2413: CALL_OW 273
2417: ST_TO_ADDR
// if ValidHex ( x , y ) then
2418: LD_VAR 0 4
2422: PPUSH
2423: LD_VAR 0 5
2427: PPUSH
2428: CALL_OW 488
2432: IFFALSE 2453
// ComAgressiveMove ( i , x , y ) ;
2434: LD_VAR 0 1
2438: PPUSH
2439: LD_VAR 0 4
2443: PPUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: CALL_OW 114
// end ; end ;
2453: GO 2173
2455: POP
2456: POP
// end ;
2457: PPOPN 6
2459: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2460: LD_EXP 24
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2486
2471: PUSH
2472: LD_EXP 24
2476: PPUSH
2477: CALL_OW 255
2481: PUSH
2482: LD_INT 3
2484: EQUAL
2485: AND
2486: IFFALSE 2753
2488: GO 2490
2490: DISABLE
// begin enable ;
2491: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2492: LD_EXP 24
2496: PPUSH
2497: LD_INT 124
2499: PPUSH
2500: LD_INT 25
2502: PPUSH
2503: CALL_OW 307
2507: IFFALSE 2521
// SetFuel ( russianTank , 100 ) ;
2509: LD_EXP 24
2513: PPUSH
2514: LD_INT 100
2516: PPUSH
2517: CALL_OW 240
// if HasTask ( russianTank ) then
2521: LD_EXP 24
2525: PPUSH
2526: CALL_OW 314
2530: IFFALSE 2534
// exit ;
2532: GO 2753
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2534: LD_EXP 24
2538: PPUSH
2539: LD_INT 121
2541: PPUSH
2542: LD_INT 25
2544: PPUSH
2545: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2549: LD_EXP 24
2553: PPUSH
2554: LD_INT 122
2556: PPUSH
2557: LD_INT 48
2559: PPUSH
2560: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2564: LD_EXP 24
2568: PPUSH
2569: LD_INT 70
2571: PPUSH
2572: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2576: LD_EXP 24
2580: PPUSH
2581: LD_INT 107
2583: PPUSH
2584: LD_INT 57
2586: PPUSH
2587: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2591: LD_EXP 24
2595: PPUSH
2596: LD_INT 70
2598: PPUSH
2599: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2603: LD_EXP 24
2607: PPUSH
2608: LD_INT 100
2610: PPUSH
2611: LD_INT 61
2613: PPUSH
2614: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2618: LD_EXP 24
2622: PPUSH
2623: LD_INT 105
2625: PPUSH
2626: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2630: LD_EXP 24
2634: PPUSH
2635: LD_INT 78
2637: PPUSH
2638: LD_INT 64
2640: PPUSH
2641: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2645: LD_EXP 24
2649: PPUSH
2650: LD_INT 140
2652: PPUSH
2653: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2657: LD_EXP 24
2661: PPUSH
2662: LD_INT 100
2664: PPUSH
2665: LD_INT 61
2667: PPUSH
2668: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2672: LD_EXP 24
2676: PPUSH
2677: LD_INT 105
2679: PPUSH
2680: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2684: LD_EXP 24
2688: PPUSH
2689: LD_INT 107
2691: PPUSH
2692: LD_INT 57
2694: PPUSH
2695: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2699: LD_EXP 24
2703: PPUSH
2704: LD_INT 70
2706: PPUSH
2707: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2711: LD_EXP 24
2715: PPUSH
2716: LD_INT 122
2718: PPUSH
2719: LD_INT 48
2721: PPUSH
2722: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2726: LD_EXP 24
2730: PPUSH
2731: LD_INT 70
2733: PPUSH
2734: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2738: LD_EXP 24
2742: PPUSH
2743: LD_INT 124
2745: PPUSH
2746: LD_INT 25
2748: PPUSH
2749: CALL_OW 171
// end ; end_of_file
2753: END
// export Johnny ; export function PrepareJohnny ; begin
2754: LD_INT 0
2756: PPUSH
// uc_side := 1 ;
2757: LD_ADDR_OWVAR 20
2761: PUSH
2762: LD_INT 1
2764: ST_TO_ADDR
// uc_nation := 1 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2773: LD_ADDR_EXP 25
2777: PUSH
2778: LD_STRING Harris
2780: PPUSH
2781: CALL_OW 25
2785: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2786: LD_EXP 25
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2798: LD_EXP 25
2802: PPUSH
2803: LD_INT 8
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 49
// ComCrawl ( Johnny ) ;
2813: LD_EXP 25
2817: PPUSH
2818: CALL_OW 137
// end ;
2822: LD_VAR 0 1
2826: RET
// export function PreparePatrolTank ; var veh , un ; begin
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
2831: PPUSH
// uc_side := 1 ;
2832: LD_ADDR_OWVAR 20
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// uc_nation := 1 ;
2840: LD_ADDR_OWVAR 21
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2848: LD_INT 1
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 1
2856: PPUSH
2857: CALL_OW 380
// un := CreateHuman ;
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2871: LD_ADDR_OWVAR 37
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
// vc_engine := engine_combustion ;
2879: LD_ADDR_OWVAR 39
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// vc_control := control_manual ;
2887: LD_ADDR_OWVAR 38
2891: PUSH
2892: LD_INT 1
2894: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2895: LD_ADDR_OWVAR 40
2899: PUSH
2900: LD_INT 2
2902: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2903: LD_ADDR_OWVAR 41
2907: PUSH
2908: LD_INT 72
2910: PUSH
2911: LD_INT 54
2913: PUSH
2914: LD_INT 36
2916: PUSH
2917: LD_INT 30
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: ST_TO_ADDR
// veh := CreateVehicle ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2954: LD_VAR 0 2
2958: PPUSH
2959: LD_INT 31
2961: PPUSH
2962: LD_INT 58
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2972: LD_VAR 0 3
2976: PPUSH
2977: LD_VAR 0 2
2981: PPUSH
2982: CALL_OW 52
// result := un ;
2986: LD_ADDR_VAR 0 1
2990: PUSH
2991: LD_VAR 0 3
2995: ST_TO_ADDR
// end ; end_of_file
2996: LD_VAR 0 1
3000: RET
// export function Action ; begin
3001: LD_INT 0
3003: PPUSH
// InGameOn ;
3004: CALL_OW 8
// wait ( 0 0$4 ) ;
3008: LD_INT 140
3010: PPUSH
3011: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3015: LD_EXP 16
3019: PPUSH
3020: LD_STRING DH-start-1
3022: PPUSH
3023: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3027: LD_EXP 16
3031: PPUSH
3032: LD_INT 71
3034: PPUSH
3035: LD_INT 29
3037: PPUSH
3038: CALL_OW 111
// wait ( 0 0$4 ) ;
3042: LD_INT 140
3044: PPUSH
3045: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3049: LD_EXP 16
3053: PPUSH
3054: LD_INT 71
3056: PPUSH
3057: LD_INT 33
3059: PPUSH
3060: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3064: LD_EXP 16
3068: PPUSH
3069: LD_INT 71
3071: PPUSH
3072: LD_INT 34
3074: PPUSH
3075: CALL_OW 178
// wait ( 0 0$4 ) ;
3079: LD_INT 140
3081: PPUSH
3082: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3086: LD_EXP 16
3090: PPUSH
3091: LD_STRING DH-start-2
3093: PPUSH
3094: CALL_OW 88
// wait ( 0 0$4 ) ;
3098: LD_INT 140
3100: PPUSH
3101: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3105: LD_EXP 16
3109: PPUSH
3110: LD_INT 65
3112: PPUSH
3113: LD_INT 26
3115: PPUSH
3116: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3120: LD_EXP 16
3124: PPUSH
3125: LD_STRING DH-start-3
3127: PPUSH
3128: CALL_OW 88
// InGameOff ;
3132: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3136: LD_STRING O1_cont
3138: PPUSH
3139: CALL_OW 337
// SaveForQuickRestart ;
3143: CALL_OW 22
// missionStarted := true ;
3147: LD_ADDR_EXP 1
3151: PUSH
3152: LD_INT 1
3154: ST_TO_ADDR
// PrepareJohnny ;
3155: CALL 2754 0 0
// end ;
3159: LD_VAR 0 1
3163: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3164: LD_EXP 8
3168: NOT
3169: IFFALSE 3178
3171: PUSH
3172: LD_EXP 7
3176: NOT
3177: AND
3178: IFFALSE 3194
3180: PUSH
3181: LD_INT 2
3183: PPUSH
3184: LD_EXP 25
3188: PPUSH
3189: CALL_OW 292
3193: AND
3194: IFFALSE 3211
3196: PUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_EXP 16
3204: PPUSH
3205: CALL_OW 292
3209: NOT
3210: AND
3211: IFFALSE 3245
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: PPUSH
3229: LD_EXP 16
3233: PPUSH
3234: CALL_OW 74
3238: PUSH
3239: LD_EXP 25
3243: EQUAL
3244: AND
3245: IFFALSE 3263
3247: PUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 81
3258: PUSH
3259: LD_INT 0
3261: EQUAL
3262: AND
3263: IFFALSE 4234
3265: GO 3267
3267: DISABLE
// begin InGameOn ;
3268: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3272: LD_EXP 16
3276: PPUSH
3277: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3281: LD_EXP 25
3285: PPUSH
3286: LD_STRING DJ-ambush-1
3288: PPUSH
3289: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3293: LD_INT 10
3295: PPUSH
3296: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3300: LD_EXP 16
3304: PPUSH
3305: LD_EXP 25
3309: PPUSH
3310: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3314: LD_EXP 16
3318: PPUSH
3319: LD_STRING DH-ambush-1
3321: PPUSH
3322: CALL_OW 88
// wait ( 0 0$1 ) ;
3326: LD_INT 35
3328: PPUSH
3329: CALL_OW 67
// ComWalk ( Johnny ) ;
3333: LD_EXP 25
3337: PPUSH
3338: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3342: LD_EXP 25
3346: PPUSH
3347: LD_EXP 16
3351: PPUSH
3352: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3356: LD_EXP 16
3360: PPUSH
3361: LD_EXP 25
3365: PPUSH
3366: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3370: LD_INT 35
3372: PPUSH
3373: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3377: LD_EXP 25
3381: PPUSH
3382: LD_EXP 16
3386: PPUSH
3387: CALL_OW 296
3391: PUSH
3392: LD_INT 4
3394: LESS
3395: IFFALSE 3370
// ComTurnUnit ( Johnny , Heike ) ;
3397: LD_EXP 25
3401: PPUSH
3402: LD_EXP 16
3406: PPUSH
3407: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3411: LD_EXP 25
3415: PPUSH
3416: LD_STRING DJ-ambush-2
3418: PPUSH
3419: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3423: LD_EXP 16
3427: PPUSH
3428: LD_STRING DH-ambush-2
3430: PPUSH
3431: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3435: LD_EXP 25
3439: PPUSH
3440: LD_STRING DJ-ambush-3
3442: PPUSH
3443: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3447: LD_EXP 16
3451: PPUSH
3452: LD_STRING DH-ambush-3
3454: PPUSH
3455: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3459: LD_EXP 25
3463: PPUSH
3464: LD_STRING DJ-ambush-4
3466: PPUSH
3467: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3471: LD_EXP 16
3475: PPUSH
3476: LD_INT 39
3478: PPUSH
3479: LD_INT 22
3481: PPUSH
3482: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3486: LD_EXP 16
3490: PPUSH
3491: LD_STRING DH-ambush-4
3493: PPUSH
3494: CALL_OW 88
// PrepareRussianPatrol ;
3498: CALL 1311 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3502: LD_INT 39
3504: PPUSH
3505: LD_INT 22
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 12
3513: NEG
3514: PPUSH
3515: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3519: LD_INT 39
3521: PPUSH
3522: LD_INT 22
3524: PPUSH
3525: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3529: LD_EXP 21
3533: PPUSH
3534: LD_INT 39
3536: PPUSH
3537: LD_INT 23
3539: PPUSH
3540: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3544: LD_EXP 16
3548: PUSH
3549: LD_EXP 25
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: LD_INT 39
3560: PPUSH
3561: LD_INT 7
3563: PPUSH
3564: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3568: LD_EXP 16
3572: PUSH
3573: LD_EXP 25
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PPUSH
3582: LD_EXP 21
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 1
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR-ambush-5
3606: PPUSH
3607: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: LD_STRING DR1-ambush-5
3622: PPUSH
3623: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3627: LD_INT 35
3629: PPUSH
3630: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3634: LD_EXP 16
3638: PPUSH
3639: LD_INT 39
3641: PPUSH
3642: LD_INT 7
3644: PPUSH
3645: CALL_OW 297
3649: PUSH
3650: LD_INT 6
3652: LESS
3653: IFFALSE 3627
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3655: LD_EXP 16
3659: PPUSH
3660: LD_EXP 21
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3673: LD_EXP 25
3677: PPUSH
3678: LD_EXP 16
3682: PPUSH
3683: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3687: LD_EXP 25
3691: PPUSH
3692: LD_STRING DJ-ambush-6
3694: PPUSH
3695: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3699: LD_EXP 16
3703: PPUSH
3704: LD_STRING DH-ambush-6
3706: PPUSH
3707: CALL_OW 88
// InGameOff ;
3711: CALL_OW 9
// meetJohnny := true ;
3715: LD_ADDR_EXP 3
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// ComFree ( Johnny ) ;
3723: LD_EXP 25
3727: PPUSH
3728: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3732: LD_STRING O2_ambush_cont
3734: PPUSH
3735: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3739: LD_EXP 21
3743: PUSH
3744: LD_EXP 21
3748: ARRAY
3749: PPUSH
3750: LD_INT 29
3752: PPUSH
3753: LD_INT 15
3755: PPUSH
3756: CALL_OW 111
// wait ( 0 0$2 ) ;
3760: LD_INT 70
3762: PPUSH
3763: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3767: LD_INT 3
3769: PPUSH
3770: LD_EXP 16
3774: PPUSH
3775: CALL_OW 292
3779: NOT
3780: IFFALSE 3797
3782: PUSH
3783: LD_INT 3
3785: PPUSH
3786: LD_EXP 25
3790: PPUSH
3791: CALL_OW 292
3795: NOT
3796: AND
3797: IFFALSE 3818
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3799: LD_EXP 21
3803: PUSH
3804: LD_INT 1
3806: ARRAY
3807: PPUSH
3808: LD_INT 58
3810: PPUSH
3811: LD_INT 32
3813: PPUSH
3814: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3818: LD_INT 1750
3820: PUSH
3821: LD_INT 1400
3823: PUSH
3824: LD_INT 1225
3826: PUSH
3827: LD_INT 1050
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_OWVAR 67
3840: ARRAY
3841: PPUSH
3842: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3846: LD_EXP 21
3850: PPUSH
3851: LD_INT 43
3853: PPUSH
3854: LD_INT 13
3856: PPUSH
3857: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3868: LD_EXP 21
3872: NOT
3873: IFTRUE 3887
3875: PUSH
3876: LD_EXP 25
3880: PPUSH
3881: CALL_OW 302
3885: NOT
3886: OR
3887: IFFALSE 3861
// RemoveSeeing ( 39 , 22 , 2 ) ;
3889: LD_INT 39
3891: PPUSH
3892: LD_INT 22
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 81
3912: PUSH
3913: LD_INT 2
3915: EQUAL
3916: IFFALSE 3920
// exit ;
3918: GO 4234
// if not IsOk ( Johnny ) then
3920: LD_EXP 25
3924: PPUSH
3925: CALL_OW 302
3929: NOT
3930: IFFALSE 3941
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3932: LD_STRING O2_ambush_out_cont
3934: PPUSH
3935: CALL_OW 337
// exit ;
3939: GO 4234
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3941: LD_EXP 16
3945: PPUSH
3946: LD_EXP 25
3950: PPUSH
3951: CALL_OW 296
3955: PUSH
3956: LD_INT 10
3958: GREATER
3959: IFFALSE 4020
// begin ComMoveUnit ( Johnny , Heike ) ;
3961: LD_EXP 25
3965: PPUSH
3966: LD_EXP 16
3970: PPUSH
3971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3982: LD_INT 1
3984: PPUSH
3985: LD_INT 2
3987: PPUSH
3988: CALL_OW 81
3992: PUSH
3993: LD_INT 2
3995: EQUAL
3996: IFFALSE 4000
// exit ;
3998: GO 4234
// until GetDistUnits ( Johnny , Heike ) < 6 ;
4000: LD_EXP 25
4004: PPUSH
4005: LD_EXP 16
4009: PPUSH
4010: CALL_OW 296
4014: PUSH
4015: LD_INT 6
4017: LESS
4018: IFFALSE 3975
// end ; CenterNowOnUnits ( Heike ) ;
4020: LD_EXP 16
4024: PPUSH
4025: CALL_OW 87
// InGameOn ;
4029: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_EXP 25
4042: PPUSH
4043: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4047: LD_EXP 25
4051: PPUSH
4052: LD_EXP 16
4056: PPUSH
4057: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4061: LD_EXP 25
4065: PPUSH
4066: LD_STRING DJ-thanks-1
4068: PPUSH
4069: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4073: LD_EXP 16
4077: PPUSH
4078: LD_STRING DH-thanks-1
4080: PPUSH
4081: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4085: LD_EXP 25
4089: PPUSH
4090: LD_STRING DJ-thanks-2
4092: PPUSH
4093: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4097: LD_EXP 25
4101: PPUSH
4102: LD_INT 4
4104: PPUSH
4105: LD_INT 3
4107: PPUSH
4108: CALL_OW 111
// wait ( 0 0$1 ) ;
4112: LD_INT 35
4114: PPUSH
4115: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4119: LD_EXP 16
4123: PPUSH
4124: LD_STRING DH-thanks-2
4126: PPUSH
4127: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4131: LD_INT 35
4133: PPUSH
4134: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_EXP 25
4145: PPUSH
4146: CALL_OW 292
4150: NOT
4151: IFFALSE 4131
// Say ( Heike , DH-thanks-2a ) ;
4153: LD_EXP 16
4157: PPUSH
4158: LD_STRING DH-thanks-2a
4160: PPUSH
4161: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4165: LD_EXP 25
4169: PPUSH
4170: CALL_OW 64
// InGameOff ;
4174: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4178: LD_STRING O2_ambush_out_cont
4180: PPUSH
4181: CALL_OW 337
// johnnySaved := true ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_INT 1
4192: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4193: LD_EXP 16
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 600
4203: PPUSH
4204: CALL_OW 492
// if IsOk ( Olaf ) then
4208: LD_EXP 17
4212: PPUSH
4213: CALL_OW 302
4217: IFFALSE 4234
// ComMoveXY ( Olaf , 44 , 25 ) ;
4219: LD_EXP 17
4223: PPUSH
4224: LD_INT 44
4226: PPUSH
4227: LD_INT 25
4229: PPUSH
4230: CALL_OW 111
// end ;
4234: END
// every 0 0$1 trigger russianPatrol do var i ;
4235: LD_EXP 21
4239: IFFALSE 4309
4241: GO 4243
4243: DISABLE
4244: LD_INT 0
4246: PPUSH
// begin enable ;
4247: ENABLE
// for i in russianPatrol do
4248: LD_ADDR_VAR 0 1
4252: PUSH
4253: LD_EXP 21
4257: PUSH
4258: FOR_IN
4259: IFFALSE 4307
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL_OW 256
4270: PUSH
4271: LD_INT 1000
4273: LESS
4274: IFFALSE 4288
4276: PUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: CALL_OW 314
4286: NOT
4287: AND
4288: IFFALSE 4305
// ComAgressiveMove ( i , 42 , 12 ) ;
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 42
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 114
4305: GO 4258
4307: POP
4308: POP
// end ;
4309: PPOPN 1
4311: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 2
4317: PPUSH
4318: CALL_OW 81
4322: PUSH
4323: LD_INT 2
4325: EQUAL
4326: IFFALSE 4339
4328: PUSH
4329: LD_EXP 25
4333: PPUSH
4334: CALL_OW 302
4338: AND
4339: IFFALSE 4356
4341: GO 4343
4343: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4344: LD_EXP 25
4348: PPUSH
4349: LD_STRING DJ-fire-1
4351: PPUSH
4352: CALL_OW 88
4356: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4357: LD_EXP 7
4361: NOT
4362: IFFALSE 4385
4364: PUSH
4365: LD_EXP 23
4369: PPUSH
4370: LD_INT 101
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PPUSH
4380: CALL_OW 72
4384: AND
4385: IFFALSE 4505
4387: GO 4389
4389: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4390: LD_EXP 16
4394: PPUSH
4395: CALL_OW 87
// DialogueOn ;
4399: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4403: LD_EXP 16
4407: PPUSH
4408: LD_STRING DH-see-enemy-patrol-1
4410: PPUSH
4411: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4415: LD_EXP 23
4419: PPUSH
4420: LD_INT 26
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PPUSH
4430: CALL_OW 72
4434: PUSH
4435: LD_INT 1
4437: ARRAY
4438: PPUSH
4439: LD_STRING DR-see-enemy-patrol-1
4441: PPUSH
4442: CALL_OW 88
// DialogueOff ;
4446: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4450: LD_EXP 23
4454: PPUSH
4455: LD_INT 66
4457: PPUSH
4458: LD_INT 22
4460: PPUSH
4461: CALL_OW 114
// wait ( 0 0$10 ) ;
4465: LD_INT 350
4467: PPUSH
4468: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4472: LD_EXP 23
4476: PPUSH
4477: LD_INT 175
4479: PPUSH
4480: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4484: LD_EXP 23
4488: PPUSH
4489: LD_INT 9
4491: PPUSH
4492: CALL_OW 173
// AddComFree ( russianForces ) ;
4496: LD_EXP 23
4500: PPUSH
4501: CALL_OW 199
// end ;
4505: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4506: LD_EXP 23
4510: PPUSH
4511: LD_INT 3
4513: PUSH
4514: LD_INT 24
4516: PUSH
4517: LD_INT 960
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PPUSH
4528: CALL_OW 72
4532: IFFALSE 4785
4534: GO 4536
4536: DISABLE
4537: LD_INT 0
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 2
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_EXP 23
4573: PPUSH
4574: LD_INT 1
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 24
4582: PUSH
4583: LD_INT 960
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 24
4592: PUSH
4593: LD_INT 500
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 72
4613: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_EXP 23
4623: PPUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 24
4629: PUSH
4630: LD_INT 500
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 72
4645: ST_TO_ADDR
// if not tmp then
4646: LD_VAR 0 2
4650: NOT
4651: IFFALSE 4655
// exit ;
4653: GO 4785
// for i in tmp2 do
4655: LD_ADDR_VAR 0 1
4659: PUSH
4660: LD_VAR 0 3
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4724
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4668: LD_VAR 0 1
4672: PPUSH
4673: LD_VAR 0 2
4677: PPUSH
4678: LD_VAR 0 1
4682: PPUSH
4683: CALL_OW 74
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 10
4695: LESS
4696: IFFALSE 4722
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_VAR 0 2
4707: PPUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
4722: GO 4665
4724: POP
4725: POP
// if tmp3 then
4726: LD_VAR 0 4
4730: IFFALSE 4785
// for i in tmp3 do
4732: LD_ADDR_VAR 0 1
4736: PUSH
4737: LD_VAR 0 4
4741: PUSH
4742: FOR_IN
4743: IFFALSE 4783
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4745: LD_VAR 0 1
4749: PPUSH
4750: LD_INT 119
4752: PPUSH
4753: LD_INT 21
4755: PPUSH
4756: CALL_OW 297
4760: PUSH
4761: LD_INT 10
4763: GREATER
4764: IFFALSE 4781
// ComMoveXY ( i , 119 , 21 ) ;
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_INT 119
4773: PPUSH
4774: LD_INT 21
4776: PPUSH
4777: CALL_OW 111
4781: GO 4742
4783: POP
4784: POP
// end ;
4785: PPOPN 4
4787: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4788: LD_EXP 1
4792: IFFALSE 4834
4794: PUSH
4795: LD_EXP 16
4799: PPUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 14
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: PPUSH
4815: LD_EXP 16
4819: PPUSH
4820: CALL_OW 74
4824: PPUSH
4825: CALL_OW 296
4829: PUSH
4830: LD_INT 6
4832: LESS
4833: AND
4834: IFFALSE 4865
4836: GO 4838
4838: DISABLE
// begin animalCounter := animalCounter + 1 ;
4839: LD_ADDR_EXP 15
4843: PUSH
4844: LD_EXP 15
4848: PUSH
4849: LD_INT 1
4851: PLUS
4852: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_STRING DH-tiger-1
4860: PPUSH
4861: CALL_OW 88
// end ;
4865: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4866: LD_EXP 1
4870: IFFALSE 4912
4872: PUSH
4873: LD_EXP 16
4877: PPUSH
4878: LD_INT 25
4880: PUSH
4881: LD_INT 12
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: PPUSH
4893: LD_EXP 16
4897: PPUSH
4898: CALL_OW 74
4902: PPUSH
4903: CALL_OW 296
4907: PUSH
4908: LD_INT 6
4910: LESS
4911: AND
4912: IFFALSE 4943
4914: GO 4916
4916: DISABLE
// begin animalCounter := animalCounter + 1 ;
4917: LD_ADDR_EXP 15
4921: PUSH
4922: LD_EXP 15
4926: PUSH
4927: LD_INT 1
4929: PLUS
4930: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4931: LD_EXP 16
4935: PPUSH
4936: LD_STRING DH-ape-1
4938: PPUSH
4939: CALL_OW 88
// end ;
4943: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4944: LD_EXP 1
4948: IFFALSE 4990
4950: PUSH
4951: LD_EXP 16
4955: PPUSH
4956: LD_INT 25
4958: PUSH
4959: LD_INT 18
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 69
4970: PPUSH
4971: LD_EXP 16
4975: PPUSH
4976: CALL_OW 74
4980: PPUSH
4981: CALL_OW 296
4985: PUSH
4986: LD_INT 6
4988: LESS
4989: AND
4990: IFFALSE 5021
4992: GO 4994
4994: DISABLE
// begin animalCounter := animalCounter + 1 ;
4995: LD_ADDR_EXP 15
4999: PUSH
5000: LD_EXP 15
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
5009: LD_EXP 16
5013: PPUSH
5014: LD_STRING DH-bird-1
5016: PPUSH
5017: CALL_OW 88
// end ;
5021: END
// every 0 0$2 trigger animalCounter = 3 do
5022: LD_EXP 15
5026: PUSH
5027: LD_INT 3
5029: EQUAL
5030: IFFALSE 5042
5032: GO 5034
5034: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5035: LD_STRING ACH_ZOOLIGST
5037: PPUSH
5038: CALL_OW 543
5042: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5043: LD_INT 22
5045: PUSH
5046: LD_INT 2
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 101
5055: PUSH
5056: LD_INT 3
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: IFFALSE 5084
5073: GO 5075
5075: DISABLE
// russianSpotted := true ;
5076: LD_ADDR_EXP 9
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
5084: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5085: LD_EXP 16
5089: PPUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 21
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: PPUSH
5119: LD_EXP 16
5123: PPUSH
5124: CALL_OW 74
5128: PPUSH
5129: CALL_OW 296
5133: PUSH
5134: LD_INT 8
5136: LESS
5137: IFFALSE 5154
5139: GO 5141
5141: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5142: LD_EXP 16
5146: PPUSH
5147: LD_STRING DH-enemy-base
5149: PPUSH
5150: CALL_OW 88
5154: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5155: LD_EXP 25
5159: PPUSH
5160: CALL_OW 305
5164: NOT
5165: IFFALSE 5174
5167: PUSH
5168: LD_EXP 6
5172: NOT
5173: AND
5174: IFFALSE 5182
5176: PUSH
5177: LD_EXP 5
5181: AND
5182: IFFALSE 5191
5184: PUSH
5185: LD_EXP 12
5189: NOT
5190: AND
5191: IFFALSE 5200
5193: PUSH
5194: LD_EXP 11
5198: NOT
5199: AND
5200: IFFALSE 5378
5202: GO 5204
5204: DISABLE
5205: LD_INT 0
5207: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5208: LD_INT 35
5210: PPUSH
5211: CALL_OW 67
// for i in dogTag do
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_EXP 5
5224: PUSH
5225: FOR_IN
5226: IFFALSE 5275
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5228: LD_EXP 16
5232: PPUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_VAR 0 1
5246: PUSH
5247: LD_INT 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 297
5255: PUSH
5256: LD_INT 3
5258: LESS
5259: IFFALSE 5273
// begin dogTagFound := i ;
5261: LD_ADDR_EXP 6
5265: PUSH
5266: LD_VAR 0 1
5270: ST_TO_ADDR
// break ;
5271: GO 5275
// end ;
5273: GO 5225
5275: POP
5276: POP
// until dogTagFound ;
5277: LD_EXP 6
5281: IFFALSE 5208
// CenterNowOnUnits ( Heike ) ;
5283: LD_EXP 16
5287: PPUSH
5288: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5292: LD_EXP 16
5296: PPUSH
5297: LD_EXP 6
5301: PUSH
5302: LD_INT 1
5304: ARRAY
5305: PPUSH
5306: LD_EXP 6
5310: PUSH
5311: LD_INT 2
5313: ARRAY
5314: PPUSH
5315: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5319: LD_STRING ACH_DOGTAG
5321: PPUSH
5322: CALL_OW 543
// if mercenariesQuestReady then
5326: LD_EXP 10
5330: IFFALSE 5346
// Say ( Heike , DH-dogtag-found-quest ) else
5332: LD_EXP 16
5336: PPUSH
5337: LD_STRING DH-dogtag-found-quest
5339: PPUSH
5340: CALL_OW 88
5344: GO 5378
// if meetJohnny then
5346: LD_EXP 3
5350: IFFALSE 5366
// Say ( Heike , DH-dogtag-found ) else
5352: LD_EXP 16
5356: PPUSH
5357: LD_STRING DH-dogtag-found
5359: PPUSH
5360: CALL_OW 88
5364: GO 5378
// Say ( Heike , DH-dogtag-found-no-american ) ;
5366: LD_EXP 16
5370: PPUSH
5371: LD_STRING DH-dogtag-found-no-american
5373: PPUSH
5374: CALL_OW 88
// end ;
5378: PPOPN 1
5380: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5381: LD_EXP 8
5385: NOT
5386: IFFALSE 5395
5388: PUSH
5389: LD_EXP 7
5393: NOT
5394: AND
5395: IFFALSE 5411
5397: PUSH
5398: LD_INT 5
5400: PPUSH
5401: LD_EXP 16
5405: PPUSH
5406: CALL_OW 292
5410: AND
5411: IFFALSE 5433
5413: PUSH
5414: LD_EXP 16
5418: PPUSH
5419: LD_EXP 17
5423: PPUSH
5424: CALL_OW 296
5428: PUSH
5429: LD_INT 8
5431: LESS
5432: AND
5433: IFFALSE 5827
5435: GO 5437
5437: DISABLE
// begin olafSpotted := true ;
5438: LD_ADDR_EXP 8
5442: PUSH
5443: LD_INT 1
5445: ST_TO_ADDR
// if HasTask ( Olaf ) then
5446: LD_EXP 17
5450: PPUSH
5451: CALL_OW 314
5455: IFFALSE 5466
// ComStop ( Olaf ) ;
5457: LD_EXP 17
5461: PPUSH
5462: CALL_OW 141
// InGameOn ;
5466: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5470: LD_EXP 17
5474: PPUSH
5475: LD_EXP 16
5479: PPUSH
5480: CALL_OW 296
5484: PUSH
5485: LD_INT 8
5487: GREATER
5488: IFFALSE 5504
// ComMoveUnit ( Olaf , Heike ) ;
5490: LD_EXP 17
5494: PPUSH
5495: LD_EXP 16
5499: PPUSH
5500: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5504: LD_INT 35
5506: PPUSH
5507: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5511: LD_EXP 17
5515: PPUSH
5516: LD_EXP 16
5520: PPUSH
5521: CALL_OW 296
5525: PUSH
5526: LD_INT 8
5528: LESSEQUAL
5529: IFFALSE 5504
// ComTurnUnit ( Heike , Olaf ) ;
5531: LD_EXP 16
5535: PPUSH
5536: LD_EXP 17
5540: PPUSH
5541: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_EXP 16
5554: PPUSH
5555: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5559: LD_INT 18
5561: PPUSH
5562: CALL_OW 67
// DialogueOn ;
5566: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5570: LD_EXP 17
5574: PPUSH
5575: LD_STRING DO-olaf-1
5577: PPUSH
5578: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-1
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-2
5601: PPUSH
5602: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5606: LD_EXP 16
5610: PPUSH
5611: LD_STRING DH-olaf-2
5613: PPUSH
5614: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5618: LD_EXP 17
5622: PPUSH
5623: LD_STRING DO-olaf-3
5625: PPUSH
5626: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5630: LD_EXP 17
5634: PPUSH
5635: LD_STRING DO-olaf-4
5637: PPUSH
5638: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5642: LD_EXP 16
5646: PPUSH
5647: LD_STRING DH-olaf-4
5649: PPUSH
5650: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5654: LD_EXP 17
5658: PPUSH
5659: LD_STRING DO-olaf-5
5661: PPUSH
5662: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5666: LD_EXP 16
5670: PPUSH
5671: LD_STRING DH-olaf-5
5673: PPUSH
5674: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5678: LD_EXP 17
5682: PPUSH
5683: LD_STRING DO-olaf-6
5685: PPUSH
5686: CALL_OW 88
// if russianSpotted or johnnySaved then
5690: LD_EXP 9
5694: IFTRUE 5702
5696: PUSH
5697: LD_EXP 4
5701: OR
5702: IFFALSE 5730
// begin Say ( Heike , DH-olaf-6a ) ;
5704: LD_EXP 16
5708: PPUSH
5709: LD_STRING DH-olaf-6a
5711: PPUSH
5712: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5716: LD_EXP 17
5720: PPUSH
5721: LD_STRING DO-olaf-7a
5723: PPUSH
5724: CALL_OW 88
// end else
5728: GO 5754
// begin Say ( Heike , DH-olaf-6b ) ;
5730: LD_EXP 16
5734: PPUSH
5735: LD_STRING DH-olaf-6b
5737: PPUSH
5738: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5742: LD_EXP 17
5746: PPUSH
5747: LD_STRING DO-olaf-7b
5749: PPUSH
5750: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5754: LD_EXP 17
5758: PPUSH
5759: LD_STRING DO-olaf-8
5761: PPUSH
5762: CALL_OW 88
// DialogueOff ;
5766: CALL_OW 7
// InGameOff ;
5770: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5774: LD_STRING O3_camp_cont
5776: PPUSH
5777: CALL_OW 337
// if not johnnySaved then
5781: LD_EXP 4
5785: NOT
5786: IFFALSE 5797
// KillUnit ( Johnny ) ;
5788: LD_EXP 25
5792: PPUSH
5793: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5797: LD_EXP 17
5801: PPUSH
5802: LD_INT 52
5804: PPUSH
5805: LD_INT 90
5807: PPUSH
5808: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5812: LD_EXP 17
5816: PPUSH
5817: LD_INT 53
5819: PPUSH
5820: LD_INT 89
5822: PPUSH
5823: CALL_OW 178
// end ;
5827: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5828: LD_EXP 8
5832: NOT
5833: IFFALSE 5855
5835: PUSH
5836: LD_EXP 16
5840: PPUSH
5841: LD_EXP 18
5845: PPUSH
5846: CALL_OW 296
5850: PUSH
5851: LD_INT 36
5853: LESS
5854: AND
5855: IFFALSE 5875
5857: GO 5859
5859: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5860: LD_EXP 17
5864: PPUSH
5865: LD_INT 39
5867: PPUSH
5868: LD_INT 71
5870: PPUSH
5871: CALL_OW 111
5875: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , tmp , driver , tank ;
5876: LD_EXP 7
5880: NOT
5881: IFFALSE 5913
5883: PUSH
5884: LD_INT 2
5886: PPUSH
5887: LD_EXP 19
5891: PPUSH
5892: CALL_OW 292
5896: IFTRUE 5912
5898: PUSH
5899: LD_INT 2
5901: PPUSH
5902: LD_EXP 18
5906: PPUSH
5907: CALL_OW 292
5911: OR
5912: AND
5913: IFFALSE 7326
5915: GO 5917
5917: DISABLE
5918: LD_INT 0
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
// begin if not johnnySaved then
5924: LD_EXP 4
5928: NOT
5929: IFFALSE 5940
// KillUnit ( Johnny ) ;
5931: LD_EXP 25
5935: PPUSH
5936: CALL_OW 66
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , Heike , 30 ] ] ) ;
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_INT 22
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 91
5957: PUSH
5958: LD_EXP 16
5962: PUSH
5963: LD_INT 30
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 69
5979: ST_TO_ADDR
// if tmp then
5980: LD_VAR 0 2
5984: IFFALSE 6027
// begin for i in tmp do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 2
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6025
// begin ComStop ( i ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: CALL_OW 141
// AddComMoveXY ( i , 85 , 20 ) ;
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 85
6015: PPUSH
6016: LD_INT 20
6018: PPUSH
6019: CALL_OW 171
// end ;
6023: GO 5996
6025: POP
6026: POP
// end ; mercenariesSpotted := true ;
6027: LD_ADDR_EXP 7
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
6035: LD_STRING O4_camp_cont
6037: PPUSH
6038: CALL_OW 337
// InGameOn ;
6042: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
6046: LD_INT 53
6048: PPUSH
6049: LD_INT 89
6051: PPUSH
6052: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
6056: LD_INT 53
6058: PPUSH
6059: LD_INT 89
6061: PPUSH
6062: LD_INT 2
6064: PPUSH
6065: LD_INT 8
6067: NEG
6068: PPUSH
6069: CALL_OW 330
// if olafSpotted then
6073: LD_EXP 8
6077: IFFALSE 6195
// begin AddComTurnUnit ( Olaf , Heike ) ;
6079: LD_EXP 17
6083: PPUSH
6084: LD_EXP 16
6088: PPUSH
6089: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
6093: LD_EXP 16
6097: PPUSH
6098: LD_INT 51
6100: PPUSH
6101: LD_INT 86
6103: PPUSH
6104: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
6108: LD_EXP 16
6112: PPUSH
6113: LD_EXP 17
6117: PPUSH
6118: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
6122: LD_EXP 17
6126: PPUSH
6127: LD_STRING DO-camp-1
6129: PPUSH
6130: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6134: LD_EXP 18
6138: PUSH
6139: LD_EXP 19
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: LD_EXP 16
6152: PPUSH
6153: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6157: LD_EXP 18
6161: PPUSH
6162: LD_STRING DG-camp-1
6164: PPUSH
6165: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6169: LD_EXP 16
6173: PPUSH
6174: LD_STRING DH-camp-1
6176: PPUSH
6177: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6181: LD_EXP 17
6185: PPUSH
6186: LD_STRING DO-camp-2
6188: PPUSH
6189: CALL_OW 88
// end else
6193: GO 6590
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6195: LD_EXP 16
6199: PPUSH
6200: LD_INT 51
6202: PPUSH
6203: LD_INT 86
6205: PPUSH
6206: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6210: LD_EXP 16
6214: PPUSH
6215: LD_EXP 18
6219: PPUSH
6220: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6224: LD_EXP 18
6228: PUSH
6229: LD_EXP 19
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: LD_EXP 16
6242: PPUSH
6243: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6247: LD_EXP 18
6251: PPUSH
6252: LD_STRING DG-camp-1a
6254: PPUSH
6255: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6259: LD_EXP 16
6263: PPUSH
6264: LD_STRING DH-camp-1a
6266: PPUSH
6267: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6278: LD_EXP 19
6282: PPUSH
6283: LD_EXP 17
6287: PPUSH
6288: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6292: LD_EXP 19
6296: PPUSH
6297: LD_STRING DM-camp-1a
6299: PPUSH
6300: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6304: LD_EXP 17
6308: PPUSH
6309: LD_INT 52
6311: PPUSH
6312: LD_INT 90
6314: PPUSH
6315: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6319: LD_EXP 19
6323: PPUSH
6324: LD_EXP 16
6328: PPUSH
6329: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6333: LD_EXP 18
6337: PPUSH
6338: LD_STRING DG-camp-2a
6340: PPUSH
6341: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6345: LD_EXP 16
6349: PPUSH
6350: LD_STRING DH-camp-2a
6352: PPUSH
6353: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6357: LD_EXP 19
6361: PPUSH
6362: LD_STRING DM-camp-2a
6364: PPUSH
6365: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6369: LD_INT 35
6371: PPUSH
6372: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6376: LD_EXP 17
6380: PPUSH
6381: LD_EXP 16
6385: PPUSH
6386: CALL_OW 296
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: IFFALSE 6369
// AddComTurnUnit ( Olaf , Heike ) ;
6396: LD_EXP 17
6400: PPUSH
6401: LD_EXP 16
6405: PPUSH
6406: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6410: LD_EXP 19
6414: PPUSH
6415: LD_EXP 16
6419: PPUSH
6420: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING DO-camp-2a
6431: PPUSH
6432: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6436: LD_EXP 16
6440: PPUSH
6441: LD_EXP 17
6445: PPUSH
6446: CALL_OW 119
// if russianSpotted then
6450: LD_EXP 9
6454: IFFALSE 6494
// begin Say ( Heike , DH-camp-2aa ) ;
6456: LD_EXP 16
6460: PPUSH
6461: LD_STRING DH-camp-2aa
6463: PPUSH
6464: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6468: LD_EXP 18
6472: PPUSH
6473: LD_STRING DG-camp-2aa
6475: PPUSH
6476: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6480: LD_EXP 19
6484: PPUSH
6485: LD_STRING DM-camp-2aa
6487: PPUSH
6488: CALL_OW 88
// end else
6492: GO 6518
// begin Say ( Heike , DH-camp-2ab ) ;
6494: LD_EXP 16
6498: PPUSH
6499: LD_STRING DH-camp-2ab
6501: PPUSH
6502: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6506: LD_EXP 19
6510: PPUSH
6511: LD_STRING DM-camp-2ab
6513: PPUSH
6514: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-3a
6525: PPUSH
6526: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6530: LD_EXP 17
6534: PPUSH
6535: LD_STRING DO-camp-3a
6537: PPUSH
6538: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6542: LD_EXP 18
6546: PPUSH
6547: LD_STRING DG-camp-3a
6549: PPUSH
6550: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6554: LD_EXP 16
6558: PPUSH
6559: LD_STRING DH-camp-4aa
6561: PPUSH
6562: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6566: LD_EXP 19
6570: PPUSH
6571: LD_STRING DM-camp-4aa
6573: PPUSH
6574: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6578: LD_EXP 17
6582: PPUSH
6583: LD_STRING DO-camp-4a
6585: PPUSH
6586: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING DO-camp-3
6597: PPUSH
6598: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6602: LD_EXP 17
6606: PPUSH
6607: LD_STRING DO-camp-4
6609: PPUSH
6610: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6614: LD_EXP 18
6618: PPUSH
6619: LD_EXP 17
6623: PPUSH
6624: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6628: LD_EXP 18
6632: PPUSH
6633: LD_STRING DG-camp-4
6635: PPUSH
6636: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6640: LD_EXP 16
6644: PPUSH
6645: LD_EXP 18
6649: PPUSH
6650: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6654: LD_EXP 16
6658: PPUSH
6659: LD_STRING DH-camp-4
6661: PPUSH
6662: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6666: LD_EXP 19
6670: PUSH
6671: LD_EXP 17
6675: PUSH
6676: LD_EXP 18
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: PPUSH
6686: LD_EXP 16
6690: PPUSH
6691: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6695: LD_EXP 18
6699: PPUSH
6700: LD_STRING DG-camp-5
6702: PPUSH
6703: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6707: LD_EXP 18
6711: PPUSH
6712: LD_STRING DG-camp-6
6714: PPUSH
6715: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6719: LD_EXP 16
6723: PPUSH
6724: LD_STRING DH-camp-6
6726: PPUSH
6727: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6731: LD_EXP 18
6735: PPUSH
6736: LD_STRING DG-camp-7
6738: PPUSH
6739: CALL_OW 88
// if DogTagFound then
6743: LD_EXP 6
6747: IFFALSE 6787
// begin Say ( Heike , DH-quest-1a ) ;
6749: LD_EXP 16
6753: PPUSH
6754: LD_STRING DH-quest-1a
6756: PPUSH
6757: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6761: LD_EXP 18
6765: PPUSH
6766: LD_STRING DG-quest-1a
6768: PPUSH
6769: CALL_OW 88
// mercenariesQuestDone := true ;
6773: LD_ADDR_EXP 11
6777: PUSH
6778: LD_INT 1
6780: ST_TO_ADDR
// InGameOff ;
6781: CALL_OW 9
// end else
6785: GO 6955
// begin Say ( Heike , DH-camp-7 ) ;
6787: LD_EXP 16
6791: PPUSH
6792: LD_STRING DH-camp-7
6794: PPUSH
6795: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6799: LD_EXP 16
6803: PPUSH
6804: CALL_OW 256
6808: PUSH
6809: LD_INT 1000
6811: LESS
6812: IFFALSE 6906
// begin Say ( Olaf , DO-heal-1 ) ;
6814: LD_EXP 17
6818: PPUSH
6819: LD_STRING DO-heal-1
6821: PPUSH
6822: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6826: LD_EXP 16
6830: PPUSH
6831: LD_INT 51
6833: PPUSH
6834: LD_INT 88
6836: PPUSH
6837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6848: LD_EXP 16
6852: PPUSH
6853: LD_EXP 17
6857: PPUSH
6858: CALL_OW 296
6862: PUSH
6863: LD_INT 4
6865: LESS
6866: IFTRUE 6885
6868: PUSH
6869: LD_EXP 16
6873: PPUSH
6874: LD_INT 51
6876: PPUSH
6877: LD_INT 88
6879: PPUSH
6880: CALL_OW 307
6884: OR
6885: IFFALSE 6841
// SetLives ( Heike , 1000 ) ;
6887: LD_EXP 16
6891: PPUSH
6892: LD_INT 1000
6894: PPUSH
6895: CALL_OW 234
// wait ( 0 0$2 ) ;
6899: LD_INT 70
6901: PPUSH
6902: CALL_OW 67
// end ; InGameOff ;
6906: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6910: LD_EXP 17
6914: PUSH
6915: LD_EXP 18
6919: PUSH
6920: LD_EXP 19
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PPUSH
6930: LD_INT 53
6932: PPUSH
6933: LD_INT 89
6935: PPUSH
6936: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6940: LD_STRING O5_proof_cont
6942: PPUSH
6943: CALL_OW 337
// mercenariesQuestReady := true ;
6947: LD_ADDR_EXP 10
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6955: LD_EXP 10
6959: NOT
6960: IFFALSE 6964
// exit ;
6962: GO 7326
// wait ( 0 0$35 ) ;
6964: LD_INT 1225
6966: PPUSH
6967: CALL_OW 67
// driver := PreparePatrolTank ;
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: CALL 2827 0 0
6980: ST_TO_ADDR
// if not driver then
6981: LD_VAR 0 3
6985: NOT
6986: IFFALSE 6990
// exit ;
6988: GO 7326
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6990: LD_INT 2
6992: PPUSH
6993: LD_INT 1
6995: PPUSH
6996: LD_INT 2
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: CALL_OW 80
// tank := IsInUnit ( driver ) ;
7006: LD_ADDR_VAR 0 4
7010: PUSH
7011: LD_VAR 0 3
7015: PPUSH
7016: CALL_OW 310
7020: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 500
7028: PPUSH
7029: CALL_OW 234
// SetLives ( driver , 450 ) ;
7033: LD_VAR 0 3
7037: PPUSH
7038: LD_INT 450
7040: PPUSH
7041: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
7045: LD_VAR 0 3
7049: PPUSH
7050: LD_INT 59
7052: PPUSH
7053: LD_INT 60
7055: PPUSH
7056: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7060: LD_INT 35
7062: PPUSH
7063: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
7067: LD_VAR 0 4
7071: PPUSH
7072: LD_INT 59
7074: PPUSH
7075: LD_INT 60
7077: PPUSH
7078: CALL_OW 307
7082: IFFALSE 7060
// if not See ( 1 , Heike ) then
7084: LD_INT 1
7086: PPUSH
7087: LD_EXP 16
7091: PPUSH
7092: CALL_OW 292
7096: NOT
7097: IFFALSE 7221
// begin if Difficulty < 3 then
7099: LD_OWVAR 67
7103: PUSH
7104: LD_INT 3
7106: LESS
7107: IFFALSE 7125
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
7109: LD_INT 59
7111: PPUSH
7112: LD_INT 60
7114: PPUSH
7115: LD_INT 2
7117: PPUSH
7118: LD_INT 6
7120: PPUSH
7121: CALL_OW 330
// ComExitVehicle ( driver ) ;
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL_OW 121
// wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
7141: LD_VAR 0 3
7145: PPUSH
7146: LD_INT 58
7148: PPUSH
7149: LD_INT 54
7151: PPUSH
7152: CALL_OW 171
// wait ( 0 0$1 ) ;
7156: LD_INT 35
7158: PPUSH
7159: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7163: LD_VAR 0 3
7167: PPUSH
7168: LD_INT 57
7170: PPUSH
7171: LD_INT 53
7173: PPUSH
7174: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7178: LD_VAR 0 3
7182: PPUSH
7183: LD_INT 350
7185: PPUSH
7186: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7190: LD_VAR 0 3
7194: PPUSH
7195: LD_VAR 0 4
7199: PPUSH
7200: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7204: LD_VAR 0 3
7208: PPUSH
7209: LD_INT 107
7211: PPUSH
7212: LD_INT 118
7214: PPUSH
7215: CALL_OW 171
// end else
7219: GO 7236
// begin ComMoveXY ( driver , 107 , 118 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 107
7228: PPUSH
7229: LD_INT 118
7231: PPUSH
7232: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7236: LD_INT 35
7238: PPUSH
7239: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7243: LD_VAR 0 4
7247: PPUSH
7248: LD_INT 107
7250: PPUSH
7251: LD_INT 118
7253: PPUSH
7254: CALL_OW 307
7258: IFTRUE 7271
7260: PUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 301
7270: OR
7271: IFFALSE 7236
// if IsDead ( driver [ 1 ] ) then
7273: LD_VAR 0 3
7277: PUSH
7278: LD_INT 1
7280: ARRAY
7281: PPUSH
7282: CALL_OW 301
7286: IFFALSE 7290
// exit ;
7288: GO 7326
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7290: LD_ADDR_VAR 0 1
7294: PUSH
7295: LD_INT 22
7297: PUSH
7298: LD_INT 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 69
7309: PUSH
7310: FOR_IN
7311: IFFALSE 7324
// RemoveUnit ( i ) ;
7313: LD_VAR 0 1
7317: PPUSH
7318: CALL_OW 64
7322: GO 7310
7324: POP
7325: POP
// end ;
7326: PPOPN 4
7328: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7329: LD_INT 10
7331: PPUSH
7332: LD_INT 22
7334: PUSH
7335: LD_INT 2
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: IFFALSE 7434
7362: GO 7364
7364: DISABLE
// begin InGameOn ;
7365: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7369: LD_EXP 17
7373: PUSH
7374: LD_EXP 19
7378: PUSH
7379: LD_EXP 18
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: LD_EXP 16
7393: PPUSH
7394: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7398: LD_EXP 19
7402: PPUSH
7403: LD_STRING DM-quest-1
7405: PPUSH
7406: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7410: LD_EXP 18
7414: PPUSH
7415: LD_STRING DG-quest-1
7417: PPUSH
7418: CALL_OW 88
// InGameOff ;
7422: CALL_OW 9
// mercenariesQuestDone := true ;
7426: LD_ADDR_EXP 11
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// end ;
7434: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7435: LD_EXP 16
7439: PPUSH
7440: LD_INT 10
7442: PPUSH
7443: CALL_OW 308
7447: IFFALSE 7455
7449: PUSH
7450: LD_EXP 6
7454: AND
7455: IFFALSE 7463
7457: PUSH
7458: LD_EXP 10
7462: AND
7463: IFFALSE 7499
7465: PUSH
7466: LD_INT 10
7468: PPUSH
7469: LD_INT 22
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 21
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 70
7497: NOT
7498: AND
7499: IFFALSE 7673
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin InGameOn ;
7507: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7511: LD_EXP 17
7515: PUSH
7516: LD_EXP 19
7520: PUSH
7521: LD_EXP 18
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: LD_EXP 16
7535: PPUSH
7536: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 54
7547: PPUSH
7548: LD_INT 86
7550: PPUSH
7551: CALL_OW 111
// p := p + 1 ;
7555: LD_ADDR_VAR 0 1
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: LD_INT 1
7567: PLUS
7568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7569: LD_INT 35
7571: PPUSH
7572: CALL_OW 67
// p := p + 1 ;
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7590: LD_EXP 16
7594: PPUSH
7595: LD_EXP 18
7599: PPUSH
7600: CALL_OW 296
7604: PUSH
7605: LD_INT 4
7607: LESS
7608: IFTRUE 7620
7610: PUSH
7611: LD_VAR 0 1
7615: PUSH
7616: LD_INT 5
7618: GREATER
7619: OR
7620: IFFALSE 7569
// Say ( Mike , DM-quest-1 ) ;
7622: LD_EXP 19
7626: PPUSH
7627: LD_STRING DM-quest-1
7629: PPUSH
7630: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7634: LD_EXP 18
7638: PPUSH
7639: LD_STRING DG-quest-1
7641: PPUSH
7642: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7646: LD_EXP 16
7650: PPUSH
7651: LD_INT 55
7653: PPUSH
7654: LD_INT 87
7656: PPUSH
7657: CALL_OW 111
// InGameOff ;
7661: CALL_OW 9
// mercenariesQuestDone := true ;
7665: LD_ADDR_EXP 11
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// end ;
7673: PPOPN 1
7675: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7676: LD_EXP 16
7680: PUSH
7681: LD_INT 55
7683: PUSH
7684: EMPTY
7685: LIST
7686: PPUSH
7687: CALL_OW 69
7691: IN
7692: IFFALSE 7732
7694: GO 7696
7696: DISABLE
// begin if Difficulty < 3 then
7697: LD_OWVAR 67
7701: PUSH
7702: LD_INT 3
7704: LESS
7705: IFFALSE 7720
// RemoveSeeing ( 59 , 60 , 2 ) ;
7707: LD_INT 59
7709: PPUSH
7710: LD_INT 60
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7720: LD_EXP 16
7724: PPUSH
7725: LD_STRING DH-driver
7727: PPUSH
7728: CALL_OW 88
// end ;
7732: END
// every 0 0$1 trigger mercenariesQuestDone do
7733: LD_EXP 11
7737: IFFALSE 8227
7739: GO 7741
7741: DISABLE
// begin if mercenariesQuestReady then
7742: LD_EXP 10
7746: IFFALSE 7755
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7748: LD_STRING O5_proof_cont_out
7750: PPUSH
7751: CALL_OW 337
// InGameOn ;
7755: CALL_OW 8
// if IsInUnit ( Heike ) then
7759: LD_EXP 16
7763: PPUSH
7764: CALL_OW 310
7768: IFFALSE 7779
// ComExitVehicle ( Heike ) ;
7770: LD_EXP 16
7774: PPUSH
7775: CALL_OW 121
// wait ( 3 ) ;
7779: LD_INT 3
7781: PPUSH
7782: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7786: LD_EXP 16
7790: PPUSH
7791: LD_EXP 18
7795: PPUSH
7796: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7800: LD_EXP 17
7804: PUSH
7805: LD_EXP 19
7809: PUSH
7810: LD_EXP 18
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: LD_EXP 16
7824: PPUSH
7825: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7829: LD_EXP 16
7833: PPUSH
7834: LD_STRING DH-quest-done-1
7836: PPUSH
7837: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_STRING DM-quest-done-1
7848: PPUSH
7849: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7853: LD_EXP 18
7857: PPUSH
7858: LD_STRING DG-quest-done-1
7860: PPUSH
7861: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7865: LD_EXP 16
7869: PPUSH
7870: LD_EXP 17
7874: PPUSH
7875: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7879: LD_EXP 16
7883: PPUSH
7884: LD_STRING DH-quest-done-2
7886: PPUSH
7887: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7891: LD_EXP 17
7895: PPUSH
7896: LD_STRING DO-quest-done-2
7898: PPUSH
7899: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7903: LD_EXP 17
7907: PPUSH
7908: LD_STRING DO-quest-done-3
7910: PPUSH
7911: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7915: LD_EXP 18
7919: PPUSH
7920: LD_INT 51
7922: PPUSH
7923: LD_INT 90
7925: PPUSH
7926: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7930: LD_EXP 18
7934: PPUSH
7935: LD_INT 50
7937: PPUSH
7938: LD_INT 89
7940: PPUSH
7941: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7945: LD_EXP 16
7949: PPUSH
7950: LD_EXP 18
7954: PPUSH
7955: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7959: LD_EXP 18
7963: PPUSH
7964: LD_STRING DG-quest-done-4
7966: PPUSH
7967: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7971: LD_EXP 18
7975: PPUSH
7976: LD_EXP 16
7980: PPUSH
7981: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7985: LD_EXP 16
7989: PPUSH
7990: CALL_OW 256
7994: PUSH
7995: LD_INT 1000
7997: LESS
7998: IFFALSE 8092
// begin Say ( Olaf , DO-heal-1 ) ;
8000: LD_EXP 17
8004: PPUSH
8005: LD_STRING DO-heal-1
8007: PPUSH
8008: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
8012: LD_EXP 16
8016: PPUSH
8017: LD_INT 51
8019: PPUSH
8020: LD_INT 88
8022: PPUSH
8023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8027: LD_INT 35
8029: PPUSH
8030: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
8034: LD_EXP 16
8038: PPUSH
8039: LD_EXP 17
8043: PPUSH
8044: CALL_OW 296
8048: PUSH
8049: LD_INT 4
8051: LESS
8052: IFTRUE 8071
8054: PUSH
8055: LD_EXP 16
8059: PPUSH
8060: LD_INT 51
8062: PPUSH
8063: LD_INT 88
8065: PPUSH
8066: CALL_OW 307
8070: OR
8071: IFFALSE 8027
// SetLives ( Heike , 1000 ) ;
8073: LD_EXP 16
8077: PPUSH
8078: LD_INT 1000
8080: PPUSH
8081: CALL_OW 234
// wait ( 0 0$2 ) ;
8085: LD_INT 70
8087: PPUSH
8088: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
8092: LD_EXP 16
8096: PPUSH
8097: LD_STRING DH-quest-done-4
8099: PPUSH
8100: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
8104: LD_EXP 17
8108: PPUSH
8109: LD_STRING DO-quest-done-4
8111: PPUSH
8112: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
8116: LD_EXP 16
8120: PPUSH
8121: LD_EXP 17
8125: PPUSH
8126: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
8130: LD_EXP 16
8134: PPUSH
8135: LD_STRING DH-quest-done-5
8137: PPUSH
8138: CALL_OW 88
// InGameOff ;
8142: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
8146: LD_STRING O6_end_cont
8148: PPUSH
8149: CALL_OW 337
// SetSide ( Givi , 2 ) ;
8153: LD_EXP 18
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8165: LD_EXP 19
8169: PPUSH
8170: LD_INT 2
8172: PPUSH
8173: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8177: LD_INT 42
8179: PPUSH
8180: LD_INT 2
8182: PPUSH
8183: LD_INT 2
8185: PPUSH
8186: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8190: LD_EXP 17
8194: PPUSH
8195: LD_INT 53
8197: PPUSH
8198: LD_INT 89
8200: PPUSH
8201: CALL_OW 118
// lastObjectiveActive := true ;
8205: LD_ADDR_EXP 12
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: CALL_OW 424
// PreparePrison ;
8223: CALL 1166 0 0
// end ;
8227: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8228: LD_INT 22
8230: PUSH
8231: LD_INT 2
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 91
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: LD_INT 4
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PPUSH
8256: CALL_OW 69
8260: IFFALSE 8418
8262: GO 8264
8264: DISABLE
8265: LD_INT 0
8267: PPUSH
8268: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8269: LD_INT 245
8271: PUSH
8272: LD_INT 210
8274: PUSH
8275: LD_INT 210
8277: PUSH
8278: LD_INT 175
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: PUSH
8287: LD_OWVAR 67
8291: ARRAY
8292: PPUSH
8293: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8297: LD_ADDR_VAR 0 2
8301: PUSH
8302: LD_INT 22
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 25
8314: PUSH
8315: LD_INT 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 54
8324: PUSH
8325: EMPTY
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: ST_TO_ADDR
// if not tmp then
8338: LD_VAR 0 2
8342: NOT
8343: IFFALSE 8347
// exit ;
8345: GO 8418
// for i in tmp do
8347: LD_ADDR_VAR 0 1
8351: PUSH
8352: LD_VAR 0 2
8356: PUSH
8357: FOR_IN
8358: IFFALSE 8386
// begin ComExitBuilding ( i ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_INT 121
8376: PPUSH
8377: LD_INT 22
8379: PPUSH
8380: CALL_OW 174
// end ;
8384: GO 8357
8386: POP
8387: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_INT 121
8395: PPUSH
8396: LD_INT 22
8398: PPUSH
8399: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8403: LD_EXP 24
8407: PPUSH
8408: LD_INT 121
8410: PPUSH
8411: LD_INT 22
8413: PPUSH
8414: CALL_OW 114
// end ;
8418: PPOPN 2
8420: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8421: LD_INT 22
8423: PUSH
8424: LD_INT 2
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 91
8433: PUSH
8434: LD_INT 8
8436: PUSH
8437: LD_INT 4
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PPUSH
8449: CALL_OW 69
8453: IFFALSE 8611
8455: GO 8457
8457: DISABLE
8458: LD_INT 0
8460: PPUSH
8461: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8462: LD_INT 315
8464: PUSH
8465: LD_INT 280
8467: PUSH
8468: LD_INT 245
8470: PUSH
8471: LD_INT 210
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: LD_OWVAR 67
8484: ARRAY
8485: PPUSH
8486: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_INT 22
8497: PUSH
8498: LD_INT 3
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 25
8507: PUSH
8508: LD_INT 1
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 54
8517: PUSH
8518: EMPTY
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// if not tmp then
8531: LD_VAR 0 2
8535: NOT
8536: IFFALSE 8540
// exit ;
8538: GO 8611
// for i in tmp do
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_VAR 0 2
8549: PUSH
8550: FOR_IN
8551: IFFALSE 8579
// begin ComExitBuilding ( i ) ;
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_INT 142
8569: PPUSH
8570: LD_INT 71
8572: PPUSH
8573: CALL_OW 174
// end ;
8577: GO 8550
8579: POP
8580: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8581: LD_EXP 23
8585: PPUSH
8586: LD_INT 142
8588: PPUSH
8589: LD_INT 71
8591: PPUSH
8592: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8596: LD_EXP 24
8600: PPUSH
8601: LD_INT 142
8603: PPUSH
8604: LD_INT 71
8606: PPUSH
8607: CALL_OW 114
// end ;
8611: PPOPN 2
8613: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8614: LD_INT 22
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 58
8636: PUSH
8637: EMPTY
8638: LIST
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: LD_INT 24
8645: PUSH
8646: LD_INT 1000
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 91
8659: PUSH
8660: LD_EXP 17
8664: PUSH
8665: LD_INT 8
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: IFFALSE 8697
8686: PUSH
8687: LD_EXP 17
8691: PPUSH
8692: CALL_OW 302
8696: AND
8697: IFFALSE 8811
8699: GO 8701
8701: DISABLE
// begin enable ;
8702: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8703: LD_EXP 17
8707: PPUSH
8708: LD_INT 22
8710: PUSH
8711: LD_INT 2
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 21
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 58
8730: PUSH
8731: EMPTY
8732: LIST
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: LD_INT 1000
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 91
8753: PUSH
8754: LD_EXP 17
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PPUSH
8774: CALL_OW 69
8778: PUSH
8779: LD_INT 1
8781: ARRAY
8782: PPUSH
8783: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8787: LD_EXP 17
8791: PPUSH
8792: LD_INT 52
8794: PPUSH
8795: LD_INT 90
8797: PPUSH
8798: CALL_OW 171
// AddComHold ( Olaf ) ;
8802: LD_EXP 17
8806: PPUSH
8807: CALL_OW 200
// end ;
8811: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8812: LD_EXP 12
8816: IFFALSE 8828
8818: PUSH
8819: LD_INT 2
8821: PPUSH
8822: CALL_OW 302
8826: NOT
8827: AND
8828: IFFALSE 8840
8830: PUSH
8831: LD_OWVAR 67
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: AND
8840: IFFALSE 8849
8842: PUSH
8843: LD_EXP 13
8847: NOT
8848: AND
8849: IFFALSE 8866
8851: GO 8853
8853: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8854: LD_EXP 16
8858: PPUSH
8859: LD_STRING DH-prison-missing
8861: PPUSH
8862: CALL_OW 88
// end ;
8866: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8867: LD_EXP 12
8871: IFFALSE 8883
8873: PUSH
8874: LD_INT 8
8876: PPUSH
8877: CALL_OW 302
8881: NOT
8882: AND
8883: IFFALSE 8895
8885: PUSH
8886: LD_OWVAR 67
8890: PUSH
8891: LD_INT 1
8893: GREATER
8894: AND
8895: IFFALSE 8904
8897: PUSH
8898: LD_EXP 13
8902: NOT
8903: AND
8904: IFFALSE 8921
8906: GO 8908
8908: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DH-prison-missing
8916: PPUSH
8917: CALL_OW 88
// end ;
8921: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8922: LD_EXP 12
8926: IFFALSE 8938
8928: PUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 302
8936: NOT
8937: AND
8938: IFFALSE 8947
8940: PUSH
8941: LD_EXP 13
8945: NOT
8946: AND
8947: IFFALSE 8964
8949: GO 8951
8951: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8952: LD_EXP 16
8956: PPUSH
8957: LD_STRING DH-prison-missing-a
8959: PPUSH
8960: CALL_OW 88
// end ;
8964: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8965: LD_EXP 12
8969: IFFALSE 8981
8971: PUSH
8972: LD_INT 10
8974: PPUSH
8975: CALL_OW 302
8979: NOT
8980: AND
8981: IFFALSE 8990
8983: PUSH
8984: LD_EXP 13
8988: NOT
8989: AND
8990: IFFALSE 9007
8992: GO 8994
8994: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8995: LD_EXP 16
8999: PPUSH
9000: LD_STRING DH-prison-missing-a
9002: PPUSH
9003: CALL_OW 88
// end ;
9007: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
9008: LD_EXP 13
9012: NOT
9013: IFFALSE 9021
9015: PUSH
9016: LD_EXP 12
9020: AND
9021: IFFALSE 9037
9023: PUSH
9024: LD_INT 2
9026: PPUSH
9027: LD_EXP 20
9031: PPUSH
9032: CALL_OW 292
9036: AND
9037: IFFALSE 9182
9039: GO 9041
9041: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
9042: LD_EXP 20
9046: PPUSH
9047: LD_EXP 16
9051: PPUSH
9052: CALL_OW 119
// DialogueOn ;
9056: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
9060: LD_EXP 20
9064: PPUSH
9065: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
9069: LD_EXP 20
9073: PPUSH
9074: LD_STRING DK-prison-found
9076: PPUSH
9077: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
9081: LD_EXP 16
9085: PPUSH
9086: LD_STRING DH-prison-found
9088: PPUSH
9089: CALL_OW 88
// DialogueOff ;
9093: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
9097: LD_EXP 20
9101: PPUSH
9102: LD_INT 2
9104: PPUSH
9105: CALL_OW 235
// prisonFound := true ;
9109: LD_ADDR_EXP 13
9113: PUSH
9114: LD_INT 1
9116: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
9117: LD_STRING O6_prison_out
9119: PPUSH
9120: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
9124: LD_EXP 23
9128: PPUSH
9129: LD_EXP 16
9133: PPUSH
9134: CALL_OW 250
9138: PPUSH
9139: LD_EXP 16
9143: PPUSH
9144: CALL_OW 251
9148: PPUSH
9149: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
9153: LD_EXP 24
9157: PPUSH
9158: LD_EXP 16
9162: PPUSH
9163: CALL_OW 250
9167: PPUSH
9168: LD_EXP 16
9172: PPUSH
9173: CALL_OW 251
9177: PPUSH
9178: CALL_OW 114
// end ;
9182: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9183: LD_EXP 16
9187: PPUSH
9188: CALL_OW 256
9192: PUSH
9193: LD_INT 500
9195: LESS
9196: IFFALSE 9209
9198: GO 9200
9200: DISABLE
// heikeHurt := true ;
9201: LD_ADDR_EXP 14
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
9209: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 21
9222: PUSH
9223: LD_INT 3
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: IFFALSE 9556
9240: GO 9242
9242: DISABLE
9243: LD_INT 0
9245: PPUSH
9246: PPUSH
9247: PPUSH
// begin uc_side := 3 ;
9248: LD_ADDR_OWVAR 20
9252: PUSH
9253: LD_INT 3
9255: ST_TO_ADDR
// uc_nation := 3 ;
9256: LD_ADDR_OWVAR 21
9260: PUSH
9261: LD_INT 3
9263: ST_TO_ADDR
// tmp := [ ] ;
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: EMPTY
9270: ST_TO_ADDR
// for i := 1 to 5 do
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: DOUBLE
9277: LD_INT 1
9279: DEC
9280: ST_TO_ADDR
9281: LD_INT 5
9283: PUSH
9284: FOR_TO
9285: IFFALSE 9393
// begin PrepareHuman ( false , 1 , 4 ) ;
9287: LD_INT 0
9289: PPUSH
9290: LD_INT 1
9292: PPUSH
9293: LD_INT 4
9295: PPUSH
9296: CALL_OW 380
// un := CreateHuman ;
9300: LD_ADDR_VAR 0 3
9304: PUSH
9305: CALL_OW 44
9309: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9310: LD_VAR 0 3
9314: PPUSH
9315: LD_INT 4
9317: PPUSH
9318: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9322: LD_VAR 0 3
9326: PPUSH
9327: LD_INT 158
9329: PPUSH
9330: LD_INT 80
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9340: LD_VAR 0 3
9344: PPUSH
9345: LD_INT 147
9347: PPUSH
9348: LD_INT 75
9350: PPUSH
9351: CALL_OW 111
// wait ( 0 0$1 ) ;
9355: LD_INT 35
9357: PPUSH
9358: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9362: LD_ADDR_VAR 0 2
9366: PUSH
9367: LD_VAR 0 2
9371: PPUSH
9372: LD_VAR 0 2
9376: PUSH
9377: LD_INT 1
9379: PLUS
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: CALL_OW 1
9390: ST_TO_ADDR
// end ;
9391: GO 9284
9393: POP
9394: POP
// repeat wait ( 0 0$1 ) ;
9395: LD_INT 35
9397: PPUSH
9398: CALL_OW 67
// for i in tmp do
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_VAR 0 2
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9534
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9415: LD_ADDR_VAR 0 3
9419: PUSH
9420: LD_INT 22
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PPUSH
9430: CALL_OW 69
9434: PPUSH
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 74
9444: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: CALL_OW 250
9458: PPUSH
9459: LD_VAR 0 3
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 251
9472: PPUSH
9473: CALL_OW 428
9477: IFFALSE 9518
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_VAR 0 3
9488: PUSH
9489: LD_INT 1
9491: ARRAY
9492: PPUSH
9493: CALL_OW 250
9497: PPUSH
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 1
9505: ARRAY
9506: PPUSH
9507: CALL_OW 251
9511: PPUSH
9512: CALL_OW 114
9516: GO 9532
// ComAttackUnit ( i , Heike ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_EXP 16
9527: PPUSH
9528: CALL_OW 115
// end ;
9532: GO 9412
9534: POP
9535: POP
// until IsDead ( Heike ) or not tmp ;
9536: LD_EXP 16
9540: PPUSH
9541: CALL_OW 301
9545: IFTRUE 9554
9547: PUSH
9548: LD_VAR 0 2
9552: NOT
9553: OR
9554: IFFALSE 9395
// end ;
9556: PPOPN 3
9558: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9559: LD_EXP 12
9563: IFFALSE 9576
9565: PUSH
9566: LD_EXP 16
9570: PPUSH
9571: CALL_OW 302
9575: AND
9576: IFFALSE 9622
9578: PUSH
9579: LD_INT 1
9581: PPUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 22
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 50
9604: PUSH
9605: EMPTY
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 71
9617: PUSH
9618: LD_INT 0
9620: EQUAL
9621: AND
9622: IFFALSE 10062
9624: GO 9626
9626: DISABLE
9627: LD_INT 0
9629: PPUSH
// begin if not heikeHurt then
9630: LD_EXP 14
9634: NOT
9635: IFFALSE 9644
// SetAchievement ( ACH_INVINCIBLE ) ;
9637: LD_STRING ACH_INVINCIBLE
9639: PPUSH
9640: CALL_OW 543
// if tick <= 6 6$00 then
9644: LD_OWVAR 1
9648: PUSH
9649: LD_INT 12600
9651: LESSEQUAL
9652: IFFALSE 9661
// SetAchievement ( ACH_HSPEED_1 ) ;
9654: LD_STRING ACH_HSPEED_1
9656: PPUSH
9657: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9661: LD_STRING enableBioCharacter(BIO_GIVI)
9663: PPUSH
9664: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9668: LD_STRING enableBioCharacter(BIO_MIKE)
9670: PPUSH
9671: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9675: LD_STRING enableBioCharacter(BIO_OLAF)
9677: PPUSH
9678: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9682: LD_ADDR_VAR 0 1
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 1
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 50
9709: PUSH
9710: EMPTY
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if Kamil in tmp then
9723: LD_EXP 20
9727: PUSH
9728: LD_VAR 0 1
9732: IN
9733: IFFALSE 9742
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9735: LD_STRING enableBioCharacter(BIO_KAMI)
9737: PPUSH
9738: CALL_OW 559
// if prisonFound then
9742: LD_EXP 13
9746: IFFALSE 9785
// begin if not IsOk ( Kamil ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: NOT
9758: IFFALSE 9773
// AddMedal ( med1 , - 2 ) else
9760: LD_STRING med1
9762: PPUSH
9763: LD_INT 2
9765: NEG
9766: PPUSH
9767: CALL_OW 101
9771: GO 9783
// AddMedal ( med1 , 1 ) ;
9773: LD_STRING med1
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 101
// end else
9783: GO 9796
// AddMedal ( med1 , - 1 ) ;
9785: LD_STRING med1
9787: PPUSH
9788: LD_INT 1
9790: NEG
9791: PPUSH
9792: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9796: LD_VAR 0 1
9800: PUSH
9801: LD_INT 3
9803: LESS
9804: IFFALSE 9813
9806: PUSH
9807: LD_EXP 13
9811: NOT
9812: AND
9813: IFTRUE 9833
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: LD_INT 4
9823: LESS
9824: IFFALSE 9832
9826: PUSH
9827: LD_EXP 13
9831: AND
9832: OR
9833: IFFALSE 9848
// AddMedal ( med2 , - 1 ) else
9835: LD_STRING med2
9837: PPUSH
9838: LD_INT 1
9840: NEG
9841: PPUSH
9842: CALL_OW 101
9846: GO 9858
// AddMedal ( med2 , 1 ) ;
9848: LD_STRING med2
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9858: LD_EXP 13
9862: IFFALSE 9870
9864: PUSH
9865: LD_EXP 4
9869: AND
9870: IFFALSE 9882
9872: PUSH
9873: LD_VAR 0 1
9877: PUSH
9878: LD_INT 4
9880: GREATEREQUAL
9881: AND
9882: IFFALSE 9896
// AddMedal ( med3 , 1 ) else
9884: LD_STRING med3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 101
9894: GO 9907
// AddMedal ( med3 , - 1 ) ;
9896: LD_STRING med3
9898: PPUSH
9899: LD_INT 1
9901: NEG
9902: PPUSH
9903: CALL_OW 101
// GiveMedals ( MAIN ) ;
9907: LD_STRING MAIN
9909: PPUSH
9910: CALL_OW 102
// RewardPeople ( tmp ) ;
9914: LD_VAR 0 1
9918: PPUSH
9919: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9923: LD_EXP 4
9927: PPUSH
9928: LD_STRING 01_JohnnySaved
9930: PPUSH
9931: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9935: LD_EXP 16
9939: PPUSH
9940: LD_STRING 01_Heike
9942: PPUSH
9943: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9947: LD_EXP 18
9951: PPUSH
9952: CALL_OW 302
9956: IFFALSE 9970
9958: PUSH
9959: LD_EXP 18
9963: PUSH
9964: LD_VAR 0 1
9968: IN
9969: AND
9970: IFFALSE 9984
// SaveCharacters ( Givi , 01_Givi ) ;
9972: LD_EXP 18
9976: PPUSH
9977: LD_STRING 01_Givi
9979: PPUSH
9980: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9984: LD_EXP 19
9988: PPUSH
9989: CALL_OW 302
9993: IFFALSE 10007
9995: PUSH
9996: LD_EXP 19
10000: PUSH
10001: LD_VAR 0 1
10005: IN
10006: AND
10007: IFFALSE 10021
// SaveCharacters ( Mike , 01_Mike ) ;
10009: LD_EXP 19
10013: PPUSH
10014: LD_STRING 01_Mike
10016: PPUSH
10017: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
10021: LD_EXP 20
10025: PPUSH
10026: CALL_OW 302
10030: IFFALSE 10044
10032: PUSH
10033: LD_EXP 20
10037: PUSH
10038: LD_VAR 0 1
10042: IN
10043: AND
10044: IFFALSE 10058
// SaveCharacters ( Kamil , 01_Kamil ) ;
10046: LD_EXP 20
10050: PPUSH
10051: LD_STRING 01_Kamil
10053: PPUSH
10054: CALL_OW 38
// YouWin ;
10058: CALL_OW 103
// end ; end_of_file
10062: PPOPN 1
10064: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10065: LD_VAR 0 1
10069: PUSH
10070: LD_EXP 16
10074: EQUAL
10075: IFFALSE 10084
// YouLost ( Heike ) ;
10077: LD_STRING Heike
10079: PPUSH
10080: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
10084: LD_VAR 0 1
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 3
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: IN
10118: IFFALSE 10224
// begin if un in russianPatrol then
10120: LD_VAR 0 1
10124: PUSH
10125: LD_EXP 21
10129: IN
10130: IFFALSE 10148
// russianPatrol := russianPatrol diff un ;
10132: LD_ADDR_EXP 21
10136: PUSH
10137: LD_EXP 21
10141: PUSH
10142: LD_VAR 0 1
10146: DIFF
10147: ST_TO_ADDR
// if un in russianForestPatrol then
10148: LD_VAR 0 1
10152: PUSH
10153: LD_EXP 22
10157: IN
10158: IFFALSE 10176
// russianForestPatrol := russianForestPatrol diff un ;
10160: LD_ADDR_EXP 22
10164: PUSH
10165: LD_EXP 22
10169: PUSH
10170: LD_VAR 0 1
10174: DIFF
10175: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
10176: LD_ADDR_EXP 5
10180: PUSH
10181: LD_EXP 5
10185: PPUSH
10186: LD_EXP 5
10190: PUSH
10191: LD_INT 1
10193: PLUS
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 250
10204: PUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 251
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 1
10223: ST_TO_ADDR
// end ; end ;
10224: PPOPN 1
10226: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10227: LD_VAR 0 1
10231: PUSH
10232: LD_EXP 16
10236: EQUAL
10237: IFFALSE 10246
// YouLost ( Heike ) ;
10239: LD_STRING Heike
10241: PPUSH
10242: CALL_OW 104
// if un = Olaf then
10246: LD_VAR 0 1
10250: PUSH
10251: LD_EXP 17
10255: EQUAL
10256: IFFALSE 10265
// YouLost ( Olaf ) ;
10258: LD_STRING Olaf
10260: PPUSH
10261: CALL_OW 104
// end ;
10265: PPOPN 1
10267: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10268: LD_VAR 0 1
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10288
10278: PUSH
10279: LD_VAR 0 2
10283: PUSH
10284: LD_INT 5
10286: EQUAL
10287: AND
10288: IFFALSE 10297
// YouLost ( FriendlyFire ) ;
10290: LD_STRING FriendlyFire
10292: PPUSH
10293: CALL_OW 104
// end ; end_of_file
10297: PPOPN 2
10299: END
// export globalGameSaveCounter ; every 0 0$1 do
10300: GO 10302
10302: DISABLE
// begin enable ;
10303: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10304: LD_STRING updateTimer(
10306: PUSH
10307: LD_OWVAR 1
10311: STR
10312: PUSH
10313: LD_STRING );
10315: STR
10316: PPUSH
10317: CALL_OW 559
// end ;
10321: END
// every 0 0$1 do
10322: GO 10324
10324: DISABLE
// begin globalGameSaveCounter := 0 ;
10325: LD_ADDR_EXP 26
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10333: LD_STRING setGameSaveCounter(0)
10335: PPUSH
10336: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10340: LD_STRING initStreamRollete();
10342: PPUSH
10343: CALL_OW 559
// InitStreamMode ;
10347: CALL 11692 0 0
// DefineStreamItems ( false ) ;
10351: LD_INT 0
10353: PPUSH
10354: CALL 12156 0 1
// end ;
10358: END
// export function SOS_MapStart ( ) ; begin
10359: LD_INT 0
10361: PPUSH
// if streamModeActive then
10362: LD_EXP 27
10366: IFFALSE 10375
// DefineStreamItems ( true ) ;
10368: LD_INT 1
10370: PPUSH
10371: CALL 12156 0 1
// UpdateLuaVariables ( ) ;
10375: CALL 10392 0 0
// UpdateFactoryWaypoints ( ) ;
10379: CALL 25278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10383: CALL 25530 0 0
// end ;
10387: LD_VAR 0 1
10391: RET
// function UpdateLuaVariables ( ) ; begin
10392: LD_INT 0
10394: PPUSH
// if globalGameSaveCounter then
10395: LD_EXP 26
10399: IFFALSE 10433
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10401: LD_ADDR_EXP 26
10405: PUSH
10406: LD_EXP 26
10410: PPUSH
10411: CALL 72111 0 1
10415: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10416: LD_STRING setGameSaveCounter(
10418: PUSH
10419: LD_EXP 26
10423: STR
10424: PUSH
10425: LD_STRING )
10427: STR
10428: PPUSH
10429: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10433: LD_STRING setGameDifficulty(
10435: PUSH
10436: LD_OWVAR 67
10440: STR
10441: PUSH
10442: LD_STRING )
10444: STR
10445: PPUSH
10446: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10450: LD_STRING displayDifficulty(
10452: PUSH
10453: LD_OWVAR 67
10457: STR
10458: PUSH
10459: LD_STRING )
10461: STR
10462: PPUSH
10463: CALL_OW 559
// end ;
10467: LD_VAR 0 1
10471: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10472: LD_INT 0
10474: PPUSH
// if p2 = stream_mode then
10475: LD_VAR 0 2
10479: PUSH
10480: LD_INT 100
10482: EQUAL
10483: IFFALSE 11486
// begin if not StreamModeActive then
10485: LD_EXP 27
10489: NOT
10490: IFFALSE 10500
// StreamModeActive := true ;
10492: LD_ADDR_EXP 27
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 0 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 0
10507: EQUAL
10508: IFFALSE 10514
// InitStreamMode ;
10510: CALL 11692 0 0
// if p3 = 1 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 1
10521: EQUAL
10522: IFFALSE 10532
// sRocket := true ;
10524: LD_ADDR_EXP 32
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 2 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 2
10539: EQUAL
10540: IFFALSE 10550
// sSpeed := true ;
10542: LD_ADDR_EXP 31
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 3 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 3
10557: EQUAL
10558: IFFALSE 10568
// sEngine := true ;
10560: LD_ADDR_EXP 33
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 4 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 4
10575: EQUAL
10576: IFFALSE 10586
// sSpec := true ;
10578: LD_ADDR_EXP 30
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 5 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 5
10593: EQUAL
10594: IFFALSE 10604
// sLevel := true ;
10596: LD_ADDR_EXP 34
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 6 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 6
10611: EQUAL
10612: IFFALSE 10622
// sArmoury := true ;
10614: LD_ADDR_EXP 35
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 7 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 7
10629: EQUAL
10630: IFFALSE 10640
// sRadar := true ;
10632: LD_ADDR_EXP 36
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 8 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 8
10647: EQUAL
10648: IFFALSE 10658
// sBunker := true ;
10650: LD_ADDR_EXP 37
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 9 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 9
10665: EQUAL
10666: IFFALSE 10676
// sHack := true ;
10668: LD_ADDR_EXP 38
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 10 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 10
10683: EQUAL
10684: IFFALSE 10694
// sFire := true ;
10686: LD_ADDR_EXP 39
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 11 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 11
10701: EQUAL
10702: IFFALSE 10712
// sRefresh := true ;
10704: LD_ADDR_EXP 40
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// if p3 = 12 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 12
10719: EQUAL
10720: IFFALSE 10730
// sExp := true ;
10722: LD_ADDR_EXP 41
10726: PUSH
10727: LD_INT 1
10729: ST_TO_ADDR
// if p3 = 13 then
10730: LD_VAR 0 3
10734: PUSH
10735: LD_INT 13
10737: EQUAL
10738: IFFALSE 10748
// sDepot := true ;
10740: LD_ADDR_EXP 42
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// if p3 = 14 then
10748: LD_VAR 0 3
10752: PUSH
10753: LD_INT 14
10755: EQUAL
10756: IFFALSE 10766
// sFlag := true ;
10758: LD_ADDR_EXP 43
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// if p3 = 15 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 15
10773: EQUAL
10774: IFFALSE 10784
// sKamikadze := true ;
10776: LD_ADDR_EXP 51
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// if p3 = 16 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 16
10791: EQUAL
10792: IFFALSE 10802
// sTroll := true ;
10794: LD_ADDR_EXP 52
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// if p3 = 17 then
10802: LD_VAR 0 3
10806: PUSH
10807: LD_INT 17
10809: EQUAL
10810: IFFALSE 10820
// sSlow := true ;
10812: LD_ADDR_EXP 53
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// if p3 = 18 then
10820: LD_VAR 0 3
10824: PUSH
10825: LD_INT 18
10827: EQUAL
10828: IFFALSE 10838
// sLack := true ;
10830: LD_ADDR_EXP 54
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// if p3 = 19 then
10838: LD_VAR 0 3
10842: PUSH
10843: LD_INT 19
10845: EQUAL
10846: IFFALSE 10856
// sTank := true ;
10848: LD_ADDR_EXP 56
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// if p3 = 20 then
10856: LD_VAR 0 3
10860: PUSH
10861: LD_INT 20
10863: EQUAL
10864: IFFALSE 10874
// sRemote := true ;
10866: LD_ADDR_EXP 57
10870: PUSH
10871: LD_INT 1
10873: ST_TO_ADDR
// if p3 = 21 then
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 21
10881: EQUAL
10882: IFFALSE 10892
// sPowell := true ;
10884: LD_ADDR_EXP 58
10888: PUSH
10889: LD_INT 1
10891: ST_TO_ADDR
// if p3 = 22 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 22
10899: EQUAL
10900: IFFALSE 10910
// sTeleport := true ;
10902: LD_ADDR_EXP 61
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// if p3 = 23 then
10910: LD_VAR 0 3
10914: PUSH
10915: LD_INT 23
10917: EQUAL
10918: IFFALSE 10928
// sOilTower := true ;
10920: LD_ADDR_EXP 63
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// if p3 = 24 then
10928: LD_VAR 0 3
10932: PUSH
10933: LD_INT 24
10935: EQUAL
10936: IFFALSE 10946
// sShovel := true ;
10938: LD_ADDR_EXP 64
10942: PUSH
10943: LD_INT 1
10945: ST_TO_ADDR
// if p3 = 25 then
10946: LD_VAR 0 3
10950: PUSH
10951: LD_INT 25
10953: EQUAL
10954: IFFALSE 10964
// sSheik := true ;
10956: LD_ADDR_EXP 65
10960: PUSH
10961: LD_INT 1
10963: ST_TO_ADDR
// if p3 = 26 then
10964: LD_VAR 0 3
10968: PUSH
10969: LD_INT 26
10971: EQUAL
10972: IFFALSE 10982
// sEarthquake := true ;
10974: LD_ADDR_EXP 67
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if p3 = 27 then
10982: LD_VAR 0 3
10986: PUSH
10987: LD_INT 27
10989: EQUAL
10990: IFFALSE 11000
// sAI := true ;
10992: LD_ADDR_EXP 68
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// if p3 = 28 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 28
11007: EQUAL
11008: IFFALSE 11018
// sCargo := true ;
11010: LD_ADDR_EXP 71
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// if p3 = 29 then
11018: LD_VAR 0 3
11022: PUSH
11023: LD_INT 29
11025: EQUAL
11026: IFFALSE 11036
// sDLaser := true ;
11028: LD_ADDR_EXP 72
11032: PUSH
11033: LD_INT 1
11035: ST_TO_ADDR
// if p3 = 30 then
11036: LD_VAR 0 3
11040: PUSH
11041: LD_INT 30
11043: EQUAL
11044: IFFALSE 11054
// sExchange := true ;
11046: LD_ADDR_EXP 73
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// if p3 = 31 then
11054: LD_VAR 0 3
11058: PUSH
11059: LD_INT 31
11061: EQUAL
11062: IFFALSE 11072
// sFac := true ;
11064: LD_ADDR_EXP 74
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// if p3 = 32 then
11072: LD_VAR 0 3
11076: PUSH
11077: LD_INT 32
11079: EQUAL
11080: IFFALSE 11090
// sPower := true ;
11082: LD_ADDR_EXP 75
11086: PUSH
11087: LD_INT 1
11089: ST_TO_ADDR
// if p3 = 33 then
11090: LD_VAR 0 3
11094: PUSH
11095: LD_INT 33
11097: EQUAL
11098: IFFALSE 11108
// sRandom := true ;
11100: LD_ADDR_EXP 76
11104: PUSH
11105: LD_INT 1
11107: ST_TO_ADDR
// if p3 = 34 then
11108: LD_VAR 0 3
11112: PUSH
11113: LD_INT 34
11115: EQUAL
11116: IFFALSE 11126
// sShield := true ;
11118: LD_ADDR_EXP 77
11122: PUSH
11123: LD_INT 1
11125: ST_TO_ADDR
// if p3 = 35 then
11126: LD_VAR 0 3
11130: PUSH
11131: LD_INT 35
11133: EQUAL
11134: IFFALSE 11144
// sTime := true ;
11136: LD_ADDR_EXP 78
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// if p3 = 36 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 36
11151: EQUAL
11152: IFFALSE 11162
// sTools := true ;
11154: LD_ADDR_EXP 79
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// if p3 = 101 then
11162: LD_VAR 0 3
11166: PUSH
11167: LD_INT 101
11169: EQUAL
11170: IFFALSE 11180
// sSold := true ;
11172: LD_ADDR_EXP 44
11176: PUSH
11177: LD_INT 1
11179: ST_TO_ADDR
// if p3 = 102 then
11180: LD_VAR 0 3
11184: PUSH
11185: LD_INT 102
11187: EQUAL
11188: IFFALSE 11198
// sDiff := true ;
11190: LD_ADDR_EXP 45
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// if p3 = 103 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 103
11205: EQUAL
11206: IFFALSE 11216
// sFog := true ;
11208: LD_ADDR_EXP 48
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 104 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 104
11223: EQUAL
11224: IFFALSE 11234
// sReset := true ;
11226: LD_ADDR_EXP 49
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 105 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 105
11241: EQUAL
11242: IFFALSE 11252
// sSun := true ;
11244: LD_ADDR_EXP 50
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 106 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 106
11259: EQUAL
11260: IFFALSE 11270
// sTiger := true ;
11262: LD_ADDR_EXP 46
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 107 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 107
11277: EQUAL
11278: IFFALSE 11288
// sBomb := true ;
11280: LD_ADDR_EXP 47
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 108 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 108
11295: EQUAL
11296: IFFALSE 11306
// sWound := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 109 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 109
11313: EQUAL
11314: IFFALSE 11324
// sBetray := true ;
11316: LD_ADDR_EXP 59
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 110 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 110
11331: EQUAL
11332: IFFALSE 11342
// sContamin := true ;
11334: LD_ADDR_EXP 60
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 111 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 111
11349: EQUAL
11350: IFFALSE 11360
// sOil := true ;
11352: LD_ADDR_EXP 62
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 112 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 112
11367: EQUAL
11368: IFFALSE 11378
// sStu := true ;
11370: LD_ADDR_EXP 66
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 113 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 113
11385: EQUAL
11386: IFFALSE 11396
// sBazooka := true ;
11388: LD_ADDR_EXP 69
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 114 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 114
11403: EQUAL
11404: IFFALSE 11414
// sMortar := true ;
11406: LD_ADDR_EXP 70
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 115 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 115
11421: EQUAL
11422: IFFALSE 11432
// sRanger := true ;
11424: LD_ADDR_EXP 80
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 116 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 116
11439: EQUAL
11440: IFFALSE 11450
// sComputer := true ;
11442: LD_ADDR_EXP 81
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 117 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 117
11457: EQUAL
11458: IFFALSE 11468
// s30 := true ;
11460: LD_ADDR_EXP 82
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 118 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 118
11475: EQUAL
11476: IFFALSE 11486
// s60 := true ;
11478: LD_ADDR_EXP 83
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// end ; if p2 = hack_mode then
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 101
11493: EQUAL
11494: IFFALSE 11622
// begin case p3 of 1 :
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 1
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11516
11509: POP
// hHackUnlimitedResources ; 2 :
11510: CALL 23885 0 0
11514: GO 11622
11516: LD_INT 2
11518: DOUBLE
11519: EQUAL
11520: IFTRUE 11524
11522: GO 11531
11524: POP
// hHackSetLevel10 ; 3 :
11525: CALL 24018 0 0
11529: GO 11622
11531: LD_INT 3
11533: DOUBLE
11534: EQUAL
11535: IFTRUE 11539
11537: GO 11546
11539: POP
// hHackSetLevel10YourUnits ; 4 :
11540: CALL 24103 0 0
11544: GO 11622
11546: LD_INT 4
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11561
11554: POP
// hHackInvincible ; 5 :
11555: CALL 24551 0 0
11559: GO 11622
11561: LD_INT 5
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11569
11567: GO 11576
11569: POP
// hHackInvisible ; 6 :
11570: CALL 24662 0 0
11574: GO 11622
11576: LD_INT 6
11578: DOUBLE
11579: EQUAL
11580: IFTRUE 11584
11582: GO 11591
11584: POP
// hHackChangeYourSide ; 7 :
11585: CALL 24719 0 0
11589: GO 11622
11591: LD_INT 7
11593: DOUBLE
11594: EQUAL
11595: IFTRUE 11599
11597: GO 11606
11599: POP
// hHackChangeUnitSide ; 8 :
11600: CALL 24761 0 0
11604: GO 11622
11606: LD_INT 8
11608: DOUBLE
11609: EQUAL
11610: IFTRUE 11614
11612: GO 11621
11614: POP
// hHackFog ; end ;
11615: CALL 24862 0 0
11619: GO 11622
11621: POP
// end ; if p2 = game_save_mode then
11622: LD_VAR 0 2
11626: PUSH
11627: LD_INT 102
11629: EQUAL
11630: IFFALSE 11687
// begin if p3 = 1 then
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: EQUAL
11640: IFFALSE 11652
// globalGameSaveCounter := p4 ;
11642: LD_ADDR_EXP 26
11646: PUSH
11647: LD_VAR 0 4
11651: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 2
11659: EQUAL
11660: IFFALSE 11668
11662: PUSH
11663: LD_EXP 26
11667: AND
11668: IFFALSE 11687
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11670: LD_STRING setGameSaveCounter(
11672: PUSH
11673: LD_EXP 26
11677: STR
11678: PUSH
11679: LD_STRING )
11681: STR
11682: PPUSH
11683: CALL_OW 559
// end ; end ;
11687: LD_VAR 0 7
11691: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11692: LD_INT 0
11694: PPUSH
// streamModeActive := false ;
11695: LD_ADDR_EXP 27
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// normalCounter := 36 ;
11703: LD_ADDR_EXP 28
11707: PUSH
11708: LD_INT 36
11710: ST_TO_ADDR
// hardcoreCounter := 18 ;
11711: LD_ADDR_EXP 29
11715: PUSH
11716: LD_INT 18
11718: ST_TO_ADDR
// sRocket := false ;
11719: LD_ADDR_EXP 32
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sSpeed := false ;
11727: LD_ADDR_EXP 31
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sEngine := false ;
11735: LD_ADDR_EXP 33
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sSpec := false ;
11743: LD_ADDR_EXP 30
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sLevel := false ;
11751: LD_ADDR_EXP 34
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sArmoury := false ;
11759: LD_ADDR_EXP 35
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sRadar := false ;
11767: LD_ADDR_EXP 36
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sBunker := false ;
11775: LD_ADDR_EXP 37
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sHack := false ;
11783: LD_ADDR_EXP 38
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sFire := false ;
11791: LD_ADDR_EXP 39
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sRefresh := false ;
11799: LD_ADDR_EXP 40
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sExp := false ;
11807: LD_ADDR_EXP 41
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sDepot := false ;
11815: LD_ADDR_EXP 42
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sFlag := false ;
11823: LD_ADDR_EXP 43
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sKamikadze := false ;
11831: LD_ADDR_EXP 51
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sTroll := false ;
11839: LD_ADDR_EXP 52
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sSlow := false ;
11847: LD_ADDR_EXP 53
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sLack := false ;
11855: LD_ADDR_EXP 54
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sTank := false ;
11863: LD_ADDR_EXP 56
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sRemote := false ;
11871: LD_ADDR_EXP 57
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sPowell := false ;
11879: LD_ADDR_EXP 58
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sTeleport := false ;
11887: LD_ADDR_EXP 61
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sOilTower := false ;
11895: LD_ADDR_EXP 63
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sShovel := false ;
11903: LD_ADDR_EXP 64
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sSheik := false ;
11911: LD_ADDR_EXP 65
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sEarthquake := false ;
11919: LD_ADDR_EXP 67
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sAI := false ;
11927: LD_ADDR_EXP 68
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sCargo := false ;
11935: LD_ADDR_EXP 71
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sDLaser := false ;
11943: LD_ADDR_EXP 72
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sExchange := false ;
11951: LD_ADDR_EXP 73
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sFac := false ;
11959: LD_ADDR_EXP 74
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sPower := false ;
11967: LD_ADDR_EXP 75
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sRandom := false ;
11975: LD_ADDR_EXP 76
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sShield := false ;
11983: LD_ADDR_EXP 77
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sTime := false ;
11991: LD_ADDR_EXP 78
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sTools := false ;
11999: LD_ADDR_EXP 79
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sSold := false ;
12007: LD_ADDR_EXP 44
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sDiff := false ;
12015: LD_ADDR_EXP 45
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// sFog := false ;
12023: LD_ADDR_EXP 48
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// sReset := false ;
12031: LD_ADDR_EXP 49
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// sSun := false ;
12039: LD_ADDR_EXP 50
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// sTiger := false ;
12047: LD_ADDR_EXP 46
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// sBomb := false ;
12055: LD_ADDR_EXP 47
12059: PUSH
12060: LD_INT 0
12062: ST_TO_ADDR
// sWound := false ;
12063: LD_ADDR_EXP 55
12067: PUSH
12068: LD_INT 0
12070: ST_TO_ADDR
// sBetray := false ;
12071: LD_ADDR_EXP 59
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// sContamin := false ;
12079: LD_ADDR_EXP 60
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// sOil := false ;
12087: LD_ADDR_EXP 62
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// sStu := false ;
12095: LD_ADDR_EXP 66
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// sBazooka := false ;
12103: LD_ADDR_EXP 69
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// sMortar := false ;
12111: LD_ADDR_EXP 70
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sRanger := false ;
12119: LD_ADDR_EXP 80
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// sComputer := false ;
12127: LD_ADDR_EXP 81
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// s30 := false ;
12135: LD_ADDR_EXP 82
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// s60 := false ;
12143: LD_ADDR_EXP 83
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// end ;
12151: LD_VAR 0 1
12155: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
12164: PPUSH
// result := [ ] ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: EMPTY
12171: ST_TO_ADDR
// if campaign_id = 1 then
12172: LD_OWVAR 69
12176: PUSH
12177: LD_INT 1
12179: EQUAL
12180: IFFALSE 15346
// begin case mission_number of 1 :
12182: LD_OWVAR 70
12186: PUSH
12187: LD_INT 1
12189: DOUBLE
12190: EQUAL
12191: IFTRUE 12195
12193: GO 12271
12195: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: LD_INT 11
12209: PUSH
12210: LD_INT 12
12212: PUSH
12213: LD_INT 15
12215: PUSH
12216: LD_INT 16
12218: PUSH
12219: LD_INT 22
12221: PUSH
12222: LD_INT 23
12224: PUSH
12225: LD_INT 26
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 101
12241: PUSH
12242: LD_INT 102
12244: PUSH
12245: LD_INT 106
12247: PUSH
12248: LD_INT 116
12250: PUSH
12251: LD_INT 117
12253: PUSH
12254: LD_INT 118
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: ST_TO_ADDR
12269: GO 15344
12271: LD_INT 2
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12363
12279: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: LD_INT 4
12290: PUSH
12291: LD_INT 11
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 15
12299: PUSH
12300: LD_INT 16
12302: PUSH
12303: LD_INT 22
12305: PUSH
12306: LD_INT 23
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 101
12325: PUSH
12326: LD_INT 102
12328: PUSH
12329: LD_INT 105
12331: PUSH
12332: LD_INT 106
12334: PUSH
12335: LD_INT 108
12337: PUSH
12338: LD_INT 116
12340: PUSH
12341: LD_INT 117
12343: PUSH
12344: LD_INT 118
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: ST_TO_ADDR
12361: GO 15344
12363: LD_INT 3
12365: DOUBLE
12366: EQUAL
12367: IFTRUE 12371
12369: GO 12459
12371: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12372: LD_ADDR_VAR 0 2
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: LD_INT 4
12382: PUSH
12383: LD_INT 5
12385: PUSH
12386: LD_INT 11
12388: PUSH
12389: LD_INT 12
12391: PUSH
12392: LD_INT 15
12394: PUSH
12395: LD_INT 16
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_INT 26
12403: PUSH
12404: LD_INT 36
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 101
12421: PUSH
12422: LD_INT 102
12424: PUSH
12425: LD_INT 105
12427: PUSH
12428: LD_INT 106
12430: PUSH
12431: LD_INT 108
12433: PUSH
12434: LD_INT 116
12436: PUSH
12437: LD_INT 117
12439: PUSH
12440: LD_INT 118
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: ST_TO_ADDR
12457: GO 15344
12459: LD_INT 4
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12563
12467: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: LD_INT 4
12478: PUSH
12479: LD_INT 5
12481: PUSH
12482: LD_INT 8
12484: PUSH
12485: LD_INT 11
12487: PUSH
12488: LD_INT 12
12490: PUSH
12491: LD_INT 15
12493: PUSH
12494: LD_INT 16
12496: PUSH
12497: LD_INT 22
12499: PUSH
12500: LD_INT 23
12502: PUSH
12503: LD_INT 26
12505: PUSH
12506: LD_INT 36
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 101
12525: PUSH
12526: LD_INT 102
12528: PUSH
12529: LD_INT 105
12531: PUSH
12532: LD_INT 106
12534: PUSH
12535: LD_INT 108
12537: PUSH
12538: LD_INT 116
12540: PUSH
12541: LD_INT 117
12543: PUSH
12544: LD_INT 118
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: ST_TO_ADDR
12561: GO 15344
12563: LD_INT 5
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12683
12571: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12572: LD_ADDR_VAR 0 2
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 4
12582: PUSH
12583: LD_INT 5
12585: PUSH
12586: LD_INT 6
12588: PUSH
12589: LD_INT 8
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 15
12600: PUSH
12601: LD_INT 16
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 26
12615: PUSH
12616: LD_INT 36
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 101
12637: PUSH
12638: LD_INT 102
12640: PUSH
12641: LD_INT 105
12643: PUSH
12644: LD_INT 106
12646: PUSH
12647: LD_INT 108
12649: PUSH
12650: LD_INT 109
12652: PUSH
12653: LD_INT 112
12655: PUSH
12656: LD_INT 116
12658: PUSH
12659: LD_INT 117
12661: PUSH
12662: LD_INT 118
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: ST_TO_ADDR
12681: GO 15344
12683: LD_INT 6
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12823
12691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: LD_INT 2
12699: PUSH
12700: LD_INT 4
12702: PUSH
12703: LD_INT 5
12705: PUSH
12706: LD_INT 6
12708: PUSH
12709: LD_INT 8
12711: PUSH
12712: LD_INT 11
12714: PUSH
12715: LD_INT 12
12717: PUSH
12718: LD_INT 15
12720: PUSH
12721: LD_INT 16
12723: PUSH
12724: LD_INT 20
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 25
12738: PUSH
12739: LD_INT 26
12741: PUSH
12742: LD_INT 30
12744: PUSH
12745: LD_INT 31
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: LD_INT 36
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 101
12777: PUSH
12778: LD_INT 102
12780: PUSH
12781: LD_INT 105
12783: PUSH
12784: LD_INT 106
12786: PUSH
12787: LD_INT 108
12789: PUSH
12790: LD_INT 109
12792: PUSH
12793: LD_INT 112
12795: PUSH
12796: LD_INT 116
12798: PUSH
12799: LD_INT 117
12801: PUSH
12802: LD_INT 118
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
12821: GO 15344
12823: LD_INT 7
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12943
12831: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12832: LD_ADDR_VAR 0 2
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 4
12842: PUSH
12843: LD_INT 5
12845: PUSH
12846: LD_INT 7
12848: PUSH
12849: LD_INT 11
12851: PUSH
12852: LD_INT 12
12854: PUSH
12855: LD_INT 15
12857: PUSH
12858: LD_INT 16
12860: PUSH
12861: LD_INT 20
12863: PUSH
12864: LD_INT 21
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 23
12872: PUSH
12873: LD_INT 25
12875: PUSH
12876: LD_INT 26
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 101
12897: PUSH
12898: LD_INT 102
12900: PUSH
12901: LD_INT 103
12903: PUSH
12904: LD_INT 105
12906: PUSH
12907: LD_INT 106
12909: PUSH
12910: LD_INT 108
12912: PUSH
12913: LD_INT 112
12915: PUSH
12916: LD_INT 116
12918: PUSH
12919: LD_INT 117
12921: PUSH
12922: LD_INT 118
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: ST_TO_ADDR
12941: GO 15344
12943: LD_INT 8
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 13091
12951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: LD_INT 4
12962: PUSH
12963: LD_INT 5
12965: PUSH
12966: LD_INT 6
12968: PUSH
12969: LD_INT 7
12971: PUSH
12972: LD_INT 8
12974: PUSH
12975: LD_INT 11
12977: PUSH
12978: LD_INT 12
12980: PUSH
12981: LD_INT 15
12983: PUSH
12984: LD_INT 16
12986: PUSH
12987: LD_INT 20
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 30
13007: PUSH
13008: LD_INT 31
13010: PUSH
13011: LD_INT 32
13013: PUSH
13014: LD_INT 36
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 101
13041: PUSH
13042: LD_INT 102
13044: PUSH
13045: LD_INT 103
13047: PUSH
13048: LD_INT 105
13050: PUSH
13051: LD_INT 106
13053: PUSH
13054: LD_INT 108
13056: PUSH
13057: LD_INT 109
13059: PUSH
13060: LD_INT 112
13062: PUSH
13063: LD_INT 116
13065: PUSH
13066: LD_INT 117
13068: PUSH
13069: LD_INT 118
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: ST_TO_ADDR
13089: GO 15344
13091: LD_INT 9
13093: DOUBLE
13094: EQUAL
13095: IFTRUE 13099
13097: GO 13247
13099: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13100: LD_ADDR_VAR 0 2
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 4
13110: PUSH
13111: LD_INT 5
13113: PUSH
13114: LD_INT 6
13116: PUSH
13117: LD_INT 7
13119: PUSH
13120: LD_INT 8
13122: PUSH
13123: LD_INT 11
13125: PUSH
13126: LD_INT 12
13128: PUSH
13129: LD_INT 15
13131: PUSH
13132: LD_INT 16
13134: PUSH
13135: LD_INT 20
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 23
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 26
13152: PUSH
13153: LD_INT 28
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 31
13161: PUSH
13162: LD_INT 32
13164: PUSH
13165: LD_INT 36
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 101
13193: PUSH
13194: LD_INT 102
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 105
13202: PUSH
13203: LD_INT 106
13205: PUSH
13206: LD_INT 108
13208: PUSH
13209: LD_INT 109
13211: PUSH
13212: LD_INT 112
13214: PUSH
13215: LD_INT 114
13217: PUSH
13218: LD_INT 116
13220: PUSH
13221: LD_INT 117
13223: PUSH
13224: LD_INT 118
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: ST_TO_ADDR
13245: GO 15344
13247: LD_INT 10
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13451
13255: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: LD_INT 6
13272: PUSH
13273: LD_INT 7
13275: PUSH
13276: LD_INT 8
13278: PUSH
13279: LD_INT 9
13281: PUSH
13282: LD_INT 10
13284: PUSH
13285: LD_INT 11
13287: PUSH
13288: LD_INT 12
13290: PUSH
13291: LD_INT 13
13293: PUSH
13294: LD_INT 14
13296: PUSH
13297: LD_INT 15
13299: PUSH
13300: LD_INT 16
13302: PUSH
13303: LD_INT 17
13305: PUSH
13306: LD_INT 18
13308: PUSH
13309: LD_INT 19
13311: PUSH
13312: LD_INT 20
13314: PUSH
13315: LD_INT 21
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 24
13326: PUSH
13327: LD_INT 25
13329: PUSH
13330: LD_INT 26
13332: PUSH
13333: LD_INT 28
13335: PUSH
13336: LD_INT 30
13338: PUSH
13339: LD_INT 31
13341: PUSH
13342: LD_INT 32
13344: PUSH
13345: LD_INT 36
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 101
13381: PUSH
13382: LD_INT 102
13384: PUSH
13385: LD_INT 103
13387: PUSH
13388: LD_INT 104
13390: PUSH
13391: LD_INT 105
13393: PUSH
13394: LD_INT 106
13396: PUSH
13397: LD_INT 107
13399: PUSH
13400: LD_INT 108
13402: PUSH
13403: LD_INT 109
13405: PUSH
13406: LD_INT 110
13408: PUSH
13409: LD_INT 111
13411: PUSH
13412: LD_INT 112
13414: PUSH
13415: LD_INT 114
13417: PUSH
13418: LD_INT 116
13420: PUSH
13421: LD_INT 117
13423: PUSH
13424: LD_INT 118
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
13449: GO 15344
13451: LD_INT 11
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13663
13459: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13460: LD_ADDR_VAR 0 2
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 6
13479: PUSH
13480: LD_INT 7
13482: PUSH
13483: LD_INT 8
13485: PUSH
13486: LD_INT 9
13488: PUSH
13489: LD_INT 10
13491: PUSH
13492: LD_INT 11
13494: PUSH
13495: LD_INT 12
13497: PUSH
13498: LD_INT 13
13500: PUSH
13501: LD_INT 14
13503: PUSH
13504: LD_INT 15
13506: PUSH
13507: LD_INT 16
13509: PUSH
13510: LD_INT 17
13512: PUSH
13513: LD_INT 18
13515: PUSH
13516: LD_INT 19
13518: PUSH
13519: LD_INT 20
13521: PUSH
13522: LD_INT 21
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_INT 23
13530: PUSH
13531: LD_INT 24
13533: PUSH
13534: LD_INT 25
13536: PUSH
13537: LD_INT 26
13539: PUSH
13540: LD_INT 28
13542: PUSH
13543: LD_INT 30
13545: PUSH
13546: LD_INT 31
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 34
13554: PUSH
13555: LD_INT 36
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 101
13593: PUSH
13594: LD_INT 102
13596: PUSH
13597: LD_INT 103
13599: PUSH
13600: LD_INT 104
13602: PUSH
13603: LD_INT 105
13605: PUSH
13606: LD_INT 106
13608: PUSH
13609: LD_INT 107
13611: PUSH
13612: LD_INT 108
13614: PUSH
13615: LD_INT 109
13617: PUSH
13618: LD_INT 110
13620: PUSH
13621: LD_INT 111
13623: PUSH
13624: LD_INT 112
13626: PUSH
13627: LD_INT 114
13629: PUSH
13630: LD_INT 116
13632: PUSH
13633: LD_INT 117
13635: PUSH
13636: LD_INT 118
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 15344
13663: LD_INT 12
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13891
13671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: LD_INT 6
13694: PUSH
13695: LD_INT 7
13697: PUSH
13698: LD_INT 8
13700: PUSH
13701: LD_INT 9
13703: PUSH
13704: LD_INT 10
13706: PUSH
13707: LD_INT 11
13709: PUSH
13710: LD_INT 12
13712: PUSH
13713: LD_INT 13
13715: PUSH
13716: LD_INT 14
13718: PUSH
13719: LD_INT 15
13721: PUSH
13722: LD_INT 16
13724: PUSH
13725: LD_INT 17
13727: PUSH
13728: LD_INT 18
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: LD_INT 20
13736: PUSH
13737: LD_INT 21
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_INT 23
13745: PUSH
13746: LD_INT 24
13748: PUSH
13749: LD_INT 25
13751: PUSH
13752: LD_INT 26
13754: PUSH
13755: LD_INT 27
13757: PUSH
13758: LD_INT 28
13760: PUSH
13761: LD_INT 30
13763: PUSH
13764: LD_INT 31
13766: PUSH
13767: LD_INT 32
13769: PUSH
13770: LD_INT 33
13772: PUSH
13773: LD_INT 34
13775: PUSH
13776: LD_INT 36
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 101
13817: PUSH
13818: LD_INT 102
13820: PUSH
13821: LD_INT 103
13823: PUSH
13824: LD_INT 104
13826: PUSH
13827: LD_INT 105
13829: PUSH
13830: LD_INT 106
13832: PUSH
13833: LD_INT 107
13835: PUSH
13836: LD_INT 108
13838: PUSH
13839: LD_INT 109
13841: PUSH
13842: LD_INT 110
13844: PUSH
13845: LD_INT 111
13847: PUSH
13848: LD_INT 112
13850: PUSH
13851: LD_INT 113
13853: PUSH
13854: LD_INT 114
13856: PUSH
13857: LD_INT 116
13859: PUSH
13860: LD_INT 117
13862: PUSH
13863: LD_INT 118
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: ST_TO_ADDR
13889: GO 15344
13891: LD_INT 13
13893: DOUBLE
13894: EQUAL
13895: IFTRUE 13899
13897: GO 14107
13899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13900: LD_ADDR_VAR 0 2
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: LD_INT 9
13925: PUSH
13926: LD_INT 10
13928: PUSH
13929: LD_INT 11
13931: PUSH
13932: LD_INT 12
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 17
13946: PUSH
13947: LD_INT 18
13949: PUSH
13950: LD_INT 19
13952: PUSH
13953: LD_INT 20
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: LD_INT 24
13967: PUSH
13968: LD_INT 25
13970: PUSH
13971: LD_INT 26
13973: PUSH
13974: LD_INT 27
13976: PUSH
13977: LD_INT 28
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 31
13985: PUSH
13986: LD_INT 32
13988: PUSH
13989: LD_INT 33
13991: PUSH
13992: LD_INT 34
13994: PUSH
13995: LD_INT 36
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 101
14033: PUSH
14034: LD_INT 102
14036: PUSH
14037: LD_INT 103
14039: PUSH
14040: LD_INT 104
14042: PUSH
14043: LD_INT 105
14045: PUSH
14046: LD_INT 106
14048: PUSH
14049: LD_INT 107
14051: PUSH
14052: LD_INT 108
14054: PUSH
14055: LD_INT 109
14057: PUSH
14058: LD_INT 110
14060: PUSH
14061: LD_INT 111
14063: PUSH
14064: LD_INT 112
14066: PUSH
14067: LD_INT 113
14069: PUSH
14070: LD_INT 114
14072: PUSH
14073: LD_INT 116
14075: PUSH
14076: LD_INT 117
14078: PUSH
14079: LD_INT 118
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: ST_TO_ADDR
14105: GO 15344
14107: LD_INT 14
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14339
14115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 1
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: LD_INT 6
14138: PUSH
14139: LD_INT 7
14141: PUSH
14142: LD_INT 8
14144: PUSH
14145: LD_INT 9
14147: PUSH
14148: LD_INT 10
14150: PUSH
14151: LD_INT 11
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 13
14159: PUSH
14160: LD_INT 14
14162: PUSH
14163: LD_INT 15
14165: PUSH
14166: LD_INT 16
14168: PUSH
14169: LD_INT 17
14171: PUSH
14172: LD_INT 18
14174: PUSH
14175: LD_INT 19
14177: PUSH
14178: LD_INT 20
14180: PUSH
14181: LD_INT 21
14183: PUSH
14184: LD_INT 22
14186: PUSH
14187: LD_INT 23
14189: PUSH
14190: LD_INT 24
14192: PUSH
14193: LD_INT 25
14195: PUSH
14196: LD_INT 26
14198: PUSH
14199: LD_INT 27
14201: PUSH
14202: LD_INT 28
14204: PUSH
14205: LD_INT 29
14207: PUSH
14208: LD_INT 30
14210: PUSH
14211: LD_INT 31
14213: PUSH
14214: LD_INT 32
14216: PUSH
14217: LD_INT 33
14219: PUSH
14220: LD_INT 34
14222: PUSH
14223: LD_INT 36
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 101
14265: PUSH
14266: LD_INT 102
14268: PUSH
14269: LD_INT 103
14271: PUSH
14272: LD_INT 104
14274: PUSH
14275: LD_INT 105
14277: PUSH
14278: LD_INT 106
14280: PUSH
14281: LD_INT 107
14283: PUSH
14284: LD_INT 108
14286: PUSH
14287: LD_INT 109
14289: PUSH
14290: LD_INT 110
14292: PUSH
14293: LD_INT 111
14295: PUSH
14296: LD_INT 112
14298: PUSH
14299: LD_INT 113
14301: PUSH
14302: LD_INT 114
14304: PUSH
14305: LD_INT 116
14307: PUSH
14308: LD_INT 117
14310: PUSH
14311: LD_INT 118
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: ST_TO_ADDR
14337: GO 15344
14339: LD_INT 15
14341: DOUBLE
14342: EQUAL
14343: IFTRUE 14347
14345: GO 14571
14347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: LD_INT 4
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: LD_INT 7
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 9
14379: PUSH
14380: LD_INT 10
14382: PUSH
14383: LD_INT 11
14385: PUSH
14386: LD_INT 12
14388: PUSH
14389: LD_INT 13
14391: PUSH
14392: LD_INT 14
14394: PUSH
14395: LD_INT 15
14397: PUSH
14398: LD_INT 16
14400: PUSH
14401: LD_INT 17
14403: PUSH
14404: LD_INT 18
14406: PUSH
14407: LD_INT 19
14409: PUSH
14410: LD_INT 20
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_INT 23
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 26
14430: PUSH
14431: LD_INT 27
14433: PUSH
14434: LD_INT 28
14436: PUSH
14437: LD_INT 29
14439: PUSH
14440: LD_INT 30
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: LD_INT 32
14448: PUSH
14449: LD_INT 33
14451: PUSH
14452: LD_INT 34
14454: PUSH
14455: LD_INT 36
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 101
14497: PUSH
14498: LD_INT 102
14500: PUSH
14501: LD_INT 103
14503: PUSH
14504: LD_INT 104
14506: PUSH
14507: LD_INT 105
14509: PUSH
14510: LD_INT 106
14512: PUSH
14513: LD_INT 107
14515: PUSH
14516: LD_INT 108
14518: PUSH
14519: LD_INT 109
14521: PUSH
14522: LD_INT 110
14524: PUSH
14525: LD_INT 111
14527: PUSH
14528: LD_INT 112
14530: PUSH
14531: LD_INT 113
14533: PUSH
14534: LD_INT 114
14536: PUSH
14537: LD_INT 116
14539: PUSH
14540: LD_INT 117
14542: PUSH
14543: LD_INT 118
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
14569: GO 15344
14571: LD_INT 16
14573: DOUBLE
14574: EQUAL
14575: IFTRUE 14579
14577: GO 14715
14579: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 7
14596: PUSH
14597: LD_INT 11
14599: PUSH
14600: LD_INT 12
14602: PUSH
14603: LD_INT 15
14605: PUSH
14606: LD_INT 16
14608: PUSH
14609: LD_INT 20
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 22
14617: PUSH
14618: LD_INT 23
14620: PUSH
14621: LD_INT 25
14623: PUSH
14624: LD_INT 26
14626: PUSH
14627: LD_INT 30
14629: PUSH
14630: LD_INT 31
14632: PUSH
14633: LD_INT 32
14635: PUSH
14636: LD_INT 33
14638: PUSH
14639: LD_INT 34
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 101
14665: PUSH
14666: LD_INT 102
14668: PUSH
14669: LD_INT 103
14671: PUSH
14672: LD_INT 106
14674: PUSH
14675: LD_INT 108
14677: PUSH
14678: LD_INT 112
14680: PUSH
14681: LD_INT 113
14683: PUSH
14684: LD_INT 114
14686: PUSH
14687: LD_INT 116
14689: PUSH
14690: LD_INT 117
14692: PUSH
14693: LD_INT 118
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: ST_TO_ADDR
14713: GO 15344
14715: LD_INT 17
14717: DOUBLE
14718: EQUAL
14719: IFTRUE 14723
14721: GO 14947
14723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14724: LD_ADDR_VAR 0 2
14728: PUSH
14729: LD_INT 1
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 4
14740: PUSH
14741: LD_INT 5
14743: PUSH
14744: LD_INT 6
14746: PUSH
14747: LD_INT 7
14749: PUSH
14750: LD_INT 8
14752: PUSH
14753: LD_INT 9
14755: PUSH
14756: LD_INT 10
14758: PUSH
14759: LD_INT 11
14761: PUSH
14762: LD_INT 12
14764: PUSH
14765: LD_INT 13
14767: PUSH
14768: LD_INT 14
14770: PUSH
14771: LD_INT 15
14773: PUSH
14774: LD_INT 16
14776: PUSH
14777: LD_INT 17
14779: PUSH
14780: LD_INT 18
14782: PUSH
14783: LD_INT 19
14785: PUSH
14786: LD_INT 20
14788: PUSH
14789: LD_INT 21
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_INT 23
14797: PUSH
14798: LD_INT 24
14800: PUSH
14801: LD_INT 25
14803: PUSH
14804: LD_INT 26
14806: PUSH
14807: LD_INT 27
14809: PUSH
14810: LD_INT 28
14812: PUSH
14813: LD_INT 29
14815: PUSH
14816: LD_INT 30
14818: PUSH
14819: LD_INT 31
14821: PUSH
14822: LD_INT 32
14824: PUSH
14825: LD_INT 33
14827: PUSH
14828: LD_INT 34
14830: PUSH
14831: LD_INT 36
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 101
14873: PUSH
14874: LD_INT 102
14876: PUSH
14877: LD_INT 103
14879: PUSH
14880: LD_INT 104
14882: PUSH
14883: LD_INT 105
14885: PUSH
14886: LD_INT 106
14888: PUSH
14889: LD_INT 107
14891: PUSH
14892: LD_INT 108
14894: PUSH
14895: LD_INT 109
14897: PUSH
14898: LD_INT 110
14900: PUSH
14901: LD_INT 111
14903: PUSH
14904: LD_INT 112
14906: PUSH
14907: LD_INT 113
14909: PUSH
14910: LD_INT 114
14912: PUSH
14913: LD_INT 116
14915: PUSH
14916: LD_INT 117
14918: PUSH
14919: LD_INT 118
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: ST_TO_ADDR
14945: GO 15344
14947: LD_INT 18
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 15103
14955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: LD_INT 7
14972: PUSH
14973: LD_INT 11
14975: PUSH
14976: LD_INT 12
14978: PUSH
14979: LD_INT 15
14981: PUSH
14982: LD_INT 16
14984: PUSH
14985: LD_INT 20
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 23
14996: PUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 26
15002: PUSH
15003: LD_INT 30
15005: PUSH
15006: LD_INT 31
15008: PUSH
15009: LD_INT 32
15011: PUSH
15012: LD_INT 33
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 35
15020: PUSH
15021: LD_INT 36
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 101
15049: PUSH
15050: LD_INT 102
15052: PUSH
15053: LD_INT 103
15055: PUSH
15056: LD_INT 106
15058: PUSH
15059: LD_INT 108
15061: PUSH
15062: LD_INT 112
15064: PUSH
15065: LD_INT 113
15067: PUSH
15068: LD_INT 114
15070: PUSH
15071: LD_INT 115
15073: PUSH
15074: LD_INT 116
15076: PUSH
15077: LD_INT 117
15079: PUSH
15080: LD_INT 118
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: ST_TO_ADDR
15101: GO 15344
15103: LD_INT 19
15105: DOUBLE
15106: EQUAL
15107: IFTRUE 15111
15109: GO 15343
15111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: LD_INT 4
15128: PUSH
15129: LD_INT 5
15131: PUSH
15132: LD_INT 6
15134: PUSH
15135: LD_INT 7
15137: PUSH
15138: LD_INT 8
15140: PUSH
15141: LD_INT 9
15143: PUSH
15144: LD_INT 10
15146: PUSH
15147: LD_INT 11
15149: PUSH
15150: LD_INT 12
15152: PUSH
15153: LD_INT 13
15155: PUSH
15156: LD_INT 14
15158: PUSH
15159: LD_INT 15
15161: PUSH
15162: LD_INT 16
15164: PUSH
15165: LD_INT 17
15167: PUSH
15168: LD_INT 18
15170: PUSH
15171: LD_INT 19
15173: PUSH
15174: LD_INT 20
15176: PUSH
15177: LD_INT 21
15179: PUSH
15180: LD_INT 22
15182: PUSH
15183: LD_INT 23
15185: PUSH
15186: LD_INT 24
15188: PUSH
15189: LD_INT 25
15191: PUSH
15192: LD_INT 26
15194: PUSH
15195: LD_INT 27
15197: PUSH
15198: LD_INT 28
15200: PUSH
15201: LD_INT 29
15203: PUSH
15204: LD_INT 30
15206: PUSH
15207: LD_INT 31
15209: PUSH
15210: LD_INT 32
15212: PUSH
15213: LD_INT 33
15215: PUSH
15216: LD_INT 34
15218: PUSH
15219: LD_INT 35
15221: PUSH
15222: LD_INT 36
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 113
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: LD_INT 115
15307: PUSH
15308: LD_INT 116
15310: PUSH
15311: LD_INT 117
15313: PUSH
15314: LD_INT 118
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: ST_TO_ADDR
15341: GO 15344
15343: POP
// end else
15344: GO 15575
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: LD_INT 2
15356: PUSH
15357: LD_INT 3
15359: PUSH
15360: LD_INT 4
15362: PUSH
15363: LD_INT 5
15365: PUSH
15366: LD_INT 6
15368: PUSH
15369: LD_INT 7
15371: PUSH
15372: LD_INT 8
15374: PUSH
15375: LD_INT 9
15377: PUSH
15378: LD_INT 10
15380: PUSH
15381: LD_INT 11
15383: PUSH
15384: LD_INT 12
15386: PUSH
15387: LD_INT 13
15389: PUSH
15390: LD_INT 14
15392: PUSH
15393: LD_INT 15
15395: PUSH
15396: LD_INT 16
15398: PUSH
15399: LD_INT 17
15401: PUSH
15402: LD_INT 18
15404: PUSH
15405: LD_INT 19
15407: PUSH
15408: LD_INT 20
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_INT 23
15419: PUSH
15420: LD_INT 24
15422: PUSH
15423: LD_INT 25
15425: PUSH
15426: LD_INT 26
15428: PUSH
15429: LD_INT 27
15431: PUSH
15432: LD_INT 28
15434: PUSH
15435: LD_INT 29
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 31
15443: PUSH
15444: LD_INT 32
15446: PUSH
15447: LD_INT 33
15449: PUSH
15450: LD_INT 34
15452: PUSH
15453: LD_INT 35
15455: PUSH
15456: LD_INT 36
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 101
15499: PUSH
15500: LD_INT 102
15502: PUSH
15503: LD_INT 103
15505: PUSH
15506: LD_INT 104
15508: PUSH
15509: LD_INT 105
15511: PUSH
15512: LD_INT 106
15514: PUSH
15515: LD_INT 107
15517: PUSH
15518: LD_INT 108
15520: PUSH
15521: LD_INT 109
15523: PUSH
15524: LD_INT 110
15526: PUSH
15527: LD_INT 111
15529: PUSH
15530: LD_INT 112
15532: PUSH
15533: LD_INT 113
15535: PUSH
15536: LD_INT 114
15538: PUSH
15539: LD_INT 115
15541: PUSH
15542: LD_INT 116
15544: PUSH
15545: LD_INT 117
15547: PUSH
15548: LD_INT 118
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: ST_TO_ADDR
// if result then
15575: LD_VAR 0 2
15579: IFFALSE 16365
// begin normal :=  ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_STRING 
15588: ST_TO_ADDR
// hardcore :=  ;
15589: LD_ADDR_VAR 0 6
15593: PUSH
15594: LD_STRING 
15596: ST_TO_ADDR
// active :=  ;
15597: LD_ADDR_VAR 0 7
15601: PUSH
15602: LD_STRING 
15604: ST_TO_ADDR
// for i = 1 to normalCounter do
15605: LD_ADDR_VAR 0 8
15609: PUSH
15610: DOUBLE
15611: LD_INT 1
15613: DEC
15614: ST_TO_ADDR
15615: LD_EXP 28
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15722
// begin tmp := 0 ;
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: LD_STRING 0
15630: ST_TO_ADDR
// if result [ 1 ] then
15631: LD_VAR 0 2
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: IFFALSE 15704
// if result [ 1 ] [ 1 ] = i then
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PUSH
15654: LD_VAR 0 8
15658: EQUAL
15659: IFFALSE 15704
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15661: LD_ADDR_VAR 0 2
15665: PUSH
15666: LD_VAR 0 2
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: LD_VAR 0 2
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 3
15690: PPUSH
15691: CALL_OW 1
15695: ST_TO_ADDR
// tmp := 1 ;
15696: LD_ADDR_VAR 0 3
15700: PUSH
15701: LD_STRING 1
15703: ST_TO_ADDR
// end ; normal := normal & tmp ;
15704: LD_ADDR_VAR 0 5
15708: PUSH
15709: LD_VAR 0 5
15713: PUSH
15714: LD_VAR 0 3
15718: STR
15719: ST_TO_ADDR
// end ;
15720: GO 15620
15722: POP
15723: POP
// for i = 1 to hardcoreCounter do
15724: LD_ADDR_VAR 0 8
15728: PUSH
15729: DOUBLE
15730: LD_INT 1
15732: DEC
15733: ST_TO_ADDR
15734: LD_EXP 29
15738: PUSH
15739: FOR_TO
15740: IFFALSE 15845
// begin tmp := 0 ;
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_STRING 0
15749: ST_TO_ADDR
// if result [ 2 ] then
15750: LD_VAR 0 2
15754: PUSH
15755: LD_INT 2
15757: ARRAY
15758: IFFALSE 15827
// if result [ 2 ] [ 1 ] = 100 + i then
15760: LD_VAR 0 2
15764: PUSH
15765: LD_INT 2
15767: ARRAY
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PUSH
15773: LD_INT 100
15775: PUSH
15776: LD_VAR 0 8
15780: PLUS
15781: EQUAL
15782: IFFALSE 15827
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_INT 2
15796: PPUSH
15797: LD_VAR 0 2
15801: PUSH
15802: LD_INT 2
15804: ARRAY
15805: PPUSH
15806: LD_INT 1
15808: PPUSH
15809: CALL_OW 3
15813: PPUSH
15814: CALL_OW 1
15818: ST_TO_ADDR
// tmp := 1 ;
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_STRING 1
15826: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15827: LD_ADDR_VAR 0 6
15831: PUSH
15832: LD_VAR 0 6
15836: PUSH
15837: LD_VAR 0 3
15841: STR
15842: ST_TO_ADDR
// end ;
15843: GO 15739
15845: POP
15846: POP
// if isGameLoad then
15847: LD_VAR 0 1
15851: IFFALSE 16326
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15853: LD_ADDR_VAR 0 4
15857: PUSH
15858: LD_EXP 32
15862: PUSH
15863: LD_EXP 31
15867: PUSH
15868: LD_EXP 33
15872: PUSH
15873: LD_EXP 30
15877: PUSH
15878: LD_EXP 34
15882: PUSH
15883: LD_EXP 35
15887: PUSH
15888: LD_EXP 36
15892: PUSH
15893: LD_EXP 37
15897: PUSH
15898: LD_EXP 38
15902: PUSH
15903: LD_EXP 39
15907: PUSH
15908: LD_EXP 40
15912: PUSH
15913: LD_EXP 41
15917: PUSH
15918: LD_EXP 42
15922: PUSH
15923: LD_EXP 43
15927: PUSH
15928: LD_EXP 51
15932: PUSH
15933: LD_EXP 52
15937: PUSH
15938: LD_EXP 53
15942: PUSH
15943: LD_EXP 54
15947: PUSH
15948: LD_EXP 56
15952: PUSH
15953: LD_EXP 57
15957: PUSH
15958: LD_EXP 58
15962: PUSH
15963: LD_EXP 61
15967: PUSH
15968: LD_EXP 63
15972: PUSH
15973: LD_EXP 64
15977: PUSH
15978: LD_EXP 65
15982: PUSH
15983: LD_EXP 67
15987: PUSH
15988: LD_EXP 68
15992: PUSH
15993: LD_EXP 71
15997: PUSH
15998: LD_EXP 72
16002: PUSH
16003: LD_EXP 73
16007: PUSH
16008: LD_EXP 74
16012: PUSH
16013: LD_EXP 75
16017: PUSH
16018: LD_EXP 76
16022: PUSH
16023: LD_EXP 77
16027: PUSH
16028: LD_EXP 78
16032: PUSH
16033: LD_EXP 79
16037: PUSH
16038: LD_EXP 44
16042: PUSH
16043: LD_EXP 45
16047: PUSH
16048: LD_EXP 48
16052: PUSH
16053: LD_EXP 49
16057: PUSH
16058: LD_EXP 50
16062: PUSH
16063: LD_EXP 46
16067: PUSH
16068: LD_EXP 47
16072: PUSH
16073: LD_EXP 55
16077: PUSH
16078: LD_EXP 59
16082: PUSH
16083: LD_EXP 60
16087: PUSH
16088: LD_EXP 62
16092: PUSH
16093: LD_EXP 66
16097: PUSH
16098: LD_EXP 69
16102: PUSH
16103: LD_EXP 70
16107: PUSH
16108: LD_EXP 80
16112: PUSH
16113: LD_EXP 81
16117: PUSH
16118: LD_EXP 82
16122: PUSH
16123: LD_EXP 83
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
// tmp :=  ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_STRING 
16191: ST_TO_ADDR
// for i = 1 to normalCounter do
16192: LD_ADDR_VAR 0 8
16196: PUSH
16197: DOUBLE
16198: LD_INT 1
16200: DEC
16201: ST_TO_ADDR
16202: LD_EXP 28
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16244
// begin if flags [ i ] then
16210: LD_VAR 0 4
16214: PUSH
16215: LD_VAR 0 8
16219: ARRAY
16220: IFFALSE 16242
// tmp := tmp & i & ; ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_VAR 0 8
16236: STR
16237: PUSH
16238: LD_STRING ;
16240: STR
16241: ST_TO_ADDR
// end ;
16242: GO 16207
16244: POP
16245: POP
// for i = 1 to hardcoreCounter do
16246: LD_ADDR_VAR 0 8
16250: PUSH
16251: DOUBLE
16252: LD_INT 1
16254: DEC
16255: ST_TO_ADDR
16256: LD_EXP 29
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16308
// begin if flags [ normalCounter + i ] then
16264: LD_VAR 0 4
16268: PUSH
16269: LD_EXP 28
16273: PUSH
16274: LD_VAR 0 8
16278: PLUS
16279: ARRAY
16280: IFFALSE 16306
// tmp := tmp & ( 100 + i ) & ; ;
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 100
16294: PUSH
16295: LD_VAR 0 8
16299: PLUS
16300: STR
16301: PUSH
16302: LD_STRING ;
16304: STR
16305: ST_TO_ADDR
// end ;
16306: GO 16261
16308: POP
16309: POP
// if tmp then
16310: LD_VAR 0 3
16314: IFFALSE 16326
// active := tmp ;
16316: LD_ADDR_VAR 0 7
16320: PUSH
16321: LD_VAR 0 3
16325: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16326: LD_STRING getStreamItemsFromMission("
16328: PUSH
16329: LD_VAR 0 5
16333: STR
16334: PUSH
16335: LD_STRING ","
16337: STR
16338: PUSH
16339: LD_VAR 0 6
16343: STR
16344: PUSH
16345: LD_STRING ","
16347: STR
16348: PUSH
16349: LD_VAR 0 7
16353: STR
16354: PUSH
16355: LD_STRING ")
16357: STR
16358: PPUSH
16359: CALL_OW 559
// end else
16363: GO 16372
// ToLua ( getStreamItemsFromMission("","","") ) ;
16365: LD_STRING getStreamItemsFromMission("","","")
16367: PPUSH
16368: CALL_OW 559
// end ;
16372: LD_VAR 0 2
16376: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16377: LD_EXP 27
16381: IFFALSE 16389
16383: PUSH
16384: LD_EXP 32
16388: AND
16389: IFFALSE 16513
16391: GO 16393
16393: DISABLE
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
// begin enable ;
16398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_OWVAR 2
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 34
16421: PUSH
16422: LD_INT 7
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 34
16431: PUSH
16432: LD_INT 45
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 34
16441: PUSH
16442: LD_INT 28
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 34
16451: PUSH
16452: LD_INT 47
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: ST_TO_ADDR
// if not tmp then
16475: LD_VAR 0 2
16479: NOT
16480: IFFALSE 16484
// exit ;
16482: GO 16513
// for i in tmp do
16484: LD_ADDR_VAR 0 1
16488: PUSH
16489: LD_VAR 0 2
16493: PUSH
16494: FOR_IN
16495: IFFALSE 16511
// begin SetLives ( i , 0 ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_INT 0
16504: PPUSH
16505: CALL_OW 234
// end ;
16509: GO 16494
16511: POP
16512: POP
// end ;
16513: PPOPN 2
16515: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16516: LD_EXP 27
16520: IFFALSE 16528
16522: PUSH
16523: LD_EXP 33
16527: AND
16528: IFFALSE 16612
16530: GO 16532
16532: DISABLE
16533: LD_INT 0
16535: PPUSH
16536: PPUSH
// begin enable ;
16537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16538: LD_ADDR_VAR 0 2
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_OWVAR 2
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 32
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 2
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16612
// for i in tmp do
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_VAR 0 2
16592: PUSH
16593: FOR_IN
16594: IFFALSE 16610
// begin SetLives ( i , 0 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 0
16603: PPUSH
16604: CALL_OW 234
// end ;
16608: GO 16593
16610: POP
16611: POP
// end ;
16612: PPOPN 2
16614: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16615: LD_EXP 27
16619: IFFALSE 16627
16621: PUSH
16622: LD_EXP 30
16626: AND
16627: IFFALSE 16720
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
// begin enable ;
16635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_INT 22
16643: PUSH
16644: LD_OWVAR 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 25
16658: PUSH
16659: LD_INT 5
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 25
16668: PUSH
16669: LD_INT 9
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 25
16678: PUSH
16679: LD_INT 8
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PPUSH
16696: CALL_OW 69
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16718
// begin SetClass ( i , 1 ) ;
16704: LD_VAR 0 1
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 336
// end ;
16716: GO 16701
16718: POP
16719: POP
// end ;
16720: PPOPN 1
16722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16723: LD_EXP 27
16727: IFFALSE 16735
16729: PUSH
16730: LD_EXP 31
16734: AND
16735: IFFALSE 16747
16737: PUSH
16738: LD_OWVAR 65
16742: PUSH
16743: LD_INT 7
16745: LESS
16746: AND
16747: IFFALSE 16761
16749: GO 16751
16751: DISABLE
// begin enable ;
16752: ENABLE
// game_speed := 7 ;
16753: LD_ADDR_OWVAR 65
16757: PUSH
16758: LD_INT 7
16760: ST_TO_ADDR
// end ;
16761: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16762: LD_EXP 27
16766: IFFALSE 16774
16768: PUSH
16769: LD_EXP 34
16773: AND
16774: IFFALSE 16976
16776: GO 16778
16778: DISABLE
16779: LD_INT 0
16781: PPUSH
16782: PPUSH
16783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16784: LD_ADDR_VAR 0 3
16788: PUSH
16789: LD_INT 81
16791: PUSH
16792: LD_OWVAR 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 69
16819: ST_TO_ADDR
// if not tmp then
16820: LD_VAR 0 3
16824: NOT
16825: IFFALSE 16829
// exit ;
16827: GO 16976
// if tmp > 5 then
16829: LD_VAR 0 3
16833: PUSH
16834: LD_INT 5
16836: GREATER
16837: IFFALSE 16849
// k := 5 else
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_INT 5
16846: ST_TO_ADDR
16847: GO 16859
// k := tmp ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: LD_VAR 0 3
16858: ST_TO_ADDR
// for i := 1 to k do
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: DOUBLE
16865: LD_INT 1
16867: DEC
16868: ST_TO_ADDR
16869: LD_VAR 0 2
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16877: LD_VAR 0 3
16881: PUSH
16882: LD_VAR 0 1
16886: ARRAY
16887: PPUSH
16888: LD_VAR 0 1
16892: PUSH
16893: LD_INT 4
16895: MOD
16896: PUSH
16897: LD_INT 1
16899: PLUS
16900: PPUSH
16901: CALL_OW 259
16905: PUSH
16906: LD_INT 10
16908: LESS
16909: IFFALSE 16972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16911: LD_VAR 0 3
16915: PUSH
16916: LD_VAR 0 1
16920: ARRAY
16921: PPUSH
16922: LD_VAR 0 1
16926: PUSH
16927: LD_INT 4
16929: MOD
16930: PUSH
16931: LD_INT 1
16933: PLUS
16934: PPUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_VAR 0 1
16944: ARRAY
16945: PPUSH
16946: LD_VAR 0 1
16950: PUSH
16951: LD_INT 4
16953: MOD
16954: PUSH
16955: LD_INT 1
16957: PLUS
16958: PPUSH
16959: CALL_OW 259
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: PPUSH
16968: CALL_OW 237
16972: GO 16874
16974: POP
16975: POP
// end ;
16976: PPOPN 3
16978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16979: LD_EXP 27
16983: IFFALSE 16991
16985: PUSH
16986: LD_EXP 35
16990: AND
16991: IFFALSE 17011
16993: GO 16995
16995: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16996: LD_INT 4
16998: PPUSH
16999: LD_OWVAR 2
17003: PPUSH
17004: LD_INT 0
17006: PPUSH
17007: CALL_OW 324
17011: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17012: LD_EXP 27
17016: IFFALSE 17024
17018: PUSH
17019: LD_EXP 64
17023: AND
17024: IFFALSE 17044
17026: GO 17028
17028: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17029: LD_INT 19
17031: PPUSH
17032: LD_OWVAR 2
17036: PPUSH
17037: LD_INT 0
17039: PPUSH
17040: CALL_OW 324
17044: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17045: LD_EXP 27
17049: IFFALSE 17057
17051: PUSH
17052: LD_EXP 36
17056: AND
17057: IFFALSE 17159
17059: GO 17061
17061: DISABLE
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
// begin enable ;
17066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17067: LD_ADDR_VAR 0 2
17071: PUSH
17072: LD_INT 22
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 34
17089: PUSH
17090: LD_INT 11
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 34
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17159
// for i in tmp do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_VAR 0 2
17139: PUSH
17140: FOR_IN
17141: IFFALSE 17157
// begin SetLives ( i , 0 ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_INT 0
17150: PPUSH
17151: CALL_OW 234
// end ;
17155: GO 17140
17157: POP
17158: POP
// end ;
17159: PPOPN 2
17161: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17162: LD_EXP 27
17166: IFFALSE 17174
17168: PUSH
17169: LD_EXP 37
17173: AND
17174: IFFALSE 17194
17176: GO 17178
17178: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17179: LD_INT 32
17181: PPUSH
17182: LD_OWVAR 2
17186: PPUSH
17187: LD_INT 0
17189: PPUSH
17190: CALL_OW 324
17194: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17195: LD_EXP 27
17199: IFFALSE 17207
17201: PUSH
17202: LD_EXP 38
17206: AND
17207: IFFALSE 17390
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 33
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 2
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17390
// side := 0 ;
17262: LD_ADDR_VAR 0 3
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// for i := 1 to 8 do
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: DOUBLE
17276: LD_INT 1
17278: DEC
17279: ST_TO_ADDR
17280: LD_INT 8
17282: PUSH
17283: FOR_TO
17284: IFFALSE 17334
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17286: LD_OWVAR 2
17290: PUSH
17291: LD_VAR 0 1
17295: NONEQUAL
17296: IFFALSE 17318
17298: PUSH
17299: LD_OWVAR 2
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 81
17313: PUSH
17314: LD_INT 2
17316: EQUAL
17317: AND
17318: IFFALSE 17332
// begin side := i ;
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_VAR 0 1
17329: ST_TO_ADDR
// break ;
17330: GO 17334
// end ;
17332: GO 17283
17334: POP
17335: POP
// if not side then
17336: LD_VAR 0 3
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 17390
// for i := 1 to tmp do
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: DOUBLE
17351: LD_INT 1
17353: DEC
17354: ST_TO_ADDR
17355: LD_VAR 0 2
17359: PUSH
17360: FOR_TO
17361: IFFALSE 17388
// if Prob ( 60 ) then
17363: LD_INT 60
17365: PPUSH
17366: CALL_OW 13
17370: IFFALSE 17386
// SetSide ( i , side ) ;
17372: LD_VAR 0 1
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: CALL_OW 235
17386: GO 17360
17388: POP
17389: POP
// end ;
17390: PPOPN 3
17392: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17393: LD_EXP 27
17397: IFFALSE 17405
17399: PUSH
17400: LD_EXP 40
17404: AND
17405: IFFALSE 17524
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_OWVAR 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: LD_INT 23
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: PUSH
17467: FOR_IN
17468: IFFALSE 17522
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 4
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: IN
17498: IFFALSE 17520
// SetClass ( un , rand ( 1 , 4 ) ) ;
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_INT 4
17510: PPUSH
17511: CALL_OW 12
17515: PPUSH
17516: CALL_OW 336
17520: GO 17467
17522: POP
17523: POP
// end ;
17524: PPOPN 1
17526: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17527: LD_EXP 27
17531: IFFALSE 17539
17533: PUSH
17534: LD_EXP 39
17538: AND
17539: IFFALSE 17618
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 3
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: ST_TO_ADDR
// if not tmp then
17583: LD_VAR 0 1
17587: NOT
17588: IFFALSE 17592
// exit ;
17590: GO 17618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 1
17599: PPUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 12
17609: ARRAY
17610: PPUSH
17611: LD_INT 100
17613: PPUSH
17614: CALL_OW 234
// end ;
17618: PPOPN 1
17620: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17621: LD_EXP 27
17625: IFFALSE 17633
17627: PUSH
17628: LD_EXP 41
17632: AND
17633: IFFALSE 17731
17635: GO 17637
17637: DISABLE
17638: LD_INT 0
17640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17641: LD_ADDR_VAR 0 1
17645: PUSH
17646: LD_INT 22
17648: PUSH
17649: LD_OWVAR 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 21
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PPUSH
17672: CALL_OW 69
17676: ST_TO_ADDR
// if not tmp then
17677: LD_VAR 0 1
17681: NOT
17682: IFFALSE 17686
// exit ;
17684: GO 17731
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17686: LD_VAR 0 1
17690: PUSH
17691: LD_INT 1
17693: PPUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 12
17703: ARRAY
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: LD_INT 4
17710: PPUSH
17711: CALL_OW 12
17715: PPUSH
17716: LD_INT 3000
17718: PPUSH
17719: LD_INT 9000
17721: PPUSH
17722: CALL_OW 12
17726: PPUSH
17727: CALL_OW 492
// end ;
17731: PPOPN 1
17733: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17734: LD_EXP 27
17738: IFFALSE 17746
17740: PUSH
17741: LD_EXP 42
17745: AND
17746: IFFALSE 17766
17748: GO 17750
17750: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17751: LD_INT 1
17753: PPUSH
17754: LD_OWVAR 2
17758: PPUSH
17759: LD_INT 0
17761: PPUSH
17762: CALL_OW 324
17766: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17767: LD_EXP 27
17771: IFFALSE 17779
17773: PUSH
17774: LD_EXP 43
17778: AND
17779: IFFALSE 17862
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_OWVAR 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: ST_TO_ADDR
// if not tmp then
17824: LD_VAR 0 2
17828: NOT
17829: IFFALSE 17833
// exit ;
17831: GO 17862
// for i in tmp do
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_VAR 0 2
17842: PUSH
17843: FOR_IN
17844: IFFALSE 17860
// SetBLevel ( i , 10 ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: LD_INT 10
17853: PPUSH
17854: CALL_OW 241
17858: GO 17843
17860: POP
17861: POP
// end ;
17862: PPOPN 2
17864: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17865: LD_EXP 27
17869: IFFALSE 17877
17871: PUSH
17872: LD_EXP 44
17876: AND
17877: IFFALSE 17988
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17887: LD_ADDR_VAR 0 3
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 25
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: ST_TO_ADDR
// if not tmp then
17923: LD_VAR 0 3
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 17988
// un := tmp [ rand ( 1 , tmp ) ] ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 12
17954: ARRAY
17955: ST_TO_ADDR
// if Crawls ( un ) then
17956: LD_VAR 0 2
17960: PPUSH
17961: CALL_OW 318
17965: IFFALSE 17976
// ComWalk ( un ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_INT 5
17983: PPUSH
17984: CALL_OW 336
// end ;
17988: PPOPN 3
17990: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17991: LD_EXP 27
17995: IFFALSE 18003
17997: PUSH
17998: LD_EXP 45
18002: AND
18003: IFFALSE 18015
18005: PUSH
18006: LD_OWVAR 67
18010: PUSH
18011: LD_INT 4
18013: LESS
18014: AND
18015: IFFALSE 18034
18017: GO 18019
18019: DISABLE
// begin Difficulty := Difficulty + 1 ;
18020: LD_ADDR_OWVAR 67
18024: PUSH
18025: LD_OWVAR 67
18029: PUSH
18030: LD_INT 1
18032: PLUS
18033: ST_TO_ADDR
// end ;
18034: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18035: LD_EXP 27
18039: IFFALSE 18047
18041: PUSH
18042: LD_EXP 46
18046: AND
18047: IFFALSE 18150
18049: GO 18051
18051: DISABLE
18052: LD_INT 0
18054: PPUSH
// begin for i := 1 to 5 do
18055: LD_ADDR_VAR 0 1
18059: PUSH
18060: DOUBLE
18061: LD_INT 1
18063: DEC
18064: ST_TO_ADDR
18065: LD_INT 5
18067: PUSH
18068: FOR_TO
18069: IFFALSE 18148
// begin uc_nation := nation_nature ;
18071: LD_ADDR_OWVAR 21
18075: PUSH
18076: LD_INT 0
18078: ST_TO_ADDR
// uc_side := 0 ;
18079: LD_ADDR_OWVAR 20
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18087: LD_ADDR_OWVAR 29
18091: PUSH
18092: LD_INT 12
18094: PUSH
18095: LD_INT 12
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// hc_agressivity := 20 ;
18102: LD_ADDR_OWVAR 35
18106: PUSH
18107: LD_INT 20
18109: ST_TO_ADDR
// hc_class := class_tiger ;
18110: LD_ADDR_OWVAR 28
18114: PUSH
18115: LD_INT 14
18117: ST_TO_ADDR
// hc_gallery :=  ;
18118: LD_ADDR_OWVAR 33
18122: PUSH
18123: LD_STRING 
18125: ST_TO_ADDR
// hc_name :=  ;
18126: LD_ADDR_OWVAR 26
18130: PUSH
18131: LD_STRING 
18133: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18134: CALL_OW 44
18138: PPUSH
18139: LD_INT 0
18141: PPUSH
18142: CALL_OW 51
// end ;
18146: GO 18068
18148: POP
18149: POP
// end ;
18150: PPOPN 1
18152: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18153: LD_EXP 27
18157: IFFALSE 18165
18159: PUSH
18160: LD_EXP 47
18164: AND
18165: IFFALSE 18174
18167: GO 18169
18169: DISABLE
// StreamSibBomb ;
18170: CALL 18175 0 0
18174: END
// export function StreamSibBomb ; var i , x , y ; begin
18175: LD_INT 0
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// result := false ;
18181: LD_ADDR_VAR 0 1
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// for i := 1 to 16 do
18189: LD_ADDR_VAR 0 2
18193: PUSH
18194: DOUBLE
18195: LD_INT 1
18197: DEC
18198: ST_TO_ADDR
18199: LD_INT 16
18201: PUSH
18202: FOR_TO
18203: IFFALSE 18402
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 10
18212: PUSH
18213: LD_INT 20
18215: PUSH
18216: LD_INT 30
18218: PUSH
18219: LD_INT 40
18221: PUSH
18222: LD_INT 50
18224: PUSH
18225: LD_INT 60
18227: PUSH
18228: LD_INT 70
18230: PUSH
18231: LD_INT 80
18233: PUSH
18234: LD_INT 90
18236: PUSH
18237: LD_INT 100
18239: PUSH
18240: LD_INT 110
18242: PUSH
18243: LD_INT 120
18245: PUSH
18246: LD_INT 130
18248: PUSH
18249: LD_INT 140
18251: PUSH
18252: LD_INT 150
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PPUSH
18275: LD_INT 15
18277: PPUSH
18278: CALL_OW 12
18282: ARRAY
18283: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18284: LD_ADDR_VAR 0 4
18288: PUSH
18289: LD_INT 10
18291: PUSH
18292: LD_INT 20
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 40
18300: PUSH
18301: LD_INT 50
18303: PUSH
18304: LD_INT 60
18306: PUSH
18307: LD_INT 70
18309: PUSH
18310: LD_INT 80
18312: PUSH
18313: LD_INT 90
18315: PUSH
18316: LD_INT 100
18318: PUSH
18319: LD_INT 110
18321: PUSH
18322: LD_INT 120
18324: PUSH
18325: LD_INT 130
18327: PUSH
18328: LD_INT 140
18330: PUSH
18331: LD_INT 150
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PPUSH
18354: LD_INT 15
18356: PPUSH
18357: CALL_OW 12
18361: ARRAY
18362: ST_TO_ADDR
// if ValidHex ( x , y ) then
18363: LD_VAR 0 3
18367: PPUSH
18368: LD_VAR 0 4
18372: PPUSH
18373: CALL_OW 488
18377: IFFALSE 18400
// begin result := [ x , y ] ;
18379: LD_ADDR_VAR 0 1
18383: PUSH
18384: LD_VAR 0 3
18388: PUSH
18389: LD_VAR 0 4
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: ST_TO_ADDR
// break ;
18398: GO 18402
// end ; end ;
18400: GO 18202
18402: POP
18403: POP
// if result then
18404: LD_VAR 0 1
18408: IFFALSE 18468
// begin ToLua ( playSibBomb() ) ;
18410: LD_STRING playSibBomb()
18412: PPUSH
18413: CALL_OW 559
// wait ( 0 0$14 ) ;
18417: LD_INT 490
18419: PPUSH
18420: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18424: LD_VAR 0 1
18428: PUSH
18429: LD_INT 1
18431: ARRAY
18432: PPUSH
18433: LD_VAR 0 1
18437: PUSH
18438: LD_INT 2
18440: ARRAY
18441: PPUSH
18442: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18446: LD_VAR 0 1
18450: PUSH
18451: LD_INT 1
18453: ARRAY
18454: PPUSH
18455: LD_VAR 0 1
18459: PUSH
18460: LD_INT 2
18462: ARRAY
18463: PPUSH
18464: CALL_OW 429
// end ; end ;
18468: LD_VAR 0 1
18472: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18473: LD_EXP 27
18477: IFFALSE 18485
18479: PUSH
18480: LD_EXP 49
18484: AND
18485: IFFALSE 18497
18487: GO 18489
18489: DISABLE
// YouLost (  ) ;
18490: LD_STRING 
18492: PPUSH
18493: CALL_OW 104
18497: END
// every 0 0$1 trigger StreamModeActive and sFog do
18498: LD_EXP 27
18502: IFFALSE 18510
18504: PUSH
18505: LD_EXP 48
18509: AND
18510: IFFALSE 18524
18512: GO 18514
18514: DISABLE
// FogOff ( your_side ) ;
18515: LD_OWVAR 2
18519: PPUSH
18520: CALL_OW 344
18524: END
// every 0 0$1 trigger StreamModeActive and sSun do
18525: LD_EXP 27
18529: IFFALSE 18537
18531: PUSH
18532: LD_EXP 50
18536: AND
18537: IFFALSE 18565
18539: GO 18541
18541: DISABLE
// begin solar_recharge_percent := 0 ;
18542: LD_ADDR_OWVAR 79
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18550: LD_INT 10500
18552: PPUSH
18553: CALL_OW 67
// solar_recharge_percent := 100 ;
18557: LD_ADDR_OWVAR 79
18561: PUSH
18562: LD_INT 100
18564: ST_TO_ADDR
// end ;
18565: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18566: LD_EXP 27
18570: IFFALSE 18578
18572: PUSH
18573: LD_EXP 51
18577: AND
18578: IFFALSE 18817
18580: GO 18582
18582: DISABLE
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// begin tmp := [ ] ;
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: EMPTY
18594: ST_TO_ADDR
// for i := 1 to 6 do
18595: LD_ADDR_VAR 0 1
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_INT 6
18607: PUSH
18608: FOR_TO
18609: IFFALSE 18714
// begin uc_nation := nation_nature ;
18611: LD_ADDR_OWVAR 21
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// uc_side := 0 ;
18619: LD_ADDR_OWVAR 20
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18627: LD_ADDR_OWVAR 29
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: LD_INT 12
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: ST_TO_ADDR
// hc_agressivity := 20 ;
18642: LD_ADDR_OWVAR 35
18646: PUSH
18647: LD_INT 20
18649: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18650: LD_ADDR_OWVAR 28
18654: PUSH
18655: LD_INT 17
18657: ST_TO_ADDR
// hc_gallery :=  ;
18658: LD_ADDR_OWVAR 33
18662: PUSH
18663: LD_STRING 
18665: ST_TO_ADDR
// hc_name :=  ;
18666: LD_ADDR_OWVAR 26
18670: PUSH
18671: LD_STRING 
18673: ST_TO_ADDR
// un := CreateHuman ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: CALL_OW 44
18683: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 51
// tmp := tmp ^ un ;
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_VAR 0 3
18705: PUSH
18706: LD_VAR 0 2
18710: ADD
18711: ST_TO_ADDR
// end ;
18712: GO 18608
18714: POP
18715: POP
// repeat wait ( 0 0$1 ) ;
18716: LD_INT 35
18718: PPUSH
18719: CALL_OW 67
// for un in tmp do
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_VAR 0 3
18732: PUSH
18733: FOR_IN
18734: IFFALSE 18808
// begin if IsDead ( un ) then
18736: LD_VAR 0 2
18740: PPUSH
18741: CALL_OW 301
18745: IFFALSE 18765
// begin tmp := tmp diff un ;
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 2
18761: DIFF
18762: ST_TO_ADDR
// continue ;
18763: GO 18733
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18765: LD_VAR 0 2
18769: PPUSH
18770: LD_INT 3
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: PPUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: CALL_OW 74
18801: PPUSH
18802: CALL_OW 115
// end ;
18806: GO 18733
18808: POP
18809: POP
// until not tmp ;
18810: LD_VAR 0 3
18814: NOT
18815: IFFALSE 18716
// end ;
18817: PPOPN 3
18819: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18820: LD_EXP 27
18824: IFFALSE 18832
18826: PUSH
18827: LD_EXP 52
18831: AND
18832: IFFALSE 18886
18834: GO 18836
18836: DISABLE
// begin ToLua ( displayTroll(); ) ;
18837: LD_STRING displayTroll();
18839: PPUSH
18840: CALL_OW 559
// wait ( 3 3$00 ) ;
18844: LD_INT 6300
18846: PPUSH
18847: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18851: LD_STRING hideTroll();
18853: PPUSH
18854: CALL_OW 559
// wait ( 1 1$00 ) ;
18858: LD_INT 2100
18860: PPUSH
18861: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18865: LD_STRING displayTroll();
18867: PPUSH
18868: CALL_OW 559
// wait ( 1 1$00 ) ;
18872: LD_INT 2100
18874: PPUSH
18875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18879: LD_STRING hideTroll();
18881: PPUSH
18882: CALL_OW 559
// end ;
18886: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18887: LD_EXP 27
18891: IFFALSE 18899
18893: PUSH
18894: LD_EXP 53
18898: AND
18899: IFFALSE 18962
18901: GO 18903
18903: DISABLE
18904: LD_INT 0
18906: PPUSH
// begin p := 0 ;
18907: LD_ADDR_VAR 0 1
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// repeat game_speed := 1 ;
18915: LD_ADDR_OWVAR 65
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18923: LD_INT 35
18925: PPUSH
18926: CALL_OW 67
// p := p + 1 ;
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_VAR 0 1
18939: PUSH
18940: LD_INT 1
18942: PLUS
18943: ST_TO_ADDR
// until p >= 60 ;
18944: LD_VAR 0 1
18948: PUSH
18949: LD_INT 60
18951: GREATEREQUAL
18952: IFFALSE 18915
// game_speed := 4 ;
18954: LD_ADDR_OWVAR 65
18958: PUSH
18959: LD_INT 4
18961: ST_TO_ADDR
// end ;
18962: PPOPN 1
18964: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18965: LD_EXP 27
18969: IFFALSE 18977
18971: PUSH
18972: LD_EXP 54
18976: AND
18977: IFFALSE 19123
18979: GO 18981
18981: DISABLE
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_OWVAR 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 30
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 69
19039: ST_TO_ADDR
// if not depot then
19040: LD_VAR 0 1
19044: NOT
19045: IFFALSE 19049
// exit ;
19047: GO 19123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 1
19061: PPUSH
19062: LD_VAR 0 1
19066: PPUSH
19067: CALL_OW 12
19071: ARRAY
19072: PPUSH
19073: CALL_OW 274
19077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: LD_INT 1
19085: PPUSH
19086: LD_INT 0
19088: PPUSH
19089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19093: LD_VAR 0 2
19097: PPUSH
19098: LD_INT 2
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_INT 3
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 277
// end ;
19123: PPOPN 2
19125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19126: LD_EXP 27
19130: IFFALSE 19138
19132: PUSH
19133: LD_EXP 55
19137: AND
19138: IFFALSE 19235
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19146: LD_ADDR_VAR 0 1
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_OWVAR 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 21
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 3
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 1
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19209: LD_VAR 0 1
19213: PUSH
19214: LD_INT 1
19216: PPUSH
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 12
19226: ARRAY
19227: PPUSH
19228: LD_INT 200
19230: PPUSH
19231: CALL_OW 234
// end ;
19235: PPOPN 1
19237: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19238: LD_EXP 27
19242: IFFALSE 19250
19244: PUSH
19245: LD_EXP 56
19249: AND
19250: IFFALSE 19329
19252: GO 19254
19254: DISABLE
19255: LD_INT 0
19257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: LD_INT 22
19265: PUSH
19266: LD_OWVAR 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 21
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// if not tmp then
19294: LD_VAR 0 1
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19329
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 12
19320: ARRAY
19321: PPUSH
19322: LD_INT 60
19324: PPUSH
19325: CALL_OW 234
// end ;
19329: PPOPN 1
19331: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19332: LD_EXP 27
19336: IFFALSE 19344
19338: PUSH
19339: LD_EXP 57
19343: AND
19344: IFFALSE 19443
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
// begin enable ;
19353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19354: LD_ADDR_VAR 0 1
19358: PUSH
19359: LD_INT 22
19361: PUSH
19362: LD_OWVAR 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 61
19373: PUSH
19374: EMPTY
19375: LIST
19376: PUSH
19377: LD_INT 33
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: ST_TO_ADDR
// if not tmp then
19397: LD_VAR 0 1
19401: NOT
19402: IFFALSE 19406
// exit ;
19404: GO 19443
// for i in tmp do
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 1
19415: PUSH
19416: FOR_IN
19417: IFFALSE 19441
// if IsControledBy ( i ) then
19419: LD_VAR 0 2
19423: PPUSH
19424: CALL_OW 312
19428: IFFALSE 19439
// ComUnlink ( i ) ;
19430: LD_VAR 0 2
19434: PPUSH
19435: CALL_OW 136
19439: GO 19416
19441: POP
19442: POP
// end ;
19443: PPOPN 2
19445: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19446: LD_EXP 27
19450: IFFALSE 19458
19452: PUSH
19453: LD_EXP 58
19457: AND
19458: IFFALSE 19598
19460: GO 19462
19462: DISABLE
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
// begin ToLua ( displayPowell(); ) ;
19467: LD_STRING displayPowell();
19469: PPUSH
19470: CALL_OW 559
// uc_side := 0 ;
19474: LD_ADDR_OWVAR 20
19478: PUSH
19479: LD_INT 0
19481: ST_TO_ADDR
// uc_nation := 2 ;
19482: LD_ADDR_OWVAR 21
19486: PUSH
19487: LD_INT 2
19489: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19490: LD_ADDR_OWVAR 37
19494: PUSH
19495: LD_INT 14
19497: ST_TO_ADDR
// vc_engine := engine_siberite ;
19498: LD_ADDR_OWVAR 39
19502: PUSH
19503: LD_INT 3
19505: ST_TO_ADDR
// vc_control := control_apeman ;
19506: LD_ADDR_OWVAR 38
19510: PUSH
19511: LD_INT 5
19513: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19514: LD_ADDR_OWVAR 40
19518: PUSH
19519: LD_INT 29
19521: ST_TO_ADDR
// un := CreateVehicle ;
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: CALL_OW 45
19531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_INT 1
19539: PPUSH
19540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19544: LD_INT 35
19546: PPUSH
19547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: PPUSH
19573: LD_VAR 0 2
19577: PPUSH
19578: CALL_OW 74
19582: PPUSH
19583: CALL_OW 115
// until IsDead ( un ) ;
19587: LD_VAR 0 2
19591: PPUSH
19592: CALL_OW 301
19596: IFFALSE 19544
// end ;
19598: PPOPN 2
19600: END
// every 0 0$1 trigger StreamModeActive and sStu do
19601: LD_EXP 27
19605: IFFALSE 19613
19607: PUSH
19608: LD_EXP 66
19612: AND
19613: IFFALSE 19629
19615: GO 19617
19617: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19618: LD_STRING displayStucuk();
19620: PPUSH
19621: CALL_OW 559
// ResetFog ;
19625: CALL_OW 335
// end ;
19629: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19630: LD_EXP 27
19634: IFFALSE 19642
19636: PUSH
19637: LD_EXP 59
19641: AND
19642: IFFALSE 19783
19644: GO 19646
19646: DISABLE
19647: LD_INT 0
19649: PPUSH
19650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: LD_INT 22
19658: PUSH
19659: LD_OWVAR 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 21
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PPUSH
19682: CALL_OW 69
19686: ST_TO_ADDR
// if not tmp then
19687: LD_VAR 0 2
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19783
// un := tmp [ rand ( 1 , tmp ) ] ;
19696: LD_ADDR_VAR 0 1
19700: PUSH
19701: LD_VAR 0 2
19705: PUSH
19706: LD_INT 1
19708: PPUSH
19709: LD_VAR 0 2
19713: PPUSH
19714: CALL_OW 12
19718: ARRAY
19719: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19720: LD_VAR 0 1
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19732: LD_VAR 0 1
19736: PPUSH
19737: LD_OWVAR 3
19741: PUSH
19742: LD_VAR 0 1
19746: DIFF
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 74
19757: PPUSH
19758: CALL_OW 115
// wait ( 0 0$20 ) ;
19762: LD_INT 700
19764: PPUSH
19765: CALL_OW 67
// SetSide ( un , your_side ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: LD_OWVAR 2
19778: PPUSH
19779: CALL_OW 235
// end ;
19783: PPOPN 2
19785: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19786: LD_EXP 27
19790: IFFALSE 19798
19792: PUSH
19793: LD_EXP 60
19797: AND
19798: IFFALSE 19904
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PPUSH
19855: CALL_OW 69
19859: ST_TO_ADDR
// if not depot then
19860: LD_VAR 0 1
19864: NOT
19865: IFFALSE 19869
// exit ;
19867: GO 19904
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19869: LD_VAR 0 1
19873: PUSH
19874: LD_INT 1
19876: ARRAY
19877: PPUSH
19878: CALL_OW 250
19882: PPUSH
19883: LD_VAR 0 1
19887: PUSH
19888: LD_INT 1
19890: ARRAY
19891: PPUSH
19892: CALL_OW 251
19896: PPUSH
19897: LD_INT 70
19899: PPUSH
19900: CALL_OW 495
// end ;
19904: PPOPN 1
19906: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19907: LD_EXP 27
19911: IFFALSE 19919
19913: PUSH
19914: LD_EXP 61
19918: AND
19919: IFFALSE 20130
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19931: LD_ADDR_VAR 0 5
19935: PUSH
19936: LD_INT 22
19938: PUSH
19939: LD_OWVAR 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 5
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20130
// for i in tmp do
19976: LD_ADDR_VAR 0 1
19980: PUSH
19981: LD_VAR 0 5
19985: PUSH
19986: FOR_IN
19987: IFFALSE 20128
// begin d := rand ( 0 , 5 ) ;
19989: LD_ADDR_VAR 0 4
19993: PUSH
19994: LD_INT 0
19996: PPUSH
19997: LD_INT 5
19999: PPUSH
20000: CALL_OW 12
20004: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 250
20019: PPUSH
20020: LD_VAR 0 4
20024: PPUSH
20025: LD_INT 3
20027: PPUSH
20028: LD_INT 12
20030: PPUSH
20031: CALL_OW 12
20035: PPUSH
20036: CALL_OW 272
20040: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 251
20055: PPUSH
20056: LD_VAR 0 4
20060: PPUSH
20061: LD_INT 3
20063: PPUSH
20064: LD_INT 12
20066: PPUSH
20067: CALL_OW 12
20071: PPUSH
20072: CALL_OW 273
20076: ST_TO_ADDR
// if ValidHex ( x , y ) then
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_VAR 0 3
20086: PPUSH
20087: CALL_OW 488
20091: IFFALSE 20126
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: LD_INT 3
20110: PPUSH
20111: LD_INT 6
20113: PPUSH
20114: CALL_OW 12
20118: PPUSH
20119: LD_INT 1
20121: PPUSH
20122: CALL_OW 483
// end ;
20126: GO 19986
20128: POP
20129: POP
// end ;
20130: PPOPN 5
20132: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20133: LD_EXP 27
20137: IFFALSE 20145
20139: PUSH
20140: LD_EXP 62
20144: AND
20145: IFFALSE 20239
20147: GO 20149
20149: DISABLE
20150: LD_INT 0
20152: PPUSH
20153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20154: LD_ADDR_VAR 0 2
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_OWVAR 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 32
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 21
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: PPUSH
20196: CALL_OW 69
20200: ST_TO_ADDR
// if not tmp then
20201: LD_VAR 0 2
20205: NOT
20206: IFFALSE 20210
// exit ;
20208: GO 20239
// for i in tmp do
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: FOR_IN
20221: IFFALSE 20237
// SetFuel ( i , 0 ) ;
20223: LD_VAR 0 1
20227: PPUSH
20228: LD_INT 0
20230: PPUSH
20231: CALL_OW 240
20235: GO 20220
20237: POP
20238: POP
// end ;
20239: PPOPN 2
20241: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20242: LD_EXP 27
20246: IFFALSE 20254
20248: PUSH
20249: LD_EXP 63
20253: AND
20254: IFFALSE 20320
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20262: LD_ADDR_VAR 0 1
20266: PUSH
20267: LD_INT 22
20269: PUSH
20270: LD_OWVAR 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 30
20281: PUSH
20282: LD_INT 29
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: ST_TO_ADDR
// if not tmp then
20298: LD_VAR 0 1
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20320
// DestroyUnit ( tmp [ 1 ] ) ;
20307: LD_VAR 0 1
20311: PUSH
20312: LD_INT 1
20314: ARRAY
20315: PPUSH
20316: CALL_OW 65
// end ;
20320: PPOPN 1
20322: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20323: LD_EXP 27
20327: IFFALSE 20335
20329: PUSH
20330: LD_EXP 65
20334: AND
20335: IFFALSE 20464
20337: GO 20339
20339: DISABLE
20340: LD_INT 0
20342: PPUSH
// begin uc_side := 0 ;
20343: LD_ADDR_OWVAR 20
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// uc_nation := nation_arabian ;
20351: LD_ADDR_OWVAR 21
20355: PUSH
20356: LD_INT 2
20358: ST_TO_ADDR
// hc_gallery :=  ;
20359: LD_ADDR_OWVAR 33
20363: PUSH
20364: LD_STRING 
20366: ST_TO_ADDR
// hc_name :=  ;
20367: LD_ADDR_OWVAR 26
20371: PUSH
20372: LD_STRING 
20374: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20375: LD_INT 1
20377: PPUSH
20378: LD_INT 11
20380: PPUSH
20381: LD_INT 10
20383: PPUSH
20384: CALL_OW 380
// un := CreateHuman ;
20388: LD_ADDR_VAR 0 1
20392: PUSH
20393: CALL_OW 44
20397: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20398: LD_VAR 0 1
20402: PPUSH
20403: LD_INT 1
20405: PPUSH
20406: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20410: LD_INT 35
20412: PPUSH
20413: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20417: LD_VAR 0 1
20421: PPUSH
20422: LD_INT 22
20424: PUSH
20425: LD_OWVAR 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: PPUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 74
20448: PPUSH
20449: CALL_OW 115
// until IsDead ( un ) ;
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 301
20462: IFFALSE 20410
// end ;
20464: PPOPN 1
20466: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20467: LD_EXP 27
20471: IFFALSE 20479
20473: PUSH
20474: LD_EXP 67
20478: AND
20479: IFFALSE 20491
20481: GO 20483
20483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20484: LD_STRING earthquake(getX(game), 0, 32)
20486: PPUSH
20487: CALL_OW 559
20491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20492: LD_EXP 27
20496: IFFALSE 20504
20498: PUSH
20499: LD_EXP 68
20503: AND
20504: IFFALSE 20595
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin enable ;
20512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20513: LD_ADDR_VAR 0 1
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_OWVAR 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 21
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 33
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 1
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20569: LD_VAR 0 1
20573: PUSH
20574: LD_INT 1
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 12
20586: ARRAY
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 234
// end ;
20595: PPOPN 1
20597: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20598: LD_EXP 27
20602: IFFALSE 20610
20604: PUSH
20605: LD_EXP 69
20609: AND
20610: IFFALSE 20751
20612: GO 20614
20614: DISABLE
20615: LD_INT 0
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 25
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 69
20655: ST_TO_ADDR
// if not tmp then
20656: LD_VAR 0 3
20660: NOT
20661: IFFALSE 20665
// exit ;
20663: GO 20751
// un := tmp [ rand ( 1 , tmp ) ] ;
20665: LD_ADDR_VAR 0 2
20669: PUSH
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 1
20677: PPUSH
20678: LD_VAR 0 3
20682: PPUSH
20683: CALL_OW 12
20687: ARRAY
20688: ST_TO_ADDR
// if Crawls ( un ) then
20689: LD_VAR 0 2
20693: PPUSH
20694: CALL_OW 318
20698: IFFALSE 20709
// ComWalk ( un ) ;
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_INT 9
20716: PPUSH
20717: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20721: LD_INT 28
20723: PPUSH
20724: LD_OWVAR 2
20728: PPUSH
20729: LD_INT 2
20731: PPUSH
20732: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20736: LD_INT 29
20738: PPUSH
20739: LD_OWVAR 2
20743: PPUSH
20744: LD_INT 2
20746: PPUSH
20747: CALL_OW 322
// end ;
20751: PPOPN 3
20753: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20754: LD_EXP 27
20758: IFFALSE 20766
20760: PUSH
20761: LD_EXP 70
20765: AND
20766: IFFALSE 20877
20768: GO 20770
20770: DISABLE
20771: LD_INT 0
20773: PPUSH
20774: PPUSH
20775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_OWVAR 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 25
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: ST_TO_ADDR
// if not tmp then
20812: LD_VAR 0 3
20816: NOT
20817: IFFALSE 20821
// exit ;
20819: GO 20877
// un := tmp [ rand ( 1 , tmp ) ] ;
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 1
20833: PPUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// if Crawls ( un ) then
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 318
20854: IFFALSE 20865
// ComWalk ( un ) ;
20856: LD_VAR 0 2
20860: PPUSH
20861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20865: LD_VAR 0 2
20869: PPUSH
20870: LD_INT 8
20872: PPUSH
20873: CALL_OW 336
// end ;
20877: PPOPN 3
20879: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20880: LD_EXP 27
20884: IFFALSE 20892
20886: PUSH
20887: LD_EXP 71
20891: AND
20892: IFFALSE 21036
20894: GO 20896
20896: DISABLE
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_INT 22
20908: PUSH
20909: LD_OWVAR 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 21
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 34
20933: PUSH
20934: LD_INT 12
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 34
20943: PUSH
20944: LD_INT 51
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 34
20953: PUSH
20954: LD_INT 32
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PPUSH
20972: CALL_OW 69
20976: ST_TO_ADDR
// if not tmp then
20977: LD_VAR 0 2
20981: NOT
20982: IFFALSE 20986
// exit ;
20984: GO 21036
// for i in tmp do
20986: LD_ADDR_VAR 0 1
20990: PUSH
20991: LD_VAR 0 2
20995: PUSH
20996: FOR_IN
20997: IFFALSE 21034
// if GetCargo ( i , mat_artifact ) = 0 then
20999: LD_VAR 0 1
21003: PPUSH
21004: LD_INT 4
21006: PPUSH
21007: CALL_OW 289
21011: PUSH
21012: LD_INT 0
21014: EQUAL
21015: IFFALSE 21032
// SetCargo ( i , mat_siberit , 100 ) ;
21017: LD_VAR 0 1
21021: PPUSH
21022: LD_INT 3
21024: PPUSH
21025: LD_INT 100
21027: PPUSH
21028: CALL_OW 290
21032: GO 20996
21034: POP
21035: POP
// end ;
21036: PPOPN 2
21038: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21039: LD_EXP 27
21043: IFFALSE 21051
21045: PUSH
21046: LD_EXP 72
21050: AND
21051: IFFALSE 21234
21053: GO 21055
21055: DISABLE
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_OWVAR 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 2
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21234
// for i := 1 to 2 do
21091: LD_ADDR_VAR 0 1
21095: PUSH
21096: DOUBLE
21097: LD_INT 1
21099: DEC
21100: ST_TO_ADDR
21101: LD_INT 2
21103: PUSH
21104: FOR_TO
21105: IFFALSE 21232
// begin uc_side := your_side ;
21107: LD_ADDR_OWVAR 20
21111: PUSH
21112: LD_OWVAR 2
21116: ST_TO_ADDR
// uc_nation := nation_american ;
21117: LD_ADDR_OWVAR 21
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// vc_chassis := us_morphling ;
21125: LD_ADDR_OWVAR 37
21129: PUSH
21130: LD_INT 5
21132: ST_TO_ADDR
// vc_engine := engine_siberite ;
21133: LD_ADDR_OWVAR 39
21137: PUSH
21138: LD_INT 3
21140: ST_TO_ADDR
// vc_control := control_computer ;
21141: LD_ADDR_OWVAR 38
21145: PUSH
21146: LD_INT 3
21148: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21149: LD_ADDR_OWVAR 40
21153: PUSH
21154: LD_INT 10
21156: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21157: LD_VAR 0 2
21161: PUSH
21162: LD_INT 1
21164: ARRAY
21165: PPUSH
21166: CALL_OW 310
21170: NOT
21171: IFFALSE 21218
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21173: CALL_OW 45
21177: PPUSH
21178: LD_VAR 0 2
21182: PUSH
21183: LD_INT 1
21185: ARRAY
21186: PPUSH
21187: CALL_OW 250
21191: PPUSH
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 1
21199: ARRAY
21200: PPUSH
21201: CALL_OW 251
21205: PPUSH
21206: LD_INT 12
21208: PPUSH
21209: LD_INT 1
21211: PPUSH
21212: CALL_OW 50
21216: GO 21230
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21218: CALL_OW 45
21222: PPUSH
21223: LD_INT 1
21225: PPUSH
21226: CALL_OW 51
// end ;
21230: GO 21104
21232: POP
21233: POP
// end ;
21234: PPOPN 2
21236: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21237: LD_EXP 27
21241: IFFALSE 21249
21243: PUSH
21244: LD_EXP 73
21248: AND
21249: IFFALSE 21471
21251: GO 21253
21253: DISABLE
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21262: LD_ADDR_VAR 0 6
21266: PUSH
21267: LD_INT 22
21269: PUSH
21270: LD_OWVAR 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 3
21291: PUSH
21292: LD_INT 23
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 69
21315: ST_TO_ADDR
// if not tmp then
21316: LD_VAR 0 6
21320: NOT
21321: IFFALSE 21325
// exit ;
21323: GO 21471
// s1 := rand ( 1 , 4 ) ;
21325: LD_ADDR_VAR 0 2
21329: PUSH
21330: LD_INT 1
21332: PPUSH
21333: LD_INT 4
21335: PPUSH
21336: CALL_OW 12
21340: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21341: LD_ADDR_VAR 0 4
21345: PUSH
21346: LD_VAR 0 6
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PPUSH
21355: LD_VAR 0 2
21359: PPUSH
21360: CALL_OW 259
21364: ST_TO_ADDR
// if s1 = 1 then
21365: LD_VAR 0 2
21369: PUSH
21370: LD_INT 1
21372: EQUAL
21373: IFFALSE 21393
// s2 := rand ( 2 , 4 ) else
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_INT 2
21382: PPUSH
21383: LD_INT 4
21385: PPUSH
21386: CALL_OW 12
21390: ST_TO_ADDR
21391: GO 21401
// s2 := 1 ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_INT 1
21400: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21401: LD_ADDR_VAR 0 5
21405: PUSH
21406: LD_VAR 0 6
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 3
21419: PPUSH
21420: CALL_OW 259
21424: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21425: LD_VAR 0 6
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: LD_VAR 0 5
21443: PPUSH
21444: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21448: LD_VAR 0 6
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_VAR 0 4
21466: PPUSH
21467: CALL_OW 237
// end ;
21471: PPOPN 6
21473: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21474: LD_EXP 27
21478: IFFALSE 21486
21480: PUSH
21481: LD_EXP 74
21485: AND
21486: IFFALSE 21565
21488: GO 21490
21490: DISABLE
21491: LD_INT 0
21493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21494: LD_ADDR_VAR 0 1
21498: PUSH
21499: LD_INT 22
21501: PUSH
21502: LD_OWVAR 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 30
21513: PUSH
21514: LD_INT 3
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PPUSH
21525: CALL_OW 69
21529: ST_TO_ADDR
// if not tmp then
21530: LD_VAR 0 1
21534: NOT
21535: IFFALSE 21539
// exit ;
21537: GO 21565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21539: LD_VAR 0 1
21543: PUSH
21544: LD_INT 1
21546: PPUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 12
21556: ARRAY
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: CALL_OW 234
// end ;
21565: PPOPN 1
21567: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21568: LD_EXP 27
21572: IFFALSE 21580
21574: PUSH
21575: LD_EXP 75
21579: AND
21580: IFFALSE 21692
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 22
21596: PUSH
21597: LD_OWVAR 2
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_INT 27
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 30
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 30
21631: PUSH
21632: LD_INT 28
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 69
21653: ST_TO_ADDR
// if not tmp then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 21692
// for i in tmp do
21663: LD_ADDR_VAR 0 1
21667: PUSH
21668: LD_VAR 0 2
21672: PUSH
21673: FOR_IN
21674: IFFALSE 21690
// SetLives ( i , 1 ) ;
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: CALL_OW 234
21688: GO 21673
21690: POP
21691: POP
// end ;
21692: PPOPN 2
21694: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21695: LD_EXP 27
21699: IFFALSE 21707
21701: PUSH
21702: LD_EXP 76
21706: AND
21707: IFFALSE 21994
21709: GO 21711
21711: DISABLE
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
// begin i := rand ( 1 , 7 ) ;
21717: LD_ADDR_VAR 0 1
21721: PUSH
21722: LD_INT 1
21724: PPUSH
21725: LD_INT 7
21727: PPUSH
21728: CALL_OW 12
21732: ST_TO_ADDR
// case i of 1 :
21733: LD_VAR 0 1
21737: PUSH
21738: LD_INT 1
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21756
21746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21747: LD_STRING earthquake(getX(game), 0, 32)
21749: PPUSH
21750: CALL_OW 559
21754: GO 21994
21756: LD_INT 2
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21778
21764: POP
// begin ToLua ( displayStucuk(); ) ;
21765: LD_STRING displayStucuk();
21767: PPUSH
21768: CALL_OW 559
// ResetFog ;
21772: CALL_OW 335
// end ; 3 :
21776: GO 21994
21778: LD_INT 3
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21890
21786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_OWVAR 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 25
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PPUSH
21818: CALL_OW 69
21822: ST_TO_ADDR
// if not tmp then
21823: LD_VAR 0 2
21827: NOT
21828: IFFALSE 21832
// exit ;
21830: GO 21994
// un := tmp [ rand ( 1 , tmp ) ] ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_VAR 0 2
21841: PUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_VAR 0 2
21849: PPUSH
21850: CALL_OW 12
21854: ARRAY
21855: ST_TO_ADDR
// if Crawls ( un ) then
21856: LD_VAR 0 3
21860: PPUSH
21861: CALL_OW 318
21865: IFFALSE 21876
// ComWalk ( un ) ;
21867: LD_VAR 0 3
21871: PPUSH
21872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21876: LD_VAR 0 3
21880: PPUSH
21881: LD_INT 8
21883: PPUSH
21884: CALL_OW 336
// end ; 4 :
21888: GO 21994
21890: LD_INT 4
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 21972
21898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_OWVAR 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 30
21918: PUSH
21919: LD_INT 29
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PPUSH
21930: CALL_OW 69
21934: ST_TO_ADDR
// if not tmp then
21935: LD_VAR 0 2
21939: NOT
21940: IFFALSE 21944
// exit ;
21942: GO 21994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21944: LD_VAR 0 2
21948: PUSH
21949: LD_INT 1
21951: ARRAY
21952: PPUSH
21953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21957: LD_VAR 0 2
21961: PUSH
21962: LD_INT 1
21964: ARRAY
21965: PPUSH
21966: CALL_OW 65
// end ; 5 .. 7 :
21970: GO 21994
21972: LD_INT 5
21974: DOUBLE
21975: GREATEREQUAL
21976: IFFALSE 21984
21978: LD_INT 7
21980: DOUBLE
21981: LESSEQUAL
21982: IFTRUE 21986
21984: GO 21993
21986: POP
// StreamSibBomb ; end ;
21987: CALL 18175 0 0
21991: GO 21994
21993: POP
// end ;
21994: PPOPN 3
21996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21997: LD_EXP 27
22001: IFFALSE 22009
22003: PUSH
22004: LD_EXP 77
22008: AND
22009: IFFALSE 22165
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 81
22026: PUSH
22027: LD_OWVAR 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 21
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: ST_TO_ADDR
// if not tmp then
22073: LD_VAR 0 2
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22165
// p := 0 ;
22082: LD_ADDR_VAR 0 3
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22090: LD_INT 35
22092: PPUSH
22093: CALL_OW 67
// p := p + 1 ;
22097: LD_ADDR_VAR 0 3
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: LD_INT 1
22109: PLUS
22110: ST_TO_ADDR
// for i in tmp do
22111: LD_ADDR_VAR 0 1
22115: PUSH
22116: LD_VAR 0 2
22120: PUSH
22121: FOR_IN
22122: IFFALSE 22153
// if GetLives ( i ) < 1000 then
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 256
22133: PUSH
22134: LD_INT 1000
22136: LESS
22137: IFFALSE 22151
// SetLives ( i , 1000 ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_INT 1000
22146: PPUSH
22147: CALL_OW 234
22151: GO 22121
22153: POP
22154: POP
// until p > 20 ;
22155: LD_VAR 0 3
22159: PUSH
22160: LD_INT 20
22162: GREATER
22163: IFFALSE 22090
// end ;
22165: PPOPN 3
22167: END
// every 0 0$1 trigger StreamModeActive and sTime do
22168: LD_EXP 27
22172: IFFALSE 22180
22174: PUSH
22175: LD_EXP 78
22179: AND
22180: IFFALSE 22215
22182: GO 22184
22184: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22185: LD_INT 28
22187: PPUSH
22188: LD_OWVAR 2
22192: PPUSH
22193: LD_INT 2
22195: PPUSH
22196: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22200: LD_INT 30
22202: PPUSH
22203: LD_OWVAR 2
22207: PPUSH
22208: LD_INT 2
22210: PPUSH
22211: CALL_OW 322
// end ;
22215: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22216: LD_EXP 27
22220: IFFALSE 22228
22222: PUSH
22223: LD_EXP 79
22227: AND
22228: IFFALSE 22349
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
22236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22237: LD_ADDR_VAR 0 2
22241: PUSH
22242: LD_INT 22
22244: PUSH
22245: LD_OWVAR 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 21
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: LD_INT 23
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 69
22290: ST_TO_ADDR
// if not tmp then
22291: LD_VAR 0 2
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22349
// for i in tmp do
22300: LD_ADDR_VAR 0 1
22304: PUSH
22305: LD_VAR 0 2
22309: PUSH
22310: FOR_IN
22311: IFFALSE 22347
// begin if Crawls ( i ) then
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 318
22322: IFFALSE 22333
// ComWalk ( i ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 138
// SetClass ( i , 2 ) ;
22333: LD_VAR 0 1
22337: PPUSH
22338: LD_INT 2
22340: PPUSH
22341: CALL_OW 336
// end ;
22345: GO 22310
22347: POP
22348: POP
// end ;
22349: PPOPN 2
22351: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22352: LD_EXP 27
22356: IFFALSE 22364
22358: PUSH
22359: LD_EXP 80
22363: AND
22364: IFFALSE 22654
22366: GO 22368
22368: DISABLE
22369: LD_INT 0
22371: PPUSH
22372: PPUSH
22373: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22374: LD_OWVAR 2
22378: PPUSH
22379: LD_INT 9
22381: PPUSH
22382: LD_INT 1
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22392: LD_INT 9
22394: PPUSH
22395: LD_OWVAR 2
22399: PPUSH
22400: CALL_OW 343
// uc_side := 9 ;
22404: LD_ADDR_OWVAR 20
22408: PUSH
22409: LD_INT 9
22411: ST_TO_ADDR
// uc_nation := 2 ;
22412: LD_ADDR_OWVAR 21
22416: PUSH
22417: LD_INT 2
22419: ST_TO_ADDR
// hc_name := Dark Warrior ;
22420: LD_ADDR_OWVAR 26
22424: PUSH
22425: LD_STRING Dark Warrior
22427: ST_TO_ADDR
// hc_gallery :=  ;
22428: LD_ADDR_OWVAR 33
22432: PUSH
22433: LD_STRING 
22435: ST_TO_ADDR
// hc_noskilllimit := true ;
22436: LD_ADDR_OWVAR 76
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22444: LD_ADDR_OWVAR 31
22448: PUSH
22449: LD_INT 30
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 30
22457: PUSH
22458: LD_INT 30
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: ST_TO_ADDR
// un := CreateHuman ;
22467: LD_ADDR_VAR 0 3
22471: PUSH
22472: CALL_OW 44
22476: ST_TO_ADDR
// hc_noskilllimit := false ;
22477: LD_ADDR_OWVAR 76
22481: PUSH
22482: LD_INT 0
22484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 51
// ToLua ( playRanger() ) ;
22497: LD_STRING playRanger()
22499: PPUSH
22500: CALL_OW 559
// p := 0 ;
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22512: LD_INT 35
22514: PPUSH
22515: CALL_OW 67
// p := p + 1 ;
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_VAR 0 2
22528: PUSH
22529: LD_INT 1
22531: PLUS
22532: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22533: LD_VAR 0 3
22537: PPUSH
22538: CALL_OW 256
22542: PUSH
22543: LD_INT 1000
22545: LESS
22546: IFFALSE 22560
// SetLives ( un , 1000 ) ;
22548: LD_VAR 0 3
22552: PPUSH
22553: LD_INT 1000
22555: PPUSH
22556: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_INT 81
22567: PUSH
22568: LD_OWVAR 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 91
22579: PUSH
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 30
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 69
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: CALL_OW 74
22611: PPUSH
22612: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22616: LD_VAR 0 2
22620: PUSH
22621: LD_INT 80
22623: GREATER
22624: IFTRUE 22637
22626: PUSH
22627: LD_VAR 0 3
22631: PPUSH
22632: CALL_OW 301
22636: OR
22637: IFFALSE 22512
// if un then
22639: LD_VAR 0 3
22643: IFFALSE 22654
// RemoveUnit ( un ) ;
22645: LD_VAR 0 3
22649: PPUSH
22650: CALL_OW 64
// end ;
22654: PPOPN 3
22656: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22657: LD_EXP 81
22661: IFFALSE 22777
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
22669: PPUSH
22670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 81
22678: PUSH
22679: LD_OWVAR 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 21
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PPUSH
22702: CALL_OW 69
22706: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22707: LD_STRING playComputer()
22709: PPUSH
22710: CALL_OW 559
// if not tmp then
22714: LD_VAR 0 2
22718: NOT
22719: IFFALSE 22723
// exit ;
22721: GO 22777
// for i in tmp do
22723: LD_ADDR_VAR 0 1
22727: PUSH
22728: LD_VAR 0 2
22732: PUSH
22733: FOR_IN
22734: IFFALSE 22775
// for j := 1 to 4 do
22736: LD_ADDR_VAR 0 3
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_INT 4
22748: PUSH
22749: FOR_TO
22750: IFFALSE 22771
// SetSkill ( i , j , 10 ) ;
22752: LD_VAR 0 1
22756: PPUSH
22757: LD_VAR 0 3
22761: PPUSH
22762: LD_INT 10
22764: PPUSH
22765: CALL_OW 237
22769: GO 22749
22771: POP
22772: POP
22773: GO 22733
22775: POP
22776: POP
// end ;
22777: PPOPN 3
22779: END
// every 0 0$1 trigger s30 do var i , tmp ;
22780: LD_EXP 82
22784: IFFALSE 22853
22786: GO 22788
22788: DISABLE
22789: LD_INT 0
22791: PPUSH
22792: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_OWVAR 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: ST_TO_ADDR
// if not tmp then
22815: LD_VAR 0 2
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22853
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22851
// SetLives ( i , 300 ) ;
22837: LD_VAR 0 1
22841: PPUSH
22842: LD_INT 300
22844: PPUSH
22845: CALL_OW 234
22849: GO 22834
22851: POP
22852: POP
// end ;
22853: PPOPN 2
22855: END
// every 0 0$1 trigger s60 do var i , tmp ;
22856: LD_EXP 83
22860: IFFALSE 22929
22862: GO 22864
22864: DISABLE
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22869: LD_ADDR_VAR 0 2
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_OWVAR 2
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL_OW 69
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 2
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 22929
// for i in tmp do
22900: LD_ADDR_VAR 0 1
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: FOR_IN
22911: IFFALSE 22927
// SetLives ( i , 600 ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_INT 600
22920: PPUSH
22921: CALL_OW 234
22925: GO 22910
22927: POP
22928: POP
// end ;
22929: PPOPN 2
22931: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22932: LD_INT 0
22934: PPUSH
// case cmd of 301 :
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 301
22942: DOUBLE
22943: EQUAL
22944: IFTRUE 22948
22946: GO 22980
22948: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22949: LD_VAR 0 6
22953: PPUSH
22954: LD_VAR 0 7
22958: PPUSH
22959: LD_VAR 0 8
22963: PPUSH
22964: LD_VAR 0 4
22968: PPUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: CALL 24193 0 5
22978: GO 23101
22980: LD_INT 302
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23025
22988: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22989: LD_VAR 0 6
22993: PPUSH
22994: LD_VAR 0 7
22998: PPUSH
22999: LD_VAR 0 8
23003: PPUSH
23004: LD_VAR 0 9
23008: PPUSH
23009: LD_VAR 0 4
23013: PPUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: CALL 24284 0 6
23023: GO 23101
23025: LD_INT 303
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23070
23033: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23034: LD_VAR 0 6
23038: PPUSH
23039: LD_VAR 0 7
23043: PPUSH
23044: LD_VAR 0 8
23048: PPUSH
23049: LD_VAR 0 9
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL 23106 0 6
23068: GO 23101
23070: LD_INT 304
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23100
23078: POP
// hHackTeleport ( unit , x , y ) ; end ;
23079: LD_VAR 0 2
23083: PPUSH
23084: LD_VAR 0 4
23088: PPUSH
23089: LD_VAR 0 5
23093: PPUSH
23094: CALL 24877 0 3
23098: GO 23101
23100: POP
// end ;
23101: LD_VAR 0 12
23105: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23110: LD_VAR 0 1
23114: PUSH
23115: LD_INT 1
23117: LESS
23118: IFTRUE 23130
23120: PUSH
23121: LD_VAR 0 1
23125: PUSH
23126: LD_INT 3
23128: GREATER
23129: OR
23130: IFTRUE 23148
23132: PUSH
23133: LD_VAR 0 5
23137: PPUSH
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 428
23147: OR
23148: IFFALSE 23152
// exit ;
23150: GO 23880
// uc_side := your_side ;
23152: LD_ADDR_OWVAR 20
23156: PUSH
23157: LD_OWVAR 2
23161: ST_TO_ADDR
// uc_nation := nation ;
23162: LD_ADDR_OWVAR 21
23166: PUSH
23167: LD_VAR 0 1
23171: ST_TO_ADDR
// bc_level = 1 ;
23172: LD_ADDR_OWVAR 43
23176: PUSH
23177: LD_INT 1
23179: ST_TO_ADDR
// case btype of 1 :
23180: LD_VAR 0 2
23184: PUSH
23185: LD_INT 1
23187: DOUBLE
23188: EQUAL
23189: IFTRUE 23193
23191: GO 23204
23193: POP
// bc_type := b_depot ; 2 :
23194: LD_ADDR_OWVAR 42
23198: PUSH
23199: LD_INT 0
23201: ST_TO_ADDR
23202: GO 23824
23204: LD_INT 2
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23223
23212: POP
// bc_type := b_warehouse ; 3 :
23213: LD_ADDR_OWVAR 42
23217: PUSH
23218: LD_INT 1
23220: ST_TO_ADDR
23221: GO 23824
23223: LD_INT 3
23225: DOUBLE
23226: EQUAL
23227: IFTRUE 23231
23229: GO 23242
23231: POP
// bc_type := b_lab ; 4 .. 9 :
23232: LD_ADDR_OWVAR 42
23236: PUSH
23237: LD_INT 6
23239: ST_TO_ADDR
23240: GO 23824
23242: LD_INT 4
23244: DOUBLE
23245: GREATEREQUAL
23246: IFFALSE 23254
23248: LD_INT 9
23250: DOUBLE
23251: LESSEQUAL
23252: IFTRUE 23256
23254: GO 23316
23256: POP
// begin bc_type := b_lab_half ;
23257: LD_ADDR_OWVAR 42
23261: PUSH
23262: LD_INT 7
23264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23265: LD_ADDR_OWVAR 44
23269: PUSH
23270: LD_INT 10
23272: PUSH
23273: LD_INT 11
23275: PUSH
23276: LD_INT 12
23278: PUSH
23279: LD_INT 15
23281: PUSH
23282: LD_INT 14
23284: PUSH
23285: LD_INT 13
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: PUSH
23296: LD_VAR 0 2
23300: PUSH
23301: LD_INT 3
23303: MINUS
23304: ARRAY
23305: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23306: LD_ADDR_OWVAR 45
23310: PUSH
23311: LD_INT 9
23313: ST_TO_ADDR
// end ; 10 .. 13 :
23314: GO 23824
23316: LD_INT 10
23318: DOUBLE
23319: GREATEREQUAL
23320: IFFALSE 23328
23322: LD_INT 13
23324: DOUBLE
23325: LESSEQUAL
23326: IFTRUE 23330
23328: GO 23407
23330: POP
// begin bc_type := b_lab_full ;
23331: LD_ADDR_OWVAR 42
23335: PUSH
23336: LD_INT 8
23338: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23339: LD_ADDR_OWVAR 44
23343: PUSH
23344: LD_INT 10
23346: PUSH
23347: LD_INT 12
23349: PUSH
23350: LD_INT 14
23352: PUSH
23353: LD_INT 13
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: LD_INT 9
23369: MINUS
23370: ARRAY
23371: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23372: LD_ADDR_OWVAR 45
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 15
23382: PUSH
23383: LD_INT 12
23385: PUSH
23386: LD_INT 15
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_VAR 0 2
23399: PUSH
23400: LD_INT 9
23402: MINUS
23403: ARRAY
23404: ST_TO_ADDR
// end ; 14 :
23405: GO 23824
23407: LD_INT 14
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_workshop ; 15 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 2
23423: ST_TO_ADDR
23424: GO 23824
23426: LD_INT 15
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_factory ; 16 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 3
23442: ST_TO_ADDR
23443: GO 23824
23445: LD_INT 16
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_ext_gun ; 17 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 17
23461: ST_TO_ADDR
23462: GO 23824
23464: LD_INT 17
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23500
23472: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 23
23483: PUSH
23484: LD_INT 19
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: PUSH
23492: LD_VAR 0 1
23496: ARRAY
23497: ST_TO_ADDR
23498: GO 23824
23500: LD_INT 18
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23519
23508: POP
// bc_type := b_ext_radar ; 19 :
23509: LD_ADDR_OWVAR 42
23513: PUSH
23514: LD_INT 20
23516: ST_TO_ADDR
23517: GO 23824
23519: LD_INT 19
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23538
23527: POP
// bc_type := b_ext_radio ; 20 :
23528: LD_ADDR_OWVAR 42
23532: PUSH
23533: LD_INT 22
23535: ST_TO_ADDR
23536: GO 23824
23538: LD_INT 20
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23557
23546: POP
// bc_type := b_ext_siberium ; 21 :
23547: LD_ADDR_OWVAR 42
23551: PUSH
23552: LD_INT 21
23554: ST_TO_ADDR
23555: GO 23824
23557: LD_INT 21
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// bc_type := b_ext_computer ; 22 :
23566: LD_ADDR_OWVAR 42
23570: PUSH
23571: LD_INT 24
23573: ST_TO_ADDR
23574: GO 23824
23576: LD_INT 22
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23595
23584: POP
// bc_type := b_ext_track ; 23 :
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 16
23592: ST_TO_ADDR
23593: GO 23824
23595: LD_INT 23
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23614
23603: POP
// bc_type := b_ext_laser ; 24 :
23604: LD_ADDR_OWVAR 42
23608: PUSH
23609: LD_INT 25
23611: ST_TO_ADDR
23612: GO 23824
23614: LD_INT 24
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23633
23622: POP
// bc_type := b_control_tower ; 25 :
23623: LD_ADDR_OWVAR 42
23627: PUSH
23628: LD_INT 36
23630: ST_TO_ADDR
23631: GO 23824
23633: LD_INT 25
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23652
23641: POP
// bc_type := b_breastwork ; 26 :
23642: LD_ADDR_OWVAR 42
23646: PUSH
23647: LD_INT 31
23649: ST_TO_ADDR
23650: GO 23824
23652: LD_INT 26
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23671
23660: POP
// bc_type := b_bunker ; 27 :
23661: LD_ADDR_OWVAR 42
23665: PUSH
23666: LD_INT 32
23668: ST_TO_ADDR
23669: GO 23824
23671: LD_INT 27
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23690
23679: POP
// bc_type := b_turret ; 28 :
23680: LD_ADDR_OWVAR 42
23684: PUSH
23685: LD_INT 33
23687: ST_TO_ADDR
23688: GO 23824
23690: LD_INT 28
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23709
23698: POP
// bc_type := b_armoury ; 29 :
23699: LD_ADDR_OWVAR 42
23703: PUSH
23704: LD_INT 4
23706: ST_TO_ADDR
23707: GO 23824
23709: LD_INT 29
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23728
23717: POP
// bc_type := b_barracks ; 30 :
23718: LD_ADDR_OWVAR 42
23722: PUSH
23723: LD_INT 5
23725: ST_TO_ADDR
23726: GO 23824
23728: LD_INT 30
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23747
23736: POP
// bc_type := b_solar_power ; 31 :
23737: LD_ADDR_OWVAR 42
23741: PUSH
23742: LD_INT 27
23744: ST_TO_ADDR
23745: GO 23824
23747: LD_INT 31
23749: DOUBLE
23750: EQUAL
23751: IFTRUE 23755
23753: GO 23766
23755: POP
// bc_type := b_oil_power ; 32 :
23756: LD_ADDR_OWVAR 42
23760: PUSH
23761: LD_INT 26
23763: ST_TO_ADDR
23764: GO 23824
23766: LD_INT 32
23768: DOUBLE
23769: EQUAL
23770: IFTRUE 23774
23772: GO 23785
23774: POP
// bc_type := b_siberite_power ; 33 :
23775: LD_ADDR_OWVAR 42
23779: PUSH
23780: LD_INT 28
23782: ST_TO_ADDR
23783: GO 23824
23785: LD_INT 33
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 23804
23793: POP
// bc_type := b_oil_mine ; 34 :
23794: LD_ADDR_OWVAR 42
23798: PUSH
23799: LD_INT 29
23801: ST_TO_ADDR
23802: GO 23824
23804: LD_INT 34
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23823
23812: POP
// bc_type := b_siberite_mine ; end ;
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 30
23820: ST_TO_ADDR
23821: GO 23824
23823: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23824: LD_ADDR_VAR 0 8
23828: PUSH
23829: LD_VAR 0 5
23833: PPUSH
23834: LD_VAR 0 6
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: CALL_OW 47
23848: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23849: LD_OWVAR 42
23853: PUSH
23854: LD_INT 32
23856: PUSH
23857: LD_INT 33
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: IN
23864: IFFALSE 23880
// PlaceWeaponTurret ( b , weapon ) ;
23866: LD_VAR 0 8
23870: PPUSH
23871: LD_VAR 0 4
23875: PPUSH
23876: CALL_OW 431
// end ;
23880: LD_VAR 0 7
23884: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23885: LD_INT 0
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23891: LD_ADDR_VAR 0 4
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 30
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 4
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24013
// for i in tmp do
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: LD_VAR 0 4
23963: PUSH
23964: FOR_IN
23965: IFFALSE 24011
// for j = 1 to 3 do
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: DOUBLE
23973: LD_INT 1
23975: DEC
23976: ST_TO_ADDR
23977: LD_INT 3
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24007
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23983: LD_VAR 0 2
23987: PPUSH
23988: CALL_OW 274
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: LD_INT 99999
24000: PPUSH
24001: CALL_OW 277
24005: GO 23980
24007: POP
24008: POP
24009: GO 23964
24011: POP
24012: POP
// end ;
24013: LD_VAR 0 1
24017: RET
// export function hHackSetLevel10 ; var i , j ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_INT 21
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PUSH
24043: FOR_IN
24044: IFFALSE 24096
// if IsSelected ( i ) then
24046: LD_VAR 0 2
24050: PPUSH
24051: CALL_OW 306
24055: IFFALSE 24094
// begin for j := 1 to 4 do
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 4
24069: PUSH
24070: FOR_TO
24071: IFFALSE 24092
// SetSkill ( i , j , 10 ) ;
24073: LD_VAR 0 2
24077: PPUSH
24078: LD_VAR 0 3
24082: PPUSH
24083: LD_INT 10
24085: PPUSH
24086: CALL_OW 237
24090: GO 24070
24092: POP
24093: POP
// end ;
24094: GO 24043
24096: POP
24097: POP
// end ;
24098: LD_VAR 0 1
24102: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24103: LD_INT 0
24105: PPUSH
24106: PPUSH
24107: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 22
24115: PUSH
24116: LD_OWVAR 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24186
// begin for j := 1 to 4 do
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: DOUBLE
24153: LD_INT 1
24155: DEC
24156: ST_TO_ADDR
24157: LD_INT 4
24159: PUSH
24160: FOR_TO
24161: IFFALSE 24182
// SetSkill ( i , j , 10 ) ;
24163: LD_VAR 0 2
24167: PPUSH
24168: LD_VAR 0 3
24172: PPUSH
24173: LD_INT 10
24175: PPUSH
24176: CALL_OW 237
24180: GO 24160
24182: POP
24183: POP
// end ;
24184: GO 24144
24186: POP
24187: POP
// end ;
24188: LD_VAR 0 1
24192: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24193: LD_INT 0
24195: PPUSH
// uc_side := your_side ;
24196: LD_ADDR_OWVAR 20
24200: PUSH
24201: LD_OWVAR 2
24205: ST_TO_ADDR
// uc_nation := nation ;
24206: LD_ADDR_OWVAR 21
24210: PUSH
24211: LD_VAR 0 1
24215: ST_TO_ADDR
// InitHc ;
24216: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24220: LD_INT 0
24222: PPUSH
24223: LD_VAR 0 2
24227: PPUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24237: LD_VAR 0 4
24241: PPUSH
24242: LD_VAR 0 5
24246: PPUSH
24247: CALL_OW 428
24251: PUSH
24252: LD_INT 0
24254: EQUAL
24255: IFFALSE 24279
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24257: CALL_OW 44
24261: PPUSH
24262: LD_VAR 0 4
24266: PPUSH
24267: LD_VAR 0 5
24271: PPUSH
24272: LD_INT 1
24274: PPUSH
24275: CALL_OW 48
// end ;
24279: LD_VAR 0 6
24283: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
// uc_side := your_side ;
24288: LD_ADDR_OWVAR 20
24292: PUSH
24293: LD_OWVAR 2
24297: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24298: LD_VAR 0 1
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: LD_INT 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: IN
24325: IFFALSE 24337
// uc_nation := nation_american else
24327: LD_ADDR_OWVAR 21
24331: PUSH
24332: LD_INT 1
24334: ST_TO_ADDR
24335: GO 24380
// if chassis in [ 11 , 12 , 13 , 14 ] then
24337: LD_VAR 0 1
24341: PUSH
24342: LD_INT 11
24344: PUSH
24345: LD_INT 12
24347: PUSH
24348: LD_INT 13
24350: PUSH
24351: LD_INT 14
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: IN
24360: IFFALSE 24372
// uc_nation := nation_arabian else
24362: LD_ADDR_OWVAR 21
24366: PUSH
24367: LD_INT 2
24369: ST_TO_ADDR
24370: GO 24380
// uc_nation := nation_russian ;
24372: LD_ADDR_OWVAR 21
24376: PUSH
24377: LD_INT 3
24379: ST_TO_ADDR
// vc_chassis := chassis ;
24380: LD_ADDR_OWVAR 37
24384: PUSH
24385: LD_VAR 0 1
24389: ST_TO_ADDR
// vc_engine := engine ;
24390: LD_ADDR_OWVAR 39
24394: PUSH
24395: LD_VAR 0 2
24399: ST_TO_ADDR
// vc_control := control ;
24400: LD_ADDR_OWVAR 38
24404: PUSH
24405: LD_VAR 0 3
24409: ST_TO_ADDR
// vc_weapon := weapon ;
24410: LD_ADDR_OWVAR 40
24414: PUSH
24415: LD_VAR 0 4
24419: ST_TO_ADDR
// un := CreateVehicle ;
24420: LD_ADDR_VAR 0 8
24424: PUSH
24425: CALL_OW 45
24429: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24430: LD_VAR 0 8
24434: PPUSH
24435: LD_INT 0
24437: PPUSH
24438: LD_INT 5
24440: PPUSH
24441: CALL_OW 12
24445: PPUSH
24446: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24450: LD_VAR 0 8
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: LD_VAR 0 6
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 48
// end ;
24472: LD_VAR 0 7
24476: RET
// export hInvincible ; every 1 do
24477: GO 24479
24479: DISABLE
// hInvincible := [ ] ;
24480: LD_ADDR_EXP 84
24484: PUSH
24485: EMPTY
24486: ST_TO_ADDR
24487: END
// every 10 do var i ;
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
// begin enable ;
24494: ENABLE
// if not hInvincible then
24495: LD_EXP 84
24499: NOT
24500: IFFALSE 24504
// exit ;
24502: GO 24548
// for i in hInvincible do
24504: LD_ADDR_VAR 0 1
24508: PUSH
24509: LD_EXP 84
24513: PUSH
24514: FOR_IN
24515: IFFALSE 24546
// if GetLives ( i ) < 1000 then
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 256
24526: PUSH
24527: LD_INT 1000
24529: LESS
24530: IFFALSE 24544
// SetLives ( i , 1000 ) ;
24532: LD_VAR 0 1
24536: PPUSH
24537: LD_INT 1000
24539: PPUSH
24540: CALL_OW 234
24544: GO 24514
24546: POP
24547: POP
// end ;
24548: PPOPN 1
24550: END
// export function hHackInvincible ; var i ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 21
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: PUSH
24593: FOR_IN
24594: IFFALSE 24655
// if IsSelected ( i ) then
24596: LD_VAR 0 2
24600: PPUSH
24601: CALL_OW 306
24605: IFFALSE 24653
// begin if i in hInvincible then
24607: LD_VAR 0 2
24611: PUSH
24612: LD_EXP 84
24616: IN
24617: IFFALSE 24637
// hInvincible := hInvincible diff i else
24619: LD_ADDR_EXP 84
24623: PUSH
24624: LD_EXP 84
24628: PUSH
24629: LD_VAR 0 2
24633: DIFF
24634: ST_TO_ADDR
24635: GO 24653
// hInvincible := hInvincible union i ;
24637: LD_ADDR_EXP 84
24641: PUSH
24642: LD_EXP 84
24646: PUSH
24647: LD_VAR 0 2
24651: UNION
24652: ST_TO_ADDR
// end ;
24653: GO 24593
24655: POP
24656: POP
// end ;
24657: LD_VAR 0 1
24661: RET
// export function hHackInvisible ; var i , j ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
24666: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_INT 21
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24712
// if IsSelected ( i ) then
24690: LD_VAR 0 2
24694: PPUSH
24695: CALL_OW 306
24699: IFFALSE 24710
// ComForceInvisible ( i ) ;
24701: LD_VAR 0 2
24705: PPUSH
24706: CALL_OW 496
24710: GO 24687
24712: POP
24713: POP
// end ;
24714: LD_VAR 0 1
24718: RET
// export function hHackChangeYourSide ; begin
24719: LD_INT 0
24721: PPUSH
// if your_side = 8 then
24722: LD_OWVAR 2
24726: PUSH
24727: LD_INT 8
24729: EQUAL
24730: IFFALSE 24742
// your_side := 0 else
24732: LD_ADDR_OWVAR 2
24736: PUSH
24737: LD_INT 0
24739: ST_TO_ADDR
24740: GO 24756
// your_side := your_side + 1 ;
24742: LD_ADDR_OWVAR 2
24746: PUSH
24747: LD_OWVAR 2
24751: PUSH
24752: LD_INT 1
24754: PLUS
24755: ST_TO_ADDR
// end ;
24756: LD_VAR 0 1
24760: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24761: LD_INT 0
24763: PPUSH
24764: PPUSH
24765: PPUSH
// for i in all_units do
24766: LD_ADDR_VAR 0 2
24770: PUSH
24771: LD_OWVAR 3
24775: PUSH
24776: FOR_IN
24777: IFFALSE 24855
// if IsSelected ( i ) then
24779: LD_VAR 0 2
24783: PPUSH
24784: CALL_OW 306
24788: IFFALSE 24853
// begin j := GetSide ( i ) ;
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_VAR 0 2
24799: PPUSH
24800: CALL_OW 255
24804: ST_TO_ADDR
// if j = 8 then
24805: LD_VAR 0 3
24809: PUSH
24810: LD_INT 8
24812: EQUAL
24813: IFFALSE 24825
// j := 0 else
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: LD_INT 0
24822: ST_TO_ADDR
24823: GO 24839
// j := j + 1 ;
24825: LD_ADDR_VAR 0 3
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 1
24837: PLUS
24838: ST_TO_ADDR
// SetSide ( i , j ) ;
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_VAR 0 3
24848: PPUSH
24849: CALL_OW 235
// end ;
24853: GO 24776
24855: POP
24856: POP
// end ;
24857: LD_VAR 0 1
24861: RET
// export function hHackFog ; begin
24862: LD_INT 0
24864: PPUSH
// FogOff ( true ) ;
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 344
// end ;
24872: LD_VAR 0 1
24876: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24877: LD_INT 0
24879: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_VAR 0 2
24889: PPUSH
24890: LD_VAR 0 3
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: LD_INT 1
24900: PPUSH
24901: CALL_OW 483
// CenterOnXY ( x , y ) ;
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_VAR 0 3
24914: PPUSH
24915: CALL_OW 84
// end ;
24919: LD_VAR 0 4
24923: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24924: LD_INT 0
24926: PPUSH
24927: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24928: LD_VAR 0 1
24932: NOT
24933: IFTRUE 24952
24935: PUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: LD_VAR 0 3
24945: PPUSH
24946: CALL_OW 488
24950: NOT
24951: OR
24952: IFTRUE 24987
24954: PUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 266
24964: PUSH
24965: LD_INT 3
24967: NONEQUAL
24968: IFFALSE 24986
24970: PUSH
24971: LD_VAR 0 1
24975: PPUSH
24976: CALL_OW 247
24980: PUSH
24981: LD_INT 1
24983: EQUAL
24984: NOT
24985: AND
24986: OR
24987: IFFALSE 24991
// exit ;
24989: GO 25273
// if GetType ( factory ) = unit_human then
24991: LD_VAR 0 1
24995: PPUSH
24996: CALL_OW 247
25000: PUSH
25001: LD_INT 1
25003: EQUAL
25004: IFFALSE 25021
// factory := IsInUnit ( factory ) ;
25006: LD_ADDR_VAR 0 1
25010: PUSH
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 310
25020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 266
25030: PUSH
25031: LD_INT 3
25033: NONEQUAL
25034: IFFALSE 25038
// exit ;
25036: GO 25273
// for i := 1 to Count ( factoryWaypoints ) do
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: DOUBLE
25044: LD_INT 1
25046: DEC
25047: ST_TO_ADDR
25048: LD_EXP 85
25052: PPUSH
25053: CALL 34806 0 1
25057: PUSH
25058: FOR_TO
25059: IFFALSE 25221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: CALL_OW 428
25075: PUSH
25076: LD_EXP 85
25080: PUSH
25081: LD_VAR 0 5
25085: ARRAY
25086: PUSH
25087: LD_INT 2
25089: ARRAY
25090: EQUAL
25091: IFFALSE 25123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25093: LD_ADDR_EXP 85
25097: PUSH
25098: LD_EXP 85
25102: PPUSH
25103: LD_VAR 0 5
25107: PPUSH
25108: CALL_OW 3
25112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25113: CALL 25278 0 0
// exit ;
25117: POP
25118: POP
25119: GO 25273
// end else
25121: GO 25219
// if factory = factoryWaypoints [ i ] [ 2 ] then
25123: LD_VAR 0 1
25127: PUSH
25128: LD_EXP 85
25132: PUSH
25133: LD_VAR 0 5
25137: ARRAY
25138: PUSH
25139: LD_INT 2
25141: ARRAY
25142: EQUAL
25143: IFFALSE 25219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25145: LD_ADDR_EXP 85
25149: PUSH
25150: LD_EXP 85
25154: PPUSH
25155: LD_VAR 0 5
25159: PPUSH
25160: CALL_OW 3
25164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25165: LD_ADDR_EXP 85
25169: PUSH
25170: LD_EXP 85
25174: PPUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL_OW 255
25184: PUSH
25185: LD_VAR 0 1
25189: PUSH
25190: LD_VAR 0 2
25194: PUSH
25195: LD_VAR 0 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL 70738 0 2
25210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25211: CALL 25278 0 0
// exit ;
25215: POP
25216: POP
25217: GO 25273
// end ; end ;
25219: GO 25058
25221: POP
25222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25223: LD_ADDR_EXP 85
25227: PUSH
25228: LD_EXP 85
25232: PPUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 255
25242: PUSH
25243: LD_VAR 0 1
25247: PUSH
25248: LD_VAR 0 2
25252: PUSH
25253: LD_VAR 0 3
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL 70738 0 2
25268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25269: CALL 25278 0 0
// end ;
25273: LD_VAR 0 4
25277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25283: LD_STRING resetFactoryWaypoint();
25285: PPUSH
25286: CALL_OW 559
// if factoryWaypoints then
25290: LD_EXP 85
25294: IFFALSE 25415
// begin list := factoryWaypoints ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_EXP 85
25305: ST_TO_ADDR
// for i := 1 to list do
25306: LD_ADDR_VAR 0 2
25310: PUSH
25311: DOUBLE
25312: LD_INT 1
25314: DEC
25315: ST_TO_ADDR
25316: LD_VAR 0 3
25320: PUSH
25321: FOR_TO
25322: IFFALSE 25413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25324: LD_STRING setFactoryWaypointXY(
25326: PUSH
25327: LD_VAR 0 3
25331: PUSH
25332: LD_VAR 0 2
25336: ARRAY
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: STR
25342: PUSH
25343: LD_STRING ,
25345: STR
25346: PUSH
25347: LD_VAR 0 3
25351: PUSH
25352: LD_VAR 0 2
25356: ARRAY
25357: PUSH
25358: LD_INT 2
25360: ARRAY
25361: STR
25362: PUSH
25363: LD_STRING ,
25365: STR
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 2
25376: ARRAY
25377: PUSH
25378: LD_INT 3
25380: ARRAY
25381: STR
25382: PUSH
25383: LD_STRING ,
25385: STR
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: LD_VAR 0 2
25396: ARRAY
25397: PUSH
25398: LD_INT 4
25400: ARRAY
25401: STR
25402: PUSH
25403: LD_STRING )
25405: STR
25406: PPUSH
25407: CALL_OW 559
25411: GO 25321
25413: POP
25414: POP
// end ; end ;
25415: LD_VAR 0 1
25419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25420: LD_INT 0
25422: PPUSH
// if HexInfo ( x , y ) = warehouse then
25423: LD_VAR 0 2
25427: PPUSH
25428: LD_VAR 0 3
25432: PPUSH
25433: CALL_OW 428
25437: PUSH
25438: LD_VAR 0 1
25442: EQUAL
25443: IFFALSE 25470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25445: LD_ADDR_EXP 87
25449: PUSH
25450: LD_EXP 87
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: LD_INT 0
25462: PPUSH
25463: CALL_OW 1
25467: ST_TO_ADDR
25468: GO 25521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25470: LD_ADDR_EXP 87
25474: PUSH
25475: LD_EXP 87
25479: PPUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 255
25494: PUSH
25495: LD_VAR 0 1
25499: PUSH
25500: LD_VAR 0 2
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 1
25520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25521: CALL 25530 0 0
// end ;
25525: LD_VAR 0 4
25529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25530: LD_INT 0
25532: PPUSH
25533: PPUSH
25534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25535: LD_STRING resetWarehouseGatheringPoints();
25537: PPUSH
25538: CALL_OW 559
// if warehouseGatheringPoints then
25542: LD_EXP 87
25546: IFFALSE 25672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_EXP 87
25557: PPUSH
25558: CALL 74672 0 1
25562: ST_TO_ADDR
// for i := 1 to list do
25563: LD_ADDR_VAR 0 2
25567: PUSH
25568: DOUBLE
25569: LD_INT 1
25571: DEC
25572: ST_TO_ADDR
25573: LD_VAR 0 3
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25581: LD_STRING setWarehouseGatheringPointXY(
25583: PUSH
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 2
25593: ARRAY
25594: PUSH
25595: LD_INT 1
25597: ARRAY
25598: STR
25599: PUSH
25600: LD_STRING ,
25602: STR
25603: PUSH
25604: LD_VAR 0 3
25608: PUSH
25609: LD_VAR 0 2
25613: ARRAY
25614: PUSH
25615: LD_INT 2
25617: ARRAY
25618: STR
25619: PUSH
25620: LD_STRING ,
25622: STR
25623: PUSH
25624: LD_VAR 0 3
25628: PUSH
25629: LD_VAR 0 2
25633: ARRAY
25634: PUSH
25635: LD_INT 3
25637: ARRAY
25638: STR
25639: PUSH
25640: LD_STRING ,
25642: STR
25643: PUSH
25644: LD_VAR 0 3
25648: PUSH
25649: LD_VAR 0 2
25653: ARRAY
25654: PUSH
25655: LD_INT 4
25657: ARRAY
25658: STR
25659: PUSH
25660: LD_STRING )
25662: STR
25663: PPUSH
25664: CALL_OW 559
25668: GO 25578
25670: POP
25671: POP
// end ; end ;
25672: LD_VAR 0 1
25676: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25677: LD_EXP 87
25681: IFFALSE 26376
25683: GO 25685
25685: DISABLE
25686: LD_INT 0
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
// begin enable ;
25697: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_EXP 87
25707: PPUSH
25708: CALL 74672 0 1
25712: ST_TO_ADDR
// if not list then
25713: LD_VAR 0 3
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 26376
// for i := 1 to list do
25722: LD_ADDR_VAR 0 1
25726: PUSH
25727: DOUBLE
25728: LD_INT 1
25730: DEC
25731: ST_TO_ADDR
25732: LD_VAR 0 3
25736: PUSH
25737: FOR_TO
25738: IFFALSE 26374
// begin depot := list [ i ] [ 2 ] ;
25740: LD_ADDR_VAR 0 8
25744: PUSH
25745: LD_VAR 0 3
25749: PUSH
25750: LD_VAR 0 1
25754: ARRAY
25755: PUSH
25756: LD_INT 2
25758: ARRAY
25759: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25760: LD_ADDR_VAR 0 5
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 1
25774: ARRAY
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25780: LD_VAR 0 8
25784: PPUSH
25785: CALL_OW 301
25789: IFTRUE 25808
25791: PUSH
25792: LD_VAR 0 5
25796: PUSH
25797: LD_VAR 0 8
25801: PPUSH
25802: CALL_OW 255
25806: NONEQUAL
25807: OR
25808: IFFALSE 25837
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25810: LD_ADDR_EXP 87
25814: PUSH
25815: LD_EXP 87
25819: PPUSH
25820: LD_VAR 0 8
25824: PPUSH
25825: LD_INT 0
25827: PPUSH
25828: CALL_OW 1
25832: ST_TO_ADDR
// exit ;
25833: POP
25834: POP
25835: GO 26376
// end ; x := list [ i ] [ 3 ] ;
25837: LD_ADDR_VAR 0 6
25841: PUSH
25842: LD_VAR 0 3
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: PUSH
25853: LD_INT 3
25855: ARRAY
25856: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25857: LD_ADDR_VAR 0 7
25861: PUSH
25862: LD_VAR 0 3
25866: PUSH
25867: LD_VAR 0 1
25871: ARRAY
25872: PUSH
25873: LD_INT 4
25875: ARRAY
25876: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25877: LD_ADDR_VAR 0 9
25881: PUSH
25882: LD_VAR 0 6
25886: PPUSH
25887: LD_VAR 0 7
25891: PPUSH
25892: LD_INT 16
25894: PPUSH
25895: CALL 73246 0 3
25899: ST_TO_ADDR
// if not cratesNearbyPoint then
25900: LD_VAR 0 9
25904: NOT
25905: IFFALSE 25911
// exit ;
25907: POP
25908: POP
25909: GO 26376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25911: LD_ADDR_VAR 0 4
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_VAR 0 5
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: LD_INT 60
25933: PUSH
25934: EMPTY
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 91
25943: PUSH
25944: LD_VAR 0 8
25948: PUSH
25949: LD_INT 6
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 25
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 25
25972: PUSH
25973: LD_INT 16
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: PUSH
25996: LD_VAR 0 8
26000: PPUSH
26001: CALL_OW 313
26005: PPUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 60
26011: PUSH
26012: EMPTY
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 25
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 25
26034: PUSH
26035: LD_INT 16
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PPUSH
26051: CALL_OW 72
26055: UNION
26056: ST_TO_ADDR
// if tmp then
26057: LD_VAR 0 4
26061: IFFALSE 26141
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_VAR 0 4
26072: PPUSH
26073: LD_INT 3
26075: PPUSH
26076: CALL 71053 0 2
26080: ST_TO_ADDR
// for j in tmp do
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: LD_VAR 0 4
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26135
// begin if IsInUnit ( j ) then
26094: LD_VAR 0 2
26098: PPUSH
26099: CALL_OW 310
26103: IFFALSE 26114
// ComExit ( j ) ;
26105: LD_VAR 0 2
26109: PPUSH
26110: CALL 71136 0 1
// AddComCollect ( j , x , y ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 6
26123: PPUSH
26124: LD_VAR 0 7
26128: PPUSH
26129: CALL_OW 177
// end ;
26133: GO 26091
26135: POP
26136: POP
// exit ;
26137: POP
26138: POP
26139: GO 26376
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26141: LD_ADDR_VAR 0 4
26145: PUSH
26146: LD_INT 22
26148: PUSH
26149: LD_VAR 0 5
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 91
26160: PUSH
26161: LD_VAR 0 8
26165: PUSH
26166: LD_INT 8
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 34
26179: PUSH
26180: LD_INT 12
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: LD_INT 51
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 34
26199: PUSH
26200: LD_INT 32
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 89
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: PPUSH
26229: CALL_OW 69
26233: ST_TO_ADDR
// if tmp then
26234: LD_VAR 0 4
26238: IFFALSE 26372
// begin for j in tmp do
26240: LD_ADDR_VAR 0 2
26244: PUSH
26245: LD_VAR 0 4
26249: PUSH
26250: FOR_IN
26251: IFFALSE 26370
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26253: LD_VAR 0 2
26257: PPUSH
26258: CALL_OW 262
26262: PUSH
26263: LD_INT 3
26265: EQUAL
26266: IFTRUE 26283
26268: PUSH
26269: LD_VAR 0 2
26273: PPUSH
26274: CALL_OW 261
26278: PUSH
26279: LD_INT 20
26281: GREATER
26282: OR
26283: IFFALSE 26297
26285: PUSH
26286: LD_VAR 0 2
26290: PPUSH
26291: CALL_OW 314
26295: NOT
26296: AND
26297: IFFALSE 26327
26299: PUSH
26300: LD_VAR 0 2
26304: PPUSH
26305: CALL_OW 263
26309: PUSH
26310: LD_INT 1
26312: NONEQUAL
26313: IFTRUE 26326
26315: PUSH
26316: LD_VAR 0 2
26320: PPUSH
26321: CALL_OW 311
26325: OR
26326: AND
26327: IFFALSE 26368
// begin ComCollect ( j , x , y ) ;
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 6
26338: PPUSH
26339: LD_VAR 0 7
26343: PPUSH
26344: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26348: LD_VAR 0 2
26352: PPUSH
26353: LD_VAR 0 8
26357: PPUSH
26358: CALL_OW 172
// exit ;
26362: POP
26363: POP
26364: POP
26365: POP
26366: GO 26376
// end ;
26368: GO 26250
26370: POP
26371: POP
// end ; end ;
26372: GO 25737
26374: POP
26375: POP
// end ; end_of_file end_of_file
26376: PPOPN 9
26378: END
// export function SOS_UnitDestroyed ( un ) ; begin
26379: LD_INT 0
26381: PPUSH
// ComRadiation ( un ) ;
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL 27468 0 1
// end ;
26391: LD_VAR 0 2
26395: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26396: LD_INT 0
26398: PPUSH
// ComRadiation ( un ) ;
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL 27468 0 1
// end ;
26408: LD_VAR 0 2
26412: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26413: LD_INT 0
26415: PPUSH
// end ;
26416: LD_VAR 0 4
26420: RET
// export function SOS_Command ( cmd ) ; begin
26421: LD_INT 0
26423: PPUSH
// end ;
26424: LD_VAR 0 2
26428: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26429: LD_INT 0
26431: PPUSH
// end ;
26432: LD_VAR 0 6
26436: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
// if not vehicle or not factory then
26443: LD_VAR 0 1
26447: NOT
26448: IFTRUE 26457
26450: PUSH
26451: LD_VAR 0 2
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 27043
// if not factoryWaypoints then
26461: LD_EXP 85
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 27043
// for i := 1 to Count ( factoryWaypoints ) do
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: DOUBLE
26476: LD_INT 1
26478: DEC
26479: ST_TO_ADDR
26480: LD_EXP 85
26484: PPUSH
26485: CALL 34806 0 1
26489: PUSH
26490: FOR_TO
26491: IFFALSE 27041
// if factoryWaypoints [ i ] [ 2 ] = factory then
26493: LD_EXP 85
26497: PUSH
26498: LD_VAR 0 4
26502: ARRAY
26503: PUSH
26504: LD_INT 2
26506: ARRAY
26507: PUSH
26508: LD_VAR 0 2
26512: EQUAL
26513: IFFALSE 27039
// begin if GetControl ( vehicle ) = control_manual then
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 263
26524: PUSH
26525: LD_INT 1
26527: EQUAL
26528: IFFALSE 26892
// begin driver := IsDrivenBy ( vehicle ) ;
26530: LD_ADDR_VAR 0 5
26534: PUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 311
26544: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
26545: LD_VAR 0 5
26549: PUSH
26550: LD_EXP 86
26554: IN
26555: IFTRUE 26569
26557: PUSH
26558: LD_VAR 0 1
26562: PUSH
26563: LD_EXP 86
26567: IN
26568: OR
26569: IFFALSE 26575
// exit ;
26571: POP
26572: POP
26573: GO 27043
// if not HasTask ( driver ) then
26575: LD_VAR 0 5
26579: PPUSH
26580: CALL_OW 314
26584: NOT
26585: IFFALSE 26890
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
26587: LD_ADDR_EXP 86
26591: PUSH
26592: LD_EXP 86
26596: PPUSH
26597: LD_VAR 0 5
26601: PPUSH
26602: CALL 70738 0 2
26606: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
26607: LD_ADDR_EXP 86
26611: PUSH
26612: LD_EXP 86
26616: PPUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL 70738 0 2
26626: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26627: LD_ADDR_VAR 0 6
26631: PUSH
26632: LD_EXP 85
26636: PUSH
26637: LD_VAR 0 4
26641: ARRAY
26642: PUSH
26643: LD_INT 3
26645: ARRAY
26646: PPUSH
26647: LD_EXP 85
26651: PUSH
26652: LD_VAR 0 4
26656: ARRAY
26657: PUSH
26658: LD_INT 4
26660: ARRAY
26661: PPUSH
26662: CALL_OW 428
26666: ST_TO_ADDR
// if hex then
26667: LD_VAR 0 6
26671: IFFALSE 26689
// ComMoveUnit ( driver , hex ) else
26673: LD_VAR 0 5
26677: PPUSH
26678: LD_VAR 0 6
26682: PPUSH
26683: CALL_OW 112
26687: GO 26773
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
26689: LD_VAR 0 1
26693: PPUSH
26694: LD_EXP 85
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: PUSH
26705: LD_INT 3
26707: ARRAY
26708: PPUSH
26709: LD_EXP 85
26713: PUSH
26714: LD_VAR 0 4
26718: ARRAY
26719: PUSH
26720: LD_INT 4
26722: ARRAY
26723: PPUSH
26724: CALL_OW 297
26728: PUSH
26729: LD_INT 0
26731: GREATER
26732: IFFALSE 26773
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26734: LD_VAR 0 5
26738: PPUSH
26739: LD_EXP 85
26743: PUSH
26744: LD_VAR 0 4
26748: ARRAY
26749: PUSH
26750: LD_INT 3
26752: ARRAY
26753: PPUSH
26754: LD_EXP 85
26758: PUSH
26759: LD_VAR 0 4
26763: ARRAY
26764: PUSH
26765: LD_INT 4
26767: ARRAY
26768: PPUSH
26769: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26773: LD_VAR 0 5
26777: PPUSH
26778: CALL_OW 181
// if Multiplayer then
26782: LD_OWVAR 4
26786: IFFALSE 26835
// begin repeat wait ( 10 ) ;
26788: LD_INT 10
26790: PPUSH
26791: CALL_OW 67
// until not IsInUnit ( driver ) ;
26795: LD_VAR 0 5
26799: PPUSH
26800: CALL_OW 310
26804: NOT
26805: IFFALSE 26788
// if not HasTask ( driver ) then
26807: LD_VAR 0 5
26811: PPUSH
26812: CALL_OW 314
26816: NOT
26817: IFFALSE 26833
// ComEnterUnit ( driver , factory ) ;
26819: LD_VAR 0 5
26823: PPUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: CALL_OW 120
// end else
26833: GO 26849
// AddComEnterUnit ( driver , factory ) ;
26835: LD_VAR 0 5
26839: PPUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 180
// wait ( 0 0$1 ) ;
26849: LD_INT 35
26851: PPUSH
26852: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
26856: LD_ADDR_EXP 86
26860: PUSH
26861: LD_EXP 86
26865: PUSH
26866: LD_VAR 0 5
26870: DIFF
26871: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
26872: LD_ADDR_EXP 86
26876: PUSH
26877: LD_EXP 86
26881: PUSH
26882: LD_VAR 0 1
26886: DIFF
26887: ST_TO_ADDR
// break ;
26888: GO 27041
// end ; end else
26890: GO 27039
// if GetControl ( vehicle ) = control_remote then
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 263
26901: PUSH
26902: LD_INT 2
26904: EQUAL
26905: IFFALSE 26991
// begin wait ( 0 0$2 ) ;
26907: LD_INT 70
26909: PPUSH
26910: CALL_OW 67
// repeat wait ( 10 ) ;
26914: LD_INT 10
26916: PPUSH
26917: CALL_OW 67
// Connect ( vehicle ) ;
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL 41050 0 1
// until IsControledBy ( vehicle ) ;
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 312
26939: IFFALSE 26914
// wait ( 10 ) ;
26941: LD_INT 10
26943: PPUSH
26944: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26948: LD_VAR 0 1
26952: PPUSH
26953: LD_EXP 85
26957: PUSH
26958: LD_VAR 0 4
26962: ARRAY
26963: PUSH
26964: LD_INT 3
26966: ARRAY
26967: PPUSH
26968: LD_EXP 85
26972: PUSH
26973: LD_VAR 0 4
26977: ARRAY
26978: PUSH
26979: LD_INT 4
26981: ARRAY
26982: PPUSH
26983: CALL_OW 111
// break ;
26987: GO 27041
// end else
26989: GO 27039
// begin wait ( 0 0$3 ) ;
26991: LD_INT 105
26993: PPUSH
26994: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26998: LD_VAR 0 1
27002: PPUSH
27003: LD_EXP 85
27007: PUSH
27008: LD_VAR 0 4
27012: ARRAY
27013: PUSH
27014: LD_INT 3
27016: ARRAY
27017: PPUSH
27018: LD_EXP 85
27022: PUSH
27023: LD_VAR 0 4
27027: ARRAY
27028: PUSH
27029: LD_INT 4
27031: ARRAY
27032: PPUSH
27033: CALL_OW 111
// break ;
27037: GO 27041
// end ; end ;
27039: GO 26490
27041: POP
27042: POP
// end ;
27043: LD_VAR 0 3
27047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27048: LD_INT 0
27050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 250
27058: EQUAL
27059: IFFALSE 27076
27061: PUSH
27062: LD_VAR 0 2
27066: PPUSH
27067: CALL_OW 264
27071: PUSH
27072: LD_INT 81
27074: EQUAL
27075: AND
27076: IFFALSE 27097
// MinerPlaceMine ( unit , x , y ) ;
27078: LD_VAR 0 2
27082: PPUSH
27083: LD_VAR 0 4
27087: PPUSH
27088: LD_VAR 0 5
27092: PPUSH
27093: CALL 30229 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27097: LD_VAR 0 1
27101: PUSH
27102: LD_INT 251
27104: EQUAL
27105: IFFALSE 27122
27107: PUSH
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 264
27117: PUSH
27118: LD_INT 81
27120: EQUAL
27121: AND
27122: IFFALSE 27143
// MinerDetonateMine ( unit , x , y ) ;
27124: LD_VAR 0 2
27128: PPUSH
27129: LD_VAR 0 4
27133: PPUSH
27134: LD_VAR 0 5
27138: PPUSH
27139: CALL 30508 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27143: LD_VAR 0 1
27147: PUSH
27148: LD_INT 252
27150: EQUAL
27151: IFFALSE 27168
27153: PUSH
27154: LD_VAR 0 2
27158: PPUSH
27159: CALL_OW 264
27163: PUSH
27164: LD_INT 81
27166: EQUAL
27167: AND
27168: IFFALSE 27189
// MinerCreateMinefield ( unit , x , y ) ;
27170: LD_VAR 0 2
27174: PPUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_VAR 0 5
27184: PPUSH
27185: CALL 30927 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27189: LD_VAR 0 1
27193: PUSH
27194: LD_INT 253
27196: EQUAL
27197: IFFALSE 27214
27199: PUSH
27200: LD_VAR 0 2
27204: PPUSH
27205: CALL_OW 257
27209: PUSH
27210: LD_INT 5
27212: EQUAL
27213: AND
27214: IFFALSE 27235
// ComBinocular ( unit , x , y ) ;
27216: LD_VAR 0 2
27220: PPUSH
27221: LD_VAR 0 4
27225: PPUSH
27226: LD_VAR 0 5
27230: PPUSH
27231: CALL 31302 0 3
// if selectedUnit then
27235: LD_VAR 0 3
27239: IFFALSE 27299
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27241: LD_VAR 0 1
27245: PUSH
27246: LD_INT 254
27248: EQUAL
27249: IFFALSE 27266
27251: PUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 264
27261: PUSH
27262: LD_INT 99
27264: EQUAL
27265: AND
27266: IFFALSE 27283
27268: PUSH
27269: LD_VAR 0 3
27273: PPUSH
27274: CALL_OW 263
27278: PUSH
27279: LD_INT 3
27281: EQUAL
27282: AND
27283: IFFALSE 27299
// HackDestroyVehicle ( unit , selectedUnit ) ;
27285: LD_VAR 0 2
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL 29589 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27299: LD_VAR 0 1
27303: PUSH
27304: LD_INT 255
27306: EQUAL
27307: IFFALSE 27331
27309: PUSH
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 264
27319: PUSH
27320: LD_INT 14
27322: PUSH
27323: LD_INT 53
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: IN
27330: AND
27331: IFFALSE 27349
27333: PUSH
27334: LD_VAR 0 4
27338: PPUSH
27339: LD_VAR 0 5
27343: PPUSH
27344: CALL_OW 488
27348: AND
27349: IFFALSE 27373
// CutTreeXYR ( unit , x , y , 12 ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_VAR 0 4
27360: PPUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: LD_INT 12
27368: PPUSH
27369: CALL 27564 0 4
// if cmd = 256 then
27373: LD_VAR 0 1
27377: PUSH
27378: LD_INT 256
27380: EQUAL
27381: IFFALSE 27402
// SetFactoryWaypoint ( unit , x , y ) ;
27383: LD_VAR 0 2
27387: PPUSH
27388: LD_VAR 0 4
27392: PPUSH
27393: LD_VAR 0 5
27397: PPUSH
27398: CALL 24924 0 3
// if cmd = 257 then
27402: LD_VAR 0 1
27406: PUSH
27407: LD_INT 257
27409: EQUAL
27410: IFFALSE 27431
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_VAR 0 4
27421: PPUSH
27422: LD_VAR 0 5
27426: PPUSH
27427: CALL 25420 0 3
// if cmd = 258 then
27431: LD_VAR 0 1
27435: PUSH
27436: LD_INT 258
27438: EQUAL
27439: IFFALSE 27463
// BurnTreeXYR ( unit , x , y , 8 ) ;
27441: LD_VAR 0 2
27445: PPUSH
27446: LD_VAR 0 4
27450: PPUSH
27451: LD_VAR 0 5
27455: PPUSH
27456: LD_INT 8
27458: PPUSH
27459: CALL 27964 0 4
// end ;
27463: LD_VAR 0 6
27467: RET
// export function ComRadiation ( un ) ; var eff ; begin
27468: LD_INT 0
27470: PPUSH
27471: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 264
27481: PUSH
27482: LD_INT 91
27484: NONEQUAL
27485: IFFALSE 27489
// exit ;
27487: GO 27559
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27489: LD_INT 68
27491: PPUSH
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 255
27501: PPUSH
27502: CALL_OW 321
27506: PUSH
27507: LD_INT 2
27509: EQUAL
27510: IFFALSE 27522
// eff := 50 else
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 50
27519: ST_TO_ADDR
27520: GO 27530
// eff := 25 ;
27522: LD_ADDR_VAR 0 3
27526: PUSH
27527: LD_INT 25
27529: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 250
27539: PPUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 251
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: CALL_OW 495
// end ;
27559: LD_VAR 0 2
27563: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL_OW 302
27584: NOT
27585: IFTRUE 27604
27587: PUSH
27588: LD_VAR 0 2
27592: PPUSH
27593: LD_VAR 0 3
27597: PPUSH
27598: CALL_OW 488
27602: NOT
27603: OR
27604: IFTRUE 27613
27606: PUSH
27607: LD_VAR 0 4
27611: NOT
27612: OR
27613: IFFALSE 27617
// exit ;
27615: GO 27959
// list := [ ] ;
27617: LD_ADDR_VAR 0 13
27621: PUSH
27622: EMPTY
27623: ST_TO_ADDR
// if x - r < 0 then
27624: LD_VAR 0 2
27628: PUSH
27629: LD_VAR 0 4
27633: MINUS
27634: PUSH
27635: LD_INT 0
27637: LESS
27638: IFFALSE 27650
// min_x := 0 else
27640: LD_ADDR_VAR 0 7
27644: PUSH
27645: LD_INT 0
27647: ST_TO_ADDR
27648: GO 27666
// min_x := x - r ;
27650: LD_ADDR_VAR 0 7
27654: PUSH
27655: LD_VAR 0 2
27659: PUSH
27660: LD_VAR 0 4
27664: MINUS
27665: ST_TO_ADDR
// if y - r < 0 then
27666: LD_VAR 0 3
27670: PUSH
27671: LD_VAR 0 4
27675: MINUS
27676: PUSH
27677: LD_INT 0
27679: LESS
27680: IFFALSE 27692
// min_y := 0 else
27682: LD_ADDR_VAR 0 8
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
27690: GO 27708
// min_y := y - r ;
27692: LD_ADDR_VAR 0 8
27696: PUSH
27697: LD_VAR 0 3
27701: PUSH
27702: LD_VAR 0 4
27706: MINUS
27707: ST_TO_ADDR
// max_x := x + r ;
27708: LD_ADDR_VAR 0 9
27712: PUSH
27713: LD_VAR 0 2
27717: PUSH
27718: LD_VAR 0 4
27722: PLUS
27723: ST_TO_ADDR
// max_y := y + r ;
27724: LD_ADDR_VAR 0 10
27728: PUSH
27729: LD_VAR 0 3
27733: PUSH
27734: LD_VAR 0 4
27738: PLUS
27739: ST_TO_ADDR
// for _x = min_x to max_x do
27740: LD_ADDR_VAR 0 11
27744: PUSH
27745: DOUBLE
27746: LD_VAR 0 7
27750: DEC
27751: ST_TO_ADDR
27752: LD_VAR 0 9
27756: PUSH
27757: FOR_TO
27758: IFFALSE 27877
// for _y = min_y to max_y do
27760: LD_ADDR_VAR 0 12
27764: PUSH
27765: DOUBLE
27766: LD_VAR 0 8
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 10
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27873
// begin if not ValidHex ( _x , _y ) then
27780: LD_VAR 0 11
27784: PPUSH
27785: LD_VAR 0 12
27789: PPUSH
27790: CALL_OW 488
27794: NOT
27795: IFFALSE 27799
// continue ;
27797: GO 27777
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27799: LD_VAR 0 11
27803: PPUSH
27804: LD_VAR 0 12
27808: PPUSH
27809: CALL_OW 351
27813: IFFALSE 27831
27815: PUSH
27816: LD_VAR 0 11
27820: PPUSH
27821: LD_VAR 0 12
27825: PPUSH
27826: CALL_OW 554
27830: AND
27831: IFFALSE 27871
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27833: LD_ADDR_VAR 0 13
27837: PUSH
27838: LD_VAR 0 13
27842: PPUSH
27843: LD_VAR 0 13
27847: PUSH
27848: LD_INT 1
27850: PLUS
27851: PPUSH
27852: LD_VAR 0 11
27856: PUSH
27857: LD_VAR 0 12
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PPUSH
27866: CALL_OW 2
27870: ST_TO_ADDR
// end ;
27871: GO 27777
27873: POP
27874: POP
27875: GO 27757
27877: POP
27878: POP
// if not list then
27879: LD_VAR 0 13
27883: NOT
27884: IFFALSE 27888
// exit ;
27886: GO 27959
// for i in list do
27888: LD_ADDR_VAR 0 6
27892: PUSH
27893: LD_VAR 0 13
27897: PUSH
27898: FOR_IN
27899: IFFALSE 27957
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_STRING M
27908: PUSH
27909: LD_VAR 0 6
27913: PUSH
27914: LD_INT 1
27916: ARRAY
27917: PUSH
27918: LD_VAR 0 6
27922: PUSH
27923: LD_INT 2
27925: ARRAY
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: PPUSH
27951: CALL_OW 447
27955: GO 27898
27957: POP
27958: POP
// end ;
27959: LD_VAR 0 5
27963: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 302
27985: NOT
27986: IFTRUE 28005
27988: PUSH
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 488
28003: NOT
28004: OR
28005: IFTRUE 28014
28007: PUSH
28008: LD_VAR 0 4
28012: NOT
28013: OR
28014: IFFALSE 28018
// exit ;
28016: GO 28535
// list := [ ] ;
28018: LD_ADDR_VAR 0 13
28022: PUSH
28023: EMPTY
28024: ST_TO_ADDR
// if x - r < 0 then
28025: LD_VAR 0 2
28029: PUSH
28030: LD_VAR 0 4
28034: MINUS
28035: PUSH
28036: LD_INT 0
28038: LESS
28039: IFFALSE 28051
// min_x := 0 else
28041: LD_ADDR_VAR 0 7
28045: PUSH
28046: LD_INT 0
28048: ST_TO_ADDR
28049: GO 28067
// min_x := x - r ;
28051: LD_ADDR_VAR 0 7
28055: PUSH
28056: LD_VAR 0 2
28060: PUSH
28061: LD_VAR 0 4
28065: MINUS
28066: ST_TO_ADDR
// if y - r < 0 then
28067: LD_VAR 0 3
28071: PUSH
28072: LD_VAR 0 4
28076: MINUS
28077: PUSH
28078: LD_INT 0
28080: LESS
28081: IFFALSE 28093
// min_y := 0 else
28083: LD_ADDR_VAR 0 8
28087: PUSH
28088: LD_INT 0
28090: ST_TO_ADDR
28091: GO 28109
// min_y := y - r ;
28093: LD_ADDR_VAR 0 8
28097: PUSH
28098: LD_VAR 0 3
28102: PUSH
28103: LD_VAR 0 4
28107: MINUS
28108: ST_TO_ADDR
// max_x := x + r ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_VAR 0 2
28118: PUSH
28119: LD_VAR 0 4
28123: PLUS
28124: ST_TO_ADDR
// max_y := y + r ;
28125: LD_ADDR_VAR 0 10
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: LD_VAR 0 4
28139: PLUS
28140: ST_TO_ADDR
// for _x = min_x to max_x do
28141: LD_ADDR_VAR 0 11
28145: PUSH
28146: DOUBLE
28147: LD_VAR 0 7
28151: DEC
28152: ST_TO_ADDR
28153: LD_VAR 0 9
28157: PUSH
28158: FOR_TO
28159: IFFALSE 28278
// for _y = min_y to max_y do
28161: LD_ADDR_VAR 0 12
28165: PUSH
28166: DOUBLE
28167: LD_VAR 0 8
28171: DEC
28172: ST_TO_ADDR
28173: LD_VAR 0 10
28177: PUSH
28178: FOR_TO
28179: IFFALSE 28274
// begin if not ValidHex ( _x , _y ) then
28181: LD_VAR 0 11
28185: PPUSH
28186: LD_VAR 0 12
28190: PPUSH
28191: CALL_OW 488
28195: NOT
28196: IFFALSE 28200
// continue ;
28198: GO 28178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28200: LD_VAR 0 11
28204: PPUSH
28205: LD_VAR 0 12
28209: PPUSH
28210: CALL_OW 351
28214: IFFALSE 28232
28216: PUSH
28217: LD_VAR 0 11
28221: PPUSH
28222: LD_VAR 0 12
28226: PPUSH
28227: CALL_OW 554
28231: AND
28232: IFFALSE 28272
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28234: LD_ADDR_VAR 0 13
28238: PUSH
28239: LD_VAR 0 13
28243: PPUSH
28244: LD_VAR 0 13
28248: PUSH
28249: LD_INT 1
28251: PLUS
28252: PPUSH
28253: LD_VAR 0 11
28257: PUSH
28258: LD_VAR 0 12
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 2
28271: ST_TO_ADDR
// end ;
28272: GO 28178
28274: POP
28275: POP
28276: GO 28158
28278: POP
28279: POP
// if not list then
28280: LD_VAR 0 13
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 28535
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28289: LD_ADDR_VAR 0 13
28293: PUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_VAR 0 13
28303: PPUSH
28304: LD_INT 1
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: CALL 38178 0 4
28314: ST_TO_ADDR
// ComStop ( flame ) ;
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 141
// for i in list do
28324: LD_ADDR_VAR 0 6
28328: PUSH
28329: LD_VAR 0 13
28333: PUSH
28334: FOR_IN
28335: IFFALSE 28366
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28337: LD_VAR 0 1
28341: PPUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 6
28355: PUSH
28356: LD_INT 2
28358: ARRAY
28359: PPUSH
28360: CALL_OW 176
28364: GO 28334
28366: POP
28367: POP
// repeat wait ( 0 0$1 ) ;
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
// task := GetTaskList ( flame ) ;
28375: LD_ADDR_VAR 0 14
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 437
28389: ST_TO_ADDR
// if not task then
28390: LD_VAR 0 14
28394: NOT
28395: IFFALSE 28399
// exit ;
28397: GO 28535
// if task [ 1 ] [ 1 ] <> | then
28399: LD_VAR 0 14
28403: PUSH
28404: LD_INT 1
28406: ARRAY
28407: PUSH
28408: LD_INT 1
28410: ARRAY
28411: PUSH
28412: LD_STRING |
28414: NONEQUAL
28415: IFFALSE 28419
// exit ;
28417: GO 28535
// _x := task [ 1 ] [ 2 ] ;
28419: LD_ADDR_VAR 0 11
28423: PUSH
28424: LD_VAR 0 14
28428: PUSH
28429: LD_INT 1
28431: ARRAY
28432: PUSH
28433: LD_INT 2
28435: ARRAY
28436: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28437: LD_ADDR_VAR 0 12
28441: PUSH
28442: LD_VAR 0 14
28446: PUSH
28447: LD_INT 1
28449: ARRAY
28450: PUSH
28451: LD_INT 3
28453: ARRAY
28454: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28455: LD_VAR 0 11
28459: PPUSH
28460: LD_VAR 0 12
28464: PPUSH
28465: CALL_OW 351
28469: NOT
28470: IFTRUE 28489
28472: PUSH
28473: LD_VAR 0 11
28477: PPUSH
28478: LD_VAR 0 12
28482: PPUSH
28483: CALL_OW 554
28487: NOT
28488: OR
28489: IFFALSE 28523
// begin task := Delete ( task , 1 ) ;
28491: LD_ADDR_VAR 0 14
28495: PUSH
28496: LD_VAR 0 14
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 3
28508: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_VAR 0 14
28518: PPUSH
28519: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 314
28532: NOT
28533: IFFALSE 28368
// end ;
28535: LD_VAR 0 5
28539: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28540: LD_EXP 89
28544: NOT
28545: IFFALSE 28595
28547: GO 28549
28549: DISABLE
// begin initHack := true ;
28550: LD_ADDR_EXP 89
28554: PUSH
28555: LD_INT 1
28557: ST_TO_ADDR
// hackTanks := [ ] ;
28558: LD_ADDR_EXP 90
28562: PUSH
28563: EMPTY
28564: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28565: LD_ADDR_EXP 91
28569: PUSH
28570: EMPTY
28571: ST_TO_ADDR
// hackLimit := 3 ;
28572: LD_ADDR_EXP 92
28576: PUSH
28577: LD_INT 3
28579: ST_TO_ADDR
// hackDist := 12 ;
28580: LD_ADDR_EXP 93
28584: PUSH
28585: LD_INT 12
28587: ST_TO_ADDR
// hackCounter := [ ] ;
28588: LD_ADDR_EXP 94
28592: PUSH
28593: EMPTY
28594: ST_TO_ADDR
// end ;
28595: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28596: LD_EXP 89
28600: IFFALSE 28618
28602: PUSH
28603: LD_INT 34
28605: PUSH
28606: LD_INT 99
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 69
28617: AND
28618: IFFALSE 28871
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
// begin enable ;
28627: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28628: LD_ADDR_VAR 0 1
28632: PUSH
28633: LD_INT 34
28635: PUSH
28636: LD_INT 99
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PPUSH
28643: CALL_OW 69
28647: PUSH
28648: FOR_IN
28649: IFFALSE 28869
// begin if not i in hackTanks then
28651: LD_VAR 0 1
28655: PUSH
28656: LD_EXP 90
28660: IN
28661: NOT
28662: IFFALSE 28745
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28664: LD_ADDR_EXP 90
28668: PUSH
28669: LD_EXP 90
28673: PPUSH
28674: LD_EXP 90
28678: PUSH
28679: LD_INT 1
28681: PLUS
28682: PPUSH
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 1
28692: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28693: LD_ADDR_EXP 91
28697: PUSH
28698: LD_EXP 91
28702: PPUSH
28703: LD_EXP 91
28707: PUSH
28708: LD_INT 1
28710: PLUS
28711: PPUSH
28712: EMPTY
28713: PPUSH
28714: CALL_OW 1
28718: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28719: LD_ADDR_EXP 94
28723: PUSH
28724: LD_EXP 94
28728: PPUSH
28729: LD_EXP 94
28733: PUSH
28734: LD_INT 1
28736: PLUS
28737: PPUSH
28738: EMPTY
28739: PPUSH
28740: CALL_OW 1
28744: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 302
28754: NOT
28755: IFFALSE 28768
// begin HackUnlinkAll ( i ) ;
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL 28874 0 1
// continue ;
28766: GO 28648
// end ; HackCheckCapturedStatus ( i ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: CALL 29319 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28777: LD_ADDR_VAR 0 2
28781: PUSH
28782: LD_INT 81
28784: PUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 255
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 33
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 91
28811: PUSH
28812: LD_VAR 0 1
28816: PUSH
28817: LD_EXP 93
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 50
28829: PUSH
28830: EMPTY
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 2
28848: NOT
28849: IFFALSE 28853
// continue ;
28851: GO 28648
// HackLink ( i , tmp ) ;
28853: LD_VAR 0 1
28857: PPUSH
28858: LD_VAR 0 2
28862: PPUSH
28863: CALL 29010 0 2
// end ;
28867: GO 28648
28869: POP
28870: POP
// end ;
28871: PPOPN 2
28873: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28874: LD_INT 0
28876: PPUSH
28877: PPUSH
28878: PPUSH
// if not hack in hackTanks then
28879: LD_VAR 0 1
28883: PUSH
28884: LD_EXP 90
28888: IN
28889: NOT
28890: IFFALSE 28894
// exit ;
28892: GO 29005
// index := GetElementIndex ( hackTanks , hack ) ;
28894: LD_ADDR_VAR 0 4
28898: PUSH
28899: LD_EXP 90
28903: PPUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL 37473 0 2
28913: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28914: LD_EXP 91
28918: PUSH
28919: LD_VAR 0 4
28923: ARRAY
28924: IFFALSE 29005
// begin for i in hackTanksCaptured [ index ] do
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: LD_EXP 91
28935: PUSH
28936: LD_VAR 0 4
28940: ARRAY
28941: PUSH
28942: FOR_IN
28943: IFFALSE 28969
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28945: LD_VAR 0 3
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PPUSH
28954: LD_VAR 0 3
28958: PUSH
28959: LD_INT 2
28961: ARRAY
28962: PPUSH
28963: CALL_OW 235
28967: GO 28942
28969: POP
28970: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28971: LD_ADDR_EXP 91
28975: PUSH
28976: LD_EXP 91
28980: PPUSH
28981: LD_VAR 0 4
28985: PPUSH
28986: EMPTY
28987: PPUSH
28988: CALL_OW 1
28992: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_INT 0
29000: PPUSH
29001: CALL_OW 505
// end ; end ;
29005: LD_VAR 0 2
29009: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
// if not hack in hackTanks or not vehicles then
29015: LD_VAR 0 1
29019: PUSH
29020: LD_EXP 90
29024: IN
29025: NOT
29026: IFTRUE 29035
29028: PUSH
29029: LD_VAR 0 2
29033: NOT
29034: OR
29035: IFFALSE 29039
// exit ;
29037: GO 29314
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29039: LD_ADDR_VAR 0 2
29043: PUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 1
29056: PPUSH
29057: LD_INT 1
29059: PPUSH
29060: CALL 38125 0 4
29064: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_EXP 90
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL 37473 0 2
29084: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29085: LD_EXP 91
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_EXP 92
29100: LESS
29101: IFFALSE 29290
// begin for i := 1 to vehicles do
29103: LD_ADDR_VAR 0 4
29107: PUSH
29108: DOUBLE
29109: LD_INT 1
29111: DEC
29112: ST_TO_ADDR
29113: LD_VAR 0 2
29117: PUSH
29118: FOR_TO
29119: IFFALSE 29288
// begin if hackTanksCaptured [ index ] = hackLimit then
29121: LD_EXP 91
29125: PUSH
29126: LD_VAR 0 5
29130: ARRAY
29131: PUSH
29132: LD_EXP 92
29136: EQUAL
29137: IFFALSE 29141
// break ;
29139: GO 29288
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29141: LD_ADDR_EXP 94
29145: PUSH
29146: LD_EXP 94
29150: PPUSH
29151: LD_VAR 0 5
29155: PPUSH
29156: LD_EXP 94
29160: PUSH
29161: LD_VAR 0 5
29165: ARRAY
29166: PUSH
29167: LD_INT 1
29169: PLUS
29170: PPUSH
29171: CALL_OW 1
29175: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29176: LD_ADDR_EXP 91
29180: PUSH
29181: LD_EXP 91
29185: PPUSH
29186: LD_VAR 0 5
29190: PUSH
29191: LD_EXP 91
29195: PUSH
29196: LD_VAR 0 5
29200: ARRAY
29201: PUSH
29202: LD_INT 1
29204: PLUS
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PPUSH
29210: LD_VAR 0 2
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: PUSH
29221: LD_VAR 0 2
29225: PUSH
29226: LD_VAR 0 4
29230: ARRAY
29231: PPUSH
29232: CALL_OW 255
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PPUSH
29241: CALL 37690 0 3
29245: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29246: LD_VAR 0 2
29250: PUSH
29251: LD_VAR 0 4
29255: ARRAY
29256: PPUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 255
29266: PPUSH
29267: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29271: LD_VAR 0 2
29275: PUSH
29276: LD_VAR 0 4
29280: ARRAY
29281: PPUSH
29282: CALL_OW 141
// end ;
29286: GO 29118
29288: POP
29289: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29290: LD_VAR 0 1
29294: PPUSH
29295: LD_EXP 91
29299: PUSH
29300: LD_VAR 0 5
29304: ARRAY
29305: PUSH
29306: LD_INT 0
29308: PLUS
29309: PPUSH
29310: CALL_OW 505
// end ;
29314: LD_VAR 0 3
29318: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
// if not hack in hackTanks then
29325: LD_VAR 0 1
29329: PUSH
29330: LD_EXP 90
29334: IN
29335: NOT
29336: IFFALSE 29340
// exit ;
29338: GO 29584
// index := GetElementIndex ( hackTanks , hack ) ;
29340: LD_ADDR_VAR 0 4
29344: PUSH
29345: LD_EXP 90
29349: PPUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL 37473 0 2
29359: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: DOUBLE
29366: LD_EXP 91
29370: PUSH
29371: LD_VAR 0 4
29375: ARRAY
29376: INC
29377: ST_TO_ADDR
29378: LD_INT 1
29380: PUSH
29381: FOR_DOWNTO
29382: IFFALSE 29558
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29384: LD_ADDR_VAR 0 5
29388: PUSH
29389: LD_EXP 91
29393: PUSH
29394: LD_VAR 0 4
29398: ARRAY
29399: PUSH
29400: LD_VAR 0 3
29404: ARRAY
29405: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29406: LD_VAR 0 5
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: CALL_OW 302
29419: NOT
29420: IFTRUE 29448
29422: PUSH
29423: LD_VAR 0 5
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: CALL_OW 255
29436: PUSH
29437: LD_VAR 0 1
29441: PPUSH
29442: CALL_OW 255
29446: NONEQUAL
29447: OR
29448: IFFALSE 29556
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29450: LD_VAR 0 5
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 305
29463: IFFALSE 29491
29465: PUSH
29466: LD_VAR 0 5
29470: PUSH
29471: LD_INT 1
29473: ARRAY
29474: PPUSH
29475: CALL_OW 255
29479: PUSH
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 255
29489: EQUAL
29490: AND
29491: IFFALSE 29515
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29493: LD_VAR 0 5
29497: PUSH
29498: LD_INT 1
29500: ARRAY
29501: PPUSH
29502: LD_VAR 0 5
29506: PUSH
29507: LD_INT 2
29509: ARRAY
29510: PPUSH
29511: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29515: LD_ADDR_EXP 91
29519: PUSH
29520: LD_EXP 91
29524: PPUSH
29525: LD_VAR 0 4
29529: PPUSH
29530: LD_EXP 91
29534: PUSH
29535: LD_VAR 0 4
29539: ARRAY
29540: PPUSH
29541: LD_VAR 0 3
29545: PPUSH
29546: CALL_OW 3
29550: PPUSH
29551: CALL_OW 1
29555: ST_TO_ADDR
// end ; end ;
29556: GO 29381
29558: POP
29559: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_EXP 91
29569: PUSH
29570: LD_VAR 0 4
29574: ARRAY
29575: PUSH
29576: LD_INT 0
29578: PLUS
29579: PPUSH
29580: CALL_OW 505
// end ;
29584: LD_VAR 0 2
29588: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
29593: PPUSH
29594: PPUSH
// if not hack in hackTanks then
29595: LD_VAR 0 1
29599: PUSH
29600: LD_EXP 90
29604: IN
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 29695
// index := GetElementIndex ( hackTanks , hack ) ;
29610: LD_ADDR_VAR 0 5
29614: PUSH
29615: LD_EXP 90
29619: PPUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL 37473 0 2
29629: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: DOUBLE
29636: LD_INT 1
29638: DEC
29639: ST_TO_ADDR
29640: LD_EXP 91
29644: PUSH
29645: LD_VAR 0 5
29649: ARRAY
29650: PUSH
29651: FOR_TO
29652: IFFALSE 29693
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29654: LD_EXP 91
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: PUSH
29665: LD_VAR 0 4
29669: ARRAY
29670: PUSH
29671: LD_INT 1
29673: ARRAY
29674: PUSH
29675: LD_VAR 0 2
29679: EQUAL
29680: IFFALSE 29691
// KillUnit ( vehicle ) ;
29682: LD_VAR 0 2
29686: PPUSH
29687: CALL_OW 66
29691: GO 29651
29693: POP
29694: POP
// end ;
29695: LD_VAR 0 3
29699: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29700: LD_EXP 95
29704: NOT
29705: IFFALSE 29740
29707: GO 29709
29709: DISABLE
// begin initMiner := true ;
29710: LD_ADDR_EXP 95
29714: PUSH
29715: LD_INT 1
29717: ST_TO_ADDR
// minersList := [ ] ;
29718: LD_ADDR_EXP 96
29722: PUSH
29723: EMPTY
29724: ST_TO_ADDR
// minerMinesList := [ ] ;
29725: LD_ADDR_EXP 97
29729: PUSH
29730: EMPTY
29731: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29732: LD_ADDR_EXP 98
29736: PUSH
29737: LD_INT 5
29739: ST_TO_ADDR
// end ;
29740: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29741: LD_EXP 95
29745: IFFALSE 29763
29747: PUSH
29748: LD_INT 34
29750: PUSH
29751: LD_INT 81
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 69
29762: AND
29763: IFFALSE 30226
29765: GO 29767
29767: DISABLE
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
// begin enable ;
29774: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29775: LD_ADDR_VAR 0 1
29779: PUSH
29780: LD_INT 34
29782: PUSH
29783: LD_INT 81
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: PUSH
29795: FOR_IN
29796: IFFALSE 29868
// begin if not i in minersList then
29798: LD_VAR 0 1
29802: PUSH
29803: LD_EXP 96
29807: IN
29808: NOT
29809: IFFALSE 29866
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29811: LD_ADDR_EXP 96
29815: PUSH
29816: LD_EXP 96
29820: PPUSH
29821: LD_EXP 96
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: PPUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 1
29839: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29840: LD_ADDR_EXP 97
29844: PUSH
29845: LD_EXP 97
29849: PPUSH
29850: LD_EXP 97
29854: PUSH
29855: LD_INT 1
29857: PLUS
29858: PPUSH
29859: EMPTY
29860: PPUSH
29861: CALL_OW 1
29865: ST_TO_ADDR
// end end ;
29866: GO 29795
29868: POP
29869: POP
// for i := minerMinesList downto 1 do
29870: LD_ADDR_VAR 0 1
29874: PUSH
29875: DOUBLE
29876: LD_EXP 97
29880: INC
29881: ST_TO_ADDR
29882: LD_INT 1
29884: PUSH
29885: FOR_DOWNTO
29886: IFFALSE 30224
// begin if IsLive ( minersList [ i ] ) then
29888: LD_EXP 96
29892: PUSH
29893: LD_VAR 0 1
29897: ARRAY
29898: PPUSH
29899: CALL_OW 300
29903: IFFALSE 29931
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29905: LD_EXP 96
29909: PUSH
29910: LD_VAR 0 1
29914: ARRAY
29915: PPUSH
29916: LD_EXP 97
29920: PUSH
29921: LD_VAR 0 1
29925: ARRAY
29926: PPUSH
29927: CALL_OW 505
// if not minerMinesList [ i ] then
29931: LD_EXP 97
29935: PUSH
29936: LD_VAR 0 1
29940: ARRAY
29941: NOT
29942: IFFALSE 29946
// continue ;
29944: GO 29885
// for j := minerMinesList [ i ] downto 1 do
29946: LD_ADDR_VAR 0 2
29950: PUSH
29951: DOUBLE
29952: LD_EXP 97
29956: PUSH
29957: LD_VAR 0 1
29961: ARRAY
29962: INC
29963: ST_TO_ADDR
29964: LD_INT 1
29966: PUSH
29967: FOR_DOWNTO
29968: IFFALSE 30220
// begin side := GetSide ( minersList [ i ] ) ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_EXP 96
29979: PUSH
29980: LD_VAR 0 1
29984: ARRAY
29985: PPUSH
29986: CALL_OW 255
29990: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29991: LD_ADDR_VAR 0 4
29995: PUSH
29996: LD_EXP 97
30000: PUSH
30001: LD_VAR 0 1
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 2
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: LD_EXP 97
30021: PUSH
30022: LD_VAR 0 1
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 2
30032: ARRAY
30033: PUSH
30034: LD_INT 2
30036: ARRAY
30037: PPUSH
30038: CALL_OW 428
30042: ST_TO_ADDR
// if not tmp then
30043: LD_VAR 0 4
30047: NOT
30048: IFFALSE 30052
// continue ;
30050: GO 29967
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30052: LD_VAR 0 4
30056: PUSH
30057: LD_INT 81
30059: PUSH
30060: LD_VAR 0 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PPUSH
30069: CALL_OW 69
30073: IN
30074: IFFALSE 30124
30076: PUSH
30077: LD_EXP 97
30081: PUSH
30082: LD_VAR 0 1
30086: ARRAY
30087: PUSH
30088: LD_VAR 0 2
30092: ARRAY
30093: PUSH
30094: LD_INT 1
30096: ARRAY
30097: PPUSH
30098: LD_EXP 97
30102: PUSH
30103: LD_VAR 0 1
30107: ARRAY
30108: PUSH
30109: LD_VAR 0 2
30113: ARRAY
30114: PUSH
30115: LD_INT 2
30117: ARRAY
30118: PPUSH
30119: CALL_OW 458
30123: AND
30124: IFFALSE 30218
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30126: LD_EXP 97
30130: PUSH
30131: LD_VAR 0 1
30135: ARRAY
30136: PUSH
30137: LD_VAR 0 2
30141: ARRAY
30142: PUSH
30143: LD_INT 1
30145: ARRAY
30146: PPUSH
30147: LD_EXP 97
30151: PUSH
30152: LD_VAR 0 1
30156: ARRAY
30157: PUSH
30158: LD_VAR 0 2
30162: ARRAY
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: LD_VAR 0 3
30172: PPUSH
30173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30177: LD_ADDR_EXP 97
30181: PUSH
30182: LD_EXP 97
30186: PPUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: LD_EXP 97
30196: PUSH
30197: LD_VAR 0 1
30201: ARRAY
30202: PPUSH
30203: LD_VAR 0 2
30207: PPUSH
30208: CALL_OW 3
30212: PPUSH
30213: CALL_OW 1
30217: ST_TO_ADDR
// end ; end ;
30218: GO 29967
30220: POP
30221: POP
// end ;
30222: GO 29885
30224: POP
30225: POP
// end ;
30226: PPOPN 4
30228: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
// result := false ;
30233: LD_ADDR_VAR 0 4
30237: PUSH
30238: LD_INT 0
30240: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30241: LD_VAR 0 1
30245: PPUSH
30246: CALL_OW 264
30250: PUSH
30251: LD_INT 81
30253: EQUAL
30254: NOT
30255: IFFALSE 30259
// exit ;
30257: GO 30503
// index := GetElementIndex ( minersList , unit ) ;
30259: LD_ADDR_VAR 0 5
30263: PUSH
30264: LD_EXP 96
30268: PPUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL 37473 0 2
30278: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30279: LD_EXP 97
30283: PUSH
30284: LD_VAR 0 5
30288: ARRAY
30289: PUSH
30290: LD_EXP 98
30294: GREATEREQUAL
30295: IFFALSE 30299
// exit ;
30297: GO 30503
// ComMoveXY ( unit , x , y ) ;
30299: LD_VAR 0 1
30303: PPUSH
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_VAR 0 3
30313: PPUSH
30314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30318: LD_INT 35
30320: PPUSH
30321: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30325: LD_VAR 0 1
30329: PPUSH
30330: LD_VAR 0 2
30334: PPUSH
30335: LD_VAR 0 3
30339: PPUSH
30340: CALL 69519 0 3
30344: NOT
30345: IFFALSE 30358
30347: PUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 314
30357: AND
30358: IFFALSE 30362
// exit ;
30360: GO 30503
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30362: LD_VAR 0 2
30366: PPUSH
30367: LD_VAR 0 3
30371: PPUSH
30372: CALL_OW 428
30376: PUSH
30377: LD_VAR 0 1
30381: EQUAL
30382: IFFALSE 30396
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: CALL_OW 314
30394: NOT
30395: AND
30396: IFFALSE 30318
// PlaySoundXY ( x , y , PlantMine ) ;
30398: LD_VAR 0 2
30402: PPUSH
30403: LD_VAR 0 3
30407: PPUSH
30408: LD_STRING PlantMine
30410: PPUSH
30411: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30415: LD_VAR 0 2
30419: PPUSH
30420: LD_VAR 0 3
30424: PPUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 255
30434: PPUSH
30435: LD_INT 0
30437: PPUSH
30438: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30442: LD_ADDR_EXP 97
30446: PUSH
30447: LD_EXP 97
30451: PPUSH
30452: LD_VAR 0 5
30456: PUSH
30457: LD_EXP 97
30461: PUSH
30462: LD_VAR 0 5
30466: ARRAY
30467: PUSH
30468: LD_INT 1
30470: PLUS
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: LD_VAR 0 2
30480: PUSH
30481: LD_VAR 0 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL 37690 0 3
30494: ST_TO_ADDR
// result := true ;
30495: LD_ADDR_VAR 0 4
30499: PUSH
30500: LD_INT 1
30502: ST_TO_ADDR
// end ;
30503: LD_VAR 0 4
30507: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30508: LD_INT 0
30510: PPUSH
30511: PPUSH
30512: PPUSH
// if not unit in minersList then
30513: LD_VAR 0 1
30517: PUSH
30518: LD_EXP 96
30522: IN
30523: NOT
30524: IFFALSE 30528
// exit ;
30526: GO 30922
// index := GetElementIndex ( minersList , unit ) ;
30528: LD_ADDR_VAR 0 6
30532: PUSH
30533: LD_EXP 96
30537: PPUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL 37473 0 2
30547: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30548: LD_ADDR_VAR 0 5
30552: PUSH
30553: DOUBLE
30554: LD_EXP 97
30558: PUSH
30559: LD_VAR 0 6
30563: ARRAY
30564: INC
30565: ST_TO_ADDR
30566: LD_INT 1
30568: PUSH
30569: FOR_DOWNTO
30570: IFFALSE 30733
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30572: LD_EXP 97
30576: PUSH
30577: LD_VAR 0 6
30581: ARRAY
30582: PUSH
30583: LD_VAR 0 5
30587: ARRAY
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: PUSH
30593: LD_VAR 0 2
30597: EQUAL
30598: IFFALSE 30628
30600: PUSH
30601: LD_EXP 97
30605: PUSH
30606: LD_VAR 0 6
30610: ARRAY
30611: PUSH
30612: LD_VAR 0 5
30616: ARRAY
30617: PUSH
30618: LD_INT 2
30620: ARRAY
30621: PUSH
30622: LD_VAR 0 3
30626: EQUAL
30627: AND
30628: IFFALSE 30731
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30630: LD_EXP 97
30634: PUSH
30635: LD_VAR 0 6
30639: ARRAY
30640: PUSH
30641: LD_VAR 0 5
30645: ARRAY
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: PPUSH
30651: LD_EXP 97
30655: PUSH
30656: LD_VAR 0 6
30660: ARRAY
30661: PUSH
30662: LD_VAR 0 5
30666: ARRAY
30667: PUSH
30668: LD_INT 2
30670: ARRAY
30671: PPUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 255
30681: PPUSH
30682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30686: LD_ADDR_EXP 97
30690: PUSH
30691: LD_EXP 97
30695: PPUSH
30696: LD_VAR 0 6
30700: PPUSH
30701: LD_EXP 97
30705: PUSH
30706: LD_VAR 0 6
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 5
30716: PPUSH
30717: CALL_OW 3
30721: PPUSH
30722: CALL_OW 1
30726: ST_TO_ADDR
// exit ;
30727: POP
30728: POP
30729: GO 30922
// end ; end ;
30731: GO 30569
30733: POP
30734: POP
// for i := minerMinesList [ index ] downto 1 do
30735: LD_ADDR_VAR 0 5
30739: PUSH
30740: DOUBLE
30741: LD_EXP 97
30745: PUSH
30746: LD_VAR 0 6
30750: ARRAY
30751: INC
30752: ST_TO_ADDR
30753: LD_INT 1
30755: PUSH
30756: FOR_DOWNTO
30757: IFFALSE 30920
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30759: LD_EXP 97
30763: PUSH
30764: LD_VAR 0 6
30768: ARRAY
30769: PUSH
30770: LD_VAR 0 5
30774: ARRAY
30775: PUSH
30776: LD_INT 1
30778: ARRAY
30779: PPUSH
30780: LD_EXP 97
30784: PUSH
30785: LD_VAR 0 6
30789: ARRAY
30790: PUSH
30791: LD_VAR 0 5
30795: ARRAY
30796: PUSH
30797: LD_INT 2
30799: ARRAY
30800: PPUSH
30801: LD_VAR 0 2
30805: PPUSH
30806: LD_VAR 0 3
30810: PPUSH
30811: CALL_OW 298
30815: PUSH
30816: LD_INT 6
30818: LESS
30819: IFFALSE 30918
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30821: LD_EXP 97
30825: PUSH
30826: LD_VAR 0 6
30830: ARRAY
30831: PUSH
30832: LD_VAR 0 5
30836: ARRAY
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_EXP 97
30846: PUSH
30847: LD_VAR 0 6
30851: ARRAY
30852: PUSH
30853: LD_VAR 0 5
30857: ARRAY
30858: PUSH
30859: LD_INT 2
30861: ARRAY
30862: PPUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 255
30872: PPUSH
30873: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30877: LD_ADDR_EXP 97
30881: PUSH
30882: LD_EXP 97
30886: PPUSH
30887: LD_VAR 0 6
30891: PPUSH
30892: LD_EXP 97
30896: PUSH
30897: LD_VAR 0 6
30901: ARRAY
30902: PPUSH
30903: LD_VAR 0 5
30907: PPUSH
30908: CALL_OW 3
30912: PPUSH
30913: CALL_OW 1
30917: ST_TO_ADDR
// end ; end ;
30918: GO 30756
30920: POP
30921: POP
// end ;
30922: LD_VAR 0 4
30926: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30927: LD_INT 0
30929: PPUSH
30930: PPUSH
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 264
30947: PUSH
30948: LD_INT 81
30950: EQUAL
30951: NOT
30952: IFTRUE 30967
30954: PUSH
30955: LD_VAR 0 1
30959: PUSH
30960: LD_EXP 96
30964: IN
30965: NOT
30966: OR
30967: IFFALSE 30971
// exit ;
30969: GO 31297
// index := GetElementIndex ( minersList , unit ) ;
30971: LD_ADDR_VAR 0 6
30975: PUSH
30976: LD_EXP 96
30980: PPUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL 37473 0 2
30990: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30991: LD_ADDR_VAR 0 8
30995: PUSH
30996: LD_EXP 98
31000: PUSH
31001: LD_EXP 97
31005: PUSH
31006: LD_VAR 0 6
31010: ARRAY
31011: MINUS
31012: ST_TO_ADDR
// if not minesFreeAmount then
31013: LD_VAR 0 8
31017: NOT
31018: IFFALSE 31022
// exit ;
31020: GO 31297
// tmp := [ ] ;
31022: LD_ADDR_VAR 0 7
31026: PUSH
31027: EMPTY
31028: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31029: LD_ADDR_VAR 0 5
31033: PUSH
31034: DOUBLE
31035: LD_INT 1
31037: DEC
31038: ST_TO_ADDR
31039: LD_VAR 0 8
31043: PUSH
31044: FOR_TO
31045: IFFALSE 31244
// begin _d := rand ( 0 , 5 ) ;
31047: LD_ADDR_VAR 0 11
31051: PUSH
31052: LD_INT 0
31054: PPUSH
31055: LD_INT 5
31057: PPUSH
31058: CALL_OW 12
31062: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31063: LD_ADDR_VAR 0 12
31067: PUSH
31068: LD_INT 2
31070: PPUSH
31071: LD_INT 6
31073: PPUSH
31074: CALL_OW 12
31078: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31079: LD_ADDR_VAR 0 9
31083: PUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: LD_VAR 0 11
31093: PPUSH
31094: LD_VAR 0 12
31098: PPUSH
31099: CALL_OW 272
31103: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31104: LD_ADDR_VAR 0 10
31108: PUSH
31109: LD_VAR 0 3
31113: PPUSH
31114: LD_VAR 0 11
31118: PPUSH
31119: LD_VAR 0 12
31123: PPUSH
31124: CALL_OW 273
31128: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31129: LD_VAR 0 9
31133: PPUSH
31134: LD_VAR 0 10
31138: PPUSH
31139: CALL_OW 488
31143: IFFALSE 31167
31145: PUSH
31146: LD_VAR 0 9
31150: PUSH
31151: LD_VAR 0 10
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_VAR 0 7
31164: IN
31165: NOT
31166: AND
31167: IFFALSE 31186
31169: PUSH
31170: LD_VAR 0 9
31174: PPUSH
31175: LD_VAR 0 10
31179: PPUSH
31180: CALL_OW 458
31184: NOT
31185: AND
31186: IFFALSE 31228
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31188: LD_ADDR_VAR 0 7
31192: PUSH
31193: LD_VAR 0 7
31197: PPUSH
31198: LD_VAR 0 7
31202: PUSH
31203: LD_INT 1
31205: PLUS
31206: PPUSH
31207: LD_VAR 0 9
31211: PUSH
31212: LD_VAR 0 10
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 1
31225: ST_TO_ADDR
31226: GO 31242
// i := i - 1 ;
31228: LD_ADDR_VAR 0 5
31232: PUSH
31233: LD_VAR 0 5
31237: PUSH
31238: LD_INT 1
31240: MINUS
31241: ST_TO_ADDR
// end ;
31242: GO 31044
31244: POP
31245: POP
// for i in tmp do
31246: LD_ADDR_VAR 0 5
31250: PUSH
31251: LD_VAR 0 7
31255: PUSH
31256: FOR_IN
31257: IFFALSE 31295
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31259: LD_VAR 0 1
31263: PPUSH
31264: LD_VAR 0 5
31268: PUSH
31269: LD_INT 1
31271: ARRAY
31272: PPUSH
31273: LD_VAR 0 5
31277: PUSH
31278: LD_INT 2
31280: ARRAY
31281: PPUSH
31282: CALL 30229 0 3
31286: NOT
31287: IFFALSE 31293
// exit ;
31289: POP
31290: POP
31291: GO 31297
31293: GO 31256
31295: POP
31296: POP
// end ;
31297: LD_VAR 0 4
31301: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
// if GetClass ( unit ) <> class_sniper then
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 257
31322: PUSH
31323: LD_INT 5
31325: NONEQUAL
31326: IFFALSE 31330
// exit ;
31328: GO 31800
// dist := 8 ;
31330: LD_ADDR_VAR 0 5
31334: PUSH
31335: LD_INT 8
31337: ST_TO_ADDR
// viewRange := 12 ;
31338: LD_ADDR_VAR 0 8
31342: PUSH
31343: LD_INT 12
31345: ST_TO_ADDR
// side := GetSide ( unit ) ;
31346: LD_ADDR_VAR 0 6
31350: PUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 255
31360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31361: LD_INT 61
31363: PPUSH
31364: LD_VAR 0 6
31368: PPUSH
31369: CALL_OW 321
31373: PUSH
31374: LD_INT 2
31376: EQUAL
31377: IFFALSE 31387
// viewRange := 16 ;
31379: LD_ADDR_VAR 0 8
31383: PUSH
31384: LD_INT 16
31386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31387: LD_VAR 0 1
31391: PPUSH
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: CALL_OW 297
31406: PUSH
31407: LD_VAR 0 5
31411: GREATER
31412: IFFALSE 31491
// begin ComMoveXY ( unit , x , y ) ;
31414: LD_VAR 0 1
31418: PPUSH
31419: LD_VAR 0 2
31423: PPUSH
31424: LD_VAR 0 3
31428: PPUSH
31429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31433: LD_INT 35
31435: PPUSH
31436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31440: LD_VAR 0 1
31444: PPUSH
31445: LD_VAR 0 2
31449: PPUSH
31450: LD_VAR 0 3
31454: PPUSH
31455: CALL 69519 0 3
31459: NOT
31460: IFFALSE 31464
// exit ;
31462: GO 31800
// until GetDistUnitXY ( unit , x , y ) < dist ;
31464: LD_VAR 0 1
31468: PPUSH
31469: LD_VAR 0 2
31473: PPUSH
31474: LD_VAR 0 3
31478: PPUSH
31479: CALL_OW 297
31483: PUSH
31484: LD_VAR 0 5
31488: LESS
31489: IFFALSE 31433
// end ; ComTurnXY ( unit , x , y ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_VAR 0 2
31500: PPUSH
31501: LD_VAR 0 3
31505: PPUSH
31506: CALL_OW 118
// repeat if Multiplayer then
31510: LD_OWVAR 4
31514: IFFALSE 31525
// wait ( 35 ) else
31516: LD_INT 35
31518: PPUSH
31519: CALL_OW 67
31523: GO 31532
// wait ( 5 ) ;
31525: LD_INT 5
31527: PPUSH
31528: CALL_OW 67
// _d := GetDir ( unit ) ;
31532: LD_ADDR_VAR 0 11
31536: PUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL_OW 254
31546: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31547: LD_ADDR_VAR 0 7
31551: PUSH
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 250
31561: PPUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 251
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: CALL 72155 0 4
31586: ST_TO_ADDR
// until dir = _d ;
31587: LD_VAR 0 7
31591: PUSH
31592: LD_VAR 0 11
31596: EQUAL
31597: IFFALSE 31510
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 250
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_VAR 0 5
31623: PPUSH
31624: CALL_OW 272
31628: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31629: LD_ADDR_VAR 0 10
31633: PUSH
31634: LD_VAR 0 1
31638: PPUSH
31639: CALL_OW 251
31643: PPUSH
31644: LD_VAR 0 7
31648: PPUSH
31649: LD_VAR 0 5
31653: PPUSH
31654: CALL_OW 273
31658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31659: LD_VAR 0 9
31663: PPUSH
31664: LD_VAR 0 10
31668: PPUSH
31669: CALL_OW 488
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31800
// ComAnimCustom ( unit , 1 ) ;
31678: LD_VAR 0 1
31682: PPUSH
31683: LD_INT 1
31685: PPUSH
31686: CALL_OW 592
// p := 0 ;
31690: LD_ADDR_VAR 0 12
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31698: LD_VAR 0 9
31702: PPUSH
31703: LD_VAR 0 10
31707: PPUSH
31708: LD_VAR 0 6
31712: PPUSH
31713: LD_VAR 0 8
31717: PPUSH
31718: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
31722: LD_INT 35
31724: PPUSH
31725: CALL_OW 67
// p := Inc ( p ) ;
31729: LD_ADDR_VAR 0 12
31733: PUSH
31734: LD_VAR 0 12
31738: PPUSH
31739: CALL 72111 0 1
31743: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
31744: LD_VAR 0 12
31748: PUSH
31749: LD_INT 3
31751: EQUAL
31752: IFTRUE 31766
31754: PUSH
31755: LD_VAR 0 1
31759: PPUSH
31760: CALL_OW 302
31764: NOT
31765: OR
31766: IFTRUE 31779
31768: PUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 301
31778: OR
31779: IFFALSE 31722
// RemoveSeeing ( _x , _y , side ) ;
31781: LD_VAR 0 9
31785: PPUSH
31786: LD_VAR 0 10
31790: PPUSH
31791: LD_VAR 0 6
31795: PPUSH
31796: CALL_OW 331
// end ;
31800: LD_VAR 0 4
31804: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
// if not unit then
31818: LD_VAR 0 1
31822: NOT
31823: IFFALSE 31827
// exit ;
31825: GO 32098
// side := GetSide ( unit ) ;
31827: LD_ADDR_VAR 0 3
31831: PUSH
31832: LD_VAR 0 1
31836: PPUSH
31837: CALL_OW 255
31841: ST_TO_ADDR
// x := GetX ( unit ) ;
31842: LD_ADDR_VAR 0 5
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 250
31856: ST_TO_ADDR
// y := GetY ( unit ) ;
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: CALL_OW 251
31871: ST_TO_ADDR
// r := 8 ;
31872: LD_ADDR_VAR 0 4
31876: PUSH
31877: LD_INT 8
31879: ST_TO_ADDR
// if x - r < 0 then
31880: LD_VAR 0 5
31884: PUSH
31885: LD_VAR 0 4
31889: MINUS
31890: PUSH
31891: LD_INT 0
31893: LESS
31894: IFFALSE 31906
// min_x := 0 else
31896: LD_ADDR_VAR 0 7
31900: PUSH
31901: LD_INT 0
31903: ST_TO_ADDR
31904: GO 31922
// min_x := x - r ;
31906: LD_ADDR_VAR 0 7
31910: PUSH
31911: LD_VAR 0 5
31915: PUSH
31916: LD_VAR 0 4
31920: MINUS
31921: ST_TO_ADDR
// if y - r < 0 then
31922: LD_VAR 0 6
31926: PUSH
31927: LD_VAR 0 4
31931: MINUS
31932: PUSH
31933: LD_INT 0
31935: LESS
31936: IFFALSE 31948
// min_y := 0 else
31938: LD_ADDR_VAR 0 8
31942: PUSH
31943: LD_INT 0
31945: ST_TO_ADDR
31946: GO 31964
// min_y := y - r ;
31948: LD_ADDR_VAR 0 8
31952: PUSH
31953: LD_VAR 0 6
31957: PUSH
31958: LD_VAR 0 4
31962: MINUS
31963: ST_TO_ADDR
// max_x := x + r ;
31964: LD_ADDR_VAR 0 9
31968: PUSH
31969: LD_VAR 0 5
31973: PUSH
31974: LD_VAR 0 4
31978: PLUS
31979: ST_TO_ADDR
// max_y := y + r ;
31980: LD_ADDR_VAR 0 10
31984: PUSH
31985: LD_VAR 0 6
31989: PUSH
31990: LD_VAR 0 4
31994: PLUS
31995: ST_TO_ADDR
// for _x = min_x to max_x do
31996: LD_ADDR_VAR 0 11
32000: PUSH
32001: DOUBLE
32002: LD_VAR 0 7
32006: DEC
32007: ST_TO_ADDR
32008: LD_VAR 0 9
32012: PUSH
32013: FOR_TO
32014: IFFALSE 32096
// for _y = min_y to max_y do
32016: LD_ADDR_VAR 0 12
32020: PUSH
32021: DOUBLE
32022: LD_VAR 0 8
32026: DEC
32027: ST_TO_ADDR
32028: LD_VAR 0 10
32032: PUSH
32033: FOR_TO
32034: IFFALSE 32092
// begin if not ValidHex ( _x , _y ) then
32036: LD_VAR 0 11
32040: PPUSH
32041: LD_VAR 0 12
32045: PPUSH
32046: CALL_OW 488
32050: NOT
32051: IFFALSE 32055
// continue ;
32053: GO 32033
// if MineAtPos ( _x , _y ) then
32055: LD_VAR 0 11
32059: PPUSH
32060: LD_VAR 0 12
32064: PPUSH
32065: CALL_OW 458
32069: IFFALSE 32090
// ViewMineAtPos ( _x , _y , side ) ;
32071: LD_VAR 0 11
32075: PPUSH
32076: LD_VAR 0 12
32080: PPUSH
32081: LD_VAR 0 3
32085: PPUSH
32086: CALL_OW 457
// end ;
32090: GO 32033
32092: POP
32093: POP
32094: GO 32013
32096: POP
32097: POP
// end ;
32098: LD_VAR 0 2
32102: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
32103: LD_INT 0
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
// if not units then
32111: LD_VAR 0 1
32115: NOT
32116: IFFALSE 32120
// exit ;
32118: GO 32550
// scaners := [ ] ;
32120: LD_ADDR_VAR 0 6
32124: PUSH
32125: EMPTY
32126: ST_TO_ADDR
// for i in units do
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_VAR 0 1
32136: PUSH
32137: FOR_IN
32138: IFFALSE 32295
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32140: LD_VAR 0 3
32144: PPUSH
32145: CALL_OW 264
32149: PUSH
32150: LD_INT 11
32152: NONEQUAL
32153: IFTRUE 32167
32155: PUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: CALL_OW 302
32165: NOT
32166: OR
32167: IFTRUE 32184
32169: PUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: CALL_OW 110
32179: PUSH
32180: LD_INT 502
32182: EQUAL
32183: OR
32184: IFFALSE 32188
// continue ;
32186: GO 32137
// ComStop ( i ) ;
32188: LD_VAR 0 3
32192: PPUSH
32193: CALL_OW 141
// x := GetX ( i ) ;
32197: LD_ADDR_VAR 0 4
32201: PUSH
32202: LD_VAR 0 3
32206: PPUSH
32207: CALL_OW 250
32211: ST_TO_ADDR
// y := GetY ( i ) ;
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: LD_VAR 0 3
32221: PPUSH
32222: CALL_OW 251
32226: ST_TO_ADDR
// if GetSide ( i ) = your_side then
32227: LD_VAR 0 3
32231: PPUSH
32232: CALL_OW 255
32236: PUSH
32237: LD_OWVAR 2
32241: EQUAL
32242: IFFALSE 32261
// PlaySoundXY ( x , y , mineDetector ) ;
32244: LD_VAR 0 4
32248: PPUSH
32249: LD_VAR 0 5
32253: PPUSH
32254: LD_STRING mineDetector
32256: PPUSH
32257: CALL_OW 366
// scaners := Join ( scaners , i ) ;
32261: LD_ADDR_VAR 0 6
32265: PUSH
32266: LD_VAR 0 6
32270: PPUSH
32271: LD_VAR 0 3
32275: PPUSH
32276: CALL 70738 0 2
32280: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
32281: LD_VAR 0 3
32285: PPUSH
32286: LD_INT 502
32288: PPUSH
32289: CALL_OW 109
// end ;
32293: GO 32137
32295: POP
32296: POP
// if not scaners then
32297: LD_VAR 0 6
32301: NOT
32302: IFFALSE 32306
// exit ;
32304: GO 32550
// wait ( 3 ) ;
32306: LD_INT 3
32308: PPUSH
32309: CALL_OW 67
// timer := 6 ;
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_INT 6
32320: ST_TO_ADDR
// repeat for i in scaners do
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: LD_VAR 0 6
32330: PUSH
32331: FOR_IN
32332: IFFALSE 32448
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
32334: LD_VAR 0 3
32338: PPUSH
32339: CALL_OW 302
32343: NOT
32344: IFTRUE 32357
32346: PUSH
32347: LD_VAR 0 3
32351: PPUSH
32352: CALL_OW 314
32356: OR
32357: IFTRUE 32388
32359: PUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: CALL_OW 263
32369: PUSH
32370: LD_INT 1
32372: EQUAL
32373: IFFALSE 32387
32375: PUSH
32376: LD_VAR 0 3
32380: PPUSH
32381: CALL_OW 311
32385: NOT
32386: AND
32387: OR
32388: IFFALSE 32432
// begin SetUnitDisplayNumber ( i , 0 ) ;
32390: LD_VAR 0 3
32394: PPUSH
32395: LD_INT 0
32397: PPUSH
32398: CALL_OW 505
// SetTag ( i , 0 ) ;
32402: LD_VAR 0 3
32406: PPUSH
32407: LD_INT 0
32409: PPUSH
32410: CALL_OW 109
// scaners := scaners diff i ;
32414: LD_ADDR_VAR 0 6
32418: PUSH
32419: LD_VAR 0 6
32423: PUSH
32424: LD_VAR 0 3
32428: DIFF
32429: ST_TO_ADDR
// continue ;
32430: GO 32331
// end ; SetUnitDisplayNumber ( i , timer ) ;
32432: LD_VAR 0 3
32436: PPUSH
32437: LD_VAR 0 7
32441: PPUSH
32442: CALL_OW 505
// end ;
32446: GO 32331
32448: POP
32449: POP
// if not scaners then
32450: LD_VAR 0 6
32454: NOT
32455: IFFALSE 32459
// exit ;
32457: GO 32550
// timer := Dec ( timer ) ;
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: LD_VAR 0 7
32468: PPUSH
32469: CALL 72133 0 1
32473: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32474: LD_INT 35
32476: PPUSH
32477: CALL_OW 67
// until timer = 0 ;
32481: LD_VAR 0 7
32485: PUSH
32486: LD_INT 0
32488: EQUAL
32489: IFFALSE 32321
// if not scaners then
32491: LD_VAR 0 6
32495: NOT
32496: IFFALSE 32500
// exit ;
32498: GO 32550
// for i in scaners do
32500: LD_ADDR_VAR 0 3
32504: PUSH
32505: LD_VAR 0 6
32509: PUSH
32510: FOR_IN
32511: IFFALSE 32548
// begin SetUnitDisplayNumber ( i , 0 ) ;
32513: LD_VAR 0 3
32517: PPUSH
32518: LD_INT 0
32520: PPUSH
32521: CALL_OW 505
// SetTag ( i , 0 ) ;
32525: LD_VAR 0 3
32529: PPUSH
32530: LD_INT 0
32532: PPUSH
32533: CALL_OW 109
// RevealDetectorMine ( i ) ;
32537: LD_VAR 0 3
32541: PPUSH
32542: CALL 31805 0 1
// end ;
32546: GO 32510
32548: POP
32549: POP
// end ;
32550: LD_VAR 0 2
32554: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
32555: LD_INT 0
32557: PPUSH
// if p1 = mine_detector_mode then
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 103
32565: EQUAL
32566: IFFALSE 32577
// DetectMine ( units ) ;
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL 32103 0 1
// end ; end_of_file
32577: LD_VAR 0 7
32581: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
// if exist_mode then
32586: LD_VAR 0 2
32590: IFFALSE 32636
// begin unit := CreateCharacter ( prefix & ident ) ;
32592: LD_ADDR_VAR 0 5
32596: PUSH
32597: LD_VAR 0 3
32601: PUSH
32602: LD_VAR 0 1
32606: STR
32607: PPUSH
32608: CALL_OW 34
32612: ST_TO_ADDR
// if unit then
32613: LD_VAR 0 5
32617: IFFALSE 32634
// DeleteCharacters ( prefix & ident ) ;
32619: LD_VAR 0 3
32623: PUSH
32624: LD_VAR 0 1
32628: STR
32629: PPUSH
32630: CALL_OW 40
// end else
32634: GO 32651
// unit := NewCharacter ( ident ) ;
32636: LD_ADDR_VAR 0 5
32640: PUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 25
32650: ST_TO_ADDR
// result := unit ;
32651: LD_ADDR_VAR 0 4
32655: PUSH
32656: LD_VAR 0 5
32660: ST_TO_ADDR
// end ;
32661: LD_VAR 0 4
32665: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
// if exist_mode then
32670: LD_VAR 0 2
32674: IFFALSE 32699
// unit := CreateCharacter ( prefix & ident ) else
32676: LD_ADDR_VAR 0 5
32680: PUSH
32681: LD_VAR 0 3
32685: PUSH
32686: LD_VAR 0 1
32690: STR
32691: PPUSH
32692: CALL_OW 34
32696: ST_TO_ADDR
32697: GO 32714
// unit := NewCharacter ( ident ) ;
32699: LD_ADDR_VAR 0 5
32703: PUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 25
32713: ST_TO_ADDR
// result := unit ;
32714: LD_ADDR_VAR 0 4
32718: PUSH
32719: LD_VAR 0 5
32723: ST_TO_ADDR
// end ;
32724: LD_VAR 0 4
32728: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32729: LD_INT 0
32731: PPUSH
32732: PPUSH
// if not side or not nation then
32733: LD_VAR 0 1
32737: NOT
32738: IFTRUE 32747
32740: PUSH
32741: LD_VAR 0 2
32745: NOT
32746: OR
32747: IFFALSE 32751
// exit ;
32749: GO 33545
// case nation of nation_american :
32751: LD_VAR 0 2
32755: PUSH
32756: LD_INT 1
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32986
32764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
32765: LD_ADDR_VAR 0 4
32769: PUSH
32770: LD_INT 35
32772: PUSH
32773: LD_INT 45
32775: PUSH
32776: LD_INT 46
32778: PUSH
32779: LD_INT 47
32781: PUSH
32782: LD_INT 82
32784: PUSH
32785: LD_INT 83
32787: PUSH
32788: LD_INT 84
32790: PUSH
32791: LD_INT 85
32793: PUSH
32794: LD_INT 86
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 6
32805: PUSH
32806: LD_INT 15
32808: PUSH
32809: LD_INT 16
32811: PUSH
32812: LD_INT 7
32814: PUSH
32815: LD_INT 12
32817: PUSH
32818: LD_INT 13
32820: PUSH
32821: LD_INT 10
32823: PUSH
32824: LD_INT 14
32826: PUSH
32827: LD_INT 20
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 22
32835: PUSH
32836: LD_INT 25
32838: PUSH
32839: LD_INT 32
32841: PUSH
32842: LD_INT 27
32844: PUSH
32845: LD_INT 36
32847: PUSH
32848: LD_INT 69
32850: PUSH
32851: LD_INT 39
32853: PUSH
32854: LD_INT 34
32856: PUSH
32857: LD_INT 40
32859: PUSH
32860: LD_INT 48
32862: PUSH
32863: LD_INT 49
32865: PUSH
32866: LD_INT 50
32868: PUSH
32869: LD_INT 51
32871: PUSH
32872: LD_INT 52
32874: PUSH
32875: LD_INT 53
32877: PUSH
32878: LD_INT 54
32880: PUSH
32881: LD_INT 55
32883: PUSH
32884: LD_INT 56
32886: PUSH
32887: LD_INT 57
32889: PUSH
32890: LD_INT 58
32892: PUSH
32893: LD_INT 59
32895: PUSH
32896: LD_INT 60
32898: PUSH
32899: LD_INT 61
32901: PUSH
32902: LD_INT 62
32904: PUSH
32905: LD_INT 80
32907: PUSH
32908: LD_INT 82
32910: PUSH
32911: LD_INT 83
32913: PUSH
32914: LD_INT 84
32916: PUSH
32917: LD_INT 85
32919: PUSH
32920: LD_INT 86
32922: PUSH
32923: LD_INT 90
32925: PUSH
32926: LD_INT 93
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
32984: GO 33467
32986: LD_INT 2
32988: DOUBLE
32989: EQUAL
32990: IFTRUE 32994
32992: GO 33228
32994: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32995: LD_ADDR_VAR 0 4
32999: PUSH
33000: LD_INT 35
33002: PUSH
33003: LD_INT 45
33005: PUSH
33006: LD_INT 46
33008: PUSH
33009: LD_INT 47
33011: PUSH
33012: LD_INT 82
33014: PUSH
33015: LD_INT 83
33017: PUSH
33018: LD_INT 84
33020: PUSH
33021: LD_INT 85
33023: PUSH
33024: LD_INT 87
33026: PUSH
33027: LD_INT 70
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 11
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: LD_INT 5
33044: PUSH
33045: LD_INT 6
33047: PUSH
33048: LD_INT 15
33050: PUSH
33051: LD_INT 18
33053: PUSH
33054: LD_INT 7
33056: PUSH
33057: LD_INT 17
33059: PUSH
33060: LD_INT 8
33062: PUSH
33063: LD_INT 20
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 72
33074: PUSH
33075: LD_INT 26
33077: PUSH
33078: LD_INT 69
33080: PUSH
33081: LD_INT 39
33083: PUSH
33084: LD_INT 40
33086: PUSH
33087: LD_INT 41
33089: PUSH
33090: LD_INT 42
33092: PUSH
33093: LD_INT 43
33095: PUSH
33096: LD_INT 48
33098: PUSH
33099: LD_INT 49
33101: PUSH
33102: LD_INT 50
33104: PUSH
33105: LD_INT 51
33107: PUSH
33108: LD_INT 52
33110: PUSH
33111: LD_INT 53
33113: PUSH
33114: LD_INT 54
33116: PUSH
33117: LD_INT 55
33119: PUSH
33120: LD_INT 56
33122: PUSH
33123: LD_INT 60
33125: PUSH
33126: LD_INT 61
33128: PUSH
33129: LD_INT 62
33131: PUSH
33132: LD_INT 66
33134: PUSH
33135: LD_INT 67
33137: PUSH
33138: LD_INT 68
33140: PUSH
33141: LD_INT 81
33143: PUSH
33144: LD_INT 82
33146: PUSH
33147: LD_INT 83
33149: PUSH
33150: LD_INT 84
33152: PUSH
33153: LD_INT 85
33155: PUSH
33156: LD_INT 87
33158: PUSH
33159: LD_INT 88
33161: PUSH
33162: LD_INT 92
33164: PUSH
33165: LD_INT 94
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
33226: GO 33467
33228: LD_INT 3
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33466
33236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
33237: LD_ADDR_VAR 0 4
33241: PUSH
33242: LD_INT 46
33244: PUSH
33245: LD_INT 47
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 82
33256: PUSH
33257: LD_INT 83
33259: PUSH
33260: LD_INT 84
33262: PUSH
33263: LD_INT 85
33265: PUSH
33266: LD_INT 86
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 9
33274: PUSH
33275: LD_INT 20
33277: PUSH
33278: LD_INT 19
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 24
33286: PUSH
33287: LD_INT 22
33289: PUSH
33290: LD_INT 25
33292: PUSH
33293: LD_INT 28
33295: PUSH
33296: LD_INT 29
33298: PUSH
33299: LD_INT 30
33301: PUSH
33302: LD_INT 31
33304: PUSH
33305: LD_INT 37
33307: PUSH
33308: LD_INT 38
33310: PUSH
33311: LD_INT 32
33313: PUSH
33314: LD_INT 27
33316: PUSH
33317: LD_INT 33
33319: PUSH
33320: LD_INT 69
33322: PUSH
33323: LD_INT 39
33325: PUSH
33326: LD_INT 34
33328: PUSH
33329: LD_INT 40
33331: PUSH
33332: LD_INT 71
33334: PUSH
33335: LD_INT 23
33337: PUSH
33338: LD_INT 44
33340: PUSH
33341: LD_INT 48
33343: PUSH
33344: LD_INT 49
33346: PUSH
33347: LD_INT 50
33349: PUSH
33350: LD_INT 51
33352: PUSH
33353: LD_INT 52
33355: PUSH
33356: LD_INT 53
33358: PUSH
33359: LD_INT 54
33361: PUSH
33362: LD_INT 55
33364: PUSH
33365: LD_INT 56
33367: PUSH
33368: LD_INT 57
33370: PUSH
33371: LD_INT 58
33373: PUSH
33374: LD_INT 59
33376: PUSH
33377: LD_INT 63
33379: PUSH
33380: LD_INT 64
33382: PUSH
33383: LD_INT 65
33385: PUSH
33386: LD_INT 82
33388: PUSH
33389: LD_INT 83
33391: PUSH
33392: LD_INT 84
33394: PUSH
33395: LD_INT 85
33397: PUSH
33398: LD_INT 86
33400: PUSH
33401: LD_INT 89
33403: PUSH
33404: LD_INT 91
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: ST_TO_ADDR
33464: GO 33467
33466: POP
// if state > - 1 and state < 3 then
33467: LD_VAR 0 3
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: GREATER
33476: IFFALSE 33488
33478: PUSH
33479: LD_VAR 0 3
33483: PUSH
33484: LD_INT 3
33486: LESS
33487: AND
33488: IFFALSE 33545
// for i in result do
33490: LD_ADDR_VAR 0 5
33494: PUSH
33495: LD_VAR 0 4
33499: PUSH
33500: FOR_IN
33501: IFFALSE 33543
// if GetTech ( i , side ) <> state then
33503: LD_VAR 0 5
33507: PPUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 321
33517: PUSH
33518: LD_VAR 0 3
33522: NONEQUAL
33523: IFFALSE 33541
// result := result diff i ;
33525: LD_ADDR_VAR 0 4
33529: PUSH
33530: LD_VAR 0 4
33534: PUSH
33535: LD_VAR 0 5
33539: DIFF
33540: ST_TO_ADDR
33541: GO 33500
33543: POP
33544: POP
// end ;
33545: LD_VAR 0 4
33549: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33550: LD_INT 0
33552: PPUSH
33553: PPUSH
33554: PPUSH
// result := true ;
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_INT 1
33562: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33563: LD_ADDR_VAR 0 5
33567: PUSH
33568: LD_VAR 0 2
33572: PPUSH
33573: CALL_OW 480
33577: ST_TO_ADDR
// if not tmp then
33578: LD_VAR 0 5
33582: NOT
33583: IFFALSE 33587
// exit ;
33585: GO 33636
// for i in tmp do
33587: LD_ADDR_VAR 0 4
33591: PUSH
33592: LD_VAR 0 5
33596: PUSH
33597: FOR_IN
33598: IFFALSE 33634
// if GetTech ( i , side ) <> state_researched then
33600: LD_VAR 0 4
33604: PPUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 321
33614: PUSH
33615: LD_INT 2
33617: NONEQUAL
33618: IFFALSE 33632
// begin result := false ;
33620: LD_ADDR_VAR 0 3
33624: PUSH
33625: LD_INT 0
33627: ST_TO_ADDR
// exit ;
33628: POP
33629: POP
33630: GO 33636
// end ;
33632: GO 33597
33634: POP
33635: POP
// end ;
33636: LD_VAR 0 3
33640: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33656: LD_VAR 0 1
33660: NOT
33661: IFTRUE 33678
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 257
33673: PUSH
33674: LD_INT 9
33676: NONEQUAL
33677: OR
33678: IFFALSE 33682
// exit ;
33680: GO 34261
// side := GetSide ( unit ) ;
33682: LD_ADDR_VAR 0 9
33686: PUSH
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL_OW 255
33696: ST_TO_ADDR
// tech_space := tech_spacanom ;
33697: LD_ADDR_VAR 0 12
33701: PUSH
33702: LD_INT 29
33704: ST_TO_ADDR
// tech_time := tech_taurad ;
33705: LD_ADDR_VAR 0 13
33709: PUSH
33710: LD_INT 28
33712: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33713: LD_ADDR_VAR 0 11
33717: PUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 310
33727: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33728: LD_VAR 0 11
33732: PPUSH
33733: CALL_OW 247
33737: PUSH
33738: LD_INT 2
33740: EQUAL
33741: IFFALSE 33745
// exit ;
33743: GO 34261
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33745: LD_ADDR_VAR 0 8
33749: PUSH
33750: LD_INT 81
33752: PUSH
33753: LD_VAR 0 9
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 21
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PPUSH
33783: CALL_OW 69
33787: ST_TO_ADDR
// if not tmp then
33788: LD_VAR 0 8
33792: NOT
33793: IFFALSE 33797
// exit ;
33795: GO 34261
// if in_unit then
33797: LD_VAR 0 11
33801: IFFALSE 33825
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33803: LD_ADDR_VAR 0 10
33807: PUSH
33808: LD_VAR 0 8
33812: PPUSH
33813: LD_VAR 0 11
33817: PPUSH
33818: CALL_OW 74
33822: ST_TO_ADDR
33823: GO 33845
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33825: LD_ADDR_VAR 0 10
33829: PUSH
33830: LD_VAR 0 8
33834: PPUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 74
33844: ST_TO_ADDR
// if not enemy then
33845: LD_VAR 0 10
33849: NOT
33850: IFFALSE 33854
// exit ;
33852: GO 34261
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33854: LD_VAR 0 11
33858: IFFALSE 33880
33860: PUSH
33861: LD_VAR 0 11
33865: PPUSH
33866: LD_VAR 0 10
33870: PPUSH
33871: CALL_OW 296
33875: PUSH
33876: LD_INT 13
33878: GREATER
33879: AND
33880: IFTRUE 33902
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: LD_VAR 0 10
33892: PPUSH
33893: CALL_OW 296
33897: PUSH
33898: LD_INT 12
33900: GREATER
33901: OR
33902: IFFALSE 33906
// exit ;
33904: GO 34261
// missile := [ 1 ] ;
33906: LD_ADDR_VAR 0 14
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33917: LD_VAR 0 9
33921: PPUSH
33922: LD_VAR 0 12
33926: PPUSH
33927: CALL_OW 325
33931: IFFALSE 33960
// missile := Replace ( missile , missile + 1 , 2 ) ;
33933: LD_ADDR_VAR 0 14
33937: PUSH
33938: LD_VAR 0 14
33942: PPUSH
33943: LD_VAR 0 14
33947: PUSH
33948: LD_INT 1
33950: PLUS
33951: PPUSH
33952: LD_INT 2
33954: PPUSH
33955: CALL_OW 1
33959: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33960: LD_VAR 0 9
33964: PPUSH
33965: LD_VAR 0 13
33969: PPUSH
33970: CALL_OW 325
33974: IFFALSE 33998
33976: PUSH
33977: LD_VAR 0 10
33981: PPUSH
33982: CALL_OW 255
33986: PPUSH
33987: LD_VAR 0 13
33991: PPUSH
33992: CALL_OW 325
33996: NOT
33997: AND
33998: IFFALSE 34027
// missile := Replace ( missile , missile + 1 , 3 ) ;
34000: LD_ADDR_VAR 0 14
34004: PUSH
34005: LD_VAR 0 14
34009: PPUSH
34010: LD_VAR 0 14
34014: PUSH
34015: LD_INT 1
34017: PLUS
34018: PPUSH
34019: LD_INT 3
34021: PPUSH
34022: CALL_OW 1
34026: ST_TO_ADDR
// if missile < 2 then
34027: LD_VAR 0 14
34031: PUSH
34032: LD_INT 2
34034: LESS
34035: IFFALSE 34039
// exit ;
34037: GO 34261
// x := GetX ( enemy ) ;
34039: LD_ADDR_VAR 0 4
34043: PUSH
34044: LD_VAR 0 10
34048: PPUSH
34049: CALL_OW 250
34053: ST_TO_ADDR
// y := GetY ( enemy ) ;
34054: LD_ADDR_VAR 0 5
34058: PUSH
34059: LD_VAR 0 10
34063: PPUSH
34064: CALL_OW 251
34068: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34069: LD_ADDR_VAR 0 6
34073: PUSH
34074: LD_VAR 0 4
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PPUSH
34083: LD_INT 1
34085: PPUSH
34086: CALL_OW 12
34090: PLUS
34091: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34092: LD_ADDR_VAR 0 7
34096: PUSH
34097: LD_VAR 0 5
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PPUSH
34106: LD_INT 1
34108: PPUSH
34109: CALL_OW 12
34113: PLUS
34114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34115: LD_VAR 0 6
34119: PPUSH
34120: LD_VAR 0 7
34124: PPUSH
34125: CALL_OW 488
34129: NOT
34130: IFFALSE 34152
// begin _x := x ;
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_VAR 0 4
34141: ST_TO_ADDR
// _y := y ;
34142: LD_ADDR_VAR 0 7
34146: PUSH
34147: LD_VAR 0 5
34151: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 1
34159: PPUSH
34160: LD_VAR 0 14
34164: PPUSH
34165: CALL_OW 12
34169: ST_TO_ADDR
// case i of 1 :
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 1
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34183
34181: GO 34200
34183: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34184: LD_VAR 0 1
34188: PPUSH
34189: LD_VAR 0 10
34193: PPUSH
34194: CALL_OW 115
34198: GO 34261
34200: LD_INT 2
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34230
34208: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34209: LD_VAR 0 1
34213: PPUSH
34214: LD_VAR 0 6
34218: PPUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: CALL_OW 153
34228: GO 34261
34230: LD_INT 3
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34260
34238: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34239: LD_VAR 0 1
34243: PPUSH
34244: LD_VAR 0 6
34248: PPUSH
34249: LD_VAR 0 7
34253: PPUSH
34254: CALL_OW 154
34258: GO 34261
34260: POP
// end ;
34261: LD_VAR 0 2
34265: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34266: LD_INT 0
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
// if not unit or not building then
34274: LD_VAR 0 1
34278: NOT
34279: IFTRUE 34288
34281: PUSH
34282: LD_VAR 0 2
34286: NOT
34287: OR
34288: IFFALSE 34292
// exit ;
34290: GO 34450
// x := GetX ( building ) ;
34292: LD_ADDR_VAR 0 5
34296: PUSH
34297: LD_VAR 0 2
34301: PPUSH
34302: CALL_OW 250
34306: ST_TO_ADDR
// y := GetY ( building ) ;
34307: LD_ADDR_VAR 0 6
34311: PUSH
34312: LD_VAR 0 2
34316: PPUSH
34317: CALL_OW 251
34321: ST_TO_ADDR
// for i := 0 to 5 do
34322: LD_ADDR_VAR 0 4
34326: PUSH
34327: DOUBLE
34328: LD_INT 0
34330: DEC
34331: ST_TO_ADDR
34332: LD_INT 5
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34448
// begin _x := ShiftX ( x , i , 3 ) ;
34338: LD_ADDR_VAR 0 7
34342: PUSH
34343: LD_VAR 0 5
34347: PPUSH
34348: LD_VAR 0 4
34352: PPUSH
34353: LD_INT 3
34355: PPUSH
34356: CALL_OW 272
34360: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34361: LD_ADDR_VAR 0 8
34365: PUSH
34366: LD_VAR 0 6
34370: PPUSH
34371: LD_VAR 0 4
34375: PPUSH
34376: LD_INT 3
34378: PPUSH
34379: CALL_OW 273
34383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34384: LD_VAR 0 7
34388: PPUSH
34389: LD_VAR 0 8
34393: PPUSH
34394: CALL_OW 488
34398: NOT
34399: IFFALSE 34403
// continue ;
34401: GO 34335
// if HexInfo ( _x , _y ) = 0 then
34403: LD_VAR 0 7
34407: PPUSH
34408: LD_VAR 0 8
34412: PPUSH
34413: CALL_OW 428
34417: PUSH
34418: LD_INT 0
34420: EQUAL
34421: IFFALSE 34446
// begin ComMoveXY ( unit , _x , _y ) ;
34423: LD_VAR 0 1
34427: PPUSH
34428: LD_VAR 0 7
34432: PPUSH
34433: LD_VAR 0 8
34437: PPUSH
34438: CALL_OW 111
// exit ;
34442: POP
34443: POP
34444: GO 34450
// end ; end ;
34446: GO 34335
34448: POP
34449: POP
// end ;
34450: LD_VAR 0 3
34454: RET
// export function ScanBase ( side , base_area ) ; begin
34455: LD_INT 0
34457: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: LD_INT 81
34470: PUSH
34471: LD_VAR 0 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PPUSH
34480: CALL_OW 70
34484: ST_TO_ADDR
// end ;
34485: LD_VAR 0 3
34489: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34490: LD_INT 0
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
// result := false ;
34496: LD_ADDR_VAR 0 2
34500: PUSH
34501: LD_INT 0
34503: ST_TO_ADDR
// side := GetSide ( unit ) ;
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 255
34518: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34519: LD_ADDR_VAR 0 4
34523: PUSH
34524: LD_VAR 0 1
34528: PPUSH
34529: CALL_OW 248
34533: ST_TO_ADDR
// case nat of 1 :
34534: LD_VAR 0 4
34538: PUSH
34539: LD_INT 1
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34558
34547: POP
// tech := tech_lassight ; 2 :
34548: LD_ADDR_VAR 0 5
34552: PUSH
34553: LD_INT 12
34555: ST_TO_ADDR
34556: GO 34597
34558: LD_INT 2
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34577
34566: POP
// tech := tech_mortar ; 3 :
34567: LD_ADDR_VAR 0 5
34571: PUSH
34572: LD_INT 41
34574: ST_TO_ADDR
34575: GO 34597
34577: LD_INT 3
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34596
34585: POP
// tech := tech_bazooka ; end ;
34586: LD_ADDR_VAR 0 5
34590: PUSH
34591: LD_INT 44
34593: ST_TO_ADDR
34594: GO 34597
34596: POP
// if Researched ( side , tech ) then
34597: LD_VAR 0 3
34601: PPUSH
34602: LD_VAR 0 5
34606: PPUSH
34607: CALL_OW 325
34611: IFFALSE 34638
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34613: LD_ADDR_VAR 0 2
34617: PUSH
34618: LD_INT 5
34620: PUSH
34621: LD_INT 8
34623: PUSH
34624: LD_INT 9
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: PUSH
34632: LD_VAR 0 4
34636: ARRAY
34637: ST_TO_ADDR
// end ;
34638: LD_VAR 0 2
34642: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34643: LD_INT 0
34645: PPUSH
34646: PPUSH
34647: PPUSH
// if not mines then
34648: LD_VAR 0 2
34652: NOT
34653: IFFALSE 34657
// exit ;
34655: GO 34801
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34657: LD_ADDR_VAR 0 5
34661: PUSH
34662: LD_INT 81
34664: PUSH
34665: LD_VAR 0 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 21
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PPUSH
34695: CALL_OW 69
34699: ST_TO_ADDR
// for i in mines do
34700: LD_ADDR_VAR 0 4
34704: PUSH
34705: LD_VAR 0 2
34709: PUSH
34710: FOR_IN
34711: IFFALSE 34799
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34713: LD_VAR 0 4
34717: PUSH
34718: LD_INT 1
34720: ARRAY
34721: PPUSH
34722: LD_VAR 0 4
34726: PUSH
34727: LD_INT 2
34729: ARRAY
34730: PPUSH
34731: CALL_OW 458
34735: NOT
34736: IFFALSE 34740
// continue ;
34738: GO 34710
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34740: LD_VAR 0 4
34744: PUSH
34745: LD_INT 1
34747: ARRAY
34748: PPUSH
34749: LD_VAR 0 4
34753: PUSH
34754: LD_INT 2
34756: ARRAY
34757: PPUSH
34758: CALL_OW 428
34762: PUSH
34763: LD_VAR 0 5
34767: IN
34768: IFFALSE 34797
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34770: LD_VAR 0 4
34774: PUSH
34775: LD_INT 1
34777: ARRAY
34778: PPUSH
34779: LD_VAR 0 4
34783: PUSH
34784: LD_INT 2
34786: ARRAY
34787: PPUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 456
// end ;
34797: GO 34710
34799: POP
34800: POP
// end ;
34801: LD_VAR 0 3
34805: RET
// export function Count ( array ) ; begin
34806: LD_INT 0
34808: PPUSH
// result := array + 0 ;
34809: LD_ADDR_VAR 0 2
34813: PUSH
34814: LD_VAR 0 1
34818: PUSH
34819: LD_INT 0
34821: PLUS
34822: ST_TO_ADDR
// end ;
34823: LD_VAR 0 2
34827: RET
// export function IsEmpty ( building ) ; begin
34828: LD_INT 0
34830: PPUSH
// if not building then
34831: LD_VAR 0 1
34835: NOT
34836: IFFALSE 34840
// exit ;
34838: GO 34883
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34840: LD_ADDR_VAR 0 2
34844: PUSH
34845: LD_VAR 0 1
34849: PUSH
34850: LD_INT 22
34852: PUSH
34853: LD_VAR 0 1
34857: PPUSH
34858: CALL_OW 255
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 58
34869: PUSH
34870: EMPTY
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PPUSH
34877: CALL_OW 69
34881: IN
34882: ST_TO_ADDR
// end ;
34883: LD_VAR 0 2
34887: RET
// export function IsNotFull ( building ) ; var places ; begin
34888: LD_INT 0
34890: PPUSH
34891: PPUSH
// if not building then
34892: LD_VAR 0 1
34896: NOT
34897: IFFALSE 34901
// exit ;
34899: GO 34929
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34901: LD_ADDR_VAR 0 2
34905: PUSH
34906: LD_VAR 0 1
34910: PPUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 62
34916: PUSH
34917: EMPTY
34918: LIST
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 72
34928: ST_TO_ADDR
// end ;
34929: LD_VAR 0 2
34933: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34934: LD_INT 0
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
// tmp := [ ] ;
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: EMPTY
34946: ST_TO_ADDR
// list := [ ] ;
34947: LD_ADDR_VAR 0 5
34951: PUSH
34952: EMPTY
34953: ST_TO_ADDR
// for i = 16 to 25 do
34954: LD_ADDR_VAR 0 4
34958: PUSH
34959: DOUBLE
34960: LD_INT 16
34962: DEC
34963: ST_TO_ADDR
34964: LD_INT 25
34966: PUSH
34967: FOR_TO
34968: IFFALSE 35041
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_VAR 0 3
34979: PUSH
34980: LD_INT 22
34982: PUSH
34983: LD_VAR 0 1
34987: PPUSH
34988: CALL_OW 255
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 91
34999: PUSH
35000: LD_VAR 0 1
35004: PUSH
35005: LD_INT 6
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: LD_VAR 0 4
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: PPUSH
35033: CALL_OW 69
35037: ADD
35038: ST_TO_ADDR
35039: GO 34967
35041: POP
35042: POP
// for i = 1 to tmp do
35043: LD_ADDR_VAR 0 4
35047: PUSH
35048: DOUBLE
35049: LD_INT 1
35051: DEC
35052: ST_TO_ADDR
35053: LD_VAR 0 3
35057: PUSH
35058: FOR_TO
35059: IFFALSE 35147
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35061: LD_ADDR_VAR 0 5
35065: PUSH
35066: LD_VAR 0 5
35070: PUSH
35071: LD_VAR 0 3
35075: PUSH
35076: LD_VAR 0 4
35080: ARRAY
35081: PPUSH
35082: CALL_OW 266
35086: PUSH
35087: LD_VAR 0 3
35091: PUSH
35092: LD_VAR 0 4
35096: ARRAY
35097: PPUSH
35098: CALL_OW 250
35102: PUSH
35103: LD_VAR 0 3
35107: PUSH
35108: LD_VAR 0 4
35112: ARRAY
35113: PPUSH
35114: CALL_OW 251
35118: PUSH
35119: LD_VAR 0 3
35123: PUSH
35124: LD_VAR 0 4
35128: ARRAY
35129: PPUSH
35130: CALL_OW 254
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: ADD
35144: ST_TO_ADDR
35145: GO 35058
35147: POP
35148: POP
// result := list ;
35149: LD_ADDR_VAR 0 2
35153: PUSH
35154: LD_VAR 0 5
35158: ST_TO_ADDR
// end ;
35159: LD_VAR 0 2
35163: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35164: LD_INT 0
35166: PPUSH
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
// if not factory then
35173: LD_VAR 0 1
35177: NOT
35178: IFFALSE 35182
// exit ;
35180: GO 35785
// if control = control_apeman then
35182: LD_VAR 0 4
35186: PUSH
35187: LD_INT 5
35189: EQUAL
35190: IFFALSE 35299
// begin tmp := UnitsInside ( factory ) ;
35192: LD_ADDR_VAR 0 8
35196: PUSH
35197: LD_VAR 0 1
35201: PPUSH
35202: CALL_OW 313
35206: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35207: LD_VAR 0 8
35211: PPUSH
35212: LD_INT 25
35214: PUSH
35215: LD_INT 12
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PPUSH
35222: CALL_OW 72
35226: NOT
35227: IFFALSE 35237
// control := control_manual ;
35229: LD_ADDR_VAR 0 4
35233: PUSH
35234: LD_INT 1
35236: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35237: LD_ADDR_VAR 0 8
35241: PUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL 34934 0 1
35251: ST_TO_ADDR
// if tmp then
35252: LD_VAR 0 8
35256: IFFALSE 35299
// begin for i in tmp do
35258: LD_ADDR_VAR 0 7
35262: PUSH
35263: LD_VAR 0 8
35267: PUSH
35268: FOR_IN
35269: IFFALSE 35297
// if i [ 1 ] = b_ext_radio then
35271: LD_VAR 0 7
35275: PUSH
35276: LD_INT 1
35278: ARRAY
35279: PUSH
35280: LD_INT 22
35282: EQUAL
35283: IFFALSE 35295
// begin control := control_remote ;
35285: LD_ADDR_VAR 0 4
35289: PUSH
35290: LD_INT 2
35292: ST_TO_ADDR
// break ;
35293: GO 35297
// end ;
35295: GO 35268
35297: POP
35298: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35299: LD_VAR 0 1
35303: PPUSH
35304: LD_VAR 0 2
35308: PPUSH
35309: LD_VAR 0 3
35313: PPUSH
35314: LD_VAR 0 4
35318: PPUSH
35319: LD_VAR 0 5
35323: PPUSH
35324: CALL_OW 448
35328: IFFALSE 35363
// begin result := [ chassis , engine , control , weapon ] ;
35330: LD_ADDR_VAR 0 6
35334: PUSH
35335: LD_VAR 0 2
35339: PUSH
35340: LD_VAR 0 3
35344: PUSH
35345: LD_VAR 0 4
35349: PUSH
35350: LD_VAR 0 5
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// exit ;
35361: GO 35785
// end ; _chassis := AvailableChassisList ( factory ) ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_VAR 0 1
35372: PPUSH
35373: CALL_OW 475
35377: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35378: LD_ADDR_VAR 0 11
35382: PUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 476
35392: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35393: LD_ADDR_VAR 0 12
35397: PUSH
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 477
35407: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35408: LD_ADDR_VAR 0 10
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 478
35422: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35423: LD_VAR 0 9
35427: NOT
35428: IFTRUE 35437
35430: PUSH
35431: LD_VAR 0 11
35435: NOT
35436: OR
35437: IFTRUE 35446
35439: PUSH
35440: LD_VAR 0 12
35444: NOT
35445: OR
35446: IFTRUE 35455
35448: PUSH
35449: LD_VAR 0 10
35453: NOT
35454: OR
35455: IFFALSE 35490
// begin result := [ chassis , engine , control , weapon ] ;
35457: LD_ADDR_VAR 0 6
35461: PUSH
35462: LD_VAR 0 2
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_VAR 0 4
35476: PUSH
35477: LD_VAR 0 5
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// exit ;
35488: GO 35785
// end ; if not chassis in _chassis then
35490: LD_VAR 0 2
35494: PUSH
35495: LD_VAR 0 9
35499: IN
35500: NOT
35501: IFFALSE 35527
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35503: LD_ADDR_VAR 0 2
35507: PUSH
35508: LD_VAR 0 9
35512: PUSH
35513: LD_INT 1
35515: PPUSH
35516: LD_VAR 0 9
35520: PPUSH
35521: CALL_OW 12
35525: ARRAY
35526: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 3
35536: PPUSH
35537: CALL 35790 0 2
35541: NOT
35542: IFFALSE 35603
// repeat engine := _engine [ 1 ] ;
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_VAR 0 11
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35558: LD_ADDR_VAR 0 11
35562: PUSH
35563: LD_VAR 0 11
35567: PPUSH
35568: LD_INT 1
35570: PPUSH
35571: CALL_OW 3
35575: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35576: LD_VAR 0 2
35580: PPUSH
35581: LD_VAR 0 3
35585: PPUSH
35586: CALL 35790 0 2
35590: IFTRUE 35601
35592: PUSH
35593: LD_VAR 0 11
35597: PUSH
35598: EMPTY
35599: EQUAL
35600: OR
35601: IFFALSE 35544
// if not control in _control then
35603: LD_VAR 0 4
35607: PUSH
35608: LD_VAR 0 12
35612: IN
35613: NOT
35614: IFFALSE 35640
// control := _control [ rand ( 1 , _control ) ] ;
35616: LD_ADDR_VAR 0 4
35620: PUSH
35621: LD_VAR 0 12
35625: PUSH
35626: LD_INT 1
35628: PPUSH
35629: LD_VAR 0 12
35633: PPUSH
35634: CALL_OW 12
35638: ARRAY
35639: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35640: LD_VAR 0 2
35644: PPUSH
35645: LD_VAR 0 5
35649: PPUSH
35650: CALL 36012 0 2
35654: NOT
35655: IFFALSE 35716
// repeat weapon := _weapon [ 1 ] ;
35657: LD_ADDR_VAR 0 5
35661: PUSH
35662: LD_VAR 0 10
35666: PUSH
35667: LD_INT 1
35669: ARRAY
35670: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35671: LD_ADDR_VAR 0 10
35675: PUSH
35676: LD_VAR 0 10
35680: PPUSH
35681: LD_INT 1
35683: PPUSH
35684: CALL_OW 3
35688: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_VAR 0 5
35698: PPUSH
35699: CALL 36012 0 2
35703: IFTRUE 35714
35705: PUSH
35706: LD_VAR 0 10
35710: PUSH
35711: EMPTY
35712: EQUAL
35713: OR
35714: IFFALSE 35657
// result := [ ] ;
35716: LD_ADDR_VAR 0 6
35720: PUSH
35721: EMPTY
35722: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35723: LD_VAR 0 1
35727: PPUSH
35728: LD_VAR 0 2
35732: PPUSH
35733: LD_VAR 0 3
35737: PPUSH
35738: LD_VAR 0 4
35742: PPUSH
35743: LD_VAR 0 5
35747: PPUSH
35748: CALL_OW 448
35752: IFFALSE 35785
// result := [ chassis , engine , control , weapon ] ;
35754: LD_ADDR_VAR 0 6
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_VAR 0 3
35768: PUSH
35769: LD_VAR 0 4
35773: PUSH
35774: LD_VAR 0 5
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// end ;
35785: LD_VAR 0 6
35789: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35790: LD_INT 0
35792: PPUSH
// if not chassis or not engine then
35793: LD_VAR 0 1
35797: NOT
35798: IFTRUE 35807
35800: PUSH
35801: LD_VAR 0 2
35805: NOT
35806: OR
35807: IFFALSE 35811
// exit ;
35809: GO 36007
// case engine of engine_solar :
35811: LD_VAR 0 2
35815: PUSH
35816: LD_INT 2
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35862
35824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_INT 11
35832: PUSH
35833: LD_INT 12
35835: PUSH
35836: LD_INT 13
35838: PUSH
35839: LD_INT 14
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
35860: GO 35991
35862: LD_INT 1
35864: DOUBLE
35865: EQUAL
35866: IFTRUE 35870
35868: GO 35932
35870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35871: LD_ADDR_VAR 0 3
35875: PUSH
35876: LD_INT 11
35878: PUSH
35879: LD_INT 12
35881: PUSH
35882: LD_INT 13
35884: PUSH
35885: LD_INT 14
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 4
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: LD_INT 21
35905: PUSH
35906: LD_INT 23
35908: PUSH
35909: LD_INT 22
35911: PUSH
35912: LD_INT 24
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
35930: GO 35991
35932: LD_INT 3
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35990
35940: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35941: LD_ADDR_VAR 0 3
35945: PUSH
35946: LD_INT 13
35948: PUSH
35949: LD_INT 14
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: LD_INT 4
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: LD_INT 21
35966: PUSH
35967: LD_INT 22
35969: PUSH
35970: LD_INT 23
35972: PUSH
35973: LD_INT 24
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
35988: GO 35991
35990: POP
// result := ( chassis in result ) ;
35991: LD_ADDR_VAR 0 3
35995: PUSH
35996: LD_VAR 0 1
36000: PUSH
36001: LD_VAR 0 3
36005: IN
36006: ST_TO_ADDR
// end ;
36007: LD_VAR 0 3
36011: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36012: LD_INT 0
36014: PPUSH
// if not chassis or not weapon then
36015: LD_VAR 0 1
36019: NOT
36020: IFTRUE 36029
36022: PUSH
36023: LD_VAR 0 2
36027: NOT
36028: OR
36029: IFFALSE 36033
// exit ;
36031: GO 37093
// case weapon of us_machine_gun :
36033: LD_VAR 0 2
36037: PUSH
36038: LD_INT 2
36040: DOUBLE
36041: EQUAL
36042: IFTRUE 36046
36044: GO 36076
36046: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: LD_INT 5
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
36074: GO 37077
36076: LD_INT 3
36078: DOUBLE
36079: EQUAL
36080: IFTRUE 36084
36082: GO 36114
36084: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36085: LD_ADDR_VAR 0 3
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: LD_INT 4
36101: PUSH
36102: LD_INT 5
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: ST_TO_ADDR
36112: GO 37077
36114: LD_INT 11
36116: DOUBLE
36117: EQUAL
36118: IFTRUE 36122
36120: GO 36152
36122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36123: LD_ADDR_VAR 0 3
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: LD_INT 4
36139: PUSH
36140: LD_INT 5
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
36150: GO 37077
36152: LD_INT 4
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36160
36158: GO 36186
36160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36161: LD_ADDR_VAR 0 3
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: LD_INT 4
36174: PUSH
36175: LD_INT 5
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
36184: GO 37077
36186: LD_INT 5
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36220
36194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 4
36208: PUSH
36209: LD_INT 5
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
36218: GO 37077
36220: LD_INT 9
36222: DOUBLE
36223: EQUAL
36224: IFTRUE 36228
36226: GO 36254
36228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36229: LD_ADDR_VAR 0 3
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: LD_INT 4
36242: PUSH
36243: LD_INT 5
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
36252: GO 37077
36254: LD_INT 7
36256: DOUBLE
36257: EQUAL
36258: IFTRUE 36262
36260: GO 36288
36262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36263: LD_ADDR_VAR 0 3
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 4
36276: PUSH
36277: LD_INT 5
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
36286: GO 37077
36288: LD_INT 12
36290: DOUBLE
36291: EQUAL
36292: IFTRUE 36296
36294: GO 36322
36296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 4
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
36320: GO 37077
36322: LD_INT 13
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36330
36328: GO 36356
36330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36331: LD_ADDR_VAR 0 3
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 4
36344: PUSH
36345: LD_INT 5
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
36354: GO 37077
36356: LD_INT 14
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36382
36364: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_INT 4
36372: PUSH
36373: LD_INT 5
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: ST_TO_ADDR
36380: GO 37077
36382: LD_INT 6
36384: DOUBLE
36385: EQUAL
36386: IFTRUE 36390
36388: GO 36408
36390: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36391: LD_ADDR_VAR 0 3
36395: PUSH
36396: LD_INT 4
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: ST_TO_ADDR
36406: GO 37077
36408: LD_INT 10
36410: DOUBLE
36411: EQUAL
36412: IFTRUE 36416
36414: GO 36434
36416: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36417: LD_ADDR_VAR 0 3
36421: PUSH
36422: LD_INT 4
36424: PUSH
36425: LD_INT 5
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: ST_TO_ADDR
36432: GO 37077
36434: LD_INT 22
36436: DOUBLE
36437: EQUAL
36438: IFTRUE 36442
36440: GO 36468
36442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36443: LD_ADDR_VAR 0 3
36447: PUSH
36448: LD_INT 11
36450: PUSH
36451: LD_INT 12
36453: PUSH
36454: LD_INT 13
36456: PUSH
36457: LD_INT 14
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: ST_TO_ADDR
36466: GO 37077
36468: LD_INT 23
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36502
36476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_INT 11
36484: PUSH
36485: LD_INT 12
36487: PUSH
36488: LD_INT 13
36490: PUSH
36491: LD_INT 14
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: ST_TO_ADDR
36500: GO 37077
36502: LD_INT 24
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36536
36510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 11
36518: PUSH
36519: LD_INT 12
36521: PUSH
36522: LD_INT 13
36524: PUSH
36525: LD_INT 14
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
36534: GO 37077
36536: LD_INT 30
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36570
36544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: LD_INT 11
36552: PUSH
36553: LD_INT 12
36555: PUSH
36556: LD_INT 13
36558: PUSH
36559: LD_INT 14
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
36568: GO 37077
36570: LD_INT 25
36572: DOUBLE
36573: EQUAL
36574: IFTRUE 36578
36576: GO 36596
36578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36579: LD_ADDR_VAR 0 3
36583: PUSH
36584: LD_INT 13
36586: PUSH
36587: LD_INT 14
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: ST_TO_ADDR
36594: GO 37077
36596: LD_INT 27
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36604
36602: GO 36622
36604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_INT 13
36612: PUSH
36613: LD_INT 14
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: ST_TO_ADDR
36620: GO 37077
36622: LD_INT 92
36624: DOUBLE
36625: EQUAL
36626: IFTRUE 36630
36628: GO 36656
36630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36631: LD_ADDR_VAR 0 3
36635: PUSH
36636: LD_INT 11
36638: PUSH
36639: LD_INT 12
36641: PUSH
36642: LD_INT 13
36644: PUSH
36645: LD_INT 14
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
36654: GO 37077
36656: LD_INT 28
36658: DOUBLE
36659: EQUAL
36660: IFTRUE 36664
36662: GO 36682
36664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36665: LD_ADDR_VAR 0 3
36669: PUSH
36670: LD_INT 13
36672: PUSH
36673: LD_INT 14
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: ST_TO_ADDR
36680: GO 37077
36682: LD_INT 29
36684: DOUBLE
36685: EQUAL
36686: IFTRUE 36690
36688: GO 36708
36690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36691: LD_ADDR_VAR 0 3
36695: PUSH
36696: LD_INT 13
36698: PUSH
36699: LD_INT 14
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: ST_TO_ADDR
36706: GO 37077
36708: LD_INT 31
36710: DOUBLE
36711: EQUAL
36712: IFTRUE 36716
36714: GO 36734
36716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36717: LD_ADDR_VAR 0 3
36721: PUSH
36722: LD_INT 13
36724: PUSH
36725: LD_INT 14
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: ST_TO_ADDR
36732: GO 37077
36734: LD_INT 26
36736: DOUBLE
36737: EQUAL
36738: IFTRUE 36742
36740: GO 36760
36742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: LD_INT 13
36750: PUSH
36751: LD_INT 14
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: ST_TO_ADDR
36758: GO 37077
36760: LD_INT 42
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36768
36766: GO 36794
36768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_INT 21
36776: PUSH
36777: LD_INT 22
36779: PUSH
36780: LD_INT 23
36782: PUSH
36783: LD_INT 24
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
36792: GO 37077
36794: LD_INT 43
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36828
36802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_INT 21
36810: PUSH
36811: LD_INT 22
36813: PUSH
36814: LD_INT 23
36816: PUSH
36817: LD_INT 24
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: ST_TO_ADDR
36826: GO 37077
36828: LD_INT 44
36830: DOUBLE
36831: EQUAL
36832: IFTRUE 36836
36834: GO 36862
36836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_INT 21
36844: PUSH
36845: LD_INT 22
36847: PUSH
36848: LD_INT 23
36850: PUSH
36851: LD_INT 24
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
36860: GO 37077
36862: LD_INT 45
36864: DOUBLE
36865: EQUAL
36866: IFTRUE 36870
36868: GO 36896
36870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36871: LD_ADDR_VAR 0 3
36875: PUSH
36876: LD_INT 21
36878: PUSH
36879: LD_INT 22
36881: PUSH
36882: LD_INT 23
36884: PUSH
36885: LD_INT 24
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
36894: GO 37077
36896: LD_INT 49
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36930
36904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36905: LD_ADDR_VAR 0 3
36909: PUSH
36910: LD_INT 21
36912: PUSH
36913: LD_INT 22
36915: PUSH
36916: LD_INT 23
36918: PUSH
36919: LD_INT 24
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
36928: GO 37077
36930: LD_INT 51
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36938
36936: GO 36964
36938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36939: LD_ADDR_VAR 0 3
36943: PUSH
36944: LD_INT 21
36946: PUSH
36947: LD_INT 22
36949: PUSH
36950: LD_INT 23
36952: PUSH
36953: LD_INT 24
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: ST_TO_ADDR
36962: GO 37077
36964: LD_INT 52
36966: DOUBLE
36967: EQUAL
36968: IFTRUE 36972
36970: GO 36998
36972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_INT 21
36980: PUSH
36981: LD_INT 22
36983: PUSH
36984: LD_INT 23
36986: PUSH
36987: LD_INT 24
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
36996: GO 37077
36998: LD_INT 53
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37006
37004: GO 37024
37006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37007: LD_ADDR_VAR 0 3
37011: PUSH
37012: LD_INT 23
37014: PUSH
37015: LD_INT 24
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: ST_TO_ADDR
37022: GO 37077
37024: LD_INT 46
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37032
37030: GO 37050
37032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37033: LD_ADDR_VAR 0 3
37037: PUSH
37038: LD_INT 23
37040: PUSH
37041: LD_INT 24
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: ST_TO_ADDR
37048: GO 37077
37050: LD_INT 47
37052: DOUBLE
37053: EQUAL
37054: IFTRUE 37058
37056: GO 37076
37058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_INT 23
37066: PUSH
37067: LD_INT 24
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: ST_TO_ADDR
37074: GO 37077
37076: POP
// result := ( chassis in result ) ;
37077: LD_ADDR_VAR 0 3
37081: PUSH
37082: LD_VAR 0 1
37086: PUSH
37087: LD_VAR 0 3
37091: IN
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 3
37097: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
// result := array ;
37107: LD_ADDR_VAR 0 5
37111: PUSH
37112: LD_VAR 0 1
37116: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37117: LD_VAR 0 1
37121: NOT
37122: IFTRUE 37131
37124: PUSH
37125: LD_VAR 0 2
37129: NOT
37130: OR
37131: IFTRUE 37140
37133: PUSH
37134: LD_VAR 0 3
37138: NOT
37139: OR
37140: IFTRUE 37154
37142: PUSH
37143: LD_VAR 0 2
37147: PUSH
37148: LD_VAR 0 1
37152: GREATER
37153: OR
37154: IFTRUE 37168
37156: PUSH
37157: LD_VAR 0 3
37161: PUSH
37162: LD_VAR 0 1
37166: GREATER
37167: OR
37168: IFFALSE 37172
// exit ;
37170: GO 37468
// if direction then
37172: LD_VAR 0 4
37176: IFFALSE 37240
// begin d := 1 ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_INT 1
37185: ST_TO_ADDR
// if i_from > i_to then
37186: LD_VAR 0 2
37190: PUSH
37191: LD_VAR 0 3
37195: GREATER
37196: IFFALSE 37222
// length := ( array - i_from ) + i_to else
37198: LD_ADDR_VAR 0 11
37202: PUSH
37203: LD_VAR 0 1
37207: PUSH
37208: LD_VAR 0 2
37212: MINUS
37213: PUSH
37214: LD_VAR 0 3
37218: PLUS
37219: ST_TO_ADDR
37220: GO 37238
// length := i_to - i_from ;
37222: LD_ADDR_VAR 0 11
37226: PUSH
37227: LD_VAR 0 3
37231: PUSH
37232: LD_VAR 0 2
37236: MINUS
37237: ST_TO_ADDR
// end else
37238: GO 37301
// begin d := - 1 ;
37240: LD_ADDR_VAR 0 9
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: ST_TO_ADDR
// if i_from > i_to then
37249: LD_VAR 0 2
37253: PUSH
37254: LD_VAR 0 3
37258: GREATER
37259: IFFALSE 37279
// length := i_from - i_to else
37261: LD_ADDR_VAR 0 11
37265: PUSH
37266: LD_VAR 0 2
37270: PUSH
37271: LD_VAR 0 3
37275: MINUS
37276: ST_TO_ADDR
37277: GO 37301
// length := ( array - i_to ) + i_from ;
37279: LD_ADDR_VAR 0 11
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: LD_VAR 0 3
37293: MINUS
37294: PUSH
37295: LD_VAR 0 2
37299: PLUS
37300: ST_TO_ADDR
// end ; if not length then
37301: LD_VAR 0 11
37305: NOT
37306: IFFALSE 37310
// exit ;
37308: GO 37468
// tmp := array ;
37310: LD_ADDR_VAR 0 10
37314: PUSH
37315: LD_VAR 0 1
37319: ST_TO_ADDR
// for i = 1 to length do
37320: LD_ADDR_VAR 0 6
37324: PUSH
37325: DOUBLE
37326: LD_INT 1
37328: DEC
37329: ST_TO_ADDR
37330: LD_VAR 0 11
37334: PUSH
37335: FOR_TO
37336: IFFALSE 37456
// begin for j = 1 to array do
37338: LD_ADDR_VAR 0 7
37342: PUSH
37343: DOUBLE
37344: LD_INT 1
37346: DEC
37347: ST_TO_ADDR
37348: LD_VAR 0 1
37352: PUSH
37353: FOR_TO
37354: IFFALSE 37442
// begin k := j + d ;
37356: LD_ADDR_VAR 0 8
37360: PUSH
37361: LD_VAR 0 7
37365: PUSH
37366: LD_VAR 0 9
37370: PLUS
37371: ST_TO_ADDR
// if k > array then
37372: LD_VAR 0 8
37376: PUSH
37377: LD_VAR 0 1
37381: GREATER
37382: IFFALSE 37392
// k := 1 ;
37384: LD_ADDR_VAR 0 8
37388: PUSH
37389: LD_INT 1
37391: ST_TO_ADDR
// if not k then
37392: LD_VAR 0 8
37396: NOT
37397: IFFALSE 37409
// k := array ;
37399: LD_ADDR_VAR 0 8
37403: PUSH
37404: LD_VAR 0 1
37408: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37409: LD_ADDR_VAR 0 10
37413: PUSH
37414: LD_VAR 0 10
37418: PPUSH
37419: LD_VAR 0 8
37423: PPUSH
37424: LD_VAR 0 1
37428: PUSH
37429: LD_VAR 0 7
37433: ARRAY
37434: PPUSH
37435: CALL_OW 1
37439: ST_TO_ADDR
// end ;
37440: GO 37353
37442: POP
37443: POP
// array := tmp ;
37444: LD_ADDR_VAR 0 1
37448: PUSH
37449: LD_VAR 0 10
37453: ST_TO_ADDR
// end ;
37454: GO 37335
37456: POP
37457: POP
// result := array ;
37458: LD_ADDR_VAR 0 5
37462: PUSH
37463: LD_VAR 0 1
37467: ST_TO_ADDR
// end ;
37468: LD_VAR 0 5
37472: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37473: LD_INT 0
37475: PPUSH
37476: PPUSH
// result := 0 ;
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_INT 0
37484: ST_TO_ADDR
// if not array or not value in array then
37485: LD_VAR 0 1
37489: NOT
37490: IFTRUE 37505
37492: PUSH
37493: LD_VAR 0 2
37497: PUSH
37498: LD_VAR 0 1
37502: IN
37503: NOT
37504: OR
37505: IFFALSE 37509
// exit ;
37507: GO 37563
// for i = 1 to array do
37509: LD_ADDR_VAR 0 4
37513: PUSH
37514: DOUBLE
37515: LD_INT 1
37517: DEC
37518: ST_TO_ADDR
37519: LD_VAR 0 1
37523: PUSH
37524: FOR_TO
37525: IFFALSE 37561
// if value = array [ i ] then
37527: LD_VAR 0 2
37531: PUSH
37532: LD_VAR 0 1
37536: PUSH
37537: LD_VAR 0 4
37541: ARRAY
37542: EQUAL
37543: IFFALSE 37559
// begin result := i ;
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: LD_VAR 0 4
37554: ST_TO_ADDR
// exit ;
37555: POP
37556: POP
37557: GO 37563
// end ;
37559: GO 37524
37561: POP
37562: POP
// end ;
37563: LD_VAR 0 3
37567: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37568: LD_INT 0
37570: PPUSH
// vc_chassis := chassis ;
37571: LD_ADDR_OWVAR 37
37575: PUSH
37576: LD_VAR 0 1
37580: ST_TO_ADDR
// vc_engine := engine ;
37581: LD_ADDR_OWVAR 39
37585: PUSH
37586: LD_VAR 0 2
37590: ST_TO_ADDR
// vc_control := control ;
37591: LD_ADDR_OWVAR 38
37595: PUSH
37596: LD_VAR 0 3
37600: ST_TO_ADDR
// vc_weapon := weapon ;
37601: LD_ADDR_OWVAR 40
37605: PUSH
37606: LD_VAR 0 4
37610: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37611: LD_ADDR_OWVAR 41
37615: PUSH
37616: LD_VAR 0 5
37620: ST_TO_ADDR
// end ;
37621: LD_VAR 0 6
37625: RET
// export function WantPlant ( unit ) ; var task ; begin
37626: LD_INT 0
37628: PPUSH
37629: PPUSH
// result := false ;
37630: LD_ADDR_VAR 0 2
37634: PUSH
37635: LD_INT 0
37637: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_VAR 0 1
37647: PPUSH
37648: CALL_OW 437
37652: ST_TO_ADDR
// if task then
37653: LD_VAR 0 3
37657: IFFALSE 37685
// if task [ 1 ] [ 1 ] = p then
37659: LD_VAR 0 3
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PUSH
37672: LD_STRING p
37674: EQUAL
37675: IFFALSE 37685
// result := true ;
37677: LD_ADDR_VAR 0 2
37681: PUSH
37682: LD_INT 1
37684: ST_TO_ADDR
// end ;
37685: LD_VAR 0 2
37689: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37690: LD_INT 0
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
// if pos < 1 then
37696: LD_VAR 0 2
37700: PUSH
37701: LD_INT 1
37703: LESS
37704: IFFALSE 37708
// exit ;
37706: GO 38011
// if pos = 1 then
37708: LD_VAR 0 2
37712: PUSH
37713: LD_INT 1
37715: EQUAL
37716: IFFALSE 37749
// result := Replace ( arr , pos [ 1 ] , value ) else
37718: LD_ADDR_VAR 0 4
37722: PUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: LD_VAR 0 2
37732: PUSH
37733: LD_INT 1
37735: ARRAY
37736: PPUSH
37737: LD_VAR 0 3
37741: PPUSH
37742: CALL_OW 1
37746: ST_TO_ADDR
37747: GO 38011
// begin tmp := arr ;
37749: LD_ADDR_VAR 0 6
37753: PUSH
37754: LD_VAR 0 1
37758: ST_TO_ADDR
// s_arr := [ tmp ] ;
37759: LD_ADDR_VAR 0 7
37763: PUSH
37764: LD_VAR 0 6
37768: PUSH
37769: EMPTY
37770: LIST
37771: ST_TO_ADDR
// for i = 1 to pos - 1 do
37772: LD_ADDR_VAR 0 5
37776: PUSH
37777: DOUBLE
37778: LD_INT 1
37780: DEC
37781: ST_TO_ADDR
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 1
37789: MINUS
37790: PUSH
37791: FOR_TO
37792: IFFALSE 37837
// begin tmp := tmp [ pos [ i ] ] ;
37794: LD_ADDR_VAR 0 6
37798: PUSH
37799: LD_VAR 0 6
37803: PUSH
37804: LD_VAR 0 2
37808: PUSH
37809: LD_VAR 0 5
37813: ARRAY
37814: ARRAY
37815: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37816: LD_ADDR_VAR 0 7
37820: PUSH
37821: LD_VAR 0 7
37825: PUSH
37826: LD_VAR 0 6
37830: PUSH
37831: EMPTY
37832: LIST
37833: ADD
37834: ST_TO_ADDR
// end ;
37835: GO 37791
37837: POP
37838: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37839: LD_ADDR_VAR 0 6
37843: PUSH
37844: LD_VAR 0 6
37848: PPUSH
37849: LD_VAR 0 2
37853: PUSH
37854: LD_VAR 0 2
37858: ARRAY
37859: PPUSH
37860: LD_VAR 0 3
37864: PPUSH
37865: CALL_OW 1
37869: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37870: LD_ADDR_VAR 0 7
37874: PUSH
37875: LD_VAR 0 7
37879: PPUSH
37880: LD_VAR 0 7
37884: PPUSH
37885: LD_VAR 0 6
37889: PPUSH
37890: CALL_OW 1
37894: ST_TO_ADDR
// for i = s_arr downto 2 do
37895: LD_ADDR_VAR 0 5
37899: PUSH
37900: DOUBLE
37901: LD_VAR 0 7
37905: INC
37906: ST_TO_ADDR
37907: LD_INT 2
37909: PUSH
37910: FOR_DOWNTO
37911: IFFALSE 37995
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37913: LD_ADDR_VAR 0 6
37917: PUSH
37918: LD_VAR 0 7
37922: PUSH
37923: LD_VAR 0 5
37927: PUSH
37928: LD_INT 1
37930: MINUS
37931: ARRAY
37932: PPUSH
37933: LD_VAR 0 2
37937: PUSH
37938: LD_VAR 0 5
37942: PUSH
37943: LD_INT 1
37945: MINUS
37946: ARRAY
37947: PPUSH
37948: LD_VAR 0 7
37952: PUSH
37953: LD_VAR 0 5
37957: ARRAY
37958: PPUSH
37959: CALL_OW 1
37963: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37964: LD_ADDR_VAR 0 7
37968: PUSH
37969: LD_VAR 0 7
37973: PPUSH
37974: LD_VAR 0 5
37978: PUSH
37979: LD_INT 1
37981: MINUS
37982: PPUSH
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 1
37992: ST_TO_ADDR
// end ;
37993: GO 37910
37995: POP
37996: POP
// result := s_arr [ 1 ] ;
37997: LD_ADDR_VAR 0 4
38001: PUSH
38002: LD_VAR 0 7
38006: PUSH
38007: LD_INT 1
38009: ARRAY
38010: ST_TO_ADDR
// end ; end ;
38011: LD_VAR 0 4
38015: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
// if not list then
38020: LD_VAR 0 1
38024: NOT
38025: IFFALSE 38029
// exit ;
38027: GO 38120
// i := list [ pos1 ] ;
38029: LD_ADDR_VAR 0 5
38033: PUSH
38034: LD_VAR 0 1
38038: PUSH
38039: LD_VAR 0 2
38043: ARRAY
38044: ST_TO_ADDR
// if not i then
38045: LD_VAR 0 5
38049: NOT
38050: IFFALSE 38054
// exit ;
38052: GO 38120
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38054: LD_ADDR_VAR 0 1
38058: PUSH
38059: LD_VAR 0 1
38063: PPUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: LD_VAR 0 1
38073: PUSH
38074: LD_VAR 0 3
38078: ARRAY
38079: PPUSH
38080: CALL_OW 1
38084: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38085: LD_ADDR_VAR 0 1
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: LD_VAR 0 3
38099: PPUSH
38100: LD_VAR 0 5
38104: PPUSH
38105: CALL_OW 1
38109: ST_TO_ADDR
// result := list ;
38110: LD_ADDR_VAR 0 4
38114: PUSH
38115: LD_VAR 0 1
38119: ST_TO_ADDR
// end ;
38120: LD_VAR 0 4
38124: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38125: LD_INT 0
38127: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38128: LD_ADDR_VAR 0 5
38132: PUSH
38133: LD_VAR 0 1
38137: PPUSH
38138: CALL_OW 250
38142: PPUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 251
38152: PPUSH
38153: LD_VAR 0 2
38157: PPUSH
38158: LD_VAR 0 3
38162: PPUSH
38163: LD_VAR 0 4
38167: PPUSH
38168: CALL 38550 0 5
38172: ST_TO_ADDR
// end ;
38173: LD_VAR 0 5
38177: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38178: LD_INT 0
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
// if not list or not unit then
38184: LD_VAR 0 2
38188: NOT
38189: IFTRUE 38198
38191: PUSH
38192: LD_VAR 0 1
38196: NOT
38197: OR
38198: IFFALSE 38202
// exit ;
38200: GO 38545
// result := [ ] ;
38202: LD_ADDR_VAR 0 5
38206: PUSH
38207: EMPTY
38208: ST_TO_ADDR
// for i in list do
38209: LD_ADDR_VAR 0 6
38213: PUSH
38214: LD_VAR 0 2
38218: PUSH
38219: FOR_IN
38220: IFFALSE 38438
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38222: LD_ADDR_VAR 0 8
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: LD_VAR 0 6
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PPUSH
38241: LD_VAR 0 6
38245: PUSH
38246: LD_INT 2
38248: ARRAY
38249: PPUSH
38250: CALL_OW 297
38254: ST_TO_ADDR
// if not Count ( result ) then
38255: LD_VAR 0 5
38259: PPUSH
38260: CALL 34806 0 1
38264: NOT
38265: IFFALSE 38298
// begin result := Join ( result , [ i , tmp ] ) ;
38267: LD_ADDR_VAR 0 5
38271: PUSH
38272: LD_VAR 0 5
38276: PPUSH
38277: LD_VAR 0 6
38281: PUSH
38282: LD_VAR 0 8
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PPUSH
38291: CALL 70738 0 2
38295: ST_TO_ADDR
// continue ;
38296: GO 38219
// end ; if result [ result ] [ 2 ] <= tmp then
38298: LD_VAR 0 5
38302: PUSH
38303: LD_VAR 0 5
38307: ARRAY
38308: PUSH
38309: LD_INT 2
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 8
38317: LESSEQUAL
38318: IFFALSE 38351
// result := Join ( result , [ i , tmp ] ) else
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_VAR 0 5
38329: PPUSH
38330: LD_VAR 0 6
38334: PUSH
38335: LD_VAR 0 8
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PPUSH
38344: CALL 70738 0 2
38348: ST_TO_ADDR
38349: GO 38436
// begin for j := 1 to Count ( result ) do
38351: LD_ADDR_VAR 0 7
38355: PUSH
38356: DOUBLE
38357: LD_INT 1
38359: DEC
38360: ST_TO_ADDR
38361: LD_VAR 0 5
38365: PPUSH
38366: CALL 34806 0 1
38370: PUSH
38371: FOR_TO
38372: IFFALSE 38434
// begin if tmp < result [ j ] [ 2 ] then
38374: LD_VAR 0 8
38378: PUSH
38379: LD_VAR 0 5
38383: PUSH
38384: LD_VAR 0 7
38388: ARRAY
38389: PUSH
38390: LD_INT 2
38392: ARRAY
38393: LESS
38394: IFFALSE 38432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 5
38405: PPUSH
38406: LD_VAR 0 7
38410: PPUSH
38411: LD_VAR 0 6
38415: PUSH
38416: LD_VAR 0 8
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PPUSH
38425: CALL_OW 2
38429: ST_TO_ADDR
// break ;
38430: GO 38434
// end ; end ;
38432: GO 38371
38434: POP
38435: POP
// end ; end ;
38436: GO 38219
38438: POP
38439: POP
// if result and not asc then
38440: LD_VAR 0 5
38444: IFFALSE 38453
38446: PUSH
38447: LD_VAR 0 3
38451: NOT
38452: AND
38453: IFFALSE 38470
// result := ReverseArray ( result ) ;
38455: LD_ADDR_VAR 0 5
38459: PUSH
38460: LD_VAR 0 5
38464: PPUSH
38465: CALL 65828 0 1
38469: ST_TO_ADDR
// tmp := [ ] ;
38470: LD_ADDR_VAR 0 8
38474: PUSH
38475: EMPTY
38476: ST_TO_ADDR
// if mode then
38477: LD_VAR 0 4
38481: IFFALSE 38545
// begin for i := 1 to result do
38483: LD_ADDR_VAR 0 6
38487: PUSH
38488: DOUBLE
38489: LD_INT 1
38491: DEC
38492: ST_TO_ADDR
38493: LD_VAR 0 5
38497: PUSH
38498: FOR_TO
38499: IFFALSE 38533
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38501: LD_ADDR_VAR 0 8
38505: PUSH
38506: LD_VAR 0 8
38510: PPUSH
38511: LD_VAR 0 5
38515: PUSH
38516: LD_VAR 0 6
38520: ARRAY
38521: PUSH
38522: LD_INT 1
38524: ARRAY
38525: PPUSH
38526: CALL 70738 0 2
38530: ST_TO_ADDR
38531: GO 38498
38533: POP
38534: POP
// result := tmp ;
38535: LD_ADDR_VAR 0 5
38539: PUSH
38540: LD_VAR 0 8
38544: ST_TO_ADDR
// end ; end ;
38545: LD_VAR 0 5
38549: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
// if not list then
38556: LD_VAR 0 3
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 38955
// result := [ ] ;
38565: LD_ADDR_VAR 0 6
38569: PUSH
38570: EMPTY
38571: ST_TO_ADDR
// for i in list do
38572: LD_ADDR_VAR 0 7
38576: PUSH
38577: LD_VAR 0 3
38581: PUSH
38582: FOR_IN
38583: IFFALSE 38785
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38585: LD_ADDR_VAR 0 9
38589: PUSH
38590: LD_VAR 0 7
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_VAR 0 2
38604: PPUSH
38605: CALL_OW 297
38609: ST_TO_ADDR
// if not result then
38610: LD_VAR 0 6
38614: NOT
38615: IFFALSE 38641
// result := [ [ i , tmp ] ] else
38617: LD_ADDR_VAR 0 6
38621: PUSH
38622: LD_VAR 0 7
38626: PUSH
38627: LD_VAR 0 9
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: ST_TO_ADDR
38639: GO 38783
// begin if result [ result ] [ 2 ] <= tmp then
38641: LD_VAR 0 6
38645: PUSH
38646: LD_VAR 0 6
38650: ARRAY
38651: PUSH
38652: LD_INT 2
38654: ARRAY
38655: PUSH
38656: LD_VAR 0 9
38660: LESSEQUAL
38661: IFFALSE 38703
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38663: LD_ADDR_VAR 0 6
38667: PUSH
38668: LD_VAR 0 6
38672: PPUSH
38673: LD_VAR 0 6
38677: PUSH
38678: LD_INT 1
38680: PLUS
38681: PPUSH
38682: LD_VAR 0 7
38686: PUSH
38687: LD_VAR 0 9
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PPUSH
38696: CALL_OW 2
38700: ST_TO_ADDR
38701: GO 38783
// for j := 1 to result do
38703: LD_ADDR_VAR 0 8
38707: PUSH
38708: DOUBLE
38709: LD_INT 1
38711: DEC
38712: ST_TO_ADDR
38713: LD_VAR 0 6
38717: PUSH
38718: FOR_TO
38719: IFFALSE 38781
// begin if tmp < result [ j ] [ 2 ] then
38721: LD_VAR 0 9
38725: PUSH
38726: LD_VAR 0 6
38730: PUSH
38731: LD_VAR 0 8
38735: ARRAY
38736: PUSH
38737: LD_INT 2
38739: ARRAY
38740: LESS
38741: IFFALSE 38779
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38743: LD_ADDR_VAR 0 6
38747: PUSH
38748: LD_VAR 0 6
38752: PPUSH
38753: LD_VAR 0 8
38757: PPUSH
38758: LD_VAR 0 7
38762: PUSH
38763: LD_VAR 0 9
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PPUSH
38772: CALL_OW 2
38776: ST_TO_ADDR
// break ;
38777: GO 38781
// end ; end ;
38779: GO 38718
38781: POP
38782: POP
// end ; end ;
38783: GO 38582
38785: POP
38786: POP
// if result and not asc then
38787: LD_VAR 0 6
38791: IFFALSE 38800
38793: PUSH
38794: LD_VAR 0 4
38798: NOT
38799: AND
38800: IFFALSE 38875
// begin tmp := result ;
38802: LD_ADDR_VAR 0 9
38806: PUSH
38807: LD_VAR 0 6
38811: ST_TO_ADDR
// for i = tmp downto 1 do
38812: LD_ADDR_VAR 0 7
38816: PUSH
38817: DOUBLE
38818: LD_VAR 0 9
38822: INC
38823: ST_TO_ADDR
38824: LD_INT 1
38826: PUSH
38827: FOR_DOWNTO
38828: IFFALSE 38873
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38830: LD_ADDR_VAR 0 6
38834: PUSH
38835: LD_VAR 0 6
38839: PPUSH
38840: LD_VAR 0 9
38844: PUSH
38845: LD_VAR 0 7
38849: MINUS
38850: PUSH
38851: LD_INT 1
38853: PLUS
38854: PPUSH
38855: LD_VAR 0 9
38859: PUSH
38860: LD_VAR 0 7
38864: ARRAY
38865: PPUSH
38866: CALL_OW 1
38870: ST_TO_ADDR
38871: GO 38827
38873: POP
38874: POP
// end ; tmp := [ ] ;
38875: LD_ADDR_VAR 0 9
38879: PUSH
38880: EMPTY
38881: ST_TO_ADDR
// if mode then
38882: LD_VAR 0 5
38886: IFFALSE 38955
// begin for i = 1 to result do
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: DOUBLE
38894: LD_INT 1
38896: DEC
38897: ST_TO_ADDR
38898: LD_VAR 0 6
38902: PUSH
38903: FOR_TO
38904: IFFALSE 38943
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38906: LD_ADDR_VAR 0 9
38910: PUSH
38911: LD_VAR 0 9
38915: PPUSH
38916: LD_VAR 0 7
38920: PPUSH
38921: LD_VAR 0 6
38925: PUSH
38926: LD_VAR 0 7
38930: ARRAY
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
38941: GO 38903
38943: POP
38944: POP
// result := tmp ;
38945: LD_ADDR_VAR 0 6
38949: PUSH
38950: LD_VAR 0 9
38954: ST_TO_ADDR
// end ; end ;
38955: LD_VAR 0 6
38959: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38960: LD_INT 0
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38968: LD_ADDR_VAR 0 5
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: ST_TO_ADDR
// if not x or not y then
38990: LD_VAR 0 2
38994: NOT
38995: IFTRUE 39004
38997: PUSH
38998: LD_VAR 0 3
39002: NOT
39003: OR
39004: IFFALSE 39008
// exit ;
39006: GO 40664
// if not range then
39008: LD_VAR 0 4
39012: NOT
39013: IFFALSE 39023
// range := 10 ;
39015: LD_ADDR_VAR 0 4
39019: PUSH
39020: LD_INT 10
39022: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39023: LD_ADDR_VAR 0 8
39027: PUSH
39028: LD_INT 81
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 92
39042: PUSH
39043: LD_VAR 0 2
39047: PUSH
39048: LD_VAR 0 3
39052: PUSH
39053: LD_VAR 0 4
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 3
39066: PUSH
39067: LD_INT 21
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PPUSH
39086: CALL_OW 69
39090: ST_TO_ADDR
// if not tmp then
39091: LD_VAR 0 8
39095: NOT
39096: IFFALSE 39100
// exit ;
39098: GO 40664
// for i in tmp do
39100: LD_ADDR_VAR 0 6
39104: PUSH
39105: LD_VAR 0 8
39109: PUSH
39110: FOR_IN
39111: IFFALSE 40639
// begin points := [ 0 , 0 , 0 ] ;
39113: LD_ADDR_VAR 0 9
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
// bpoints := 1 ;
39132: LD_ADDR_VAR 0 10
39136: PUSH
39137: LD_INT 1
39139: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39140: LD_VAR 0 6
39144: PPUSH
39145: CALL_OW 247
39149: PUSH
39150: LD_INT 1
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39158
39156: GO 39740
39158: POP
// begin if GetClass ( i ) = 1 then
39159: LD_VAR 0 6
39163: PPUSH
39164: CALL_OW 257
39168: PUSH
39169: LD_INT 1
39171: EQUAL
39172: IFFALSE 39193
// points := [ 10 , 5 , 3 ] ;
39174: LD_ADDR_VAR 0 9
39178: PUSH
39179: LD_INT 10
39181: PUSH
39182: LD_INT 5
39184: PUSH
39185: LD_INT 3
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39193: LD_VAR 0 6
39197: PPUSH
39198: CALL_OW 257
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: IN
39217: IFFALSE 39238
// points := [ 3 , 2 , 1 ] ;
39219: LD_ADDR_VAR 0 9
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39238: LD_VAR 0 6
39242: PPUSH
39243: CALL_OW 257
39247: PUSH
39248: LD_INT 5
39250: EQUAL
39251: IFFALSE 39272
// points := [ 130 , 5 , 2 ] ;
39253: LD_ADDR_VAR 0 9
39257: PUSH
39258: LD_INT 130
39260: PUSH
39261: LD_INT 5
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39272: LD_VAR 0 6
39276: PPUSH
39277: CALL_OW 257
39281: PUSH
39282: LD_INT 8
39284: EQUAL
39285: IFFALSE 39306
// points := [ 35 , 35 , 30 ] ;
39287: LD_ADDR_VAR 0 9
39291: PUSH
39292: LD_INT 35
39294: PUSH
39295: LD_INT 35
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39306: LD_VAR 0 6
39310: PPUSH
39311: CALL_OW 257
39315: PUSH
39316: LD_INT 9
39318: EQUAL
39319: IFFALSE 39340
// points := [ 20 , 55 , 40 ] ;
39321: LD_ADDR_VAR 0 9
39325: PUSH
39326: LD_INT 20
39328: PUSH
39329: LD_INT 55
39331: PUSH
39332: LD_INT 40
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39340: LD_VAR 0 6
39344: PPUSH
39345: CALL_OW 257
39349: PUSH
39350: LD_INT 12
39352: PUSH
39353: LD_INT 16
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: IN
39360: IFFALSE 39381
// points := [ 5 , 3 , 2 ] ;
39362: LD_ADDR_VAR 0 9
39366: PUSH
39367: LD_INT 5
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39381: LD_VAR 0 6
39385: PPUSH
39386: CALL_OW 257
39390: PUSH
39391: LD_INT 17
39393: EQUAL
39394: IFFALSE 39415
// points := [ 100 , 50 , 75 ] ;
39396: LD_ADDR_VAR 0 9
39400: PUSH
39401: LD_INT 100
39403: PUSH
39404: LD_INT 50
39406: PUSH
39407: LD_INT 75
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39415: LD_VAR 0 6
39419: PPUSH
39420: CALL_OW 257
39424: PUSH
39425: LD_INT 15
39427: EQUAL
39428: IFFALSE 39449
// points := [ 10 , 5 , 3 ] ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_INT 10
39437: PUSH
39438: LD_INT 5
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39449: LD_VAR 0 6
39453: PPUSH
39454: CALL_OW 257
39458: PUSH
39459: LD_INT 14
39461: EQUAL
39462: IFFALSE 39483
// points := [ 10 , 0 , 0 ] ;
39464: LD_ADDR_VAR 0 9
39468: PUSH
39469: LD_INT 10
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39483: LD_VAR 0 6
39487: PPUSH
39488: CALL_OW 257
39492: PUSH
39493: LD_INT 11
39495: EQUAL
39496: IFFALSE 39517
// points := [ 30 , 10 , 5 ] ;
39498: LD_ADDR_VAR 0 9
39502: PUSH
39503: LD_INT 30
39505: PUSH
39506: LD_INT 10
39508: PUSH
39509: LD_INT 5
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39517: LD_VAR 0 1
39521: PPUSH
39522: LD_INT 5
39524: PPUSH
39525: CALL_OW 321
39529: PUSH
39530: LD_INT 2
39532: EQUAL
39533: IFFALSE 39550
// bpoints := bpoints * 1.8 ;
39535: LD_ADDR_VAR 0 10
39539: PUSH
39540: LD_VAR 0 10
39544: PUSH
39545: LD_REAL  1.80000000000000E+0000
39548: MUL
39549: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39550: LD_VAR 0 6
39554: PPUSH
39555: CALL_OW 257
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: IN
39578: IFFALSE 39598
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_INT 51
39588: PPUSH
39589: CALL_OW 321
39593: PUSH
39594: LD_INT 2
39596: EQUAL
39597: AND
39598: IFFALSE 39615
// bpoints := bpoints * 1.2 ;
39600: LD_ADDR_VAR 0 10
39604: PUSH
39605: LD_VAR 0 10
39609: PUSH
39610: LD_REAL  1.20000000000000E+0000
39613: MUL
39614: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39615: LD_VAR 0 6
39619: PPUSH
39620: CALL_OW 257
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: LD_INT 7
39630: PUSH
39631: LD_INT 9
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: IN
39639: IFFALSE 39659
39641: PUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: LD_INT 52
39649: PPUSH
39650: CALL_OW 321
39654: PUSH
39655: LD_INT 2
39657: EQUAL
39658: AND
39659: IFFALSE 39676
// bpoints := bpoints * 1.5 ;
39661: LD_ADDR_VAR 0 10
39665: PUSH
39666: LD_VAR 0 10
39670: PUSH
39671: LD_REAL  1.50000000000000E+0000
39674: MUL
39675: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_INT 66
39683: PPUSH
39684: CALL_OW 321
39688: PUSH
39689: LD_INT 2
39691: EQUAL
39692: IFFALSE 39709
// bpoints := bpoints * 1.1 ;
39694: LD_ADDR_VAR 0 10
39698: PUSH
39699: LD_VAR 0 10
39703: PUSH
39704: LD_REAL  1.10000000000000E+0000
39707: MUL
39708: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39709: LD_ADDR_VAR 0 10
39713: PUSH
39714: LD_VAR 0 10
39718: PUSH
39719: LD_VAR 0 6
39723: PPUSH
39724: LD_INT 1
39726: PPUSH
39727: CALL_OW 259
39731: PUSH
39732: LD_REAL  1.15000000000000E+0000
39735: MUL
39736: MUL
39737: ST_TO_ADDR
// end ; unit_vehicle :
39738: GO 40568
39740: LD_INT 2
39742: DOUBLE
39743: EQUAL
39744: IFTRUE 39748
39746: GO 40556
39748: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39749: LD_VAR 0 6
39753: PPUSH
39754: CALL_OW 264
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 42
39764: PUSH
39765: LD_INT 24
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: IN
39773: IFFALSE 39794
// points := [ 25 , 5 , 3 ] ;
39775: LD_ADDR_VAR 0 9
39779: PUSH
39780: LD_INT 25
39782: PUSH
39783: LD_INT 5
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39794: LD_VAR 0 6
39798: PPUSH
39799: CALL_OW 264
39803: PUSH
39804: LD_INT 4
39806: PUSH
39807: LD_INT 43
39809: PUSH
39810: LD_INT 25
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: IN
39818: IFFALSE 39839
// points := [ 40 , 15 , 5 ] ;
39820: LD_ADDR_VAR 0 9
39824: PUSH
39825: LD_INT 40
39827: PUSH
39828: LD_INT 15
39830: PUSH
39831: LD_INT 5
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39839: LD_VAR 0 6
39843: PPUSH
39844: CALL_OW 264
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: LD_INT 23
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: IN
39859: IFFALSE 39880
// points := [ 7 , 25 , 8 ] ;
39861: LD_ADDR_VAR 0 9
39865: PUSH
39866: LD_INT 7
39868: PUSH
39869: LD_INT 25
39871: PUSH
39872: LD_INT 8
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39880: LD_VAR 0 6
39884: PPUSH
39885: CALL_OW 264
39889: PUSH
39890: LD_INT 5
39892: PUSH
39893: LD_INT 27
39895: PUSH
39896: LD_INT 44
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: IN
39904: IFFALSE 39925
// points := [ 14 , 50 , 16 ] ;
39906: LD_ADDR_VAR 0 9
39910: PUSH
39911: LD_INT 14
39913: PUSH
39914: LD_INT 50
39916: PUSH
39917: LD_INT 16
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39925: LD_VAR 0 6
39929: PPUSH
39930: CALL_OW 264
39934: PUSH
39935: LD_INT 6
39937: PUSH
39938: LD_INT 46
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: IN
39945: IFFALSE 39966
// points := [ 32 , 120 , 70 ] ;
39947: LD_ADDR_VAR 0 9
39951: PUSH
39952: LD_INT 32
39954: PUSH
39955: LD_INT 120
39957: PUSH
39958: LD_INT 70
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39966: LD_VAR 0 6
39970: PPUSH
39971: CALL_OW 264
39975: PUSH
39976: LD_INT 7
39978: PUSH
39979: LD_INT 28
39981: PUSH
39982: LD_INT 45
39984: PUSH
39985: LD_INT 92
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: IN
39994: IFFALSE 40015
// points := [ 35 , 20 , 45 ] ;
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: LD_INT 35
40003: PUSH
40004: LD_INT 20
40006: PUSH
40007: LD_INT 45
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40015: LD_VAR 0 6
40019: PPUSH
40020: CALL_OW 264
40024: PUSH
40025: LD_INT 47
40027: PUSH
40028: EMPTY
40029: LIST
40030: IN
40031: IFFALSE 40052
// points := [ 67 , 45 , 75 ] ;
40033: LD_ADDR_VAR 0 9
40037: PUSH
40038: LD_INT 67
40040: PUSH
40041: LD_INT 45
40043: PUSH
40044: LD_INT 75
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40052: LD_VAR 0 6
40056: PPUSH
40057: CALL_OW 264
40061: PUSH
40062: LD_INT 26
40064: PUSH
40065: EMPTY
40066: LIST
40067: IN
40068: IFFALSE 40089
// points := [ 120 , 30 , 80 ] ;
40070: LD_ADDR_VAR 0 9
40074: PUSH
40075: LD_INT 120
40077: PUSH
40078: LD_INT 30
40080: PUSH
40081: LD_INT 80
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40089: LD_VAR 0 6
40093: PPUSH
40094: CALL_OW 264
40098: PUSH
40099: LD_INT 22
40101: PUSH
40102: EMPTY
40103: LIST
40104: IN
40105: IFFALSE 40126
// points := [ 40 , 1 , 1 ] ;
40107: LD_ADDR_VAR 0 9
40111: PUSH
40112: LD_INT 40
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40126: LD_VAR 0 6
40130: PPUSH
40131: CALL_OW 264
40135: PUSH
40136: LD_INT 29
40138: PUSH
40139: EMPTY
40140: LIST
40141: IN
40142: IFFALSE 40163
// points := [ 70 , 200 , 400 ] ;
40144: LD_ADDR_VAR 0 9
40148: PUSH
40149: LD_INT 70
40151: PUSH
40152: LD_INT 200
40154: PUSH
40155: LD_INT 400
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40163: LD_VAR 0 6
40167: PPUSH
40168: CALL_OW 264
40172: PUSH
40173: LD_INT 14
40175: PUSH
40176: LD_INT 53
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: IN
40183: IFFALSE 40204
// points := [ 40 , 10 , 20 ] ;
40185: LD_ADDR_VAR 0 9
40189: PUSH
40190: LD_INT 40
40192: PUSH
40193: LD_INT 10
40195: PUSH
40196: LD_INT 20
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40204: LD_VAR 0 6
40208: PPUSH
40209: CALL_OW 264
40213: PUSH
40214: LD_INT 9
40216: PUSH
40217: EMPTY
40218: LIST
40219: IN
40220: IFFALSE 40241
// points := [ 5 , 70 , 20 ] ;
40222: LD_ADDR_VAR 0 9
40226: PUSH
40227: LD_INT 5
40229: PUSH
40230: LD_INT 70
40232: PUSH
40233: LD_INT 20
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40241: LD_VAR 0 6
40245: PPUSH
40246: CALL_OW 264
40250: PUSH
40251: LD_INT 10
40253: PUSH
40254: EMPTY
40255: LIST
40256: IN
40257: IFFALSE 40278
// points := [ 35 , 110 , 70 ] ;
40259: LD_ADDR_VAR 0 9
40263: PUSH
40264: LD_INT 35
40266: PUSH
40267: LD_INT 110
40269: PUSH
40270: LD_INT 70
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40278: LD_VAR 0 6
40282: PPUSH
40283: CALL_OW 265
40287: PUSH
40288: LD_INT 25
40290: EQUAL
40291: IFFALSE 40312
// points := [ 80 , 65 , 100 ] ;
40293: LD_ADDR_VAR 0 9
40297: PUSH
40298: LD_INT 80
40300: PUSH
40301: LD_INT 65
40303: PUSH
40304: LD_INT 100
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40312: LD_VAR 0 6
40316: PPUSH
40317: CALL_OW 263
40321: PUSH
40322: LD_INT 1
40324: EQUAL
40325: IFFALSE 40360
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40327: LD_ADDR_VAR 0 10
40331: PUSH
40332: LD_VAR 0 10
40336: PUSH
40337: LD_VAR 0 6
40341: PPUSH
40342: CALL_OW 311
40346: PPUSH
40347: LD_INT 3
40349: PPUSH
40350: CALL_OW 259
40354: PUSH
40355: LD_INT 4
40357: MUL
40358: MUL
40359: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40360: LD_VAR 0 6
40364: PPUSH
40365: CALL_OW 263
40369: PUSH
40370: LD_INT 2
40372: EQUAL
40373: IFFALSE 40424
// begin j := IsControledBy ( i ) ;
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_VAR 0 6
40384: PPUSH
40385: CALL_OW 312
40389: ST_TO_ADDR
// if j then
40390: LD_VAR 0 7
40394: IFFALSE 40424
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40396: LD_ADDR_VAR 0 10
40400: PUSH
40401: LD_VAR 0 10
40405: PUSH
40406: LD_VAR 0 7
40410: PPUSH
40411: LD_INT 3
40413: PPUSH
40414: CALL_OW 259
40418: PUSH
40419: LD_INT 3
40421: MUL
40422: MUL
40423: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40424: LD_VAR 0 6
40428: PPUSH
40429: CALL_OW 264
40433: PUSH
40434: LD_INT 5
40436: PUSH
40437: LD_INT 6
40439: PUSH
40440: LD_INT 46
40442: PUSH
40443: LD_INT 44
40445: PUSH
40446: LD_INT 47
40448: PUSH
40449: LD_INT 45
40451: PUSH
40452: LD_INT 28
40454: PUSH
40455: LD_INT 7
40457: PUSH
40458: LD_INT 27
40460: PUSH
40461: LD_INT 29
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: IN
40476: IFFALSE 40496
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: LD_INT 52
40486: PPUSH
40487: CALL_OW 321
40491: PUSH
40492: LD_INT 2
40494: EQUAL
40495: AND
40496: IFFALSE 40513
// bpoints := bpoints * 1.2 ;
40498: LD_ADDR_VAR 0 10
40502: PUSH
40503: LD_VAR 0 10
40507: PUSH
40508: LD_REAL  1.20000000000000E+0000
40511: MUL
40512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40513: LD_VAR 0 6
40517: PPUSH
40518: CALL_OW 264
40522: PUSH
40523: LD_INT 6
40525: PUSH
40526: LD_INT 46
40528: PUSH
40529: LD_INT 47
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: IN
40537: IFFALSE 40554
// bpoints := bpoints * 1.2 ;
40539: LD_ADDR_VAR 0 10
40543: PUSH
40544: LD_VAR 0 10
40548: PUSH
40549: LD_REAL  1.20000000000000E+0000
40552: MUL
40553: ST_TO_ADDR
// end ; unit_building :
40554: GO 40568
40556: LD_INT 3
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40567
40564: POP
// ; end ;
40565: GO 40568
40567: POP
// for j = 1 to 3 do
40568: LD_ADDR_VAR 0 7
40572: PUSH
40573: DOUBLE
40574: LD_INT 1
40576: DEC
40577: ST_TO_ADDR
40578: LD_INT 3
40580: PUSH
40581: FOR_TO
40582: IFFALSE 40635
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40584: LD_ADDR_VAR 0 5
40588: PUSH
40589: LD_VAR 0 5
40593: PPUSH
40594: LD_VAR 0 7
40598: PPUSH
40599: LD_VAR 0 5
40603: PUSH
40604: LD_VAR 0 7
40608: ARRAY
40609: PUSH
40610: LD_VAR 0 9
40614: PUSH
40615: LD_VAR 0 7
40619: ARRAY
40620: PUSH
40621: LD_VAR 0 10
40625: MUL
40626: PLUS
40627: PPUSH
40628: CALL_OW 1
40632: ST_TO_ADDR
40633: GO 40581
40635: POP
40636: POP
// end ;
40637: GO 39110
40639: POP
40640: POP
// result := Replace ( result , 4 , tmp ) ;
40641: LD_ADDR_VAR 0 5
40645: PUSH
40646: LD_VAR 0 5
40650: PPUSH
40651: LD_INT 4
40653: PPUSH
40654: LD_VAR 0 8
40658: PPUSH
40659: CALL_OW 1
40663: ST_TO_ADDR
// end ;
40664: LD_VAR 0 5
40668: RET
// export function DangerAtRange ( unit , range ) ; begin
40669: LD_INT 0
40671: PPUSH
// if not unit then
40672: LD_VAR 0 1
40676: NOT
40677: IFFALSE 40681
// exit ;
40679: GO 40726
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 255
40695: PPUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 250
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 251
40715: PPUSH
40716: LD_VAR 0 2
40720: PPUSH
40721: CALL 38960 0 4
40725: ST_TO_ADDR
// end ;
40726: LD_VAR 0 3
40730: RET
// export function DangerInArea ( side , area ) ; begin
40731: LD_INT 0
40733: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40734: LD_ADDR_VAR 0 3
40738: PUSH
40739: LD_VAR 0 2
40743: PPUSH
40744: LD_INT 81
40746: PUSH
40747: LD_VAR 0 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PPUSH
40756: CALL_OW 70
40760: ST_TO_ADDR
// end ;
40761: LD_VAR 0 3
40765: RET
// export function IsExtension ( b ) ; begin
40766: LD_INT 0
40768: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40769: LD_ADDR_VAR 0 2
40773: PUSH
40774: LD_VAR 0 1
40778: PUSH
40779: LD_INT 23
40781: PUSH
40782: LD_INT 20
40784: PUSH
40785: LD_INT 22
40787: PUSH
40788: LD_INT 17
40790: PUSH
40791: LD_INT 24
40793: PUSH
40794: LD_INT 21
40796: PUSH
40797: LD_INT 19
40799: PUSH
40800: LD_INT 16
40802: PUSH
40803: LD_INT 25
40805: PUSH
40806: LD_INT 18
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: IN
40821: ST_TO_ADDR
// end ;
40822: LD_VAR 0 2
40826: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40827: LD_INT 0
40829: PPUSH
40830: PPUSH
40831: PPUSH
// result := [ ] ;
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: EMPTY
40838: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40839: LD_ADDR_VAR 0 5
40843: PUSH
40844: LD_VAR 0 2
40848: PPUSH
40849: LD_INT 21
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PPUSH
40859: CALL_OW 70
40863: ST_TO_ADDR
// if not tmp then
40864: LD_VAR 0 5
40868: NOT
40869: IFFALSE 40873
// exit ;
40871: GO 40937
// if checkLink then
40873: LD_VAR 0 3
40877: IFFALSE 40927
// begin for i in tmp do
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_VAR 0 5
40888: PUSH
40889: FOR_IN
40890: IFFALSE 40925
// if GetBase ( i ) <> base then
40892: LD_VAR 0 6
40896: PPUSH
40897: CALL_OW 274
40901: PUSH
40902: LD_VAR 0 1
40906: NONEQUAL
40907: IFFALSE 40923
// ComLinkToBase ( base , i ) ;
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_VAR 0 6
40918: PPUSH
40919: CALL_OW 169
40923: GO 40889
40925: POP
40926: POP
// end ; result := tmp ;
40927: LD_ADDR_VAR 0 4
40931: PUSH
40932: LD_VAR 0 5
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 4
40941: RET
// export function ComComplete ( units , b ) ; var i ; begin
40942: LD_INT 0
40944: PPUSH
40945: PPUSH
// if not units then
40946: LD_VAR 0 1
40950: NOT
40951: IFFALSE 40955
// exit ;
40953: GO 41045
// for i in units do
40955: LD_ADDR_VAR 0 4
40959: PUSH
40960: LD_VAR 0 1
40964: PUSH
40965: FOR_IN
40966: IFFALSE 41043
// if BuildingStatus ( b ) = bs_build then
40968: LD_VAR 0 2
40972: PPUSH
40973: CALL_OW 461
40977: PUSH
40978: LD_INT 1
40980: EQUAL
40981: IFFALSE 41041
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40983: LD_VAR 0 4
40987: PPUSH
40988: LD_STRING h
40990: PUSH
40991: LD_VAR 0 2
40995: PPUSH
40996: CALL_OW 250
41000: PUSH
41001: LD_VAR 0 2
41005: PPUSH
41006: CALL_OW 251
41010: PUSH
41011: LD_VAR 0 2
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: PPUSH
41037: CALL_OW 446
41041: GO 40965
41043: POP
41044: POP
// end ;
41045: LD_VAR 0 3
41049: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41050: LD_INT 0
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41058: LD_VAR 0 1
41062: NOT
41063: IFTRUE 41080
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 263
41075: PUSH
41076: LD_INT 2
41078: NONEQUAL
41079: OR
41080: IFFALSE 41084
// exit ;
41082: GO 41400
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41084: LD_ADDR_VAR 0 6
41088: PUSH
41089: LD_INT 22
41091: PUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 255
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 36
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 34
41121: PUSH
41122: LD_INT 31
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PPUSH
41138: CALL_OW 69
41142: ST_TO_ADDR
// if not tmp then
41143: LD_VAR 0 6
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41400
// result := [ ] ;
41152: LD_ADDR_VAR 0 2
41156: PUSH
41157: EMPTY
41158: ST_TO_ADDR
// for i in tmp do
41159: LD_ADDR_VAR 0 3
41163: PUSH
41164: LD_VAR 0 6
41168: PUSH
41169: FOR_IN
41170: IFFALSE 41241
// begin t := UnitsInside ( i ) ;
41172: LD_ADDR_VAR 0 4
41176: PUSH
41177: LD_VAR 0 3
41181: PPUSH
41182: CALL_OW 313
41186: ST_TO_ADDR
// if t then
41187: LD_VAR 0 4
41191: IFFALSE 41239
// for j in t do
41193: LD_ADDR_VAR 0 7
41197: PUSH
41198: LD_VAR 0 4
41202: PUSH
41203: FOR_IN
41204: IFFALSE 41237
// result := Replace ( result , result + 1 , j ) ;
41206: LD_ADDR_VAR 0 2
41210: PUSH
41211: LD_VAR 0 2
41215: PPUSH
41216: LD_VAR 0 2
41220: PUSH
41221: LD_INT 1
41223: PLUS
41224: PPUSH
41225: LD_VAR 0 7
41229: PPUSH
41230: CALL_OW 1
41234: ST_TO_ADDR
41235: GO 41203
41237: POP
41238: POP
// end ;
41239: GO 41169
41241: POP
41242: POP
// if not result then
41243: LD_VAR 0 2
41247: NOT
41248: IFFALSE 41252
// exit ;
41250: GO 41400
// mech := result [ 1 ] ;
41252: LD_ADDR_VAR 0 5
41256: PUSH
41257: LD_VAR 0 2
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: ST_TO_ADDR
// if result > 1 then
41266: LD_VAR 0 2
41270: PUSH
41271: LD_INT 1
41273: GREATER
41274: IFFALSE 41386
// begin for i = 2 to result do
41276: LD_ADDR_VAR 0 3
41280: PUSH
41281: DOUBLE
41282: LD_INT 2
41284: DEC
41285: ST_TO_ADDR
41286: LD_VAR 0 2
41290: PUSH
41291: FOR_TO
41292: IFFALSE 41384
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41294: LD_ADDR_VAR 0 4
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_VAR 0 3
41308: ARRAY
41309: PPUSH
41310: LD_INT 3
41312: PPUSH
41313: CALL_OW 259
41317: PUSH
41318: LD_VAR 0 2
41322: PUSH
41323: LD_VAR 0 3
41327: ARRAY
41328: PPUSH
41329: CALL_OW 432
41333: MINUS
41334: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41335: LD_VAR 0 4
41339: PUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: LD_INT 3
41347: PPUSH
41348: CALL_OW 259
41352: PUSH
41353: LD_VAR 0 5
41357: PPUSH
41358: CALL_OW 432
41362: MINUS
41363: GREATEREQUAL
41364: IFFALSE 41382
// mech := result [ i ] ;
41366: LD_ADDR_VAR 0 5
41370: PUSH
41371: LD_VAR 0 2
41375: PUSH
41376: LD_VAR 0 3
41380: ARRAY
41381: ST_TO_ADDR
// end ;
41382: GO 41291
41384: POP
41385: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41386: LD_VAR 0 1
41390: PPUSH
41391: LD_VAR 0 5
41395: PPUSH
41396: CALL_OW 135
// end ;
41400: LD_VAR 0 2
41404: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41405: LD_INT 0
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
// result := [ ] ;
41420: LD_ADDR_VAR 0 7
41424: PUSH
41425: EMPTY
41426: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 266
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: IN
41447: NOT
41448: IFFALSE 41452
// exit ;
41450: GO 43092
// if name then
41452: LD_VAR 0 3
41456: IFFALSE 41472
// SetBName ( base_dep , name ) ;
41458: LD_VAR 0 1
41462: PPUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: CALL_OW 500
// base := GetBase ( base_dep ) ;
41472: LD_ADDR_VAR 0 15
41476: PUSH
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 274
41486: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41487: LD_ADDR_VAR 0 16
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 255
41501: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41502: LD_ADDR_VAR 0 17
41506: PUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 248
41516: ST_TO_ADDR
// if sources then
41517: LD_VAR 0 5
41521: IFFALSE 41568
// for i = 1 to 3 do
41523: LD_ADDR_VAR 0 8
41527: PUSH
41528: DOUBLE
41529: LD_INT 1
41531: DEC
41532: ST_TO_ADDR
41533: LD_INT 3
41535: PUSH
41536: FOR_TO
41537: IFFALSE 41566
// AddResourceType ( base , i , sources [ i ] ) ;
41539: LD_VAR 0 15
41543: PPUSH
41544: LD_VAR 0 8
41548: PPUSH
41549: LD_VAR 0 5
41553: PUSH
41554: LD_VAR 0 8
41558: ARRAY
41559: PPUSH
41560: CALL_OW 276
41564: GO 41536
41566: POP
41567: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41568: LD_ADDR_VAR 0 18
41572: PUSH
41573: LD_VAR 0 15
41577: PPUSH
41578: LD_VAR 0 2
41582: PPUSH
41583: LD_INT 1
41585: PPUSH
41586: CALL 40827 0 3
41590: ST_TO_ADDR
// InitHc ;
41591: CALL_OW 19
// InitUc ;
41595: CALL_OW 18
// uc_side := side ;
41599: LD_ADDR_OWVAR 20
41603: PUSH
41604: LD_VAR 0 16
41608: ST_TO_ADDR
// uc_nation := nation ;
41609: LD_ADDR_OWVAR 21
41613: PUSH
41614: LD_VAR 0 17
41618: ST_TO_ADDR
// if buildings then
41619: LD_VAR 0 18
41623: IFFALSE 42951
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41625: LD_ADDR_VAR 0 19
41629: PUSH
41630: LD_VAR 0 18
41634: PPUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 30
41640: PUSH
41641: LD_INT 29
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 30
41650: PUSH
41651: LD_INT 30
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: PPUSH
41663: CALL_OW 72
41667: ST_TO_ADDR
// if tmp then
41668: LD_VAR 0 19
41672: IFFALSE 41720
// for i in tmp do
41674: LD_ADDR_VAR 0 8
41678: PUSH
41679: LD_VAR 0 19
41683: PUSH
41684: FOR_IN
41685: IFFALSE 41718
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41687: LD_VAR 0 8
41691: PPUSH
41692: CALL_OW 250
41696: PPUSH
41697: LD_VAR 0 8
41701: PPUSH
41702: CALL_OW 251
41706: PPUSH
41707: LD_VAR 0 16
41711: PPUSH
41712: CALL_OW 441
41716: GO 41684
41718: POP
41719: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41720: LD_VAR 0 18
41724: PPUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 30
41730: PUSH
41731: LD_INT 32
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 30
41740: PUSH
41741: LD_INT 33
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: PPUSH
41753: CALL_OW 72
41757: IFFALSE 41845
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41759: LD_ADDR_VAR 0 8
41763: PUSH
41764: LD_VAR 0 18
41768: PPUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 32
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 30
41784: PUSH
41785: LD_INT 33
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: PPUSH
41797: CALL_OW 72
41801: PUSH
41802: FOR_IN
41803: IFFALSE 41843
// begin if not GetBWeapon ( i ) then
41805: LD_VAR 0 8
41809: PPUSH
41810: CALL_OW 269
41814: NOT
41815: IFFALSE 41841
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41817: LD_VAR 0 8
41821: PPUSH
41822: LD_VAR 0 8
41826: PPUSH
41827: LD_VAR 0 2
41831: PPUSH
41832: CALL 43097 0 2
41836: PPUSH
41837: CALL_OW 431
// end ;
41841: GO 41802
41843: POP
41844: POP
// end ; for i = 1 to personel do
41845: LD_ADDR_VAR 0 8
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_VAR 0 6
41859: PUSH
41860: FOR_TO
41861: IFFALSE 42931
// begin if i > 4 then
41863: LD_VAR 0 8
41867: PUSH
41868: LD_INT 4
41870: GREATER
41871: IFFALSE 41875
// break ;
41873: GO 42931
// case i of 1 :
41875: LD_VAR 0 8
41879: PUSH
41880: LD_INT 1
41882: DOUBLE
41883: EQUAL
41884: IFTRUE 41888
41886: GO 41968
41888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41889: LD_ADDR_VAR 0 12
41893: PUSH
41894: LD_VAR 0 18
41898: PPUSH
41899: LD_INT 22
41901: PUSH
41902: LD_VAR 0 16
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 58
41913: PUSH
41914: EMPTY
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 30
41922: PUSH
41923: LD_INT 32
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 30
41932: PUSH
41933: LD_INT 4
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 30
41942: PUSH
41943: LD_INT 5
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: PPUSH
41961: CALL_OW 72
41965: ST_TO_ADDR
41966: GO 42190
41968: LD_INT 2
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 42038
41976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41977: LD_ADDR_VAR 0 12
41981: PUSH
41982: LD_VAR 0 18
41986: PPUSH
41987: LD_INT 22
41989: PUSH
41990: LD_VAR 0 16
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 30
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 30
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PPUSH
42031: CALL_OW 72
42035: ST_TO_ADDR
42036: GO 42190
42038: LD_INT 3
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42046
42044: GO 42108
42046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42047: LD_ADDR_VAR 0 12
42051: PUSH
42052: LD_VAR 0 18
42056: PPUSH
42057: LD_INT 22
42059: PUSH
42060: LD_VAR 0 16
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 30
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PPUSH
42101: CALL_OW 72
42105: ST_TO_ADDR
42106: GO 42190
42108: LD_INT 4
42110: DOUBLE
42111: EQUAL
42112: IFTRUE 42116
42114: GO 42189
42116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42117: LD_ADDR_VAR 0 12
42121: PUSH
42122: LD_VAR 0 18
42126: PPUSH
42127: LD_INT 22
42129: PUSH
42130: LD_VAR 0 16
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 30
42144: PUSH
42145: LD_INT 6
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 30
42154: PUSH
42155: LD_INT 7
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 30
42164: PUSH
42165: LD_INT 8
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PPUSH
42182: CALL_OW 72
42186: ST_TO_ADDR
42187: GO 42190
42189: POP
// if i = 1 then
42190: LD_VAR 0 8
42194: PUSH
42195: LD_INT 1
42197: EQUAL
42198: IFFALSE 42309
// begin tmp := [ ] ;
42200: LD_ADDR_VAR 0 19
42204: PUSH
42205: EMPTY
42206: ST_TO_ADDR
// for j in f do
42207: LD_ADDR_VAR 0 9
42211: PUSH
42212: LD_VAR 0 12
42216: PUSH
42217: FOR_IN
42218: IFFALSE 42291
// if GetBType ( j ) = b_bunker then
42220: LD_VAR 0 9
42224: PPUSH
42225: CALL_OW 266
42229: PUSH
42230: LD_INT 32
42232: EQUAL
42233: IFFALSE 42260
// tmp := Insert ( tmp , 1 , j ) else
42235: LD_ADDR_VAR 0 19
42239: PUSH
42240: LD_VAR 0 19
42244: PPUSH
42245: LD_INT 1
42247: PPUSH
42248: LD_VAR 0 9
42252: PPUSH
42253: CALL_OW 2
42257: ST_TO_ADDR
42258: GO 42289
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42260: LD_ADDR_VAR 0 19
42264: PUSH
42265: LD_VAR 0 19
42269: PPUSH
42270: LD_VAR 0 19
42274: PUSH
42275: LD_INT 1
42277: PLUS
42278: PPUSH
42279: LD_VAR 0 9
42283: PPUSH
42284: CALL_OW 2
42288: ST_TO_ADDR
42289: GO 42217
42291: POP
42292: POP
// if tmp then
42293: LD_VAR 0 19
42297: IFFALSE 42309
// f := tmp ;
42299: LD_ADDR_VAR 0 12
42303: PUSH
42304: LD_VAR 0 19
42308: ST_TO_ADDR
// end ; x := personel [ i ] ;
42309: LD_ADDR_VAR 0 13
42313: PUSH
42314: LD_VAR 0 6
42318: PUSH
42319: LD_VAR 0 8
42323: ARRAY
42324: ST_TO_ADDR
// if x = - 1 then
42325: LD_VAR 0 13
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: EQUAL
42334: IFFALSE 42545
// begin for j in f do
42336: LD_ADDR_VAR 0 9
42340: PUSH
42341: LD_VAR 0 12
42345: PUSH
42346: FOR_IN
42347: IFFALSE 42541
// repeat InitHc ;
42349: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42353: LD_VAR 0 9
42357: PPUSH
42358: CALL_OW 266
42362: PUSH
42363: LD_INT 5
42365: EQUAL
42366: IFFALSE 42436
// begin if UnitsInside ( j ) < 3 then
42368: LD_VAR 0 9
42372: PPUSH
42373: CALL_OW 313
42377: PUSH
42378: LD_INT 3
42380: LESS
42381: IFFALSE 42417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42383: LD_INT 0
42385: PPUSH
42386: LD_INT 5
42388: PUSH
42389: LD_INT 8
42391: PUSH
42392: LD_INT 9
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: PUSH
42400: LD_VAR 0 17
42404: ARRAY
42405: PPUSH
42406: LD_VAR 0 4
42410: PPUSH
42411: CALL_OW 380
42415: GO 42434
// PrepareHuman ( false , i , skill ) ;
42417: LD_INT 0
42419: PPUSH
42420: LD_VAR 0 8
42424: PPUSH
42425: LD_VAR 0 4
42429: PPUSH
42430: CALL_OW 380
// end else
42434: GO 42453
// PrepareHuman ( false , i , skill ) ;
42436: LD_INT 0
42438: PPUSH
42439: LD_VAR 0 8
42443: PPUSH
42444: LD_VAR 0 4
42448: PPUSH
42449: CALL_OW 380
// un := CreateHuman ;
42453: LD_ADDR_VAR 0 14
42457: PUSH
42458: CALL_OW 44
42462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42463: LD_ADDR_VAR 0 7
42467: PUSH
42468: LD_VAR 0 7
42472: PPUSH
42473: LD_INT 1
42475: PPUSH
42476: LD_VAR 0 14
42480: PPUSH
42481: CALL_OW 2
42485: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42486: LD_VAR 0 14
42490: PPUSH
42491: LD_VAR 0 9
42495: PPUSH
42496: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42500: LD_VAR 0 9
42504: PPUSH
42505: CALL_OW 313
42509: PUSH
42510: LD_INT 6
42512: EQUAL
42513: IFTRUE 42537
42515: PUSH
42516: LD_VAR 0 9
42520: PPUSH
42521: CALL_OW 266
42525: PUSH
42526: LD_INT 32
42528: PUSH
42529: LD_INT 31
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: IN
42536: OR
42537: IFFALSE 42349
42539: GO 42346
42541: POP
42542: POP
// end else
42543: GO 42929
// for j = 1 to x do
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: DOUBLE
42551: LD_INT 1
42553: DEC
42554: ST_TO_ADDR
42555: LD_VAR 0 13
42559: PUSH
42560: FOR_TO
42561: IFFALSE 42927
// begin InitHc ;
42563: CALL_OW 19
// if not f then
42567: LD_VAR 0 12
42571: NOT
42572: IFFALSE 42661
// begin PrepareHuman ( false , i , skill ) ;
42574: LD_INT 0
42576: PPUSH
42577: LD_VAR 0 8
42581: PPUSH
42582: LD_VAR 0 4
42586: PPUSH
42587: CALL_OW 380
// un := CreateHuman ;
42591: LD_ADDR_VAR 0 14
42595: PUSH
42596: CALL_OW 44
42600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42601: LD_ADDR_VAR 0 7
42605: PUSH
42606: LD_VAR 0 7
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: LD_VAR 0 14
42618: PPUSH
42619: CALL_OW 2
42623: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42624: LD_VAR 0 14
42628: PPUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 250
42638: PPUSH
42639: LD_VAR 0 1
42643: PPUSH
42644: CALL_OW 251
42648: PPUSH
42649: LD_INT 10
42651: PPUSH
42652: LD_INT 0
42654: PPUSH
42655: CALL_OW 50
// continue ;
42659: GO 42560
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42661: LD_VAR 0 12
42665: PUSH
42666: LD_INT 1
42668: ARRAY
42669: PPUSH
42670: CALL_OW 313
42674: IFFALSE 42702
42676: PUSH
42677: LD_VAR 0 12
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: PPUSH
42686: CALL_OW 266
42690: PUSH
42691: LD_INT 32
42693: PUSH
42694: LD_INT 31
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: IN
42701: AND
42702: IFTRUE 42723
42704: PUSH
42705: LD_VAR 0 12
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PPUSH
42714: CALL_OW 313
42718: PUSH
42719: LD_INT 6
42721: EQUAL
42722: OR
42723: IFFALSE 42743
// f := Delete ( f , 1 ) ;
42725: LD_ADDR_VAR 0 12
42729: PUSH
42730: LD_VAR 0 12
42734: PPUSH
42735: LD_INT 1
42737: PPUSH
42738: CALL_OW 3
42742: ST_TO_ADDR
// if not f then
42743: LD_VAR 0 12
42747: NOT
42748: IFFALSE 42766
// begin x := x + 2 ;
42750: LD_ADDR_VAR 0 13
42754: PUSH
42755: LD_VAR 0 13
42759: PUSH
42760: LD_INT 2
42762: PLUS
42763: ST_TO_ADDR
// continue ;
42764: GO 42560
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42766: LD_VAR 0 12
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PPUSH
42775: CALL_OW 266
42779: PUSH
42780: LD_INT 5
42782: EQUAL
42783: IFFALSE 42857
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42785: LD_VAR 0 12
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: PPUSH
42794: CALL_OW 313
42798: PUSH
42799: LD_INT 3
42801: LESS
42802: IFFALSE 42838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42804: LD_INT 0
42806: PPUSH
42807: LD_INT 5
42809: PUSH
42810: LD_INT 8
42812: PUSH
42813: LD_INT 9
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: LD_VAR 0 17
42825: ARRAY
42826: PPUSH
42827: LD_VAR 0 4
42831: PPUSH
42832: CALL_OW 380
42836: GO 42855
// PrepareHuman ( false , i , skill ) ;
42838: LD_INT 0
42840: PPUSH
42841: LD_VAR 0 8
42845: PPUSH
42846: LD_VAR 0 4
42850: PPUSH
42851: CALL_OW 380
// end else
42855: GO 42874
// PrepareHuman ( false , i , skill ) ;
42857: LD_INT 0
42859: PPUSH
42860: LD_VAR 0 8
42864: PPUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: CALL_OW 380
// un := CreateHuman ;
42874: LD_ADDR_VAR 0 14
42878: PUSH
42879: CALL_OW 44
42883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42884: LD_ADDR_VAR 0 7
42888: PUSH
42889: LD_VAR 0 7
42893: PPUSH
42894: LD_INT 1
42896: PPUSH
42897: LD_VAR 0 14
42901: PPUSH
42902: CALL_OW 2
42906: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42907: LD_VAR 0 14
42911: PPUSH
42912: LD_VAR 0 12
42916: PUSH
42917: LD_INT 1
42919: ARRAY
42920: PPUSH
42921: CALL_OW 52
// end ;
42925: GO 42560
42927: POP
42928: POP
// end ;
42929: GO 41860
42931: POP
42932: POP
// result := result ^ buildings ;
42933: LD_ADDR_VAR 0 7
42937: PUSH
42938: LD_VAR 0 7
42942: PUSH
42943: LD_VAR 0 18
42947: ADD
42948: ST_TO_ADDR
// end else
42949: GO 43092
// begin for i = 1 to personel do
42951: LD_ADDR_VAR 0 8
42955: PUSH
42956: DOUBLE
42957: LD_INT 1
42959: DEC
42960: ST_TO_ADDR
42961: LD_VAR 0 6
42965: PUSH
42966: FOR_TO
42967: IFFALSE 43090
// begin if i > 4 then
42969: LD_VAR 0 8
42973: PUSH
42974: LD_INT 4
42976: GREATER
42977: IFFALSE 42981
// break ;
42979: GO 43090
// x := personel [ i ] ;
42981: LD_ADDR_VAR 0 13
42985: PUSH
42986: LD_VAR 0 6
42990: PUSH
42991: LD_VAR 0 8
42995: ARRAY
42996: ST_TO_ADDR
// if x = - 1 then
42997: LD_VAR 0 13
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: EQUAL
43006: IFFALSE 43010
// continue ;
43008: GO 42966
// PrepareHuman ( false , i , skill ) ;
43010: LD_INT 0
43012: PPUSH
43013: LD_VAR 0 8
43017: PPUSH
43018: LD_VAR 0 4
43022: PPUSH
43023: CALL_OW 380
// un := CreateHuman ;
43027: LD_ADDR_VAR 0 14
43031: PUSH
43032: CALL_OW 44
43036: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43037: LD_VAR 0 14
43041: PPUSH
43042: LD_VAR 0 1
43046: PPUSH
43047: CALL_OW 250
43051: PPUSH
43052: LD_VAR 0 1
43056: PPUSH
43057: CALL_OW 251
43061: PPUSH
43062: LD_INT 10
43064: PPUSH
43065: LD_INT 0
43067: PPUSH
43068: CALL_OW 50
// result := result ^ un ;
43072: LD_ADDR_VAR 0 7
43076: PUSH
43077: LD_VAR 0 7
43081: PUSH
43082: LD_VAR 0 14
43086: ADD
43087: ST_TO_ADDR
// end ;
43088: GO 42966
43090: POP
43091: POP
// end ; end ;
43092: LD_VAR 0 7
43096: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43097: LD_INT 0
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
// result := false ;
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 0
43122: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43123: LD_VAR 0 1
43127: NOT
43128: IFTRUE 43153
43130: PUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 266
43140: PUSH
43141: LD_INT 32
43143: PUSH
43144: LD_INT 33
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: IN
43151: NOT
43152: OR
43153: IFFALSE 43157
// exit ;
43155: GO 44292
// nat := GetNation ( tower ) ;
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 248
43171: ST_TO_ADDR
// side := GetSide ( tower ) ;
43172: LD_ADDR_VAR 0 16
43176: PUSH
43177: LD_VAR 0 1
43181: PPUSH
43182: CALL_OW 255
43186: ST_TO_ADDR
// x := GetX ( tower ) ;
43187: LD_ADDR_VAR 0 10
43191: PUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 250
43201: ST_TO_ADDR
// y := GetY ( tower ) ;
43202: LD_ADDR_VAR 0 11
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 251
43216: ST_TO_ADDR
// if not x or not y then
43217: LD_VAR 0 10
43221: NOT
43222: IFTRUE 43231
43224: PUSH
43225: LD_VAR 0 11
43229: NOT
43230: OR
43231: IFFALSE 43235
// exit ;
43233: GO 44292
// weapon := 0 ;
43235: LD_ADDR_VAR 0 18
43239: PUSH
43240: LD_INT 0
43242: ST_TO_ADDR
// fac_list := [ ] ;
43243: LD_ADDR_VAR 0 17
43247: PUSH
43248: EMPTY
43249: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43250: LD_ADDR_VAR 0 6
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 274
43264: PPUSH
43265: LD_VAR 0 2
43269: PPUSH
43270: LD_INT 0
43272: PPUSH
43273: CALL 40827 0 3
43277: PPUSH
43278: LD_INT 30
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: CALL_OW 72
43292: ST_TO_ADDR
// if not factories then
43293: LD_VAR 0 6
43297: NOT
43298: IFFALSE 43302
// exit ;
43300: GO 44292
// for i in factories do
43302: LD_ADDR_VAR 0 8
43306: PUSH
43307: LD_VAR 0 6
43311: PUSH
43312: FOR_IN
43313: IFFALSE 43338
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43315: LD_ADDR_VAR 0 17
43319: PUSH
43320: LD_VAR 0 17
43324: PUSH
43325: LD_VAR 0 8
43329: PPUSH
43330: CALL_OW 478
43334: UNION
43335: ST_TO_ADDR
43336: GO 43312
43338: POP
43339: POP
// if not fac_list then
43340: LD_VAR 0 17
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 44292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43349: LD_ADDR_VAR 0 5
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: LD_INT 9
43362: PUSH
43363: LD_INT 10
43365: PUSH
43366: LD_INT 6
43368: PUSH
43369: LD_INT 7
43371: PUSH
43372: LD_INT 11
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 27
43386: PUSH
43387: LD_INT 28
43389: PUSH
43390: LD_INT 26
43392: PUSH
43393: LD_INT 30
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 43
43404: PUSH
43405: LD_INT 44
43407: PUSH
43408: LD_INT 46
43410: PUSH
43411: LD_INT 45
43413: PUSH
43414: LD_INT 47
43416: PUSH
43417: LD_INT 49
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: PUSH
43433: LD_VAR 0 12
43437: ARRAY
43438: ST_TO_ADDR
// list := list isect fac_list ;
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_VAR 0 5
43448: PUSH
43449: LD_VAR 0 17
43453: ISECT
43454: ST_TO_ADDR
// if not list then
43455: LD_VAR 0 5
43459: NOT
43460: IFFALSE 43464
// exit ;
43462: GO 44292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43464: LD_VAR 0 12
43468: PUSH
43469: LD_INT 3
43471: EQUAL
43472: IFFALSE 43484
43474: PUSH
43475: LD_INT 49
43477: PUSH
43478: LD_VAR 0 5
43482: IN
43483: AND
43484: IFFALSE 43504
43486: PUSH
43487: LD_INT 31
43489: PPUSH
43490: LD_VAR 0 16
43494: PPUSH
43495: CALL_OW 321
43499: PUSH
43500: LD_INT 2
43502: EQUAL
43503: AND
43504: IFFALSE 43564
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43506: LD_INT 22
43508: PUSH
43509: LD_VAR 0 16
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 35
43520: PUSH
43521: LD_INT 49
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 91
43530: PUSH
43531: LD_VAR 0 1
43535: PUSH
43536: LD_INT 10
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: LIST
43548: PPUSH
43549: CALL_OW 69
43553: NOT
43554: IFFALSE 43564
// weapon := ru_time_lapser ;
43556: LD_ADDR_VAR 0 18
43560: PUSH
43561: LD_INT 49
43563: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43564: LD_VAR 0 12
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: IN
43579: IFFALSE 43603
43581: PUSH
43582: LD_INT 11
43584: PUSH
43585: LD_VAR 0 5
43589: IN
43590: IFTRUE 43602
43592: PUSH
43593: LD_INT 30
43595: PUSH
43596: LD_VAR 0 5
43600: IN
43601: OR
43602: AND
43603: IFFALSE 43623
43605: PUSH
43606: LD_INT 6
43608: PPUSH
43609: LD_VAR 0 16
43613: PPUSH
43614: CALL_OW 321
43618: PUSH
43619: LD_INT 2
43621: EQUAL
43622: AND
43623: IFFALSE 43790
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43625: LD_INT 22
43627: PUSH
43628: LD_VAR 0 16
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 35
43642: PUSH
43643: LD_INT 11
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 35
43652: PUSH
43653: LD_INT 30
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 91
43667: PUSH
43668: LD_VAR 0 1
43672: PUSH
43673: LD_INT 18
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: PPUSH
43686: CALL_OW 69
43690: NOT
43691: IFFALSE 43767
43693: PUSH
43694: LD_INT 22
43696: PUSH
43697: LD_VAR 0 16
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 30
43711: PUSH
43712: LD_INT 32
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 30
43721: PUSH
43722: LD_INT 33
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 91
43736: PUSH
43737: LD_VAR 0 1
43741: PUSH
43742: LD_INT 12
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: PPUSH
43758: CALL_OW 69
43762: PUSH
43763: LD_INT 2
43765: GREATER
43766: AND
43767: IFFALSE 43790
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43769: LD_ADDR_VAR 0 18
43773: PUSH
43774: LD_INT 11
43776: PUSH
43777: LD_INT 30
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_VAR 0 12
43788: ARRAY
43789: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43790: LD_VAR 0 18
43794: NOT
43795: IFFALSE 43815
43797: PUSH
43798: LD_INT 40
43800: PPUSH
43801: LD_VAR 0 16
43805: PPUSH
43806: CALL_OW 321
43810: PUSH
43811: LD_INT 2
43813: EQUAL
43814: AND
43815: IFFALSE 43851
43817: PUSH
43818: LD_INT 7
43820: PUSH
43821: LD_VAR 0 5
43825: IN
43826: IFTRUE 43838
43828: PUSH
43829: LD_INT 28
43831: PUSH
43832: LD_VAR 0 5
43836: IN
43837: OR
43838: IFTRUE 43850
43840: PUSH
43841: LD_INT 45
43843: PUSH
43844: LD_VAR 0 5
43848: IN
43849: OR
43850: AND
43851: IFFALSE 44105
// begin hex := GetHexInfo ( x , y ) ;
43853: LD_ADDR_VAR 0 4
43857: PUSH
43858: LD_VAR 0 10
43862: PPUSH
43863: LD_VAR 0 11
43867: PPUSH
43868: CALL_OW 546
43872: ST_TO_ADDR
// if hex [ 1 ] then
43873: LD_VAR 0 4
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: IFFALSE 43885
// exit ;
43883: GO 44292
// height := hex [ 2 ] ;
43885: LD_ADDR_VAR 0 15
43889: PUSH
43890: LD_VAR 0 4
43894: PUSH
43895: LD_INT 2
43897: ARRAY
43898: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43899: LD_ADDR_VAR 0 14
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 3
43912: PUSH
43913: LD_INT 5
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: ST_TO_ADDR
// for i in tmp do
43922: LD_ADDR_VAR 0 8
43926: PUSH
43927: LD_VAR 0 14
43931: PUSH
43932: FOR_IN
43933: IFFALSE 44103
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43935: LD_ADDR_VAR 0 9
43939: PUSH
43940: LD_VAR 0 10
43944: PPUSH
43945: LD_VAR 0 8
43949: PPUSH
43950: LD_INT 5
43952: PPUSH
43953: CALL_OW 272
43957: PUSH
43958: LD_VAR 0 11
43962: PPUSH
43963: LD_VAR 0 8
43967: PPUSH
43968: LD_INT 5
43970: PPUSH
43971: CALL_OW 273
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43980: LD_VAR 0 9
43984: PUSH
43985: LD_INT 1
43987: ARRAY
43988: PPUSH
43989: LD_VAR 0 9
43993: PUSH
43994: LD_INT 2
43996: ARRAY
43997: PPUSH
43998: CALL_OW 488
44002: IFFALSE 44101
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44004: LD_ADDR_VAR 0 4
44008: PUSH
44009: LD_VAR 0 9
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: PPUSH
44018: LD_VAR 0 9
44022: PUSH
44023: LD_INT 2
44025: ARRAY
44026: PPUSH
44027: CALL_OW 546
44031: ST_TO_ADDR
// if hex [ 1 ] then
44032: LD_VAR 0 4
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: IFFALSE 44044
// continue ;
44042: GO 43932
// h := hex [ 2 ] ;
44044: LD_ADDR_VAR 0 13
44048: PUSH
44049: LD_VAR 0 4
44053: PUSH
44054: LD_INT 2
44056: ARRAY
44057: ST_TO_ADDR
// if h + 7 < height then
44058: LD_VAR 0 13
44062: PUSH
44063: LD_INT 7
44065: PLUS
44066: PUSH
44067: LD_VAR 0 15
44071: LESS
44072: IFFALSE 44101
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44074: LD_ADDR_VAR 0 18
44078: PUSH
44079: LD_INT 7
44081: PUSH
44082: LD_INT 28
44084: PUSH
44085: LD_INT 45
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: PUSH
44093: LD_VAR 0 12
44097: ARRAY
44098: ST_TO_ADDR
// break ;
44099: GO 44103
// end ; end ; end ;
44101: GO 43932
44103: POP
44104: POP
// end ; if not weapon then
44105: LD_VAR 0 18
44109: NOT
44110: IFFALSE 44170
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44112: LD_ADDR_VAR 0 5
44116: PUSH
44117: LD_VAR 0 5
44121: PUSH
44122: LD_INT 11
44124: PUSH
44125: LD_INT 30
44127: PUSH
44128: LD_INT 49
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: DIFF
44136: ST_TO_ADDR
// if not list then
44137: LD_VAR 0 5
44141: NOT
44142: IFFALSE 44146
// exit ;
44144: GO 44292
// weapon := list [ rand ( 1 , list ) ] ;
44146: LD_ADDR_VAR 0 18
44150: PUSH
44151: LD_VAR 0 5
44155: PUSH
44156: LD_INT 1
44158: PPUSH
44159: LD_VAR 0 5
44163: PPUSH
44164: CALL_OW 12
44168: ARRAY
44169: ST_TO_ADDR
// end ; if weapon then
44170: LD_VAR 0 18
44174: IFFALSE 44292
// begin tmp := CostOfWeapon ( weapon ) ;
44176: LD_ADDR_VAR 0 14
44180: PUSH
44181: LD_VAR 0 18
44185: PPUSH
44186: CALL_OW 451
44190: ST_TO_ADDR
// j := GetBase ( tower ) ;
44191: LD_ADDR_VAR 0 9
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: CALL_OW 274
44205: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44206: LD_VAR 0 9
44210: PPUSH
44211: LD_INT 1
44213: PPUSH
44214: CALL_OW 275
44218: PUSH
44219: LD_VAR 0 14
44223: PUSH
44224: LD_INT 1
44226: ARRAY
44227: GREATEREQUAL
44228: IFFALSE 44254
44230: PUSH
44231: LD_VAR 0 9
44235: PPUSH
44236: LD_INT 2
44238: PPUSH
44239: CALL_OW 275
44243: PUSH
44244: LD_VAR 0 14
44248: PUSH
44249: LD_INT 2
44251: ARRAY
44252: GREATEREQUAL
44253: AND
44254: IFFALSE 44280
44256: PUSH
44257: LD_VAR 0 9
44261: PPUSH
44262: LD_INT 3
44264: PPUSH
44265: CALL_OW 275
44269: PUSH
44270: LD_VAR 0 14
44274: PUSH
44275: LD_INT 3
44277: ARRAY
44278: GREATEREQUAL
44279: AND
44280: IFFALSE 44292
// result := weapon ;
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_VAR 0 18
44291: ST_TO_ADDR
// end ; end ;
44292: LD_VAR 0 3
44296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44297: LD_INT 0
44299: PPUSH
44300: PPUSH
// result := true ;
44301: LD_ADDR_VAR 0 3
44305: PUSH
44306: LD_INT 1
44308: ST_TO_ADDR
// if array1 = array2 then
44309: LD_VAR 0 1
44313: PUSH
44314: LD_VAR 0 2
44318: EQUAL
44319: IFFALSE 44379
// begin for i = 1 to array1 do
44321: LD_ADDR_VAR 0 4
44325: PUSH
44326: DOUBLE
44327: LD_INT 1
44329: DEC
44330: ST_TO_ADDR
44331: LD_VAR 0 1
44335: PUSH
44336: FOR_TO
44337: IFFALSE 44375
// if array1 [ i ] <> array2 [ i ] then
44339: LD_VAR 0 1
44343: PUSH
44344: LD_VAR 0 4
44348: ARRAY
44349: PUSH
44350: LD_VAR 0 2
44354: PUSH
44355: LD_VAR 0 4
44359: ARRAY
44360: NONEQUAL
44361: IFFALSE 44373
// begin result := false ;
44363: LD_ADDR_VAR 0 3
44367: PUSH
44368: LD_INT 0
44370: ST_TO_ADDR
// break ;
44371: GO 44375
// end ;
44373: GO 44336
44375: POP
44376: POP
// end else
44377: GO 44387
// result := false ;
44379: LD_ADDR_VAR 0 3
44383: PUSH
44384: LD_INT 0
44386: ST_TO_ADDR
// end ;
44387: LD_VAR 0 3
44391: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44392: LD_INT 0
44394: PPUSH
44395: PPUSH
// if not array1 or not array2 then
44396: LD_VAR 0 1
44400: NOT
44401: IFTRUE 44410
44403: PUSH
44404: LD_VAR 0 2
44408: NOT
44409: OR
44410: IFFALSE 44414
// exit ;
44412: GO 44478
// result := true ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_INT 1
44421: ST_TO_ADDR
// for i = 1 to array1 do
44422: LD_ADDR_VAR 0 4
44426: PUSH
44427: DOUBLE
44428: LD_INT 1
44430: DEC
44431: ST_TO_ADDR
44432: LD_VAR 0 1
44436: PUSH
44437: FOR_TO
44438: IFFALSE 44476
// if array1 [ i ] <> array2 [ i ] then
44440: LD_VAR 0 1
44444: PUSH
44445: LD_VAR 0 4
44449: ARRAY
44450: PUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_VAR 0 4
44460: ARRAY
44461: NONEQUAL
44462: IFFALSE 44474
// begin result := false ;
44464: LD_ADDR_VAR 0 3
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// break ;
44472: GO 44476
// end ;
44474: GO 44437
44476: POP
44477: POP
// end ;
44478: LD_VAR 0 3
44482: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44483: LD_INT 0
44485: PPUSH
44486: PPUSH
44487: PPUSH
// pom := GetBase ( fac ) ;
44488: LD_ADDR_VAR 0 5
44492: PUSH
44493: LD_VAR 0 1
44497: PPUSH
44498: CALL_OW 274
44502: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44503: LD_ADDR_VAR 0 4
44507: PUSH
44508: LD_VAR 0 2
44512: PUSH
44513: LD_INT 1
44515: ARRAY
44516: PPUSH
44517: LD_VAR 0 2
44521: PUSH
44522: LD_INT 2
44524: ARRAY
44525: PPUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 3
44533: ARRAY
44534: PPUSH
44535: LD_VAR 0 2
44539: PUSH
44540: LD_INT 4
44542: ARRAY
44543: PPUSH
44544: CALL_OW 449
44548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44549: LD_ADDR_VAR 0 3
44553: PUSH
44554: LD_VAR 0 5
44558: PPUSH
44559: LD_INT 1
44561: PPUSH
44562: CALL_OW 275
44566: PUSH
44567: LD_VAR 0 4
44571: PUSH
44572: LD_INT 1
44574: ARRAY
44575: GREATEREQUAL
44576: IFFALSE 44602
44578: PUSH
44579: LD_VAR 0 5
44583: PPUSH
44584: LD_INT 2
44586: PPUSH
44587: CALL_OW 275
44591: PUSH
44592: LD_VAR 0 4
44596: PUSH
44597: LD_INT 2
44599: ARRAY
44600: GREATEREQUAL
44601: AND
44602: IFFALSE 44628
44604: PUSH
44605: LD_VAR 0 5
44609: PPUSH
44610: LD_INT 3
44612: PPUSH
44613: CALL_OW 275
44617: PUSH
44618: LD_VAR 0 4
44622: PUSH
44623: LD_INT 3
44625: ARRAY
44626: GREATEREQUAL
44627: AND
44628: ST_TO_ADDR
// end ;
44629: LD_VAR 0 3
44633: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44634: LD_INT 0
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
// pom := GetBase ( building ) ;
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 274
44654: ST_TO_ADDR
// if not pom then
44655: LD_VAR 0 3
44659: NOT
44660: IFFALSE 44664
// exit ;
44662: GO 44838
// btype := GetBType ( building ) ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL_OW 266
44678: ST_TO_ADDR
// if btype = b_armoury then
44679: LD_VAR 0 5
44683: PUSH
44684: LD_INT 4
44686: EQUAL
44687: IFFALSE 44697
// btype := b_barracks ;
44689: LD_ADDR_VAR 0 5
44693: PUSH
44694: LD_INT 5
44696: ST_TO_ADDR
// if btype = b_depot then
44697: LD_VAR 0 5
44701: PUSH
44702: LD_INT 0
44704: EQUAL
44705: IFFALSE 44715
// btype := b_warehouse ;
44707: LD_ADDR_VAR 0 5
44711: PUSH
44712: LD_INT 1
44714: ST_TO_ADDR
// if btype = b_workshop then
44715: LD_VAR 0 5
44719: PUSH
44720: LD_INT 2
44722: EQUAL
44723: IFFALSE 44733
// btype := b_factory ;
44725: LD_ADDR_VAR 0 5
44729: PUSH
44730: LD_INT 3
44732: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44733: LD_ADDR_VAR 0 4
44737: PUSH
44738: LD_VAR 0 5
44742: PPUSH
44743: LD_VAR 0 1
44747: PPUSH
44748: CALL_OW 248
44752: PPUSH
44753: CALL_OW 450
44757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44758: LD_ADDR_VAR 0 2
44762: PUSH
44763: LD_VAR 0 3
44767: PPUSH
44768: LD_INT 1
44770: PPUSH
44771: CALL_OW 275
44775: PUSH
44776: LD_VAR 0 4
44780: PUSH
44781: LD_INT 1
44783: ARRAY
44784: GREATEREQUAL
44785: IFFALSE 44811
44787: PUSH
44788: LD_VAR 0 3
44792: PPUSH
44793: LD_INT 2
44795: PPUSH
44796: CALL_OW 275
44800: PUSH
44801: LD_VAR 0 4
44805: PUSH
44806: LD_INT 2
44808: ARRAY
44809: GREATEREQUAL
44810: AND
44811: IFFALSE 44837
44813: PUSH
44814: LD_VAR 0 3
44818: PPUSH
44819: LD_INT 3
44821: PPUSH
44822: CALL_OW 275
44826: PUSH
44827: LD_VAR 0 4
44831: PUSH
44832: LD_INT 3
44834: ARRAY
44835: GREATEREQUAL
44836: AND
44837: ST_TO_ADDR
// end ;
44838: LD_VAR 0 2
44842: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44843: LD_INT 0
44845: PPUSH
44846: PPUSH
44847: PPUSH
// pom := GetBase ( building ) ;
44848: LD_ADDR_VAR 0 4
44852: PUSH
44853: LD_VAR 0 1
44857: PPUSH
44858: CALL_OW 274
44862: ST_TO_ADDR
// if not pom then
44863: LD_VAR 0 4
44867: NOT
44868: IFFALSE 44872
// exit ;
44870: GO 44977
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44872: LD_ADDR_VAR 0 5
44876: PUSH
44877: LD_VAR 0 2
44881: PPUSH
44882: LD_VAR 0 1
44886: PPUSH
44887: CALL_OW 248
44891: PPUSH
44892: CALL_OW 450
44896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44897: LD_ADDR_VAR 0 3
44901: PUSH
44902: LD_VAR 0 4
44906: PPUSH
44907: LD_INT 1
44909: PPUSH
44910: CALL_OW 275
44914: PUSH
44915: LD_VAR 0 5
44919: PUSH
44920: LD_INT 1
44922: ARRAY
44923: GREATEREQUAL
44924: IFFALSE 44950
44926: PUSH
44927: LD_VAR 0 4
44931: PPUSH
44932: LD_INT 2
44934: PPUSH
44935: CALL_OW 275
44939: PUSH
44940: LD_VAR 0 5
44944: PUSH
44945: LD_INT 2
44947: ARRAY
44948: GREATEREQUAL
44949: AND
44950: IFFALSE 44976
44952: PUSH
44953: LD_VAR 0 4
44957: PPUSH
44958: LD_INT 3
44960: PPUSH
44961: CALL_OW 275
44965: PUSH
44966: LD_VAR 0 5
44970: PUSH
44971: LD_INT 3
44973: ARRAY
44974: GREATEREQUAL
44975: AND
44976: ST_TO_ADDR
// end ;
44977: LD_VAR 0 3
44981: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44982: LD_INT 0
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
// result := false ;
44995: LD_ADDR_VAR 0 8
44999: PUSH
45000: LD_INT 0
45002: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45003: LD_VAR 0 5
45007: NOT
45008: IFTRUE 45017
45010: PUSH
45011: LD_VAR 0 1
45015: NOT
45016: OR
45017: IFTRUE 45026
45019: PUSH
45020: LD_VAR 0 2
45024: NOT
45025: OR
45026: IFTRUE 45035
45028: PUSH
45029: LD_VAR 0 3
45033: NOT
45034: OR
45035: IFFALSE 45039
// exit ;
45037: GO 45865
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45039: LD_ADDR_VAR 0 14
45043: PUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_VAR 0 3
45058: PPUSH
45059: LD_VAR 0 4
45063: PPUSH
45064: LD_VAR 0 5
45068: PUSH
45069: LD_INT 1
45071: ARRAY
45072: PPUSH
45073: CALL_OW 248
45077: PPUSH
45078: LD_INT 0
45080: PPUSH
45081: CALL 47146 0 6
45085: ST_TO_ADDR
// if not hexes then
45086: LD_VAR 0 14
45090: NOT
45091: IFFALSE 45095
// exit ;
45093: GO 45865
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45095: LD_ADDR_VAR 0 17
45099: PUSH
45100: LD_VAR 0 5
45104: PPUSH
45105: LD_INT 22
45107: PUSH
45108: LD_VAR 0 13
45112: PPUSH
45113: CALL_OW 255
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 30
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 30
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PPUSH
45154: CALL_OW 72
45158: ST_TO_ADDR
// for i = 1 to hexes do
45159: LD_ADDR_VAR 0 9
45163: PUSH
45164: DOUBLE
45165: LD_INT 1
45167: DEC
45168: ST_TO_ADDR
45169: LD_VAR 0 14
45173: PUSH
45174: FOR_TO
45175: IFFALSE 45863
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45177: LD_ADDR_VAR 0 13
45181: PUSH
45182: LD_VAR 0 14
45186: PUSH
45187: LD_VAR 0 9
45191: ARRAY
45192: PUSH
45193: LD_INT 1
45195: ARRAY
45196: PPUSH
45197: LD_VAR 0 14
45201: PUSH
45202: LD_VAR 0 9
45206: ARRAY
45207: PUSH
45208: LD_INT 2
45210: ARRAY
45211: PPUSH
45212: CALL_OW 428
45216: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45217: LD_VAR 0 14
45221: PUSH
45222: LD_VAR 0 9
45226: ARRAY
45227: PUSH
45228: LD_INT 1
45230: ARRAY
45231: PPUSH
45232: LD_VAR 0 14
45236: PUSH
45237: LD_VAR 0 9
45241: ARRAY
45242: PUSH
45243: LD_INT 2
45245: ARRAY
45246: PPUSH
45247: CALL_OW 351
45251: IFTRUE 45290
45253: PUSH
45254: LD_VAR 0 14
45258: PUSH
45259: LD_VAR 0 9
45263: ARRAY
45264: PUSH
45265: LD_INT 1
45267: ARRAY
45268: PPUSH
45269: LD_VAR 0 14
45273: PUSH
45274: LD_VAR 0 9
45278: ARRAY
45279: PUSH
45280: LD_INT 2
45282: ARRAY
45283: PPUSH
45284: CALL_OW 488
45288: NOT
45289: OR
45290: IFTRUE 45307
45292: PUSH
45293: LD_VAR 0 13
45297: PPUSH
45298: CALL_OW 247
45302: PUSH
45303: LD_INT 3
45305: EQUAL
45306: OR
45307: IFFALSE 45313
// exit ;
45309: POP
45310: POP
45311: GO 45865
// if not tmp then
45313: LD_VAR 0 13
45317: NOT
45318: IFFALSE 45322
// continue ;
45320: GO 45174
// result := true ;
45322: LD_ADDR_VAR 0 8
45326: PUSH
45327: LD_INT 1
45329: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45330: LD_VAR 0 6
45334: IFFALSE 45351
45336: PUSH
45337: LD_VAR 0 13
45341: PPUSH
45342: CALL_OW 247
45346: PUSH
45347: LD_INT 2
45349: EQUAL
45350: AND
45351: IFFALSE 45368
45353: PUSH
45354: LD_VAR 0 13
45358: PPUSH
45359: CALL_OW 263
45363: PUSH
45364: LD_INT 1
45366: EQUAL
45367: AND
45368: IFFALSE 45532
// begin if IsDrivenBy ( tmp ) then
45370: LD_VAR 0 13
45374: PPUSH
45375: CALL_OW 311
45379: IFFALSE 45383
// continue ;
45381: GO 45174
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45383: LD_VAR 0 6
45387: PPUSH
45388: LD_INT 3
45390: PUSH
45391: LD_INT 60
45393: PUSH
45394: EMPTY
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 55
45406: PUSH
45407: EMPTY
45408: LIST
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PPUSH
45418: CALL_OW 72
45422: IFFALSE 45530
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45424: LD_ADDR_VAR 0 18
45428: PUSH
45429: LD_VAR 0 6
45433: PPUSH
45434: LD_INT 3
45436: PUSH
45437: LD_INT 60
45439: PUSH
45440: EMPTY
45441: LIST
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: PUSH
45450: LD_INT 55
45452: PUSH
45453: EMPTY
45454: LIST
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PPUSH
45464: CALL_OW 72
45468: PUSH
45469: LD_INT 1
45471: ARRAY
45472: ST_TO_ADDR
// if IsInUnit ( driver ) then
45473: LD_VAR 0 18
45477: PPUSH
45478: CALL_OW 310
45482: IFFALSE 45493
// ComExit ( driver ) ;
45484: LD_VAR 0 18
45488: PPUSH
45489: CALL 71136 0 1
// AddComEnterUnit ( driver , tmp ) ;
45493: LD_VAR 0 18
45497: PPUSH
45498: LD_VAR 0 13
45502: PPUSH
45503: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45507: LD_VAR 0 18
45511: PPUSH
45512: LD_VAR 0 7
45516: PPUSH
45517: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45521: LD_VAR 0 18
45525: PPUSH
45526: CALL_OW 181
// end ; continue ;
45530: GO 45174
// end ; if not cleaners or not tmp in cleaners then
45532: LD_VAR 0 6
45536: NOT
45537: IFTRUE 45552
45539: PUSH
45540: LD_VAR 0 13
45544: PUSH
45545: LD_VAR 0 6
45549: IN
45550: NOT
45551: OR
45552: IFFALSE 45861
// begin if dep then
45554: LD_VAR 0 17
45558: IFFALSE 45694
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45560: LD_ADDR_VAR 0 16
45564: PUSH
45565: LD_VAR 0 17
45569: PUSH
45570: LD_INT 1
45572: ARRAY
45573: PPUSH
45574: CALL_OW 250
45578: PPUSH
45579: LD_VAR 0 17
45583: PUSH
45584: LD_INT 1
45586: ARRAY
45587: PPUSH
45588: CALL_OW 254
45592: PPUSH
45593: LD_INT 5
45595: PPUSH
45596: CALL_OW 272
45600: PUSH
45601: LD_VAR 0 17
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PPUSH
45610: CALL_OW 251
45614: PPUSH
45615: LD_VAR 0 17
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: PPUSH
45624: CALL_OW 254
45628: PPUSH
45629: LD_INT 5
45631: PPUSH
45632: CALL_OW 273
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45641: LD_VAR 0 16
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: PPUSH
45650: LD_VAR 0 16
45654: PUSH
45655: LD_INT 2
45657: ARRAY
45658: PPUSH
45659: CALL_OW 488
45663: IFFALSE 45694
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45665: LD_VAR 0 13
45669: PPUSH
45670: LD_VAR 0 16
45674: PUSH
45675: LD_INT 1
45677: ARRAY
45678: PPUSH
45679: LD_VAR 0 16
45683: PUSH
45684: LD_INT 2
45686: ARRAY
45687: PPUSH
45688: CALL_OW 111
// continue ;
45692: GO 45174
// end ; end ; r := GetDir ( tmp ) ;
45694: LD_ADDR_VAR 0 15
45698: PUSH
45699: LD_VAR 0 13
45703: PPUSH
45704: CALL_OW 254
45708: ST_TO_ADDR
// if r = 5 then
45709: LD_VAR 0 15
45713: PUSH
45714: LD_INT 5
45716: EQUAL
45717: IFFALSE 45727
// r := 0 ;
45719: LD_ADDR_VAR 0 15
45723: PUSH
45724: LD_INT 0
45726: ST_TO_ADDR
// for j = r to 5 do
45727: LD_ADDR_VAR 0 10
45731: PUSH
45732: DOUBLE
45733: LD_VAR 0 15
45737: DEC
45738: ST_TO_ADDR
45739: LD_INT 5
45741: PUSH
45742: FOR_TO
45743: IFFALSE 45859
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45745: LD_ADDR_VAR 0 11
45749: PUSH
45750: LD_VAR 0 13
45754: PPUSH
45755: CALL_OW 250
45759: PPUSH
45760: LD_VAR 0 10
45764: PPUSH
45765: LD_INT 2
45767: PPUSH
45768: CALL_OW 272
45772: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45773: LD_ADDR_VAR 0 12
45777: PUSH
45778: LD_VAR 0 13
45782: PPUSH
45783: CALL_OW 251
45787: PPUSH
45788: LD_VAR 0 10
45792: PPUSH
45793: LD_INT 2
45795: PPUSH
45796: CALL_OW 273
45800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45801: LD_VAR 0 11
45805: PPUSH
45806: LD_VAR 0 12
45810: PPUSH
45811: CALL_OW 488
45815: IFFALSE 45834
45817: PUSH
45818: LD_VAR 0 11
45822: PPUSH
45823: LD_VAR 0 12
45827: PPUSH
45828: CALL_OW 428
45832: NOT
45833: AND
45834: IFFALSE 45857
// begin ComMoveXY ( tmp , _x , _y ) ;
45836: LD_VAR 0 13
45840: PPUSH
45841: LD_VAR 0 11
45845: PPUSH
45846: LD_VAR 0 12
45850: PPUSH
45851: CALL_OW 111
// break ;
45855: GO 45859
// end ; end ;
45857: GO 45742
45859: POP
45860: POP
// end ; end ;
45861: GO 45174
45863: POP
45864: POP
// end ;
45865: LD_VAR 0 8
45869: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45870: LD_INT 0
45872: PPUSH
// result := true ;
45873: LD_ADDR_VAR 0 3
45877: PUSH
45878: LD_INT 1
45880: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45881: LD_VAR 0 2
45885: PUSH
45886: LD_INT 24
45888: DOUBLE
45889: EQUAL
45890: IFTRUE 45900
45892: LD_INT 33
45894: DOUBLE
45895: EQUAL
45896: IFTRUE 45900
45898: GO 45925
45900: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45901: LD_ADDR_VAR 0 3
45905: PUSH
45906: LD_INT 32
45908: PPUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: CALL_OW 321
45918: PUSH
45919: LD_INT 2
45921: EQUAL
45922: ST_TO_ADDR
45923: GO 46241
45925: LD_INT 20
45927: DOUBLE
45928: EQUAL
45929: IFTRUE 45933
45931: GO 45958
45933: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45934: LD_ADDR_VAR 0 3
45938: PUSH
45939: LD_INT 6
45941: PPUSH
45942: LD_VAR 0 1
45946: PPUSH
45947: CALL_OW 321
45951: PUSH
45952: LD_INT 2
45954: EQUAL
45955: ST_TO_ADDR
45956: GO 46241
45958: LD_INT 22
45960: DOUBLE
45961: EQUAL
45962: IFTRUE 45972
45964: LD_INT 36
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45972
45970: GO 45997
45972: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45973: LD_ADDR_VAR 0 3
45977: PUSH
45978: LD_INT 15
45980: PPUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 321
45990: PUSH
45991: LD_INT 2
45993: EQUAL
45994: ST_TO_ADDR
45995: GO 46241
45997: LD_INT 30
45999: DOUBLE
46000: EQUAL
46001: IFTRUE 46005
46003: GO 46030
46005: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_INT 20
46013: PPUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 321
46023: PUSH
46024: LD_INT 2
46026: EQUAL
46027: ST_TO_ADDR
46028: GO 46241
46030: LD_INT 28
46032: DOUBLE
46033: EQUAL
46034: IFTRUE 46044
46036: LD_INT 21
46038: DOUBLE
46039: EQUAL
46040: IFTRUE 46044
46042: GO 46069
46044: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46045: LD_ADDR_VAR 0 3
46049: PUSH
46050: LD_INT 21
46052: PPUSH
46053: LD_VAR 0 1
46057: PPUSH
46058: CALL_OW 321
46062: PUSH
46063: LD_INT 2
46065: EQUAL
46066: ST_TO_ADDR
46067: GO 46241
46069: LD_INT 16
46071: DOUBLE
46072: EQUAL
46073: IFTRUE 46077
46075: GO 46102
46077: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46078: LD_ADDR_VAR 0 3
46082: PUSH
46083: LD_INT 84
46085: PPUSH
46086: LD_VAR 0 1
46090: PPUSH
46091: CALL_OW 321
46095: PUSH
46096: LD_INT 2
46098: EQUAL
46099: ST_TO_ADDR
46100: GO 46241
46102: LD_INT 19
46104: DOUBLE
46105: EQUAL
46106: IFTRUE 46116
46108: LD_INT 23
46110: DOUBLE
46111: EQUAL
46112: IFTRUE 46116
46114: GO 46141
46116: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46117: LD_ADDR_VAR 0 3
46121: PUSH
46122: LD_INT 83
46124: PPUSH
46125: LD_VAR 0 1
46129: PPUSH
46130: CALL_OW 321
46134: PUSH
46135: LD_INT 2
46137: EQUAL
46138: ST_TO_ADDR
46139: GO 46241
46141: LD_INT 17
46143: DOUBLE
46144: EQUAL
46145: IFTRUE 46149
46147: GO 46174
46149: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46150: LD_ADDR_VAR 0 3
46154: PUSH
46155: LD_INT 39
46157: PPUSH
46158: LD_VAR 0 1
46162: PPUSH
46163: CALL_OW 321
46167: PUSH
46168: LD_INT 2
46170: EQUAL
46171: ST_TO_ADDR
46172: GO 46241
46174: LD_INT 18
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 46207
46182: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46183: LD_ADDR_VAR 0 3
46187: PUSH
46188: LD_INT 40
46190: PPUSH
46191: LD_VAR 0 1
46195: PPUSH
46196: CALL_OW 321
46200: PUSH
46201: LD_INT 2
46203: EQUAL
46204: ST_TO_ADDR
46205: GO 46241
46207: LD_INT 27
46209: DOUBLE
46210: EQUAL
46211: IFTRUE 46215
46213: GO 46240
46215: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46216: LD_ADDR_VAR 0 3
46220: PUSH
46221: LD_INT 35
46223: PPUSH
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 321
46233: PUSH
46234: LD_INT 2
46236: EQUAL
46237: ST_TO_ADDR
46238: GO 46241
46240: POP
// end ;
46241: LD_VAR 0 3
46245: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46246: LD_INT 0
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
// result := false ;
46259: LD_ADDR_VAR 0 6
46263: PUSH
46264: LD_INT 0
46266: ST_TO_ADDR
// if btype = b_depot then
46267: LD_VAR 0 2
46271: PUSH
46272: LD_INT 0
46274: EQUAL
46275: IFFALSE 46287
// begin result := true ;
46277: LD_ADDR_VAR 0 6
46281: PUSH
46282: LD_INT 1
46284: ST_TO_ADDR
// exit ;
46285: GO 47141
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46287: LD_VAR 0 1
46291: NOT
46292: IFTRUE 46317
46294: PUSH
46295: LD_VAR 0 1
46299: PPUSH
46300: CALL_OW 266
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: IN
46315: NOT
46316: OR
46317: IFTRUE 46326
46319: PUSH
46320: LD_VAR 0 2
46324: NOT
46325: OR
46326: IFTRUE 46362
46328: PUSH
46329: LD_VAR 0 5
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: LD_INT 4
46348: PUSH
46349: LD_INT 5
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: IN
46360: NOT
46361: OR
46362: IFTRUE 46381
46364: PUSH
46365: LD_VAR 0 3
46369: PPUSH
46370: LD_VAR 0 4
46374: PPUSH
46375: CALL_OW 488
46379: NOT
46380: OR
46381: IFFALSE 46385
// exit ;
46383: GO 47141
// side := GetSide ( depot ) ;
46385: LD_ADDR_VAR 0 9
46389: PUSH
46390: LD_VAR 0 1
46394: PPUSH
46395: CALL_OW 255
46399: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46400: LD_VAR 0 9
46404: PPUSH
46405: LD_VAR 0 2
46409: PPUSH
46410: CALL 45870 0 2
46414: NOT
46415: IFFALSE 46419
// exit ;
46417: GO 47141
// pom := GetBase ( depot ) ;
46419: LD_ADDR_VAR 0 10
46423: PUSH
46424: LD_VAR 0 1
46428: PPUSH
46429: CALL_OW 274
46433: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46434: LD_ADDR_VAR 0 11
46438: PUSH
46439: LD_VAR 0 2
46443: PPUSH
46444: LD_VAR 0 1
46448: PPUSH
46449: CALL_OW 248
46453: PPUSH
46454: CALL_OW 450
46458: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46459: LD_VAR 0 10
46463: PPUSH
46464: LD_INT 1
46466: PPUSH
46467: CALL_OW 275
46471: PUSH
46472: LD_VAR 0 11
46476: PUSH
46477: LD_INT 1
46479: ARRAY
46480: GREATEREQUAL
46481: IFFALSE 46507
46483: PUSH
46484: LD_VAR 0 10
46488: PPUSH
46489: LD_INT 2
46491: PPUSH
46492: CALL_OW 275
46496: PUSH
46497: LD_VAR 0 11
46501: PUSH
46502: LD_INT 2
46504: ARRAY
46505: GREATEREQUAL
46506: AND
46507: IFFALSE 46533
46509: PUSH
46510: LD_VAR 0 10
46514: PPUSH
46515: LD_INT 3
46517: PPUSH
46518: CALL_OW 275
46522: PUSH
46523: LD_VAR 0 11
46527: PUSH
46528: LD_INT 3
46530: ARRAY
46531: GREATEREQUAL
46532: AND
46533: NOT
46534: IFFALSE 46538
// exit ;
46536: GO 47141
// if GetBType ( depot ) = b_depot then
46538: LD_VAR 0 1
46542: PPUSH
46543: CALL_OW 266
46547: PUSH
46548: LD_INT 0
46550: EQUAL
46551: IFFALSE 46563
// dist := 28 else
46553: LD_ADDR_VAR 0 14
46557: PUSH
46558: LD_INT 28
46560: ST_TO_ADDR
46561: GO 46571
// dist := 36 ;
46563: LD_ADDR_VAR 0 14
46567: PUSH
46568: LD_INT 36
46570: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46571: LD_VAR 0 1
46575: PPUSH
46576: LD_VAR 0 3
46580: PPUSH
46581: LD_VAR 0 4
46585: PPUSH
46586: CALL_OW 297
46590: PUSH
46591: LD_VAR 0 14
46595: GREATER
46596: IFFALSE 46600
// exit ;
46598: GO 47141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46600: LD_ADDR_VAR 0 12
46604: PUSH
46605: LD_VAR 0 2
46609: PPUSH
46610: LD_VAR 0 3
46614: PPUSH
46615: LD_VAR 0 4
46619: PPUSH
46620: LD_VAR 0 5
46624: PPUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 248
46634: PPUSH
46635: LD_INT 0
46637: PPUSH
46638: CALL 47146 0 6
46642: ST_TO_ADDR
// if not hexes then
46643: LD_VAR 0 12
46647: NOT
46648: IFFALSE 46652
// exit ;
46650: GO 47141
// hex := GetHexInfo ( x , y ) ;
46652: LD_ADDR_VAR 0 15
46656: PUSH
46657: LD_VAR 0 3
46661: PPUSH
46662: LD_VAR 0 4
46666: PPUSH
46667: CALL_OW 546
46671: ST_TO_ADDR
// if hex [ 1 ] then
46672: LD_VAR 0 15
46676: PUSH
46677: LD_INT 1
46679: ARRAY
46680: IFFALSE 46684
// exit ;
46682: GO 47141
// height := hex [ 2 ] ;
46684: LD_ADDR_VAR 0 13
46688: PUSH
46689: LD_VAR 0 15
46693: PUSH
46694: LD_INT 2
46696: ARRAY
46697: ST_TO_ADDR
// for i = 1 to hexes do
46698: LD_ADDR_VAR 0 7
46702: PUSH
46703: DOUBLE
46704: LD_INT 1
46706: DEC
46707: ST_TO_ADDR
46708: LD_VAR 0 12
46712: PUSH
46713: FOR_TO
46714: IFFALSE 47058
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46716: LD_VAR 0 12
46720: PUSH
46721: LD_VAR 0 7
46725: ARRAY
46726: PUSH
46727: LD_INT 1
46729: ARRAY
46730: PPUSH
46731: LD_VAR 0 12
46735: PUSH
46736: LD_VAR 0 7
46740: ARRAY
46741: PUSH
46742: LD_INT 2
46744: ARRAY
46745: PPUSH
46746: CALL_OW 488
46750: NOT
46751: IFTRUE 46793
46753: PUSH
46754: LD_VAR 0 12
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: LD_VAR 0 12
46773: PUSH
46774: LD_VAR 0 7
46778: ARRAY
46779: PUSH
46780: LD_INT 2
46782: ARRAY
46783: PPUSH
46784: CALL_OW 428
46788: PUSH
46789: LD_INT 0
46791: GREATER
46792: OR
46793: IFTRUE 46831
46795: PUSH
46796: LD_VAR 0 12
46800: PUSH
46801: LD_VAR 0 7
46805: ARRAY
46806: PUSH
46807: LD_INT 1
46809: ARRAY
46810: PPUSH
46811: LD_VAR 0 12
46815: PUSH
46816: LD_VAR 0 7
46820: ARRAY
46821: PUSH
46822: LD_INT 2
46824: ARRAY
46825: PPUSH
46826: CALL_OW 351
46830: OR
46831: IFFALSE 46837
// exit ;
46833: POP
46834: POP
46835: GO 47141
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46837: LD_ADDR_VAR 0 8
46841: PUSH
46842: LD_VAR 0 12
46846: PUSH
46847: LD_VAR 0 7
46851: ARRAY
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PPUSH
46857: LD_VAR 0 12
46861: PUSH
46862: LD_VAR 0 7
46866: ARRAY
46867: PUSH
46868: LD_INT 2
46870: ARRAY
46871: PPUSH
46872: CALL_OW 546
46876: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46877: LD_VAR 0 8
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: IFTRUE 46907
46887: PUSH
46888: LD_VAR 0 8
46892: PUSH
46893: LD_INT 2
46895: ARRAY
46896: PUSH
46897: LD_VAR 0 13
46901: PUSH
46902: LD_INT 2
46904: PLUS
46905: GREATER
46906: OR
46907: IFTRUE 46929
46909: PUSH
46910: LD_VAR 0 8
46914: PUSH
46915: LD_INT 2
46917: ARRAY
46918: PUSH
46919: LD_VAR 0 13
46923: PUSH
46924: LD_INT 2
46926: MINUS
46927: LESS
46928: OR
46929: IFTRUE 46997
46931: PUSH
46932: LD_VAR 0 8
46936: PUSH
46937: LD_INT 3
46939: ARRAY
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 8
46946: PUSH
46947: LD_INT 9
46949: PUSH
46950: LD_INT 10
46952: PUSH
46953: LD_INT 11
46955: PUSH
46956: LD_INT 12
46958: PUSH
46959: LD_INT 13
46961: PUSH
46962: LD_INT 16
46964: PUSH
46965: LD_INT 17
46967: PUSH
46968: LD_INT 18
46970: PUSH
46971: LD_INT 19
46973: PUSH
46974: LD_INT 20
46976: PUSH
46977: LD_INT 21
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: IN
46995: NOT
46996: OR
46997: IFTRUE 47010
46999: PUSH
47000: LD_VAR 0 8
47004: PUSH
47005: LD_INT 5
47007: ARRAY
47008: NOT
47009: OR
47010: IFTRUE 47050
47012: PUSH
47013: LD_VAR 0 8
47017: PUSH
47018: LD_INT 6
47020: ARRAY
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 7
47030: PUSH
47031: LD_INT 9
47033: PUSH
47034: LD_INT 10
47036: PUSH
47037: LD_INT 11
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: IN
47048: NOT
47049: OR
47050: IFFALSE 47056
// exit ;
47052: POP
47053: POP
47054: GO 47141
// end ;
47056: GO 46713
47058: POP
47059: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47060: LD_VAR 0 9
47064: PPUSH
47065: LD_VAR 0 3
47069: PPUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: LD_INT 20
47077: PPUSH
47078: CALL 38960 0 4
47082: PUSH
47083: LD_INT 4
47085: ARRAY
47086: IFFALSE 47090
// exit ;
47088: GO 47141
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47090: LD_VAR 0 2
47094: PUSH
47095: LD_INT 29
47097: PUSH
47098: LD_INT 30
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: IN
47105: IFFALSE 47129
47107: PUSH
47108: LD_VAR 0 3
47112: PPUSH
47113: LD_VAR 0 4
47117: PPUSH
47118: LD_VAR 0 9
47122: PPUSH
47123: CALL_OW 440
47127: NOT
47128: AND
47129: IFFALSE 47133
// exit ;
47131: GO 47141
// result := true ;
47133: LD_ADDR_VAR 0 6
47137: PUSH
47138: LD_INT 1
47140: ST_TO_ADDR
// end ;
47141: LD_VAR 0 6
47145: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47146: LD_INT 0
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
47156: PPUSH
47157: PPUSH
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
47172: PPUSH
47173: PPUSH
47174: PPUSH
47175: PPUSH
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
47188: PPUSH
47189: PPUSH
47190: PPUSH
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
47199: PPUSH
47200: PPUSH
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
47205: PPUSH
// result = [ ] ;
47206: LD_ADDR_VAR 0 7
47210: PUSH
47211: EMPTY
47212: ST_TO_ADDR
// temp_list = [ ] ;
47213: LD_ADDR_VAR 0 9
47217: PUSH
47218: EMPTY
47219: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47220: LD_VAR 0 4
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 4
47239: PUSH
47240: LD_INT 5
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: IN
47251: NOT
47252: IFTRUE 47295
47254: PUSH
47255: LD_VAR 0 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: IN
47270: IFFALSE 47294
47272: PUSH
47273: LD_VAR 0 5
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: IN
47292: NOT
47293: AND
47294: OR
47295: IFFALSE 47299
// exit ;
47297: GO 65698
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47299: LD_VAR 0 1
47303: PUSH
47304: LD_INT 6
47306: PUSH
47307: LD_INT 7
47309: PUSH
47310: LD_INT 8
47312: PUSH
47313: LD_INT 13
47315: PUSH
47316: LD_INT 12
47318: PUSH
47319: LD_INT 15
47321: PUSH
47322: LD_INT 11
47324: PUSH
47325: LD_INT 14
47327: PUSH
47328: LD_INT 10
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: IN
47342: IFFALSE 47352
// btype = b_lab ;
47344: LD_ADDR_VAR 0 1
47348: PUSH
47349: LD_INT 6
47351: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47352: LD_VAR 0 6
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: IN
47371: NOT
47372: IFTRUE 47440
47374: PUSH
47375: LD_VAR 0 1
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 6
47394: PUSH
47395: LD_INT 36
47397: PUSH
47398: LD_INT 4
47400: PUSH
47401: LD_INT 5
47403: PUSH
47404: LD_INT 31
47406: PUSH
47407: LD_INT 32
47409: PUSH
47410: LD_INT 33
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: IN
47426: NOT
47427: IFFALSE 47439
47429: PUSH
47430: LD_VAR 0 6
47434: PUSH
47435: LD_INT 1
47437: EQUAL
47438: AND
47439: OR
47440: IFTRUE 47472
47442: PUSH
47443: LD_VAR 0 1
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: IN
47458: NOT
47459: IFFALSE 47471
47461: PUSH
47462: LD_VAR 0 6
47466: PUSH
47467: LD_INT 2
47469: EQUAL
47470: AND
47471: OR
47472: IFFALSE 47482
// mode = 0 ;
47474: LD_ADDR_VAR 0 6
47478: PUSH
47479: LD_INT 0
47481: ST_TO_ADDR
// case mode of 0 :
47482: LD_VAR 0 6
47486: PUSH
47487: LD_INT 0
47489: DOUBLE
47490: EQUAL
47491: IFTRUE 47495
47493: GO 58948
47495: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47496: LD_ADDR_VAR 0 11
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47689: LD_ADDR_VAR 0 12
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47885: LD_ADDR_VAR 0 13
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48084: LD_ADDR_VAR 0 14
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48280: LD_ADDR_VAR 0 15
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48473: LD_ADDR_VAR 0 16
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48666: LD_ADDR_VAR 0 17
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48896: LD_ADDR_VAR 0 18
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49126: LD_ADDR_VAR 0 19
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49356: LD_ADDR_VAR 0 20
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49586: LD_ADDR_VAR 0 21
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49816: LD_ADDR_VAR 0 22
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50046: LD_ADDR_VAR 0 23
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50326: LD_ADDR_VAR 0 24
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50602: LD_ADDR_VAR 0 25
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50876: LD_ADDR_VAR 0 26
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51152: LD_ADDR_VAR 0 27
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51432: LD_ADDR_VAR 0 28
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51714: LD_ADDR_VAR 0 29
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 3
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51993: LD_ADDR_VAR 0 30
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52271: LD_ADDR_VAR 0 31
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52549: LD_ADDR_VAR 0 32
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52827: LD_ADDR_VAR 0 33
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 3
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: NEG
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53106: LD_ADDR_VAR 0 34
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53386: LD_ADDR_VAR 0 35
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53498: LD_ADDR_VAR 0 36
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53610: LD_ADDR_VAR 0 37
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53722: LD_ADDR_VAR 0 38
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53834: LD_ADDR_VAR 0 39
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53946: LD_ADDR_VAR 0 40
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54058: LD_ADDR_VAR 0 41
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54408: LD_ADDR_VAR 0 42
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54758: LD_ADDR_VAR 0 43
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55106: LD_ADDR_VAR 0 44
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55456: LD_ADDR_VAR 0 45
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55806: LD_ADDR_VAR 0 46
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56154: LD_ADDR_VAR 0 47
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56305: LD_ADDR_VAR 0 48
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56452: LD_ADDR_VAR 0 49
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56596: LD_ADDR_VAR 0 50
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56740: LD_ADDR_VAR 0 51
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56887: LD_ADDR_VAR 0 52
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57038: LD_ADDR_VAR 0 53
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57268: LD_ADDR_VAR 0 54
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57498: LD_ADDR_VAR 0 55
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57728: LD_ADDR_VAR 0 56
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57958: LD_ADDR_VAR 0 57
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58188: LD_ADDR_VAR 0 58
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58418: LD_ADDR_VAR 0 59
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58506: LD_ADDR_VAR 0 60
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58594: LD_ADDR_VAR 0 61
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58682: LD_ADDR_VAR 0 62
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58770: LD_ADDR_VAR 0 63
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58858: LD_ADDR_VAR 0 64
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// end ; 1 :
58946: GO 64843
58948: LD_INT 1
58950: DOUBLE
58951: EQUAL
58952: IFTRUE 58956
58954: GO 61579
58956: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58957: LD_ADDR_VAR 0 11
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59001: LD_ADDR_VAR 0 12
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59042: LD_ADDR_VAR 0 13
59046: PUSH
59047: LD_INT 3
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59082: LD_ADDR_VAR 0 14
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59123: LD_ADDR_VAR 0 15
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59167: LD_ADDR_VAR 0 16
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: LD_INT 3
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59213: LD_ADDR_VAR 0 17
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59257: LD_ADDR_VAR 0 18
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59298: LD_ADDR_VAR 0 19
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59338: LD_ADDR_VAR 0 20
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59379: LD_ADDR_VAR 0 21
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 3
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59423: LD_ADDR_VAR 0 22
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59469: LD_ADDR_VAR 0 23
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 4
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59513: LD_ADDR_VAR 0 24
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 4
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59554: LD_ADDR_VAR 0 25
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: LD_INT 4
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59594: LD_ADDR_VAR 0 26
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59635: LD_ADDR_VAR 0 27
59639: PUSH
59640: LD_INT 3
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 4
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59679: LD_ADDR_VAR 0 28
59683: PUSH
59684: LD_INT 3
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: LD_INT 4
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 4
59710: NEG
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59725: LD_ADDR_VAR 0 29
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 4
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 4
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 5
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 4
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 6
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 6
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59880: LD_ADDR_VAR 0 30
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 4
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 5
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 5
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 5
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 6
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 6
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60023: LD_ADDR_VAR 0 31
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 5
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 5
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 6
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 6
60130: PUSH
60131: LD_INT 6
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 5
60140: PUSH
60141: LD_INT 6
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60162: LD_ADDR_VAR 0 32
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 3
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 5
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 5
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 6
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 6
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60305: LD_ADDR_VAR 0 33
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 4
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 5
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 6
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 6
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60460: LD_ADDR_VAR 0 34
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 4
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: LD_INT 4
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 5
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 5
60551: NEG
60552: PUSH
60553: LD_INT 4
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 5
60563: NEG
60564: PUSH
60565: LD_INT 5
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 5
60575: NEG
60576: PUSH
60577: LD_INT 6
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 6
60587: NEG
60588: PUSH
60589: LD_INT 5
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 6
60599: NEG
60600: PUSH
60601: LD_INT 6
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60623: LD_ADDR_VAR 0 41
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60667: LD_ADDR_VAR 0 42
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60708: LD_ADDR_VAR 0 43
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60748: LD_ADDR_VAR 0 44
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: LIST
60788: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60789: LD_ADDR_VAR 0 45
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60833: LD_ADDR_VAR 0 46
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60879: LD_ADDR_VAR 0 47
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60912: LD_ADDR_VAR 0 48
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60943: LD_ADDR_VAR 0 49
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60972: LD_ADDR_VAR 0 50
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61001: LD_ADDR_VAR 0 51
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61032: LD_ADDR_VAR 0 52
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61065: LD_ADDR_VAR 0 53
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61109: LD_ADDR_VAR 0 54
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61150: LD_ADDR_VAR 0 55
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61190: LD_ADDR_VAR 0 56
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 3
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: LIST
61230: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61231: LD_ADDR_VAR 0 57
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61275: LD_ADDR_VAR 0 58
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: LD_INT 3
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: LD_INT 2
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61321: LD_ADDR_VAR 0 59
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61365: LD_ADDR_VAR 0 60
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61406: LD_ADDR_VAR 0 61
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61446: LD_ADDR_VAR 0 62
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: LIST
61486: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61487: LD_ADDR_VAR 0 63
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61531: LD_ADDR_VAR 0 64
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: ST_TO_ADDR
// end ; 2 :
61577: GO 64843
61579: LD_INT 2
61581: DOUBLE
61582: EQUAL
61583: IFTRUE 61587
61585: GO 64842
61587: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61588: LD_ADDR_VAR 0 29
61592: PUSH
61593: LD_INT 4
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 5
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 5
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 5
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 4
61718: PUSH
61719: LD_INT 4
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: LD_INT 4
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 4
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 4
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: LD_INT 5
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 5
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 4
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: LD_INT 5
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 3
61871: NEG
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 4
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 4
61950: NEG
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: NEG
61974: PUSH
61975: LD_INT 4
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 4
61985: NEG
61986: PUSH
61987: LD_INT 5
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 3
61997: NEG
61998: PUSH
61999: LD_INT 4
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: NEG
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 5
62033: NEG
62034: PUSH
62035: LD_INT 4
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 5
62045: NEG
62046: PUSH
62047: LD_INT 5
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 5
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 5
62069: NEG
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62126: LD_ADDR_VAR 0 30
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: LD_INT 4
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 4
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 5
62153: PUSH
62154: LD_INT 4
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 5
62163: PUSH
62164: LD_INT 5
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 5
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 3
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 5
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 4
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 4
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 4
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: NEG
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 4
62327: NEG
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 3
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 4
62361: NEG
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 5
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 5
62395: NEG
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 3
62407: NEG
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 4
62490: NEG
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 4
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: NEG
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 4
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 4
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 4
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 5
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 5
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62673: LD_ADDR_VAR 0 31
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 5
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 4
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 4
62829: NEG
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 4
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 4
62852: NEG
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 4
62875: NEG
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 4
62887: NEG
62888: PUSH
62889: LD_INT 5
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: LD_INT 4
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: NEG
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 5
62935: NEG
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 5
62947: NEG
62948: PUSH
62949: LD_INT 5
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: LD_INT 5
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 5
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 4
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: LD_INT 3
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 3
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 4
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 4
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 4
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 5
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 5
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63223: LD_ADDR_VAR 0 32
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 5
63286: NEG
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 5
63297: NEG
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 5
63309: NEG
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 3
63321: NEG
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: LD_INT 3
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: NEG
63345: PUSH
63346: LD_INT 4
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 4
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: LD_INT 4
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 4
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 4
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 5
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 4
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 3
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 4
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 5
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 3
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 5
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 4
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 4
63635: PUSH
63636: LD_INT 4
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 4
63645: PUSH
63646: LD_INT 3
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 5
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 5
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: LD_INT 5
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 4
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 5
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: LD_INT 5
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63770: LD_ADDR_VAR 0 33
63774: PUSH
63775: LD_INT 4
63777: NEG
63778: PUSH
63779: LD_INT 4
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 4
63789: NEG
63790: PUSH
63791: LD_INT 5
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 3
63801: NEG
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 5
63837: NEG
63838: PUSH
63839: LD_INT 4
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 5
63849: NEG
63850: PUSH
63851: LD_INT 5
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 5
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 5
63873: NEG
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 4
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 4
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 4
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 5
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 4
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 5
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 3
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 4
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: LD_INT 4
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: PUSH
64121: LD_INT 4
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 4
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: LD_INT 4
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 4
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 4
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 5
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 5
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: LD_INT 5
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64308: LD_ADDR_VAR 0 34
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 4
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 5
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 4
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 3
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 3
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: LD_INT 4
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 5
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 3
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 5
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 4
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 4
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 3
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 4
64510: PUSH
64511: LD_INT 4
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 3
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 5
64530: PUSH
64531: LD_INT 4
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 5
64540: PUSH
64541: LD_INT 5
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 4
64550: PUSH
64551: LD_INT 5
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 5
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 3
64590: PUSH
64591: LD_INT 5
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 4
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 4
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 4
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 4
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: NEG
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 4
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 5
64749: NEG
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 5
64760: NEG
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 5
64772: NEG
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: ST_TO_ADDR
// end ; end ;
64840: GO 64843
64842: POP
// case btype of b_depot , b_warehouse :
64843: LD_VAR 0 1
64847: PUSH
64848: LD_INT 0
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64862
64854: LD_INT 1
64856: DOUBLE
64857: EQUAL
64858: IFTRUE 64862
64860: GO 65063
64862: POP
// case nation of nation_american :
64863: LD_VAR 0 5
64867: PUSH
64868: LD_INT 1
64870: DOUBLE
64871: EQUAL
64872: IFTRUE 64876
64874: GO 64932
64876: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64877: LD_ADDR_VAR 0 9
64881: PUSH
64882: LD_VAR 0 11
64886: PUSH
64887: LD_VAR 0 12
64891: PUSH
64892: LD_VAR 0 13
64896: PUSH
64897: LD_VAR 0 14
64901: PUSH
64902: LD_VAR 0 15
64906: PUSH
64907: LD_VAR 0 16
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 4
64924: PUSH
64925: LD_INT 1
64927: PLUS
64928: ARRAY
64929: ST_TO_ADDR
64930: GO 65061
64932: LD_INT 2
64934: DOUBLE
64935: EQUAL
64936: IFTRUE 64940
64938: GO 64996
64940: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64941: LD_ADDR_VAR 0 9
64945: PUSH
64946: LD_VAR 0 17
64950: PUSH
64951: LD_VAR 0 18
64955: PUSH
64956: LD_VAR 0 19
64960: PUSH
64961: LD_VAR 0 20
64965: PUSH
64966: LD_VAR 0 21
64970: PUSH
64971: LD_VAR 0 22
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: PUSH
64984: LD_VAR 0 4
64988: PUSH
64989: LD_INT 1
64991: PLUS
64992: ARRAY
64993: ST_TO_ADDR
64994: GO 65061
64996: LD_INT 3
64998: DOUBLE
64999: EQUAL
65000: IFTRUE 65004
65002: GO 65060
65004: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65005: LD_ADDR_VAR 0 9
65009: PUSH
65010: LD_VAR 0 23
65014: PUSH
65015: LD_VAR 0 24
65019: PUSH
65020: LD_VAR 0 25
65024: PUSH
65025: LD_VAR 0 26
65029: PUSH
65030: LD_VAR 0 27
65034: PUSH
65035: LD_VAR 0 28
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: PUSH
65048: LD_VAR 0 4
65052: PUSH
65053: LD_INT 1
65055: PLUS
65056: ARRAY
65057: ST_TO_ADDR
65058: GO 65061
65060: POP
65061: GO 65616
65063: LD_INT 2
65065: DOUBLE
65066: EQUAL
65067: IFTRUE 65077
65069: LD_INT 3
65071: DOUBLE
65072: EQUAL
65073: IFTRUE 65077
65075: GO 65133
65077: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65078: LD_ADDR_VAR 0 9
65082: PUSH
65083: LD_VAR 0 29
65087: PUSH
65088: LD_VAR 0 30
65092: PUSH
65093: LD_VAR 0 31
65097: PUSH
65098: LD_VAR 0 32
65102: PUSH
65103: LD_VAR 0 33
65107: PUSH
65108: LD_VAR 0 34
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: PUSH
65121: LD_VAR 0 4
65125: PUSH
65126: LD_INT 1
65128: PLUS
65129: ARRAY
65130: ST_TO_ADDR
65131: GO 65616
65133: LD_INT 16
65135: DOUBLE
65136: EQUAL
65137: IFTRUE 65195
65139: LD_INT 17
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65195
65145: LD_INT 18
65147: DOUBLE
65148: EQUAL
65149: IFTRUE 65195
65151: LD_INT 19
65153: DOUBLE
65154: EQUAL
65155: IFTRUE 65195
65157: LD_INT 22
65159: DOUBLE
65160: EQUAL
65161: IFTRUE 65195
65163: LD_INT 20
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65195
65169: LD_INT 21
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65195
65175: LD_INT 23
65177: DOUBLE
65178: EQUAL
65179: IFTRUE 65195
65181: LD_INT 24
65183: DOUBLE
65184: EQUAL
65185: IFTRUE 65195
65187: LD_INT 25
65189: DOUBLE
65190: EQUAL
65191: IFTRUE 65195
65193: GO 65251
65195: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65196: LD_ADDR_VAR 0 9
65200: PUSH
65201: LD_VAR 0 35
65205: PUSH
65206: LD_VAR 0 36
65210: PUSH
65211: LD_VAR 0 37
65215: PUSH
65216: LD_VAR 0 38
65220: PUSH
65221: LD_VAR 0 39
65225: PUSH
65226: LD_VAR 0 40
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: PUSH
65239: LD_VAR 0 4
65243: PUSH
65244: LD_INT 1
65246: PLUS
65247: ARRAY
65248: ST_TO_ADDR
65249: GO 65616
65251: LD_INT 6
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65307
65257: LD_INT 7
65259: DOUBLE
65260: EQUAL
65261: IFTRUE 65307
65263: LD_INT 8
65265: DOUBLE
65266: EQUAL
65267: IFTRUE 65307
65269: LD_INT 13
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65307
65275: LD_INT 12
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65307
65281: LD_INT 15
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65307
65287: LD_INT 11
65289: DOUBLE
65290: EQUAL
65291: IFTRUE 65307
65293: LD_INT 14
65295: DOUBLE
65296: EQUAL
65297: IFTRUE 65307
65299: LD_INT 10
65301: DOUBLE
65302: EQUAL
65303: IFTRUE 65307
65305: GO 65363
65307: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65308: LD_ADDR_VAR 0 9
65312: PUSH
65313: LD_VAR 0 41
65317: PUSH
65318: LD_VAR 0 42
65322: PUSH
65323: LD_VAR 0 43
65327: PUSH
65328: LD_VAR 0 44
65332: PUSH
65333: LD_VAR 0 45
65337: PUSH
65338: LD_VAR 0 46
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: PUSH
65351: LD_VAR 0 4
65355: PUSH
65356: LD_INT 1
65358: PLUS
65359: ARRAY
65360: ST_TO_ADDR
65361: GO 65616
65363: LD_INT 36
65365: DOUBLE
65366: EQUAL
65367: IFTRUE 65371
65369: GO 65427
65371: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65372: LD_ADDR_VAR 0 9
65376: PUSH
65377: LD_VAR 0 47
65381: PUSH
65382: LD_VAR 0 48
65386: PUSH
65387: LD_VAR 0 49
65391: PUSH
65392: LD_VAR 0 50
65396: PUSH
65397: LD_VAR 0 51
65401: PUSH
65402: LD_VAR 0 52
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: PUSH
65415: LD_VAR 0 4
65419: PUSH
65420: LD_INT 1
65422: PLUS
65423: ARRAY
65424: ST_TO_ADDR
65425: GO 65616
65427: LD_INT 4
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65453
65433: LD_INT 5
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65453
65439: LD_INT 34
65441: DOUBLE
65442: EQUAL
65443: IFTRUE 65453
65445: LD_INT 37
65447: DOUBLE
65448: EQUAL
65449: IFTRUE 65453
65451: GO 65509
65453: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65454: LD_ADDR_VAR 0 9
65458: PUSH
65459: LD_VAR 0 53
65463: PUSH
65464: LD_VAR 0 54
65468: PUSH
65469: LD_VAR 0 55
65473: PUSH
65474: LD_VAR 0 56
65478: PUSH
65479: LD_VAR 0 57
65483: PUSH
65484: LD_VAR 0 58
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: LD_VAR 0 4
65501: PUSH
65502: LD_INT 1
65504: PLUS
65505: ARRAY
65506: ST_TO_ADDR
65507: GO 65616
65509: LD_INT 31
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65559
65515: LD_INT 32
65517: DOUBLE
65518: EQUAL
65519: IFTRUE 65559
65521: LD_INT 33
65523: DOUBLE
65524: EQUAL
65525: IFTRUE 65559
65527: LD_INT 27
65529: DOUBLE
65530: EQUAL
65531: IFTRUE 65559
65533: LD_INT 26
65535: DOUBLE
65536: EQUAL
65537: IFTRUE 65559
65539: LD_INT 28
65541: DOUBLE
65542: EQUAL
65543: IFTRUE 65559
65545: LD_INT 29
65547: DOUBLE
65548: EQUAL
65549: IFTRUE 65559
65551: LD_INT 30
65553: DOUBLE
65554: EQUAL
65555: IFTRUE 65559
65557: GO 65615
65559: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65560: LD_ADDR_VAR 0 9
65564: PUSH
65565: LD_VAR 0 59
65569: PUSH
65570: LD_VAR 0 60
65574: PUSH
65575: LD_VAR 0 61
65579: PUSH
65580: LD_VAR 0 62
65584: PUSH
65585: LD_VAR 0 63
65589: PUSH
65590: LD_VAR 0 64
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: PUSH
65603: LD_VAR 0 4
65607: PUSH
65608: LD_INT 1
65610: PLUS
65611: ARRAY
65612: ST_TO_ADDR
65613: GO 65616
65615: POP
// temp_list2 = [ ] ;
65616: LD_ADDR_VAR 0 10
65620: PUSH
65621: EMPTY
65622: ST_TO_ADDR
// for i in temp_list do
65623: LD_ADDR_VAR 0 8
65627: PUSH
65628: LD_VAR 0 9
65632: PUSH
65633: FOR_IN
65634: IFFALSE 65686
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65636: LD_ADDR_VAR 0 10
65640: PUSH
65641: LD_VAR 0 10
65645: PUSH
65646: LD_VAR 0 8
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: PUSH
65655: LD_VAR 0 2
65659: PLUS
65660: PUSH
65661: LD_VAR 0 8
65665: PUSH
65666: LD_INT 2
65668: ARRAY
65669: PUSH
65670: LD_VAR 0 3
65674: PLUS
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: ADD
65683: ST_TO_ADDR
65684: GO 65633
65686: POP
65687: POP
// result = temp_list2 ;
65688: LD_ADDR_VAR 0 7
65692: PUSH
65693: LD_VAR 0 10
65697: ST_TO_ADDR
// end ;
65698: LD_VAR 0 7
65702: RET
// export function EnemyInRange ( unit , dist ) ; begin
65703: LD_INT 0
65705: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65706: LD_ADDR_VAR 0 3
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 255
65720: PPUSH
65721: LD_VAR 0 1
65725: PPUSH
65726: CALL_OW 250
65730: PPUSH
65731: LD_VAR 0 1
65735: PPUSH
65736: CALL_OW 251
65740: PPUSH
65741: LD_VAR 0 2
65745: PPUSH
65746: CALL 38960 0 4
65750: PUSH
65751: LD_INT 4
65753: ARRAY
65754: ST_TO_ADDR
// end ;
65755: LD_VAR 0 3
65759: RET
// export function PlayerSeeMe ( unit ) ; begin
65760: LD_INT 0
65762: PPUSH
// result := See ( your_side , unit ) ;
65763: LD_ADDR_VAR 0 2
65767: PUSH
65768: LD_OWVAR 2
65772: PPUSH
65773: LD_VAR 0 1
65777: PPUSH
65778: CALL_OW 292
65782: ST_TO_ADDR
// end ;
65783: LD_VAR 0 2
65787: RET
// export function ReverseDir ( unit ) ; begin
65788: LD_INT 0
65790: PPUSH
// if not unit then
65791: LD_VAR 0 1
65795: NOT
65796: IFFALSE 65800
// exit ;
65798: GO 65823
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65800: LD_ADDR_VAR 0 2
65804: PUSH
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 254
65814: PUSH
65815: LD_INT 3
65817: PLUS
65818: PUSH
65819: LD_INT 6
65821: MOD
65822: ST_TO_ADDR
// end ;
65823: LD_VAR 0 2
65827: RET
// export function ReverseArray ( array ) ; var i ; begin
65828: LD_INT 0
65830: PPUSH
65831: PPUSH
// if not array then
65832: LD_VAR 0 1
65836: NOT
65837: IFFALSE 65841
// exit ;
65839: GO 65896
// result := [ ] ;
65841: LD_ADDR_VAR 0 2
65845: PUSH
65846: EMPTY
65847: ST_TO_ADDR
// for i := array downto 1 do
65848: LD_ADDR_VAR 0 3
65852: PUSH
65853: DOUBLE
65854: LD_VAR 0 1
65858: INC
65859: ST_TO_ADDR
65860: LD_INT 1
65862: PUSH
65863: FOR_DOWNTO
65864: IFFALSE 65894
// result := Join ( result , array [ i ] ) ;
65866: LD_ADDR_VAR 0 2
65870: PUSH
65871: LD_VAR 0 2
65875: PPUSH
65876: LD_VAR 0 1
65880: PUSH
65881: LD_VAR 0 3
65885: ARRAY
65886: PPUSH
65887: CALL 70738 0 2
65891: ST_TO_ADDR
65892: GO 65863
65894: POP
65895: POP
// end ;
65896: LD_VAR 0 2
65900: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65901: LD_INT 0
65903: PPUSH
65904: PPUSH
65905: PPUSH
65906: PPUSH
65907: PPUSH
65908: PPUSH
// if not unit or not hexes then
65909: LD_VAR 0 1
65913: NOT
65914: IFTRUE 65923
65916: PUSH
65917: LD_VAR 0 2
65921: NOT
65922: OR
65923: IFFALSE 65927
// exit ;
65925: GO 66050
// dist := 9999 ;
65927: LD_ADDR_VAR 0 5
65931: PUSH
65932: LD_INT 9999
65934: ST_TO_ADDR
// for i = 1 to hexes do
65935: LD_ADDR_VAR 0 4
65939: PUSH
65940: DOUBLE
65941: LD_INT 1
65943: DEC
65944: ST_TO_ADDR
65945: LD_VAR 0 2
65949: PUSH
65950: FOR_TO
65951: IFFALSE 66038
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65953: LD_ADDR_VAR 0 6
65957: PUSH
65958: LD_VAR 0 1
65962: PPUSH
65963: LD_VAR 0 2
65967: PUSH
65968: LD_VAR 0 4
65972: ARRAY
65973: PUSH
65974: LD_INT 1
65976: ARRAY
65977: PPUSH
65978: LD_VAR 0 2
65982: PUSH
65983: LD_VAR 0 4
65987: ARRAY
65988: PUSH
65989: LD_INT 2
65991: ARRAY
65992: PPUSH
65993: CALL_OW 297
65997: ST_TO_ADDR
// if tdist < dist then
65998: LD_VAR 0 6
66002: PUSH
66003: LD_VAR 0 5
66007: LESS
66008: IFFALSE 66036
// begin hex := hexes [ i ] ;
66010: LD_ADDR_VAR 0 8
66014: PUSH
66015: LD_VAR 0 2
66019: PUSH
66020: LD_VAR 0 4
66024: ARRAY
66025: ST_TO_ADDR
// dist := tdist ;
66026: LD_ADDR_VAR 0 5
66030: PUSH
66031: LD_VAR 0 6
66035: ST_TO_ADDR
// end ; end ;
66036: GO 65950
66038: POP
66039: POP
// result := hex ;
66040: LD_ADDR_VAR 0 3
66044: PUSH
66045: LD_VAR 0 8
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 3
66054: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66059: LD_VAR 0 1
66063: NOT
66064: IFTRUE 66103
66066: PUSH
66067: LD_VAR 0 1
66071: PUSH
66072: LD_INT 21
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 23
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PPUSH
66096: CALL_OW 69
66100: IN
66101: NOT
66102: OR
66103: IFFALSE 66107
// exit ;
66105: GO 66154
// for i = 1 to 3 do
66107: LD_ADDR_VAR 0 3
66111: PUSH
66112: DOUBLE
66113: LD_INT 1
66115: DEC
66116: ST_TO_ADDR
66117: LD_INT 3
66119: PUSH
66120: FOR_TO
66121: IFFALSE 66152
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 250
66132: PPUSH
66133: LD_VAR 0 1
66137: PPUSH
66138: CALL_OW 251
66142: PPUSH
66143: LD_INT 1
66145: PPUSH
66146: CALL_OW 453
66150: GO 66120
66152: POP
66153: POP
// end ;
66154: LD_VAR 0 2
66158: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66159: LD_INT 0
66161: PPUSH
66162: PPUSH
66163: PPUSH
66164: PPUSH
66165: PPUSH
66166: PPUSH
// if not unit or not enemy_unit then
66167: LD_VAR 0 1
66171: NOT
66172: IFTRUE 66181
66174: PUSH
66175: LD_VAR 0 2
66179: NOT
66180: OR
66181: IFFALSE 66185
// exit ;
66183: GO 66656
// if GetLives ( i ) < 250 then
66185: LD_VAR 0 4
66189: PPUSH
66190: CALL_OW 256
66194: PUSH
66195: LD_INT 250
66197: LESS
66198: IFFALSE 66211
// begin ComAutodestruct ( i ) ;
66200: LD_VAR 0 4
66204: PPUSH
66205: CALL 66055 0 1
// exit ;
66209: GO 66656
// end ; x := GetX ( enemy_unit ) ;
66211: LD_ADDR_VAR 0 7
66215: PUSH
66216: LD_VAR 0 2
66220: PPUSH
66221: CALL_OW 250
66225: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66226: LD_ADDR_VAR 0 8
66230: PUSH
66231: LD_VAR 0 2
66235: PPUSH
66236: CALL_OW 251
66240: ST_TO_ADDR
// if not x or not y then
66241: LD_VAR 0 7
66245: NOT
66246: IFTRUE 66255
66248: PUSH
66249: LD_VAR 0 8
66253: NOT
66254: OR
66255: IFFALSE 66259
// exit ;
66257: GO 66656
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66259: LD_ADDR_VAR 0 6
66263: PUSH
66264: LD_VAR 0 7
66268: PPUSH
66269: LD_INT 0
66271: PPUSH
66272: LD_INT 4
66274: PPUSH
66275: CALL_OW 272
66279: PUSH
66280: LD_VAR 0 8
66284: PPUSH
66285: LD_INT 0
66287: PPUSH
66288: LD_INT 4
66290: PPUSH
66291: CALL_OW 273
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_VAR 0 7
66304: PPUSH
66305: LD_INT 1
66307: PPUSH
66308: LD_INT 4
66310: PPUSH
66311: CALL_OW 272
66315: PUSH
66316: LD_VAR 0 8
66320: PPUSH
66321: LD_INT 1
66323: PPUSH
66324: LD_INT 4
66326: PPUSH
66327: CALL_OW 273
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_VAR 0 7
66340: PPUSH
66341: LD_INT 2
66343: PPUSH
66344: LD_INT 4
66346: PPUSH
66347: CALL_OW 272
66351: PUSH
66352: LD_VAR 0 8
66356: PPUSH
66357: LD_INT 2
66359: PPUSH
66360: LD_INT 4
66362: PPUSH
66363: CALL_OW 273
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_VAR 0 7
66376: PPUSH
66377: LD_INT 3
66379: PPUSH
66380: LD_INT 4
66382: PPUSH
66383: CALL_OW 272
66387: PUSH
66388: LD_VAR 0 8
66392: PPUSH
66393: LD_INT 3
66395: PPUSH
66396: LD_INT 4
66398: PPUSH
66399: CALL_OW 273
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_VAR 0 7
66412: PPUSH
66413: LD_INT 4
66415: PPUSH
66416: LD_INT 4
66418: PPUSH
66419: CALL_OW 272
66423: PUSH
66424: LD_VAR 0 8
66428: PPUSH
66429: LD_INT 4
66431: PPUSH
66432: LD_INT 4
66434: PPUSH
66435: CALL_OW 273
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_VAR 0 7
66448: PPUSH
66449: LD_INT 5
66451: PPUSH
66452: LD_INT 4
66454: PPUSH
66455: CALL_OW 272
66459: PUSH
66460: LD_VAR 0 8
66464: PPUSH
66465: LD_INT 5
66467: PPUSH
66468: LD_INT 4
66470: PPUSH
66471: CALL_OW 273
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// for i = tmp downto 1 do
66488: LD_ADDR_VAR 0 4
66492: PUSH
66493: DOUBLE
66494: LD_VAR 0 6
66498: INC
66499: ST_TO_ADDR
66500: LD_INT 1
66502: PUSH
66503: FOR_DOWNTO
66504: IFFALSE 66607
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66506: LD_VAR 0 6
66510: PUSH
66511: LD_VAR 0 4
66515: ARRAY
66516: PUSH
66517: LD_INT 1
66519: ARRAY
66520: PPUSH
66521: LD_VAR 0 6
66525: PUSH
66526: LD_VAR 0 4
66530: ARRAY
66531: PUSH
66532: LD_INT 2
66534: ARRAY
66535: PPUSH
66536: CALL_OW 488
66540: NOT
66541: IFTRUE 66583
66543: PUSH
66544: LD_VAR 0 6
66548: PUSH
66549: LD_VAR 0 4
66553: ARRAY
66554: PUSH
66555: LD_INT 1
66557: ARRAY
66558: PPUSH
66559: LD_VAR 0 6
66563: PUSH
66564: LD_VAR 0 4
66568: ARRAY
66569: PUSH
66570: LD_INT 2
66572: ARRAY
66573: PPUSH
66574: CALL_OW 428
66578: PUSH
66579: LD_INT 0
66581: NONEQUAL
66582: OR
66583: IFFALSE 66605
// tmp := Delete ( tmp , i ) ;
66585: LD_ADDR_VAR 0 6
66589: PUSH
66590: LD_VAR 0 6
66594: PPUSH
66595: LD_VAR 0 4
66599: PPUSH
66600: CALL_OW 3
66604: ST_TO_ADDR
66605: GO 66503
66607: POP
66608: POP
// j := GetClosestHex ( unit , tmp ) ;
66609: LD_ADDR_VAR 0 5
66613: PUSH
66614: LD_VAR 0 1
66618: PPUSH
66619: LD_VAR 0 6
66623: PPUSH
66624: CALL 65901 0 2
66628: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66629: LD_VAR 0 1
66633: PPUSH
66634: LD_VAR 0 5
66638: PUSH
66639: LD_INT 1
66641: ARRAY
66642: PPUSH
66643: LD_VAR 0 5
66647: PUSH
66648: LD_INT 2
66650: ARRAY
66651: PPUSH
66652: CALL_OW 111
// end ;
66656: LD_VAR 0 3
66660: RET
// export function PrepareApemanSoldier ( ) ; begin
66661: LD_INT 0
66663: PPUSH
// uc_nation := 0 ;
66664: LD_ADDR_OWVAR 21
66668: PUSH
66669: LD_INT 0
66671: ST_TO_ADDR
// hc_sex := sex_male ;
66672: LD_ADDR_OWVAR 27
66676: PUSH
66677: LD_INT 1
66679: ST_TO_ADDR
// hc_name :=  ;
66680: LD_ADDR_OWVAR 26
66684: PUSH
66685: LD_STRING 
66687: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66688: LD_ADDR_OWVAR 28
66692: PUSH
66693: LD_INT 15
66695: ST_TO_ADDR
// hc_gallery :=  ;
66696: LD_ADDR_OWVAR 33
66700: PUSH
66701: LD_STRING 
66703: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66704: LD_ADDR_OWVAR 31
66708: PUSH
66709: LD_INT 0
66711: PPUSH
66712: LD_INT 3
66714: PPUSH
66715: CALL_OW 12
66719: PUSH
66720: LD_INT 0
66722: PPUSH
66723: LD_INT 3
66725: PPUSH
66726: CALL_OW 12
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66743: LD_ADDR_OWVAR 29
66747: PUSH
66748: LD_INT 12
66750: PUSH
66751: LD_INT 12
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// end ;
66758: LD_VAR 0 1
66762: RET
// export function PrepareApemanEngineer ( ) ; begin
66763: LD_INT 0
66765: PPUSH
// uc_nation := 0 ;
66766: LD_ADDR_OWVAR 21
66770: PUSH
66771: LD_INT 0
66773: ST_TO_ADDR
// hc_sex := sex_male ;
66774: LD_ADDR_OWVAR 27
66778: PUSH
66779: LD_INT 1
66781: ST_TO_ADDR
// hc_name :=  ;
66782: LD_ADDR_OWVAR 26
66786: PUSH
66787: LD_STRING 
66789: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66790: LD_ADDR_OWVAR 28
66794: PUSH
66795: LD_INT 16
66797: ST_TO_ADDR
// hc_gallery :=  ;
66798: LD_ADDR_OWVAR 33
66802: PUSH
66803: LD_STRING 
66805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66806: LD_ADDR_OWVAR 31
66810: PUSH
66811: LD_INT 0
66813: PPUSH
66814: LD_INT 3
66816: PPUSH
66817: CALL_OW 12
66821: PUSH
66822: LD_INT 0
66824: PPUSH
66825: LD_INT 3
66827: PPUSH
66828: CALL_OW 12
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66845: LD_ADDR_OWVAR 29
66849: PUSH
66850: LD_INT 12
66852: PUSH
66853: LD_INT 12
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: ST_TO_ADDR
// end ;
66860: LD_VAR 0 1
66864: RET
// export function PrepareApeman ( agressivity ) ; begin
66865: LD_INT 0
66867: PPUSH
// uc_side := 0 ;
66868: LD_ADDR_OWVAR 20
66872: PUSH
66873: LD_INT 0
66875: ST_TO_ADDR
// uc_nation := 0 ;
66876: LD_ADDR_OWVAR 21
66880: PUSH
66881: LD_INT 0
66883: ST_TO_ADDR
// hc_sex := sex_male ;
66884: LD_ADDR_OWVAR 27
66888: PUSH
66889: LD_INT 1
66891: ST_TO_ADDR
// hc_class := class_apeman ;
66892: LD_ADDR_OWVAR 28
66896: PUSH
66897: LD_INT 12
66899: ST_TO_ADDR
// hc_gallery :=  ;
66900: LD_ADDR_OWVAR 33
66904: PUSH
66905: LD_STRING 
66907: ST_TO_ADDR
// hc_name :=  ;
66908: LD_ADDR_OWVAR 26
66912: PUSH
66913: LD_STRING 
66915: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66916: LD_ADDR_OWVAR 29
66920: PUSH
66921: LD_INT 12
66923: PUSH
66924: LD_INT 12
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: ST_TO_ADDR
// if agressivity = 0 then
66931: LD_VAR 0 1
66935: PUSH
66936: LD_INT 0
66938: EQUAL
66939: IFFALSE 66951
// hc_agressivity := 0 else
66941: LD_ADDR_OWVAR 35
66945: PUSH
66946: LD_INT 0
66948: ST_TO_ADDR
66949: GO 66972
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66951: LD_ADDR_OWVAR 35
66955: PUSH
66956: LD_VAR 0 1
66960: NEG
66961: PPUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: CALL_OW 12
66971: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66972: LD_ADDR_OWVAR 31
66976: PUSH
66977: LD_INT 0
66979: PPUSH
66980: LD_INT 3
66982: PPUSH
66983: CALL_OW 12
66987: PUSH
66988: LD_INT 0
66990: PPUSH
66991: LD_INT 3
66993: PPUSH
66994: CALL_OW 12
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: ST_TO_ADDR
// end ;
67011: LD_VAR 0 2
67015: RET
// export function PrepareTiger ( agressivity ) ; begin
67016: LD_INT 0
67018: PPUSH
// uc_side := 0 ;
67019: LD_ADDR_OWVAR 20
67023: PUSH
67024: LD_INT 0
67026: ST_TO_ADDR
// uc_nation := 0 ;
67027: LD_ADDR_OWVAR 21
67031: PUSH
67032: LD_INT 0
67034: ST_TO_ADDR
// InitHc ;
67035: CALL_OW 19
// hc_class := class_tiger ;
67039: LD_ADDR_OWVAR 28
67043: PUSH
67044: LD_INT 14
67046: ST_TO_ADDR
// hc_gallery :=  ;
67047: LD_ADDR_OWVAR 33
67051: PUSH
67052: LD_STRING 
67054: ST_TO_ADDR
// hc_name :=  ;
67055: LD_ADDR_OWVAR 26
67059: PUSH
67060: LD_STRING 
67062: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67063: LD_ADDR_OWVAR 35
67067: PUSH
67068: LD_VAR 0 1
67072: NEG
67073: PPUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: CALL_OW 12
67083: ST_TO_ADDR
// end ;
67084: LD_VAR 0 2
67088: RET
// export function PrepareEnchidna ( ) ; begin
67089: LD_INT 0
67091: PPUSH
// uc_side := 0 ;
67092: LD_ADDR_OWVAR 20
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// uc_nation := 0 ;
67100: LD_ADDR_OWVAR 21
67104: PUSH
67105: LD_INT 0
67107: ST_TO_ADDR
// InitHc ;
67108: CALL_OW 19
// hc_class := class_baggie ;
67112: LD_ADDR_OWVAR 28
67116: PUSH
67117: LD_INT 13
67119: ST_TO_ADDR
// hc_gallery :=  ;
67120: LD_ADDR_OWVAR 33
67124: PUSH
67125: LD_STRING 
67127: ST_TO_ADDR
// hc_name :=  ;
67128: LD_ADDR_OWVAR 26
67132: PUSH
67133: LD_STRING 
67135: ST_TO_ADDR
// end ;
67136: LD_VAR 0 1
67140: RET
// export function PrepareFrog ( ) ; begin
67141: LD_INT 0
67143: PPUSH
// uc_side := 0 ;
67144: LD_ADDR_OWVAR 20
67148: PUSH
67149: LD_INT 0
67151: ST_TO_ADDR
// uc_nation := 0 ;
67152: LD_ADDR_OWVAR 21
67156: PUSH
67157: LD_INT 0
67159: ST_TO_ADDR
// InitHc ;
67160: CALL_OW 19
// hc_class := class_frog ;
67164: LD_ADDR_OWVAR 28
67168: PUSH
67169: LD_INT 19
67171: ST_TO_ADDR
// hc_gallery :=  ;
67172: LD_ADDR_OWVAR 33
67176: PUSH
67177: LD_STRING 
67179: ST_TO_ADDR
// hc_name :=  ;
67180: LD_ADDR_OWVAR 26
67184: PUSH
67185: LD_STRING 
67187: ST_TO_ADDR
// end ;
67188: LD_VAR 0 1
67192: RET
// export function PrepareFish ( ) ; begin
67193: LD_INT 0
67195: PPUSH
// uc_side := 0 ;
67196: LD_ADDR_OWVAR 20
67200: PUSH
67201: LD_INT 0
67203: ST_TO_ADDR
// uc_nation := 0 ;
67204: LD_ADDR_OWVAR 21
67208: PUSH
67209: LD_INT 0
67211: ST_TO_ADDR
// InitHc ;
67212: CALL_OW 19
// hc_class := class_fish ;
67216: LD_ADDR_OWVAR 28
67220: PUSH
67221: LD_INT 20
67223: ST_TO_ADDR
// hc_gallery :=  ;
67224: LD_ADDR_OWVAR 33
67228: PUSH
67229: LD_STRING 
67231: ST_TO_ADDR
// hc_name :=  ;
67232: LD_ADDR_OWVAR 26
67236: PUSH
67237: LD_STRING 
67239: ST_TO_ADDR
// end ;
67240: LD_VAR 0 1
67244: RET
// export function PrepareBird ( ) ; begin
67245: LD_INT 0
67247: PPUSH
// uc_side := 0 ;
67248: LD_ADDR_OWVAR 20
67252: PUSH
67253: LD_INT 0
67255: ST_TO_ADDR
// uc_nation := 0 ;
67256: LD_ADDR_OWVAR 21
67260: PUSH
67261: LD_INT 0
67263: ST_TO_ADDR
// InitHc ;
67264: CALL_OW 19
// hc_class := class_phororhacos ;
67268: LD_ADDR_OWVAR 28
67272: PUSH
67273: LD_INT 18
67275: ST_TO_ADDR
// hc_gallery :=  ;
67276: LD_ADDR_OWVAR 33
67280: PUSH
67281: LD_STRING 
67283: ST_TO_ADDR
// hc_name :=  ;
67284: LD_ADDR_OWVAR 26
67288: PUSH
67289: LD_STRING 
67291: ST_TO_ADDR
// end ;
67292: LD_VAR 0 1
67296: RET
// export function PrepareHorse ( ) ; begin
67297: LD_INT 0
67299: PPUSH
// uc_side := 0 ;
67300: LD_ADDR_OWVAR 20
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// uc_nation := 0 ;
67308: LD_ADDR_OWVAR 21
67312: PUSH
67313: LD_INT 0
67315: ST_TO_ADDR
// InitHc ;
67316: CALL_OW 19
// hc_class := class_horse ;
67320: LD_ADDR_OWVAR 28
67324: PUSH
67325: LD_INT 21
67327: ST_TO_ADDR
// hc_gallery :=  ;
67328: LD_ADDR_OWVAR 33
67332: PUSH
67333: LD_STRING 
67335: ST_TO_ADDR
// hc_name :=  ;
67336: LD_ADDR_OWVAR 26
67340: PUSH
67341: LD_STRING 
67343: ST_TO_ADDR
// end ;
67344: LD_VAR 0 1
67348: RET
// export function PrepareMastodont ( ) ; begin
67349: LD_INT 0
67351: PPUSH
// uc_side := 0 ;
67352: LD_ADDR_OWVAR 20
67356: PUSH
67357: LD_INT 0
67359: ST_TO_ADDR
// uc_nation := 0 ;
67360: LD_ADDR_OWVAR 21
67364: PUSH
67365: LD_INT 0
67367: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67368: LD_ADDR_OWVAR 37
67372: PUSH
67373: LD_INT 31
67375: ST_TO_ADDR
// vc_control := control_rider ;
67376: LD_ADDR_OWVAR 38
67380: PUSH
67381: LD_INT 4
67383: ST_TO_ADDR
// end ;
67384: LD_VAR 0 1
67388: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67389: LD_INT 0
67391: PPUSH
67392: PPUSH
67393: PPUSH
// uc_side = 0 ;
67394: LD_ADDR_OWVAR 20
67398: PUSH
67399: LD_INT 0
67401: ST_TO_ADDR
// uc_nation = 0 ;
67402: LD_ADDR_OWVAR 21
67406: PUSH
67407: LD_INT 0
67409: ST_TO_ADDR
// InitHc_All ( ) ;
67410: CALL_OW 584
// InitVc ;
67414: CALL_OW 20
// if mastodonts then
67418: LD_VAR 0 6
67422: IFFALSE 67489
// for i = 1 to mastodonts do
67424: LD_ADDR_VAR 0 11
67428: PUSH
67429: DOUBLE
67430: LD_INT 1
67432: DEC
67433: ST_TO_ADDR
67434: LD_VAR 0 6
67438: PUSH
67439: FOR_TO
67440: IFFALSE 67487
// begin vc_chassis := 31 ;
67442: LD_ADDR_OWVAR 37
67446: PUSH
67447: LD_INT 31
67449: ST_TO_ADDR
// vc_control := control_rider ;
67450: LD_ADDR_OWVAR 38
67454: PUSH
67455: LD_INT 4
67457: ST_TO_ADDR
// animal := CreateVehicle ;
67458: LD_ADDR_VAR 0 12
67462: PUSH
67463: CALL_OW 45
67467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67468: LD_VAR 0 12
67472: PPUSH
67473: LD_VAR 0 8
67477: PPUSH
67478: LD_INT 0
67480: PPUSH
67481: CALL 69631 0 3
// end ;
67485: GO 67439
67487: POP
67488: POP
// if horses then
67489: LD_VAR 0 5
67493: IFFALSE 67560
// for i = 1 to horses do
67495: LD_ADDR_VAR 0 11
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_VAR 0 5
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67558
// begin hc_class := 21 ;
67513: LD_ADDR_OWVAR 28
67517: PUSH
67518: LD_INT 21
67520: ST_TO_ADDR
// hc_gallery :=  ;
67521: LD_ADDR_OWVAR 33
67525: PUSH
67526: LD_STRING 
67528: ST_TO_ADDR
// animal := CreateHuman ;
67529: LD_ADDR_VAR 0 12
67533: PUSH
67534: CALL_OW 44
67538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67539: LD_VAR 0 12
67543: PPUSH
67544: LD_VAR 0 8
67548: PPUSH
67549: LD_INT 0
67551: PPUSH
67552: CALL 69631 0 3
// end ;
67556: GO 67510
67558: POP
67559: POP
// if birds then
67560: LD_VAR 0 1
67564: IFFALSE 67631
// for i = 1 to birds do
67566: LD_ADDR_VAR 0 11
67570: PUSH
67571: DOUBLE
67572: LD_INT 1
67574: DEC
67575: ST_TO_ADDR
67576: LD_VAR 0 1
67580: PUSH
67581: FOR_TO
67582: IFFALSE 67629
// begin hc_class := 18 ;
67584: LD_ADDR_OWVAR 28
67588: PUSH
67589: LD_INT 18
67591: ST_TO_ADDR
// hc_gallery =  ;
67592: LD_ADDR_OWVAR 33
67596: PUSH
67597: LD_STRING 
67599: ST_TO_ADDR
// animal := CreateHuman ;
67600: LD_ADDR_VAR 0 12
67604: PUSH
67605: CALL_OW 44
67609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67610: LD_VAR 0 12
67614: PPUSH
67615: LD_VAR 0 8
67619: PPUSH
67620: LD_INT 0
67622: PPUSH
67623: CALL 69631 0 3
// end ;
67627: GO 67581
67629: POP
67630: POP
// if tigers then
67631: LD_VAR 0 2
67635: IFFALSE 67719
// for i = 1 to tigers do
67637: LD_ADDR_VAR 0 11
67641: PUSH
67642: DOUBLE
67643: LD_INT 1
67645: DEC
67646: ST_TO_ADDR
67647: LD_VAR 0 2
67651: PUSH
67652: FOR_TO
67653: IFFALSE 67717
// begin hc_class = class_tiger ;
67655: LD_ADDR_OWVAR 28
67659: PUSH
67660: LD_INT 14
67662: ST_TO_ADDR
// hc_gallery =  ;
67663: LD_ADDR_OWVAR 33
67667: PUSH
67668: LD_STRING 
67670: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67671: LD_ADDR_OWVAR 35
67675: PUSH
67676: LD_INT 7
67678: NEG
67679: PPUSH
67680: LD_INT 7
67682: PPUSH
67683: CALL_OW 12
67687: ST_TO_ADDR
// animal := CreateHuman ;
67688: LD_ADDR_VAR 0 12
67692: PUSH
67693: CALL_OW 44
67697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67698: LD_VAR 0 12
67702: PPUSH
67703: LD_VAR 0 8
67707: PPUSH
67708: LD_INT 0
67710: PPUSH
67711: CALL 69631 0 3
// end ;
67715: GO 67652
67717: POP
67718: POP
// if apemans then
67719: LD_VAR 0 3
67723: IFFALSE 67846
// for i = 1 to apemans do
67725: LD_ADDR_VAR 0 11
67729: PUSH
67730: DOUBLE
67731: LD_INT 1
67733: DEC
67734: ST_TO_ADDR
67735: LD_VAR 0 3
67739: PUSH
67740: FOR_TO
67741: IFFALSE 67844
// begin hc_class = class_apeman ;
67743: LD_ADDR_OWVAR 28
67747: PUSH
67748: LD_INT 12
67750: ST_TO_ADDR
// hc_gallery =  ;
67751: LD_ADDR_OWVAR 33
67755: PUSH
67756: LD_STRING 
67758: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67759: LD_ADDR_OWVAR 35
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PPUSH
67768: LD_INT 2
67770: PPUSH
67771: CALL_OW 12
67775: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67776: LD_ADDR_OWVAR 31
67780: PUSH
67781: LD_INT 1
67783: PPUSH
67784: LD_INT 3
67786: PPUSH
67787: CALL_OW 12
67791: PUSH
67792: LD_INT 1
67794: PPUSH
67795: LD_INT 3
67797: PPUSH
67798: CALL_OW 12
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: ST_TO_ADDR
// animal := CreateHuman ;
67815: LD_ADDR_VAR 0 12
67819: PUSH
67820: CALL_OW 44
67824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67825: LD_VAR 0 12
67829: PPUSH
67830: LD_VAR 0 8
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: CALL 69631 0 3
// end ;
67842: GO 67740
67844: POP
67845: POP
// if enchidnas then
67846: LD_VAR 0 4
67850: IFFALSE 67917
// for i = 1 to enchidnas do
67852: LD_ADDR_VAR 0 11
67856: PUSH
67857: DOUBLE
67858: LD_INT 1
67860: DEC
67861: ST_TO_ADDR
67862: LD_VAR 0 4
67866: PUSH
67867: FOR_TO
67868: IFFALSE 67915
// begin hc_class = 13 ;
67870: LD_ADDR_OWVAR 28
67874: PUSH
67875: LD_INT 13
67877: ST_TO_ADDR
// hc_gallery =  ;
67878: LD_ADDR_OWVAR 33
67882: PUSH
67883: LD_STRING 
67885: ST_TO_ADDR
// animal := CreateHuman ;
67886: LD_ADDR_VAR 0 12
67890: PUSH
67891: CALL_OW 44
67895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67896: LD_VAR 0 12
67900: PPUSH
67901: LD_VAR 0 8
67905: PPUSH
67906: LD_INT 0
67908: PPUSH
67909: CALL 69631 0 3
// end ;
67913: GO 67867
67915: POP
67916: POP
// if fishes then
67917: LD_VAR 0 7
67921: IFFALSE 67988
// for i = 1 to fishes do
67923: LD_ADDR_VAR 0 11
67927: PUSH
67928: DOUBLE
67929: LD_INT 1
67931: DEC
67932: ST_TO_ADDR
67933: LD_VAR 0 7
67937: PUSH
67938: FOR_TO
67939: IFFALSE 67986
// begin hc_class = 20 ;
67941: LD_ADDR_OWVAR 28
67945: PUSH
67946: LD_INT 20
67948: ST_TO_ADDR
// hc_gallery =  ;
67949: LD_ADDR_OWVAR 33
67953: PUSH
67954: LD_STRING 
67956: ST_TO_ADDR
// animal := CreateHuman ;
67957: LD_ADDR_VAR 0 12
67961: PUSH
67962: CALL_OW 44
67966: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67967: LD_VAR 0 12
67971: PPUSH
67972: LD_VAR 0 9
67976: PPUSH
67977: LD_INT 0
67979: PPUSH
67980: CALL 69631 0 3
// end ;
67984: GO 67938
67986: POP
67987: POP
// end ;
67988: LD_VAR 0 10
67992: RET
// export function WantHeal ( sci , unit ) ; begin
67993: LD_INT 0
67995: PPUSH
// if GetTaskList ( sci ) > 0 then
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 437
68005: PUSH
68006: LD_INT 0
68008: GREATER
68009: IFFALSE 68081
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68011: LD_VAR 0 1
68015: PPUSH
68016: CALL_OW 437
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PUSH
68025: LD_INT 1
68027: ARRAY
68028: PUSH
68029: LD_STRING l
68031: EQUAL
68032: IFFALSE 68059
68034: PUSH
68035: LD_VAR 0 1
68039: PPUSH
68040: CALL_OW 437
68044: PUSH
68045: LD_INT 1
68047: ARRAY
68048: PUSH
68049: LD_INT 4
68051: ARRAY
68052: PUSH
68053: LD_VAR 0 2
68057: EQUAL
68058: AND
68059: IFFALSE 68071
// result := true else
68061: LD_ADDR_VAR 0 3
68065: PUSH
68066: LD_INT 1
68068: ST_TO_ADDR
68069: GO 68079
// result := false ;
68071: LD_ADDR_VAR 0 3
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// end else
68079: GO 68089
// result := false ;
68081: LD_ADDR_VAR 0 3
68085: PUSH
68086: LD_INT 0
68088: ST_TO_ADDR
// end ;
68089: LD_VAR 0 3
68093: RET
// export function HealTarget ( sci ) ; begin
68094: LD_INT 0
68096: PPUSH
// if not sci then
68097: LD_VAR 0 1
68101: NOT
68102: IFFALSE 68106
// exit ;
68104: GO 68171
// result := 0 ;
68106: LD_ADDR_VAR 0 2
68110: PUSH
68111: LD_INT 0
68113: ST_TO_ADDR
// if GetTaskList ( sci ) then
68114: LD_VAR 0 1
68118: PPUSH
68119: CALL_OW 437
68123: IFFALSE 68171
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68125: LD_VAR 0 1
68129: PPUSH
68130: CALL_OW 437
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PUSH
68139: LD_INT 1
68141: ARRAY
68142: PUSH
68143: LD_STRING l
68145: EQUAL
68146: IFFALSE 68171
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68148: LD_ADDR_VAR 0 2
68152: PUSH
68153: LD_VAR 0 1
68157: PPUSH
68158: CALL_OW 437
68162: PUSH
68163: LD_INT 1
68165: ARRAY
68166: PUSH
68167: LD_INT 4
68169: ARRAY
68170: ST_TO_ADDR
// end ;
68171: LD_VAR 0 2
68175: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68176: LD_INT 0
68178: PPUSH
68179: PPUSH
68180: PPUSH
68181: PPUSH
// if not base_units then
68182: LD_VAR 0 1
68186: NOT
68187: IFFALSE 68191
// exit ;
68189: GO 68278
// result := false ;
68191: LD_ADDR_VAR 0 2
68195: PUSH
68196: LD_INT 0
68198: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68199: LD_ADDR_VAR 0 5
68203: PUSH
68204: LD_VAR 0 1
68208: PPUSH
68209: LD_INT 21
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PPUSH
68219: CALL_OW 72
68223: ST_TO_ADDR
// if not tmp then
68224: LD_VAR 0 5
68228: NOT
68229: IFFALSE 68233
// exit ;
68231: GO 68278
// for i in tmp do
68233: LD_ADDR_VAR 0 3
68237: PUSH
68238: LD_VAR 0 5
68242: PUSH
68243: FOR_IN
68244: IFFALSE 68276
// begin result := EnemyInRange ( i , 22 ) ;
68246: LD_ADDR_VAR 0 2
68250: PUSH
68251: LD_VAR 0 3
68255: PPUSH
68256: LD_INT 22
68258: PPUSH
68259: CALL 65703 0 2
68263: ST_TO_ADDR
// if result then
68264: LD_VAR 0 2
68268: IFFALSE 68274
// exit ;
68270: POP
68271: POP
68272: GO 68278
// end ;
68274: GO 68243
68276: POP
68277: POP
// end ;
68278: LD_VAR 0 2
68282: RET
// export function FilterByTag ( units , tag ) ; begin
68283: LD_INT 0
68285: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_INT 120
68298: PUSH
68299: LD_VAR 0 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PPUSH
68308: CALL_OW 72
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 3
68317: RET
// export function IsDriver ( un ) ; begin
68318: LD_INT 0
68320: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68321: LD_ADDR_VAR 0 2
68325: PUSH
68326: LD_VAR 0 1
68330: PUSH
68331: LD_INT 55
68333: PUSH
68334: EMPTY
68335: LIST
68336: PPUSH
68337: CALL_OW 69
68341: IN
68342: ST_TO_ADDR
// end ;
68343: LD_VAR 0 2
68347: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// list := [ ] ;
68352: LD_ADDR_VAR 0 5
68356: PUSH
68357: EMPTY
68358: ST_TO_ADDR
// case d of 0 :
68359: LD_VAR 0 3
68363: PUSH
68364: LD_INT 0
68366: DOUBLE
68367: EQUAL
68368: IFTRUE 68372
68370: GO 68505
68372: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68373: LD_ADDR_VAR 0 5
68377: PUSH
68378: LD_VAR 0 1
68382: PUSH
68383: LD_INT 4
68385: MINUS
68386: PUSH
68387: LD_VAR 0 2
68391: PUSH
68392: LD_INT 4
68394: MINUS
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: PUSH
68404: LD_VAR 0 1
68408: PUSH
68409: LD_INT 3
68411: MINUS
68412: PUSH
68413: LD_VAR 0 2
68417: PUSH
68418: LD_INT 1
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: LIST
68425: PUSH
68426: LD_VAR 0 1
68430: PUSH
68431: LD_INT 4
68433: PLUS
68434: PUSH
68435: LD_VAR 0 2
68439: PUSH
68440: LD_INT 4
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: PUSH
68448: LD_VAR 0 1
68452: PUSH
68453: LD_INT 3
68455: PLUS
68456: PUSH
68457: LD_VAR 0 2
68461: PUSH
68462: LD_INT 3
68464: PLUS
68465: PUSH
68466: LD_INT 5
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: PUSH
68474: LD_VAR 0 1
68478: PUSH
68479: LD_VAR 0 2
68483: PUSH
68484: LD_INT 4
68486: PLUS
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: LIST
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: ST_TO_ADDR
// end ; 1 :
68503: GO 69203
68505: LD_INT 1
68507: DOUBLE
68508: EQUAL
68509: IFTRUE 68513
68511: GO 68646
68513: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68514: LD_ADDR_VAR 0 5
68518: PUSH
68519: LD_VAR 0 1
68523: PUSH
68524: LD_VAR 0 2
68528: PUSH
68529: LD_INT 4
68531: MINUS
68532: PUSH
68533: LD_INT 3
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: LIST
68540: PUSH
68541: LD_VAR 0 1
68545: PUSH
68546: LD_INT 3
68548: MINUS
68549: PUSH
68550: LD_VAR 0 2
68554: PUSH
68555: LD_INT 3
68557: MINUS
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: LIST
68566: PUSH
68567: LD_VAR 0 1
68571: PUSH
68572: LD_INT 4
68574: MINUS
68575: PUSH
68576: LD_VAR 0 2
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: LIST
68588: PUSH
68589: LD_VAR 0 1
68593: PUSH
68594: LD_VAR 0 2
68598: PUSH
68599: LD_INT 3
68601: PLUS
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: PUSH
68611: LD_VAR 0 1
68615: PUSH
68616: LD_INT 4
68618: PLUS
68619: PUSH
68620: LD_VAR 0 2
68624: PUSH
68625: LD_INT 4
68627: PLUS
68628: PUSH
68629: LD_INT 5
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: LIST
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: ST_TO_ADDR
// end ; 2 :
68644: GO 69203
68646: LD_INT 2
68648: DOUBLE
68649: EQUAL
68650: IFTRUE 68654
68652: GO 68783
68654: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68655: LD_ADDR_VAR 0 5
68659: PUSH
68660: LD_VAR 0 1
68664: PUSH
68665: LD_VAR 0 2
68669: PUSH
68670: LD_INT 3
68672: MINUS
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: PUSH
68682: LD_VAR 0 1
68686: PUSH
68687: LD_INT 4
68689: PLUS
68690: PUSH
68691: LD_VAR 0 2
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: PUSH
68704: LD_VAR 0 1
68708: PUSH
68709: LD_VAR 0 2
68713: PUSH
68714: LD_INT 4
68716: PLUS
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: PUSH
68726: LD_VAR 0 1
68730: PUSH
68731: LD_INT 3
68733: MINUS
68734: PUSH
68735: LD_VAR 0 2
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: LIST
68747: PUSH
68748: LD_VAR 0 1
68752: PUSH
68753: LD_INT 4
68755: MINUS
68756: PUSH
68757: LD_VAR 0 2
68761: PUSH
68762: LD_INT 4
68764: MINUS
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: ST_TO_ADDR
// end ; 3 :
68781: GO 69203
68783: LD_INT 3
68785: DOUBLE
68786: EQUAL
68787: IFTRUE 68791
68789: GO 68924
68791: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68792: LD_ADDR_VAR 0 5
68796: PUSH
68797: LD_VAR 0 1
68801: PUSH
68802: LD_INT 3
68804: PLUS
68805: PUSH
68806: LD_VAR 0 2
68810: PUSH
68811: LD_INT 4
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: PUSH
68819: LD_VAR 0 1
68823: PUSH
68824: LD_INT 4
68826: PLUS
68827: PUSH
68828: LD_VAR 0 2
68832: PUSH
68833: LD_INT 4
68835: PLUS
68836: PUSH
68837: LD_INT 5
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: PUSH
68845: LD_VAR 0 1
68849: PUSH
68850: LD_INT 4
68852: MINUS
68853: PUSH
68854: LD_VAR 0 2
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: PUSH
68867: LD_VAR 0 1
68871: PUSH
68872: LD_VAR 0 2
68876: PUSH
68877: LD_INT 4
68879: MINUS
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: PUSH
68889: LD_VAR 0 1
68893: PUSH
68894: LD_INT 3
68896: MINUS
68897: PUSH
68898: LD_VAR 0 2
68902: PUSH
68903: LD_INT 3
68905: MINUS
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: ST_TO_ADDR
// end ; 4 :
68922: GO 69203
68924: LD_INT 4
68926: DOUBLE
68927: EQUAL
68928: IFTRUE 68932
68930: GO 69065
68932: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68933: LD_ADDR_VAR 0 5
68937: PUSH
68938: LD_VAR 0 1
68942: PUSH
68943: LD_VAR 0 2
68947: PUSH
68948: LD_INT 4
68950: PLUS
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: PUSH
68960: LD_VAR 0 1
68964: PUSH
68965: LD_INT 3
68967: PLUS
68968: PUSH
68969: LD_VAR 0 2
68973: PUSH
68974: LD_INT 3
68976: PLUS
68977: PUSH
68978: LD_INT 5
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: PUSH
68986: LD_VAR 0 1
68990: PUSH
68991: LD_INT 4
68993: PLUS
68994: PUSH
68995: LD_VAR 0 2
68999: PUSH
69000: LD_INT 4
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 3
69020: MINUS
69021: PUSH
69022: LD_INT 3
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: PUSH
69030: LD_VAR 0 1
69034: PUSH
69035: LD_INT 4
69037: MINUS
69038: PUSH
69039: LD_VAR 0 2
69043: PUSH
69044: LD_INT 4
69046: MINUS
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: ST_TO_ADDR
// end ; 5 :
69063: GO 69203
69065: LD_INT 5
69067: DOUBLE
69068: EQUAL
69069: IFTRUE 69073
69071: GO 69202
69073: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69074: LD_ADDR_VAR 0 5
69078: PUSH
69079: LD_VAR 0 1
69083: PUSH
69084: LD_INT 4
69086: MINUS
69087: PUSH
69088: LD_VAR 0 2
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: LIST
69100: PUSH
69101: LD_VAR 0 1
69105: PUSH
69106: LD_VAR 0 2
69110: PUSH
69111: LD_INT 4
69113: MINUS
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: PUSH
69123: LD_VAR 0 1
69127: PUSH
69128: LD_INT 4
69130: PLUS
69131: PUSH
69132: LD_VAR 0 2
69136: PUSH
69137: LD_INT 4
69139: PLUS
69140: PUSH
69141: LD_INT 5
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: PUSH
69149: LD_VAR 0 1
69153: PUSH
69154: LD_INT 3
69156: PLUS
69157: PUSH
69158: LD_VAR 0 2
69162: PUSH
69163: LD_INT 4
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 1
69175: PUSH
69176: LD_VAR 0 2
69180: PUSH
69181: LD_INT 3
69183: PLUS
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: ST_TO_ADDR
// end ; end ;
69200: GO 69203
69202: POP
// result := list ;
69203: LD_ADDR_VAR 0 4
69207: PUSH
69208: LD_VAR 0 5
69212: ST_TO_ADDR
// end ;
69213: LD_VAR 0 4
69217: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69218: LD_INT 0
69220: PPUSH
69221: PPUSH
69222: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69223: LD_VAR 0 1
69227: NOT
69228: IFTRUE 69256
69230: PUSH
69231: LD_VAR 0 2
69235: PUSH
69236: LD_INT 1
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: LD_INT 4
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: IN
69254: NOT
69255: OR
69256: IFFALSE 69260
// exit ;
69258: GO 69343
// tmp := [ ] ;
69260: LD_ADDR_VAR 0 5
69264: PUSH
69265: EMPTY
69266: ST_TO_ADDR
// for i in units do
69267: LD_ADDR_VAR 0 4
69271: PUSH
69272: LD_VAR 0 1
69276: PUSH
69277: FOR_IN
69278: IFFALSE 69312
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69280: LD_ADDR_VAR 0 5
69284: PUSH
69285: LD_VAR 0 5
69289: PPUSH
69290: LD_VAR 0 4
69294: PPUSH
69295: LD_VAR 0 2
69299: PPUSH
69300: CALL_OW 259
69304: PPUSH
69305: CALL 70738 0 2
69309: ST_TO_ADDR
69310: GO 69277
69312: POP
69313: POP
// if not tmp then
69314: LD_VAR 0 5
69318: NOT
69319: IFFALSE 69323
// exit ;
69321: GO 69343
// result := SortListByListDesc ( units , tmp ) ;
69323: LD_ADDR_VAR 0 3
69327: PUSH
69328: LD_VAR 0 1
69332: PPUSH
69333: LD_VAR 0 5
69337: PPUSH
69338: CALL_OW 77
69342: ST_TO_ADDR
// end ;
69343: LD_VAR 0 3
69347: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
69352: PPUSH
// result := false ;
69353: LD_ADDR_VAR 0 3
69357: PUSH
69358: LD_INT 0
69360: ST_TO_ADDR
// if not building then
69361: LD_VAR 0 2
69365: NOT
69366: IFFALSE 69370
// exit ;
69368: GO 69514
// x := GetX ( building ) ;
69370: LD_ADDR_VAR 0 4
69374: PUSH
69375: LD_VAR 0 2
69379: PPUSH
69380: CALL_OW 250
69384: ST_TO_ADDR
// y := GetY ( building ) ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_VAR 0 2
69394: PPUSH
69395: CALL_OW 251
69399: ST_TO_ADDR
// if not x or not y then
69400: LD_VAR 0 4
69404: NOT
69405: IFTRUE 69414
69407: PUSH
69408: LD_VAR 0 5
69412: NOT
69413: OR
69414: IFFALSE 69418
// exit ;
69416: GO 69514
// if GetTaskList ( unit ) then
69418: LD_VAR 0 1
69422: PPUSH
69423: CALL_OW 437
69427: IFFALSE 69514
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69429: LD_STRING e
69431: PUSH
69432: LD_VAR 0 1
69436: PPUSH
69437: CALL_OW 437
69441: PUSH
69442: LD_INT 1
69444: ARRAY
69445: PUSH
69446: LD_INT 1
69448: ARRAY
69449: EQUAL
69450: IFFALSE 69477
69452: PUSH
69453: LD_VAR 0 4
69457: PUSH
69458: LD_VAR 0 1
69462: PPUSH
69463: CALL_OW 437
69467: PUSH
69468: LD_INT 1
69470: ARRAY
69471: PUSH
69472: LD_INT 2
69474: ARRAY
69475: EQUAL
69476: AND
69477: IFFALSE 69504
69479: PUSH
69480: LD_VAR 0 5
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 437
69494: PUSH
69495: LD_INT 1
69497: ARRAY
69498: PUSH
69499: LD_INT 3
69501: ARRAY
69502: EQUAL
69503: AND
69504: IFFALSE 69514
// result := true end ;
69506: LD_ADDR_VAR 0 3
69510: PUSH
69511: LD_INT 1
69513: ST_TO_ADDR
// end ;
69514: LD_VAR 0 3
69518: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69519: LD_INT 0
69521: PPUSH
// result := false ;
69522: LD_ADDR_VAR 0 4
69526: PUSH
69527: LD_INT 0
69529: ST_TO_ADDR
// if GetTaskList ( unit ) then
69530: LD_VAR 0 1
69534: PPUSH
69535: CALL_OW 437
69539: IFFALSE 69626
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69541: LD_STRING M
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: CALL_OW 437
69553: PUSH
69554: LD_INT 1
69556: ARRAY
69557: PUSH
69558: LD_INT 1
69560: ARRAY
69561: EQUAL
69562: IFFALSE 69589
69564: PUSH
69565: LD_VAR 0 2
69569: PUSH
69570: LD_VAR 0 1
69574: PPUSH
69575: CALL_OW 437
69579: PUSH
69580: LD_INT 1
69582: ARRAY
69583: PUSH
69584: LD_INT 2
69586: ARRAY
69587: EQUAL
69588: AND
69589: IFFALSE 69616
69591: PUSH
69592: LD_VAR 0 3
69596: PUSH
69597: LD_VAR 0 1
69601: PPUSH
69602: CALL_OW 437
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PUSH
69611: LD_INT 3
69613: ARRAY
69614: EQUAL
69615: AND
69616: IFFALSE 69626
// result := true ;
69618: LD_ADDR_VAR 0 4
69622: PUSH
69623: LD_INT 1
69625: ST_TO_ADDR
// end ; end ;
69626: LD_VAR 0 4
69630: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
// if not unit or not area then
69637: LD_VAR 0 1
69641: NOT
69642: IFTRUE 69651
69644: PUSH
69645: LD_VAR 0 2
69649: NOT
69650: OR
69651: IFFALSE 69655
// exit ;
69653: GO 69831
// tmp := AreaToList ( area , i ) ;
69655: LD_ADDR_VAR 0 6
69659: PUSH
69660: LD_VAR 0 2
69664: PPUSH
69665: LD_VAR 0 5
69669: PPUSH
69670: CALL_OW 517
69674: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69675: LD_ADDR_VAR 0 5
69679: PUSH
69680: DOUBLE
69681: LD_INT 1
69683: DEC
69684: ST_TO_ADDR
69685: LD_VAR 0 6
69689: PUSH
69690: LD_INT 1
69692: ARRAY
69693: PUSH
69694: FOR_TO
69695: IFFALSE 69829
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69697: LD_ADDR_VAR 0 7
69701: PUSH
69702: LD_VAR 0 6
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PUSH
69711: LD_VAR 0 5
69715: ARRAY
69716: PUSH
69717: LD_VAR 0 6
69721: PUSH
69722: LD_INT 2
69724: ARRAY
69725: PUSH
69726: LD_VAR 0 5
69730: ARRAY
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69736: LD_INT 92
69738: PUSH
69739: LD_VAR 0 7
69743: PUSH
69744: LD_INT 1
69746: ARRAY
69747: PUSH
69748: LD_VAR 0 7
69752: PUSH
69753: LD_INT 2
69755: ARRAY
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: PPUSH
69766: CALL_OW 69
69770: PUSH
69771: LD_INT 0
69773: EQUAL
69774: IFFALSE 69827
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69776: LD_VAR 0 1
69780: PPUSH
69781: LD_VAR 0 7
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PPUSH
69790: LD_VAR 0 7
69794: PUSH
69795: LD_INT 2
69797: ARRAY
69798: PPUSH
69799: LD_VAR 0 3
69803: PPUSH
69804: CALL_OW 48
// result := IsPlaced ( unit ) ;
69808: LD_ADDR_VAR 0 4
69812: PUSH
69813: LD_VAR 0 1
69817: PPUSH
69818: CALL_OW 305
69822: ST_TO_ADDR
// exit ;
69823: POP
69824: POP
69825: GO 69831
// end ; end ;
69827: GO 69694
69829: POP
69830: POP
// end ;
69831: LD_VAR 0 4
69835: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69836: LD_INT 0
69838: PPUSH
69839: PPUSH
69840: PPUSH
// if not side or side > 8 then
69841: LD_VAR 0 1
69845: NOT
69846: IFTRUE 69858
69848: PUSH
69849: LD_VAR 0 1
69853: PUSH
69854: LD_INT 8
69856: GREATER
69857: OR
69858: IFFALSE 69862
// exit ;
69860: GO 70049
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69862: LD_ADDR_VAR 0 4
69866: PUSH
69867: LD_INT 22
69869: PUSH
69870: LD_VAR 0 1
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 21
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PPUSH
69893: CALL_OW 69
69897: ST_TO_ADDR
// if not tmp then
69898: LD_VAR 0 4
69902: NOT
69903: IFFALSE 69907
// exit ;
69905: GO 70049
// enable_addtolog := true ;
69907: LD_ADDR_OWVAR 81
69911: PUSH
69912: LD_INT 1
69914: ST_TO_ADDR
// AddToLog ( [ ) ;
69915: LD_STRING [
69917: PPUSH
69918: CALL_OW 561
// for i in tmp do
69922: LD_ADDR_VAR 0 3
69926: PUSH
69927: LD_VAR 0 4
69931: PUSH
69932: FOR_IN
69933: IFFALSE 70040
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69935: LD_STRING [
69937: PUSH
69938: LD_VAR 0 3
69942: PPUSH
69943: CALL_OW 266
69947: STR
69948: PUSH
69949: LD_STRING , 
69951: STR
69952: PUSH
69953: LD_VAR 0 3
69957: PPUSH
69958: CALL_OW 250
69962: STR
69963: PUSH
69964: LD_STRING , 
69966: STR
69967: PUSH
69968: LD_VAR 0 3
69972: PPUSH
69973: CALL_OW 251
69977: STR
69978: PUSH
69979: LD_STRING , 
69981: STR
69982: PUSH
69983: LD_VAR 0 3
69987: PPUSH
69988: CALL_OW 254
69992: STR
69993: PUSH
69994: LD_STRING , 
69996: STR
69997: PUSH
69998: LD_VAR 0 3
70002: PPUSH
70003: LD_INT 1
70005: PPUSH
70006: CALL_OW 268
70010: STR
70011: PUSH
70012: LD_STRING , 
70014: STR
70015: PUSH
70016: LD_VAR 0 3
70020: PPUSH
70021: LD_INT 2
70023: PPUSH
70024: CALL_OW 268
70028: STR
70029: PUSH
70030: LD_STRING ],
70032: STR
70033: PPUSH
70034: CALL_OW 561
// end ;
70038: GO 69932
70040: POP
70041: POP
// AddToLog ( ]; ) ;
70042: LD_STRING ];
70044: PPUSH
70045: CALL_OW 561
// end ;
70049: LD_VAR 0 2
70053: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70054: LD_INT 0
70056: PPUSH
70057: PPUSH
70058: PPUSH
70059: PPUSH
70060: PPUSH
// if not area or not rate or not max then
70061: LD_VAR 0 1
70065: NOT
70066: IFTRUE 70075
70068: PUSH
70069: LD_VAR 0 2
70073: NOT
70074: OR
70075: IFTRUE 70084
70077: PUSH
70078: LD_VAR 0 4
70082: NOT
70083: OR
70084: IFFALSE 70088
// exit ;
70086: GO 70277
// while 1 do
70088: LD_INT 1
70090: IFFALSE 70277
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70092: LD_ADDR_VAR 0 9
70096: PUSH
70097: LD_VAR 0 1
70101: PPUSH
70102: LD_INT 1
70104: PPUSH
70105: CALL_OW 287
70109: PUSH
70110: LD_INT 10
70112: MUL
70113: ST_TO_ADDR
// r := rate / 10 ;
70114: LD_ADDR_VAR 0 7
70118: PUSH
70119: LD_VAR 0 2
70123: PUSH
70124: LD_INT 10
70126: DIVREAL
70127: ST_TO_ADDR
// time := 1 1$00 ;
70128: LD_ADDR_VAR 0 8
70132: PUSH
70133: LD_INT 2100
70135: ST_TO_ADDR
// if amount < min then
70136: LD_VAR 0 9
70140: PUSH
70141: LD_VAR 0 3
70145: LESS
70146: IFFALSE 70164
// r := r * 2 else
70148: LD_ADDR_VAR 0 7
70152: PUSH
70153: LD_VAR 0 7
70157: PUSH
70158: LD_INT 2
70160: MUL
70161: ST_TO_ADDR
70162: GO 70190
// if amount > max then
70164: LD_VAR 0 9
70168: PUSH
70169: LD_VAR 0 4
70173: GREATER
70174: IFFALSE 70190
// r := r / 2 ;
70176: LD_ADDR_VAR 0 7
70180: PUSH
70181: LD_VAR 0 7
70185: PUSH
70186: LD_INT 2
70188: DIVREAL
70189: ST_TO_ADDR
// time := time / r ;
70190: LD_ADDR_VAR 0 8
70194: PUSH
70195: LD_VAR 0 8
70199: PUSH
70200: LD_VAR 0 7
70204: DIVREAL
70205: ST_TO_ADDR
// if time < 0 then
70206: LD_VAR 0 8
70210: PUSH
70211: LD_INT 0
70213: LESS
70214: IFFALSE 70231
// time := time * - 1 ;
70216: LD_ADDR_VAR 0 8
70220: PUSH
70221: LD_VAR 0 8
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: MUL
70230: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70231: LD_VAR 0 8
70235: PUSH
70236: LD_INT 35
70238: PPUSH
70239: LD_INT 875
70241: PPUSH
70242: CALL_OW 12
70246: PLUS
70247: PPUSH
70248: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70252: LD_INT 1
70254: PPUSH
70255: LD_INT 5
70257: PPUSH
70258: CALL_OW 12
70262: PPUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: LD_INT 1
70270: PPUSH
70271: CALL_OW 55
// end ;
70275: GO 70088
// end ;
70277: LD_VAR 0 5
70281: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70282: LD_INT 0
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
70290: PPUSH
70291: PPUSH
// if not turrets or not factories then
70292: LD_VAR 0 1
70296: NOT
70297: IFTRUE 70306
70299: PUSH
70300: LD_VAR 0 2
70304: NOT
70305: OR
70306: IFFALSE 70310
// exit ;
70308: GO 70617
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70310: LD_ADDR_VAR 0 10
70314: PUSH
70315: LD_INT 5
70317: PUSH
70318: LD_INT 6
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: LD_INT 4
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: LD_INT 5
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 24
70352: PUSH
70353: LD_INT 25
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 23
70362: PUSH
70363: LD_INT 27
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 42
70376: PUSH
70377: LD_INT 43
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 44
70386: PUSH
70387: LD_INT 46
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 45
70396: PUSH
70397: LD_INT 47
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: LIST
70413: ST_TO_ADDR
// result := [ ] ;
70414: LD_ADDR_VAR 0 3
70418: PUSH
70419: EMPTY
70420: ST_TO_ADDR
// for i in turrets do
70421: LD_ADDR_VAR 0 4
70425: PUSH
70426: LD_VAR 0 1
70430: PUSH
70431: FOR_IN
70432: IFFALSE 70615
// begin nat := GetNation ( i ) ;
70434: LD_ADDR_VAR 0 7
70438: PUSH
70439: LD_VAR 0 4
70443: PPUSH
70444: CALL_OW 248
70448: ST_TO_ADDR
// weapon := 0 ;
70449: LD_ADDR_VAR 0 8
70453: PUSH
70454: LD_INT 0
70456: ST_TO_ADDR
// if not nat then
70457: LD_VAR 0 7
70461: NOT
70462: IFFALSE 70466
// continue ;
70464: GO 70431
// for j in list [ nat ] do
70466: LD_ADDR_VAR 0 5
70470: PUSH
70471: LD_VAR 0 10
70475: PUSH
70476: LD_VAR 0 7
70480: ARRAY
70481: PUSH
70482: FOR_IN
70483: IFFALSE 70524
// if GetBWeapon ( i ) = j [ 1 ] then
70485: LD_VAR 0 4
70489: PPUSH
70490: CALL_OW 269
70494: PUSH
70495: LD_VAR 0 5
70499: PUSH
70500: LD_INT 1
70502: ARRAY
70503: EQUAL
70504: IFFALSE 70522
// begin weapon := j [ 2 ] ;
70506: LD_ADDR_VAR 0 8
70510: PUSH
70511: LD_VAR 0 5
70515: PUSH
70516: LD_INT 2
70518: ARRAY
70519: ST_TO_ADDR
// break ;
70520: GO 70524
// end ;
70522: GO 70482
70524: POP
70525: POP
// if not weapon then
70526: LD_VAR 0 8
70530: NOT
70531: IFFALSE 70535
// continue ;
70533: GO 70431
// for k in factories do
70535: LD_ADDR_VAR 0 6
70539: PUSH
70540: LD_VAR 0 2
70544: PUSH
70545: FOR_IN
70546: IFFALSE 70611
// begin weapons := AvailableWeaponList ( k ) ;
70548: LD_ADDR_VAR 0 9
70552: PUSH
70553: LD_VAR 0 6
70557: PPUSH
70558: CALL_OW 478
70562: ST_TO_ADDR
// if not weapons then
70563: LD_VAR 0 9
70567: NOT
70568: IFFALSE 70572
// continue ;
70570: GO 70545
// if weapon in weapons then
70572: LD_VAR 0 8
70576: PUSH
70577: LD_VAR 0 9
70581: IN
70582: IFFALSE 70609
// begin result := [ i , weapon ] ;
70584: LD_ADDR_VAR 0 3
70588: PUSH
70589: LD_VAR 0 4
70593: PUSH
70594: LD_VAR 0 8
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: ST_TO_ADDR
// exit ;
70603: POP
70604: POP
70605: POP
70606: POP
70607: GO 70617
// end ; end ;
70609: GO 70545
70611: POP
70612: POP
// end ;
70613: GO 70431
70615: POP
70616: POP
// end ;
70617: LD_VAR 0 3
70621: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70622: LD_INT 0
70624: PPUSH
// if not side or side > 8 then
70625: LD_VAR 0 3
70629: NOT
70630: IFTRUE 70642
70632: PUSH
70633: LD_VAR 0 3
70637: PUSH
70638: LD_INT 8
70640: GREATER
70641: OR
70642: IFFALSE 70646
// exit ;
70644: GO 70705
// if not range then
70646: LD_VAR 0 4
70650: NOT
70651: IFFALSE 70662
// range := - 12 ;
70653: LD_ADDR_VAR 0 4
70657: PUSH
70658: LD_INT 12
70660: NEG
70661: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70662: LD_VAR 0 1
70666: PPUSH
70667: LD_VAR 0 2
70671: PPUSH
70672: LD_VAR 0 3
70676: PPUSH
70677: LD_VAR 0 4
70681: PPUSH
70682: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70686: LD_VAR 0 1
70690: PPUSH
70691: LD_VAR 0 2
70695: PPUSH
70696: LD_VAR 0 3
70700: PPUSH
70701: CALL_OW 331
// end ;
70705: LD_VAR 0 5
70709: RET
// export function Video ( mode ) ; begin
70710: LD_INT 0
70712: PPUSH
// ingame_video = mode ;
70713: LD_ADDR_OWVAR 52
70717: PUSH
70718: LD_VAR 0 1
70722: ST_TO_ADDR
// interface_hidden = mode ;
70723: LD_ADDR_OWVAR 54
70727: PUSH
70728: LD_VAR 0 1
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 2
70737: RET
// export function Join ( array , element ) ; begin
70738: LD_INT 0
70740: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70741: LD_ADDR_VAR 0 3
70745: PUSH
70746: LD_VAR 0 1
70750: PPUSH
70751: LD_VAR 0 1
70755: PUSH
70756: LD_INT 1
70758: PLUS
70759: PPUSH
70760: LD_VAR 0 2
70764: PPUSH
70765: CALL_OW 1
70769: ST_TO_ADDR
// end ;
70770: LD_VAR 0 3
70774: RET
// export function JoinUnion ( array , element ) ; begin
70775: LD_INT 0
70777: PPUSH
// result := array union element ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_VAR 0 1
70787: PUSH
70788: LD_VAR 0 2
70792: UNION
70793: ST_TO_ADDR
// end ;
70794: LD_VAR 0 3
70798: RET
// export function GetBehemoths ( side ) ; begin
70799: LD_INT 0
70801: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70802: LD_ADDR_VAR 0 2
70806: PUSH
70807: LD_INT 22
70809: PUSH
70810: LD_VAR 0 1
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 31
70821: PUSH
70822: LD_INT 25
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PPUSH
70833: CALL_OW 69
70837: ST_TO_ADDR
// end ;
70838: LD_VAR 0 2
70842: RET
// export function Shuffle ( array ) ; var i , index ; begin
70843: LD_INT 0
70845: PPUSH
70846: PPUSH
70847: PPUSH
// result := [ ] ;
70848: LD_ADDR_VAR 0 2
70852: PUSH
70853: EMPTY
70854: ST_TO_ADDR
// if not array then
70855: LD_VAR 0 1
70859: NOT
70860: IFFALSE 70864
// exit ;
70862: GO 70963
// Randomize ;
70864: CALL_OW 10
// for i = array downto 1 do
70868: LD_ADDR_VAR 0 3
70872: PUSH
70873: DOUBLE
70874: LD_VAR 0 1
70878: INC
70879: ST_TO_ADDR
70880: LD_INT 1
70882: PUSH
70883: FOR_DOWNTO
70884: IFFALSE 70961
// begin index := rand ( 1 , array ) ;
70886: LD_ADDR_VAR 0 4
70890: PUSH
70891: LD_INT 1
70893: PPUSH
70894: LD_VAR 0 1
70898: PPUSH
70899: CALL_OW 12
70903: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70904: LD_ADDR_VAR 0 2
70908: PUSH
70909: LD_VAR 0 2
70913: PPUSH
70914: LD_VAR 0 2
70918: PUSH
70919: LD_INT 1
70921: PLUS
70922: PPUSH
70923: LD_VAR 0 1
70927: PUSH
70928: LD_VAR 0 4
70932: ARRAY
70933: PPUSH
70934: CALL_OW 2
70938: ST_TO_ADDR
// array := Delete ( array , index ) ;
70939: LD_ADDR_VAR 0 1
70943: PUSH
70944: LD_VAR 0 1
70948: PPUSH
70949: LD_VAR 0 4
70953: PPUSH
70954: CALL_OW 3
70958: ST_TO_ADDR
// end ;
70959: GO 70883
70961: POP
70962: POP
// end ;
70963: LD_VAR 0 2
70967: RET
// export function GetBaseMaterials ( base ) ; begin
70968: LD_INT 0
70970: PPUSH
// result := [ 0 , 0 , 0 ] ;
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: ST_TO_ADDR
// if not base then
70990: LD_VAR 0 1
70994: NOT
70995: IFFALSE 70999
// exit ;
70997: GO 71048
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70999: LD_ADDR_VAR 0 2
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_INT 1
71011: PPUSH
71012: CALL_OW 275
71016: PUSH
71017: LD_VAR 0 1
71021: PPUSH
71022: LD_INT 2
71024: PPUSH
71025: CALL_OW 275
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_INT 3
71037: PPUSH
71038: CALL_OW 275
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: ST_TO_ADDR
// end ;
71048: LD_VAR 0 2
71052: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71053: LD_INT 0
71055: PPUSH
71056: PPUSH
// result := array ;
71057: LD_ADDR_VAR 0 3
71061: PUSH
71062: LD_VAR 0 1
71066: ST_TO_ADDR
// if size >= result then
71067: LD_VAR 0 2
71071: PUSH
71072: LD_VAR 0 3
71076: GREATEREQUAL
71077: IFFALSE 71081
// exit ;
71079: GO 71131
// if size then
71081: LD_VAR 0 2
71085: IFFALSE 71131
// for i := array downto size do
71087: LD_ADDR_VAR 0 4
71091: PUSH
71092: DOUBLE
71093: LD_VAR 0 1
71097: INC
71098: ST_TO_ADDR
71099: LD_VAR 0 2
71103: PUSH
71104: FOR_DOWNTO
71105: IFFALSE 71129
// result := Delete ( result , result ) ;
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: LD_VAR 0 3
71116: PPUSH
71117: LD_VAR 0 3
71121: PPUSH
71122: CALL_OW 3
71126: ST_TO_ADDR
71127: GO 71104
71129: POP
71130: POP
// end ;
71131: LD_VAR 0 3
71135: RET
// export function ComExit ( unit ) ; var tmp ; begin
71136: LD_INT 0
71138: PPUSH
71139: PPUSH
// if not IsInUnit ( unit ) then
71140: LD_VAR 0 1
71144: PPUSH
71145: CALL_OW 310
71149: NOT
71150: IFFALSE 71154
// exit ;
71152: GO 71214
// tmp := IsInUnit ( unit ) ;
71154: LD_ADDR_VAR 0 3
71158: PUSH
71159: LD_VAR 0 1
71163: PPUSH
71164: CALL_OW 310
71168: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71169: LD_VAR 0 3
71173: PPUSH
71174: CALL_OW 247
71178: PUSH
71179: LD_INT 2
71181: EQUAL
71182: IFFALSE 71195
// ComExitVehicle ( unit ) else
71184: LD_VAR 0 1
71188: PPUSH
71189: CALL_OW 121
71193: GO 71204
// ComExitBuilding ( unit ) ;
71195: LD_VAR 0 1
71199: PPUSH
71200: CALL_OW 122
// result := tmp ;
71204: LD_ADDR_VAR 0 2
71208: PUSH
71209: LD_VAR 0 3
71213: ST_TO_ADDR
// end ;
71214: LD_VAR 0 2
71218: RET
// export function ComExitAll ( units ) ; var i ; begin
71219: LD_INT 0
71221: PPUSH
71222: PPUSH
// if not units then
71223: LD_VAR 0 1
71227: NOT
71228: IFFALSE 71232
// exit ;
71230: GO 71258
// for i in units do
71232: LD_ADDR_VAR 0 3
71236: PUSH
71237: LD_VAR 0 1
71241: PUSH
71242: FOR_IN
71243: IFFALSE 71256
// ComExit ( i ) ;
71245: LD_VAR 0 3
71249: PPUSH
71250: CALL 71136 0 1
71254: GO 71242
71256: POP
71257: POP
// end ;
71258: LD_VAR 0 2
71262: RET
// export function ResetHc ; begin
71263: LD_INT 0
71265: PPUSH
// InitHc ;
71266: CALL_OW 19
// hc_importance := 0 ;
71270: LD_ADDR_OWVAR 32
71274: PUSH
71275: LD_INT 0
71277: ST_TO_ADDR
// end ;
71278: LD_VAR 0 1
71282: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71283: LD_INT 0
71285: PPUSH
71286: PPUSH
71287: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71288: LD_ADDR_VAR 0 6
71292: PUSH
71293: LD_VAR 0 1
71297: PUSH
71298: LD_VAR 0 3
71302: PLUS
71303: PUSH
71304: LD_INT 2
71306: DIV
71307: ST_TO_ADDR
// if _x < 0 then
71308: LD_VAR 0 6
71312: PUSH
71313: LD_INT 0
71315: LESS
71316: IFFALSE 71333
// _x := _x * - 1 ;
71318: LD_ADDR_VAR 0 6
71322: PUSH
71323: LD_VAR 0 6
71327: PUSH
71328: LD_INT 1
71330: NEG
71331: MUL
71332: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71333: LD_ADDR_VAR 0 7
71337: PUSH
71338: LD_VAR 0 2
71342: PUSH
71343: LD_VAR 0 4
71347: PLUS
71348: PUSH
71349: LD_INT 2
71351: DIV
71352: ST_TO_ADDR
// if _y < 0 then
71353: LD_VAR 0 7
71357: PUSH
71358: LD_INT 0
71360: LESS
71361: IFFALSE 71378
// _y := _y * - 1 ;
71363: LD_ADDR_VAR 0 7
71367: PUSH
71368: LD_VAR 0 7
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: MUL
71377: ST_TO_ADDR
// result := [ _x , _y ] ;
71378: LD_ADDR_VAR 0 5
71382: PUSH
71383: LD_VAR 0 6
71387: PUSH
71388: LD_VAR 0 7
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: ST_TO_ADDR
// end ;
71397: LD_VAR 0 5
71401: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71402: LD_INT 0
71404: PPUSH
71405: PPUSH
71406: PPUSH
71407: PPUSH
// task := GetTaskList ( unit ) ;
71408: LD_ADDR_VAR 0 7
71412: PUSH
71413: LD_VAR 0 1
71417: PPUSH
71418: CALL_OW 437
71422: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71423: LD_VAR 0 7
71427: NOT
71428: IFFALSE 71447
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: LD_VAR 0 2
71440: PPUSH
71441: CALL_OW 308
71445: NOT
71446: AND
71447: IFFALSE 71451
// exit ;
71449: GO 71569
// if IsInArea ( unit , area ) then
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_VAR 0 2
71460: PPUSH
71461: CALL_OW 308
71465: IFFALSE 71483
// begin ComMoveToArea ( unit , goAway ) ;
71467: LD_VAR 0 1
71471: PPUSH
71472: LD_VAR 0 3
71476: PPUSH
71477: CALL_OW 113
// exit ;
71481: GO 71569
// end ; if task [ 1 ] [ 1 ] <> M then
71483: LD_VAR 0 7
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PUSH
71492: LD_INT 1
71494: ARRAY
71495: PUSH
71496: LD_STRING M
71498: NONEQUAL
71499: IFFALSE 71503
// exit ;
71501: GO 71569
// x := task [ 1 ] [ 2 ] ;
71503: LD_ADDR_VAR 0 5
71507: PUSH
71508: LD_VAR 0 7
71512: PUSH
71513: LD_INT 1
71515: ARRAY
71516: PUSH
71517: LD_INT 2
71519: ARRAY
71520: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71521: LD_ADDR_VAR 0 6
71525: PUSH
71526: LD_VAR 0 7
71530: PUSH
71531: LD_INT 1
71533: ARRAY
71534: PUSH
71535: LD_INT 3
71537: ARRAY
71538: ST_TO_ADDR
// if InArea ( x , y , area ) then
71539: LD_VAR 0 5
71543: PPUSH
71544: LD_VAR 0 6
71548: PPUSH
71549: LD_VAR 0 2
71553: PPUSH
71554: CALL_OW 309
71558: IFFALSE 71569
// ComStop ( unit ) ;
71560: LD_VAR 0 1
71564: PPUSH
71565: CALL_OW 141
// end ;
71569: LD_VAR 0 4
71573: RET
// export function Abs ( value ) ; begin
71574: LD_INT 0
71576: PPUSH
// result := value ;
71577: LD_ADDR_VAR 0 2
71581: PUSH
71582: LD_VAR 0 1
71586: ST_TO_ADDR
// if value < 0 then
71587: LD_VAR 0 1
71591: PUSH
71592: LD_INT 0
71594: LESS
71595: IFFALSE 71612
// result := value * - 1 ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: LD_VAR 0 1
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: MUL
71611: ST_TO_ADDR
// end ;
71612: LD_VAR 0 2
71616: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71617: LD_INT 0
71619: PPUSH
71620: PPUSH
71621: PPUSH
71622: PPUSH
71623: PPUSH
71624: PPUSH
71625: PPUSH
71626: PPUSH
// if not unit or not building then
71627: LD_VAR 0 1
71631: NOT
71632: IFTRUE 71641
71634: PUSH
71635: LD_VAR 0 2
71639: NOT
71640: OR
71641: IFFALSE 71645
// exit ;
71643: GO 71873
// x := GetX ( building ) ;
71645: LD_ADDR_VAR 0 4
71649: PUSH
71650: LD_VAR 0 2
71654: PPUSH
71655: CALL_OW 250
71659: ST_TO_ADDR
// y := GetY ( building ) ;
71660: LD_ADDR_VAR 0 6
71664: PUSH
71665: LD_VAR 0 2
71669: PPUSH
71670: CALL_OW 251
71674: ST_TO_ADDR
// d := GetDir ( building ) ;
71675: LD_ADDR_VAR 0 8
71679: PUSH
71680: LD_VAR 0 2
71684: PPUSH
71685: CALL_OW 254
71689: ST_TO_ADDR
// r := 4 ;
71690: LD_ADDR_VAR 0 9
71694: PUSH
71695: LD_INT 4
71697: ST_TO_ADDR
// for i := 1 to 5 do
71698: LD_ADDR_VAR 0 10
71702: PUSH
71703: DOUBLE
71704: LD_INT 1
71706: DEC
71707: ST_TO_ADDR
71708: LD_INT 5
71710: PUSH
71711: FOR_TO
71712: IFFALSE 71871
// begin _x := ShiftX ( x , d , r + i ) ;
71714: LD_ADDR_VAR 0 5
71718: PUSH
71719: LD_VAR 0 4
71723: PPUSH
71724: LD_VAR 0 8
71728: PPUSH
71729: LD_VAR 0 9
71733: PUSH
71734: LD_VAR 0 10
71738: PLUS
71739: PPUSH
71740: CALL_OW 272
71744: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71745: LD_ADDR_VAR 0 7
71749: PUSH
71750: LD_VAR 0 6
71754: PPUSH
71755: LD_VAR 0 8
71759: PPUSH
71760: LD_VAR 0 9
71764: PUSH
71765: LD_VAR 0 10
71769: PLUS
71770: PPUSH
71771: CALL_OW 273
71775: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71776: LD_VAR 0 5
71780: PPUSH
71781: LD_VAR 0 7
71785: PPUSH
71786: CALL_OW 488
71790: IFFALSE 71825
71792: PUSH
71793: LD_VAR 0 5
71797: PPUSH
71798: LD_VAR 0 7
71802: PPUSH
71803: CALL_OW 428
71807: PPUSH
71808: CALL_OW 247
71812: PUSH
71813: LD_INT 3
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: IN
71823: NOT
71824: AND
71825: IFFALSE 71869
// begin ComMoveXY ( unit , _x , _y ) ;
71827: LD_VAR 0 1
71831: PPUSH
71832: LD_VAR 0 5
71836: PPUSH
71837: LD_VAR 0 7
71841: PPUSH
71842: CALL_OW 111
// result := [ _x , _y ] ;
71846: LD_ADDR_VAR 0 3
71850: PUSH
71851: LD_VAR 0 5
71855: PUSH
71856: LD_VAR 0 7
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: ST_TO_ADDR
// exit ;
71865: POP
71866: POP
71867: GO 71873
// end ; end ;
71869: GO 71711
71871: POP
71872: POP
// end ;
71873: LD_VAR 0 3
71877: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71878: LD_INT 0
71880: PPUSH
71881: PPUSH
71882: PPUSH
// result := 0 ;
71883: LD_ADDR_VAR 0 3
71887: PUSH
71888: LD_INT 0
71890: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71891: LD_VAR 0 1
71895: PUSH
71896: LD_INT 0
71898: LESS
71899: IFTRUE 71911
71901: PUSH
71902: LD_VAR 0 1
71906: PUSH
71907: LD_INT 8
71909: GREATER
71910: OR
71911: IFTRUE 71923
71913: PUSH
71914: LD_VAR 0 2
71918: PUSH
71919: LD_INT 0
71921: LESS
71922: OR
71923: IFTRUE 71935
71925: PUSH
71926: LD_VAR 0 2
71930: PUSH
71931: LD_INT 8
71933: GREATER
71934: OR
71935: IFFALSE 71939
// exit ;
71937: GO 72014
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71939: LD_ADDR_VAR 0 4
71943: PUSH
71944: LD_INT 22
71946: PUSH
71947: LD_VAR 0 2
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PPUSH
71956: CALL_OW 69
71960: PUSH
71961: FOR_IN
71962: IFFALSE 72012
// begin un := UnitShoot ( i ) ;
71964: LD_ADDR_VAR 0 5
71968: PUSH
71969: LD_VAR 0 4
71973: PPUSH
71974: CALL_OW 504
71978: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71979: LD_VAR 0 5
71983: PPUSH
71984: CALL_OW 255
71988: PUSH
71989: LD_VAR 0 1
71993: EQUAL
71994: IFFALSE 72010
// begin result := un ;
71996: LD_ADDR_VAR 0 3
72000: PUSH
72001: LD_VAR 0 5
72005: ST_TO_ADDR
// exit ;
72006: POP
72007: POP
72008: GO 72014
// end ; end ;
72010: GO 71961
72012: POP
72013: POP
// end ;
72014: LD_VAR 0 3
72018: RET
// export function GetCargoBay ( units ) ; begin
72019: LD_INT 0
72021: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72022: LD_ADDR_VAR 0 2
72026: PUSH
72027: LD_VAR 0 1
72031: PPUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 34
72037: PUSH
72038: LD_INT 12
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 34
72047: PUSH
72048: LD_INT 51
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 34
72057: PUSH
72058: LD_INT 32
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 34
72067: PUSH
72068: LD_INT 89
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: PPUSH
72082: CALL_OW 72
72086: ST_TO_ADDR
// end ;
72087: LD_VAR 0 2
72091: RET
// export function Negate ( value ) ; begin
72092: LD_INT 0
72094: PPUSH
// result := not value ;
72095: LD_ADDR_VAR 0 2
72099: PUSH
72100: LD_VAR 0 1
72104: NOT
72105: ST_TO_ADDR
// end ;
72106: LD_VAR 0 2
72110: RET
// export function Inc ( value ) ; begin
72111: LD_INT 0
72113: PPUSH
// result := value + 1 ;
72114: LD_ADDR_VAR 0 2
72118: PUSH
72119: LD_VAR 0 1
72123: PUSH
72124: LD_INT 1
72126: PLUS
72127: ST_TO_ADDR
// end ;
72128: LD_VAR 0 2
72132: RET
// export function Dec ( value ) ; begin
72133: LD_INT 0
72135: PPUSH
// result := value - 1 ;
72136: LD_ADDR_VAR 0 2
72140: PUSH
72141: LD_VAR 0 1
72145: PUSH
72146: LD_INT 1
72148: MINUS
72149: ST_TO_ADDR
// end ;
72150: LD_VAR 0 2
72154: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72155: LD_INT 0
72157: PPUSH
72158: PPUSH
72159: PPUSH
72160: PPUSH
72161: PPUSH
72162: PPUSH
72163: PPUSH
72164: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72165: LD_VAR 0 1
72169: PPUSH
72170: LD_VAR 0 2
72174: PPUSH
72175: CALL_OW 488
72179: NOT
72180: IFTRUE 72199
72182: PUSH
72183: LD_VAR 0 3
72187: PPUSH
72188: LD_VAR 0 4
72192: PPUSH
72193: CALL_OW 488
72197: NOT
72198: OR
72199: IFFALSE 72212
// begin result := - 1 ;
72201: LD_ADDR_VAR 0 5
72205: PUSH
72206: LD_INT 1
72208: NEG
72209: ST_TO_ADDR
// exit ;
72210: GO 72447
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72212: LD_ADDR_VAR 0 12
72216: PUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: LD_VAR 0 4
72236: PPUSH
72237: CALL 71283 0 4
72241: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72242: LD_ADDR_VAR 0 11
72246: PUSH
72247: LD_VAR 0 1
72251: PPUSH
72252: LD_VAR 0 2
72256: PPUSH
72257: LD_VAR 0 12
72261: PUSH
72262: LD_INT 1
72264: ARRAY
72265: PPUSH
72266: LD_VAR 0 12
72270: PUSH
72271: LD_INT 2
72273: ARRAY
72274: PPUSH
72275: CALL_OW 298
72279: ST_TO_ADDR
// distance := 9999 ;
72280: LD_ADDR_VAR 0 10
72284: PUSH
72285: LD_INT 9999
72287: ST_TO_ADDR
// for i := 0 to 5 do
72288: LD_ADDR_VAR 0 6
72292: PUSH
72293: DOUBLE
72294: LD_INT 0
72296: DEC
72297: ST_TO_ADDR
72298: LD_INT 5
72300: PUSH
72301: FOR_TO
72302: IFFALSE 72445
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72304: LD_ADDR_VAR 0 7
72308: PUSH
72309: LD_VAR 0 1
72313: PPUSH
72314: LD_VAR 0 6
72318: PPUSH
72319: LD_VAR 0 11
72323: PPUSH
72324: CALL_OW 272
72328: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72329: LD_ADDR_VAR 0 8
72333: PUSH
72334: LD_VAR 0 2
72338: PPUSH
72339: LD_VAR 0 6
72343: PPUSH
72344: LD_VAR 0 11
72348: PPUSH
72349: CALL_OW 273
72353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72354: LD_VAR 0 7
72358: PPUSH
72359: LD_VAR 0 8
72363: PPUSH
72364: CALL_OW 488
72368: NOT
72369: IFFALSE 72373
// continue ;
72371: GO 72301
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72373: LD_ADDR_VAR 0 9
72377: PUSH
72378: LD_VAR 0 12
72382: PUSH
72383: LD_INT 1
72385: ARRAY
72386: PPUSH
72387: LD_VAR 0 12
72391: PUSH
72392: LD_INT 2
72394: ARRAY
72395: PPUSH
72396: LD_VAR 0 7
72400: PPUSH
72401: LD_VAR 0 8
72405: PPUSH
72406: CALL_OW 298
72410: ST_TO_ADDR
// if tmp < distance then
72411: LD_VAR 0 9
72415: PUSH
72416: LD_VAR 0 10
72420: LESS
72421: IFFALSE 72443
// begin result := i ;
72423: LD_ADDR_VAR 0 5
72427: PUSH
72428: LD_VAR 0 6
72432: ST_TO_ADDR
// distance := tmp ;
72433: LD_ADDR_VAR 0 10
72437: PUSH
72438: LD_VAR 0 9
72442: ST_TO_ADDR
// end ; end ;
72443: GO 72301
72445: POP
72446: POP
// end ;
72447: LD_VAR 0 5
72451: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72452: LD_INT 0
72454: PPUSH
72455: PPUSH
// if not driver or not IsInUnit ( driver ) then
72456: LD_VAR 0 1
72460: NOT
72461: IFTRUE 72475
72463: PUSH
72464: LD_VAR 0 1
72468: PPUSH
72469: CALL_OW 310
72473: NOT
72474: OR
72475: IFFALSE 72479
// exit ;
72477: GO 72569
// vehicle := IsInUnit ( driver ) ;
72479: LD_ADDR_VAR 0 3
72483: PUSH
72484: LD_VAR 0 1
72488: PPUSH
72489: CALL_OW 310
72493: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72494: LD_VAR 0 1
72498: PPUSH
72499: LD_STRING \
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 0
72513: PUSH
72514: LD_INT 0
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: PUSH
72529: LD_STRING E
72531: PUSH
72532: LD_INT 0
72534: PUSH
72535: LD_INT 0
72537: PUSH
72538: LD_VAR 0 3
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: LD_INT 0
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PPUSH
72565: CALL_OW 446
// end ;
72569: LD_VAR 0 2
72573: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72574: LD_INT 0
72576: PPUSH
72577: PPUSH
// if not driver or not IsInUnit ( driver ) then
72578: LD_VAR 0 1
72582: NOT
72583: IFTRUE 72597
72585: PUSH
72586: LD_VAR 0 1
72590: PPUSH
72591: CALL_OW 310
72595: NOT
72596: OR
72597: IFFALSE 72601
// exit ;
72599: GO 72691
// vehicle := IsInUnit ( driver ) ;
72601: LD_ADDR_VAR 0 3
72605: PUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: CALL_OW 310
72615: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72616: LD_VAR 0 1
72620: PPUSH
72621: LD_STRING \
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: LD_INT 0
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: PUSH
72651: LD_STRING E
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: LD_VAR 0 3
72664: PUSH
72665: LD_INT 0
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PPUSH
72687: CALL_OW 447
// end ;
72691: LD_VAR 0 2
72695: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72696: LD_INT 0
72698: PPUSH
72699: PPUSH
72700: PPUSH
// tmp := [ ] ;
72701: LD_ADDR_VAR 0 5
72705: PUSH
72706: EMPTY
72707: ST_TO_ADDR
// for i in units do
72708: LD_ADDR_VAR 0 4
72712: PUSH
72713: LD_VAR 0 1
72717: PUSH
72718: FOR_IN
72719: IFFALSE 72757
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72721: LD_ADDR_VAR 0 5
72725: PUSH
72726: LD_VAR 0 5
72730: PPUSH
72731: LD_VAR 0 5
72735: PUSH
72736: LD_INT 1
72738: PLUS
72739: PPUSH
72740: LD_VAR 0 4
72744: PPUSH
72745: CALL_OW 256
72749: PPUSH
72750: CALL_OW 2
72754: ST_TO_ADDR
72755: GO 72718
72757: POP
72758: POP
// if not tmp then
72759: LD_VAR 0 5
72763: NOT
72764: IFFALSE 72768
// exit ;
72766: GO 72816
// if asc then
72768: LD_VAR 0 2
72772: IFFALSE 72796
// result := SortListByListAsc ( units , tmp ) else
72774: LD_ADDR_VAR 0 3
72778: PUSH
72779: LD_VAR 0 1
72783: PPUSH
72784: LD_VAR 0 5
72788: PPUSH
72789: CALL_OW 76
72793: ST_TO_ADDR
72794: GO 72816
// result := SortListByListDesc ( units , tmp ) ;
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: LD_VAR 0 1
72805: PPUSH
72806: LD_VAR 0 5
72810: PPUSH
72811: CALL_OW 77
72815: ST_TO_ADDR
// end ;
72816: LD_VAR 0 3
72820: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72821: LD_INT 0
72823: PPUSH
72824: PPUSH
// task := GetTaskList ( mech ) ;
72825: LD_ADDR_VAR 0 4
72829: PUSH
72830: LD_VAR 0 1
72834: PPUSH
72835: CALL_OW 437
72839: ST_TO_ADDR
// if not task then
72840: LD_VAR 0 4
72844: NOT
72845: IFFALSE 72849
// exit ;
72847: GO 72893
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72849: LD_ADDR_VAR 0 3
72853: PUSH
72854: LD_VAR 0 4
72858: PUSH
72859: LD_INT 1
72861: ARRAY
72862: PUSH
72863: LD_INT 1
72865: ARRAY
72866: PUSH
72867: LD_STRING r
72869: EQUAL
72870: IFFALSE 72892
72872: PUSH
72873: LD_VAR 0 4
72877: PUSH
72878: LD_INT 1
72880: ARRAY
72881: PUSH
72882: LD_INT 4
72884: ARRAY
72885: PUSH
72886: LD_VAR 0 2
72890: EQUAL
72891: AND
72892: ST_TO_ADDR
// end ;
72893: LD_VAR 0 3
72897: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72898: LD_INT 0
72900: PPUSH
// SetDir ( unit , d ) ;
72901: LD_VAR 0 1
72905: PPUSH
72906: LD_VAR 0 4
72910: PPUSH
72911: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72915: LD_ADDR_VAR 0 6
72919: PUSH
72920: LD_VAR 0 1
72924: PPUSH
72925: LD_VAR 0 2
72929: PPUSH
72930: LD_VAR 0 3
72934: PPUSH
72935: LD_VAR 0 5
72939: PPUSH
72940: CALL_OW 48
72944: ST_TO_ADDR
// end ;
72945: LD_VAR 0 6
72949: RET
// export function ToNaturalNumber ( number ) ; begin
72950: LD_INT 0
72952: PPUSH
// result := number div 1 ;
72953: LD_ADDR_VAR 0 2
72957: PUSH
72958: LD_VAR 0 1
72962: PUSH
72963: LD_INT 1
72965: DIV
72966: ST_TO_ADDR
// if number < 0 then
72967: LD_VAR 0 1
72971: PUSH
72972: LD_INT 0
72974: LESS
72975: IFFALSE 72985
// result := 0 ;
72977: LD_ADDR_VAR 0 2
72981: PUSH
72982: LD_INT 0
72984: ST_TO_ADDR
// end ;
72985: LD_VAR 0 2
72989: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72990: LD_INT 0
72992: PPUSH
72993: PPUSH
72994: PPUSH
// if not buildings then
72995: LD_VAR 0 1
72999: NOT
73000: IFFALSE 73004
// exit ;
73002: GO 73119
// tmp := [ ] ;
73004: LD_ADDR_VAR 0 5
73008: PUSH
73009: EMPTY
73010: ST_TO_ADDR
// for b in buildings do
73011: LD_ADDR_VAR 0 4
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: FOR_IN
73022: IFFALSE 73060
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73024: LD_ADDR_VAR 0 5
73028: PUSH
73029: LD_VAR 0 5
73033: PPUSH
73034: LD_VAR 0 5
73038: PUSH
73039: LD_INT 1
73041: PLUS
73042: PPUSH
73043: LD_VAR 0 4
73047: PPUSH
73048: CALL_OW 266
73052: PPUSH
73053: CALL_OW 1
73057: ST_TO_ADDR
73058: GO 73021
73060: POP
73061: POP
// if not tmp then
73062: LD_VAR 0 5
73066: NOT
73067: IFFALSE 73071
// exit ;
73069: GO 73119
// if asc then
73071: LD_VAR 0 2
73075: IFFALSE 73099
// result := SortListByListAsc ( buildings , tmp ) else
73077: LD_ADDR_VAR 0 3
73081: PUSH
73082: LD_VAR 0 1
73086: PPUSH
73087: LD_VAR 0 5
73091: PPUSH
73092: CALL_OW 76
73096: ST_TO_ADDR
73097: GO 73119
// result := SortListByListDesc ( buildings , tmp ) ;
73099: LD_ADDR_VAR 0 3
73103: PUSH
73104: LD_VAR 0 1
73108: PPUSH
73109: LD_VAR 0 5
73113: PPUSH
73114: CALL_OW 77
73118: ST_TO_ADDR
// end ;
73119: LD_VAR 0 3
73123: RET
// export function SortByClass ( units , class ) ; var un ; begin
73124: LD_INT 0
73126: PPUSH
73127: PPUSH
// if not units or not class then
73128: LD_VAR 0 1
73132: NOT
73133: IFTRUE 73142
73135: PUSH
73136: LD_VAR 0 2
73140: NOT
73141: OR
73142: IFFALSE 73146
// exit ;
73144: GO 73241
// result := [ ] ;
73146: LD_ADDR_VAR 0 3
73150: PUSH
73151: EMPTY
73152: ST_TO_ADDR
// for un in units do
73153: LD_ADDR_VAR 0 4
73157: PUSH
73158: LD_VAR 0 1
73162: PUSH
73163: FOR_IN
73164: IFFALSE 73239
// if GetClass ( un ) = class then
73166: LD_VAR 0 4
73170: PPUSH
73171: CALL_OW 257
73175: PUSH
73176: LD_VAR 0 2
73180: EQUAL
73181: IFFALSE 73208
// result := Insert ( result , 1 , un ) else
73183: LD_ADDR_VAR 0 3
73187: PUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: LD_INT 1
73195: PPUSH
73196: LD_VAR 0 4
73200: PPUSH
73201: CALL_OW 2
73205: ST_TO_ADDR
73206: GO 73237
// result := Replace ( result , result + 1 , un ) ;
73208: LD_ADDR_VAR 0 3
73212: PUSH
73213: LD_VAR 0 3
73217: PPUSH
73218: LD_VAR 0 3
73222: PUSH
73223: LD_INT 1
73225: PLUS
73226: PPUSH
73227: LD_VAR 0 4
73231: PPUSH
73232: CALL_OW 1
73236: ST_TO_ADDR
73237: GO 73163
73239: POP
73240: POP
// end ;
73241: LD_VAR 0 3
73245: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73246: LD_INT 0
73248: PPUSH
73249: PPUSH
73250: PPUSH
73251: PPUSH
73252: PPUSH
73253: PPUSH
73254: PPUSH
// result := [ ] ;
73255: LD_ADDR_VAR 0 4
73259: PUSH
73260: EMPTY
73261: ST_TO_ADDR
// if x - r < 0 then
73262: LD_VAR 0 1
73266: PUSH
73267: LD_VAR 0 3
73271: MINUS
73272: PUSH
73273: LD_INT 0
73275: LESS
73276: IFFALSE 73288
// min_x := 0 else
73278: LD_ADDR_VAR 0 8
73282: PUSH
73283: LD_INT 0
73285: ST_TO_ADDR
73286: GO 73304
// min_x := x - r ;
73288: LD_ADDR_VAR 0 8
73292: PUSH
73293: LD_VAR 0 1
73297: PUSH
73298: LD_VAR 0 3
73302: MINUS
73303: ST_TO_ADDR
// if y - r < 0 then
73304: LD_VAR 0 2
73308: PUSH
73309: LD_VAR 0 3
73313: MINUS
73314: PUSH
73315: LD_INT 0
73317: LESS
73318: IFFALSE 73330
// min_y := 0 else
73320: LD_ADDR_VAR 0 7
73324: PUSH
73325: LD_INT 0
73327: ST_TO_ADDR
73328: GO 73346
// min_y := y - r ;
73330: LD_ADDR_VAR 0 7
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_VAR 0 3
73344: MINUS
73345: ST_TO_ADDR
// max_x := x + r ;
73346: LD_ADDR_VAR 0 9
73350: PUSH
73351: LD_VAR 0 1
73355: PUSH
73356: LD_VAR 0 3
73360: PLUS
73361: ST_TO_ADDR
// max_y := y + r ;
73362: LD_ADDR_VAR 0 10
73366: PUSH
73367: LD_VAR 0 2
73371: PUSH
73372: LD_VAR 0 3
73376: PLUS
73377: ST_TO_ADDR
// for _x = min_x to max_x do
73378: LD_ADDR_VAR 0 5
73382: PUSH
73383: DOUBLE
73384: LD_VAR 0 8
73388: DEC
73389: ST_TO_ADDR
73390: LD_VAR 0 9
73394: PUSH
73395: FOR_TO
73396: IFFALSE 73497
// for _y = min_y to max_y do
73398: LD_ADDR_VAR 0 6
73402: PUSH
73403: DOUBLE
73404: LD_VAR 0 7
73408: DEC
73409: ST_TO_ADDR
73410: LD_VAR 0 10
73414: PUSH
73415: FOR_TO
73416: IFFALSE 73493
// begin if not ValidHex ( _x , _y ) then
73418: LD_VAR 0 5
73422: PPUSH
73423: LD_VAR 0 6
73427: PPUSH
73428: CALL_OW 488
73432: NOT
73433: IFFALSE 73437
// continue ;
73435: GO 73415
// if GetResourceTypeXY ( _x , _y ) then
73437: LD_VAR 0 5
73441: PPUSH
73442: LD_VAR 0 6
73446: PPUSH
73447: CALL_OW 283
73451: IFFALSE 73491
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73453: LD_ADDR_VAR 0 4
73457: PUSH
73458: LD_VAR 0 4
73462: PPUSH
73463: LD_VAR 0 4
73467: PUSH
73468: LD_INT 1
73470: PLUS
73471: PPUSH
73472: LD_VAR 0 5
73476: PUSH
73477: LD_VAR 0 6
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PPUSH
73486: CALL_OW 1
73490: ST_TO_ADDR
// end ;
73491: GO 73415
73493: POP
73494: POP
73495: GO 73395
73497: POP
73498: POP
// end ;
73499: LD_VAR 0 4
73503: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
73508: PPUSH
73509: PPUSH
73510: PPUSH
73511: PPUSH
73512: PPUSH
73513: PPUSH
// if not units then
73514: LD_VAR 0 1
73518: NOT
73519: IFFALSE 73523
// exit ;
73521: GO 74055
// result := UnitFilter ( units , [ f_ok ] ) ;
73523: LD_ADDR_VAR 0 3
73527: PUSH
73528: LD_VAR 0 1
73532: PPUSH
73533: LD_INT 50
73535: PUSH
73536: EMPTY
73537: LIST
73538: PPUSH
73539: CALL_OW 72
73543: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73544: LD_ADDR_VAR 0 8
73548: PUSH
73549: LD_VAR 0 1
73553: PUSH
73554: LD_INT 1
73556: ARRAY
73557: PPUSH
73558: CALL_OW 255
73562: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73563: LD_ADDR_VAR 0 10
73567: PUSH
73568: LD_INT 29
73570: PUSH
73571: LD_INT 91
73573: PUSH
73574: LD_INT 49
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: ST_TO_ADDR
// if not result then
73582: LD_VAR 0 3
73586: NOT
73587: IFFALSE 73591
// exit ;
73589: GO 74055
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73591: LD_ADDR_VAR 0 5
73595: PUSH
73596: LD_INT 81
73598: PUSH
73599: LD_VAR 0 8
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PPUSH
73608: CALL_OW 69
73612: ST_TO_ADDR
// for i in result do
73613: LD_ADDR_VAR 0 4
73617: PUSH
73618: LD_VAR 0 3
73622: PUSH
73623: FOR_IN
73624: IFFALSE 74053
// begin tag := GetTag ( i ) + 1 ;
73626: LD_ADDR_VAR 0 9
73630: PUSH
73631: LD_VAR 0 4
73635: PPUSH
73636: CALL_OW 110
73640: PUSH
73641: LD_INT 1
73643: PLUS
73644: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73645: LD_ADDR_VAR 0 7
73649: PUSH
73650: LD_VAR 0 4
73654: PPUSH
73655: CALL_OW 250
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: CALL_OW 251
73669: PPUSH
73670: LD_INT 4
73672: PPUSH
73673: CALL 73246 0 3
73677: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73678: LD_VAR 0 4
73682: PPUSH
73683: CALL_OW 247
73687: PUSH
73688: LD_INT 2
73690: EQUAL
73691: IFFALSE 73703
73693: PUSH
73694: LD_VAR 0 7
73698: PUSH
73699: LD_INT 2
73701: GREATER
73702: AND
73703: IFFALSE 73723
73705: PUSH
73706: LD_VAR 0 4
73710: PPUSH
73711: CALL_OW 264
73715: PUSH
73716: LD_VAR 0 10
73720: IN
73721: NOT
73722: AND
73723: IFFALSE 73762
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73725: LD_VAR 0 4
73729: PPUSH
73730: LD_VAR 0 7
73734: PUSH
73735: LD_INT 1
73737: ARRAY
73738: PUSH
73739: LD_INT 1
73741: ARRAY
73742: PPUSH
73743: LD_VAR 0 7
73747: PUSH
73748: LD_INT 1
73750: ARRAY
73751: PUSH
73752: LD_INT 2
73754: ARRAY
73755: PPUSH
73756: CALL_OW 116
73760: GO 74051
// if path > tag then
73762: LD_VAR 0 2
73766: PUSH
73767: LD_VAR 0 9
73771: GREATER
73772: IFFALSE 73980
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73774: LD_ADDR_VAR 0 6
73778: PUSH
73779: LD_VAR 0 5
73783: PPUSH
73784: LD_INT 91
73786: PUSH
73787: LD_VAR 0 4
73791: PUSH
73792: LD_INT 8
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: LIST
73799: PPUSH
73800: CALL_OW 72
73804: ST_TO_ADDR
// if nearEnemy then
73805: LD_VAR 0 6
73809: IFFALSE 73878
// begin if GetWeapon ( i ) = ru_time_lapser then
73811: LD_VAR 0 4
73815: PPUSH
73816: CALL_OW 264
73820: PUSH
73821: LD_INT 49
73823: EQUAL
73824: IFFALSE 73852
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73826: LD_VAR 0 4
73830: PPUSH
73831: LD_VAR 0 6
73835: PPUSH
73836: LD_VAR 0 4
73840: PPUSH
73841: CALL_OW 74
73845: PPUSH
73846: CALL_OW 112
73850: GO 73876
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73852: LD_VAR 0 4
73856: PPUSH
73857: LD_VAR 0 6
73861: PPUSH
73862: LD_VAR 0 4
73866: PPUSH
73867: CALL_OW 74
73871: PPUSH
73872: CALL 75136 0 2
// end else
73876: GO 73978
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73878: LD_VAR 0 4
73882: PPUSH
73883: LD_VAR 0 2
73887: PUSH
73888: LD_VAR 0 9
73892: ARRAY
73893: PUSH
73894: LD_INT 1
73896: ARRAY
73897: PPUSH
73898: LD_VAR 0 2
73902: PUSH
73903: LD_VAR 0 9
73907: ARRAY
73908: PUSH
73909: LD_INT 2
73911: ARRAY
73912: PPUSH
73913: CALL_OW 297
73917: PUSH
73918: LD_INT 6
73920: GREATER
73921: IFFALSE 73964
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73923: LD_VAR 0 4
73927: PPUSH
73928: LD_VAR 0 2
73932: PUSH
73933: LD_VAR 0 9
73937: ARRAY
73938: PUSH
73939: LD_INT 1
73941: ARRAY
73942: PPUSH
73943: LD_VAR 0 2
73947: PUSH
73948: LD_VAR 0 9
73952: ARRAY
73953: PUSH
73954: LD_INT 2
73956: ARRAY
73957: PPUSH
73958: CALL_OW 114
73962: GO 73978
// SetTag ( i , tag ) ;
73964: LD_VAR 0 4
73968: PPUSH
73969: LD_VAR 0 9
73973: PPUSH
73974: CALL_OW 109
// end else
73978: GO 74051
// if enemy then
73980: LD_VAR 0 5
73984: IFFALSE 74051
// begin if GetWeapon ( i ) = ru_time_lapser then
73986: LD_VAR 0 4
73990: PPUSH
73991: CALL_OW 264
73995: PUSH
73996: LD_INT 49
73998: EQUAL
73999: IFFALSE 74027
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74001: LD_VAR 0 4
74005: PPUSH
74006: LD_VAR 0 5
74010: PPUSH
74011: LD_VAR 0 4
74015: PPUSH
74016: CALL_OW 74
74020: PPUSH
74021: CALL_OW 112
74025: GO 74051
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74027: LD_VAR 0 4
74031: PPUSH
74032: LD_VAR 0 5
74036: PPUSH
74037: LD_VAR 0 4
74041: PPUSH
74042: CALL_OW 74
74046: PPUSH
74047: CALL 75136 0 2
// end ; end ;
74051: GO 73623
74053: POP
74054: POP
// end ;
74055: LD_VAR 0 3
74059: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74060: LD_INT 0
74062: PPUSH
74063: PPUSH
74064: PPUSH
// if not unit or IsInUnit ( unit ) then
74065: LD_VAR 0 1
74069: NOT
74070: IFTRUE 74083
74072: PUSH
74073: LD_VAR 0 1
74077: PPUSH
74078: CALL_OW 310
74082: OR
74083: IFFALSE 74087
// exit ;
74085: GO 74178
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74087: LD_ADDR_VAR 0 4
74091: PUSH
74092: LD_VAR 0 1
74096: PPUSH
74097: CALL_OW 250
74101: PPUSH
74102: LD_VAR 0 2
74106: PPUSH
74107: LD_INT 1
74109: PPUSH
74110: CALL_OW 272
74114: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74115: LD_ADDR_VAR 0 5
74119: PUSH
74120: LD_VAR 0 1
74124: PPUSH
74125: CALL_OW 251
74129: PPUSH
74130: LD_VAR 0 2
74134: PPUSH
74135: LD_INT 1
74137: PPUSH
74138: CALL_OW 273
74142: ST_TO_ADDR
// if ValidHex ( x , y ) then
74143: LD_VAR 0 4
74147: PPUSH
74148: LD_VAR 0 5
74152: PPUSH
74153: CALL_OW 488
74157: IFFALSE 74178
// ComTurnXY ( unit , x , y ) ;
74159: LD_VAR 0 1
74163: PPUSH
74164: LD_VAR 0 4
74168: PPUSH
74169: LD_VAR 0 5
74173: PPUSH
74174: CALL_OW 118
// end ;
74178: LD_VAR 0 3
74182: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74183: LD_INT 0
74185: PPUSH
74186: PPUSH
// result := false ;
74187: LD_ADDR_VAR 0 3
74191: PUSH
74192: LD_INT 0
74194: ST_TO_ADDR
// if not units then
74195: LD_VAR 0 2
74199: NOT
74200: IFFALSE 74204
// exit ;
74202: GO 74249
// for i in units do
74204: LD_ADDR_VAR 0 4
74208: PUSH
74209: LD_VAR 0 2
74213: PUSH
74214: FOR_IN
74215: IFFALSE 74247
// if See ( side , i ) then
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_VAR 0 4
74226: PPUSH
74227: CALL_OW 292
74231: IFFALSE 74245
// begin result := true ;
74233: LD_ADDR_VAR 0 3
74237: PUSH
74238: LD_INT 1
74240: ST_TO_ADDR
// exit ;
74241: POP
74242: POP
74243: GO 74249
// end ;
74245: GO 74214
74247: POP
74248: POP
// end ;
74249: LD_VAR 0 3
74253: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74254: LD_INT 0
74256: PPUSH
74257: PPUSH
74258: PPUSH
74259: PPUSH
// if not unit or not points then
74260: LD_VAR 0 1
74264: NOT
74265: IFTRUE 74274
74267: PUSH
74268: LD_VAR 0 2
74272: NOT
74273: OR
74274: IFFALSE 74278
// exit ;
74276: GO 74368
// dist := 99999 ;
74278: LD_ADDR_VAR 0 5
74282: PUSH
74283: LD_INT 99999
74285: ST_TO_ADDR
// for i in points do
74286: LD_ADDR_VAR 0 4
74290: PUSH
74291: LD_VAR 0 2
74295: PUSH
74296: FOR_IN
74297: IFFALSE 74366
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74299: LD_ADDR_VAR 0 6
74303: PUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 4
74313: PUSH
74314: LD_INT 1
74316: ARRAY
74317: PPUSH
74318: LD_VAR 0 4
74322: PUSH
74323: LD_INT 2
74325: ARRAY
74326: PPUSH
74327: CALL_OW 297
74331: ST_TO_ADDR
// if tmpDist < dist then
74332: LD_VAR 0 6
74336: PUSH
74337: LD_VAR 0 5
74341: LESS
74342: IFFALSE 74364
// begin result := i ;
74344: LD_ADDR_VAR 0 3
74348: PUSH
74349: LD_VAR 0 4
74353: ST_TO_ADDR
// dist := tmpDist ;
74354: LD_ADDR_VAR 0 5
74358: PUSH
74359: LD_VAR 0 6
74363: ST_TO_ADDR
// end ; end ;
74364: GO 74296
74366: POP
74367: POP
// end ;
74368: LD_VAR 0 3
74372: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74373: LD_INT 0
74375: PPUSH
// uc_side := side ;
74376: LD_ADDR_OWVAR 20
74380: PUSH
74381: LD_VAR 0 1
74385: ST_TO_ADDR
// uc_nation := 3 ;
74386: LD_ADDR_OWVAR 21
74390: PUSH
74391: LD_INT 3
74393: ST_TO_ADDR
// vc_chassis := 25 ;
74394: LD_ADDR_OWVAR 37
74398: PUSH
74399: LD_INT 25
74401: ST_TO_ADDR
// vc_engine := engine_siberite ;
74402: LD_ADDR_OWVAR 39
74406: PUSH
74407: LD_INT 3
74409: ST_TO_ADDR
// vc_control := control_computer ;
74410: LD_ADDR_OWVAR 38
74414: PUSH
74415: LD_INT 3
74417: ST_TO_ADDR
// vc_weapon := 59 ;
74418: LD_ADDR_OWVAR 40
74422: PUSH
74423: LD_INT 59
74425: ST_TO_ADDR
// result := CreateVehicle ;
74426: LD_ADDR_VAR 0 5
74430: PUSH
74431: CALL_OW 45
74435: ST_TO_ADDR
// SetDir ( result , d ) ;
74436: LD_VAR 0 5
74440: PPUSH
74441: LD_VAR 0 4
74445: PPUSH
74446: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74450: LD_VAR 0 5
74454: PPUSH
74455: LD_VAR 0 2
74459: PPUSH
74460: LD_VAR 0 3
74464: PPUSH
74465: LD_INT 0
74467: PPUSH
74468: CALL_OW 48
// end ;
74472: LD_VAR 0 5
74476: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74477: LD_INT 0
74479: PPUSH
74480: PPUSH
74481: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74482: LD_ADDR_VAR 0 2
74486: PUSH
74487: LD_INT 0
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: LD_INT 0
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74505: LD_VAR 0 1
74509: NOT
74510: IFTRUE 74543
74512: PUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 264
74522: PUSH
74523: LD_INT 12
74525: PUSH
74526: LD_INT 51
74528: PUSH
74529: LD_INT 32
74531: PUSH
74532: LD_INT 89
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: IN
74541: NOT
74542: OR
74543: IFFALSE 74547
// exit ;
74545: GO 74645
// for i := 1 to 3 do
74547: LD_ADDR_VAR 0 3
74551: PUSH
74552: DOUBLE
74553: LD_INT 1
74555: DEC
74556: ST_TO_ADDR
74557: LD_INT 3
74559: PUSH
74560: FOR_TO
74561: IFFALSE 74643
// begin tmp := GetCargo ( cargo , i ) ;
74563: LD_ADDR_VAR 0 4
74567: PUSH
74568: LD_VAR 0 1
74572: PPUSH
74573: LD_VAR 0 3
74577: PPUSH
74578: CALL_OW 289
74582: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74583: LD_ADDR_VAR 0 2
74587: PUSH
74588: LD_VAR 0 2
74592: PPUSH
74593: LD_VAR 0 3
74597: PPUSH
74598: LD_VAR 0 4
74602: PPUSH
74603: CALL_OW 1
74607: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74608: LD_ADDR_VAR 0 2
74612: PUSH
74613: LD_VAR 0 2
74617: PPUSH
74618: LD_INT 4
74620: PPUSH
74621: LD_VAR 0 2
74625: PUSH
74626: LD_INT 4
74628: ARRAY
74629: PUSH
74630: LD_VAR 0 4
74634: PLUS
74635: PPUSH
74636: CALL_OW 1
74640: ST_TO_ADDR
// end ;
74641: GO 74560
74643: POP
74644: POP
// end ;
74645: LD_VAR 0 2
74649: RET
// export function Length ( array ) ; begin
74650: LD_INT 0
74652: PPUSH
// result := array + 0 ;
74653: LD_ADDR_VAR 0 2
74657: PUSH
74658: LD_VAR 0 1
74662: PUSH
74663: LD_INT 0
74665: PLUS
74666: ST_TO_ADDR
// end ;
74667: LD_VAR 0 2
74671: RET
// export function PrepareArray ( array ) ; begin
74672: LD_INT 0
74674: PPUSH
// result := array diff 0 ;
74675: LD_ADDR_VAR 0 2
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_INT 0
74687: DIFF
74688: ST_TO_ADDR
// if not result [ 1 ] then
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 1
74696: ARRAY
74697: NOT
74698: IFFALSE 74718
// result := Delete ( result , 1 ) ;
74700: LD_ADDR_VAR 0 2
74704: PUSH
74705: LD_VAR 0 2
74709: PPUSH
74710: LD_INT 1
74712: PPUSH
74713: CALL_OW 3
74717: ST_TO_ADDR
// end ;
74718: LD_VAR 0 2
74722: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74723: LD_INT 0
74725: PPUSH
74726: PPUSH
74727: PPUSH
74728: PPUSH
// sibRocketRange := 25 ;
74729: LD_ADDR_VAR 0 6
74733: PUSH
74734: LD_INT 25
74736: ST_TO_ADDR
// result := false ;
74737: LD_ADDR_VAR 0 4
74741: PUSH
74742: LD_INT 0
74744: ST_TO_ADDR
// for i := 0 to 5 do
74745: LD_ADDR_VAR 0 5
74749: PUSH
74750: DOUBLE
74751: LD_INT 0
74753: DEC
74754: ST_TO_ADDR
74755: LD_INT 5
74757: PUSH
74758: FOR_TO
74759: IFFALSE 74826
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74761: LD_VAR 0 1
74765: PPUSH
74766: LD_VAR 0 5
74770: PPUSH
74771: LD_VAR 0 6
74775: PPUSH
74776: CALL_OW 272
74780: PPUSH
74781: LD_VAR 0 2
74785: PPUSH
74786: LD_VAR 0 5
74790: PPUSH
74791: LD_VAR 0 6
74795: PPUSH
74796: CALL_OW 273
74800: PPUSH
74801: LD_VAR 0 3
74805: PPUSH
74806: CALL_OW 309
74810: IFFALSE 74824
// begin result := true ;
74812: LD_ADDR_VAR 0 4
74816: PUSH
74817: LD_INT 1
74819: ST_TO_ADDR
// exit ;
74820: POP
74821: POP
74822: GO 74828
// end ;
74824: GO 74758
74826: POP
74827: POP
// end ;
74828: LD_VAR 0 4
74832: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74833: LD_INT 0
74835: PPUSH
74836: PPUSH
74837: PPUSH
// if btype = b_depot then
74838: LD_VAR 0 2
74842: PUSH
74843: LD_INT 0
74845: EQUAL
74846: IFFALSE 74858
// begin result := true ;
74848: LD_ADDR_VAR 0 3
74852: PUSH
74853: LD_INT 1
74855: ST_TO_ADDR
// exit ;
74856: GO 74978
// end ; pom := GetBase ( depot ) ;
74858: LD_ADDR_VAR 0 4
74862: PUSH
74863: LD_VAR 0 1
74867: PPUSH
74868: CALL_OW 274
74872: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74873: LD_ADDR_VAR 0 5
74877: PUSH
74878: LD_VAR 0 2
74882: PPUSH
74883: LD_VAR 0 1
74887: PPUSH
74888: CALL_OW 248
74892: PPUSH
74893: CALL_OW 450
74897: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74898: LD_ADDR_VAR 0 3
74902: PUSH
74903: LD_VAR 0 4
74907: PPUSH
74908: LD_INT 1
74910: PPUSH
74911: CALL_OW 275
74915: PUSH
74916: LD_VAR 0 5
74920: PUSH
74921: LD_INT 1
74923: ARRAY
74924: GREATEREQUAL
74925: IFFALSE 74951
74927: PUSH
74928: LD_VAR 0 4
74932: PPUSH
74933: LD_INT 2
74935: PPUSH
74936: CALL_OW 275
74940: PUSH
74941: LD_VAR 0 5
74945: PUSH
74946: LD_INT 2
74948: ARRAY
74949: GREATEREQUAL
74950: AND
74951: IFFALSE 74977
74953: PUSH
74954: LD_VAR 0 4
74958: PPUSH
74959: LD_INT 3
74961: PPUSH
74962: CALL_OW 275
74966: PUSH
74967: LD_VAR 0 5
74971: PUSH
74972: LD_INT 3
74974: ARRAY
74975: GREATEREQUAL
74976: AND
74977: ST_TO_ADDR
// end ;
74978: LD_VAR 0 3
74982: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74983: LD_INT 0
74985: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74986: LD_VAR 0 1
74990: PPUSH
74991: LD_VAR 0 2
74995: PPUSH
74996: LD_INT 0
74998: PPUSH
74999: LD_INT 0
75001: PPUSH
75002: LD_INT 1
75004: PPUSH
75005: LD_INT 0
75007: PPUSH
75008: CALL_OW 587
// end ;
75012: LD_VAR 0 3
75016: RET
// export function CenterOnNow ( unit ) ; begin
75017: LD_INT 0
75019: PPUSH
// result := IsInUnit ( unit ) ;
75020: LD_ADDR_VAR 0 2
75024: PUSH
75025: LD_VAR 0 1
75029: PPUSH
75030: CALL_OW 310
75034: ST_TO_ADDR
// if not result then
75035: LD_VAR 0 2
75039: NOT
75040: IFFALSE 75052
// result := unit ;
75042: LD_ADDR_VAR 0 2
75046: PUSH
75047: LD_VAR 0 1
75051: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75052: LD_VAR 0 1
75056: PPUSH
75057: CALL_OW 87
// end ;
75061: LD_VAR 0 2
75065: RET
// export function ComMoveHex ( unit , hex ) ; begin
75066: LD_INT 0
75068: PPUSH
// if not hex then
75069: LD_VAR 0 2
75073: NOT
75074: IFFALSE 75078
// exit ;
75076: GO 75131
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75078: LD_VAR 0 2
75082: PUSH
75083: LD_INT 1
75085: ARRAY
75086: PPUSH
75087: LD_VAR 0 2
75091: PUSH
75092: LD_INT 2
75094: ARRAY
75095: PPUSH
75096: CALL_OW 428
75100: IFFALSE 75104
// exit ;
75102: GO 75131
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75104: LD_VAR 0 1
75108: PPUSH
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 1
75116: ARRAY
75117: PPUSH
75118: LD_VAR 0 2
75122: PUSH
75123: LD_INT 2
75125: ARRAY
75126: PPUSH
75127: CALL_OW 111
// end ;
75131: LD_VAR 0 3
75135: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75136: LD_INT 0
75138: PPUSH
75139: PPUSH
75140: PPUSH
// if not unit or not enemy then
75141: LD_VAR 0 1
75145: NOT
75146: IFTRUE 75155
75148: PUSH
75149: LD_VAR 0 2
75153: NOT
75154: OR
75155: IFFALSE 75159
// exit ;
75157: GO 75285
// x := GetX ( enemy ) ;
75159: LD_ADDR_VAR 0 4
75163: PUSH
75164: LD_VAR 0 2
75168: PPUSH
75169: CALL_OW 250
75173: ST_TO_ADDR
// y := GetY ( enemy ) ;
75174: LD_ADDR_VAR 0 5
75178: PUSH
75179: LD_VAR 0 2
75183: PPUSH
75184: CALL_OW 251
75188: ST_TO_ADDR
// if ValidHex ( x , y ) then
75189: LD_VAR 0 4
75193: PPUSH
75194: LD_VAR 0 5
75198: PPUSH
75199: CALL_OW 488
75203: IFFALSE 75285
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75205: LD_VAR 0 2
75209: PPUSH
75210: CALL_OW 247
75214: PUSH
75215: LD_INT 3
75217: PUSH
75218: LD_INT 2
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: IN
75225: IFTRUE 75248
75227: PUSH
75228: LD_VAR 0 1
75232: PPUSH
75233: CALL_OW 255
75237: PPUSH
75238: LD_VAR 0 2
75242: PPUSH
75243: CALL_OW 292
75247: OR
75248: IFFALSE 75266
// ComAttackUnit ( unit , enemy ) else
75250: LD_VAR 0 1
75254: PPUSH
75255: LD_VAR 0 2
75259: PPUSH
75260: CALL_OW 115
75264: GO 75285
// ComAgressiveMove ( unit , x , y ) ;
75266: LD_VAR 0 1
75270: PPUSH
75271: LD_VAR 0 4
75275: PPUSH
75276: LD_VAR 0 5
75280: PPUSH
75281: CALL_OW 114
// end ;
75285: LD_VAR 0 3
75289: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75290: LD_INT 0
75292: PPUSH
75293: PPUSH
75294: PPUSH
// list := AreaToList ( area , 0 ) ;
75295: LD_ADDR_VAR 0 5
75299: PUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_INT 0
75307: PPUSH
75308: CALL_OW 517
75312: ST_TO_ADDR
// if not list then
75313: LD_VAR 0 5
75317: NOT
75318: IFFALSE 75322
// exit ;
75320: GO 75452
// if all then
75322: LD_VAR 0 2
75326: IFFALSE 75414
// begin for i := 1 to list [ 1 ] do
75328: LD_ADDR_VAR 0 4
75332: PUSH
75333: DOUBLE
75334: LD_INT 1
75336: DEC
75337: ST_TO_ADDR
75338: LD_VAR 0 5
75342: PUSH
75343: LD_INT 1
75345: ARRAY
75346: PUSH
75347: FOR_TO
75348: IFFALSE 75410
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75350: LD_ADDR_VAR 0 3
75354: PUSH
75355: LD_VAR 0 3
75359: PPUSH
75360: LD_VAR 0 3
75364: PUSH
75365: LD_INT 1
75367: PLUS
75368: PPUSH
75369: LD_VAR 0 5
75373: PUSH
75374: LD_INT 1
75376: ARRAY
75377: PUSH
75378: LD_VAR 0 4
75382: ARRAY
75383: PUSH
75384: LD_VAR 0 5
75388: PUSH
75389: LD_INT 2
75391: ARRAY
75392: PUSH
75393: LD_VAR 0 4
75397: ARRAY
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PPUSH
75403: CALL_OW 1
75407: ST_TO_ADDR
75408: GO 75347
75410: POP
75411: POP
// exit ;
75412: GO 75452
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75414: LD_ADDR_VAR 0 3
75418: PUSH
75419: LD_VAR 0 5
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 1
75430: ARRAY
75431: PUSH
75432: LD_VAR 0 5
75436: PUSH
75437: LD_INT 2
75439: ARRAY
75440: PUSH
75441: LD_INT 1
75443: ARRAY
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: EMPTY
75450: LIST
75451: ST_TO_ADDR
// end ;
75452: LD_VAR 0 3
75456: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75457: LD_INT 0
75459: PPUSH
75460: PPUSH
// list := AreaToList ( area , 0 ) ;
75461: LD_ADDR_VAR 0 4
75465: PUSH
75466: LD_VAR 0 1
75470: PPUSH
75471: LD_INT 0
75473: PPUSH
75474: CALL_OW 517
75478: ST_TO_ADDR
// if not list then
75479: LD_VAR 0 4
75483: NOT
75484: IFFALSE 75488
// exit ;
75486: GO 75529
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75488: LD_ADDR_VAR 0 3
75492: PUSH
75493: LD_VAR 0 4
75497: PUSH
75498: LD_INT 1
75500: ARRAY
75501: PUSH
75502: LD_INT 1
75504: ARRAY
75505: PUSH
75506: LD_VAR 0 4
75510: PUSH
75511: LD_INT 2
75513: ARRAY
75514: PUSH
75515: LD_INT 1
75517: ARRAY
75518: PUSH
75519: LD_VAR 0 2
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: LIST
75528: ST_TO_ADDR
// end ;
75529: LD_VAR 0 3
75533: RET
// export function First ( array ) ; begin
75534: LD_INT 0
75536: PPUSH
// if not array then
75537: LD_VAR 0 1
75541: NOT
75542: IFFALSE 75546
// exit ;
75544: GO 75560
// result := array [ 1 ] ;
75546: LD_ADDR_VAR 0 2
75550: PUSH
75551: LD_VAR 0 1
75555: PUSH
75556: LD_INT 1
75558: ARRAY
75559: ST_TO_ADDR
// end ;
75560: LD_VAR 0 2
75564: RET
// export function Last ( array ) ; begin
75565: LD_INT 0
75567: PPUSH
// if not array then
75568: LD_VAR 0 1
75572: NOT
75573: IFFALSE 75577
// exit ;
75575: GO 75593
// result := array [ array ] ;
75577: LD_ADDR_VAR 0 2
75581: PUSH
75582: LD_VAR 0 1
75586: PUSH
75587: LD_VAR 0 1
75591: ARRAY
75592: ST_TO_ADDR
// end ;
75593: LD_VAR 0 2
75597: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75598: LD_INT 0
75600: PPUSH
75601: PPUSH
// result := [ ] ;
75602: LD_ADDR_VAR 0 5
75606: PUSH
75607: EMPTY
75608: ST_TO_ADDR
// if not array then
75609: LD_VAR 0 1
75613: NOT
75614: IFFALSE 75618
// exit ;
75616: GO 75730
// for i := 1 to array do
75618: LD_ADDR_VAR 0 6
75622: PUSH
75623: DOUBLE
75624: LD_INT 1
75626: DEC
75627: ST_TO_ADDR
75628: LD_VAR 0 1
75632: PUSH
75633: FOR_TO
75634: IFFALSE 75728
// if array [ i ] [ index ] = value then
75636: LD_VAR 0 1
75640: PUSH
75641: LD_VAR 0 6
75645: ARRAY
75646: PUSH
75647: LD_VAR 0 2
75651: ARRAY
75652: PUSH
75653: LD_VAR 0 3
75657: EQUAL
75658: IFFALSE 75726
// begin if indexColumn then
75660: LD_VAR 0 4
75664: IFFALSE 75700
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75666: LD_ADDR_VAR 0 5
75670: PUSH
75671: LD_VAR 0 5
75675: PPUSH
75676: LD_VAR 0 1
75680: PUSH
75681: LD_VAR 0 6
75685: ARRAY
75686: PUSH
75687: LD_VAR 0 4
75691: ARRAY
75692: PPUSH
75693: CALL 70738 0 2
75697: ST_TO_ADDR
75698: GO 75726
// result := Join ( result , array [ i ] ) ;
75700: LD_ADDR_VAR 0 5
75704: PUSH
75705: LD_VAR 0 5
75709: PPUSH
75710: LD_VAR 0 1
75714: PUSH
75715: LD_VAR 0 6
75719: ARRAY
75720: PPUSH
75721: CALL 70738 0 2
75725: ST_TO_ADDR
// end ;
75726: GO 75633
75728: POP
75729: POP
// end ;
75730: LD_VAR 0 5
75734: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75735: LD_INT 0
75737: PPUSH
// if not vehicles or not parkingPoint then
75738: LD_VAR 0 1
75742: NOT
75743: IFTRUE 75752
75745: PUSH
75746: LD_VAR 0 2
75750: NOT
75751: OR
75752: IFFALSE 75756
// exit ;
75754: GO 75854
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75756: LD_ADDR_VAR 0 1
75760: PUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: LD_INT 50
75768: PUSH
75769: EMPTY
75770: LIST
75771: PUSH
75772: LD_INT 3
75774: PUSH
75775: LD_INT 92
75777: PUSH
75778: LD_VAR 0 2
75782: PUSH
75783: LD_INT 1
75785: ARRAY
75786: PUSH
75787: LD_VAR 0 2
75791: PUSH
75792: LD_INT 2
75794: ARRAY
75795: PUSH
75796: LD_INT 8
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PPUSH
75813: CALL_OW 72
75817: ST_TO_ADDR
// if not vehicles then
75818: LD_VAR 0 1
75822: NOT
75823: IFFALSE 75827
// exit ;
75825: GO 75854
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75827: LD_VAR 0 1
75831: PPUSH
75832: LD_VAR 0 2
75836: PUSH
75837: LD_INT 1
75839: ARRAY
75840: PPUSH
75841: LD_VAR 0 2
75845: PUSH
75846: LD_INT 2
75848: ARRAY
75849: PPUSH
75850: CALL_OW 111
// end ;
75854: LD_VAR 0 3
75858: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75859: LD_INT 0
75861: PPUSH
75862: PPUSH
75863: PPUSH
// if not side or not area then
75864: LD_VAR 0 1
75868: NOT
75869: IFTRUE 75878
75871: PUSH
75872: LD_VAR 0 2
75876: NOT
75877: OR
75878: IFFALSE 75882
// exit ;
75880: GO 76001
// tmp := AreaToList ( area , 0 ) ;
75882: LD_ADDR_VAR 0 5
75886: PUSH
75887: LD_VAR 0 2
75891: PPUSH
75892: LD_INT 0
75894: PPUSH
75895: CALL_OW 517
75899: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75900: LD_ADDR_VAR 0 4
75904: PUSH
75905: DOUBLE
75906: LD_INT 1
75908: DEC
75909: ST_TO_ADDR
75910: LD_VAR 0 5
75914: PUSH
75915: LD_INT 1
75917: ARRAY
75918: PUSH
75919: FOR_TO
75920: IFFALSE 75999
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75922: LD_VAR 0 5
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PUSH
75931: LD_VAR 0 4
75935: ARRAY
75936: PPUSH
75937: LD_VAR 0 5
75941: PUSH
75942: LD_INT 2
75944: ARRAY
75945: PUSH
75946: LD_VAR 0 4
75950: ARRAY
75951: PPUSH
75952: CALL_OW 351
75956: IFFALSE 75997
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75958: LD_VAR 0 5
75962: PUSH
75963: LD_INT 1
75965: ARRAY
75966: PUSH
75967: LD_VAR 0 4
75971: ARRAY
75972: PPUSH
75973: LD_VAR 0 5
75977: PUSH
75978: LD_INT 2
75980: ARRAY
75981: PUSH
75982: LD_VAR 0 4
75986: ARRAY
75987: PPUSH
75988: LD_VAR 0 1
75992: PPUSH
75993: CALL_OW 244
// end ;
75997: GO 75919
75999: POP
76000: POP
// end ;
76001: LD_VAR 0 3
76005: RET
// export function UniqueArray ( array ) ; var i ; begin
76006: LD_INT 0
76008: PPUSH
76009: PPUSH
// result := [ ] ;
76010: LD_ADDR_VAR 0 2
76014: PUSH
76015: EMPTY
76016: ST_TO_ADDR
// if not array then
76017: LD_VAR 0 1
76021: NOT
76022: IFFALSE 76026
// exit ;
76024: GO 76087
// for i := 1 to array do
76026: LD_ADDR_VAR 0 3
76030: PUSH
76031: DOUBLE
76032: LD_INT 1
76034: DEC
76035: ST_TO_ADDR
76036: LD_VAR 0 1
76040: PUSH
76041: FOR_TO
76042: IFFALSE 76085
// if not array [ i ] in result then
76044: LD_VAR 0 1
76048: PUSH
76049: LD_VAR 0 3
76053: ARRAY
76054: PUSH
76055: LD_VAR 0 2
76059: IN
76060: NOT
76061: IFFALSE 76083
// result := Join ( result , i ) ;
76063: LD_ADDR_VAR 0 2
76067: PUSH
76068: LD_VAR 0 2
76072: PPUSH
76073: LD_VAR 0 3
76077: PPUSH
76078: CALL 70738 0 2
76082: ST_TO_ADDR
76083: GO 76041
76085: POP
76086: POP
// end ; end_of_file
76087: LD_VAR 0 2
76091: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76092: LD_VAR 0 1
76096: PUSH
76097: LD_INT 200
76099: DOUBLE
76100: GREATEREQUAL
76101: IFFALSE 76109
76103: LD_INT 299
76105: DOUBLE
76106: LESSEQUAL
76107: IFTRUE 76111
76109: GO 76143
76111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76112: LD_VAR 0 1
76116: PPUSH
76117: LD_VAR 0 2
76121: PPUSH
76122: LD_VAR 0 3
76126: PPUSH
76127: LD_VAR 0 4
76131: PPUSH
76132: LD_VAR 0 5
76136: PPUSH
76137: CALL 27048 0 5
76141: GO 76220
76143: LD_INT 300
76145: DOUBLE
76146: GREATEREQUAL
76147: IFFALSE 76155
76149: LD_INT 399
76151: DOUBLE
76152: LESSEQUAL
76153: IFTRUE 76157
76155: GO 76219
76157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76158: LD_VAR 0 1
76162: PPUSH
76163: LD_VAR 0 2
76167: PPUSH
76168: LD_VAR 0 3
76172: PPUSH
76173: LD_VAR 0 4
76177: PPUSH
76178: LD_VAR 0 5
76182: PPUSH
76183: LD_VAR 0 6
76187: PPUSH
76188: LD_VAR 0 7
76192: PPUSH
76193: LD_VAR 0 8
76197: PPUSH
76198: LD_VAR 0 9
76202: PPUSH
76203: LD_VAR 0 10
76207: PPUSH
76208: LD_VAR 0 11
76212: PPUSH
76213: CALL 22932 0 11
76217: GO 76220
76219: POP
// end ;
76220: PPOPN 11
76222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76223: LD_VAR 0 1
76227: PPUSH
76228: LD_VAR 0 2
76232: PPUSH
76233: LD_VAR 0 3
76237: PPUSH
76238: LD_VAR 0 4
76242: PPUSH
76243: LD_VAR 0 5
76247: PPUSH
76248: CALL 26429 0 5
// end ; end_of_file
76252: PPOPN 5
76254: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76255: LD_VAR 0 1
76259: PPUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: LD_VAR 0 3
76269: PPUSH
76270: LD_VAR 0 4
76274: PPUSH
76275: LD_VAR 0 5
76279: PPUSH
76280: LD_VAR 0 6
76284: PPUSH
76285: CALL 10472 0 6
// end ;
76289: PPOPN 6
76291: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76292: LD_INT 0
76294: PPUSH
// begin if not units then
76295: LD_VAR 0 1
76299: NOT
76300: IFFALSE 76304
// exit ;
76302: GO 76338
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
76304: LD_VAR 0 1
76308: PPUSH
76309: LD_VAR 0 2
76313: PPUSH
76314: LD_VAR 0 3
76318: PPUSH
76319: LD_VAR 0 4
76323: PPUSH
76324: LD_VAR 0 5
76328: PPUSH
76329: LD_VAR 0 6
76333: PPUSH
76334: CALL 32555 0 6
// end ;
76338: PPOPN 7
76340: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76341: CALL 10359 0 0
// end ;
76345: PPOPN 1
76347: END
