// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5689
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5659: LD_EXP 17
5663: PPUSH
5664: LD_INT 52
5666: PPUSH
5667: LD_INT 90
5669: PPUSH
5670: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5674: LD_EXP 17
5678: PPUSH
5679: LD_INT 53
5681: PPUSH
5682: LD_INT 89
5684: PPUSH
5685: CALL_OW 178
// end ;
5689: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5690: LD_EXP 8
5694: NOT
5695: PUSH
5696: LD_EXP 16
5700: PPUSH
5701: LD_EXP 18
5705: PPUSH
5706: CALL_OW 296
5710: PUSH
5711: LD_INT 36
5713: LESS
5714: AND
5715: IFFALSE 5735
5717: GO 5719
5719: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5720: LD_EXP 17
5724: PPUSH
5725: LD_INT 39
5727: PPUSH
5728: LD_INT 71
5730: PPUSH
5731: CALL_OW 111
5735: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5736: LD_EXP 7
5740: NOT
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_EXP 19
5749: PPUSH
5750: CALL_OW 292
5754: PUSH
5755: LD_INT 2
5757: PPUSH
5758: LD_EXP 18
5762: PPUSH
5763: CALL_OW 292
5767: OR
5768: AND
5769: IFFALSE 7090
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
// begin if not johnnySaved then
5779: LD_EXP 4
5783: NOT
5784: IFFALSE 5795
// KillUnit ( Johnny ) ;
5786: LD_EXP 25
5790: PPUSH
5791: CALL_OW 66
// mercenariesSpotted := true ;
5795: LD_ADDR_EXP 7
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5803: LD_STRING O4_camp_cont
5805: PPUSH
5806: CALL_OW 337
// InGameOn ;
5810: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5814: LD_INT 53
5816: PPUSH
5817: LD_INT 89
5819: PPUSH
5820: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5824: LD_INT 53
5826: PPUSH
5827: LD_INT 89
5829: PPUSH
5830: LD_INT 2
5832: PPUSH
5833: LD_INT 8
5835: NEG
5836: PPUSH
5837: CALL_OW 330
// if olafSpotted then
5841: LD_EXP 8
5845: IFFALSE 5963
// begin AddComTurnUnit ( Olaf , Heike ) ;
5847: LD_EXP 17
5851: PPUSH
5852: LD_EXP 16
5856: PPUSH
5857: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5861: LD_EXP 16
5865: PPUSH
5866: LD_INT 51
5868: PPUSH
5869: LD_INT 86
5871: PPUSH
5872: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5876: LD_EXP 16
5880: PPUSH
5881: LD_EXP 17
5885: PPUSH
5886: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING DO-camp-1
5897: PPUSH
5898: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5902: LD_EXP 18
5906: PUSH
5907: LD_EXP 19
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: LD_EXP 16
5920: PPUSH
5921: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5925: LD_EXP 18
5929: PPUSH
5930: LD_STRING DG-camp-1
5932: PPUSH
5933: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5937: LD_EXP 16
5941: PPUSH
5942: LD_STRING DH-camp-1
5944: PPUSH
5945: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5949: LD_EXP 17
5953: PPUSH
5954: LD_STRING DO-camp-2
5956: PPUSH
5957: CALL_OW 88
// end else
5961: GO 6358
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5963: LD_EXP 16
5967: PPUSH
5968: LD_INT 51
5970: PPUSH
5971: LD_INT 86
5973: PPUSH
5974: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5978: LD_EXP 16
5982: PPUSH
5983: LD_EXP 18
5987: PPUSH
5988: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1a
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1a
6034: PPUSH
6035: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6039: LD_INT 1
6041: PPUSH
6042: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6046: LD_EXP 19
6050: PPUSH
6051: LD_EXP 17
6055: PPUSH
6056: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6060: LD_EXP 19
6064: PPUSH
6065: LD_STRING DM-camp-1a
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6072: LD_EXP 17
6076: PPUSH
6077: LD_INT 52
6079: PPUSH
6080: LD_INT 90
6082: PPUSH
6083: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6087: LD_EXP 19
6091: PPUSH
6092: LD_EXP 16
6096: PPUSH
6097: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING DG-camp-2a
6108: PPUSH
6109: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6113: LD_EXP 16
6117: PPUSH
6118: LD_STRING DH-camp-2a
6120: PPUSH
6121: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6125: LD_EXP 19
6129: PPUSH
6130: LD_STRING DM-camp-2a
6132: PPUSH
6133: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6137: LD_INT 35
6139: PPUSH
6140: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6144: LD_EXP 17
6148: PPUSH
6149: LD_EXP 16
6153: PPUSH
6154: CALL_OW 296
6158: PUSH
6159: LD_INT 10
6161: LESS
6162: IFFALSE 6137
// AddComTurnUnit ( Olaf , Heike ) ;
6164: LD_EXP 17
6168: PPUSH
6169: LD_EXP 16
6173: PPUSH
6174: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6178: LD_EXP 19
6182: PPUSH
6183: LD_EXP 16
6187: PPUSH
6188: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6192: LD_EXP 17
6196: PPUSH
6197: LD_STRING DO-camp-2a
6199: PPUSH
6200: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6204: LD_EXP 16
6208: PPUSH
6209: LD_EXP 17
6213: PPUSH
6214: CALL_OW 119
// if russianSpotted then
6218: LD_EXP 9
6222: IFFALSE 6262
// begin Say ( Heike , DH-camp-2aa ) ;
6224: LD_EXP 16
6228: PPUSH
6229: LD_STRING DH-camp-2aa
6231: PPUSH
6232: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6236: LD_EXP 18
6240: PPUSH
6241: LD_STRING DG-camp-2aa
6243: PPUSH
6244: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6248: LD_EXP 19
6252: PPUSH
6253: LD_STRING DM-camp-2aa
6255: PPUSH
6256: CALL_OW 88
// end else
6260: GO 6286
// begin Say ( Heike , DH-camp-2ab ) ;
6262: LD_EXP 16
6266: PPUSH
6267: LD_STRING DH-camp-2ab
6269: PPUSH
6270: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6274: LD_EXP 19
6278: PPUSH
6279: LD_STRING DM-camp-2ab
6281: PPUSH
6282: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6286: LD_EXP 16
6290: PPUSH
6291: LD_STRING DH-camp-3a
6293: PPUSH
6294: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6298: LD_EXP 17
6302: PPUSH
6303: LD_STRING DO-camp-3a
6305: PPUSH
6306: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6310: LD_EXP 18
6314: PPUSH
6315: LD_STRING DG-camp-3a
6317: PPUSH
6318: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6322: LD_EXP 16
6326: PPUSH
6327: LD_STRING DH-camp-4aa
6329: PPUSH
6330: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6334: LD_EXP 19
6338: PPUSH
6339: LD_STRING DM-camp-4aa
6341: PPUSH
6342: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6346: LD_EXP 17
6350: PPUSH
6351: LD_STRING DO-camp-4a
6353: PPUSH
6354: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6358: LD_EXP 17
6362: PPUSH
6363: LD_STRING DO-camp-3
6365: PPUSH
6366: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6370: LD_EXP 17
6374: PPUSH
6375: LD_STRING DO-camp-4
6377: PPUSH
6378: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6382: LD_EXP 18
6386: PPUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6396: LD_EXP 18
6400: PPUSH
6401: LD_STRING DG-camp-4
6403: PPUSH
6404: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6408: LD_EXP 16
6412: PPUSH
6413: LD_EXP 18
6417: PPUSH
6418: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6422: LD_EXP 16
6426: PPUSH
6427: LD_STRING DH-camp-4
6429: PPUSH
6430: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6434: LD_EXP 19
6438: PUSH
6439: LD_EXP 17
6443: PUSH
6444: LD_EXP 18
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: PPUSH
6454: LD_EXP 16
6458: PPUSH
6459: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6463: LD_EXP 18
6467: PPUSH
6468: LD_STRING DG-camp-5
6470: PPUSH
6471: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6475: LD_EXP 18
6479: PPUSH
6480: LD_STRING DG-camp-6
6482: PPUSH
6483: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6487: LD_EXP 16
6491: PPUSH
6492: LD_STRING DH-camp-6
6494: PPUSH
6495: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DG-camp-7
6506: PPUSH
6507: CALL_OW 88
// if DogTagFound then
6511: LD_EXP 6
6515: IFFALSE 6555
// begin Say ( Heike , DH-quest-1a ) ;
6517: LD_EXP 16
6521: PPUSH
6522: LD_STRING DH-quest-1a
6524: PPUSH
6525: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6529: LD_EXP 18
6533: PPUSH
6534: LD_STRING DG-quest-1a
6536: PPUSH
6537: CALL_OW 88
// mercenariesQuestDone := true ;
6541: LD_ADDR_EXP 11
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// InGameOff ;
6549: CALL_OW 9
// end else
6553: GO 6721
// begin Say ( Heike , DH-camp-7 ) ;
6555: LD_EXP 16
6559: PPUSH
6560: LD_STRING DH-camp-7
6562: PPUSH
6563: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6567: LD_EXP 16
6571: PPUSH
6572: CALL_OW 256
6576: PUSH
6577: LD_INT 1000
6579: LESS
6580: IFFALSE 6672
// begin Say ( Olaf , DO-heal-1 ) ;
6582: LD_EXP 17
6586: PPUSH
6587: LD_STRING DO-heal-1
6589: PPUSH
6590: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6594: LD_EXP 16
6598: PPUSH
6599: LD_INT 51
6601: PPUSH
6602: LD_INT 88
6604: PPUSH
6605: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6616: LD_EXP 16
6620: PPUSH
6621: LD_EXP 17
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: PUSH
6635: LD_EXP 16
6639: PPUSH
6640: LD_INT 51
6642: PPUSH
6643: LD_INT 88
6645: PPUSH
6646: CALL_OW 307
6650: OR
6651: IFFALSE 6609
// SetLives ( Heike , 1000 ) ;
6653: LD_EXP 16
6657: PPUSH
6658: LD_INT 1000
6660: PPUSH
6661: CALL_OW 234
// wait ( 0 0$2 ) ;
6665: LD_INT 70
6667: PPUSH
6668: CALL_OW 67
// end ; InGameOff ;
6672: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6676: LD_EXP 17
6680: PUSH
6681: LD_EXP 18
6685: PUSH
6686: LD_EXP 19
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PPUSH
6696: LD_INT 53
6698: PPUSH
6699: LD_INT 89
6701: PPUSH
6702: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6706: LD_STRING O5_proof_cont
6708: PPUSH
6709: CALL_OW 337
// mercenariesQuestReady := true ;
6713: LD_ADDR_EXP 10
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6721: LD_EXP 10
6725: NOT
6726: IFFALSE 6730
// exit ;
6728: GO 7090
// wait ( 0 0$35 ) ;
6730: LD_INT 1225
6732: PPUSH
6733: CALL_OW 67
// driver := PreparePatrolTank ;
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: CALL 2814 0 0
6746: ST_TO_ADDR
// if not driver then
6747: LD_VAR 0 2
6751: NOT
6752: IFFALSE 6756
// exit ;
6754: GO 7090
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6756: LD_INT 2
6758: PPUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 2
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 310
6786: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_INT 500
6794: PPUSH
6795: CALL_OW 234
// SetLives ( driver , 450 ) ;
6799: LD_VAR 0 2
6803: PPUSH
6804: LD_INT 450
6806: PPUSH
6807: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6811: LD_VAR 0 2
6815: PPUSH
6816: LD_INT 59
6818: PPUSH
6819: LD_INT 60
6821: PPUSH
6822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6826: LD_INT 35
6828: PPUSH
6829: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 59
6840: PPUSH
6841: LD_INT 60
6843: PPUSH
6844: CALL_OW 307
6848: IFFALSE 6826
// if not See ( 1 , Heike ) then
6850: LD_INT 1
6852: PPUSH
6853: LD_EXP 16
6857: PPUSH
6858: CALL_OW 292
6862: NOT
6863: IFFALSE 6987
// begin if Difficulty < 3 then
6865: LD_OWVAR 67
6869: PUSH
6870: LD_INT 3
6872: LESS
6873: IFFALSE 6891
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6875: LD_INT 59
6877: PPUSH
6878: LD_INT 60
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 6
6886: PPUSH
6887: CALL_OW 330
// ComExitVehicle ( driver ) ;
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 121
// wait ( 0 0$1 ) ;
6900: LD_INT 35
6902: PPUSH
6903: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: LD_INT 58
6914: PPUSH
6915: LD_INT 54
6917: PPUSH
6918: CALL_OW 171
// wait ( 0 0$1 ) ;
6922: LD_INT 35
6924: PPUSH
6925: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_INT 57
6936: PPUSH
6937: LD_INT 53
6939: PPUSH
6940: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_INT 350
6951: PPUSH
6952: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6956: LD_VAR 0 2
6960: PPUSH
6961: LD_VAR 0 3
6965: PPUSH
6966: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 107
6977: PPUSH
6978: LD_INT 118
6980: PPUSH
6981: CALL_OW 171
// end else
6985: GO 7002
// begin ComMoveXY ( driver , 107 , 118 ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_INT 107
6994: PPUSH
6995: LD_INT 118
6997: PPUSH
6998: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7002: LD_INT 35
7004: PPUSH
7005: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_INT 107
7016: PPUSH
7017: LD_INT 118
7019: PPUSH
7020: CALL_OW 307
7024: PUSH
7025: LD_VAR 0 2
7029: PPUSH
7030: CALL_OW 301
7034: OR
7035: IFFALSE 7002
// if IsDead ( driver [ 1 ] ) then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 1
7044: ARRAY
7045: PPUSH
7046: CALL_OW 301
7050: IFFALSE 7054
// exit ;
7052: GO 7090
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7054: LD_ADDR_VAR 0 1
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 69
7073: PUSH
7074: FOR_IN
7075: IFFALSE 7088
// RemoveUnit ( i ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 64
7086: GO 7074
7088: POP
7089: POP
// end ;
7090: PPOPN 3
7092: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7093: LD_INT 10
7095: PPUSH
7096: LD_INT 22
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 21
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 70
7124: IFFALSE 7198
7126: GO 7128
7128: DISABLE
// begin InGameOn ;
7129: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7133: LD_EXP 17
7137: PUSH
7138: LD_EXP 19
7142: PUSH
7143: LD_EXP 18
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PPUSH
7153: LD_EXP 16
7157: PPUSH
7158: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7162: LD_EXP 19
7166: PPUSH
7167: LD_STRING DM-quest-1
7169: PPUSH
7170: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7174: LD_EXP 18
7178: PPUSH
7179: LD_STRING DG-quest-1
7181: PPUSH
7182: CALL_OW 88
// InGameOff ;
7186: CALL_OW 9
// mercenariesQuestDone := true ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// end ;
7198: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7199: LD_EXP 16
7203: PPUSH
7204: LD_INT 10
7206: PPUSH
7207: CALL_OW 308
7211: PUSH
7212: LD_EXP 6
7216: AND
7217: PUSH
7218: LD_EXP 10
7222: AND
7223: PUSH
7224: LD_INT 10
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: NOT
7256: AND
7257: IFFALSE 7429
7259: GO 7261
7261: DISABLE
7262: LD_INT 0
7264: PPUSH
// begin InGameOn ;
7265: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7269: LD_EXP 17
7273: PUSH
7274: LD_EXP 19
7278: PUSH
7279: LD_EXP 18
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: LD_EXP 16
7293: PPUSH
7294: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7298: LD_EXP 16
7302: PPUSH
7303: LD_INT 54
7305: PPUSH
7306: LD_INT 86
7308: PPUSH
7309: CALL_OW 111
// p := p + 1 ;
7313: LD_ADDR_VAR 0 1
7317: PUSH
7318: LD_VAR 0 1
7322: PUSH
7323: LD_INT 1
7325: PLUS
7326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7327: LD_INT 35
7329: PPUSH
7330: CALL_OW 67
// p := p + 1 ;
7334: LD_ADDR_VAR 0 1
7338: PUSH
7339: LD_VAR 0 1
7343: PUSH
7344: LD_INT 1
7346: PLUS
7347: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7348: LD_EXP 16
7352: PPUSH
7353: LD_EXP 18
7357: PPUSH
7358: CALL_OW 296
7362: PUSH
7363: LD_INT 4
7365: LESS
7366: PUSH
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 5
7374: GREATER
7375: OR
7376: IFFALSE 7327
// Say ( Mike , DM-quest-1 ) ;
7378: LD_EXP 19
7382: PPUSH
7383: LD_STRING DM-quest-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7390: LD_EXP 18
7394: PPUSH
7395: LD_STRING DG-quest-1
7397: PPUSH
7398: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7402: LD_EXP 16
7406: PPUSH
7407: LD_INT 55
7409: PPUSH
7410: LD_INT 87
7412: PPUSH
7413: CALL_OW 111
// InGameOff ;
7417: CALL_OW 9
// mercenariesQuestDone := true ;
7421: LD_ADDR_EXP 11
7425: PUSH
7426: LD_INT 1
7428: ST_TO_ADDR
// end ;
7429: PPOPN 1
7431: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7432: LD_EXP 16
7436: PUSH
7437: LD_INT 55
7439: PUSH
7440: EMPTY
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: IN
7448: IFFALSE 7488
7450: GO 7452
7452: DISABLE
// begin if Difficulty < 3 then
7453: LD_OWVAR 67
7457: PUSH
7458: LD_INT 3
7460: LESS
7461: IFFALSE 7476
// RemoveSeeing ( 59 , 60 , 2 ) ;
7463: LD_INT 59
7465: PPUSH
7466: LD_INT 60
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7476: LD_EXP 16
7480: PPUSH
7481: LD_STRING DH-driver
7483: PPUSH
7484: CALL_OW 88
// end ;
7488: END
// every 0 0$1 trigger mercenariesQuestDone do
7489: LD_EXP 11
7493: IFFALSE 7981
7495: GO 7497
7497: DISABLE
// begin if mercenariesQuestReady then
7498: LD_EXP 10
7502: IFFALSE 7511
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7504: LD_STRING O5_proof_cont_out
7506: PPUSH
7507: CALL_OW 337
// InGameOn ;
7511: CALL_OW 8
// if IsInUnit ( Heike ) then
7515: LD_EXP 16
7519: PPUSH
7520: CALL_OW 310
7524: IFFALSE 7535
// ComExitVehicle ( Heike ) ;
7526: LD_EXP 16
7530: PPUSH
7531: CALL_OW 121
// wait ( 3 ) ;
7535: LD_INT 3
7537: PPUSH
7538: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7542: LD_EXP 16
7546: PPUSH
7547: LD_EXP 18
7551: PPUSH
7552: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7556: LD_EXP 17
7560: PUSH
7561: LD_EXP 19
7565: PUSH
7566: LD_EXP 18
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PPUSH
7576: LD_EXP 16
7580: PPUSH
7581: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7585: LD_EXP 16
7589: PPUSH
7590: LD_STRING DH-quest-done-1
7592: PPUSH
7593: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7597: LD_EXP 19
7601: PPUSH
7602: LD_STRING DM-quest-done-1
7604: PPUSH
7605: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7609: LD_EXP 18
7613: PPUSH
7614: LD_STRING DG-quest-done-1
7616: PPUSH
7617: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7621: LD_EXP 16
7625: PPUSH
7626: LD_EXP 17
7630: PPUSH
7631: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7635: LD_EXP 16
7639: PPUSH
7640: LD_STRING DH-quest-done-2
7642: PPUSH
7643: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7647: LD_EXP 17
7651: PPUSH
7652: LD_STRING DO-quest-done-2
7654: PPUSH
7655: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7659: LD_EXP 17
7663: PPUSH
7664: LD_STRING DO-quest-done-3
7666: PPUSH
7667: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7671: LD_EXP 18
7675: PPUSH
7676: LD_INT 51
7678: PPUSH
7679: LD_INT 90
7681: PPUSH
7682: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7686: LD_EXP 18
7690: PPUSH
7691: LD_INT 50
7693: PPUSH
7694: LD_INT 89
7696: PPUSH
7697: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7701: LD_EXP 16
7705: PPUSH
7706: LD_EXP 18
7710: PPUSH
7711: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7715: LD_EXP 18
7719: PPUSH
7720: LD_STRING DG-quest-done-4
7722: PPUSH
7723: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_EXP 16
7736: PPUSH
7737: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7741: LD_EXP 16
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: IFFALSE 7846
// begin Say ( Olaf , DO-heal-1 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING DO-heal-1
7763: PPUSH
7764: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7768: LD_EXP 16
7772: PPUSH
7773: LD_INT 51
7775: PPUSH
7776: LD_INT 88
7778: PPUSH
7779: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7790: LD_EXP 16
7794: PPUSH
7795: LD_EXP 17
7799: PPUSH
7800: CALL_OW 296
7804: PUSH
7805: LD_INT 4
7807: LESS
7808: PUSH
7809: LD_EXP 16
7813: PPUSH
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 88
7819: PPUSH
7820: CALL_OW 307
7824: OR
7825: IFFALSE 7783
// SetLives ( Heike , 1000 ) ;
7827: LD_EXP 16
7831: PPUSH
7832: LD_INT 1000
7834: PPUSH
7835: CALL_OW 234
// wait ( 0 0$2 ) ;
7839: LD_INT 70
7841: PPUSH
7842: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7846: LD_EXP 16
7850: PPUSH
7851: LD_STRING DH-quest-done-4
7853: PPUSH
7854: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7858: LD_EXP 17
7862: PPUSH
7863: LD_STRING DO-quest-done-4
7865: PPUSH
7866: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7870: LD_EXP 16
7874: PPUSH
7875: LD_EXP 17
7879: PPUSH
7880: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7884: LD_EXP 16
7888: PPUSH
7889: LD_STRING DH-quest-done-5
7891: PPUSH
7892: CALL_OW 88
// InGameOff ;
7896: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7900: LD_STRING O6_end_cont
7902: PPUSH
7903: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7907: LD_EXP 18
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7919: LD_EXP 19
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7931: LD_INT 42
7933: PPUSH
7934: LD_INT 2
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7944: LD_EXP 17
7948: PPUSH
7949: LD_INT 53
7951: PPUSH
7952: LD_INT 89
7954: PPUSH
7955: CALL_OW 118
// lastObjectiveActive := true ;
7959: LD_ADDR_EXP 12
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7967: LD_INT 1
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: CALL_OW 424
// PreparePrison ;
7977: CALL 1164 0 0
// end ;
7981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7982: LD_INT 22
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 91
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 4
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: IFFALSE 8196
8016: GO 8018
8018: DISABLE
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8023: LD_INT 245
8025: PUSH
8026: LD_INT 210
8028: PUSH
8029: LD_INT 210
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_OWVAR 67
8041: ARRAY
8042: PPUSH
8043: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8047: LD_ADDR_VAR 0 2
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 54
8074: PUSH
8075: EMPTY
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 69
8087: ST_TO_ADDR
// if not tmp then
8088: LD_VAR 0 2
8092: NOT
8093: IFFALSE 8097
// exit ;
8095: GO 8196
// for i in tmp do
8097: LD_ADDR_VAR 0 1
8101: PUSH
8102: LD_VAR 0 2
8106: PUSH
8107: FOR_IN
8108: IFFALSE 8136
// begin ComExitBuilding ( i ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 121
8126: PPUSH
8127: LD_INT 22
8129: PPUSH
8130: CALL_OW 174
// end ;
8134: GO 8107
8136: POP
8137: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8138: LD_EXP 23
8142: PPUSH
8143: LD_INT 121
8145: PPUSH
8146: LD_INT 22
8148: PPUSH
8149: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8153: LD_EXP 24
8157: PPUSH
8158: LD_INT 121
8160: PPUSH
8161: LD_INT 22
8163: PPUSH
8164: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8168: LD_EXP 23
8172: PPUSH
8173: LD_EXP 16
8177: PPUSH
8178: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8182: LD_EXP 24
8186: PPUSH
8187: LD_EXP 16
8191: PPUSH
8192: CALL_OW 175
// end ;
8196: PPOPN 2
8198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8199: LD_INT 22
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 91
8211: PUSH
8212: LD_INT 8
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PPUSH
8227: CALL_OW 69
8231: IFFALSE 8413
8233: GO 8235
8235: DISABLE
8236: LD_INT 0
8238: PPUSH
8239: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8240: LD_INT 280
8242: PUSH
8243: LD_INT 245
8245: PUSH
8246: LD_INT 210
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_OWVAR 67
8258: ARRAY
8259: PPUSH
8260: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_INT 22
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 54
8291: PUSH
8292: EMPTY
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: ST_TO_ADDR
// if not tmp then
8305: LD_VAR 0 2
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8413
// for i in tmp do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8353
// begin ComExitBuilding ( i ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: LD_INT 142
8343: PPUSH
8344: LD_INT 71
8346: PPUSH
8347: CALL_OW 174
// end ;
8351: GO 8324
8353: POP
8354: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8355: LD_EXP 23
8359: PPUSH
8360: LD_INT 142
8362: PPUSH
8363: LD_INT 71
8365: PPUSH
8366: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8370: LD_EXP 24
8374: PPUSH
8375: LD_INT 142
8377: PPUSH
8378: LD_INT 71
8380: PPUSH
8381: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8385: LD_EXP 23
8389: PPUSH
8390: LD_EXP 16
8394: PPUSH
8395: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8399: LD_EXP 24
8403: PPUSH
8404: LD_EXP 16
8408: PPUSH
8409: CALL_OW 175
// end ;
8413: PPOPN 2
8415: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8416: LD_INT 22
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 21
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 58
8438: PUSH
8439: EMPTY
8440: LIST
8441: PUSH
8442: LD_INT 3
8444: PUSH
8445: LD_INT 24
8447: PUSH
8448: LD_INT 1000
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 91
8461: PUSH
8462: LD_EXP 17
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 17
8491: PPUSH
8492: CALL_OW 302
8496: AND
8497: IFFALSE 8611
8499: GO 8501
8501: DISABLE
// begin enable ;
8502: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8503: LD_EXP 17
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 21
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 58
8530: PUSH
8531: EMPTY
8532: LIST
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: LD_INT 24
8539: PUSH
8540: LD_INT 1000
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 91
8553: PUSH
8554: LD_EXP 17
8558: PUSH
8559: LD_INT 8
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 69
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PPUSH
8583: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8587: LD_EXP 17
8591: PPUSH
8592: LD_INT 52
8594: PPUSH
8595: LD_INT 90
8597: PPUSH
8598: CALL_OW 171
// AddComHold ( Olaf ) ;
8602: LD_EXP 17
8606: PPUSH
8607: CALL_OW 200
// end ;
8611: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8612: LD_EXP 12
8616: PUSH
8617: LD_INT 2
8619: PPUSH
8620: CALL_OW 302
8624: NOT
8625: AND
8626: PUSH
8627: LD_OWVAR 67
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: AND
8636: PUSH
8637: LD_EXP 13
8641: NOT
8642: AND
8643: IFFALSE 8660
8645: GO 8647
8647: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8648: LD_EXP 16
8652: PPUSH
8653: LD_STRING DH-prison-missing
8655: PPUSH
8656: CALL_OW 88
// end ;
8660: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8661: LD_EXP 12
8665: PUSH
8666: LD_INT 8
8668: PPUSH
8669: CALL_OW 302
8673: NOT
8674: AND
8675: PUSH
8676: LD_OWVAR 67
8680: PUSH
8681: LD_INT 1
8683: GREATER
8684: AND
8685: PUSH
8686: LD_EXP 13
8690: NOT
8691: AND
8692: IFFALSE 8709
8694: GO 8696
8696: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8697: LD_EXP 16
8701: PPUSH
8702: LD_STRING DH-prison-missing
8704: PPUSH
8705: CALL_OW 88
// end ;
8709: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8710: LD_EXP 12
8714: PUSH
8715: LD_INT 3
8717: PPUSH
8718: CALL_OW 302
8722: NOT
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing-a
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 10
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8788: LD_EXP 13
8792: NOT
8793: PUSH
8794: LD_EXP 12
8798: AND
8799: PUSH
8800: LD_INT 2
8802: PPUSH
8803: LD_EXP 20
8807: PPUSH
8808: CALL_OW 292
8812: AND
8813: IFFALSE 8900
8815: GO 8817
8817: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8818: LD_EXP 20
8822: PPUSH
8823: LD_EXP 16
8827: PPUSH
8828: CALL_OW 119
// DialogueOn ;
8832: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8836: LD_EXP 20
8840: PPUSH
8841: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8845: LD_EXP 20
8849: PPUSH
8850: LD_STRING DK-prison-found
8852: PPUSH
8853: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8857: LD_EXP 16
8861: PPUSH
8862: LD_STRING DH-prison-found
8864: PPUSH
8865: CALL_OW 88
// DialogueOff ;
8869: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8873: LD_EXP 20
8877: PPUSH
8878: LD_INT 2
8880: PPUSH
8881: CALL_OW 235
// prisonFound := true ;
8885: LD_ADDR_EXP 13
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8893: LD_STRING O6_prison_out
8895: PPUSH
8896: CALL_OW 337
// end ;
8900: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8901: LD_EXP 16
8905: PPUSH
8906: CALL_OW 256
8910: PUSH
8911: LD_INT 500
8913: LESS
8914: IFFALSE 8927
8916: GO 8918
8918: DISABLE
// heikeHurt := true ;
8919: LD_ADDR_EXP 14
8923: PUSH
8924: LD_INT 1
8926: ST_TO_ADDR
8927: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8928: LD_INT 22
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: IFFALSE 9272
8958: GO 8960
8960: DISABLE
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
8965: PPUSH
// begin uc_side := 3 ;
8966: LD_ADDR_OWVAR 20
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// uc_nation := 3 ;
8974: LD_ADDR_OWVAR 21
8978: PUSH
8979: LD_INT 3
8981: ST_TO_ADDR
// tmp := [ ] ;
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: EMPTY
8988: ST_TO_ADDR
// for i := 1 to 8 do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_INT 8
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9111
// begin PrepareHuman ( false , 1 , 4 ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_INT 4
9013: PPUSH
9014: CALL_OW 380
// un := CreateHuman ;
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_INT 4
9035: PPUSH
9036: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9040: LD_VAR 0 3
9044: PPUSH
9045: LD_INT 158
9047: PPUSH
9048: LD_INT 80
9050: PPUSH
9051: LD_INT 0
9053: PPUSH
9054: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_INT 147
9065: PPUSH
9066: LD_INT 75
9068: PPUSH
9069: CALL_OW 111
// wait ( 0 0$1 ) ;
9073: LD_INT 35
9075: PPUSH
9076: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_VAR 0 2
9094: PUSH
9095: LD_INT 1
9097: PLUS
9098: PPUSH
9099: LD_VAR 0 3
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// end ;
9109: GO 9002
9111: POP
9112: POP
// repeat wait ( 0 0$1 ) ;
9113: LD_INT 35
9115: PPUSH
9116: CALL_OW 67
// for i in tmp do
9120: LD_ADDR_VAR 0 1
9124: PUSH
9125: LD_VAR 0 2
9129: PUSH
9130: FOR_IN
9131: IFFALSE 9252
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 74
9162: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PPUSH
9172: CALL_OW 250
9176: PPUSH
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PPUSH
9186: CALL_OW 251
9190: PPUSH
9191: CALL_OW 428
9195: IFFALSE 9236
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9197: LD_VAR 0 1
9201: PPUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 114
9234: GO 9250
// ComAttackUnit ( i , Heike ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_EXP 16
9245: PPUSH
9246: CALL_OW 115
// end ;
9250: GO 9130
9252: POP
9253: POP
// until IsDead ( Heike ) or not tmp ;
9254: LD_EXP 16
9258: PPUSH
9259: CALL_OW 301
9263: PUSH
9264: LD_VAR 0 2
9268: NOT
9269: OR
9270: IFFALSE 9113
// end ;
9272: PPOPN 3
9274: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9275: LD_EXP 12
9279: PUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 302
9289: AND
9290: PUSH
9291: LD_INT 1
9293: PPUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 50
9316: PUSH
9317: EMPTY
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 71
9329: PUSH
9330: LD_INT 0
9332: EQUAL
9333: AND
9334: IFFALSE 9664
9336: GO 9338
9338: DISABLE
9339: LD_INT 0
9341: PPUSH
// begin if not heikeHurt then
9342: LD_EXP 14
9346: NOT
9347: IFFALSE 9356
// SetAchievement ( ACH_INVINCIBLE ) ;
9349: LD_STRING ACH_INVINCIBLE
9351: PPUSH
9352: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9356: LD_ADDR_VAR 0 1
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 2
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 21
9373: PUSH
9374: LD_INT 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 50
9383: PUSH
9384: EMPTY
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: PPUSH
9392: CALL_OW 69
9396: ST_TO_ADDR
// if prisonFound then
9397: LD_EXP 13
9401: IFFALSE 9415
// AddMedal ( med1 , 1 ) else
9403: LD_STRING med1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 101
9413: GO 9426
// AddMedal ( med1 , - 1 ) ;
9415: LD_STRING med1
9417: PPUSH
9418: LD_INT 1
9420: NEG
9421: PPUSH
9422: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9426: LD_VAR 0 1
9430: PUSH
9431: LD_INT 3
9433: LESS
9434: PUSH
9435: LD_EXP 13
9439: NOT
9440: AND
9441: PUSH
9442: LD_VAR 0 1
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: PUSH
9451: LD_EXP 13
9455: AND
9456: OR
9457: IFFALSE 9472
// AddMedal ( med2 , - 1 ) else
9459: LD_STRING med2
9461: PPUSH
9462: LD_INT 1
9464: NEG
9465: PPUSH
9466: CALL_OW 101
9470: GO 9482
// AddMedal ( med2 , 1 ) ;
9472: LD_STRING med2
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9482: LD_EXP 13
9486: PUSH
9487: LD_EXP 4
9491: AND
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 4
9500: GREATEREQUAL
9501: AND
9502: IFFALSE 9516
// AddMedal ( med3 , 1 ) else
9504: LD_STRING med3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 101
9514: GO 9527
// AddMedal ( med3 , - 1 ) ;
9516: LD_STRING med3
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// GiveMedals ( MAIN ) ;
9527: LD_STRING MAIN
9529: PPUSH
9530: CALL_OW 102
// RewardPeople ( tmp ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9543: LD_EXP 16
9547: PPUSH
9548: LD_STRING 01_Heike
9550: PPUSH
9551: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9555: LD_EXP 18
9559: PPUSH
9560: CALL_OW 302
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_VAR 0 1
9574: IN
9575: AND
9576: IFFALSE 9590
// SaveCharacters ( Givi , 01_Givi ) ;
9578: LD_EXP 18
9582: PPUSH
9583: LD_STRING 01_Givi
9585: PPUSH
9586: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9590: LD_EXP 19
9594: PPUSH
9595: CALL_OW 302
9599: PUSH
9600: LD_EXP 19
9604: PUSH
9605: LD_VAR 0 1
9609: IN
9610: AND
9611: IFFALSE 9625
// SaveCharacters ( Mike , 01_Mike ) ;
9613: LD_EXP 19
9617: PPUSH
9618: LD_STRING 01_Mike
9620: PPUSH
9621: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9625: LD_EXP 20
9629: PPUSH
9630: CALL_OW 302
9634: PUSH
9635: LD_EXP 20
9639: PUSH
9640: LD_VAR 0 1
9644: IN
9645: AND
9646: IFFALSE 9660
// SaveCharacters ( Kamil , 01_Kamil ) ;
9648: LD_EXP 20
9652: PPUSH
9653: LD_STRING 01_Kamil
9655: PPUSH
9656: CALL_OW 38
// YouWin ;
9660: CALL_OW 103
// end ; end_of_file
9664: PPOPN 1
9666: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9667: LD_VAR 0 1
9671: PUSH
9672: LD_EXP 16
9676: EQUAL
9677: IFFALSE 9686
// YouLost ( Heike ) ;
9679: LD_STRING Heike
9681: PPUSH
9682: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9686: LD_VAR 0 1
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 25
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 69
9719: IN
9720: IFFALSE 9826
// begin if un in russianPatrol then
9722: LD_VAR 0 1
9726: PUSH
9727: LD_EXP 21
9731: IN
9732: IFFALSE 9750
// russianPatrol := russianPatrol diff un ;
9734: LD_ADDR_EXP 21
9738: PUSH
9739: LD_EXP 21
9743: PUSH
9744: LD_VAR 0 1
9748: DIFF
9749: ST_TO_ADDR
// if un in russianForestPatrol then
9750: LD_VAR 0 1
9754: PUSH
9755: LD_EXP 22
9759: IN
9760: IFFALSE 9778
// russianForestPatrol := russianForestPatrol diff un ;
9762: LD_ADDR_EXP 22
9766: PUSH
9767: LD_EXP 22
9771: PUSH
9772: LD_VAR 0 1
9776: DIFF
9777: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9778: LD_ADDR_EXP 5
9782: PUSH
9783: LD_EXP 5
9787: PPUSH
9788: LD_EXP 5
9792: PUSH
9793: LD_INT 1
9795: PLUS
9796: PPUSH
9797: LD_VAR 0 1
9801: PPUSH
9802: CALL_OW 250
9806: PUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 251
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 1
9825: ST_TO_ADDR
// end ; end ;
9826: PPOPN 1
9828: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9829: LD_VAR 0 1
9833: PUSH
9834: LD_EXP 16
9838: EQUAL
9839: IFFALSE 9848
// YouLost ( Heike ) ;
9841: LD_STRING Heike
9843: PPUSH
9844: CALL_OW 104
// end ;
9848: PPOPN 1
9850: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9851: LD_VAR 0 1
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: LD_INT 5
9867: EQUAL
9868: AND
9869: IFFALSE 9878
// YouLost ( FriendlyFire ) ;
9871: LD_STRING FriendlyFire
9873: PPUSH
9874: CALL_OW 104
// end ;
9878: PPOPN 2
9880: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9881: LD_EXP 17
9885: PPUSH
9886: CALL_OW 256
9890: PUSH
9891: LD_INT 250
9893: LESS
9894: IFFALSE 9906
9896: GO 9898
9898: DISABLE
// YouLost ( Olaf ) ; end_of_file
9899: LD_STRING Olaf
9901: PPUSH
9902: CALL_OW 104
9906: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 100
9914: EQUAL
9915: IFFALSE 10864
// begin if not StreamModeActive then
9917: LD_EXP 26
9921: NOT
9922: IFFALSE 9932
// StreamModeActive := true ;
9924: LD_ADDR_EXP 26
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// if p3 = 0 then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 0
9939: EQUAL
9940: IFFALSE 9946
// InitStreamMode ;
9942: CALL 11022 0 0
// if p3 = 1 then
9946: LD_VAR 0 3
9950: PUSH
9951: LD_INT 1
9953: EQUAL
9954: IFFALSE 9964
// sRocket := true ;
9956: LD_ADDR_EXP 31
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// if p3 = 2 then
9964: LD_VAR 0 3
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 9982
// sSpeed := true ;
9974: LD_ADDR_EXP 30
9978: PUSH
9979: LD_INT 1
9981: ST_TO_ADDR
// if p3 = 3 then
9982: LD_VAR 0 3
9986: PUSH
9987: LD_INT 3
9989: EQUAL
9990: IFFALSE 10000
// sEngine := true ;
9992: LD_ADDR_EXP 32
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// if p3 = 4 then
10000: LD_VAR 0 3
10004: PUSH
10005: LD_INT 4
10007: EQUAL
10008: IFFALSE 10018
// sSpec := true ;
10010: LD_ADDR_EXP 29
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// if p3 = 5 then
10018: LD_VAR 0 3
10022: PUSH
10023: LD_INT 5
10025: EQUAL
10026: IFFALSE 10036
// sLevel := true ;
10028: LD_ADDR_EXP 33
10032: PUSH
10033: LD_INT 1
10035: ST_TO_ADDR
// if p3 = 6 then
10036: LD_VAR 0 3
10040: PUSH
10041: LD_INT 6
10043: EQUAL
10044: IFFALSE 10054
// sArmoury := true ;
10046: LD_ADDR_EXP 34
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// if p3 = 7 then
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 7
10061: EQUAL
10062: IFFALSE 10072
// sRadar := true ;
10064: LD_ADDR_EXP 35
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// if p3 = 8 then
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 8
10079: EQUAL
10080: IFFALSE 10090
// sBunker := true ;
10082: LD_ADDR_EXP 36
10086: PUSH
10087: LD_INT 1
10089: ST_TO_ADDR
// if p3 = 9 then
10090: LD_VAR 0 3
10094: PUSH
10095: LD_INT 9
10097: EQUAL
10098: IFFALSE 10108
// sHack := true ;
10100: LD_ADDR_EXP 37
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// if p3 = 10 then
10108: LD_VAR 0 3
10112: PUSH
10113: LD_INT 10
10115: EQUAL
10116: IFFALSE 10126
// sFire := true ;
10118: LD_ADDR_EXP 38
10122: PUSH
10123: LD_INT 1
10125: ST_TO_ADDR
// if p3 = 11 then
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 11
10133: EQUAL
10134: IFFALSE 10144
// sRefresh := true ;
10136: LD_ADDR_EXP 39
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// if p3 = 12 then
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 12
10151: EQUAL
10152: IFFALSE 10162
// sExp := true ;
10154: LD_ADDR_EXP 40
10158: PUSH
10159: LD_INT 1
10161: ST_TO_ADDR
// if p3 = 13 then
10162: LD_VAR 0 3
10166: PUSH
10167: LD_INT 13
10169: EQUAL
10170: IFFALSE 10180
// sDepot := true ;
10172: LD_ADDR_EXP 41
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// if p3 = 14 then
10180: LD_VAR 0 3
10184: PUSH
10185: LD_INT 14
10187: EQUAL
10188: IFFALSE 10198
// sFlag := true ;
10190: LD_ADDR_EXP 42
10194: PUSH
10195: LD_INT 1
10197: ST_TO_ADDR
// if p3 = 15 then
10198: LD_VAR 0 3
10202: PUSH
10203: LD_INT 15
10205: EQUAL
10206: IFFALSE 10216
// sKamikadze := true ;
10208: LD_ADDR_EXP 50
10212: PUSH
10213: LD_INT 1
10215: ST_TO_ADDR
// if p3 = 16 then
10216: LD_VAR 0 3
10220: PUSH
10221: LD_INT 16
10223: EQUAL
10224: IFFALSE 10234
// sTroll := true ;
10226: LD_ADDR_EXP 51
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// if p3 = 17 then
10234: LD_VAR 0 3
10238: PUSH
10239: LD_INT 17
10241: EQUAL
10242: IFFALSE 10252
// sSlow := true ;
10244: LD_ADDR_EXP 52
10248: PUSH
10249: LD_INT 1
10251: ST_TO_ADDR
// if p3 = 18 then
10252: LD_VAR 0 3
10256: PUSH
10257: LD_INT 18
10259: EQUAL
10260: IFFALSE 10270
// sLack := true ;
10262: LD_ADDR_EXP 53
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// if p3 = 19 then
10270: LD_VAR 0 3
10274: PUSH
10275: LD_INT 19
10277: EQUAL
10278: IFFALSE 10288
// sTank := true ;
10280: LD_ADDR_EXP 55
10284: PUSH
10285: LD_INT 1
10287: ST_TO_ADDR
// if p3 = 20 then
10288: LD_VAR 0 3
10292: PUSH
10293: LD_INT 20
10295: EQUAL
10296: IFFALSE 10306
// sRemote := true ;
10298: LD_ADDR_EXP 56
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// if p3 = 21 then
10306: LD_VAR 0 3
10310: PUSH
10311: LD_INT 21
10313: EQUAL
10314: IFFALSE 10324
// sPowell := true ;
10316: LD_ADDR_EXP 57
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// if p3 = 22 then
10324: LD_VAR 0 3
10328: PUSH
10329: LD_INT 22
10331: EQUAL
10332: IFFALSE 10342
// sTeleport := true ;
10334: LD_ADDR_EXP 60
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// if p3 = 23 then
10342: LD_VAR 0 3
10346: PUSH
10347: LD_INT 23
10349: EQUAL
10350: IFFALSE 10360
// sOilTower := true ;
10352: LD_ADDR_EXP 62
10356: PUSH
10357: LD_INT 1
10359: ST_TO_ADDR
// if p3 = 24 then
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 24
10367: EQUAL
10368: IFFALSE 10378
// sShovel := true ;
10370: LD_ADDR_EXP 63
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// if p3 = 25 then
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 25
10385: EQUAL
10386: IFFALSE 10396
// sSheik := true ;
10388: LD_ADDR_EXP 64
10392: PUSH
10393: LD_INT 1
10395: ST_TO_ADDR
// if p3 = 26 then
10396: LD_VAR 0 3
10400: PUSH
10401: LD_INT 26
10403: EQUAL
10404: IFFALSE 10414
// sEarthquake := true ;
10406: LD_ADDR_EXP 66
10410: PUSH
10411: LD_INT 1
10413: ST_TO_ADDR
// if p3 = 27 then
10414: LD_VAR 0 3
10418: PUSH
10419: LD_INT 27
10421: EQUAL
10422: IFFALSE 10432
// sAI := true ;
10424: LD_ADDR_EXP 67
10428: PUSH
10429: LD_INT 1
10431: ST_TO_ADDR
// if p3 = 28 then
10432: LD_VAR 0 3
10436: PUSH
10437: LD_INT 28
10439: EQUAL
10440: IFFALSE 10450
// sCargo := true ;
10442: LD_ADDR_EXP 70
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// if p3 = 29 then
10450: LD_VAR 0 3
10454: PUSH
10455: LD_INT 29
10457: EQUAL
10458: IFFALSE 10468
// sDLaser := true ;
10460: LD_ADDR_EXP 71
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// if p3 = 30 then
10468: LD_VAR 0 3
10472: PUSH
10473: LD_INT 30
10475: EQUAL
10476: IFFALSE 10486
// sExchange := true ;
10478: LD_ADDR_EXP 72
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// if p3 = 31 then
10486: LD_VAR 0 3
10490: PUSH
10491: LD_INT 31
10493: EQUAL
10494: IFFALSE 10504
// sFac := true ;
10496: LD_ADDR_EXP 73
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// if p3 = 32 then
10504: LD_VAR 0 3
10508: PUSH
10509: LD_INT 32
10511: EQUAL
10512: IFFALSE 10522
// sPower := true ;
10514: LD_ADDR_EXP 74
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if p3 = 33 then
10522: LD_VAR 0 3
10526: PUSH
10527: LD_INT 33
10529: EQUAL
10530: IFFALSE 10540
// sRandom := true ;
10532: LD_ADDR_EXP 75
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// if p3 = 34 then
10540: LD_VAR 0 3
10544: PUSH
10545: LD_INT 34
10547: EQUAL
10548: IFFALSE 10558
// sShield := true ;
10550: LD_ADDR_EXP 76
10554: PUSH
10555: LD_INT 1
10557: ST_TO_ADDR
// if p3 = 35 then
10558: LD_VAR 0 3
10562: PUSH
10563: LD_INT 35
10565: EQUAL
10566: IFFALSE 10576
// sTime := true ;
10568: LD_ADDR_EXP 77
10572: PUSH
10573: LD_INT 1
10575: ST_TO_ADDR
// if p3 = 36 then
10576: LD_VAR 0 3
10580: PUSH
10581: LD_INT 36
10583: EQUAL
10584: IFFALSE 10594
// sTools := true ;
10586: LD_ADDR_EXP 78
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// if p3 = 101 then
10594: LD_VAR 0 3
10598: PUSH
10599: LD_INT 101
10601: EQUAL
10602: IFFALSE 10612
// sSold := true ;
10604: LD_ADDR_EXP 43
10608: PUSH
10609: LD_INT 1
10611: ST_TO_ADDR
// if p3 = 102 then
10612: LD_VAR 0 3
10616: PUSH
10617: LD_INT 102
10619: EQUAL
10620: IFFALSE 10630
// sDiff := true ;
10622: LD_ADDR_EXP 44
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// if p3 = 103 then
10630: LD_VAR 0 3
10634: PUSH
10635: LD_INT 103
10637: EQUAL
10638: IFFALSE 10648
// sFog := true ;
10640: LD_ADDR_EXP 47
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// if p3 = 104 then
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 104
10655: EQUAL
10656: IFFALSE 10666
// sReset := true ;
10658: LD_ADDR_EXP 48
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// if p3 = 105 then
10666: LD_VAR 0 3
10670: PUSH
10671: LD_INT 105
10673: EQUAL
10674: IFFALSE 10684
// sSun := true ;
10676: LD_ADDR_EXP 49
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// if p3 = 106 then
10684: LD_VAR 0 3
10688: PUSH
10689: LD_INT 106
10691: EQUAL
10692: IFFALSE 10702
// sTiger := true ;
10694: LD_ADDR_EXP 45
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// if p3 = 107 then
10702: LD_VAR 0 3
10706: PUSH
10707: LD_INT 107
10709: EQUAL
10710: IFFALSE 10720
// sBomb := true ;
10712: LD_ADDR_EXP 46
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// if p3 = 108 then
10720: LD_VAR 0 3
10724: PUSH
10725: LD_INT 108
10727: EQUAL
10728: IFFALSE 10738
// sWound := true ;
10730: LD_ADDR_EXP 54
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if p3 = 109 then
10738: LD_VAR 0 3
10742: PUSH
10743: LD_INT 109
10745: EQUAL
10746: IFFALSE 10756
// sBetray := true ;
10748: LD_ADDR_EXP 58
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// if p3 = 110 then
10756: LD_VAR 0 3
10760: PUSH
10761: LD_INT 110
10763: EQUAL
10764: IFFALSE 10774
// sContamin := true ;
10766: LD_ADDR_EXP 59
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// if p3 = 111 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 111
10781: EQUAL
10782: IFFALSE 10792
// sOil := true ;
10784: LD_ADDR_EXP 61
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// if p3 = 112 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 112
10799: EQUAL
10800: IFFALSE 10810
// sStu := true ;
10802: LD_ADDR_EXP 65
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// if p3 = 113 then
10810: LD_VAR 0 3
10814: PUSH
10815: LD_INT 113
10817: EQUAL
10818: IFFALSE 10828
// sBazooka := true ;
10820: LD_ADDR_EXP 68
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if p3 = 114 then
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 114
10835: EQUAL
10836: IFFALSE 10846
// sMortar := true ;
10838: LD_ADDR_EXP 69
10842: PUSH
10843: LD_INT 1
10845: ST_TO_ADDR
// if p3 = 115 then
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 115
10853: EQUAL
10854: IFFALSE 10864
// sRanger := true ;
10856: LD_ADDR_EXP 79
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// end ; if p2 = 101 then
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 101
10871: EQUAL
10872: IFFALSE 11000
// begin case p3 of 1 :
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 1
10881: DOUBLE
10882: EQUAL
10883: IFTRUE 10887
10885: GO 10894
10887: POP
// hHackUnlimitedResources ; 2 :
10888: CALL 22035 0 0
10892: GO 11000
10894: LD_INT 2
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10909
10902: POP
// hHackSetLevel10 ; 3 :
10903: CALL 22168 0 0
10907: GO 11000
10909: LD_INT 3
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10924
10917: POP
// hHackSetLevel10YourUnits ; 4 :
10918: CALL 22253 0 0
10922: GO 11000
10924: LD_INT 4
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10939
10932: POP
// hHackInvincible ; 5 :
10933: CALL 22701 0 0
10937: GO 11000
10939: LD_INT 5
10941: DOUBLE
10942: EQUAL
10943: IFTRUE 10947
10945: GO 10954
10947: POP
// hHackInvisible ; 6 :
10948: CALL 22812 0 0
10952: GO 11000
10954: LD_INT 6
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 10969
10962: POP
// hHackChangeYourSide ; 7 :
10963: CALL 22869 0 0
10967: GO 11000
10969: LD_INT 7
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10977
10975: GO 10984
10977: POP
// hHackChangeUnitSide ; 8 :
10978: CALL 22911 0 0
10982: GO 11000
10984: LD_INT 8
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 10999
10992: POP
// hHackFog ; end ;
10993: CALL 23012 0 0
10997: GO 11000
10999: POP
// end ; end ;
11000: PPOPN 6
11002: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11003: GO 11005
11005: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11006: LD_STRING initStreamRollete();
11008: PPUSH
11009: CALL_OW 559
// InitStreamMode ;
11013: CALL 11022 0 0
// DefineStreamItems ( ) ;
11017: CALL 11462 0 0
// end ;
11021: END
// function InitStreamMode ; begin
11022: LD_INT 0
11024: PPUSH
// streamModeActive := false ;
11025: LD_ADDR_EXP 26
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// normalCounter := 36 ;
11033: LD_ADDR_EXP 27
11037: PUSH
11038: LD_INT 36
11040: ST_TO_ADDR
// hardcoreCounter := 16 ;
11041: LD_ADDR_EXP 28
11045: PUSH
11046: LD_INT 16
11048: ST_TO_ADDR
// sRocket := false ;
11049: LD_ADDR_EXP 31
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// sSpeed := false ;
11057: LD_ADDR_EXP 30
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// sEngine := false ;
11065: LD_ADDR_EXP 32
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// sSpec := false ;
11073: LD_ADDR_EXP 29
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sLevel := false ;
11081: LD_ADDR_EXP 33
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sArmoury := false ;
11089: LD_ADDR_EXP 34
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sRadar := false ;
11097: LD_ADDR_EXP 35
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sBunker := false ;
11105: LD_ADDR_EXP 36
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sHack := false ;
11113: LD_ADDR_EXP 37
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sFire := false ;
11121: LD_ADDR_EXP 38
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sRefresh := false ;
11129: LD_ADDR_EXP 39
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sExp := false ;
11137: LD_ADDR_EXP 40
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sDepot := false ;
11145: LD_ADDR_EXP 41
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sFlag := false ;
11153: LD_ADDR_EXP 42
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sKamikadze := false ;
11161: LD_ADDR_EXP 50
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sTroll := false ;
11169: LD_ADDR_EXP 51
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sSlow := false ;
11177: LD_ADDR_EXP 52
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sLack := false ;
11185: LD_ADDR_EXP 53
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sTank := false ;
11193: LD_ADDR_EXP 55
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sRemote := false ;
11201: LD_ADDR_EXP 56
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sPowell := false ;
11209: LD_ADDR_EXP 57
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTeleport := false ;
11217: LD_ADDR_EXP 60
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sOilTower := false ;
11225: LD_ADDR_EXP 62
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sShovel := false ;
11233: LD_ADDR_EXP 63
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sSheik := false ;
11241: LD_ADDR_EXP 64
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sEarthquake := false ;
11249: LD_ADDR_EXP 66
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sAI := false ;
11257: LD_ADDR_EXP 67
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sCargo := false ;
11265: LD_ADDR_EXP 70
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sDLaser := false ;
11273: LD_ADDR_EXP 71
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sExchange := false ;
11281: LD_ADDR_EXP 72
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sFac := false ;
11289: LD_ADDR_EXP 73
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sPower := false ;
11297: LD_ADDR_EXP 74
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sRandom := false ;
11305: LD_ADDR_EXP 75
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sShield := false ;
11313: LD_ADDR_EXP 76
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sTime := false ;
11321: LD_ADDR_EXP 77
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sTools := false ;
11329: LD_ADDR_EXP 78
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sSold := false ;
11337: LD_ADDR_EXP 43
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sDiff := false ;
11345: LD_ADDR_EXP 44
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sFog := false ;
11353: LD_ADDR_EXP 47
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sReset := false ;
11361: LD_ADDR_EXP 48
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sSun := false ;
11369: LD_ADDR_EXP 49
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sTiger := false ;
11377: LD_ADDR_EXP 45
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sBomb := false ;
11385: LD_ADDR_EXP 46
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sWound := false ;
11393: LD_ADDR_EXP 54
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sBetray := false ;
11401: LD_ADDR_EXP 58
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sContamin := false ;
11409: LD_ADDR_EXP 59
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sOil := false ;
11417: LD_ADDR_EXP 61
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sStu := false ;
11425: LD_ADDR_EXP 65
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sBazooka := false ;
11433: LD_ADDR_EXP 68
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sMortar := false ;
11441: LD_ADDR_EXP 69
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sRanger := false ;
11449: LD_ADDR_EXP 79
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// end ;
11457: LD_VAR 0 1
11461: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11462: LD_INT 0
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
// result := [ ] ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: EMPTY
11475: ST_TO_ADDR
// if campaign_id = 1 then
11476: LD_OWVAR 69
11480: PUSH
11481: LD_INT 1
11483: EQUAL
11484: IFFALSE 14422
// begin case mission_number of 1 :
11486: LD_OWVAR 70
11490: PUSH
11491: LD_INT 1
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11563
11499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: LD_INT 4
11510: PUSH
11511: LD_INT 11
11513: PUSH
11514: LD_INT 12
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 23
11528: PUSH
11529: LD_INT 26
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 101
11545: PUSH
11546: LD_INT 102
11548: PUSH
11549: LD_INT 106
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: ST_TO_ADDR
11561: GO 14420
11563: LD_INT 2
11565: DOUBLE
11566: EQUAL
11567: IFTRUE 11571
11569: GO 11643
11571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: LD_INT 11
11585: PUSH
11586: LD_INT 12
11588: PUSH
11589: LD_INT 15
11591: PUSH
11592: LD_INT 16
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 23
11600: PUSH
11601: LD_INT 26
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 105
11623: PUSH
11624: LD_INT 106
11626: PUSH
11627: LD_INT 108
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: ST_TO_ADDR
11641: GO 14420
11643: LD_INT 3
11645: DOUBLE
11646: EQUAL
11647: IFTRUE 11651
11649: GO 11727
11651: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11652: LD_ADDR_VAR 0 1
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: LD_INT 5
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 15
11674: PUSH
11675: LD_INT 16
11677: PUSH
11678: LD_INT 22
11680: PUSH
11681: LD_INT 26
11683: PUSH
11684: LD_INT 36
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 101
11701: PUSH
11702: LD_INT 102
11704: PUSH
11705: LD_INT 105
11707: PUSH
11708: LD_INT 106
11710: PUSH
11711: LD_INT 108
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: ST_TO_ADDR
11725: GO 14420
11727: LD_INT 4
11729: DOUBLE
11730: EQUAL
11731: IFTRUE 11735
11733: GO 11819
11735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: LD_INT 5
11749: PUSH
11750: LD_INT 8
11752: PUSH
11753: LD_INT 11
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: LD_INT 15
11761: PUSH
11762: LD_INT 16
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 26
11773: PUSH
11774: LD_INT 36
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 101
11793: PUSH
11794: LD_INT 102
11796: PUSH
11797: LD_INT 105
11799: PUSH
11800: LD_INT 106
11802: PUSH
11803: LD_INT 108
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
11817: GO 14420
11819: LD_INT 5
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11927
11827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 4
11838: PUSH
11839: LD_INT 5
11841: PUSH
11842: LD_INT 6
11844: PUSH
11845: LD_INT 8
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 15
11856: PUSH
11857: LD_INT 16
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 23
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 26
11871: PUSH
11872: LD_INT 36
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 101
11893: PUSH
11894: LD_INT 102
11896: PUSH
11897: LD_INT 105
11899: PUSH
11900: LD_INT 106
11902: PUSH
11903: LD_INT 108
11905: PUSH
11906: LD_INT 109
11908: PUSH
11909: LD_INT 112
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: ST_TO_ADDR
11925: GO 14420
11927: LD_INT 6
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 12055
11935: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: LD_INT 6
11952: PUSH
11953: LD_INT 8
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 20
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: LD_INT 23
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 26
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 31
11991: PUSH
11992: LD_INT 32
11994: PUSH
11995: LD_INT 36
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 102
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 108
12033: PUSH
12034: LD_INT 109
12036: PUSH
12037: LD_INT 112
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: ST_TO_ADDR
12053: GO 14420
12055: LD_INT 7
12057: DOUBLE
12058: EQUAL
12059: IFTRUE 12063
12061: GO 12163
12063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: LD_INT 7
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 15
12089: PUSH
12090: LD_INT 16
12092: PUSH
12093: LD_INT 20
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 25
12107: PUSH
12108: LD_INT 26
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 101
12129: PUSH
12130: LD_INT 102
12132: PUSH
12133: LD_INT 103
12135: PUSH
12136: LD_INT 105
12138: PUSH
12139: LD_INT 106
12141: PUSH
12142: LD_INT 108
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: ST_TO_ADDR
12161: GO 14420
12163: LD_INT 8
12165: DOUBLE
12166: EQUAL
12167: IFTRUE 12171
12169: GO 12299
12171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: LD_INT 4
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: LD_INT 6
12188: PUSH
12189: LD_INT 7
12191: PUSH
12192: LD_INT 8
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 15
12203: PUSH
12204: LD_INT 16
12206: PUSH
12207: LD_INT 20
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 26
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 31
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 36
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 101
12261: PUSH
12262: LD_INT 102
12264: PUSH
12265: LD_INT 103
12267: PUSH
12268: LD_INT 105
12270: PUSH
12271: LD_INT 106
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 112
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: ST_TO_ADDR
12297: GO 14420
12299: LD_INT 9
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12443
12307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12308: LD_ADDR_VAR 0 1
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: LD_INT 5
12321: PUSH
12322: LD_INT 6
12324: PUSH
12325: LD_INT 7
12327: PUSH
12328: LD_INT 8
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: LD_INT 15
12339: PUSH
12340: LD_INT 16
12342: PUSH
12343: LD_INT 20
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_INT 23
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 26
12360: PUSH
12361: LD_INT 28
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 31
12369: PUSH
12370: LD_INT 32
12372: PUSH
12373: LD_INT 36
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 101
12401: PUSH
12402: LD_INT 102
12404: PUSH
12405: LD_INT 103
12407: PUSH
12408: LD_INT 105
12410: PUSH
12411: LD_INT 106
12413: PUSH
12414: LD_INT 108
12416: PUSH
12417: LD_INT 109
12419: PUSH
12420: LD_INT 112
12422: PUSH
12423: LD_INT 114
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: ST_TO_ADDR
12441: GO 14420
12443: LD_INT 10
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12635
12451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12452: LD_ADDR_VAR 0 1
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 4
12462: PUSH
12463: LD_INT 5
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: LD_INT 8
12474: PUSH
12475: LD_INT 9
12477: PUSH
12478: LD_INT 10
12480: PUSH
12481: LD_INT 11
12483: PUSH
12484: LD_INT 12
12486: PUSH
12487: LD_INT 13
12489: PUSH
12490: LD_INT 14
12492: PUSH
12493: LD_INT 15
12495: PUSH
12496: LD_INT 16
12498: PUSH
12499: LD_INT 17
12501: PUSH
12502: LD_INT 18
12504: PUSH
12505: LD_INT 19
12507: PUSH
12508: LD_INT 20
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_INT 23
12519: PUSH
12520: LD_INT 24
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 26
12528: PUSH
12529: LD_INT 28
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 31
12537: PUSH
12538: LD_INT 32
12540: PUSH
12541: LD_INT 36
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 101
12577: PUSH
12578: LD_INT 102
12580: PUSH
12581: LD_INT 103
12583: PUSH
12584: LD_INT 104
12586: PUSH
12587: LD_INT 105
12589: PUSH
12590: LD_INT 106
12592: PUSH
12593: LD_INT 107
12595: PUSH
12596: LD_INT 108
12598: PUSH
12599: LD_INT 109
12601: PUSH
12602: LD_INT 110
12604: PUSH
12605: LD_INT 111
12607: PUSH
12608: LD_INT 112
12610: PUSH
12611: LD_INT 114
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: ST_TO_ADDR
12633: GO 14420
12635: LD_INT 11
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12835
12643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 2
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: LD_INT 4
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: LD_INT 6
12663: PUSH
12664: LD_INT 7
12666: PUSH
12667: LD_INT 8
12669: PUSH
12670: LD_INT 9
12672: PUSH
12673: LD_INT 10
12675: PUSH
12676: LD_INT 11
12678: PUSH
12679: LD_INT 12
12681: PUSH
12682: LD_INT 13
12684: PUSH
12685: LD_INT 14
12687: PUSH
12688: LD_INT 15
12690: PUSH
12691: LD_INT 16
12693: PUSH
12694: LD_INT 17
12696: PUSH
12697: LD_INT 18
12699: PUSH
12700: LD_INT 19
12702: PUSH
12703: LD_INT 20
12705: PUSH
12706: LD_INT 21
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_INT 23
12714: PUSH
12715: LD_INT 24
12717: PUSH
12718: LD_INT 25
12720: PUSH
12721: LD_INT 26
12723: PUSH
12724: LD_INT 28
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: LD_INT 32
12735: PUSH
12736: LD_INT 34
12738: PUSH
12739: LD_INT 36
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 101
12777: PUSH
12778: LD_INT 102
12780: PUSH
12781: LD_INT 103
12783: PUSH
12784: LD_INT 104
12786: PUSH
12787: LD_INT 105
12789: PUSH
12790: LD_INT 106
12792: PUSH
12793: LD_INT 107
12795: PUSH
12796: LD_INT 108
12798: PUSH
12799: LD_INT 109
12801: PUSH
12802: LD_INT 110
12804: PUSH
12805: LD_INT 111
12807: PUSH
12808: LD_INT 112
12810: PUSH
12811: LD_INT 114
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
12833: GO 14420
12835: LD_INT 12
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 13051
12843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 4
12860: PUSH
12861: LD_INT 5
12863: PUSH
12864: LD_INT 6
12866: PUSH
12867: LD_INT 7
12869: PUSH
12870: LD_INT 8
12872: PUSH
12873: LD_INT 9
12875: PUSH
12876: LD_INT 10
12878: PUSH
12879: LD_INT 11
12881: PUSH
12882: LD_INT 12
12884: PUSH
12885: LD_INT 13
12887: PUSH
12888: LD_INT 14
12890: PUSH
12891: LD_INT 15
12893: PUSH
12894: LD_INT 16
12896: PUSH
12897: LD_INT 17
12899: PUSH
12900: LD_INT 18
12902: PUSH
12903: LD_INT 19
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 24
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 27
12929: PUSH
12930: LD_INT 28
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 31
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 34
12947: PUSH
12948: LD_INT 36
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 101
12989: PUSH
12990: LD_INT 102
12992: PUSH
12993: LD_INT 103
12995: PUSH
12996: LD_INT 104
12998: PUSH
12999: LD_INT 105
13001: PUSH
13002: LD_INT 106
13004: PUSH
13005: LD_INT 107
13007: PUSH
13008: LD_INT 108
13010: PUSH
13011: LD_INT 109
13013: PUSH
13014: LD_INT 110
13016: PUSH
13017: LD_INT 111
13019: PUSH
13020: LD_INT 112
13022: PUSH
13023: LD_INT 113
13025: PUSH
13026: LD_INT 114
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: ST_TO_ADDR
13049: GO 14420
13051: LD_INT 13
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13255
13059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: LD_INT 4
13076: PUSH
13077: LD_INT 5
13079: PUSH
13080: LD_INT 8
13082: PUSH
13083: LD_INT 9
13085: PUSH
13086: LD_INT 10
13088: PUSH
13089: LD_INT 11
13091: PUSH
13092: LD_INT 12
13094: PUSH
13095: LD_INT 14
13097: PUSH
13098: LD_INT 15
13100: PUSH
13101: LD_INT 16
13103: PUSH
13104: LD_INT 17
13106: PUSH
13107: LD_INT 18
13109: PUSH
13110: LD_INT 19
13112: PUSH
13113: LD_INT 20
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 24
13127: PUSH
13128: LD_INT 25
13130: PUSH
13131: LD_INT 26
13133: PUSH
13134: LD_INT 27
13136: PUSH
13137: LD_INT 28
13139: PUSH
13140: LD_INT 30
13142: PUSH
13143: LD_INT 31
13145: PUSH
13146: LD_INT 32
13148: PUSH
13149: LD_INT 33
13151: PUSH
13152: LD_INT 34
13154: PUSH
13155: LD_INT 36
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 101
13193: PUSH
13194: LD_INT 102
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 104
13202: PUSH
13203: LD_INT 105
13205: PUSH
13206: LD_INT 106
13208: PUSH
13209: LD_INT 107
13211: PUSH
13212: LD_INT 108
13214: PUSH
13215: LD_INT 109
13217: PUSH
13218: LD_INT 110
13220: PUSH
13221: LD_INT 111
13223: PUSH
13224: LD_INT 112
13226: PUSH
13227: LD_INT 113
13229: PUSH
13230: LD_INT 114
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 14420
13255: LD_INT 14
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13475
13263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 36
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 101
13413: PUSH
13414: LD_INT 102
13416: PUSH
13417: LD_INT 103
13419: PUSH
13420: LD_INT 104
13422: PUSH
13423: LD_INT 105
13425: PUSH
13426: LD_INT 106
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 108
13434: PUSH
13435: LD_INT 109
13437: PUSH
13438: LD_INT 110
13440: PUSH
13441: LD_INT 111
13443: PUSH
13444: LD_INT 112
13446: PUSH
13447: LD_INT 113
13449: PUSH
13450: LD_INT 114
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: ST_TO_ADDR
13473: GO 14420
13475: LD_INT 15
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13695
13483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13484: LD_ADDR_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: LD_INT 6
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: LD_INT 8
13512: PUSH
13513: LD_INT 9
13515: PUSH
13516: LD_INT 10
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: LD_INT 12
13524: PUSH
13525: LD_INT 13
13527: PUSH
13528: LD_INT 14
13530: PUSH
13531: LD_INT 15
13533: PUSH
13534: LD_INT 16
13536: PUSH
13537: LD_INT 17
13539: PUSH
13540: LD_INT 18
13542: PUSH
13543: LD_INT 19
13545: PUSH
13546: LD_INT 20
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 22
13554: PUSH
13555: LD_INT 23
13557: PUSH
13558: LD_INT 24
13560: PUSH
13561: LD_INT 25
13563: PUSH
13564: LD_INT 26
13566: PUSH
13567: LD_INT 27
13569: PUSH
13570: LD_INT 28
13572: PUSH
13573: LD_INT 29
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 31
13581: PUSH
13582: LD_INT 32
13584: PUSH
13585: LD_INT 33
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 36
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 101
13633: PUSH
13634: LD_INT 102
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: LD_INT 104
13642: PUSH
13643: LD_INT 105
13645: PUSH
13646: LD_INT 106
13648: PUSH
13649: LD_INT 107
13651: PUSH
13652: LD_INT 108
13654: PUSH
13655: LD_INT 109
13657: PUSH
13658: LD_INT 110
13660: PUSH
13661: LD_INT 111
13663: PUSH
13664: LD_INT 112
13666: PUSH
13667: LD_INT 113
13669: PUSH
13670: LD_INT 114
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: ST_TO_ADDR
13693: GO 14420
13695: LD_INT 16
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13827
13703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: LD_INT 5
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 31
13756: PUSH
13757: LD_INT 32
13759: PUSH
13760: LD_INT 33
13762: PUSH
13763: LD_INT 34
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 101
13789: PUSH
13790: LD_INT 102
13792: PUSH
13793: LD_INT 103
13795: PUSH
13796: LD_INT 106
13798: PUSH
13799: LD_INT 108
13801: PUSH
13802: LD_INT 112
13804: PUSH
13805: LD_INT 113
13807: PUSH
13808: LD_INT 114
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: ST_TO_ADDR
13825: GO 14420
13827: LD_INT 17
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 14047
13835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 3
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: LD_INT 6
13858: PUSH
13859: LD_INT 7
13861: PUSH
13862: LD_INT 8
13864: PUSH
13865: LD_INT 9
13867: PUSH
13868: LD_INT 10
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: LD_INT 13
13879: PUSH
13880: LD_INT 14
13882: PUSH
13883: LD_INT 15
13885: PUSH
13886: LD_INT 16
13888: PUSH
13889: LD_INT 17
13891: PUSH
13892: LD_INT 18
13894: PUSH
13895: LD_INT 19
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 24
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 26
13918: PUSH
13919: LD_INT 27
13921: PUSH
13922: LD_INT 28
13924: PUSH
13925: LD_INT 29
13927: PUSH
13928: LD_INT 30
13930: PUSH
13931: LD_INT 31
13933: PUSH
13934: LD_INT 32
13936: PUSH
13937: LD_INT 33
13939: PUSH
13940: LD_INT 34
13942: PUSH
13943: LD_INT 36
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 101
13985: PUSH
13986: LD_INT 102
13988: PUSH
13989: LD_INT 103
13991: PUSH
13992: LD_INT 104
13994: PUSH
13995: LD_INT 105
13997: PUSH
13998: LD_INT 106
14000: PUSH
14001: LD_INT 107
14003: PUSH
14004: LD_INT 108
14006: PUSH
14007: LD_INT 109
14009: PUSH
14010: LD_INT 110
14012: PUSH
14013: LD_INT 111
14015: PUSH
14016: LD_INT 112
14018: PUSH
14019: LD_INT 113
14021: PUSH
14022: LD_INT 114
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: ST_TO_ADDR
14045: GO 14420
14047: LD_INT 18
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14191
14055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: LD_INT 7
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 16
14084: PUSH
14085: LD_INT 20
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 26
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 31
14108: PUSH
14109: LD_INT 32
14111: PUSH
14112: LD_INT 33
14114: PUSH
14115: LD_INT 34
14117: PUSH
14118: LD_INT 35
14120: PUSH
14121: LD_INT 36
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 103
14155: PUSH
14156: LD_INT 106
14158: PUSH
14159: LD_INT 108
14161: PUSH
14162: LD_INT 112
14164: PUSH
14165: LD_INT 113
14167: PUSH
14168: LD_INT 114
14170: PUSH
14171: LD_INT 115
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 14420
14191: LD_INT 19
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14419
14199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: LD_INT 3
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 9
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 12
14240: PUSH
14241: LD_INT 13
14243: PUSH
14244: LD_INT 14
14246: PUSH
14247: LD_INT 15
14249: PUSH
14250: LD_INT 16
14252: PUSH
14253: LD_INT 17
14255: PUSH
14256: LD_INT 18
14258: PUSH
14259: LD_INT 19
14261: PUSH
14262: LD_INT 20
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 24
14276: PUSH
14277: LD_INT 25
14279: PUSH
14280: LD_INT 26
14282: PUSH
14283: LD_INT 27
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 29
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: LD_INT 35
14309: PUSH
14310: LD_INT 36
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 103
14359: PUSH
14360: LD_INT 104
14362: PUSH
14363: LD_INT 105
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 107
14371: PUSH
14372: LD_INT 108
14374: PUSH
14375: LD_INT 109
14377: PUSH
14378: LD_INT 110
14380: PUSH
14381: LD_INT 111
14383: PUSH
14384: LD_INT 112
14386: PUSH
14387: LD_INT 113
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: LD_INT 115
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: ST_TO_ADDR
14417: GO 14420
14419: POP
// end else
14420: GO 14639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14422: LD_ADDR_VAR 0 1
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 4
14438: PUSH
14439: LD_INT 5
14441: PUSH
14442: LD_INT 6
14444: PUSH
14445: LD_INT 7
14447: PUSH
14448: LD_INT 8
14450: PUSH
14451: LD_INT 9
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 11
14459: PUSH
14460: LD_INT 12
14462: PUSH
14463: LD_INT 13
14465: PUSH
14466: LD_INT 14
14468: PUSH
14469: LD_INT 15
14471: PUSH
14472: LD_INT 16
14474: PUSH
14475: LD_INT 17
14477: PUSH
14478: LD_INT 18
14480: PUSH
14481: LD_INT 19
14483: PUSH
14484: LD_INT 20
14486: PUSH
14487: LD_INT 21
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 23
14495: PUSH
14496: LD_INT 24
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 26
14504: PUSH
14505: LD_INT 27
14507: PUSH
14508: LD_INT 28
14510: PUSH
14511: LD_INT 29
14513: PUSH
14514: LD_INT 30
14516: PUSH
14517: LD_INT 31
14519: PUSH
14520: LD_INT 32
14522: PUSH
14523: LD_INT 33
14525: PUSH
14526: LD_INT 34
14528: PUSH
14529: LD_INT 35
14531: PUSH
14532: LD_INT 36
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 101
14575: PUSH
14576: LD_INT 102
14578: PUSH
14579: LD_INT 103
14581: PUSH
14582: LD_INT 104
14584: PUSH
14585: LD_INT 105
14587: PUSH
14588: LD_INT 106
14590: PUSH
14591: LD_INT 107
14593: PUSH
14594: LD_INT 108
14596: PUSH
14597: LD_INT 109
14599: PUSH
14600: LD_INT 110
14602: PUSH
14603: LD_INT 111
14605: PUSH
14606: LD_INT 112
14608: PUSH
14609: LD_INT 113
14611: PUSH
14612: LD_INT 114
14614: PUSH
14615: LD_INT 115
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: ST_TO_ADDR
// if result then
14639: LD_VAR 0 1
14643: IFFALSE 14932
// begin normal :=  ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_STRING 
14652: ST_TO_ADDR
// hardcore :=  ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_STRING 
14660: ST_TO_ADDR
// for i = 1 to normalCounter do
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: DOUBLE
14667: LD_INT 1
14669: DEC
14670: ST_TO_ADDR
14671: LD_EXP 27
14675: PUSH
14676: FOR_TO
14677: IFFALSE 14778
// begin tmp := 0 ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_STRING 0
14686: ST_TO_ADDR
// if result [ 1 ] then
14687: LD_VAR 0 1
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: IFFALSE 14760
// if result [ 1 ] [ 1 ] = i then
14697: LD_VAR 0 1
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 5
14714: EQUAL
14715: IFFALSE 14760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_VAR 0 1
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 3
14746: PPUSH
14747: CALL_OW 1
14751: ST_TO_ADDR
// tmp := 1 ;
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_STRING 1
14759: ST_TO_ADDR
// end ; normal := normal & tmp ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_VAR 0 3
14769: PUSH
14770: LD_VAR 0 2
14774: STR
14775: ST_TO_ADDR
// end ;
14776: GO 14676
14778: POP
14779: POP
// for i = 1 to hardcoreCounter do
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_EXP 28
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14901
// begin tmp := 0 ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_STRING 0
14805: ST_TO_ADDR
// if result [ 2 ] then
14806: LD_VAR 0 1
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: IFFALSE 14883
// if result [ 2 ] [ 1 ] = 100 + i then
14816: LD_VAR 0 1
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_INT 100
14831: PUSH
14832: LD_VAR 0 5
14836: PLUS
14837: EQUAL
14838: IFFALSE 14883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: LD_VAR 0 1
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 3
14869: PPUSH
14870: CALL_OW 1
14874: ST_TO_ADDR
// tmp := 1 ;
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_STRING 1
14882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_VAR 0 4
14892: PUSH
14893: LD_VAR 0 2
14897: STR
14898: ST_TO_ADDR
// end ;
14899: GO 14795
14901: POP
14902: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14903: LD_STRING getStreamItemsFromMission("
14905: PUSH
14906: LD_VAR 0 3
14910: STR
14911: PUSH
14912: LD_STRING ","
14914: STR
14915: PUSH
14916: LD_VAR 0 4
14920: STR
14921: PUSH
14922: LD_STRING ")
14924: STR
14925: PPUSH
14926: CALL_OW 559
// end else
14930: GO 14939
// ToLua ( getStreamItemsFromMission("","") ) ;
14932: LD_STRING getStreamItemsFromMission("","")
14934: PPUSH
14935: CALL_OW 559
// end ;
14939: LD_VAR 0 1
14943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14944: LD_EXP 26
14948: PUSH
14949: LD_EXP 31
14953: AND
14954: IFFALSE 15078
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin enable ;
14963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 34
14986: PUSH
14987: LD_INT 7
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 34
14996: PUSH
14997: LD_INT 45
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 34
15006: PUSH
15007: LD_INT 28
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 34
15016: PUSH
15017: LD_INT 47
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 2
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15078
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15076
// begin SetLives ( i , 0 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 0
15069: PPUSH
15070: CALL_OW 234
// end ;
15074: GO 15059
15076: POP
15077: POP
// end ;
15078: PPOPN 2
15080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15081: LD_EXP 26
15085: PUSH
15086: LD_EXP 32
15090: AND
15091: IFFALSE 15175
15093: GO 15095
15095: DISABLE
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
// begin enable ;
15100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 2
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15175
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 2
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15173
// begin SetLives ( i , 0 ) ;
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 234
// end ;
15171: GO 15156
15173: POP
15174: POP
// end ;
15175: PPOPN 2
15177: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15178: LD_EXP 26
15182: PUSH
15183: LD_EXP 29
15187: AND
15188: IFFALSE 15281
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
// begin enable ;
15196: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15197: LD_ADDR_VAR 0 1
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: LD_INT 25
15219: PUSH
15220: LD_INT 5
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 25
15229: PUSH
15230: LD_INT 9
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 8
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15279
// begin SetClass ( i , 1 ) ;
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 336
// end ;
15277: GO 15262
15279: POP
15280: POP
// end ;
15281: PPOPN 1
15283: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15284: LD_EXP 26
15288: PUSH
15289: LD_EXP 30
15293: AND
15294: PUSH
15295: LD_OWVAR 65
15299: PUSH
15300: LD_INT 7
15302: LESS
15303: AND
15304: IFFALSE 15318
15306: GO 15308
15308: DISABLE
// begin enable ;
15309: ENABLE
// game_speed := 7 ;
15310: LD_ADDR_OWVAR 65
15314: PUSH
15315: LD_INT 7
15317: ST_TO_ADDR
// end ;
15318: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15319: LD_EXP 26
15323: PUSH
15324: LD_EXP 33
15328: AND
15329: IFFALSE 15531
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_INT 81
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: ST_TO_ADDR
// if not tmp then
15375: LD_VAR 0 3
15379: NOT
15380: IFFALSE 15384
// exit ;
15382: GO 15531
// if tmp > 5 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 5
15391: GREATER
15392: IFFALSE 15404
// k := 5 else
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 5
15401: ST_TO_ADDR
15402: GO 15414
// k := tmp ;
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: LD_VAR 0 3
15413: ST_TO_ADDR
// for i := 1 to k do
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_VAR 0 2
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_VAR 0 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 1
15447: PUSH
15448: LD_INT 4
15450: MOD
15451: PUSH
15452: LD_INT 1
15454: PLUS
15455: PPUSH
15456: CALL_OW 259
15460: PUSH
15461: LD_INT 10
15463: LESS
15464: IFFALSE 15527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15466: LD_VAR 0 3
15470: PUSH
15471: LD_VAR 0 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_INT 4
15484: MOD
15485: PUSH
15486: LD_INT 1
15488: PLUS
15489: PPUSH
15490: LD_VAR 0 3
15494: PUSH
15495: LD_VAR 0 1
15499: ARRAY
15500: PPUSH
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 4
15508: MOD
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: CALL_OW 259
15518: PUSH
15519: LD_INT 1
15521: PLUS
15522: PPUSH
15523: CALL_OW 237
15527: GO 15429
15529: POP
15530: POP
// end ;
15531: PPOPN 3
15533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15534: LD_EXP 26
15538: PUSH
15539: LD_EXP 34
15543: AND
15544: IFFALSE 15564
15546: GO 15548
15548: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15549: LD_INT 4
15551: PPUSH
15552: LD_OWVAR 2
15556: PPUSH
15557: LD_INT 0
15559: PPUSH
15560: CALL_OW 324
15564: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15565: LD_EXP 26
15569: PUSH
15570: LD_EXP 63
15574: AND
15575: IFFALSE 15595
15577: GO 15579
15579: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15580: LD_INT 19
15582: PPUSH
15583: LD_OWVAR 2
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 324
15595: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15596: LD_EXP 26
15600: PUSH
15601: LD_EXP 35
15605: AND
15606: IFFALSE 15708
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
// begin enable ;
15615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: LD_INT 34
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 34
15648: PUSH
15649: LD_INT 30
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 2
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15708
// for i in tmp do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 2
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15706
// begin SetLives ( i , 0 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 0
15699: PPUSH
15700: CALL_OW 234
// end ;
15704: GO 15689
15706: POP
15707: POP
// end ;
15708: PPOPN 2
15710: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15711: LD_EXP 26
15715: PUSH
15716: LD_EXP 36
15720: AND
15721: IFFALSE 15741
15723: GO 15725
15725: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15726: LD_INT 32
15728: PPUSH
15729: LD_OWVAR 2
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 324
15741: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15742: LD_EXP 26
15746: PUSH
15747: LD_EXP 37
15751: AND
15752: IFFALSE 15933
15754: GO 15756
15756: DISABLE
15757: LD_INT 0
15759: PPUSH
15760: PPUSH
15761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_OWVAR 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 33
15781: PUSH
15782: LD_INT 3
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: ST_TO_ADDR
// if not tmp then
15798: LD_VAR 0 2
15802: NOT
15803: IFFALSE 15807
// exit ;
15805: GO 15933
// side := 0 ;
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i := 1 to 8 do
15815: LD_ADDR_VAR 0 1
15819: PUSH
15820: DOUBLE
15821: LD_INT 1
15823: DEC
15824: ST_TO_ADDR
15825: LD_INT 8
15827: PUSH
15828: FOR_TO
15829: IFFALSE 15877
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15831: LD_OWVAR 2
15835: PUSH
15836: LD_VAR 0 1
15840: NONEQUAL
15841: PUSH
15842: LD_OWVAR 2
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 81
15856: PUSH
15857: LD_INT 2
15859: EQUAL
15860: AND
15861: IFFALSE 15875
// begin side := i ;
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_VAR 0 1
15872: ST_TO_ADDR
// break ;
15873: GO 15877
// end ;
15875: GO 15828
15877: POP
15878: POP
// if not side then
15879: LD_VAR 0 3
15883: NOT
15884: IFFALSE 15888
// exit ;
15886: GO 15933
// for i := 1 to tmp do
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: DOUBLE
15894: LD_INT 1
15896: DEC
15897: ST_TO_ADDR
15898: LD_VAR 0 2
15902: PUSH
15903: FOR_TO
15904: IFFALSE 15931
// if Prob ( 60 ) then
15906: LD_INT 60
15908: PPUSH
15909: CALL_OW 13
15913: IFFALSE 15929
// SetSide ( i , side ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: CALL_OW 235
15929: GO 15903
15931: POP
15932: POP
// end ;
15933: PPOPN 3
15935: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15936: LD_EXP 26
15940: PUSH
15941: LD_EXP 39
15945: AND
15946: IFFALSE 16065
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 22
15961: PUSH
15962: LD_OWVAR 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 3
15983: PUSH
15984: LD_INT 23
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PPUSH
16003: CALL_OW 69
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16063
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 257
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: IN
16039: IFFALSE 16061
// SetClass ( un , rand ( 1 , 4 ) ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 4
16051: PPUSH
16052: CALL_OW 12
16056: PPUSH
16057: CALL_OW 336
16061: GO 16008
16063: POP
16064: POP
// end ;
16065: PPOPN 1
16067: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16068: LD_EXP 26
16072: PUSH
16073: LD_EXP 38
16077: AND
16078: IFFALSE 16157
16080: GO 16082
16082: DISABLE
16083: LD_INT 0
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 1
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16131: LD_VAR 0 1
16135: PUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: PPUSH
16150: LD_INT 100
16152: PPUSH
16153: CALL_OW 234
// end ;
16157: PPOPN 1
16159: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16160: LD_EXP 26
16164: PUSH
16165: LD_EXP 40
16169: AND
16170: IFFALSE 16268
16172: GO 16174
16174: DISABLE
16175: LD_INT 0
16177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 21
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 69
16213: ST_TO_ADDR
// if not tmp then
16214: LD_VAR 0 1
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16268
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 12
16240: ARRAY
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: LD_INT 4
16247: PPUSH
16248: CALL_OW 12
16252: PPUSH
16253: LD_INT 3000
16255: PPUSH
16256: LD_INT 9000
16258: PPUSH
16259: CALL_OW 12
16263: PPUSH
16264: CALL_OW 492
// end ;
16268: PPOPN 1
16270: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16271: LD_EXP 26
16275: PUSH
16276: LD_EXP 41
16280: AND
16281: IFFALSE 16301
16283: GO 16285
16285: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16286: LD_INT 1
16288: PPUSH
16289: LD_OWVAR 2
16293: PPUSH
16294: LD_INT 0
16296: PPUSH
16297: CALL_OW 324
16301: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16302: LD_EXP 26
16306: PUSH
16307: LD_EXP 42
16311: AND
16312: IFFALSE 16395
16314: GO 16316
16316: DISABLE
16317: LD_INT 0
16319: PPUSH
16320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16321: LD_ADDR_VAR 0 2
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_OWVAR 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 21
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: ST_TO_ADDR
// if not tmp then
16357: LD_VAR 0 2
16361: NOT
16362: IFFALSE 16366
// exit ;
16364: GO 16395
// for i in tmp do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: LD_VAR 0 2
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16393
// SetBLevel ( i , 10 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 10
16386: PPUSH
16387: CALL_OW 241
16391: GO 16376
16393: POP
16394: POP
// end ;
16395: PPOPN 2
16397: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16398: LD_EXP 26
16402: PUSH
16403: LD_EXP 43
16407: AND
16408: IFFALSE 16519
16410: GO 16412
16412: DISABLE
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 22
16425: PUSH
16426: LD_OWVAR 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 25
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 3
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16519
// un := tmp [ rand ( 1 , tmp ) ] ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_VAR 0 3
16472: PUSH
16473: LD_INT 1
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: CALL_OW 12
16485: ARRAY
16486: ST_TO_ADDR
// if Crawls ( un ) then
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 318
16496: IFFALSE 16507
// ComWalk ( un ) ;
16498: LD_VAR 0 2
16502: PPUSH
16503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16507: LD_VAR 0 2
16511: PPUSH
16512: LD_INT 5
16514: PPUSH
16515: CALL_OW 336
// end ;
16519: PPOPN 3
16521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16522: LD_EXP 26
16526: PUSH
16527: LD_EXP 44
16531: AND
16532: PUSH
16533: LD_OWVAR 67
16537: PUSH
16538: LD_INT 3
16540: LESS
16541: AND
16542: IFFALSE 16561
16544: GO 16546
16546: DISABLE
// Difficulty := Difficulty + 1 ;
16547: LD_ADDR_OWVAR 67
16551: PUSH
16552: LD_OWVAR 67
16556: PUSH
16557: LD_INT 1
16559: PLUS
16560: ST_TO_ADDR
16561: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16562: LD_EXP 26
16566: PUSH
16567: LD_EXP 45
16571: AND
16572: IFFALSE 16675
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
// begin for i := 1 to 5 do
16580: LD_ADDR_VAR 0 1
16584: PUSH
16585: DOUBLE
16586: LD_INT 1
16588: DEC
16589: ST_TO_ADDR
16590: LD_INT 5
16592: PUSH
16593: FOR_TO
16594: IFFALSE 16673
// begin uc_nation := nation_nature ;
16596: LD_ADDR_OWVAR 21
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// uc_side := 0 ;
16604: LD_ADDR_OWVAR 20
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16612: LD_ADDR_OWVAR 29
16616: PUSH
16617: LD_INT 12
16619: PUSH
16620: LD_INT 12
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: ST_TO_ADDR
// hc_agressivity := 20 ;
16627: LD_ADDR_OWVAR 35
16631: PUSH
16632: LD_INT 20
16634: ST_TO_ADDR
// hc_class := class_tiger ;
16635: LD_ADDR_OWVAR 28
16639: PUSH
16640: LD_INT 14
16642: ST_TO_ADDR
// hc_gallery :=  ;
16643: LD_ADDR_OWVAR 33
16647: PUSH
16648: LD_STRING 
16650: ST_TO_ADDR
// hc_name :=  ;
16651: LD_ADDR_OWVAR 26
16655: PUSH
16656: LD_STRING 
16658: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16659: CALL_OW 44
16663: PPUSH
16664: LD_INT 0
16666: PPUSH
16667: CALL_OW 51
// end ;
16671: GO 16593
16673: POP
16674: POP
// end ;
16675: PPOPN 1
16677: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16678: LD_EXP 26
16682: PUSH
16683: LD_EXP 46
16687: AND
16688: IFFALSE 16697
16690: GO 16692
16692: DISABLE
// StreamSibBomb ;
16693: CALL 16698 0 0
16697: END
// export function StreamSibBomb ; var i , x , y ; begin
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
16703: PPUSH
// result := false ;
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// for i := 1 to 16 do
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: DOUBLE
16718: LD_INT 1
16720: DEC
16721: ST_TO_ADDR
16722: LD_INT 16
16724: PUSH
16725: FOR_TO
16726: IFFALSE 16925
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16728: LD_ADDR_VAR 0 3
16732: PUSH
16733: LD_INT 10
16735: PUSH
16736: LD_INT 20
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 40
16744: PUSH
16745: LD_INT 50
16747: PUSH
16748: LD_INT 60
16750: PUSH
16751: LD_INT 70
16753: PUSH
16754: LD_INT 80
16756: PUSH
16757: LD_INT 90
16759: PUSH
16760: LD_INT 100
16762: PUSH
16763: LD_INT 110
16765: PUSH
16766: LD_INT 120
16768: PUSH
16769: LD_INT 130
16771: PUSH
16772: LD_INT 140
16774: PUSH
16775: LD_INT 150
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 15
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16807: LD_ADDR_VAR 0 4
16811: PUSH
16812: LD_INT 10
16814: PUSH
16815: LD_INT 20
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: LD_INT 40
16823: PUSH
16824: LD_INT 50
16826: PUSH
16827: LD_INT 60
16829: PUSH
16830: LD_INT 70
16832: PUSH
16833: LD_INT 80
16835: PUSH
16836: LD_INT 90
16838: PUSH
16839: LD_INT 100
16841: PUSH
16842: LD_INT 110
16844: PUSH
16845: LD_INT 120
16847: PUSH
16848: LD_INT 130
16850: PUSH
16851: LD_INT 140
16853: PUSH
16854: LD_INT 150
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 15
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: ST_TO_ADDR
// if ValidHex ( x , y ) then
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_VAR 0 4
16895: PPUSH
16896: CALL_OW 488
16900: IFFALSE 16923
// begin result := [ x , y ] ;
16902: LD_ADDR_VAR 0 1
16906: PUSH
16907: LD_VAR 0 3
16911: PUSH
16912: LD_VAR 0 4
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: ST_TO_ADDR
// break ;
16921: GO 16925
// end ; end ;
16923: GO 16725
16925: POP
16926: POP
// if result then
16927: LD_VAR 0 1
16931: IFFALSE 16991
// begin ToLua ( playSibBomb() ) ;
16933: LD_STRING playSibBomb()
16935: PPUSH
16936: CALL_OW 559
// wait ( 0 0$14 ) ;
16940: LD_INT 490
16942: PPUSH
16943: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PPUSH
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PPUSH
16965: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: LD_VAR 0 1
16982: PUSH
16983: LD_INT 2
16985: ARRAY
16986: PPUSH
16987: CALL_OW 429
// end ; end ;
16991: LD_VAR 0 1
16995: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16996: LD_EXP 26
17000: PUSH
17001: LD_EXP 48
17005: AND
17006: IFFALSE 17018
17008: GO 17010
17010: DISABLE
// YouLost (  ) ;
17011: LD_STRING 
17013: PPUSH
17014: CALL_OW 104
17018: END
// every 0 0$1 trigger StreamModeActive and sFog do
17019: LD_EXP 26
17023: PUSH
17024: LD_EXP 47
17028: AND
17029: IFFALSE 17043
17031: GO 17033
17033: DISABLE
// FogOff ( your_side ) ;
17034: LD_OWVAR 2
17038: PPUSH
17039: CALL_OW 344
17043: END
// every 0 0$1 trigger StreamModeActive and sSun do
17044: LD_EXP 26
17048: PUSH
17049: LD_EXP 49
17053: AND
17054: IFFALSE 17082
17056: GO 17058
17058: DISABLE
// begin solar_recharge_percent := 0 ;
17059: LD_ADDR_OWVAR 79
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17067: LD_INT 10500
17069: PPUSH
17070: CALL_OW 67
// solar_recharge_percent := 100 ;
17074: LD_ADDR_OWVAR 79
17078: PUSH
17079: LD_INT 100
17081: ST_TO_ADDR
// end ;
17082: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17083: LD_EXP 26
17087: PUSH
17088: LD_EXP 50
17092: AND
17093: IFFALSE 17332
17095: GO 17097
17097: DISABLE
17098: LD_INT 0
17100: PPUSH
17101: PPUSH
17102: PPUSH
// begin tmp := [ ] ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: EMPTY
17109: ST_TO_ADDR
// for i := 1 to 6 do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 6
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17229
// begin uc_nation := nation_nature ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// uc_side := 0 ;
17134: LD_ADDR_OWVAR 20
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17142: LD_ADDR_OWVAR 29
17146: PUSH
17147: LD_INT 12
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: ST_TO_ADDR
// hc_agressivity := 20 ;
17157: LD_ADDR_OWVAR 35
17161: PUSH
17162: LD_INT 20
17164: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17165: LD_ADDR_OWVAR 28
17169: PUSH
17170: LD_INT 17
17172: ST_TO_ADDR
// hc_gallery :=  ;
17173: LD_ADDR_OWVAR 33
17177: PUSH
17178: LD_STRING 
17180: ST_TO_ADDR
// hc_name :=  ;
17181: LD_ADDR_OWVAR 26
17185: PUSH
17186: LD_STRING 
17188: ST_TO_ADDR
// un := CreateHuman ;
17189: LD_ADDR_VAR 0 2
17193: PUSH
17194: CALL_OW 44
17198: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 51
// tmp := tmp ^ un ;
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_VAR 0 3
17220: PUSH
17221: LD_VAR 0 2
17225: ADD
17226: ST_TO_ADDR
// end ;
17227: GO 17123
17229: POP
17230: POP
// repeat wait ( 0 0$1 ) ;
17231: LD_INT 35
17233: PPUSH
17234: CALL_OW 67
// for un in tmp do
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_VAR 0 3
17247: PUSH
17248: FOR_IN
17249: IFFALSE 17323
// begin if IsDead ( un ) then
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 301
17260: IFFALSE 17280
// begin tmp := tmp diff un ;
17262: LD_ADDR_VAR 0 3
17266: PUSH
17267: LD_VAR 0 3
17271: PUSH
17272: LD_VAR 0 2
17276: DIFF
17277: ST_TO_ADDR
// continue ;
17278: GO 17248
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17280: LD_VAR 0 2
17284: PPUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: PPUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 74
17316: PPUSH
17317: CALL_OW 115
// end ;
17321: GO 17248
17323: POP
17324: POP
// until not tmp ;
17325: LD_VAR 0 3
17329: NOT
17330: IFFALSE 17231
// end ;
17332: PPOPN 3
17334: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17335: LD_EXP 26
17339: PUSH
17340: LD_EXP 51
17344: AND
17345: IFFALSE 17399
17347: GO 17349
17349: DISABLE
// begin ToLua ( displayTroll(); ) ;
17350: LD_STRING displayTroll();
17352: PPUSH
17353: CALL_OW 559
// wait ( 3 3$00 ) ;
17357: LD_INT 6300
17359: PPUSH
17360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17364: LD_STRING hideTroll();
17366: PPUSH
17367: CALL_OW 559
// wait ( 1 1$00 ) ;
17371: LD_INT 2100
17373: PPUSH
17374: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17378: LD_STRING displayTroll();
17380: PPUSH
17381: CALL_OW 559
// wait ( 1 1$00 ) ;
17385: LD_INT 2100
17387: PPUSH
17388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17392: LD_STRING hideTroll();
17394: PPUSH
17395: CALL_OW 559
// end ;
17399: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17400: LD_EXP 26
17404: PUSH
17405: LD_EXP 52
17409: AND
17410: IFFALSE 17473
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
// begin p := 0 ;
17418: LD_ADDR_VAR 0 1
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// repeat game_speed := 1 ;
17426: LD_ADDR_OWVAR 65
17430: PUSH
17431: LD_INT 1
17433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17434: LD_INT 35
17436: PPUSH
17437: CALL_OW 67
// p := p + 1 ;
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PLUS
17454: ST_TO_ADDR
// until p >= 60 ;
17455: LD_VAR 0 1
17459: PUSH
17460: LD_INT 60
17462: GREATEREQUAL
17463: IFFALSE 17426
// game_speed := 4 ;
17465: LD_ADDR_OWVAR 65
17469: PUSH
17470: LD_INT 4
17472: ST_TO_ADDR
// end ;
17473: PPOPN 1
17475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17476: LD_EXP 26
17480: PUSH
17481: LD_EXP 53
17485: AND
17486: IFFALSE 17632
17488: GO 17490
17490: DISABLE
17491: LD_INT 0
17493: PPUSH
17494: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17495: LD_ADDR_VAR 0 1
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_OWVAR 2
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not depot then
17549: LD_VAR 0 1
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17632
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 1
17567: PUSH
17568: LD_INT 1
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: PPUSH
17582: CALL_OW 274
17586: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 0
17597: PPUSH
17598: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 2
17609: PPUSH
17610: LD_INT 0
17612: PPUSH
17613: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: LD_INT 0
17627: PPUSH
17628: CALL_OW 277
// end ;
17632: PPOPN 2
17634: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17635: LD_EXP 26
17639: PUSH
17640: LD_EXP 54
17644: AND
17645: IFFALSE 17742
17647: GO 17649
17649: DISABLE
17650: LD_INT 0
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_INT 22
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: LD_INT 23
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
// if not tmp then
17707: LD_VAR 0 1
17711: NOT
17712: IFFALSE 17716
// exit ;
17714: GO 17742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 12
17733: ARRAY
17734: PPUSH
17735: LD_INT 200
17737: PPUSH
17738: CALL_OW 234
// end ;
17742: PPOPN 1
17744: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17745: LD_EXP 26
17749: PUSH
17750: LD_EXP 55
17754: AND
17755: IFFALSE 17834
17757: GO 17759
17759: DISABLE
17760: LD_INT 0
17762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_OWVAR 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: ST_TO_ADDR
// if not tmp then
17799: LD_VAR 0 1
17803: NOT
17804: IFFALSE 17808
// exit ;
17806: GO 17834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17808: LD_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: PPUSH
17827: LD_INT 60
17829: PPUSH
17830: CALL_OW 234
// end ;
17834: PPOPN 1
17836: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17837: LD_EXP 26
17841: PUSH
17842: LD_EXP 56
17846: AND
17847: IFFALSE 17946
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// begin enable ;
17856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_OWVAR 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 61
17876: PUSH
17877: EMPTY
17878: LIST
17879: PUSH
17880: LD_INT 33
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if not tmp then
17900: LD_VAR 0 1
17904: NOT
17905: IFFALSE 17909
// exit ;
17907: GO 17946
// for i in tmp do
17909: LD_ADDR_VAR 0 2
17913: PUSH
17914: LD_VAR 0 1
17918: PUSH
17919: FOR_IN
17920: IFFALSE 17944
// if IsControledBy ( i ) then
17922: LD_VAR 0 2
17926: PPUSH
17927: CALL_OW 312
17931: IFFALSE 17942
// ComUnlink ( i ) ;
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL_OW 136
17942: GO 17919
17944: POP
17945: POP
// end ;
17946: PPOPN 2
17948: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17949: LD_EXP 26
17953: PUSH
17954: LD_EXP 57
17958: AND
17959: IFFALSE 18099
17961: GO 17963
17963: DISABLE
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
// begin ToLua ( displayPowell(); ) ;
17968: LD_STRING displayPowell();
17970: PPUSH
17971: CALL_OW 559
// uc_side := 0 ;
17975: LD_ADDR_OWVAR 20
17979: PUSH
17980: LD_INT 0
17982: ST_TO_ADDR
// uc_nation := 2 ;
17983: LD_ADDR_OWVAR 21
17987: PUSH
17988: LD_INT 2
17990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17991: LD_ADDR_OWVAR 37
17995: PUSH
17996: LD_INT 14
17998: ST_TO_ADDR
// vc_engine := engine_siberite ;
17999: LD_ADDR_OWVAR 39
18003: PUSH
18004: LD_INT 3
18006: ST_TO_ADDR
// vc_control := control_apeman ;
18007: LD_ADDR_OWVAR 38
18011: PUSH
18012: LD_INT 5
18014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18015: LD_ADDR_OWVAR 40
18019: PUSH
18020: LD_INT 29
18022: ST_TO_ADDR
// un := CreateVehicle ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: CALL_OW 45
18032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18033: LD_VAR 0 2
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18045: LD_INT 35
18047: PPUSH
18048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 74
18083: PPUSH
18084: CALL_OW 115
// until IsDead ( un ) ;
18088: LD_VAR 0 2
18092: PPUSH
18093: CALL_OW 301
18097: IFFALSE 18045
// end ;
18099: PPOPN 2
18101: END
// every 0 0$1 trigger StreamModeActive and sStu do
18102: LD_EXP 26
18106: PUSH
18107: LD_EXP 65
18111: AND
18112: IFFALSE 18128
18114: GO 18116
18116: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18117: LD_STRING displayStucuk();
18119: PPUSH
18120: CALL_OW 559
// ResetFog ;
18124: CALL_OW 335
// end ;
18128: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18129: LD_EXP 26
18133: PUSH
18134: LD_EXP 58
18138: AND
18139: IFFALSE 18280
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18148: LD_ADDR_VAR 0 2
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_OWVAR 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if not tmp then
18184: LD_VAR 0 2
18188: NOT
18189: IFFALSE 18193
// exit ;
18191: GO 18280
// un := tmp [ rand ( 1 , tmp ) ] ;
18193: LD_ADDR_VAR 0 1
18197: PUSH
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_INT 0
18224: PPUSH
18225: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_OWVAR 3
18238: PUSH
18239: LD_VAR 0 1
18243: DIFF
18244: PPUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 74
18254: PPUSH
18255: CALL_OW 115
// wait ( 0 0$20 ) ;
18259: LD_INT 700
18261: PPUSH
18262: CALL_OW 67
// SetSide ( un , your_side ) ;
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_OWVAR 2
18275: PPUSH
18276: CALL_OW 235
// end ;
18280: PPOPN 2
18282: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18283: LD_EXP 26
18287: PUSH
18288: LD_EXP 59
18292: AND
18293: IFFALSE 18399
18295: GO 18297
18297: DISABLE
18298: LD_INT 0
18300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 30
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: ST_TO_ADDR
// if not depot then
18355: LD_VAR 0 1
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18364: LD_VAR 0 1
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: CALL_OW 250
18377: PPUSH
18378: LD_VAR 0 1
18382: PUSH
18383: LD_INT 1
18385: ARRAY
18386: PPUSH
18387: CALL_OW 251
18391: PPUSH
18392: LD_INT 70
18394: PPUSH
18395: CALL_OW 495
// end ;
18399: PPOPN 1
18401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18402: LD_EXP 26
18406: PUSH
18407: LD_EXP 60
18411: AND
18412: IFFALSE 18623
18414: GO 18416
18416: DISABLE
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18424: LD_ADDR_VAR 0 5
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: ST_TO_ADDR
// if not tmp then
18460: LD_VAR 0 5
18464: NOT
18465: IFFALSE 18469
// exit ;
18467: GO 18623
// for i in tmp do
18469: LD_ADDR_VAR 0 1
18473: PUSH
18474: LD_VAR 0 5
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18621
// begin d := rand ( 0 , 5 ) ;
18482: LD_ADDR_VAR 0 4
18486: PUSH
18487: LD_INT 0
18489: PPUSH
18490: LD_INT 5
18492: PPUSH
18493: CALL_OW 12
18497: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 250
18512: PPUSH
18513: LD_VAR 0 4
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_INT 12
18523: PPUSH
18524: CALL_OW 12
18528: PPUSH
18529: CALL_OW 272
18533: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 251
18548: PPUSH
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_INT 3
18556: PPUSH
18557: LD_INT 12
18559: PPUSH
18560: CALL_OW 12
18564: PPUSH
18565: CALL_OW 273
18569: ST_TO_ADDR
// if ValidHex ( x , y ) then
18570: LD_VAR 0 2
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: CALL_OW 488
18584: IFFALSE 18619
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 6
18606: PPUSH
18607: CALL_OW 12
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 483
// end ;
18619: GO 18479
18621: POP
18622: POP
// end ;
18623: PPOPN 5
18625: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18626: LD_EXP 26
18630: PUSH
18631: LD_EXP 61
18635: AND
18636: IFFALSE 18730
18638: GO 18640
18640: DISABLE
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 22
18652: PUSH
18653: LD_OWVAR 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 32
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 69
18691: ST_TO_ADDR
// if not tmp then
18692: LD_VAR 0 2
18696: NOT
18697: IFFALSE 18701
// exit ;
18699: GO 18730
// for i in tmp do
18701: LD_ADDR_VAR 0 1
18705: PUSH
18706: LD_VAR 0 2
18710: PUSH
18711: FOR_IN
18712: IFFALSE 18728
// SetFuel ( i , 0 ) ;
18714: LD_VAR 0 1
18718: PPUSH
18719: LD_INT 0
18721: PPUSH
18722: CALL_OW 240
18726: GO 18711
18728: POP
18729: POP
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18733: LD_EXP 26
18737: PUSH
18738: LD_EXP 62
18742: AND
18743: IFFALSE 18809
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 29
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: ST_TO_ADDR
// if not tmp then
18787: LD_VAR 0 1
18791: NOT
18792: IFFALSE 18796
// exit ;
18794: GO 18809
// DestroyUnit ( tmp [ 1 ] ) ;
18796: LD_VAR 0 1
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: PPUSH
18805: CALL_OW 65
// end ;
18809: PPOPN 1
18811: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18812: LD_EXP 26
18816: PUSH
18817: LD_EXP 64
18821: AND
18822: IFFALSE 18951
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
// begin uc_side := 0 ;
18830: LD_ADDR_OWVAR 20
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// uc_nation := nation_arabian ;
18838: LD_ADDR_OWVAR 21
18842: PUSH
18843: LD_INT 2
18845: ST_TO_ADDR
// hc_gallery :=  ;
18846: LD_ADDR_OWVAR 33
18850: PUSH
18851: LD_STRING 
18853: ST_TO_ADDR
// hc_name :=  ;
18854: LD_ADDR_OWVAR 26
18858: PUSH
18859: LD_STRING 
18861: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 11
18867: PPUSH
18868: LD_INT 10
18870: PPUSH
18871: CALL_OW 380
// un := CreateHuman ;
18875: LD_ADDR_VAR 0 1
18879: PUSH
18880: CALL_OW 44
18884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_INT 1
18892: PPUSH
18893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18897: LD_INT 35
18899: PPUSH
18900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_INT 22
18911: PUSH
18912: LD_OWVAR 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PPUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 74
18935: PPUSH
18936: CALL_OW 115
// until IsDead ( un ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: CALL_OW 301
18949: IFFALSE 18897
// end ;
18951: PPOPN 1
18953: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18954: LD_EXP 26
18958: PUSH
18959: LD_EXP 66
18963: AND
18964: IFFALSE 18976
18966: GO 18968
18968: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18969: LD_STRING earthquake(getX(game), 0, 32)
18971: PPUSH
18972: CALL_OW 559
18976: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18977: LD_EXP 26
18981: PUSH
18982: LD_EXP 67
18986: AND
18987: IFFALSE 19078
18989: GO 18991
18991: DISABLE
18992: LD_INT 0
18994: PPUSH
// begin enable ;
18995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_OWVAR 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 21
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 33
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 1
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 234
// end ;
19078: PPOPN 1
19080: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19081: LD_EXP 26
19085: PUSH
19086: LD_EXP 68
19090: AND
19091: IFFALSE 19232
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: ST_TO_ADDR
// if not tmp then
19137: LD_VAR 0 3
19141: NOT
19142: IFFALSE 19146
// exit ;
19144: GO 19232
// un := tmp [ rand ( 1 , tmp ) ] ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 12
19168: ARRAY
19169: ST_TO_ADDR
// if Crawls ( un ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: CALL_OW 318
19179: IFFALSE 19190
// ComWalk ( un ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: LD_INT 9
19197: PPUSH
19198: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19202: LD_INT 28
19204: PPUSH
19205: LD_OWVAR 2
19209: PPUSH
19210: LD_INT 2
19212: PPUSH
19213: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19217: LD_INT 29
19219: PPUSH
19220: LD_OWVAR 2
19224: PPUSH
19225: LD_INT 2
19227: PPUSH
19228: CALL_OW 322
// end ;
19232: PPOPN 3
19234: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19235: LD_EXP 26
19239: PUSH
19240: LD_EXP 69
19244: AND
19245: IFFALSE 19356
19247: GO 19249
19249: DISABLE
19250: LD_INT 0
19252: PPUSH
19253: PPUSH
19254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_OWVAR 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 25
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: ST_TO_ADDR
// if not tmp then
19291: LD_VAR 0 3
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19356
// un := tmp [ rand ( 1 , tmp ) ] ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 1
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: CALL_OW 12
19322: ARRAY
19323: ST_TO_ADDR
// if Crawls ( un ) then
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 318
19333: IFFALSE 19344
// ComWalk ( un ) ;
19335: LD_VAR 0 2
19339: PPUSH
19340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19344: LD_VAR 0 2
19348: PPUSH
19349: LD_INT 8
19351: PPUSH
19352: CALL_OW 336
// end ;
19356: PPOPN 3
19358: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19359: LD_EXP 26
19363: PUSH
19364: LD_EXP 70
19368: AND
19369: IFFALSE 19513
19371: GO 19373
19373: DISABLE
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19378: LD_ADDR_VAR 0 2
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_OWVAR 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 34
19410: PUSH
19411: LD_INT 12
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 34
19420: PUSH
19421: LD_INT 51
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 34
19430: PUSH
19431: LD_INT 32
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 2
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19513
// for i in tmp do
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19511
// if GetCargo ( i , mat_artifact ) = 0 then
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_INT 4
19483: PPUSH
19484: CALL_OW 289
19488: PUSH
19489: LD_INT 0
19491: EQUAL
19492: IFFALSE 19509
// SetCargo ( i , mat_siberit , 100 ) ;
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_INT 3
19501: PPUSH
19502: LD_INT 100
19504: PPUSH
19505: CALL_OW 290
19509: GO 19473
19511: POP
19512: POP
// end ;
19513: PPOPN 2
19515: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19516: LD_EXP 26
19520: PUSH
19521: LD_EXP 71
19525: AND
19526: IFFALSE 19709
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PPUSH
19552: CALL_OW 69
19556: ST_TO_ADDR
// if not tmp then
19557: LD_VAR 0 2
19561: NOT
19562: IFFALSE 19566
// exit ;
19564: GO 19709
// for i := 1 to 2 do
19566: LD_ADDR_VAR 0 1
19570: PUSH
19571: DOUBLE
19572: LD_INT 1
19574: DEC
19575: ST_TO_ADDR
19576: LD_INT 2
19578: PUSH
19579: FOR_TO
19580: IFFALSE 19707
// begin uc_side := your_side ;
19582: LD_ADDR_OWVAR 20
19586: PUSH
19587: LD_OWVAR 2
19591: ST_TO_ADDR
// uc_nation := nation_american ;
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// vc_chassis := us_morphling ;
19600: LD_ADDR_OWVAR 37
19604: PUSH
19605: LD_INT 5
19607: ST_TO_ADDR
// vc_engine := engine_siberite ;
19608: LD_ADDR_OWVAR 39
19612: PUSH
19613: LD_INT 3
19615: ST_TO_ADDR
// vc_control := control_computer ;
19616: LD_ADDR_OWVAR 38
19620: PUSH
19621: LD_INT 3
19623: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19624: LD_ADDR_OWVAR 40
19628: PUSH
19629: LD_INT 10
19631: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19632: LD_VAR 0 2
19636: PUSH
19637: LD_INT 1
19639: ARRAY
19640: PPUSH
19641: CALL_OW 310
19645: NOT
19646: IFFALSE 19693
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19648: CALL_OW 45
19652: PPUSH
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 250
19666: PPUSH
19667: LD_VAR 0 2
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 251
19680: PPUSH
19681: LD_INT 12
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 50
19691: GO 19705
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19693: CALL_OW 45
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 51
// end ;
19705: GO 19579
19707: POP
19708: POP
// end ;
19709: PPOPN 2
19711: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19712: LD_EXP 26
19716: PUSH
19717: LD_EXP 72
19721: AND
19722: IFFALSE 19944
19724: GO 19726
19726: DISABLE
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19735: LD_ADDR_VAR 0 6
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 6
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19944
// s1 := rand ( 1 , 4 ) ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_INT 4
19808: PPUSH
19809: CALL_OW 12
19813: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19814: LD_ADDR_VAR 0 4
19818: PUSH
19819: LD_VAR 0 6
19823: PUSH
19824: LD_INT 1
19826: ARRAY
19827: PPUSH
19828: LD_VAR 0 2
19832: PPUSH
19833: CALL_OW 259
19837: ST_TO_ADDR
// if s1 = 1 then
19838: LD_VAR 0 2
19842: PUSH
19843: LD_INT 1
19845: EQUAL
19846: IFFALSE 19866
// s2 := rand ( 2 , 4 ) else
19848: LD_ADDR_VAR 0 3
19852: PUSH
19853: LD_INT 2
19855: PPUSH
19856: LD_INT 4
19858: PPUSH
19859: CALL_OW 12
19863: ST_TO_ADDR
19864: GO 19874
// s2 := 1 ;
19866: LD_ADDR_VAR 0 3
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19874: LD_ADDR_VAR 0 5
19878: PUSH
19879: LD_VAR 0 6
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PPUSH
19888: LD_VAR 0 3
19892: PPUSH
19893: CALL_OW 259
19897: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19898: LD_VAR 0 6
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PPUSH
19907: LD_VAR 0 2
19911: PPUSH
19912: LD_VAR 0 5
19916: PPUSH
19917: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19921: LD_VAR 0 6
19925: PUSH
19926: LD_INT 1
19928: ARRAY
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: LD_VAR 0 4
19939: PPUSH
19940: CALL_OW 237
// end ;
19944: PPOPN 6
19946: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19947: LD_EXP 26
19951: PUSH
19952: LD_EXP 73
19956: AND
19957: IFFALSE 20036
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 3
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// if not tmp then
20001: LD_VAR 0 1
20005: NOT
20006: IFFALSE 20010
// exit ;
20008: GO 20036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20010: LD_VAR 0 1
20014: PUSH
20015: LD_INT 1
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 234
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20039: LD_EXP 26
20043: PUSH
20044: LD_EXP 74
20048: AND
20049: IFFALSE 20161
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
20057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: LD_INT 27
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 30
20090: PUSH
20091: LD_INT 26
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 28
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 2
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20161
// for i in tmp do
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: FOR_IN
20143: IFFALSE 20159
// SetLives ( i , 1 ) ;
20145: LD_VAR 0 1
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 234
20157: GO 20142
20159: POP
20160: POP
// end ;
20161: PPOPN 2
20163: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20164: LD_EXP 26
20168: PUSH
20169: LD_EXP 75
20173: AND
20174: IFFALSE 20448
20176: GO 20178
20178: DISABLE
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
// begin i := rand ( 1 , 7 ) ;
20184: LD_ADDR_VAR 0 1
20188: PUSH
20189: LD_INT 1
20191: PPUSH
20192: LD_INT 7
20194: PPUSH
20195: CALL_OW 12
20199: ST_TO_ADDR
// case i of 1 :
20200: LD_VAR 0 1
20204: PUSH
20205: LD_INT 1
20207: DOUBLE
20208: EQUAL
20209: IFTRUE 20213
20211: GO 20223
20213: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20214: LD_STRING earthquake(getX(game), 0, 32)
20216: PPUSH
20217: CALL_OW 559
20221: GO 20448
20223: LD_INT 2
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20245
20231: POP
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ; 3 :
20243: GO 20448
20245: LD_INT 3
20247: DOUBLE
20248: EQUAL
20249: IFTRUE 20253
20251: GO 20357
20253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20254: LD_ADDR_VAR 0 2
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 25
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 2
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20448
// un := tmp [ rand ( 1 , tmp ) ] ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_VAR 0 2
20308: PUSH
20309: LD_INT 1
20311: PPUSH
20312: LD_VAR 0 2
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: ST_TO_ADDR
// if Crawls ( un ) then
20323: LD_VAR 0 3
20327: PPUSH
20328: CALL_OW 318
20332: IFFALSE 20343
// ComWalk ( un ) ;
20334: LD_VAR 0 3
20338: PPUSH
20339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 8
20350: PPUSH
20351: CALL_OW 336
// end ; 4 :
20355: GO 20448
20357: LD_INT 4
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20426
20365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: LD_INT 29
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not tmp then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20448
// DestroyUnit ( tmp [ 1 ] ) ;
20411: LD_VAR 0 2
20415: PUSH
20416: LD_INT 1
20418: ARRAY
20419: PPUSH
20420: CALL_OW 65
// end ; 5 .. 7 :
20424: GO 20448
20426: LD_INT 5
20428: DOUBLE
20429: GREATEREQUAL
20430: IFFALSE 20438
20432: LD_INT 7
20434: DOUBLE
20435: LESSEQUAL
20436: IFTRUE 20440
20438: GO 20447
20440: POP
// StreamSibBomb ; end ;
20441: CALL 16698 0 0
20445: GO 20448
20447: POP
// end ;
20448: PPOPN 3
20450: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20451: LD_EXP 26
20455: PUSH
20456: LD_EXP 76
20460: AND
20461: IFFALSE 20617
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20471: LD_ADDR_VAR 0 2
20475: PUSH
20476: LD_INT 81
20478: PUSH
20479: LD_OWVAR 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 21
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 21
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not tmp then
20525: LD_VAR 0 2
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20617
// p := 0 ;
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20542: LD_INT 35
20544: PPUSH
20545: CALL_OW 67
// p := p + 1 ;
20549: LD_ADDR_VAR 0 3
20553: PUSH
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 1
20561: PLUS
20562: ST_TO_ADDR
// for i in tmp do
20563: LD_ADDR_VAR 0 1
20567: PUSH
20568: LD_VAR 0 2
20572: PUSH
20573: FOR_IN
20574: IFFALSE 20605
// if GetLives ( i ) < 1000 then
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 256
20585: PUSH
20586: LD_INT 1000
20588: LESS
20589: IFFALSE 20603
// SetLives ( i , 1000 ) ;
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_INT 1000
20598: PPUSH
20599: CALL_OW 234
20603: GO 20573
20605: POP
20606: POP
// until p > 20 ;
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 20
20614: GREATER
20615: IFFALSE 20542
// end ;
20617: PPOPN 3
20619: END
// every 0 0$1 trigger StreamModeActive and sTime do
20620: LD_EXP 26
20624: PUSH
20625: LD_EXP 77
20629: AND
20630: IFFALSE 20665
20632: GO 20634
20634: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20635: LD_INT 28
20637: PPUSH
20638: LD_OWVAR 2
20642: PPUSH
20643: LD_INT 2
20645: PPUSH
20646: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20650: LD_INT 30
20652: PPUSH
20653: LD_OWVAR 2
20657: PPUSH
20658: LD_INT 2
20660: PPUSH
20661: CALL_OW 322
// end ;
20665: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20666: LD_EXP 26
20670: PUSH
20671: LD_EXP 78
20675: AND
20676: IFFALSE 20797
20678: GO 20680
20680: DISABLE
20681: LD_INT 0
20683: PPUSH
20684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_OWVAR 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: LD_INT 23
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PPUSH
20734: CALL_OW 69
20738: ST_TO_ADDR
// if not tmp then
20739: LD_VAR 0 2
20743: NOT
20744: IFFALSE 20748
// exit ;
20746: GO 20797
// for i in tmp do
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_VAR 0 2
20757: PUSH
20758: FOR_IN
20759: IFFALSE 20795
// begin if Crawls ( i ) then
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 318
20770: IFFALSE 20781
// ComWalk ( i ) ;
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 138
// SetClass ( i , 2 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 2
20788: PPUSH
20789: CALL_OW 336
// end ;
20793: GO 20758
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20800: LD_EXP 26
20804: PUSH
20805: LD_EXP 79
20809: AND
20810: IFFALSE 21091
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
20819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20820: LD_OWVAR 2
20824: PPUSH
20825: LD_INT 9
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20838: LD_INT 9
20840: PPUSH
20841: LD_OWVAR 2
20845: PPUSH
20846: CALL_OW 343
// uc_side := 9 ;
20850: LD_ADDR_OWVAR 20
20854: PUSH
20855: LD_INT 9
20857: ST_TO_ADDR
// uc_nation := 2 ;
20858: LD_ADDR_OWVAR 21
20862: PUSH
20863: LD_INT 2
20865: ST_TO_ADDR
// hc_name := Dark Warrior ;
20866: LD_ADDR_OWVAR 26
20870: PUSH
20871: LD_STRING Dark Warrior
20873: ST_TO_ADDR
// hc_gallery :=  ;
20874: LD_ADDR_OWVAR 33
20878: PUSH
20879: LD_STRING 
20881: ST_TO_ADDR
// hc_noskilllimit := true ;
20882: LD_ADDR_OWVAR 76
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20890: LD_ADDR_OWVAR 31
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: ST_TO_ADDR
// un := CreateHuman ;
20913: LD_ADDR_VAR 0 3
20917: PUSH
20918: CALL_OW 44
20922: ST_TO_ADDR
// hc_noskilllimit := false ;
20923: LD_ADDR_OWVAR 76
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 51
// p := 0 ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20951: LD_INT 35
20953: PPUSH
20954: CALL_OW 67
// p := p + 1 ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 2
20967: PUSH
20968: LD_INT 1
20970: PLUS
20971: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20972: LD_VAR 0 3
20976: PPUSH
20977: CALL_OW 256
20981: PUSH
20982: LD_INT 1000
20984: LESS
20985: IFFALSE 20999
// SetLives ( un , 1000 ) ;
20987: LD_VAR 0 3
20991: PPUSH
20992: LD_INT 1000
20994: PPUSH
20995: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 81
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 91
21018: PUSH
21019: LD_VAR 0 3
21023: PUSH
21024: LD_INT 30
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21055: LD_VAR 0 2
21059: PUSH
21060: LD_INT 60
21062: GREATER
21063: PUSH
21064: LD_VAR 0 3
21068: PPUSH
21069: CALL_OW 301
21073: OR
21074: IFFALSE 20951
// if un then
21076: LD_VAR 0 3
21080: IFFALSE 21091
// RemoveUnit ( un ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 64
// end ;
21091: PPOPN 3
21093: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21094: LD_INT 0
21096: PPUSH
// case cmd of 301 :
21097: LD_VAR 0 1
21101: PUSH
21102: LD_INT 301
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21142
21110: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21111: LD_VAR 0 6
21115: PPUSH
21116: LD_VAR 0 7
21120: PPUSH
21121: LD_VAR 0 8
21125: PPUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: LD_VAR 0 5
21135: PPUSH
21136: CALL 22343 0 5
21140: GO 21263
21142: LD_INT 302
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21187
21150: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21151: LD_VAR 0 6
21155: PPUSH
21156: LD_VAR 0 7
21160: PPUSH
21161: LD_VAR 0 8
21165: PPUSH
21166: LD_VAR 0 9
21170: PPUSH
21171: LD_VAR 0 4
21175: PPUSH
21176: LD_VAR 0 5
21180: PPUSH
21181: CALL 22434 0 6
21185: GO 21263
21187: LD_INT 303
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21232
21195: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21196: LD_VAR 0 6
21200: PPUSH
21201: LD_VAR 0 7
21205: PPUSH
21206: LD_VAR 0 8
21210: PPUSH
21211: LD_VAR 0 9
21215: PPUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: LD_VAR 0 5
21225: PPUSH
21226: CALL 21268 0 6
21230: GO 21263
21232: LD_INT 304
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21262
21240: POP
// hHackTeleport ( unit , x , y ) ; end ;
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL 23027 0 3
21260: GO 21263
21262: POP
// end ;
21263: LD_VAR 0 12
21267: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21268: LD_INT 0
21270: PPUSH
21271: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21272: LD_VAR 0 1
21276: PUSH
21277: LD_INT 1
21279: LESS
21280: PUSH
21281: LD_VAR 0 1
21285: PUSH
21286: LD_INT 3
21288: GREATER
21289: OR
21290: PUSH
21291: LD_VAR 0 5
21295: PPUSH
21296: LD_VAR 0 6
21300: PPUSH
21301: CALL_OW 428
21305: OR
21306: IFFALSE 21310
// exit ;
21308: GO 22030
// uc_side := your_side ;
21310: LD_ADDR_OWVAR 20
21314: PUSH
21315: LD_OWVAR 2
21319: ST_TO_ADDR
// uc_nation := nation ;
21320: LD_ADDR_OWVAR 21
21324: PUSH
21325: LD_VAR 0 1
21329: ST_TO_ADDR
// bc_level = 1 ;
21330: LD_ADDR_OWVAR 43
21334: PUSH
21335: LD_INT 1
21337: ST_TO_ADDR
// case btype of 1 :
21338: LD_VAR 0 2
21342: PUSH
21343: LD_INT 1
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21362
21351: POP
// bc_type := b_depot ; 2 :
21352: LD_ADDR_OWVAR 42
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
21360: GO 21974
21362: LD_INT 2
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21381
21370: POP
// bc_type := b_warehouse ; 3 :
21371: LD_ADDR_OWVAR 42
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
21379: GO 21974
21381: LD_INT 3
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21400
21389: POP
// bc_type := b_lab ; 4 .. 9 :
21390: LD_ADDR_OWVAR 42
21394: PUSH
21395: LD_INT 6
21397: ST_TO_ADDR
21398: GO 21974
21400: LD_INT 4
21402: DOUBLE
21403: GREATEREQUAL
21404: IFFALSE 21412
21406: LD_INT 9
21408: DOUBLE
21409: LESSEQUAL
21410: IFTRUE 21414
21412: GO 21466
21414: POP
// begin bc_type := b_lab_half ;
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 7
21422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21423: LD_ADDR_OWVAR 44
21427: PUSH
21428: LD_INT 10
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 14
21442: PUSH
21443: LD_INT 13
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: PUSH
21454: LD_VAR 0 2
21458: PUSH
21459: LD_INT 3
21461: MINUS
21462: ARRAY
21463: ST_TO_ADDR
// end ; 10 .. 13 :
21464: GO 21974
21466: LD_INT 10
21468: DOUBLE
21469: GREATEREQUAL
21470: IFFALSE 21478
21472: LD_INT 13
21474: DOUBLE
21475: LESSEQUAL
21476: IFTRUE 21480
21478: GO 21557
21480: POP
// begin bc_type := b_lab_full ;
21481: LD_ADDR_OWVAR 42
21485: PUSH
21486: LD_INT 8
21488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21489: LD_ADDR_OWVAR 44
21493: PUSH
21494: LD_INT 10
21496: PUSH
21497: LD_INT 12
21499: PUSH
21500: LD_INT 14
21502: PUSH
21503: LD_INT 13
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 9
21519: MINUS
21520: ARRAY
21521: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21522: LD_ADDR_OWVAR 45
21526: PUSH
21527: LD_INT 11
21529: PUSH
21530: LD_INT 15
21532: PUSH
21533: LD_INT 12
21535: PUSH
21536: LD_INT 15
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_INT 9
21552: MINUS
21553: ARRAY
21554: ST_TO_ADDR
// end ; 14 :
21555: GO 21974
21557: LD_INT 14
21559: DOUBLE
21560: EQUAL
21561: IFTRUE 21565
21563: GO 21576
21565: POP
// bc_type := b_workshop ; 15 :
21566: LD_ADDR_OWVAR 42
21570: PUSH
21571: LD_INT 2
21573: ST_TO_ADDR
21574: GO 21974
21576: LD_INT 15
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21595
21584: POP
// bc_type := b_factory ; 16 :
21585: LD_ADDR_OWVAR 42
21589: PUSH
21590: LD_INT 3
21592: ST_TO_ADDR
21593: GO 21974
21595: LD_INT 16
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21614
21603: POP
// bc_type := b_ext_gun ; 17 :
21604: LD_ADDR_OWVAR 42
21608: PUSH
21609: LD_INT 17
21611: ST_TO_ADDR
21612: GO 21974
21614: LD_INT 17
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21650
21622: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21623: LD_ADDR_OWVAR 42
21627: PUSH
21628: LD_INT 19
21630: PUSH
21631: LD_INT 23
21633: PUSH
21634: LD_INT 19
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_VAR 0 1
21646: ARRAY
21647: ST_TO_ADDR
21648: GO 21974
21650: LD_INT 18
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21669
21658: POP
// bc_type := b_ext_radar ; 19 :
21659: LD_ADDR_OWVAR 42
21663: PUSH
21664: LD_INT 20
21666: ST_TO_ADDR
21667: GO 21974
21669: LD_INT 19
21671: DOUBLE
21672: EQUAL
21673: IFTRUE 21677
21675: GO 21688
21677: POP
// bc_type := b_ext_radio ; 20 :
21678: LD_ADDR_OWVAR 42
21682: PUSH
21683: LD_INT 22
21685: ST_TO_ADDR
21686: GO 21974
21688: LD_INT 20
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21707
21696: POP
// bc_type := b_ext_siberium ; 21 :
21697: LD_ADDR_OWVAR 42
21701: PUSH
21702: LD_INT 21
21704: ST_TO_ADDR
21705: GO 21974
21707: LD_INT 21
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// bc_type := b_ext_computer ; 22 :
21716: LD_ADDR_OWVAR 42
21720: PUSH
21721: LD_INT 24
21723: ST_TO_ADDR
21724: GO 21974
21726: LD_INT 22
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// bc_type := b_ext_track ; 23 :
21735: LD_ADDR_OWVAR 42
21739: PUSH
21740: LD_INT 16
21742: ST_TO_ADDR
21743: GO 21974
21745: LD_INT 23
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// bc_type := b_ext_laser ; 24 :
21754: LD_ADDR_OWVAR 42
21758: PUSH
21759: LD_INT 25
21761: ST_TO_ADDR
21762: GO 21974
21764: LD_INT 24
21766: DOUBLE
21767: EQUAL
21768: IFTRUE 21772
21770: GO 21783
21772: POP
// bc_type := b_control_tower ; 25 :
21773: LD_ADDR_OWVAR 42
21777: PUSH
21778: LD_INT 36
21780: ST_TO_ADDR
21781: GO 21974
21783: LD_INT 25
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21802
21791: POP
// bc_type := b_breastwork ; 26 :
21792: LD_ADDR_OWVAR 42
21796: PUSH
21797: LD_INT 31
21799: ST_TO_ADDR
21800: GO 21974
21802: LD_INT 26
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21821
21810: POP
// bc_type := b_bunker ; 27 :
21811: LD_ADDR_OWVAR 42
21815: PUSH
21816: LD_INT 32
21818: ST_TO_ADDR
21819: GO 21974
21821: LD_INT 27
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 21840
21829: POP
// bc_type := b_turret ; 28 :
21830: LD_ADDR_OWVAR 42
21834: PUSH
21835: LD_INT 33
21837: ST_TO_ADDR
21838: GO 21974
21840: LD_INT 28
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21859
21848: POP
// bc_type := b_armoury ; 29 :
21849: LD_ADDR_OWVAR 42
21853: PUSH
21854: LD_INT 4
21856: ST_TO_ADDR
21857: GO 21974
21859: LD_INT 29
21861: DOUBLE
21862: EQUAL
21863: IFTRUE 21867
21865: GO 21878
21867: POP
// bc_type := b_barracks ; 30 :
21868: LD_ADDR_OWVAR 42
21872: PUSH
21873: LD_INT 5
21875: ST_TO_ADDR
21876: GO 21974
21878: LD_INT 30
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21897
21886: POP
// bc_type := b_solar_power ; 31 :
21887: LD_ADDR_OWVAR 42
21891: PUSH
21892: LD_INT 27
21894: ST_TO_ADDR
21895: GO 21974
21897: LD_INT 31
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 21916
21905: POP
// bc_type := b_oil_power ; 32 :
21906: LD_ADDR_OWVAR 42
21910: PUSH
21911: LD_INT 26
21913: ST_TO_ADDR
21914: GO 21974
21916: LD_INT 32
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 21935
21924: POP
// bc_type := b_siberite_power ; 33 :
21925: LD_ADDR_OWVAR 42
21929: PUSH
21930: LD_INT 28
21932: ST_TO_ADDR
21933: GO 21974
21935: LD_INT 33
21937: DOUBLE
21938: EQUAL
21939: IFTRUE 21943
21941: GO 21954
21943: POP
// bc_type := b_oil_mine ; 34 :
21944: LD_ADDR_OWVAR 42
21948: PUSH
21949: LD_INT 29
21951: ST_TO_ADDR
21952: GO 21974
21954: LD_INT 34
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_siberite_mine ; end ;
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 30
21970: ST_TO_ADDR
21971: GO 21974
21973: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21974: LD_ADDR_VAR 0 8
21978: PUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: LD_VAR 0 6
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: CALL_OW 47
21998: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21999: LD_OWVAR 42
22003: PUSH
22004: LD_INT 32
22006: PUSH
22007: LD_INT 33
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: IN
22014: IFFALSE 22030
// PlaceWeaponTurret ( b , weapon ) ;
22016: LD_VAR 0 8
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: CALL_OW 431
// end ;
22030: LD_VAR 0 7
22034: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22041: LD_ADDR_VAR 0 4
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_OWVAR 2
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 30
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PPUSH
22090: CALL_OW 69
22094: ST_TO_ADDR
// if not tmp then
22095: LD_VAR 0 4
22099: NOT
22100: IFFALSE 22104
// exit ;
22102: GO 22163
// for i in tmp do
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_VAR 0 4
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22161
// for j = 1 to 3 do
22117: LD_ADDR_VAR 0 3
22121: PUSH
22122: DOUBLE
22123: LD_INT 1
22125: DEC
22126: ST_TO_ADDR
22127: LD_INT 3
22129: PUSH
22130: FOR_TO
22131: IFFALSE 22157
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: CALL_OW 274
22142: PPUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: LD_INT 99999
22150: PPUSH
22151: CALL_OW 277
22155: GO 22130
22157: POP
22158: POP
22159: GO 22114
22161: POP
22162: POP
// end ;
22163: LD_VAR 0 1
22167: RET
// export function hHackSetLevel10 ; var i , j ; begin
22168: LD_INT 0
22170: PPUSH
22171: PPUSH
22172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 21
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22246
// if IsSelected ( i ) then
22196: LD_VAR 0 2
22200: PPUSH
22201: CALL_OW 306
22205: IFFALSE 22244
// begin for j := 1 to 4 do
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_INT 4
22219: PUSH
22220: FOR_TO
22221: IFFALSE 22242
// SetSkill ( i , j , 10 ) ;
22223: LD_VAR 0 2
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 10
22235: PPUSH
22236: CALL_OW 237
22240: GO 22220
22242: POP
22243: POP
// end ;
22244: GO 22193
22246: POP
22247: POP
// end ;
22248: LD_VAR 0 1
22252: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 21
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22336
// begin for j := 1 to 4 do
22297: LD_ADDR_VAR 0 3
22301: PUSH
22302: DOUBLE
22303: LD_INT 1
22305: DEC
22306: ST_TO_ADDR
22307: LD_INT 4
22309: PUSH
22310: FOR_TO
22311: IFFALSE 22332
// SetSkill ( i , j , 10 ) ;
22313: LD_VAR 0 2
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 10
22325: PPUSH
22326: CALL_OW 237
22330: GO 22310
22332: POP
22333: POP
// end ;
22334: GO 22294
22336: POP
22337: POP
// end ;
22338: LD_VAR 0 1
22342: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22343: LD_INT 0
22345: PPUSH
// uc_side := your_side ;
22346: LD_ADDR_OWVAR 20
22350: PUSH
22351: LD_OWVAR 2
22355: ST_TO_ADDR
// uc_nation := nation ;
22356: LD_ADDR_OWVAR 21
22360: PUSH
22361: LD_VAR 0 1
22365: ST_TO_ADDR
// InitHc ;
22366: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22370: LD_INT 0
22372: PPUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22387: LD_VAR 0 4
22391: PPUSH
22392: LD_VAR 0 5
22396: PPUSH
22397: CALL_OW 428
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22429
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22407: CALL_OW 44
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: LD_INT 1
22424: PPUSH
22425: CALL_OW 48
// end ;
22429: LD_VAR 0 6
22433: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
// uc_side := your_side ;
22438: LD_ADDR_OWVAR 20
22442: PUSH
22443: LD_OWVAR 2
22447: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 4
22464: PUSH
22465: LD_INT 5
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: IN
22475: IFFALSE 22487
// uc_nation := nation_american else
22477: LD_ADDR_OWVAR 21
22481: PUSH
22482: LD_INT 1
22484: ST_TO_ADDR
22485: GO 22530
// if chassis in [ 11 , 12 , 13 , 14 ] then
22487: LD_VAR 0 1
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 13
22500: PUSH
22501: LD_INT 14
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22522
// uc_nation := nation_arabian else
22512: LD_ADDR_OWVAR 21
22516: PUSH
22517: LD_INT 2
22519: ST_TO_ADDR
22520: GO 22530
// uc_nation := nation_russian ;
22522: LD_ADDR_OWVAR 21
22526: PUSH
22527: LD_INT 3
22529: ST_TO_ADDR
// vc_chassis := chassis ;
22530: LD_ADDR_OWVAR 37
22534: PUSH
22535: LD_VAR 0 1
22539: ST_TO_ADDR
// vc_engine := engine ;
22540: LD_ADDR_OWVAR 39
22544: PUSH
22545: LD_VAR 0 2
22549: ST_TO_ADDR
// vc_control := control ;
22550: LD_ADDR_OWVAR 38
22554: PUSH
22555: LD_VAR 0 3
22559: ST_TO_ADDR
// vc_weapon := weapon ;
22560: LD_ADDR_OWVAR 40
22564: PUSH
22565: LD_VAR 0 4
22569: ST_TO_ADDR
// un := CreateVehicle ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: CALL_OW 45
22579: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22580: LD_VAR 0 8
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: LD_INT 5
22590: PPUSH
22591: CALL_OW 12
22595: PPUSH
22596: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22600: LD_VAR 0 8
22604: PPUSH
22605: LD_VAR 0 5
22609: PPUSH
22610: LD_VAR 0 6
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: CALL_OW 48
// end ;
22622: LD_VAR 0 7
22626: RET
// export hInvincible ; every 1 do
22627: GO 22629
22629: DISABLE
// hInvincible := [ ] ;
22630: LD_ADDR_EXP 80
22634: PUSH
22635: EMPTY
22636: ST_TO_ADDR
22637: END
// every 10 do var i ;
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin enable ;
22644: ENABLE
// if not hInvincible then
22645: LD_EXP 80
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 22698
// for i in hInvincible do
22654: LD_ADDR_VAR 0 1
22658: PUSH
22659: LD_EXP 80
22663: PUSH
22664: FOR_IN
22665: IFFALSE 22696
// if GetLives ( i ) < 1000 then
22667: LD_VAR 0 1
22671: PPUSH
22672: CALL_OW 256
22676: PUSH
22677: LD_INT 1000
22679: LESS
22680: IFFALSE 22694
// SetLives ( i , 1000 ) ;
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_INT 1000
22689: PPUSH
22690: CALL_OW 234
22694: GO 22664
22696: POP
22697: POP
// end ;
22698: PPOPN 1
22700: END
// export function hHackInvincible ; var i ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 21
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 21
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22805
// if IsSelected ( i ) then
22746: LD_VAR 0 2
22750: PPUSH
22751: CALL_OW 306
22755: IFFALSE 22803
// begin if i in hInvincible then
22757: LD_VAR 0 2
22761: PUSH
22762: LD_EXP 80
22766: IN
22767: IFFALSE 22787
// hInvincible := hInvincible diff i else
22769: LD_ADDR_EXP 80
22773: PUSH
22774: LD_EXP 80
22778: PUSH
22779: LD_VAR 0 2
22783: DIFF
22784: ST_TO_ADDR
22785: GO 22803
// hInvincible := hInvincible union i ;
22787: LD_ADDR_EXP 80
22791: PUSH
22792: LD_EXP 80
22796: PUSH
22797: LD_VAR 0 2
22801: UNION
22802: ST_TO_ADDR
// end ;
22803: GO 22743
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 1
22811: RET
// export function hHackInvisible ; var i , j ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 21
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: PUSH
22837: FOR_IN
22838: IFFALSE 22862
// if IsSelected ( i ) then
22840: LD_VAR 0 2
22844: PPUSH
22845: CALL_OW 306
22849: IFFALSE 22860
// ComForceInvisible ( i ) ;
22851: LD_VAR 0 2
22855: PPUSH
22856: CALL_OW 496
22860: GO 22837
22862: POP
22863: POP
// end ;
22864: LD_VAR 0 1
22868: RET
// export function hHackChangeYourSide ; begin
22869: LD_INT 0
22871: PPUSH
// if your_side = 8 then
22872: LD_OWVAR 2
22876: PUSH
22877: LD_INT 8
22879: EQUAL
22880: IFFALSE 22892
// your_side := 0 else
22882: LD_ADDR_OWVAR 2
22886: PUSH
22887: LD_INT 0
22889: ST_TO_ADDR
22890: GO 22906
// your_side := your_side + 1 ;
22892: LD_ADDR_OWVAR 2
22896: PUSH
22897: LD_OWVAR 2
22901: PUSH
22902: LD_INT 1
22904: PLUS
22905: ST_TO_ADDR
// end ;
22906: LD_VAR 0 1
22910: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
22915: PPUSH
// for i in all_units do
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_OWVAR 3
22925: PUSH
22926: FOR_IN
22927: IFFALSE 23005
// if IsSelected ( i ) then
22929: LD_VAR 0 2
22933: PPUSH
22934: CALL_OW 306
22938: IFFALSE 23003
// begin j := GetSide ( i ) ;
22940: LD_ADDR_VAR 0 3
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 255
22954: ST_TO_ADDR
// if j = 8 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 8
22962: EQUAL
22963: IFFALSE 22975
// j := 0 else
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 0
22972: ST_TO_ADDR
22973: GO 22989
// j := j + 1 ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_VAR 0 3
22984: PUSH
22985: LD_INT 1
22987: PLUS
22988: ST_TO_ADDR
// SetSide ( i , j ) ;
22989: LD_VAR 0 2
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 235
// end ;
23003: GO 22926
23005: POP
23006: POP
// end ;
23007: LD_VAR 0 1
23011: RET
// export function hHackFog ; begin
23012: LD_INT 0
23014: PPUSH
// FogOff ( true ) ;
23015: LD_INT 1
23017: PPUSH
23018: CALL_OW 344
// end ;
23022: LD_VAR 0 1
23026: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23027: LD_INT 0
23029: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: LD_INT 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 483
// CenterOnXY ( x , y ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 84
// end ; end_of_file end_of_file
23069: LD_VAR 0 4
23073: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23074: LD_INT 0
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 264
23089: PUSH
23090: LD_EXP 91
23094: EQUAL
23095: IFFALSE 23167
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23097: LD_INT 68
23099: PPUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 255
23109: PPUSH
23110: CALL_OW 321
23114: PUSH
23115: LD_INT 2
23117: EQUAL
23118: IFFALSE 23130
// eff := 70 else
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_INT 70
23127: ST_TO_ADDR
23128: GO 23138
// eff := 30 ;
23130: LD_ADDR_VAR 0 4
23134: PUSH
23135: LD_INT 30
23137: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 250
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 251
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 495
// end ; end ;
23167: LD_VAR 0 2
23171: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23172: LD_INT 0
23174: PPUSH
// end ;
23175: LD_VAR 0 4
23179: RET
// export function SOS_Command ( cmd ) ; begin
23180: LD_INT 0
23182: PPUSH
// end ;
23183: LD_VAR 0 2
23187: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23188: LD_INT 0
23190: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23191: LD_VAR 0 1
23195: PUSH
23196: LD_INT 254
23198: EQUAL
23199: PUSH
23200: LD_VAR 0 2
23204: PPUSH
23205: CALL_OW 264
23209: PUSH
23210: LD_EXP 89
23214: EQUAL
23215: AND
23216: PUSH
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 263
23226: PUSH
23227: LD_INT 3
23229: EQUAL
23230: AND
23231: IFFALSE 23247
// HackDestroyVehicle ( unit , selectedUnit ) ;
23233: LD_VAR 0 2
23237: PPUSH
23238: LD_VAR 0 3
23242: PPUSH
23243: CALL 24756 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23247: LD_VAR 0 1
23251: PUSH
23252: LD_INT 255
23254: EQUAL
23255: PUSH
23256: LD_VAR 0 2
23260: PPUSH
23261: CALL_OW 264
23265: PUSH
23266: LD_INT 14
23268: PUSH
23269: LD_INT 53
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: IN
23276: AND
23277: PUSH
23278: LD_VAR 0 4
23282: PPUSH
23283: LD_VAR 0 5
23287: PPUSH
23288: CALL_OW 488
23292: AND
23293: IFFALSE 23317
// CutTreeXYR ( unit , x , y , 12 ) ;
23295: LD_VAR 0 2
23299: PPUSH
23300: LD_VAR 0 4
23304: PPUSH
23305: LD_VAR 0 5
23309: PPUSH
23310: LD_INT 12
23312: PPUSH
23313: CALL 23322 0 4
// end ;
23317: LD_VAR 0 6
23321: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23333: LD_VAR 0 1
23337: NOT
23338: PUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: CALL_OW 488
23353: NOT
23354: OR
23355: PUSH
23356: LD_VAR 0 4
23360: NOT
23361: OR
23362: IFFALSE 23366
// exit ;
23364: GO 23706
// list := [ ] ;
23366: LD_ADDR_VAR 0 13
23370: PUSH
23371: EMPTY
23372: ST_TO_ADDR
// if x - r < 0 then
23373: LD_VAR 0 2
23377: PUSH
23378: LD_VAR 0 4
23382: MINUS
23383: PUSH
23384: LD_INT 0
23386: LESS
23387: IFFALSE 23399
// min_x := 0 else
23389: LD_ADDR_VAR 0 7
23393: PUSH
23394: LD_INT 0
23396: ST_TO_ADDR
23397: GO 23415
// min_x := x - r ;
23399: LD_ADDR_VAR 0 7
23403: PUSH
23404: LD_VAR 0 2
23408: PUSH
23409: LD_VAR 0 4
23413: MINUS
23414: ST_TO_ADDR
// if y - r < 0 then
23415: LD_VAR 0 3
23419: PUSH
23420: LD_VAR 0 4
23424: MINUS
23425: PUSH
23426: LD_INT 0
23428: LESS
23429: IFFALSE 23441
// min_y := 0 else
23431: LD_ADDR_VAR 0 8
23435: PUSH
23436: LD_INT 0
23438: ST_TO_ADDR
23439: GO 23457
// min_y := y - r ;
23441: LD_ADDR_VAR 0 8
23445: PUSH
23446: LD_VAR 0 3
23450: PUSH
23451: LD_VAR 0 4
23455: MINUS
23456: ST_TO_ADDR
// max_x := x + r ;
23457: LD_ADDR_VAR 0 9
23461: PUSH
23462: LD_VAR 0 2
23466: PUSH
23467: LD_VAR 0 4
23471: PLUS
23472: ST_TO_ADDR
// max_y := y + r ;
23473: LD_ADDR_VAR 0 10
23477: PUSH
23478: LD_VAR 0 3
23482: PUSH
23483: LD_VAR 0 4
23487: PLUS
23488: ST_TO_ADDR
// for _x = min_x to max_x do
23489: LD_ADDR_VAR 0 11
23493: PUSH
23494: DOUBLE
23495: LD_VAR 0 7
23499: DEC
23500: ST_TO_ADDR
23501: LD_VAR 0 9
23505: PUSH
23506: FOR_TO
23507: IFFALSE 23624
// for _y = min_y to max_y do
23509: LD_ADDR_VAR 0 12
23513: PUSH
23514: DOUBLE
23515: LD_VAR 0 8
23519: DEC
23520: ST_TO_ADDR
23521: LD_VAR 0 10
23525: PUSH
23526: FOR_TO
23527: IFFALSE 23620
// begin if not ValidHex ( _x , _y ) then
23529: LD_VAR 0 11
23533: PPUSH
23534: LD_VAR 0 12
23538: PPUSH
23539: CALL_OW 488
23543: NOT
23544: IFFALSE 23548
// continue ;
23546: GO 23526
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23548: LD_VAR 0 11
23552: PPUSH
23553: LD_VAR 0 12
23557: PPUSH
23558: CALL_OW 351
23562: PUSH
23563: LD_VAR 0 11
23567: PPUSH
23568: LD_VAR 0 12
23572: PPUSH
23573: CALL_OW 554
23577: AND
23578: IFFALSE 23618
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23580: LD_ADDR_VAR 0 13
23584: PUSH
23585: LD_VAR 0 13
23589: PPUSH
23590: LD_VAR 0 13
23594: PUSH
23595: LD_INT 1
23597: PLUS
23598: PPUSH
23599: LD_VAR 0 11
23603: PUSH
23604: LD_VAR 0 12
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PPUSH
23613: CALL_OW 2
23617: ST_TO_ADDR
// end ;
23618: GO 23526
23620: POP
23621: POP
23622: GO 23506
23624: POP
23625: POP
// if not list then
23626: LD_VAR 0 13
23630: NOT
23631: IFFALSE 23635
// exit ;
23633: GO 23706
// for i in list do
23635: LD_ADDR_VAR 0 6
23639: PUSH
23640: LD_VAR 0 13
23644: PUSH
23645: FOR_IN
23646: IFFALSE 23704
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23648: LD_VAR 0 1
23652: PPUSH
23653: LD_STRING M
23655: PUSH
23656: LD_VAR 0 6
23660: PUSH
23661: LD_INT 1
23663: ARRAY
23664: PUSH
23665: LD_VAR 0 6
23669: PUSH
23670: LD_INT 2
23672: ARRAY
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: PPUSH
23698: CALL_OW 447
23702: GO 23645
23704: POP
23705: POP
// end ;
23706: LD_VAR 0 5
23710: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23711: LD_EXP 81
23715: NOT
23716: IFFALSE 23766
23718: GO 23720
23720: DISABLE
// begin initHack := true ;
23721: LD_ADDR_EXP 81
23725: PUSH
23726: LD_INT 1
23728: ST_TO_ADDR
// hackTanks := [ ] ;
23729: LD_ADDR_EXP 82
23733: PUSH
23734: EMPTY
23735: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23736: LD_ADDR_EXP 83
23740: PUSH
23741: EMPTY
23742: ST_TO_ADDR
// hackLimit := 3 ;
23743: LD_ADDR_EXP 84
23747: PUSH
23748: LD_INT 3
23750: ST_TO_ADDR
// hackDist := 12 ;
23751: LD_ADDR_EXP 85
23755: PUSH
23756: LD_INT 12
23758: ST_TO_ADDR
// hackCounter := [ ] ;
23759: LD_ADDR_EXP 86
23763: PUSH
23764: EMPTY
23765: ST_TO_ADDR
// end ;
23766: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23767: LD_EXP 81
23771: PUSH
23772: LD_INT 34
23774: PUSH
23775: LD_EXP 89
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PPUSH
23784: CALL_OW 69
23788: AND
23789: IFFALSE 24044
23791: GO 23793
23793: DISABLE
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
// begin enable ;
23798: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23799: LD_ADDR_VAR 0 1
23803: PUSH
23804: LD_INT 34
23806: PUSH
23807: LD_EXP 89
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PPUSH
23816: CALL_OW 69
23820: PUSH
23821: FOR_IN
23822: IFFALSE 24042
// begin if not i in hackTanks then
23824: LD_VAR 0 1
23828: PUSH
23829: LD_EXP 82
23833: IN
23834: NOT
23835: IFFALSE 23918
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23837: LD_ADDR_EXP 82
23841: PUSH
23842: LD_EXP 82
23846: PPUSH
23847: LD_EXP 82
23851: PUSH
23852: LD_INT 1
23854: PLUS
23855: PPUSH
23856: LD_VAR 0 1
23860: PPUSH
23861: CALL_OW 1
23865: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23866: LD_ADDR_EXP 83
23870: PUSH
23871: LD_EXP 83
23875: PPUSH
23876: LD_EXP 83
23880: PUSH
23881: LD_INT 1
23883: PLUS
23884: PPUSH
23885: EMPTY
23886: PPUSH
23887: CALL_OW 1
23891: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23892: LD_ADDR_EXP 86
23896: PUSH
23897: LD_EXP 86
23901: PPUSH
23902: LD_EXP 86
23906: PUSH
23907: LD_INT 1
23909: PLUS
23910: PPUSH
23911: EMPTY
23912: PPUSH
23913: CALL_OW 1
23917: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23918: LD_VAR 0 1
23922: PPUSH
23923: CALL_OW 302
23927: NOT
23928: IFFALSE 23941
// begin HackUnlinkAll ( i ) ;
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL 24047 0 1
// continue ;
23939: GO 23821
// end ; HackCheckCapturedStatus ( i ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: CALL 24490 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23950: LD_ADDR_VAR 0 2
23954: PUSH
23955: LD_INT 81
23957: PUSH
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 255
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 33
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 91
23984: PUSH
23985: LD_VAR 0 1
23989: PUSH
23990: LD_EXP 85
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 50
24002: PUSH
24003: EMPTY
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PPUSH
24012: CALL_OW 69
24016: ST_TO_ADDR
// if not tmp then
24017: LD_VAR 0 2
24021: NOT
24022: IFFALSE 24026
// continue ;
24024: GO 23821
// HackLink ( i , tmp ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_VAR 0 2
24035: PPUSH
24036: CALL 24183 0 2
// end ;
24040: GO 23821
24042: POP
24043: POP
// end ;
24044: PPOPN 2
24046: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24047: LD_INT 0
24049: PPUSH
24050: PPUSH
24051: PPUSH
// if not hack in hackTanks then
24052: LD_VAR 0 1
24056: PUSH
24057: LD_EXP 82
24061: IN
24062: NOT
24063: IFFALSE 24067
// exit ;
24065: GO 24178
// index := GetElementIndex ( hackTanks , hack ) ;
24067: LD_ADDR_VAR 0 4
24071: PUSH
24072: LD_EXP 82
24076: PPUSH
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL 29734 0 2
24086: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24087: LD_EXP 83
24091: PUSH
24092: LD_VAR 0 4
24096: ARRAY
24097: IFFALSE 24178
// begin for i in hackTanksCaptured [ index ] do
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_EXP 83
24108: PUSH
24109: LD_VAR 0 4
24113: ARRAY
24114: PUSH
24115: FOR_IN
24116: IFFALSE 24142
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24118: LD_VAR 0 3
24122: PUSH
24123: LD_INT 1
24125: ARRAY
24126: PPUSH
24127: LD_VAR 0 3
24131: PUSH
24132: LD_INT 2
24134: ARRAY
24135: PPUSH
24136: CALL_OW 235
24140: GO 24115
24142: POP
24143: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24144: LD_ADDR_EXP 83
24148: PUSH
24149: LD_EXP 83
24153: PPUSH
24154: LD_VAR 0 4
24158: PPUSH
24159: EMPTY
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_INT 0
24173: PPUSH
24174: CALL_OW 505
// end ; end ;
24178: LD_VAR 0 2
24182: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24183: LD_INT 0
24185: PPUSH
24186: PPUSH
24187: PPUSH
// if not hack in hackTanks or not vehicles then
24188: LD_VAR 0 1
24192: PUSH
24193: LD_EXP 82
24197: IN
24198: NOT
24199: PUSH
24200: LD_VAR 0 2
24204: NOT
24205: OR
24206: IFFALSE 24210
// exit ;
24208: GO 24485
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: LD_VAR 0 2
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: LD_INT 1
24230: PPUSH
24231: CALL 30384 0 4
24235: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24236: LD_ADDR_VAR 0 5
24240: PUSH
24241: LD_EXP 82
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL 29734 0 2
24255: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24256: LD_EXP 83
24260: PUSH
24261: LD_VAR 0 5
24265: ARRAY
24266: PUSH
24267: LD_EXP 84
24271: LESS
24272: IFFALSE 24461
// begin for i := 1 to vehicles do
24274: LD_ADDR_VAR 0 4
24278: PUSH
24279: DOUBLE
24280: LD_INT 1
24282: DEC
24283: ST_TO_ADDR
24284: LD_VAR 0 2
24288: PUSH
24289: FOR_TO
24290: IFFALSE 24459
// begin if hackTanksCaptured [ index ] = hackLimit then
24292: LD_EXP 83
24296: PUSH
24297: LD_VAR 0 5
24301: ARRAY
24302: PUSH
24303: LD_EXP 84
24307: EQUAL
24308: IFFALSE 24312
// break ;
24310: GO 24459
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24312: LD_ADDR_EXP 86
24316: PUSH
24317: LD_EXP 86
24321: PPUSH
24322: LD_VAR 0 5
24326: PPUSH
24327: LD_EXP 86
24331: PUSH
24332: LD_VAR 0 5
24336: ARRAY
24337: PUSH
24338: LD_INT 1
24340: PLUS
24341: PPUSH
24342: CALL_OW 1
24346: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24347: LD_ADDR_EXP 83
24351: PUSH
24352: LD_EXP 83
24356: PPUSH
24357: LD_VAR 0 5
24361: PUSH
24362: LD_EXP 83
24366: PUSH
24367: LD_VAR 0 5
24371: ARRAY
24372: PUSH
24373: LD_INT 1
24375: PLUS
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PPUSH
24381: LD_VAR 0 2
24385: PUSH
24386: LD_VAR 0 4
24390: ARRAY
24391: PUSH
24392: LD_VAR 0 2
24396: PUSH
24397: LD_VAR 0 4
24401: ARRAY
24402: PPUSH
24403: CALL_OW 255
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PPUSH
24412: CALL 29949 0 3
24416: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24417: LD_VAR 0 2
24421: PUSH
24422: LD_VAR 0 4
24426: ARRAY
24427: PPUSH
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL_OW 255
24437: PPUSH
24438: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24442: LD_VAR 0 2
24446: PUSH
24447: LD_VAR 0 4
24451: ARRAY
24452: PPUSH
24453: CALL_OW 141
// end ;
24457: GO 24289
24459: POP
24460: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24461: LD_VAR 0 1
24465: PPUSH
24466: LD_EXP 83
24470: PUSH
24471: LD_VAR 0 5
24475: ARRAY
24476: PUSH
24477: LD_INT 0
24479: PLUS
24480: PPUSH
24481: CALL_OW 505
// end ;
24485: LD_VAR 0 3
24489: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24490: LD_INT 0
24492: PPUSH
24493: PPUSH
24494: PPUSH
24495: PPUSH
// if not hack in hackTanks then
24496: LD_VAR 0 1
24500: PUSH
24501: LD_EXP 82
24505: IN
24506: NOT
24507: IFFALSE 24511
// exit ;
24509: GO 24751
// index := GetElementIndex ( hackTanks , hack ) ;
24511: LD_ADDR_VAR 0 4
24515: PUSH
24516: LD_EXP 82
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL 29734 0 2
24530: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: DOUBLE
24537: LD_EXP 83
24541: PUSH
24542: LD_VAR 0 4
24546: ARRAY
24547: INC
24548: ST_TO_ADDR
24549: LD_INT 1
24551: PUSH
24552: FOR_DOWNTO
24553: IFFALSE 24725
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24555: LD_ADDR_VAR 0 5
24559: PUSH
24560: LD_EXP 83
24564: PUSH
24565: LD_VAR 0 4
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 3
24575: ARRAY
24576: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24577: LD_VAR 0 5
24581: PUSH
24582: LD_INT 1
24584: ARRAY
24585: PPUSH
24586: CALL_OW 302
24590: NOT
24591: PUSH
24592: LD_VAR 0 5
24596: PUSH
24597: LD_INT 1
24599: ARRAY
24600: PPUSH
24601: CALL_OW 255
24605: PUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL_OW 255
24615: NONEQUAL
24616: OR
24617: IFFALSE 24723
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24619: LD_VAR 0 5
24623: PUSH
24624: LD_INT 1
24626: ARRAY
24627: PPUSH
24628: CALL_OW 305
24632: PUSH
24633: LD_VAR 0 5
24637: PUSH
24638: LD_INT 1
24640: ARRAY
24641: PPUSH
24642: CALL_OW 255
24646: PUSH
24647: LD_VAR 0 1
24651: PPUSH
24652: CALL_OW 255
24656: EQUAL
24657: AND
24658: IFFALSE 24682
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24660: LD_VAR 0 5
24664: PUSH
24665: LD_INT 1
24667: ARRAY
24668: PPUSH
24669: LD_VAR 0 5
24673: PUSH
24674: LD_INT 2
24676: ARRAY
24677: PPUSH
24678: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24682: LD_ADDR_EXP 83
24686: PUSH
24687: LD_EXP 83
24691: PPUSH
24692: LD_VAR 0 4
24696: PPUSH
24697: LD_EXP 83
24701: PUSH
24702: LD_VAR 0 4
24706: ARRAY
24707: PPUSH
24708: LD_VAR 0 3
24712: PPUSH
24713: CALL_OW 3
24717: PPUSH
24718: CALL_OW 1
24722: ST_TO_ADDR
// end ; end ;
24723: GO 24552
24725: POP
24726: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24727: LD_VAR 0 1
24731: PPUSH
24732: LD_EXP 83
24736: PUSH
24737: LD_VAR 0 4
24741: ARRAY
24742: PUSH
24743: LD_INT 0
24745: PLUS
24746: PPUSH
24747: CALL_OW 505
// end ;
24751: LD_VAR 0 2
24755: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
// if not hack in hackTanks then
24762: LD_VAR 0 1
24766: PUSH
24767: LD_EXP 82
24771: IN
24772: NOT
24773: IFFALSE 24777
// exit ;
24775: GO 24862
// index := GetElementIndex ( hackTanks , hack ) ;
24777: LD_ADDR_VAR 0 5
24781: PUSH
24782: LD_EXP 82
24786: PPUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL 29734 0 2
24796: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24797: LD_ADDR_VAR 0 4
24801: PUSH
24802: DOUBLE
24803: LD_INT 1
24805: DEC
24806: ST_TO_ADDR
24807: LD_EXP 83
24811: PUSH
24812: LD_VAR 0 5
24816: ARRAY
24817: PUSH
24818: FOR_TO
24819: IFFALSE 24860
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24821: LD_EXP 83
24825: PUSH
24826: LD_VAR 0 5
24830: ARRAY
24831: PUSH
24832: LD_VAR 0 4
24836: ARRAY
24837: PUSH
24838: LD_INT 1
24840: ARRAY
24841: PUSH
24842: LD_VAR 0 2
24846: EQUAL
24847: IFFALSE 24858
// KillUnit ( vehicle ) ;
24849: LD_VAR 0 2
24853: PPUSH
24854: CALL_OW 66
24858: GO 24818
24860: POP
24861: POP
// end ; end_of_file
24862: LD_VAR 0 3
24866: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24867: LD_INT 0
24869: PPUSH
// ar_crane := 88 ;
24870: LD_ADDR_EXP 93
24874: PUSH
24875: LD_INT 88
24877: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24878: LD_ADDR_EXP 88
24882: PUSH
24883: LD_INT 89
24885: ST_TO_ADDR
// us_hack := 99 ;
24886: LD_ADDR_EXP 89
24890: PUSH
24891: LD_INT 99
24893: ST_TO_ADDR
// us_artillery := 97 ;
24894: LD_ADDR_EXP 90
24898: PUSH
24899: LD_INT 97
24901: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24902: LD_ADDR_EXP 91
24906: PUSH
24907: LD_INT 91
24909: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24910: LD_ADDR_EXP 92
24914: PUSH
24915: LD_INT 92
24917: ST_TO_ADDR
// ru_radar := 98 ;
24918: LD_ADDR_EXP 87
24922: PUSH
24923: LD_INT 98
24925: ST_TO_ADDR
// tech_Artillery := 80 ;
24926: LD_ADDR_EXP 94
24930: PUSH
24931: LD_INT 80
24933: ST_TO_ADDR
// tech_RadMat := 81 ;
24934: LD_ADDR_EXP 95
24938: PUSH
24939: LD_INT 81
24941: ST_TO_ADDR
// tech_BasicTools := 82 ;
24942: LD_ADDR_EXP 96
24946: PUSH
24947: LD_INT 82
24949: ST_TO_ADDR
// tech_Cargo := 83 ;
24950: LD_ADDR_EXP 97
24954: PUSH
24955: LD_INT 83
24957: ST_TO_ADDR
// tech_Track := 84 ;
24958: LD_ADDR_EXP 98
24962: PUSH
24963: LD_INT 84
24965: ST_TO_ADDR
// tech_Crane := 85 ;
24966: LD_ADDR_EXP 99
24970: PUSH
24971: LD_INT 85
24973: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24974: LD_ADDR_EXP 100
24978: PUSH
24979: LD_INT 86
24981: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24982: LD_ADDR_EXP 101
24986: PUSH
24987: LD_INT 87
24989: ST_TO_ADDR
// end ;
24990: LD_VAR 0 1
24994: RET
// every 1 do
24995: GO 24997
24997: DISABLE
// InitGlobalVariables ; end_of_file
24998: CALL 24867 0 0
25002: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25003: LD_INT 0
25005: PPUSH
25006: PPUSH
// if exist_mode then
25007: LD_VAR 0 2
25011: IFFALSE 25036
// unit := CreateCharacter ( prefix & ident ) else
25013: LD_ADDR_VAR 0 5
25017: PUSH
25018: LD_VAR 0 3
25022: PUSH
25023: LD_VAR 0 1
25027: STR
25028: PPUSH
25029: CALL_OW 34
25033: ST_TO_ADDR
25034: GO 25051
// unit := NewCharacter ( ident ) ;
25036: LD_ADDR_VAR 0 5
25040: PUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL_OW 25
25050: ST_TO_ADDR
// result := unit ;
25051: LD_ADDR_VAR 0 4
25055: PUSH
25056: LD_VAR 0 5
25060: ST_TO_ADDR
// end ;
25061: LD_VAR 0 4
25065: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25066: LD_INT 0
25068: PPUSH
25069: PPUSH
// if not side or not nation then
25070: LD_VAR 0 1
25074: NOT
25075: PUSH
25076: LD_VAR 0 2
25080: NOT
25081: OR
25082: IFFALSE 25086
// exit ;
25084: GO 25850
// case nation of nation_american :
25086: LD_VAR 0 2
25090: PUSH
25091: LD_INT 1
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25313
25099: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25100: LD_ADDR_VAR 0 4
25104: PUSH
25105: LD_INT 35
25107: PUSH
25108: LD_INT 45
25110: PUSH
25111: LD_INT 46
25113: PUSH
25114: LD_INT 47
25116: PUSH
25117: LD_INT 82
25119: PUSH
25120: LD_INT 83
25122: PUSH
25123: LD_INT 84
25125: PUSH
25126: LD_INT 85
25128: PUSH
25129: LD_INT 86
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 2
25137: PUSH
25138: LD_INT 6
25140: PUSH
25141: LD_INT 15
25143: PUSH
25144: LD_INT 16
25146: PUSH
25147: LD_INT 7
25149: PUSH
25150: LD_INT 12
25152: PUSH
25153: LD_INT 13
25155: PUSH
25156: LD_INT 10
25158: PUSH
25159: LD_INT 14
25161: PUSH
25162: LD_INT 20
25164: PUSH
25165: LD_INT 21
25167: PUSH
25168: LD_INT 22
25170: PUSH
25171: LD_INT 25
25173: PUSH
25174: LD_INT 32
25176: PUSH
25177: LD_INT 27
25179: PUSH
25180: LD_INT 36
25182: PUSH
25183: LD_INT 69
25185: PUSH
25186: LD_INT 39
25188: PUSH
25189: LD_INT 34
25191: PUSH
25192: LD_INT 40
25194: PUSH
25195: LD_INT 48
25197: PUSH
25198: LD_INT 49
25200: PUSH
25201: LD_INT 50
25203: PUSH
25204: LD_INT 51
25206: PUSH
25207: LD_INT 52
25209: PUSH
25210: LD_INT 53
25212: PUSH
25213: LD_INT 54
25215: PUSH
25216: LD_INT 55
25218: PUSH
25219: LD_INT 56
25221: PUSH
25222: LD_INT 57
25224: PUSH
25225: LD_INT 58
25227: PUSH
25228: LD_INT 59
25230: PUSH
25231: LD_INT 60
25233: PUSH
25234: LD_INT 61
25236: PUSH
25237: LD_INT 62
25239: PUSH
25240: LD_INT 80
25242: PUSH
25243: LD_INT 82
25245: PUSH
25246: LD_INT 83
25248: PUSH
25249: LD_INT 84
25251: PUSH
25252: LD_INT 85
25254: PUSH
25255: LD_INT 86
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: ST_TO_ADDR
25311: GO 25774
25313: LD_INT 2
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25543
25321: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25322: LD_ADDR_VAR 0 4
25326: PUSH
25327: LD_INT 35
25329: PUSH
25330: LD_INT 45
25332: PUSH
25333: LD_INT 46
25335: PUSH
25336: LD_INT 47
25338: PUSH
25339: LD_INT 82
25341: PUSH
25342: LD_INT 83
25344: PUSH
25345: LD_INT 84
25347: PUSH
25348: LD_INT 85
25350: PUSH
25351: LD_INT 87
25353: PUSH
25354: LD_INT 70
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 11
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: LD_INT 4
25368: PUSH
25369: LD_INT 5
25371: PUSH
25372: LD_INT 6
25374: PUSH
25375: LD_INT 15
25377: PUSH
25378: LD_INT 18
25380: PUSH
25381: LD_INT 7
25383: PUSH
25384: LD_INT 17
25386: PUSH
25387: LD_INT 8
25389: PUSH
25390: LD_INT 20
25392: PUSH
25393: LD_INT 21
25395: PUSH
25396: LD_INT 22
25398: PUSH
25399: LD_INT 72
25401: PUSH
25402: LD_INT 26
25404: PUSH
25405: LD_INT 69
25407: PUSH
25408: LD_INT 39
25410: PUSH
25411: LD_INT 40
25413: PUSH
25414: LD_INT 41
25416: PUSH
25417: LD_INT 42
25419: PUSH
25420: LD_INT 43
25422: PUSH
25423: LD_INT 48
25425: PUSH
25426: LD_INT 49
25428: PUSH
25429: LD_INT 50
25431: PUSH
25432: LD_INT 51
25434: PUSH
25435: LD_INT 52
25437: PUSH
25438: LD_INT 53
25440: PUSH
25441: LD_INT 54
25443: PUSH
25444: LD_INT 55
25446: PUSH
25447: LD_INT 56
25449: PUSH
25450: LD_INT 60
25452: PUSH
25453: LD_INT 61
25455: PUSH
25456: LD_INT 62
25458: PUSH
25459: LD_INT 66
25461: PUSH
25462: LD_INT 67
25464: PUSH
25465: LD_INT 68
25467: PUSH
25468: LD_INT 81
25470: PUSH
25471: LD_INT 82
25473: PUSH
25474: LD_INT 83
25476: PUSH
25477: LD_INT 84
25479: PUSH
25480: LD_INT 85
25482: PUSH
25483: LD_INT 87
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
25541: GO 25774
25543: LD_INT 3
25545: DOUBLE
25546: EQUAL
25547: IFTRUE 25551
25549: GO 25773
25551: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25552: LD_ADDR_VAR 0 4
25556: PUSH
25557: LD_INT 46
25559: PUSH
25560: LD_INT 47
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 82
25571: PUSH
25572: LD_INT 83
25574: PUSH
25575: LD_INT 84
25577: PUSH
25578: LD_INT 85
25580: PUSH
25581: LD_INT 86
25583: PUSH
25584: LD_INT 11
25586: PUSH
25587: LD_INT 9
25589: PUSH
25590: LD_INT 20
25592: PUSH
25593: LD_INT 19
25595: PUSH
25596: LD_INT 21
25598: PUSH
25599: LD_INT 24
25601: PUSH
25602: LD_INT 22
25604: PUSH
25605: LD_INT 25
25607: PUSH
25608: LD_INT 28
25610: PUSH
25611: LD_INT 29
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: LD_INT 31
25619: PUSH
25620: LD_INT 37
25622: PUSH
25623: LD_INT 38
25625: PUSH
25626: LD_INT 32
25628: PUSH
25629: LD_INT 27
25631: PUSH
25632: LD_INT 33
25634: PUSH
25635: LD_INT 69
25637: PUSH
25638: LD_INT 39
25640: PUSH
25641: LD_INT 34
25643: PUSH
25644: LD_INT 40
25646: PUSH
25647: LD_INT 71
25649: PUSH
25650: LD_INT 23
25652: PUSH
25653: LD_INT 44
25655: PUSH
25656: LD_INT 48
25658: PUSH
25659: LD_INT 49
25661: PUSH
25662: LD_INT 50
25664: PUSH
25665: LD_INT 51
25667: PUSH
25668: LD_INT 52
25670: PUSH
25671: LD_INT 53
25673: PUSH
25674: LD_INT 54
25676: PUSH
25677: LD_INT 55
25679: PUSH
25680: LD_INT 56
25682: PUSH
25683: LD_INT 57
25685: PUSH
25686: LD_INT 58
25688: PUSH
25689: LD_INT 59
25691: PUSH
25692: LD_INT 63
25694: PUSH
25695: LD_INT 64
25697: PUSH
25698: LD_INT 65
25700: PUSH
25701: LD_INT 82
25703: PUSH
25704: LD_INT 83
25706: PUSH
25707: LD_INT 84
25709: PUSH
25710: LD_INT 85
25712: PUSH
25713: LD_INT 86
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: ST_TO_ADDR
25771: GO 25774
25773: POP
// if state > - 1 and state < 3 then
25774: LD_VAR 0 3
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: GREATER
25783: PUSH
25784: LD_VAR 0 3
25788: PUSH
25789: LD_INT 3
25791: LESS
25792: AND
25793: IFFALSE 25850
// for i in result do
25795: LD_ADDR_VAR 0 5
25799: PUSH
25800: LD_VAR 0 4
25804: PUSH
25805: FOR_IN
25806: IFFALSE 25848
// if GetTech ( i , side ) <> state then
25808: LD_VAR 0 5
25812: PPUSH
25813: LD_VAR 0 1
25817: PPUSH
25818: CALL_OW 321
25822: PUSH
25823: LD_VAR 0 3
25827: NONEQUAL
25828: IFFALSE 25846
// result := result diff i ;
25830: LD_ADDR_VAR 0 4
25834: PUSH
25835: LD_VAR 0 4
25839: PUSH
25840: LD_VAR 0 5
25844: DIFF
25845: ST_TO_ADDR
25846: GO 25805
25848: POP
25849: POP
// end ;
25850: LD_VAR 0 4
25854: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25855: LD_INT 0
25857: PPUSH
25858: PPUSH
25859: PPUSH
// result := true ;
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 1
25867: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25868: LD_ADDR_VAR 0 5
25872: PUSH
25873: LD_VAR 0 2
25877: PPUSH
25878: CALL_OW 480
25882: ST_TO_ADDR
// if not tmp then
25883: LD_VAR 0 5
25887: NOT
25888: IFFALSE 25892
// exit ;
25890: GO 25941
// for i in tmp do
25892: LD_ADDR_VAR 0 4
25896: PUSH
25897: LD_VAR 0 5
25901: PUSH
25902: FOR_IN
25903: IFFALSE 25939
// if GetTech ( i , side ) <> state_researched then
25905: LD_VAR 0 4
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL_OW 321
25919: PUSH
25920: LD_INT 2
25922: NONEQUAL
25923: IFFALSE 25937
// begin result := false ;
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 0
25932: ST_TO_ADDR
// exit ;
25933: POP
25934: POP
25935: GO 25941
// end ;
25937: GO 25902
25939: POP
25940: POP
// end ;
25941: LD_VAR 0 3
25945: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25946: LD_INT 0
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25961: LD_VAR 0 1
25965: NOT
25966: PUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 257
25976: PUSH
25977: LD_INT 9
25979: NONEQUAL
25980: OR
25981: IFFALSE 25985
// exit ;
25983: GO 26558
// side := GetSide ( unit ) ;
25985: LD_ADDR_VAR 0 9
25989: PUSH
25990: LD_VAR 0 1
25994: PPUSH
25995: CALL_OW 255
25999: ST_TO_ADDR
// tech_space := tech_spacanom ;
26000: LD_ADDR_VAR 0 12
26004: PUSH
26005: LD_INT 29
26007: ST_TO_ADDR
// tech_time := tech_taurad ;
26008: LD_ADDR_VAR 0 13
26012: PUSH
26013: LD_INT 28
26015: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26016: LD_ADDR_VAR 0 11
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 310
26030: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26031: LD_VAR 0 11
26035: PPUSH
26036: CALL_OW 247
26040: PUSH
26041: LD_INT 2
26043: EQUAL
26044: IFFALSE 26048
// exit ;
26046: GO 26558
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26048: LD_ADDR_VAR 0 8
26052: PUSH
26053: LD_INT 81
26055: PUSH
26056: LD_VAR 0 9
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: LD_INT 21
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: ST_TO_ADDR
// if not tmp then
26091: LD_VAR 0 8
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26558
// if in_unit then
26100: LD_VAR 0 11
26104: IFFALSE 26128
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26106: LD_ADDR_VAR 0 10
26110: PUSH
26111: LD_VAR 0 8
26115: PPUSH
26116: LD_VAR 0 11
26120: PPUSH
26121: CALL_OW 74
26125: ST_TO_ADDR
26126: GO 26148
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26128: LD_ADDR_VAR 0 10
26132: PUSH
26133: LD_VAR 0 8
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 74
26147: ST_TO_ADDR
// if not enemy then
26148: LD_VAR 0 10
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26558
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26157: LD_VAR 0 11
26161: PUSH
26162: LD_VAR 0 11
26166: PPUSH
26167: LD_VAR 0 10
26171: PPUSH
26172: CALL_OW 296
26176: PUSH
26177: LD_INT 13
26179: GREATER
26180: AND
26181: PUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: LD_VAR 0 10
26191: PPUSH
26192: CALL_OW 296
26196: PUSH
26197: LD_INT 12
26199: GREATER
26200: OR
26201: IFFALSE 26205
// exit ;
26203: GO 26558
// missile := [ 1 ] ;
26205: LD_ADDR_VAR 0 14
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26216: LD_VAR 0 9
26220: PPUSH
26221: LD_VAR 0 12
26225: PPUSH
26226: CALL_OW 325
26230: IFFALSE 26259
// missile := Insert ( missile , missile + 1 , 2 ) ;
26232: LD_ADDR_VAR 0 14
26236: PUSH
26237: LD_VAR 0 14
26241: PPUSH
26242: LD_VAR 0 14
26246: PUSH
26247: LD_INT 1
26249: PLUS
26250: PPUSH
26251: LD_INT 2
26253: PPUSH
26254: CALL_OW 2
26258: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26259: LD_VAR 0 9
26263: PPUSH
26264: LD_VAR 0 13
26268: PPUSH
26269: CALL_OW 325
26273: PUSH
26274: LD_VAR 0 10
26278: PPUSH
26279: CALL_OW 255
26283: PPUSH
26284: LD_VAR 0 13
26288: PPUSH
26289: CALL_OW 325
26293: NOT
26294: AND
26295: IFFALSE 26324
// missile := Insert ( missile , missile + 1 , 3 ) ;
26297: LD_ADDR_VAR 0 14
26301: PUSH
26302: LD_VAR 0 14
26306: PPUSH
26307: LD_VAR 0 14
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: LD_INT 3
26318: PPUSH
26319: CALL_OW 2
26323: ST_TO_ADDR
// if missile < 2 then
26324: LD_VAR 0 14
26328: PUSH
26329: LD_INT 2
26331: LESS
26332: IFFALSE 26336
// exit ;
26334: GO 26558
// x := GetX ( enemy ) ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_VAR 0 10
26345: PPUSH
26346: CALL_OW 250
26350: ST_TO_ADDR
// y := GetY ( enemy ) ;
26351: LD_ADDR_VAR 0 5
26355: PUSH
26356: LD_VAR 0 10
26360: PPUSH
26361: CALL_OW 251
26365: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26366: LD_ADDR_VAR 0 6
26370: PUSH
26371: LD_VAR 0 4
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PPUSH
26380: LD_INT 1
26382: PPUSH
26383: CALL_OW 12
26387: PLUS
26388: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26389: LD_ADDR_VAR 0 7
26393: PUSH
26394: LD_VAR 0 5
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PPUSH
26403: LD_INT 1
26405: PPUSH
26406: CALL_OW 12
26410: PLUS
26411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26412: LD_VAR 0 6
26416: PPUSH
26417: LD_VAR 0 7
26421: PPUSH
26422: CALL_OW 488
26426: NOT
26427: IFFALSE 26449
// begin _x := x ;
26429: LD_ADDR_VAR 0 6
26433: PUSH
26434: LD_VAR 0 4
26438: ST_TO_ADDR
// _y := y ;
26439: LD_ADDR_VAR 0 7
26443: PUSH
26444: LD_VAR 0 5
26448: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26449: LD_ADDR_VAR 0 3
26453: PUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_VAR 0 14
26461: PPUSH
26462: CALL_OW 12
26466: ST_TO_ADDR
// case i of 1 :
26467: LD_VAR 0 3
26471: PUSH
26472: LD_INT 1
26474: DOUBLE
26475: EQUAL
26476: IFTRUE 26480
26478: GO 26497
26480: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26481: LD_VAR 0 1
26485: PPUSH
26486: LD_VAR 0 10
26490: PPUSH
26491: CALL_OW 115
26495: GO 26558
26497: LD_INT 2
26499: DOUBLE
26500: EQUAL
26501: IFTRUE 26505
26503: GO 26527
26505: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26506: LD_VAR 0 1
26510: PPUSH
26511: LD_VAR 0 6
26515: PPUSH
26516: LD_VAR 0 7
26520: PPUSH
26521: CALL_OW 153
26525: GO 26558
26527: LD_INT 3
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26535
26533: GO 26557
26535: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26536: LD_VAR 0 1
26540: PPUSH
26541: LD_VAR 0 6
26545: PPUSH
26546: LD_VAR 0 7
26550: PPUSH
26551: CALL_OW 154
26555: GO 26558
26557: POP
// end ;
26558: LD_VAR 0 2
26562: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
// if not unit or not building then
26571: LD_VAR 0 1
26575: NOT
26576: PUSH
26577: LD_VAR 0 2
26581: NOT
26582: OR
26583: IFFALSE 26587
// exit ;
26585: GO 26745
// x := GetX ( building ) ;
26587: LD_ADDR_VAR 0 5
26591: PUSH
26592: LD_VAR 0 2
26596: PPUSH
26597: CALL_OW 250
26601: ST_TO_ADDR
// y := GetY ( building ) ;
26602: LD_ADDR_VAR 0 6
26606: PUSH
26607: LD_VAR 0 2
26611: PPUSH
26612: CALL_OW 251
26616: ST_TO_ADDR
// for i = 0 to 5 do
26617: LD_ADDR_VAR 0 4
26621: PUSH
26622: DOUBLE
26623: LD_INT 0
26625: DEC
26626: ST_TO_ADDR
26627: LD_INT 5
26629: PUSH
26630: FOR_TO
26631: IFFALSE 26743
// begin _x := ShiftX ( x , i , 3 ) ;
26633: LD_ADDR_VAR 0 7
26637: PUSH
26638: LD_VAR 0 5
26642: PPUSH
26643: LD_VAR 0 4
26647: PPUSH
26648: LD_INT 3
26650: PPUSH
26651: CALL_OW 272
26655: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26656: LD_ADDR_VAR 0 8
26660: PUSH
26661: LD_VAR 0 6
26665: PPUSH
26666: LD_VAR 0 4
26670: PPUSH
26671: LD_INT 3
26673: PPUSH
26674: CALL_OW 273
26678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26679: LD_VAR 0 7
26683: PPUSH
26684: LD_VAR 0 8
26688: PPUSH
26689: CALL_OW 488
26693: NOT
26694: IFFALSE 26698
// continue ;
26696: GO 26630
// if HexInfo ( _x , _y ) = 0 then
26698: LD_VAR 0 7
26702: PPUSH
26703: LD_VAR 0 8
26707: PPUSH
26708: CALL_OW 428
26712: PUSH
26713: LD_INT 0
26715: EQUAL
26716: IFFALSE 26741
// begin ComMoveXY ( unit , _x , _y ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_VAR 0 7
26727: PPUSH
26728: LD_VAR 0 8
26732: PPUSH
26733: CALL_OW 111
// exit ;
26737: POP
26738: POP
26739: GO 26745
// end ; end ;
26741: GO 26630
26743: POP
26744: POP
// end ;
26745: LD_VAR 0 3
26749: RET
// export function ScanBase ( side , base_area ) ; begin
26750: LD_INT 0
26752: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26753: LD_ADDR_VAR 0 3
26757: PUSH
26758: LD_VAR 0 2
26762: PPUSH
26763: LD_INT 81
26765: PUSH
26766: LD_VAR 0 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 70
26779: ST_TO_ADDR
// end ;
26780: LD_VAR 0 3
26784: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26785: LD_INT 0
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
// result := false ;
26791: LD_ADDR_VAR 0 2
26795: PUSH
26796: LD_INT 0
26798: ST_TO_ADDR
// side := GetSide ( unit ) ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 255
26813: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26814: LD_ADDR_VAR 0 4
26818: PUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 248
26828: ST_TO_ADDR
// case nat of 1 :
26829: LD_VAR 0 4
26833: PUSH
26834: LD_INT 1
26836: DOUBLE
26837: EQUAL
26838: IFTRUE 26842
26840: GO 26853
26842: POP
// tech := tech_lassight ; 2 :
26843: LD_ADDR_VAR 0 5
26847: PUSH
26848: LD_INT 12
26850: ST_TO_ADDR
26851: GO 26892
26853: LD_INT 2
26855: DOUBLE
26856: EQUAL
26857: IFTRUE 26861
26859: GO 26872
26861: POP
// tech := tech_mortar ; 3 :
26862: LD_ADDR_VAR 0 5
26866: PUSH
26867: LD_INT 41
26869: ST_TO_ADDR
26870: GO 26892
26872: LD_INT 3
26874: DOUBLE
26875: EQUAL
26876: IFTRUE 26880
26878: GO 26891
26880: POP
// tech := tech_bazooka ; end ;
26881: LD_ADDR_VAR 0 5
26885: PUSH
26886: LD_INT 44
26888: ST_TO_ADDR
26889: GO 26892
26891: POP
// if Researched ( side , tech ) then
26892: LD_VAR 0 3
26896: PPUSH
26897: LD_VAR 0 5
26901: PPUSH
26902: CALL_OW 325
26906: IFFALSE 26933
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26908: LD_ADDR_VAR 0 2
26912: PUSH
26913: LD_INT 5
26915: PUSH
26916: LD_INT 8
26918: PUSH
26919: LD_INT 9
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: PUSH
26927: LD_VAR 0 4
26931: ARRAY
26932: ST_TO_ADDR
// end ;
26933: LD_VAR 0 2
26937: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26938: LD_INT 0
26940: PPUSH
26941: PPUSH
26942: PPUSH
// if not mines then
26943: LD_VAR 0 2
26947: NOT
26948: IFFALSE 26952
// exit ;
26950: GO 27096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26952: LD_ADDR_VAR 0 5
26956: PUSH
26957: LD_INT 81
26959: PUSH
26960: LD_VAR 0 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 21
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 69
26994: ST_TO_ADDR
// for i in mines do
26995: LD_ADDR_VAR 0 4
26999: PUSH
27000: LD_VAR 0 2
27004: PUSH
27005: FOR_IN
27006: IFFALSE 27094
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27008: LD_VAR 0 4
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: PPUSH
27017: LD_VAR 0 4
27021: PUSH
27022: LD_INT 2
27024: ARRAY
27025: PPUSH
27026: CALL_OW 458
27030: NOT
27031: IFFALSE 27035
// continue ;
27033: GO 27005
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27035: LD_VAR 0 4
27039: PUSH
27040: LD_INT 1
27042: ARRAY
27043: PPUSH
27044: LD_VAR 0 4
27048: PUSH
27049: LD_INT 2
27051: ARRAY
27052: PPUSH
27053: CALL_OW 428
27057: PUSH
27058: LD_VAR 0 5
27062: IN
27063: IFFALSE 27092
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27065: LD_VAR 0 4
27069: PUSH
27070: LD_INT 1
27072: ARRAY
27073: PPUSH
27074: LD_VAR 0 4
27078: PUSH
27079: LD_INT 2
27081: ARRAY
27082: PPUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 456
// end ;
27092: GO 27005
27094: POP
27095: POP
// end ;
27096: LD_VAR 0 3
27100: RET
// export function Count ( array ) ; var i ; begin
27101: LD_INT 0
27103: PPUSH
27104: PPUSH
// result := 0 ;
27105: LD_ADDR_VAR 0 2
27109: PUSH
27110: LD_INT 0
27112: ST_TO_ADDR
// for i in array do
27113: LD_ADDR_VAR 0 3
27117: PUSH
27118: LD_VAR 0 1
27122: PUSH
27123: FOR_IN
27124: IFFALSE 27148
// if i then
27126: LD_VAR 0 3
27130: IFFALSE 27146
// result := result + 1 ;
27132: LD_ADDR_VAR 0 2
27136: PUSH
27137: LD_VAR 0 2
27141: PUSH
27142: LD_INT 1
27144: PLUS
27145: ST_TO_ADDR
27146: GO 27123
27148: POP
27149: POP
// end ;
27150: LD_VAR 0 2
27154: RET
// export function IsEmpty ( building ) ; begin
27155: LD_INT 0
27157: PPUSH
// if not building then
27158: LD_VAR 0 1
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27210
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_VAR 0 1
27176: PUSH
27177: LD_INT 22
27179: PUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: CALL_OW 255
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 58
27196: PUSH
27197: EMPTY
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PPUSH
27204: CALL_OW 69
27208: IN
27209: ST_TO_ADDR
// end ;
27210: LD_VAR 0 2
27214: RET
// export function IsNotFull ( building ) ; begin
27215: LD_INT 0
27217: PPUSH
// if not building then
27218: LD_VAR 0 1
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27246
// result := UnitsInside ( building ) < 6 ;
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: LD_VAR 0 1
27236: PPUSH
27237: CALL_OW 313
27241: PUSH
27242: LD_INT 6
27244: LESS
27245: ST_TO_ADDR
// end ;
27246: LD_VAR 0 2
27250: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27251: LD_INT 0
27253: PPUSH
27254: PPUSH
27255: PPUSH
27256: PPUSH
// tmp := [ ] ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: EMPTY
27263: ST_TO_ADDR
// list := [ ] ;
27264: LD_ADDR_VAR 0 5
27268: PUSH
27269: EMPTY
27270: ST_TO_ADDR
// for i = 16 to 25 do
27271: LD_ADDR_VAR 0 4
27275: PUSH
27276: DOUBLE
27277: LD_INT 16
27279: DEC
27280: ST_TO_ADDR
27281: LD_INT 25
27283: PUSH
27284: FOR_TO
27285: IFFALSE 27358
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27287: LD_ADDR_VAR 0 3
27291: PUSH
27292: LD_VAR 0 3
27296: PUSH
27297: LD_INT 22
27299: PUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 255
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 91
27316: PUSH
27317: LD_VAR 0 1
27321: PUSH
27322: LD_INT 6
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 30
27332: PUSH
27333: LD_VAR 0 4
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ADD
27355: ST_TO_ADDR
27356: GO 27284
27358: POP
27359: POP
// for i = 1 to tmp do
27360: LD_ADDR_VAR 0 4
27364: PUSH
27365: DOUBLE
27366: LD_INT 1
27368: DEC
27369: ST_TO_ADDR
27370: LD_VAR 0 3
27374: PUSH
27375: FOR_TO
27376: IFFALSE 27464
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_VAR 0 5
27387: PUSH
27388: LD_VAR 0 3
27392: PUSH
27393: LD_VAR 0 4
27397: ARRAY
27398: PPUSH
27399: CALL_OW 266
27403: PUSH
27404: LD_VAR 0 3
27408: PUSH
27409: LD_VAR 0 4
27413: ARRAY
27414: PPUSH
27415: CALL_OW 250
27419: PUSH
27420: LD_VAR 0 3
27424: PUSH
27425: LD_VAR 0 4
27429: ARRAY
27430: PPUSH
27431: CALL_OW 251
27435: PUSH
27436: LD_VAR 0 3
27440: PUSH
27441: LD_VAR 0 4
27445: ARRAY
27446: PPUSH
27447: CALL_OW 254
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: ADD
27461: ST_TO_ADDR
27462: GO 27375
27464: POP
27465: POP
// result := list ;
27466: LD_ADDR_VAR 0 2
27470: PUSH
27471: LD_VAR 0 5
27475: ST_TO_ADDR
// end ;
27476: LD_VAR 0 2
27480: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27481: LD_INT 0
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
// if not factory then
27490: LD_VAR 0 1
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 28092
// if control = control_apeman then
27499: LD_VAR 0 4
27503: PUSH
27504: LD_INT 5
27506: EQUAL
27507: IFFALSE 27616
// begin tmp := UnitsInside ( factory ) ;
27509: LD_ADDR_VAR 0 8
27513: PUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL_OW 313
27523: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27524: LD_VAR 0 8
27528: PPUSH
27529: LD_INT 25
27531: PUSH
27532: LD_INT 12
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PPUSH
27539: CALL_OW 72
27543: NOT
27544: IFFALSE 27554
// control := control_manual ;
27546: LD_ADDR_VAR 0 4
27550: PUSH
27551: LD_INT 1
27553: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27554: LD_ADDR_VAR 0 8
27558: PUSH
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL 27251 0 1
27568: ST_TO_ADDR
// if tmp then
27569: LD_VAR 0 8
27573: IFFALSE 27616
// begin for i in tmp do
27575: LD_ADDR_VAR 0 7
27579: PUSH
27580: LD_VAR 0 8
27584: PUSH
27585: FOR_IN
27586: IFFALSE 27614
// if i [ 1 ] = b_ext_radio then
27588: LD_VAR 0 7
27592: PUSH
27593: LD_INT 1
27595: ARRAY
27596: PUSH
27597: LD_INT 22
27599: EQUAL
27600: IFFALSE 27612
// begin control := control_remote ;
27602: LD_ADDR_VAR 0 4
27606: PUSH
27607: LD_INT 2
27609: ST_TO_ADDR
// break ;
27610: GO 27614
// end ;
27612: GO 27585
27614: POP
27615: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27616: LD_VAR 0 1
27620: PPUSH
27621: LD_VAR 0 2
27625: PPUSH
27626: LD_VAR 0 3
27630: PPUSH
27631: LD_VAR 0 4
27635: PPUSH
27636: LD_VAR 0 5
27640: PPUSH
27641: CALL_OW 448
27645: IFFALSE 27680
// begin result := [ chassis , engine , control , weapon ] ;
27647: LD_ADDR_VAR 0 6
27651: PUSH
27652: LD_VAR 0 2
27656: PUSH
27657: LD_VAR 0 3
27661: PUSH
27662: LD_VAR 0 4
27666: PUSH
27667: LD_VAR 0 5
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: ST_TO_ADDR
// exit ;
27678: GO 28092
// end ; _chassis := AvailableChassisList ( factory ) ;
27680: LD_ADDR_VAR 0 9
27684: PUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 475
27694: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27695: LD_ADDR_VAR 0 11
27699: PUSH
27700: LD_VAR 0 1
27704: PPUSH
27705: CALL_OW 476
27709: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27710: LD_ADDR_VAR 0 12
27714: PUSH
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 477
27724: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27725: LD_ADDR_VAR 0 10
27729: PUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL_OW 478
27739: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27740: LD_VAR 0 9
27744: NOT
27745: PUSH
27746: LD_VAR 0 11
27750: NOT
27751: OR
27752: PUSH
27753: LD_VAR 0 12
27757: NOT
27758: OR
27759: PUSH
27760: LD_VAR 0 10
27764: NOT
27765: OR
27766: IFFALSE 27801
// begin result := [ chassis , engine , control , weapon ] ;
27768: LD_ADDR_VAR 0 6
27772: PUSH
27773: LD_VAR 0 2
27777: PUSH
27778: LD_VAR 0 3
27782: PUSH
27783: LD_VAR 0 4
27787: PUSH
27788: LD_VAR 0 5
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// exit ;
27799: GO 28092
// end ; if not chassis in _chassis then
27801: LD_VAR 0 2
27805: PUSH
27806: LD_VAR 0 9
27810: IN
27811: NOT
27812: IFFALSE 27838
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27814: LD_ADDR_VAR 0 2
27818: PUSH
27819: LD_VAR 0 9
27823: PUSH
27824: LD_INT 1
27826: PPUSH
27827: LD_VAR 0 9
27831: PPUSH
27832: CALL_OW 12
27836: ARRAY
27837: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27838: LD_VAR 0 2
27842: PPUSH
27843: LD_VAR 0 3
27847: PPUSH
27848: CALL 28097 0 2
27852: NOT
27853: IFFALSE 27912
// repeat engine := _engine [ 1 ] ;
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_VAR 0 11
27864: PUSH
27865: LD_INT 1
27867: ARRAY
27868: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27869: LD_ADDR_VAR 0 11
27873: PUSH
27874: LD_VAR 0 11
27878: PPUSH
27879: LD_INT 1
27881: PPUSH
27882: CALL_OW 3
27886: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27887: LD_VAR 0 2
27891: PPUSH
27892: LD_VAR 0 3
27896: PPUSH
27897: CALL 28097 0 2
27901: PUSH
27902: LD_VAR 0 11
27906: PUSH
27907: EMPTY
27908: EQUAL
27909: OR
27910: IFFALSE 27855
// if not control in _control then
27912: LD_VAR 0 4
27916: PUSH
27917: LD_VAR 0 12
27921: IN
27922: NOT
27923: IFFALSE 27949
// control := _control [ rand ( 1 , _control ) ] ;
27925: LD_ADDR_VAR 0 4
27929: PUSH
27930: LD_VAR 0 12
27934: PUSH
27935: LD_INT 1
27937: PPUSH
27938: LD_VAR 0 12
27942: PPUSH
27943: CALL_OW 12
27947: ARRAY
27948: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 5
27958: PPUSH
27959: CALL 28317 0 2
27963: NOT
27964: IFFALSE 28023
// repeat weapon := _weapon [ 1 ] ;
27966: LD_ADDR_VAR 0 5
27970: PUSH
27971: LD_VAR 0 10
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27980: LD_ADDR_VAR 0 10
27984: PUSH
27985: LD_VAR 0 10
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: CALL_OW 3
27997: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 5
28007: PPUSH
28008: CALL 28317 0 2
28012: PUSH
28013: LD_VAR 0 10
28017: PUSH
28018: EMPTY
28019: EQUAL
28020: OR
28021: IFFALSE 27966
// result := [ ] ;
28023: LD_ADDR_VAR 0 6
28027: PUSH
28028: EMPTY
28029: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_VAR 0 2
28039: PPUSH
28040: LD_VAR 0 3
28044: PPUSH
28045: LD_VAR 0 4
28049: PPUSH
28050: LD_VAR 0 5
28054: PPUSH
28055: CALL_OW 448
28059: IFFALSE 28092
// result := [ chassis , engine , control , weapon ] ;
28061: LD_ADDR_VAR 0 6
28065: PUSH
28066: LD_VAR 0 2
28070: PUSH
28071: LD_VAR 0 3
28075: PUSH
28076: LD_VAR 0 4
28080: PUSH
28081: LD_VAR 0 5
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
// end ;
28092: LD_VAR 0 6
28096: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28097: LD_INT 0
28099: PPUSH
// if not chassis or not engine then
28100: LD_VAR 0 1
28104: NOT
28105: PUSH
28106: LD_VAR 0 2
28110: NOT
28111: OR
28112: IFFALSE 28116
// exit ;
28114: GO 28312
// case engine of engine_solar :
28116: LD_VAR 0 2
28120: PUSH
28121: LD_INT 2
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28167
28129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_INT 11
28137: PUSH
28138: LD_INT 12
28140: PUSH
28141: LD_INT 13
28143: PUSH
28144: LD_INT 14
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 28296
28167: LD_INT 1
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28237
28175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 11
28183: PUSH
28184: LD_INT 12
28186: PUSH
28187: LD_INT 13
28189: PUSH
28190: LD_INT 14
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 4
28204: PUSH
28205: LD_INT 5
28207: PUSH
28208: LD_INT 21
28210: PUSH
28211: LD_INT 23
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_INT 24
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
28235: GO 28296
28237: LD_INT 3
28239: DOUBLE
28240: EQUAL
28241: IFTRUE 28245
28243: GO 28295
28245: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28246: LD_ADDR_VAR 0 3
28250: PUSH
28251: LD_INT 13
28253: PUSH
28254: LD_INT 14
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: LD_INT 4
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: LD_INT 21
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_INT 23
28277: PUSH
28278: LD_INT 24
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
28293: GO 28296
28295: POP
// result := ( chassis in result ) ;
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: LD_VAR 0 1
28305: PUSH
28306: LD_VAR 0 3
28310: IN
28311: ST_TO_ADDR
// end ;
28312: LD_VAR 0 3
28316: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28317: LD_INT 0
28319: PPUSH
// if not chassis or not weapon then
28320: LD_VAR 0 1
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: NOT
28331: OR
28332: IFFALSE 28336
// exit ;
28334: GO 29362
// case weapon of us_machine_gun :
28336: LD_VAR 0 2
28340: PUSH
28341: LD_INT 2
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28379
28349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28350: LD_ADDR_VAR 0 3
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: LD_INT 2
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: LD_INT 4
28366: PUSH
28367: LD_INT 5
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: ST_TO_ADDR
28377: GO 29346
28379: LD_INT 3
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28417
28387: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 2
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: LD_INT 4
28404: PUSH
28405: LD_INT 5
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
28415: GO 29346
28417: LD_INT 11
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28455
28425: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28426: LD_ADDR_VAR 0 3
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: LD_INT 5
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: ST_TO_ADDR
28453: GO 29346
28455: LD_INT 4
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28489
28463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 4
28477: PUSH
28478: LD_INT 5
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: ST_TO_ADDR
28487: GO 29346
28489: LD_INT 5
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28523
28497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 4
28511: PUSH
28512: LD_INT 5
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
28521: GO 29346
28523: LD_INT 9
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28557
28531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: LD_INT 5
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 29346
28557: LD_INT 7
28559: DOUBLE
28560: EQUAL
28561: IFTRUE 28565
28563: GO 28591
28565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: LD_INT 3
28576: PUSH
28577: LD_INT 4
28579: PUSH
28580: LD_INT 5
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
28589: GO 29346
28591: LD_INT 12
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28625
28599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: LD_INT 3
28610: PUSH
28611: LD_INT 4
28613: PUSH
28614: LD_INT 5
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
28623: GO 29346
28625: LD_INT 13
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 28659
28633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28634: LD_ADDR_VAR 0 3
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 3
28644: PUSH
28645: LD_INT 4
28647: PUSH
28648: LD_INT 5
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
28657: GO 29346
28659: LD_INT 14
28661: DOUBLE
28662: EQUAL
28663: IFTRUE 28667
28665: GO 28685
28667: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 4
28675: PUSH
28676: LD_INT 5
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29346
28685: LD_INT 6
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28711
28693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 4
28701: PUSH
28702: LD_INT 5
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 29346
28711: LD_INT 10
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28737
28719: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_INT 4
28727: PUSH
28728: LD_INT 5
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: ST_TO_ADDR
28735: GO 29346
28737: LD_INT 22
28739: DOUBLE
28740: EQUAL
28741: IFTRUE 28745
28743: GO 28771
28745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28746: LD_ADDR_VAR 0 3
28750: PUSH
28751: LD_INT 11
28753: PUSH
28754: LD_INT 12
28756: PUSH
28757: LD_INT 13
28759: PUSH
28760: LD_INT 14
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
28769: GO 29346
28771: LD_INT 23
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28805
28779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 11
28787: PUSH
28788: LD_INT 12
28790: PUSH
28791: LD_INT 13
28793: PUSH
28794: LD_INT 14
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: ST_TO_ADDR
28803: GO 29346
28805: LD_INT 24
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 28839
28813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28814: LD_ADDR_VAR 0 3
28818: PUSH
28819: LD_INT 11
28821: PUSH
28822: LD_INT 12
28824: PUSH
28825: LD_INT 13
28827: PUSH
28828: LD_INT 14
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: ST_TO_ADDR
28837: GO 29346
28839: LD_INT 30
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 28873
28847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_INT 11
28855: PUSH
28856: LD_INT 12
28858: PUSH
28859: LD_INT 13
28861: PUSH
28862: LD_INT 14
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
28871: GO 29346
28873: LD_INT 25
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28899
28881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28882: LD_ADDR_VAR 0 3
28886: PUSH
28887: LD_INT 13
28889: PUSH
28890: LD_INT 14
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: ST_TO_ADDR
28897: GO 29346
28899: LD_INT 27
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28925
28907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 13
28915: PUSH
28916: LD_INT 14
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: ST_TO_ADDR
28923: GO 29346
28925: LD_INT 28
28927: DOUBLE
28928: EQUAL
28929: IFTRUE 28933
28931: GO 28951
28933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: LD_INT 13
28941: PUSH
28942: LD_INT 14
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: ST_TO_ADDR
28949: GO 29346
28951: LD_INT 29
28953: DOUBLE
28954: EQUAL
28955: IFTRUE 28959
28957: GO 28977
28959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 13
28967: PUSH
28968: LD_INT 14
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: ST_TO_ADDR
28975: GO 29346
28977: LD_INT 31
28979: DOUBLE
28980: EQUAL
28981: IFTRUE 28985
28983: GO 29003
28985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28986: LD_ADDR_VAR 0 3
28990: PUSH
28991: LD_INT 13
28993: PUSH
28994: LD_INT 14
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: ST_TO_ADDR
29001: GO 29346
29003: LD_INT 26
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 29029
29011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29012: LD_ADDR_VAR 0 3
29016: PUSH
29017: LD_INT 13
29019: PUSH
29020: LD_INT 14
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: ST_TO_ADDR
29027: GO 29346
29029: LD_INT 42
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29063
29037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 21
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_INT 23
29051: PUSH
29052: LD_INT 24
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
29061: GO 29346
29063: LD_INT 43
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29097
29071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29072: LD_ADDR_VAR 0 3
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 22
29082: PUSH
29083: LD_INT 23
29085: PUSH
29086: LD_INT 24
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: ST_TO_ADDR
29095: GO 29346
29097: LD_INT 44
29099: DOUBLE
29100: EQUAL
29101: IFTRUE 29105
29103: GO 29131
29105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: LD_INT 21
29113: PUSH
29114: LD_INT 22
29116: PUSH
29117: LD_INT 23
29119: PUSH
29120: LD_INT 24
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: ST_TO_ADDR
29129: GO 29346
29131: LD_INT 45
29133: DOUBLE
29134: EQUAL
29135: IFTRUE 29139
29137: GO 29165
29139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29140: LD_ADDR_VAR 0 3
29144: PUSH
29145: LD_INT 21
29147: PUSH
29148: LD_INT 22
29150: PUSH
29151: LD_INT 23
29153: PUSH
29154: LD_INT 24
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
29163: GO 29346
29165: LD_INT 49
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29199
29173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 21
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_INT 23
29187: PUSH
29188: LD_INT 24
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
29197: GO 29346
29199: LD_INT 51
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29233
29207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_INT 21
29215: PUSH
29216: LD_INT 22
29218: PUSH
29219: LD_INT 23
29221: PUSH
29222: LD_INT 24
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
29231: GO 29346
29233: LD_INT 52
29235: DOUBLE
29236: EQUAL
29237: IFTRUE 29241
29239: GO 29267
29241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 21
29249: PUSH
29250: LD_INT 22
29252: PUSH
29253: LD_INT 23
29255: PUSH
29256: LD_INT 24
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: ST_TO_ADDR
29265: GO 29346
29267: LD_INT 53
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29293
29275: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29276: LD_ADDR_VAR 0 3
29280: PUSH
29281: LD_INT 23
29283: PUSH
29284: LD_INT 24
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29346
29293: LD_INT 46
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29319
29301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 23
29309: PUSH
29310: LD_INT 24
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: ST_TO_ADDR
29317: GO 29346
29319: LD_INT 47
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29327
29325: GO 29345
29327: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29328: LD_ADDR_VAR 0 3
29332: PUSH
29333: LD_INT 23
29335: PUSH
29336: LD_INT 24
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: ST_TO_ADDR
29343: GO 29346
29345: POP
// result := ( chassis in result ) ;
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_VAR 0 1
29355: PUSH
29356: LD_VAR 0 3
29360: IN
29361: ST_TO_ADDR
// end ;
29362: LD_VAR 0 3
29366: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29367: LD_INT 0
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
// result := array ;
29376: LD_ADDR_VAR 0 5
29380: PUSH
29381: LD_VAR 0 1
29385: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29386: LD_VAR 0 1
29390: NOT
29391: PUSH
29392: LD_VAR 0 2
29396: NOT
29397: OR
29398: PUSH
29399: LD_VAR 0 3
29403: NOT
29404: OR
29405: PUSH
29406: LD_VAR 0 2
29410: PUSH
29411: LD_VAR 0 1
29415: GREATER
29416: OR
29417: PUSH
29418: LD_VAR 0 3
29422: PUSH
29423: LD_VAR 0 1
29427: GREATER
29428: OR
29429: IFFALSE 29433
// exit ;
29431: GO 29729
// if direction then
29433: LD_VAR 0 4
29437: IFFALSE 29501
// begin d := 1 ;
29439: LD_ADDR_VAR 0 9
29443: PUSH
29444: LD_INT 1
29446: ST_TO_ADDR
// if i_from > i_to then
29447: LD_VAR 0 2
29451: PUSH
29452: LD_VAR 0 3
29456: GREATER
29457: IFFALSE 29483
// length := ( array - i_from ) + i_to else
29459: LD_ADDR_VAR 0 11
29463: PUSH
29464: LD_VAR 0 1
29468: PUSH
29469: LD_VAR 0 2
29473: MINUS
29474: PUSH
29475: LD_VAR 0 3
29479: PLUS
29480: ST_TO_ADDR
29481: GO 29499
// length := i_to - i_from ;
29483: LD_ADDR_VAR 0 11
29487: PUSH
29488: LD_VAR 0 3
29492: PUSH
29493: LD_VAR 0 2
29497: MINUS
29498: ST_TO_ADDR
// end else
29499: GO 29562
// begin d := - 1 ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: ST_TO_ADDR
// if i_from > i_to then
29510: LD_VAR 0 2
29514: PUSH
29515: LD_VAR 0 3
29519: GREATER
29520: IFFALSE 29540
// length := i_from - i_to else
29522: LD_ADDR_VAR 0 11
29526: PUSH
29527: LD_VAR 0 2
29531: PUSH
29532: LD_VAR 0 3
29536: MINUS
29537: ST_TO_ADDR
29538: GO 29562
// length := ( array - i_to ) + i_from ;
29540: LD_ADDR_VAR 0 11
29544: PUSH
29545: LD_VAR 0 1
29549: PUSH
29550: LD_VAR 0 3
29554: MINUS
29555: PUSH
29556: LD_VAR 0 2
29560: PLUS
29561: ST_TO_ADDR
// end ; if not length then
29562: LD_VAR 0 11
29566: NOT
29567: IFFALSE 29571
// exit ;
29569: GO 29729
// tmp := array ;
29571: LD_ADDR_VAR 0 10
29575: PUSH
29576: LD_VAR 0 1
29580: ST_TO_ADDR
// for i = 1 to length do
29581: LD_ADDR_VAR 0 6
29585: PUSH
29586: DOUBLE
29587: LD_INT 1
29589: DEC
29590: ST_TO_ADDR
29591: LD_VAR 0 11
29595: PUSH
29596: FOR_TO
29597: IFFALSE 29717
// begin for j = 1 to array do
29599: LD_ADDR_VAR 0 7
29603: PUSH
29604: DOUBLE
29605: LD_INT 1
29607: DEC
29608: ST_TO_ADDR
29609: LD_VAR 0 1
29613: PUSH
29614: FOR_TO
29615: IFFALSE 29703
// begin k := j + d ;
29617: LD_ADDR_VAR 0 8
29621: PUSH
29622: LD_VAR 0 7
29626: PUSH
29627: LD_VAR 0 9
29631: PLUS
29632: ST_TO_ADDR
// if k > array then
29633: LD_VAR 0 8
29637: PUSH
29638: LD_VAR 0 1
29642: GREATER
29643: IFFALSE 29653
// k := 1 ;
29645: LD_ADDR_VAR 0 8
29649: PUSH
29650: LD_INT 1
29652: ST_TO_ADDR
// if not k then
29653: LD_VAR 0 8
29657: NOT
29658: IFFALSE 29670
// k := array ;
29660: LD_ADDR_VAR 0 8
29664: PUSH
29665: LD_VAR 0 1
29669: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29670: LD_ADDR_VAR 0 10
29674: PUSH
29675: LD_VAR 0 10
29679: PPUSH
29680: LD_VAR 0 8
29684: PPUSH
29685: LD_VAR 0 1
29689: PUSH
29690: LD_VAR 0 7
29694: ARRAY
29695: PPUSH
29696: CALL_OW 1
29700: ST_TO_ADDR
// end ;
29701: GO 29614
29703: POP
29704: POP
// array := tmp ;
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_VAR 0 10
29714: ST_TO_ADDR
// end ;
29715: GO 29596
29717: POP
29718: POP
// result := array ;
29719: LD_ADDR_VAR 0 5
29723: PUSH
29724: LD_VAR 0 1
29728: ST_TO_ADDR
// end ;
29729: LD_VAR 0 5
29733: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29734: LD_INT 0
29736: PPUSH
29737: PPUSH
// result := 0 ;
29738: LD_ADDR_VAR 0 3
29742: PUSH
29743: LD_INT 0
29745: ST_TO_ADDR
// if not array or not value in array then
29746: LD_VAR 0 1
29750: NOT
29751: PUSH
29752: LD_VAR 0 2
29756: PUSH
29757: LD_VAR 0 1
29761: IN
29762: NOT
29763: OR
29764: IFFALSE 29768
// exit ;
29766: GO 29822
// for i = 1 to array do
29768: LD_ADDR_VAR 0 4
29772: PUSH
29773: DOUBLE
29774: LD_INT 1
29776: DEC
29777: ST_TO_ADDR
29778: LD_VAR 0 1
29782: PUSH
29783: FOR_TO
29784: IFFALSE 29820
// if value = array [ i ] then
29786: LD_VAR 0 2
29790: PUSH
29791: LD_VAR 0 1
29795: PUSH
29796: LD_VAR 0 4
29800: ARRAY
29801: EQUAL
29802: IFFALSE 29818
// begin result := i ;
29804: LD_ADDR_VAR 0 3
29808: PUSH
29809: LD_VAR 0 4
29813: ST_TO_ADDR
// exit ;
29814: POP
29815: POP
29816: GO 29822
// end ;
29818: GO 29783
29820: POP
29821: POP
// end ;
29822: LD_VAR 0 3
29826: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29827: LD_INT 0
29829: PPUSH
// vc_chassis := chassis ;
29830: LD_ADDR_OWVAR 37
29834: PUSH
29835: LD_VAR 0 1
29839: ST_TO_ADDR
// vc_engine := engine ;
29840: LD_ADDR_OWVAR 39
29844: PUSH
29845: LD_VAR 0 2
29849: ST_TO_ADDR
// vc_control := control ;
29850: LD_ADDR_OWVAR 38
29854: PUSH
29855: LD_VAR 0 3
29859: ST_TO_ADDR
// vc_weapon := weapon ;
29860: LD_ADDR_OWVAR 40
29864: PUSH
29865: LD_VAR 0 4
29869: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29870: LD_ADDR_OWVAR 41
29874: PUSH
29875: LD_VAR 0 5
29879: ST_TO_ADDR
// end ;
29880: LD_VAR 0 6
29884: RET
// export function WantPlant ( unit ) ; var task ; begin
29885: LD_INT 0
29887: PPUSH
29888: PPUSH
// result := false ;
29889: LD_ADDR_VAR 0 2
29893: PUSH
29894: LD_INT 0
29896: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29897: LD_ADDR_VAR 0 3
29901: PUSH
29902: LD_VAR 0 1
29906: PPUSH
29907: CALL_OW 437
29911: ST_TO_ADDR
// if task then
29912: LD_VAR 0 3
29916: IFFALSE 29944
// if task [ 1 ] [ 1 ] = p then
29918: LD_VAR 0 3
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PUSH
29927: LD_INT 1
29929: ARRAY
29930: PUSH
29931: LD_STRING p
29933: EQUAL
29934: IFFALSE 29944
// result := true ;
29936: LD_ADDR_VAR 0 2
29940: PUSH
29941: LD_INT 1
29943: ST_TO_ADDR
// end ;
29944: LD_VAR 0 2
29948: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29949: LD_INT 0
29951: PPUSH
29952: PPUSH
29953: PPUSH
29954: PPUSH
// if pos < 1 then
29955: LD_VAR 0 2
29959: PUSH
29960: LD_INT 1
29962: LESS
29963: IFFALSE 29967
// exit ;
29965: GO 30270
// if pos = 1 then
29967: LD_VAR 0 2
29971: PUSH
29972: LD_INT 1
29974: EQUAL
29975: IFFALSE 30008
// result := Replace ( arr , pos [ 1 ] , value ) else
29977: LD_ADDR_VAR 0 4
29981: PUSH
29982: LD_VAR 0 1
29986: PPUSH
29987: LD_VAR 0 2
29991: PUSH
29992: LD_INT 1
29994: ARRAY
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: CALL_OW 1
30005: ST_TO_ADDR
30006: GO 30270
// begin tmp := arr ;
30008: LD_ADDR_VAR 0 6
30012: PUSH
30013: LD_VAR 0 1
30017: ST_TO_ADDR
// s_arr := [ tmp ] ;
30018: LD_ADDR_VAR 0 7
30022: PUSH
30023: LD_VAR 0 6
30027: PUSH
30028: EMPTY
30029: LIST
30030: ST_TO_ADDR
// for i = 1 to pos - 1 do
30031: LD_ADDR_VAR 0 5
30035: PUSH
30036: DOUBLE
30037: LD_INT 1
30039: DEC
30040: ST_TO_ADDR
30041: LD_VAR 0 2
30045: PUSH
30046: LD_INT 1
30048: MINUS
30049: PUSH
30050: FOR_TO
30051: IFFALSE 30096
// begin tmp := tmp [ pos [ i ] ] ;
30053: LD_ADDR_VAR 0 6
30057: PUSH
30058: LD_VAR 0 6
30062: PUSH
30063: LD_VAR 0 2
30067: PUSH
30068: LD_VAR 0 5
30072: ARRAY
30073: ARRAY
30074: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30075: LD_ADDR_VAR 0 7
30079: PUSH
30080: LD_VAR 0 7
30084: PUSH
30085: LD_VAR 0 6
30089: PUSH
30090: EMPTY
30091: LIST
30092: ADD
30093: ST_TO_ADDR
// end ;
30094: GO 30050
30096: POP
30097: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30098: LD_ADDR_VAR 0 6
30102: PUSH
30103: LD_VAR 0 6
30107: PPUSH
30108: LD_VAR 0 2
30112: PUSH
30113: LD_VAR 0 2
30117: ARRAY
30118: PPUSH
30119: LD_VAR 0 3
30123: PPUSH
30124: CALL_OW 1
30128: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30129: LD_ADDR_VAR 0 7
30133: PUSH
30134: LD_VAR 0 7
30138: PPUSH
30139: LD_VAR 0 7
30143: PPUSH
30144: LD_VAR 0 6
30148: PPUSH
30149: CALL_OW 1
30153: ST_TO_ADDR
// for i = s_arr downto 2 do
30154: LD_ADDR_VAR 0 5
30158: PUSH
30159: DOUBLE
30160: LD_VAR 0 7
30164: INC
30165: ST_TO_ADDR
30166: LD_INT 2
30168: PUSH
30169: FOR_DOWNTO
30170: IFFALSE 30254
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30172: LD_ADDR_VAR 0 6
30176: PUSH
30177: LD_VAR 0 7
30181: PUSH
30182: LD_VAR 0 5
30186: PUSH
30187: LD_INT 1
30189: MINUS
30190: ARRAY
30191: PPUSH
30192: LD_VAR 0 2
30196: PUSH
30197: LD_VAR 0 5
30201: PUSH
30202: LD_INT 1
30204: MINUS
30205: ARRAY
30206: PPUSH
30207: LD_VAR 0 7
30211: PUSH
30212: LD_VAR 0 5
30216: ARRAY
30217: PPUSH
30218: CALL_OW 1
30222: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30223: LD_ADDR_VAR 0 7
30227: PUSH
30228: LD_VAR 0 7
30232: PPUSH
30233: LD_VAR 0 5
30237: PUSH
30238: LD_INT 1
30240: MINUS
30241: PPUSH
30242: LD_VAR 0 6
30246: PPUSH
30247: CALL_OW 1
30251: ST_TO_ADDR
// end ;
30252: GO 30169
30254: POP
30255: POP
// result := s_arr [ 1 ] ;
30256: LD_ADDR_VAR 0 4
30260: PUSH
30261: LD_VAR 0 7
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: ST_TO_ADDR
// end ; end ;
30270: LD_VAR 0 4
30274: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30275: LD_INT 0
30277: PPUSH
30278: PPUSH
// if not list then
30279: LD_VAR 0 1
30283: NOT
30284: IFFALSE 30288
// exit ;
30286: GO 30379
// i := list [ pos1 ] ;
30288: LD_ADDR_VAR 0 5
30292: PUSH
30293: LD_VAR 0 1
30297: PUSH
30298: LD_VAR 0 2
30302: ARRAY
30303: ST_TO_ADDR
// if not i then
30304: LD_VAR 0 5
30308: NOT
30309: IFFALSE 30313
// exit ;
30311: GO 30379
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30313: LD_ADDR_VAR 0 1
30317: PUSH
30318: LD_VAR 0 1
30322: PPUSH
30323: LD_VAR 0 2
30327: PPUSH
30328: LD_VAR 0 1
30332: PUSH
30333: LD_VAR 0 3
30337: ARRAY
30338: PPUSH
30339: CALL_OW 1
30343: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30344: LD_ADDR_VAR 0 1
30348: PUSH
30349: LD_VAR 0 1
30353: PPUSH
30354: LD_VAR 0 3
30358: PPUSH
30359: LD_VAR 0 5
30363: PPUSH
30364: CALL_OW 1
30368: ST_TO_ADDR
// result := list ;
30369: LD_ADDR_VAR 0 4
30373: PUSH
30374: LD_VAR 0 1
30378: ST_TO_ADDR
// end ;
30379: LD_VAR 0 4
30383: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30384: LD_INT 0
30386: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30387: LD_ADDR_VAR 0 5
30391: PUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL_OW 250
30401: PPUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 251
30411: PPUSH
30412: LD_VAR 0 2
30416: PPUSH
30417: LD_VAR 0 3
30421: PPUSH
30422: LD_VAR 0 4
30426: PPUSH
30427: CALL 30437 0 5
30431: ST_TO_ADDR
// end ;
30432: LD_VAR 0 5
30436: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30437: LD_INT 0
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
// if not list then
30443: LD_VAR 0 3
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30840
// result := [ ] ;
30452: LD_ADDR_VAR 0 6
30456: PUSH
30457: EMPTY
30458: ST_TO_ADDR
// for i in list do
30459: LD_ADDR_VAR 0 7
30463: PUSH
30464: LD_VAR 0 3
30468: PUSH
30469: FOR_IN
30470: IFFALSE 30672
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30472: LD_ADDR_VAR 0 9
30476: PUSH
30477: LD_VAR 0 7
30481: PPUSH
30482: LD_VAR 0 1
30486: PPUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL_OW 297
30496: ST_TO_ADDR
// if not result then
30497: LD_VAR 0 6
30501: NOT
30502: IFFALSE 30528
// result := [ [ i , tmp ] ] else
30504: LD_ADDR_VAR 0 6
30508: PUSH
30509: LD_VAR 0 7
30513: PUSH
30514: LD_VAR 0 9
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: ST_TO_ADDR
30526: GO 30670
// begin if result [ result ] [ 2 ] < tmp then
30528: LD_VAR 0 6
30532: PUSH
30533: LD_VAR 0 6
30537: ARRAY
30538: PUSH
30539: LD_INT 2
30541: ARRAY
30542: PUSH
30543: LD_VAR 0 9
30547: LESS
30548: IFFALSE 30590
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30550: LD_ADDR_VAR 0 6
30554: PUSH
30555: LD_VAR 0 6
30559: PPUSH
30560: LD_VAR 0 6
30564: PUSH
30565: LD_INT 1
30567: PLUS
30568: PPUSH
30569: LD_VAR 0 7
30573: PUSH
30574: LD_VAR 0 9
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 2
30587: ST_TO_ADDR
30588: GO 30670
// for j = 1 to result do
30590: LD_ADDR_VAR 0 8
30594: PUSH
30595: DOUBLE
30596: LD_INT 1
30598: DEC
30599: ST_TO_ADDR
30600: LD_VAR 0 6
30604: PUSH
30605: FOR_TO
30606: IFFALSE 30668
// begin if tmp < result [ j ] [ 2 ] then
30608: LD_VAR 0 9
30612: PUSH
30613: LD_VAR 0 6
30617: PUSH
30618: LD_VAR 0 8
30622: ARRAY
30623: PUSH
30624: LD_INT 2
30626: ARRAY
30627: LESS
30628: IFFALSE 30666
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30630: LD_ADDR_VAR 0 6
30634: PUSH
30635: LD_VAR 0 6
30639: PPUSH
30640: LD_VAR 0 8
30644: PPUSH
30645: LD_VAR 0 7
30649: PUSH
30650: LD_VAR 0 9
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PPUSH
30659: CALL_OW 2
30663: ST_TO_ADDR
// break ;
30664: GO 30668
// end ; end ;
30666: GO 30605
30668: POP
30669: POP
// end ; end ;
30670: GO 30469
30672: POP
30673: POP
// if result and not asc then
30674: LD_VAR 0 6
30678: PUSH
30679: LD_VAR 0 4
30683: NOT
30684: AND
30685: IFFALSE 30760
// begin tmp := result ;
30687: LD_ADDR_VAR 0 9
30691: PUSH
30692: LD_VAR 0 6
30696: ST_TO_ADDR
// for i = tmp downto 1 do
30697: LD_ADDR_VAR 0 7
30701: PUSH
30702: DOUBLE
30703: LD_VAR 0 9
30707: INC
30708: ST_TO_ADDR
30709: LD_INT 1
30711: PUSH
30712: FOR_DOWNTO
30713: IFFALSE 30758
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30715: LD_ADDR_VAR 0 6
30719: PUSH
30720: LD_VAR 0 6
30724: PPUSH
30725: LD_VAR 0 9
30729: PUSH
30730: LD_VAR 0 7
30734: MINUS
30735: PUSH
30736: LD_INT 1
30738: PLUS
30739: PPUSH
30740: LD_VAR 0 9
30744: PUSH
30745: LD_VAR 0 7
30749: ARRAY
30750: PPUSH
30751: CALL_OW 1
30755: ST_TO_ADDR
30756: GO 30712
30758: POP
30759: POP
// end ; tmp := [ ] ;
30760: LD_ADDR_VAR 0 9
30764: PUSH
30765: EMPTY
30766: ST_TO_ADDR
// if mode then
30767: LD_VAR 0 5
30771: IFFALSE 30840
// begin for i = 1 to result do
30773: LD_ADDR_VAR 0 7
30777: PUSH
30778: DOUBLE
30779: LD_INT 1
30781: DEC
30782: ST_TO_ADDR
30783: LD_VAR 0 6
30787: PUSH
30788: FOR_TO
30789: IFFALSE 30828
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30791: LD_ADDR_VAR 0 9
30795: PUSH
30796: LD_VAR 0 9
30800: PPUSH
30801: LD_VAR 0 7
30805: PPUSH
30806: LD_VAR 0 6
30810: PUSH
30811: LD_VAR 0 7
30815: ARRAY
30816: PUSH
30817: LD_INT 1
30819: ARRAY
30820: PPUSH
30821: CALL_OW 1
30825: ST_TO_ADDR
30826: GO 30788
30828: POP
30829: POP
// result := tmp ;
30830: LD_ADDR_VAR 0 6
30834: PUSH
30835: LD_VAR 0 9
30839: ST_TO_ADDR
// end ; end ;
30840: LD_VAR 0 6
30844: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30845: LD_INT 0
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30853: LD_ADDR_VAR 0 5
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: ST_TO_ADDR
// if not x or not y then
30875: LD_VAR 0 2
30879: NOT
30880: PUSH
30881: LD_VAR 0 3
30885: NOT
30886: OR
30887: IFFALSE 30891
// exit ;
30889: GO 32537
// if not range then
30891: LD_VAR 0 4
30895: NOT
30896: IFFALSE 30906
// range := 10 ;
30898: LD_ADDR_VAR 0 4
30902: PUSH
30903: LD_INT 10
30905: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30906: LD_ADDR_VAR 0 8
30910: PUSH
30911: LD_INT 81
30913: PUSH
30914: LD_VAR 0 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 92
30925: PUSH
30926: LD_VAR 0 2
30930: PUSH
30931: LD_VAR 0 3
30935: PUSH
30936: LD_VAR 0 4
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 69
30973: ST_TO_ADDR
// if not tmp then
30974: LD_VAR 0 8
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 32537
// for i in tmp do
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_VAR 0 8
30992: PUSH
30993: FOR_IN
30994: IFFALSE 32512
// begin points := [ 0 , 0 , 0 ] ;
30996: LD_ADDR_VAR 0 9
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: ST_TO_ADDR
// bpoints := 1 ;
31015: LD_ADDR_VAR 0 10
31019: PUSH
31020: LD_INT 1
31022: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31023: LD_VAR 0 6
31027: PPUSH
31028: CALL_OW 247
31032: PUSH
31033: LD_INT 1
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31619
31041: POP
// begin if GetClass ( i ) = 1 then
31042: LD_VAR 0 6
31046: PPUSH
31047: CALL_OW 257
31051: PUSH
31052: LD_INT 1
31054: EQUAL
31055: IFFALSE 31076
// points := [ 10 , 5 , 3 ] ;
31057: LD_ADDR_VAR 0 9
31061: PUSH
31062: LD_INT 10
31064: PUSH
31065: LD_INT 5
31067: PUSH
31068: LD_INT 3
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31076: LD_VAR 0 6
31080: PPUSH
31081: CALL_OW 257
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: LD_INT 4
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: IN
31100: IFFALSE 31121
// points := [ 3 , 2 , 1 ] ;
31102: LD_ADDR_VAR 0 9
31106: PUSH
31107: LD_INT 3
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31121: LD_VAR 0 6
31125: PPUSH
31126: CALL_OW 257
31130: PUSH
31131: LD_INT 5
31133: EQUAL
31134: IFFALSE 31155
// points := [ 130 , 5 , 2 ] ;
31136: LD_ADDR_VAR 0 9
31140: PUSH
31141: LD_INT 130
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31155: LD_VAR 0 6
31159: PPUSH
31160: CALL_OW 257
31164: PUSH
31165: LD_INT 8
31167: EQUAL
31168: IFFALSE 31189
// points := [ 35 , 35 , 30 ] ;
31170: LD_ADDR_VAR 0 9
31174: PUSH
31175: LD_INT 35
31177: PUSH
31178: LD_INT 35
31180: PUSH
31181: LD_INT 30
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31189: LD_VAR 0 6
31193: PPUSH
31194: CALL_OW 257
31198: PUSH
31199: LD_INT 9
31201: EQUAL
31202: IFFALSE 31223
// points := [ 20 , 55 , 40 ] ;
31204: LD_ADDR_VAR 0 9
31208: PUSH
31209: LD_INT 20
31211: PUSH
31212: LD_INT 55
31214: PUSH
31215: LD_INT 40
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31223: LD_VAR 0 6
31227: PPUSH
31228: CALL_OW 257
31232: PUSH
31233: LD_INT 12
31235: PUSH
31236: LD_INT 16
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: IN
31243: IFFALSE 31264
// points := [ 5 , 3 , 2 ] ;
31245: LD_ADDR_VAR 0 9
31249: PUSH
31250: LD_INT 5
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: LD_INT 2
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31264: LD_VAR 0 6
31268: PPUSH
31269: CALL_OW 257
31273: PUSH
31274: LD_INT 17
31276: EQUAL
31277: IFFALSE 31298
// points := [ 100 , 50 , 75 ] ;
31279: LD_ADDR_VAR 0 9
31283: PUSH
31284: LD_INT 100
31286: PUSH
31287: LD_INT 50
31289: PUSH
31290: LD_INT 75
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31298: LD_VAR 0 6
31302: PPUSH
31303: CALL_OW 257
31307: PUSH
31308: LD_INT 15
31310: EQUAL
31311: IFFALSE 31332
// points := [ 10 , 5 , 3 ] ;
31313: LD_ADDR_VAR 0 9
31317: PUSH
31318: LD_INT 10
31320: PUSH
31321: LD_INT 5
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31332: LD_VAR 0 6
31336: PPUSH
31337: CALL_OW 257
31341: PUSH
31342: LD_INT 14
31344: EQUAL
31345: IFFALSE 31366
// points := [ 10 , 0 , 0 ] ;
31347: LD_ADDR_VAR 0 9
31351: PUSH
31352: LD_INT 10
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31366: LD_VAR 0 6
31370: PPUSH
31371: CALL_OW 257
31375: PUSH
31376: LD_INT 11
31378: EQUAL
31379: IFFALSE 31400
// points := [ 30 , 10 , 5 ] ;
31381: LD_ADDR_VAR 0 9
31385: PUSH
31386: LD_INT 30
31388: PUSH
31389: LD_INT 10
31391: PUSH
31392: LD_INT 5
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31400: LD_VAR 0 1
31404: PPUSH
31405: LD_INT 5
31407: PPUSH
31408: CALL_OW 321
31412: PUSH
31413: LD_INT 2
31415: EQUAL
31416: IFFALSE 31433
// bpoints := bpoints * 1.8 ;
31418: LD_ADDR_VAR 0 10
31422: PUSH
31423: LD_VAR 0 10
31427: PUSH
31428: LD_REAL  1.80000000000000E+0000
31431: MUL
31432: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31433: LD_VAR 0 6
31437: PPUSH
31438: CALL_OW 257
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: LD_INT 4
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: IN
31461: PUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: LD_INT 51
31469: PPUSH
31470: CALL_OW 321
31474: PUSH
31475: LD_INT 2
31477: EQUAL
31478: AND
31479: IFFALSE 31496
// bpoints := bpoints * 1.2 ;
31481: LD_ADDR_VAR 0 10
31485: PUSH
31486: LD_VAR 0 10
31490: PUSH
31491: LD_REAL  1.20000000000000E+0000
31494: MUL
31495: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31496: LD_VAR 0 6
31500: PPUSH
31501: CALL_OW 257
31505: PUSH
31506: LD_INT 5
31508: PUSH
31509: LD_INT 7
31511: PUSH
31512: LD_INT 9
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: IN
31520: PUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: LD_INT 52
31528: PPUSH
31529: CALL_OW 321
31533: PUSH
31534: LD_INT 2
31536: EQUAL
31537: AND
31538: IFFALSE 31555
// bpoints := bpoints * 1.5 ;
31540: LD_ADDR_VAR 0 10
31544: PUSH
31545: LD_VAR 0 10
31549: PUSH
31550: LD_REAL  1.50000000000000E+0000
31553: MUL
31554: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31555: LD_VAR 0 1
31559: PPUSH
31560: LD_INT 66
31562: PPUSH
31563: CALL_OW 321
31567: PUSH
31568: LD_INT 2
31570: EQUAL
31571: IFFALSE 31588
// bpoints := bpoints * 1.1 ;
31573: LD_ADDR_VAR 0 10
31577: PUSH
31578: LD_VAR 0 10
31582: PUSH
31583: LD_REAL  1.10000000000000E+0000
31586: MUL
31587: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31588: LD_ADDR_VAR 0 10
31592: PUSH
31593: LD_VAR 0 10
31597: PUSH
31598: LD_VAR 0 6
31602: PPUSH
31603: LD_INT 1
31605: PPUSH
31606: CALL_OW 259
31610: PUSH
31611: LD_REAL  1.15000000000000E+0000
31614: MUL
31615: MUL
31616: ST_TO_ADDR
// end ; unit_vehicle :
31617: GO 32441
31619: LD_INT 2
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 32429
31627: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31628: LD_VAR 0 6
31632: PPUSH
31633: CALL_OW 264
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 42
31643: PUSH
31644: LD_INT 24
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: IN
31652: IFFALSE 31673
// points := [ 25 , 5 , 3 ] ;
31654: LD_ADDR_VAR 0 9
31658: PUSH
31659: LD_INT 25
31661: PUSH
31662: LD_INT 5
31664: PUSH
31665: LD_INT 3
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31673: LD_VAR 0 6
31677: PPUSH
31678: CALL_OW 264
31682: PUSH
31683: LD_INT 4
31685: PUSH
31686: LD_INT 43
31688: PUSH
31689: LD_INT 25
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: IN
31697: IFFALSE 31718
// points := [ 40 , 15 , 5 ] ;
31699: LD_ADDR_VAR 0 9
31703: PUSH
31704: LD_INT 40
31706: PUSH
31707: LD_INT 15
31709: PUSH
31710: LD_INT 5
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31718: LD_VAR 0 6
31722: PPUSH
31723: CALL_OW 264
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 23
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: IN
31738: IFFALSE 31759
// points := [ 7 , 25 , 8 ] ;
31740: LD_ADDR_VAR 0 9
31744: PUSH
31745: LD_INT 7
31747: PUSH
31748: LD_INT 25
31750: PUSH
31751: LD_INT 8
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31759: LD_VAR 0 6
31763: PPUSH
31764: CALL_OW 264
31768: PUSH
31769: LD_INT 5
31771: PUSH
31772: LD_INT 27
31774: PUSH
31775: LD_INT 44
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: IN
31783: IFFALSE 31804
// points := [ 14 , 50 , 16 ] ;
31785: LD_ADDR_VAR 0 9
31789: PUSH
31790: LD_INT 14
31792: PUSH
31793: LD_INT 50
31795: PUSH
31796: LD_INT 16
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31804: LD_VAR 0 6
31808: PPUSH
31809: CALL_OW 264
31813: PUSH
31814: LD_INT 6
31816: PUSH
31817: LD_INT 46
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: IN
31824: IFFALSE 31845
// points := [ 32 , 120 , 70 ] ;
31826: LD_ADDR_VAR 0 9
31830: PUSH
31831: LD_INT 32
31833: PUSH
31834: LD_INT 120
31836: PUSH
31837: LD_INT 70
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31845: LD_VAR 0 6
31849: PPUSH
31850: CALL_OW 264
31854: PUSH
31855: LD_INT 7
31857: PUSH
31858: LD_INT 28
31860: PUSH
31861: LD_INT 45
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: IN
31869: IFFALSE 31890
// points := [ 35 , 20 , 45 ] ;
31871: LD_ADDR_VAR 0 9
31875: PUSH
31876: LD_INT 35
31878: PUSH
31879: LD_INT 20
31881: PUSH
31882: LD_INT 45
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31890: LD_VAR 0 6
31894: PPUSH
31895: CALL_OW 264
31899: PUSH
31900: LD_INT 47
31902: PUSH
31903: EMPTY
31904: LIST
31905: IN
31906: IFFALSE 31927
// points := [ 67 , 45 , 75 ] ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_INT 67
31915: PUSH
31916: LD_INT 45
31918: PUSH
31919: LD_INT 75
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31927: LD_VAR 0 6
31931: PPUSH
31932: CALL_OW 264
31936: PUSH
31937: LD_INT 26
31939: PUSH
31940: EMPTY
31941: LIST
31942: IN
31943: IFFALSE 31964
// points := [ 120 , 30 , 80 ] ;
31945: LD_ADDR_VAR 0 9
31949: PUSH
31950: LD_INT 120
31952: PUSH
31953: LD_INT 30
31955: PUSH
31956: LD_INT 80
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31964: LD_VAR 0 6
31968: PPUSH
31969: CALL_OW 264
31973: PUSH
31974: LD_INT 22
31976: PUSH
31977: EMPTY
31978: LIST
31979: IN
31980: IFFALSE 32001
// points := [ 40 , 1 , 1 ] ;
31982: LD_ADDR_VAR 0 9
31986: PUSH
31987: LD_INT 40
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32001: LD_VAR 0 6
32005: PPUSH
32006: CALL_OW 264
32010: PUSH
32011: LD_INT 29
32013: PUSH
32014: EMPTY
32015: LIST
32016: IN
32017: IFFALSE 32038
// points := [ 70 , 200 , 400 ] ;
32019: LD_ADDR_VAR 0 9
32023: PUSH
32024: LD_INT 70
32026: PUSH
32027: LD_INT 200
32029: PUSH
32030: LD_INT 400
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32038: LD_VAR 0 6
32042: PPUSH
32043: CALL_OW 264
32047: PUSH
32048: LD_INT 14
32050: PUSH
32051: LD_INT 53
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: IN
32058: IFFALSE 32079
// points := [ 40 , 10 , 20 ] ;
32060: LD_ADDR_VAR 0 9
32064: PUSH
32065: LD_INT 40
32067: PUSH
32068: LD_INT 10
32070: PUSH
32071: LD_INT 20
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 264
32088: PUSH
32089: LD_INT 9
32091: PUSH
32092: EMPTY
32093: LIST
32094: IN
32095: IFFALSE 32116
// points := [ 5 , 70 , 20 ] ;
32097: LD_ADDR_VAR 0 9
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: LD_INT 70
32107: PUSH
32108: LD_INT 20
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32116: LD_VAR 0 6
32120: PPUSH
32121: CALL_OW 264
32125: PUSH
32126: LD_INT 10
32128: PUSH
32129: EMPTY
32130: LIST
32131: IN
32132: IFFALSE 32153
// points := [ 35 , 110 , 70 ] ;
32134: LD_ADDR_VAR 0 9
32138: PUSH
32139: LD_INT 35
32141: PUSH
32142: LD_INT 110
32144: PUSH
32145: LD_INT 70
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32153: LD_VAR 0 6
32157: PPUSH
32158: CALL_OW 265
32162: PUSH
32163: LD_INT 25
32165: EQUAL
32166: IFFALSE 32187
// points := [ 80 , 65 , 100 ] ;
32168: LD_ADDR_VAR 0 9
32172: PUSH
32173: LD_INT 80
32175: PUSH
32176: LD_INT 65
32178: PUSH
32179: LD_INT 100
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32187: LD_VAR 0 6
32191: PPUSH
32192: CALL_OW 263
32196: PUSH
32197: LD_INT 1
32199: EQUAL
32200: IFFALSE 32235
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32202: LD_ADDR_VAR 0 10
32206: PUSH
32207: LD_VAR 0 10
32211: PUSH
32212: LD_VAR 0 6
32216: PPUSH
32217: CALL_OW 311
32221: PPUSH
32222: LD_INT 3
32224: PPUSH
32225: CALL_OW 259
32229: PUSH
32230: LD_INT 4
32232: MUL
32233: MUL
32234: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32235: LD_VAR 0 6
32239: PPUSH
32240: CALL_OW 263
32244: PUSH
32245: LD_INT 2
32247: EQUAL
32248: IFFALSE 32299
// begin j := IsControledBy ( i ) ;
32250: LD_ADDR_VAR 0 7
32254: PUSH
32255: LD_VAR 0 6
32259: PPUSH
32260: CALL_OW 312
32264: ST_TO_ADDR
// if j then
32265: LD_VAR 0 7
32269: IFFALSE 32299
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32271: LD_ADDR_VAR 0 10
32275: PUSH
32276: LD_VAR 0 10
32280: PUSH
32281: LD_VAR 0 7
32285: PPUSH
32286: LD_INT 3
32288: PPUSH
32289: CALL_OW 259
32293: PUSH
32294: LD_INT 3
32296: MUL
32297: MUL
32298: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32299: LD_VAR 0 6
32303: PPUSH
32304: CALL_OW 264
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 6
32314: PUSH
32315: LD_INT 46
32317: PUSH
32318: LD_INT 44
32320: PUSH
32321: LD_INT 47
32323: PUSH
32324: LD_INT 45
32326: PUSH
32327: LD_INT 28
32329: PUSH
32330: LD_INT 7
32332: PUSH
32333: LD_INT 27
32335: PUSH
32336: LD_INT 29
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: IN
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: LD_INT 52
32359: PPUSH
32360: CALL_OW 321
32364: PUSH
32365: LD_INT 2
32367: EQUAL
32368: AND
32369: IFFALSE 32386
// bpoints := bpoints * 1.2 ;
32371: LD_ADDR_VAR 0 10
32375: PUSH
32376: LD_VAR 0 10
32380: PUSH
32381: LD_REAL  1.20000000000000E+0000
32384: MUL
32385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32386: LD_VAR 0 6
32390: PPUSH
32391: CALL_OW 264
32395: PUSH
32396: LD_INT 6
32398: PUSH
32399: LD_INT 46
32401: PUSH
32402: LD_INT 47
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: IN
32410: IFFALSE 32427
// bpoints := bpoints * 1.2 ;
32412: LD_ADDR_VAR 0 10
32416: PUSH
32417: LD_VAR 0 10
32421: PUSH
32422: LD_REAL  1.20000000000000E+0000
32425: MUL
32426: ST_TO_ADDR
// end ; unit_building :
32427: GO 32441
32429: LD_INT 3
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32440
32437: POP
// ; end ;
32438: GO 32441
32440: POP
// for j = 1 to 3 do
32441: LD_ADDR_VAR 0 7
32445: PUSH
32446: DOUBLE
32447: LD_INT 1
32449: DEC
32450: ST_TO_ADDR
32451: LD_INT 3
32453: PUSH
32454: FOR_TO
32455: IFFALSE 32508
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32457: LD_ADDR_VAR 0 5
32461: PUSH
32462: LD_VAR 0 5
32466: PPUSH
32467: LD_VAR 0 7
32471: PPUSH
32472: LD_VAR 0 5
32476: PUSH
32477: LD_VAR 0 7
32481: ARRAY
32482: PUSH
32483: LD_VAR 0 9
32487: PUSH
32488: LD_VAR 0 7
32492: ARRAY
32493: PUSH
32494: LD_VAR 0 10
32498: MUL
32499: PLUS
32500: PPUSH
32501: CALL_OW 1
32505: ST_TO_ADDR
32506: GO 32454
32508: POP
32509: POP
// end ;
32510: GO 30993
32512: POP
32513: POP
// result := Replace ( result , 4 , tmp ) ;
32514: LD_ADDR_VAR 0 5
32518: PUSH
32519: LD_VAR 0 5
32523: PPUSH
32524: LD_INT 4
32526: PPUSH
32527: LD_VAR 0 8
32531: PPUSH
32532: CALL_OW 1
32536: ST_TO_ADDR
// end ;
32537: LD_VAR 0 5
32541: RET
// export function DangerAtRange ( unit , range ) ; begin
32542: LD_INT 0
32544: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 255
32559: PPUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 250
32569: PPUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 251
32579: PPUSH
32580: LD_VAR 0 2
32584: PPUSH
32585: CALL 30845 0 4
32589: ST_TO_ADDR
// end ;
32590: LD_VAR 0 3
32594: RET
// export function DangerInArea ( side , area ) ; begin
32595: LD_INT 0
32597: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: LD_INT 81
32610: PUSH
32611: LD_VAR 0 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PPUSH
32620: CALL_OW 70
32624: ST_TO_ADDR
// end ;
32625: LD_VAR 0 3
32629: RET
// export function IsExtension ( b ) ; begin
32630: LD_INT 0
32632: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32633: LD_ADDR_VAR 0 2
32637: PUSH
32638: LD_VAR 0 1
32642: PUSH
32643: LD_INT 23
32645: PUSH
32646: LD_INT 20
32648: PUSH
32649: LD_INT 22
32651: PUSH
32652: LD_INT 17
32654: PUSH
32655: LD_INT 24
32657: PUSH
32658: LD_INT 21
32660: PUSH
32661: LD_INT 19
32663: PUSH
32664: LD_INT 16
32666: PUSH
32667: LD_INT 25
32669: PUSH
32670: LD_INT 18
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: IN
32685: ST_TO_ADDR
// end ;
32686: LD_VAR 0 2
32690: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32691: LD_INT 0
32693: PPUSH
32694: PPUSH
32695: PPUSH
// result := [ ] ;
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: EMPTY
32702: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32703: LD_ADDR_VAR 0 4
32707: PUSH
32708: LD_VAR 0 2
32712: PPUSH
32713: LD_INT 21
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PPUSH
32723: CALL_OW 70
32727: ST_TO_ADDR
// if not tmp then
32728: LD_VAR 0 4
32732: NOT
32733: IFFALSE 32737
// exit ;
32735: GO 32795
// for i in tmp do
32737: LD_ADDR_VAR 0 5
32741: PUSH
32742: LD_VAR 0 4
32746: PUSH
32747: FOR_IN
32748: IFFALSE 32783
// if GetBase ( i ) <> base then
32750: LD_VAR 0 5
32754: PPUSH
32755: CALL_OW 274
32759: PUSH
32760: LD_VAR 0 1
32764: NONEQUAL
32765: IFFALSE 32781
// ComLinkToBase ( base , i ) ;
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: CALL_OW 169
32781: GO 32747
32783: POP
32784: POP
// result := tmp ;
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_VAR 0 4
32794: ST_TO_ADDR
// end ;
32795: LD_VAR 0 3
32799: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
// if BuildingStatus ( b ) = bs_build then
32804: LD_VAR 0 2
32808: PPUSH
32809: CALL_OW 461
32813: PUSH
32814: LD_INT 1
32816: EQUAL
32817: IFFALSE 32877
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32819: LD_VAR 0 1
32823: PPUSH
32824: LD_STRING h
32826: PUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 250
32836: PUSH
32837: LD_VAR 0 2
32841: PPUSH
32842: CALL_OW 251
32846: PUSH
32847: LD_VAR 0 2
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: PPUSH
32873: CALL_OW 446
// end ;
32877: LD_VAR 0 3
32881: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32882: LD_INT 0
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32890: LD_VAR 0 1
32894: NOT
32895: PUSH
32896: LD_VAR 0 1
32900: PPUSH
32901: CALL_OW 263
32905: PUSH
32906: LD_INT 2
32908: EQUAL
32909: NOT
32910: OR
32911: IFFALSE 32915
// exit ;
32913: GO 33231
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32915: LD_ADDR_VAR 0 6
32919: PUSH
32920: LD_INT 22
32922: PUSH
32923: LD_VAR 0 1
32927: PPUSH
32928: CALL_OW 255
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: LD_INT 36
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 34
32952: PUSH
32953: LD_INT 31
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PPUSH
32969: CALL_OW 69
32973: ST_TO_ADDR
// if not tmp then
32974: LD_VAR 0 6
32978: NOT
32979: IFFALSE 32983
// exit ;
32981: GO 33231
// result := [ ] ;
32983: LD_ADDR_VAR 0 2
32987: PUSH
32988: EMPTY
32989: ST_TO_ADDR
// for i in tmp do
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: LD_VAR 0 6
32999: PUSH
33000: FOR_IN
33001: IFFALSE 33072
// begin t := UnitsInside ( i ) ;
33003: LD_ADDR_VAR 0 4
33007: PUSH
33008: LD_VAR 0 3
33012: PPUSH
33013: CALL_OW 313
33017: ST_TO_ADDR
// if t then
33018: LD_VAR 0 4
33022: IFFALSE 33070
// for j in t do
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 4
33033: PUSH
33034: FOR_IN
33035: IFFALSE 33068
// result := Insert ( result , result + 1 , j ) ;
33037: LD_ADDR_VAR 0 2
33041: PUSH
33042: LD_VAR 0 2
33046: PPUSH
33047: LD_VAR 0 2
33051: PUSH
33052: LD_INT 1
33054: PLUS
33055: PPUSH
33056: LD_VAR 0 7
33060: PPUSH
33061: CALL_OW 2
33065: ST_TO_ADDR
33066: GO 33034
33068: POP
33069: POP
// end ;
33070: GO 33000
33072: POP
33073: POP
// if not result then
33074: LD_VAR 0 2
33078: NOT
33079: IFFALSE 33083
// exit ;
33081: GO 33231
// mech := result [ 1 ] ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_VAR 0 2
33092: PUSH
33093: LD_INT 1
33095: ARRAY
33096: ST_TO_ADDR
// if result > 1 then
33097: LD_VAR 0 2
33101: PUSH
33102: LD_INT 1
33104: GREATER
33105: IFFALSE 33217
// for i = 2 to result do
33107: LD_ADDR_VAR 0 3
33111: PUSH
33112: DOUBLE
33113: LD_INT 2
33115: DEC
33116: ST_TO_ADDR
33117: LD_VAR 0 2
33121: PUSH
33122: FOR_TO
33123: IFFALSE 33215
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33125: LD_ADDR_VAR 0 4
33129: PUSH
33130: LD_VAR 0 2
33134: PUSH
33135: LD_VAR 0 3
33139: ARRAY
33140: PPUSH
33141: LD_INT 3
33143: PPUSH
33144: CALL_OW 259
33148: PUSH
33149: LD_VAR 0 2
33153: PUSH
33154: LD_VAR 0 3
33158: ARRAY
33159: PPUSH
33160: CALL_OW 432
33164: MINUS
33165: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33166: LD_VAR 0 4
33170: PUSH
33171: LD_VAR 0 5
33175: PPUSH
33176: LD_INT 3
33178: PPUSH
33179: CALL_OW 259
33183: PUSH
33184: LD_VAR 0 5
33188: PPUSH
33189: CALL_OW 432
33193: MINUS
33194: GREATEREQUAL
33195: IFFALSE 33213
// mech := result [ i ] ;
33197: LD_ADDR_VAR 0 5
33201: PUSH
33202: LD_VAR 0 2
33206: PUSH
33207: LD_VAR 0 3
33211: ARRAY
33212: ST_TO_ADDR
// end ;
33213: GO 33122
33215: POP
33216: POP
// ComLinkTo ( vehicle , mech ) ;
33217: LD_VAR 0 1
33221: PPUSH
33222: LD_VAR 0 5
33226: PPUSH
33227: CALL_OW 135
// end ;
33231: LD_VAR 0 2
33235: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
// result := [ ] ;
33251: LD_ADDR_VAR 0 7
33255: PUSH
33256: EMPTY
33257: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 266
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: IN
33278: NOT
33279: IFFALSE 33283
// exit ;
33281: GO 34914
// if name then
33283: LD_VAR 0 3
33287: IFFALSE 33303
// SetBName ( base_dep , name ) ;
33289: LD_VAR 0 1
33293: PPUSH
33294: LD_VAR 0 3
33298: PPUSH
33299: CALL_OW 500
// base := GetBase ( base_dep ) ;
33303: LD_ADDR_VAR 0 15
33307: PUSH
33308: LD_VAR 0 1
33312: PPUSH
33313: CALL_OW 274
33317: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33318: LD_ADDR_VAR 0 16
33322: PUSH
33323: LD_VAR 0 1
33327: PPUSH
33328: CALL_OW 255
33332: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33333: LD_ADDR_VAR 0 17
33337: PUSH
33338: LD_VAR 0 1
33342: PPUSH
33343: CALL_OW 248
33347: ST_TO_ADDR
// if sources then
33348: LD_VAR 0 5
33352: IFFALSE 33399
// for i = 1 to 3 do
33354: LD_ADDR_VAR 0 8
33358: PUSH
33359: DOUBLE
33360: LD_INT 1
33362: DEC
33363: ST_TO_ADDR
33364: LD_INT 3
33366: PUSH
33367: FOR_TO
33368: IFFALSE 33397
// AddResourceType ( base , i , sources [ i ] ) ;
33370: LD_VAR 0 15
33374: PPUSH
33375: LD_VAR 0 8
33379: PPUSH
33380: LD_VAR 0 5
33384: PUSH
33385: LD_VAR 0 8
33389: ARRAY
33390: PPUSH
33391: CALL_OW 276
33395: GO 33367
33397: POP
33398: POP
// buildings := GetBaseBuildings ( base , area ) ;
33399: LD_ADDR_VAR 0 18
33403: PUSH
33404: LD_VAR 0 15
33408: PPUSH
33409: LD_VAR 0 2
33413: PPUSH
33414: CALL 32691 0 2
33418: ST_TO_ADDR
// InitHc ;
33419: CALL_OW 19
// InitUc ;
33423: CALL_OW 18
// uc_side := side ;
33427: LD_ADDR_OWVAR 20
33431: PUSH
33432: LD_VAR 0 16
33436: ST_TO_ADDR
// uc_nation := nation ;
33437: LD_ADDR_OWVAR 21
33441: PUSH
33442: LD_VAR 0 17
33446: ST_TO_ADDR
// if buildings then
33447: LD_VAR 0 18
33451: IFFALSE 34773
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33453: LD_ADDR_VAR 0 19
33457: PUSH
33458: LD_VAR 0 18
33462: PPUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 30
33468: PUSH
33469: LD_INT 29
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_INT 30
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: PPUSH
33491: CALL_OW 72
33495: ST_TO_ADDR
// if tmp then
33496: LD_VAR 0 19
33500: IFFALSE 33548
// for i in tmp do
33502: LD_ADDR_VAR 0 8
33506: PUSH
33507: LD_VAR 0 19
33511: PUSH
33512: FOR_IN
33513: IFFALSE 33546
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33515: LD_VAR 0 8
33519: PPUSH
33520: CALL_OW 250
33524: PPUSH
33525: LD_VAR 0 8
33529: PPUSH
33530: CALL_OW 251
33534: PPUSH
33535: LD_VAR 0 16
33539: PPUSH
33540: CALL_OW 441
33544: GO 33512
33546: POP
33547: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33548: LD_VAR 0 18
33552: PPUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 30
33558: PUSH
33559: LD_INT 32
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 30
33568: PUSH
33569: LD_INT 33
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: PPUSH
33581: CALL_OW 72
33585: IFFALSE 33673
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33587: LD_ADDR_VAR 0 8
33591: PUSH
33592: LD_VAR 0 18
33596: PPUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 30
33602: PUSH
33603: LD_INT 32
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 30
33612: PUSH
33613: LD_INT 33
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 72
33629: PUSH
33630: FOR_IN
33631: IFFALSE 33671
// begin if not GetBWeapon ( i ) then
33633: LD_VAR 0 8
33637: PPUSH
33638: CALL_OW 269
33642: NOT
33643: IFFALSE 33669
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33645: LD_VAR 0 8
33649: PPUSH
33650: LD_VAR 0 8
33654: PPUSH
33655: LD_VAR 0 2
33659: PPUSH
33660: CALL 34919 0 2
33664: PPUSH
33665: CALL_OW 431
// end ;
33669: GO 33630
33671: POP
33672: POP
// end ; for i = 1 to personel do
33673: LD_ADDR_VAR 0 8
33677: PUSH
33678: DOUBLE
33679: LD_INT 1
33681: DEC
33682: ST_TO_ADDR
33683: LD_VAR 0 6
33687: PUSH
33688: FOR_TO
33689: IFFALSE 34753
// begin if i > 4 then
33691: LD_VAR 0 8
33695: PUSH
33696: LD_INT 4
33698: GREATER
33699: IFFALSE 33703
// break ;
33701: GO 34753
// case i of 1 :
33703: LD_VAR 0 8
33707: PUSH
33708: LD_INT 1
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33716
33714: GO 33796
33716: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33717: LD_ADDR_VAR 0 12
33721: PUSH
33722: LD_VAR 0 18
33726: PPUSH
33727: LD_INT 22
33729: PUSH
33730: LD_VAR 0 16
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 58
33741: PUSH
33742: EMPTY
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 30
33750: PUSH
33751: LD_INT 32
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 30
33760: PUSH
33761: LD_INT 4
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 30
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: PPUSH
33789: CALL_OW 72
33793: ST_TO_ADDR
33794: GO 34018
33796: LD_INT 2
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33866
33804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33805: LD_ADDR_VAR 0 12
33809: PUSH
33810: LD_VAR 0 18
33814: PPUSH
33815: LD_INT 22
33817: PUSH
33818: LD_VAR 0 16
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 30
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 30
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PPUSH
33859: CALL_OW 72
33863: ST_TO_ADDR
33864: GO 34018
33866: LD_INT 3
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33874
33872: GO 33936
33874: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33875: LD_ADDR_VAR 0 12
33879: PUSH
33880: LD_VAR 0 18
33884: PPUSH
33885: LD_INT 22
33887: PUSH
33888: LD_VAR 0 16
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 30
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 30
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PPUSH
33929: CALL_OW 72
33933: ST_TO_ADDR
33934: GO 34018
33936: LD_INT 4
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 34017
33944: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33945: LD_ADDR_VAR 0 12
33949: PUSH
33950: LD_VAR 0 18
33954: PPUSH
33955: LD_INT 22
33957: PUSH
33958: LD_VAR 0 16
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: LD_INT 30
33972: PUSH
33973: LD_INT 6
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 30
33982: PUSH
33983: LD_INT 7
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 30
33992: PUSH
33993: LD_INT 8
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PPUSH
34010: CALL_OW 72
34014: ST_TO_ADDR
34015: GO 34018
34017: POP
// if i = 1 then
34018: LD_VAR 0 8
34022: PUSH
34023: LD_INT 1
34025: EQUAL
34026: IFFALSE 34137
// begin tmp := [ ] ;
34028: LD_ADDR_VAR 0 19
34032: PUSH
34033: EMPTY
34034: ST_TO_ADDR
// for j in f do
34035: LD_ADDR_VAR 0 9
34039: PUSH
34040: LD_VAR 0 12
34044: PUSH
34045: FOR_IN
34046: IFFALSE 34119
// if GetBType ( j ) = b_bunker then
34048: LD_VAR 0 9
34052: PPUSH
34053: CALL_OW 266
34057: PUSH
34058: LD_INT 32
34060: EQUAL
34061: IFFALSE 34088
// tmp := Insert ( tmp , 1 , j ) else
34063: LD_ADDR_VAR 0 19
34067: PUSH
34068: LD_VAR 0 19
34072: PPUSH
34073: LD_INT 1
34075: PPUSH
34076: LD_VAR 0 9
34080: PPUSH
34081: CALL_OW 2
34085: ST_TO_ADDR
34086: GO 34117
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34088: LD_ADDR_VAR 0 19
34092: PUSH
34093: LD_VAR 0 19
34097: PPUSH
34098: LD_VAR 0 19
34102: PUSH
34103: LD_INT 1
34105: PLUS
34106: PPUSH
34107: LD_VAR 0 9
34111: PPUSH
34112: CALL_OW 2
34116: ST_TO_ADDR
34117: GO 34045
34119: POP
34120: POP
// if tmp then
34121: LD_VAR 0 19
34125: IFFALSE 34137
// f := tmp ;
34127: LD_ADDR_VAR 0 12
34131: PUSH
34132: LD_VAR 0 19
34136: ST_TO_ADDR
// end ; x := personel [ i ] ;
34137: LD_ADDR_VAR 0 13
34141: PUSH
34142: LD_VAR 0 6
34146: PUSH
34147: LD_VAR 0 8
34151: ARRAY
34152: ST_TO_ADDR
// if x = - 1 then
34153: LD_VAR 0 13
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: EQUAL
34162: IFFALSE 34371
// begin for j in f do
34164: LD_ADDR_VAR 0 9
34168: PUSH
34169: LD_VAR 0 12
34173: PUSH
34174: FOR_IN
34175: IFFALSE 34367
// repeat InitHc ;
34177: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34181: LD_VAR 0 9
34185: PPUSH
34186: CALL_OW 266
34190: PUSH
34191: LD_INT 5
34193: EQUAL
34194: IFFALSE 34264
// begin if UnitsInside ( j ) < 3 then
34196: LD_VAR 0 9
34200: PPUSH
34201: CALL_OW 313
34205: PUSH
34206: LD_INT 3
34208: LESS
34209: IFFALSE 34245
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34211: LD_INT 0
34213: PPUSH
34214: LD_INT 5
34216: PUSH
34217: LD_INT 8
34219: PUSH
34220: LD_INT 9
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: PUSH
34228: LD_VAR 0 17
34232: ARRAY
34233: PPUSH
34234: LD_VAR 0 4
34238: PPUSH
34239: CALL_OW 380
34243: GO 34262
// PrepareHuman ( false , i , skill ) ;
34245: LD_INT 0
34247: PPUSH
34248: LD_VAR 0 8
34252: PPUSH
34253: LD_VAR 0 4
34257: PPUSH
34258: CALL_OW 380
// end else
34262: GO 34281
// PrepareHuman ( false , i , skill ) ;
34264: LD_INT 0
34266: PPUSH
34267: LD_VAR 0 8
34271: PPUSH
34272: LD_VAR 0 4
34276: PPUSH
34277: CALL_OW 380
// un := CreateHuman ;
34281: LD_ADDR_VAR 0 14
34285: PUSH
34286: CALL_OW 44
34290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34291: LD_ADDR_VAR 0 7
34295: PUSH
34296: LD_VAR 0 7
34300: PPUSH
34301: LD_INT 1
34303: PPUSH
34304: LD_VAR 0 14
34308: PPUSH
34309: CALL_OW 2
34313: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34314: LD_VAR 0 14
34318: PPUSH
34319: LD_VAR 0 9
34323: PPUSH
34324: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34328: LD_VAR 0 9
34332: PPUSH
34333: CALL_OW 313
34337: PUSH
34338: LD_INT 6
34340: EQUAL
34341: PUSH
34342: LD_VAR 0 9
34346: PPUSH
34347: CALL_OW 266
34351: PUSH
34352: LD_INT 32
34354: PUSH
34355: LD_INT 31
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: IN
34362: OR
34363: IFFALSE 34177
34365: GO 34174
34367: POP
34368: POP
// end else
34369: GO 34751
// for j = 1 to x do
34371: LD_ADDR_VAR 0 9
34375: PUSH
34376: DOUBLE
34377: LD_INT 1
34379: DEC
34380: ST_TO_ADDR
34381: LD_VAR 0 13
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34749
// begin InitHc ;
34389: CALL_OW 19
// if not f then
34393: LD_VAR 0 12
34397: NOT
34398: IFFALSE 34487
// begin PrepareHuman ( false , i , skill ) ;
34400: LD_INT 0
34402: PPUSH
34403: LD_VAR 0 8
34407: PPUSH
34408: LD_VAR 0 4
34412: PPUSH
34413: CALL_OW 380
// un := CreateHuman ;
34417: LD_ADDR_VAR 0 14
34421: PUSH
34422: CALL_OW 44
34426: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34427: LD_ADDR_VAR 0 7
34431: PUSH
34432: LD_VAR 0 7
34436: PPUSH
34437: LD_INT 1
34439: PPUSH
34440: LD_VAR 0 14
34444: PPUSH
34445: CALL_OW 2
34449: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34450: LD_VAR 0 14
34454: PPUSH
34455: LD_VAR 0 1
34459: PPUSH
34460: CALL_OW 250
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL_OW 251
34474: PPUSH
34475: LD_INT 10
34477: PPUSH
34478: LD_INT 0
34480: PPUSH
34481: CALL_OW 50
// continue ;
34485: GO 34386
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34487: LD_VAR 0 12
34491: PUSH
34492: LD_INT 1
34494: ARRAY
34495: PPUSH
34496: CALL_OW 313
34500: PUSH
34501: LD_VAR 0 12
34505: PUSH
34506: LD_INT 1
34508: ARRAY
34509: PPUSH
34510: CALL_OW 266
34514: PUSH
34515: LD_INT 32
34517: PUSH
34518: LD_INT 31
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: IN
34525: AND
34526: PUSH
34527: LD_VAR 0 12
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: CALL_OW 313
34540: PUSH
34541: LD_INT 6
34543: EQUAL
34544: OR
34545: IFFALSE 34565
// f := Delete ( f , 1 ) ;
34547: LD_ADDR_VAR 0 12
34551: PUSH
34552: LD_VAR 0 12
34556: PPUSH
34557: LD_INT 1
34559: PPUSH
34560: CALL_OW 3
34564: ST_TO_ADDR
// if not f then
34565: LD_VAR 0 12
34569: NOT
34570: IFFALSE 34588
// begin x := x + 2 ;
34572: LD_ADDR_VAR 0 13
34576: PUSH
34577: LD_VAR 0 13
34581: PUSH
34582: LD_INT 2
34584: PLUS
34585: ST_TO_ADDR
// continue ;
34586: GO 34386
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34588: LD_VAR 0 12
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: CALL_OW 266
34601: PUSH
34602: LD_INT 5
34604: EQUAL
34605: IFFALSE 34679
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34607: LD_VAR 0 12
34611: PUSH
34612: LD_INT 1
34614: ARRAY
34615: PPUSH
34616: CALL_OW 313
34620: PUSH
34621: LD_INT 3
34623: LESS
34624: IFFALSE 34660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34626: LD_INT 0
34628: PPUSH
34629: LD_INT 5
34631: PUSH
34632: LD_INT 8
34634: PUSH
34635: LD_INT 9
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_VAR 0 17
34647: ARRAY
34648: PPUSH
34649: LD_VAR 0 4
34653: PPUSH
34654: CALL_OW 380
34658: GO 34677
// PrepareHuman ( false , i , skill ) ;
34660: LD_INT 0
34662: PPUSH
34663: LD_VAR 0 8
34667: PPUSH
34668: LD_VAR 0 4
34672: PPUSH
34673: CALL_OW 380
// end else
34677: GO 34696
// PrepareHuman ( false , i , skill ) ;
34679: LD_INT 0
34681: PPUSH
34682: LD_VAR 0 8
34686: PPUSH
34687: LD_VAR 0 4
34691: PPUSH
34692: CALL_OW 380
// un := CreateHuman ;
34696: LD_ADDR_VAR 0 14
34700: PUSH
34701: CALL_OW 44
34705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 7
34715: PPUSH
34716: LD_INT 1
34718: PPUSH
34719: LD_VAR 0 14
34723: PPUSH
34724: CALL_OW 2
34728: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34729: LD_VAR 0 14
34733: PPUSH
34734: LD_VAR 0 12
34738: PUSH
34739: LD_INT 1
34741: ARRAY
34742: PPUSH
34743: CALL_OW 52
// end ;
34747: GO 34386
34749: POP
34750: POP
// end ;
34751: GO 33688
34753: POP
34754: POP
// result := result ^ buildings ;
34755: LD_ADDR_VAR 0 7
34759: PUSH
34760: LD_VAR 0 7
34764: PUSH
34765: LD_VAR 0 18
34769: ADD
34770: ST_TO_ADDR
// end else
34771: GO 34914
// begin for i = 1 to personel do
34773: LD_ADDR_VAR 0 8
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_VAR 0 6
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34912
// begin if i > 4 then
34791: LD_VAR 0 8
34795: PUSH
34796: LD_INT 4
34798: GREATER
34799: IFFALSE 34803
// break ;
34801: GO 34912
// x := personel [ i ] ;
34803: LD_ADDR_VAR 0 13
34807: PUSH
34808: LD_VAR 0 6
34812: PUSH
34813: LD_VAR 0 8
34817: ARRAY
34818: ST_TO_ADDR
// if x = - 1 then
34819: LD_VAR 0 13
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: EQUAL
34828: IFFALSE 34832
// continue ;
34830: GO 34788
// PrepareHuman ( false , i , skill ) ;
34832: LD_INT 0
34834: PPUSH
34835: LD_VAR 0 8
34839: PPUSH
34840: LD_VAR 0 4
34844: PPUSH
34845: CALL_OW 380
// un := CreateHuman ;
34849: LD_ADDR_VAR 0 14
34853: PUSH
34854: CALL_OW 44
34858: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34859: LD_VAR 0 14
34863: PPUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 250
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 251
34883: PPUSH
34884: LD_INT 10
34886: PPUSH
34887: LD_INT 0
34889: PPUSH
34890: CALL_OW 50
// result := result ^ un ;
34894: LD_ADDR_VAR 0 7
34898: PUSH
34899: LD_VAR 0 7
34903: PUSH
34904: LD_VAR 0 14
34908: ADD
34909: ST_TO_ADDR
// end ;
34910: GO 34788
34912: POP
34913: POP
// end ; end ;
34914: LD_VAR 0 7
34918: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
// result := false ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 0
34944: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34945: LD_VAR 0 1
34949: NOT
34950: PUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: CALL_OW 266
34960: PUSH
34961: LD_INT 32
34963: PUSH
34964: LD_INT 33
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: IN
34971: NOT
34972: OR
34973: IFFALSE 34977
// exit ;
34975: GO 36113
// nat := GetNation ( tower ) ;
34977: LD_ADDR_VAR 0 12
34981: PUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 248
34991: ST_TO_ADDR
// side := GetSide ( tower ) ;
34992: LD_ADDR_VAR 0 16
34996: PUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 255
35006: ST_TO_ADDR
// x := GetX ( tower ) ;
35007: LD_ADDR_VAR 0 10
35011: PUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 250
35021: ST_TO_ADDR
// y := GetY ( tower ) ;
35022: LD_ADDR_VAR 0 11
35026: PUSH
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL_OW 251
35036: ST_TO_ADDR
// if not x or not y then
35037: LD_VAR 0 10
35041: NOT
35042: PUSH
35043: LD_VAR 0 11
35047: NOT
35048: OR
35049: IFFALSE 35053
// exit ;
35051: GO 36113
// weapon := 0 ;
35053: LD_ADDR_VAR 0 18
35057: PUSH
35058: LD_INT 0
35060: ST_TO_ADDR
// fac_list := [ ] ;
35061: LD_ADDR_VAR 0 17
35065: PUSH
35066: EMPTY
35067: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35068: LD_ADDR_VAR 0 6
35072: PUSH
35073: LD_VAR 0 1
35077: PPUSH
35078: CALL_OW 274
35082: PPUSH
35083: LD_VAR 0 2
35087: PPUSH
35088: CALL 32691 0 2
35092: PPUSH
35093: LD_INT 30
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PPUSH
35103: CALL_OW 72
35107: ST_TO_ADDR
// if not factories then
35108: LD_VAR 0 6
35112: NOT
35113: IFFALSE 35117
// exit ;
35115: GO 36113
// for i in factories do
35117: LD_ADDR_VAR 0 8
35121: PUSH
35122: LD_VAR 0 6
35126: PUSH
35127: FOR_IN
35128: IFFALSE 35153
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35130: LD_ADDR_VAR 0 17
35134: PUSH
35135: LD_VAR 0 17
35139: PUSH
35140: LD_VAR 0 8
35144: PPUSH
35145: CALL_OW 478
35149: UNION
35150: ST_TO_ADDR
35151: GO 35127
35153: POP
35154: POP
// if not fac_list then
35155: LD_VAR 0 17
35159: NOT
35160: IFFALSE 35164
// exit ;
35162: GO 36113
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35164: LD_ADDR_VAR 0 5
35168: PUSH
35169: LD_INT 4
35171: PUSH
35172: LD_INT 5
35174: PUSH
35175: LD_INT 9
35177: PUSH
35178: LD_INT 10
35180: PUSH
35181: LD_INT 6
35183: PUSH
35184: LD_INT 7
35186: PUSH
35187: LD_INT 11
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 27
35201: PUSH
35202: LD_INT 28
35204: PUSH
35205: LD_INT 26
35207: PUSH
35208: LD_INT 30
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 43
35219: PUSH
35220: LD_INT 44
35222: PUSH
35223: LD_INT 46
35225: PUSH
35226: LD_INT 45
35228: PUSH
35229: LD_INT 47
35231: PUSH
35232: LD_INT 49
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: PUSH
35248: LD_VAR 0 12
35252: ARRAY
35253: ST_TO_ADDR
// for i in list do
35254: LD_ADDR_VAR 0 8
35258: PUSH
35259: LD_VAR 0 5
35263: PUSH
35264: FOR_IN
35265: IFFALSE 35298
// if not i in fac_list then
35267: LD_VAR 0 8
35271: PUSH
35272: LD_VAR 0 17
35276: IN
35277: NOT
35278: IFFALSE 35296
// list := list diff i ;
35280: LD_ADDR_VAR 0 5
35284: PUSH
35285: LD_VAR 0 5
35289: PUSH
35290: LD_VAR 0 8
35294: DIFF
35295: ST_TO_ADDR
35296: GO 35264
35298: POP
35299: POP
// if not list then
35300: LD_VAR 0 5
35304: NOT
35305: IFFALSE 35309
// exit ;
35307: GO 36113
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35309: LD_VAR 0 12
35313: PUSH
35314: LD_INT 3
35316: EQUAL
35317: PUSH
35318: LD_INT 49
35320: PUSH
35321: LD_VAR 0 5
35325: IN
35326: AND
35327: PUSH
35328: LD_INT 31
35330: PPUSH
35331: LD_VAR 0 16
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: AND
35345: IFFALSE 35405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35347: LD_INT 22
35349: PUSH
35350: LD_VAR 0 16
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 35
35361: PUSH
35362: LD_INT 49
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 91
35371: PUSH
35372: LD_VAR 0 1
35376: PUSH
35377: LD_INT 10
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PPUSH
35390: CALL_OW 69
35394: NOT
35395: IFFALSE 35405
// weapon := ru_time_lapser ;
35397: LD_ADDR_VAR 0 18
35401: PUSH
35402: LD_INT 49
35404: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: IN
35420: PUSH
35421: LD_INT 11
35423: PUSH
35424: LD_VAR 0 5
35428: IN
35429: PUSH
35430: LD_INT 30
35432: PUSH
35433: LD_VAR 0 5
35437: IN
35438: OR
35439: AND
35440: PUSH
35441: LD_INT 6
35443: PPUSH
35444: LD_VAR 0 16
35448: PPUSH
35449: CALL_OW 321
35453: PUSH
35454: LD_INT 2
35456: EQUAL
35457: AND
35458: IFFALSE 35623
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35460: LD_INT 22
35462: PUSH
35463: LD_VAR 0 16
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 35
35477: PUSH
35478: LD_INT 11
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 35
35487: PUSH
35488: LD_INT 30
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 91
35502: PUSH
35503: LD_VAR 0 1
35507: PUSH
35508: LD_INT 18
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PPUSH
35521: CALL_OW 69
35525: NOT
35526: PUSH
35527: LD_INT 22
35529: PUSH
35530: LD_VAR 0 16
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 30
35544: PUSH
35545: LD_INT 32
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 33
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 91
35569: PUSH
35570: LD_VAR 0 1
35574: PUSH
35575: LD_INT 12
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: PPUSH
35591: CALL_OW 69
35595: PUSH
35596: LD_INT 2
35598: GREATER
35599: AND
35600: IFFALSE 35623
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35602: LD_ADDR_VAR 0 18
35606: PUSH
35607: LD_INT 11
35609: PUSH
35610: LD_INT 30
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_VAR 0 12
35621: ARRAY
35622: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35623: LD_VAR 0 18
35627: NOT
35628: PUSH
35629: LD_INT 40
35631: PPUSH
35632: LD_VAR 0 16
35636: PPUSH
35637: CALL_OW 321
35641: PUSH
35642: LD_INT 2
35644: EQUAL
35645: AND
35646: PUSH
35647: LD_INT 7
35649: PUSH
35650: LD_VAR 0 5
35654: IN
35655: PUSH
35656: LD_INT 28
35658: PUSH
35659: LD_VAR 0 5
35663: IN
35664: OR
35665: PUSH
35666: LD_INT 45
35668: PUSH
35669: LD_VAR 0 5
35673: IN
35674: OR
35675: AND
35676: IFFALSE 35930
// begin hex := GetHexInfo ( x , y ) ;
35678: LD_ADDR_VAR 0 4
35682: PUSH
35683: LD_VAR 0 10
35687: PPUSH
35688: LD_VAR 0 11
35692: PPUSH
35693: CALL_OW 546
35697: ST_TO_ADDR
// if hex [ 1 ] then
35698: LD_VAR 0 4
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: IFFALSE 35710
// exit ;
35708: GO 36113
// height := hex [ 2 ] ;
35710: LD_ADDR_VAR 0 15
35714: PUSH
35715: LD_VAR 0 4
35719: PUSH
35720: LD_INT 2
35722: ARRAY
35723: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35724: LD_ADDR_VAR 0 14
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 5
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// for i in tmp do
35747: LD_ADDR_VAR 0 8
35751: PUSH
35752: LD_VAR 0 14
35756: PUSH
35757: FOR_IN
35758: IFFALSE 35928
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_VAR 0 10
35769: PPUSH
35770: LD_VAR 0 8
35774: PPUSH
35775: LD_INT 5
35777: PPUSH
35778: CALL_OW 272
35782: PUSH
35783: LD_VAR 0 11
35787: PPUSH
35788: LD_VAR 0 8
35792: PPUSH
35793: LD_INT 5
35795: PPUSH
35796: CALL_OW 273
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35805: LD_VAR 0 9
35809: PUSH
35810: LD_INT 1
35812: ARRAY
35813: PPUSH
35814: LD_VAR 0 9
35818: PUSH
35819: LD_INT 2
35821: ARRAY
35822: PPUSH
35823: CALL_OW 488
35827: IFFALSE 35926
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35829: LD_ADDR_VAR 0 4
35833: PUSH
35834: LD_VAR 0 9
35838: PUSH
35839: LD_INT 1
35841: ARRAY
35842: PPUSH
35843: LD_VAR 0 9
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 546
35856: ST_TO_ADDR
// if hex [ 1 ] then
35857: LD_VAR 0 4
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: IFFALSE 35869
// continue ;
35867: GO 35757
// h := hex [ 2 ] ;
35869: LD_ADDR_VAR 0 13
35873: PUSH
35874: LD_VAR 0 4
35878: PUSH
35879: LD_INT 2
35881: ARRAY
35882: ST_TO_ADDR
// if h + 7 < height then
35883: LD_VAR 0 13
35887: PUSH
35888: LD_INT 7
35890: PLUS
35891: PUSH
35892: LD_VAR 0 15
35896: LESS
35897: IFFALSE 35926
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35899: LD_ADDR_VAR 0 18
35903: PUSH
35904: LD_INT 7
35906: PUSH
35907: LD_INT 28
35909: PUSH
35910: LD_INT 45
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PUSH
35918: LD_VAR 0 12
35922: ARRAY
35923: ST_TO_ADDR
// break ;
35924: GO 35928
// end ; end ; end ;
35926: GO 35757
35928: POP
35929: POP
// end ; if not weapon then
35930: LD_VAR 0 18
35934: NOT
35935: IFFALSE 35995
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35937: LD_ADDR_VAR 0 5
35941: PUSH
35942: LD_VAR 0 5
35946: PUSH
35947: LD_INT 11
35949: PUSH
35950: LD_INT 30
35952: PUSH
35953: LD_INT 49
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: DIFF
35961: ST_TO_ADDR
// if not list then
35962: LD_VAR 0 5
35966: NOT
35967: IFFALSE 35971
// exit ;
35969: GO 36113
// weapon := list [ rand ( 1 , list ) ] ;
35971: LD_ADDR_VAR 0 18
35975: PUSH
35976: LD_VAR 0 5
35980: PUSH
35981: LD_INT 1
35983: PPUSH
35984: LD_VAR 0 5
35988: PPUSH
35989: CALL_OW 12
35993: ARRAY
35994: ST_TO_ADDR
// end ; if weapon then
35995: LD_VAR 0 18
35999: IFFALSE 36113
// begin tmp := CostOfWeapon ( weapon ) ;
36001: LD_ADDR_VAR 0 14
36005: PUSH
36006: LD_VAR 0 18
36010: PPUSH
36011: CALL_OW 451
36015: ST_TO_ADDR
// j := GetBase ( tower ) ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_VAR 0 1
36025: PPUSH
36026: CALL_OW 274
36030: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36031: LD_VAR 0 9
36035: PPUSH
36036: LD_INT 1
36038: PPUSH
36039: CALL_OW 275
36043: PUSH
36044: LD_VAR 0 14
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: GREATEREQUAL
36053: PUSH
36054: LD_VAR 0 9
36058: PPUSH
36059: LD_INT 2
36061: PPUSH
36062: CALL_OW 275
36066: PUSH
36067: LD_VAR 0 14
36071: PUSH
36072: LD_INT 2
36074: ARRAY
36075: GREATEREQUAL
36076: AND
36077: PUSH
36078: LD_VAR 0 9
36082: PPUSH
36083: LD_INT 3
36085: PPUSH
36086: CALL_OW 275
36090: PUSH
36091: LD_VAR 0 14
36095: PUSH
36096: LD_INT 3
36098: ARRAY
36099: GREATEREQUAL
36100: AND
36101: IFFALSE 36113
// result := weapon ;
36103: LD_ADDR_VAR 0 3
36107: PUSH
36108: LD_VAR 0 18
36112: ST_TO_ADDR
// end ; end ;
36113: LD_VAR 0 3
36117: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36118: LD_INT 0
36120: PPUSH
36121: PPUSH
// result := true ;
36122: LD_ADDR_VAR 0 3
36126: PUSH
36127: LD_INT 1
36129: ST_TO_ADDR
// if array1 = array2 then
36130: LD_VAR 0 1
36134: PUSH
36135: LD_VAR 0 2
36139: EQUAL
36140: IFFALSE 36200
// begin for i = 1 to array1 do
36142: LD_ADDR_VAR 0 4
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 1
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36196
// if array1 [ i ] <> array2 [ i ] then
36160: LD_VAR 0 1
36164: PUSH
36165: LD_VAR 0 4
36169: ARRAY
36170: PUSH
36171: LD_VAR 0 2
36175: PUSH
36176: LD_VAR 0 4
36180: ARRAY
36181: NONEQUAL
36182: IFFALSE 36194
// begin result := false ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// break ;
36192: GO 36196
// end ;
36194: GO 36157
36196: POP
36197: POP
// end else
36198: GO 36208
// result := false ;
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 0
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 3
36212: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36213: LD_INT 0
36215: PPUSH
36216: PPUSH
36217: PPUSH
// pom := GetBase ( fac ) ;
36218: LD_ADDR_VAR 0 5
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 274
36232: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36233: LD_ADDR_VAR 0 4
36237: PUSH
36238: LD_VAR 0 2
36242: PUSH
36243: LD_INT 1
36245: ARRAY
36246: PPUSH
36247: LD_VAR 0 2
36251: PUSH
36252: LD_INT 2
36254: ARRAY
36255: PPUSH
36256: LD_VAR 0 2
36260: PUSH
36261: LD_INT 3
36263: ARRAY
36264: PPUSH
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 4
36272: ARRAY
36273: PPUSH
36274: CALL_OW 449
36278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: LD_VAR 0 5
36288: PPUSH
36289: LD_INT 1
36291: PPUSH
36292: CALL_OW 275
36296: PUSH
36297: LD_VAR 0 4
36301: PUSH
36302: LD_INT 1
36304: ARRAY
36305: GREATEREQUAL
36306: PUSH
36307: LD_VAR 0 5
36311: PPUSH
36312: LD_INT 2
36314: PPUSH
36315: CALL_OW 275
36319: PUSH
36320: LD_VAR 0 4
36324: PUSH
36325: LD_INT 2
36327: ARRAY
36328: GREATEREQUAL
36329: AND
36330: PUSH
36331: LD_VAR 0 5
36335: PPUSH
36336: LD_INT 3
36338: PPUSH
36339: CALL_OW 275
36343: PUSH
36344: LD_VAR 0 4
36348: PUSH
36349: LD_INT 3
36351: ARRAY
36352: GREATEREQUAL
36353: AND
36354: ST_TO_ADDR
// end ;
36355: LD_VAR 0 3
36359: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36360: LD_INT 0
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
// pom := GetBase ( building ) ;
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL_OW 274
36380: ST_TO_ADDR
// if not pom then
36381: LD_VAR 0 3
36385: NOT
36386: IFFALSE 36390
// exit ;
36388: GO 36560
// btype := GetBType ( building ) ;
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 266
36404: ST_TO_ADDR
// if btype = b_armoury then
36405: LD_VAR 0 5
36409: PUSH
36410: LD_INT 4
36412: EQUAL
36413: IFFALSE 36423
// btype := b_barracks ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_INT 5
36422: ST_TO_ADDR
// if btype = b_depot then
36423: LD_VAR 0 5
36427: PUSH
36428: LD_INT 0
36430: EQUAL
36431: IFFALSE 36441
// btype := b_warehouse ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_INT 1
36440: ST_TO_ADDR
// if btype = b_workshop then
36441: LD_VAR 0 5
36445: PUSH
36446: LD_INT 2
36448: EQUAL
36449: IFFALSE 36459
// btype := b_factory ;
36451: LD_ADDR_VAR 0 5
36455: PUSH
36456: LD_INT 3
36458: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36459: LD_ADDR_VAR 0 4
36463: PUSH
36464: LD_VAR 0 5
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 248
36478: PPUSH
36479: CALL_OW 450
36483: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36484: LD_ADDR_VAR 0 2
36488: PUSH
36489: LD_VAR 0 3
36493: PPUSH
36494: LD_INT 1
36496: PPUSH
36497: CALL_OW 275
36501: PUSH
36502: LD_VAR 0 4
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: GREATEREQUAL
36511: PUSH
36512: LD_VAR 0 3
36516: PPUSH
36517: LD_INT 2
36519: PPUSH
36520: CALL_OW 275
36524: PUSH
36525: LD_VAR 0 4
36529: PUSH
36530: LD_INT 2
36532: ARRAY
36533: GREATEREQUAL
36534: AND
36535: PUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: LD_INT 3
36543: PPUSH
36544: CALL_OW 275
36548: PUSH
36549: LD_VAR 0 4
36553: PUSH
36554: LD_INT 3
36556: ARRAY
36557: GREATEREQUAL
36558: AND
36559: ST_TO_ADDR
// end ;
36560: LD_VAR 0 2
36564: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36565: LD_INT 0
36567: PPUSH
36568: PPUSH
36569: PPUSH
// pom := GetBase ( building ) ;
36570: LD_ADDR_VAR 0 4
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 274
36584: ST_TO_ADDR
// if not pom then
36585: LD_VAR 0 4
36589: NOT
36590: IFFALSE 36594
// exit ;
36592: GO 36695
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36594: LD_ADDR_VAR 0 5
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 248
36613: PPUSH
36614: CALL_OW 450
36618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: LD_INT 1
36631: PPUSH
36632: CALL_OW 275
36636: PUSH
36637: LD_VAR 0 5
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: GREATEREQUAL
36646: PUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_INT 2
36654: PPUSH
36655: CALL_OW 275
36659: PUSH
36660: LD_VAR 0 5
36664: PUSH
36665: LD_INT 2
36667: ARRAY
36668: GREATEREQUAL
36669: AND
36670: PUSH
36671: LD_VAR 0 4
36675: PPUSH
36676: LD_INT 3
36678: PPUSH
36679: CALL_OW 275
36683: PUSH
36684: LD_VAR 0 5
36688: PUSH
36689: LD_INT 3
36691: ARRAY
36692: GREATEREQUAL
36693: AND
36694: ST_TO_ADDR
// end ;
36695: LD_VAR 0 3
36699: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36700: LD_INT 0
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
// result := false ;
36712: LD_ADDR_VAR 0 6
36716: PUSH
36717: LD_INT 0
36719: ST_TO_ADDR
// if not base or not btype or not x or not y then
36720: LD_VAR 0 1
36724: NOT
36725: PUSH
36726: LD_VAR 0 2
36730: NOT
36731: OR
36732: PUSH
36733: LD_VAR 0 3
36737: NOT
36738: OR
36739: PUSH
36740: LD_VAR 0 4
36744: NOT
36745: OR
36746: IFFALSE 36750
// exit ;
36748: GO 37359
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36750: LD_ADDR_VAR 0 12
36754: PUSH
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_VAR 0 3
36764: PPUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: LD_VAR 0 5
36774: PPUSH
36775: LD_VAR 0 1
36779: PUSH
36780: LD_INT 1
36782: ARRAY
36783: PPUSH
36784: CALL_OW 248
36788: PPUSH
36789: LD_INT 0
36791: PPUSH
36792: CALL 38196 0 6
36796: ST_TO_ADDR
// if not hexes then
36797: LD_VAR 0 12
36801: NOT
36802: IFFALSE 36806
// exit ;
36804: GO 37359
// for i = 1 to hexes do
36806: LD_ADDR_VAR 0 7
36810: PUSH
36811: DOUBLE
36812: LD_INT 1
36814: DEC
36815: ST_TO_ADDR
36816: LD_VAR 0 12
36820: PUSH
36821: FOR_TO
36822: IFFALSE 37357
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36824: LD_ADDR_VAR 0 11
36828: PUSH
36829: LD_VAR 0 12
36833: PUSH
36834: LD_VAR 0 7
36838: ARRAY
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: LD_VAR 0 12
36848: PUSH
36849: LD_VAR 0 7
36853: ARRAY
36854: PUSH
36855: LD_INT 2
36857: ARRAY
36858: PPUSH
36859: CALL_OW 428
36863: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36864: LD_VAR 0 12
36868: PUSH
36869: LD_VAR 0 7
36873: ARRAY
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: LD_VAR 0 12
36883: PUSH
36884: LD_VAR 0 7
36888: ARRAY
36889: PUSH
36890: LD_INT 2
36892: ARRAY
36893: PPUSH
36894: CALL_OW 351
36898: PUSH
36899: LD_VAR 0 12
36903: PUSH
36904: LD_VAR 0 7
36908: ARRAY
36909: PUSH
36910: LD_INT 1
36912: ARRAY
36913: PPUSH
36914: LD_VAR 0 12
36918: PUSH
36919: LD_VAR 0 7
36923: ARRAY
36924: PUSH
36925: LD_INT 2
36927: ARRAY
36928: PPUSH
36929: CALL_OW 488
36933: NOT
36934: OR
36935: PUSH
36936: LD_VAR 0 11
36940: PPUSH
36941: CALL_OW 247
36945: PUSH
36946: LD_INT 3
36948: EQUAL
36949: OR
36950: IFFALSE 36956
// exit ;
36952: POP
36953: POP
36954: GO 37359
// if not tmp or not tmp in base then
36956: LD_VAR 0 11
36960: NOT
36961: PUSH
36962: LD_VAR 0 11
36966: PUSH
36967: LD_VAR 0 1
36971: IN
36972: NOT
36973: OR
36974: IFFALSE 36978
// continue ;
36976: GO 36821
// result := true ;
36978: LD_ADDR_VAR 0 6
36982: PUSH
36983: LD_INT 1
36985: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36986: LD_ADDR_VAR 0 15
36990: PUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: LD_INT 22
36998: PUSH
36999: LD_VAR 0 11
37003: PPUSH
37004: CALL_OW 255
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 30
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 30
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PPUSH
37045: CALL_OW 72
37049: ST_TO_ADDR
// if dep then
37050: LD_VAR 0 15
37054: IFFALSE 37190
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37056: LD_ADDR_VAR 0 14
37060: PUSH
37061: LD_VAR 0 15
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: PPUSH
37070: CALL_OW 250
37074: PPUSH
37075: LD_VAR 0 15
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PPUSH
37084: CALL_OW 254
37088: PPUSH
37089: LD_INT 5
37091: PPUSH
37092: CALL_OW 272
37096: PUSH
37097: LD_VAR 0 15
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: CALL_OW 251
37110: PPUSH
37111: LD_VAR 0 15
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PPUSH
37120: CALL_OW 254
37124: PPUSH
37125: LD_INT 5
37127: PPUSH
37128: CALL_OW 273
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37137: LD_VAR 0 14
37141: PUSH
37142: LD_INT 1
37144: ARRAY
37145: PPUSH
37146: LD_VAR 0 14
37150: PUSH
37151: LD_INT 2
37153: ARRAY
37154: PPUSH
37155: CALL_OW 488
37159: IFFALSE 37190
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37161: LD_VAR 0 11
37165: PPUSH
37166: LD_VAR 0 14
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: PPUSH
37175: LD_VAR 0 14
37179: PUSH
37180: LD_INT 2
37182: ARRAY
37183: PPUSH
37184: CALL_OW 111
// continue ;
37188: GO 36821
// end ; end ; r := GetDir ( tmp ) ;
37190: LD_ADDR_VAR 0 13
37194: PUSH
37195: LD_VAR 0 11
37199: PPUSH
37200: CALL_OW 254
37204: ST_TO_ADDR
// if r = 5 then
37205: LD_VAR 0 13
37209: PUSH
37210: LD_INT 5
37212: EQUAL
37213: IFFALSE 37223
// r := 0 ;
37215: LD_ADDR_VAR 0 13
37219: PUSH
37220: LD_INT 0
37222: ST_TO_ADDR
// for j = r to 5 do
37223: LD_ADDR_VAR 0 8
37227: PUSH
37228: DOUBLE
37229: LD_VAR 0 13
37233: DEC
37234: ST_TO_ADDR
37235: LD_INT 5
37237: PUSH
37238: FOR_TO
37239: IFFALSE 37353
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_VAR 0 11
37250: PPUSH
37251: CALL_OW 250
37255: PPUSH
37256: LD_VAR 0 8
37260: PPUSH
37261: LD_INT 2
37263: PPUSH
37264: CALL_OW 272
37268: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37269: LD_ADDR_VAR 0 10
37273: PUSH
37274: LD_VAR 0 11
37278: PPUSH
37279: CALL_OW 251
37283: PPUSH
37284: LD_VAR 0 8
37288: PPUSH
37289: LD_INT 2
37291: PPUSH
37292: CALL_OW 273
37296: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37297: LD_VAR 0 9
37301: PPUSH
37302: LD_VAR 0 10
37306: PPUSH
37307: CALL_OW 488
37311: PUSH
37312: LD_VAR 0 9
37316: PPUSH
37317: LD_VAR 0 10
37321: PPUSH
37322: CALL_OW 428
37326: NOT
37327: AND
37328: IFFALSE 37351
// begin ComMoveXY ( tmp , _x , _y ) ;
37330: LD_VAR 0 11
37334: PPUSH
37335: LD_VAR 0 9
37339: PPUSH
37340: LD_VAR 0 10
37344: PPUSH
37345: CALL_OW 111
// break ;
37349: GO 37353
// end ; end ;
37351: GO 37238
37353: POP
37354: POP
// end ;
37355: GO 36821
37357: POP
37358: POP
// end ;
37359: LD_VAR 0 6
37363: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37364: LD_INT 0
37366: PPUSH
37367: PPUSH
37368: PPUSH
37369: PPUSH
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
// result := false ;
37376: LD_ADDR_VAR 0 6
37380: PUSH
37381: LD_INT 0
37383: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37384: LD_VAR 0 1
37388: NOT
37389: PUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 266
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: IN
37410: NOT
37411: OR
37412: PUSH
37413: LD_VAR 0 2
37417: NOT
37418: OR
37419: PUSH
37420: LD_VAR 0 5
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: LD_INT 4
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: IN
37451: NOT
37452: OR
37453: PUSH
37454: LD_VAR 0 3
37458: PPUSH
37459: LD_VAR 0 4
37463: PPUSH
37464: CALL_OW 488
37468: NOT
37469: OR
37470: IFFALSE 37474
// exit ;
37472: GO 38191
// pom := GetBase ( depot ) ;
37474: LD_ADDR_VAR 0 10
37478: PUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 274
37488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37489: LD_ADDR_VAR 0 11
37493: PUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 248
37508: PPUSH
37509: CALL_OW 450
37513: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37514: LD_VAR 0 10
37518: PPUSH
37519: LD_INT 1
37521: PPUSH
37522: CALL_OW 275
37526: PUSH
37527: LD_VAR 0 11
37531: PUSH
37532: LD_INT 1
37534: ARRAY
37535: GREATEREQUAL
37536: PUSH
37537: LD_VAR 0 10
37541: PPUSH
37542: LD_INT 2
37544: PPUSH
37545: CALL_OW 275
37549: PUSH
37550: LD_VAR 0 11
37554: PUSH
37555: LD_INT 2
37557: ARRAY
37558: GREATEREQUAL
37559: AND
37560: PUSH
37561: LD_VAR 0 10
37565: PPUSH
37566: LD_INT 3
37568: PPUSH
37569: CALL_OW 275
37573: PUSH
37574: LD_VAR 0 11
37578: PUSH
37579: LD_INT 3
37581: ARRAY
37582: GREATEREQUAL
37583: AND
37584: NOT
37585: IFFALSE 37589
// exit ;
37587: GO 38191
// if GetBType ( depot ) = b_depot then
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 266
37598: PUSH
37599: LD_INT 0
37601: EQUAL
37602: IFFALSE 37614
// dist := 28 else
37604: LD_ADDR_VAR 0 14
37608: PUSH
37609: LD_INT 28
37611: ST_TO_ADDR
37612: GO 37622
// dist := 36 ;
37614: LD_ADDR_VAR 0 14
37618: PUSH
37619: LD_INT 36
37621: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37622: LD_VAR 0 1
37626: PPUSH
37627: LD_VAR 0 3
37631: PPUSH
37632: LD_VAR 0 4
37636: PPUSH
37637: CALL_OW 297
37641: PUSH
37642: LD_VAR 0 14
37646: GREATER
37647: IFFALSE 37651
// exit ;
37649: GO 38191
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37651: LD_ADDR_VAR 0 12
37655: PUSH
37656: LD_VAR 0 2
37660: PPUSH
37661: LD_VAR 0 3
37665: PPUSH
37666: LD_VAR 0 4
37670: PPUSH
37671: LD_VAR 0 5
37675: PPUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 248
37685: PPUSH
37686: LD_INT 0
37688: PPUSH
37689: CALL 38196 0 6
37693: ST_TO_ADDR
// if not hexes then
37694: LD_VAR 0 12
37698: NOT
37699: IFFALSE 37703
// exit ;
37701: GO 38191
// hex := GetHexInfo ( x , y ) ;
37703: LD_ADDR_VAR 0 15
37707: PUSH
37708: LD_VAR 0 3
37712: PPUSH
37713: LD_VAR 0 4
37717: PPUSH
37718: CALL_OW 546
37722: ST_TO_ADDR
// if hex [ 1 ] then
37723: LD_VAR 0 15
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: IFFALSE 37735
// exit ;
37733: GO 38191
// height := hex [ 2 ] ;
37735: LD_ADDR_VAR 0 13
37739: PUSH
37740: LD_VAR 0 15
37744: PUSH
37745: LD_INT 2
37747: ARRAY
37748: ST_TO_ADDR
// for i = 1 to hexes do
37749: LD_ADDR_VAR 0 7
37753: PUSH
37754: DOUBLE
37755: LD_INT 1
37757: DEC
37758: ST_TO_ADDR
37759: LD_VAR 0 12
37763: PUSH
37764: FOR_TO
37765: IFFALSE 38095
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37767: LD_VAR 0 12
37771: PUSH
37772: LD_VAR 0 7
37776: ARRAY
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 12
37786: PUSH
37787: LD_VAR 0 7
37791: ARRAY
37792: PUSH
37793: LD_INT 2
37795: ARRAY
37796: PPUSH
37797: CALL_OW 488
37801: NOT
37802: PUSH
37803: LD_VAR 0 12
37807: PUSH
37808: LD_VAR 0 7
37812: ARRAY
37813: PUSH
37814: LD_INT 1
37816: ARRAY
37817: PPUSH
37818: LD_VAR 0 12
37822: PUSH
37823: LD_VAR 0 7
37827: ARRAY
37828: PUSH
37829: LD_INT 2
37831: ARRAY
37832: PPUSH
37833: CALL_OW 428
37837: PUSH
37838: LD_INT 0
37840: GREATER
37841: OR
37842: PUSH
37843: LD_VAR 0 12
37847: PUSH
37848: LD_VAR 0 7
37852: ARRAY
37853: PUSH
37854: LD_INT 1
37856: ARRAY
37857: PPUSH
37858: LD_VAR 0 12
37862: PUSH
37863: LD_VAR 0 7
37867: ARRAY
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: PPUSH
37873: CALL_OW 351
37877: OR
37878: IFFALSE 37884
// exit ;
37880: POP
37881: POP
37882: GO 38191
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37884: LD_ADDR_VAR 0 8
37888: PUSH
37889: LD_VAR 0 12
37893: PUSH
37894: LD_VAR 0 7
37898: ARRAY
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PPUSH
37904: LD_VAR 0 12
37908: PUSH
37909: LD_VAR 0 7
37913: ARRAY
37914: PUSH
37915: LD_INT 2
37917: ARRAY
37918: PPUSH
37919: CALL_OW 546
37923: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37924: LD_VAR 0 8
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: PUSH
37933: LD_VAR 0 8
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PUSH
37942: LD_VAR 0 13
37946: PUSH
37947: LD_INT 2
37949: PLUS
37950: GREATER
37951: OR
37952: PUSH
37953: LD_VAR 0 8
37957: PUSH
37958: LD_INT 2
37960: ARRAY
37961: PUSH
37962: LD_VAR 0 13
37966: PUSH
37967: LD_INT 2
37969: MINUS
37970: LESS
37971: OR
37972: PUSH
37973: LD_VAR 0 8
37977: PUSH
37978: LD_INT 3
37980: ARRAY
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 8
37987: PUSH
37988: LD_INT 9
37990: PUSH
37991: LD_INT 10
37993: PUSH
37994: LD_INT 11
37996: PUSH
37997: LD_INT 12
37999: PUSH
38000: LD_INT 13
38002: PUSH
38003: LD_INT 16
38005: PUSH
38006: LD_INT 17
38008: PUSH
38009: LD_INT 18
38011: PUSH
38012: LD_INT 19
38014: PUSH
38015: LD_INT 20
38017: PUSH
38018: LD_INT 21
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: IN
38036: NOT
38037: OR
38038: PUSH
38039: LD_VAR 0 8
38043: PUSH
38044: LD_INT 5
38046: ARRAY
38047: NOT
38048: OR
38049: PUSH
38050: LD_VAR 0 8
38054: PUSH
38055: LD_INT 6
38057: ARRAY
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 7
38067: PUSH
38068: LD_INT 9
38070: PUSH
38071: LD_INT 10
38073: PUSH
38074: LD_INT 11
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: IN
38085: NOT
38086: OR
38087: IFFALSE 38093
// exit ;
38089: POP
38090: POP
38091: GO 38191
// end ;
38093: GO 37764
38095: POP
38096: POP
// side := GetSide ( depot ) ;
38097: LD_ADDR_VAR 0 9
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 255
38111: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38112: LD_VAR 0 9
38116: PPUSH
38117: LD_VAR 0 3
38121: PPUSH
38122: LD_VAR 0 4
38126: PPUSH
38127: LD_INT 20
38129: PPUSH
38130: CALL 30845 0 4
38134: PUSH
38135: LD_INT 4
38137: ARRAY
38138: IFFALSE 38142
// exit ;
38140: GO 38191
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38142: LD_VAR 0 2
38146: PUSH
38147: LD_INT 29
38149: PUSH
38150: LD_INT 30
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: IN
38157: PUSH
38158: LD_VAR 0 3
38162: PPUSH
38163: LD_VAR 0 4
38167: PPUSH
38168: LD_VAR 0 9
38172: PPUSH
38173: CALL_OW 440
38177: NOT
38178: AND
38179: IFFALSE 38183
// exit ;
38181: GO 38191
// result := true ;
38183: LD_ADDR_VAR 0 6
38187: PUSH
38188: LD_INT 1
38190: ST_TO_ADDR
// end ;
38191: LD_VAR 0 6
38195: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38196: LD_INT 0
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
// result = [ ] ;
38256: LD_ADDR_VAR 0 7
38260: PUSH
38261: EMPTY
38262: ST_TO_ADDR
// temp_list = [ ] ;
38263: LD_ADDR_VAR 0 9
38267: PUSH
38268: EMPTY
38269: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38270: LD_VAR 0 4
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: LD_INT 3
38286: PUSH
38287: LD_INT 4
38289: PUSH
38290: LD_INT 5
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: IN
38301: NOT
38302: PUSH
38303: LD_VAR 0 1
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: IN
38318: PUSH
38319: LD_VAR 0 5
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: IN
38338: NOT
38339: AND
38340: OR
38341: IFFALSE 38345
// exit ;
38343: GO 56736
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38345: LD_VAR 0 1
38349: PUSH
38350: LD_INT 6
38352: PUSH
38353: LD_INT 7
38355: PUSH
38356: LD_INT 8
38358: PUSH
38359: LD_INT 13
38361: PUSH
38362: LD_INT 12
38364: PUSH
38365: LD_INT 15
38367: PUSH
38368: LD_INT 11
38370: PUSH
38371: LD_INT 14
38373: PUSH
38374: LD_INT 10
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: IN
38388: IFFALSE 38398
// btype = b_lab ;
38390: LD_ADDR_VAR 0 1
38394: PUSH
38395: LD_INT 6
38397: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38398: LD_VAR 0 6
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: IN
38417: NOT
38418: PUSH
38419: LD_VAR 0 1
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 6
38438: PUSH
38439: LD_INT 36
38441: PUSH
38442: LD_INT 4
38444: PUSH
38445: LD_INT 5
38447: PUSH
38448: LD_INT 31
38450: PUSH
38451: LD_INT 32
38453: PUSH
38454: LD_INT 33
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: IN
38470: NOT
38471: PUSH
38472: LD_VAR 0 6
38476: PUSH
38477: LD_INT 1
38479: EQUAL
38480: AND
38481: OR
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: LD_INT 3
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: IN
38498: NOT
38499: PUSH
38500: LD_VAR 0 6
38504: PUSH
38505: LD_INT 2
38507: EQUAL
38508: AND
38509: OR
38510: IFFALSE 38520
// mode = 0 ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: LD_INT 0
38519: ST_TO_ADDR
// case mode of 0 :
38520: LD_VAR 0 6
38524: PUSH
38525: LD_INT 0
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 49986
38533: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38534: LD_ADDR_VAR 0 11
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 3
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38727: LD_ADDR_VAR 0 12
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 3
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38923: LD_ADDR_VAR 0 13
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39122: LD_ADDR_VAR 0 14
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39318: LD_ADDR_VAR 0 15
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39511: LD_ADDR_VAR 0 16
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39704: LD_ADDR_VAR 0 17
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39934: LD_ADDR_VAR 0 18
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: NEG
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40164: LD_ADDR_VAR 0 19
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40394: LD_ADDR_VAR 0 20
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40624: LD_ADDR_VAR 0 21
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40854: LD_ADDR_VAR 0 22
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41084: LD_ADDR_VAR 0 23
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: LD_INT 3
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: LD_INT 3
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41364: LD_ADDR_VAR 0 24
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41640: LD_ADDR_VAR 0 25
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41914: LD_ADDR_VAR 0 26
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42190: LD_ADDR_VAR 0 27
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 3
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42470: LD_ADDR_VAR 0 28
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 3
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 3
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 3
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42752: LD_ADDR_VAR 0 29
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43031: LD_ADDR_VAR 0 30
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 3
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43309: LD_ADDR_VAR 0 31
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: NEG
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43587: LD_ADDR_VAR 0 32
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 3
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43865: LD_ADDR_VAR 0 33
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: LD_INT 3
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 3
44109: NEG
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44144: LD_ADDR_VAR 0 34
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44424: LD_ADDR_VAR 0 35
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44536: LD_ADDR_VAR 0 36
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44648: LD_ADDR_VAR 0 37
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44760: LD_ADDR_VAR 0 38
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44872: LD_ADDR_VAR 0 39
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44984: LD_ADDR_VAR 0 40
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45096: LD_ADDR_VAR 0 41
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 3
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 3
45405: NEG
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45446: LD_ADDR_VAR 0 42
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 3
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 3
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: LD_INT 3
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45796: LD_ADDR_VAR 0 43
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 3
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46144: LD_ADDR_VAR 0 44
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 3
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46494: LD_ADDR_VAR 0 45
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: LD_INT 3
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46844: LD_ADDR_VAR 0 46
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47192: LD_ADDR_VAR 0 47
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47343: LD_ADDR_VAR 0 48
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47490: LD_ADDR_VAR 0 49
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47634: LD_ADDR_VAR 0 50
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47778: LD_ADDR_VAR 0 51
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47925: LD_ADDR_VAR 0 52
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48076: LD_ADDR_VAR 0 53
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48306: LD_ADDR_VAR 0 54
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48536: LD_ADDR_VAR 0 55
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48766: LD_ADDR_VAR 0 56
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48996: LD_ADDR_VAR 0 57
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49226: LD_ADDR_VAR 0 58
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49456: LD_ADDR_VAR 0 59
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49544: LD_ADDR_VAR 0 60
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49632: LD_ADDR_VAR 0 61
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49720: LD_ADDR_VAR 0 62
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49808: LD_ADDR_VAR 0 63
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49896: LD_ADDR_VAR 0 64
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// end ; 1 :
49984: GO 55881
49986: LD_INT 1
49988: DOUBLE
49989: EQUAL
49990: IFTRUE 49994
49992: GO 52617
49994: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49995: LD_ADDR_VAR 0 11
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 3
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50039: LD_ADDR_VAR 0 12
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50080: LD_ADDR_VAR 0 13
50084: PUSH
50085: LD_INT 3
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50120: LD_ADDR_VAR 0 14
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50161: LD_ADDR_VAR 0 15
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50205: LD_ADDR_VAR 0 16
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50251: LD_ADDR_VAR 0 17
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50295: LD_ADDR_VAR 0 18
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50336: LD_ADDR_VAR 0 19
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50376: LD_ADDR_VAR 0 20
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50417: LD_ADDR_VAR 0 21
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50461: LD_ADDR_VAR 0 22
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50507: LD_ADDR_VAR 0 23
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50551: LD_ADDR_VAR 0 24
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50592: LD_ADDR_VAR 0 25
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 4
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50632: LD_ADDR_VAR 0 26
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50673: LD_ADDR_VAR 0 27
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 4
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50717: LD_ADDR_VAR 0 28
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 4
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 4
50748: NEG
50749: PUSH
50750: LD_INT 3
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50763: LD_ADDR_VAR 0 29
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 4
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 5
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 5
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 4
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 6
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 6
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 5
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50918: LD_ADDR_VAR 0 30
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 5
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 5
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 5
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 6
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 6
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51061: LD_ADDR_VAR 0 31
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 4
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 4
51108: PUSH
51109: LD_INT 4
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 4
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: LD_INT 5
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 6
51158: PUSH
51159: LD_INT 5
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 6
51168: PUSH
51169: LD_INT 6
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: LD_INT 6
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51200: LD_ADDR_VAR 0 32
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 4
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 6
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 6
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51343: LD_ADDR_VAR 0 33
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 4
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 4
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 5
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 6
51463: NEG
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 6
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51498: LD_ADDR_VAR 0 34
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 4
51553: NEG
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 4
51565: NEG
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: LD_INT 5
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: LD_INT 4
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: NEG
51602: PUSH
51603: LD_INT 5
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 5
51613: NEG
51614: PUSH
51615: LD_INT 6
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 6
51625: NEG
51626: PUSH
51627: LD_INT 5
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 6
51637: NEG
51638: PUSH
51639: LD_INT 6
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51661: LD_ADDR_VAR 0 41
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51705: LD_ADDR_VAR 0 42
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51746: LD_ADDR_VAR 0 43
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51786: LD_ADDR_VAR 0 44
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51827: LD_ADDR_VAR 0 45
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51871: LD_ADDR_VAR 0 46
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51917: LD_ADDR_VAR 0 47
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51950: LD_ADDR_VAR 0 48
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51981: LD_ADDR_VAR 0 49
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52010: LD_ADDR_VAR 0 50
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52039: LD_ADDR_VAR 0 51
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52070: LD_ADDR_VAR 0 52
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52103: LD_ADDR_VAR 0 53
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52147: LD_ADDR_VAR 0 54
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52188: LD_ADDR_VAR 0 55
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52228: LD_ADDR_VAR 0 56
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52269: LD_ADDR_VAR 0 57
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52313: LD_ADDR_VAR 0 58
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: LIST
52358: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52359: LD_ADDR_VAR 0 59
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52403: LD_ADDR_VAR 0 60
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52444: LD_ADDR_VAR 0 61
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52484: LD_ADDR_VAR 0 62
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52525: LD_ADDR_VAR 0 63
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52569: LD_ADDR_VAR 0 64
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// end ; 2 :
52615: GO 55881
52617: LD_INT 2
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 55880
52625: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52626: LD_ADDR_VAR 0 29
52630: PUSH
52631: LD_INT 4
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 4
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 5
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 5
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 5
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 4
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 4
52756: PUSH
52757: LD_INT 4
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 4
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 4
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 4
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 4
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 5
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 4
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 4
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 4
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: LD_INT 4
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 4
53023: NEG
53024: PUSH
53025: LD_INT 5
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 5
53071: NEG
53072: PUSH
53073: LD_INT 4
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 5
53083: NEG
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: LD_INT 5
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 5
53107: NEG
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53164: LD_ADDR_VAR 0 30
53168: PUSH
53169: LD_INT 4
53171: PUSH
53172: LD_INT 4
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 5
53191: PUSH
53192: LD_INT 4
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 5
53201: PUSH
53202: LD_INT 5
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 4
53211: PUSH
53212: LD_INT 5
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 4
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 5
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: LD_INT 5
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 4
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 4
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 5
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 5
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 5
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 4
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 4
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 4
53528: NEG
53529: PUSH
53530: LD_INT 4
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 4
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 5
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 4
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 4
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 5
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 5
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53711: LD_ADDR_VAR 0 31
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 5
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 4
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 4
53913: NEG
53914: PUSH
53915: LD_INT 4
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 4
53925: NEG
53926: PUSH
53927: LD_INT 5
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 5
53985: NEG
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 4
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 4
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 4
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 5
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 5
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54261: LD_ADDR_VAR 0 32
54265: PUSH
54266: LD_INT 4
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 4
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 4
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 5
54324: NEG
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 5
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 5
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: LD_INT 4
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 4
54430: NEG
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 4
54442: NEG
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 4
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 5
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 3
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 4
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 5
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 3
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 4
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 4
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 4
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 4
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: LD_INT 5
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 4
54713: PUSH
54714: LD_INT 5
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 3
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 5
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 5
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54808: LD_ADDR_VAR 0 33
54812: PUSH
54813: LD_INT 4
54815: NEG
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 5
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: NEG
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: LD_INT 5
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 5
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 4
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 4
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 4
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 5
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 3
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 4
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: PUSH
55149: LD_INT 4
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 4
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 4
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 5
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 4
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 5
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55346: LD_ADDR_VAR 0 34
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 4
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 5
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 4
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 5
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 5
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 4
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 4
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 4
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 4
55548: PUSH
55549: LD_INT 4
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 5
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 5
55578: PUSH
55579: LD_INT 5
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: LD_INT 5
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 4
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 5
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 4
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 4
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: NEG
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 5
55787: NEG
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// end ; end ;
55878: GO 55881
55880: POP
// case btype of b_depot , b_warehouse :
55881: LD_VAR 0 1
55885: PUSH
55886: LD_INT 0
55888: DOUBLE
55889: EQUAL
55890: IFTRUE 55900
55892: LD_INT 1
55894: DOUBLE
55895: EQUAL
55896: IFTRUE 55900
55898: GO 56101
55900: POP
// case nation of nation_american :
55901: LD_VAR 0 5
55905: PUSH
55906: LD_INT 1
55908: DOUBLE
55909: EQUAL
55910: IFTRUE 55914
55912: GO 55970
55914: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55915: LD_ADDR_VAR 0 9
55919: PUSH
55920: LD_VAR 0 11
55924: PUSH
55925: LD_VAR 0 12
55929: PUSH
55930: LD_VAR 0 13
55934: PUSH
55935: LD_VAR 0 14
55939: PUSH
55940: LD_VAR 0 15
55944: PUSH
55945: LD_VAR 0 16
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: PUSH
55958: LD_VAR 0 4
55962: PUSH
55963: LD_INT 1
55965: PLUS
55966: ARRAY
55967: ST_TO_ADDR
55968: GO 56099
55970: LD_INT 2
55972: DOUBLE
55973: EQUAL
55974: IFTRUE 55978
55976: GO 56034
55978: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55979: LD_ADDR_VAR 0 9
55983: PUSH
55984: LD_VAR 0 17
55988: PUSH
55989: LD_VAR 0 18
55993: PUSH
55994: LD_VAR 0 19
55998: PUSH
55999: LD_VAR 0 20
56003: PUSH
56004: LD_VAR 0 21
56008: PUSH
56009: LD_VAR 0 22
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: PUSH
56022: LD_VAR 0 4
56026: PUSH
56027: LD_INT 1
56029: PLUS
56030: ARRAY
56031: ST_TO_ADDR
56032: GO 56099
56034: LD_INT 3
56036: DOUBLE
56037: EQUAL
56038: IFTRUE 56042
56040: GO 56098
56042: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56043: LD_ADDR_VAR 0 9
56047: PUSH
56048: LD_VAR 0 23
56052: PUSH
56053: LD_VAR 0 24
56057: PUSH
56058: LD_VAR 0 25
56062: PUSH
56063: LD_VAR 0 26
56067: PUSH
56068: LD_VAR 0 27
56072: PUSH
56073: LD_VAR 0 28
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 4
56090: PUSH
56091: LD_INT 1
56093: PLUS
56094: ARRAY
56095: ST_TO_ADDR
56096: GO 56099
56098: POP
56099: GO 56654
56101: LD_INT 2
56103: DOUBLE
56104: EQUAL
56105: IFTRUE 56115
56107: LD_INT 3
56109: DOUBLE
56110: EQUAL
56111: IFTRUE 56115
56113: GO 56171
56115: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56116: LD_ADDR_VAR 0 9
56120: PUSH
56121: LD_VAR 0 29
56125: PUSH
56126: LD_VAR 0 30
56130: PUSH
56131: LD_VAR 0 31
56135: PUSH
56136: LD_VAR 0 32
56140: PUSH
56141: LD_VAR 0 33
56145: PUSH
56146: LD_VAR 0 34
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: PUSH
56159: LD_VAR 0 4
56163: PUSH
56164: LD_INT 1
56166: PLUS
56167: ARRAY
56168: ST_TO_ADDR
56169: GO 56654
56171: LD_INT 16
56173: DOUBLE
56174: EQUAL
56175: IFTRUE 56233
56177: LD_INT 17
56179: DOUBLE
56180: EQUAL
56181: IFTRUE 56233
56183: LD_INT 18
56185: DOUBLE
56186: EQUAL
56187: IFTRUE 56233
56189: LD_INT 19
56191: DOUBLE
56192: EQUAL
56193: IFTRUE 56233
56195: LD_INT 22
56197: DOUBLE
56198: EQUAL
56199: IFTRUE 56233
56201: LD_INT 20
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56233
56207: LD_INT 21
56209: DOUBLE
56210: EQUAL
56211: IFTRUE 56233
56213: LD_INT 23
56215: DOUBLE
56216: EQUAL
56217: IFTRUE 56233
56219: LD_INT 24
56221: DOUBLE
56222: EQUAL
56223: IFTRUE 56233
56225: LD_INT 25
56227: DOUBLE
56228: EQUAL
56229: IFTRUE 56233
56231: GO 56289
56233: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56234: LD_ADDR_VAR 0 9
56238: PUSH
56239: LD_VAR 0 35
56243: PUSH
56244: LD_VAR 0 36
56248: PUSH
56249: LD_VAR 0 37
56253: PUSH
56254: LD_VAR 0 38
56258: PUSH
56259: LD_VAR 0 39
56263: PUSH
56264: LD_VAR 0 40
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_VAR 0 4
56281: PUSH
56282: LD_INT 1
56284: PLUS
56285: ARRAY
56286: ST_TO_ADDR
56287: GO 56654
56289: LD_INT 6
56291: DOUBLE
56292: EQUAL
56293: IFTRUE 56345
56295: LD_INT 7
56297: DOUBLE
56298: EQUAL
56299: IFTRUE 56345
56301: LD_INT 8
56303: DOUBLE
56304: EQUAL
56305: IFTRUE 56345
56307: LD_INT 13
56309: DOUBLE
56310: EQUAL
56311: IFTRUE 56345
56313: LD_INT 12
56315: DOUBLE
56316: EQUAL
56317: IFTRUE 56345
56319: LD_INT 15
56321: DOUBLE
56322: EQUAL
56323: IFTRUE 56345
56325: LD_INT 11
56327: DOUBLE
56328: EQUAL
56329: IFTRUE 56345
56331: LD_INT 14
56333: DOUBLE
56334: EQUAL
56335: IFTRUE 56345
56337: LD_INT 10
56339: DOUBLE
56340: EQUAL
56341: IFTRUE 56345
56343: GO 56401
56345: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56346: LD_ADDR_VAR 0 9
56350: PUSH
56351: LD_VAR 0 41
56355: PUSH
56356: LD_VAR 0 42
56360: PUSH
56361: LD_VAR 0 43
56365: PUSH
56366: LD_VAR 0 44
56370: PUSH
56371: LD_VAR 0 45
56375: PUSH
56376: LD_VAR 0 46
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: PUSH
56389: LD_VAR 0 4
56393: PUSH
56394: LD_INT 1
56396: PLUS
56397: ARRAY
56398: ST_TO_ADDR
56399: GO 56654
56401: LD_INT 36
56403: DOUBLE
56404: EQUAL
56405: IFTRUE 56409
56407: GO 56465
56409: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56410: LD_ADDR_VAR 0 9
56414: PUSH
56415: LD_VAR 0 47
56419: PUSH
56420: LD_VAR 0 48
56424: PUSH
56425: LD_VAR 0 49
56429: PUSH
56430: LD_VAR 0 50
56434: PUSH
56435: LD_VAR 0 51
56439: PUSH
56440: LD_VAR 0 52
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: PUSH
56453: LD_VAR 0 4
56457: PUSH
56458: LD_INT 1
56460: PLUS
56461: ARRAY
56462: ST_TO_ADDR
56463: GO 56654
56465: LD_INT 4
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56491
56471: LD_INT 5
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56491
56477: LD_INT 34
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56491
56483: LD_INT 37
56485: DOUBLE
56486: EQUAL
56487: IFTRUE 56491
56489: GO 56547
56491: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56492: LD_ADDR_VAR 0 9
56496: PUSH
56497: LD_VAR 0 53
56501: PUSH
56502: LD_VAR 0 54
56506: PUSH
56507: LD_VAR 0 55
56511: PUSH
56512: LD_VAR 0 56
56516: PUSH
56517: LD_VAR 0 57
56521: PUSH
56522: LD_VAR 0 58
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: PUSH
56535: LD_VAR 0 4
56539: PUSH
56540: LD_INT 1
56542: PLUS
56543: ARRAY
56544: ST_TO_ADDR
56545: GO 56654
56547: LD_INT 31
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56597
56553: LD_INT 32
56555: DOUBLE
56556: EQUAL
56557: IFTRUE 56597
56559: LD_INT 33
56561: DOUBLE
56562: EQUAL
56563: IFTRUE 56597
56565: LD_INT 27
56567: DOUBLE
56568: EQUAL
56569: IFTRUE 56597
56571: LD_INT 26
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56597
56577: LD_INT 28
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56597
56583: LD_INT 29
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56597
56589: LD_INT 30
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56597
56595: GO 56653
56597: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56598: LD_ADDR_VAR 0 9
56602: PUSH
56603: LD_VAR 0 59
56607: PUSH
56608: LD_VAR 0 60
56612: PUSH
56613: LD_VAR 0 61
56617: PUSH
56618: LD_VAR 0 62
56622: PUSH
56623: LD_VAR 0 63
56627: PUSH
56628: LD_VAR 0 64
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: LD_VAR 0 4
56645: PUSH
56646: LD_INT 1
56648: PLUS
56649: ARRAY
56650: ST_TO_ADDR
56651: GO 56654
56653: POP
// temp_list2 = [ ] ;
56654: LD_ADDR_VAR 0 10
56658: PUSH
56659: EMPTY
56660: ST_TO_ADDR
// for i in temp_list do
56661: LD_ADDR_VAR 0 8
56665: PUSH
56666: LD_VAR 0 9
56670: PUSH
56671: FOR_IN
56672: IFFALSE 56724
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56674: LD_ADDR_VAR 0 10
56678: PUSH
56679: LD_VAR 0 10
56683: PUSH
56684: LD_VAR 0 8
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PUSH
56693: LD_VAR 0 2
56697: PLUS
56698: PUSH
56699: LD_VAR 0 8
56703: PUSH
56704: LD_INT 2
56706: ARRAY
56707: PUSH
56708: LD_VAR 0 3
56712: PLUS
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: ADD
56721: ST_TO_ADDR
56722: GO 56671
56724: POP
56725: POP
// result = temp_list2 ;
56726: LD_ADDR_VAR 0 7
56730: PUSH
56731: LD_VAR 0 10
56735: ST_TO_ADDR
// end ;
56736: LD_VAR 0 7
56740: RET
// export function EnemyInRange ( unit , dist ) ; begin
56741: LD_INT 0
56743: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56744: LD_ADDR_VAR 0 3
56748: PUSH
56749: LD_VAR 0 1
56753: PPUSH
56754: CALL_OW 255
56758: PPUSH
56759: LD_VAR 0 1
56763: PPUSH
56764: CALL_OW 250
56768: PPUSH
56769: LD_VAR 0 1
56773: PPUSH
56774: CALL_OW 251
56778: PPUSH
56779: LD_VAR 0 2
56783: PPUSH
56784: CALL 30845 0 4
56788: PUSH
56789: LD_INT 4
56791: ARRAY
56792: ST_TO_ADDR
// end ;
56793: LD_VAR 0 3
56797: RET
// export function PlayerSeeMe ( unit ) ; begin
56798: LD_INT 0
56800: PPUSH
// result := See ( your_side , unit ) ;
56801: LD_ADDR_VAR 0 2
56805: PUSH
56806: LD_OWVAR 2
56810: PPUSH
56811: LD_VAR 0 1
56815: PPUSH
56816: CALL_OW 292
56820: ST_TO_ADDR
// end ;
56821: LD_VAR 0 2
56825: RET
// export function ReverseDir ( unit ) ; begin
56826: LD_INT 0
56828: PPUSH
// if not unit then
56829: LD_VAR 0 1
56833: NOT
56834: IFFALSE 56838
// exit ;
56836: GO 56861
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56838: LD_ADDR_VAR 0 2
56842: PUSH
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 254
56852: PUSH
56853: LD_INT 3
56855: PLUS
56856: PUSH
56857: LD_INT 6
56859: MOD
56860: ST_TO_ADDR
// end ;
56861: LD_VAR 0 2
56865: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56866: LD_INT 0
56868: PPUSH
56869: PPUSH
56870: PPUSH
56871: PPUSH
56872: PPUSH
// if not hexes then
56873: LD_VAR 0 2
56877: NOT
56878: IFFALSE 56882
// exit ;
56880: GO 57030
// dist := 9999 ;
56882: LD_ADDR_VAR 0 5
56886: PUSH
56887: LD_INT 9999
56889: ST_TO_ADDR
// for i = 1 to hexes do
56890: LD_ADDR_VAR 0 4
56894: PUSH
56895: DOUBLE
56896: LD_INT 1
56898: DEC
56899: ST_TO_ADDR
56900: LD_VAR 0 2
56904: PUSH
56905: FOR_TO
56906: IFFALSE 57018
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56908: LD_VAR 0 1
56912: PPUSH
56913: LD_VAR 0 2
56917: PUSH
56918: LD_VAR 0 4
56922: ARRAY
56923: PUSH
56924: LD_INT 1
56926: ARRAY
56927: PPUSH
56928: LD_VAR 0 2
56932: PUSH
56933: LD_VAR 0 4
56937: ARRAY
56938: PUSH
56939: LD_INT 2
56941: ARRAY
56942: PPUSH
56943: CALL_OW 297
56947: PUSH
56948: LD_VAR 0 5
56952: LESS
56953: IFFALSE 57016
// begin hex := hexes [ i ] ;
56955: LD_ADDR_VAR 0 7
56959: PUSH
56960: LD_VAR 0 2
56964: PUSH
56965: LD_VAR 0 4
56969: ARRAY
56970: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56971: LD_ADDR_VAR 0 5
56975: PUSH
56976: LD_VAR 0 1
56980: PPUSH
56981: LD_VAR 0 2
56985: PUSH
56986: LD_VAR 0 4
56990: ARRAY
56991: PUSH
56992: LD_INT 1
56994: ARRAY
56995: PPUSH
56996: LD_VAR 0 2
57000: PUSH
57001: LD_VAR 0 4
57005: ARRAY
57006: PUSH
57007: LD_INT 2
57009: ARRAY
57010: PPUSH
57011: CALL_OW 297
57015: ST_TO_ADDR
// end ; end ;
57016: GO 56905
57018: POP
57019: POP
// result := hex ;
57020: LD_ADDR_VAR 0 3
57024: PUSH
57025: LD_VAR 0 7
57029: ST_TO_ADDR
// end ;
57030: LD_VAR 0 3
57034: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57035: LD_INT 0
57037: PPUSH
57038: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57039: LD_VAR 0 1
57043: NOT
57044: PUSH
57045: LD_VAR 0 1
57049: PUSH
57050: LD_INT 21
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 23
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PPUSH
57074: CALL_OW 69
57078: IN
57079: NOT
57080: OR
57081: IFFALSE 57085
// exit ;
57083: GO 57132
// for i = 1 to 3 do
57085: LD_ADDR_VAR 0 3
57089: PUSH
57090: DOUBLE
57091: LD_INT 1
57093: DEC
57094: ST_TO_ADDR
57095: LD_INT 3
57097: PUSH
57098: FOR_TO
57099: IFFALSE 57130
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57101: LD_VAR 0 1
57105: PPUSH
57106: CALL_OW 250
57110: PPUSH
57111: LD_VAR 0 1
57115: PPUSH
57116: CALL_OW 251
57120: PPUSH
57121: LD_INT 1
57123: PPUSH
57124: CALL_OW 453
57128: GO 57098
57130: POP
57131: POP
// end ;
57132: LD_VAR 0 2
57136: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57137: LD_INT 0
57139: PPUSH
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57145: LD_VAR 0 1
57149: NOT
57150: PUSH
57151: LD_VAR 0 2
57155: NOT
57156: OR
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: CALL_OW 314
57167: OR
57168: IFFALSE 57172
// exit ;
57170: GO 57613
// x := GetX ( enemy_unit ) ;
57172: LD_ADDR_VAR 0 7
57176: PUSH
57177: LD_VAR 0 2
57181: PPUSH
57182: CALL_OW 250
57186: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57187: LD_ADDR_VAR 0 8
57191: PUSH
57192: LD_VAR 0 2
57196: PPUSH
57197: CALL_OW 251
57201: ST_TO_ADDR
// if not x or not y then
57202: LD_VAR 0 7
57206: NOT
57207: PUSH
57208: LD_VAR 0 8
57212: NOT
57213: OR
57214: IFFALSE 57218
// exit ;
57216: GO 57613
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57218: LD_ADDR_VAR 0 6
57222: PUSH
57223: LD_VAR 0 7
57227: PPUSH
57228: LD_INT 0
57230: PPUSH
57231: LD_INT 4
57233: PPUSH
57234: CALL_OW 272
57238: PUSH
57239: LD_VAR 0 8
57243: PPUSH
57244: LD_INT 0
57246: PPUSH
57247: LD_INT 4
57249: PPUSH
57250: CALL_OW 273
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_VAR 0 7
57263: PPUSH
57264: LD_INT 1
57266: PPUSH
57267: LD_INT 4
57269: PPUSH
57270: CALL_OW 272
57274: PUSH
57275: LD_VAR 0 8
57279: PPUSH
57280: LD_INT 1
57282: PPUSH
57283: LD_INT 4
57285: PPUSH
57286: CALL_OW 273
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_VAR 0 7
57299: PPUSH
57300: LD_INT 2
57302: PPUSH
57303: LD_INT 4
57305: PPUSH
57306: CALL_OW 272
57310: PUSH
57311: LD_VAR 0 8
57315: PPUSH
57316: LD_INT 2
57318: PPUSH
57319: LD_INT 4
57321: PPUSH
57322: CALL_OW 273
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_VAR 0 7
57335: PPUSH
57336: LD_INT 3
57338: PPUSH
57339: LD_INT 4
57341: PPUSH
57342: CALL_OW 272
57346: PUSH
57347: LD_VAR 0 8
57351: PPUSH
57352: LD_INT 3
57354: PPUSH
57355: LD_INT 4
57357: PPUSH
57358: CALL_OW 273
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_VAR 0 7
57371: PPUSH
57372: LD_INT 4
57374: PPUSH
57375: LD_INT 4
57377: PPUSH
57378: CALL_OW 272
57382: PUSH
57383: LD_VAR 0 8
57387: PPUSH
57388: LD_INT 4
57390: PPUSH
57391: LD_INT 4
57393: PPUSH
57394: CALL_OW 273
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_VAR 0 7
57407: PPUSH
57408: LD_INT 5
57410: PPUSH
57411: LD_INT 4
57413: PPUSH
57414: CALL_OW 272
57418: PUSH
57419: LD_VAR 0 8
57423: PPUSH
57424: LD_INT 5
57426: PPUSH
57427: LD_INT 4
57429: PPUSH
57430: CALL_OW 273
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// for i = tmp downto 1 do
57447: LD_ADDR_VAR 0 4
57451: PUSH
57452: DOUBLE
57453: LD_VAR 0 6
57457: INC
57458: ST_TO_ADDR
57459: LD_INT 1
57461: PUSH
57462: FOR_DOWNTO
57463: IFFALSE 57564
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57465: LD_VAR 0 6
57469: PUSH
57470: LD_VAR 0 4
57474: ARRAY
57475: PUSH
57476: LD_INT 1
57478: ARRAY
57479: PPUSH
57480: LD_VAR 0 6
57484: PUSH
57485: LD_VAR 0 4
57489: ARRAY
57490: PUSH
57491: LD_INT 2
57493: ARRAY
57494: PPUSH
57495: CALL_OW 488
57499: NOT
57500: PUSH
57501: LD_VAR 0 6
57505: PUSH
57506: LD_VAR 0 4
57510: ARRAY
57511: PUSH
57512: LD_INT 1
57514: ARRAY
57515: PPUSH
57516: LD_VAR 0 6
57520: PUSH
57521: LD_VAR 0 4
57525: ARRAY
57526: PUSH
57527: LD_INT 2
57529: ARRAY
57530: PPUSH
57531: CALL_OW 428
57535: PUSH
57536: LD_INT 0
57538: NONEQUAL
57539: OR
57540: IFFALSE 57562
// tmp := Delete ( tmp , i ) ;
57542: LD_ADDR_VAR 0 6
57546: PUSH
57547: LD_VAR 0 6
57551: PPUSH
57552: LD_VAR 0 4
57556: PPUSH
57557: CALL_OW 3
57561: ST_TO_ADDR
57562: GO 57462
57564: POP
57565: POP
// j := GetClosestHex ( unit , tmp ) ;
57566: LD_ADDR_VAR 0 5
57570: PUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: LD_VAR 0 6
57580: PPUSH
57581: CALL 56866 0 2
57585: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57586: LD_VAR 0 1
57590: PPUSH
57591: LD_VAR 0 5
57595: PUSH
57596: LD_INT 1
57598: ARRAY
57599: PPUSH
57600: LD_VAR 0 5
57604: PUSH
57605: LD_INT 2
57607: ARRAY
57608: PPUSH
57609: CALL_OW 111
// end ;
57613: LD_VAR 0 3
57617: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57618: LD_INT 0
57620: PPUSH
57621: PPUSH
57622: PPUSH
// uc_side = 0 ;
57623: LD_ADDR_OWVAR 20
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// uc_nation = 0 ;
57631: LD_ADDR_OWVAR 21
57635: PUSH
57636: LD_INT 0
57638: ST_TO_ADDR
// InitHc ;
57639: CALL_OW 19
// InitVc ;
57643: CALL_OW 20
// if mastodonts then
57647: LD_VAR 0 6
57651: IFFALSE 57718
// for i = 1 to mastodonts do
57653: LD_ADDR_VAR 0 11
57657: PUSH
57658: DOUBLE
57659: LD_INT 1
57661: DEC
57662: ST_TO_ADDR
57663: LD_VAR 0 6
57667: PUSH
57668: FOR_TO
57669: IFFALSE 57716
// begin vc_chassis := 31 ;
57671: LD_ADDR_OWVAR 37
57675: PUSH
57676: LD_INT 31
57678: ST_TO_ADDR
// vc_control := control_rider ;
57679: LD_ADDR_OWVAR 38
57683: PUSH
57684: LD_INT 4
57686: ST_TO_ADDR
// animal := CreateVehicle ;
57687: LD_ADDR_VAR 0 12
57691: PUSH
57692: CALL_OW 45
57696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57697: LD_VAR 0 12
57701: PPUSH
57702: LD_VAR 0 8
57706: PPUSH
57707: LD_INT 0
57709: PPUSH
57710: CALL 59787 0 3
// end ;
57714: GO 57668
57716: POP
57717: POP
// if horses then
57718: LD_VAR 0 5
57722: IFFALSE 57789
// for i = 1 to horses do
57724: LD_ADDR_VAR 0 11
57728: PUSH
57729: DOUBLE
57730: LD_INT 1
57732: DEC
57733: ST_TO_ADDR
57734: LD_VAR 0 5
57738: PUSH
57739: FOR_TO
57740: IFFALSE 57787
// begin hc_class := 21 ;
57742: LD_ADDR_OWVAR 28
57746: PUSH
57747: LD_INT 21
57749: ST_TO_ADDR
// hc_gallery :=  ;
57750: LD_ADDR_OWVAR 33
57754: PUSH
57755: LD_STRING 
57757: ST_TO_ADDR
// animal := CreateHuman ;
57758: LD_ADDR_VAR 0 12
57762: PUSH
57763: CALL_OW 44
57767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57768: LD_VAR 0 12
57772: PPUSH
57773: LD_VAR 0 8
57777: PPUSH
57778: LD_INT 0
57780: PPUSH
57781: CALL 59787 0 3
// end ;
57785: GO 57739
57787: POP
57788: POP
// if birds then
57789: LD_VAR 0 1
57793: IFFALSE 57860
// for i = 1 to birds do
57795: LD_ADDR_VAR 0 11
57799: PUSH
57800: DOUBLE
57801: LD_INT 1
57803: DEC
57804: ST_TO_ADDR
57805: LD_VAR 0 1
57809: PUSH
57810: FOR_TO
57811: IFFALSE 57858
// begin hc_class = 18 ;
57813: LD_ADDR_OWVAR 28
57817: PUSH
57818: LD_INT 18
57820: ST_TO_ADDR
// hc_gallery =  ;
57821: LD_ADDR_OWVAR 33
57825: PUSH
57826: LD_STRING 
57828: ST_TO_ADDR
// animal := CreateHuman ;
57829: LD_ADDR_VAR 0 12
57833: PUSH
57834: CALL_OW 44
57838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57839: LD_VAR 0 12
57843: PPUSH
57844: LD_VAR 0 8
57848: PPUSH
57849: LD_INT 0
57851: PPUSH
57852: CALL 59787 0 3
// end ;
57856: GO 57810
57858: POP
57859: POP
// if tigers then
57860: LD_VAR 0 2
57864: IFFALSE 57948
// for i = 1 to tigers do
57866: LD_ADDR_VAR 0 11
57870: PUSH
57871: DOUBLE
57872: LD_INT 1
57874: DEC
57875: ST_TO_ADDR
57876: LD_VAR 0 2
57880: PUSH
57881: FOR_TO
57882: IFFALSE 57946
// begin hc_class = class_tiger ;
57884: LD_ADDR_OWVAR 28
57888: PUSH
57889: LD_INT 14
57891: ST_TO_ADDR
// hc_gallery =  ;
57892: LD_ADDR_OWVAR 33
57896: PUSH
57897: LD_STRING 
57899: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57900: LD_ADDR_OWVAR 35
57904: PUSH
57905: LD_INT 7
57907: NEG
57908: PPUSH
57909: LD_INT 7
57911: PPUSH
57912: CALL_OW 12
57916: ST_TO_ADDR
// animal := CreateHuman ;
57917: LD_ADDR_VAR 0 12
57921: PUSH
57922: CALL_OW 44
57926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57927: LD_VAR 0 12
57931: PPUSH
57932: LD_VAR 0 8
57936: PPUSH
57937: LD_INT 0
57939: PPUSH
57940: CALL 59787 0 3
// end ;
57944: GO 57881
57946: POP
57947: POP
// if apemans then
57948: LD_VAR 0 3
57952: IFFALSE 58075
// for i = 1 to apemans do
57954: LD_ADDR_VAR 0 11
57958: PUSH
57959: DOUBLE
57960: LD_INT 1
57962: DEC
57963: ST_TO_ADDR
57964: LD_VAR 0 3
57968: PUSH
57969: FOR_TO
57970: IFFALSE 58073
// begin hc_class = class_apeman ;
57972: LD_ADDR_OWVAR 28
57976: PUSH
57977: LD_INT 12
57979: ST_TO_ADDR
// hc_gallery =  ;
57980: LD_ADDR_OWVAR 33
57984: PUSH
57985: LD_STRING 
57987: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57988: LD_ADDR_OWVAR 35
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PPUSH
57997: LD_INT 5
57999: PPUSH
58000: CALL_OW 12
58004: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58005: LD_ADDR_OWVAR 31
58009: PUSH
58010: LD_INT 1
58012: PPUSH
58013: LD_INT 3
58015: PPUSH
58016: CALL_OW 12
58020: PUSH
58021: LD_INT 1
58023: PPUSH
58024: LD_INT 3
58026: PPUSH
58027: CALL_OW 12
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// animal := CreateHuman ;
58044: LD_ADDR_VAR 0 12
58048: PUSH
58049: CALL_OW 44
58053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58054: LD_VAR 0 12
58058: PPUSH
58059: LD_VAR 0 8
58063: PPUSH
58064: LD_INT 0
58066: PPUSH
58067: CALL 59787 0 3
// end ;
58071: GO 57969
58073: POP
58074: POP
// if enchidnas then
58075: LD_VAR 0 4
58079: IFFALSE 58146
// for i = 1 to enchidnas do
58081: LD_ADDR_VAR 0 11
58085: PUSH
58086: DOUBLE
58087: LD_INT 1
58089: DEC
58090: ST_TO_ADDR
58091: LD_VAR 0 4
58095: PUSH
58096: FOR_TO
58097: IFFALSE 58144
// begin hc_class = 13 ;
58099: LD_ADDR_OWVAR 28
58103: PUSH
58104: LD_INT 13
58106: ST_TO_ADDR
// hc_gallery =  ;
58107: LD_ADDR_OWVAR 33
58111: PUSH
58112: LD_STRING 
58114: ST_TO_ADDR
// animal := CreateHuman ;
58115: LD_ADDR_VAR 0 12
58119: PUSH
58120: CALL_OW 44
58124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58125: LD_VAR 0 12
58129: PPUSH
58130: LD_VAR 0 8
58134: PPUSH
58135: LD_INT 0
58137: PPUSH
58138: CALL 59787 0 3
// end ;
58142: GO 58096
58144: POP
58145: POP
// if fishes then
58146: LD_VAR 0 7
58150: IFFALSE 58217
// for i = 1 to fishes do
58152: LD_ADDR_VAR 0 11
58156: PUSH
58157: DOUBLE
58158: LD_INT 1
58160: DEC
58161: ST_TO_ADDR
58162: LD_VAR 0 7
58166: PUSH
58167: FOR_TO
58168: IFFALSE 58215
// begin hc_class = 20 ;
58170: LD_ADDR_OWVAR 28
58174: PUSH
58175: LD_INT 20
58177: ST_TO_ADDR
// hc_gallery =  ;
58178: LD_ADDR_OWVAR 33
58182: PUSH
58183: LD_STRING 
58185: ST_TO_ADDR
// animal := CreateHuman ;
58186: LD_ADDR_VAR 0 12
58190: PUSH
58191: CALL_OW 44
58195: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58196: LD_VAR 0 12
58200: PPUSH
58201: LD_VAR 0 9
58205: PPUSH
58206: LD_INT 0
58208: PPUSH
58209: CALL 59787 0 3
// end ;
58213: GO 58167
58215: POP
58216: POP
// end ;
58217: LD_VAR 0 10
58221: RET
// export function WantHeal ( sci , unit ) ; begin
58222: LD_INT 0
58224: PPUSH
// if GetTaskList ( sci ) > 0 then
58225: LD_VAR 0 1
58229: PPUSH
58230: CALL_OW 437
58234: PUSH
58235: LD_INT 0
58237: GREATER
58238: IFFALSE 58308
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 437
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PUSH
58254: LD_INT 1
58256: ARRAY
58257: PUSH
58258: LD_STRING l
58260: EQUAL
58261: PUSH
58262: LD_VAR 0 1
58266: PPUSH
58267: CALL_OW 437
58271: PUSH
58272: LD_INT 1
58274: ARRAY
58275: PUSH
58276: LD_INT 4
58278: ARRAY
58279: PUSH
58280: LD_VAR 0 2
58284: EQUAL
58285: AND
58286: IFFALSE 58298
// result := true else
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_INT 1
58295: ST_TO_ADDR
58296: GO 58306
// result := false ;
58298: LD_ADDR_VAR 0 3
58302: PUSH
58303: LD_INT 0
58305: ST_TO_ADDR
// end else
58306: GO 58316
// result := false ;
58308: LD_ADDR_VAR 0 3
58312: PUSH
58313: LD_INT 0
58315: ST_TO_ADDR
// end ;
58316: LD_VAR 0 3
58320: RET
// export function HealTarget ( sci ) ; begin
58321: LD_INT 0
58323: PPUSH
// if not sci then
58324: LD_VAR 0 1
58328: NOT
58329: IFFALSE 58333
// exit ;
58331: GO 58398
// result := 0 ;
58333: LD_ADDR_VAR 0 2
58337: PUSH
58338: LD_INT 0
58340: ST_TO_ADDR
// if GetTaskList ( sci ) then
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 437
58350: IFFALSE 58398
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58352: LD_VAR 0 1
58356: PPUSH
58357: CALL_OW 437
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PUSH
58370: LD_STRING l
58372: EQUAL
58373: IFFALSE 58398
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58375: LD_ADDR_VAR 0 2
58379: PUSH
58380: LD_VAR 0 1
58384: PPUSH
58385: CALL_OW 437
58389: PUSH
58390: LD_INT 1
58392: ARRAY
58393: PUSH
58394: LD_INT 4
58396: ARRAY
58397: ST_TO_ADDR
// end ;
58398: LD_VAR 0 2
58402: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58403: LD_INT 0
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
// if not base_units then
58409: LD_VAR 0 1
58413: NOT
58414: IFFALSE 58418
// exit ;
58416: GO 58505
// result := false ;
58418: LD_ADDR_VAR 0 2
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58426: LD_ADDR_VAR 0 5
58430: PUSH
58431: LD_VAR 0 1
58435: PPUSH
58436: LD_INT 21
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PPUSH
58446: CALL_OW 72
58450: ST_TO_ADDR
// if not tmp then
58451: LD_VAR 0 5
58455: NOT
58456: IFFALSE 58460
// exit ;
58458: GO 58505
// for i in tmp do
58460: LD_ADDR_VAR 0 3
58464: PUSH
58465: LD_VAR 0 5
58469: PUSH
58470: FOR_IN
58471: IFFALSE 58503
// begin result := EnemyInRange ( i , 22 ) ;
58473: LD_ADDR_VAR 0 2
58477: PUSH
58478: LD_VAR 0 3
58482: PPUSH
58483: LD_INT 22
58485: PPUSH
58486: CALL 56741 0 2
58490: ST_TO_ADDR
// if result then
58491: LD_VAR 0 2
58495: IFFALSE 58501
// exit ;
58497: POP
58498: POP
58499: GO 58505
// end ;
58501: GO 58470
58503: POP
58504: POP
// end ;
58505: LD_VAR 0 2
58509: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58510: LD_INT 0
58512: PPUSH
58513: PPUSH
// if not units then
58514: LD_VAR 0 1
58518: NOT
58519: IFFALSE 58523
// exit ;
58521: GO 58593
// result := [ ] ;
58523: LD_ADDR_VAR 0 3
58527: PUSH
58528: EMPTY
58529: ST_TO_ADDR
// for i in units do
58530: LD_ADDR_VAR 0 4
58534: PUSH
58535: LD_VAR 0 1
58539: PUSH
58540: FOR_IN
58541: IFFALSE 58591
// if GetTag ( i ) = tag then
58543: LD_VAR 0 4
58547: PPUSH
58548: CALL_OW 110
58552: PUSH
58553: LD_VAR 0 2
58557: EQUAL
58558: IFFALSE 58589
// result := Insert ( result , result + 1 , i ) ;
58560: LD_ADDR_VAR 0 3
58564: PUSH
58565: LD_VAR 0 3
58569: PPUSH
58570: LD_VAR 0 3
58574: PUSH
58575: LD_INT 1
58577: PLUS
58578: PPUSH
58579: LD_VAR 0 4
58583: PPUSH
58584: CALL_OW 2
58588: ST_TO_ADDR
58589: GO 58540
58591: POP
58592: POP
// end ;
58593: LD_VAR 0 3
58597: RET
// export function IsDriver ( un ) ; begin
58598: LD_INT 0
58600: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58601: LD_ADDR_VAR 0 2
58605: PUSH
58606: LD_VAR 0 1
58610: PUSH
58611: LD_INT 55
58613: PUSH
58614: EMPTY
58615: LIST
58616: PPUSH
58617: CALL_OW 69
58621: IN
58622: ST_TO_ADDR
// end ;
58623: LD_VAR 0 2
58627: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58628: LD_INT 0
58630: PPUSH
58631: PPUSH
// list := [ ] ;
58632: LD_ADDR_VAR 0 5
58636: PUSH
58637: EMPTY
58638: ST_TO_ADDR
// case d of 0 :
58639: LD_VAR 0 3
58643: PUSH
58644: LD_INT 0
58646: DOUBLE
58647: EQUAL
58648: IFTRUE 58652
58650: GO 58785
58652: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58653: LD_ADDR_VAR 0 5
58657: PUSH
58658: LD_VAR 0 1
58662: PUSH
58663: LD_INT 4
58665: MINUS
58666: PUSH
58667: LD_VAR 0 2
58671: PUSH
58672: LD_INT 4
58674: MINUS
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: PUSH
58684: LD_VAR 0 1
58688: PUSH
58689: LD_INT 3
58691: MINUS
58692: PUSH
58693: LD_VAR 0 2
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: LIST
58705: PUSH
58706: LD_VAR 0 1
58710: PUSH
58711: LD_INT 4
58713: PLUS
58714: PUSH
58715: LD_VAR 0 2
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: PUSH
58728: LD_VAR 0 1
58732: PUSH
58733: LD_INT 3
58735: PLUS
58736: PUSH
58737: LD_VAR 0 2
58741: PUSH
58742: LD_INT 3
58744: PLUS
58745: PUSH
58746: LD_INT 5
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PUSH
58754: LD_VAR 0 1
58758: PUSH
58759: LD_VAR 0 2
58763: PUSH
58764: LD_INT 4
58766: PLUS
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// end ; 1 :
58783: GO 59483
58785: LD_INT 1
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58793
58791: GO 58926
58793: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58794: LD_ADDR_VAR 0 5
58798: PUSH
58799: LD_VAR 0 1
58803: PUSH
58804: LD_VAR 0 2
58808: PUSH
58809: LD_INT 4
58811: MINUS
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: PUSH
58821: LD_VAR 0 1
58825: PUSH
58826: LD_INT 3
58828: MINUS
58829: PUSH
58830: LD_VAR 0 2
58834: PUSH
58835: LD_INT 3
58837: MINUS
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: PUSH
58847: LD_VAR 0 1
58851: PUSH
58852: LD_INT 4
58854: MINUS
58855: PUSH
58856: LD_VAR 0 2
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: PUSH
58869: LD_VAR 0 1
58873: PUSH
58874: LD_VAR 0 2
58878: PUSH
58879: LD_INT 3
58881: PLUS
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: PUSH
58891: LD_VAR 0 1
58895: PUSH
58896: LD_INT 4
58898: PLUS
58899: PUSH
58900: LD_VAR 0 2
58904: PUSH
58905: LD_INT 4
58907: PLUS
58908: PUSH
58909: LD_INT 5
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// end ; 2 :
58924: GO 59483
58926: LD_INT 2
58928: DOUBLE
58929: EQUAL
58930: IFTRUE 58934
58932: GO 59063
58934: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58935: LD_ADDR_VAR 0 5
58939: PUSH
58940: LD_VAR 0 1
58944: PUSH
58945: LD_VAR 0 2
58949: PUSH
58950: LD_INT 3
58952: MINUS
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: PUSH
58962: LD_VAR 0 1
58966: PUSH
58967: LD_INT 4
58969: PLUS
58970: PUSH
58971: LD_VAR 0 2
58975: PUSH
58976: LD_INT 4
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: PUSH
58984: LD_VAR 0 1
58988: PUSH
58989: LD_VAR 0 2
58993: PUSH
58994: LD_INT 4
58996: PLUS
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: PUSH
59006: LD_VAR 0 1
59010: PUSH
59011: LD_INT 3
59013: MINUS
59014: PUSH
59015: LD_VAR 0 2
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: PUSH
59028: LD_VAR 0 1
59032: PUSH
59033: LD_INT 4
59035: MINUS
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: LD_INT 4
59044: MINUS
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// end ; 3 :
59061: GO 59483
59063: LD_INT 3
59065: DOUBLE
59066: EQUAL
59067: IFTRUE 59071
59069: GO 59204
59071: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59072: LD_ADDR_VAR 0 5
59076: PUSH
59077: LD_VAR 0 1
59081: PUSH
59082: LD_INT 3
59084: PLUS
59085: PUSH
59086: LD_VAR 0 2
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: PUSH
59099: LD_VAR 0 1
59103: PUSH
59104: LD_INT 4
59106: PLUS
59107: PUSH
59108: LD_VAR 0 2
59112: PUSH
59113: LD_INT 4
59115: PLUS
59116: PUSH
59117: LD_INT 5
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: PUSH
59125: LD_VAR 0 1
59129: PUSH
59130: LD_INT 4
59132: MINUS
59133: PUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: PUSH
59147: LD_VAR 0 1
59151: PUSH
59152: LD_VAR 0 2
59156: PUSH
59157: LD_INT 4
59159: MINUS
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: PUSH
59169: LD_VAR 0 1
59173: PUSH
59174: LD_INT 3
59176: MINUS
59177: PUSH
59178: LD_VAR 0 2
59182: PUSH
59183: LD_INT 3
59185: MINUS
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// end ; 4 :
59202: GO 59483
59204: LD_INT 4
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59212
59210: GO 59345
59212: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59213: LD_ADDR_VAR 0 5
59217: PUSH
59218: LD_VAR 0 1
59222: PUSH
59223: LD_VAR 0 2
59227: PUSH
59228: LD_INT 4
59230: PLUS
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: PUSH
59240: LD_VAR 0 1
59244: PUSH
59245: LD_INT 3
59247: PLUS
59248: PUSH
59249: LD_VAR 0 2
59253: PUSH
59254: LD_INT 3
59256: PLUS
59257: PUSH
59258: LD_INT 5
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: PUSH
59266: LD_VAR 0 1
59270: PUSH
59271: LD_INT 4
59273: PLUS
59274: PUSH
59275: LD_VAR 0 2
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: PUSH
59288: LD_VAR 0 1
59292: PUSH
59293: LD_VAR 0 2
59297: PUSH
59298: LD_INT 3
59300: MINUS
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: PUSH
59310: LD_VAR 0 1
59314: PUSH
59315: LD_INT 4
59317: MINUS
59318: PUSH
59319: LD_VAR 0 2
59323: PUSH
59324: LD_INT 4
59326: MINUS
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// end ; 5 :
59343: GO 59483
59345: LD_INT 5
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59353
59351: GO 59482
59353: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59354: LD_ADDR_VAR 0 5
59358: PUSH
59359: LD_VAR 0 1
59363: PUSH
59364: LD_INT 4
59366: MINUS
59367: PUSH
59368: LD_VAR 0 2
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: PUSH
59381: LD_VAR 0 1
59385: PUSH
59386: LD_VAR 0 2
59390: PUSH
59391: LD_INT 4
59393: MINUS
59394: PUSH
59395: LD_INT 3
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: PUSH
59403: LD_VAR 0 1
59407: PUSH
59408: LD_INT 4
59410: PLUS
59411: PUSH
59412: LD_VAR 0 2
59416: PUSH
59417: LD_INT 4
59419: PLUS
59420: PUSH
59421: LD_INT 5
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: PUSH
59429: LD_VAR 0 1
59433: PUSH
59434: LD_INT 3
59436: PLUS
59437: PUSH
59438: LD_VAR 0 2
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: PUSH
59451: LD_VAR 0 1
59455: PUSH
59456: LD_VAR 0 2
59460: PUSH
59461: LD_INT 3
59463: PLUS
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// end ; end ;
59480: GO 59483
59482: POP
// result := list ;
59483: LD_ADDR_VAR 0 4
59487: PUSH
59488: LD_VAR 0 5
59492: ST_TO_ADDR
// end ;
59493: LD_VAR 0 4
59497: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59498: LD_INT 0
59500: PPUSH
59501: PPUSH
59502: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59503: LD_VAR 0 1
59507: NOT
59508: PUSH
59509: LD_VAR 0 2
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: IN
59532: NOT
59533: OR
59534: IFFALSE 59538
// exit ;
59536: GO 59630
// tmp := [ ] ;
59538: LD_ADDR_VAR 0 5
59542: PUSH
59543: EMPTY
59544: ST_TO_ADDR
// for i in units do
59545: LD_ADDR_VAR 0 4
59549: PUSH
59550: LD_VAR 0 1
59554: PUSH
59555: FOR_IN
59556: IFFALSE 59599
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59558: LD_ADDR_VAR 0 5
59562: PUSH
59563: LD_VAR 0 5
59567: PPUSH
59568: LD_VAR 0 5
59572: PUSH
59573: LD_INT 1
59575: PLUS
59576: PPUSH
59577: LD_VAR 0 4
59581: PPUSH
59582: LD_VAR 0 2
59586: PPUSH
59587: CALL_OW 259
59591: PPUSH
59592: CALL_OW 2
59596: ST_TO_ADDR
59597: GO 59555
59599: POP
59600: POP
// if not tmp then
59601: LD_VAR 0 5
59605: NOT
59606: IFFALSE 59610
// exit ;
59608: GO 59630
// result := SortListByListDesc ( units , tmp ) ;
59610: LD_ADDR_VAR 0 3
59614: PUSH
59615: LD_VAR 0 1
59619: PPUSH
59620: LD_VAR 0 5
59624: PPUSH
59625: CALL_OW 77
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 3
59634: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
59639: PPUSH
// x := GetX ( building ) ;
59640: LD_ADDR_VAR 0 4
59644: PUSH
59645: LD_VAR 0 2
59649: PPUSH
59650: CALL_OW 250
59654: ST_TO_ADDR
// y := GetY ( building ) ;
59655: LD_ADDR_VAR 0 5
59659: PUSH
59660: LD_VAR 0 2
59664: PPUSH
59665: CALL_OW 251
59669: ST_TO_ADDR
// if GetTaskList ( unit ) then
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 437
59679: IFFALSE 59774
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59681: LD_STRING e
59683: PUSH
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 437
59693: PUSH
59694: LD_INT 1
59696: ARRAY
59697: PUSH
59698: LD_INT 1
59700: ARRAY
59701: EQUAL
59702: PUSH
59703: LD_VAR 0 4
59707: PUSH
59708: LD_VAR 0 1
59712: PPUSH
59713: CALL_OW 437
59717: PUSH
59718: LD_INT 1
59720: ARRAY
59721: PUSH
59722: LD_INT 2
59724: ARRAY
59725: EQUAL
59726: AND
59727: PUSH
59728: LD_VAR 0 5
59732: PUSH
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 437
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PUSH
59747: LD_INT 3
59749: ARRAY
59750: EQUAL
59751: AND
59752: IFFALSE 59764
// result := true else
59754: LD_ADDR_VAR 0 3
59758: PUSH
59759: LD_INT 1
59761: ST_TO_ADDR
59762: GO 59772
// result := false ;
59764: LD_ADDR_VAR 0 3
59768: PUSH
59769: LD_INT 0
59771: ST_TO_ADDR
// end else
59772: GO 59782
// result := false ;
59774: LD_ADDR_VAR 0 3
59778: PUSH
59779: LD_INT 0
59781: ST_TO_ADDR
// end ;
59782: LD_VAR 0 3
59786: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59787: LD_INT 0
59789: PPUSH
59790: PPUSH
59791: PPUSH
59792: PPUSH
// if not unit or not area then
59793: LD_VAR 0 1
59797: NOT
59798: PUSH
59799: LD_VAR 0 2
59803: NOT
59804: OR
59805: IFFALSE 59809
// exit ;
59807: GO 59973
// tmp := AreaToList ( area , i ) ;
59809: LD_ADDR_VAR 0 6
59813: PUSH
59814: LD_VAR 0 2
59818: PPUSH
59819: LD_VAR 0 5
59823: PPUSH
59824: CALL_OW 517
59828: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59829: LD_ADDR_VAR 0 5
59833: PUSH
59834: DOUBLE
59835: LD_INT 1
59837: DEC
59838: ST_TO_ADDR
59839: LD_VAR 0 6
59843: PUSH
59844: LD_INT 1
59846: ARRAY
59847: PUSH
59848: FOR_TO
59849: IFFALSE 59971
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59851: LD_ADDR_VAR 0 7
59855: PUSH
59856: LD_VAR 0 6
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PUSH
59865: LD_VAR 0 5
59869: ARRAY
59870: PUSH
59871: LD_VAR 0 6
59875: PUSH
59876: LD_INT 2
59878: ARRAY
59879: PUSH
59880: LD_VAR 0 5
59884: ARRAY
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59890: LD_VAR 0 7
59894: PUSH
59895: LD_INT 1
59897: ARRAY
59898: PPUSH
59899: LD_VAR 0 7
59903: PUSH
59904: LD_INT 2
59906: ARRAY
59907: PPUSH
59908: CALL_OW 428
59912: PUSH
59913: LD_INT 0
59915: EQUAL
59916: IFFALSE 59969
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59918: LD_VAR 0 1
59922: PPUSH
59923: LD_VAR 0 7
59927: PUSH
59928: LD_INT 1
59930: ARRAY
59931: PPUSH
59932: LD_VAR 0 7
59936: PUSH
59937: LD_INT 2
59939: ARRAY
59940: PPUSH
59941: LD_VAR 0 3
59945: PPUSH
59946: CALL_OW 48
// result := IsPlaced ( unit ) ;
59950: LD_ADDR_VAR 0 4
59954: PUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: CALL_OW 305
59964: ST_TO_ADDR
// exit ;
59965: POP
59966: POP
59967: GO 59973
// end ; end ;
59969: GO 59848
59971: POP
59972: POP
// end ;
59973: LD_VAR 0 4
59977: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59978: LD_INT 0
59980: PPUSH
59981: PPUSH
59982: PPUSH
// if not side or side > 8 then
59983: LD_VAR 0 1
59987: NOT
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_INT 8
59996: GREATER
59997: OR
59998: IFFALSE 60002
// exit ;
60000: GO 60189
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60002: LD_ADDR_VAR 0 4
60006: PUSH
60007: LD_INT 22
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 21
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PPUSH
60033: CALL_OW 69
60037: ST_TO_ADDR
// if not tmp then
60038: LD_VAR 0 4
60042: NOT
60043: IFFALSE 60047
// exit ;
60045: GO 60189
// enable_addtolog := true ;
60047: LD_ADDR_OWVAR 81
60051: PUSH
60052: LD_INT 1
60054: ST_TO_ADDR
// AddToLog ( [ ) ;
60055: LD_STRING [
60057: PPUSH
60058: CALL_OW 561
// for i in tmp do
60062: LD_ADDR_VAR 0 3
60066: PUSH
60067: LD_VAR 0 4
60071: PUSH
60072: FOR_IN
60073: IFFALSE 60180
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60075: LD_STRING [
60077: PUSH
60078: LD_VAR 0 3
60082: PPUSH
60083: CALL_OW 266
60087: STR
60088: PUSH
60089: LD_STRING , 
60091: STR
60092: PUSH
60093: LD_VAR 0 3
60097: PPUSH
60098: CALL_OW 250
60102: STR
60103: PUSH
60104: LD_STRING , 
60106: STR
60107: PUSH
60108: LD_VAR 0 3
60112: PPUSH
60113: CALL_OW 251
60117: STR
60118: PUSH
60119: LD_STRING , 
60121: STR
60122: PUSH
60123: LD_VAR 0 3
60127: PPUSH
60128: CALL_OW 254
60132: STR
60133: PUSH
60134: LD_STRING , 
60136: STR
60137: PUSH
60138: LD_VAR 0 3
60142: PPUSH
60143: LD_INT 1
60145: PPUSH
60146: CALL_OW 268
60150: STR
60151: PUSH
60152: LD_STRING , 
60154: STR
60155: PUSH
60156: LD_VAR 0 3
60160: PPUSH
60161: LD_INT 2
60163: PPUSH
60164: CALL_OW 268
60168: STR
60169: PUSH
60170: LD_STRING ],
60172: STR
60173: PPUSH
60174: CALL_OW 561
// end ;
60178: GO 60072
60180: POP
60181: POP
// AddToLog ( ]; ) ;
60182: LD_STRING ];
60184: PPUSH
60185: CALL_OW 561
// end ;
60189: LD_VAR 0 2
60193: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60194: LD_INT 0
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
// if not area or not rate or not max then
60201: LD_VAR 0 1
60205: NOT
60206: PUSH
60207: LD_VAR 0 2
60211: NOT
60212: OR
60213: PUSH
60214: LD_VAR 0 4
60218: NOT
60219: OR
60220: IFFALSE 60224
// exit ;
60222: GO 60416
// while 1 do
60224: LD_INT 1
60226: IFFALSE 60416
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60228: LD_ADDR_VAR 0 9
60232: PUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: LD_INT 1
60240: PPUSH
60241: CALL_OW 287
60245: PUSH
60246: LD_INT 10
60248: MUL
60249: ST_TO_ADDR
// r := rate / 10 ;
60250: LD_ADDR_VAR 0 7
60254: PUSH
60255: LD_VAR 0 2
60259: PUSH
60260: LD_INT 10
60262: DIVREAL
60263: ST_TO_ADDR
// time := 1 1$00 ;
60264: LD_ADDR_VAR 0 8
60268: PUSH
60269: LD_INT 2100
60271: ST_TO_ADDR
// if amount < min then
60272: LD_VAR 0 9
60276: PUSH
60277: LD_VAR 0 3
60281: LESS
60282: IFFALSE 60300
// r := r * 2 else
60284: LD_ADDR_VAR 0 7
60288: PUSH
60289: LD_VAR 0 7
60293: PUSH
60294: LD_INT 2
60296: MUL
60297: ST_TO_ADDR
60298: GO 60326
// if amount > max then
60300: LD_VAR 0 9
60304: PUSH
60305: LD_VAR 0 4
60309: GREATER
60310: IFFALSE 60326
// r := r / 2 ;
60312: LD_ADDR_VAR 0 7
60316: PUSH
60317: LD_VAR 0 7
60321: PUSH
60322: LD_INT 2
60324: DIVREAL
60325: ST_TO_ADDR
// time := time / r ;
60326: LD_ADDR_VAR 0 8
60330: PUSH
60331: LD_VAR 0 8
60335: PUSH
60336: LD_VAR 0 7
60340: DIVREAL
60341: ST_TO_ADDR
// if time < 0 then
60342: LD_VAR 0 8
60346: PUSH
60347: LD_INT 0
60349: LESS
60350: IFFALSE 60367
// time := time * - 1 ;
60352: LD_ADDR_VAR 0 8
60356: PUSH
60357: LD_VAR 0 8
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: MUL
60366: ST_TO_ADDR
// wait ( time ) ;
60367: LD_VAR 0 8
60371: PPUSH
60372: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60376: LD_INT 35
60378: PPUSH
60379: LD_INT 875
60381: PPUSH
60382: CALL_OW 12
60386: PPUSH
60387: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60391: LD_INT 1
60393: PPUSH
60394: LD_INT 5
60396: PPUSH
60397: CALL_OW 12
60401: PPUSH
60402: LD_VAR 0 1
60406: PPUSH
60407: LD_INT 1
60409: PPUSH
60410: CALL_OW 55
// end ;
60414: GO 60224
// end ;
60416: LD_VAR 0 5
60420: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60421: LD_INT 0
60423: PPUSH
60424: PPUSH
60425: PPUSH
60426: PPUSH
60427: PPUSH
60428: PPUSH
60429: PPUSH
60430: PPUSH
// if not turrets or not factories then
60431: LD_VAR 0 1
60435: NOT
60436: PUSH
60437: LD_VAR 0 2
60441: NOT
60442: OR
60443: IFFALSE 60447
// exit ;
60445: GO 60754
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60447: LD_ADDR_VAR 0 10
60451: PUSH
60452: LD_INT 5
60454: PUSH
60455: LD_INT 6
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: LD_INT 5
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 24
60489: PUSH
60490: LD_INT 25
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 23
60499: PUSH
60500: LD_INT 27
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 42
60513: PUSH
60514: LD_INT 43
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 44
60523: PUSH
60524: LD_INT 46
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 45
60533: PUSH
60534: LD_INT 47
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: ST_TO_ADDR
// result := [ ] ;
60551: LD_ADDR_VAR 0 3
60555: PUSH
60556: EMPTY
60557: ST_TO_ADDR
// for i in turrets do
60558: LD_ADDR_VAR 0 4
60562: PUSH
60563: LD_VAR 0 1
60567: PUSH
60568: FOR_IN
60569: IFFALSE 60752
// begin nat := GetNation ( i ) ;
60571: LD_ADDR_VAR 0 7
60575: PUSH
60576: LD_VAR 0 4
60580: PPUSH
60581: CALL_OW 248
60585: ST_TO_ADDR
// weapon := 0 ;
60586: LD_ADDR_VAR 0 8
60590: PUSH
60591: LD_INT 0
60593: ST_TO_ADDR
// if not nat then
60594: LD_VAR 0 7
60598: NOT
60599: IFFALSE 60603
// continue ;
60601: GO 60568
// for j in list [ nat ] do
60603: LD_ADDR_VAR 0 5
60607: PUSH
60608: LD_VAR 0 10
60612: PUSH
60613: LD_VAR 0 7
60617: ARRAY
60618: PUSH
60619: FOR_IN
60620: IFFALSE 60661
// if GetBWeapon ( i ) = j [ 1 ] then
60622: LD_VAR 0 4
60626: PPUSH
60627: CALL_OW 269
60631: PUSH
60632: LD_VAR 0 5
60636: PUSH
60637: LD_INT 1
60639: ARRAY
60640: EQUAL
60641: IFFALSE 60659
// begin weapon := j [ 2 ] ;
60643: LD_ADDR_VAR 0 8
60647: PUSH
60648: LD_VAR 0 5
60652: PUSH
60653: LD_INT 2
60655: ARRAY
60656: ST_TO_ADDR
// break ;
60657: GO 60661
// end ;
60659: GO 60619
60661: POP
60662: POP
// if not weapon then
60663: LD_VAR 0 8
60667: NOT
60668: IFFALSE 60672
// continue ;
60670: GO 60568
// for k in factories do
60672: LD_ADDR_VAR 0 6
60676: PUSH
60677: LD_VAR 0 2
60681: PUSH
60682: FOR_IN
60683: IFFALSE 60748
// begin weapons := AvailableWeaponList ( k ) ;
60685: LD_ADDR_VAR 0 9
60689: PUSH
60690: LD_VAR 0 6
60694: PPUSH
60695: CALL_OW 478
60699: ST_TO_ADDR
// if not weapons then
60700: LD_VAR 0 9
60704: NOT
60705: IFFALSE 60709
// continue ;
60707: GO 60682
// if weapon in weapons then
60709: LD_VAR 0 8
60713: PUSH
60714: LD_VAR 0 9
60718: IN
60719: IFFALSE 60746
// begin result := [ i , weapon ] ;
60721: LD_ADDR_VAR 0 3
60725: PUSH
60726: LD_VAR 0 4
60730: PUSH
60731: LD_VAR 0 8
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: ST_TO_ADDR
// exit ;
60740: POP
60741: POP
60742: POP
60743: POP
60744: GO 60754
// end ; end ;
60746: GO 60682
60748: POP
60749: POP
// end ;
60750: GO 60568
60752: POP
60753: POP
// end ;
60754: LD_VAR 0 3
60758: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60759: LD_INT 0
60761: PPUSH
// if not side or side > 8 then
60762: LD_VAR 0 3
60766: NOT
60767: PUSH
60768: LD_VAR 0 3
60772: PUSH
60773: LD_INT 8
60775: GREATER
60776: OR
60777: IFFALSE 60781
// exit ;
60779: GO 60840
// if not range then
60781: LD_VAR 0 4
60785: NOT
60786: IFFALSE 60797
// range := - 12 ;
60788: LD_ADDR_VAR 0 4
60792: PUSH
60793: LD_INT 12
60795: NEG
60796: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60797: LD_VAR 0 1
60801: PPUSH
60802: LD_VAR 0 2
60806: PPUSH
60807: LD_VAR 0 3
60811: PPUSH
60812: LD_VAR 0 4
60816: PPUSH
60817: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60821: LD_VAR 0 1
60825: PPUSH
60826: LD_VAR 0 2
60830: PPUSH
60831: LD_VAR 0 3
60835: PPUSH
60836: CALL_OW 331
// end ;
60840: LD_VAR 0 5
60844: RET
// export function Video ( mode ) ; begin
60845: LD_INT 0
60847: PPUSH
// ingame_video = mode ;
60848: LD_ADDR_OWVAR 52
60852: PUSH
60853: LD_VAR 0 1
60857: ST_TO_ADDR
// interface_hidden = mode ;
60858: LD_ADDR_OWVAR 54
60862: PUSH
60863: LD_VAR 0 1
60867: ST_TO_ADDR
// end ;
60868: LD_VAR 0 2
60872: RET
// export function Join ( array , element ) ; begin
60873: LD_INT 0
60875: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60876: LD_ADDR_VAR 0 3
60880: PUSH
60881: LD_VAR 0 1
60885: PPUSH
60886: LD_VAR 0 1
60890: PUSH
60891: LD_INT 1
60893: PLUS
60894: PPUSH
60895: LD_VAR 0 2
60899: PPUSH
60900: CALL_OW 1
60904: ST_TO_ADDR
// end ;
60905: LD_VAR 0 3
60909: RET
// export function JoinUnion ( array , element ) ; begin
60910: LD_INT 0
60912: PPUSH
// result := array union element ;
60913: LD_ADDR_VAR 0 3
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_VAR 0 2
60927: UNION
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 3
60933: RET
// export function GetBehemoths ( side ) ; begin
60934: LD_INT 0
60936: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60937: LD_ADDR_VAR 0 2
60941: PUSH
60942: LD_INT 22
60944: PUSH
60945: LD_VAR 0 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 31
60956: PUSH
60957: LD_INT 25
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PPUSH
60968: CALL_OW 69
60972: ST_TO_ADDR
// end ;
60973: LD_VAR 0 2
60977: RET
// export function Shuffle ( array ) ; var i , index ; begin
60978: LD_INT 0
60980: PPUSH
60981: PPUSH
60982: PPUSH
// result := [ ] ;
60983: LD_ADDR_VAR 0 2
60987: PUSH
60988: EMPTY
60989: ST_TO_ADDR
// if not array then
60990: LD_VAR 0 1
60994: NOT
60995: IFFALSE 60999
// exit ;
60997: GO 61098
// Randomize ;
60999: CALL_OW 10
// for i = array downto 1 do
61003: LD_ADDR_VAR 0 3
61007: PUSH
61008: DOUBLE
61009: LD_VAR 0 1
61013: INC
61014: ST_TO_ADDR
61015: LD_INT 1
61017: PUSH
61018: FOR_DOWNTO
61019: IFFALSE 61096
// begin index := rand ( 1 , array ) ;
61021: LD_ADDR_VAR 0 4
61025: PUSH
61026: LD_INT 1
61028: PPUSH
61029: LD_VAR 0 1
61033: PPUSH
61034: CALL_OW 12
61038: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61039: LD_ADDR_VAR 0 2
61043: PUSH
61044: LD_VAR 0 2
61048: PPUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_INT 1
61056: PLUS
61057: PPUSH
61058: LD_VAR 0 1
61062: PUSH
61063: LD_VAR 0 4
61067: ARRAY
61068: PPUSH
61069: CALL_OW 2
61073: ST_TO_ADDR
// array := Delete ( array , index ) ;
61074: LD_ADDR_VAR 0 1
61078: PUSH
61079: LD_VAR 0 1
61083: PPUSH
61084: LD_VAR 0 4
61088: PPUSH
61089: CALL_OW 3
61093: ST_TO_ADDR
// end ;
61094: GO 61018
61096: POP
61097: POP
// end ;
61098: LD_VAR 0 2
61102: RET
// export function GetBaseMaterials ( base ) ; begin
61103: LD_INT 0
61105: PPUSH
// result := [ 0 , 0 , 0 ] ;
61106: LD_ADDR_VAR 0 2
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// if not base then
61125: LD_VAR 0 1
61129: NOT
61130: IFFALSE 61134
// exit ;
61132: GO 61183
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61134: LD_ADDR_VAR 0 2
61138: PUSH
61139: LD_VAR 0 1
61143: PPUSH
61144: LD_INT 1
61146: PPUSH
61147: CALL_OW 275
61151: PUSH
61152: LD_VAR 0 1
61156: PPUSH
61157: LD_INT 2
61159: PPUSH
61160: CALL_OW 275
61164: PUSH
61165: LD_VAR 0 1
61169: PPUSH
61170: LD_INT 3
61172: PPUSH
61173: CALL_OW 275
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// end ;
61183: LD_VAR 0 2
61187: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61188: LD_INT 0
61190: PPUSH
61191: PPUSH
// result := array ;
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: ST_TO_ADDR
// if size > 0 then
61202: LD_VAR 0 2
61206: PUSH
61207: LD_INT 0
61209: GREATER
61210: IFFALSE 61256
// for i := array downto size do
61212: LD_ADDR_VAR 0 4
61216: PUSH
61217: DOUBLE
61218: LD_VAR 0 1
61222: INC
61223: ST_TO_ADDR
61224: LD_VAR 0 2
61228: PUSH
61229: FOR_DOWNTO
61230: IFFALSE 61254
// result := Delete ( result , result ) ;
61232: LD_ADDR_VAR 0 3
61236: PUSH
61237: LD_VAR 0 3
61241: PPUSH
61242: LD_VAR 0 3
61246: PPUSH
61247: CALL_OW 3
61251: ST_TO_ADDR
61252: GO 61229
61254: POP
61255: POP
// end ;
61256: LD_VAR 0 3
61260: RET
// export function ComExit ( unit ) ; var tmp ; begin
61261: LD_INT 0
61263: PPUSH
61264: PPUSH
// if not IsInUnit ( unit ) then
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL_OW 310
61274: NOT
61275: IFFALSE 61279
// exit ;
61277: GO 61339
// tmp := IsInUnit ( unit ) ;
61279: LD_ADDR_VAR 0 3
61283: PUSH
61284: LD_VAR 0 1
61288: PPUSH
61289: CALL_OW 310
61293: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61294: LD_VAR 0 3
61298: PPUSH
61299: CALL_OW 247
61303: PUSH
61304: LD_INT 2
61306: EQUAL
61307: IFFALSE 61320
// ComExitVehicle ( unit ) else
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 121
61318: GO 61329
// ComExitBuilding ( unit ) ;
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 122
// result := tmp ;
61329: LD_ADDR_VAR 0 2
61333: PUSH
61334: LD_VAR 0 3
61338: ST_TO_ADDR
// end ;
61339: LD_VAR 0 2
61343: RET
// export function ResetHc ; begin
61344: LD_INT 0
61346: PPUSH
// InitHc ;
61347: CALL_OW 19
// hc_importance := 0 ;
61351: LD_ADDR_OWVAR 32
61355: PUSH
61356: LD_INT 0
61358: ST_TO_ADDR
// end ;
61359: LD_VAR 0 1
61363: RET
