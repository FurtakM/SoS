// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2626 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = 20 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Maisuradze ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Maisuradze
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
// uc_side := 3 ;
1370: LD_ADDR_OWVAR 20
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// uc_nation := 3 ;
1378: LD_ADDR_OWVAR 21
1382: PUSH
1383: LD_INT 3
1385: ST_TO_ADDR
// russianForces := [ ] ;
1386: LD_ADDR_EXP 21
1390: PUSH
1391: EMPTY
1392: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: EMPTY
1399: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1400: LD_ADDR_VAR 0 4
1404: PUSH
1405: LD_INT 11
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 517
1415: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 0
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1481
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 274
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 200
1454: PPUSH
1455: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: CALL_OW 274
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 10
1474: PPUSH
1475: CALL_OW 277
// end ;
1479: GO 1436
1481: POP
1482: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1483: LD_ADDR_VAR 0 2
1487: PUSH
1488: LD_INT 30
1490: PUSH
1491: LD_INT 31
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PPUSH
1498: CALL_OW 69
1502: PUSH
1503: FOR_IN
1504: IFFALSE 1578
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1506: LD_INT 0
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: LD_OWVAR 67
1516: PUSH
1517: LD_INT 1
1519: MINUS
1520: PPUSH
1521: CALL_OW 380
// un := CreateHuman ;
1525: LD_ADDR_VAR 0 3
1529: PUSH
1530: CALL_OW 44
1534: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1535: LD_VAR 0 3
1539: PPUSH
1540: LD_VAR 0 2
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: LD_INT 3
1552: MINUS
1553: PUSH
1554: LD_INT 6
1556: MOD
1557: PPUSH
1558: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1562: LD_VAR 0 3
1566: PPUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 52
// end ;
1576: GO 1503
1578: POP
1579: POP
// for i = 1 to 5 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 5
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1676
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1596: LD_INT 0
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_OWVAR 67
1606: PPUSH
1607: CALL_OW 380
// un := CreateHuman ;
1611: LD_ADDR_VAR 0 3
1615: PUSH
1616: CALL_OW 44
1620: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1621: LD_VAR 0 3
1625: PPUSH
1626: LD_INT 9
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: CALL_OW 49
// ComHold ( un ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1645: LD_ADDR_EXP 21
1649: PUSH
1650: LD_EXP 21
1654: PPUSH
1655: LD_EXP 21
1659: PUSH
1660: LD_INT 1
1662: PLUS
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: CALL_OW 1
1673: ST_TO_ADDR
// end ;
1674: GO 1593
1676: POP
1677: POP
// for i := 1 to Difficulty + 1 do
1678: LD_ADDR_VAR 0 2
1682: PUSH
1683: DOUBLE
1684: LD_INT 1
1686: DEC
1687: ST_TO_ADDR
1688: LD_OWVAR 67
1692: PUSH
1693: LD_INT 1
1695: PLUS
1696: PUSH
1697: FOR_TO
1698: IFFALSE 1798
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_OWVAR 67
1710: PPUSH
1711: CALL_OW 380
// un := CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 1
1737: ARRAY
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PUSH
1750: LD_INT 2
1752: ARRAY
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1767: LD_ADDR_EXP 20
1771: PUSH
1772: LD_EXP 20
1776: PPUSH
1777: LD_EXP 20
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: PPUSH
1786: LD_VAR 0 3
1790: PPUSH
1791: CALL_OW 1
1795: ST_TO_ADDR
// end ;
1796: GO 1697
1798: POP
1799: POP
// vc_chassis := ru_medium_wheeled ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 21
1807: ST_TO_ADDR
// vc_engine := engine_combustion ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control := control_manual ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 42
1831: ST_TO_ADDR
// russianTank := CreateVehicle ;
1832: LD_ADDR_EXP 22
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1842: LD_EXP 22
1846: PPUSH
1847: LD_INT 121
1849: PPUSH
1850: LD_INT 25
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1860: LD_INT 0
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_OWVAR 67
1870: PPUSH
1871: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1875: CALL_OW 44
1879: PPUSH
1880: LD_EXP 22
1884: PPUSH
1885: CALL_OW 52
// end ;
1889: LD_VAR 0 1
1893: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y ;
1894: LD_EXP 20
1898: IFFALSE 2105
1900: GO 1902
1902: DISABLE
1903: LD_INT 0
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// begin enable ;
1910: ENABLE
// for i in russianForestPatrol do
1911: LD_ADDR_VAR 0 1
1915: PUSH
1916: LD_EXP 20
1920: PUSH
1921: FOR_IN
1922: IFFALSE 2103
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
1924: LD_VAR 0 1
1928: PPUSH
1929: LD_INT 53
1931: PPUSH
1932: LD_INT 89
1934: PPUSH
1935: CALL_OW 297
1939: PUSH
1940: LD_INT 30
1942: LESS
1943: IFFALSE 1962
// begin ComMoveXY ( i , 114 , 80 ) ;
1945: LD_VAR 0 1
1949: PPUSH
1950: LD_INT 114
1952: PPUSH
1953: LD_INT 80
1955: PPUSH
1956: CALL_OW 111
// continue ;
1960: GO 1921
// end ; if not HasTask ( i ) then
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 314
1971: NOT
1972: IFFALSE 2101
// begin d := rand ( 0 , 5 ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 5
1984: PPUSH
1985: CALL_OW 12
1989: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 12
2005: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 250
2020: PPUSH
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 272
2035: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2036: LD_ADDR_VAR 0 5
2040: PUSH
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_VAR 0 2
2055: PPUSH
2056: LD_VAR 0 3
2060: PPUSH
2061: CALL_OW 273
2065: ST_TO_ADDR
// if ValidHex ( x , y ) then
2066: LD_VAR 0 4
2070: PPUSH
2071: LD_VAR 0 5
2075: PPUSH
2076: CALL_OW 488
2080: IFFALSE 2101
// ComAgressiveMove ( i , x , y ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: LD_VAR 0 5
2096: PPUSH
2097: CALL_OW 114
// end ; end ;
2101: GO 1921
2103: POP
2104: POP
// end ;
2105: PPOPN 5
2107: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2108: LD_EXP 22
2112: PPUSH
2113: CALL_OW 302
2117: PUSH
2118: LD_EXP 22
2122: PPUSH
2123: CALL_OW 255
2127: PUSH
2128: LD_INT 3
2130: EQUAL
2131: AND
2132: IFFALSE 2399
2134: GO 2136
2136: DISABLE
// begin enable ;
2137: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 124
2145: PPUSH
2146: LD_INT 25
2148: PPUSH
2149: CALL_OW 307
2153: IFFALSE 2167
// SetFuel ( russianTank , 100 ) ;
2155: LD_EXP 22
2159: PPUSH
2160: LD_INT 100
2162: PPUSH
2163: CALL_OW 240
// if HasTask ( russianTank ) then
2167: LD_EXP 22
2171: PPUSH
2172: CALL_OW 314
2176: IFFALSE 2180
// exit ;
2178: GO 2399
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2180: LD_EXP 22
2184: PPUSH
2185: LD_INT 121
2187: PPUSH
2188: LD_INT 25
2190: PPUSH
2191: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2195: LD_EXP 22
2199: PPUSH
2200: LD_INT 122
2202: PPUSH
2203: LD_INT 48
2205: PPUSH
2206: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2210: LD_EXP 22
2214: PPUSH
2215: LD_INT 70
2217: PPUSH
2218: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2222: LD_EXP 22
2226: PPUSH
2227: LD_INT 107
2229: PPUSH
2230: LD_INT 57
2232: PPUSH
2233: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2237: LD_EXP 22
2241: PPUSH
2242: LD_INT 70
2244: PPUSH
2245: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2249: LD_EXP 22
2253: PPUSH
2254: LD_INT 100
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2264: LD_EXP 22
2268: PPUSH
2269: LD_INT 105
2271: PPUSH
2272: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2276: LD_EXP 22
2280: PPUSH
2281: LD_INT 78
2283: PPUSH
2284: LD_INT 64
2286: PPUSH
2287: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2291: LD_EXP 22
2295: PPUSH
2296: LD_INT 140
2298: PPUSH
2299: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2303: LD_EXP 22
2307: PPUSH
2308: LD_INT 100
2310: PPUSH
2311: LD_INT 61
2313: PPUSH
2314: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2318: LD_EXP 22
2322: PPUSH
2323: LD_INT 105
2325: PPUSH
2326: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2330: LD_EXP 22
2334: PPUSH
2335: LD_INT 107
2337: PPUSH
2338: LD_INT 57
2340: PPUSH
2341: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2345: LD_EXP 22
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2357: LD_EXP 22
2361: PPUSH
2362: LD_INT 122
2364: PPUSH
2365: LD_INT 48
2367: PPUSH
2368: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2372: LD_EXP 22
2376: PPUSH
2377: LD_INT 70
2379: PPUSH
2380: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2384: LD_EXP 22
2388: PPUSH
2389: LD_INT 124
2391: PPUSH
2392: LD_INT 25
2394: PPUSH
2395: CALL_OW 171
// end ; end_of_file
2399: END
// export Johnny ; export function PrepareJohnny ; begin
2400: LD_INT 0
2402: PPUSH
// uc_side := 1 ;
2403: LD_ADDR_OWVAR 20
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// uc_nation := 1 ;
2411: LD_ADDR_OWVAR 21
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2419: LD_ADDR_EXP 23
2423: PUSH
2424: LD_STRING Harris
2426: PPUSH
2427: CALL_OW 25
2431: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2432: LD_EXP 23
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2444: LD_EXP 23
2448: PPUSH
2449: LD_INT 8
2451: PPUSH
2452: LD_INT 0
2454: PPUSH
2455: CALL_OW 49
// ComCrawl ( Johnny ) ;
2459: LD_EXP 23
2463: PPUSH
2464: CALL_OW 137
// end ;
2468: LD_VAR 0 1
2472: RET
// export function PreparePatrolTank ; var veh , un ; begin
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
// uc_side := 1 ;
2478: LD_ADDR_OWVAR 20
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// uc_nation := 1 ;
2486: LD_ADDR_OWVAR 21
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 380
// un := CreateHuman ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: CALL_OW 44
2516: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2517: LD_ADDR_OWVAR 37
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// vc_engine := engine_combustion ;
2525: LD_ADDR_OWVAR 39
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_control := control_manual ;
2533: LD_ADDR_OWVAR 38
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 2
2548: ST_TO_ADDR
// vc_fuel_battery := 22 ;
2549: LD_ADDR_OWVAR 41
2553: PUSH
2554: LD_INT 22
2556: ST_TO_ADDR
// veh := CreateVehicle ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: CALL_OW 45
2566: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2567: LD_VAR 0 2
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 31
2586: PPUSH
2587: LD_INT 58
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// result := un ;
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: LD_VAR 0 3
2620: ST_TO_ADDR
// end ; end_of_file
2621: LD_VAR 0 1
2625: RET
// export function Action ; begin
2626: LD_INT 0
2628: PPUSH
// InGameOn ;
2629: CALL_OW 8
// wait ( 0 0$4 ) ;
2633: LD_INT 140
2635: PPUSH
2636: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2640: LD_EXP 14
2644: PPUSH
2645: LD_STRING DH-start-1
2647: PPUSH
2648: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2652: LD_EXP 14
2656: PPUSH
2657: LD_INT 71
2659: PPUSH
2660: LD_INT 29
2662: PPUSH
2663: CALL_OW 111
// wait ( 0 0$4 ) ;
2667: LD_INT 140
2669: PPUSH
2670: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_INT 71
2681: PPUSH
2682: LD_INT 33
2684: PPUSH
2685: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2689: LD_EXP 14
2693: PPUSH
2694: LD_INT 71
2696: PPUSH
2697: LD_INT 34
2699: PPUSH
2700: CALL_OW 178
// wait ( 0 0$4 ) ;
2704: LD_INT 140
2706: PPUSH
2707: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2711: LD_EXP 14
2715: PPUSH
2716: LD_STRING DH-start-2
2718: PPUSH
2719: CALL_OW 88
// wait ( 0 0$4 ) ;
2723: LD_INT 140
2725: PPUSH
2726: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
2730: LD_EXP 14
2734: PPUSH
2735: LD_INT 65
2737: PPUSH
2738: LD_INT 26
2740: PPUSH
2741: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
2745: LD_EXP 14
2749: PPUSH
2750: LD_STRING DH-start-3
2752: PPUSH
2753: CALL_OW 88
// InGameOff ;
2757: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
2761: LD_STRING O1_cont
2763: PPUSH
2764: CALL_OW 337
// SaveForQuickRestart ;
2768: CALL_OW 22
// missionStarted := true ;
2772: LD_ADDR_EXP 1
2776: PUSH
2777: LD_INT 1
2779: ST_TO_ADDR
// PrepareJohnny ;
2780: CALL 2400 0 0
// end ;
2784: LD_VAR 0 1
2788: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny do
2789: LD_EXP 8
2793: NOT
2794: PUSH
2795: LD_EXP 7
2799: NOT
2800: AND
2801: PUSH
2802: LD_INT 2
2804: PPUSH
2805: LD_EXP 23
2809: PPUSH
2810: CALL_OW 292
2814: AND
2815: PUSH
2816: LD_INT 22
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PPUSH
2831: LD_EXP 14
2835: PPUSH
2836: CALL_OW 74
2840: PUSH
2841: LD_EXP 23
2845: EQUAL
2846: AND
2847: IFFALSE 3759
2849: GO 2851
2851: DISABLE
// begin InGameOn ;
2852: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
2865: LD_EXP 23
2869: PPUSH
2870: LD_STRING DJ-ambush-1
2872: PPUSH
2873: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2877: LD_INT 10
2879: PPUSH
2880: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
2884: LD_EXP 14
2888: PPUSH
2889: LD_EXP 23
2893: PPUSH
2894: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
2898: LD_EXP 14
2902: PPUSH
2903: LD_STRING DH-ambush-1
2905: PPUSH
2906: CALL_OW 88
// wait ( 0 0$1 ) ;
2910: LD_INT 35
2912: PPUSH
2913: CALL_OW 67
// ComWalk ( Johnny ) ;
2917: LD_EXP 23
2921: PPUSH
2922: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
2926: LD_EXP 23
2930: PPUSH
2931: LD_EXP 14
2935: PPUSH
2936: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2940: LD_INT 35
2942: PPUSH
2943: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
2947: LD_EXP 23
2951: PPUSH
2952: LD_EXP 14
2956: PPUSH
2957: CALL_OW 296
2961: PUSH
2962: LD_INT 4
2964: LESS
2965: IFFALSE 2940
// ComTurnUnit ( Johnny , Heike ) ;
2967: LD_EXP 23
2971: PPUSH
2972: LD_EXP 14
2976: PPUSH
2977: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
2981: LD_EXP 23
2985: PPUSH
2986: LD_STRING DJ-ambush-2
2988: PPUSH
2989: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
2993: LD_EXP 14
2997: PPUSH
2998: LD_STRING DH-ambush-2
3000: PPUSH
3001: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3005: LD_EXP 23
3009: PPUSH
3010: LD_STRING DJ-ambush-3
3012: PPUSH
3013: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3017: LD_EXP 14
3021: PPUSH
3022: LD_STRING DH-ambush-3
3024: PPUSH
3025: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3029: LD_EXP 23
3033: PPUSH
3034: LD_STRING DJ-ambush-4
3036: PPUSH
3037: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3041: LD_EXP 14
3045: PPUSH
3046: LD_INT 39
3048: PPUSH
3049: LD_INT 22
3051: PPUSH
3052: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3056: LD_EXP 14
3060: PPUSH
3061: LD_STRING DH-ambush-4
3063: PPUSH
3064: CALL_OW 88
// PrepareRussianPatrol ;
3068: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3072: LD_INT 39
3074: PPUSH
3075: LD_INT 22
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: LD_INT 12
3083: NEG
3084: PPUSH
3085: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3099: LD_EXP 19
3103: PPUSH
3104: LD_INT 39
3106: PPUSH
3107: LD_INT 23
3109: PPUSH
3110: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3114: LD_EXP 14
3118: PUSH
3119: LD_EXP 23
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PPUSH
3128: LD_INT 39
3130: PPUSH
3131: LD_INT 7
3133: PPUSH
3134: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3138: LD_EXP 14
3142: PUSH
3143: LD_EXP 23
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: LD_EXP 19
3156: PUSH
3157: LD_INT 1
3159: ARRAY
3160: PPUSH
3161: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3165: LD_EXP 19
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING DR-ambush-5
3176: PPUSH
3177: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3181: LD_EXP 19
3185: PUSH
3186: LD_INT 2
3188: ARRAY
3189: PPUSH
3190: LD_STRING DR1-ambush-5
3192: PPUSH
3193: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3197: LD_INT 35
3199: PPUSH
3200: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_INT 39
3211: PPUSH
3212: LD_INT 7
3214: PPUSH
3215: CALL_OW 297
3219: PUSH
3220: LD_INT 6
3222: LESS
3223: IFFALSE 3197
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3225: LD_EXP 14
3229: PPUSH
3230: LD_EXP 19
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3243: LD_EXP 23
3247: PPUSH
3248: LD_EXP 14
3252: PPUSH
3253: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3257: LD_EXP 23
3261: PPUSH
3262: LD_STRING DJ-ambush-6
3264: PPUSH
3265: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3269: LD_EXP 14
3273: PPUSH
3274: LD_STRING DH-ambush-6
3276: PPUSH
3277: CALL_OW 88
// InGameOff ;
3281: CALL_OW 9
// meetJohnny := true ;
3285: LD_ADDR_EXP 3
3289: PUSH
3290: LD_INT 1
3292: ST_TO_ADDR
// ComFree ( Johnny ) ;
3293: LD_EXP 23
3297: PPUSH
3298: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3302: LD_STRING O2_ambush_cont
3304: PPUSH
3305: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3309: LD_EXP 19
3313: PUSH
3314: LD_EXP 19
3318: ARRAY
3319: PPUSH
3320: LD_INT 29
3322: PPUSH
3323: LD_INT 15
3325: PPUSH
3326: CALL_OW 111
// wait ( 0 0$2 ) ;
3330: LD_INT 70
3332: PPUSH
3333: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3337: LD_INT 3
3339: PPUSH
3340: LD_EXP 14
3344: PPUSH
3345: CALL_OW 292
3349: NOT
3350: PUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_EXP 23
3358: PPUSH
3359: CALL_OW 292
3363: NOT
3364: AND
3365: IFFALSE 3386
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3367: LD_EXP 19
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: LD_INT 58
3378: PPUSH
3379: LD_INT 32
3381: PPUSH
3382: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3386: LD_INT 1750
3388: PUSH
3389: LD_INT 1400
3391: PUSH
3392: LD_INT 1225
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_OWVAR 67
3404: ARRAY
3405: PPUSH
3406: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3410: LD_EXP 19
3414: PPUSH
3415: LD_INT 43
3417: PPUSH
3418: LD_INT 13
3420: PPUSH
3421: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// until not russianPatrol ;
3432: LD_EXP 19
3436: NOT
3437: IFFALSE 3425
// RemoveSeeing ( 39 , 22 , 2 ) ;
3439: LD_INT 39
3441: PPUSH
3442: LD_INT 22
3444: PPUSH
3445: LD_INT 2
3447: PPUSH
3448: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 81
3462: PUSH
3463: LD_INT 2
3465: EQUAL
3466: IFFALSE 3470
// exit ;
3468: GO 3759
// if not IsOk ( Johnny ) then
3470: LD_EXP 23
3474: PPUSH
3475: CALL_OW 302
3479: NOT
3480: IFFALSE 3491
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3482: LD_STRING O2_ambush_out_cont
3484: PPUSH
3485: CALL_OW 337
// exit ;
3489: GO 3759
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3491: LD_EXP 14
3495: PPUSH
3496: LD_EXP 23
3500: PPUSH
3501: CALL_OW 296
3505: PUSH
3506: LD_INT 10
3508: GREATER
3509: IFFALSE 3552
// begin ComMoveUnit ( Johnny , Heike ) ;
3511: LD_EXP 23
3515: PPUSH
3516: LD_EXP 14
3520: PPUSH
3521: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3532: LD_EXP 23
3536: PPUSH
3537: LD_EXP 14
3541: PPUSH
3542: CALL_OW 296
3546: PUSH
3547: LD_INT 6
3549: LESS
3550: IFFALSE 3525
// end ; CenterNowOnUnits ( Heike ) ;
3552: LD_EXP 14
3556: PPUSH
3557: CALL_OW 87
// InGameOn ;
3561: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3565: LD_EXP 14
3569: PPUSH
3570: LD_EXP 23
3574: PPUSH
3575: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3579: LD_EXP 23
3583: PPUSH
3584: LD_EXP 14
3588: PPUSH
3589: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3593: LD_EXP 23
3597: PPUSH
3598: LD_STRING DJ-thanks-1
3600: PPUSH
3601: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3605: LD_EXP 14
3609: PPUSH
3610: LD_STRING DH-thanks-1
3612: PPUSH
3613: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3617: LD_EXP 23
3621: PPUSH
3622: LD_STRING DJ-thanks-2
3624: PPUSH
3625: CALL_OW 88
// Say ( Heike , DH-thanks-2 ) ;
3629: LD_EXP 14
3633: PPUSH
3634: LD_STRING DH-thanks-2
3636: PPUSH
3637: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3641: LD_EXP 23
3645: PPUSH
3646: LD_INT 4
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3656: LD_INT 35
3658: PPUSH
3659: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3663: LD_INT 2
3665: PPUSH
3666: LD_EXP 23
3670: PPUSH
3671: CALL_OW 292
3675: NOT
3676: IFFALSE 3656
// Say ( Heike , DH-thanks-2a ) ;
3678: LD_EXP 14
3682: PPUSH
3683: LD_STRING DH-thanks-2a
3685: PPUSH
3686: CALL_OW 88
// RemoveUnit ( Johnny ) ;
3690: LD_EXP 23
3694: PPUSH
3695: CALL_OW 64
// InGameOff ;
3699: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3703: LD_STRING O2_ambush_out_cont
3705: PPUSH
3706: CALL_OW 337
// johnnySaved := true ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_INT 1
3717: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
3718: LD_EXP 14
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_INT 600
3728: PPUSH
3729: CALL_OW 492
// if IsOk ( Olaf ) then
3733: LD_EXP 15
3737: PPUSH
3738: CALL_OW 302
3742: IFFALSE 3759
// ComMoveXY ( Olaf , 44 , 25 ) ;
3744: LD_EXP 15
3748: PPUSH
3749: LD_INT 44
3751: PPUSH
3752: LD_INT 25
3754: PPUSH
3755: CALL_OW 111
// end ;
3759: END
// every 0 0$1 trigger russianPatrol do var i ;
3760: LD_EXP 19
3764: IFFALSE 3832
3766: GO 3768
3768: DISABLE
3769: LD_INT 0
3771: PPUSH
// begin enable ;
3772: ENABLE
// for i in russianPatrol do
3773: LD_ADDR_VAR 0 1
3777: PUSH
3778: LD_EXP 19
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3830
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 256
3795: PUSH
3796: LD_INT 1000
3798: LESS
3799: PUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL_OW 314
3809: NOT
3810: AND
3811: IFFALSE 3828
// ComAgressiveMove ( i , 42 , 12 ) ;
3813: LD_VAR 0 1
3817: PPUSH
3818: LD_INT 42
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: CALL_OW 114
3828: GO 3783
3830: POP
3831: POP
// end ;
3832: PPOPN 1
3834: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 81
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: PUSH
3850: LD_EXP 23
3854: PPUSH
3855: CALL_OW 302
3859: AND
3860: IFFALSE 3877
3862: GO 3864
3864: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
3865: LD_EXP 23
3869: PPUSH
3870: LD_STRING DJ-fire-1
3872: PPUSH
3873: CALL_OW 88
3877: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
3878: LD_EXP 7
3882: NOT
3883: PUSH
3884: LD_EXP 21
3888: PPUSH
3889: LD_INT 101
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 72
3903: AND
3904: IFFALSE 4012
3906: GO 3908
3908: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
3909: LD_EXP 14
3913: PPUSH
3914: CALL_OW 87
// DialogueOn ;
3918: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
3922: LD_EXP 14
3926: PPUSH
3927: LD_STRING DH-see-enemy-patrol-1
3929: PPUSH
3930: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
3934: LD_EXP 21
3938: PPUSH
3939: LD_INT 26
3941: PUSH
3942: LD_INT 1
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 72
3953: PUSH
3954: LD_INT 1
3956: ARRAY
3957: PPUSH
3958: LD_STRING DR-see-enemy-patrol-1
3960: PPUSH
3961: CALL_OW 88
// DialogueOff ;
3965: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
3969: LD_EXP 21
3973: PPUSH
3974: LD_INT 66
3976: PPUSH
3977: LD_INT 22
3979: PPUSH
3980: CALL_OW 114
// wait ( 0 0$10 ) ;
3984: LD_INT 350
3986: PPUSH
3987: CALL_OW 67
// ComMoveToArea ( russianForces , russianEastPatrolArea ) ;
3991: LD_EXP 21
3995: PPUSH
3996: LD_INT 9
3998: PPUSH
3999: CALL_OW 113
// AddComHold ( russianForces ) ;
4003: LD_EXP 21
4007: PPUSH
4008: CALL_OW 200
// end ;
4012: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4013: LD_EXP 1
4017: PUSH
4018: LD_EXP 8
4022: NOT
4023: AND
4024: PUSH
4025: LD_EXP 7
4029: NOT
4030: AND
4031: PUSH
4032: LD_EXP 14
4036: PPUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 14
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PPUSH
4047: CALL_OW 69
4051: PPUSH
4052: LD_EXP 14
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 296
4066: PUSH
4067: LD_INT 6
4069: LESS
4070: AND
4071: IFFALSE 4088
4073: GO 4075
4075: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4076: LD_EXP 14
4080: PPUSH
4081: LD_STRING DH-tiger-1
4083: PPUSH
4084: CALL_OW 88
4088: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4089: LD_EXP 1
4093: PUSH
4094: LD_EXP 8
4098: NOT
4099: AND
4100: PUSH
4101: LD_EXP 7
4105: NOT
4106: AND
4107: PUSH
4108: LD_EXP 14
4112: PPUSH
4113: LD_INT 25
4115: PUSH
4116: LD_INT 12
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL_OW 69
4127: PPUSH
4128: LD_EXP 14
4132: PPUSH
4133: CALL_OW 74
4137: PPUSH
4138: CALL_OW 296
4142: PUSH
4143: LD_INT 6
4145: LESS
4146: AND
4147: IFFALSE 4164
4149: GO 4151
4151: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4152: LD_EXP 14
4156: PPUSH
4157: LD_STRING DH-ape-1
4159: PPUSH
4160: CALL_OW 88
4164: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4165: LD_EXP 1
4169: PUSH
4170: LD_EXP 8
4174: NOT
4175: AND
4176: PUSH
4177: LD_EXP 7
4181: NOT
4182: AND
4183: PUSH
4184: LD_EXP 14
4188: PPUSH
4189: LD_INT 25
4191: PUSH
4192: LD_INT 18
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: PPUSH
4204: LD_EXP 14
4208: PPUSH
4209: CALL_OW 74
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: AND
4223: IFFALSE 4240
4225: GO 4227
4227: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4228: LD_EXP 14
4232: PPUSH
4233: LD_STRING DH-bird-1
4235: PPUSH
4236: CALL_OW 88
4240: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4241: LD_INT 22
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 101
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 69
4269: IFFALSE 4282
4271: GO 4273
4273: DISABLE
// russianSpotted := true ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
4282: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4283: LD_EXP 14
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 69
4316: PPUSH
4317: LD_EXP 14
4321: PPUSH
4322: CALL_OW 74
4326: PPUSH
4327: CALL_OW 296
4331: PUSH
4332: LD_INT 8
4334: LESS
4335: IFFALSE 4352
4337: GO 4339
4339: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4340: LD_EXP 14
4344: PPUSH
4345: LD_STRING DH-enemy-base
4347: PPUSH
4348: CALL_OW 88
4352: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not mercenariesQuestDone do var i ;
4353: LD_EXP 23
4357: PPUSH
4358: CALL_OW 305
4362: NOT
4363: PUSH
4364: LD_EXP 6
4368: NOT
4369: AND
4370: PUSH
4371: LD_EXP 5
4375: AND
4376: PUSH
4377: LD_EXP 11
4381: NOT
4382: AND
4383: IFFALSE 4534
4385: GO 4387
4387: DISABLE
4388: LD_INT 0
4390: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// for i in dogTag do
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_EXP 5
4407: PUSH
4408: FOR_IN
4409: IFFALSE 4458
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
4411: LD_EXP 14
4415: PPUSH
4416: LD_VAR 0 1
4420: PUSH
4421: LD_INT 1
4423: ARRAY
4424: PPUSH
4425: LD_VAR 0 1
4429: PUSH
4430: LD_INT 2
4432: ARRAY
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 3
4441: LESS
4442: IFFALSE 4456
// begin dogTagFound := i ;
4444: LD_ADDR_EXP 6
4448: PUSH
4449: LD_VAR 0 1
4453: ST_TO_ADDR
// break ;
4454: GO 4458
// end ;
4456: GO 4408
4458: POP
4459: POP
// until dogTagFound ;
4460: LD_EXP 6
4464: IFFALSE 4391
// CenterNowOnUnits ( Heike ) ;
4466: LD_EXP 14
4470: PPUSH
4471: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
4475: LD_EXP 14
4479: PPUSH
4480: LD_EXP 6
4484: PUSH
4485: LD_INT 1
4487: ARRAY
4488: PPUSH
4489: LD_EXP 6
4493: PUSH
4494: LD_INT 2
4496: ARRAY
4497: PPUSH
4498: CALL_OW 111
// if mercenariesQuestReady then
4502: LD_EXP 10
4506: IFFALSE 4522
// Say ( Heike , DH-dogtag-found-quest ) else
4508: LD_EXP 14
4512: PPUSH
4513: LD_STRING DH-dogtag-found-quest
4515: PPUSH
4516: CALL_OW 88
4520: GO 4534
// Say ( Heike , DH-dogtag-found ) ;
4522: LD_EXP 14
4526: PPUSH
4527: LD_STRING DH-dogtag-found
4529: PPUSH
4530: CALL_OW 88
// end ;
4534: PPOPN 1
4536: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
4537: LD_EXP 8
4541: NOT
4542: PUSH
4543: LD_EXP 7
4547: NOT
4548: AND
4549: PUSH
4550: LD_INT 5
4552: PPUSH
4553: LD_EXP 14
4557: PPUSH
4558: CALL_OW 292
4562: AND
4563: PUSH
4564: LD_EXP 14
4568: PPUSH
4569: LD_EXP 15
4573: PPUSH
4574: CALL_OW 296
4578: PUSH
4579: LD_INT 8
4581: LESS
4582: AND
4583: IFFALSE 4944
4585: GO 4587
4587: DISABLE
// begin olafSpotted := true ;
4588: LD_ADDR_EXP 8
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// if HasTask ( Olaf ) then
4596: LD_EXP 15
4600: PPUSH
4601: CALL_OW 314
4605: IFFALSE 4616
// ComStop ( Olaf ) ;
4607: LD_EXP 15
4611: PPUSH
4612: CALL_OW 141
// InGameOn ;
4616: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
4620: LD_EXP 15
4624: PPUSH
4625: LD_EXP 14
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 8
4637: GREATER
4638: IFFALSE 4654
// ComMoveUnit ( Olaf , Heike ) ;
4640: LD_EXP 15
4644: PPUSH
4645: LD_EXP 14
4649: PPUSH
4650: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
4654: LD_INT 35
4656: PPUSH
4657: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
4661: LD_EXP 15
4665: PPUSH
4666: LD_EXP 14
4670: PPUSH
4671: CALL_OW 296
4675: PUSH
4676: LD_INT 8
4678: LESSEQUAL
4679: IFFALSE 4654
// ComTurnUnit ( Heike , Olaf ) ;
4681: LD_EXP 14
4685: PPUSH
4686: LD_EXP 15
4690: PPUSH
4691: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
4695: LD_EXP 15
4699: PPUSH
4700: LD_EXP 14
4704: PPUSH
4705: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
4709: LD_EXP 15
4713: PPUSH
4714: LD_STRING DO-olaf-1
4716: PPUSH
4717: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
4721: LD_EXP 14
4725: PPUSH
4726: LD_STRING DH-olaf-1
4728: PPUSH
4729: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
4733: LD_EXP 15
4737: PPUSH
4738: LD_STRING DO-olaf-2
4740: PPUSH
4741: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
4745: LD_EXP 14
4749: PPUSH
4750: LD_STRING DH-olaf-2
4752: PPUSH
4753: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
4757: LD_EXP 15
4761: PPUSH
4762: LD_STRING DO-olaf-3
4764: PPUSH
4765: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
4769: LD_EXP 15
4773: PPUSH
4774: LD_STRING DO-olaf-4
4776: PPUSH
4777: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
4781: LD_EXP 14
4785: PPUSH
4786: LD_STRING DH-olaf-4
4788: PPUSH
4789: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
4793: LD_EXP 15
4797: PPUSH
4798: LD_STRING DO-olaf-5
4800: PPUSH
4801: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
4805: LD_EXP 14
4809: PPUSH
4810: LD_STRING DH-olaf-5
4812: PPUSH
4813: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
4817: LD_EXP 15
4821: PPUSH
4822: LD_STRING DO-olaf-6
4824: PPUSH
4825: CALL_OW 88
// if russianSpotted or johnnySaved then
4829: LD_EXP 9
4833: PUSH
4834: LD_EXP 4
4838: OR
4839: IFFALSE 4867
// begin Say ( Heike , DH-olaf-6a ) ;
4841: LD_EXP 14
4845: PPUSH
4846: LD_STRING DH-olaf-6a
4848: PPUSH
4849: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_STRING DO-olaf-7a
4860: PPUSH
4861: CALL_OW 88
// end else
4865: GO 4891
// begin Say ( Heike , DH-olaf-6b ) ;
4867: LD_EXP 14
4871: PPUSH
4872: LD_STRING DH-olaf-6b
4874: PPUSH
4875: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
4879: LD_EXP 15
4883: PPUSH
4884: LD_STRING DO-olaf-7b
4886: PPUSH
4887: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
4891: LD_EXP 15
4895: PPUSH
4896: LD_STRING DO-olaf-8
4898: PPUSH
4899: CALL_OW 88
// InGameOff ;
4903: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
4907: LD_STRING O3_camp_cont
4909: PPUSH
4910: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
4914: LD_EXP 15
4918: PPUSH
4919: LD_INT 52
4921: PPUSH
4922: LD_INT 90
4924: PPUSH
4925: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
4929: LD_EXP 15
4933: PPUSH
4934: LD_INT 53
4936: PPUSH
4937: LD_INT 89
4939: PPUSH
4940: CALL_OW 178
// end ;
4944: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
4945: LD_EXP 8
4949: NOT
4950: PUSH
4951: LD_EXP 14
4955: PPUSH
4956: LD_EXP 16
4960: PPUSH
4961: CALL_OW 296
4965: PUSH
4966: LD_INT 36
4968: LESS
4969: AND
4970: IFFALSE 4990
4972: GO 4974
4974: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
4975: LD_EXP 15
4979: PPUSH
4980: LD_INT 39
4982: PPUSH
4983: LD_INT 71
4985: PPUSH
4986: CALL_OW 111
4990: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
4991: LD_EXP 7
4995: NOT
4996: PUSH
4997: LD_INT 2
4999: PPUSH
5000: LD_EXP 17
5004: PPUSH
5005: CALL_OW 292
5009: PUSH
5010: LD_INT 2
5012: PPUSH
5013: LD_EXP 16
5017: PPUSH
5018: CALL_OW 292
5022: OR
5023: AND
5024: IFFALSE 6349
5026: GO 5028
5028: DISABLE
5029: LD_INT 0
5031: PPUSH
5032: PPUSH
5033: PPUSH
// begin if IsLive ( Johnny ) then
5034: LD_EXP 23
5038: PPUSH
5039: CALL_OW 300
5043: IFFALSE 5054
// KillUnit ( Johnny ) ;
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 66
// mercenariesSpotted := true ;
5054: LD_ADDR_EXP 7
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5062: LD_STRING O4_camp_cont
5064: PPUSH
5065: CALL_OW 337
// InGameOn ;
5069: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5073: LD_INT 53
5075: PPUSH
5076: LD_INT 89
5078: PPUSH
5079: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5083: LD_INT 53
5085: PPUSH
5086: LD_INT 89
5088: PPUSH
5089: LD_INT 2
5091: PPUSH
5092: LD_INT 8
5094: NEG
5095: PPUSH
5096: CALL_OW 330
// if olafSpotted then
5100: LD_EXP 8
5104: IFFALSE 5222
// begin AddComTurnUnit ( Olaf , Heike ) ;
5106: LD_EXP 15
5110: PPUSH
5111: LD_EXP 14
5115: PPUSH
5116: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5120: LD_EXP 14
5124: PPUSH
5125: LD_INT 51
5127: PPUSH
5128: LD_INT 86
5130: PPUSH
5131: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5135: LD_EXP 14
5139: PPUSH
5140: LD_EXP 15
5144: PPUSH
5145: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5149: LD_EXP 15
5153: PPUSH
5154: LD_STRING DO-camp-1
5156: PPUSH
5157: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5161: LD_EXP 16
5165: PUSH
5166: LD_EXP 17
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: LD_EXP 14
5179: PPUSH
5180: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5184: LD_EXP 16
5188: PPUSH
5189: LD_STRING DG-camp-1
5191: PPUSH
5192: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5196: LD_EXP 14
5200: PPUSH
5201: LD_STRING DH-camp-1
5203: PPUSH
5204: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5208: LD_EXP 15
5212: PPUSH
5213: LD_STRING DO-camp-2
5215: PPUSH
5216: CALL_OW 88
// end else
5220: GO 5617
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5222: LD_EXP 14
5226: PPUSH
5227: LD_INT 51
5229: PPUSH
5230: LD_INT 86
5232: PPUSH
5233: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5237: LD_EXP 14
5241: PPUSH
5242: LD_EXP 16
5246: PPUSH
5247: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5251: LD_EXP 16
5255: PUSH
5256: LD_EXP 17
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: LD_EXP 14
5269: PPUSH
5270: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DG-camp-1a
5281: PPUSH
5282: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5286: LD_EXP 14
5290: PPUSH
5291: LD_STRING DH-camp-1a
5293: PPUSH
5294: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5305: LD_EXP 17
5309: PPUSH
5310: LD_EXP 15
5314: PPUSH
5315: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5319: LD_EXP 17
5323: PPUSH
5324: LD_STRING DM-camp-1a
5326: PPUSH
5327: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5331: LD_EXP 15
5335: PPUSH
5336: LD_INT 52
5338: PPUSH
5339: LD_INT 90
5341: PPUSH
5342: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5346: LD_EXP 17
5350: PPUSH
5351: LD_EXP 14
5355: PPUSH
5356: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING DG-camp-2a
5367: PPUSH
5368: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5372: LD_EXP 14
5376: PPUSH
5377: LD_STRING DH-camp-2a
5379: PPUSH
5380: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_STRING DM-camp-2a
5391: PPUSH
5392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5396: LD_INT 35
5398: PPUSH
5399: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
5403: LD_EXP 15
5407: PPUSH
5408: LD_EXP 14
5412: PPUSH
5413: CALL_OW 296
5417: PUSH
5418: LD_INT 10
5420: LESS
5421: IFFALSE 5396
// AddComTurnUnit ( Olaf , Heike ) ;
5423: LD_EXP 15
5427: PPUSH
5428: LD_EXP 14
5432: PPUSH
5433: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
5437: LD_EXP 17
5441: PPUSH
5442: LD_EXP 14
5446: PPUSH
5447: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
5451: LD_EXP 15
5455: PPUSH
5456: LD_STRING DO-camp-2a
5458: PPUSH
5459: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
5463: LD_EXP 14
5467: PPUSH
5468: LD_EXP 15
5472: PPUSH
5473: CALL_OW 119
// if russianSpotted then
5477: LD_EXP 9
5481: IFFALSE 5521
// begin Say ( Heike , DH-camp-2aa ) ;
5483: LD_EXP 14
5487: PPUSH
5488: LD_STRING DH-camp-2aa
5490: PPUSH
5491: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
5495: LD_EXP 16
5499: PPUSH
5500: LD_STRING DG-camp-2aa
5502: PPUSH
5503: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
5507: LD_EXP 17
5511: PPUSH
5512: LD_STRING DM-camp-2aa
5514: PPUSH
5515: CALL_OW 88
// end else
5519: GO 5545
// begin Say ( Heike , DH-camp-2ab ) ;
5521: LD_EXP 14
5525: PPUSH
5526: LD_STRING DH-camp-2ab
5528: PPUSH
5529: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
5533: LD_EXP 17
5537: PPUSH
5538: LD_STRING DM-camp-2ab
5540: PPUSH
5541: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
5545: LD_EXP 14
5549: PPUSH
5550: LD_STRING DH-camp-3a
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
5557: LD_EXP 15
5561: PPUSH
5562: LD_STRING DO-camp-3a
5564: PPUSH
5565: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DG-camp-3a
5576: PPUSH
5577: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
5581: LD_EXP 14
5585: PPUSH
5586: LD_STRING DH-camp-4aa
5588: PPUSH
5589: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING DM-camp-4aa
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
5605: LD_EXP 15
5609: PPUSH
5610: LD_STRING DO-camp-4a
5612: PPUSH
5613: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
5617: LD_EXP 15
5621: PPUSH
5622: LD_STRING DO-camp-3
5624: PPUSH
5625: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
5629: LD_EXP 15
5633: PPUSH
5634: LD_STRING DO-camp-4
5636: PPUSH
5637: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
5641: LD_EXP 16
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DG-camp-4
5662: PPUSH
5663: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
5667: LD_EXP 14
5671: PPUSH
5672: LD_EXP 16
5676: PPUSH
5677: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
5681: LD_EXP 14
5685: PPUSH
5686: LD_STRING DH-camp-4
5688: PPUSH
5689: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
5693: LD_EXP 17
5697: PUSH
5698: LD_EXP 15
5702: PUSH
5703: LD_EXP 16
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: PPUSH
5713: LD_EXP 14
5717: PPUSH
5718: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
5722: LD_EXP 16
5726: PPUSH
5727: LD_STRING DG-camp-5
5729: PPUSH
5730: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
5734: LD_EXP 16
5738: PPUSH
5739: LD_STRING DG-camp-6
5741: PPUSH
5742: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
5746: LD_EXP 14
5750: PPUSH
5751: LD_STRING DH-camp-6
5753: PPUSH
5754: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
5758: LD_EXP 16
5762: PPUSH
5763: LD_STRING DG-camp-7
5765: PPUSH
5766: CALL_OW 88
// if DogTagFound then
5770: LD_EXP 6
5774: IFFALSE 5814
// begin Say ( Heike , DH-quest-1a ) ;
5776: LD_EXP 14
5780: PPUSH
5781: LD_STRING DH-quest-1a
5783: PPUSH
5784: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
5788: LD_EXP 16
5792: PPUSH
5793: LD_STRING DG-quest-1a
5795: PPUSH
5796: CALL_OW 88
// mercenariesQuestDone := true ;
5800: LD_ADDR_EXP 11
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// InGameOff ;
5808: CALL_OW 9
// end else
5812: GO 5980
// begin Say ( Heike , DH-camp-7 ) ;
5814: LD_EXP 14
5818: PPUSH
5819: LD_STRING DH-camp-7
5821: PPUSH
5822: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
5826: LD_EXP 14
5830: PPUSH
5831: CALL_OW 256
5835: PUSH
5836: LD_INT 1000
5838: LESS
5839: IFFALSE 5931
// begin Say ( Olaf , DO-heal-1 ) ;
5841: LD_EXP 15
5845: PPUSH
5846: LD_STRING DO-heal-1
5848: PPUSH
5849: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
5853: LD_EXP 14
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 88
5863: PPUSH
5864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5868: LD_INT 35
5870: PPUSH
5871: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
5875: LD_EXP 14
5879: PPUSH
5880: LD_EXP 15
5884: PPUSH
5885: CALL_OW 296
5889: PUSH
5890: LD_INT 4
5892: LESS
5893: PUSH
5894: LD_EXP 14
5898: PPUSH
5899: LD_INT 51
5901: PPUSH
5902: LD_INT 88
5904: PPUSH
5905: CALL_OW 307
5909: OR
5910: IFFALSE 5868
// SetLives ( Heike , 1000 ) ;
5912: LD_EXP 14
5916: PPUSH
5917: LD_INT 1000
5919: PPUSH
5920: CALL_OW 234
// wait ( 0 0$2 ) ;
5924: LD_INT 70
5926: PPUSH
5927: CALL_OW 67
// end ; InGameOff ;
5931: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
5935: LD_EXP 15
5939: PUSH
5940: LD_EXP 16
5944: PUSH
5945: LD_EXP 17
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_INT 53
5957: PPUSH
5958: LD_INT 89
5960: PPUSH
5961: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
5965: LD_STRING O5_proof_cont
5967: PPUSH
5968: CALL_OW 337
// mercenariesQuestReady := true ;
5972: LD_ADDR_EXP 10
5976: PUSH
5977: LD_INT 1
5979: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
5980: LD_EXP 10
5984: NOT
5985: IFFALSE 5989
// exit ;
5987: GO 6349
// wait ( 0 0$35 ) ;
5989: LD_INT 1225
5991: PPUSH
5992: CALL_OW 67
// driver := PreparePatrolTank ;
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: CALL 2473 0 0
6005: ST_TO_ADDR
// if not driver then
6006: LD_VAR 0 2
6010: NOT
6011: IFFALSE 6015
// exit ;
6013: GO 6349
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6015: LD_INT 2
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: LD_INT 2
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: CALL_OW 310
6045: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_INT 500
6053: PPUSH
6054: CALL_OW 234
// SetLives ( driver , 450 ) ;
6058: LD_VAR 0 2
6062: PPUSH
6063: LD_INT 450
6065: PPUSH
6066: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6070: LD_VAR 0 2
6074: PPUSH
6075: LD_INT 59
6077: PPUSH
6078: LD_INT 60
6080: PPUSH
6081: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6085: LD_INT 35
6087: PPUSH
6088: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6092: LD_VAR 0 3
6096: PPUSH
6097: LD_INT 59
6099: PPUSH
6100: LD_INT 60
6102: PPUSH
6103: CALL_OW 307
6107: IFFALSE 6085
// if not See ( 1 , Heike ) then
6109: LD_INT 1
6111: PPUSH
6112: LD_EXP 14
6116: PPUSH
6117: CALL_OW 292
6121: NOT
6122: IFFALSE 6246
// begin if Difficulty < 3 then
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 3
6131: LESS
6132: IFFALSE 6150
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6134: LD_INT 59
6136: PPUSH
6137: LD_INT 60
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: LD_INT 6
6145: PPUSH
6146: CALL_OW 330
// ComExitVehicle ( driver ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: CALL_OW 121
// wait ( 0 0$1 ) ;
6159: LD_INT 35
6161: PPUSH
6162: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6166: LD_VAR 0 2
6170: PPUSH
6171: LD_INT 58
6173: PPUSH
6174: LD_INT 54
6176: PPUSH
6177: CALL_OW 171
// wait ( 0 0$1 ) ;
6181: LD_INT 35
6183: PPUSH
6184: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6188: LD_VAR 0 2
6192: PPUSH
6193: LD_INT 57
6195: PPUSH
6196: LD_INT 53
6198: PPUSH
6199: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6203: LD_VAR 0 2
6207: PPUSH
6208: LD_INT 350
6210: PPUSH
6211: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_VAR 0 3
6224: PPUSH
6225: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6229: LD_VAR 0 2
6233: PPUSH
6234: LD_INT 107
6236: PPUSH
6237: LD_INT 118
6239: PPUSH
6240: CALL_OW 171
// end else
6244: GO 6261
// begin ComMoveXY ( driver , 107 , 118 ) ;
6246: LD_VAR 0 2
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 118
6256: PPUSH
6257: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6268: LD_VAR 0 3
6272: PPUSH
6273: LD_INT 107
6275: PPUSH
6276: LD_INT 118
6278: PPUSH
6279: CALL_OW 307
6283: PUSH
6284: LD_VAR 0 2
6288: PPUSH
6289: CALL_OW 301
6293: OR
6294: IFFALSE 6261
// if IsDead ( driver [ 1 ] ) then
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: CALL_OW 301
6309: IFFALSE 6313
// exit ;
6311: GO 6349
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6313: LD_ADDR_VAR 0 1
6317: PUSH
6318: LD_INT 22
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6347
// RemoveUnit ( i ) ;
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 64
6345: GO 6333
6347: POP
6348: POP
// end ;
6349: PPOPN 3
6351: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6352: LD_INT 10
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: IFFALSE 6457
6385: GO 6387
6387: DISABLE
// begin InGameOn ;
6388: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6392: LD_EXP 15
6396: PUSH
6397: LD_EXP 17
6401: PUSH
6402: LD_EXP 16
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PPUSH
6412: LD_EXP 14
6416: PPUSH
6417: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DM-quest-1
6428: PPUSH
6429: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6433: LD_EXP 16
6437: PPUSH
6438: LD_STRING DG-quest-1
6440: PPUSH
6441: CALL_OW 88
// InGameOff ;
6445: CALL_OW 9
// mercenariesQuestDone := true ;
6449: LD_ADDR_EXP 11
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// end ;
6457: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
6458: LD_EXP 14
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: CALL_OW 308
6470: PUSH
6471: LD_EXP 6
6475: AND
6476: PUSH
6477: LD_EXP 10
6481: AND
6482: IFFALSE 6654
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
// begin InGameOn ;
6490: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6494: LD_EXP 15
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 16
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: LD_EXP 14
6518: PPUSH
6519: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
6523: LD_EXP 14
6527: PPUSH
6528: LD_INT 54
6530: PPUSH
6531: LD_INT 86
6533: PPUSH
6534: CALL_OW 111
// p := p + 1 ;
6538: LD_ADDR_VAR 0 1
6542: PUSH
6543: LD_VAR 0 1
6547: PUSH
6548: LD_INT 1
6550: PLUS
6551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6552: LD_INT 35
6554: PPUSH
6555: CALL_OW 67
// p := p + 1 ;
6559: LD_ADDR_VAR 0 1
6563: PUSH
6564: LD_VAR 0 1
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
6573: LD_EXP 14
6577: PPUSH
6578: LD_EXP 16
6582: PPUSH
6583: CALL_OW 296
6587: PUSH
6588: LD_INT 4
6590: LESS
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_INT 5
6599: GREATER
6600: OR
6601: IFFALSE 6552
// Say ( Mike , DM-quest-1 ) ;
6603: LD_EXP 17
6607: PPUSH
6608: LD_STRING DM-quest-1
6610: PPUSH
6611: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6615: LD_EXP 16
6619: PPUSH
6620: LD_STRING DG-quest-1
6622: PPUSH
6623: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
6627: LD_EXP 14
6631: PPUSH
6632: LD_INT 55
6634: PPUSH
6635: LD_INT 87
6637: PPUSH
6638: CALL_OW 111
// InGameOff ;
6642: CALL_OW 9
// mercenariesQuestDone := true ;
6646: LD_ADDR_EXP 11
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// end ;
6654: PPOPN 1
6656: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
6657: LD_EXP 14
6661: PUSH
6662: LD_INT 55
6664: PUSH
6665: EMPTY
6666: LIST
6667: PPUSH
6668: CALL_OW 69
6672: IN
6673: IFFALSE 6713
6675: GO 6677
6677: DISABLE
// begin if Difficulty < 3 then
6678: LD_OWVAR 67
6682: PUSH
6683: LD_INT 3
6685: LESS
6686: IFFALSE 6701
// RemoveSeeing ( 59 , 60 , 2 ) ;
6688: LD_INT 59
6690: PPUSH
6691: LD_INT 60
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 331
// Say ( Heike , DH-driver ) ;
6701: LD_EXP 14
6705: PPUSH
6706: LD_STRING DH-driver
6708: PPUSH
6709: CALL_OW 88
// end ;
6713: END
// every 0 0$1 trigger mercenariesQuestDone do
6714: LD_EXP 11
6718: IFFALSE 7089
6720: GO 6722
6722: DISABLE
// begin if mercenariesQuestReady then
6723: LD_EXP 10
6727: IFFALSE 6736
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
6729: LD_STRING O5_proof_cont_out
6731: PPUSH
6732: CALL_OW 337
// InGameOn ;
6736: CALL_OW 8
// if IsInUnit ( Heike ) then
6740: LD_EXP 14
6744: PPUSH
6745: CALL_OW 310
6749: IFFALSE 6760
// ComExitVehicle ( Heike ) ;
6751: LD_EXP 14
6755: PPUSH
6756: CALL_OW 121
// wait ( 3 ) ;
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
6767: LD_EXP 14
6771: PPUSH
6772: LD_EXP 16
6776: PPUSH
6777: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6781: LD_EXP 15
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 16
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PPUSH
6801: LD_EXP 14
6805: PPUSH
6806: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
6810: LD_EXP 14
6814: PPUSH
6815: LD_STRING DH-quest-done-1
6817: PPUSH
6818: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
6822: LD_EXP 17
6826: PPUSH
6827: LD_STRING DM-quest-done-1
6829: PPUSH
6830: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6834: LD_EXP 14
6838: PPUSH
6839: LD_EXP 15
6843: PPUSH
6844: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
6848: LD_EXP 14
6852: PPUSH
6853: LD_STRING DH-quest-done-2
6855: PPUSH
6856: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
6860: LD_EXP 15
6864: PPUSH
6865: LD_STRING DO-quest-done-2
6867: PPUSH
6868: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
6872: LD_EXP 15
6876: PPUSH
6877: LD_STRING DO-quest-done-3
6879: PPUSH
6880: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
6884: LD_EXP 16
6888: PPUSH
6889: LD_INT 51
6891: PPUSH
6892: LD_INT 90
6894: PPUSH
6895: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
6899: LD_EXP 16
6903: PPUSH
6904: LD_INT 50
6906: PPUSH
6907: LD_INT 89
6909: PPUSH
6910: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
6914: LD_EXP 14
6918: PPUSH
6919: LD_EXP 16
6923: PPUSH
6924: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
6928: LD_EXP 16
6932: PPUSH
6933: LD_STRING DG-quest-done-4
6935: PPUSH
6936: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
6940: LD_EXP 16
6944: PPUSH
6945: LD_EXP 14
6949: PPUSH
6950: CALL_OW 119
// Say ( Heike , DH-quest-done-4 ) ;
6954: LD_EXP 14
6958: PPUSH
6959: LD_STRING DH-quest-done-4
6961: PPUSH
6962: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
6966: LD_EXP 15
6970: PPUSH
6971: LD_STRING DO-quest-done-4
6973: PPUSH
6974: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6978: LD_EXP 14
6982: PPUSH
6983: LD_EXP 15
6987: PPUSH
6988: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
6992: LD_EXP 14
6996: PPUSH
6997: LD_STRING DH-quest-done-5
6999: PPUSH
7000: CALL_OW 88
// InGameOff ;
7004: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7008: LD_STRING O6_end_cont
7010: PPUSH
7011: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7015: LD_EXP 16
7019: PPUSH
7020: LD_INT 2
7022: PPUSH
7023: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7027: LD_EXP 17
7031: PPUSH
7032: LD_INT 2
7034: PPUSH
7035: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7039: LD_INT 42
7041: PPUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 2
7047: PPUSH
7048: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7052: LD_EXP 15
7056: PPUSH
7057: LD_INT 53
7059: PPUSH
7060: LD_INT 89
7062: PPUSH
7063: CALL_OW 118
// lastObjectiveActive := true ;
7067: LD_ADDR_EXP 12
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7075: LD_INT 1
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: CALL_OW 424
// PreparePrison ;
7085: CALL 1081 0 0
// end ;
7089: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 7 ] ] ) do var i , tmp ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 91
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 7
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 69
7122: IFFALSE 7266
7124: GO 7126
7126: DISABLE
7127: LD_INT 0
7129: PPUSH
7130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 54
7158: PUSH
7159: EMPTY
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: PPUSH
7167: CALL_OW 69
7171: ST_TO_ADDR
// if not tmp then
7172: LD_VAR 0 2
7176: NOT
7177: IFFALSE 7181
// exit ;
7179: GO 7266
// for i in tmp do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_VAR 0 2
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7220
// begin ComExitBuilding ( i ) ;
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 121
7210: PPUSH
7211: LD_INT 22
7213: PPUSH
7214: CALL_OW 174
// end ;
7218: GO 7191
7220: POP
7221: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7222: LD_EXP 21
7226: PPUSH
7227: LD_INT 121
7229: PPUSH
7230: LD_INT 22
7232: PPUSH
7233: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7237: LD_EXP 22
7241: PPUSH
7242: LD_INT 121
7244: PPUSH
7245: LD_INT 22
7247: PPUSH
7248: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7252: LD_EXP 22
7256: PPUSH
7257: LD_EXP 14
7261: PPUSH
7262: CALL_OW 175
// end ;
7266: PPOPN 2
7268: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 7 ] ] ) do var i , tmp ;
7269: LD_INT 22
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 91
7281: PUSH
7282: LD_INT 8
7284: PUSH
7285: LD_INT 7
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: IFFALSE 7445
7303: GO 7305
7305: DISABLE
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_INT 22
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 25
7327: PUSH
7328: LD_INT 1
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 54
7337: PUSH
7338: EMPTY
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 69
7350: ST_TO_ADDR
// if not tmp then
7351: LD_VAR 0 2
7355: NOT
7356: IFFALSE 7360
// exit ;
7358: GO 7445
// for i in tmp do
7360: LD_ADDR_VAR 0 1
7364: PUSH
7365: LD_VAR 0 2
7369: PUSH
7370: FOR_IN
7371: IFFALSE 7399
// begin ComExitBuilding ( i ) ;
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_INT 142
7389: PPUSH
7390: LD_INT 71
7392: PPUSH
7393: CALL_OW 174
// end ;
7397: GO 7370
7399: POP
7400: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
7401: LD_EXP 21
7405: PPUSH
7406: LD_INT 142
7408: PPUSH
7409: LD_INT 71
7411: PPUSH
7412: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
7416: LD_EXP 22
7420: PPUSH
7421: LD_INT 142
7423: PPUSH
7424: LD_INT 71
7426: PPUSH
7427: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7431: LD_EXP 22
7435: PPUSH
7436: LD_EXP 14
7440: PPUSH
7441: CALL_OW 175
// end ;
7445: PPOPN 2
7447: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
7448: LD_EXP 12
7452: PUSH
7453: LD_INT 2
7455: PPUSH
7456: CALL_OW 302
7460: NOT
7461: AND
7462: PUSH
7463: LD_OWVAR 67
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: AND
7472: PUSH
7473: LD_EXP 13
7477: NOT
7478: AND
7479: IFFALSE 7496
7481: GO 7483
7483: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7484: LD_EXP 14
7488: PPUSH
7489: LD_STRING DH-prison-missing
7491: PPUSH
7492: CALL_OW 88
// end ;
7496: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
7497: LD_EXP 12
7501: PUSH
7502: LD_INT 8
7504: PPUSH
7505: CALL_OW 302
7509: NOT
7510: AND
7511: PUSH
7512: LD_OWVAR 67
7516: PUSH
7517: LD_INT 1
7519: GREATER
7520: AND
7521: PUSH
7522: LD_EXP 13
7526: NOT
7527: AND
7528: IFFALSE 7545
7530: GO 7532
7532: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7533: LD_EXP 14
7537: PPUSH
7538: LD_STRING DH-prison-missing
7540: PPUSH
7541: CALL_OW 88
// end ;
7545: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
7546: LD_EXP 12
7550: PUSH
7551: LD_INT 3
7553: PPUSH
7554: CALL_OW 302
7558: NOT
7559: AND
7560: PUSH
7561: LD_EXP 13
7565: NOT
7566: AND
7567: IFFALSE 7584
7569: GO 7571
7571: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7572: LD_EXP 14
7576: PPUSH
7577: LD_STRING DH-prison-missing-a
7579: PPUSH
7580: CALL_OW 88
// end ;
7584: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
7585: LD_EXP 12
7589: PUSH
7590: LD_INT 10
7592: PPUSH
7593: CALL_OW 302
7597: NOT
7598: AND
7599: PUSH
7600: LD_EXP 13
7604: NOT
7605: AND
7606: IFFALSE 7623
7608: GO 7610
7610: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DH-prison-missing-a
7618: PPUSH
7619: CALL_OW 88
// end ;
7623: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
7624: LD_EXP 13
7628: NOT
7629: PUSH
7630: LD_EXP 12
7634: AND
7635: PUSH
7636: LD_INT 2
7638: PPUSH
7639: LD_EXP 18
7643: PPUSH
7644: CALL_OW 292
7648: AND
7649: IFFALSE 7736
7651: GO 7653
7653: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
7654: LD_EXP 18
7658: PPUSH
7659: LD_EXP 14
7663: PPUSH
7664: CALL_OW 119
// DialogueOn ;
7668: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
7672: LD_EXP 18
7676: PPUSH
7677: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
7681: LD_EXP 18
7685: PPUSH
7686: LD_STRING DK-prison-found
7688: PPUSH
7689: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
7693: LD_EXP 14
7697: PPUSH
7698: LD_STRING DH-prison-found
7700: PPUSH
7701: CALL_OW 88
// DialogueOff ;
7705: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
7709: LD_EXP 18
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: CALL_OW 235
// prisonFound := true ;
7721: LD_ADDR_EXP 13
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
7729: LD_STRING O6_prison_out
7731: PPUSH
7732: CALL_OW 337
// end ;
7736: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) = 0 do var tmp ;
7737: LD_EXP 12
7741: PUSH
7742: LD_EXP 14
7746: PPUSH
7747: CALL_OW 302
7751: AND
7752: PUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_INT 21
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 2
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PPUSH
7780: CALL_OW 71
7784: PUSH
7785: LD_INT 0
7787: EQUAL
7788: AND
7789: IFFALSE 7981
7791: GO 7793
7793: DISABLE
7794: LD_INT 0
7796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
7797: LD_ADDR_VAR 0 1
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 21
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 69
7830: ST_TO_ADDR
// if prisonFound then
7831: LD_EXP 13
7835: IFFALSE 7849
// AddMedal ( med1 , 1 ) else
7837: LD_STRING med1
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: CALL_OW 101
7847: GO 7860
// AddMedal ( med1 , - 1 ) ;
7849: LD_STRING med1
7851: PPUSH
7852: LD_INT 1
7854: NEG
7855: PPUSH
7856: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
7860: LD_VAR 0 1
7864: PUSH
7865: LD_INT 3
7867: LESS
7868: PUSH
7869: LD_EXP 13
7873: NOT
7874: AND
7875: PUSH
7876: LD_VAR 0 1
7880: PUSH
7881: LD_INT 4
7883: LESS
7884: PUSH
7885: LD_EXP 13
7889: AND
7890: OR
7891: IFFALSE 7906
// AddMedal ( med2 , - 1 ) else
7893: LD_STRING med2
7895: PPUSH
7896: LD_INT 1
7898: NEG
7899: PPUSH
7900: CALL_OW 101
7904: GO 7916
// AddMedal ( med2 , 1 ) ;
7906: LD_STRING med2
7908: PPUSH
7909: LD_INT 1
7911: PPUSH
7912: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
7916: LD_EXP 13
7920: PUSH
7921: LD_EXP 4
7925: AND
7926: PUSH
7927: LD_VAR 0 1
7931: PUSH
7932: LD_INT 4
7934: GREATEREQUAL
7935: AND
7936: IFFALSE 7950
// AddMedal ( med3 , 1 ) else
7938: LD_STRING med3
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: CALL_OW 101
7948: GO 7961
// AddMedal ( med3 , - 1 ) ;
7950: LD_STRING med3
7952: PPUSH
7953: LD_INT 1
7955: NEG
7956: PPUSH
7957: CALL_OW 101
// GiveMedals ( MAIN ) ;
7961: LD_STRING MAIN
7963: PPUSH
7964: CALL_OW 102
// RewardPeople ( tmp ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 43
// YouWin ;
7977: CALL_OW 103
// end ; end_of_file
7981: PPOPN 1
7983: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7984: LD_VAR 0 1
7988: PUSH
7989: LD_EXP 14
7993: EQUAL
7994: IFFALSE 8003
// YouLost ( Heike ) ;
7996: LD_STRING Heike
7998: PPUSH
7999: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
8003: LD_VAR 0 1
8007: PUSH
8008: LD_INT 22
8010: PUSH
8011: LD_INT 3
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 25
8020: PUSH
8021: LD_INT 1
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PPUSH
8032: CALL_OW 69
8036: IN
8037: IFFALSE 8143
// begin if un in russianPatrol then
8039: LD_VAR 0 1
8043: PUSH
8044: LD_EXP 19
8048: IN
8049: IFFALSE 8067
// russianPatrol := russianPatrol diff un ;
8051: LD_ADDR_EXP 19
8055: PUSH
8056: LD_EXP 19
8060: PUSH
8061: LD_VAR 0 1
8065: DIFF
8066: ST_TO_ADDR
// if un in russianForestPatrol then
8067: LD_VAR 0 1
8071: PUSH
8072: LD_EXP 20
8076: IN
8077: IFFALSE 8095
// russianForestPatrol := russianForestPatrol diff un ;
8079: LD_ADDR_EXP 20
8083: PUSH
8084: LD_EXP 20
8088: PUSH
8089: LD_VAR 0 1
8093: DIFF
8094: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
8095: LD_ADDR_EXP 5
8099: PUSH
8100: LD_EXP 5
8104: PPUSH
8105: LD_EXP 5
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 250
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 251
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 1
8142: ST_TO_ADDR
// end ; end ;
8143: PPOPN 1
8145: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
8146: LD_VAR 0 1
8150: PUSH
8151: LD_EXP 14
8155: EQUAL
8156: IFFALSE 8165
// YouLost ( Heike ) ;
8158: LD_STRING Heike
8160: PPUSH
8161: CALL_OW 104
// end ;
8165: PPOPN 1
8167: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
8168: LD_VAR 0 1
8172: PUSH
8173: LD_INT 2
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: IN
8183: PUSH
8184: LD_VAR 0 2
8188: PUSH
8189: LD_INT 5
8191: PUSH
8192: LD_INT 2
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: IN
8199: AND
8200: IFFALSE 8209
// YouLost ( FriendlyFire ) ;
8202: LD_STRING FriendlyFire
8204: PPUSH
8205: CALL_OW 104
// end ; end_of_file
8209: PPOPN 2
8211: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8212: GO 8214
8214: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8215: LD_STRING initStreamRollete();
8217: PPUSH
8218: CALL_OW 559
// InitStreamMode ;
8222: CALL 8231 0 0
// DefineStreamItems ( ) ;
8226: CALL 8671 0 0
// end ;
8230: END
// function InitStreamMode ; begin
8231: LD_INT 0
8233: PPUSH
// streamModeActive := false ;
8234: LD_ADDR_EXP 24
8238: PUSH
8239: LD_INT 0
8241: ST_TO_ADDR
// normalCounter := 36 ;
8242: LD_ADDR_EXP 25
8246: PUSH
8247: LD_INT 36
8249: ST_TO_ADDR
// hardcoreCounter := 16 ;
8250: LD_ADDR_EXP 26
8254: PUSH
8255: LD_INT 16
8257: ST_TO_ADDR
// sRocket := false ;
8258: LD_ADDR_EXP 29
8262: PUSH
8263: LD_INT 0
8265: ST_TO_ADDR
// sSpeed := false ;
8266: LD_ADDR_EXP 28
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// sEngine := false ;
8274: LD_ADDR_EXP 30
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// sSpec := false ;
8282: LD_ADDR_EXP 27
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// sLevel := false ;
8290: LD_ADDR_EXP 31
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// sArmoury := false ;
8298: LD_ADDR_EXP 32
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// sRadar := false ;
8306: LD_ADDR_EXP 33
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// sBunker := false ;
8314: LD_ADDR_EXP 34
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// sHack := false ;
8322: LD_ADDR_EXP 35
8326: PUSH
8327: LD_INT 0
8329: ST_TO_ADDR
// sFire := false ;
8330: LD_ADDR_EXP 36
8334: PUSH
8335: LD_INT 0
8337: ST_TO_ADDR
// sRefresh := false ;
8338: LD_ADDR_EXP 37
8342: PUSH
8343: LD_INT 0
8345: ST_TO_ADDR
// sExp := false ;
8346: LD_ADDR_EXP 38
8350: PUSH
8351: LD_INT 0
8353: ST_TO_ADDR
// sDepot := false ;
8354: LD_ADDR_EXP 39
8358: PUSH
8359: LD_INT 0
8361: ST_TO_ADDR
// sFlag := false ;
8362: LD_ADDR_EXP 40
8366: PUSH
8367: LD_INT 0
8369: ST_TO_ADDR
// sKamikadze := false ;
8370: LD_ADDR_EXP 48
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// sTroll := false ;
8378: LD_ADDR_EXP 49
8382: PUSH
8383: LD_INT 0
8385: ST_TO_ADDR
// sSlow := false ;
8386: LD_ADDR_EXP 50
8390: PUSH
8391: LD_INT 0
8393: ST_TO_ADDR
// sLack := false ;
8394: LD_ADDR_EXP 51
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// sTank := false ;
8402: LD_ADDR_EXP 53
8406: PUSH
8407: LD_INT 0
8409: ST_TO_ADDR
// sRemote := false ;
8410: LD_ADDR_EXP 54
8414: PUSH
8415: LD_INT 0
8417: ST_TO_ADDR
// sPowell := false ;
8418: LD_ADDR_EXP 55
8422: PUSH
8423: LD_INT 0
8425: ST_TO_ADDR
// sTeleport := false ;
8426: LD_ADDR_EXP 58
8430: PUSH
8431: LD_INT 0
8433: ST_TO_ADDR
// sOilTower := false ;
8434: LD_ADDR_EXP 60
8438: PUSH
8439: LD_INT 0
8441: ST_TO_ADDR
// sShovel := false ;
8442: LD_ADDR_EXP 61
8446: PUSH
8447: LD_INT 0
8449: ST_TO_ADDR
// sSheik := false ;
8450: LD_ADDR_EXP 62
8454: PUSH
8455: LD_INT 0
8457: ST_TO_ADDR
// sEarthquake := false ;
8458: LD_ADDR_EXP 64
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// sAI := false ;
8466: LD_ADDR_EXP 65
8470: PUSH
8471: LD_INT 0
8473: ST_TO_ADDR
// sCargo := false ;
8474: LD_ADDR_EXP 68
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// sDLaser := false ;
8482: LD_ADDR_EXP 69
8486: PUSH
8487: LD_INT 0
8489: ST_TO_ADDR
// sExchange := false ;
8490: LD_ADDR_EXP 70
8494: PUSH
8495: LD_INT 0
8497: ST_TO_ADDR
// sFac := false ;
8498: LD_ADDR_EXP 71
8502: PUSH
8503: LD_INT 0
8505: ST_TO_ADDR
// sPower := false ;
8506: LD_ADDR_EXP 72
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// sRandom := false ;
8514: LD_ADDR_EXP 73
8518: PUSH
8519: LD_INT 0
8521: ST_TO_ADDR
// sShield := false ;
8522: LD_ADDR_EXP 74
8526: PUSH
8527: LD_INT 0
8529: ST_TO_ADDR
// sTime := false ;
8530: LD_ADDR_EXP 75
8534: PUSH
8535: LD_INT 0
8537: ST_TO_ADDR
// sTools := false ;
8538: LD_ADDR_EXP 76
8542: PUSH
8543: LD_INT 0
8545: ST_TO_ADDR
// sSold := false ;
8546: LD_ADDR_EXP 41
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// sDiff := false ;
8554: LD_ADDR_EXP 42
8558: PUSH
8559: LD_INT 0
8561: ST_TO_ADDR
// sFog := false ;
8562: LD_ADDR_EXP 45
8566: PUSH
8567: LD_INT 0
8569: ST_TO_ADDR
// sReset := false ;
8570: LD_ADDR_EXP 46
8574: PUSH
8575: LD_INT 0
8577: ST_TO_ADDR
// sSun := false ;
8578: LD_ADDR_EXP 47
8582: PUSH
8583: LD_INT 0
8585: ST_TO_ADDR
// sTiger := false ;
8586: LD_ADDR_EXP 43
8590: PUSH
8591: LD_INT 0
8593: ST_TO_ADDR
// sBomb := false ;
8594: LD_ADDR_EXP 44
8598: PUSH
8599: LD_INT 0
8601: ST_TO_ADDR
// sWound := false ;
8602: LD_ADDR_EXP 52
8606: PUSH
8607: LD_INT 0
8609: ST_TO_ADDR
// sBetray := false ;
8610: LD_ADDR_EXP 56
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// sContamin := false ;
8618: LD_ADDR_EXP 57
8622: PUSH
8623: LD_INT 0
8625: ST_TO_ADDR
// sOil := false ;
8626: LD_ADDR_EXP 59
8630: PUSH
8631: LD_INT 0
8633: ST_TO_ADDR
// sStu := false ;
8634: LD_ADDR_EXP 63
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sBazooka := false ;
8642: LD_ADDR_EXP 66
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// sMortar := false ;
8650: LD_ADDR_EXP 67
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// sRanger := false ;
8658: LD_ADDR_EXP 77
8662: PUSH
8663: LD_INT 0
8665: ST_TO_ADDR
// end ;
8666: LD_VAR 0 1
8670: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8671: LD_INT 0
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
// result := [ ] ;
8678: LD_ADDR_VAR 0 1
8682: PUSH
8683: EMPTY
8684: ST_TO_ADDR
// if campaign_id = 1 then
8685: LD_OWVAR 69
8689: PUSH
8690: LD_INT 1
8692: EQUAL
8693: IFFALSE 11631
// begin case mission_number of 1 :
8695: LD_OWVAR 70
8699: PUSH
8700: LD_INT 1
8702: DOUBLE
8703: EQUAL
8704: IFTRUE 8708
8706: GO 8772
8708: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8709: LD_ADDR_VAR 0 1
8713: PUSH
8714: LD_INT 2
8716: PUSH
8717: LD_INT 4
8719: PUSH
8720: LD_INT 11
8722: PUSH
8723: LD_INT 12
8725: PUSH
8726: LD_INT 15
8728: PUSH
8729: LD_INT 16
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: LD_INT 23
8737: PUSH
8738: LD_INT 26
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 101
8754: PUSH
8755: LD_INT 102
8757: PUSH
8758: LD_INT 106
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: ST_TO_ADDR
8770: GO 11629
8772: LD_INT 2
8774: DOUBLE
8775: EQUAL
8776: IFTRUE 8780
8778: GO 8852
8780: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8781: LD_ADDR_VAR 0 1
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 4
8791: PUSH
8792: LD_INT 11
8794: PUSH
8795: LD_INT 12
8797: PUSH
8798: LD_INT 15
8800: PUSH
8801: LD_INT 16
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 23
8809: PUSH
8810: LD_INT 26
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 101
8826: PUSH
8827: LD_INT 102
8829: PUSH
8830: LD_INT 105
8832: PUSH
8833: LD_INT 106
8835: PUSH
8836: LD_INT 108
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: ST_TO_ADDR
8850: GO 11629
8852: LD_INT 3
8854: DOUBLE
8855: EQUAL
8856: IFTRUE 8860
8858: GO 8936
8860: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8861: LD_ADDR_VAR 0 1
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 4
8871: PUSH
8872: LD_INT 5
8874: PUSH
8875: LD_INT 11
8877: PUSH
8878: LD_INT 12
8880: PUSH
8881: LD_INT 15
8883: PUSH
8884: LD_INT 16
8886: PUSH
8887: LD_INT 22
8889: PUSH
8890: LD_INT 26
8892: PUSH
8893: LD_INT 36
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 101
8910: PUSH
8911: LD_INT 102
8913: PUSH
8914: LD_INT 105
8916: PUSH
8917: LD_INT 106
8919: PUSH
8920: LD_INT 108
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: ST_TO_ADDR
8934: GO 11629
8936: LD_INT 4
8938: DOUBLE
8939: EQUAL
8940: IFTRUE 8944
8942: GO 9028
8944: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8945: LD_ADDR_VAR 0 1
8949: PUSH
8950: LD_INT 2
8952: PUSH
8953: LD_INT 4
8955: PUSH
8956: LD_INT 5
8958: PUSH
8959: LD_INT 8
8961: PUSH
8962: LD_INT 11
8964: PUSH
8965: LD_INT 12
8967: PUSH
8968: LD_INT 15
8970: PUSH
8971: LD_INT 16
8973: PUSH
8974: LD_INT 22
8976: PUSH
8977: LD_INT 23
8979: PUSH
8980: LD_INT 26
8982: PUSH
8983: LD_INT 36
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 101
9002: PUSH
9003: LD_INT 102
9005: PUSH
9006: LD_INT 105
9008: PUSH
9009: LD_INT 106
9011: PUSH
9012: LD_INT 108
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: ST_TO_ADDR
9026: GO 11629
9028: LD_INT 5
9030: DOUBLE
9031: EQUAL
9032: IFTRUE 9036
9034: GO 9136
9036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: LD_INT 6
9053: PUSH
9054: LD_INT 8
9056: PUSH
9057: LD_INT 11
9059: PUSH
9060: LD_INT 12
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: LD_INT 25
9077: PUSH
9078: LD_INT 26
9080: PUSH
9081: LD_INT 36
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 101
9102: PUSH
9103: LD_INT 102
9105: PUSH
9106: LD_INT 105
9108: PUSH
9109: LD_INT 106
9111: PUSH
9112: LD_INT 108
9114: PUSH
9115: LD_INT 109
9117: PUSH
9118: LD_INT 112
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: ST_TO_ADDR
9134: GO 11629
9136: LD_INT 6
9138: DOUBLE
9139: EQUAL
9140: IFTRUE 9144
9142: GO 9264
9144: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: LD_INT 4
9155: PUSH
9156: LD_INT 5
9158: PUSH
9159: LD_INT 6
9161: PUSH
9162: LD_INT 8
9164: PUSH
9165: LD_INT 11
9167: PUSH
9168: LD_INT 12
9170: PUSH
9171: LD_INT 15
9173: PUSH
9174: LD_INT 16
9176: PUSH
9177: LD_INT 20
9179: PUSH
9180: LD_INT 21
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 23
9188: PUSH
9189: LD_INT 25
9191: PUSH
9192: LD_INT 26
9194: PUSH
9195: LD_INT 30
9197: PUSH
9198: LD_INT 31
9200: PUSH
9201: LD_INT 32
9203: PUSH
9204: LD_INT 36
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 101
9230: PUSH
9231: LD_INT 102
9233: PUSH
9234: LD_INT 105
9236: PUSH
9237: LD_INT 106
9239: PUSH
9240: LD_INT 108
9242: PUSH
9243: LD_INT 109
9245: PUSH
9246: LD_INT 112
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: ST_TO_ADDR
9262: GO 11629
9264: LD_INT 7
9266: DOUBLE
9267: EQUAL
9268: IFTRUE 9272
9270: GO 9372
9272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9273: LD_ADDR_VAR 0 1
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: LD_INT 5
9286: PUSH
9287: LD_INT 7
9289: PUSH
9290: LD_INT 11
9292: PUSH
9293: LD_INT 12
9295: PUSH
9296: LD_INT 15
9298: PUSH
9299: LD_INT 16
9301: PUSH
9302: LD_INT 20
9304: PUSH
9305: LD_INT 21
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_INT 23
9313: PUSH
9314: LD_INT 25
9316: PUSH
9317: LD_INT 26
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 101
9338: PUSH
9339: LD_INT 102
9341: PUSH
9342: LD_INT 103
9344: PUSH
9345: LD_INT 105
9347: PUSH
9348: LD_INT 106
9350: PUSH
9351: LD_INT 108
9353: PUSH
9354: LD_INT 112
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: ST_TO_ADDR
9370: GO 11629
9372: LD_INT 8
9374: DOUBLE
9375: EQUAL
9376: IFTRUE 9380
9378: GO 9508
9380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9381: LD_ADDR_VAR 0 1
9385: PUSH
9386: LD_INT 2
9388: PUSH
9389: LD_INT 4
9391: PUSH
9392: LD_INT 5
9394: PUSH
9395: LD_INT 6
9397: PUSH
9398: LD_INT 7
9400: PUSH
9401: LD_INT 8
9403: PUSH
9404: LD_INT 11
9406: PUSH
9407: LD_INT 12
9409: PUSH
9410: LD_INT 15
9412: PUSH
9413: LD_INT 16
9415: PUSH
9416: LD_INT 20
9418: PUSH
9419: LD_INT 21
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_INT 23
9427: PUSH
9428: LD_INT 25
9430: PUSH
9431: LD_INT 26
9433: PUSH
9434: LD_INT 30
9436: PUSH
9437: LD_INT 31
9439: PUSH
9440: LD_INT 32
9442: PUSH
9443: LD_INT 36
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 101
9470: PUSH
9471: LD_INT 102
9473: PUSH
9474: LD_INT 103
9476: PUSH
9477: LD_INT 105
9479: PUSH
9480: LD_INT 106
9482: PUSH
9483: LD_INT 108
9485: PUSH
9486: LD_INT 109
9488: PUSH
9489: LD_INT 112
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: ST_TO_ADDR
9506: GO 11629
9508: LD_INT 9
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 9652
9516: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9517: LD_ADDR_VAR 0 1
9521: PUSH
9522: LD_INT 2
9524: PUSH
9525: LD_INT 4
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: LD_INT 6
9533: PUSH
9534: LD_INT 7
9536: PUSH
9537: LD_INT 8
9539: PUSH
9540: LD_INT 11
9542: PUSH
9543: LD_INT 12
9545: PUSH
9546: LD_INT 15
9548: PUSH
9549: LD_INT 16
9551: PUSH
9552: LD_INT 20
9554: PUSH
9555: LD_INT 21
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_INT 23
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 26
9569: PUSH
9570: LD_INT 28
9572: PUSH
9573: LD_INT 30
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 32
9581: PUSH
9582: LD_INT 36
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 101
9610: PUSH
9611: LD_INT 102
9613: PUSH
9614: LD_INT 103
9616: PUSH
9617: LD_INT 105
9619: PUSH
9620: LD_INT 106
9622: PUSH
9623: LD_INT 108
9625: PUSH
9626: LD_INT 109
9628: PUSH
9629: LD_INT 112
9631: PUSH
9632: LD_INT 114
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: ST_TO_ADDR
9650: GO 11629
9652: LD_INT 10
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9844
9660: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9661: LD_ADDR_VAR 0 1
9665: PUSH
9666: LD_INT 2
9668: PUSH
9669: LD_INT 4
9671: PUSH
9672: LD_INT 5
9674: PUSH
9675: LD_INT 6
9677: PUSH
9678: LD_INT 7
9680: PUSH
9681: LD_INT 8
9683: PUSH
9684: LD_INT 9
9686: PUSH
9687: LD_INT 10
9689: PUSH
9690: LD_INT 11
9692: PUSH
9693: LD_INT 12
9695: PUSH
9696: LD_INT 13
9698: PUSH
9699: LD_INT 14
9701: PUSH
9702: LD_INT 15
9704: PUSH
9705: LD_INT 16
9707: PUSH
9708: LD_INT 17
9710: PUSH
9711: LD_INT 18
9713: PUSH
9714: LD_INT 19
9716: PUSH
9717: LD_INT 20
9719: PUSH
9720: LD_INT 21
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_INT 23
9728: PUSH
9729: LD_INT 24
9731: PUSH
9732: LD_INT 25
9734: PUSH
9735: LD_INT 26
9737: PUSH
9738: LD_INT 28
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 31
9746: PUSH
9747: LD_INT 32
9749: PUSH
9750: LD_INT 36
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 101
9786: PUSH
9787: LD_INT 102
9789: PUSH
9790: LD_INT 103
9792: PUSH
9793: LD_INT 104
9795: PUSH
9796: LD_INT 105
9798: PUSH
9799: LD_INT 106
9801: PUSH
9802: LD_INT 107
9804: PUSH
9805: LD_INT 108
9807: PUSH
9808: LD_INT 109
9810: PUSH
9811: LD_INT 110
9813: PUSH
9814: LD_INT 111
9816: PUSH
9817: LD_INT 112
9819: PUSH
9820: LD_INT 114
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: ST_TO_ADDR
9842: GO 11629
9844: LD_INT 11
9846: DOUBLE
9847: EQUAL
9848: IFTRUE 9852
9850: GO 10044
9852: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9853: LD_ADDR_VAR 0 1
9857: PUSH
9858: LD_INT 2
9860: PUSH
9861: LD_INT 3
9863: PUSH
9864: LD_INT 4
9866: PUSH
9867: LD_INT 5
9869: PUSH
9870: LD_INT 6
9872: PUSH
9873: LD_INT 7
9875: PUSH
9876: LD_INT 8
9878: PUSH
9879: LD_INT 9
9881: PUSH
9882: LD_INT 10
9884: PUSH
9885: LD_INT 11
9887: PUSH
9888: LD_INT 12
9890: PUSH
9891: LD_INT 13
9893: PUSH
9894: LD_INT 14
9896: PUSH
9897: LD_INT 15
9899: PUSH
9900: LD_INT 16
9902: PUSH
9903: LD_INT 17
9905: PUSH
9906: LD_INT 18
9908: PUSH
9909: LD_INT 19
9911: PUSH
9912: LD_INT 20
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_INT 23
9923: PUSH
9924: LD_INT 24
9926: PUSH
9927: LD_INT 25
9929: PUSH
9930: LD_INT 26
9932: PUSH
9933: LD_INT 28
9935: PUSH
9936: LD_INT 30
9938: PUSH
9939: LD_INT 31
9941: PUSH
9942: LD_INT 32
9944: PUSH
9945: LD_INT 34
9947: PUSH
9948: LD_INT 36
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 101
9986: PUSH
9987: LD_INT 102
9989: PUSH
9990: LD_INT 103
9992: PUSH
9993: LD_INT 104
9995: PUSH
9996: LD_INT 105
9998: PUSH
9999: LD_INT 106
10001: PUSH
10002: LD_INT 107
10004: PUSH
10005: LD_INT 108
10007: PUSH
10008: LD_INT 109
10010: PUSH
10011: LD_INT 110
10013: PUSH
10014: LD_INT 111
10016: PUSH
10017: LD_INT 112
10019: PUSH
10020: LD_INT 114
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: ST_TO_ADDR
10042: GO 11629
10044: LD_INT 12
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10260
10052: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10053: LD_ADDR_VAR 0 1
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: LD_INT 3
10066: PUSH
10067: LD_INT 4
10069: PUSH
10070: LD_INT 5
10072: PUSH
10073: LD_INT 6
10075: PUSH
10076: LD_INT 7
10078: PUSH
10079: LD_INT 8
10081: PUSH
10082: LD_INT 9
10084: PUSH
10085: LD_INT 10
10087: PUSH
10088: LD_INT 11
10090: PUSH
10091: LD_INT 12
10093: PUSH
10094: LD_INT 13
10096: PUSH
10097: LD_INT 14
10099: PUSH
10100: LD_INT 15
10102: PUSH
10103: LD_INT 16
10105: PUSH
10106: LD_INT 17
10108: PUSH
10109: LD_INT 18
10111: PUSH
10112: LD_INT 19
10114: PUSH
10115: LD_INT 20
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 22
10123: PUSH
10124: LD_INT 23
10126: PUSH
10127: LD_INT 24
10129: PUSH
10130: LD_INT 25
10132: PUSH
10133: LD_INT 26
10135: PUSH
10136: LD_INT 27
10138: PUSH
10139: LD_INT 28
10141: PUSH
10142: LD_INT 30
10144: PUSH
10145: LD_INT 31
10147: PUSH
10148: LD_INT 32
10150: PUSH
10151: LD_INT 33
10153: PUSH
10154: LD_INT 34
10156: PUSH
10157: LD_INT 36
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 101
10198: PUSH
10199: LD_INT 102
10201: PUSH
10202: LD_INT 103
10204: PUSH
10205: LD_INT 104
10207: PUSH
10208: LD_INT 105
10210: PUSH
10211: LD_INT 106
10213: PUSH
10214: LD_INT 107
10216: PUSH
10217: LD_INT 108
10219: PUSH
10220: LD_INT 109
10222: PUSH
10223: LD_INT 110
10225: PUSH
10226: LD_INT 111
10228: PUSH
10229: LD_INT 112
10231: PUSH
10232: LD_INT 113
10234: PUSH
10235: LD_INT 114
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: ST_TO_ADDR
10258: GO 11629
10260: LD_INT 13
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10464
10268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10269: LD_ADDR_VAR 0 1
10273: PUSH
10274: LD_INT 1
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: LD_INT 4
10285: PUSH
10286: LD_INT 5
10288: PUSH
10289: LD_INT 8
10291: PUSH
10292: LD_INT 9
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 11
10300: PUSH
10301: LD_INT 12
10303: PUSH
10304: LD_INT 14
10306: PUSH
10307: LD_INT 15
10309: PUSH
10310: LD_INT 16
10312: PUSH
10313: LD_INT 17
10315: PUSH
10316: LD_INT 18
10318: PUSH
10319: LD_INT 19
10321: PUSH
10322: LD_INT 20
10324: PUSH
10325: LD_INT 21
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 23
10333: PUSH
10334: LD_INT 24
10336: PUSH
10337: LD_INT 25
10339: PUSH
10340: LD_INT 26
10342: PUSH
10343: LD_INT 27
10345: PUSH
10346: LD_INT 28
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 31
10354: PUSH
10355: LD_INT 32
10357: PUSH
10358: LD_INT 33
10360: PUSH
10361: LD_INT 34
10363: PUSH
10364: LD_INT 36
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 101
10402: PUSH
10403: LD_INT 102
10405: PUSH
10406: LD_INT 103
10408: PUSH
10409: LD_INT 104
10411: PUSH
10412: LD_INT 105
10414: PUSH
10415: LD_INT 106
10417: PUSH
10418: LD_INT 107
10420: PUSH
10421: LD_INT 108
10423: PUSH
10424: LD_INT 109
10426: PUSH
10427: LD_INT 110
10429: PUSH
10430: LD_INT 111
10432: PUSH
10433: LD_INT 112
10435: PUSH
10436: LD_INT 113
10438: PUSH
10439: LD_INT 114
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: ST_TO_ADDR
10462: GO 11629
10464: LD_INT 14
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10684
10472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10473: LD_ADDR_VAR 0 1
10477: PUSH
10478: LD_INT 1
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: LD_INT 3
10486: PUSH
10487: LD_INT 4
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: LD_INT 6
10495: PUSH
10496: LD_INT 7
10498: PUSH
10499: LD_INT 8
10501: PUSH
10502: LD_INT 9
10504: PUSH
10505: LD_INT 10
10507: PUSH
10508: LD_INT 11
10510: PUSH
10511: LD_INT 12
10513: PUSH
10514: LD_INT 13
10516: PUSH
10517: LD_INT 14
10519: PUSH
10520: LD_INT 15
10522: PUSH
10523: LD_INT 16
10525: PUSH
10526: LD_INT 17
10528: PUSH
10529: LD_INT 18
10531: PUSH
10532: LD_INT 19
10534: PUSH
10535: LD_INT 20
10537: PUSH
10538: LD_INT 21
10540: PUSH
10541: LD_INT 22
10543: PUSH
10544: LD_INT 23
10546: PUSH
10547: LD_INT 24
10549: PUSH
10550: LD_INT 25
10552: PUSH
10553: LD_INT 26
10555: PUSH
10556: LD_INT 27
10558: PUSH
10559: LD_INT 28
10561: PUSH
10562: LD_INT 29
10564: PUSH
10565: LD_INT 30
10567: PUSH
10568: LD_INT 31
10570: PUSH
10571: LD_INT 32
10573: PUSH
10574: LD_INT 33
10576: PUSH
10577: LD_INT 34
10579: PUSH
10580: LD_INT 36
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 103
10628: PUSH
10629: LD_INT 104
10631: PUSH
10632: LD_INT 105
10634: PUSH
10635: LD_INT 106
10637: PUSH
10638: LD_INT 107
10640: PUSH
10641: LD_INT 108
10643: PUSH
10644: LD_INT 109
10646: PUSH
10647: LD_INT 110
10649: PUSH
10650: LD_INT 111
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 113
10658: PUSH
10659: LD_INT 114
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: ST_TO_ADDR
10682: GO 11629
10684: LD_INT 15
10686: DOUBLE
10687: EQUAL
10688: IFTRUE 10692
10690: GO 10904
10692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10693: LD_ADDR_VAR 0 1
10697: PUSH
10698: LD_INT 1
10700: PUSH
10701: LD_INT 2
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: LD_INT 4
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: LD_INT 7
10718: PUSH
10719: LD_INT 8
10721: PUSH
10722: LD_INT 9
10724: PUSH
10725: LD_INT 10
10727: PUSH
10728: LD_INT 11
10730: PUSH
10731: LD_INT 12
10733: PUSH
10734: LD_INT 13
10736: PUSH
10737: LD_INT 14
10739: PUSH
10740: LD_INT 15
10742: PUSH
10743: LD_INT 16
10745: PUSH
10746: LD_INT 17
10748: PUSH
10749: LD_INT 18
10751: PUSH
10752: LD_INT 19
10754: PUSH
10755: LD_INT 20
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 22
10763: PUSH
10764: LD_INT 23
10766: PUSH
10767: LD_INT 24
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 26
10775: PUSH
10776: LD_INT 27
10778: PUSH
10779: LD_INT 28
10781: PUSH
10782: LD_INT 29
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 31
10790: PUSH
10791: LD_INT 32
10793: PUSH
10794: LD_INT 33
10796: PUSH
10797: LD_INT 34
10799: PUSH
10800: LD_INT 36
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 102
10845: PUSH
10846: LD_INT 103
10848: PUSH
10849: LD_INT 104
10851: PUSH
10852: LD_INT 105
10854: PUSH
10855: LD_INT 106
10857: PUSH
10858: LD_INT 107
10860: PUSH
10861: LD_INT 108
10863: PUSH
10864: LD_INT 109
10866: PUSH
10867: LD_INT 110
10869: PUSH
10870: LD_INT 111
10872: PUSH
10873: LD_INT 112
10875: PUSH
10876: LD_INT 113
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: ST_TO_ADDR
10902: GO 11629
10904: LD_INT 16
10906: DOUBLE
10907: EQUAL
10908: IFTRUE 10912
10910: GO 11036
10912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10913: LD_ADDR_VAR 0 1
10917: PUSH
10918: LD_INT 2
10920: PUSH
10921: LD_INT 4
10923: PUSH
10924: LD_INT 5
10926: PUSH
10927: LD_INT 7
10929: PUSH
10930: LD_INT 11
10932: PUSH
10933: LD_INT 12
10935: PUSH
10936: LD_INT 15
10938: PUSH
10939: LD_INT 16
10941: PUSH
10942: LD_INT 20
10944: PUSH
10945: LD_INT 21
10947: PUSH
10948: LD_INT 22
10950: PUSH
10951: LD_INT 23
10953: PUSH
10954: LD_INT 25
10956: PUSH
10957: LD_INT 26
10959: PUSH
10960: LD_INT 30
10962: PUSH
10963: LD_INT 31
10965: PUSH
10966: LD_INT 32
10968: PUSH
10969: LD_INT 33
10971: PUSH
10972: LD_INT 34
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 101
10998: PUSH
10999: LD_INT 102
11001: PUSH
11002: LD_INT 103
11004: PUSH
11005: LD_INT 106
11007: PUSH
11008: LD_INT 108
11010: PUSH
11011: LD_INT 112
11013: PUSH
11014: LD_INT 113
11016: PUSH
11017: LD_INT 114
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: ST_TO_ADDR
11034: GO 11629
11036: LD_INT 17
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11256
11044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: LD_INT 4
11061: PUSH
11062: LD_INT 5
11064: PUSH
11065: LD_INT 6
11067: PUSH
11068: LD_INT 7
11070: PUSH
11071: LD_INT 8
11073: PUSH
11074: LD_INT 9
11076: PUSH
11077: LD_INT 10
11079: PUSH
11080: LD_INT 11
11082: PUSH
11083: LD_INT 12
11085: PUSH
11086: LD_INT 13
11088: PUSH
11089: LD_INT 14
11091: PUSH
11092: LD_INT 15
11094: PUSH
11095: LD_INT 16
11097: PUSH
11098: LD_INT 17
11100: PUSH
11101: LD_INT 18
11103: PUSH
11104: LD_INT 19
11106: PUSH
11107: LD_INT 20
11109: PUSH
11110: LD_INT 21
11112: PUSH
11113: LD_INT 22
11115: PUSH
11116: LD_INT 23
11118: PUSH
11119: LD_INT 24
11121: PUSH
11122: LD_INT 25
11124: PUSH
11125: LD_INT 26
11127: PUSH
11128: LD_INT 27
11130: PUSH
11131: LD_INT 28
11133: PUSH
11134: LD_INT 29
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 31
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 33
11148: PUSH
11149: LD_INT 34
11151: PUSH
11152: LD_INT 36
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 104
11203: PUSH
11204: LD_INT 105
11206: PUSH
11207: LD_INT 106
11209: PUSH
11210: LD_INT 107
11212: PUSH
11213: LD_INT 108
11215: PUSH
11216: LD_INT 109
11218: PUSH
11219: LD_INT 110
11221: PUSH
11222: LD_INT 111
11224: PUSH
11225: LD_INT 112
11227: PUSH
11228: LD_INT 113
11230: PUSH
11231: LD_INT 114
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: ST_TO_ADDR
11254: GO 11629
11256: LD_INT 18
11258: DOUBLE
11259: EQUAL
11260: IFTRUE 11264
11262: GO 11400
11264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11265: LD_ADDR_VAR 0 1
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 4
11275: PUSH
11276: LD_INT 5
11278: PUSH
11279: LD_INT 7
11281: PUSH
11282: LD_INT 11
11284: PUSH
11285: LD_INT 12
11287: PUSH
11288: LD_INT 15
11290: PUSH
11291: LD_INT 16
11293: PUSH
11294: LD_INT 20
11296: PUSH
11297: LD_INT 21
11299: PUSH
11300: LD_INT 22
11302: PUSH
11303: LD_INT 23
11305: PUSH
11306: LD_INT 25
11308: PUSH
11309: LD_INT 26
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: LD_INT 31
11317: PUSH
11318: LD_INT 32
11320: PUSH
11321: LD_INT 33
11323: PUSH
11324: LD_INT 34
11326: PUSH
11327: LD_INT 35
11329: PUSH
11330: LD_INT 36
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 101
11358: PUSH
11359: LD_INT 102
11361: PUSH
11362: LD_INT 103
11364: PUSH
11365: LD_INT 106
11367: PUSH
11368: LD_INT 108
11370: PUSH
11371: LD_INT 112
11373: PUSH
11374: LD_INT 113
11376: PUSH
11377: LD_INT 114
11379: PUSH
11380: LD_INT 115
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: ST_TO_ADDR
11398: GO 11629
11400: LD_INT 19
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 11628
11408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11409: LD_ADDR_VAR 0 1
11413: PUSH
11414: LD_INT 1
11416: PUSH
11417: LD_INT 2
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 4
11425: PUSH
11426: LD_INT 5
11428: PUSH
11429: LD_INT 6
11431: PUSH
11432: LD_INT 7
11434: PUSH
11435: LD_INT 8
11437: PUSH
11438: LD_INT 9
11440: PUSH
11441: LD_INT 10
11443: PUSH
11444: LD_INT 11
11446: PUSH
11447: LD_INT 12
11449: PUSH
11450: LD_INT 13
11452: PUSH
11453: LD_INT 14
11455: PUSH
11456: LD_INT 15
11458: PUSH
11459: LD_INT 16
11461: PUSH
11462: LD_INT 17
11464: PUSH
11465: LD_INT 18
11467: PUSH
11468: LD_INT 19
11470: PUSH
11471: LD_INT 20
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 22
11479: PUSH
11480: LD_INT 23
11482: PUSH
11483: LD_INT 24
11485: PUSH
11486: LD_INT 25
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 27
11494: PUSH
11495: LD_INT 28
11497: PUSH
11498: LD_INT 29
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 31
11506: PUSH
11507: LD_INT 32
11509: PUSH
11510: LD_INT 33
11512: PUSH
11513: LD_INT 34
11515: PUSH
11516: LD_INT 35
11518: PUSH
11519: LD_INT 36
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 101
11562: PUSH
11563: LD_INT 102
11565: PUSH
11566: LD_INT 103
11568: PUSH
11569: LD_INT 104
11571: PUSH
11572: LD_INT 105
11574: PUSH
11575: LD_INT 106
11577: PUSH
11578: LD_INT 107
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 109
11586: PUSH
11587: LD_INT 110
11589: PUSH
11590: LD_INT 111
11592: PUSH
11593: LD_INT 112
11595: PUSH
11596: LD_INT 113
11598: PUSH
11599: LD_INT 114
11601: PUSH
11602: LD_INT 115
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: ST_TO_ADDR
11626: GO 11629
11628: POP
// end else
11629: GO 11666
// if campaign_id = 5 then
11631: LD_OWVAR 69
11635: PUSH
11636: LD_INT 5
11638: EQUAL
11639: IFFALSE 11666
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
11641: LD_ADDR_VAR 0 1
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 100
11658: PUSH
11659: EMPTY
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: ST_TO_ADDR
// end ; if result then
11666: LD_VAR 0 1
11670: IFFALSE 11959
// begin normal :=  ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_STRING 
11679: ST_TO_ADDR
// hardcore :=  ;
11680: LD_ADDR_VAR 0 4
11684: PUSH
11685: LD_STRING 
11687: ST_TO_ADDR
// for i = 1 to normalCounter do
11688: LD_ADDR_VAR 0 5
11692: PUSH
11693: DOUBLE
11694: LD_INT 1
11696: DEC
11697: ST_TO_ADDR
11698: LD_EXP 25
11702: PUSH
11703: FOR_TO
11704: IFFALSE 11805
// begin tmp := 0 ;
11706: LD_ADDR_VAR 0 2
11710: PUSH
11711: LD_STRING 0
11713: ST_TO_ADDR
// if result [ 1 ] then
11714: LD_VAR 0 1
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: IFFALSE 11787
// if result [ 1 ] [ 1 ] = i then
11724: LD_VAR 0 1
11728: PUSH
11729: LD_INT 1
11731: ARRAY
11732: PUSH
11733: LD_INT 1
11735: ARRAY
11736: PUSH
11737: LD_VAR 0 5
11741: EQUAL
11742: IFFALSE 11787
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: LD_VAR 0 1
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_VAR 0 1
11761: PUSH
11762: LD_INT 1
11764: ARRAY
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 3
11773: PPUSH
11774: CALL_OW 1
11778: ST_TO_ADDR
// tmp := 1 ;
11779: LD_ADDR_VAR 0 2
11783: PUSH
11784: LD_STRING 1
11786: ST_TO_ADDR
// end ; normal := normal & tmp ;
11787: LD_ADDR_VAR 0 3
11791: PUSH
11792: LD_VAR 0 3
11796: PUSH
11797: LD_VAR 0 2
11801: STR
11802: ST_TO_ADDR
// end ;
11803: GO 11703
11805: POP
11806: POP
// for i = 1 to hardcoreCounter do
11807: LD_ADDR_VAR 0 5
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_EXP 26
11821: PUSH
11822: FOR_TO
11823: IFFALSE 11928
// begin tmp := 0 ;
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_STRING 0
11832: ST_TO_ADDR
// if result [ 2 ] then
11833: LD_VAR 0 1
11837: PUSH
11838: LD_INT 2
11840: ARRAY
11841: IFFALSE 11910
// if result [ 2 ] [ 1 ] = 100 + i then
11843: LD_VAR 0 1
11847: PUSH
11848: LD_INT 2
11850: ARRAY
11851: PUSH
11852: LD_INT 1
11854: ARRAY
11855: PUSH
11856: LD_INT 100
11858: PUSH
11859: LD_VAR 0 5
11863: PLUS
11864: EQUAL
11865: IFFALSE 11910
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11867: LD_ADDR_VAR 0 1
11871: PUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 2
11879: PPUSH
11880: LD_VAR 0 1
11884: PUSH
11885: LD_INT 2
11887: ARRAY
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 3
11896: PPUSH
11897: CALL_OW 1
11901: ST_TO_ADDR
// tmp := 1 ;
11902: LD_ADDR_VAR 0 2
11906: PUSH
11907: LD_STRING 1
11909: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11910: LD_ADDR_VAR 0 4
11914: PUSH
11915: LD_VAR 0 4
11919: PUSH
11920: LD_VAR 0 2
11924: STR
11925: ST_TO_ADDR
// end ;
11926: GO 11822
11928: POP
11929: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11930: LD_STRING getStreamItemsFromMission("
11932: PUSH
11933: LD_VAR 0 3
11937: STR
11938: PUSH
11939: LD_STRING ","
11941: STR
11942: PUSH
11943: LD_VAR 0 4
11947: STR
11948: PUSH
11949: LD_STRING ")
11951: STR
11952: PPUSH
11953: CALL_OW 559
// end else
11957: GO 11966
// ToLua ( getStreamItemsFromMission("","") ) ;
11959: LD_STRING getStreamItemsFromMission("","")
11961: PPUSH
11962: CALL_OW 559
// end ;
11966: LD_VAR 0 1
11970: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11971: LD_VAR 0 2
11975: PUSH
11976: LD_INT 100
11978: EQUAL
11979: IFFALSE 12928
// begin if not StreamModeActive then
11981: LD_EXP 24
11985: NOT
11986: IFFALSE 11996
// StreamModeActive := true ;
11988: LD_ADDR_EXP 24
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 0 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 0
12003: EQUAL
12004: IFFALSE 12010
// InitStreamMode ;
12006: CALL 8231 0 0
// if p3 = 1 then
12010: LD_VAR 0 3
12014: PUSH
12015: LD_INT 1
12017: EQUAL
12018: IFFALSE 12028
// sRocket := true ;
12020: LD_ADDR_EXP 29
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// if p3 = 2 then
12028: LD_VAR 0 3
12032: PUSH
12033: LD_INT 2
12035: EQUAL
12036: IFFALSE 12046
// sSpeed := true ;
12038: LD_ADDR_EXP 28
12042: PUSH
12043: LD_INT 1
12045: ST_TO_ADDR
// if p3 = 3 then
12046: LD_VAR 0 3
12050: PUSH
12051: LD_INT 3
12053: EQUAL
12054: IFFALSE 12064
// sEngine := true ;
12056: LD_ADDR_EXP 30
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// if p3 = 4 then
12064: LD_VAR 0 3
12068: PUSH
12069: LD_INT 4
12071: EQUAL
12072: IFFALSE 12082
// sSpec := true ;
12074: LD_ADDR_EXP 27
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if p3 = 5 then
12082: LD_VAR 0 3
12086: PUSH
12087: LD_INT 5
12089: EQUAL
12090: IFFALSE 12100
// sLevel := true ;
12092: LD_ADDR_EXP 31
12096: PUSH
12097: LD_INT 1
12099: ST_TO_ADDR
// if p3 = 6 then
12100: LD_VAR 0 3
12104: PUSH
12105: LD_INT 6
12107: EQUAL
12108: IFFALSE 12118
// sArmoury := true ;
12110: LD_ADDR_EXP 32
12114: PUSH
12115: LD_INT 1
12117: ST_TO_ADDR
// if p3 = 7 then
12118: LD_VAR 0 3
12122: PUSH
12123: LD_INT 7
12125: EQUAL
12126: IFFALSE 12136
// sRadar := true ;
12128: LD_ADDR_EXP 33
12132: PUSH
12133: LD_INT 1
12135: ST_TO_ADDR
// if p3 = 8 then
12136: LD_VAR 0 3
12140: PUSH
12141: LD_INT 8
12143: EQUAL
12144: IFFALSE 12154
// sBunker := true ;
12146: LD_ADDR_EXP 34
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// if p3 = 9 then
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 9
12161: EQUAL
12162: IFFALSE 12172
// sHack := true ;
12164: LD_ADDR_EXP 35
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// if p3 = 10 then
12172: LD_VAR 0 3
12176: PUSH
12177: LD_INT 10
12179: EQUAL
12180: IFFALSE 12190
// sFire := true ;
12182: LD_ADDR_EXP 36
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// if p3 = 11 then
12190: LD_VAR 0 3
12194: PUSH
12195: LD_INT 11
12197: EQUAL
12198: IFFALSE 12208
// sRefresh := true ;
12200: LD_ADDR_EXP 37
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// if p3 = 12 then
12208: LD_VAR 0 3
12212: PUSH
12213: LD_INT 12
12215: EQUAL
12216: IFFALSE 12226
// sExp := true ;
12218: LD_ADDR_EXP 38
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// if p3 = 13 then
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 13
12233: EQUAL
12234: IFFALSE 12244
// sDepot := true ;
12236: LD_ADDR_EXP 39
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// if p3 = 14 then
12244: LD_VAR 0 3
12248: PUSH
12249: LD_INT 14
12251: EQUAL
12252: IFFALSE 12262
// sFlag := true ;
12254: LD_ADDR_EXP 40
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// if p3 = 15 then
12262: LD_VAR 0 3
12266: PUSH
12267: LD_INT 15
12269: EQUAL
12270: IFFALSE 12280
// sKamikadze := true ;
12272: LD_ADDR_EXP 48
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// if p3 = 16 then
12280: LD_VAR 0 3
12284: PUSH
12285: LD_INT 16
12287: EQUAL
12288: IFFALSE 12298
// sTroll := true ;
12290: LD_ADDR_EXP 49
12294: PUSH
12295: LD_INT 1
12297: ST_TO_ADDR
// if p3 = 17 then
12298: LD_VAR 0 3
12302: PUSH
12303: LD_INT 17
12305: EQUAL
12306: IFFALSE 12316
// sSlow := true ;
12308: LD_ADDR_EXP 50
12312: PUSH
12313: LD_INT 1
12315: ST_TO_ADDR
// if p3 = 18 then
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 18
12323: EQUAL
12324: IFFALSE 12334
// sLack := true ;
12326: LD_ADDR_EXP 51
12330: PUSH
12331: LD_INT 1
12333: ST_TO_ADDR
// if p3 = 19 then
12334: LD_VAR 0 3
12338: PUSH
12339: LD_INT 19
12341: EQUAL
12342: IFFALSE 12352
// sTank := true ;
12344: LD_ADDR_EXP 53
12348: PUSH
12349: LD_INT 1
12351: ST_TO_ADDR
// if p3 = 20 then
12352: LD_VAR 0 3
12356: PUSH
12357: LD_INT 20
12359: EQUAL
12360: IFFALSE 12370
// sRemote := true ;
12362: LD_ADDR_EXP 54
12366: PUSH
12367: LD_INT 1
12369: ST_TO_ADDR
// if p3 = 21 then
12370: LD_VAR 0 3
12374: PUSH
12375: LD_INT 21
12377: EQUAL
12378: IFFALSE 12388
// sPowell := true ;
12380: LD_ADDR_EXP 55
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// if p3 = 22 then
12388: LD_VAR 0 3
12392: PUSH
12393: LD_INT 22
12395: EQUAL
12396: IFFALSE 12406
// sTeleport := true ;
12398: LD_ADDR_EXP 58
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// if p3 = 23 then
12406: LD_VAR 0 3
12410: PUSH
12411: LD_INT 23
12413: EQUAL
12414: IFFALSE 12424
// sOilTower := true ;
12416: LD_ADDR_EXP 60
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// if p3 = 24 then
12424: LD_VAR 0 3
12428: PUSH
12429: LD_INT 24
12431: EQUAL
12432: IFFALSE 12442
// sShovel := true ;
12434: LD_ADDR_EXP 61
12438: PUSH
12439: LD_INT 1
12441: ST_TO_ADDR
// if p3 = 25 then
12442: LD_VAR 0 3
12446: PUSH
12447: LD_INT 25
12449: EQUAL
12450: IFFALSE 12460
// sSheik := true ;
12452: LD_ADDR_EXP 62
12456: PUSH
12457: LD_INT 1
12459: ST_TO_ADDR
// if p3 = 26 then
12460: LD_VAR 0 3
12464: PUSH
12465: LD_INT 26
12467: EQUAL
12468: IFFALSE 12478
// sEarthquake := true ;
12470: LD_ADDR_EXP 64
12474: PUSH
12475: LD_INT 1
12477: ST_TO_ADDR
// if p3 = 27 then
12478: LD_VAR 0 3
12482: PUSH
12483: LD_INT 27
12485: EQUAL
12486: IFFALSE 12496
// sAI := true ;
12488: LD_ADDR_EXP 65
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// if p3 = 28 then
12496: LD_VAR 0 3
12500: PUSH
12501: LD_INT 28
12503: EQUAL
12504: IFFALSE 12514
// sCargo := true ;
12506: LD_ADDR_EXP 68
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
// if p3 = 29 then
12514: LD_VAR 0 3
12518: PUSH
12519: LD_INT 29
12521: EQUAL
12522: IFFALSE 12532
// sDLaser := true ;
12524: LD_ADDR_EXP 69
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
// if p3 = 30 then
12532: LD_VAR 0 3
12536: PUSH
12537: LD_INT 30
12539: EQUAL
12540: IFFALSE 12550
// sExchange := true ;
12542: LD_ADDR_EXP 70
12546: PUSH
12547: LD_INT 1
12549: ST_TO_ADDR
// if p3 = 31 then
12550: LD_VAR 0 3
12554: PUSH
12555: LD_INT 31
12557: EQUAL
12558: IFFALSE 12568
// sFac := true ;
12560: LD_ADDR_EXP 71
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// if p3 = 32 then
12568: LD_VAR 0 3
12572: PUSH
12573: LD_INT 32
12575: EQUAL
12576: IFFALSE 12586
// sPower := true ;
12578: LD_ADDR_EXP 72
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// if p3 = 33 then
12586: LD_VAR 0 3
12590: PUSH
12591: LD_INT 33
12593: EQUAL
12594: IFFALSE 12604
// sRandom := true ;
12596: LD_ADDR_EXP 73
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if p3 = 34 then
12604: LD_VAR 0 3
12608: PUSH
12609: LD_INT 34
12611: EQUAL
12612: IFFALSE 12622
// sShield := true ;
12614: LD_ADDR_EXP 74
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// if p3 = 35 then
12622: LD_VAR 0 3
12626: PUSH
12627: LD_INT 35
12629: EQUAL
12630: IFFALSE 12640
// sTime := true ;
12632: LD_ADDR_EXP 75
12636: PUSH
12637: LD_INT 1
12639: ST_TO_ADDR
// if p3 = 36 then
12640: LD_VAR 0 3
12644: PUSH
12645: LD_INT 36
12647: EQUAL
12648: IFFALSE 12658
// sTools := true ;
12650: LD_ADDR_EXP 76
12654: PUSH
12655: LD_INT 1
12657: ST_TO_ADDR
// if p3 = 101 then
12658: LD_VAR 0 3
12662: PUSH
12663: LD_INT 101
12665: EQUAL
12666: IFFALSE 12676
// sSold := true ;
12668: LD_ADDR_EXP 41
12672: PUSH
12673: LD_INT 1
12675: ST_TO_ADDR
// if p3 = 102 then
12676: LD_VAR 0 3
12680: PUSH
12681: LD_INT 102
12683: EQUAL
12684: IFFALSE 12694
// sDiff := true ;
12686: LD_ADDR_EXP 42
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// if p3 = 103 then
12694: LD_VAR 0 3
12698: PUSH
12699: LD_INT 103
12701: EQUAL
12702: IFFALSE 12712
// sFog := true ;
12704: LD_ADDR_EXP 45
12708: PUSH
12709: LD_INT 1
12711: ST_TO_ADDR
// if p3 = 104 then
12712: LD_VAR 0 3
12716: PUSH
12717: LD_INT 104
12719: EQUAL
12720: IFFALSE 12730
// sReset := true ;
12722: LD_ADDR_EXP 46
12726: PUSH
12727: LD_INT 1
12729: ST_TO_ADDR
// if p3 = 105 then
12730: LD_VAR 0 3
12734: PUSH
12735: LD_INT 105
12737: EQUAL
12738: IFFALSE 12748
// sSun := true ;
12740: LD_ADDR_EXP 47
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// if p3 = 106 then
12748: LD_VAR 0 3
12752: PUSH
12753: LD_INT 106
12755: EQUAL
12756: IFFALSE 12766
// sTiger := true ;
12758: LD_ADDR_EXP 43
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// if p3 = 107 then
12766: LD_VAR 0 3
12770: PUSH
12771: LD_INT 107
12773: EQUAL
12774: IFFALSE 12784
// sBomb := true ;
12776: LD_ADDR_EXP 44
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// if p3 = 108 then
12784: LD_VAR 0 3
12788: PUSH
12789: LD_INT 108
12791: EQUAL
12792: IFFALSE 12802
// sWound := true ;
12794: LD_ADDR_EXP 52
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// if p3 = 109 then
12802: LD_VAR 0 3
12806: PUSH
12807: LD_INT 109
12809: EQUAL
12810: IFFALSE 12820
// sBetray := true ;
12812: LD_ADDR_EXP 56
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// if p3 = 110 then
12820: LD_VAR 0 3
12824: PUSH
12825: LD_INT 110
12827: EQUAL
12828: IFFALSE 12838
// sContamin := true ;
12830: LD_ADDR_EXP 57
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// if p3 = 111 then
12838: LD_VAR 0 3
12842: PUSH
12843: LD_INT 111
12845: EQUAL
12846: IFFALSE 12856
// sOil := true ;
12848: LD_ADDR_EXP 59
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// if p3 = 112 then
12856: LD_VAR 0 3
12860: PUSH
12861: LD_INT 112
12863: EQUAL
12864: IFFALSE 12874
// sStu := true ;
12866: LD_ADDR_EXP 63
12870: PUSH
12871: LD_INT 1
12873: ST_TO_ADDR
// if p3 = 113 then
12874: LD_VAR 0 3
12878: PUSH
12879: LD_INT 113
12881: EQUAL
12882: IFFALSE 12892
// sBazooka := true ;
12884: LD_ADDR_EXP 66
12888: PUSH
12889: LD_INT 1
12891: ST_TO_ADDR
// if p3 = 114 then
12892: LD_VAR 0 3
12896: PUSH
12897: LD_INT 114
12899: EQUAL
12900: IFFALSE 12910
// sMortar := true ;
12902: LD_ADDR_EXP 67
12906: PUSH
12907: LD_INT 1
12909: ST_TO_ADDR
// if p3 = 115 then
12910: LD_VAR 0 3
12914: PUSH
12915: LD_INT 115
12917: EQUAL
12918: IFFALSE 12928
// sRanger := true ;
12920: LD_ADDR_EXP 77
12924: PUSH
12925: LD_INT 1
12927: ST_TO_ADDR
// end ; end ;
12928: PPOPN 6
12930: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12931: LD_EXP 24
12935: PUSH
12936: LD_EXP 29
12940: AND
12941: IFFALSE 13065
12943: GO 12945
12945: DISABLE
12946: LD_INT 0
12948: PPUSH
12949: PPUSH
// begin enable ;
12950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12951: LD_ADDR_VAR 0 2
12955: PUSH
12956: LD_INT 22
12958: PUSH
12959: LD_OWVAR 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 34
12973: PUSH
12974: LD_INT 7
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 34
12983: PUSH
12984: LD_INT 45
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 34
12993: PUSH
12994: LD_INT 28
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 34
13003: PUSH
13004: LD_INT 47
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PPUSH
13022: CALL_OW 69
13026: ST_TO_ADDR
// if not tmp then
13027: LD_VAR 0 2
13031: NOT
13032: IFFALSE 13036
// exit ;
13034: GO 13065
// for i in tmp do
13036: LD_ADDR_VAR 0 1
13040: PUSH
13041: LD_VAR 0 2
13045: PUSH
13046: FOR_IN
13047: IFFALSE 13063
// begin SetLives ( i , 0 ) ;
13049: LD_VAR 0 1
13053: PPUSH
13054: LD_INT 0
13056: PPUSH
13057: CALL_OW 234
// end ;
13061: GO 13046
13063: POP
13064: POP
// end ;
13065: PPOPN 2
13067: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13068: LD_EXP 24
13072: PUSH
13073: LD_EXP 30
13077: AND
13078: IFFALSE 13162
13080: GO 13082
13082: DISABLE
13083: LD_INT 0
13085: PPUSH
13086: PPUSH
// begin enable ;
13087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_OWVAR 2
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 32
13107: PUSH
13108: LD_INT 3
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: ST_TO_ADDR
// if not tmp then
13124: LD_VAR 0 2
13128: NOT
13129: IFFALSE 13133
// exit ;
13131: GO 13162
// for i in tmp do
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: LD_VAR 0 2
13142: PUSH
13143: FOR_IN
13144: IFFALSE 13160
// begin SetLives ( i , 0 ) ;
13146: LD_VAR 0 1
13150: PPUSH
13151: LD_INT 0
13153: PPUSH
13154: CALL_OW 234
// end ;
13158: GO 13143
13160: POP
13161: POP
// end ;
13162: PPOPN 2
13164: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13165: LD_EXP 24
13169: PUSH
13170: LD_EXP 27
13174: AND
13175: IFFALSE 13268
13177: GO 13179
13179: DISABLE
13180: LD_INT 0
13182: PPUSH
// begin enable ;
13183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13184: LD_ADDR_VAR 0 1
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_OWVAR 2
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 2
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 5
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 9
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 25
13226: PUSH
13227: LD_INT 8
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PPUSH
13244: CALL_OW 69
13248: PUSH
13249: FOR_IN
13250: IFFALSE 13266
// begin SetClass ( i , 1 ) ;
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 1
13259: PPUSH
13260: CALL_OW 336
// end ;
13264: GO 13249
13266: POP
13267: POP
// end ;
13268: PPOPN 1
13270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13271: LD_EXP 24
13275: PUSH
13276: LD_EXP 28
13280: AND
13281: PUSH
13282: LD_OWVAR 65
13286: PUSH
13287: LD_INT 7
13289: LESS
13290: AND
13291: IFFALSE 13305
13293: GO 13295
13295: DISABLE
// begin enable ;
13296: ENABLE
// game_speed := 7 ;
13297: LD_ADDR_OWVAR 65
13301: PUSH
13302: LD_INT 7
13304: ST_TO_ADDR
// end ;
13305: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13306: LD_EXP 24
13310: PUSH
13311: LD_EXP 31
13315: AND
13316: IFFALSE 13518
13318: GO 13320
13320: DISABLE
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
13325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13326: LD_ADDR_VAR 0 3
13330: PUSH
13331: LD_INT 81
13333: PUSH
13334: LD_OWVAR 2
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 21
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: ST_TO_ADDR
// if not tmp then
13362: LD_VAR 0 3
13366: NOT
13367: IFFALSE 13371
// exit ;
13369: GO 13518
// if tmp > 5 then
13371: LD_VAR 0 3
13375: PUSH
13376: LD_INT 5
13378: GREATER
13379: IFFALSE 13391
// k := 5 else
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_INT 5
13388: ST_TO_ADDR
13389: GO 13401
// k := tmp ;
13391: LD_ADDR_VAR 0 2
13395: PUSH
13396: LD_VAR 0 3
13400: ST_TO_ADDR
// for i := 1 to k do
13401: LD_ADDR_VAR 0 1
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_VAR 0 2
13415: PUSH
13416: FOR_TO
13417: IFFALSE 13516
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13419: LD_VAR 0 3
13423: PUSH
13424: LD_VAR 0 1
13428: ARRAY
13429: PPUSH
13430: LD_VAR 0 1
13434: PUSH
13435: LD_INT 4
13437: MOD
13438: PUSH
13439: LD_INT 1
13441: PLUS
13442: PPUSH
13443: CALL_OW 259
13447: PUSH
13448: LD_INT 10
13450: LESS
13451: IFFALSE 13514
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13453: LD_VAR 0 3
13457: PUSH
13458: LD_VAR 0 1
13462: ARRAY
13463: PPUSH
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 4
13471: MOD
13472: PUSH
13473: LD_INT 1
13475: PLUS
13476: PPUSH
13477: LD_VAR 0 3
13481: PUSH
13482: LD_VAR 0 1
13486: ARRAY
13487: PPUSH
13488: LD_VAR 0 1
13492: PUSH
13493: LD_INT 4
13495: MOD
13496: PUSH
13497: LD_INT 1
13499: PLUS
13500: PPUSH
13501: CALL_OW 259
13505: PUSH
13506: LD_INT 1
13508: PLUS
13509: PPUSH
13510: CALL_OW 237
13514: GO 13416
13516: POP
13517: POP
// end ;
13518: PPOPN 3
13520: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13521: LD_EXP 24
13525: PUSH
13526: LD_EXP 32
13530: AND
13531: IFFALSE 13551
13533: GO 13535
13535: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13536: LD_INT 4
13538: PPUSH
13539: LD_OWVAR 2
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 324
13551: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13552: LD_EXP 24
13556: PUSH
13557: LD_EXP 61
13561: AND
13562: IFFALSE 13582
13564: GO 13566
13566: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13567: LD_INT 19
13569: PPUSH
13570: LD_OWVAR 2
13574: PPUSH
13575: LD_INT 0
13577: PPUSH
13578: CALL_OW 324
13582: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13583: LD_EXP 24
13587: PUSH
13588: LD_EXP 33
13592: AND
13593: IFFALSE 13695
13595: GO 13597
13597: DISABLE
13598: LD_INT 0
13600: PPUSH
13601: PPUSH
// begin enable ;
13602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_OWVAR 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 34
13625: PUSH
13626: LD_INT 11
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 34
13635: PUSH
13636: LD_INT 30
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PPUSH
13652: CALL_OW 69
13656: ST_TO_ADDR
// if not tmp then
13657: LD_VAR 0 2
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 13695
// for i in tmp do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_VAR 0 2
13675: PUSH
13676: FOR_IN
13677: IFFALSE 13693
// begin SetLives ( i , 0 ) ;
13679: LD_VAR 0 1
13683: PPUSH
13684: LD_INT 0
13686: PPUSH
13687: CALL_OW 234
// end ;
13691: GO 13676
13693: POP
13694: POP
// end ;
13695: PPOPN 2
13697: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13698: LD_EXP 24
13702: PUSH
13703: LD_EXP 34
13707: AND
13708: IFFALSE 13728
13710: GO 13712
13712: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13713: LD_INT 32
13715: PPUSH
13716: LD_OWVAR 2
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 324
13728: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13729: LD_EXP 24
13733: PUSH
13734: LD_EXP 35
13738: AND
13739: IFFALSE 13920
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
13748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_INT 22
13756: PUSH
13757: LD_OWVAR 2
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 33
13768: PUSH
13769: LD_INT 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 69
13784: ST_TO_ADDR
// if not tmp then
13785: LD_VAR 0 2
13789: NOT
13790: IFFALSE 13794
// exit ;
13792: GO 13920
// side := 0 ;
13794: LD_ADDR_VAR 0 3
13798: PUSH
13799: LD_INT 0
13801: ST_TO_ADDR
// for i := 1 to 8 do
13802: LD_ADDR_VAR 0 1
13806: PUSH
13807: DOUBLE
13808: LD_INT 1
13810: DEC
13811: ST_TO_ADDR
13812: LD_INT 8
13814: PUSH
13815: FOR_TO
13816: IFFALSE 13864
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13818: LD_OWVAR 2
13822: PUSH
13823: LD_VAR 0 1
13827: NONEQUAL
13828: PUSH
13829: LD_OWVAR 2
13833: PPUSH
13834: LD_VAR 0 1
13838: PPUSH
13839: CALL_OW 81
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: AND
13848: IFFALSE 13862
// begin side := i ;
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: LD_VAR 0 1
13859: ST_TO_ADDR
// break ;
13860: GO 13864
// end ;
13862: GO 13815
13864: POP
13865: POP
// if not side then
13866: LD_VAR 0 3
13870: NOT
13871: IFFALSE 13875
// exit ;
13873: GO 13920
// for i := 1 to tmp do
13875: LD_ADDR_VAR 0 1
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_VAR 0 2
13889: PUSH
13890: FOR_TO
13891: IFFALSE 13918
// if Prob ( 60 ) then
13893: LD_INT 60
13895: PPUSH
13896: CALL_OW 13
13900: IFFALSE 13916
// SetSide ( i , side ) ;
13902: LD_VAR 0 1
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: CALL_OW 235
13916: GO 13890
13918: POP
13919: POP
// end ;
13920: PPOPN 3
13922: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13923: LD_EXP 24
13927: PUSH
13928: LD_EXP 37
13932: AND
13933: IFFALSE 14052
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13941: LD_ADDR_VAR 0 1
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_OWVAR 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 3
13970: PUSH
13971: LD_INT 23
13973: PUSH
13974: LD_INT 0
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 69
13994: PUSH
13995: FOR_IN
13996: IFFALSE 14050
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL_OW 257
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: LD_INT 3
14016: PUSH
14017: LD_INT 4
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: IN
14026: IFFALSE 14048
// SetClass ( un , rand ( 1 , 4 ) ) ;
14028: LD_VAR 0 1
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: LD_INT 4
14038: PPUSH
14039: CALL_OW 12
14043: PPUSH
14044: CALL_OW 336
14048: GO 13995
14050: POP
14051: POP
// end ;
14052: PPOPN 1
14054: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14055: LD_EXP 24
14059: PUSH
14060: LD_EXP 36
14064: AND
14065: IFFALSE 14144
14067: GO 14069
14069: DISABLE
14070: LD_INT 0
14072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14073: LD_ADDR_VAR 0 1
14077: PUSH
14078: LD_INT 22
14080: PUSH
14081: LD_OWVAR 2
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 3
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: ST_TO_ADDR
// if not tmp then
14109: LD_VAR 0 1
14113: NOT
14114: IFFALSE 14118
// exit ;
14116: GO 14144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14118: LD_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 12
14135: ARRAY
14136: PPUSH
14137: LD_INT 100
14139: PPUSH
14140: CALL_OW 234
// end ;
14144: PPOPN 1
14146: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14147: LD_EXP 24
14151: PUSH
14152: LD_EXP 38
14156: AND
14157: IFFALSE 14255
14159: GO 14161
14161: DISABLE
14162: LD_INT 0
14164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_INT 22
14172: PUSH
14173: LD_OWVAR 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 21
14184: PUSH
14185: LD_INT 1
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if not tmp then
14201: LD_VAR 0 1
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14255
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14210: LD_VAR 0 1
14214: PUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 12
14227: ARRAY
14228: PPUSH
14229: LD_INT 1
14231: PPUSH
14232: LD_INT 4
14234: PPUSH
14235: CALL_OW 12
14239: PPUSH
14240: LD_INT 3000
14242: PPUSH
14243: LD_INT 9000
14245: PPUSH
14246: CALL_OW 12
14250: PPUSH
14251: CALL_OW 492
// end ;
14255: PPOPN 1
14257: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14258: LD_EXP 24
14262: PUSH
14263: LD_EXP 39
14267: AND
14268: IFFALSE 14288
14270: GO 14272
14272: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14273: LD_INT 1
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 0
14283: PPUSH
14284: CALL_OW 324
14288: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14289: LD_EXP 24
14293: PUSH
14294: LD_EXP 40
14298: AND
14299: IFFALSE 14382
14301: GO 14303
14303: DISABLE
14304: LD_INT 0
14306: PPUSH
14307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14308: LD_ADDR_VAR 0 2
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_OWVAR 2
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 3
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 69
14343: ST_TO_ADDR
// if not tmp then
14344: LD_VAR 0 2
14348: NOT
14349: IFFALSE 14353
// exit ;
14351: GO 14382
// for i in tmp do
14353: LD_ADDR_VAR 0 1
14357: PUSH
14358: LD_VAR 0 2
14362: PUSH
14363: FOR_IN
14364: IFFALSE 14380
// SetBLevel ( i , 10 ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: LD_INT 10
14373: PPUSH
14374: CALL_OW 241
14378: GO 14363
14380: POP
14381: POP
// end ;
14382: PPOPN 2
14384: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14385: LD_EXP 24
14389: PUSH
14390: LD_EXP 41
14394: AND
14395: IFFALSE 14506
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
14403: PPUSH
14404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14405: LD_ADDR_VAR 0 3
14409: PUSH
14410: LD_INT 22
14412: PUSH
14413: LD_OWVAR 2
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 25
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 69
14440: ST_TO_ADDR
// if not tmp then
14441: LD_VAR 0 3
14445: NOT
14446: IFFALSE 14450
// exit ;
14448: GO 14506
// un := tmp [ rand ( 1 , tmp ) ] ;
14450: LD_ADDR_VAR 0 2
14454: PUSH
14455: LD_VAR 0 3
14459: PUSH
14460: LD_INT 1
14462: PPUSH
14463: LD_VAR 0 3
14467: PPUSH
14468: CALL_OW 12
14472: ARRAY
14473: ST_TO_ADDR
// if Crawls ( un ) then
14474: LD_VAR 0 2
14478: PPUSH
14479: CALL_OW 318
14483: IFFALSE 14494
// ComWalk ( un ) ;
14485: LD_VAR 0 2
14489: PPUSH
14490: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14494: LD_VAR 0 2
14498: PPUSH
14499: LD_INT 5
14501: PPUSH
14502: CALL_OW 336
// end ;
14506: PPOPN 3
14508: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14509: LD_EXP 24
14513: PUSH
14514: LD_EXP 42
14518: AND
14519: PUSH
14520: LD_OWVAR 67
14524: PUSH
14525: LD_INT 3
14527: LESS
14528: AND
14529: IFFALSE 14548
14531: GO 14533
14533: DISABLE
// Difficulty := Difficulty + 1 ;
14534: LD_ADDR_OWVAR 67
14538: PUSH
14539: LD_OWVAR 67
14543: PUSH
14544: LD_INT 1
14546: PLUS
14547: ST_TO_ADDR
14548: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14549: LD_EXP 24
14553: PUSH
14554: LD_EXP 43
14558: AND
14559: IFFALSE 14662
14561: GO 14563
14563: DISABLE
14564: LD_INT 0
14566: PPUSH
// begin for i := 1 to 5 do
14567: LD_ADDR_VAR 0 1
14571: PUSH
14572: DOUBLE
14573: LD_INT 1
14575: DEC
14576: ST_TO_ADDR
14577: LD_INT 5
14579: PUSH
14580: FOR_TO
14581: IFFALSE 14660
// begin uc_nation := nation_nature ;
14583: LD_ADDR_OWVAR 21
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// uc_side := 0 ;
14591: LD_ADDR_OWVAR 20
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14599: LD_ADDR_OWVAR 29
14603: PUSH
14604: LD_INT 12
14606: PUSH
14607: LD_INT 12
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: ST_TO_ADDR
// hc_agressivity := 20 ;
14614: LD_ADDR_OWVAR 35
14618: PUSH
14619: LD_INT 20
14621: ST_TO_ADDR
// hc_class := class_tiger ;
14622: LD_ADDR_OWVAR 28
14626: PUSH
14627: LD_INT 14
14629: ST_TO_ADDR
// hc_gallery :=  ;
14630: LD_ADDR_OWVAR 33
14634: PUSH
14635: LD_STRING 
14637: ST_TO_ADDR
// hc_name :=  ;
14638: LD_ADDR_OWVAR 26
14642: PUSH
14643: LD_STRING 
14645: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14646: CALL_OW 44
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 51
// end ;
14658: GO 14580
14660: POP
14661: POP
// end ;
14662: PPOPN 1
14664: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14665: LD_EXP 24
14669: PUSH
14670: LD_EXP 44
14674: AND
14675: IFFALSE 14684
14677: GO 14679
14679: DISABLE
// StreamSibBomb ;
14680: CALL 14685 0 0
14684: END
// export function StreamSibBomb ; var i , x , y ; begin
14685: LD_INT 0
14687: PPUSH
14688: PPUSH
14689: PPUSH
14690: PPUSH
// result := false ;
14691: LD_ADDR_VAR 0 1
14695: PUSH
14696: LD_INT 0
14698: ST_TO_ADDR
// for i := 1 to 16 do
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_INT 16
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14912
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: LD_INT 10
14722: PUSH
14723: LD_INT 20
14725: PUSH
14726: LD_INT 30
14728: PUSH
14729: LD_INT 40
14731: PUSH
14732: LD_INT 50
14734: PUSH
14735: LD_INT 60
14737: PUSH
14738: LD_INT 70
14740: PUSH
14741: LD_INT 80
14743: PUSH
14744: LD_INT 90
14746: PUSH
14747: LD_INT 100
14749: PUSH
14750: LD_INT 110
14752: PUSH
14753: LD_INT 120
14755: PUSH
14756: LD_INT 130
14758: PUSH
14759: LD_INT 140
14761: PUSH
14762: LD_INT 150
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 1
14784: PPUSH
14785: LD_INT 15
14787: PPUSH
14788: CALL_OW 12
14792: ARRAY
14793: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14794: LD_ADDR_VAR 0 4
14798: PUSH
14799: LD_INT 10
14801: PUSH
14802: LD_INT 20
14804: PUSH
14805: LD_INT 30
14807: PUSH
14808: LD_INT 40
14810: PUSH
14811: LD_INT 50
14813: PUSH
14814: LD_INT 60
14816: PUSH
14817: LD_INT 70
14819: PUSH
14820: LD_INT 80
14822: PUSH
14823: LD_INT 90
14825: PUSH
14826: LD_INT 100
14828: PUSH
14829: LD_INT 110
14831: PUSH
14832: LD_INT 120
14834: PUSH
14835: LD_INT 130
14837: PUSH
14838: LD_INT 140
14840: PUSH
14841: LD_INT 150
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 1
14863: PPUSH
14864: LD_INT 15
14866: PPUSH
14867: CALL_OW 12
14871: ARRAY
14872: ST_TO_ADDR
// if ValidHex ( x , y ) then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 4
14882: PPUSH
14883: CALL_OW 488
14887: IFFALSE 14910
// begin result := [ x , y ] ;
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_VAR 0 3
14898: PUSH
14899: LD_VAR 0 4
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: ST_TO_ADDR
// break ;
14908: GO 14912
// end ; end ;
14910: GO 14712
14912: POP
14913: POP
// if result then
14914: LD_VAR 0 1
14918: IFFALSE 14978
// begin ToLua ( playSibBomb() ) ;
14920: LD_STRING playSibBomb()
14922: PPUSH
14923: CALL_OW 559
// wait ( 0 0$14 ) ;
14927: LD_INT 490
14929: PPUSH
14930: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14934: LD_VAR 0 1
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: PPUSH
14943: LD_VAR 0 1
14947: PUSH
14948: LD_INT 2
14950: ARRAY
14951: PPUSH
14952: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: PPUSH
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 2
14972: ARRAY
14973: PPUSH
14974: CALL_OW 429
// end ; end ;
14978: LD_VAR 0 1
14982: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14983: LD_EXP 24
14987: PUSH
14988: LD_EXP 46
14992: AND
14993: IFFALSE 15005
14995: GO 14997
14997: DISABLE
// YouLost (  ) ;
14998: LD_STRING 
15000: PPUSH
15001: CALL_OW 104
15005: END
// every 0 0$1 trigger StreamModeActive and sFog do
15006: LD_EXP 24
15010: PUSH
15011: LD_EXP 45
15015: AND
15016: IFFALSE 15030
15018: GO 15020
15020: DISABLE
// FogOff ( your_side ) ;
15021: LD_OWVAR 2
15025: PPUSH
15026: CALL_OW 344
15030: END
// every 0 0$1 trigger StreamModeActive and sSun do
15031: LD_EXP 24
15035: PUSH
15036: LD_EXP 47
15040: AND
15041: IFFALSE 15069
15043: GO 15045
15045: DISABLE
// begin solar_recharge_percent := 0 ;
15046: LD_ADDR_OWVAR 79
15050: PUSH
15051: LD_INT 0
15053: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15054: LD_INT 10500
15056: PPUSH
15057: CALL_OW 67
// solar_recharge_percent := 100 ;
15061: LD_ADDR_OWVAR 79
15065: PUSH
15066: LD_INT 100
15068: ST_TO_ADDR
// end ;
15069: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15070: LD_EXP 24
15074: PUSH
15075: LD_EXP 48
15079: AND
15080: IFFALSE 15319
15082: GO 15084
15084: DISABLE
15085: LD_INT 0
15087: PPUSH
15088: PPUSH
15089: PPUSH
// begin tmp := [ ] ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: EMPTY
15096: ST_TO_ADDR
// for i := 1 to 6 do
15097: LD_ADDR_VAR 0 1
15101: PUSH
15102: DOUBLE
15103: LD_INT 1
15105: DEC
15106: ST_TO_ADDR
15107: LD_INT 6
15109: PUSH
15110: FOR_TO
15111: IFFALSE 15216
// begin uc_nation := nation_nature ;
15113: LD_ADDR_OWVAR 21
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// uc_side := 0 ;
15121: LD_ADDR_OWVAR 20
15125: PUSH
15126: LD_INT 0
15128: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15129: LD_ADDR_OWVAR 29
15133: PUSH
15134: LD_INT 12
15136: PUSH
15137: LD_INT 12
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// hc_agressivity := 20 ;
15144: LD_ADDR_OWVAR 35
15148: PUSH
15149: LD_INT 20
15151: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15152: LD_ADDR_OWVAR 28
15156: PUSH
15157: LD_INT 17
15159: ST_TO_ADDR
// hc_gallery :=  ;
15160: LD_ADDR_OWVAR 33
15164: PUSH
15165: LD_STRING 
15167: ST_TO_ADDR
// hc_name :=  ;
15168: LD_ADDR_OWVAR 26
15172: PUSH
15173: LD_STRING 
15175: ST_TO_ADDR
// un := CreateHuman ;
15176: LD_ADDR_VAR 0 2
15180: PUSH
15181: CALL_OW 44
15185: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15186: LD_VAR 0 2
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 51
// tmp := tmp ^ un ;
15198: LD_ADDR_VAR 0 3
15202: PUSH
15203: LD_VAR 0 3
15207: PUSH
15208: LD_VAR 0 2
15212: ADD
15213: ST_TO_ADDR
// end ;
15214: GO 15110
15216: POP
15217: POP
// repeat wait ( 0 0$1 ) ;
15218: LD_INT 35
15220: PPUSH
15221: CALL_OW 67
// for un in tmp do
15225: LD_ADDR_VAR 0 2
15229: PUSH
15230: LD_VAR 0 3
15234: PUSH
15235: FOR_IN
15236: IFFALSE 15310
// begin if IsDead ( un ) then
15238: LD_VAR 0 2
15242: PPUSH
15243: CALL_OW 301
15247: IFFALSE 15267
// begin tmp := tmp diff un ;
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_VAR 0 3
15258: PUSH
15259: LD_VAR 0 2
15263: DIFF
15264: ST_TO_ADDR
// continue ;
15265: GO 15235
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 3
15274: PUSH
15275: LD_INT 22
15277: PUSH
15278: LD_INT 0
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PPUSH
15289: CALL_OW 69
15293: PPUSH
15294: LD_VAR 0 2
15298: PPUSH
15299: CALL_OW 74
15303: PPUSH
15304: CALL_OW 115
// end ;
15308: GO 15235
15310: POP
15311: POP
// until not tmp ;
15312: LD_VAR 0 3
15316: NOT
15317: IFFALSE 15218
// end ;
15319: PPOPN 3
15321: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15322: LD_EXP 24
15326: PUSH
15327: LD_EXP 49
15331: AND
15332: IFFALSE 15386
15334: GO 15336
15336: DISABLE
// begin ToLua ( displayTroll(); ) ;
15337: LD_STRING displayTroll();
15339: PPUSH
15340: CALL_OW 559
// wait ( 3 3$00 ) ;
15344: LD_INT 6300
15346: PPUSH
15347: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15351: LD_STRING hideTroll();
15353: PPUSH
15354: CALL_OW 559
// wait ( 1 1$00 ) ;
15358: LD_INT 2100
15360: PPUSH
15361: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15365: LD_STRING displayTroll();
15367: PPUSH
15368: CALL_OW 559
// wait ( 1 1$00 ) ;
15372: LD_INT 2100
15374: PPUSH
15375: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15379: LD_STRING hideTroll();
15381: PPUSH
15382: CALL_OW 559
// end ;
15386: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15387: LD_EXP 24
15391: PUSH
15392: LD_EXP 50
15396: AND
15397: IFFALSE 15460
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
// begin p := 0 ;
15405: LD_ADDR_VAR 0 1
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// repeat game_speed := 1 ;
15413: LD_ADDR_OWVAR 65
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15421: LD_INT 35
15423: PPUSH
15424: CALL_OW 67
// p := p + 1 ;
15428: LD_ADDR_VAR 0 1
15432: PUSH
15433: LD_VAR 0 1
15437: PUSH
15438: LD_INT 1
15440: PLUS
15441: ST_TO_ADDR
// until p >= 60 ;
15442: LD_VAR 0 1
15446: PUSH
15447: LD_INT 60
15449: GREATEREQUAL
15450: IFFALSE 15413
// game_speed := 4 ;
15452: LD_ADDR_OWVAR 65
15456: PUSH
15457: LD_INT 4
15459: ST_TO_ADDR
// end ;
15460: PPOPN 1
15462: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15463: LD_EXP 24
15467: PUSH
15468: LD_EXP 51
15472: AND
15473: IFFALSE 15619
15475: GO 15477
15477: DISABLE
15478: LD_INT 0
15480: PPUSH
15481: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_OWVAR 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 30
15504: PUSH
15505: LD_INT 0
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 30
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PPUSH
15531: CALL_OW 69
15535: ST_TO_ADDR
// if not depot then
15536: LD_VAR 0 1
15540: NOT
15541: IFFALSE 15545
// exit ;
15543: GO 15619
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15545: LD_ADDR_VAR 0 2
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_INT 1
15557: PPUSH
15558: LD_VAR 0 1
15562: PPUSH
15563: CALL_OW 12
15567: ARRAY
15568: PPUSH
15569: CALL_OW 274
15573: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15574: LD_VAR 0 2
15578: PPUSH
15579: LD_INT 1
15581: PPUSH
15582: LD_INT 0
15584: PPUSH
15585: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15589: LD_VAR 0 2
15593: PPUSH
15594: LD_INT 2
15596: PPUSH
15597: LD_INT 0
15599: PPUSH
15600: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 3
15611: PPUSH
15612: LD_INT 0
15614: PPUSH
15615: CALL_OW 277
// end ;
15619: PPOPN 2
15621: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15622: LD_EXP 24
15626: PUSH
15627: LD_EXP 52
15631: AND
15632: IFFALSE 15729
15634: GO 15636
15636: DISABLE
15637: LD_INT 0
15639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: LD_INT 22
15647: PUSH
15648: LD_OWVAR 2
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 21
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 3
15669: PUSH
15670: LD_INT 23
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 69
15693: ST_TO_ADDR
// if not tmp then
15694: LD_VAR 0 1
15698: NOT
15699: IFFALSE 15703
// exit ;
15701: GO 15729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 12
15720: ARRAY
15721: PPUSH
15722: LD_INT 200
15724: PPUSH
15725: CALL_OW 234
// end ;
15729: PPOPN 1
15731: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15732: LD_EXP 24
15736: PUSH
15737: LD_EXP 53
15741: AND
15742: IFFALSE 15821
15744: GO 15746
15746: DISABLE
15747: LD_INT 0
15749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15750: LD_ADDR_VAR 0 1
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_OWVAR 2
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 21
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PPUSH
15781: CALL_OW 69
15785: ST_TO_ADDR
// if not tmp then
15786: LD_VAR 0 1
15790: NOT
15791: IFFALSE 15795
// exit ;
15793: GO 15821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15795: LD_VAR 0 1
15799: PUSH
15800: LD_INT 1
15802: PPUSH
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 12
15812: ARRAY
15813: PPUSH
15814: LD_INT 60
15816: PPUSH
15817: CALL_OW 234
// end ;
15821: PPOPN 1
15823: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15824: LD_EXP 24
15828: PUSH
15829: LD_EXP 54
15833: AND
15834: IFFALSE 15933
15836: GO 15838
15838: DISABLE
15839: LD_INT 0
15841: PPUSH
15842: PPUSH
// begin enable ;
15843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15844: LD_ADDR_VAR 0 1
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_OWVAR 2
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 61
15863: PUSH
15864: EMPTY
15865: LIST
15866: PUSH
15867: LD_INT 33
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 69
15886: ST_TO_ADDR
// if not tmp then
15887: LD_VAR 0 1
15891: NOT
15892: IFFALSE 15896
// exit ;
15894: GO 15933
// for i in tmp do
15896: LD_ADDR_VAR 0 2
15900: PUSH
15901: LD_VAR 0 1
15905: PUSH
15906: FOR_IN
15907: IFFALSE 15931
// if IsControledBy ( i ) then
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 312
15918: IFFALSE 15929
// ComUnlink ( i ) ;
15920: LD_VAR 0 2
15924: PPUSH
15925: CALL_OW 136
15929: GO 15906
15931: POP
15932: POP
// end ;
15933: PPOPN 2
15935: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15936: LD_EXP 24
15940: PUSH
15941: LD_EXP 55
15945: AND
15946: IFFALSE 16086
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
// begin ToLua ( displayPowell(); ) ;
15955: LD_STRING displayPowell();
15957: PPUSH
15958: CALL_OW 559
// uc_side := 0 ;
15962: LD_ADDR_OWVAR 20
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// uc_nation := 2 ;
15970: LD_ADDR_OWVAR 21
15974: PUSH
15975: LD_INT 2
15977: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15978: LD_ADDR_OWVAR 37
15982: PUSH
15983: LD_INT 14
15985: ST_TO_ADDR
// vc_engine := engine_siberite ;
15986: LD_ADDR_OWVAR 39
15990: PUSH
15991: LD_INT 3
15993: ST_TO_ADDR
// vc_control := control_apeman ;
15994: LD_ADDR_OWVAR 38
15998: PUSH
15999: LD_INT 5
16001: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16002: LD_ADDR_OWVAR 40
16006: PUSH
16007: LD_INT 29
16009: ST_TO_ADDR
// un := CreateVehicle ;
16010: LD_ADDR_VAR 0 2
16014: PUSH
16015: CALL_OW 45
16019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16020: LD_VAR 0 2
16024: PPUSH
16025: LD_INT 1
16027: PPUSH
16028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16032: LD_INT 35
16034: PPUSH
16035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16039: LD_VAR 0 2
16043: PPUSH
16044: LD_INT 22
16046: PUSH
16047: LD_OWVAR 2
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PPUSH
16056: CALL_OW 69
16060: PPUSH
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 74
16070: PPUSH
16071: CALL_OW 115
// until IsDead ( un ) ;
16075: LD_VAR 0 2
16079: PPUSH
16080: CALL_OW 301
16084: IFFALSE 16032
// end ;
16086: PPOPN 2
16088: END
// every 0 0$1 trigger StreamModeActive and sStu do
16089: LD_EXP 24
16093: PUSH
16094: LD_EXP 63
16098: AND
16099: IFFALSE 16115
16101: GO 16103
16103: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16104: LD_STRING displayStucuk();
16106: PPUSH
16107: CALL_OW 559
// ResetFog ;
16111: CALL_OW 335
// end ;
16115: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16116: LD_EXP 24
16120: PUSH
16121: LD_EXP 56
16125: AND
16126: IFFALSE 16267
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_OWVAR 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 21
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PPUSH
16166: CALL_OW 69
16170: ST_TO_ADDR
// if not tmp then
16171: LD_VAR 0 2
16175: NOT
16176: IFFALSE 16180
// exit ;
16178: GO 16267
// un := tmp [ rand ( 1 , tmp ) ] ;
16180: LD_ADDR_VAR 0 1
16184: PUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_INT 1
16192: PPUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 12
16202: ARRAY
16203: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16204: LD_VAR 0 1
16208: PPUSH
16209: LD_INT 0
16211: PPUSH
16212: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_OWVAR 3
16225: PUSH
16226: LD_VAR 0 1
16230: DIFF
16231: PPUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 74
16241: PPUSH
16242: CALL_OW 115
// wait ( 0 0$20 ) ;
16246: LD_INT 700
16248: PPUSH
16249: CALL_OW 67
// SetSide ( un , your_side ) ;
16253: LD_VAR 0 1
16257: PPUSH
16258: LD_OWVAR 2
16262: PPUSH
16263: CALL_OW 235
// end ;
16267: PPOPN 2
16269: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16270: LD_EXP 24
16274: PUSH
16275: LD_EXP 57
16279: AND
16280: IFFALSE 16386
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16288: LD_ADDR_VAR 0 1
16292: PUSH
16293: LD_INT 22
16295: PUSH
16296: LD_OWVAR 2
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 2
16307: PUSH
16308: LD_INT 30
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 30
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 69
16341: ST_TO_ADDR
// if not depot then
16342: LD_VAR 0 1
16346: NOT
16347: IFFALSE 16351
// exit ;
16349: GO 16386
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16351: LD_VAR 0 1
16355: PUSH
16356: LD_INT 1
16358: ARRAY
16359: PPUSH
16360: CALL_OW 250
16364: PPUSH
16365: LD_VAR 0 1
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: CALL_OW 251
16378: PPUSH
16379: LD_INT 70
16381: PPUSH
16382: CALL_OW 495
// end ;
16386: PPOPN 1
16388: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16389: LD_EXP 24
16393: PUSH
16394: LD_EXP 58
16398: AND
16399: IFFALSE 16610
16401: GO 16403
16403: DISABLE
16404: LD_INT 0
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16411: LD_ADDR_VAR 0 5
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_OWVAR 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 21
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PPUSH
16442: CALL_OW 69
16446: ST_TO_ADDR
// if not tmp then
16447: LD_VAR 0 5
16451: NOT
16452: IFFALSE 16456
// exit ;
16454: GO 16610
// for i in tmp do
16456: LD_ADDR_VAR 0 1
16460: PUSH
16461: LD_VAR 0 5
16465: PUSH
16466: FOR_IN
16467: IFFALSE 16608
// begin d := rand ( 0 , 5 ) ;
16469: LD_ADDR_VAR 0 4
16473: PUSH
16474: LD_INT 0
16476: PPUSH
16477: LD_INT 5
16479: PPUSH
16480: CALL_OW 12
16484: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 250
16499: PPUSH
16500: LD_VAR 0 4
16504: PPUSH
16505: LD_INT 3
16507: PPUSH
16508: LD_INT 12
16510: PPUSH
16511: CALL_OW 12
16515: PPUSH
16516: CALL_OW 272
16520: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16521: LD_ADDR_VAR 0 3
16525: PUSH
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 251
16535: PPUSH
16536: LD_VAR 0 4
16540: PPUSH
16541: LD_INT 3
16543: PPUSH
16544: LD_INT 12
16546: PPUSH
16547: CALL_OW 12
16551: PPUSH
16552: CALL_OW 273
16556: ST_TO_ADDR
// if ValidHex ( x , y ) then
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: CALL_OW 488
16571: IFFALSE 16606
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16573: LD_VAR 0 1
16577: PPUSH
16578: LD_VAR 0 2
16582: PPUSH
16583: LD_VAR 0 3
16587: PPUSH
16588: LD_INT 3
16590: PPUSH
16591: LD_INT 6
16593: PPUSH
16594: CALL_OW 12
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 483
// end ;
16606: GO 16466
16608: POP
16609: POP
// end ;
16610: PPOPN 5
16612: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16613: LD_EXP 24
16617: PUSH
16618: LD_EXP 59
16622: AND
16623: IFFALSE 16717
16625: GO 16627
16627: DISABLE
16628: LD_INT 0
16630: PPUSH
16631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: LD_INT 22
16639: PUSH
16640: LD_OWVAR 2
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 32
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 21
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if not tmp then
16679: LD_VAR 0 2
16683: NOT
16684: IFFALSE 16688
// exit ;
16686: GO 16717
// for i in tmp do
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: LD_VAR 0 2
16697: PUSH
16698: FOR_IN
16699: IFFALSE 16715
// SetFuel ( i , 0 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: CALL_OW 240
16713: GO 16698
16715: POP
16716: POP
// end ;
16717: PPOPN 2
16719: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16720: LD_EXP 24
16724: PUSH
16725: LD_EXP 60
16729: AND
16730: IFFALSE 16796
16732: GO 16734
16734: DISABLE
16735: LD_INT 0
16737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16738: LD_ADDR_VAR 0 1
16742: PUSH
16743: LD_INT 22
16745: PUSH
16746: LD_OWVAR 2
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 30
16757: PUSH
16758: LD_INT 29
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 1
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16796
// DestroyUnit ( tmp [ 1 ] ) ;
16783: LD_VAR 0 1
16787: PUSH
16788: LD_INT 1
16790: ARRAY
16791: PPUSH
16792: CALL_OW 65
// end ;
16796: PPOPN 1
16798: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16799: LD_EXP 24
16803: PUSH
16804: LD_EXP 62
16808: AND
16809: IFFALSE 16938
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
// begin uc_side := 0 ;
16817: LD_ADDR_OWVAR 20
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// uc_nation := nation_arabian ;
16825: LD_ADDR_OWVAR 21
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// hc_gallery :=  ;
16833: LD_ADDR_OWVAR 33
16837: PUSH
16838: LD_STRING 
16840: ST_TO_ADDR
// hc_name :=  ;
16841: LD_ADDR_OWVAR 26
16845: PUSH
16846: LD_STRING 
16848: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16849: LD_INT 1
16851: PPUSH
16852: LD_INT 11
16854: PPUSH
16855: LD_INT 10
16857: PPUSH
16858: CALL_OW 380
// un := CreateHuman ;
16862: LD_ADDR_VAR 0 1
16866: PUSH
16867: CALL_OW 44
16871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16884: LD_INT 35
16886: PPUSH
16887: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 22
16898: PUSH
16899: LD_OWVAR 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PPUSH
16908: CALL_OW 69
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 74
16922: PPUSH
16923: CALL_OW 115
// until IsDead ( un ) ;
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 301
16936: IFFALSE 16884
// end ;
16938: PPOPN 1
16940: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16941: LD_EXP 24
16945: PUSH
16946: LD_EXP 64
16950: AND
16951: IFFALSE 16963
16953: GO 16955
16955: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16956: LD_STRING earthquake(getX(game), 0, 32)
16958: PPUSH
16959: CALL_OW 559
16963: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16964: LD_EXP 24
16968: PUSH
16969: LD_EXP 65
16973: AND
16974: IFFALSE 17065
16976: GO 16978
16978: DISABLE
16979: LD_INT 0
16981: PPUSH
// begin enable ;
16982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: LD_INT 22
16990: PUSH
16991: LD_OWVAR 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 21
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 33
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PPUSH
17025: CALL_OW 69
17029: ST_TO_ADDR
// if not tmp then
17030: LD_VAR 0 1
17034: NOT
17035: IFFALSE 17039
// exit ;
17037: GO 17065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17039: LD_VAR 0 1
17043: PUSH
17044: LD_INT 1
17046: PPUSH
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 12
17056: ARRAY
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL_OW 234
// end ;
17065: PPOPN 1
17067: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17068: LD_EXP 24
17072: PUSH
17073: LD_EXP 66
17077: AND
17078: IFFALSE 17219
17080: GO 17082
17082: DISABLE
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
17087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17088: LD_ADDR_VAR 0 3
17092: PUSH
17093: LD_INT 22
17095: PUSH
17096: LD_OWVAR 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 25
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PPUSH
17119: CALL_OW 69
17123: ST_TO_ADDR
// if not tmp then
17124: LD_VAR 0 3
17128: NOT
17129: IFFALSE 17133
// exit ;
17131: GO 17219
// un := tmp [ rand ( 1 , tmp ) ] ;
17133: LD_ADDR_VAR 0 2
17137: PUSH
17138: LD_VAR 0 3
17142: PUSH
17143: LD_INT 1
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: CALL_OW 12
17155: ARRAY
17156: ST_TO_ADDR
// if Crawls ( un ) then
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 318
17166: IFFALSE 17177
// ComWalk ( un ) ;
17168: LD_VAR 0 2
17172: PPUSH
17173: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17177: LD_VAR 0 2
17181: PPUSH
17182: LD_INT 9
17184: PPUSH
17185: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17189: LD_INT 28
17191: PPUSH
17192: LD_OWVAR 2
17196: PPUSH
17197: LD_INT 2
17199: PPUSH
17200: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17204: LD_INT 29
17206: PPUSH
17207: LD_OWVAR 2
17211: PPUSH
17212: LD_INT 2
17214: PPUSH
17215: CALL_OW 322
// end ;
17219: PPOPN 3
17221: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17222: LD_EXP 24
17226: PUSH
17227: LD_EXP 67
17231: AND
17232: IFFALSE 17343
17234: GO 17236
17236: DISABLE
17237: LD_INT 0
17239: PPUSH
17240: PPUSH
17241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17242: LD_ADDR_VAR 0 3
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 25
17261: PUSH
17262: LD_INT 1
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if not tmp then
17278: LD_VAR 0 3
17282: NOT
17283: IFFALSE 17287
// exit ;
17285: GO 17343
// un := tmp [ rand ( 1 , tmp ) ] ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_VAR 0 3
17296: PUSH
17297: LD_INT 1
17299: PPUSH
17300: LD_VAR 0 3
17304: PPUSH
17305: CALL_OW 12
17309: ARRAY
17310: ST_TO_ADDR
// if Crawls ( un ) then
17311: LD_VAR 0 2
17315: PPUSH
17316: CALL_OW 318
17320: IFFALSE 17331
// ComWalk ( un ) ;
17322: LD_VAR 0 2
17326: PPUSH
17327: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17331: LD_VAR 0 2
17335: PPUSH
17336: LD_INT 8
17338: PPUSH
17339: CALL_OW 336
// end ;
17343: PPOPN 3
17345: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17346: LD_EXP 24
17350: PUSH
17351: LD_EXP 68
17355: AND
17356: IFFALSE 17500
17358: GO 17360
17360: DISABLE
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_OWVAR 2
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 21
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 34
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 34
17407: PUSH
17408: LD_INT 51
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 34
17417: PUSH
17418: LD_INT 32
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 2
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17500
// for i in tmp do
17450: LD_ADDR_VAR 0 1
17454: PUSH
17455: LD_VAR 0 2
17459: PUSH
17460: FOR_IN
17461: IFFALSE 17498
// if GetCargo ( i , mat_artifact ) = 0 then
17463: LD_VAR 0 1
17467: PPUSH
17468: LD_INT 4
17470: PPUSH
17471: CALL_OW 289
17475: PUSH
17476: LD_INT 0
17478: EQUAL
17479: IFFALSE 17496
// SetCargo ( i , mat_siberit , 100 ) ;
17481: LD_VAR 0 1
17485: PPUSH
17486: LD_INT 3
17488: PPUSH
17489: LD_INT 100
17491: PPUSH
17492: CALL_OW 290
17496: GO 17460
17498: POP
17499: POP
// end ;
17500: PPOPN 2
17502: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17503: LD_EXP 24
17507: PUSH
17508: LD_EXP 69
17512: AND
17513: IFFALSE 17666
17515: GO 17517
17517: DISABLE
17518: LD_INT 0
17520: PPUSH
17521: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17522: LD_ADDR_VAR 0 2
17526: PUSH
17527: LD_INT 22
17529: PUSH
17530: LD_OWVAR 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 69
17543: ST_TO_ADDR
// if not tmp then
17544: LD_VAR 0 2
17548: NOT
17549: IFFALSE 17553
// exit ;
17551: GO 17666
// for i := 1 to 2 do
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: DOUBLE
17559: LD_INT 1
17561: DEC
17562: ST_TO_ADDR
17563: LD_INT 2
17565: PUSH
17566: FOR_TO
17567: IFFALSE 17664
// begin uc_side := your_side ;
17569: LD_ADDR_OWVAR 20
17573: PUSH
17574: LD_OWVAR 2
17578: ST_TO_ADDR
// uc_nation := nation_american ;
17579: LD_ADDR_OWVAR 21
17583: PUSH
17584: LD_INT 1
17586: ST_TO_ADDR
// vc_chassis := us_morphling ;
17587: LD_ADDR_OWVAR 37
17591: PUSH
17592: LD_INT 5
17594: ST_TO_ADDR
// vc_engine := engine_siberite ;
17595: LD_ADDR_OWVAR 39
17599: PUSH
17600: LD_INT 3
17602: ST_TO_ADDR
// vc_control := control_computer ;
17603: LD_ADDR_OWVAR 38
17607: PUSH
17608: LD_INT 3
17610: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17611: LD_ADDR_OWVAR 40
17615: PUSH
17616: LD_INT 10
17618: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
17619: CALL_OW 45
17623: PPUSH
17624: LD_VAR 0 2
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: PPUSH
17633: CALL_OW 250
17637: PPUSH
17638: LD_VAR 0 2
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: CALL_OW 251
17651: PPUSH
17652: LD_INT 12
17654: PPUSH
17655: LD_INT 1
17657: PPUSH
17658: CALL_OW 50
// end ;
17662: GO 17566
17664: POP
17665: POP
// end ;
17666: PPOPN 2
17668: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17669: LD_EXP 24
17673: PUSH
17674: LD_EXP 70
17678: AND
17679: IFFALSE 17901
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17692: LD_ADDR_VAR 0 6
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_OWVAR 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 21
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: LD_INT 23
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 6
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17901
// s1 := rand ( 1 , 4 ) ;
17755: LD_ADDR_VAR 0 2
17759: PUSH
17760: LD_INT 1
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 12
17770: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17771: LD_ADDR_VAR 0 4
17775: PUSH
17776: LD_VAR 0 6
17780: PUSH
17781: LD_INT 1
17783: ARRAY
17784: PPUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: CALL_OW 259
17794: ST_TO_ADDR
// if s1 = 1 then
17795: LD_VAR 0 2
17799: PUSH
17800: LD_INT 1
17802: EQUAL
17803: IFFALSE 17823
// s2 := rand ( 2 , 4 ) else
17805: LD_ADDR_VAR 0 3
17809: PUSH
17810: LD_INT 2
17812: PPUSH
17813: LD_INT 4
17815: PPUSH
17816: CALL_OW 12
17820: ST_TO_ADDR
17821: GO 17831
// s2 := 1 ;
17823: LD_ADDR_VAR 0 3
17827: PUSH
17828: LD_INT 1
17830: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17831: LD_ADDR_VAR 0 5
17835: PUSH
17836: LD_VAR 0 6
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: CALL_OW 259
17854: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17855: LD_VAR 0 6
17859: PUSH
17860: LD_INT 1
17862: ARRAY
17863: PPUSH
17864: LD_VAR 0 2
17868: PPUSH
17869: LD_VAR 0 5
17873: PPUSH
17874: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17878: LD_VAR 0 6
17882: PUSH
17883: LD_INT 1
17885: ARRAY
17886: PPUSH
17887: LD_VAR 0 3
17891: PPUSH
17892: LD_VAR 0 4
17896: PPUSH
17897: CALL_OW 237
// end ;
17901: PPOPN 6
17903: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17904: LD_EXP 24
17908: PUSH
17909: LD_EXP 71
17913: AND
17914: IFFALSE 17993
17916: GO 17918
17918: DISABLE
17919: LD_INT 0
17921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17922: LD_ADDR_VAR 0 1
17926: PUSH
17927: LD_INT 22
17929: PUSH
17930: LD_OWVAR 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 30
17941: PUSH
17942: LD_INT 3
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 1
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 17993
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 12
17984: ARRAY
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 234
// end ;
17993: PPOPN 1
17995: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17996: LD_EXP 24
18000: PUSH
18001: LD_EXP 72
18005: AND
18006: IFFALSE 18118
18008: GO 18010
18010: DISABLE
18011: LD_INT 0
18013: PPUSH
18014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18015: LD_ADDR_VAR 0 2
18019: PUSH
18020: LD_INT 22
18022: PUSH
18023: LD_OWVAR 2
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: LD_INT 30
18037: PUSH
18038: LD_INT 27
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 30
18047: PUSH
18048: LD_INT 26
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 30
18057: PUSH
18058: LD_INT 28
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PPUSH
18075: CALL_OW 69
18079: ST_TO_ADDR
// if not tmp then
18080: LD_VAR 0 2
18084: NOT
18085: IFFALSE 18089
// exit ;
18087: GO 18118
// for i in tmp do
18089: LD_ADDR_VAR 0 1
18093: PUSH
18094: LD_VAR 0 2
18098: PUSH
18099: FOR_IN
18100: IFFALSE 18116
// SetLives ( i , 1 ) ;
18102: LD_VAR 0 1
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 234
18114: GO 18099
18116: POP
18117: POP
// end ;
18118: PPOPN 2
18120: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18121: LD_EXP 24
18125: PUSH
18126: LD_EXP 73
18130: AND
18131: IFFALSE 18405
18133: GO 18135
18135: DISABLE
18136: LD_INT 0
18138: PPUSH
18139: PPUSH
18140: PPUSH
// begin i := rand ( 1 , 7 ) ;
18141: LD_ADDR_VAR 0 1
18145: PUSH
18146: LD_INT 1
18148: PPUSH
18149: LD_INT 7
18151: PPUSH
18152: CALL_OW 12
18156: ST_TO_ADDR
// case i of 1 :
18157: LD_VAR 0 1
18161: PUSH
18162: LD_INT 1
18164: DOUBLE
18165: EQUAL
18166: IFTRUE 18170
18168: GO 18180
18170: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18171: LD_STRING earthquake(getX(game), 0, 32)
18173: PPUSH
18174: CALL_OW 559
18178: GO 18405
18180: LD_INT 2
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18202
18188: POP
// begin ToLua ( displayStucuk(); ) ;
18189: LD_STRING displayStucuk();
18191: PPUSH
18192: CALL_OW 559
// ResetFog ;
18196: CALL_OW 335
// end ; 3 :
18200: GO 18405
18202: LD_INT 3
18204: DOUBLE
18205: EQUAL
18206: IFTRUE 18210
18208: GO 18314
18210: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18211: LD_ADDR_VAR 0 2
18215: PUSH
18216: LD_INT 22
18218: PUSH
18219: LD_OWVAR 2
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 25
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: ST_TO_ADDR
// if not tmp then
18247: LD_VAR 0 2
18251: NOT
18252: IFFALSE 18256
// exit ;
18254: GO 18405
// un := tmp [ rand ( 1 , tmp ) ] ;
18256: LD_ADDR_VAR 0 3
18260: PUSH
18261: LD_VAR 0 2
18265: PUSH
18266: LD_INT 1
18268: PPUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: CALL_OW 12
18278: ARRAY
18279: ST_TO_ADDR
// if Crawls ( un ) then
18280: LD_VAR 0 3
18284: PPUSH
18285: CALL_OW 318
18289: IFFALSE 18300
// ComWalk ( un ) ;
18291: LD_VAR 0 3
18295: PPUSH
18296: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18300: LD_VAR 0 3
18304: PPUSH
18305: LD_INT 8
18307: PPUSH
18308: CALL_OW 336
// end ; 4 :
18312: GO 18405
18314: LD_INT 4
18316: DOUBLE
18317: EQUAL
18318: IFTRUE 18322
18320: GO 18383
18322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_OWVAR 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 30
18342: PUSH
18343: LD_INT 29
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: ST_TO_ADDR
// if not tmp then
18359: LD_VAR 0 2
18363: NOT
18364: IFFALSE 18368
// exit ;
18366: GO 18405
// DestroyUnit ( tmp [ 1 ] ) ;
18368: LD_VAR 0 2
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: PPUSH
18377: CALL_OW 65
// end ; 5 .. 7 :
18381: GO 18405
18383: LD_INT 5
18385: DOUBLE
18386: GREATEREQUAL
18387: IFFALSE 18395
18389: LD_INT 7
18391: DOUBLE
18392: LESSEQUAL
18393: IFTRUE 18397
18395: GO 18404
18397: POP
// StreamSibBomb ; end ;
18398: CALL 14685 0 0
18402: GO 18405
18404: POP
// end ;
18405: PPOPN 3
18407: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18408: LD_EXP 24
18412: PUSH
18413: LD_EXP 74
18417: AND
18418: IFFALSE 18574
18420: GO 18422
18422: DISABLE
18423: LD_INT 0
18425: PPUSH
18426: PPUSH
18427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18428: LD_ADDR_VAR 0 2
18432: PUSH
18433: LD_INT 81
18435: PUSH
18436: LD_OWVAR 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 21
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 21
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PPUSH
18477: CALL_OW 69
18481: ST_TO_ADDR
// if not tmp then
18482: LD_VAR 0 2
18486: NOT
18487: IFFALSE 18491
// exit ;
18489: GO 18574
// p := 0 ;
18491: LD_ADDR_VAR 0 3
18495: PUSH
18496: LD_INT 0
18498: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18499: LD_INT 35
18501: PPUSH
18502: CALL_OW 67
// p := p + 1 ;
18506: LD_ADDR_VAR 0 3
18510: PUSH
18511: LD_VAR 0 3
18515: PUSH
18516: LD_INT 1
18518: PLUS
18519: ST_TO_ADDR
// for i in tmp do
18520: LD_ADDR_VAR 0 1
18524: PUSH
18525: LD_VAR 0 2
18529: PUSH
18530: FOR_IN
18531: IFFALSE 18562
// if GetLives ( i ) < 1000 then
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 256
18542: PUSH
18543: LD_INT 1000
18545: LESS
18546: IFFALSE 18560
// SetLives ( i , 1000 ) ;
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 1000
18555: PPUSH
18556: CALL_OW 234
18560: GO 18530
18562: POP
18563: POP
// until p > 20 ;
18564: LD_VAR 0 3
18568: PUSH
18569: LD_INT 20
18571: GREATER
18572: IFFALSE 18499
// end ;
18574: PPOPN 3
18576: END
// every 0 0$1 trigger StreamModeActive and sTime do
18577: LD_EXP 24
18581: PUSH
18582: LD_EXP 75
18586: AND
18587: IFFALSE 18622
18589: GO 18591
18591: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18592: LD_INT 28
18594: PPUSH
18595: LD_OWVAR 2
18599: PPUSH
18600: LD_INT 2
18602: PPUSH
18603: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18607: LD_INT 30
18609: PPUSH
18610: LD_OWVAR 2
18614: PPUSH
18615: LD_INT 2
18617: PPUSH
18618: CALL_OW 322
// end ;
18622: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18623: LD_EXP 24
18627: PUSH
18628: LD_EXP 76
18632: AND
18633: IFFALSE 18754
18635: GO 18637
18637: DISABLE
18638: LD_INT 0
18640: PPUSH
18641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_INT 22
18649: PUSH
18650: LD_OWVAR 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 21
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 3
18671: PUSH
18672: LD_INT 23
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: PPUSH
18691: CALL_OW 69
18695: ST_TO_ADDR
// if not tmp then
18696: LD_VAR 0 2
18700: NOT
18701: IFFALSE 18705
// exit ;
18703: GO 18754
// for i in tmp do
18705: LD_ADDR_VAR 0 1
18709: PUSH
18710: LD_VAR 0 2
18714: PUSH
18715: FOR_IN
18716: IFFALSE 18752
// begin if Crawls ( i ) then
18718: LD_VAR 0 1
18722: PPUSH
18723: CALL_OW 318
18727: IFFALSE 18738
// ComWalk ( i ) ;
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 138
// SetClass ( i , 2 ) ;
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_INT 2
18745: PPUSH
18746: CALL_OW 336
// end ;
18750: GO 18715
18752: POP
18753: POP
// end ;
18754: PPOPN 2
18756: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18757: LD_EXP 24
18761: PUSH
18762: LD_EXP 77
18766: AND
18767: IFFALSE 19048
18769: GO 18771
18771: DISABLE
18772: LD_INT 0
18774: PPUSH
18775: PPUSH
18776: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18777: LD_OWVAR 2
18781: PPUSH
18782: LD_INT 9
18784: PPUSH
18785: LD_INT 1
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18795: LD_INT 9
18797: PPUSH
18798: LD_OWVAR 2
18802: PPUSH
18803: CALL_OW 343
// uc_side := 9 ;
18807: LD_ADDR_OWVAR 20
18811: PUSH
18812: LD_INT 9
18814: ST_TO_ADDR
// uc_nation := 2 ;
18815: LD_ADDR_OWVAR 21
18819: PUSH
18820: LD_INT 2
18822: ST_TO_ADDR
// hc_name := Dark Warrior ;
18823: LD_ADDR_OWVAR 26
18827: PUSH
18828: LD_STRING Dark Warrior
18830: ST_TO_ADDR
// hc_gallery :=  ;
18831: LD_ADDR_OWVAR 33
18835: PUSH
18836: LD_STRING 
18838: ST_TO_ADDR
// hc_noskilllimit := true ;
18839: LD_ADDR_OWVAR 76
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18847: LD_ADDR_OWVAR 31
18851: PUSH
18852: LD_INT 30
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 30
18860: PUSH
18861: LD_INT 30
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// un := CreateHuman ;
18870: LD_ADDR_VAR 0 3
18874: PUSH
18875: CALL_OW 44
18879: ST_TO_ADDR
// hc_noskilllimit := false ;
18880: LD_ADDR_OWVAR 76
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18888: LD_VAR 0 3
18892: PPUSH
18893: LD_INT 1
18895: PPUSH
18896: CALL_OW 51
// p := 0 ;
18900: LD_ADDR_VAR 0 2
18904: PUSH
18905: LD_INT 0
18907: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18908: LD_INT 35
18910: PPUSH
18911: CALL_OW 67
// p := p + 1 ;
18915: LD_ADDR_VAR 0 2
18919: PUSH
18920: LD_VAR 0 2
18924: PUSH
18925: LD_INT 1
18927: PLUS
18928: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18929: LD_VAR 0 3
18933: PPUSH
18934: CALL_OW 256
18938: PUSH
18939: LD_INT 1000
18941: LESS
18942: IFFALSE 18956
// SetLives ( un , 1000 ) ;
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 1000
18951: PPUSH
18952: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18956: LD_VAR 0 3
18960: PPUSH
18961: LD_INT 81
18963: PUSH
18964: LD_OWVAR 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 91
18975: PUSH
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 30
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: CALL_OW 74
19007: PPUSH
19008: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19012: LD_VAR 0 2
19016: PUSH
19017: LD_INT 60
19019: GREATER
19020: PUSH
19021: LD_VAR 0 3
19025: PPUSH
19026: CALL_OW 301
19030: OR
19031: IFFALSE 18908
// if un then
19033: LD_VAR 0 3
19037: IFFALSE 19048
// RemoveUnit ( un ) ;
19039: LD_VAR 0 3
19043: PPUSH
19044: CALL_OW 64
// end ; end_of_file end_of_file
19048: PPOPN 3
19050: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19051: LD_INT 0
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL_OW 264
19066: PUSH
19067: LD_EXP 82
19071: EQUAL
19072: IFFALSE 19144
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19074: LD_INT 68
19076: PPUSH
19077: LD_VAR 0 1
19081: PPUSH
19082: CALL_OW 255
19086: PPUSH
19087: CALL_OW 321
19091: PUSH
19092: LD_INT 2
19094: EQUAL
19095: IFFALSE 19107
// eff := 70 else
19097: LD_ADDR_VAR 0 4
19101: PUSH
19102: LD_INT 70
19104: ST_TO_ADDR
19105: GO 19115
// eff := 30 ;
19107: LD_ADDR_VAR 0 4
19111: PUSH
19112: LD_INT 30
19114: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19115: LD_VAR 0 1
19119: PPUSH
19120: CALL_OW 250
19124: PPUSH
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 251
19134: PPUSH
19135: LD_VAR 0 4
19139: PPUSH
19140: CALL_OW 495
// end ; end ;
19144: LD_VAR 0 2
19148: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19149: LD_INT 0
19151: PPUSH
// end ;
19152: LD_VAR 0 4
19156: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
19164: PPUSH
// if cmd = 124 then
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 124
19172: EQUAL
19173: IFFALSE 19379
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 34
19185: PUSH
19186: LD_INT 53
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 34
19195: PUSH
19196: LD_INT 14
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: ST_TO_ADDR
// if not tmp then
19213: LD_VAR 0 5
19217: NOT
19218: IFFALSE 19222
// exit ;
19220: GO 19379
// for i in tmp do
19222: LD_ADDR_VAR 0 3
19226: PUSH
19227: LD_VAR 0 5
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19377
// begin taskList := GetTaskList ( i ) ;
19235: LD_ADDR_VAR 0 6
19239: PUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 437
19249: ST_TO_ADDR
// if not taskList then
19250: LD_VAR 0 6
19254: NOT
19255: IFFALSE 19259
// continue ;
19257: GO 19232
// for j = 1 to taskList do
19259: LD_ADDR_VAR 0 4
19263: PUSH
19264: DOUBLE
19265: LD_INT 1
19267: DEC
19268: ST_TO_ADDR
19269: LD_VAR 0 6
19273: PUSH
19274: FOR_TO
19275: IFFALSE 19373
// if taskList [ j ] [ 1 ] = | then
19277: LD_VAR 0 6
19281: PUSH
19282: LD_VAR 0 4
19286: ARRAY
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PUSH
19292: LD_STRING |
19294: EQUAL
19295: IFFALSE 19371
// begin _taskList := Delete ( taskList , 1 ) ;
19297: LD_ADDR_VAR 0 7
19301: PUSH
19302: LD_VAR 0 6
19306: PPUSH
19307: LD_INT 1
19309: PPUSH
19310: CALL_OW 3
19314: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
19315: LD_VAR 0 3
19319: PPUSH
19320: LD_VAR 0 7
19324: PPUSH
19325: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_VAR 0 6
19338: PUSH
19339: LD_VAR 0 4
19343: ARRAY
19344: PUSH
19345: LD_INT 2
19347: ARRAY
19348: PPUSH
19349: LD_VAR 0 6
19353: PUSH
19354: LD_VAR 0 4
19358: ARRAY
19359: PUSH
19360: LD_INT 3
19362: ARRAY
19363: PPUSH
19364: LD_INT 8
19366: PPUSH
19367: CALL 19384 0 4
// end ;
19371: GO 19274
19373: POP
19374: POP
// end ;
19375: GO 19232
19377: POP
19378: POP
// end ; end ;
19379: LD_VAR 0 2
19383: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19384: LD_INT 0
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
19391: PPUSH
19392: PPUSH
19393: PPUSH
19394: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19395: LD_VAR 0 1
19399: NOT
19400: PUSH
19401: LD_VAR 0 2
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: CALL_OW 488
19415: NOT
19416: OR
19417: PUSH
19418: LD_VAR 0 4
19422: NOT
19423: OR
19424: IFFALSE 19428
// exit ;
19426: GO 19768
// list := [ ] ;
19428: LD_ADDR_VAR 0 13
19432: PUSH
19433: EMPTY
19434: ST_TO_ADDR
// if x - r < 0 then
19435: LD_VAR 0 2
19439: PUSH
19440: LD_VAR 0 4
19444: MINUS
19445: PUSH
19446: LD_INT 0
19448: LESS
19449: IFFALSE 19461
// min_x := 0 else
19451: LD_ADDR_VAR 0 7
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
19459: GO 19477
// min_x := x - r ;
19461: LD_ADDR_VAR 0 7
19465: PUSH
19466: LD_VAR 0 2
19470: PUSH
19471: LD_VAR 0 4
19475: MINUS
19476: ST_TO_ADDR
// if y - r < 0 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_VAR 0 4
19486: MINUS
19487: PUSH
19488: LD_INT 0
19490: LESS
19491: IFFALSE 19503
// min_y := 0 else
19493: LD_ADDR_VAR 0 8
19497: PUSH
19498: LD_INT 0
19500: ST_TO_ADDR
19501: GO 19519
// min_y := y - r ;
19503: LD_ADDR_VAR 0 8
19507: PUSH
19508: LD_VAR 0 3
19512: PUSH
19513: LD_VAR 0 4
19517: MINUS
19518: ST_TO_ADDR
// max_x := x + r ;
19519: LD_ADDR_VAR 0 9
19523: PUSH
19524: LD_VAR 0 2
19528: PUSH
19529: LD_VAR 0 4
19533: PLUS
19534: ST_TO_ADDR
// max_y := y + r ;
19535: LD_ADDR_VAR 0 10
19539: PUSH
19540: LD_VAR 0 3
19544: PUSH
19545: LD_VAR 0 4
19549: PLUS
19550: ST_TO_ADDR
// for _x = min_x to max_x do
19551: LD_ADDR_VAR 0 11
19555: PUSH
19556: DOUBLE
19557: LD_VAR 0 7
19561: DEC
19562: ST_TO_ADDR
19563: LD_VAR 0 9
19567: PUSH
19568: FOR_TO
19569: IFFALSE 19686
// for _y = min_y to max_y do
19571: LD_ADDR_VAR 0 12
19575: PUSH
19576: DOUBLE
19577: LD_VAR 0 8
19581: DEC
19582: ST_TO_ADDR
19583: LD_VAR 0 10
19587: PUSH
19588: FOR_TO
19589: IFFALSE 19682
// begin if not ValidHex ( _x , _y ) then
19591: LD_VAR 0 11
19595: PPUSH
19596: LD_VAR 0 12
19600: PPUSH
19601: CALL_OW 488
19605: NOT
19606: IFFALSE 19610
// continue ;
19608: GO 19588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19610: LD_VAR 0 11
19614: PPUSH
19615: LD_VAR 0 12
19619: PPUSH
19620: CALL_OW 351
19624: PUSH
19625: LD_VAR 0 11
19629: PPUSH
19630: LD_VAR 0 12
19634: PPUSH
19635: CALL_OW 554
19639: AND
19640: IFFALSE 19680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19642: LD_ADDR_VAR 0 13
19646: PUSH
19647: LD_VAR 0 13
19651: PPUSH
19652: LD_VAR 0 13
19656: PUSH
19657: LD_INT 1
19659: PLUS
19660: PPUSH
19661: LD_VAR 0 11
19665: PUSH
19666: LD_VAR 0 12
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 2
19679: ST_TO_ADDR
// end ;
19680: GO 19588
19682: POP
19683: POP
19684: GO 19568
19686: POP
19687: POP
// if not list then
19688: LD_VAR 0 13
19692: NOT
19693: IFFALSE 19697
// exit ;
19695: GO 19768
// for i in list do
19697: LD_ADDR_VAR 0 6
19701: PUSH
19702: LD_VAR 0 13
19706: PUSH
19707: FOR_IN
19708: IFFALSE 19766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19710: LD_VAR 0 1
19714: PPUSH
19715: LD_STRING M
19717: PUSH
19718: LD_VAR 0 6
19722: PUSH
19723: LD_INT 1
19725: ARRAY
19726: PUSH
19727: LD_VAR 0 6
19731: PUSH
19732: LD_INT 2
19734: ARRAY
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: PPUSH
19760: CALL_OW 447
19764: GO 19707
19766: POP
19767: POP
// end ; end_of_file
19768: LD_VAR 0 5
19772: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19773: GO 19775
19775: DISABLE
// begin ru_radar := 98 ;
19776: LD_ADDR_EXP 78
19780: PUSH
19781: LD_INT 98
19783: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19784: LD_ADDR_EXP 79
19788: PUSH
19789: LD_INT 89
19791: ST_TO_ADDR
// us_hack := 99 ;
19792: LD_ADDR_EXP 80
19796: PUSH
19797: LD_INT 99
19799: ST_TO_ADDR
// us_artillery := 97 ;
19800: LD_ADDR_EXP 81
19804: PUSH
19805: LD_INT 97
19807: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19808: LD_ADDR_EXP 82
19812: PUSH
19813: LD_INT 91
19815: ST_TO_ADDR
// end ;
19816: END
